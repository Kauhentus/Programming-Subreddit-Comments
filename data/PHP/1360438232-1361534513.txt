Don't fight it, man. Just drop them and save a whole load of pain later. It sounds like your project enjoys laying traps for rookies. Who on Earth would want to run a project like that? If people question why the tags are "missing" then explain they are *not* "missing"; they are simply not there. Tell them to go read up why, and learn. Simples!
More to the point, issues in blocks of code that output spaces after closing ?&gt;, but before output buffering is turned on to catch them.
That is a fantastic mobile website that FortRabbit have there by the way.
Ahh wow, I'm really surprised I didn't catch that. Thank you so much. That fixed it perfectly.
I have a project using klein. It's ok.
why'd wait for the first non comment line to throw an error?
This is the most well balanced response from what I can see. Four dependencies really is not a big deal for a composer friendly option. I don't see any other way of doing this without building your own solution from the ground up.
You wouldn't be a particularly useful asset if you don't master the language you're programming in. Yes, you should know PHP, but there's nothing wrong with building software with the use of a framework. There's no versus here, you're presenting a false dichotomy. 
For everyone downvoting you and anyone else reading this, there is a reason why one might opt to _always_ close their files with a closing tag. If you know that all of your PHP files are supposed to be closed, and you open a file over a network it becomes obvious that only part of the file was transferred correctly when you notice that it's missing the closing tag. However, this is an extremely rare occurrance and using source control should ensure you never have this problem
A framework is just a tool (or collection of tools really). If you were applying for a job as a carpenter the ability to use a router or lathe might be a plus but you still need to basically understand how to work with wood and what a chisel is. Frameworks will teach you a lot about PHP so they're worth leaning but eventually you should be ABLE to write your own, even if it's not advisable in most situations. So it's not either/or.
It depends how smart you are and where you see yourself in a few years. Some people make good money throwing together sites with a combination of Wordpress and Drupal with some plugins, or with a well-known RAD framework like Cake or CodeIgniter that just lets them use PHP as a bit of glue and a bit of config. If you're not a grade-A student that's not a bad place to be. If you see PHP as a step to doing some serious programming though, you will want to understand how and why frameworks work as they do. Try building your own (very simple) one, and look at how others handle routing, front controllers, templates, views and so one. If I'm hiring a junior, I'm not looking for someone with a boatload of experience, but I do want someone who understands what frameworks are, why they are used and what the general layout of an MVC framework is. That's valuable. So is knowing how and why to use SVN/Git, what unit tests are and how to write them, how to call a REST API and so on.
Um, it's pretty easy. If you can't figure it out relatively quickly, I'm sorry ;-/
I'm in the exact same position. I'm curious - do you have a degree? I don't have a degree but I'm going to try and find a position somewhere nonetheless so I can go back to school and finish up my degree. Do you have a github account I can follow? I would certainly like to keep track of anybody with my same goals. edit: Also, what does your name mean?
Second year CS, can't wait until it's over. I just want to start working. Nothing on GitHub yet but should have soon.
The mod of /r/php /u/jtreminio has a pretty outstanding [tutorial](http://jtreminio.com/2012/04/setting-up-an-ubuntu-vm-step-by-step/). Btw thanks hopeseekr I'm not sure when you're most useless, when you're offering your workshops or when you're not.
The issue is that OP has short_open_tags enabled (WHY?) so after PHP failed to match "&lt;?php\s" it treats the "&lt;?" as the open tag, so the next thing is "php" (an identifier) followed by some comments and whitespace and then a T_VARIABLE. And identifier followed by variable makes no sense, so that's where the error happens. Also, I think that this post should be on /r/phphelp, not /r/php.
Can't speak to Windows as a host, but on OS X with VMWare Fusion, an Ubuntu server install with all the defaults was all I needed. From there on the guest os I just installed my toolchain (apt-get install apache, postgres, php5, etc...). If you want to then get a little advanced with it, you can install avahi, and setup some virtualhosts so you can access the VM from any computer on your network with pretty hostnames. e.g. http://application.vm.local This is a great path to go down and don't get discouraged if you run into roadblocks. The advantages of working with VMs as your sandbox are many. If you have any specific questions I'd be more than happy to answer them. Good luck!
Have you looked at [respect\rest](https://github.com/Respect/Rest)? Might fit the bill. 
I think you need to know enough of the underlying language to understand what the framework is doing for you. Typically that comes from folks rolling their own framework for awhile, realizing there's a ton of features in X framework that they want, and then finally migrating to that framework instead of trying to re-invent the wheel. Another good example is being able to adapt a framework or write plugins when it doesn't do quite what you want. Take something like Monolog -- it's easy to write new message processors and formatters, but a number of junior developers would struggle to do anything but what's provided. If you're working on portfolio PHP projects, I'd recommend doing a combination of both. Use Composer to get Silex, Twig and Monolog. Your portfolio project will probably be small enough that you only end up with a few routes in Silex but you'll be able to show that you can both use framework code, write to the PSR standards, and then highlight your model classes where you're doing your own, custom PHP. 
Building from scratch does give you some additional experience, but is also a waste of your time. Better learn one or two frameworks instead, cause while learning a framework you also learn some basic principles (like front controller, request routing, mvc) and the language itself (if framework is advanced enough). Additionally, when learning a big framework like Symfony, you learn good OOP practices as well.
&gt; you need to know enough of the underlying language to understand what the framework is doing for you You use a framework -&gt; you see it does smth you don't understand -&gt; you read its source code &amp; related PHP docs -&gt; you understand one more thing in a framework &amp; know smth new about the language. Looks way better to me that not knowing about this language feature and not using it in your own 'reinvented wheel'-framework.
Also there is an awesome feature in Sublime which automatically adds a newline at the end of file. Would screw with headers too, when used with closing ?&gt; tag
How dare you.
I can highly recommend using [Vagrant](http://vagrantup.com) for this!
The number of people who read and understand source code when they don't know exactly how something works is sufficiently small enough to be rounded down to "no one".
If you decided you wanted a desktop version as well... http://lamp.gixx-web.com/ is a pretty good resource. Especially if you have a multi monitor display its pretty cool having desktop linux running side by side with windows. **edit** may be slightly out of date. some of the repo addresses may be off. Should be relatively simple to follow through though.
Considering that I'm one of those people, I don't believe you (=
Is he rigth?
How does being a rounding error feel?
:D I just know I'm not alone ;)
I don't think we're disagreeing with each other, really. But I would recommend starting with a smaller project and honing those skills before diving into a full stack like Zend Framework. It's easier to get lost in Philadelphia than in Punxsutawney. If the OP is looking to build a portfolio project in short order, including a demonstration of the process you described, I would still recommend sticking to smaller, well-respected projects. 
While I agree with some of the comments here about not reinventing the wheel actually reinventing the wheel can be a good thing if nothing but a learning exercise. If all you ever do is consume classes/code written by others you are not going to be a very good programmer. Even if you try writing functionality x from framework y and it fails by comparing your approach to there's you stand more of a chance of leaning the underlying framework than just blindly using frameworks y code. Obviously I'm not saying go and write your own MySQL driver for php, but sometimes actually tackling a problem instead of using someone else's solution can make you better. 
To make sure what the problem was, I tried sending the envelope using CURL, and the request worked fine. Change the namespaces in the CURL request and it fails aswell, I'm tempted to just use CURL and be done with it...
Not professional experience, just the Java that has been covered on my Degree. I'd say I'm intermediate or something. Thanks I'll check them out. Edit: Wow that last link has taught me so much already in about 5 minutes. Thanks man!
&gt; Not professional experience I didn't have any professional Java experience either, but still it improved my common programming skills (= &gt; that last link has taught me so much already in about 5 minutes The right way is right :D You're welcome
Do it the easy way - http://www.vagrantup.com/
Zend is full-full-stack :D Well, just like Symfony And ofc it's totally fine to microframeworks like Silex if it's enough for the project
im a sr. dev with no degrees, nothing on github, just 7 yrs of experience writing random code in many different languages that no one at my office has seen. food for thought.
I was unaware of /r/phphelp so I went straight to the first one that came to mind. I apologize for that. Also, I can't explain why I had short open tags because I wasn't the writer of this script (as you can tell, it is an audio stream player script). I'm completely inexperienced in PHP, so I can't answer why exactly.
Wow, I know I've been at this a while, but I'm kind of shocked that this is even a question. To suggest someone just start using a framework without an understanding of the underlying language, and the ability to code without one is horrible advice. The worst. Unless your goal is to be a drone. Write an OOP scraper of some kind. Build a simple page router/scaffolding. A calculator of some kind. Learn how to extend SPL object libraries. Dynamically process images. DDOS something. In other words, learn to program so you understand why a framework is valuable and why you would choose to use one in the first place. I'm so underwhelmed by this subreddits obsession with which framework is king. It doesn't matter. At all. PHP is pretty freaking incredible all by itself. I'm not anti-framework at all, I've written several myself, a DAL/ORM a few times too. They are necessary, but not the be all end all. Do something fun using PHP. That's what it's about. Who cares how you arrive there. 
This is exactly the scenario under which I develop. I use a Win7 host with virtualbox running Ubuntu 12.04 as my development machine. If you get stuck on something after looking through the tutorials mentioned here, give me a ping, I'll help if I can.
I wouldn't recommend Vagrant to someone who doesn't know how to set up a simple VM.
Fair enough.
I'm glad you liked it. I'm not much in to blogging though.
It's not really a question of maintenance. It's a question of performance. For small projects it wouldn't matter. For complex projects the performance hits become far more noticeable, especially for composite pages that can use dozens of different libraries and components to construct it.
for junior positions they usually consider it a bonus rather than a necessity. for a portfolio I usually stick with simple-ish code that does one thing, but if you have written or want to write something and a framework would help, I don't think it will hurt at all to include in a portfolio, and in fact, it shows that you know enough to not write it from scratch. As far as learning multiple, I would say from most company's standpoint it doesn't make a difference, if you've used a full stack framework then you understand what that entails and how to read docs then you can use a different one. One more thing though, it's very helpful to have a record of contributing to open source projects. It can be almost anything - even just helping to clean up code, improve documentation, write tests, etc. It doesn't have to be a well known or popular thing you contribute to. Mostly people use Github these days and it does a pretty good job of tracking and enumerating your contributions. You can also put your code there as a portfolio. Knowing how to maintain and improve legacy code is also a big benefit, there's a lot of shops that have clients still running php 4.x or early 5.x series that need to be maintained and updated. Even my own web host (nearlyfreespe
I thought this was good: http://www.amazon.com/gp/aw/d/143022925X/ref=mw_dp_sim_ps4?pi=SL500_SY125
I'm comfortable in c++ and java and just basic school projects graduating in may no industry experience besides a big project I worked on for a class that was in c++
It looks fine. However, you're going to hear from everyone here that in order for it to be truly useful, it should be able to be adapted to other databases (MSSQL, SQLITE, Mongo?). As of now it will only support MySQL and MariaDB, if I am not mistaken.
That is my next task to go after.
Did you run the install as an administrator?
This is using PDO, I just wanted to save myself the step of having to bind all the values by hand every time. My MSSQL work requires I work with image datatypes, those require you bind param instead of bind value each entry. When you have hundreds of columns, you want simplicity.
I just want to point out the hilarious irony in having hundreds of columns yet wanting simplicity ;)
I never seen a mssql table with less than a hundred columns.
&gt; You use a framework -&gt; you see it does smth you don't understand -&gt; you read its source code &amp; related PHP docs -&gt; you understand one more thing in a framework &amp; know smth new about the language. Good luck understanding how any of the main frameworks (Zend, Symfony etc) actually do something. They're just layers and layers of OO complexity and design patterns. I would say the main architects and principal programmers of those frameworks are the only ones who have a solid ground zero understanding of how it works and all hangs together. You could get up to that level by coding and contributing for about a year. But just "reading" code doesn't give you full understanding of what it's doing and why, or how a small function is used somewhere else in the system and what else relies on that function.
You're sanitizing the values in the queries through parametrization but not the other variables that are used in generating your SQL query. Either of the following work: $values = array( "`name`) values (NULL); drop table user; -- " =&gt; '0' ); $table = 'user (name) values (NULL); drop table user; --'; $d-&gt;insert($table, $values); Depending on where you're getting that data it's possible for those vars to be untrustworthy as well.
^ THIS. Once you start rebuilding your own framework, youll start to use much more raw code instead of relying on frameworks. Frameworks play a role, and they should be used to fit that role. A fast production to live site benefits from prebuilt stuff, but tailoring code for speed and reliability in an application for me is more important and can cut down the bloat that is a framework. PHP is pretty powerful, and once you get past the simple objects and start to get them talking to each other across multiple levels, youll appreciate knowing your raw PHP.
Don't waste your time. Abstracting database implementations is complete pain in the ass. And anyone who has actually tried to use one of these to migrate to a completely different database platform will tell you it never goes smoothly.
If this is being used on some real project you're working on, I think you're wasting your time. I even hate these models of database interactions and use ORM's instead, which would look finer for this example. $contact = ContactsQuery::create()-&gt;filterById($contactId)-&gt;findOneOrCreate(); $contact-&gt;setName($name); $contact-&gt;setEmail($email); $contact-&gt;save(); This was an example using Propel ORM. But if you're just using it to learn PDO, than good luck, and it looks of for that.
It doesn't matter. Show that you know how to write good quality code.
Have you ever benchmarked Doctrine or Propel to see how much overhead there is, doing things this way? Literally curious if anyone's done this, as they seem hella complex and I can't imagine they execute very fast. Edit: found a [nice post on the matter](http://www.doctrine-project.org/blog/doctrine-performance-revisited.html).
No I haven't benchmarked it. And this sections don't shows up when I profile the pages that need improvement. If you want super fast code, write it in procedural PHP with custom C extensions and on the end spectrum with HipHop. For me, I prefer to have code that is easier to reason about; expresses concisely more things in less lines. My time is wasted only when debugging/maintaining unclear code.
Making your own software is always a better qualification. Because doing your own frameworks means that you understood the general concept of frameworks. But it doesn't hurt to be familiar with the big ones (Symfony, Zend Framework, CodeIgniter and others) I'm not really a friend of Frameworks in general. Frameworks - for me - are rarely fitting for special in-house projects. If you are building your own product, i would strongly disencourage the use of any framework. You are already depending on the functionalities of PHP itself, and with a Framework you'll get even more dependencies. Furthermore, a lot of PHP Frameworks are everything else then good. I had a pretty bad experience with a project using the Autoloader Component of ZF (1, not 2). Long story short, replacing Zends autoloader with a barebones custom autoloader brought a performance increase of 50%. Why i was able to do that? Because i was able to analyse the ZF Autoloader code and i knew how a Autoloader is supposed to work. But, if you're doing customer projects like websites or stuff, i would recommend something like symfony. So, having the general understanding of how components work makes you able to use every framework in the market within a very small timeframe. 
Was going to give you my all time recommendation, but the best one is only available in german :/ darn. It would be this one: http://www.amazon.com/Professionelle-Softwareentwicklung-mit-PHP-5/dp/3898642291/ref=ntt_at_ep_dpt_5 Free Web version: http://professionelle-softwareentwicklung-mit-php5.de/ (just in case you speak german ;) ) In general: Just see that you get something which explicitly deals with PHP 5. This one looks complete: http://www.amazon.com/Learning-MySQL-JavaScript-Step---Step/dp/1449319262/ And yes, MySQL and JS have to be there too ;)
Public attributes are a sin. ;) Also, all your public attributes are required for the class to work, why don't you put them into the class constructor. General rule: Everything which is required for an object to do it's job, put it in the constructor. Also, you might consider to put the whole "make a connection" into a singleton (may be bad) or into a registry class which holds all the objects which are only supposed to be created once at runtime. You have to pass the registry around in your program, but thats a lot cleaner and less error inducing as the current method. Like this: // singleton approach class Database { protected static $instance; protected $host = 'localhost'; protected $dbName = 'mydb'; protected $password = 'password'; protected $user = 'myuser'; public static function getInstance() { if (self::$instance === null) { self::$instance = new self; } return self::$instance; } protected function __construct() { $this-&gt;pdo = new PDO(...); } } // registry approach class Registry { protected $instances = array(); public function getDatabase() { if (isset($this-&gt;instances['db']) === false) { $this-&gt;instances['db'] = new Database(); } return $this-&gt;instances['db']; } } 
Yip. I'm doing almost 8 years in this buisness now, i never switched database engines in a live project once. It's truly useless to abstract it, you are bound by the database technology anyways.
PHP has it's flaws, like any other language has. The main flaw of PHP is that it used to have no real concept, because PHP was never really conceived in the way it's been used today. Regardless, in the Web, PHP is the "tool of choice" for a lot of companies, because you are productive with it and you find a lot of people who can code PHP. More or less. The real problem with PHP is that usually everybody says "i can code php!!!!" and they just can't. PHP gives you a lot of power, and a lot of possibilities to fuck up. Same with C++. But that's a problem of the people and not a problem of the language. I quote Bjarne Stroustrup, creator of C++: "There are only two kinds of programming languages: those people always bitch about and those nobody uses." (src: http://www.stroustrup.com/blast.html) edit: Don't get me wrong. I really like/love Python as a language, but i like PHP too. Both have advantages and disadvantages, like any tool.
I definitely like the sound of trying this. It'll make the big frameworks make a lot more sense I imagine.
Exactly my logic. Why should I ask someone and waste his time (especially that it would be an internet question on some forum) when I can read &amp; understand it all by myself. And I don't even need to read the docs most of the time, it's faster to open a class in editor and read it. This also advances my ability to understand other's code, which is required for a good developer.
hey, since this thread is here, I hope you don't mind if I butt in with a question of my own about the VM situation - does anyone know if, in Virtualbox, is it possible to run a headless server locally, but SSH/FTP into it (or possibly use the shared folder feature) and access it via the browser in the host OS? My main issue with vbox is that I don't want to work in a virtualized OS, but having one like that would make it a lot easier to compile PHP and extensions, and I could keep it's RAM usage down around 200MB, and set it to boot up whenever I boot Windows and run hidden.
that's a pretty good background to have. If you don't need to learn much about programming in general and just need to translate to PHP you're probably better off just perusing [the official manual](http://www.php.net/manual/en/). It's changing quite rapidly so any book that's not a recent edition may already be outdated.
&gt; Frameworks change, the language doesn't. Say that to PHP 5.0, 5.3, 5.4 and 5.5 ;)
That matters only if you're releasing your code under an open source licence *or* you're developing an application for a client with their own hosting infrastructure. Much of the time you're simply developing a one-off solution to solve a particular client's problems and your organisation is responsible for hosting. In this context i'd recommend against abstraction of the db; otherwise the time you're spending time on a feature that is outside of the scope of your project for an eventuality that most likely will not happen.
&gt; you never will fully understand that either because you didn't write it That's a fail. You come to a new job, where they have some project up &amp; running. So you say you will never fully understand it? Then why do you even go there? You know the language, its syntax and how it works. Understanding everything else is a matter of time and effort. If you don't want to waste time or make efforts - it's your problem.
even for simple stuff like a pm ? that would require i guess read?,sender,receiver,title,body, right :P ?
You can use a minimal server install and use VBoxHeadless (included with virtualbox). If you run on Windows 8, try HyperV. It's very nice.
The company I work for is partnered with a parent company that produces a CRM product. The product allows you to add custom fields to the system, all of those fields are stored in a single table. Most of our customers have literally hundreds of custom fields. All stored in a single table. I started creating a product that wasn't using my class, and i found out that PDO cannot INSERT into MSSQL's IMAGE datatype. The only solution at the time, was to list each and every field out and $db-&gt;bindParam on them all. I found it easier to wrap the value in another array and supply LOB for "PDO::PARAM_LOB, 0, PDO::SQLSRV_ENCODING_BINARY" and the rest by default get PARAM_STR
One of the products we work with is SugarCRM, it can be either MySQL or MSSQL at any time.
Because i use this on multiple projects, i needed to be able to copy and paste it to update the copy the project had, so i can't store the connection information. Thats the reason behind no constructor and public attributes.
Would you ever allow an outsider to give you the table name? I never would, the table names are always hard coded by myself. Even if, for some odd reason, i had the user give me the table name, i would go through a switch and just match and still supply my own hard coded name.
You really shouldn't do stuff like this: } catch(PDOException $e) { die($e-&gt;getMessage()); } The last thing you want is the user seeing some horrible DB error. Catch the exception in the client code and do something more useful with it. all this sort of stuff is bad too: if ($this-&gt;debug_query) echo $sql; The client code should decide what to do with debug output not the class itself. (perhaps you want to log it to firephp or whatever).
It's highly possible that I am wasting my time. I would be curious though, how you might write one of my smaller insert queries below. The array('', 'LOB') allows PDO to write to MSSQL IMAGE datatype. The only solution i found to writing to IMAGE was to bindParam each and every value after the prepare statement. $values = array( 'FIELD1' =&gt; '', 'FIELD2' =&gt; '', 'FIELD3' =&gt; '', 'FIELD4' =&gt; '', 'FIELD5' =&gt; '', 'FIELD6' =&gt; '', 'FIELD7' =&gt; '', 'FIELD8' =&gt; '', 'FIELD9' =&gt; '', 'FIELD10' =&gt; array('', 'LOB'), 'FIELD11' =&gt; '', 'FIELD12' =&gt; '', 'FIELD13' =&gt; '', 'FIELD14' =&gt; '', 'FIELD15' =&gt; '', 'FIELD16' =&gt; '', 'FIELD17' =&gt; '', 'FIELD18' =&gt; '', 'FIELD19' =&gt; '', 'FIELD20' =&gt; '', 'FIELD21' =&gt; '', 'FIELD22' =&gt; '', 'FIELD23' =&gt; '', 'FIELD24' =&gt; '', 'FIELD25' =&gt; '', 'FIELD26' =&gt; '', 'FIELD27' =&gt; '', 'FIELD28' =&gt; '', 'FIELD29' =&gt; '', 'FIELD30' =&gt; array('', 'LOB'), 'FIELD31' =&gt; '', 'FIELD32' =&gt; '', 'FIELD33' =&gt; '', 'FIELD34' =&gt; '', 'FIELD35' =&gt; '', 'FIELD36' =&gt; '', 'FIELD37' =&gt; '', 'FIELD38' =&gt; '', 'FIELD39' =&gt; '', ); if ($db-&gt;insert('CALENDAR', $values)) { # Insert worked, continue. } 
I don't understand exactly the problem, what is `array('', 'LOB')`, what does the magic string LOB do?
I think that might be a special case, forget about it. It's a datatype in MSSQL and it requires that you do: $db-&gt;bindParam(':FIELD30', 'Fields Data', PDO::PARAM_LOB, 0, PDO::SQLSRV_ENCODING_BINARY);
No you don't, because the author of this blog post doesn't explain what REST is. Using HTTP verbs and sending JSON back to a client doesn't make a service RESTful, it just makes it lightweight. Here's a very short explanation of what mistakes are usually made by "REST" applications. http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
Ha ha! After I posted that I knew that would be mentioned and that I was being too broad with my statement. Edit: I think the point that stands though is that it's important to know the language and the core fundamentals as then you should be able to pick up any framework fairly easily. 
This is relatively small compared to three other tables i have to deal with. Their not my tables, i have no say in their structure, i just have to deal with it.
Or you could, and I'm just throwing this out here, find a job that doesn't require dealing with horribly designed databases. Life is too short to write shitty code.
trial and error. books cant teach intuition. 
the vagrant looks cool, never tried it. When I dont use xampp, i use virtualbox. You create a vm, attach the iso and install it. You can bridge/Nat/ or make a internal network. Works great. https://www.virtualbox.org/
I can understand the limits, but then again, how would you even code for that type of scenario query while also going for the generic INSERT statement.
Still you get to the point when you understand it all. It could be months, years - depends on the system - but you **will** understand. Same with frameworks.
Sure you'll understand it eventually if you try. But probably not before they've arbitrarily changed the entire code base and rewritten it from scratch e.g. Symfony 2. Now your knowledge is out of date and you need to re-learn the new system.
That was pretty much my point. I'm the only person at my job that isn't a junior and amongst the capable backend guys, we're all working on the same stuff with roughly the same quality of code. Junior is nothing but an excuse for poor pay. The stuff that people used to hire juniors for is now easily delegated to interns.
Why HyperV? I've heard nothing but bad stuff when mentioning HyperV and Linux in the same sentence. I'd much sooner recommend using XenServer than HyperV.
Go download Virtualbox. Download iso of the linux distro you want. Create a virtual machine around the size that you want, I typically use dynamic disk size and set it to about 40gb. Upon starting up the new machine it will ask where the iso file is. You just find it and add it. Wham, bam, it's installed. Also, I typically set my VMs to bridged mode so I can reach them via their IP.
Yeah if you're going to die() right in your catch block then you might as well not catch the exception to begin with. It totally defeats the purpose of exceptions. And a third party library terminating execution is an egregious mistake in design. 
Fuck Drupal will be waaay to big for him 
WordPress is not big. What's wrong with WP? I recently found out about [Pimcore](http://www.pimcore.org/) from this sub, maybe give that a shot?! Seriously though, WordPress is very lightweight on the frontend.
http://get-simple.info/ I think this'll fit nicely. It's XML base, so no need to worry about MySQL. Obviously it's for smaller sites, but it lives up to its name.
I said it was still pretty big, although a minimal install isn't that bad, and it still works very well for small stuff. It would also scale very easily too. 
If you're looking for barebones, I would look at starting with a PHP framework like Symfony, FuelPHP, Laravel, CodeIgniter or something similar and build the models how you want it. As far as CMS applications: * [Symphony](http://getsymphony.com/) * [Fork CMS](http://www.fork-cms.com/) * [Drupal](http://drupal.org/) Personally, I would stay away from drupal.
Personally I prefer Wordpress over Drupal for small stuff advanced custom fields helps a ton
Is that like Drupal's CCK, which is now part of core?
Check out http://getkirby.com or http://www.staceyapp.com/ - Really simple, lightweight CMS that doesn't require a database.
Well, OP needs: &gt;"CMS that'll allow me manage content like posts and pages" Which is what WordPress is good for. The fact OP thinks it's "too big" indicates they may need help down the road, which WP has a large enough community for support. I don't often develop outside of Magento, but when i do, i use WP as a CMS so i can pass it off to another dev.
CMS Made Simple is what we have been running our corp site off for a long while now. Based mostly around smarty tags, and has plug-in and user module support.
A "blogging platform" is a CMS. What does Wordpress do? Manage Content. So it's a CMS. And i would recommend Wordpress too.
yeah I would think Wordpress would be simpler than Drupal
eh. I wouldn't really consider Wordpress a CMS, so I didn't include it in the list. It's not bad, it's not the best but it's certainly a *hell* of a lot better than Drupal.
If one is going to consider the Ruby path, you could also check out [Sinatra](http://www.sinatrarb.com/). It's not a CMS but it's lightweight, it's Ruby and you can get a web site up quickly.
I think most people here will tell you to check out [php.net/filter_var](http://php.net/filter-var). filter_var('bob@example.com', FILTER_VALIDATE_EMAIL);
PHP is perfectly suitable for the job, and I'm sure Rails is as well. I know little of Rails, but PHP has some very powerful CMS platforms that range from simple, to enterprise level complexity. The language shouldn't be a barrier for this type of project :)
I only meant junior by knowledge, not by occupied position
So I'll learn it again, and again, if I want to use it =)
 function validate_email($email) { return filter_var($email, FILTER_VALIDATE_EMAIL); } use 4 spaces in the beginning of each line to tell reddit to display code
I will receive a lot of downvotes (again) for this. But by which definition is wordpress not a CMS? And i am "desperate enough" to pull out the wikipedia hammer: http://en.wikipedia.org/wiki/Wordpress Even they say it's a CMS. Btw, a "wiki" is also what? Right. A CMS. The pure definition of a CMS is "Content Management System". Content means texts and other media like pictures or videos. All this stuff can be done by wordpress, so it's a CMS. Only because it's called "blog-software" it doesn't mean it's not a CMS. That's like saying an SUV is not a car. Btw, this little ragelike rant is not targeted on you, so don't feel offended ;) edit: typo
Thanks for the tip about displaying code. I'm going to give FILTER_VALIDATE_EMAIL a shot. 
I know one of the devs on Concrete5, and from what he's told me it sounds like a great fit.
Yea, that would be the mailbox table. It stores everything about the email, attachments, headers... everything. I've only been able to get Python to successfully read that data and give me what i need, be it body only..etc.
How is a list of PHP frameworks the answer to "I'm looking for a barebones CMS"?
OP wants barebones, what's more barebones than having the basic foundation of the application created and setting up your own schema to fit your needs?
I've NEVER had that problem because I run checksums on the deployed folders, but if you are still using FTP to sync your files and this is a genuine issue for you then you can simply add a comment to the bottom of your file: // EOF TADA. Nothing breaks and you still dont need a ?&gt;.
&gt; Wordpress is a blogging platform. It isn't an E-commerce, bug-tracker, social network, forum, or any of those... Which people seem to forget. What it's meant to be and what it can be are two very different things. You can acommodate Wordpress to do pretty much anything.
I find it rather frustrating that the OP asked a question and I was the only person to answer. &gt; You are thinking of the [PHP-FIG](http://php-fig.org/). Now that answer is hidden by 60+ comments about how much people don't like spaces or omitting optional and unnecessary closing tags. Stick to the topic at hand. There are 1000 conversations about the PSR-1 and PSR-2 style guide, and none of them are constructive. If a style guide differs from your personal preference then use it or don't, but the internet doesn't need to know how you prefer to format your code.
*Standing Ovation*
&gt; Would you ever allow an outsider to give you the table name? I never would Would I? Probably not. But you're writing reusable code here. When I write reusable code I write it under the assumption that I probably won't be the only one using it. You already mention elsewhere that you're allowing outsiders to give you the field names: &gt;The product allows you to add custom fields to the system, all of those fields are stored in a single table. Most of our customers have literally hundreds of custom fields. All stored in a single table. I already demonstrated that it's not just table names that makes you vulnerable, custom field names would as well. Depending on how those customer-defined custom fields are implemented you may or may not be okay. To do your due diligence in this case you could either: audit the third-party code every time the code is reused, establish a chain of trust with all these third parties, or sanitize your inputs... I would choose the last option, and IMO any qualified senior developer would as well.
be aware that this doesn't work with special char domains. you have to split up the domain name (explode('@', $email)) and convert the domain name with one of those functions: http://php.net/manual/en/ref.intl.idn.php It converts stuff like müller.de to xn--mller-kva.de This stuff is common in europe, so every validator should support it ;) Also, be aware that filter_var is a lot slower than a regex, if you care for stuff like that (i use filter_var anyways)
Symphony is absolutely fanastic, but the XSLT hurdle might not be what OP is looking for.
Please don't self - validate email. Apart from needing the @ sign, there's no really trivial restrictions. For example here's some valid ones: * postbox@com * disposable.style.email.with+symbol@example.com * user@[IPv6:2001:db8:1ff::a0b:dbd0] * "much.more unusual"@example.com * !#$%&amp;'*+-/=?^_`{}|~@example.org * " "@example.org
I think the extreme self-validation of emails is over-done. Escape any nasty characters that might be injections attacks, make sure it fits *@*.* and call it good. 
I came to this thread to say exactly this. if (preg_match('/@/', $email)) return true; ... is enough validation. If they enter an incorrect email, they just have to register again. My forms also have to inputs for "email" for this reason.
Hrm - surprised no-one else has comments on this?
Anchor is awesome IMO
The [only real way](http://www.faqs.org/rfcs/rfc2822.html) to tell if an email exists is to send it an email and see if it fails. Failing that, all you really need is some string of characters followed by an at sign, followed by some other string of characters. Anything more than that is going to reject valid emails. These are all valid, even Reddit doesn't auto-link all of them: &gt; admin@localhost &gt; user+filter@gmail.com &gt; aaron.o'conner@university.edu &gt; Håkan.Söderström@malmö.se &gt; punnycode@XN--0ZWM56D.XN--HGBK6AJ7F53BBA &gt; 试@例子.测试.مثال.آزمایشی
Why would you want to write that yourself? Your undoubtedly going to overlook numerous edge-cases. Embrace composer/packagist! https://packagist.org/search/?q=validator I probably lean toward Zend, but that's personal preference - https://packagist.org/packages/zendframework/zend-validator
That's not even close to my logic... The code you presented is an obvious non-risk. In the case of the OP's code it's not as obvious. He's accepting the table name and field names as arguments to a method. They *could* be hard coded, they could not be. In his examples they *are* hard coded but it's obvious in his implementation that they are not. He says he's using this class to build queries for data with hundreds of columns. Do you think he's hard coding all those column names? No, they are most likely being passed in as dynamically generated keys to his array. I provided one example of what a dynamically generated array could do if not properly sanitized, I'm not saying his code is actually going to look like that. By not sanitizing his data he is creating an unnecessary chain of trust with the code that is dynamically generating the arrays. In his examples that code is his so there's no issue, but when writing reusable code it's unwise to assume the code he's trusting will always be his and will be safe.
laravel and for super small stuff I use dispatch.php https://github.com/noodlehaus/dispatch you should also try limonade and slim framework.
So you did - awesome all round :D
WordPress' core *functionality* is not big: provide pages (and posts, same thing) out of the box along with a theming and plugin system. The actual code base is not small, and everything gets included on every page load -- no autoloading. WP is no massive platform like Drupal or Magento, but it's definitely not "small".
&gt; Just because it can do a lot of things (no argument there) doesn't mean it does them as well as others. Interesting, mind elaborating this?
I would suggest [Bolt](http://bolt.cm) It's on 1.0-RC right now, with 1.0 final in a week or so. Very lightweight. Very committed developers. It requires almost no setup. Uses SQLite by default (but also supports MySQL or PostgreSQL). I highly recommend it. It's blazingly fast. It uses Twig for easy templating, and supports extensions if you would like to add some functionality. Fair disclosure: I occasionally contribute some code to Bolt.
CMS Made Simple or GetSimple CMS
I will double check the results, but I have about 7000 names (famous people) so I want to avoid doing each one by hand since the majority of them are correct.
Here is Google's suggested query URL: http://suggestqueries.google.com/complete/search?client=firefox&amp;q={$NAME} Then just iterate over the results, and if the search query isn't in the suggested queries result, then you can flag it to be manually corrected (or just trust Google's first suggestion).
Joomla is a php based CMS you might enjoy. I'm not sure what you mean by "too big" but if you're looking for a well written cms that's relatively light, MVC based, in PHP, with a supportive open source community, and easily expandable for larger sites: Joomla! www.joomla.org 
This costs money. And I have no experience with it. But it looks promising: http://grabaperch.com/
Google will undoubtedly ban you if you do this. They don't allow any automated searches like this.
You are very rude, and when someone points that out you cry "*insults*". That is all.
Remove those quote marks and you've got yourself an accurate comment.
From what I can find, people are really hammering the service and Google doesn't mind/care. Google is serving hundreds of millions of searches with suggested queries every day, so I think they can handle it.
Agreed. Complete waste of time especially considering the awesome developer tools Chrome et al have these days. Code is for computers. If you are actively writing code then keep it clean for maintenance sake, but if it's being generated there really is no benefit.
I contribute meaningfully while being rude. Maybe you should try it.
WHAT??? Tiny and Minimal. It's heavier than wordpress.
What you're looking for is WordPress
Wouldn't hurt to put in JavaScript on the front end to catch the obvious mistakes of people forgetting the @blah.com on the end. That will probably solve almost all of the problems right there without having to make a round trip to the server.
I've tried both and I can vouch for these!
&gt; I think they can handle it doesn't matter; Trespass to chatteles
Purposely pedantic here, but I do think sending an email to a username sans hostname will cause the mailer to try to deliver to the local machine... So I *suppose* that's valid too? 
From what I remember this book is not for absolute beginners to php, but rather a good guide to OOP.
Even the dot is actually not fully mandatory according to the RFC. 
You know the Google query returns a JSON string, so you could have just used [json_decode](http://php.net/manual/en/function.json-decode.php).
Concrete 5 http://www.concrete5.org/
I'm on mobile and their site isn't responsive but reading XML from disk will offer pretty bad performance compared to MySQL
Yeah, best to at least spread those queries out a few minutes at a time. (Probably will still get banned for 7000 queries.) If you have a site with a lot of traffic, you tweak the script to run via javascript on the visitor's browser and save the result.
Who are you to tell me what I understood?
pspell.
[ProcessWire](http://ProcessWire.com) is one to try out. I originally found it looking for a simple CMS too, and it fits that role very well. Simple to use and implement, lightweight, fast. Though it is also much more, when you want it to be. I've found it to be very scalable without getting any more complex. It's the most straightforward, easy to develop in system I've used (a lot simpler than WordPress, IMO). CMSCritic recently awarded it [Best Free CMS](http://processwire.com/about/news/best-free-cms/), here is their [review](http://www.cmscritic.com/processwire-review/) if its helpful.
it is rather sexy looking. I also like chyrp.
Even then, it's going to break. OP needs to find a better solution.
Tried it out a couple of months ago, it was a bit error prone as is to be expected, but otherwise a breeze to use and build on.
You should consider using the magic methods `__get()`, `__set()` and `__isset()` instead, especially instead of a static method. private $data; public function __get( $name ) { return $this-&gt;data[$name]; } // __get public function __set( $name, $value ) { $this-&gt;data[$name] = $value; } // __set public function __isset( $name ) { return( isset( $this-&gt;data[$name] ) &amp;&amp; array_key_exists( $name, $this-&gt;data ); } // __isset 
Then he won't be able to supply a default value easily, though.
Without the default it kinda kills the point
then I would have a single default value for all arrya membrs. I want to be able to do this: $conn=$config('database','default'); $user=$config('user','root'); etc.
you shouldn't be attempting to re-implement something that has already been implemented a dozen times (see filter_var()). don't waste your time (for some reason php developers in particular have a habit of doing this). and the *real* answer from experience is that the best way to validate an email address is to send an email to it (ie. don't validate it, other than basic 'is this a string' type stuff).
In regex the dot means anything
That was just an example. You could pass in an array of defaults into the constructor, iterate through the array to set the defaults for: $this-&gt;database = 'default' $this-&gt;user = 'root'; etc.
Why prepare/execute with a capital(Line 12/13) ? it doesn't make sense since the rest of the database methods start with lowercase as well.
I see that you are using PHP's `socket_*` functions. One issue with that is that those functions do not mix with non-socket streams. You should consider using `stream_socket_*` and `stream_select`, which allows you to mix with other apps. To get interoperability with other libraries, you should check out [the react event loop](https://github.com/reactphp/event-loop) which is a standalone lib providing just the event loop. All async libraries that use it can be composed. Do you plan on supporting more versions of the WebSocket protocol?
look into http://developer.yahoo.com/boss/search/ they have spelling suggestion API, you have to pay for it though there's also some built in PHP helper for this: http://php.net/manual/en/function.soundex.php (also see the related functions)
Probably due to the fact that php is meant(and developed) as 'pre-hypertext-processor', and not so much as high level scripting language.
look into idiorm and paris theyre each one file, rather small, and make a nice lightweight orm / database abstraction layer for PDO. also redbeanphp is very nice.
it's still better than data entry. I spent some time doing data entry. look at a check, type in numbers. look at another check, type in numbers. so mind numbingly dull, i could not stand it. at least writing code requires some mental activity, and there are creative ways to write helpers for problems like the above, you could use array_fill and array_fill_keys to make it simpler. my first programming job was working with a php4 program that was slowly being translated to php5, had no namespacing, no classes, no nothing at all like being organized, lines over 1000 chars long, php mixed with html, and you couldn't work with error reporting because the number of warnings and notices was massive and nobody was allowed to spend any time fixing them. I managed to refactor a few modules that they had in the year I was there, I shrank the size of the code to probably a third of the size as when I started. It wasn't that bad, in hindsight, but I hated it at the time.
If you exceed a certain number of scrapes (I think its around 100) in a set period of time you will get a captcha from Google for everyone on your IP. I know, I was scraping Google to help with 301'ing old sites to a new domain. I found an alternative though: https://developers.google.com/custom-search/v1/overview If you aim to use more than 100 queries per day though you will have to pay for every 1000 queries above the first 100.
I was thinking he was looking for tiny and minimal admin, not size... 
The last part is not true. PHP supports threading and there is an extension that allows for userland threading. It's just that 90% of PHP builds are built non-thread safe for the reasons you mentioned.
Thanks, Yahoo's spelling API is really cheap compared to Google so I'll look into that.
&gt; Also, is there any reason to go with a CMS like GetSimple that uses XML over SQLite? If you don't value your sanity, XML is a good choice to use instead of a regular database.
Some great replies, thanks everyone.
I was going to recommend Aura.Router myself but it requires PHP 5.4 so it would be a no go given the request for a PHP 5.3+ solution.
I don't know why you're being downvoted, the overwhelming history of these kinds of suggestions is that they're not necessary or appropriate for websites. It's really sad because this mentality translates to other frameworks (eg: CodeIgniter) and 'advanced' features get shot down for the same reason (who needs to process 50,000 records? use another language for that).
In short, to anyone non-tech savvy: High level = You can read it out loud. Low level = You can't read it out loud. PHP is very much so a high level language.
The problem with an array of defaults is that you would have to define a default long time before you might actually use it. What if you don't know the contents of the array beforehand etc? The whole point of this is having a nice shortcut to get a key from array. The way you describve it won't be a shortcut, it might actually be longer.
Yeah it doesn't matter... But you're right, it's kinda sad that there's sort of lack for 'bigger' projects.
Have used that extension. In the past I've worked on some PHP code bases that had command line tools we built into them that did lots of data crunching and worked well with threads. The web component remained unthreaded though (no need). 
Yes, but since it's made specifically as pre processor, you can't really say there has been given much detail to threading.
It's because 90% of PHP developers don't get past developing websites, and they don't experience developing 'applications.'
PHP pthreads extension ;) http://pthreads.org/ https://github.com/krakjoe/pthreads
Threading is rarely useful in a language used almost exclusively as a FastCGI for spewing out short bursts of HTML. You can't parallelise `echo` statements; compression is done in parallel in the webserver already; and the only place where threading would help is to do the DB queries in the background, which you can do already with `pg_send_query`.
Please elaborate.
Ah, this is answers the question perfectly. Thanks very much.
&gt;Regex is only complicated if you don't take the time to try to understand it. This is what makes regex different.
I'm a fan of Kirby, which uses flat files for data storage and has no database at all. http://getkirby.com/
The idea of having a full site with a lightweight, easy to use, and decent looking CMS setup in one folder, ready to upload to any decent php host with zero config or database setup needed to run was appealing to me. I'm definitely considering all options, so I may end up using an overall database as you suggest.
 $all_numbers = array(); //empty array for preg_match to use $subject = "my string"; //string to slice the numbers from preg_match("/[0-9]{1,}/", $subject, $all_numbers); $new_string = str_replace($all_numbers, "", $subject); The [preg_match](http://php.net/manual/en/function.preg-match.php) matches the [regular expression](http://www.regular-expressions.info/) ("give me a number, and the next few characters if those are numbers too"), and puts it's results in $all_numbers. And since $all_numbers already contains all numbers, we simply throw them away using [str_replace](http://www.php.net/manual/en/function.str-replace.php), giving the result we are looking for!
It's hard to thread PHP in the context of a webserver. A lot of the libraries that PHP can use aren't fully thread-aware or thread-safe. GNU gettext is one of the biggest offenders that I know of. If you've ever seen a PHP-based page render in a mixed language, [someone didn't read this comment](http://www.php.net/manual/en/gettext.requirements.php#89437).
We have been using it for over a year at our office. Since then we have built dozens of websites with it. The main reason for choosing Pimcore was code quality. Systems like Joomla, Drupal and Wordpress don't come close to Pimcore in this regard. Since Pimcore is a CMS Framework you can make anything with it. You have 100% control over the front-end. Pimcore has some snazzy features to help you, but it gets compeletly out of your way if you don't want it. This is great, if you know how to program. Speed is not really an issue. yes it does use Zend which is huge, but Pimcore comes with caching built in. First time rendering a page might be a bit slow but once it's done that it is quite fast. Performance does not degrade even when your websites grow to insane proportions. Speeding everything up is realtively easy by using a dedicated (virtual) server with memcache and APC. Pimcore also supports minification of JS/CSS and CDN support out of the box. The admin-interface is based on Ext/Sencha and is a little bit heavy in the browser, but that does not really affect the website performance. The development is very active done by professionals. Every 2 or 3 months there is a new release. Every new release contains a load of bugfixes and new features. Unfortunately those features usually have some new bugs as well and not all features are implemented in the most user friendly way. Luckily there is a public issue tracker where you can file bugs, or just fix it yourself and send a pull request on Github (open source). Same thing for the documentation, it's a wiki where you can make your own improvements if needed. The forum can be helpful, but is not very active. So it's not perfect but a lot better than anything else out there. You can get to a working website very quickly with Pimcore and take advantage of all the awesome stuff built-in while still remaining in control while your users get a powerful user friendly interface that is incredibly powerful at the same time.
I use it on linux, there were a few bugs in v5.0 but I've been using v6EAP for the last couple of months and haven't seen any bugs that I know of. It's really the best IDE I've used and well worth the money.
Thanks for your input, I'm sold on it more and more every day. I've heard in passing that you should only have one pimcore install per server. If this is the case, is it possible to integrate multiple websites into the back-end management system? While we're having another firm redevelop our main site to use pimcore, I'd like to do something similar for our other static sites we host on the same box. Any recommendations to this effect would be great, thanks!
What I would HIGHLY suggest you do is rethink what you're doing exactly. What you are looking for is a multi-site platform. In your apache (or other HTTP server) configuration, set the 'default' site to point to the directory that has your front-end code. Set up a second vhost that would point to your backend code that you would use to manage everything. I believe Wordpress has Wordpress MU if you want to use something more 'out of the box'. What this is going to allow you to do is point A records directly to your front-end code, and based on the host that is pointing to the server, serve up specific content for that site. You'll benefit from: * One single codebase, no needing to make sure all codebases are synced up. * Depending how you code it, you can have the same content be on all sites. * If there's a bug on one site and you fix it, it *should* be fixed on all sites. * MUCH easier to maintain. 
I would recommend to start with[**Beginning PHP 5.3**](http://www.amazon.com/Beginning-PHP-5-3-Wrox-Programmer/dp/0470413964). - it's aimed at newbies - it has up-to-date practices (like: no `mysql_*`) - explain basics of OOP - has relatively few mistakes If you have somewhat extensive experience in some other language from C bloodline, then you will be able to skip over most of that book. For intermediate level I would recommend: - [PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) - [PHP in Action](http://www.manning.com/reiersol/) - [PHP Frameworks and Applications](http://www.wrox.com/WileyCDA/WroxTitle/Real-World-Solutions-for-Developing-High-Quality-PHP-Frameworks-and-Applications.productCd-0470872497.html) Same as first one, there books also have to be taken with grain of salt. Not everything there is "pure gold". And in this case the *bad parts* will usually be when discussing patterns and practices. They are by no means bad, just don't approach them as some sort of indisputable authority. .. as for advanced level literature - there is nothing. Just read stuff from Fowler and UncleBob and you will be fine. The advanced topics in programming are language-agnostic anyway. --- Also, i would recommend avoiding any book that claims to teach you "php and mysql". All of those books are outdated and actually teach you neither. Then only give you tool to make a small scale disaster. 
Thanks for the feedback. You make some great points.
Crap article written by a person who doesn't really understand what the code he advocates people to use actually does. For instance: &gt;In the above code we provide the named parameters :name and :age to prepare(), which informs the database engine that escaping should be done on these parameters. When the call to execute() is made, the query is executed with the actual values of the named parameters. If you code this way, the attacker can’t inject malicious SQL and your database will be secure. That's not at all what prepared statements do. Prepared statements don't escape parameters, it pre-compiles the SQL query. The reason you can't inject any SQL is because there is no longer any SQL statement to inject into, just bytecode. Furthermore, his advice about credit card numbers is even illegal in some countries.
I like the lack of threads in PHP. Keeps processing simple and understandable. I don't have to worry about weird security issues like two processes sharing a piece of data in memory or something.
 $array = json_decode(json_encode(new SimpleXMLElement($xmlString)), true); Problem? :trollface: I dislike working with XML/DOM in PHP for smaller things and often just do this with enough error handling in case there are problems and use the ill-formatted array it outputs instead.
I've actually been all over the PyroCMS site today. The Multi-Site Manager with the Duplicate Site feature would be a great option. I'll be making the decision shortly and would be happy to test it if we decide to go that way. Thank you.
Well the idea is nice and portable but from the logic of your first post you want the operator to be able to basically add a new site at the touch of a button. If that's the case then having a simple "site" created as a branch of a bigger CMS makes more sense. With some directory rewriting magic you wouldn't even need to create new folders for the new sites.
Inside a threading / multiprocess server like PHP-FPM or Apache with mod_php it is rarely a good idea to spawn your own threads / processes. The web server or web server and php-fpm already does this. It just makes it hard to manage resources that way. If you need to run asynchronous code with PHP it's a better idea to do it with message queuing server like Redis, 0MQ etc. And have (a server possibly written in PHP) with threading support processing those (or just plain and simple cron job).
O_O
The advice on CSRF is way too superficial. While the final paragraph on CSRF tokens does try to explain it, the whole section is written in a way that implies switching from GET to POST is going to help you. In general, I'd prefer to see more in-depth articles on these topics that explain *exactly* what the security issues are and how to combat them.
What's wrong with pthreads? How it is error prone? I've used it for years and it works fine. EDIT: I'm not arguing with you or trying to say pthreads is perfect. I'd really like to know whats wrong with it, because if there's something really better for threading on Linux I'd use it. I don't really care about windows development, because I don't write anything that runs on it anymore.
That makes sense. I guess I've been doing it so long I just do things "correctly" without thinking about it. Memory leaks and deadlocks are pretty easy to cause and with a bit of experience pretty easy to stop. EDIT: valgrind is awesome!
The probability of my buying the book grows exponentially depending on how many images of mad scientists are contained within in. Please do the needful and let us know.
So you're saying that multi threading isn't needed with PHP? Make sense since almost every thing I've ever programmed was slowed down a lot more by the DB than by PHP. The nature of the web itself is small processes and returns, rather than large, constant processes.
I too am interested in buying this but how out of date will this book be once PyroCMS 2.3+ come out?
Someone who understands what makes an API RESTful significantly better than you do, apparently.
I've switched database architectures once. It was for a major media portal when we did a total systems rearchitecturing. Different web server, OS, application language, database platform. The site was for the same purpose, and the historical data was migrated into the new system, but having said that, in my 20 years at a slew of companies that's the only time I've seen it done. Pick a stack and stick with it until there is an overwhelming reason to switch.
Thanks for the reply! That's good to know. Side question: I don't know if you can tell me off hand average time between releases? Do you plan on jumping from 2.4 to 3?
There's very little difference between multiple processes and multiple threads. In both situations, the code is shared. So if you run 5 PHP processes, there's only one copy of the PHP code in memory. Each process, however, has it's own independent data. A single multithreaded application has a single data space that it has to manage with locks. If you have a multi-threaded application, it can continue processing in another thread while waiting, for example, for the database to return a result. With PHP, that same benefit is spread across different processes so if one process is waiting for the database to return another process gets a chance to run. 
2.4 is still in question. I want to get to being on a Laravel codebase as quickly as reasonably possible without screwing over the users. 2.3 is all about Eloquent, which makes perfect sense and is one of the hardest jobs to do, so we can release 2.3 with just that change and keep things backwards compatible. Sadly porting anything else to Laravel's composer packages (like Validation or Events) would be much much easier when using the Laravel IoC and Facade, which I cannot realistically port over to work in CI. If I could work out a nice way to do that 2.4 could happen as another stepping stone towards a fully-Laravel 4 codebase, but it'll most likely switch from 2.3 to 2.4. 2.3.0-beta1 is likely to be a month or two at this rate. We've had a LOT of community support with Pull Requests getting over to Eloquent, so it might be rather quick. A stable might be another two months though.
Don't.
Why not? If you have a bunch of helper functions why shove them in a static class?
Why not just have a bunch of helper functions? Why do they need to be a static class? http://nikic.github.com/2012/08/10/Are-PHP-developers-functophobic.html
? Did you read my post? I don't put them in static classes, I put them in my namespace, I am asking what the general style consensus of functions within a namespace is and you said "don't" implying that I shouldn't put functions within a namespace. Why would I put functions in the global scope? That sort of defeats half the purpose of using namespaces in the first place.
Don't what?
There are two relatively large differences between the two models: 1) Threaded programs share memory. This can lead to more bugs, but also makes collaboration between the two threads much more straight-forward than separate processes. Since PHP instances do not need to communicate with eachother in the vast majority of instances, no real loss here. 2) The Operating System itself tends to be tuned well for one (spawning lots of little programs) or the other (spawning one program with hundreds of threads). This can have a drastic difference in how high you can scale on a single server, depending on a few different factors. *nix tends to do better with processes, while Windows does better with threads. Most PHP is run on *nix, so processes win there, too. Really, if you're using PHP for its most common use, multiple processes and a single thread per is the best design.
You don't need it, the bottleneck is almost always IO not computation.
This won't help you with the most annoying thing about XML: namespace -&gt; http://codepad.org/thOZ4FBi json_encode/json_decode simply ignore anything with namespace.
one important thing to keep in mind is that SimpleXML does *not* treat text nodes as Strings (even that they look like it because of __toString() magic) you need to cast them to the appropiate types before working with them in code.
I did the same thing in Python, its still in development, so there are bugs and unnecessary code. https://github.com/kalouantonis/A-Level-Project/blob/master/db_model.py I hope this helps you.
For those who don't understand what philsturgeon is saying, these things (beanstalkd, etc.) are message queues which can be thought of as digital tanks. When you receive something that will take a long time to process, rather than trying to do it all at once (e.g., syncronously), you shove it into the tank, and then have a bunch of other computers pull from the tank, one message at a time and process each job, in so doing, draining the tank down. The work becomes asynchronous rather than syncronous and easy to split up across multiple computers. The input (e.g., web server or api) can be on one machine, the tank on another and the workers on still others. also, because it is now able to be paused while in the tank, there is no need to get it all done before you can return feedback for the input, so everything speeds up again (because you've taken the hard work and removed it to another processing loop so that it is not an impediment to the 'completion' of the first loop). Hope this useful to someone. a year ago, I would not have understood myself. 
Dude, you know shit about me. But yeah, whatever, you're the best.
I would recommend you to check [Processwire](http://processwire.com/) . It has a feature called "site profile" which allows you to export site structure and install it very easy. Also, it's an awesome CMS
One thing I learned the hard way is that SimpleXMLElement::xpath() is slooooow. If you're working with relatively simple XML it is actually faster to foreach the root nodes children, put them in an array and then search that.
They're not from what I know; Just people don't use them.
It might just be for .ini files. http://php.net/manual/en/migration53.deprecated.php
it *might* be? &gt; Comments starting with '#' are now deprecated ***in .INI files***.
Having Googled the question either people are confused that it's just .ini files or they're deprecated throughout: * http://stackoverflow.com/questions/9093609/can-i-use-hashes-for-comments-in-php * http://forums.zpanelcp.com/showthread.php?5632-Use-of-hash-comments-should-no-longer-be-used! * Dozens more. These are just the ones I left the tabs open for. Even if it's just for .ini (which I now think it is). Why would they do that?
well one guy with 0 points claims it is deprecated. one look at [the docs](http://www.php.net/manual/en/language.basic-syntax.comments.php) says it is not. :)
They definitely aren't, just in .ini files. Personally, I usually use `//` for comments, and `#` for commented code, which gives an easy way to see code that's "disabled" vs. actual comments.
As others said they are only deprecated in INI files. However, they are kind of pointless as we already have `//` for single line comments. This is part of the reason people were complaining about backslashes in namespaces - PHP has used up most other characters in other features, when it could have been more carefully designed in some cases. For example, people often note PHP has different operators for static and non-static class methods (:: and -&gt;), using dot for string concatenation, colon for the alternate control structure syntax, @ for error suppression, etc. (Note, I'm not particularly criticising PHP for this, some of the above are good IMO. The string concat operator is far more logical.)
I downvoted and commented ;)
I always thought semicolons (;) were for comments in INI files.
I'm sorry I had to downvote you for calling PHP's string concatenation syntax "logical". 
I prefer to think of the message queue as an assistant and the workers as indentured servants. You tell the assistant what needs to be done, and rely on the assistant to chase the job up. He/she assigns it to an indentured servant, who can obviously only do one thing at a time. If the servant dies during the job, the assistant will tell another worker to do the job. Hopefully they wont all die at the same time, and hopefully your assistant can find new workers to replace them almost immediately. You don't need to care when a job is done, but its usually a good idea to have some sort of reporting in place. Maybe you can get the servant to leave a little flag near the record saying "Is Processed", so next time you go into the room you KNOW it's been cleaned.
I know you're just trolling, but I'll bite - why is it *illogical*? The + is an arithmetic operator, why should a+b equal 'ab' when 2+3 does not equal 23? A period ends a sentence, so you could logically say it concatenates sentences.
As far as this book is concerned I wouldn't worry about 2.3 at this point. 2.2 is at RC1 right now and is a fantastic release: custom page fields, custom profile fields, custom blog fields. :) Also the release of 2.3 doesn't mean we'll forget 2.2 exists: we've always supported 2 versions. The concepts in this book are worth the ~$10 even as the code examples age and are replaced. PyroCMS will keep it's approach to content management even as small bits change. Such is the nature of books about software.
In short because the OS/some other software takes care of concurrency for web apps. There's 2 main approaches you could use for concurrency in web languages. The first is threading, this means a single instance of the PHP runtime would do more than 1 thing at a time. The second is Multi-Processing (MPM), this means another piece of software launches multiple instances of the PHP runtime (each is still a single thread but there's multiple instances to spread across cores). In the case of PHP, which is used almost exclusively for the web, MPM makes more sense as you generally want to address a lot of connections at once rather than have 1 connection do multiple things. Combined this with something like Apache's prefork to minimize the impact of spinning up a new PHP instance on each request and you have concurrency that's "good enough".
a+b wouldn't equal 'ab', 'a'+'b' would. Even ignoring this, the plus sign means a lot more than just "addition". Besides which, strings and sentences are not interchangeable. I can have a sentence across multiple strings or a string that contains many sentences. The dot notation is pretty universally used for member access...except in PHP. PHP isn't some visionary in this regard, it's just awful and unnecessarily obtuse. As an aside, could you film yourself writing C++ code? With your strong objections to adding strings I'm sure that will be comedy gold... 
To take it a step further, you might use a nosql data store like Redis or memcache which lives in ram and is super fast but relatively transient (and thus perfect for holding distributed state or session information) and record the event of placing the job on the queue. The worker who pulls the job off the queue can update the record to done and though many distributed workers may have the info initially, because they write to a central location all machines in the cluster can know the state. Redis is just great for this sort of thing. 
Apologies, I meant to include a question-mark to make it clear that this was a possibility not an accusation. (i.e. don't be so defensive) Could you please explain why it's not logical.
For commenting code I always use: /** code /**/ When I want to re-enable, I can add a slash on the first line.
The correct comment in *.ini's* is not a hash, it's a semicolon: php.ini # incorrect comment ; correct comment
The documentation still sucks. Not a framework worth working with now that Laravel has matured.
There's no need to be an ass about it. I use both an IDE and version control. What about using comments makes you think I don't?
&gt; a+b wouldn't equal 'ab', 'a'+'b' would. Yes let's take everything literally instead of thinking. Of course I was talking about adding two strings there. And the point still stands, adding is not concatenating. &gt; Besides which, strings and sentences are not interchangeable. I can have a sentence across multiple strings or a string that contains many sentences. Strings are a programming term, not an English language term. &gt; The dot notation is pretty universally used for member access...except in PHP. Because no language should ever try to do something different? Again, you can argue that -&gt; (an arrow) is more logical (although I'll admit that one is a little ugly, single colon would have been better. Or heck, an actual Unicode arrow.) Anyway you could just as easily rally against Python for not having braces on control structures, or any language that has a slightly different syntax. You're right that PHP isn't exactly visionary for doing that, but it's still a nice idea.
I was wondering about the status of namespaced functions in PHP the other day, I did some googling but couldn't find a solution on how to autoload them. I think it's also worth mentionning that you can't have a function called "echo" or "die" (or similar) in your namespace because those are language constructs, I kinda found out about it the hard way.
Kohana does not need advertising. It's already a well-established framework in the PHP community. I'd much prefer if people would refrain from submitting things which adds nothing of value to the community, such as linking to already well-established tools with the sole purpose of making it known, or the PHP manual pages with features which have been around since PHP4. People already know about these.
Yes, according to the system requirements that is the best way to do it. However, it is not a requirement at all. Naturally every website would work work faster if it had a whole server for itself, but setting up a server for every website is very wasteful, expensive and not needed at all. It is perfectly possible to have many Pimcore websites on the same server. They do require their own (sub)domain though. The idea of using the multi-site support for managing several websites from the same admin interface is appealing. I ahd this idea myself a while ago, but now I strongly advice against it. Multi-site support is meant for websites that share many resources like templates and images. The only valid use case I can think of is the same website in several languages. For anything else, just use separate Pimcore installations! If you need to share some functionality just copy the code. If you need to share it a lot make it into a plugin. The reason for this is two-fold. First of all multi-site support has improved a lot in recent Pimcore versions, but there are still some nasty bugs that will bite you somewhere in the process of building your enormous multi-site monster. You can work around this, but it won't be pretty. The second reason is the way that humans deal with complexity, we are not very good at it. By shoving multiple different sites into one project they will all become dependent on each other. The amount of code that you need to manage grows, and change you make can affect all the other websites as well. Even if you are an exceptionally talented developer who handles complexity very well the people who manage the content will also have to do this. For example they will have to deal with the fact that they can add a document with layout B to website A, while you as a developer may never have intended this. You can lock down their user permissions, create different accounts for the different sub-sites, but that makes it even more complex. Then you have the people who make the decisions. As far as they are concerned they are all separate websites. At one point they will want to update one of them. That might break the others but there is no money to fix it for all. In fact one of the others is sold to someone else who wants to host it on their own server. And there are many more possible scenarios. Keep things simple, keep them separate.
Making sense is not a popularity contest.
You may as well complain that a plus is just two lines!
I blame twitter. 
http://stackoverflow.com/questions/4266799/why-is-the-php-string-concatenation-operator-a-dot
This is as close as I could find. http://phpbounce.aws.af.cm/
This looks like a great resource to get my hands on!
When I first saw the tweet talking about scaling silex applications, I thought it said scaling scrillex applications. I was wondering what php function could be used top drop a beat.
The pot calling the kettle black. 
People are probably confused because people keep asking questions like "Why are hash comments deprecated" and people get worried and don't actually read the announcement.
PHP is a loosely typed language. $a = 15; $b = 10; $total = $a + $b; Does $total = 1510 or 25? You simply find it confusing because you're used to another language. I was frustrated with Javascript when I started because + was used to concatenate string. var output = 'Total: ' + (bag + pockets) + ' apples'; vs $output = "Total: " . ($bag + $pockets) . " apples"; 
You didn't. You surprised me. I didn't think it was possible to see so much butthurt over the fact that commented code exists.
&gt; The dot notation is pretty universally used for member access...except in PHP. The dot operator is also used for concatenation in Perl, which was the dominant competitor to PHP in the latter's early days. It certainly made sense to use something people were familiar with. And it's too late to change now. I don't think there's much point grousing about it.
http://www.reddit.com/r/PHP/comments/18dgn3/why_are_hash_comments_deprecated/c8e0m7i
Sure there may be no point in grousing about it, but there's equally as little point in trying to convince people that it was a logical choice.
I don't find it confusing. Don't make presumptions about my ability to code in PHP or otherwise because I'm pointing out what I -- and many others -- believe is an awful design choice. This has nothing to do with "*loosely typed*". PowerShell is loosely typed and yet somehow manages to figure out how to use the plus symbol for string concatenation. The problem is that PHP tries to do automatic conversion from strings, which makes no sense whatsoever especially given its lack of exception support (for those who might try and jump all over this, I'm not saying that PHP **doesn't have exceptions**, I'm saying that **most of the PHP core language doesn't take advantage of the fact that it does**). Something like 'hello world!'+15 should throw an exception, **or give some indication that it's failed**, but it doesn't. *'hello world!'* gets mysteriously coerced to zero. Because somehow the designers of PHP saw fit to use zero -- a perfectly valid integer value -- as the error condition for functions you expect to return integers. This actually makes writing consistent string-handling code in PHP **more** difficult than other languages. Let's say I have a string and I want to get an integer out of it if possible in C#: String int_string=get_a_string(); int from_string; if (Int32.TryParse(int_string,out from_string)) { } Now let's say I want to do the same thing in PHP. I could check beforehand if it's numeric, but how do I know that it's not floating point? $int_string=get_a_string(); if ( is_numeric($int_string) &amp;&amp; (($from_string=intval($int_string))==floatval($int_string)) ) { } Not only is this code arguably more complicated than the C# example, but it's also an obvious hack around the fact that PHP's type system is hopelessly malformed and that the functions supporting it are even more ridiculous. The issue with PHP being "*loosely typed*" is that "*loosely typed*" languages are supposed to remove you from the vagaries of a type system. But in PHP's case **it doesn't**. You have to be even **more** painfully aware of types and "*truthiness*" and automatic conversions than if you used a language that's statically-typed.
lol I don't think you know what loosely typed means. http://www.i-programmer.info/programming/theory/1469-type-systems-demystified-part2-weak-vs-strong.html The fact that you said "should throw an exception, or give some indication that it's failed, but it doesn't." is EXACTLY what is it supposed to do in a weak typing language. &gt;The main difference, roughly speaking, between a strongly typed language and a weakly typed one is that a weakly typed one makes conversions between unrelated types implicitly, while a strongly typed one typically disallows implicit conversions between unrelated types. If you're not happy with that - you're directly going against the philosophy of the language, and should probably use another one. In your code snippet comparison, you're not even doing the float scenario in the C# one. I'd be curious to see how a strong-typed language does it, and I'm pretty sure it would be similar in PHP. &gt;The issue with PHP being "loosely typed" is that "loosely typed" languages are supposed to remove you from the vagaries of a type system. But in PHP's case it doesn't. Yes it does. In a scenario where the type is important, it might be possible that PHP is more painful, but I can hardly find a case scenario where converting a string to a numerical value requires a difference between int and float. Just put it in float. That's what PHP is about. BTW, not sure who you're talking about the "many" others that thinks it's a bad design choice, but it's obviously not PHP users, judging by the # of downvotes you have. 
Can OP please put this link into the first post - makes the discussion a little easier to actually link to the source you are basing your question from..
python has a nice itertools library that you can use to iterate combinations and permutations. no luck for PHP though =\ Maybe this: http://r.je/php-find-every-combination.html
http://docs.python.org/2/library/itertools.html#itertools.combinations
 static public function getValue(array $array, $key, $default = null) { if (isset($array[$key])) { return $array[$key]; } return $default; }
For clarification, `array $array` is called [type hinting](http://php.net/manual/en/language.oop5.typehinting.php). In this case, you would get a PHP error if you passed a type that wasn't "array" to the method. &gt;I'm curious what you guys think are the best practices to include while developing a class that you know you are going to use in a lot of projects, and even maybe make it available via github. Learn the principles and concepts of OOP. Once you really understand what is going on, you will be able to more easily decide what should be in your class, what should be in your methods, and so on. After all, OOP is a lot more than just some methods in a class. [PHP Objects, Patterns and Practice by Matt Zandstra](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) is an excellent book for explaining some of these OOP concepts, and how they apply in PHP. Also, take a little bit of time to plan out your application. Don't just get a rough idea and start coding; you will end up refactoring large parts of your code several times. Break the functionality down into small groups. These groups will essentially become your classes. You don't want a class to have too much responsibility, it should do a specific thing. You can use inheritance to group multiple similar classes to a common parent class, which is much better than putting all of the similar-but-different functionality into a single class.
5.3.x but who's counting?!
It's an interesting question but it's hard to approach without having use cases. You can attempt to derive them from the bullet points, but I wouldn't model anything without use cases. Perhaps that's my BDD and TDD showing through. Still, I imagine they expect you to model something like: * \Vehicle\Parts\Wheels\FourWheels (trait, returns "4" for getNumWheels()) * \Vehicle\Parts\Doors\FourDoors (trait, returns "true" for hasDoors()) * \Vehicle\Class\Sedan (class, uses FourWheels &amp; FourDoors) * \Vehicle\Class\Sedan\HatchBackSedan (class, extends Sedan) * \GeneralMotors\Chevrolet\MalibuMaxx (class, extends HatchBackSedan)
if you want to accept object parameters (e.g. ArrayObject, Traversable, etc) you can use: if(!is_array($array) &amp;&amp; !is_object($array)) throw new \InvalidArgumentException('your error message');
Would it be better practice to use this so it will return `NULL` instead of `$default` if it's set? static public function getValue(array $array, $key, $default = null) { if (array_key_exists($key, $array)) { return $array[$key]; } return $default; } // Because one liners are fun to complain about. static public function getValue(array $array, $key, $default = null) { return array_key_exists($key, $array) ? $array[$key] : $default; } I find it quite interesting to think about because of the return value defaulting to `NULL`, much like allowing the array value to be returned as `NULL`. PHP "void" is upsetting :s
As jtreminio's code points out, you are able to "type hint" in PHP. This allows one to force a variable's type from it's input arguments rather than doing something like... static public function getValue($array, $key, $default = null) { // Shamelessly taken from mjcov. if (!is_array($array)) { throw new \InvalidArgumentException("First argument must be an array"); } // Continue the function... blah blah blah. } It's a very nice feature but sadly does not support scalar types (ie, string, int, etc...). You can read more about it here: http://php.net/manual/en/language.oop5.typehinting.php Getting back to your original question, using exceptions would be the right way to go if you wanted to make `$key` be a string or integer or w/e. I would not recommend using FALSE as a return value as exceptions are designed to say "hey! something isn't right here.". Returning the FALSE would only make you wonder, as your array key could be holding FALSE as a value, or your default could be set as FALSE. You would never know! :P PHP comes with quite a few exception cases built in: http://www.php.net/manual/en/spl.exceptions.php
1. Don't use a static method. Static methods have their place but only in a few circumstances. 2. This would be easier to just use the isset() and/or array_key_exists options yourself without the need of a class function. Something like this would be beneficial. class SomeClass { private $data; public function __get( $name ) { return $this-&gt;data[$name]; } public function __set( $name, value ) { $this-&gt;data[$name] = $value; } public function __construct( array $data_collection ) { foreach( $data_collection as $key =&gt; $value ) { $this-&gt;$key = $value; } } public function __isset( $name ) { return isset( $this-&gt;data[$name] ); } } Then you can create an instance of the class and load your data like so. $someClass = new SomeClass(array("php" =&gt; "hello", "phphelp" =&gt; "world")); // "hello" echo $someClass-&gt;php // "world" echo $someClass-&gt;phphelp // (true) var_dump(isset($someClass-&gt;php)); 
First if statement should be == not = 
I don't think you really want to check every combination: http://www.wolframalpha.com/input/?i=78+choose+58 1.98 * 10^18 combinations. Your best value would be if you were to match the prices exactly. First thought: * Find replacement values that are in the same cost range as the original value ( +- some value n), and then iterate through those combinations instead of the entire set. You can play around w/ the value of n until it takes too long to run the program. In addition you may want to calculate how much money is left to spend against the remaining 20 items.
I would suggest pass by reference as well to reduce memory load. Especially in a function that doesn't modify the input. static public function getValue(array &amp;$array, $key, $default = null) {
I disagree - this is the perfect usecase for a static method: 1. No outside dependencies 2. Does not keep state via static properties 3. Code is too simple to be subject to failure
__ get and set are just there for working with legacy stuff. Use ArrayAccess instead. Basically magic gets generate virtual public attributes, and public attributes are horrific for debugging and testing or overwriting. 
This is total overhead. First, this is a standard procedure in PHP. I doesn't make anything easier, it only complicates some very standard stuff. You can do the whole functionality of this method in just one line. You don't need any exception handling here, nor do you need a class, neither a method. And i didn't even say anything about the "static". I always refer to this: http://www.codinghorror.com/blog/2004/10/a-pragmatic-quick-reference.html Number 34: Use Exceptions for exceptional problems.
First construct an array/list of class names/whatever using the required logic, then output the array in one go at the end. Usually there's a function around to join all the elements in an array together with a specified separator too.
Even if you aren't using it, reading the source code is a good idea, it is well architected and provides an alternate implementation of the Symfony2 components (everybody should know, or be using, the core Symfony2 components IMO) You will get to know Symfony2 better, get to know small-scale DI better, and get to know the core components better as well as a decent architecture for smaller PHP based web applications. Reading good source code is always a good idea 
&gt; in a function that doesn't modify the input It's exactly the reason why you don't really need to use references. PHP uses copy-on-write, and there are no writes here, so the array won't be copied, only a 'link' to the original will be created.
&gt; look in the first if "array" typehint will do the job. About functionality - I like this one - [FuelPHP Arr class](https://github.com/fuel/core/blob/1.6/develop/classes/arr.php#L34). It allows using 'dot' notation to get values from N-level arrays Arr::get($array, 'some.deep.index.in.config');
Added: And just use references because of "performance" is just wrong. ^^
I wonder why all of you like idea of moving routing to yaml. Is it for automatic routes generation? Do you understand, that you get performance hit for opening and parsing yaml file? You can fix this by caching/compiling, but that's not so simple at this point, and silex is good because it is simple :-) 
Some really good Video about Hypermedia API [Steve Klabnik - Everything You Know About REST Is Wrong](http://vimeo.com/30764565) [Jon Moore - Hypermedia APIs](http://vimeo.com/20781278)
Like this: /* NOTHING */ ... In otherwords, I wouldn't apply the markup from code, but keep it in a template file. There are a ton of template engines, e.g: * [Zend\View](http://framework.zend.com/manual/2.0/en/modules/zend.view.quick-start.html) * [Savant](http://phpsavant.com/) * [Mustache](http://mustache.github.com/) etc.
You can still get race conditions in PHP. Think about two different processes trying to update the same value in a database. I guess you call that a DB issue, but it's still something to be aware of.
Your reply contribute nothing really, and while I agree with you, I'd still say you should atleast provide some links for reading up on [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), or whatever else you might think OP should read up on.
This doesn't necessarily have anything to do with MVC. It's just simple separation of concerns. Just because you've separated the markup from the code does not mean that you are using the MVC pattern.
I don't see the reason to use PHP to generate a h2 tag, as headers are usually very generic and don't change alot, they should just be made in the template, using PHP to fill in the actual text. &lt;h2 class="big red"&gt;&lt;?=$headerText?&gt;&lt;/h2&gt; However I see the use for helpers for generating more dynamic content, such as tables, lists and to some extend anchors. I threw together a **small** [static helper class](http://pastebin.com/sFKHiA1z), which shows how I'd do it. It's nothing pretty, and should likely be put under a namespace etc., but it works. To showcase how you might use it for h2 tags (which you really shouldn't): public static function h2($text, array $attributes = array()) { return '&lt;h2 '.self::_attributes($attributes).'&gt;'.$text.'&lt;/h2&gt;'; }
It was just an example, but I see it might have come out as if I meant it in another way, my bad.
This rocks :D
Thanks mate. ^^
&gt;you are able to "type hint" in PHP. This allows one to force a variable's type from it's input arguments rather than doing something like... You surely meant to put type in the function parameter static public function getValue(array $array, $key, $default = null) this should throw en exception if first parameter is not an array, making mjcov type check redundant (for arrays). ninja edit: my bad, didn't notice the part "rather than"
As others have stated, look at 'type hinting'. As to what best practices there might be, if you're going to distribute a library, include documentation and tests. Please. These two aspects of distributing libraries seem to be overlooked/ignored more than any others. I don't care about tabs-v-spaces, variable naming styles, namespacing or just about anything else people get in holy wars about - if I don't understand how to use your library, I won't use it. Or I'll use it wrong, then curse you in my sleep. Or I'll send you annoying 'bug reports' about things that aren't 'bugs', but were not explained and aren't obvious.
I've read your post several times now, and although the link is neat, I can't make heads nor tails of what you're actually trying to say. 
&gt;In your code snippet comparison, you're not even doing the float scenario in the C# one. I'd be curious to see how a strong-typed language does it, and I'm pretty sure it would be similar in PHP. What are you talking about? My point is that the string "*15.5*" returns 15 for **intval** rather than representing failure somehow. 15 **isn't** the integer value of the string, **the string has no integer value because 15.5 isn't an integer**. In C# this is enforced. **TryParse** on the string "*15.5*" will fail (i.e. return **false**) it won't just happily convert the string to 15. In PHP to obtain this behaviour you have to go through the additional step of converting the string to **both** an int and a float and comparing the two. If they're the same then the value in the string is exactly representable (and therefore properly convertible) as an integer, but if they're not equal that means that the string additionally has some fractional component, meaning that it doesn't represent an integer at all.
second part: http://www.mwop.net/blog/2013-02-13-restful-apis-with-zf2-part-2.html
Exactly. Something like this: function h1($atts, $content = null) { // extract info needed to render this shortcode extract(shortcode_atts(array('align' =&gt; '', 'color' =&gt; ''), $atts)); // determine necessary css classes to give to heading $class = ''; if ($align != '' &amp;&amp; $color != '') { $class = "class='{$align} {$color}'" } else if ($color == '') { $class = "class='{$align}'" } else if ($align == '') { $class = "class='{$color}'" } // finally render the shortcode as a heading and return it $markup = array( "&lt;h1 {$class}&gt;", do_shortcode($content), "&lt;/h1&gt;" ); return join('', $markup) } add_shortcode('h1', 'h1'); with commentary but still 3 lines shorter than OP's version. I haven't actually run it (only on ideone) so YMMV. Also if OP is willing to live with empty class attributes in the generated HTML it can be written much more concisely (*hint* ternary if).
Firstly, can I ask why do you use an inline style argument when you are already have an id and a class attribute on that tag? Couldn't you just put this in your .css file: .centered { text-align:center; } Then when you construct your HTML you just make the tag: &lt;h1 id="foo" class="foo centered"&gt; Also, why does your H1 tag has an id of h1 and a class of h1? Can't you just style H1 in css directly? Finally, here is something that will change your life forever: * Use a lightweight templating engine like [twig][tw] Then you can create a HTML page that looks like this: &lt;h1 {{hdr-id}} {{hdr-class}}&gt;{{content}}&lt;/h1&gt; Then in your PHP class you do: $attribs = array('hdr-class' =&gt; 'class="h1 centered"', 'hdr-id' =&gt; 'id="h1"', 'hdr-content' =&gt; 'my content') echo $twig-&gt;render('foo.html', $attribs); [tw]: http://twig.sensiolabs.org/
The code is an example, it's not the actual functionality. I thought it was a simple and easy way to get across a function where something could go wrong, and what to use in that case
You don't need to use a full blown MVC stack. I always recommend simple templating engines like [twig][tw] which can be used in just about any environment but still let you easily separate HTML from code. It is incredibly simple to use actually - you need to learn a two line boilerplate to include/initialize it, and then one line template rendering command. Also you can set it up to auto-escape everything which is really nice. [tw]: http://twig.sensiolabs.org/ 
PHP community as a whole tries to move away from the short tags ~~and echo style tags~~. The PSR-1 code style guideline actually recommends never using these tags. I believe Pear code guide forbade using them as well. Most large projects like Wordpress, Composer, Symphony, etc. either conform to PSR/Pear/Zend or have their own guidelines which recommend against using these tags. Granted no one will prevent you from using them in your own code but I wouldn't advocate using them. Edit: Sorry, I was wrong on this. Echo tags are allowed and not being phased out. Carry on Using them. I actually prefer to use Twig and try to use it for most of my stuff, and it has it's own tempting syntax which I prefer. That's my excuse. :P
Ok, can you please explain what is the purpose of this method? I have a lot of questions: * Why do you put id="h1" on H1 tag? * Why do you also put class="h1" when it already has an id? * Why do you use an inline style when you already have an id and a class there? Without knowing the purpose and context of this function I can't really be sure how and why you use it, but to me it seems that you might not need it at all if you just write your CSS the right way: &lt;style&gt;#page-heading { text-aling: centered;}&lt;/style&gt; &lt;h1 id="page-heading"&gt;Centered Heading&lt;/h1&gt; Also, step 1 to becoming better PHP developer: * Stop mixing HTML and PHP There are better ways to do this and it will really improve your life and your code. But that's advice for the future. I highly recommend checking out http://www.phptherightway.com/
implode? // [h1] function h1($atts, $content = null) { $search_atts = array( 'align' =&gt; '', 'color' =&gt; '' ); $match_atts = shortcode_atts($search_atts, $atts); $class = ''; if (!empty($match_atts)) { $class = ' class="' . implode(' ', $match_atts) . '"'; } return "&lt;h1{$class}&gt;" . do_shortcode($content) . '&lt;/h1&gt;'; } 
Here you go: http://php.net/manual/en/book.oauth.php
This is how I did it: https://github.com/bungle/web.php/blob/master/web.php#L17-L33 And this is how you could use it: &lt;?php // %p = %[^/], otherwise look at: http://www.php.net/manual/en/function.sprintf.php get('/users/profile/%p', function($user) { die('Hello, ' . htmlspecialchars($user, ENT_NOQUOTES, 'UTF-8')); }); get('/%d/%p/%d', function($n1, $operator, $n2) { switch($operator) { case 'add': die($n1 + $n2); case 'dec': die($n1 - $n2); case 'mul': die($n1 * $n2); case 'div': die($n2 !== 0 ? $n1 / $n2 : 'Divided by Zero'); default: die('Unsupported operator'); } }); 
No, it is not, because of the *static* keyword. The first line will only be executed the first time (if $url is not set), otherwise it'll be skipped. I would use the identical operator (===) though, and I wouldn't set it to null as it is redundant and doesn't add any value. static $url; if ($url === null) { 
Thank you for the suggestion. (edit: fixed).
That's a PECL extension, so that might be a problem for some.
I have a new project which I can choose the VCS for. I want to update myself and many people see CVS as an old system, so I thought I'd try something else, but I want something that at least allows me to work this way.
Git works well with NetBeans. OP is using eclipse so IMO he is already using a good ide, adding pdt or php plugin may help. I am biased towards NetBeans though.
That could be a case. But here it is used merely as a micro-optimization, and it is predictable enough for me. PHP (and HTTP) is after all "stateless" in that sense that the state is cleared after the request is completed.
Inherently non-testable, though.
 set_error_handler(function($a, $b, $c, $d) { throw new ErrorException($b, $a, 0, $c, $d); }); $array[$key] ?: $default;
&gt;Server-side detection of CSS3 Gradients This should simply not be done. 1. The server-side should not be concerned with the presentation of the page and the capabilities of the browser. 2. Browser sniffing should not be done because it is not a reliable technique for determining what browsers do and do not support. 3. If you *must* detect whether a browser supports CSS gradients (which you most probably do not need to), use a proper client-side feature detection library such as [Modernizr](http://modernizr.com/docs/#features-css).
If you're ever looking for a package, then go no further than Packagist. https://packagist.org/search/?q=oauth There's loads.
Actually I find PHPEclipse slow and annoying. Most of my development is done in notepad++ right now, it's just these older CVS projects that I use PHPEclipse for.
That's a rather sad part of testability. If the testability is the most important thing you are after, surely you should not use any global state (except constants), maybe not even local state (and go pure functional). But I'm not that purist, :-). Same goes about templates (purists tell us that there should be no logic at all). If I was responsible of testing, I wouldn't mind that 'static' in the code I linked.
Generally speaking: * Follow existing standards like PSR-1. * Unit test the balls off it. * Shove the repo on Travis-CI More specifically to you: * Use statics INCREDIBLY sparingly. Just because they're "new", doesn't mean they're cool. * Type hint as much as you can * Use ternary instead of if's on short return statements.
Anyone also sees this [traits bug](https://github.com/zend-dev/ZendOptimizerPlus/issues/5)?
This is amazingly exciting. The [current proposal](https://wiki.php.net/rfc/optimizerplus) is to bundle Optimizer+ with PHP 5.5 so that we can *finally* have a bytecode cache in the default distro.
dupe: http://www.reddit.com/r/PHP/comments/180z5b/integrating_zend_optimizer_into_the_php/
I agree, Eclipse is slow. BTW, I am on Debian so I use SciTE, notepad++ is based on SciTE and its awesome lightweight text editor, only downside is I can't edit files on network like I can do with Gedit.
[Guzzle](http://guzzlephp.org/) includes an OAuth plugin. It's a fairly large library but it works very well.
I stay away from that phpclasses site, it's spammy and has a lot of bad/legacy code. check out [opauth](http://opauth.org/) it seems popular. It isn't a drop-in one-click provider, but it's a small package that does one thing well. Each provider is maintained separately so you can choose which ones you want.There's also [hybridauth](http://hybridauth.sourceforge.net/) which seems to be more of a drop-in solution.
doesn't apc already do this?.. or is the optimizer even more powerful?
When your code is encrypted by Zend Guard, apc does not work anymore. Optimizer+ works though.
Usually you will want to do route matching by regular expressions, for example you will write (ignoring any feature of transforming the expression) `route('GET', '#^/user/(?P&lt;name&gt;\w+)/?$#i', ['nameController', 'indexAction']);` which then the router would match the request_method and path_info, and upon finding a match, send the result to `nameController::indexAction()`. A lot of small frameworks and routing packages do it like this, with varying amounts of syntactic sugar to make them prettier (e.g. you could route just `/user/:name`. If you need more power, for example matching multiple routes, or maintaining an INI or yml file of route definitions, there are a lot of packages to explore on Github that will do that too. In at least newer versions of PHP (5.4+ or maybe 5.3.x+), an array like that can be used as a `callable` type for non-static methods, so the router can treat it as an anonymous function and call it appropriately. For static methods you can simply use '`controller::action`', or you can use an anonymous function, or named function.
If you have a function you want to cache the result of some expensive operation, and aren't using an external container for the result, `static` lets you handle subsequent calls differently... e.g. function doesALotOfComputation() { static $result; if(! is_null($result)) { return $result; } // do some work here return $result = $output; } In general it might be better to store the result somewhere else and not have functions implement their own caching, but it has its uses. If you are writing a small one-file program for example, or want a function to continue aggregating results through several calls, but it's not in a class. 
I'm trying to get this working on ubuntu 12.04 and everything seems to compile properly, I'm able to load the ZendOptimizerPlus.so file and view it enabled after using phpinfo() howerver when I try to view my drupal sites it just gives me a connection reset.
The way parent showed is the best (as in "most simple and fastest") way to do it. You should not care if $array or $key are correctly typed or return any errors, because you have been given a default value to return whenever something goes wrong. Another way for doing it would be static public function getValue($array, $key, $default = null) try { return $array[$key] catch (Exception $e) { return $default; } } But that would require a stack trace every time the thing returns the $default, and stack traces in PHP are (AFAIK) expensive. However, it would be the fist choice to do it in Python (where stack traces are very cheap). 
this is awesome and I hope ZO+ is included by default in php5.5!
^ This guy. Maybe I'm overly simplistic in my approaches but I feel you should write your HTML by hand, no need for a server-side language (or client side language) to do this for you. I never understood why people did this. I already know how to create markup and I don't want to learn how to make your custom functions make markup. I've been creating HTML for over 15 years. It's easy...
I like it! Good work!
And what do you recommend instead of statics? Using regular functions?
Ok, excuse me while I take my reading comprehension out back and shoot it with a rusty fork in the eye. :| Thank you for the correction sir. I'll be over there in the corner, skulking if you need me. :P
Instantiate an object, then use it. If this appears messy or you miss global access then use a container.
If I'm not mistaking, ternary operator does copy everything instead of using default copy-on-write mechanism, so careful with that
&gt; You should not care if $array or $key are correctly typed Yeah, right TheMegaClass::getValue('fuck type checks', ['we', 'better', 'do', 'stuff', 'like' 'this']) Maybe in Python you'll get an exception, in php the normal, logical script execution process will be screwed up instead.
If this does get into PHP 5.5, is there a viable alternative to an in-memory key/value store like apc_fetch(), or will we have to disable Optimizer+ and enable APC? 
What you did is exactly the same as using the original array. echo $someClass-&gt;unknownIndex; will produce the same notice as echo $theArray['unknownIndex']; and ye, agree with all 3 jtreminio's points 'pro' static method
Why do people even use ZendGuard, it's worthless when there are sites out there that you can pay less than a couple hundred dollars to easily decrypt them.
That is true but our clients don't know that. :P
I concur on packagist. If you just want it for social sites, I'd look at HybridAuth https://github.com/hybridauth/hybridauth It's on packagist, so installable via composer.
Opauth looks good. I'll look into it. Thanks!
You could also use something like redis.
So you think that `./configure --enable-zend-optimizer-plus` and `pecl install zend_optimizer_plus` are so different? I mean, opcode caching is something for people running their own servers, so here the usual "people on shared hosts can't install things from pecl" argument doesn't apply.
You are right, PHP just mentions it in the error_log as "PHP Notice: Uninitialized string offset" and silently ignores the error. Yikes! Okay, but no need to type cast in the arguments. static public function getValue($arr, $key, $def = null) return isset($arr[$key]) ? $arr[$key] : $def; } 
I think you should pass the $example in the constructor. Makes it more logical to re-use a single instance of the object, and the parsing result would be cached immediately. 
You'd typically want to use apc_fetch() or xcache_get() as a micro-cache on top of a distributed key/value store like memcached. It's exponentially faster and doesn't need a socket. When your concurrency goes into the thousands, you can quickly deplete your socket pool if you're having to regularly retrieve a common key from memcache that you could otherwise pull from local memory and then apc_store() every second or so. If there's an alternative to what I'm describing, I'd like to hear it. Especially something that would support more complex data sets like Redis. 
Knowing the underlying language is the best thing any employer could expect. Being able to show proof of more advanced techniques like Object Oriented or MVC or whatever is always advantageous. Use of Frameworks I've found to be a bonus, but if you can prove other ways, its not always a deal breaker.
I question the overall usefulness of it - it's _a lot_ of extra code to do things php already has good libraries for. On the other hand, from a purely academic point of view a lot of care and thought was put in to the design and I like that.
It would probably not be something you want to use in a system where performance is critical. However I find it incredibly useful in your garden variety web app as I can instantly format a date any way I want, without having to go look at the manual and refresh my memory on what the various options to date() are. Some people might have a better memory than I, of course, and there are probably some crazy people that enjoy reading php docs, so this is obviously not targeted towards them :) It's also really helpful if you program in multiple languages too as that makes remember the parameters even harder. PHP's date() will format a j as as the day of the month with no leading zeroes, whereas ruby's strftime formats %j as day of the year with leading zeroes. This makes it quite tricky to remember...
Covered well here: https://wiki.php.net/rfc/optimizerplus In short: - Benchmarking seems to show Optimizer+ is the fastest of the PHP Opcode caches - Better support for PHP versions in the 5.x series - Doesn't have the APC style fetch/get cache methods - but I don't think this is a great loss. Much like the APC upload file status ($_POST[APC_UPLOAD_PROGRESS]) is no great loss as an alternative is baked into PHP as of 5.4 (from memory) http://php.net/manual/en/session.upload-progress.php
Since you are probably more in the know than most being on the lists - I'm curious, does this mean Optimizer+ will never see a PECL release and just jump into the PHP 5.5 core? I'm assuming it's a "yes".
I wish I could see what he said :( Anyway, ++ for commenting code nicely. I used to despise comments of all forms, "if it was hard to write it should be hard to understand"-style-e, but sometimes a helpful reminder of an overall process, or a pointer for elsewhere to check for related code, or whatever, can make stuff just that little bit less painful :)
There are those of us that still remember the terms 1st, 2nd and 3rd generation languages. Frameworks? We don't need no stinkin' frameworks.... But we all have to admit that we only really got lots of work done once we could leverage off existing code. So there's an absolute need for frameworks. But if you don't understand why something is done, then you are doomed to inherit from code you don't know or trust. That's not good for you, or your employer. Ask any open source developer about this and they'll emphatically tell you that you should know the base language before you consider yourself a pro in it. There are plenty of guys out there who can wield a hammer and make a pretty good table. But the master craftsmen (&amp; women) who studied this under someone or at some formal school, are the ones that typically get hired. They are the ones that know why a hammer exists. Learn the essence of something in order to master it. Or it will master you.
As it has been said many times in the topic - you better DO use typehints, it removes unnecessary checks that the language can do by itself
I just gave it a whirl, Deriving the date from a format is very cool. I can see a use for it in parsing documents that already contain dates in some formatting. However instead of the large list of timezones you have hardcoded, PHP has that built in! :) You can run this bit of code to see what I mean: $zones = array_keys(\DateTimeZone::listAbbreviations()); $zones = implode(', ', array_map('strtoupper', $zones)); echo "&lt;PRE&gt;" . wordwrap($zones); Also instead of returning the results of `date()`, you might want to return a DateTime object so it can be further manipulated without conversion, or have a getDateTime() method to fetch that instead. and I was fooling around with the source, and in `Lookup::__construct()`, you could define and search formats like this: $formats = ['month'=&gt;'FM', 'day'=&gt;'lDj', 'year'=&gt;'Y', 'tz'=&gt;'t', 'hour'=&gt;'g']; $this-&gt;field = key(preg_grep("/$format/", $formats)); That way later on if you want to let users have a config file with different formats, that $formats array could come from a parsed ini file, for example. I am pretty sure there's a one-to-one mapping of letters to formats, so it should be safe to grep for them, you'll never have the same letter in different values in `$formats`. Heck there might be a PHP function that can do this even easier. Edit: indeed [it does](http://uk3.php.net/manual/en/ref.calendar.php) - specifically you can pull it from `cal_info(\CAL_GREGORIAN);` the Calendar extension is a compile-time flag or on by default in Windows, not an extension, so it is safe-ish to rely on.
While we use PHP for everything, it's design must follow goals. When being used as intended, PHP does not require the ability to create threads: it is an interpreter intended to be loaded into another process, to provide the ability to interpret PHP. The process that utilizes the interpreter is sometimes multi-threaded, which is the reason for Zend having support at the core and in all extensions ( that are written properly ) for a threaded environment: but it's an isolated environment by design. The intention was never to expose threads and it somehow was forgotten, it is just not a design goal of the language, and understandably so. Nothing you recognize as PHP is likely to get threading. The reasons are many: single threaded programming is easier, simpler, easier to debug, fits the intended environment much better, fits it's users better, and it's developers ... to name a few. The pthreads extension is not a thin wrapper around the library after which it is seemingly named. It is an API built using Posix Threads, /TSRM, some goodies from /Zend, and of course the PHP extension API. It provides an object orientated approach to multi-threading in userland, it's API is reminiscent of Java, it's not at all the same in it's implementation, for obvious reasons. To clarify, using pthreads in PHP is nothing like using Posix Threads in C, and nowhere near as complicated, or error prone ... the API suits the environment quite well, or as much as an implementation of threading can, floating on top of a shared nothing architecture. What others see as the barriers to userland threading in PHP, I used as the tools to write pthreads. Actually PHP's architecture provides quite a nice environment to implement threading, I won't say it was easy, and the reasons nobody has ever been successful at such an implementation were soon apparent to me, but I do not give up because something is hard, I continue sitting around in my pants until it works the way I imagine it should work. As to whether it is technically correct .... does it matter, nobody is asking you to write it, all that should matter to you is that if you want to, you can multi-thread in PHP, in relative safety and simplicity ... I think that's pretty cool, it is as complex as your skills and mindset allow :)
It has been said, but I have not seen one argument why type "hints" should be used (and why duck typing shouldn't). It just makes the function less flexible.
After a quick glance I noticed you have some inconsistencies in your code formatting. Mainly space usage between parentheses and returns after brackets. Also you state that your class has a limitation in differentiating days and months. Why don't you force users to supply a date string in the correct format, just like PHP's function date() does? See http://www.php.net/manual/en/function.strtotime.php#100144 for more info.
Cleaning up the initialization and match values is on my todo list, most of that is just me throwing it in there and getting things to work reliably. That'll be the next task along with consistent code formatting (as I started out trying to go by PSR-2 but quickly devolved into just making things work).
&gt; After a quick glance I noticed you have some inconsistencies in your code formatting. Mainly space usage between parentheses and returns after brackets. Yep, that's on my list. I started out trying to go for PSR-2 and got to the point of just trying to make things work so the code is inconsistent. Not used to coding by the PSR-2 standards. &gt; Also you state that your class has a limitation in differentiating days and months. Why don't you force users to supply a date string in the correct format, just like PHP's function date() does? The goal is not to force anyone to use anything, and as long as you supply an example date that does not use ambiguous values there should be no problem. I am considering throwing a warning in instances where the example is ambiguous, hwoever.
I appreciate you giving me the benefit of a doubt :) I understand it is all very basic, but I intend to venture into more advanced stuff as the tutorials progress. My goal is to be able to provide quality material since, as you've pointed out, much of what's available on the internet is fairly inadequate or is just lazy/copied from a manual.
eh the formatting is okay, I just started using 4 spaces instead of 2, I'm not up on PSR-x, just try not to make it unreadable. E.g. I'll do one-liner ifs and loops without braces. Anyway, check out my edit, there are PHP functions normally built in that you can use to derive almost all of the date info so it doesn't have to be hand coded and it will match the user's locale.
&gt; I mean, opcode caching is something for people running their own servers Opcode caching may not currently be common in webhosting, but that's most likely due to the fact that it requires 3rd party extensions, ergo a chicken &amp; egg problem. I think many could offer it at a premium, which would yield a great ROI for merely nothing more than a configuration change and slightly increased server resources. edit: removed some useless words
Glad to hear I was helpful :)
For performance reasons, perhaps you could offer a function that returns a PHP-formatted date format based upon the 'stamp' provided by the user? Programmer could then pass resulting string into the standard PHP functions. That way, programmers get the benefit of not remembering the date format codes, whilst still getting native performance. If stamp already does this and I've just been lazy in not reading more closely - disregard, I suck cocks
I did not know about this. Can you point to an article or something that references it? :) Edit: found it: http://fabien.potencier.org/article/48/the-php-ternary-operator-fast-or-not
If you're already using CVS, then check out Subversion. It was originally designed to be the CVS replacement, and while not as advanced as Git, is much easier to wrap your head around. And I second the recommendation on PHPStorm. Haven't tried Netbeans, but it is lightyears ahead of Eclipse.
&gt; ./configure --enable-zend-optimizer-plus and pecl install zend_optimizer_plus are so different? Yep. One a package manager does once and then hands out to everybody 'free of charge', the other everybody has to make the conscious effort to do. The features people like the best are the "shit, I don't have to do *anything* " features, which is why people like speed-ups so much. Having to install a pecl extension, that kind of feature does not make.
I'm a big fan of using (s)printf now for readability. eg. printf('&lt;i&gt;%s&lt;/i&gt; goes with &lt;i&gt;%s&lt;/i&gt;' , $fruitNames , $plants );
Thanks, that does look nice
I've also been following for a little while and really enjoying it. Thanks!
Something like this. All you're doing is adding class names, not parsing any other attributes from what I can tell. So just put together an array of valid, non-empty class names, then implode them. FWIW, an empty class declaration won't harm anything, it's just a little bit of extra markup in your source. So you don't really even need to check if your array has anything in it, you can just run the implode which will return a zero-length string, leaving you with: class=""
I could see this being helpful for parsing a date inputted by a user of your site/app. "What format do you want your dates in? Give us an example." Then you can save the date() format and parse it accordingly.
To all those who're complaining about browser sniffing: Yeah, it's an obvious hack. But this was a function written back in early 2010 when CSS gradients weren't as contemporary as they are today, and it was used as a fallback to add images as backgrounds for elements that were assigned gradient backgrounds in previous CSS documents. A finishing polish, if you will.
As I wrote above: This is meant as a finishing touch only, and only as a last-minute fallback for browsers that don't support CSS gradients. The usage of the code is as follows: 1. Put CSS3 gradients in regular stylesheets 2. After links to stylesheets are added, call function and check if it returns false 3. If it does, output an additional stylesheet that manually adds background images to elements that were previously being styled by gradients. Worst case scenario, all you'd be looking at is a few extra HTTP requests (which is what this function was looking to reduce). Also, bear in mind this was written three years ago, when browsers were arguably less edgy in supporting cutting edge technologies.
Flussence, The problem with this approach is WebKit still sends an HTTP request to the targeted URL, even if the property is later overridden in the same code block. The point of this function was to reduce overhead for a lot of individual HTTP requests if they weren't necessary.
It doesn't. But when you've a complex looking layout with many shaded elements, potentially knocking off 20 HTTP requests is always a good thing...
As I wrote to another bloke, the issue with this is that there's an extra HTTP request being sent (at least in WebKit, last I checked) even if the property is overridden in the same code block. &gt; Yeah, well... this wasn't a good idea three years ago either. Hasn't failed me since.
Thanks, couldn't remember where I've read this :)
&gt;The problem with this approach is WebKit still sends an HTTP request to the targeted URL Chrome hasn't been loading fallback images since 6.0.472.25, and Safari hasn't been doing this since 5.1. Additionally, if multiple requests are a concern, I got two words for you: CSS sprites.
Create a blog or a simple website and tell the world what you know about PHP, how you solve certain problems, the little tricks that save you lots of code writing. Also learn how to right good code it will save you lot of time in the future when you are bringing other projects components into yours.
I did say this was old code, didn't I? Christ, I didn't even want to post this shit, a friend basically prodded me into signing up and sharing it. &gt; I got two words for you: CSS sprites. Yeah, that's not gonna help much if you've large/transparent radial gradients and/or gradients repeating in both dimensions.
&gt; Do things right and stop doing presentational stuff on the server-side. &gt;implying I'm still using this technique.
Well, you *are* advocating the technique.
No, I posted it at a friend's behest and I'm giving my rationale as to why I ever wrote the code in the first place.
Well, if you do not approve of your own code, why would you ever post it in the first place? I'm sorry, you're not making much sense. 
Actually, [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md) allows them. &gt; Files MUST use only &lt;?php and &lt;?= tags. I should add that I usually use template engines, but I would recommend the echo shorthand tag to anyone using pure PHP.
&gt;Yeah, that's not gonna help much if you've large/transparent radial gradients Large and/or transparent gradients work fine assuming you reserve sufficient space and save the image as an adaptive png-8 file. &gt;and/or gradients repeating in both dimensions. And neither would a separate image in that case.
&lt;3
APC is terribly buggy and unstable. There's been talk of including APC in core for ages but it's always been delayed due to stability. These days APC doesn't even become usable in a new PHP version until months after it's released or if you're willing to use the dev version. The developers of APC all readily admit this on the mailing list.
Maybe later. I don't have the time nor the willpower to do so at the moment. I'm preoccupied with work and my lunch hour just ended. 
Oh, I imagine it'd be easy to criticise. :D The markup is bloated and the CSS is hideously illogical.
I've monitored the logs "tail -f error.log" and nothing, also I have a page called phpinfo.php which contains phpinfo() and that page works.
I wrote a small blog post covering the basics. Starts with explaining opcaches, talks about APC and Optimizer+ and has as how to install. Perfect for starters http://www.intracto.com/blog/testdriving-zend-optimizer
Strange your blog post is in a redirect loop, but only for that particular post.
PH poop test.
Regarding the CSS gradient detection via JavaScript: yes, I know. Don't worry. As I explained in previous posts, this code was written a long time ago...
This is similar to the one I was given for my current position. It's a reasonable test. I would look for people who write unit tests of their own accord, which is a good sign. I would ask for a presentation on why they coded it in the manner that they did (if they get it as 'homework' that is). 
oh ye, name fail
[pH](http://en.wikipedia.org/wiki/PH) poop test. You know, to find out if your feces are acidic.
I think its far too easy. If the point of the test is to see if they know what an interface is or what does extends do then fair enough, but those things are very trivial. Really you want to test their problem solving capabilities and how they manage complexity. We take coding puzzels and challenges and modify them to suit our needs. (here is one for php http://www.phpgolf.org/ - these puzzel sites are just about solving for performance, obviously we want it done in an object orientated way thats clear and readable).
My problem here is that I dont want to ask them to do too much. From the employee POV, having to do a number of code tasks that all take say an hour, it can be alot of work. I got carried away with writing it, I have already removed parts (expiry part).
I'd agre with this. It's far too complete. The README is enough. On the plus side, it's a challenge that's practical. It's not something silly that serves no point other than to provide a cheap question for an interview.
I agree with this. I would argue that it probably would be more telling if you just gave the candidate a disconnected, half-done mess - a few abstract classes and and interfaces and then task the candidate with: * Organizing the project by properly name spacing the code * Making sure the code conforms to PSR code guides * Writing an autoloader * Implementing the interfaces and extend the abstract classes to provide specific functionality * Adding common functionality to some of the the classes using traits * Writing unit tests for all the classes You ought to provide as little structure as possible, because then you can see the way they structure and arrange their code which will probably give you a good insight in whether or not they "grok" OOP.
I am a huge fan of using `sprintf()` as well but I think this would be a better option. echo "&lt;i&gt;{$fruitNames}&lt;/i&gt; goes with &lt;i&gt;{$plant}&lt;/i&gt;";
I agree here. I'm no 'senior' developer, but I've got down the concepts of OOP and I'm pretty sure I can put together the driver and I haven't put together anything like this before. Thanks to the OP for this though, it looks like I can learn something by looking this over a bit more closely.
I love the test suite you've provided to show you're really serious about hiring a senior developer.
Great work! register_shutdown_function magic!
Isn't that just a routing component?
I agree that a comprehensive test is too long, but instead of having them write new code, you can get at trickier concepts by asking them to debug existing code on paper. So throw in some code along with sample bug reports--not stuff that would cause errors (though maybe start with some like that, like not implementing all of an interface just to see how they read code), but stuff that would cause unexpected side effects. You can use relevant code fragments rather than complete implementations and simply ask the candidate to assume the rest is accurate. I used to do a debugging test oriented toward more common things, like assignment instead of equality, missing breaks in switch statements, and other things that caused hair-pulling until you found them that people who actually write a lot of PHP encounter. I found a pretty strong correlation between performance on that test and the level of programmer. Every time I gave someone the benefit of the doubt, they showed me I should have paid more attention to their performance on that 1-page test than the rest of their interview.
Read the PSR's (www.php-fig.org), thats improved my code a lot. I recommend a book called "Clean Code" by Robert Martin.
The other thing is it tests real, practical knowledge in PHP. If you are looking to test someone on a quad tree implementation for a PHP position, you are doing things backwards. I also think we overestimate others abilities. While the example is fairly easy, it still tests numerous aspects that I think far more people than we think would fail to fully understand.
Have you checked out klein before: https://github.com/chriso/klein.php?
lol totally off subject, but i read your title as PH POOP Test... &lt;drinks more coffee&gt;
Packagers already sometimes package PECL extensions.
Totally agree
agreed, this is much more readable than the example by /u/parkertr2. with this you can actually "read" the sentence as you go through it instead of having to look up the variables at the end.
&gt;I have read many posts over the last few months where people think that codeigniter is not as good as it used to be. It's not that it's not as good as it used to be, it's that it hasn't kept up with the language nor the competing frameworks. As it stands, the competitors are considered to be better frameworks as they've evolved their stack with new best practices, and embraced the new features PHP 5.3 and 5.4 gave us. &gt;Should I use another more popular framework like Laravel even if codeigniter serves its purpose? That's not really for us to answer. If you feel that CI covers your needs and you're happy with it, by all means, stick with it. However, if you feel like it's falling behind, as many other developers do, then don't feel bound by the framework just because you started off with it. If you'd like to, go ahead and change to something else that strikes your fancy. The path to take is up to you to decide.
&gt;Redditor for 2 minutes Did you register just to post this comment? Wasn't man enough to have it attached to your name?
It's simple, use ROI. Return On Investment. Calculate how much time you will save by moving to another framework .vs fixing up/extending current one.
If you switch, switch to Laravel. Coding has never been happier.
Well this technique wouldn't even have been necessary if I'd known WebKit had fixed the stupid fallback image loading bug... and even when using images, I kept them packed into neatly bundled little sprites. So yeah, worst case scenario wouldn't have been much of a worst case scenario at all, I was just using this approach to push forward a very new technology in my sites at the time (and doing so while minimising as much traffic as I can).
Point is, you're a trolling asshole. If you registered just to post this comment, you shouldn't have bothered at all.
&gt;In the book, he recommends phpDocumentor, is it something you still use Yes, although note that the one described in the book and the current PhpDocumentator are two different suites. The current one is a result of the merger of PhpDocumentator and DocBlox. &gt;What's the modern equivalent for PEAR? Composer or PEAR2/Pyrus. &gt;What's the modern equivalent for Phing? Phing is probably still good. &gt;The author also recommends PHPUnit2 for testing, it is still relevant or replaced by something else? PHPUnit is still the de facto standard suite for unit testing. &gt;Any other things you think I should know about? BDD, perhaps? We've got Codeception for that.
Sounds like you're looking for [Slim](http://www.slimframework.com/). Instead of 'copying' node.js it uses Sinatra (ruby) as inspiration. Routing is very fast, and pretty self explanatory.
Switching framework for the sake of switching framework is _rarely_ a good idea. If you are a hobbiest PHP developer with a personal site or some football fan club site (whatever) rocking a CI base, then you could probably get away with recoding it for fun and education. If so, go ahead. Otherwise it's probably a waste of everyones time and money for you to do this. If you've got v1.0 of an application, and v2.0 is going to be a rewrite (due to all the business requirements being totally different as they always are, or the old code being a legacy mess from some jerk who quit the company), then this might be a great time to built it in a new framework. The similarities of CodeIgniter and Laravel mean this will be easier than it could be moving to a different framework, but again its about wether or not you need to. PyroCMS is moving from CodeIgniter to Laravel 4 in a large multi-staged conversion process over several versions, because we can't just throw a rewrite in our users faces in one go - but this is not exactly a usual case. I'd suggest you stick with whatever PHP code you have in CodeIgniter now, and improve your JavaScript skills. The next time you start a framework project from scratch then sure, use Laravel, but rewriting code for the sake of it is the act of a masochist. 
?: is that a ternary operator without a true clause?
Keep correct indentation level. It messes a lot with readability. And yea, PSR is a nice thing to use. 
You answer to the rules and regulations of this subreddit, which you are in violation off. Whether I am in the moderator list or not is irrelevant, the result will be the same if you continue on the path you're heading. 
Hm, i think composer doesn't really count as equivalent, as it is only managing dependencies, and pear was a "public library" sort of thing. The rest i second, although i find generated docs pretty useless ;)
Subreddit FAQ ---------&gt;
Ok well I went through there and I don't see any rules that I think I've broken. Which one is it you think I did?
&gt;Comments must meet the standards of the reddiquette. &gt;Please be professional. This is a technical subreddit, so the level of decorum is higher. &gt;Trolling and abusive language are not permitted. We're easy-going, but such things are not conducive to good discussion.
Now all i see is poop test.
&gt;Hm, i think composer doesn't really count as equivalent, as it is only managing dependencies, and pear was a "public library" sort of thing. The "public library" for composer is over at packagist.org.
I know. But PEAR wasn't managing dependencies. Anyways, composer &gt; pear ;)
That's not what OP asked for. He asked what the modern equivalent for PEAR is. You can download and install packages with both composer and PEAR, and in that sense, it is comparable. 
Forcing the user to properly input a phone number is poor UI, the system should be able to take any string of numbers and symbols, strip the symbols and just normalize it behind the scenes. There should be no difference between (555) 555-5555 and 5555555555. Optimally, you'll want to consistently store the country code and display the phone number according to the local tradition.
&gt;It's not that it's not as good as it used to be I think realistically that it was never good - the community just didn't know then some of the things they know now and PHP didn't support a lot of the features required for good OO at the time CI emerged. I strongly disagree with Rasmus (who has been a long time supporter of CI) when it comes to this framework. He tends to advocate things that run with the smallest possible footprint to a fault. This often involves throwing commonly accepted design philosophies and practices out the window.
What I meant was that the quality of the code hasn't been lowered. It's still the same as it were back then. Now, whether the code was shit back then is a different question entirely.
The most appropriate way would be to move all HTTP related stuff to a layer and mock that in testing. I am not sure if you want to go that way. At my current job, we use stream_wrapper_register() with http and https as first arguments. I am not sure if it works for curl, I think you can use it for file_get_contents et cetera.
Realistically, the only thing you might use this for is a quick one-purpose, one-off script. For that, the loss of documentation probably isn't a big deal.
Event based programming is not a fad. JavaScript has always relied heavily on callbacks, long before node.js. Callback madness? Let's agree to disagree. :) I agree that it is not the best fit for PHP, as a widespread way of implementing things.
What if they input something like @#%453@#qr233? Should it accept 453233 as the phone number? And extensions? Maybe a separate field for that? What's the point of storing a phone number as an integer when it's never used as an int?
If your interaction with outside APIs are abstracted into service classes, and the responses they return are abstracted, there's no reason you couldn't inject a dummy service to return a preconfigured service response. Test and verify your code around the Dummy class, and then just swap it out at the end for the real service class. If your interfaces are consistent and your concerns are separated, Dummy service layers are perfect for testing.
Good luck. Telephone numbers are complicated. The [North American Number Plan](http://en.wikipedia.org/wiki/North_American_Numbering_Plan) (NANP) is really popular. NANP (North American Number Plan) numbers are between 7 and 10 digits. Some people write/dial NANP numbers with a leading `1` for historical reasons. Local numbers in [other countries](http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers) varies greatly, and often people dial numbers differently from a mobile phone than they do from a landline. Software can *store* numbers in [E.164](http://en.wikipedia.org/wiki/E.164) which is designed to store international numbers. Dialing an E.164 number from an actual telephone involves dialing the [international prefix](http://en.wikipedia.org/wiki/List_of_international_call_prefixes) which varies from country to country. My advice: ask users to enter their country and their telephone number separately, and be clear that they should enter it they way they would dial their own phone. You can then build a number of filters that remove the international prefix (if they've supplied it), the `+` and the country-code if they've given it, and any prefix characters (like zero or one, depending on the country). *Then*, you can insert the `+` country-code, and store the number in E.164-format.
Thank you. I recently considered applying to a senior position that required I complete a code test before I submit a resume. It included unit tests, about 7 classes, 2-3 controllers... All in all, about 7 hours of work. I'm not doing that just to have the chance to be considered for an interview when there are plenty of other jobs I have interviews for.
This is the only *right* answer here, and it's exactly how it should be done.
If you decided to switch Laravel is probably the best option but I don't think you need to switch. I've been considering Laravel but have decided against it for now. It's not documented nearly as well as CodeIgniter. Laravel has re-rewritten it's self 3 times in the last two years. This has kept me away from the framework until it's settles down.
Decided to do some research, and the situation is more complex than I thought. First, the concepts that I was calling nodejs actually come from Express, the most popular web framework for nodejs, but not nodejs itself. Second, Express was based on sinatra. So sinatra did come first, but they also are expressly in the same style.
I saw those first two links while developing the function, I'm pretty sure the function works for any of the cases described, with the more lax international number validation mode. If they enter the + on an international number, it leaves it, but it's not designed to verify whether the country code matches the one for whatever country they might live in. For the stricter US number validation in the function, the idea is that it would be for a website where users could be in any state, so the phone number they enter must be 10 digits not including the country code. Since the U.S. country code is 1, the function accounts for that including up to two leading zeros. I almost titled this "US phone number validator" since the international validation is so broad that the rules have to be very generic. The international option I guess makes it more comprehensive, and I believe it does work for all cases without a false negative, but could have false positives. In the application I'm working on, it only validates US numbers but added the other option to make it more complete.
I dont blame you, its major over kill. 
Thanks! Sorry I wasn't specific enough about the type of testing I'd like to do. You are absolutely right about using mocking. Using VCR (in ruby) is basically just an automation to provide fixture data for tests. I found it very easy to use and helpful. Especially when (external) APIs change you don't have to adjust your fixtures data manually. All it takes is to 'record' the HTTP interaction again. 
A tool that does some of the things you mentioned is [wsunit](https://github.com/lapistano/wsunit).
Ahh didn't realize it was wordpress specific. Thanks.
As a very simple router implementation and DI container it's cute - so kudos for that. Fitting it all into a Gist, nice touch :D
I always give my values and strings extremely logical names so their really easy to take care of! like strFirstName strLastName. str implies that it's a string containing text. Age would be intAge. This way i can keep track of things. Tho, when i do something big spending over a lot of pages and passing values in-between them, i sometimes keep a lille text document with the things i define so i can keep track of them.
About to head to bed. Been busy with some private projects since I got home. Get back to me tomorrow evening once the weekend starts if you want me to have a look at it. 
&gt;Since the site is commercial and will need scale immensely (hopefully), No framework will make your website scale automatically. That depends entirely on your architecture. &gt;I've assumed that Zend is the best MVC option. But, should I consider CodeIgniter or CakePHP as well? Between those options, personally, I would not bother with CodeIgniter and CakePHP. Zend would, in my opinion, be the best option. &gt;Assuming it doesn't take me too long to familiarize myself with Zend (or whichever option I choose), how long should I expect the entire switch to take? Zend does have a steep learning curve, and even more so if you have never worked with MVC before. It is, however, extremely flexible in what it does, and the components are quite well-engineered. It will take some time for you to learn it, but if you value an enterprise architecture, it will be worth the time spent on it. &gt;This means I probably can't install the entire Zend framework... but I could be wrong. You're wrong. Zend Framework is just a collection of PHP files. You can access all of it without any problem. 
Before all the Hate Bears get on my case, this is just one dev's opinion. Are you developing alone? If you are, are you reasonably going to have time to rebuild everything you've done on a new framework? Will your employer give you the freedom necessary to do so? If you do, I highly recommend making the switch. I only know of Zend through reading some documentation, but while I do think it's a good framework, it might be overwhelming to jump into. Same with Symfony2, great framework, but if you're new to MVC (and especially if you're new to OOP) the learning curve can be steep. CodeIgniter is alright - I've used it extensively. It's incredibly easy to pick up, but it has a poor implementation of MVC and doesn't encourage putting code in the right places. Laravel has been an excellent middle ground between Symfony2 and CodeIgniter imo, and I would highly recommend it. If you do have an OOP and/or MVC background and are comfortable diving in head first, Symfony2 is great. The latest versions of Symfony and Laravel utilizing Composer, which can greatly assist in managing your libraries/packages.
what is this i dont even Oh, developer navel gazing, awesome, that's so useful. :)
tl;dr. If you can't create a reliable test, mock it!
I get downvoted to oblivion when I deter people from using statics.
I think this could use some improvements, but for a simple router it's not awful like some on here claim. It's obviously not meant to compete with Symfony and the like, and the criticism about anonymous functions is kind of misplaced since you can also use named functions or OOP just as easily with this as with anything. As a learning project, I say good job! We need to encourage learning and experimentation, at all skill levels.
I think if they say "How come all of these classes are defined in files with a different name than the defined class? Doesn't the standard say...." Then you should hire them.
At my work we deal exclusively with US and canadian phone numbers. Strip everything that isn't a number. If there are 10 digits, we're good. Extensions are separate fields. I can't speak to international numbers (which are much more complicated), but I think validating strictly to NANP is a mistake. If someone wants to put in bad data, they will find a way. I would rather it be obvious like "000-000-0000" than "232-232-2323" which is much harder to filter out should you want to use your data at a later point.
Replace $uri being set to a $_SERVER member and you may be right (only so it can run CLI) $url = PHP_SAPI === 'cli' ? $argv[1] : $_SERVER['REQUEST_URI'];
&gt; At least 3 digits need to be grouped consecutively How would that work for French numbers? They have a one digit area code and then always write the remaining 8 digits as 4 sets of pairs. (+33.1.22.33.44.55). If you really want to do this right, you'll have to visit www.wtng.info (and keep re-visiting, because national numbering plans change all the time) to get the digit plans and valid area codes. What we then do — after validation — is normalize to a minimal format and store without any of the extra crap. "countrycode.areacode.localpart" or "countrycode.localpart". The object has another method for doing display, which knows things like the fact that French people can't abide more than two consecutive digits. And then you'll still have problems with countries like Germany where people with ISDN lines, common there, can create their own numbers by tacking on extra digits to their assigned number, not unlike how gmail users can create their own email addresses. Validating German phone numbers is next to impossible.
Needlessly using a closure does. My biggest problem is that you're now inside of an anonymous function for pretty much every stack trace that you get. This slows debugging down for no real benefit, so why do it?
He's interpreting our rules correctly. Don't be a dick. Both jtreminio and I have been removing pretty-well every comment you've made here, and it's honestly leading up to a ban. Please be nicer.
Take a look at [Laravel](http://laravel.com/) or [Symfony](http://symfony.com/).
I don't even understand the question UHG!!! I have a lot work to do...
as much as i love using closures, i still have to support the occasional 5.2 or lower -- oh well.
Thanks! It wouldn't work for that case and is updated (to require 2 consecutive digits). That format is only 1 out of 26 on this page: http://en.wikipedia.org/wiki/Telephone_numbers_in_France In hindsight, I really regret posting this as an international number validator as well as US. It only works "well" for US numbers, but I thought I made a valiant stab at an "impossible problem" of validating international numbers if the option is enabled.
Legibility. Debug-ability. I'll take individual functions over a gazillion if-then-else statements any day.
You bring up a really interesting point there that I had not come across before about it being better to have obviously garbage data over inconspicuously garbage data. The function essentially follows the "10 digits and we're good" philosophy for US numbers (8888888888 would validate) but just takes it a little further, so it's definitely not strictly to NANP. I can see where having extension as a separate field can be good, but I'd rather not mess with a separate field for it if I can help it, I think this method works well too...
I believe you're correct about just the second parameter not being `callable`. The first one seems to just act like a key for an array.
It's updated to include # for ext and zero whitespace between phone number and extension, so all those examples would validate except that "555" is not allowed for Central Office code because my understanding is that 555 is reserved for fake numbers in TV and movies.
&gt; That format is only 1 out of 26 on this page: http://en.wikipedia.org/wiki/Telephone_numbers_in_France Most of those are in Caribbean and Pacific French territories, which have 3-digit country codes and so of course things work differently. In Metropolitan France everyone uses the clumps of two digits each.
Many things that get validated probably shouldn't be. Email address validation is widely disastrous, as is that of personal names, postal addresses, and many other things better left alone. But birthdates are very different from phone numbers. There are simple, well-known, deterministic formulas that can tell you whether or not a date is valid. For a phone number, the only thing you can really do in general is validate the country code and make sure the number doesn't exceed 15 digits overall. In some countries you can do more, in still others you can do okay with many megabytes of lookup tables, but in others still, you just can't.
I don't see how a standard email address validation should be disastrous, or why personal names should be validated other than required/trimmed strings... I personally don't validate postal addresses, but I guess a reverse geocode could be attempted if the application relies on a latitude/longitude for the address... Because this validator can include extensions, it could possibly exceed 15 digits, but it enforces at least 10 digits for US and 9 for international numbers... What do you mean by email address validation being disastrous? Sure, the test email address "test@this.com" that I use for development isn't a real email address, but what's the harm in some basic checks to see that form input is reasonably valid?
Thanks, very good to know for the sake of a generic phone number validator :)
And also extensible. It's hard to have a function inherit from another function, ya know?
Seriously, are you going to stalk me now and post bullshit comments just because you have a problem with me, troll boy?
&gt; First, let me say I really do not like the idea of giving people code test's. I have worked at many places that had code tests and many places that did not. I am scared of places without tests. Let me tell you about a real experience at a place with a test. The candidate was to log into an ssh server. It would open a text editor and they would see something like the following: &lt;?php /* Your goal is to write a function named is_even, that takes a single argument * and returns true if the argument is numeric and is even. */ When they save and exit, it would try to execute the code. Any syntax errors would be displayed then they would be dumped back into the editor where they left off. Non-exception would proceed to the next question rather it was right or wrong. A human would determine if they passed since it might be technically wrong but prove that they know what they are doing. We had one guy that just had syntax error after syntax error. Eventually they put their code *outside of the php tags*, which obviously didn't give a syntax error. **THESE ARE THE PEOPLE THAT GET HIRED WITHOUT TESTS** In fact, these people had verified previous employment writing PHP. Seriously. The tests should not be super hard. They should not be the only hurdle to hiring someone. They should be so easy that if someone fails it they are an immediate no-hire. And even after that you'll be surprised how many failures you get.
None of these implementations (sinatra, slim, express, etc.) force you to implement _all_ of your controller logic inside that anonymous function. Abstract appropriate parts out as you should be doing anyway.
What a terrible argument unless you want to apply that to all lambdas in every language ever. Feel free to explain to me the difference, documentation-wise of function somefunc ($foo, $bar) Versus function ($foo, $bar) How about a more concrete example: function stupidOneTimeUseMapFunction($element) { stuff } // hundreds of lines of code $blah = array_map('stupidOneTimeUseMapFunction', $a); versus $blah = array_map(function ($element) { stuff }, $a); How is this feature _abuse_ exactly?
For the same reason that standard full-stack framework routers _could_ be implemented in an if-ladder but aren't. Abstraction.
An hour or so, maybe two with testing, its a very basic project. More to the point, why are you asking us? You should be able to estimate time for each item.
A hour or two probably. In theory. In reality it'll take much longer. You don't speak fluent English, so communication is going to be hard - this will add time. You want someone to work with an existing system, this means they need to learn the system first - this will add time. I've seen requests like this, and this is NEVER all that you actually need. Don't even dream about getting a fixed price quote - no one with any experience will give you one.
Depends on the quality of the current application, using a established framework such as Laravel wouldn't take long, i.e 1-3 hours, but writing code in to an unfamiliar environment would probably take longer.
This is an interesting project that looks reasonably well executed. It's still not really even close to being on par with a good editor or IDE with a local and/or dedicated server environment but it will be very interesting to see how it evolves.
You've missed the point completely. A type or an interface would tell you what parameters are expected as well as what it is expected to return. For instance: public function someMethodToBeCalled($function); /* Hold on... What is the function passed along as an argument supposed to do? What arguments does it receive, and what's it expected to return? I'd have to check the documentation to find out. */ If I have this, however: public function someMethodToBeCalled(ISomething $something); /* Ah, now I see what's expected by looking at the the signature alone, and the return type is specified via docblock declaration. */ 
You could parse the file daily and enter the data into the database in its own table with a date attached. It would make it easier for you to see and work with the data to accomplish what you are wanting. As for a quote, take the other comments into account.
Here is a good site to look at http://www.phptherightway.com/ Should cover most of what you have asked
Great idea, promissing project however doesn't work for me. 404s here and there. :]
I'm outsourcing this project and don't have perspective on how difficult this project is. Thanks everyone.
nice for learning PHP
Here's my little OOP test: http://www.phpu.cc/phpcards/
I already love it for its embed code which is like 1 million times more useful that the crap that GitHub delivers for its gists. Can't wait for the GitHub integration!
Heh. This is getting significantly better reception this time around than the last time it was submitted.
Keep fighting the good fight brother.
Has anyone used sublime? I heard it's good.
"Why not? It works, doesn't it?", We've all had this problem trying to explain to junior developers what's wrong with it. Now there's a place you can link them to.
Well, the PHP manual doesn't really give compelling arguments to move.
The manual has in big letters, on top of a red background, at the top of all mysql_* pages: &gt; This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. If the official website of the language you are using is discouraging you not to use a specific function, you should probably pay attention. If you need more information past that, then start reading.
You want to throw your example up so I can take a look?
&gt;Well, the PHP manual doesn't really give compelling arguments to move. You mean like these? http://www.php.net/manual/en/faq.databases.php#faq.databases.mysql.deprecated http://www.php.net/manual/en/mysqlinfo.api.choosing.php They're linked to from any of the mysql function pages, with the following warning: &gt;This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: &gt; mysqli_connect() &gt; PDO::__construct() This sums up the same information that's contained in your stackoverflow post.
Alright, I had a look. The things I noticed at a glance: * You should provide a heading (preferably a h2) to section the nav with for accessibility purposes. E.g. &lt;div class="navigation"&gt; &lt;h2&gt;Navigation&lt;/h2&gt; &lt;ul&gt; &lt;!-- ... --&gt; &lt;/ul&gt; &lt;/div&gt; * There are some design-specific markup, i.e. things which are better solved by using CSS: 1. &lt;span&gt;&lt;/span&gt; This is being used to create a separator. This is best accomplished by using border-bottom. 2. &lt;div class="shadow"&gt;&lt;/div&gt; This is better solved by applying the shadow directly to the UL, either by adding box-shadow, or applying a shadow background image and some padding. 3. &lt;div class="padding"&gt;&lt;/div&gt; This is probably used to allow the users to rest the mouse outside of the menu without it closing, but is probably better solved by expanding the bounds of the &lt;ul&gt; beyond that of the actual menu, e.g. by adding padding. * &lt;div class="submenu"&gt; There's no reason for the sub-levels to be wrapped in divs, and the class name itself is misleading. A submenu is usually a menu which is provided aside of that of the main menu, not together with it. * &lt;div class="submenu_clip"&gt; This does nothing. * display: none; This not only hides it visually, but from screen readers as well, which isn't good. You should position it outside of the visible area of the screen instead. * left: -100000px This value is too high, and hides it completely for some screen readers. 9999px is max, alternatively 999em. No more. 
But you are not jtreminio i dont listen to you
Heh. I don't know which of the mods awarded me with that flair, to be honest. I woke up one day and it was just there. Guess I'm the anti-jtreminio.
PHP now has built-in email validation. (Filter_var). No need to roll your own incorrect filter. Most people who implement their own only use part of the spec. However, email addresses DO have a spec and anything that doesn't fit that isn't a valid address. Of course, the easiest way to validate an email is to attempt to send an email to the address. Hence the many "check your email, click the link to validate" schemes.
I look forward to seeing the documentation for the API. I have a site I would where I would like to send a user w/ some generated PHP code, and PHP fiddle only gives me gist options.
Thank you. I like it.
We've solved a similar need by writing a "mock server". It's a web app that sits there running under Apache (or whatever) that also has a client library for registering request/response pairs. If a request matches (uri, params, authentication, headers etc) then the registered response is returned. Finally, you can call a method to assert all requests were executed. I knocked it up in an afternoon - it wasn't particularly complex.
Sorry for not replying earlier. I am not sure as I have never coded anything like this. A quick search got me to this: http://stackoverflow.com/questions/7254095/how-to-solve-a-math-equation-in-a-programming-language I will be playing with this a bit as it looks interesting. 
It's updated to 8 digits
I think this will be most useful for people sharing php problem solutions, like how popular jsfiddle is with javascript code problem solving
Doesn't look like auto complete works for frameworks..
I made this as I found all the current REST API's were all a pain in the ass to use. This will not likely be for everyone, however I really enjoyed making it, as well as using it. You basically only need to create a Class for anything you want to add. No messing around. **EDIT:** I'd love your feedback to make it better.
I just posted this today - it's a dead simple PHP Rest microframework... https://github.com/mikecurry74/simplerest (original post: http://www.reddit.com/r/PHP/comments/18lm3k/simplerest_a_new_microframework_for_a_php_rest_api/)
It's wrong from the very beginning. You wrote in the readme some absolutely non-related stuff instead of describing your project. By non-related I obviously mean apache configs. Htaccess file contents are enough to understand how a request should be passed to your app, everything else is up to developers/admins to decide - maybe they'll use nginx and not apache. And I don't like the implementation either. Not so functional, non-extendable. And how about checking requirements? It will just die with "undefined function 'mb_internal_encoding'" instead of some pretty exception "Mbstring extension is missing. Install it or you won't be able to use my awesome app" if the user doesn't have mbstring installed. ps. I'd also quote this: &gt; How do you handle: &gt; &gt; * PUT data &gt; * DELETE links &gt; * Decoding of incoming HTTP body based on Content-Type &gt; * Authentication &gt; * Alternative content-types &gt; * HATEOAS links &gt; * Accept header switching output-types &gt; &gt; You might suggest these features are only for “advanced RESTful API’s” but in reality these are the features that make it a RESTful API in the first place. What you have described is nothing more than a single JSON endpoint. (c) Phil Sturgeon in comments to [this](http://www.venveo.com/articles/view/building-a-restful-api-with-expressionengine-templates) article
 [Slim](http://www.slimframework.com/) seems to be a much better alternative.
Haha, okay I think I'll keep it at 8 digits for the international option. I always forget that Tokelau has 7-digit numbers, too...
I suspect strongly they're using E.164, or they're going to a country where the phone can (cleverly) disambiguate between the local dialing system and the home dialing system (e.g. UK or Mexico versus US), otherwise you would be unable to dial local numbers when using a local SIM (e.g. US GSM phone in China).
Oh yes, I can't wait for github integration... I often find myself in the mood to fix small bugs in projects online, but too lazy to fork it and clone it locally and fire up the editor, should be great to be able to clone it right over to this work on it and push it back to github, without the 'local' hassles. Should also be great to test out projects directly from github without downloading anything.
&gt; the idea is that it would be for a website where users could be in any state For what reason are you accepting telephone numbers? My home is in Maryland USA, but my mobile number is United Kingdom. I have a hard time filling out forms electronically because because of "telephone number validation" which is almost always broken in some subtle way. My number is *my* number regardless of what an application thinks. &gt; `if ( $us_number &amp;&amp; $matches[5] != '555' ) {` You're special-casing prefix `555` incorrectly. [Many 555-xxxx](http://en.wikipedia.org/wiki/555_(telephone_number\)) numbers have been released for allocation. &gt; two leading zeros. Americans might not do that. On a landline, they'll use `011` to dial internationally; e.g. to dial Buckingham Palace, an American would dial `011442079304832` and if they were overseas trying to call the White House they might try `0111 2024561111` instead of `0012024561111`
My only real problem with REST is that you wind up having to write a client for every language you want to use it with instead of there being a generally accepted and widely used way to auto-discover resources. This leads to a lot of boilerplate code when creating a REST client for a given service. [Swagger](http://developers.helloreverb.com/swagger/) for example has an open JSON standard for describing a REST service, but you rarely see it in action. Not that I'm advocating SOAP or anything, but WSDL was nice if only for the fact that you could automatically generate an object which already knows which calls are valid so you're not manually having to define it for every client.
It's an application that requires users to enter a lot of contact information and documents, and managers can view the information. Good to know about 555 numbers. Updated. Found this regarding 0111: http://wiki.answers.com/Q/What_country_uses_country_code_0111 So for US numbers, it should be between one and three 1's for country code, instead of one 1? The two leading zeros are optional in the function. What does your UK number look like, with the numbers changed?
&gt; It's an application that requires users to enter a lot of contact information and documents, and managers can view the information. Right, but who are the users? Are they potentially staff? Are they taxpayers? Are they people who want to buy something? Are they going to order some labor? &gt; So for US numbers, it should be between one and three 1's for country code, instead of one 1? The two leading zeros are optional in the function. `s/^\s*0*1*//` will remove the international and local-long-distance prefix on a US number. &gt; What does your UK number look like, with the numbers changed? Like the Queen's number: `02079304832` Depending on the audience, I might dial it as `+442079304832` or `011442079304832` but unless it was for my neighbour, I would never write it as `79304832`
They are people applying for something, it's kind of a security-centric project... I'm not sure that I'd want to allow an unlimited number of 1's and 0's at the beginning for US, but will update to allow up to 3
It probably is for sure if you need anything more than the absolute basics (JSON end point). I looked at slim, it was a little too late for me, I wrote this code a couple years back. I'd probably still use the code I wrote today, as the level of interface I am providing is a basic one, and I don't have to setup routes as the code here takes care of it.
Interesting, I'll have a look! :)
&gt; I suspect strongly they're using E.164 Yes, that's what I meant.
Also: when has it been 'cool' to use session based cookies in a stateless protocol? - Secure cookies with AES-256 encryption ? Since w
 if(!floor((((3&lt;&lt;3)*date(chr(0x4E))+date(chr(0x47)))-040)/(0100|0xF))) { echo "implement some code"; }
Can I download this and install it on my server?
lolnice. In English: if(!floor(((24*date('N')+date('G'))-32)/79)) { echo "implement some code"; } So take the number of hours elapsed so far this week (`24*date('N')+date('G')`), offset by 32 hours (sunday 0000 through monday 0800), then make sure it's not greater than 79 (thursday 1500 - monday 0800).
So, this is exactly the kind of thing that the new `DateTime` class was added for. $timezone = new DateTimeZone('Europe/London'); $now = new DateTime('now', $timezone); $monday = new DateTime('8am Monday This Week', $timezone); $thursday = new DateTime('3pm Thursday This Week', $timezone); if ($now &gt;= $monday &amp;&amp; $now &lt;= $thursday) { // run code } Wonderfully readable code and super simple, you can read more [in the manual](http://php.net/datetime).
Your script is spawning a new process every second. That's a lot of unnecessary memory allocation and deallocation. A better solution would be to connect to MySQL from within your PHP script and maintain the connection. That way you wouldn't have to parse the output either. &lt;?php mysql_connect('localhost','',''); while (1) { $result = mysql_query("SHOW FULL PROCESSLIST"); while ($row = mysql_fetch_assoc($result)) { if ($row['Time'] &gt; 0) { print_r($row); die; } } sleep(1); }
While you are correct, it was possible, and isn't a bad solution, it isn't as easy to take timezones into account :)
I would've listened to it but... I don't use nor want to use ror php edition. Plus I despise oop. Looks interesting atleast good luck to you all.
Good technical comments. Horrible interpersonal communication skills. You must be an engineer... 
Well, it worked for me - found the problem as expected. Didn't have any memory issues either. Maybe someone will fork it and make it better? Ah well, thanks for the info though :D
You should adopt [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) and add [Composer](http://getcomposer.org/) support.
Aye. You need to filter out sleeping processes, though.
&gt; however we couldn't restart the RDS server to enable the slow logs... [`slow_query_log` is dynamic](https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_slow_query_log), so you should be able to turn it on without rebooting the server. But anyways, you should mention the motivation in the README; otherwise, the immediate question everyone will ask is "Why can't you enable the slow query log?". Edit: And mention the caveats of using 'show processlist'; that is, it won't pick up things that take less time than however often you poll, it doesn't record queries that aren't slow but do use on-disk tables, etc.
I think this is a poor solution, there are numerous things in mysql which provide way better(native) information. There is an option to log all slow queries to a table, which you can purge, and select out of. You would also get better information for your analysis by looking at the information_schema tables as you can do your filtering in sql instead of sorting the output and juggling a potentially large result set. You probably need to do some benchmarking to see what's better for your situation. Can you enable sysloging? This would provide a sudo asynchronous way of sending log data with out making your db work much harder.
A regex that might work : &amp;lt;body ?[^&amp;gt;]*&amp;gt; Edit writing this on my phone is impossible apparently... 
I am the most mature person ever http://phpassist.com/36a36#8
 $newHtml = preg_replace( '/(\&lt;\s*body[^\&gt;]*\&gt;)/', '${1}The New Stuff', $html ); Where: * the first parm is the regex which matches a body tag (with any leading internal whitspace - "\\s\*") and any internal trailing whitespace or attributes (anything not "&gt;" - "[\^\\&gt;]\*") that may or may not exist * the second parm replaces it with the match ("${1}") and appends "The New Stuff" right after it * and finally $html is the source you are pattern matching. [edit: LOL - syntax error. Forgot a comma. ] 
Right. If they're required to have a US number, simply explain that they should be writing it in a US-way. &gt; but will update to allow up to 3 You can simply remove the international prefix commonly used in much of the world (`00`) and the NANP one with: `(?:00|011)` Adding the rest of the world will take a few minutes on wikipedia. You can then translate this international prefix to `+`. The thing that follows is the country code, so if you wanted to US-ify the number you could then do: `^(?:\+1)?((?:\D*\d){10})` and collect the digits in the capture for reformatting.
That's what I do. I used to rely on Blackberry's smart dialling feature, but was bitten once and now never again. However, what I was referring to was the fact that toll-alerting used to be common enough that people would explain that they lived in the "far part" of the area code by writing a `1` in front of their own number. These days, almost everyone has "exempt plans" on landlines, and to my knowledge mobile calling plans have *never* required toll alerting, so the only people still doing this are doing it for reasons that are no longer relevant.
There's a placeholder with "888-888-8888" in the input box, but wanted to have some additional validation... It might even help to avoid any typos by the user...
Then people will be fine with that. Simply require 10 digits and indicate they should put the extension (if present) in a separate box. On the other hand, if an expatriate could conceivably use your application, you should not do any filtering except the filtering that I suggested.
 $('body').prepend('&lt;?=$text?&gt;');
If you write code like this I'm not surprised at all that you're writing slow queries too.
Thanks, this problem was due to overload... fixed
We are working on code complition like a regular IDE. Its in development and in the near time will be available in the website :)
Nope :) At this time phpassist is SaaS and cannot be installed as stand alone project. We consider making a stand alone version...
use querypath. http://www.ibm.com/developerworks/opensource/library/os-php-querypath/index.html
As others have said, you can't go wrong with PHPStorm. VCS wise you could also look into mercurial which has a shallower learning curve than GIT. You really want to start branching though - it allows you to easily make changes on a release branch if there are issues that need fixing but other stuff in trunk/master/default isn't ready for prime time. Where I am we use feature branches - a new branch for each feature which are then merged down to default after code review. This then means that default can have releases made from it whenever. We tag a release number, and deploy to stage, then live.
You can catch more flies with honey than with poop
&gt;Yeah, that actually won't work. Starting at the third level of subnavigation, items in the nav menu will have their padding extend over the parent link, Sure it would. You can overwrite the rules at the nth level. E.g: #navigation ul ul ul { } &gt;... except the border didn't extend to meet the width of the entire menu (at least on some browsers). Then you did something wrong. I've coded tons of these and I've never had any problems with applying a border. &gt;Actually, there is. That wrapper is what's allowing the clean CSS3 transitions. Which you could have applied to the ul.
Regex is the wrong tool for this job. Use a HTML parser instead. [Or else Zalgo will come](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454). 
&gt; Which you could have applied to the ul. Nope. See, the UL was positioned relatively, whereas the wrapper was positioned absolutely. &gt; I've coded tons of these and I've never had any problems with applying a border. Sure, show me one. Or three, if you maintain there's tonnes of them. Mind you, I set no absolute widths on the subnavigation levels, so everything was calculated automatically based on the width of the longest word. &gt; Sure it would. You can overwrite the rules at the nth level. E.g: No, you're not getting it. Say the user wanted to access the parent link holding the tree of child links - the padding that would normally provide the proximity detection would obscure the user's cursor from clicking any of the previous navigation links.
&gt; And? There's nothing from stopping you from creating that CSS transition in opacity. The :hover event would be triggered even when the opacity was at 0. The positioning was critical to the folding of the subnavigation menus. &gt; You're not getting it. You can set the padding at the nth level NOT to obscure previous levels. Oh, so how would the proximity detection even work at nth levels? :p &gt; Ugh... What "ugh"?
this is just hilarious
I expected it to be "oh, it can be anything that's callable!" but I'm actually impressed with the style available and used in that part of the documentation. I'm still confused by the assumption that you'd only want to write it that way after it got bigger though. That should be what they're promoting, not callback style. Callback style should be the odd case for people that really want to be different.
Wow. Really? Not only is that not PHP, but it's not even going to do what OP is asking.
When written in a .js file - yes, will do nothing. If placed in some php-parsed template, will do the job just fine. Depends on what the OP wants exactly.
Not really. It would completely fail the minute you turn off JavaScript. Additionally, it's missing script tags. Point of the matter is, this is not a real solution to OP's problem.
I'm familiar with branching, just haven't needed to use it in this situation, I have no doubt I will in the future, but I want to make sure the VCS can meet my basic needs first :)
The script tags are implied.
Regardless, it's a shitty solution. Also, this is a PHP programming subreddit, not a Javascript subreddit. If OP wanted a JS solution, he would've posted in r/javascript or r/jquery.
Curious why you don't use the PUT HTTP method for creating.
oh god, it burns.
I really don't want "enterprisey." That conjures up images of Java and XML. I don't see why they can't be more like Ruby or Python (I want to like both of them, but they deviate too far from the C-style syntax I'm familiar with). Neither language is "difficult." I'd just like to see less inconsistencies and more OOP. I should be able to go `$foo = upper($foo);` or `$foo-&gt;upper();` and expect the same result. And the order of argument should be the same across similar functions, instead of the haystack/needle mess we have now. Is the so much to ask?
This is the one I wrote. // Filter SQL Injection function filter($input,$type) { // Options: Text, Numbers, NumbersDash, TextArea switch ($type) { // Plain text case 'Text': $input = preg_replace('/[^a-zA-Z0-9\s]/i', '', $input); break; // TextArea case 'TextArea': $input = preg_replace('/[^a-zA-Z0-9\s\.\?]/i', '', $input); break; // Numbers Only case 'Numbers': $input = preg_replace('/[^0-9]/i', '', $input); break; // Numbers with Dashes case 'NumbersDash': $input = preg_replace('/[^0-9\-]/i', '', $input); break; // Default default: $input = preg_replace('/[^a-zA-Z0-9\s]/i', '', $input); break; } return $input; } $Message = filter($string,"TextArea"); echo "Filtered TextArea: " . $Message . "&lt;br&gt;"; $Message = filter($string,"Numbers"); echo "Filtered Numbers: " . $Message . "&lt;br&gt;";
What?
Lol, awesome 
Scalar types do not make PHP "more enterprisey", they just make the functions not ridiculous. I know it doesn't matter, but there is almost no reason to not do it other than "it would take some work", which is fair enough. There are a bunch PHP forks floating around somewhere, they pop up, add some cool features, then nobody other than the original author use them and they realise the whole thing was a big waste of time, then they start using Python or something else. I can't even find them on Google, but I've seen 4 that got linked around heavily in the last few years - and have faded since.
From the logs: &gt;HTTP "Content-Type" of "audio/mpeg" is not supported. Load of media resource http://harlemshakeify.com/public/mp3/harlem-shake.mp3 failed.
Yeah I didn't make a stab at the entire thing, I was just offering a differing opinion on the version that lsv20 produced. For yours: while I like `sprintf()`, I hate manual escaping like you've done -- it makes the code much harder to read. In that case I would've used a single-quote for that argument so that I wouldn't need to escape the double-quotes inside. This is how I would've done it: function tag($tag, $content = '', array $attributes = array()) { $doc = new DOMDocument(); $node = $doc-&gt;createElement($tag, htmlentities($content)); $doc-&gt;appendChild($node); foreach ($attributes as $attribute =&gt; $value) { $attr = $doc-&gt;createAttribute($attribute); $attr-&gt;value = htmlentities($value); $node-&gt;appendChild($attr); } return trim($doc-&gt;saveHTML()); } Using DOM objects makes it a lot easier to produce well-formed HTML, and gives you the flexibility to unit-test the code in multiple ways if you refactor it return the object instead of a string (then you could test both at the object level and the string result level). This does skip the self-closing tag part, but that's [not required by HTML5](http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag) so meh.
Firefox.
What OS?
I borrowed enterprisey from the podcast in its context, simply to mean a more industry-directed direction. Scalar types weren't the only thing talked about in the podcast. If there's going to be a successful PHP fork it's obviously going to have to be a concerted effort from the core developers, or at least from a lot of dedicated and enthusiastic people. 
&gt; Yeah I didn't make a stab at the entire thing, I was just offering a differing opinion on the version that lsv20 produced. Yeah, I sort of figured as much. It's a bit more involved but as long as we're stepping into using DOMDocument, we could just create a class to extend DOMDocument. P.S. Please don't take this a criticising as much as critiquing and bouncing ideas back and forth. :)
Windows 7, but it's irrelevant. You really need to switch over to a (set of) format(s) supported by the Open Web.
What audio format would you recommend? I'm a noob with audio on the web.
Oh, much the same here! I enjoy it.
You should not need to know the UUID when calling PUT. The way I develop my APIs, I use a general endpoint for the object type you are creating ( PUT /store/product ). The UUID should be returned, once validated and added. You can also upload files via PUT, making it handy for larger media. 
http://html5doctor.com/html5-audio-the-state-of-play/
Okay, just making sure. I fear sometimes people take it too personal. **EDIT** Thinking about it more, a factory class might be a better option than extending DOMDocument.
That's not proper REST though. See the method table here: http://en.m.wikipedia.org/wiki/Representational_state_transfer#section_7
Understood, but as you mentioned, this method is flawed for new objects/collections identifier that are determined by the back-end, not the client. I prefer my method to the standard. Any better suggestions or alternatives?
There are people who *seriously* support inconsistencies? (╯°□°)╯ ︵ ┻━┻ It seems to me that the PHP project could quite reasonably take my preferred path forward—and in all honesty, how is improving the quality of the language not a good thing—while mapping the existing functions to the cleaner syntax for backwards-compatibility. Maybe throw some deprecated warnings or something.
I think the answer here is clear. The principle is the same as validating an email. Simply call the number and if somebody picks up, you'll know its real.
Time for you to learn regexes. That script would have been a lot simpler/smaller.
Tabs or spaces? Why not both!
[ApiGen](http://apigen.org/) is an alternative to PHPDocumentor and is used by the likes of Amazon.
LinkedIn settled on Dust JS after having the same concerns as you. They felt that mustache's logic-less approach was too limiting for things like alternating row colors. This project aims mostly to keep logic out, but is not overly opinionated about it. It leaves the decision to the backend developer providing the context. I would strongly discourage business logic in Dust templates.
Is it possible for someone to explain to me the point of a PHP "template engine" and how they are beneficial over just writing a simple template class yourself or using a MVC base framework? I mean the language is already embedded into the HTML in the first place. Some of our projects at work use Smarty and I just find it more of a pain in the ass. MVC is the way to go, and I find php template engines a waste of time.
 $dust = new \Dust\Dust(); This makes me a bit sad.
I'm always curious about this: what exactly do you define as logic? A loop? If/else statements? More complicated "fetch from the database" type things? Where is the line between what belongs in a templating system and what doesn't? To me things like loops, some conditionals, etc naturally fit with the template. If I get a list of things passed to my template, I want to control how they are rendered in the template itself (with a loop, or a macro, or whatever). Twig, Django's templating system, and Jinja 2 (basically the same as Twig) all make a lot of sense to me in that regard. It seems like eliminating logic completely from templates would require more things "in between" a controller-like step and a the template itself. The `ViewModel` pattern, for instance. Or a more strong separation between the idea of views and templates, which seem to get blended together in most frameworks/MVC patterns but certainly don't have to be. A lot more complexity. Also a lot more flexibility, obviously.
Because I named the class the same name as its namespace? I guess I could have called the class "TemplateEngine" or something. Regardless, my main goal was to make a really simple API endpoint to parse and render templates (and keep in line w/ the LinkedIn project). Obviously I would have a use statement in regular code.
Why?
Safe output and simplification of caching are two advantages. DSLs are usually easier to solve their specified problems with.
This is the approach Angular JS and others take. They have the benefit of using a browser and it's full HTML parser where we on the server side do not. The runtime cost to support what you have would be significant (and at least require XHTML or other guarantees about the markup). I don't believe this is a very far stretch to get rendering on client side or server side: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;{title}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;{yello}&lt;/div&gt; {#lots-of-these}&lt;div&gt;{.}&lt;/div&gt;{/lots-of-these} &lt;/body&gt; &lt;/html&gt;
That's what i think too. People want to separate logic from pure display, well, that's okay, but you don't need a template engine for that. The only reason for a template engine is, when you have non-coders doing templates and not yourself (or any person with php mvc knowledge). Otherwise, Template Engines in PHP are overhead and overcomplicate things rather than making stuff really easier. Normally, they'll bring in new problems too. If you don't want logic in templates, don't put it there.
Well said
Haha nice one... Actually, despite all the downvotes and back and forth, for validating US numbers, I haven't lost any confidence that the function works very very well as it is.
I'm sorry for the vague comment without any further clarification. I did not mean to come off as a douche. My gripe is with namespaces and how they are used. Why couldn't this just be a class called *Dust*? What does the namespace *Dust* provide for the user of the class? I'm not a user of Composer so that might be a reason for the style? I get the impression that this is the norm nowadays. What saddens me is how PHP has become more verbose. It's moving to a "everything needs to be a namespace" paradigm, like Java. In reality, it doesn't need it. Say the user of the Dust PHP library already has a class Dust, then it will still cause a collision. Since renaming a namespace isn't possible, which makes the benefits of the Dust namespace useless. I don't mean that a Dust\TemplateEngine would be better either. It's nicer to look at, but *Dust* makes more sense. Adding a *use Dust\Dust* to the top of every file that wants to use it is just another layer of abstraction that's not really necessary. The library looks nice and useful, and I don't mean to bring it down unrelated lamenting.
&gt;The only reason for a template engine is, when you have non-coders doing templates and not yourself I've heard that reason a million times and it's simply not true. Regardless, the non-coder is going to have to learn some kind of language. Whether that language is a subset of PHP, or if it's a meta-language built on-top of it is irrelevant. &gt;If you don't want logic in templates, don't put it there. Logic in templates is fine. It's hard to output anything without it. What shouldn't be in the template is business logic, but *presentational* logic is just fine.
*Business* logic. You don't want *business* logic in your templates. There are other kinds of logic that absolutely belong in templates.
 {title} &lt;ul&gt; {#names} &lt;li&gt;{name}&lt;/li&gt;{~n} {/names} &lt;/ul&gt; Any time I see anything like this in a php template I know it's something I'll never use. Ever. Adding extra layers of complexity for the sake of doing it doesn't make anything easier on anyone.
&gt;What saddens me is how PHP has become more verbose. It's moving to a "everything needs to be a namespace" paradigm, like Java. In reality, it doesn't need it. Yes, it does. If you don't want to use it, fine. Don't. But the rest of us do see the benefit of having namespaces, and will continue to use it. If you think PHP is too verbose, then maybe you should start searching for a different language, because it's been verbose long before namespaces came into the picture.
A pure CSS, cross-browser (including IE 8) approach to this is not possible from what I've seen (e.g. nth-child). The presentations and blog posts made on Dust by LinkedIn during the evaluation phase mentioned alternating row colors specifically.
Except that's rarely the place you want to cache. If you're really trying to scale, you're going to want to cache your IO, especially DB calls in most applications. Simply caching the end layer can work, but imposes huge limitations and is one of the main reasons why nobody uses Drupal's built-in cache.
PHP itself is a template engine (a whole lot more, but still)
Thanks!
Well, I don't know if it's considered bad by the community or not, but learning how to use Twig in conjunction with Symfony 2 is amazing, and keeps the code for my views nice and pretty :D
Author here. The main purpose of this piece of code was to create simple informational webpages under quick deadlines. I make such sites every so and often. I work mostly in a terminal using git and composer a lot. I would love for some of you to try it out and give some suggestions about what could have been improved. Also, I hope that this little app will be useful to someone out there. Other solutions proposed in comments: - [Clay](http://lucuma.github.com/Clay/) and [Octopress](http://octopress.org/) - [comment](http://www.reddit.com/r/PHP/comments/18pwtw/php_silverplate_a_bare_minimum_for_building/c8h4b6w) - Wordpress with [WP-SuperCache](http://wordpress.org/extend/plugins/wp-super-cache/) - [comment](http://www.reddit.com/r/PHP/comments/18pwtw/php_silverplate_a_bare_minimum_for_building/c8h50nz) - [Docs Reader](https://github.com/daylerees/docs-reader) at four.laravel.com - [comment](http://www.reddit.com/r/PHP/comments/18pwtw/php_silverplate_a_bare_minimum_for_building/c8h048f) - [Silex](http://silex.sensiolabs.org/) or any other small web framework - [comment](http://www.reddit.com/r/PHP/comments/18pwtw/php_silverplate_a_bare_minimum_for_building/c8h4wpw)
Ok so give me a scenario, real world, where I would say "fuck balls im screwed, the only way out is....Silverplate!"
Fact is, you wouldn't. Web development has turned into a place where web developers who are bored think 'well, I'm bored, today is my day to be in the spotlight' and create some bogus, half-assed library that is 'dynamic' and 'web-scale' and creates 'functional' web-apps and blah blah de fucking blah. Github, while it's great for versioning, has also unfortunately spawned a bunch of wannabe developers who release more libraries and plugins than times they haven't got laid in their entire lives.
While I agree that there is a lot of crap being put out on github calling people that experiment/work on side projects/aren't solely contributing to 10 year old projects "wannabe developers" is just plain ridiculous. Reinventing the wheel is good practice, experimenting is beneficial to the community, and who knows, the next "half-assed library" could be the next big thing. So, in short, go fuck yourself.
Before I describe such a case - you could live safely without using it and sticking to plain HTML files, HTML Boilerplate, Wordpress or anything else you are currently using. This is not a code that revolutionizes things, hovewer it can simplify the process a little. Now for the case: imagine you want to put a small website for your tiny side project you've been working on past two weeks. Or anything else, provided that you are the main contributor (or anyone who knows a bit about HTML/Markdown and how to deploy a file). With that target in mind, I've started to create an app under following assumptions: - like in Symfony, there is a layout file, in which a file is embedded - structure matches filesystem - so I can give it to any developer and describe how it works in under 2 minutes - after I finish with design, I completely forget about it and write content in any text editor - no databases and configuration files - should work out of the box, if not, there's obviously a bug - fast deploy - for me it means git push.
Looks neat, I'll have to try it in a project this week. Always good to see new open source projects :)
That's fine, I just have a personal beef with people who say "I don't want logic in my templates." because it's misleading. Separating your concerns is definitely the right way to go, but you shouldn't say "logic" in a manner that seems all-encompassing.
&gt;writing a simple template class yourself or using a MVC base framework? These two things are not mutually exclusive. Any good MVC framework will build it's view class in a way that it is modular and replacable. So you could write your own templater/renderer and use an MVC framework. &gt; I mean the language is already embedded into the HTML in the first place. The language is not embedded in to HTML. It's more like files parsed by php may contain HTML if the HTML occurs in designated areas so the parser knows to output it verbatim. &gt;Some of our projects at work use Smarty and I just find it more of a pain in the ass. MVC is the way to go, and I find php template engines a waste of time. While I don't like smarty or engines similar to it, this statement doesn't really make a lot of sense. Rendering is only one part of what the MVC pattern deals with. It's not a "one or the other" scenario.
If I want a static site, it doesn't really make sense to use PHP in the first place.
I believe you took "readability" to mean "can't read" which wasn't what I said at all. I believe Dust is much more *readable* inline w/ HTML than PHP w/ short tags. I understand there are more widely used cross-target engines currently. I evaluated them before creating this. I very much like Dust JS, I believe it is also widely used, and I haven't found one that matches all the features I wanted (evaluation of properties, methods, objects, closures, associative arrays coherently...looping...value existence checks...dynamic partials...etc) implemented as cleanly.
I haven't looked at Silverplate too much, but I know four.laravel.com is based off a bunch of mark down files.
&gt;I believe you took "readability" to mean "can't read" which wasn't what I said at all. I believe Dust is much more readable inline w/ HTML than PHP w/ short tags. I don't agree. I think PHP is plenty readable and that shortening the syntax doesn't make it any easier to read. It just adds a different/extra learning curve. I realize this all must seem like an attack more than a discussion. I'm not trying to tell you personally what you should do, I just couldn't see doing it myself on the premise that most of the time it doesn't add anything overly useful to current non-DSL methods.
I like to make little singleton/factory function wrappers for classes I use a lot but have absurdly long namespaces. You could easily do... function dust($new = false) { static $dust; if($new) return new \Dust\Dust; return $dust ?: $dust = new \Dust\Dust; } then dust()-&gt;whatever($things);
I specifically try to avoid static state (especially static variables) with projects like this unless it is immutable, constant data. In libraries like this, I like the caller to control the instances. Personally, I do not like singletons. Also I find static variables make it very difficult during refactoring/debugging to find where state is introduced (like when running unit tests w/out process isolation and wondering why the different code paths based on execution count). Just personal preference.
You seem to have never come across name collision problems with 3rd party libraries. Well hopefully with namespacing, you'll never have to, and forever remain blissfully unaware of the problem they solve.
It still would find it more sane to then simply live with the fact that IE8 users don't see alternating row colors, than putting logic into templates just for that purpose.
I really like things like [Clay](http://lucuma.github.com/Clay/) and [Octopress](http://octopress.org/). There's no server language running the final static website they produce, but they allow for creating, compiling and configuring one really easily.
As LinkedIn, who would probably still even see a decent amount of IE7 users - that still want a first-class user experience - I'm pretty sure they can't just throw them to the wind. If you want as much market share as possible (which they would definitely have as a top priority), those are simply not cut-offs you can make. 
Looks interesting. Can you make it PSR-0/PSR-1 compatible and add Composer support?
As a fellow Symfony/Silex user, I see a lot of similiarities with them, but I don't see any advantages to use it over them for most of the people! 
I like the dots after thex text in each line =)
Well actually the only real reason you could use this is if you have no PHP on the server. For some time already it is possible to generate a static site with wordpress: * Install wordpress * Install WP-Supercache * Set Expiry time to never * Done Supercache save static pages into the filesystem, and uses an .htaccess file to check if a cached file exists and display that one. So basically no PHP is necessary after that point, and you can preload all pages using supercache too. And since worpress also allows you to use markdown using ascript there is no reason to use these command line site building tools. Because with wordpress if you ever have to change those pages you can always pop plugins. 
The other reason is I personally favour any kind of text editor before any kind of administration panel. This is a matter of preference, of course. In my opinion, your solution should work well for Wordpress users, who don't mind creating a theme to deploy just a few pages. And I think I'm not really one of them. I love Wordpress as a CMS, but use simpler tools for simpler things.
I don't see how this is remotely static. A dynamic page is not only something using a database.
Hadn't seen the symfony component. Nevertheless, the features such as the progress bar are new. I plan on adding more components to make it quite elaborate. the mixed case is just a joke on TTY terminals. I could certainly remove it. I suppose the joke isn't lost if the classes don't also use it. PSR-1 compatibility and composer support just made top priority. 
SF2.2 Console component includes support for the progress bar: http://symfony.com/blog/new-in-symfony-2-2-better-interaction-from-the-console Just FYI :)
Hmm, well it appears I have some features to compete with then!
I'm curious. Are you failing at copy/paste or do you seriously code with no indentation?
Eh, assuming I'm understanding this half of the conversation correctly: code that is commented out being checked into the source control repository is definitely a code smell. It means that someone is trying to use their source file as a kind of quasi-, not very effective method of source control. 
I just finished publishing my first Laravel website. I used Yii before that, the difference is unbelievable. I had zero problems with Laravel. It was easy to learn and fun to develop with. Read the book Code Happy by Dayle Rees, and you are set to go. The documentation is also excellent.
I'm not familiar with codeigniter, but perhaps you want $this-&gt;db-&gt;query("UPDATE ..."); 
https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md It's becoming the standard now to namespace your stuff so that there's no collisions. \&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt; And you should start using Composer ;). 
Something also tells me that there's something seriously wrong with his schema.
Yeah, I think that about sums it up. No problems, and great documentation. Now only to learn how to do complex joins and queries using Laravel and I'm set to use it on every project out there ;)
Oh my... I am blind... Coding for 8 hours isnt good for my eyes.
Is this on Windows by any chance? By default MySQL comes configured in HoneyBadger mode. You have to change the my.ini if you want it to actually respect cAsEsEnsItiviTy.
It has nothing to do with phpMyAdmin, but your MySQL configuration. http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_lower_case_table_names
Not sure anyone is going to write code for you. But here are some places to start - http://code.google.com/p/simple-php-contact-form/
There is support for both of these, I am using delete. The example doesn't show it though.
This is a...really contrived comment. I fail to see your connection between this template engine, and the MVC paradigm, but...I'll ignore that for some other occasion. As to the point of a PHP template engine...well, if you're tossing around a couple of pages, using nothing but PHP is well and good, but if you're dealing with a complex platform with dozens and dozens of template, with complex needs and relations, you really want a language that helps you express what you want to say. Examples: filter syntax, blocks, template and block inheritance, template inclusion, output filtering (and no, not just escaping html), and the list goes on. Can you do it all with just PHP? Sure! And you have two ways to go here (assuming a sufficiently complex project with such needs): 1. Do it all with nothing but php, on-the-fly. You get unmanageable templates that grow ever harder to decipher and work with. You'll say "oh, but no, my code doesn't EVER grow unmaintainable"....yeah, I've heard that one dozens of times. 2. You write a library of helper methods, building some sort of wacky DSL-of-denial that lets you perform some common template tasks without breaking off your PHP bubble - Great! Now you have a template language of sorts, but without all the benefits of an actual template language, and possibly worse performance, worse test-ability, and probably still some butt-ugly template files. What you said has been repeated dozens of times in this sub-reddit, and voted in both directions (maybe it's something to do with timezones, I don't know); you're not the first to say it, and you certainly won't be the first to change your mind further down the road when you get some more complex real-world projects on your hands. Thankfully, and mostly thanks to Composer, the rampant NIH symptoms in the PHP community are starting to die off, so hopefully such unfounded opinions won't be so common in the future.
1. Delete phpMyAdmin 2. Install HeidiSQL - http://www.heidisql.com/
You could just use a service like Jotform.com or Wufoo.com
&gt; People want to separate logic from pure display No they don't. Admittedly Dust is a bit sparse in that regard, but it's just one example of the many template languages available. I'll fix your post: People want to separate *business logic* from templates. Let's be clear, let me repeat that - **nobody is against logic in templates**, you just **shouldn't have your *business logic* in templates**. Write that down, you might need it for a job interview later, it'd be really embarrassing to get it wrong. There's tons of good reasons for using a template language over just PHP, they've been repeated in this thread so I'll spare myself the trouble; once you work on a project consisting of more than an `index.php` and a `functions.php.inc` file, you might understand.
No one is going to write code for you. Please ask 'help me' type questions in ##php on Freenode (but be prepared to be ignored if you don't put any effort into it), or /r/phphelp.
https://sheriframadan.com/2012/10/a-closer-look-into-php-arrays/ That said, if you're so concerned about performance that you're timing array access PHP is probably not the language you're looking for.
It's possible. You will have to store the oauth long term oauth key for your users, use that to fetch an access token for this session, and then run share()/feed() with a message as specified in the article. Here are some more details https://developers.facebook.com/docs/reference/api/publishing/
&gt; I fail to see your connection between this template engine What connection do you think I'm trying to make exactly? I'm not, you want a connection? They're both written in PHP. &gt; As to the point of a PHP template engine...well, if you're tossing around a couple of pages, using nothing but PHP is well and good, but if you're dealing with a complex platform with dozens and dozens of template, with complex needs and relations, you really want a language that helps you express what you want to say. See you're completely missing the point, buddy. Maybe further down the road when *you* get some more complex real-world applications that were built in Smarty you'll understand. I'm basically bashing people who have designed "complex platforms" in smarty or dust. You want to handle a header/footer? Write the fucking php yourself. Want to build a site that has more than just static content? For gods sake stay away from template engines. My opinion is completed founded by my experience, jerk. Seriously, what a jerk comment. You could've handled it so better. Good job... I would hate to be your SO and come home to this BS everyday.
It should be common sense that "I don't want logic in my templates" ASSUMES you are talking about business logic.. Otherwise HOW WOULD YOU DO ANYTHING AND WHAT WOULD BE THE POINT?? YOU WOULD JUST USE HTML.. Sorry I just have a personal beef with people who have personal beef's.
&gt; There's tons of good reasons for using a template language over just PHP, they've been repeated in this thread Really??? I think I saw 1 person say something about caching.. and well that's it. I can't find anyone else saying anything WHY... Especially you.. Caching is so easy to implement by itself that, it is no reason to jump right to using a PHP template engine. &gt; I'll spare myself the trouble; once you work on a project consisting of more than an index.php and a functions.php.inc file, you might understand. Oh man, you're so cool aren't you. I bet you have a sweet job man cause you're clearly better than everyone else you're responding too here. Bullshit aside, asshole. Don't act like some elitist prick. We don't need people like you around here. It doesn't add anything to the discussion, it's disrespectful and doesn't get anything accomplished. I definitely wouldn't hire you at my shop no matter how much BS you know or don't know.. &gt; Write that down, you might need it for a job interview later Do you even have a job? &gt; I'll fix your post: People want to separate business logic from templates. Let's be clear, let me repeat that - nobody is against logic in templates, you just shouldn't have your business logic in templates. Capt fucking obvious. Do you really think people mean "no logic AT ALL IN THE VIEW".. RLLY? Because, then you might as well use fucking HTML files. It should be comon fucking sense that they mean BUSINESS logic, otherwise what is the fucking point??
Is it just your wall? or do you want to post data to other people's walls? Either way... you will need to create an extended access token using the offline_access permission and save it somewhere (maybe in a mysql table). Once you have that token, you can use it to post to a user's wall without user interaction. E.g. require 'facebook.php'; function saveToken() { $facebook = new Facebook(array( 'appId' =&gt; 'YOUR_APP_ID', 'secret' =&gt; 'YOUR_APP_SECRET', )); $user = $facebook-&gt;getUser(); if (!$user) { $fb_login = $facebook-&gt;getLoginUrl(array( "redirect_uri" =&gt; "http://this.web.address.com/", "scope" =&gt; "offline_access" )); echo "&lt;a href='" . $fb_login . "'&gt;Facebook Login&lt;/a&gt;"; } else { $facebook-&gt;setExtendedAccessToken(); $token = $facebook-&gt;getAccessToken(); // save token saveTokenSomewhere($token); } } function cronWallPost() { $token = getTokenFromSomewhere(); // retrieve token $facebook = new Facebook(array( 'appId' =&gt; 'YOUR_APP_ID', 'secret' =&gt; 'YOUR_APP_SECRET', )); $facebook-&gt;setAccessToken($token); $facebook-&gt;api('/me/feed', 'POST', array( 'message' =&gt; "Hi from Cron Job" )); } 
I couldn't think of an inventive name for this library :( It's based off a module I wrote for Kohana a long time ago and decided to make it framework agnostic, use namespaces, clean up the code and have tests running with Travis. Hopefully it'll be of use to some of the people here. It has a formatting interface so if you implement that to generate HTML output, etc ... Enjoy!
Sequel Pro gets my thum bup. There is a free version as well. Not sure what scenarios would only allow a webapp, but I admit my needs are light.
Mainly when you're with a system that doesn't allow external (non-localhost) connections to the database server under any circumstnace. Install PHPMyAdmin and whitelist office IPs to solve the problem. Also for support reasons. It's easier to tell someone how to do something if you're all using the same web-based client vs. cross-platform stuff, but that's more of a "working on a team" problem anyway.
1. Delete phpMyAdmin 2. Download adminer - http://adminer.org
Don't use php my admin?? Start learning and use the console or if you're short on time use work bench.
So does MySQL Workbench, among others. We don't allow SSH access to all of the people working on our databases.
Amazed people still use phpMyAdmin when there are so many free/cheap MySQL management tools around, plus get to using the shell as well :D
Yup, MySQL on Windows does this, no matter what client you use.
https://dev.mysql.com/downloads/workbench/
Well, I can give the example of what I use http://www.navicat.com/ Workbench is also another choice if you need/want something totally free. If you need to poke into your production MySQL server, tunnel over SSH back to your dev box - simple. And lets not forget the fact that sloppy devs love to leave phpMyAdmin installs on production boxes in easy to guess directories *sigh*. The number of times I have seen URL scans in HTTPd server error logs trying to scout out phpMyAdmin login pages for exploits/hacking I have lost count - and I'm pretty sure they often succeed.
 mysqldump -u root -p MyDatabase &gt; /tmp/database.sql What's easier than that?
&gt; Sorry I just have a personal beef with people who have personal beef's. Programming help should be specific and concise. It avoids misunderstanding. Also, this would seem [relevant](http://theoatmeal.com/comics/apostrophe) in your case.
I don't disagree with your statement and in an ideal world everything would be specific in concise.. So it doesn't hurt to use your own logic to interpret and parse the meaning of a sentence in context.. But since you want everything so specific and concise, the statement you replied too was not "programming help" No way in any shape or form I don't think these replies should be read like a tutorial. &gt; I don't want logic in my templates Let us use logic to understand this (This logic really helps out in real world scenario's not just reddit!). If what is literally meant we don't want any logic in our templates than we might as well just throw everything out the window.. I mean whats the purpose of dynamically built sites if we have no logic in our view files, well that's not very logical. Especially since we are on a subreddit dedicated to the art of displaying dynamic web content. So given that we know we're in r/PHP, and we know we're talking about templates and such, than we can assume that the OP doesn't literally mean no logic whatsoever because I already made the point, that would be illogical. It's not mine or his fault if someone interprets these messages literally and puts them to practice. The only person to blame there would be the reader for not being specific and concise in their research and learning... And you can take my apostrophe and shove it up your ass.
[Piecrust](http://bolt80.com/piecrust/), my choice of static site generator. I use it for my own blog and I've enjoyed working with it.
But you allow access to phpMyAdmin ? Seems like the greater security risk.
You can do that via SSH with private keys or limit MySQL connections. Then you don't need a questionable PHP based MySQL app running on a web server, which has to be the least secure option.
If the command line were the easiest way we wouldn't have GUIs
phpMyAdmin is free. Your argument is invalid. 
So "free = better solution" is the flat out rule in software development then?
Things are going to get real bad real quick the moment you need something that isn't in ~~Aptitude~~ Synaptic.
ironic that this is coming from the person whose GUI apparently can't export a table properly.
[Adminer](http://www.adminer.org/) is another neat choice. I like that it's just a single .php file.
I love how Workbench has built-in SSH tunneling support for this reason. Works like a charm with little setup.
Three years ago was the last time I used phpMyAdmin. Last time I used phpMyAdmin they added that ajax system that failed more than helped, so I jumped. Adminer is much more clean, fast and with a better UX (IMO).
I was under the impression we were talking about solutions that didn't require a server-side installation. But good find, have an upvote anyway.
You got a point, yeah, not every template engine has a meta language. And those are probably the better ones for usage in your projects. I can't agree with the caching aspect, normally one uses stuff like varnish to take care of caching, which is much more effective for output caching than any template engine. And of course, i mean buisness logic, not logic in general.
It's doesn't take much to map "by hand": $cols=fgetcsv(); // get column headers while(($line = fgetcsv())!==false) { $rows[]=array_combine($cols,$line); } Still, there is value in a CSV class if you can deal with alot of crappy error-ridden files in a clean way (autodetect delimiters, etc.). Also, think about making it simpler to use: $rows = CSV::Read($filename_or_handle_or_string,$use_first_row_as_header); $string = CSV::Write($rows,$add_header_row); It should be that simple. 
I'm not trashing phpMyAdmin for what it is - but I just find the availability of free/cheap MySQL management tools make it a rather redundant product for the work I do these days. Features like Navicat's schema diffing/synchronization tool and it's data import/export tools are invaluable once you have used them.
Navicat can do this out of the box as well which is very, very handy like you say.
I just last week implemented MustachePHP into a project for the first time, AMA.
I think in mustache it's named \Mustache\Engine.
Good work, but one improvement: http://us.php.net/manual/en/class.splfileobject.php Builtin class of PHP which does a lot of the stuff the class above does. Just extend it and add the convienence functions and you're done. You could develop a new version of your reader / writer deriving from this base class. If you have PHP 5.4 at hand, of course. In general, using SplFileObject or SplFileInfo for files is a good practice. Btw: Why do so few PHP developers use and recognize the SPL? It's there since a long time but i rarely see people use it's features.
&gt;Man PHP has gotten ugly since this namespacing shit because popular. &gt;Funny how incompetence is hidden by a lot of namespaces these days. Well, at least yours is in plain sight.
&gt;Why do so few PHP developers use and recognize the SPL? Hey now, I use it all the time. Maybe the issue is that you're hanging out with the wrong kind of developers...?
Dunno, maybe. I "grew up" with the SPL, when i changed companies, a lot of people didn't know the full power of the SPL.
Not phpMyAdmin related but TIL - thanks!
Better test here: http://3v4l.org/i9CGN mangecoeur seems to be talking about this: Strict Standards: Non-static method A::B() should not be called statically in /in/i9CGN on line 14 As you can see here: http://3v4l.org/VelhR (it does not give any errors/warnings when E_STRICT is disabled). This is probably because of the PHP background. Load of shit from history, but I don't think this is a big issue. Suggestion to mangeceour: ALWAYS CODE WITH error_reporting(-1) (or E_ALL if you are using recent enough PHP), ALWAYS! Another suggestion: PHP is NOT Java. So learn PHP (or make the developers learn it), and stop thinking it is Java.
I believe the question refers to a scenario more like this: http://3v4l.org/5rn1U Make sure you have E_STRICT turned on, and get your devs to actually read their logs.
There was no static keyword in php4 but php4 did allow for static calls. To maintain backwards compatibility this was left in when the static keyword was added in php5. When developing its best to show all errors including E_STRICT so you can see warnings about doing this. As far as the code base being full of garbage and moving to python I have seen lots of terrible unreadable code in python, in c#, in java and in php and in some instances where projects just have to start again because the code is so bad. This is just because of poor management, no coding standards, a lack of oversight, no code reviews etc etc.
Have a look at http://code.google.com/p/parsecsv-for-php/ for the best csv parser that I have ever come across. CSV's in the real world are typically not formatted consistently, and this lib handles just about anything you can throw it.
This. A bad process produces bad code, regardless of the language. Bad code takes shortcuts it shouldn't and depends on inconsistencies for functionality.
Upvote for TIL'ing me lolphp.
...and here is how you get a permanent access key to use for offline_access: http://www.typeoneerror.com/articles/post/permanent-facebook-sessions-and-posting-as-a-page
Today I Learneding?
Why the fuck would you come on /r/PHP and post a stupid rant like this? Calm down. Take a few minutes then come back and post a more polite question so we can have a real discussion.
Or TYLM (Today you learnded me)? 
Ah, so you're a fairly new PHP developer, then? Personally, I've been doing PHP development for 10 years now, and I've tried to keep up with the latest practices. 
http://cmf.symfony.com/
Here's an idea: don't let them do it. Just because PHP can do something doesn't mean it has to affect you.
I'm saying phpMyAdmin has a history of not being secure. That's all. Probably not a big deal for whitelisted IPs if everyone has their own username and usage is logged. 
[I'm learnding!](http://www.youtube.com/watch?v=LECVZqK4Ros)
Oh, now I see what you mean. I figured you meant that the older developers had stagnated, but I guess it's the younger developers which has not learned enough. 
Dumb article. Null is important and has its place. A better article would have been "Always know what you're returning". Also, do people really write: &gt; if($obj === null) rather than: &gt;if (isset( $obj )) ?
It is a configuration issue.
Only if they have been brainwashed by Douglas Crockford. Even then, it's more applicable in javascript than PHP.
No, you're right, i didn't mean older developers. :) My "mentors" were mostly very senior PHP developers, most people don't learn from "the right" people, so a lot of knowledge is lost on the way. I sometimes think there should be a cleanup of "old docs" about PHP on the web, so people learn it the right and modern way, directly. The second part are developers who aren't interested to learn new things, they do the same old stuff for years. They don't educate themselves in newer ways or even really see themselves as craftsmen. This is not just the case in PHP, but in many other languages too, but it's very prevalent in our space. A lot of people were like "driven into" PHP and aren't concerned about the languages development at all. But recently, i feel that a lot of PHP devs are on the right way, thanks a lot to stuff like composer and to some more progressive minds in the PHP Core Team.
I fully second your statement. I do write $obj === null. I feel that a variable is initialized after ANY value is written into it (null is a value too), so i do type comparison and not "isset". isset, for me, is about checking for values of which i am uncertain if they exist or not (mostly arrays). But it's a matter of taste i guess, both versions are a valid way to do it. I learned programming itself with C and Java (about the same time i first encountered PHP), and i guess i adopted the habit from the latter. edit: Btw, i tend to do stuff like this too: if (isset($array['key']) === true) { // some code } Does anyone else do that? comparing builtin functions to the exact value? Or better: always have a comparision statement in an if rather than just "if($value)" or "if(isset($value))". 
&gt; I sometimes think there should be a cleanup of "old docs" about PHP on the web, so people learn it the right and modern way, directly. That is why I always try to direct people to the PHP manual rather than some random page on the web. If people keep on writing crap tutorials and directing people to third-party sources, we'll end up in the exact same situation we are in now with all the old, outdated practices, and security issues which are found in third-party tutorials.
Hi, thanks for your feedback. The problem is that you don't know what got returned, especially in PHP. Using a pattern like this enables you to at least know what you can expect when it got returned. Also, as stated in the blog post, it's just something you should think of and maybe you can apply it in a place or two. Can you please elaborate what you mean by "dumb"?
Which... again, is why the install is whitelisted for access. If you install anything like PHPMyAdmin on important servers without using whitelist access, you're asking for trouble. Leaving SSH blindly open is still A LOT less secure anyway. 
I tend to just work with just isset(). Realistically, the added cost would be negligible but if you're running if(isset($value) !== null) in a loop, you're adding to the number of calculations needed to get the same answer.
Need to be careful using isset with arrays where the value for a key could be null, though: $array = array ('foo' =&gt; 1, 'bar' =&gt; null); var_dump(isset ($array['foo'])); var_dump(isset ($array['bar'])); /* Output: bool(true) bool(false) */ array_key_exists() might be more appropriate in cases like this, although then you have the overhead of calling a function.
To answer your question - no, I feel that statements like "if ($condition === true)" are redundant. Instead, I always try to ensure that "$condition" is an actual boolean, rather than something that PHP will try and evaluate to a boolean, so that I can safely put "if ($condition)".
I could use the command line. I know everyone's all romantic about it but sometimes the GUI is just easier and quicker. That is their purpose.
 Warning: str_repeat(): Second argument has to be greater than or equal to 0. in C:\inetpub\wwwroot\Sandbox\I-feel-preTTY-master\classes\components\PreTTYBreadCrumbs.php on line 43 I just get that over and over when I run the demo.
Thanks, I think I know exactly what the issue is. Not sure how I let myself push a broken demo though...
Should we stop using PHP until `mysql_escape_string` is removed?
+1, not just that, but make every error throw an exception, and use xdebug with scream enabled. Every single notice, strict standards error, even if silenced, will halt your coding until it's fixed. Obviously not good for working with old code or on projects that have a lot of errors, but for writing new code, it's very helpful. I use auto_prepend_file in php.ini and inside the file, it has: set_error_handler(function($n, $s, $f, $l) { throw new \ErrorException($s, $n, 0, $f, $l); }); Error handlers are stackable too so even if you change it, you can call `restore_error_handler` a number of times to restore the previous ones.
In line with advisory tool mentioned in the post, I wrote a tool to scan for possible points of exploitation: https://github.com/AlekseyKorzun/phpAudit It's pretty simple but good way to quickly check third party code for questionable code.
If PHP is actually running on a Windows machine, see this page to download the MSSQL_ based drivers that are available now. Used to be you could use sybase_ based ones I think. I had a project just a few months ago where I had to help someone connect to SQL Server from a php script running on Win Server 2008 http://www.microsoft.com/en-us/download/details.aspx?id=20098 
If you use a framework that supports [ORM](http://en.wikipedia.org/wiki/Object-relational_mapping) you won't have to worry about what engine they are using, just define the structure of your data objects and leave the choice of engine to someone else. The rest of the work will be done automatically by the drivers.
Also, just found this I had bookmarked when I thought it was a Linux based web server trying to access MS SQL: http://www.freetds.org/ As it wasn't the case, never looked into it much to try it 
OK, seriously, I'd had it with the Sensio guys suddenly being the ones that always had security on their mind. A fews month ago they had no security process worth the name, stealth-fixed security problems when they felt like it, half their security issues didn't have a CVE, and the only way to figure out WHAT the security issue actually was was looking at the svn diff
Learn by doing, there's no definitive moment where you have 'learned' PHP. You can follow best practices all you want when you start, but I'd work on getting the basics down, for example: * Echo or printing data * Using MySQL PDO to handle a database * Using foreach to run through an object or array * Using while to run through an object or array * Learning exception handling (try, catch) * Using sessions * Reading $_POST and $_GET, and knowing the difference between the two * Use var_dump to see data in an array or object, know how to read the results. * Learn a database, MySQL is the most common, but there's most likely a handler for any database out there. Learn what a primary key is, foreign key, joins, and where/or where statements, what the different field types are, why indexes are important, etc. Then, I would start with something basic, like an API. Try using the twilio API to send a text message to a phone number you enter, or use the Google Lat/Long API to get information about a location (look into HTML5 geolocation and saving that data to inputs so you can send it back to the server). At the same time, learn Javascript. I'd say learn pure javascript, but you're better off starting right with jQuery, as a lot of the 'how do you do this' article will most likely just explain how you write it in jQuery. You're going to make mistakes, people are going to criticize the way you code, and you're going to feel overwhelmed, but this is how we all learned. Google/#php in freenode/stackoverflow are your best friends. To start, try and write a TODO list where you can enter in some text in an input box, POST it to the server, have the server save that to a database, and then below the input box, print off all of the results and create a function to delete an item from the list.
Maybe I'm not understanding decoupled correctly. "The Symfony CMF project makes it easier for developers to add CMS functionality to applications built with the Symfony2 PHP framework". My idea was that regardless of what the site was built with, a framework or not, a decoupled cms would be a way to control the content specifically without having to associate with any particular framework. Sort of like a database abstraction tool with ability to add custom tools and plugins. 
Then surely this is a big step in the right direction? There's nothing wrong with criticizing broken process but it is baffling to see complaints about working towards a better one.
Writing something to communicate w/ tds directly isn't incredibly difficult. I have done it in CoffeeScript in my (now mostly unmaintained) node.js project: https://github.com/cretz/node-tds. The specs are publicly available and I don't believe you would have any significant performance losses making a pure PHP driver vs a PECL extension. Of course, if MS has official drivers (which they do) that would be best.
The while part is actually a very very good advice. It's embarrassing how much PHP Devs you meet which can't tell you how foreach works internally, or who can't reacreate a foreach with the while-loop.
Good advice has already been provided, but I want to add one thing: Stay away from w3schools. As a quick reference for something you've forgotten the syntax to it is alright, but if you learn from it you're going to have a bad time.
I don't have much experience in this direction. Please correct me if i'm wrong, here are some thoughts: a) i think the password protected file is over the top. b) I don't know if you already use it, but using a secured connection would prevent the possibility of a man-in-the-middle attack. c) isn't it possible to create a web service on the target machine you can connect directly?
So we should stop using symphony every time a security issue is exposed. Gotcha.
If you can't figure out why people do that, you have bigger problems.
Yeah, because searching for... [A-Z0-9._%+-]+\[at\][A-Z0-9.-]+\.[A-Z]{2,4} ...is so much harder than searching for... [A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}
Yeah, OP should just expose a webservice that exists on an SSL secured endpoint. This half-baked solutions stuff is just scary.
c) I have SSH running, would it be better to use something like PHP: SSH2? Connect in then run MySQL commands.
Is there a specific reason you don't want to use HTTPS?
If it possible for you to connect from the CentOS (as a VPN client) to the MSSQL server behind SonicWall VPN? If so, then PHP can talk to MSSQL via [SQL drivers](http://www.freetds.org/) over IP. If you can ping the MSSQL server IP from CentOS, PHP can read the MSSQL tables. Note: Password protected Excel files can be decrypted very easily.
Amateur here... Are you saying this because the only time you need to use it is for mysql/mysqli and we should be using PDO which automatically escapes? Right? Just trying to understand why my shitty code is shitty. If I am using mysqli and miss escaping a GET variable....SQL injection. Or is there something else with mysql_escape_string?
What is your setup? This currently relies on the command tput. Does `tput cols` return 0? I'll add the necessary exception for when tput doesn't run.
Two reasons: * You can't mock a built-in function, so your unit tests gain some unnecessary hassle. * If you're using a class, you can make another object that returns data with the same interface from a different source than a CSV file. That said, I agree with WolfOrionX - this class could extend (or wrap) [SPLFileObject](http://php.net/splfileobject), be about half the size, and also be an iterator so you could foreach it directly.
I took a look and i see your point, but this is more focused on security then on structure. Now i know that giving my variables names like this might look stupid, but i like to think that some day, someone else will be using my code and when... IF, that time comes, it sucks if they don't understand anything because all my variables are cryptic. - Joler1302
This. I have used FreeTDS on a Linux machine to connect to several versions of SQL Server without issue.
Duh. I read it as mysql_real_escape_string, not mysql_escape_string. Someday, I will learn to read. But not today.
Very quick example of WolfOrionX is saying: https://gist.github.com/inanimatt/4991169 It's just the reader, but you can see why it's helpful, and you can mock it with a regular array or replace it with a different iterator to fetch results from an API or database.
In fairness he is not using AES encryption on the cells, not relying on spreadsheet passwords. You still make a great point about excel password protection, it is just not applicable.
I don't get those rants. Interpreted languages don't have to conform to the constraints of compiled ones. It's one thing to eschew illogic syntax that obscures the code flow, but another to get tripped up in language pretension.
Everybody learns differently. For example, the way I started programming was by being interested in how message boards work. I was just so curious as to where all of these "posts" were stored. How the system would recognize me if I login using the correct credentials. As you can see, I had nothing but questions in my mind. Little by little, I noticed on the footer of the website it said "Powered by phpBB". A quick Google, leads to the phpBB website. Big download links in the website. I downloaded. Proceeded to open a file with a weird '.php' extension in Notepad.. I had nothing but more questions in my mind now! I learned by pure curiosity. Fast forward 8 years and I'm still just as intrigued by new software, new programs. I clearly have a passion for this stuff. What I'm trying to say it just dissect an existing PHP script and see what goes down. All scripts point you to an index.php file. That should be a good place to start. TL;DR: Open index.php of any script. Be curious. Google your questions. Also, take everything you see in that file with a grain of salt, as there is always more than one method to perform the same task.
do i make the whole html display an iframe then set the specs to always work?
This really seems like something worth "losing it" over.
It's all about how low you let the fruit hang. Put you an email address up somewhere that gets indexed often and see how much spam you get in the first week. [at] defends you a whole lot more than you think.
If you have no problem with [at], they could always use &amp;amp;#64; EDIT: Any reasons for the downvotes? What I wrote converts to @ in HTML, letting you still copy and paste. If you are already using one thing easy to search for, you might as well make the email address more readable in the process. 
It's not that PDO escapes it automatically.. it's just that when you bind a parameter it doesn't get executed with the entire SQL statement. It basically sits the prepared statement on stand by and inserts your parameters as needed(usually for repeated queries).
This is what SSH Tunnels are made for. 
Install MySQL ODBC driver on the SQL Server machine. Create linked server in SSMS to the MySQL instance over SSL. Create a job in SSMS that pushes data to MySQL.
this shit made my laugh so hard, thanks.
i dont think theres a paid version?
Why re-invent the wheel? There's no shame in using a bit of Python/Perl/SSH/iptables to securely transfer files.
You could just use sftp?
Please do not **only** use IP whitelisting. That would be stupidly easy to break. If you're using SSL endpoints then use SSL client certificates. This is [easy to do with Apache](http://httpd.apache.org/docs/2.0/ssl/ssl_howto.html#certauthenticate) and almost certainly other webservers. Machine A should have a copy of the certificate which it checks against and Machine B should check against Machine A's client certificate. And then you have security.
[Symfony's DomCrawler](http://symfony.com/doc/current/components/dom_crawler.html) (optionally with [CssSelector](http://symfony.com/doc/current/components/css_selector.html)) is pretty good. It's a nicer, somewhat jQuery-like layer over [PHP's builtin DOM functions](http://php.net/dom) and is usable as a standalone component that doesn't require Symfony.
Ah, I see, this will only run in unix like systems.
Actually you can just put &lt;svg&gt; tags inside the html. So if you can change your PHP script to generate svg tags instead of html tags you should be done in no time
Parsing, for what purpose? For instance, are you just interested in a DOM tree, or are you parsing for the purpose of ridding it of XSS?
Huh. You are totally right. I don't know why I thought that. Probably because the "Pro" in the name.
All the snark aside, what's being discussed here is **known** security issues.
After 6 months of hard work, we're proud to release Bolt 1.0 stable. Bolt is written in PHP, and uses either SQLite, MySQL or PostgreSQL as a database. It's built upon the Silex framework together with a number of Symfony components and other libraries and it's fully open source. If you're new to Bolt, we invite you to check out the [front page of our site](http://bolt.cm) for a brief explanation and a slideshow with pretty pictures. Don't forget to check out our [new Showcase page](http://bolt.cm/page/showcase), with screenshots of sites already running Bolt. If you have any questions, don't hesitate to ask. 
A database abstraction tool is a structure built on-top an already existing foundation. You're talking about building a structure without a foundation... Well, good luck with that. 
Congratulations on the release, I used bolt for the first time a few weeks ago and literally had a site up and running on a custom template after unzipping the code in 45 minutes. Hope to use it again in the near future!
Glad you like it. :-)
I'm not sure this level of abstraction is needed when isset is available, and providing a "default" can be as simple as using a ternary operator. Also, as I believe someone already mentioned, when I (personally) check if a variable is null I expect it to either have a value or be null (not be undefined), and having null is not necessarily an exception, it simply represents a different state.
This. The freeTDS driver is barely functional and doesn't support several ms sql column types (and fails silently). We've been running php via apache and fast cgi on a windows server and using the sqlsrv microsoft php driver for a few years. It has worked well for us.
Well here's a crazy idea but it might work. Use SMF(Simple Machine Forums). It has a bunch of built in Server Side Include methods that can be called from anywhere on your site as long as you require its SSI.php. Use it to control login, check login, check access level, post new entries to the front page etc. And if you don't want a whole forum system you could just not link to it on the main site, the user would never even know you have a forum system.
I just looked through some of the code, because I had some problems finding the best solution for user management in Silex, so I just stumpled on this line $user = $this-&gt;db-&gt;fetchAssoc("SELECT * FROM " . $this-&gt;usertable . " WHERE username='$userslug'"); Is'nt that a bit dangerous not to use a prepared statement?
You probably need to change the error settings in your php.ini. http://www.phpknowhow.com/configuration/php-ini-error-settings/
Thank you for your comment. Is there any way to do this only for specific pages? Basically - we have an existing site, and this is running within that site. Unfortunately I don't have the option of running this on a development server (which would definitely be my preferred method if it was an option). EDIT: Nevermind! Figured it out. I put this at the top of the page causing the error: &lt;?php error_reporting(E_ALL); ini_set('display_errors', 'On'); ?&gt;
True that, I could imagine a lot of people entering bolt.com and getting a different site...
Congrats on the release! Just trying it out and noticed the wysiwyg editor is different in the screenshots than the download. Looks like Redactor in the screenshots at least, so thought I'd ask. Cheers!
On your dev server you should have "display\_errors" set to "On" in php.ini, and error_reporting set to "E_ALL" (or whatever the php.ini file recommends, I forget the exact one). Although it seems from your comment you don't have that. You *can* set the above on the server, but in production it's best to turn off display\_errors and instead log the errors to a file. Another tip: if you have error display on and still don't see errors, check the source of the page. Sometimes if there is an error in the middle of a tag or attribute the error can get hidden.
We've thought about that. However 'bolt.cm' is nice and short. And (imho) looks a lot better than 'bolt-cms.net' or something like that. 
Is that true, about google downgrading .cm domains? As far as i can tell, it's doing OK, already beating other software with 'bolt' in the name. For me at least, it's already [above boltcms.com](https://www.google.com/search?btnG=1&amp;pws=0&amp;q=bolt+cms) (which is unrelated, btw.) Same goes for [Duckduckgo](https://duckduckgo.com/?q=bolt+cms), [Github](https://github.com/search?q=bolt) and [Ohloh](https://www.ohloh.net/p?q=bolt). It's starting to float to the top in those searches as well. Since we're in this for the long run, i'm pretty confident that people will be able to find us, once we've been around for a little bit longer. 
Yeah, as I said, I'd really prefer to be doing it there, but unfortunately given the circumstances I can't. Fortunately I can at least keep traffic out for the time being with a coming soon page.
Look at VirtualBox. Set up a dev server on your local machine and deploy the code to that.
can i change the language or only the locale settings ?
Locale settings only for now. Full localisation of the backend itself is a planned feature. 
I ran all png's through tinypng, so I thought it was done. Someone else mentioned it too, so I guess i'll have to check again. Also it's quite a bit busier on the site than I expected, so that's not going to help either. Regardless, thanks for noticing, i'll work on it. 
I think I see what's going on: The showcase page displays automatically generated thumbnails of the full sized screenshots, and it does a horrible job of optimizing those. Thanks again for pointing it out to me.
AFAIK, that's vulnerable to unicode overflows. You should also avoid SELECT * FROM.
Can you elaborate? Not trying to be snarky, I just have no idea how that could be done. 
Yeah, this looks really promising, thanks. Now I need to do some research to see if any of these completely do what I have in mind. Much appreciated!
There were some other inconsistencies in that section. It's a bit better now: http://docs.bolt.cm/templates#file-structure 
Nah, there is no excuse. Just use bind variables. Period/full stop. Don't let a single line of SQL into your project that is not built with bind variables. I can honestly say I've done this for over ten years, initially using the ADOdb library with PHP 4, and now PDO. I've never worked *on* a project that had SQL injection vulnerabilities found. I've worked *with* plenty of projects that thought they had checks for SQL injection - OpenX, OSCommerce, WordPress, phplist etc. - but have had plenty of vulnerabilities found over the years. So the trick is, do not EVER build queries like this example.
You are correct. We _will_ fix this quickly.
I believe that's exactly what OP is doing. The resources are in separate files during development and OP's builder.php is a custom script that's run prior to deployment to combine them into single .js and .css files that are minified.
What are you using to minify JS and CSS? I've been looking for a good one that can take a string input and the output would be minified.
havent searched for css yet but for js im using [this one](http://joliclic.free.fr/php/javascript-packer/en/) , its a php class that takes a string
And this needs to be part of the server-side code, why?
&gt; What was the story behind creating another PHP CMS? Why did you do that? Sometimes you need a tool like Drupal, sometimes you need to 'hand roll' a system for a website, and sometimes you need something more straightforward and less 'wieldy'. We felt there was no tool to create these simpler CMS-based websites the way we wanted: Flexible content types, elegant template language, easy to install on modest hosting requirements. So we decided to create Bolt. &gt; Don't you think a simple customizable CMS is an utopia? I won't say "we just did", but i really think that it's totally possible to create something that's both 'simple' and 'customizable' and pleasant to use. &gt; A lot of people consider building websites with CMS as an obsolete bloated technique, what do you think? I'm not sure what you mean. How would you create any non-trivial website, without some system to help manage all of it, and keep it maintainable, in regards to both the content as well as the assets? &gt; Also I'd want to know your opinion on CMF vs CMS. What do you think about http://cmf.symfony.com/[1] Have you tried that? I always feel like "CMF" is only _adding_ extra layers and thereby adding to the overall complexity of a system. It might work for some, but when it's your goal to create something 'simple', CMF is not the way to go. IMHO of course, other people will disagree with me. :-) 
&gt;because it does it without needing to copy and paste from an external site Dude, what? The issue is your workflow. You shouldn't be copying from an external site, you should be using a build tool and compile CSS and JavaScript YUI Compressor and Closure Compiler respectively.
There are some parameters you can't bind, for example you can't do `select row from table where ? = ?` If you want to allow user input to determine the column name, you can either do an additional query to determine if it exists first, the method of determining that varies between database types and adds overhead, or you can quote the parameter and let the database throw an error when it doesn't exist. Is there some problem with `pdo::quote` that I am not aware of? I use bound params whenever possible, but I never heard of a problem with quoting it either. 
DOM
Then just dunk it into DOMDocument.
[uglifyjs](http://marijnhaverbeke.nl/uglifyjs) does a really good job as well and often packs things smaller than closure compiler. I've noticed its results work better in Opera too. For OP - it has an API and is also [on github](https://github.com/mishoo/UglifyJS)
For simple stuff [SimpleXML](http://www.php.net/manual/en/book.simplexml.php), more complex, [DOM](http://www.php.net/manual/en/book.dom.php), I have heard good things about [phpQuery](http://code.google.com/p/phpquery/) and [Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/), phpQuery looks to be dead (no updates since 09). SimpleXML can be rather persnickety, you might need to run the output through [Tidy](http://php.net/manual/en/book.tidy.php) before handing it off to SimpleXML, since it's really for well-formed XML and not HTML.
It probably seems like a little thing, but your installation instructions will trip up OS X MAMP users. They'll need to use the fullpath to execute PHP on the command line. The default Mac OS php command might not have a php.ini file so the install scripts won't work. Instead they'll need to fix their environment to point to the right php or they should provide a full path. Since MAMP works fairly out of the box without changing your PATH, a lot of people might not realize this. An example path for MAMP's php might be: /Applications/MAMP/bin/php/php5.4.4/bin/php 
Shouldn't there also be a LIMIT 1 and something like "SELECT id" rather than "SELECT *" for speed?
It would be nice to see an example of a layout that generates a tree view of content. This seems to be something that trips up a lot of people. In most CMS systems it turns into some recursive template call, but everyone has their own approach. For the lightest weight CMS examples, I usually try to make a single page template with a collapsable tree on the left that shows a set of pages. Seems simple, but you'd be surprised how many times that turns into a nightmare. (Trying to get that right side to partially load in place without a page load is usually the next step.) This problem is usually much worse when you look at the page-creation workflow and evaluate how hard it is to place or move a page when you're using a tree structure for part of your site. If the docs part of the bolt site is using bolt, then that's probably a good example to see. Thanks very much for you effort. I'm reskinning it now. I'll send you the theme when I'm complete. 
I believe there's a PHP CMS or two already. What's that one called again? 
Does the script actually run server-side (i.e. every time there's a request), or is it something you run only at deployment time?
it runs everytime i load a page in localhost, if its deployed it doesnt build, this may sound like a bad idea on a live server but on localhost is not big deal, (it checks for localhost and builds if its true)
That's an entirely different scenario and solved very simply with a quick case statement such as: switch ($_POST['column']) { case 'name': $col = 'name'; break; case 'age': $col = 'age'; break; // etc, etc default: throw YourFavoriteException(); } Zero risk of injection, NOT using user supplied inputs.
There's no real hierarchical structure built in (not yet, at least). Do have a look at the `menu.yml` config file and docs, though. It'll allow you to create menu's with one layer of submenu's. If that's not enough, you could perhaps create a few menu's, with each of them an extra layer of items.
I have no experience with Mongoose, so i'm afraid i can't help much. Make sure to add an extra config rule for the thumbnails, though. That's the only thing that should _not_ go through index.php, besides the static css/js assets. For now only rewriting is supported, not using /index.php/foo/bar. If your setup doesn't pick up the css, check your browsers inspector, as it might give some clue as to why not. If you do manage to get it working properly, i'd be great if you could write some docs for it. I'll gladly add a section in the docs for it. 
Read the documentation on templates, and browse through the files in the `theme/base-2013/` folder. They're commented quite a bit. When it comes to creating themes/templates, Bolt is targeted towards frontend developers who like hand-crafting their HTML, and then use Bolt to incorporate the cms tags to it. Bolt isn't going to hold your hand, or dictate how your HTML should be structured.
Just because there already is something, doesn't mean we should stop trying to make better things. Or things which serve a certain purpose better. Or things that are based on solid frameworks with well-established components. "If I had asked people what they wanted, they would have asked for faster horses." - Ford.
Do you plan to add support for [video sitemaps](http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=80472) as well in the near future? :)
Anything for the porn industry. I can do this in my lunch break today.
That would be very nice of you. I am currently working on the beta version of my site and will use your software to create my sitemaps. I'll link back to your project at the bottom of my site when the beta version is launched. Thanks again for your great work! :) P.S: I'm using Symfony2 in the beta version of my site, so I'll create a bundle that uses your project in vendors. In case that interests you :)
What you say is correct in general, but PMA's interface is just terrible.
Unless you actually limit yourself to the very first one that was released, stop whining. Since, by your logic, all subsequent ones can be dismissed.
"Don't let a single line of SQL into your project that is not built with bind variables." Put another way, when using prepared statements and such, you're never actually composing a 'line' of SQL (or, a SQL statement) - you're only ever dealing with SQL fragments. "SQL partials" as a term, perhaps? The burden of constructing and parsing the final statement is removed from your app code altogether. I'm not adding anything new to what you're saying, just trying to give another explanatory angle on the idea for people who might still have a conceptual issue with the idea. Almost all my projects these days use helper libraries and/or ORM tools which remove about 99% of the need to ever write 'raw' SQL in the first place, and I typically only write SQL by hand for edge cases which aren't easily expressed in ORM or need to be tweaked for performance reasons. And in those cases, prepared statements still rule the day.
I'd suggest decoupling the script that's doing the checking (builder.php?) from your site's mainline code. In production, it's consuming unnecessary (though minor) resources, and all code is a potential security risk no matter how minor. By decoupling, I mean something like this: * During production, your index.php contains all of the necessary &lt;script&gt; and &lt;style&gt; tags for each of the separate JS and CSS files. * At deployment time, you run builder.php, which combines your JS and CSS files, minifies them, and modifies index.php to have only the one &lt;script&gt; and one &lt;style&gt; tags.
Hey, its our newest phpmaster spammer.
I've always read that it will stop querying the db as soon as it finds the amount of data specified by the LIMIT. Gonna have to look into this, I feel lied to lol.
Is mysql_real_escape_string actually more secure or am I mistaken? 
Article sounds like it came out of the "Enterprise Middleware Foundation"-era of buzzwords from 2004.
Why not using the constructor instead of calling setCsv and _init ?
&gt; That would be stupidly easy to break. Got any examples of this?
Ok, I'll have a look today. I think I'll try to create a new 'page' contentType with a 'parent' field that's a that references another page. The only thing that'd be needed is an improvement to the editor for that contentType to display and manage the tree relationship.
Maybe this machine is misconfigured, but it has a stock MAMP Pro and the composer does a good job to detect that your PHP is set up properly. Unfortunately, it failed. curl -s http://getcomposer.org/installer | php #!/usr/bin/env php Some settings on your machine make Composer unable to work properly. Make sure that you fix the issues listed below and run this script again: The detect_unicode setting must be disabled. Add the following to the end of your `php.ini`: detect_unicode = Off A php.ini file does not exist. You will have to create one.
If both sender and reciever servers contain keys used for encryption/decryption then doing it is 100% pointless. What you should do is simply use sFTP to security transfer data over, no need to encrypt it since the link will be encrypted. 
He doesn't, because he is speaking out of his ass.
I purchased Security, Design Patterns and the Services book. Awesome deal.
Thank you kind sir. 
Might want to have a look at [Goutte](https://github.com/fabpot/goutte).
Uhm. ssh and a web browser? I can always access anything from any location using any computer, because it's all... on the internet.
This is a good idea, but I've been weary of doing it because I need to use different editors and work even when the internet is down/slow. I know some IDE's support working over SSH, I've just never done it.
[Vagrant](http://www.vagrantup.com/) is literally the best thing ever for this.
While this might be a good book, aren't there plenty of free websites where one can learn?
Please let me know if I'm wrong, but I read about the LIMIT clause behaviour in High Performance MySQL, great book btw
Good deal, but I don't understand the point of programming ebooks. The only reason I buy programming books is because I can dog-ear pages and mark them up. Otherwise, all the information I'd need is somewhere online anyway.
It's a nice selection. I'd just like to add, that they are very generously offering a regular 50% discount on every book for members all the time. Member means having a account with them. (I bought a lot of books with them in cause of that..)
Simple solution: use Vim everywhere.
Recently I revisited a .jsp type crawl that was giving me some cURL angst and I was able to get past it using this tool [ I used the Fiddler4 version ]: http://www.fiddler2.com/fiddler2/version.asp. Basically it will sniff all http activity on your PC [ https sniffing is off by default but can be turned on with a checkbox, more info here : http://www.fiddler2.com/fiddler/help/httpsdecryption.asp ]. So you can just navigate the site manually once and then refer to the fiddler results. Using fiddler I found that the site in question was making some hidden POSTs that I wasn't seeing previously. I recreated the GET and POST steps in sequence and BAM.
I highlight stuff with the kindle or directly in the PDF. Guess it's just another way of doing it. Can't live without command+f I have to admit.
Design Patterns will help you learn common design patterns used in many languages like MVC, Publisher/Subscriber and Factory classes. If you have a good concept of OOP, this will help you see common patterns people use to solve a lot of problems.
Pretty cool program. I ended up using Chrome's developer tools to check what is being posted and got it to work.
why not bundle your whole existing linux install into a single VM and take it with you on whatever new machine you have?
Eclipse-pdt is the bees knees.
Phpstorm is better.
No, it's not.
Is too :-p
No, it's not. What does phpstorm do that eclipse-pdt doesn't (for free).
Ok, I'll be waiting.
Plus you can put that setup into version control and have the ability to rebuild the environment anywhere you can check out code and get access to VirtualBox.
Is the 3rd edition of Programming PHP any good? Or is it like the 2nd Ed.: utterly irrelevant compared to even behind-a-point-release versions of PHP?
**Database:** Still sticking with MySQL that comes out of the box (currently) with Ubuntu 12.04. It's 5.5.x at this time. Have been considering trying out Percona in the future as I'm a huge fan of their xtrabackup product for hot-backups of production DB's to backup servers. I usualy try to make use of key-value stores (like Redis) for anything that needs some speed/heavy lifting or decent caching anyway, so for most workloads MySQL is going to be fine with some /etc/mysql/my.cnf connection/InnoDB tweaking. **PHP:** Both in dev/prod, nginx with PHP-FPM, always. As I compile from source, I go with the latest/greatest stable - so that would be the 5.4.x series at the moment.
yeah.. how do you handle rewrites? can you have directory specific configurations? i do a lot of magento work.. btw
I would think very - every man and his dog that I know seems to be making some form of switch to nginx over the last year or two.
It's very much possible. This should help out with the idea - this is a rewrite of the default .htaccess deny rules that come with a vanilla Mage install out of the box for Nginx. Needed this when moving a few existing Mage sites over to better servers/nginx a while back in an attempt to actually get some form of performance out of the laggy beast that is Mage. https://gist.github.com/magnetikonline/4735909
APC is (as far as i know) going to be included in 5.5 
I really dislike that page and I wrote like half of it. It only exist because at the time it was written people didn't know anything about nginx, try_files was something esoteric no one had ever heard of before and what happened was that people would take their file and directory checks and convert to ifs - which is indeed bad as it's far less clean to read and understand than a try_files statement. Often time everything would just be dumped in server context too. If is usually not evil, there are several awesome things you cannot do without using an if. In general, if using an if causes the config to become easier to read or there's no way to avoid it without causing the config to become harder to read then do not hesitate to use it because blogs say it's evil.
You actually have to make it better for this to be valid.
It really depends on what you're trying to do - like anything else, both have their advantages and disadvantages.
Awesome deals, thanks for the post... ...I bought 5
If has its uses, I agree. That page is at least a decent start for new users to learn some of the gotchas, and it does point out some examples of good use.
I have learned almost all of what I know by googling around, but found that my code sometimes looked pretty janky in the end (like an entire site in a single index.php page, never using prepared statements...) and missed a lot of what properly trained coders would consider the basics. When I grabbed the O'Reilly powershell cookbook I discovered things that I had been doing a in a complicated way when there were simple solutions built right in. Hoping to come across some of the same stuff in these books. Also good reading material for my 45 minute bus rides to/from work, or reference while I am coding (love my tablet)
If the OP wants to get suuuper fancy, I imagine a live cd, dd, and some inginuity could just dupe the disk into a VM. VMWare has similar tools. I used.... ghost something or other to do this once, works great. That said, sometimes a nice fresh start is a good idea. Whichever way ya go, a VM is the ticket. As for portability -- hasn't ever been a problem and I'm on a i7 laptop with 8gb ram -- and it's over a year old. You can certainly get better now and be just as productive.
I use it for myself. Switch from apache yeeears ago to lighttpd. Then more recently to nginx (cause lighttpd just isn't getting update anymore, it seems). I also tend to custom compile php at least. I generally have a few compile scripts around, yum in some libraries and recompile as needed. Repos are almost never up-to-date (except, perhaps, remi).
For your projects, I would be turned off by any sort of wheel reinvention, like custom frameworks or "big" packages that have limited use. I'd be very interested in interesting forks of projects or novel, useful libraries. Your StackOverflow profile would be great to see your written communication skills. Just my two cents!
See also: /r/cscareerquestions . &gt; Lets say I was applying for a job with your company as a junior developer. If you were checking out my GitHub profile, what sorts of projects would impress you? Goddamn *anything*. Seriously, anything that proves you can program at all is great. Some knowledge of web technologies is nice, but the specific language is not terribly important. Instead, consistency, good documentation, good commit messages, that sort of thing, are. I know you aren't applying to our company, but if you'd like concrete examples, here are the Github profiles of some of our interns: * https://github.com/adam000 * https://github.com/BaseInfinity * https://github.com/chpatton013 * https://github.com/freshvolk * https://github.com/gargn * https://github.com/scotttherobot * https://github.com/soriat
As long as you are required to exactly reproduce the CMS, you could try to rebuild a new one that performs the same functionality. If you already have a good grasp on OOP in PHP, then you might save time by rebuilding. IT all depends on how far you want to stretch the word refactoring : D
That's generally a horrible, horrible thing to say. It all depends on what you want to use them for; static calls make sense when what you're doing either isn't specific to an instance of a thing OR causes a specific instance of a thing to appear (think factories, singletons, services and generic utilities). In this specific case, the function seems to affect a 2nd thing that is being passed, and not the thing that contains it, so it would make absolutely 0 sense to bind it to the utility object "because it's a bad thing to do" Shit exists for reasons, and simply not using it because of snobbery doesn't serve anyone.
Right now Ubuntu 12.04.2 with its 5.3.x PHP-FPM. It has both Suhosin patch and Suhosin extensions enabled (with automatic cookie and session encryption). I would love to install a more recent PHP, but I think I skip 5.4 for now. Nginx is the latest dev version from Chris Lea's PPA and Redis from rwky's PPA.
"Ringware" actually sounds pretty cool.
For configuration management, you might want to try [Ansible](http://ansible.cc/). Personally, I would buy a dedicated server and setup PHP-FPM with nginx. Then use seperate PHP processes per project (user per project). Ideally, use Git for version control and setup automatic deployments. I would avoid all the management overhead of too many virtual machines. Some people love it, I am not one of those people.
I picked up the Design Patterns one too, thanks for the heads up. Anybody figured out what the picture of the dinosaur on p7 is supposed to signify? :-/
Yeah, dinosaurs are modular and made up of tiny green circles. Obviously.
Static methods? Boo the OP!
[mongoose web server](https://github.com/valenok/mongoose) on both windows and linux, php 5.4 cgi (no processes, cgi handler invoked per request). sqlite for anything database related. I like keeping a small, portable development environment... I also have a few pecl extensions installed, I think http, .markdown, igbinary, a couple more. I have xcache, which I still need to explore more, and [phalcon](http://phalconphp.com/) which I am also meaning to try when I get the chance. And of course xdebug.