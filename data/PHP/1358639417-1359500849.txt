1. change getUser($username) to getUser($username = null) 2. if $username == null //get your list of users 3. else //get single user
Consider http://www.concrete5.org/ I think they do a pretty solid job and the codebase isn't utter shit. It also gets pretty high marks from clients because it's not convoluted.
Missing project scope "code completion". this is the only reason I don't use ST2.
Oh, c'mon guys. Don't you know the basics? http://php.net/manual/en/function.isset.php 1 isset() call accepts as much variables as you want. pS. Like the idea with default values ($values + $defaults will be enough, if there are no numeric keys), but it depends on your real needs.
&gt; but how would I make it return a list of users if it wasn't supplied an argument? Create 2 methods. public function getUser( $username ) { // Don't use SELECT * // enter the specific fields you want to select $stmt = $this-&gt;db-&gt;prepare( "SELECT * FROM `users` WHERE `username` = :username LIMIT 0,1'); $stmt-&gt;bindParam( ":username", $username, PDO:PARAM_STR ); $stmt-&gt;execute(); if( $stmt-&gt;rowCount() &gt; 0 ) { return $stmt-&gt;fetch( PDO::FETCH_OBJ ); } } // getUser public function getUsers() { $stmt = $this-&gt;db-&gt;prepare( "SELECT * FROM `users`" ); $stmt-&gt;execute(); if( $stmt-&gt;rowCount() &gt; 0 ) { return $stmt-&gt;fetch( PDO::FETCH_OBJ ); } } // getUsers Or, if you want to use it like a filter. public function getUser( $username ) { // Don't use SELECT * // enter the specific fields you want to select $stmt = $this-&gt;db-&gt;prepare( "SELECT * FROM `users` WHERE `username` LIKE :username'); $username_param = "%{$username}%"; $stmt-&gt;bindParam( ":username", $username_param, PDO:PARAM_STR ); $stmt-&gt;execute(); if( $stmt-&gt;rowCount() &gt; 0 ) { return $stmt-&gt;fetch( PDO::FETCH_OBJ ); } } // getUser 
Not a good solution if the array key is set but has a NULL value. Also, you could easily write this as: return isset($a['a'], $a['b']);
The 2 people who up voted this guy are idiots.
Silverstripe cms is a mature and well backed project, used on govt projects so pretty good security, intuitive ui, mvc framework included, flexible (I just finished 2 projects with it, one a custom crm the other custom payroll), well structured code base. It doesn't have 20k plugins but you don't really need them, not hard to make it do what you want it to. 
I've spent the last two months developing a package for Concrete5. Its codebase isn't utter shit, but it's not great either. There's a ton of copypasta and lots of very-similar-but-slightly-different behavior reimplemented multiple times. The WTF/minute ratio is pretty high because comments are either nonexistent or require a lot of domain knowledge before they make sense (and many of the variable names are one or two character abbreviations so the code is hardly self-documenting). Encapsulation is iffy too—things that should be entirely separate concerns have special cases for one another and depend on very specific (and often hidden) internal state of disparate objects. Most of this wouldn't matter but for the fact that developer-oriented documentation is hard to come by so you spend a lot of time reading the source code. Oh and forget about code safety: Concrete5's error reporting level is `E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_DEPRECATED` and you will drown in a sea of error messages if you try to change it. Apologies if this sounds like a rant. Concrete5 is definitely not terrible and the only reason I have this laundry list in my head is because I've been in the thick of it lately. On the positive side the maintainers seem committed to improving it and are very responsive, and its community as a whole is helpful and inviting. The backend is powerful while still being easy to use (site owners have a ton of control without needing to write any code) and some of the conceptual abstractions are very handy (if complicated at first); I especially like the way the attribute system works.
that's true, it just gets tedious to write out: `isset($array['key1'], $array['key2'], $array['key3'], $array['key4'], ... );` and if you want null values then instead of isset you have to use array_key_exists. here's a little help to emulate that for array keys: function array_keys_exist($array) { $keys = array_slice(func_get_args(), 1); return $keys === array_keys($array); } $a = ['name' =&gt; 'jim', 'age' =&gt; 15]; var_dump(array_keys_exist($a, 'name', 'age')); // -&gt; true
I know, i really am rubbish at english, it's because im dyslexsic :(
You can quote with the \&gt; character: &gt;I never liked Wordpress, Joomla, Drupal or any other CMS because the code seems like their own vision of things instead of MVC and other stablished patterns and code guidelines.
Programming is a skill that eventually becomes language independent. Becoming a decent programmer is not learning a language--you master one or a few first.
If what you are doing inside the if statement is short, you can do it like this: isset($ids[1]) || myFunction($ids[1]) If what you need to do is a bit more complex, you can use closures(Only from php5.3) function isset_callback($array, $key, $function){ if(isset($array[$key]) &amp;&amp; is_callable($function)){ $function(); } } $array = ['one' =&gt; 1, 'two' =&gt; 2]; isset_callback($array, 'one', function() use ($array){ // Stuff here }); You can modify it to have both a success and a failure callback. If the array you are using is going to be big, it is generally a good practice to pass the array by reference in the use statement
Kohana, Symphony, and probably many others do this. The primary difference, you'll find, in modern frameworks is: Engine.php (Model) - this style is not used commonly. function EngineInitialize($configuration) { //precheck commonly used tasks $controller = $_GET['action']; if(!pageExists($controller.php)) { doError('Page not found'); return; } //load models (e.g database model) //do some more tasks $controller-&gt;Run(); //run register.php's Run() function } Controllers/actions are typically managed by regex(es) that matches the request to a controller and defaults to something if a mismatched controller request comes through. This is sometimes called a "Route" // Kohana // default route, used before others Route::set('default', '(&lt;controller&gt;(/&lt;action&gt;(/&lt;id&gt;)))', array( 'controller' =&gt; '(default|user|api)' //recognized controllers for this route )) -&gt;defaults(array( // If no controller matches, we end up at default/index 'controller' =&gt; 'default', 'action' =&gt; 'index' )); It can get pretty intricate when controllers and actions and ids are matched to various routes.
Huh. I've actually been working on my own CMS that's basically exactly like concrete. (my intentions were something super-light and simple that I can use when I develop websites for clients as an "added bonus" where they can edit their own pages) The codebase doesn't look too messy, but it's still more complicated than I was going for. I'll keep it in mind for clients that understand a bit more than the bare minimum though.
What i have often found when it come to the various CMS's is the admin interface is the key selling point. I just wish so badly that it had a better back end. Out of all the CMS's i have tried (WP, Joomla (shudder), Drupal and ModX) wordpress does the best job as far as user experience goes. Ive often thought about writing my own CMS and just slapping the wordpress admin interface on top of it. A question i have always ment to ask, what might be the legal ramifications in that? I understand the code itself is open source, but are the creative assets held separately? 
you need to hire a developer, and get a host that isn't godaddy. go to /r/webhosting for that. If you really think you're up to the task of installing a POS system yourself, then you can start by getting your FTP credentials from your webhost. Use an FTP client like [WinSCP](http://winscp.net/eng/index.php) to connect to the server, make a directory called "pos" or whatever you want and upload the contents of `Open_Source_Point_of_Sale_2.0.zip` to it. Then go to your-website.tld/pos/ There is a README file in the POS. It is not named `README` for nothing. You need a database, so you'll also need to set up a MySQL database and import the sql file included.
Thanks for the breakdown! I only just recently started using it since I subcontract for a company that switched to C5 for all their forthcoming projects. Helps to get some insight from another dev.
I really want to drive home the point that it's not all doom and gloom. Rereading my comment I sound like a negative Nancy, but most of my prior experience is with more structured frameworks like Yii and Ruby on Rails, so I'm not super in tune with the PHP CMS landscape. I've done a bit of work with Wordpress and (back in the day) Drupal/Joomla and from my limited experience with those I would say that I prefer Concrete5. Perhaps it's not fair to compare a CMS to more developer-oriented frameworks, though I would hope that they should aspire to the same kind of developer productivity.
&gt; A major reason for this is probably because they all predate PHP being able to do any of that properly. Wordpress, especially is shackled with the need for backwards compatibility and legacy support because of its massive plugin base that the core code is an unstandardised mess of vaguely named global variables. +1, although we are trying to get rid of that, albeit somewhat slowly. Backwards compatibility is one of the most important aims of the core developers. The fact of the matter is that for users, stuff like this doesn't matter, so it's not particularly important that global variables are used. (As a sidenote: whenever anybody complains about how WordPress does something, they usually ignore that there's a huge amount of stuff in there just for backwards compatibility. There's also a fair deal of "if it ain't broke, don't fix it", but that's changing.)
I was at Badcamp when Twig was committed to Drupal 8. True story.
I develop in and use both Wordpress and Drupal on a daily basis. This is pretty easily broken down- Wordpress: Use this if you specifically need a really good front-end/ux and if your content is "not complicated". Blogs are FANTASTIC for Wordpress. If you try to do anything "fancy" with data in Wordpress, prepare for a mess and a lot of headaches. Drupal: THIS IS WHAT YOU USE IF YOU NEED "FANCY", but still a CMS. Drupal has become extensible and programmable in just about any direction you could want a CMS to go. And if there's not a module that does what you want, there's one that does something close you can tweak. Multiple types of content, large quantities of content, programmatically generated content, socialized content, more-than-a-blog-or-static-website content, Drupal is the best of the bunch right now. Obviously, a CMS isn't always the right choice. There's plenty of good frameworks out there if you need more than a CMS. One thing I hate to see is people trying to use a CMS where it doesn't belong..
Hm.. a good question is: Why are there tens of thousands of modules? No one did their job right, apparently. I'd say: Good and valuable code gets in the core project sooner or later. And ask your boss: is it better to distribute a given workforce on ten thousands or less than hundred modules? Small is beautiful.. I'd say we need a framework that has a lot of prefabricated parts so it can play the role of a CMS like lets say Drupal from the start, plus lets you add your code. Does this exist? 
I'm saying that FuelPHP relations are much easier to use and set up. It was easy for me to do anything with FuelPHP - setting relations and cascade deletes, even know i haven't found out how I can do automated cascade deletes in Laravel. The way timestamps are made in Laravel makes them completely useless for me since I can't change the field names or anything.
This is **not** MVC, so I doubt you'd find a similar architecture in a modern framework. As for which frameworks are best, I recommend Silex for small projects, Laravel (or Silex if you know what you're doing) for medium and Symfony2 for enterprise.
You can always use the illuminate/database component from Laravel 4 in FuelPHP. It is very decoupled now from what it used to be. I've seen implementations of it being used in not only Laravel 3, but CodeIgniter.
I'm saying that I like FuelPHP ORM much better than Laravels ORM
&gt; but I learned to keep logic in controllers and out of methods What? Where did you learn that? A controller is nothing but one way to access your model (or whatever you call that layer). You could access it via CLI, a (REST)-service or whatever and you don't want to duplicate that logic.
Why not?
Could be useful, thanks. Im using PHP_Parser to create a basic VM for PHP (in the hope of some basic automated vulnerability detection) You might like to look at the Spl classes though (Php 5.3+). http://php.net/manual/en/spl.datastructures.php There are native stack and queue classes, so they dont have to be emulated using arrays anymore 
Oh, my bad. Well it does work the other way around! (provided FuelPHP's ORM is decoupled from the framework itself)
I was using a MVC pattern and it was saying to keep all the logic in the controller, only keep business logic in the models, I figured a simple if else clause was just controller logic
&gt;get a host that isn't godaddy I know godaddy is shit but the guy already invested money into them, why tell him to get a different host?
So Maca134.. tell us about yourself and why your tutorials are better than the others avaliable
* You handle requests in something you call a Model. * You initialize a Controller from within a Model. * In a Controller you have direct SQL queries, and have no relationship to Model at all. Basically you break every aspect of MVC there is, except for View maybe (didn't see enough of it to judge). For that matter, your OOP is lacking as well. * Directly relying on global variables. * Static methods/classes all around. Simply put: your code looks amateur-ish. Something people made back in 2005. You should invest time into http://www.phptherightway.com/ and start using a proper framework ASAP. I'm sorry if this sounds harsh, but I think in the long run you'll thank me later.
Two folks have already suggested PyroCMS when it gets converted to Laravel in 3.0, but the reality is that it already covers your needs. 2.2 is out and gives you custom data management, Lex which is rather like the powerful ExpressionEngine template parser but not fraught with as many bugs or issues, and the upcoming v2.0 (in about a month) will give you Eloquent (Laravel 4's ORM) which is much lighter than the considerably larger Doctrine. PyroCMS has been around for years, is the most watched PHP CMS on GitHub and has over 100 contributors. Sure it doesn't have as many extensions as WordPress, but many of those extensions would not be required as PyroCMS can handle a lot of these things in the core. It has 3 e-Commerce systems, social integration, **proper** custom data management and not just custom posts, and a whole bunch more. It's free, or paid, and commercial support will be rolled out soon. Tell your manager that instead of trying to smash together a basic site by using WP and 100 of its 23,174 extensions you could instead use PyroCMS using 2 or 3 extensions and maybe write an extra module - which you can easily reuse for your next project. Besides, if you use the Multi-Site Manager you can share that module so its running on the exact same codebase for both sites.
That's pretty awesome; I did a similar thing in JS a few months ago because I didn't want to draw out the diagrams by hand: https://github.com/troymccabe/web-equation_representations &amp; sample: http://troymccabe.com/projects/eq_reps/
There is a decent looking IMAP package on Packagist called [Fetch](https://github.com/tedivm/Fetch) which is PSR-something. When in doubt, always look on [Packagist](https://packagist.org).
It's not entirely my code, and yeah, it's something made years ago. I'll have a look at Silex, but how popular is that framework? I've never heard of it before.
Unfortunatly its not decoupled from the framework, I would need to get FuelPHP Database, Array and Cache classes without touching the ORM packages code.
The same reason you ditch that lemon of a car you bought half a year ago...
Phil do you know when PyroCMS is switching from CI to Laravel? 
We've probably had another 100 add-ons submitted to the PyroCMS store that were bounced for not being of a high enough quality.
Extremely popular.
It's already in progress. We're switching to using Eloquent and Sentry in 2.3 and progress is going good. That makes 3.0 an easier switch down the road. It will be several months before 3.0 is in beta. https://www.pyrocms.com/blog/2012/11/foundations-for-our-future
Hey, well firstly the article isn't really a tutorial. Myself, I have been developing PHP commercially for 8 years and 11 years as a hobby. I wrote my first program when I was about 11 (Im 26 now). Recently I have been recruiting for developers at the company I work for and have found a shortage of developers that can program and understand how to abstract a problem out into separate parts. There skills don't generally go much further than fairly simple PHP driven websites.
Silex is based on Symfony2 components, which in turn power (or will power) a lot of things nowadays :) Laravel4, Drupal8, phpbb4, ezPublish to name a few
+1 for this approach. Returning one or multiple from the same function is just confusing.
because they suck that bad
Actually, I do know what I'm talking about, I'm the technical architect for a large SaaS application that serves millions of users. And yes, we do have the "overhead" of a logging server (if you can call ensuring that your logs are properly aggregated and stored an "overhead"). With that out of the way, let's analyze your "advice" from your initial post. "You should not be logging to a flat file.. this is a concept that was popular in 2001." What a crock of shit. Logging to a flat file is actually the best thing a lot of smaller sites can do - filesystem semantics are well understood and you run the least risk of losing log messages that may prove to be important in the future. If you need to further analyze the data at a later date it's trivial to load it into some form of database and run queries on it. "...logging directly to Memcache..." This is my main beef. Using a LRU caching system means that you can never guarantee that you have all log messages, and in a live system that can be disastrous if you need to investigate an issue, be it performance related or an intrusion by a third party. Furthermore, the only way of listing keys (which you would need in that kind of system) is undocumented and may be removed AT ANY TIME in a future version of memcached [1] If you'd recommended almost ANYTHING else I wouldn't have taken as much umbrage to your message as I did, logging to MongoDB would be better than Memcached (but even then, IMHO, flat files wins out - you can always load a set of logs into Mongo or similar as I previously mentioned). So, can you now see why your advice was just flat out bad? Ignoring tried and battle tested solutions in favor of a system that would require the use of an undocumented feature in the software that can go away at any time in the future. [1] https://groups.google.com/forum/?fromgroups=#!topic/memcached/1-T8I-RVGKM
This may be a bit off-topic but when I (not a programmer) brought down the development server of a Wordpress company by trying out about 24 plugins on a test install...
Is there anything that developers can do as far as contribution at this point to help porting Pyro to Laravel?
I'm very sorry it took a week to respond to you, I'll make sure I check my reddit inbox more frequently ;) Can you please explain to me how CAS, which is defined as: "cas: Check And Set (or Compare And Swap). An operation that stores data, but only if no one else has updated the data since you read it last. Useful for resolving race conditions on updating cache data. " would work as a log appender? Note the important part "but only if no one else has updated the data since you read it last". If another request has updated it you are SOL. Perhaps you meant the "append" command instead. But that won't particularly help you as the default object size in memcached is 1MB. I don't know about your busy site, but we need to store a lot more than that. You *can* start memcached with an option to increase the object size, but it's not recommended. You're also trying to revise what you said - in your initial post you waved your hand and proclaimed that logging to files is "so 2001" and shouldn't be done. Agree for a busy site, logging directly to disk from the app isn't great, which is why I suggested using syslog-ng (or similar) - because rolling your own solution to this problem is just reinventing the wheel when you could be doing something far more useful like working on actual features. In our case, since we are a busy site, and run on a variable number of web frontends (depending on load), having a log server is a wise decision as we can aggregate all logs there. The apps themselves use a logging library (was Zend_Log, now looking into Monolog) to write to a stream, which in our case is actually a FIFO pipe - this doesn't touch the disk so the I/O overhead is minimal. On the other end there's a listener which reads from the FIFO and sends the logs to the central logging server for aggregation. We then run batch processes on the logging server to analyze the data (error rates, latency of external web service calls we make etc.). This is a very standard way of logging on high traffic sites; logging to memcached isn't.
&gt;Controllers will not return or render views. They always return data, and they might tell you a nice view to use to render its data or a nice URL to visit next IF that's what the calling code wants to do, but it's the responsibility of the calling code to say "Yes, I would like some HTML to display this data with because I am a website." Isn't this called a god class? and it sounds very much like MVC
Not in Laravel 4 though.
Sounds to me like you're interested in MVVM. ZF2 has a nice implementation. Also, it doesn't force you to use action methods if you do not want to. You could create your own controller base class by extending the abstract one and overriding the dispatch/ondispatch method and have it invoke another class if you'd like to.
You're trying to capture a value in $_POST when your form is using method="get".
Seems like the part of the script from line 50 to 56 should be wrapped in an "if" statement and only executed if Post values are set. if(isset($_POST['user'])) { ...do stuff... }
in addition, with the code he provided i see no way that the HTML form would ever be displayed. he either needs to put them in separate files or add some logic for when to display the HTML and when to process the form.
need suggestions on how to improve the bootstrapping. Dont look at the code organization (file layout) but on the actual code please :) thanks redditors
remember, $_POST hides the information in the URL and $_GET "gets" it from the url. make sure your method in your form matches your php. &lt;form method="post"&gt;, &lt;? echo $_POST['form_element_name'];?&gt; 
I don't have time to look at the actual code full on, but please don't use var. That is a PHP4 (or whenever they first tried OO). If you want a variable public then use public: public $variable; There is also protected and private. But never use var, it has no need to be in PHP5.3 or PHP5.4.
Or just use $_REQUEST doesn't matter if it's GET or POST.
You should try doing this on the client side if you support newer browsers ;) http://manuels.github.com/texlive.js/website/
Yes, but how the URI's will look like a REST based, or controller/action/param? I think the REST based concept is better, because he explores the HTTP protocol, and we cannot run from him, so why dont use him? :D
Why all the downvotes? Do we hate OpenCart here?
-indention could use some work -If you aren't using a templating engine, then at least combine all your echoing into a variable...then echo it once at the end -don't call your db backups "newer.sql" - use the date or something...will the next version be called newerER :P -and yea, use "public" not var
I dont agree with the "Unit tests built into controllers." part. Tests and production code have different purposes and should be separated for better understanding. From my point of view, you're trying to separate all the methods of a controller in other classes to avoid a mess. Having the tests with the production code will broke this.
Informed by the search function, I'd say we do not approve of it. The reason being it having a history of security issues. 
no...just no.
What I stated was correct. So why the downvotes? Oh right, reddit heaven forbid your opinion be different then the Hive.. I didn't ask for your opinion, but I will now. Explain yourself. I get all the downvotes and nobody to offer and explanation so that leads me to believe nobody knows what they are talking about. http://stackoverflow.com/questions/2142497/whats-wrong-with-using-request
ExpressionEngine is pretty flexible, with a large addon ecosystem and large pool of experienced developers. Custom addons are also very easy to write and share between sites. Its not the greatest if you want to be unit testing much, however.
If you distribute the program, you could potentially be creating an xss vulnerability. 
i would never use `$_REQUEST` in this case because i like actually having control over my application. unless you have a specific use-case (which the OP definitely does not), there is no reason to open the application up to whatever input type the end-user wants to use. sure `$_REQUEST` probably has its uses, but for an obvious newer developer like OP, getting them started with the easy route is a bad idea. especially when looking at his code it was quite obvious what the problem actually was. i prefer to fix the problem at the root cause.
Good answer
As the [lead developer of a CMS with a small community](http://www.elefantcms.com/), the uphill battle of plugin/add-on/theme numbers does make it tough to convince some people to give it a try. But feature parity between CMSes is never equal, so one may need way less add-ons than another to get the same result. And you're not going to pull many people away from Wordpress by being higher quality (plenty of CMSes win against WP at that one already). In our case, we do work with the wider PHP community in adopting things like Composer for sharing libraries, and not reinventing the wheel except where we feel it adds substantial value to do so. In fact, we were one of the first CMSes to add Composer support, and all our apps and themes, as well as any 3rd party libraries, can be installed in that way. I believe the future of CMSes is going to mirror the future of PHP libraries in general in adopting Composer, FIG, etc. to enable better sharing across CMSes and frameworks, which will help reduce the barrier to entry for users to switch between systems, or cherry pick the best combination of components for their particular needs. It's good to see Drupal moving in that direction already, even though it probably means rewrites for many add-on developers. I'm not sure whether Wordpress can be modernized without a similar break of compatibility, at which point the playing field will be more level across CMSes in terms of compatible add-ons.
Please stop Goggling to sound smarter, you can configure maximum size and if you are using igBinary or compression of any sort that 1MB can store quite a lot of data prior to processing. The 1 MB limit that you found by Googling is adjustable now. Sorry to burst your bubble. And you would be using CAS to avoid data overwrites.. pretty simple concept? Furthermore.. like I said you can do it in different ways, you can have an umbrella key that contains sub keys and do multiGet off that... again simple stuff that a self proclaimed SaaS guru would understand. I'm not going to entertain your further posts since it's waste of my time and frankly brain cells. Enjoy. 
I'm terribly sorry I wasted your time, and brain cells. Sounds painful.
I give it one upvote for not being Pinnacle.
You get an upvote for saying that. 
Yeah, sorry I don't think I really even know how to explain what I'm attempting to achieve. I'm basically just trying to "hook" into the form on page.php without altering it because it's still used to lookup customer information. I'm trying to automate the lookup if the variable is present in the url and just use the same process for lookup. That probably didn't make it anymore clear.
&gt;auto fill and submit the form So you could do something like this using jQuery $(document).ready(function() { $('#yourform').submit(); } and a bit of PHP &lt;?php if (isset($_GET['name'])) { echo $formPostingCode; } That's not to say you should because there is most definitely a better way of doing it than this - but it's hard to tell what exactly you are trying to achieve from the info given...
Thanks, I think this gets me a little closer. I thought I might have to use some javascript/jquery in there somewhere. Basically our phone system sends a variable containing the caller id number in a predefined url. And it updates automatically. I'm trying to hook it into our existing customer lookup form to automatically lookup the customer information when they call.
This is likely the answer you are looking for. You might want to change it to: &lt;input type="text" name="this" value"&lt;?php if (isset($_GET['name'])) echo $_GET['name']; ?&gt;" /&gt; &lt;input type="submit" /&gt; &lt;!-- Your table for results goes here --&gt; Essentially when you search for "Billy Bob" the page.php will return all the user's named "Billy Bob" and keep that in your search input which is at the top of the page.
Auto complete and go ahead and submit the form. 
you are essentially passing whatever is in your form via the GET method so they can either search your user db through the URL or the search form?
It goes from the url to the form.
I'm new here, but we loathe OpenCart. My main issue with it is that on more than one occasion, the lead developer / owner has ignored serious security issues, claiming that those making the complaints were wrong. There is a serious god complex happening there and I don't trust the development team to power our clients' websites. But as said above, at least it's not oscommerce.
Know what else is free/open source? Magento Community 1.7.0.2
I've used fpdf before, and found it limiting. I've also used wkhtmltopdf with moderate success on a few past projects. If you can drop binaries on your server (eg wkhtmltopdf), I'd instead recommend using [PhantomJS](http://phantomjs.org/). It's a headless webkit engine, so you can make things as nice and neat as you want with HTML/CSS/JS. If your JS takes a bit to load, you can set it to not capture (screenshot or PDF output) for a certain delayed amount of time. I've used it for generating reports that use HighCharts in them, and give them a 200ms delay to load. [Here's](https://gist.github.com/4589866) a slightly-modified raster.js (which comes with the phantomjs distribution) I use for converting an HTML document into a PDF. For PHP, specifically, I wrote a tiny abstraction over the configuration and execution of PhantomJS ([here](https://github.com/chrsm/PhantomJS)). Hope this helps you out a bit.
So three things: 1. You probably already twigged to this, but the PHP will only run after someone submits the form. You need to write some Javascript if you want to submit a form on behalf of the user. 2. It seems every damn person on this comment thread is hell-bent on making your code vulnerable to XSS ;). Never **never** write `&lt;input name="name" value="&lt;?php echo $_GET['name']; ?&gt;"&gt;`, else bad-guys and their opportunistic web-crawling scripts will send people to `http://yoursite.com/yourpage.php?name="&gt;&lt;script src="http://badsite.ru/myscript.js"&gt;&lt;/script&gt;` and inject crap onto your page (including forms to steal their personal information in your name, javascript to capture cookies so badguys can hijack your users login sessions, etc etc. Don't think this won't happen to you). 3. Fairly minor point, but while `and` and `&amp;&amp;` technically do the same thing, they have different operator precedence. Generally speaking you don't see `and` used in any popular PHP code. So you probably want to do two things here. First, pre-fill the form if there's a hint in the URL query (the bit after the ?). You can do that with PHP. The second is to submit the form. There are two ways you can do this: If `page.php` also takes its form input from the URL query (i.e. your form is `method="get"`) and shows the form as well as the results, you can simply redirect users straight to the results, and they should get a nicer experience: &lt;?php if (isset($_GET['name']) &amp;&amp; $_GET['name']) { header('Location: page.php?name='.urlencode(filter_input(INPUT_GET, 'name'))); exit; } ?&gt; Alternatively you'll have to content yourself with filling in the form for them, and perhaps injecting some Javascript to submit the form, though that will basically cause your page to load then immediately vanish, which isn't a particularly nice experience for a user. They tend to think that something's gone wrong. Anyway, filling in a form more safely looks a bit like: &lt;input name="name" value="&lt;?php echo htmlspecialchars(filter_input(INPUT_GET, 'name'), ENT_COMPAT, 'UTF-8'); ?&gt;"&gt; Just change UTF-8 to whatever your page's encoding/character-set is (it should be in a `&lt;meta&gt;` tag up in the header, if you're lucky). 
Yeah and you know what's a bitch to configure? Magento Community 1.7.0.2
 SELECT l.id , l.title , l.url , u.name AS `username` , u.email AS `user_email` FROM `links` l JOIN `users` u ON u.id = l.user_id Then, fields would be accessible as: %title% / posted by %username% 
&gt; I have a form that takes in data from the user that needs to update/create/delete multiple database tables, and so, multiple activerecord models. So, make it so your controller decides which method is used when but the actual methods themselves setup in the model. // In controller if( everything_is_good_to_allow_user_update ) { $user-&gt;doUpdate( $values ); } Sorry, I don't work with Yii much so I do not know the specific syntax for Yii.
For that - especially when the code repeats I use the components folder and create helper classes. Magento has the concept of helper too and I like it, for cases when a logic needs to be repeated but doesn't fit into the model. 
Wow, thanks for the heads up! The application is running on our LAN but I'd rather go about things the right way regardless. 
The trouble is with a dynamic language like PHP you can never really be sure. Even simple code can lead to unpredictable execution paths at runtime (e.g. maybe you want to include different files or autoload different classes depending on user input). What you're asking about is basically a particular kind of [static analysis](http://en.wikipedia.org/wiki/Static_program_analysis). There are [a lot of different static analysis tools for PHP](http://phpqatools.org/), but again, what they can actually tell you is limited because the language is so dynamic (a program can significantly change its own behavior at runtime). What would be the motivation behind doing this? Just making your deploys smaller/faster?
I'm with OP on this ALL my code always seems to end up in the controller. My models most of the time only describe their relationships. (I use cakephp).
That looks fine, I am not to sure about specifics of Yii but I would look for something like `$thing-&gt;setAttribute( $_POST['attribute'] );` or sending it some other method that will use it.
Read [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670). You will not regret it.
In MVC the real app must be in the Model, the controllers are just pipes and faucets that takes inputs and call views after the logic is concluded. In theory your Model should work even using a Qt or GTK+ interface. If you have a fat method in the controller cut it and paste it in a new method called "createNewTables" in the Model file and pass the arguments you need to execute the logic. In the controller you will have something like: $this-&gt;MyModel-&gt;createNewTables($username, $arrayNames); # I am passing the code to the model 
&gt; In theory your Model should work even using a Qt or GTK+ interface. That's the thing there! I wish this point was made more clear in MVC tutorials. The controller is only there to expose your functionality to a web interface!
The trick is to move a lot of the decision making to the model for instance in you example I would take the data and pass it directly to the model So $thing = new Thing(); if ($thing-&gt;doUpdate($array_of_form_values) { echo "DATA ADDED"; } else { echo "ERROR WILL ROBINSON" //or whatever } in your Thing class function doUpdate($values) { // check code here or even farm out to another set of functions if ($good) { return $this-&gt;save(); } else { //you can adjust the return and have the $good variable pass a reason for the badness or just return false; } } It's a simplified example but by doing this you have moved most of the logic to the model. The controller acts as gateway between your model and your front-end (the view) it's only function is to clean up variables and pass them to the model and then tell the view what to show next based on what the model says. In the example the Thing class does not describe a table on you DB but instead describes a area of work (bad writing, sorry) To take the example further. Let's say that the form adds a new customer and needs to add data to the customer table and multiple address information (customer has home address, work address etc). I would have two tables Customer customerID, firstName, lastName dob, Address addressID, customerID, addressType("home","work"), line1,line2,postCode My controller would be made of three classes class Customer - Describes the customer table and adds, updates and removes data class Address - Ditto for Address table I would also have class manageCustomer (or something better named that I would use when more awake) When the form submits I would use the manageCustomer class to do the work of checking the data and organising it and the two other classes to add the data to the respective tables. The controller would pass the data to the manageCustomer class and tell the view what response to give based on the response from manageCustomer. Also pay attention [to this post from u/darkhorsehance](http://www.reddit.com/r/PHP/comments/170mu5/having_a_tough_time_understanding_fat_modelskinny/c8169mw) Edit: These days I do most of my form validation (is this field empty, is this a telephone number etc) on the fly with javascript but this does not mean that the data that is being passed to the controller is "clean". ALWAYS CHECK THE DATA.
OK. So, Yii allows you to make web interfaces, right? But it also allows you to write console commands. Maybe you'd like to do that one day to create a cron job that must run every day at midnight for your website. Just go along with me here. But! You've placed a lot of the vital business logic of your app in the controller! Oh no! Now you can't use it from a console command! Damn it, if only you'd architected it different so the core functionality wasn't so closely tied with a web interface! In general, it is best to put as much logic as possible into the models. (AKA the domain models.) Yii probably generated those for you automatically. For anything that doesn't fit neatly into a model, it's common to make a "service" class. They should be named according to the _domain_ they address: "UserAccountService" or "ProductService" etc. 
It doesn't really make a difference. Many programmers blindly follow whatever they read without thinking it through. Copying and pasting the code into your model is just rearranging the deck chairs.
Oh.. Well fuck that then
This article is kind of old, published on January 6th, 2011
This is a 2 year old article and has many pieces of information that are incorrect regarding the frameworks.
Check out the following Yii methods: * [beforeSave()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#beforeSave-detail) * [afterSave()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#afterSave-detail) * [beforeValidate()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#beforeValidate-detail) * [afterValidate()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#afterValidate-detail) * [beforeDelete()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#beforeDelete-detail) * [afterDelete()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#afterDelete-detail) * [beforeFind()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#beforeFind-detail) * [afterFind()](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#afterFind-detail) -- All of these are methods of for the [CActiveRecord](http://www.yiiframework.com/doc/api/1.1/CActiveRecord) class. Now let's say you're saving data from a form into a main table (User) and one related table (Company). Let's also say your User table has a 'created' field which gets populated (with a date/time) when the records is created ... drop this into your model. public function beforeSave() { if ($this-&gt;isNewRecord) { $this-&gt;created = new CDbExpression('NOW()'); } return true; } This will pre-populate the 'created' attribute with the current date/time BEFORE the record saves. Then, let's say you need to save the Company name (from the form) to the related Company table AFTER you have saved the new user. Add this to your User model: public function afterSave() { $company = new Company; $company-&gt;company_name=$this-&gt;company; //etc... ; $company-&gt;user_id = $this-&gt;id; //etc.... $company-&gt;save() } Now, whenever you need to find a user - you're pretty much always going to want to find the Company name AFTER as well .. so public function afterFind() { $company = Company::model()-&gt;findByPk($this-&gt;company_id); return $this-&gt;company = $company-&gt;company } I'm positive the above code won't work as written - but hopefully it gives you an idea how to move some items out of your controller(s). If you could give me a specific example - I could try to give you a specific answer if you needed it?! hope this helps a little =)
I know right? Those damn chairs keep multiplying. Initially I only had one chair and now I somehow ended up with chairs all over the place. Some are broken, some are with friends, some I don't even need. I don't even know how many chairs I got. 
Thanks, will look into this.
Thanks, I think I follow. I don't fully understand the how and why if a service class, but I'll try to follow through on that. Thanks!
Thanks, this is super helpful. Ill study this and try it out, try to grok it. Seriously, thank you!
 $thing = new Thing; $thing-&gt;attribute=POST['attribute']; // this is moving the fat to the model, you should surround it with try/catch too and throw exceptions when validating $thing-&gt;validate(); $thing-&gt;save(); 
wha?
I don't know what your logic does or does not do based on what comes back from the form, but Yii has very robust built in validation. There are also form models that handle form validation, which you can use to avoid stuffing a ton of validation logic in either your controller or your active record models. If you have complex validation sets you use across multiple forms for certain parts of the form, you can use behaviors to make that logic reusable. Also, I see several decent answers in general from folks who are probably trying to help but may not be familiar with Yii innards. If you are looking for validation logic, form models are what you need. Does any of this sound like what you need?
You're still suggesting that he perform multiple queries instead of one. Even if you gather all the user IDs and use WHERE IN to perform only one additional query, your script has to do all the logic to put them together, loop the same information more than once (pull the IDs, and then display them, most likely). Not a single one of these situations has a better performance benchmark than a single join query. So, seriously, if you have something that shows me otherwise, I'd love to see it.
There's no way 2 selects with additional PHP processing will be more efficient than 1 join, in this case. Don't think OP has millions of links and users in his DB.
I'm definitely understanding the why, its the how, the implementation where I'm falling a bit short. Your comment is clear on the why, seeing it spelled out succinctly is helpful.
I don't think it qualifies as validation. Its logic, business logic. If a user updates a record, a Meeting, and alters some Users associated with that meeting, which then needs to alter some UserNotes for that meeting - I'm currently using the controller to gather that info from the form and send it out to the various models - but the logic for when to update this or that related model is in the controller. I'm struggling to understand how to move that into the models...
Sheesh.
Maybe, and think about it, you're wrong?
The latest OpenCart still has at least two publicly known critical security vulnerabilities: https://github.com/opencart/opencart/blob/master/upload/admin/controller/common/login.php#L15 and https://github.com/opencart/opencart/blob/master/upload/admin/controller/common/forgotten.php#L23 ZeroNights 2012 presentation about attacking those: http://2012.zeronights.org/includes/docs/Reutov,%20Yunusov,%20Nagibin%20-%20Random%20Numbers%20Take%20II.pdf
In conclusion, fuck OpenCart. Edit: Ah. It's that presentation. You might want to link to the [slideshare](http://www.slideshare.net/DefconRussia/reutov-yunusov-nagibin-random-numbers-take-ii) version for those who do not want to download the file in order to view it.
This is the most ridiculous advice I've ever heard.
Model validation should be in the model, not in the form. There should be very little validation code in the controller as most of the time you'd be validating models. (I haven't used Yii before so this is just general advice) 
&gt;Fucking amateur hour. It is when you're around, yes. Ever stopped to think that your advice is actually bad?
This * 100. I've got a quad core i7 with 16 gigs of ram and an SSD, why are my IDEs so god damn slow.
Prestashop. I don't really like it either but never Magento again.
Fuck me, the author is a bloody retard. &gt;opencart commented 2 months ago &gt;Ok, please list these modern frameworks. If you say zend your in trouble. -- &gt;stfalcon commented 2 months ago &gt;@opencart of PHP frameworks we are using Symfony2 -- &gt;opencart commented 2 months ago &gt;your wasting my time. &gt;Symfony2 is a bloat framework similar to zend. &gt;you can tell a bloat framework by the number of files required to generate pages. there is about 20 files just for the template system. &gt;opencart template system = 1 *facepalm* 
You could potentially use the namespaces file that composer creates to find out which paths actually contain sources, versus tests/documentation etc. and have a post-deploy script that removes everything else, but is there any reason you want to do this? Do you have a limited amount of disk space?
regarding the afterFind() - you shouldn't do that, it causes extra trips to the db when you could just use eager loading. So assuming that you have a relation called "company" on the User model, you can write User::model()-&gt;with("company")-&gt;together()-&gt;findByPk(1) and that will load the first user along with their company in the same query.
The impression that it doesn't matter is a direct result of the "blindly follow whatever they read." Developer A one days reads "skinny controller, fat model," and goes "aha!" He then copies a bunch of code, pastes it into a different file and congratulates himself. Now when he needs to write new code, he sometimes puts it into the controller ("it's just so much easier for this code to live here") and sometimes in the model. When two models interact, sometimes he puts it into the controller, and sometimes he remember that controllers must be anemic, and so he shoves as much as possible into one model or the other, choosing whichever one is most convenient. Now he's got 3+ places that functionality may live, making it harder to find code that needs editing. And chances are good that he's completely undermined every single advantage of fat model/skinny controller. So it gets a bad name as if there's no validity to the sentiment. I encourage you to keep your cynicism. There are a lot of things in this world that are overhyped, outright. But I also encourage you to try and really understand something before you do so. I personally find test-first development to be brain-dead. But before I said that out loud, I did an entire four-person project using it, wrote a paper, and presented it at my job. Fat model/Skinny controller isn't a panacea. Nothing is. But it has some large redeeming qualities that usually outweigh the negatives.
I dig it. You want to look at behaviors then. You can easily tie into the save events to check what changed and update other models accordingly, and the behaviors allow you to keep things organized. Check out the audit trail wiki example or extension to see how behaviors look and how to use them - of course, audit trail ties into events to log changes, you would tie into events to conditionally update other things, but in both cases you conditionally update other parts of the database based on what data changed in your main model.
I agree with you. I think my comment was too short to say exactly what I mean. When I say "it doesn't really matter" I mean "your program will function the exact same as it is mostly just a structural issue", but obviously it makes no sense to have some code in the controller and some in the model and some elsewhere; I am assuming the OP will be consistent with his choice. From reading similar questions in the past (controller or model?) I get the feeling many novice programmers think there is some deep technical reason to choosing the model over the controller.
If the action handles data for multiple models then use CForm for complex error validation before passing to the models, if it uses a single model then use the models rules for validation.
No real motivation. Just wondering if this could be done. I think that if you use TDD all your tests "should" give you a log of the files used. I understand that is not that important, and usually scripts doesn't use that much disk space, it was just an idead that came to me.
That isn't necessary. You don't need javascript at all to accomplish what you are trying to do. Say I'm looking for "John Doe" from your database. I personally would put everything into one file, but I'll show you how to do it both ways. **2 File Method** * lookup.php (contains form) * submit.php (processes form) You go to http://website.com/lookup.php?name=John+Doe **lookup.php** &lt;?php IF (isset($_GET['name'])): require 'submit.php'; ELSE: ?&gt; &lt;!-- I'm ignoring all the other HTML tags like &lt;html&gt;, &lt;head&gt;, &lt;body&gt; etc --&gt; &lt;form action="submit.php" method="get"&gt; &lt;input type="text" name="name" /&gt; &lt;/form&gt; &lt;!-- Close all of your html tags here --&gt; &lt;?php ENDIF; ?&gt;` **submit.php** &lt;?php $name = (isset($_GET['name']) ? $_GET['name'] : false); // Process the name here echo ($name ? $name : "The name you entered wasn't valid."); ?&gt; Now if you want to do it all in one file, you take almost the same code: **lookup.php** &lt;?php IF (isset($_GET['name'])): $name = (isset($_GET['name']) ? $_GET['name'] : ''); // Process the name here ENDIF; ?&gt; &lt;!-- I'm ignoring all the other HTML tags like &lt;html&gt;, &lt;head&gt;, &lt;body&gt; etc --&gt; &lt;form action="lookup.php" method="get"&gt; &lt;input type="text" name="name" value="&lt;?php echo $name; ?&gt;" /&gt; &lt;/form&gt; &lt;!-- Query results can go here in a table or as a list --&gt; &lt;!-- Close all of your html tags here --&gt;`
Exactly right - In fact, my afterSave() is no good either since it would store a new 'Company' after every save &amp; update. I was just trying to illustrate the methods themselves - but, I really should be more considerate to use 'actual' or at least 'logical' code in these examples. Thanks!
Multiple cursors. 'nuff said.
https://tutsplus.com/course/improve-workflow-in-sublime-text-2/
Check out r/sublimetext for more cool stuff 
Seriously, I can't use other editors anymore because of multi-select. It's so damned handy.
Hold CTRL and click about a document. Then hold Shift + Arrow Key. Then hold Ctrl + shift + Arrow key. Then hold shift and press End or Home.
https://github.com/Kronuz/SublimeCodeIntel Helps a lot with large sites. Basically allows you to Ctrl + Click on functions and it will go to their definition (even if in another file). Also CTRL + M &lt;-- Goes to the end or beginning of brackets. 
* SideBarEnhancements * DocBlockr * Emmet * TrailingSpaces Those are my favourites anyway.
Or: * Hold CTRL and click a bunch of words. * Hit control - c to copy. * Then, hold ctrl and click the same amount of words * Control - v * ???? * Profit! Also: * Select an entire document * Hit control - shift - L * Tadaa, every line is now editable simultaneously. Handy when editing CSV etc. 
&gt; CTRL + M &lt;-- Goes to the end or beginning of brackets. Thanks for that. CodeIntel doesn't seem to work for me. Do you have to set it up at all? Edit: Sorry, didn't RTFM.
I've used this one quite extensively: https://github.com/pear/Net_IMAP and ended up putting in a PR to improve the code. Note that since the package is unmaintained in PEAR, use the code from GitHub - not pear.php.net.
Thanks, that just might work.
RE: Error output The general wisdom is to use HTTP headers to return the success or error code of the request. Example: - 200 would be a success, the body of the response is the data they would expect. - Any sort of failure would result in a non-2** error code, and then the body of the response is a block of JSON with extra content if you choose, or the body could even be empty. See http://www.addedbytes.com/articles/for-beginners/http-status-codes/ for more information on HTTP status cocdes.
I'd recommend you check out a more full-featured utility, like Puppet or Chef for managing and updating your remote machines. It is generally used for server configuration, but there is no reason that it couldn't extend to the general desktop.
 Great! You're very welcome. Sorry for the sloppy code before, please take these examples with a grain of salt. As phpnode mentioned ITT you wouldn't use that particular afterFind() function in production since you could/should easily use eager (or lazy) loading as long as your table relations are setup properly. Speaking of - are you familiar with [relations](http://www.yiiframework.com/doc/api/1.1/CActiveRecord#relations-detail) or [rules](http://www.yiiframework.com/doc/api/1.1/CModel#rules-detail) in model files? Two very useful items - In your User model - you could have the following: (in this example, your DB can have a Company without a User - so the relation might be 'BELONGS_TO') public function relations() { return array( 'CompanyName' =&gt; array(self::BELONGS_TO, 'Company', 'company_id'), ); } Now, in your User::model driven actions/views, you could use $model-&gt;CompanyName-&gt;company_name to get the related company name. For rules - when a user registers, they would need to enter a password, and password_repeat to confirm - in the user model public function rules() { return array( //other rules .. array('password, password_repeat', 'required','on'=&gt;'insert' ), array('password', 'match', 'pattern' =&gt; '/^[a-z0-9_-]{6,20}$/', 'message' =&gt; 'Password must be between 6 and 20 characters','on'=&gt;'insert' ), array('password_repeat', 'safe', 'on'=&gt;'insert'), array('password_repeat', 'compare', 'compareAttribute' =&gt; 'password', 'message' =&gt; 'Passwords do not match', 'on'=&gt;'insert'), //etc.. } * Line 1: Require the *password* and *password_repeat* fields on the user registration form - but only have this rule apply when being inserted (aka the 'on'=&gt;'insert' part). This is called a [scenario](http://www.yiiframework.com/doc/api/1.1/CModel#scenario-detail) from the [Model](http://www.yiiframework.com/doc/api/1.1/CModel) class. There are two commonly used scenarios built into Yii 'insert' and 'update' - but you can make your own too if needed. After a user registers, they can then update their profile and these rules would be ignored. * Line 2: Make sure the *password* is between 6 and 20 characters. Again using the 'insert' scenario. * Line 3: *password_repeat* must be marked as *safe* so that it can be assigned an attribute * Line 4: *password_repeat* must match *password* When the registered user is updating their password on their profile - you could use public function rules() { return array( //other rules .. array('password_new, password_new_repeat', 'safe', 'on'=&gt;'update'), array('password_new', 'match', 'pattern' =&gt; '/^[a-z0-9_-]{6,20}$/', 'message' =&gt; 'Password must be between 6 and 20 characters', 'on'=&gt;'update'), array('password_new_repeat', 'compare', 'compareAttribute' =&gt; 'password_new', 'message' =&gt; 'Passwords do not match', 'on'=&gt;'update'), *NOTE the 'on'=&gt;'update' scenario. //etc.. } Tie some fancy rules up with your forms using ajaxValidation &amp; clientValidation - and things can get pretty fun! Anyways, using callbacks (beforeSave(), etc), relations and rules are what I commonly pack my models with - I find I still have to use logic in my controllers and even my views sometimes to solve weird problems. You motivation for fattening up your models is 1.) best-practices and 2.) reusability - since any controller view in your app, module, etc ... can utilize them. Again - take these examples with a grain of salt =) 
It's neither. What we do in our projects where I work is create another directory under Yii's "protected" directory, called "services". Don't get hung up on this though. It's perfectly OK to make an app without a service layer, and keep all the business logic in the models. It's sometimes not easy to see when it's appropriate to use a service layer*, and takes careful consideration of your project, including time constraints and how future-proof you want it to be against unexpected requirements down the road. (This is the realm of architecture.) Consider the old example: A customer purchases a product. Doing it all in the domain, you could have something like: class Customer extends CActiveRecord { public function purchase(Product $product) { ... } } class Product extends CActiveRecord { ... } If you did it with a service layer, something like this: class CustomerService { public function purchaseProduct(Customer $customer, Product $product) { ... } } Which way is better? It's hard to say. What are your needs? In this case, I'd say it looks like having a service layer doesn't bring any advantage. I'd go with the first option. But what about when there's some required functionality, and it's not clear which model should be responsible for it? Let's say that every time a customer makes a purchase, you have to call another method that checks inventory levels of that product, and re-orders more from the supplier if inventory is getting low. This needs to happen _every time_ a purchase is made: class Customer extends CActiveRecord { public function purchase(Product $p) { // do the purchase-related stuff p.CheckInventory(); } } That doesn't really feel right, does it? That both of those operations -- purchasing a product, and checking inventory -- are handled by the Customer model? Also, what happens in some day when there's a new requirement, and a customer should sometimes make a purchase but you should *not* check inventory? You could try making it a bit more flexible, like: class Customer extends CActiveRecord { public function purchase(Product $p) { this.purchaseWithoutInventoryCheck($p) p.CheckInventory(); } public function purchaseWithoutInventoryCheck(Product $p) { // do the purchase stuff } } And that's a mess. (But that's sadly how a lot of classes end up. I'm sure everyone here has worked with classes like that.) What is the Customer model doing triggering an inventory check in the first place? OK, so you break those two functions up. The Customer model does the purchase. And the Product model does the inventory check: class Customer extends CActiveRecord { public function purchase(Product $p) { ... } } class Product extends CActiveRecord { public function checkInventory() { ... } } Now, whenever there's a purchase, you just call both of those steps. So in your controller you might have something like this: class ShopController extends Controller { public function actionPurchase(...} { // ... $customer-&gt;purchase($product); $product-&gt;checkInventory(); } } Great. The functionality to make purchases and check inventory is now where it belongs. But ... your *web controller* is now responsible for making sure that every time there's a purchase, there's also an inventory check! That's business logic! In the controller! Tomorrow, your boss asks you to write a Yii console command to process orders from spreadsheets. It also needs to do an inventory check every time a purchase is made. So in the console command, you put in the same logic. And that logic is now duplicated in two places. Sure, it's only two lines of logic now, it'll grow. And you'll have to remember to update it in two places, forever. All of a sudden, our "CustomerService" class from up above is looking pretty good, isn't it? If the logic were in that service class, then both the controller and the console command could use it when purchases are made.** What you _could_ do is put as much logic into the models as possible _when it makes sense_, and tie it all together in the service layer. This is probably the most future-proof way to deal with unexpected requirements in the future. This is what I'd recommend.*** Of course, it takes longer to develop something like this, and even more time to just _think about it_ before you even write a line of code. This is something a lot of developers do not see the practical value in, or are just too impatient for. Especially those who are just starting out, or have only ever worked on small projects. On the other hand, this kind of architecting is something other people will plan out in excruciatingly minute detail, hemming and hawing for an eternity without actually getting anything shipped. Finding the line is often difficult. You might end up with a product too inflexible to serve you down the road; or you might end up with a product which doesn't get off the ground soon enough to succeed. That's why there is no purely technical way to find the right balance -- time and business concerns have to be brought into the equation. I hope this has been helpful and not just boring or confusing. *It's a bit of a controversial subject. Some people put _all_ business logic in a service layer, and just leave the models pretty much devoid of everything except properties. But many people call this "anemic models" and consider it an anti-pattern. They say that it's failing to take advantage of object-oriented programming and is closer to procedural programming, in that you've basically just moved a bunch of semi-related functions into some service class. Then there are counter-arguments. Most of them probably not relevant to smaller projects, i.e., maybe you have a given set of functionality that must take place when dealing with customers. So you create a CustomerService class to hold that logic. But there's a different set of functionality for extra-special, high-ticket customers. So you create the SpecialCustomerService class. They could both implement an interface like ICustomerService and be used inter-changeably depending on which customer is using the application. But probably you don't need to worry about that for now. **In fact, the controller and the console command wouldn't even have to know about the Customer and Product models AT ALL. But this is a longer discussion that'd require getting into ViewModels. ***In addition to the aforementioned ViewModels, and Repositories, which I also have not talked about, but those two things can probably be practically omitted in most small to mid-sized web applications, as much as it pains me to admit it. 
CodeIgniter has some of the best documentation. Although it may be considered an "outdated" framework by some because it doesn't use php 5.3 features.
also: http://ansible.cc/ 
It takes a few weeks to get up to scratch with a new framework. It takes _thousands_ of man hours to make one to a similar level with enough documentation, unit-tests and functionality. Your decision is based on a false pretense. 
Absolutely, get in the 2.3/develop branch, pick a module and convert it to using Eloquent. I'd recommend you start on the Variables module as it's the easiest.
Few shortcuts that I find very useful: Ctrl + R = Display list of functions/classes in current file(searchable) Ctrl + P = find and open files that are in current project folders Ctrl + / = Comment (automatically determines the correct comment type) Ctrl + Shift + / = Multi-line comment Ctrl + M = Goto matching brace You can definately find many on-line.
The hit package is awesome
Because frameworks do things in a way you wouldn't have thought of. Sure, you could make your own framework but even if you are an experienced developer you probably won't do it in the best way. Then you see a framework with a cool feature and you have to spend several weeks changing your framework to add it. Not to mention frameworks like CodeIgniter have great documentation and can be learnt much faster than you are implying.
/r/sublimetext
Isn't Ctrl + Shift + / for Uncommenting? Ctrl+/ works fine for commenting multiple lines.
I think this might be where I am getting off the rails - i don't have custom form models for multi-model forms...I've just been bolting on more more stuff in the controller and sending it to the view...hmm...
protip: put the slash before the 'r' and it'll autolink to the subreddit /r/SublimeText 
thanks, was on my phone otherwise I would have done the full link 
You should open your console and ensure there's no errors. The first time takes a while as it indexes your project, you can see it chomping away in the bottom left. https://github.com/SublimeLinter/SublimeLinter is good too btw. 
The best advice I've heard was "every developer should make their own framework and none of them should ever be used." I think [Symfony makes a good argument for using a framework](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html). I also don't think anyone should build a framework from scratch, but rather extract it from a project that works.
Is there a video on how to instal packages for the mac?
Doesn't seem to work for me. Probably because I had to install the program to my documents folder due to restricted privileges. I'll give it a try on my PC at home. Thanks for the help.
Yeah, this is what I figured. I love phpstorm and find it excellent for my day to day usage. However, when I just need to edit one or two files quickly, sublime seems well suited to the job. I just had a niggling doubt that I was missing out on something, because whenever people ask about IDE usage on here, everyone starts raving about Sublime2 (even though it's not really an IDE). 
Ctrl + ` Holy shit I have a Python terminal so I can perform quick calculations and tests.
Agreed. I've found (and been guilty of) the same fanboyish remarks over Sublime in the past. The conversation can often go from functionality and limitations to how amazing/awesome/flexible/extensible Sublime is. This hype is part of why I stuck with it alone for the last year as I too assumed I simply wasn't using it right for larger projects. I finally came to realize that while it's hands down the best text editor I've used (bring on the vi/emacs trolls!) it's definitely NOT a replacement for a full IDE....and that's not a bad thing....really! 
If you have a middle mouse button, click and drag :-) 
Don't shoot me, I'm a novice in this. When should I use this? It seems interesting
If you haven't used an MVC framework before, well you probably should be for some projects and Laravel is an awesome one. If you have used such a framework, well Laravel is awesome and is worth checking out. So yes, Laravel is worth checking out - but you might want to wait until this version has been tested by a few more people and has some more stable documentation if you're a novice. It does also come with quite a bit to learn for a novice, such as MVC and Composer.
Ctrl + / gives you single line comments like so &lt;?php // echo 'test'; // echo 'test2'; ?&gt; Ctrl + Shift + / gives you multi-line comments &lt;?php /* echo 'test'; echo 'test2'; */ ?&gt;
I'm not touching that one.
I learned something today, will defo check it out, cheers mate :)
Annnd he's gone. Leaving behind only the lingering stench of not knowing wtf he's on about.
Using [Ratchet](http://socketo.me/) works very nicely for WebSockets in PHP.
Actually, I was planning on using Ratchet for it, since it also seems to play nicely with Symfony 2. I'm not really sure how comparable it is to node.js however. It might be that it's more interesting to run a node.js daemon rather than a Ratchet daemon...
Do what you want. They both work and perform fine.
Alright, that certainly is pretty clear. Since you seem to be quite experienced with it, how do you tend to run the daemon? As a background process on your server or in Screen?
How do you run Websockets with PHP? PHP is not a good language to write production quality server daemons.
Using the Screen method has always worked great for me, the reason why I ask however, is that it in a way looks a bit...amateuristic to me...
I thought before that one absolutely needed node.js to work with websockets. Thanks for opening my eyes to Ratchet!
I love how you just definitively say things are better "because it is build [sic] on Node.js". So naive yet so commonplace today.
I certainly wouldn't be using PHP's time() unless you used that on insert into the database. If you have different servers which could be out time-wise this would be fail. SELECT `column` FROM `table` WHERE `time` &gt; NOW() - INTERVAL 1 HOUR ORDER BY `likes` DESC LIMIT 100;
Wish I had cash to give you Reddit Gold ! Thanks man!
It's a decent point but really what it comes down to is this: If everyone uses the same structure, we all benefit by knowing exactly where a class file is. Adding an exception like this to the PSR is just mucking up the clarity it is meaning to provide.
Ah yes. Maybe it would be safer to always use gmtime. Or I will read [this](http://www.sqlite.org/lang_datefunc.html) next time I need to deal with times in database.
pfft. That's every project in the Java world. Difference being how the IDE works with the directories is different. So, in the repo it looks insane but in the IDE it's an obvious structure. **EDIT: EXAMPLE** https://github.com/haydenk/tdd/blob/master/src/main/java/com/github/haydenk/tdd/Money.java
Well. Ratchet might be a solution when it is configured to use libev.
Didn't know about that one and I've been using it for ages! That's amazing!
As someone who's done some of both I'd say Ratchet will be much easier for you unless you're already experienced with node or at least very good with Javascript. Getting started in node can take a while. I love it though.
CMD+T lets you jump from file to file, but you can use other characters to drill down even more specifically. For instance, if I hit CMD+T and the textbox pops up, I can type **class.Foo@bar** and it will jump to the function bar() in the class.Foo.php file. Or you can type **class.Foo#$var** and it will jump to the first instance of the word **$var** in that file. Or you can type **class.Foo:530** and it will jump to line 530 of that file. And so on. That one bit of functionality has saved me hours of work. 
supervisord is a great solution to running lots of php process that should never exit.
~~I'm not sure why you were downvoted~~. This is week-old news. edit: At the time, he was at the bottom with 0pts
Is there an actual release page or official announcement for this?
I haven't touched any frameworks in a little while, but my old favorite was cakePhp 2.x, how does this shape up against cakephp? Should I make the switch, or am I better off where I am? Thanks. 
Sublime Text 2 wasn't the first to do it. Word was doing it before it was cool :-P
I usually just bridge socket.io/Node.js to PHP with an HTTP API on the PHP side. It generally works well.
Make the switch. Don't take this the wrong way, but almost all modern frameworks are better than cakephp
I'm pretty sure I meant git when I typed that earlier
That's why I mentioned it.
Make sure you have libevent installed as well as the PHP wrapper for it, it performs better than stream_select. See this thread to see how to tell if it's installed: https://groups.google.com/forum/#!msg/ratchet-php/c_C7kzJF38E/p54yubNg1XIJ
Ratchet uses React
How does this stack work? Websockets terminated at Node.js long polling PHP API or execing PHP processes? I'm also interested to run the code inside eventloop with PHP but I cannot figure out how does it work. Starting new processes inside Node.js or long polling adds delay and makes it difficult to push data from server realtime. So much in PHP is designed around shared nothing and run and forget thinking that it makes it not so good language to implement production quality and well performing websockets. It just doesn't feel correct considering that there are better languages to do that.
You can relay messages from the websocket connection in Node.js to the main application (e.g. Apache running PHP) using an HTTP request per each message. You'll get decent bandwidth with this approach if you use keep-alive. You can run this type of relay over localhost, a secure private network, or even the public Internet if you do it correctly.
What about data from server (aka PHP pushing data to websockets)? Does it also work the other way around? I'm not sure how you would do that without having a long running PHP code?
This blog post describes the new Cloudinary's add-on for cloudControl, a popular European PaaS provider. PHP developers can build and deploy their applications using cloudControl and use Cloudinary as an add-on for uploading images to the cloud, performing image transformation &amp; manipulation and delivering optimized images through a fast CDN. Disclaimer: I'm one of the co-founders of Cloudinary. 
I have published data from PHP to Node.js using Redis' pub/sub feature. I prefer not to use long running PHP processes if it can be helped.
So basically you have this kind of configuration? 1. Websockets client connects to Node.js and Node.js subscribes to Redis queue. 2. If client sends data that data is then relayed to PHP via HTTP-request to PHP API. 3. PHP code then publishes that data to Redis queue. 4. Node.js writes Redis subscribed data to web sockets clients. So you have thin message passing layer in Node.js, and data manipulations and publishing to Redis queu is handled by PHP? Am I correct?
Okay, I'll look into it :) Can you give any examples though? Speed, codebase, etc.
Run this until you can do it flawless. The matching brace stuff is brilliant. https://www.shortcutfoo.com/app/tutorial/sublimetext Also, Run a search, find all, voila, now you have multiple cursors. I cannot begin to explain how powerful it is. You can run a regex, find a little piece of data, transform a CSV into XSL in under 20 seconds, change html tags and their contents, the possibilities are endless. Multiple cursors with multiple clipboards is litterally the best thing since sliced bread.
Well, the thing is that I HAVE done a project in node.js before, I'd prefer to keep my entire project in 1 language on the server side, however, and Ratchet seems to tie in really nicely with Symfony 2 :)
SublimeText 2 is a pretty, and fast but I'm too spoiled by PHPStorm. When I first tried out PHPStorm I was turned off by some of the little mechanics I didn't prefer and its ugliness. Fortunately, its extremely customizable- I've got it set up to work just the way I want it to and I even changed the font/color scheme to make it look like SublimeText 2. The code hinting and error checking is simply invaluable. Everything else is just icing on the cake, and I'm continually impressed just how much icing there is. PHPStorm doesn't have multi-select, but it does have column-select, which I find even more useful. I try not to be a fanboy and needlessly bias myself- I simply haven't found a better IDE for PHP. 
Good answer, thanks for that. I'd say I'm still very happy with phpstorm, but I'll keep sublime text 2 for smaller things. Gonna check out the sublime 2 colour scheme though :-)
If you' business logic still works in a php command line application without changing the code , then you are doing things right. Controllers should only be about the request / response stuffs , getting query string , validating a form , etc ... the rest should be handled at the service level( database stuffs ) and your service and you controllers must communicate through simple entity classes.
There is also another solution, drop Eclipse. Use a 'lightweight' editor instead, Sublime Text, TextMate, vim, emacs.
In general when Eclipse become slow and unresponsive (in the newer versions), you might try deleting your workbench.xmi This has a few unfortunate results, not all of which I currently know, but at least include losing your window configuration - however it speeds things up for reasons of which I am unsure.
https://github.com/szjani/lf4php-monolog Why would you need another abstraction level? Monolog is already a good tool with a single interface for all kinds of formatters/handlers/processors. pS. Go ahead, throw some rotten tomatoes at me)) 'cause I'll say that Monolog is also PSR-3 (=
Have you thought of us in Aptana? Its built on eclipse. I currently use aptana studio 3 for my web dev.
This seems to entirely ignore the efforts of PSR-3. Could you explain why?
I'd recommend to switch over to Netbeans. The DE is virtually identical but supports many languages natively. I switched over a year ago after many frustrations with PDT.
My suggestion would also be to drop Eclipse. On small PHP projects I found it to be fine, but on anything that contains more than 100-200 files, it slows down greatly. On a large project with 2000+ files, it is unusable. Netbeans is better. Personally I use PhpStorm which is better still.
You can't really compare fully featured IDE with text editors....
Don't use javascript autocomplete support... problem solved.
You want to redirect all traffic* to your index.php file: # Turn on URL rewriting RewriteEngine On # Allow any files or directories that exist to be displayed directly RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d # Rewrite all other URLs to index.php/URL RewriteRule .* index.php/$0 [PT] what the !-f and !-d flags are saying is that any file or directory that actually exists in the server will not be redirected.
Shouldn't that mean that while typing in a phpdoc section or inside a comment block, typing text should go smoothly?
I use Eclipse with PDT installed the same way as OP described every day and I have no problems working on large projects with easily over 1k .php files. I'm quite confident that it will deal with even larger projects without any troubles. I would have to agree with you that PhpStorm is better. But I would choose Eclipse over NetBeans every time. 
I had that issue a long time ago... there may have been something else I did to fix the issue but I never have it any more. I do remember that one of the changes I made was to disable JavaScript auto-complete support. Just trying to help.
What's your PC like? What's your CPU/RAM/HDD usage when this happens?
I have started to work on it before PSR-3 got published. However I don't like some of PSR-3 things like parametrized messages, or 'exception' keyword so I want to stay with the slf4j-style interface. It does not conflict with PSR-3: if there is a binder for your chosen framework, you can use PSR-3 based and lf4php based libraries in one project as well. I'm also planning to write a PSR-3 binder to be able to use any "standard" logging framework if there is not a nativ one.
Monolog does not know everything. It does not put the caller class name into the log message and it does not know log hierarchy. I also want to obtain log objects in static way: I'm a big fan of DIC, but I think logging is an exception, injecting decreases the performance and needs much more complicated configuration.
Don't hop on the framework performance bandwagon. It's a dead end... Just think of this? When do you need speed? For 100, 200, 1000, 10.000 requests? If you have that many requests don't you have the budget to optimize performance? (server, code base, etc.) Just check out the framework's documentation to get a feel on how it's structured. On the topic of OOP and/or MVC there are a couple of good books and tutorials, just Google it.
Where do i disable it? I searched for "autocomplete" in window-&gt;preferences, but didnt find it, and "javascript" had too much hits.
Love Aptana. I hated the default light on dark color scheme at first, but I actually love it now..
Yes.
Excellent. Loggers don't need to 100% change their whole API just to work with PSR-3, as long as they have an alternative interface or adapter so they can work with any PSR-3 compliant system we're onto a winner. The whole point of PSR-3 is so you don't need to manually try to support every logging system ever, but still work with a wide range of systems.
I found all versions of Eclipse to be too heavy, and the benefits it provides don't compensate for the performance issues. That said I've moved to PhpStorm and haven't looked back. Best IDE ever.
Zend the framework is free. You can download it here: http://framework.zend.com/downloads/latest. According the license (http://framework.zend.com/license/) you can pretty much do what you want with it. What's not free is basically anything listed here: http://www.zend.com/. (Zend Server, Zend Studio, etc.) If you are just getting started you won't need any of the paid products. In reality if you are new to web programming you should not even be looking at frameworks imo, you should start with the basics, build something and once you understand the language, syntax, and web development quirks you can work your way towards using an MVC framework.
It's not that better tools make one lazy, but one becomes so dependent on the functionality of the better tools that they no longer are an efficient/skilled/[insert positive adjective] coder. Or at least I think that's what he's saying. Personally, I think it's bs for programmers who know their programming languages well. My ex would complain that I use autocomplete and templates and whatnot, but honestly I can code an entire website from scratch and troubleshoot with Notepad, it just speeds up things with added functionality.
100 files O.o even at 10-20 files my Eclipse is super lagged =/
Indeed - it takes a bit to get used to coming from light editors, but its a godsend for its Git/SFTP integration amongst other things. 
You should register on their website and download the free Zend framework. You'll soon be getting phone calls from them trying to sell you the expensive tools and training. That's how they make money.
When you create or import a project uncheck "Javascript Support" or whatever it says.
@jtreminio I'm already using .htaccess as shown in the article I linked to. URL's follow the scheme of: localhost/controller/method/param1/param2/... The problem is with the default IndexController; I want to avoid URL's like: localhost/index/whatever, but any other controller is fine.
I hate for this to be yet another "switch over to..." but I had the same problem, and wound up moving to Zend Studio, which is built on Eclipse. Haven't had any problems since. That being said, if you don't want to shell out the dough, try Aptana. 
Ok... so you can also right click on the project and go to properties... click on "Builders" and uncheck "Javascript Validator"
I understand the goal of PSR-3 but I do not accept the final solution. slf4j is the most widely used logging facade in Java so its interface and usage is already proven. My needs are not satisfied by PSR-3. I created an issue regarding my main problem (https://github.com/php-fig/log/issues/7) but it is still open and ignored. I hope there will be a newer version of PSR-3 with extended features.
It's a perfectly respectable business model. I just wasn't ready for telemarketing phone calls coming from Zend Corp just because I needed to install their framework on a new server. 
Blame humanity instead of adapting to our environments too easily?
Responded. Again, I don't think the logger interface should be handling factory logic, it would instead be handled by the application, IoC container, a wrapper class or something else. You build it how you want it *once* then its used identically throughout the rest of your application.
Yeaaaaah ... that's not going to happen.
Zend framework is not a good place to end either.
&gt;why won't it happen? Because this has been brought up time and time again and has been met with massive resistance by the devs and the people of PHP-Internals. The reason they give is that the cost of breaking backwards compatibility is too high and would leave the majority of the web broken.
You could try also at /r/forhire
Hah, yea, I would personally agree with that statement.
I don't think you'll find a programmer with a good knowledge of professional sports, but good luck to you.
TIL coherent naming schemes are purely cosmetic.
Nothing would break if you create aliases of the original functions pointing to the new functions. Once the transition to these new functions is complete (which would take a long time I know), the aliases can be removed.
I would recommend starting with a micro-framework like Silex or Slim. These use modern PHP (5.4+ I think) but aren't too large/complex to get your head around.
Yeah, they won't roll with that. It's been brought up tons of times in PHP-Internals. Go ahead and take a peek, and you'll see what I mean.
Such as what? Payment and shipping methods?
I really enjoyed reading [this one](http://forum.opencart.com/viewtopic.php?p=72582#p72642) of his rants. It's priceless. 
Although it is a mess, do people really use editors without even basic language function completion that makes remembering which are underscored pretty much moot?
This has been brought up a ton, and it would really dissipate a bit of the hate for PHP, but it just never seems to happen. I started out scripting in mIRC which has it's own scripting language. Over new updates function names changed. What was nice is that the old names still worked, but the documentation reflected the new names. They could keep the functionality of the old function names all throughout 5.X, then kill them off in 6 at which point people who wanted to switch could update their projects or introduce their own compatibility functions. However, as noted, this always gets shot down. It might take a huge fork to actually fix.
Every PHP IDE I've used except for Eclipse essentially responds instantly.
Here in Seattle, there's a Sports Hack Day for the Superbowl http://sportshackday.com/ Maybe the OP can wait for the Sports Hack Day event and then pick his/her potential candidates. :)
I dunno, all I think of is this guy stumbling onto the mysql_* functions, which in my opinion (now) should never be used directly, at least not by someone who's just getting started. Just speaking from my own experience, I wish I'd been introduced to a framework from day 1. The amount of shitty code I produced before being introduced to my first framework still makes me shudder to this day. Maybe not Zend though... CodeIgniter is a great one to start with, and also Laravel is super-popular right now. But I do understand where you're coming from: you can't just dive into writing callbacks for your Laravel routes without understanding the basics. I'd say straddle the middle: pick a framework, work within it, learn it, etc. At the same time, dig into some tutorials on standalone PHP apps, and get a feel of working with PHP a little closer to the metal. That's just my two cents though, it's different for everybody. If I had but one recommendation for OP, it'd be this: XDebug. It's probably the single-most valuable tool in my coding-arsenal.
I agree, CI does a great job of allowing you to just program, without having a lot of stuff in the way. Definitely a great place to start, and there's tons of tutorials out there.
and if the new alias collides with an existing user-defined function?
yes :/ edit: turns out notepad++ has code completion and I just didn't know it. *facepalm*
Why? Programmers can't like sports? Why do I spend football season scouring my cable for Wolverine or Mountaineer games?
But there's a price. There's always a price.
I've never coded PHP inside a SDE before - like eclipse for Java. Always been Notepad++.
Does anyone know if it's safe to delete the .git folders inside the libraries that composer downloads, or does it need those to continue functioning? Because just the one that comes with swiftmailer is 6MB. Actually can I just delete swiftmailer and not use it? I was surprised it got 10x bigger since the last version but most of the size is seemingly stuff that's not part of the actual framework.
the irony is that the community requests the change and the counter-argument is that "the community" won't like it.
The sub he linked to is the best sub to get some work, they handle hiring and for hire posts.
I learned everything I know about sports from [this video](http://www.youtube.com/watch?v=CEVdca9U9LM)... 
it would only leave the majority of the web broken for those who upgraded their PHP installs knowing the risks, or updated their PHP install without testing or doing research other than "hey there's a new version out". They've already phased out some stuff and left old aliases
have you tried using java 8? I didn't install java 8 to fix an IDE speed problem but I noticed netbeans runs a lot better than it used to, still uses a lot of memory, but it's a big difference from when I first tried version 7.
PHP should do like Python did for their v3: Fork it and fix it. Realistically though this won't happen. There are so many little things like inconsistent namespaces that plague PHP ("Was that needle *then* haystack? or the other way around?"). The problem is that it works great as is. The old adage "If it ain't broke don't fix it" applies here (depending on how loose your term of "broke" is... heh).
any sports in particular? here in the UK, we consider soccer to be the prima pro sport...
Not so fast. Football (soccer) fan and C#/PHP coder here. Currently watching Swansea cruise to a league cup final against Bradford (mostly thanks to aggregate goals) while idly fiddling with code using Resharper on another monitor. But enough about me - you get the point. Many interests can overlap to create neat combinations. It'd be interesting to see the number of users who subscribe to both /r/soccer (or another sports sub) and /r/programming (or /r/PHP, etc.) Could be a fun task for the guy running /r/AnalyzingReddit.
Except people tend to re-use passwords, so now the hackers that stole your database might have the passwords your users use for other sites. And they aren't going to care that it's their fault for re-using passwords, they'll blame you. That's why you use something like bcrypt, not to stop people from getting into accounts on your site, but to protect your users if your database gets stolen.
They already are. With C. Changing a bunch of stuff will make PHP inconsistent with its past, and break a bunch of existing code. This is not a good use of Reddit's time.
Except all those libraries already offering those stubs? This has been done to death on PHP-Internals. At least catch up with all the existing reasons to say no before insisting they aren't there because nobody's explained them to you yet.
What's that? One percent of us want something the other 99% of us don't? Yeah, [that's what irony means](http://rhetoric.byu.edu/figures/i/irony.htm).
If you don't have much professional experience you could try [PHPixie](http://phpixie.com). It's really simple to use, has powerful features for working with database, in fact you won't have to write any SQL at all, and there is even a [30 minute tutorial](http://phpixie.com/tutorials/learn-phpixie-in-30-minutes/)
I haven't used Eclipse or Eclipse-based programs since high school (about 6-8 years ago) but thanks for the tip! Hopefully it'll help someone. :) Seriously though, since then, whenever I load up Eclipse, even just having it open while having no files open just bogs down my machine. =/ Although I do only have 4GB of RAM.
I've had my own adventures trying to figure out the differences between _SERVER, _ENV and getenv. I came to a slightly different conclusion than this program implements however - I decided not to touch the values in any of them, and just wrote a handler for all 3 that I simply call `env()`, which checks _SERVER and if no key exists, returns the return value of `getenv()`. I couldn't find a case where `getenv()` failed to return something that was also in `$_ENV`. In fact, `$_SERVER` never seemed to be missing anything from `$_ENV` either. Now I do have 2 suggestions for this program: 1. Don't overwrite values by default, or provide an `$override` option so it can be disabled. 2. Allow comment lines in the ini file - if the line starts with `#` (or in .ini format, `;`), skip it. You might actually just want to use ini file format and `parse_ini_file()`. I think that way you could use a section label and have for example a `[development]` and `[production]` section, and with some modification, load only the section(s) desired.
I use a very basic syntax highlighter myself, I hate huge clunky IDEs that try to do everything for me (usually very poorly).
Uhh, there are a lot of stats nerds that love games. Stats nerds overlap with programmers pretty well these days. Same goes for people interested in game theory.
Is it just me or does this article actually say very little? The stuff it links to is interesting but this link seems to be a pretty basic summary that doesn't really offer any new insight into the situation. 
Maybe you should actually check the link, before deciding that you're correct. It goes to one of the best philosophy departments on Earth. Or you know, you could just watch cartoons, because Futurama can explain this to you, too. "The Robot Devil's Hands are Idle Playthings." Admittedly, the numbers I made up are made up. They were intended to be taken figuratively. Put simply, irony is what most people think is called sarcasm.
I'd love to see this implemented. But I do agree that this change will only bring more harm. You don't always want to change something in your own project, be it small or big. Why would you want to change something in one of the most popular languages in the world? It's like changing some words in english (place here any other natural language). No one can/will do that.
I'm comfortable with SQL if necessary, but I'll check it out. Thanks!
From their website: "gathering hackers, data crunchers and sports fans from across the Pacific northwest to converge on Seattle where we will hack on sports themed projects" and There will be 2 main categories: Apps: build an awesome application (web, mobile, tablet, etc) Data: create a visualization, infographic or other insight 
&gt;I do not want to go back through ten years of legacy code Who does? In the case of my completely-never-going-to-happen example you'd just keep your legacy code running on 5.x &gt;clear, well explained reasoning Being clear and well reasoned doesn't automatically make it correct. Not saying it is or isn't -- just that gentleman can differ. &gt;who barely writes code at all that makes this mistake. ... cause massive damage to no practical benefit ... to support a fringe group of whiners in their bikeshedding You're being callous and it's not helpful for any discussion. None of that is a good reason to make any code decision.
It costs your free time, which could be measured monetarily. Costs go up with how much on the fly learning you're doing, and how good you are at design.
given that both people "against" and "in favor" are referred to as "the community" (or "the users" or whatever) I would definitely say that "Speaking in such a way as to imply the contrary of what one says" applies. nonetheless, it's a silly discussion :)
by the way, any particular reason you'd like to prevent the improvement of the language? as long as major/minor versions and backwards compatibility are respected this shouldn't be a problem, most projects have a deprecation policy and nobody complains like PHP people do.
There was an awesome /r/php comment that spoke about how one grows as a php dev. I can't find it but basically summed it up like this, in order of skill: 1. create your own framework, terribly procedural with tons of includes, poorly organized, and inline html/php everywhere 2. refactored framework into common functions with better exclusion of common functionality 3. Minor OO to help organize things better, prevent some code duplication 4. Realization you can't monkey patch your old shitty code, maybe a full rewrite with much better organization 5. More clean up because shit is only so-so 6. Realization that someone else has already done a lot of the work you are doing - switch to a framework I know I'm quoting it wrong but for me this was exactly true and I don't think I could have come at it from a better angle. Maybe it's bad to use mysql_ but by the time you have something valid to ship (let's hope) you are aware of the shortcomings of mysql_* and you switch to PDO / ORM or a framework. 
Yes, your understanding is correct. That being said, there's more than one way to skin a cat. My strategy is only the result of my personal intuition and experience.
Please don't waste my time by suggesting that if I don't agree with your preferences because I see what damage they would cause, I'm trying to prevent improvement of the language.
&gt; given that both people "against" and "in favor" are referred to as "the community" I'm not really interested in arguing with your guesswork. The actual community has been polled. The actual support rate was less than one percent. Yes, there are straggling strugglers who ignore why people say "no," and insist that their less uniform thing will be more uniform, and every single time you explain why it's a bad idea, they'll just ignore you. I am not accusing you of being one of them; I am merely bracketting those folks as the cause of the perception that anyone anywhere actually wants this, or that it is in any way a good idea. I mean, this is the discussion that every programmer with more than a few years under their belt ends up having. "Let's change the names of a bunch of primitives that have been in there ten years, because" No. "But you didn't let me tell you why!" Exactly. . &gt; I would definitely say that "Speaking in such a way as to imply the contrary of what one says" applies. That's nice. What it actually defines irony as is "communicating through the difference," not "thinking that arguing with someone means they secretly agree with you and their secret agreement stands in contrast to what they actually said." I actually meant what I said. Therefore, not irony. 
Indeed, I remember the comment you speak of, and this was pretty much my path. I definitely wish someone had introduced me to a framework much earlier on.
question, does phpstorm allow linking a folder? In PHP i can link to a folder that sits in my /opt/project without having to move files to my workspace. If it can i may buy it.
&gt; &gt; I do not want to go back through ten years of legacy code &gt; Who does? Everyone calling for surgery to method names that have remained stable since the early 1990s, except the people with so little experience that they think you can just set up a synonym and expect no fallout. . &gt; In the case of my completely-never-going-to-happen example you'd just keep your legacy code running on 5.x No programmer keeps their code running on legacy PHP, for security reasons. Of *course* I'm not going to trap myself into a choice between updating all my code or maintaining separate servers for new and old code, just so that some novices who think that changing a language to be different than itself and the dominant bulk of other languages somehow constitutes consistency. . &gt; Being clear and well reasoned doesn't automatically make it correct. That's nice. If you ever find an error, great. Then, ***and only then***, will you have a valid rebuttal. For now, you're speculating, and speculation is not interesting. By the way, no, the vast bulk of the community is *not* wrong just because you imagine they might be, about something you've never bothered to look up. Go read PHP-Internals, please. What I actually said was "they won't even address it." And neither will you, other than to pretend there are errors. . &gt; just that gentleman can differ. Gentlemen can only differ in the specific; to "differ" in the hypothetical is neither the act of a gentleman or an intellectually honest man. . &gt; You're being callous Oh look, insults. . &gt; None of that is a good reason to make any code decision. No, but the things on PHP-Internals that you're speculating might be wrong, without ever having read them, are. Have fun arguing from a lack of information. I find myself losing interest rapidly, because I'm not speculating, and having someone speculate at you just isn't as useful or intelligent as the speculator seems usually to think that it is. By the by, it's best not to suggest you're being a gentleman while calling people callous. Even when correct, a gentleman wouldn't do that. Not, you know, that I'd expect you to realize that there's actually a list of rules for that word, or anything. Clearly it's just a superlative to throw around to try to trick someone who's exasperated at yet another batch of novices crowing about something they didn't bother to research into feeling like by explaining why this is obviously wrong through gritted teeth, they should also be patting the novices on the back for their lack of research abilities. If someone's being callous towards you - and actually I'm being arrogant, not callous, as a callous person wouldn't bother to respond or to explain to you why the thing you're calling for has never gotten a single yes vote from any member of the PHP Internals team - then there's usually a reason why. Consider repairing the source, rather than complaining at the result.
for those on linux, ive been using kdevelop which does php pretty well. Else i use eclipse and it gets slow occasionally, each version i swear makes it worst.
You might have better luck in /r/forhire
It will happen. When PHP starts losing market share to other languages and the devs decide they need to make this change in order to make PHP look more attractive. But, sadly, by then it'll be too late. Start now and pre-empt the inevitable. 
This has nothing to do with PHP. Plus, hire a worker in your local economy. Help out your community instead of paying slave labor in India.
If I understand you correctly then yes, it does. PHPStorm will open any directory and you don't have to strick to a specific workspace. I'm a fairly recent convert from PHP Designer and haven't looked back. It's the fastest and most fully featured PHP IDE I've tried and has excellent support for xdebug which is essential for me. It's so good I even bought it for £20 during their End of the World sale last year.
You're kidding right?
Youre not including the cost of smashed keyboards.
When? It's not happened for the last 10 years and I've not seen any statistics to show that it is happening now. PHP still runs almost 80% of the top million websites in the world.
That's not how bug reports work. The community can support something as much as humanly possible, but the voting members still get to pick yes or no. Smaller requests than this have been ignored in the past because it would "require maintenance" so why do you think you're the person to make this happen?
Buy an [IBM model 90 keyboard](http://en.wikipedia.org/wiki/Model_M_keyboard). After the nuclear holocaust, the only things that will survive are cockroaches, canned spam, and those keyboards.
I really don't think you should be posting people's resumes here. Posting people's personal information might be against the reddit ToS.
I think with the current development of Node.JS it could go quite fast. PHP is great for generating webpages, but Node.JS is superior for advanced web applications. 
That's worked so well for Python too - if you're building anything that remotely relies on libraries, chances are you're going to use 2.7 because the cost/benefit of porting to 3.x hasn't been worth it. There are far huger problems in PHP, like vague typecasting and silent errors.
Do they make those with USB connectors? That plus some soundproofing for my study and I'd be a very happy little coder.
Requiring 5.4 in early 2013 seriously limits your deployment options.
there are adapters you can get at ~~radioshack~~ ~~bestbuy~~ newegg.com for cheap.
Yeeahh! Kill all the applications!
*When* will probably be when the WWW looks and operates differently to anything any of use could imagine today. Perhaps people will program in ideas and concepts, and the WWW will understand what we mean without any coding.
* Figure 2.12: Why I don't post in r/PHP (Don't mind this comment, using it in a slide deck)
perhaps... 
Similarly, which comes first? $needle or $haystack.
try [here](http://pckeyboard.com/). They're the ones who currently hold the license to make them. Seems they do make a quiet touch variant (denoted by QT in the model number) and that they do make USB keyboards now too.
Not a wise idea for backwards compatibility reasons (as mentioned). Personally, I'm waiting for something like [autoboxing](https://wiki.php.net/rfc:autoboxing) to be implemented. Autoboxing converts types to objects - objects you can create in userland. For example: class IntObject { public function pow($exp) { return pow($this-&gt;val, $exp); } } $number = 4; echo $number-&gt;pow(3); // 64 (4*4*4) and class StringObject { public function replace($find, $replacement) { return str_replace($this-&gt;val, $find, $replacement); } } // and if autoboxing follows Python's implementation: echo "Hello World"-&gt;replace("World", "Reddit"); // "Hello Reddit"
This was pretty much my path as well. I started my career writing spaghetti code before discovering frameworks.
I second the comments about switching off Eclipse. If you're willing to spend money, PhpStorm is a fantastic product. But for a free version Netbeans works too.
Yeah, that was pretty much the experience I had with one of the previous jobs, except the decision-makers insisted on the cheapest bid. I saw it coming a mile away and wasn't surprised at all with the outcome.
When I see someone complaining about something like this it makes me think that they're just grabbing the lowest hanging fruit possible in order to have something to say.
Perl 6? Oh yeah, let's just wait 13 years...
The idea is interesting, i should take a closer look when i got some time and mood for it. Here is something i already noticed: You - or better "he" - breaks the psr-0 rule (1 file, 1 class) which can get you some headaches if you use a psr-0 autoloader. Especially if you're developing libraries. Also it reduces reusability and provide a high chance of reintroducing a similar exception in another file. Which is redundant. Which is bad. Another drawback: If you extend your exception class with some helper methods (dont know if there is a realworld use-case for this) - you have to implement this in every class which use this exception. Which is confusing the public interface of that class. Which is obv. both very bad and unmaintainable.
1. Are you running on openjdk? You have to use something Sun-based, not GCJ. 2. Have you adjusted the memory settings in eclipse.ini? 3. Is a DLTK build in progress? 4. Have you disabled validators you don't need? Between those four things, 99% of the PDT problems I've seen go away.
Classy. Really. "Because I'm not able to positively interact with someone who disagrees with me, and after I've started the accusations and insults, I blame them for their response." Don't worry: for all your not posting in /r/php, the PHP Internals team still doesn't fly on Reddit Downvotes or "my opinion trumps everyone else's real world needs."
Another vote for phpstorm here. It's fantastic.
I plan on doing some research into implementing `$str-&gt;length()` style calls for PHP and doing a full redesign of the APIs for core types along the way.
They should do it. Just make it backward compatible for awhile.
Imo there are several silly reasons people don't use IDE's: - They think IDE's are bloated or whatever. eclipse/netbeans are for sure slow. PHPStorm uses up all 8 of my cores nicely when its needed, and is nearly as nimble as a "text editor" when not indexing or whatnot. If this is professional work then you should have a modern system anyways. - They don't actually take the time to set them up correctly. So they lose out on proper type hinting or doc generation or whatever else.. - They consider it "cheating". if you havn't memorized every function &amp; signature you're clearly a noob. - They load up Text editors with 10+ plugins turning it into a poorly integrated custom IDE in the end anyways. Some would call them text editor ricers I guess. Remember when people used to use notepad to write html because it made them hardcore? same shit. You either know wtf youre doing or not. autocompleting a few characters when typing does nothing but save time. This isn't VB6 drag &amp; drop IDE land. edit: For PHPStorn users: Help -&gt; Productivity Guide, fantastic.
Ignorance is ignoring the facts. I'm pointing out some facts that show PHP usage has been consistently high for years, and asking for any sort of facts that might show otherwise.
NodeJS is wonderful, but it hardly has the same use-case as PHP. NodeJS for distributed applications that can go on $5 hosting and/or be installed by ANYone? Not so much. Right now you just sound like this guy: https://www.youtube.com/watch?v=bzkRVzciAZg
I'm not suggesting PHP is resting on its laurrels, im suggesting you are ignoring the big picture. 1.) Drastic language changes do more to break language popularity than anything else. The Python 2.7 and 3.x debacle proves this nicely. 2.) Making drastic changes to try and win back favour because something is not the "cool kid" anymore has obviously never been something that has interested PHP developers. It's still not cool, but it's still being used to power 80% of the websites on the internet. 3.) Nothing lasts forever, and new languages pop up all the time. If a better alternative appears and hosting companies all get together to make that language the most widely spread programming language, and enough large-scale corporate systems pop up out of nowhere to have hundreds of thousands of users using those systems and those languages, then PHP will have been replaced as the most prominent and most useful for distributed applications, making it the most used and most popular language. That is going to be a "moons aligning" situation which I don't see happening in the next few years. It requires a lot of big crazy things to happen, and not just some guys saying "oh hey look, node is cool". I'm not talking about the quality of a specific language, im talking about every single factor that goes into the web-development eco-system that has put PHP where it is. Obviously "inconsistent function names" hasn't killed it for the last 10 years, so I don't see how or why it would cause an sudden implosion, or even a demise in 2 or 3 years.
Man, I hate that one.
PHP API's are messy, but then so is everything else that has evolved over the years. HTML is messy, and Javascript is a total mess. Breaking every legacy PHP site just to tidy this up is not worth it, when then dev effort could be better spent elsewhere. Besides, if it REALLY bugs you, write your own wrapper routines with nice names. 
Is it really that easy? I'm on my phone right now but that can't be right. Mindfuckingblown .jpg
This needs to happen. Make it happen for the next major release. Keep the old function names for a while, but raise a depreciated warning and show the replacement function name: ie: "Notice: depreciated function isset() - should use is_set()"
It's not "weirdness" - continue is the same as break. http://us1.php.net/manual/en/control-structures.switch.php It's documented in a large block right at the top of the page.
&gt;Here is something i already noticed: You - or better "he" - breaks the psr-0 rule (1 file, 1 class) which can get you some headaches if you use a psr-0 autoloader. Especially if you're developing libraries. That was clearly an example, but even if it wasn't, what would stop you from separating them? The concept isn't dependent on them being in one file. &gt;Another drawback: If you extend your exception class with some helper methods (dont know if there is a realworld use-case for this) - you have to implement this in every class which use this exception. Which is confusing the public interface of that class. Which is obv. both very bad and unmaintainable. How is that different from interfaces in general? This concept has been [around for a few years](http://framework.zend.com/wiki/display/ZFDEV2/Proposal+for+Exceptions+in+ZF2?showComments=false), and I actually like it. 
1. Obviously $_POST['todelete'] isn't an array. It's probably a string. 2. You're using values from $_POST['todelete'] in a SQL query unsafely If you want $_POST['todelete'] to be an array, you have to pass the variables in from your form with names like "todelete[]"
If a language is as pure and performant as PHP, why does the API have to appeal to you? Why not a melange of C standard and Java and Javascript all wrapped up in a false impersonation of Bash scripting via Perl? Next you'll tell me that using the escape character as a namespace separator is somehow "Bad". If only you could see it like Rasmus sees it, with the crystal clarity that only madness provides, then you'd know: we all float down here.
Netbeans can be slow, as well. Some of its guts are Eclipse guts, and they're both Java, so on really sprawling projects you probably need to fiddle your startup options. 
Not always. But, there is an [official faq entry](http://us3.php.net/manual/en/faq.using.php#faq.using.parameterorder) for this.
My fantasy: * Pick a release target - Say 5.6 * Announce that function names will get standardized for that release * Standardize * Create an extension that wraps the old names to the new functions (this would work for argument signatures as well, ideally) * Release the target and the extension at the same time * Eventually deprecate away then remove the extension at some future major version rev This way, a user can easily enable or disable the extension in php.ini suited to their needs and those that want to move forward with standardized names can do so. I the long run, it's a migration to the ideal and not a sudden, prod-breaking swap. 
I'm waiting for variable types to translate more naturally into objects and classes. e.g. Date::mktime(); String::explode(); Math::round(); Which then would extend into variables of that type. e.g. $str = "foo,bar"; $arr = $str-&gt;explode(","); They started doing this already with [DateTime](http://us1.php.net/manual/en/class.datetime.php), I would love to see it expanded to the rest of the language. Today's DateTime: $date = new DateTime('2000-01-01'); $date-&gt;add(new DateInterval('P10D')); echo $date-&gt;format('Y-m-d'); I don't know the feasibility with a loosely typed language, but it would make the whole namespace so much cleaner and easier to work with.
Holy shit. Upvotes all around. 
I do agree with what you're saying, I can see the big picture but i'm looking at this from a risk management/disaster recovery POV. 1. Languages changes do cause havoc. Python is not a very good example of this. If PHP did change then I agree, shit would break and heads would fly. 2. Not about being the 'cool kid', more about being the kid that helps everyone with their homework. Currently PHP is on top because it was always that kid. Someday, inevitably another smarter kid will come along and suddenly you're trying to play catchup. That's a bad place to be. 3. agree. Here's some scenarios: - Don't change anything and PHP remain on top: Nothing changes - Don't change anything and PHP drops: Disaster recovery mode - everyone loses. - Start implementing change now and PHP remain on top: PHP/Community wins - Start implementing change now and PHP drops: PHP/Community wins I think the risk of no change and potential failure outweighs change, but that's just me. It'll take at least 3-5 years from initial talks until release for this to come into effect. Start now and we'll be good to go in 2018.
I use Python 2.7 a fair bit. I don't use Python 3 because so many libraries I want to use work with it - even though it was released in 2008. While the Python core dev team have said they were expecting a 5 year shift, they are a smaller and generally much better educated crowd (as PHP is the first language for many), meaning this is the sort of transition that is not unreasonable. Try the same thing in PHP and shit is going to hit the fan. PHP 4 to 5 was hard enough and not even that much changed. While a parser rewrite to make everything consistent, combined with primitive types and all that jazz would be wonderful, I cannot see that going well for the vast majority of the community - and its the size of the community that makes PHP what it is.
You seem to be taking the view that PHP was at some point a superior language to its alternatives? Just because it's easy, popular, well supported, well documented, etc, does not mean it has at any point been better than other languages. The fact that PHP has been more popular, while being technically a messier, less consistent language is exactly why I don't see it changing. It's always been behind technically, but drastically ahead in numbers. The kids who want the new hotness always run off to use the next language or framework that is v0.2.0 and get bored by the time it gets to v1.0. Some stick around for a bit, then its off to the "new hotness" for the rest. The rest of us keep using whichever language makes sense for the specific project we're working on. None of this needs we need a specific language to win. You don't, I don't, the core dev teams don't. Besides, [one feature](https://wiki.php.net/rfc/propertygetsetsyntax-v1.2#voting) which seemed like almost a shoe-in is in the process of being bounced because core devs felt it would be "too much maintenance". If they don't want to click merge on this, do you think they want to rename or alias every single function in the entire language? tl;dr: Yes I'd like change, no I don't see it happening, and I don't think it matters all that much if it doesn't.
you're getting a warning, not an error. when no input is sent the $_POST['todelete'] is not an array. try something like this: $todelete = $_POST['todelete']; if(!is_array($todelete)){ $todelete = array(); } ...then the foreach loop using $todelete. and again a noob warning, you have to mysqli_escape_string on all database input, or better yet use mysqli parameterized queries. all output needs to go through htmlspecialchars. 
If you want you could fork it and do it, but the reason they don't is to retain backwards compatibility. They've slowly started deprecating old stuff that may be inconsistent, though
&gt; NodeJS for distributed applications that can go on $5 hosting and/or be installed by ANYone? I'm running a nodejs web app on $5 hosting and it took all of 15 minutes to set up. People that think nodejs is complicated, that it's solely for distributed apps, or even that it's solely for the web are horribly misinformed.
Whoa.
Good timing, I'm building a url shortner with review process (whitelist,blacklist,resolve) and spliting a url next on the dev list.
You missed my point entirely. An average user (somebody who is only just about capable of installing WordPress) is going to have a tough time installing the requirements. You can use Linode or something like WebbyNode but being able to install PHP apps on bog-standard every-host is its major advantage over NodeJS in this field. That doesnt make either of them better or worse, just that I can distribute a PHP application to much more people than a NodeJS app.
That's absolutely true, wholly concede that point. For an average _programmer_ I find nodejs easier to install/use/deploy 99/100 times. But for the average "I want a blog"/"My nephew says I need a website" user, PHP is easier; it's been around longer, has more guides, has wider shared-host support, etc.
Trolls and people randomly saying "yeah do it" get an upvote, but a core contributor got downvoted. Thats says a lot. Primitive types would be an excellent move and seem to be the ideal solution to a lot of problems. Leave the functions in place for 6.0 and have the methods too, then remove the functions over time for 6.1 or whatever. Simple enough. Then legacy apps just stay on 5.x instead of moving to 6.0. It's a pipe dream and I don't know who would do it, but it certainly seems like a tidy solution. 
What do you mean? Version only counts when you are trying to upgrade a legacy project which has components that break at a higher version of php. If its a fresh project, by all means, you should be using the latest version of php, for the security and performance upgrades, if not for the new syntax sugar and OO stuff
I mean if you are using a framework that will not function with PHP &lt; 5.4, you will have more trouble finding hosting providers where you can operate your site.
He's asking about using External Libraries, and yes, PHPStorm does this quite nicely. It will even integrate with remotely hosted libraries (I've had it hook into the jquery hosted by ajax before).
&gt; Next you'll tell me that using the escape character as a namespace separator is somehow "Bad". Someone once justified this to me as, "Oh, but it's not like you're ever putting the namespace in a string?" Guess he doesn't use reflection or ORM. 
It's not even a summary, since it only mentions, that there exist people, who recommends to avoid traits. Especially with the mandatory conclusion of "omg, omg, anew feature, of course it's good", while never even attempting to address the problems. 
another horrible article from php "masters".
By that argument you should never add any new functions at all. 
Yes, that's exactly what I meant. Saves so much hassle!
&gt; Thats says a lot. That only says that people don't know their heroes :) pS. Like the idea
&gt;and again a noob warning, you have to mysqli_escape_string on all database input It's not as simple as that. mysqli_escape_string works on strings, and strings need to be wrapped in quotes. IDs and other numeric values doesn't need to be wrapped in quotes, so it doesn't work in those instances. So, either you would have to wrap the value in quotes even for numbers, or you have to cast it to an int. Or better yet, use prepared statements. 
&gt;Imagine if tomorrow they released a copy of Windows and told you "none of your old apps will work, we finally pulled the plug and did the cleanup we want" To most consumers, that aptly describes Windows RT and Windows 8 Metro apps.
It's okay. Some thoughts, mostly personal preference: * Is there a reason the class properties are not private? * I would rather pass in which page I am on, rather than an offset. * Depending on the system requirements, I might opt to instead pass in the URL in a nicer way, e.g., "/example/url/{page_number}/other/params/here". * If the $total_items is, say 2,000, then it just displays 1, 2, 3, 4, 5. Would be nicer to do something like 1, 2, 3, …, 99, 100. * Props on using i18n.
Thanks! They aren't private so that you can modify them before generating the actual links, I found that useful in the application I used this in - however, of course, it might just not have been the best design. Offset vs. page number is a matter of preference for me, I could implement a little function to set the offset using a page number. If you're using Laravel.. What I pass to the constructor is usually `URL::current()`. I think most frameworks have something equivalent. The links display a window of three pages at a time, with Last/First links if needed, and Next/Previous if available. And thanks again! Feel free to fork and modify it to your needs :D
&gt; exceptions that share multiple different groups of problems. You should exactly know what's the problem - is it 'not countable' or 'not iterable'. Not both.
Rasmus himself said it wasn't happening in the comments. Perhaps we can write a php extension which aliases all function names to something standard and distribute that?
Damn, I thought I was in /r/lolphp for a moment.
It's a good start. A little lacking for my personal preferences, but that's nothing against the code that's there. The math in the IF statements isn't immediately clear what it is checking for -- commenting your code other than for phpdoc purposes would be helpful for other devs. I might also suggest taking a look at CodeIgniter's pagination library, if you'd like ideas for the future. (CI's lib isn't the best out there, but I used it as inspiration myself, so maybe it can benefit you, too.)
&gt; The concept isn't dependent on them being in one file. Not quite true. He say's it's the advantage of "define them fast and easy". If you seperate them into own files (which is obv. the way you want) the "super-simple define"-advantage isn't that big anymore. What you want is 1 defined exception as you need to catch them out of your throwing-class. If the "thrower" and the "catcher" both define its own but same naming exception and the thrower changes the naming, the catcher can't catch it anymore. &gt;How is that different from interfaces in general? It's not different and that's the drawback of using interfaces for exceptions. As you cannot extend them with own methods which belong to them.
It's also more or less the story of Python 3.
So how long are we going to be stuck with the same inconsistent naming scheme? 5, 10 years? I understand the need for backwards compatibility but at some point things need to change.
The drawbacks you specified for using a framework usually go down to "you don't like bloated frameworks that get in your way and that you have to learn to use for some time". Try some lightweight simple frameworks then, like [PHPixie](http://phpixie.com/). It's very simple, just about 35kb in size, and it has a lot of detailed tutorials for everything. They claim you can learn in in 30 minutes.
I know it's kind of nitpicky, but one suggestion I have would be to change the namespace to the "standard" of \vendor\package, which in this case would be \Gargron\Pagination. This plays better with those who would possibly use multiple open source packages. Doing this would also allow for the possibility of composer support, to make for easy installation.
PHPStorm. Not free, but not hugely expensive either. We've all switched to Jetbrains products at work (IntelliJ for the java people, PHPStorm for the PHP and pyCharm for pythonistas) and saw a marked productivity boost. Really nice features like syntax highlighting (and checking) of XML, JavaScript, HTML and CSS within PHP strings. Ability to edit the content of those strings within a separate editor window with the changes being mirrored back. Auto generation of getters/setters, excellent debugger interface and a lot more. Our front end guy also says its amazing for CSS and JavaScript.
Utter noob question: why is aliasing function names a no-no? Is it just a question of performance?
no, they dont need to. Edit: PHP is too big to change, to big to fail.
It's almost as if there's more kinds of people in the community.
https://python3wos.appspot.com/ That wall used to be bright red all the way down. Even for those that have updated there are are going to be alternatives that work with 3.0. Example: * http://pypi.python.org/pypi/MySQL-python - Booo! no 3.0 support! * https://github.com/petehunt/PyMySQL/ - Yay! * https://launchpad.net/myconnpy - Yay! * http://sourceforge.net/projects/mypysql/ - Yay! * http://dev.mysql.com/doc/connector-python/en/connector-python.html - Yay! I don't know how well each of these libs work because I don't use Python but it only took me 3 minutes to bring up a list of alternatives. This is a very popular language, there is a huge amount of community support. You could break every single library anyone has made for PHP and all of the major use cases would be covered within a matter of months. As a bonus, you would rid yourself of a lot of the god-awful code that has been built up over the years (here's looking at you osCommerce).
Actually adding Composer support is something neat that I haven't thought about! I wish I had a better name for the project than just "Paginator" though, using my own nickname as the namespace seems kind of weird - I haven't encountered that in other libraries. Edit: Added Composer support and changed the namespace to "Gargron" - apparently that is a Packagist standard that I just haven't encountered yet.
A little TL;DR of what they do?
HOLY SHIT
That's a very interesting point. I would argue that if your data is indexed having a total count is not very taxing and having an exact number of pages on especially small sites is very good because, well, if you have thousands of items you are less likely to go forward enough pages to run out of items (and display an error message of some sort to the user) than if you have just a hundred. Also, Google does return the number of available results and more/less pagination links depending on it...
Does anyone else read this and see another hack on top of a pile of hacks? Python solves this by making classes first class objects that can be passed like any other object.
I wonder how much overhead it'd have if you had a large number of these very small wrapper methods. I also wonder if the PHP opcode compiler (or opcode caches like APC and XCache) are smart enough to [inline](http://en.wikipedia.org/wiki/Inline_function) that call...
Thank you! I added a few comments throughout the code, hopefully it's more clear now.
That's just sad =\
Well, I assume they must have improved that by now though...or should have :) I'll let you know how it worked out :)
I don't care about your time pal, it's your choice to be here.
all claims false, dismissed.
Sounds like you can't program outside of CodeIgniter, is that right?
Why whould anybody be afraid of aliasing and deprecating something that is inconsitent?! And fix it in the future?! And why that Rasmus guy is even talking in behalf of community?! For that "I've created that language FUCK OFF" attitude he should be kicked outside the project.
I'm not sure where the framework starts and ends, but I can make stand alone PHP files that work without the framework. I have turned a Website into a Wordpress theme, but that again is a framework and that time I did it pretty much piece by piece (by number and the WP Codex wiki thing). edit: Example. I just learned that I don't know the difference between an Object and an Array... I have learned from video tutorials, I haven't read to get any of the info I have because I can't visualize what I read and if I can't do that it just flies away.
Here's a somewhat simple answer: read, **thoroughly** (i.e not skimming), how to do proper OOP in PHP. Not only will this help you separate what's PHP from what's codeigniter in your code, it will also hopefully show you the difference between proper PHP 5.x OOP, as opposed to CodeIgniter's 4.x compatible practices, which by now are thoroughly outdated in modern codebases (4.x being completely EOL). http://php.net/manual/en/language.oop5.php And there are plenty of other sections in the menu that you could read as well.
Also, if you have some old-ass app that you absolutely depend on, stop upgrading PHP to bleeding edge releases.
Thank you, I'll read it now and edit this. PS: When I read technical things like this I always want to start creating a Replace script that finds words that have Code or PHP specific meaning and give them a hover over box or just alt="Explains" that tells what the word refers to. ex. objects, references and handles. Explained like I'm 5. it wouldn't be in the way for the regular reader unless they hover over.
Before PHP I only knew HTML and some more of the basics until I learn about the Include function of PHP I used that as and entry point into using PHP. (making different small files of what I needed to repeat around the website, like a banner og menu bar) Then I used CodeIgniter as a entry into learning more while also having a system around my code, kind of like I can Photoshop a photo like a MFer but if you give me a blank canvas we're lucky if I make more than stick figures. edit: I learn inefficiently because its hard to read and understand what I'm reading. I like to see things in pictures not words. This is probably why I'll remember 99% of faces I see but I will only remember 1% of names. (Usually hot women) PS: I did use a weekend to learn enough JAVA (from knowing nothing) to making my own Android App. via video tutorials. I can't remember it all but I still know much more than before.
Have you thought about taking classes? If not, MIT, Hardvard, and a few other top-notch Universities post free online lectures on programming. And reading is going to have to be a necessary part of your regimen. I found it easier to learn PHP by not only reading but *practicing* what I read as I go along. 
I have never gotten anywhere with learning in school I just don't work that way. (Sorry if this seems like I believe I'm special or just different, not intending to look like an ass.) However with video tutorials like the once this guy makes http://www.youtube.com/user/thenewboston I feel I understanding it and retain much more. Usually when I read about these complex things I just start sweating about what I haven't understood yet.
That adds dramatically to the skillset required to use the framework. Either they must learn to sysadmin well, or they get stuck with the results of doing it poorly.
I think the idea is interesting, but I'm unsure just how useful it would be in the real world -- I'm having a hard time coming up with use-cases for myself. A novel idea nonetheless.
If you are installing on most $5 hosting you don't NEED to install the PHP server. That is what im talking about. NodeJS is awesome, I use it to handle sockets for real-time chat applications. People that suggest its a good replacement for everything annoy me.
This thread might help you as well:) http://www.reddit.com/r/PHP/comments/15u8zf/looking_to_become_a_php_developer_what_are_some/
No offense, but I think you did not understand well the problem. Think of a MySQL DB of 1M entries. Add a search form with several criteria (text, date interval, taxonomy, etc). Now display the search result with pagination, and customizable sort order. The canonic implementation will probably be very slow when following the link to the last page of results. &gt; First of all, I don't think this is a particularly taxing operation, and if implication is that it'd require an additional query, you could fetch it in the same query as you retrieve the results. Another option is to cache that number. I guess this "same query" is meant for MySQL's `SQL_CALC_FOUND_ROWS`. There is still a second query needed though, for `FOUND_ROWS()`. But the main problem is that it is usually much slower then sending a distinct query. I was bitten wy this myself. IIRC mysqlperformance has an article on this, if you want a detailed explanation. Anyway, not every project uses MySQL, it may not even use SQL (think Sphinx Search or MongoDB, for instance). Caching "that number" makes no sense. Here the number of results depend on the search criteria. &gt; Secondly, there's nothing stopping you from simply entering an arbitrary number, which would yield the effect you desire. If there are pages after the specified total page count, you could simply extend it to the next interval. If the page's results are less than the maximum viewing amount, you're on the final page, and you set the total page count to that. With SQL, accessing page 1000 of the results means that all the results must be sorted, then iterated until the 999*pagesize one. The server will have a hard time with this. On the other hand, displaying a wrong number of results is even worse. Sometimes, the best solution is to provide only visible links to the first pages, not the last one, and prevent search engines from indexing some high-ranked pages.
I'm talking specifically about count(). The thing you're missing is that different engines work differently. MyISAM will keep a row count, so COUNT(*) works perferomantly. InnoDB does not keep a rowcount, so in order to count every row it needs to perform a full table scan. Then consider that if data integrity is at all important to you in a production environment, or you want transaction support then you probably don't want to use MyISAM. However, this is not the entire story - what happens when you start limiting your data set with a WHERE clause? A group by clause? Joins? I mean, it's unlikely that you'll want every row from the table in every case. Now you're back to having a count() that needs to scan and count every matched row regardless of engine.
&gt;No offense, but I think you did not understand well the problem. Think of a MySQL DB of 1M entries. Add a search form with several criteria (text, date interval, taxonomy, etc). Now display the search result with pagination, and customizable sort order. The canonic implementation will probably be very slow when following the link to the last page of results. That's kind of irrelevant to the topic of pagination, though. &gt;There is still a second query needed though, for FOUND_ROWS(). There isn't. You can tack it along on the original query. Zend Framework does this, for example. &gt;Caching "that number" makes no sense. Here the number of results depend on the search criteria. Doesn't matter. You can cache it anyway. A cache is simply a place where you store away a value to save you the need to recompute operations. This can be stored in a session, for instance. I wasn't suggesting that you should store it across the site for all visitors. That's ridiculous. &gt;With SQL, accessing page 1000 of the results means that all the results must be sorted, then iterated until the 999*pagesize one. You don't need to do any sorting if all you're doing is counting rows.
there is a reason so many languages have a standard library with a namespace
&gt;Also, Google does return the number of available results and more/less pagination links depending on it... No, google returns a fuzzy count. It is an estimate arrived at using math when the rowcount exceeds a given threshold. It is not an accurate number.
Actually there's a very easy workaround for fast row counts with InnoDB: use Index hinting. http://www.cloudspace.com/blog/2009/08/06/fast-mysql-innodb-count-really-fast/
This was pretty much my reaction as well. It's an interesting solution to a problem I've yet to ever have.
...and look how long the query took. 3.2 seconds. In DBA circles this would be regarded as a slow query. Using indexes does help, but it doesn't solve the underlying issue.
Or as one of the comments suggested, count a column that you know is indexed. For instance, SELECT COUNT(id) FROM table instead of SELECT COUNT(*) FROM table 
Are you sure? The article states that the dataset they're working with is 1.2 million rows on an EC2 Small instance. So really, 3.2 seconds to chew through 1.2 million rows isn't so bad IMHO.
People currently complain that the PHP global namespace is littered with functions. If you throw hundreds (thousands) more functions into there you're going to have a bad time.
Yeah, it's really bad. Consider that query running 10 times in parallel. Then consider the user experience as it lags for 3+ seconds on each page load. What you're seeing is 3.2 seconds *under optimal conditions*.
Most online courses are just video tutorials in a sense, with feedback and fellow students who you can chat with about the work.
Don't just use MongoDB like its a new MySQL or you're going to have a bad time. Mongo is best used to supplement a traditional RDMS database with temporary or secondary data - not be the primary storage of all data forever. If anyone would like to disagree with that they're welcome to ask my friends over at Foursquare or Mixcloud about why. You might be fine for now, but when you scale Mongo has a nasty habit of shitting the bed if you use it for all of your data.
[laravel](http://www.laravel.com) specifically, i'd suggest starting with v4 which is in beta right now: http://four.laravel.com
Why not look at a proper dedicated server - could even work out cheaper than "the cloud" (as long as you know your load and scaling requirements).
well I made all the "pages" into each its own, removing joins and such, so I need less calls per page (very simplified), these sites won't scale to FourSquare size. Going away from MySQL made the site so much more snappy. But I'll remember to check if this is still an issue if I ever make a larger idea :)
i'd set the properties to be private and then if a specific property needs to be modifiable, you should create setter function for it so that the input can be checked and an exception thrown if it's invalid
edit: it does come out cheaper.. and same price as our VPS.
Yeah you shouldn't have. Would have been better to make this a self post with whatever you thought was interesting about this topic.
I used Eclipse for a while but it's just bloated and slow. Went back to using vim.
Queries that impact the user experience should always be less than 1 second. Optimally, it should be *way less* than one second. The elephant in the room that you need to take notice of is that *indexes are not a magic cureall*. You still need to be smart about your queries. The real issue with this sort of problem is that it's a moving target if your database is growing. Perhaps you have 1.2 million rows today, so anticipating a problem you buy new hardware. However, next week you have 4.6 million rows and you're back to square one. It makes far more sense to do things in a manner that is predictable when it comes to performance. Lets look at an example. I have a table that I use quite often - it's used for associating images with keywords. This is commonly known as a "has many through" association. It contains 9.4 million rows and looks something like this: CREATE TABLE `keyword_associations` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `image_id` int(10) unsigned NOT NULL, `keyword_id` int(10) unsigned NOT NULL, PRIMARY KEY (`id`), KEY `keyword_id` (`keyword_id`), KEY `image_id` (`image_id`) ) ENGINE=InnoDB AUTO_INCREMENT=9466501 DEFAULT CHARSET=utf8 Looks pretty basic, right? Now, what happens if we count every row in the table? mysql&gt; select count(*) from keyword_associations; +----------+ | count(*) | +----------+ | 9461674 | +----------+ 1 row in set (37.83 sec) ok, that's pretty *dog* slow, so lets try it with the index hint: mysql&gt; select count(*) from keyword_associations use index(keyword_id); +----------+ | count(*) | +----------+ | 9461674 | +----------+ 1 row in set (37.39 sec) ok, that didn't help *at all*. Now, let's try something a little different. Lets add a where clause. now, instead of getting all the rows, I want all the rows where an image_id is greater than 10000. mysql&gt; select count(*) from keyword_associations where image_id &gt; 10000; +----------+ | count(*) | +----------+ | 9294715 | +----------+ 1 row in set (6.03 sec) This is *significantly faster* but still relatively slow. Why? Because even though the index helps, it's still a lot of things to chug through. Lets have a look at what's actually happening here: mysql&gt; explain select count(*) from keyword_associations where image_id &gt; 10000; +----+-------------+----------------------+-------+---------------+----------+---------+------+---------+--------------------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+----------------------+-------+---------------+----------+---------+------+---------+--------------------------+ | 1 | SIMPLE | keyword_associations | range | image_id | image_id | 4 | NULL | 4720490 | Using where; Using index | +----+-------------+----------------------+-------+---------------+----------+---------+------+---------+--------------------------+ So basically, this is faster for a few reasons. The most obvious is that the index is being used, which drastically limits the number of rows which have to be scanned. The other is *what* is being indexed -- because I'm using integers for my WHERE comparison, it's giving the engine a best case scenario for sorting/comparing since integers sort and compare faster and easier than strings do. In fact, the fewer number of indexed selected rows via the WHERE clause, the better. But, what happens when the set is still very large from the WHERE clause, and happens to be complex? mysql&gt; select count(image_id) from keyword_associations where image_id &gt; 10000 and image_id &lt; 200000 and keyword_id &lt; 100000 and keyword_id &gt; 10000; +-----------------+ | count(image_id) | +-----------------+ | 1016585 | +-----------------+ 1 row in set (17.81 sec) Keep in mind that all the columns in the where clause are indexed and being actively used, but because of the multitude of conditions we're back up to scanning 9440981 rows. We can make this a little more performant by using a compound index: mysql&gt; alter table keyword_associations add index(image_id,keyword_id); Query OK, 0 rows affected (2 min 17.17 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql&gt; select count(image_id) from keyword_associations where image_id &gt; 10000 and image_id &lt; 200000 and keyword_id &lt; 100000 and keyword_id &gt; 10000; +-----------------+ | count(image_id) | +-----------------+ | 1016585 | +-----------------+ 1 row in set (8.46 sec) Now, what happens if we take the same (relatively) complex query and just ask for 20 rows from index 10: mysql&gt; select * from keyword_associations where image_id &gt; 10000 and image_id &lt; 200000 and keyword_id &lt; 100000 and keyword_id &gt; 10000 limit 10, 20; +---------+----------+------------+ | id | image_id | keyword_id | +---------+----------+------------+ | 1447877 | 50661 | 10001 | | 1472530 | 51417 | 10001 | | 1486284 | 51833 | 10001 | | 1596415 | 55165 | 10001 | | 1610048 | 55573 | 10001 | | 1656615 | 56925 | 10001 | | 1756434 | 59863 | 10001 | | 1764568 | 60132 | 10001 | | 1808889 | 61441 | 10001 | | 1812145 | 61530 | 10001 | | 1842803 | 62446 | 10001 | | 2528891 | 83015 | 10001 | | 2656100 | 86734 | 10001 | | 2713753 | 88433 | 10001 | | 2940977 | 95141 | 10001 | | 3087624 | 99545 | 10001 | | 3115301 | 100360 | 10001 | | 3131746 | 100833 | 10001 | | 3158666 | 101634 | 10001 | | 3295463 | 105707 | 10001 | +---------+----------+------------+ 20 rows in set (0.03 sec) It barely registers. 
When the servers are in the same datacenter, you are also able to take advantage of the private NIC, which has unmetered bandwidth in most cases.
SQL has never returned tables, it returns result sets. Also, it's basic SQL, nothing magical going on. It's just fetching the number of rows and putting the data into an additional column. 
I completely agree, im a php dev, not a sys admin. CPU: Intel(R) Xeon(R) E5645 @ 2.40GHz Ive tried mysqltuner.pl for tuning recommendations, but that really didnt help much. Right now my.cnf looks like: [mysqld] key_buffer_size=32M innodb_log_file_size = 250M innodb_buffer_pool_size=4G innodb_additional_mem_pool_size=16M innodb_log_buffer_size=150M query_cache_size=64M performance_schema read_buffer_size=3M read_rnd_buffer_size=10M sort_buffer_size=6M thread_stack=256K join_buffer_size=8M max_connections=200 skip-name-resolve skip-external-locking tmp_table_size=256M max_heap_table_size=256M thread_cache_size=16 query_cache_limit = 16M query_cache_type=1 table_cache=2048 interactive_timeout=9600 open-files-limit=2000 back_log=100 connect_timeout=128 max_connect_errors=1000 max_allowed_packet=128M myisam_sort_buffer_size=64M wait_timeout=3000 net_read_timeout=120 innodb_flush_log_at_trx_commit=2 default-storage-engine=MyISAM innodb_file_per_table=1 innodb_lock_wait_timeout=18000 tmpdir=/sqltmp Note the tmpdir is pointing to a drive i mounted and set in etc/fstab so that temp files are kept on the ram -- maybe a bad idea? my /tmp directory was filling up and i tried this instead of resizing /tmp. tmpfs /sqltmp tmpfs rw,gid={GID},uid={UID},size=2048M,nr_inodes=10k,mode=0700 0 0 As for apache.. its mostly default aside from increased max_connections, memory limit, timeout, keepalives, spare servers, and no MPM's 
I was in the exact same position as you. Spend the next hour reading Fabien Potencier's tutorial on building a framework with Symfony2 components. It will teach you so much not just about code but http and the way of the web. http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Learn Java.
If you're just using MongoDB to handle some pages for a small CMS then you can discard my warning. A lot of people think of Mongo as "the new way to do things" and use it as their primary data source for a social network or whatever. This leads to headaches. Remember though, RDMS has been around since the 60's. There is a reason for that, and it wasn't because the worlds developers for over 50 years hadn't thought about directly saving an arrays instead of rows.
Are your tables mysiam or innodb? The tmpdir thing should be fine, mysql only uses that for huge sorts / temporary tables anyway. Are you sure the bottleneck is even mysql?
basically you're assuming the other developer knows what they're doing. there's a lot of \*air quotes\* "developers" out there that will pass in all sorts of messed up data and then file bug reports because, as you said, php will just choke if it's invalid and they'll blame your code when it's them screwing it up.
&gt; Don't just use MongoDB like its a new MySQL or you're going to have a bad time. I'm surprised to see this sentiment here in the PHP forum but I just wanted to reiterate what you said. I feel like No-SQL is gaining a lot of popularity because many multimedia trained designers/developers find it easier to use, particularly Mongo with its Javascript syntax. To make matters worse, they treat RDBMS like it's an Excel spreadsheet. A user table will contain every column that a user could ever have. So much duplication :(. And don't get me started on storing IP addresses as varchar... I die a little on the inside everytime I see it... and I see it a lot. I even once had a "senior" developer argue against a 2nf schema because he didn't want to do a join because of the mystery of the magical db load it might incur. He'd rather pull 10M+ records over the network in multiple selects to the app server, and then have C# do the joining and sorting. Even in the Mongo-DB tutorials/demos, they show pairing up a MySQL server for the transactional parts of an e-commerce system. There are some things it just isn't good for. And even the benchmarks that show off how much "faster" no-sql db's can be are quite flawed. They will measure the time it takes to do 10 million inserts, and use that to show how the no-sql engine is 6x faster than a sql engine. But that's not how a typical DB load works. And relational DB engines are doing write-through direct disk writes, confirming the transaction, all kinds of things the no-sql db skips (by default on both engines.) Great post. Just want to re-emphasize what you said. Just about anything that needs to live forever should be properly stored, strongly typed and de-duplicated in RDBMS. I feel like 2-3 hours of every developer learning how to do so would save millions of combined wasted man-hours from data problems. Ninja edit: I don't hate no-sql, it's great in some places, but it is way more popular and trendy than it needs to be. Use the right tool for the job.
Contrary to what you've been lead to believe, this makes no difference at all. An index is only really useful if you're limiting a set based on some indexed criteria. Consider what the queries actually do: mysql&gt; explain select count(*) from keyword_associations use index(keyword_id); +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | 1 | SIMPLE | keyword_associations | index | NULL | keyword_id | 4 | NULL | 9440981 | Using index | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ vs: mysql&gt; explain select count(keyword_id) from keyword_associations; +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | 1 | SIMPLE | keyword_associations | index | NULL | keyword_id | 4 | NULL | 9440981 | Using index | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ vs: mysql&gt; explain select count(*) from keyword_associations; +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ | 1 | SIMPLE | keyword_associations | index | NULL | keyword_id | 4 | NULL | 9440981 | Using index | +----+-------------+----------------------+-------+---------------+------------+---------+------+---------+-------------+ As you can see, these three things are *exactly the same* - you do a full table scan in all of them. The index will not help at all since you wind up having to count all the rows anyway. The point of an index is to help with limiting the scanned rows quickly, which none of these do. It's a different story when you start to use a where clause with an index because then there is the potential to reduce the number of scanned rows.
Yes, No-SQL is gaining a lot of traction and correctly used it is wonderful. Mongo does a great job at providing storage for real time chat, or for providing a "find locations near me" system, but those locations are all in a MySQL DB and each mongo DB is only for a certain geographic area. More locations = more buckets covering smaller areas - and no universe implosion. :)
You can add a [PHP build system](http://xcjs.com/).
&gt;Google also has a sliding pagination, not an elastic one, which seems to be what you're objecting against. No, it isn't. What I'm objecting to is the idea that count() on a large number of rows is somehow inexpensive. &gt;First of all, I don't think this is a particularly taxing operation Then you haven't studied it like I have. Please see my [other post](http://www.reddit.com/r/PHP/comments/176hct/i_opensourced_this_pagination_class_from_my/c82v57s) regarding this, as I have already detailed my point there. &gt; Another option is to cache that number. You could use caching, definitely. In fact, [mysql can do this on repeat SELECT queries](http://www.mysqlperformanceblog.com/2006/07/27/mysql-query-cache/) to a limited extent if your server is properly performance tuned. However, once you see just how ridiculous the problem can get, you might think twice about designing a situation where you have to deal with it.
To see if the current page needs a Next button, simply always ask for 1 more item than shown. So if a page shows 25 items, the query should ask for 26. 
As of this morning, the tables are *now* MYISAM -- originally innodb, i need to get rid of the innodb variables. That should free up some RAM. We are using a consistent 24GB of our ram, which tells me it's probably being over-allocated. The bottleneck is hard to pinpoint, but i have run xdebug many times and found that much of the execution time is hanging up in getting/setting of Varien objects. Magento is notoriously slow with ~1 million products and 4K categories, but our "optimizations" seem to make matters worse. * Innodb crashes * Long execution times * Load spikes inconsistent with peak hours 'top' processes show several instances of httpd @ 500M to 1G "VIRT" memory and mysqld at 9.44G "VIRT" memory. **consistently** 
That's not a bad methodology.
... and I used architecture twice in the title. Not very a very elegant post, but I'm sure somebody here can point me in the right direction!
"Doing it wrong" isn't *exactly* the right answer - I probably should have been clearer. "Doing it when appropriate" is probably closer to what I'm trying to drive across to people. If your table is small, and your scanned rows is small, and the table isn't going to grow rapidly to gigantic proportions it's ok to get a count. If you have an unknown growth factor, you might want to think twice about it. This is originally why I suggested the OP create a different behavior *if* the total row count was omitted.
Here's the basic script. **index.php** require_once ('pagename/controller.php'); **pagename/controller.php** require_once('pagename_model.php'); // contains the Pagename class if (a) { Pagename::do_this(); } else if (b) { Pagename::do_that(); }
Well, yes ... but how is that relevant to my comment? 
unfortunately the more you learn about HTTP, the more confusing it gets. If you use a good web server and have customized your php.ini a bit, you don't have to worry about the minutiae of most requests. E.g. if a browser requests an `ico` image without an `Accept` header of `image/vnd.microsoft.icon`, should you send a `406 Not Acceptable`, or just serve it? I'd just serve it and let the client deal with it. If you use the PECL http module it adds a lot of extra http functionality like an `http_negotiate_content_type` function and you can serve it as `image/x-icon` instead. It should be simple to force a download to a client, but it's not. Do you send MIME type `application/octet-stream` or maybe `application/force-download`? A lot of people say to use the correct MIME except some browsers will render it if it gets a MIME it accepts. Don't forget to turn off `zlib.output_compression`. Oh did you want to chunk that? Don't forget the `Transfer-Encoding: Chunked` header, and do we send a `Content-Encoding: chunked` too? Hmm, still not working. Oh, `Content-Disposition: Attachment`, forgot that one. Maybe it also wants `Content-Description: File Transfer`. It's not chunking, forgot `Connection: Keep-Alive`. Need to disable caching for this request too. Is that `Pragma: no-cache` or `Cache-Control: no-store, no-cache, max-age=...` HTTP is a damn confusing mess of RFCs and best practices, thankfully most are negated by the fact that browsers are designed to deal with malformed responses, and sometimes the browser does the opposite of what you want. Also at least the most popular web servers (esp. Apache) do a good job of handling this stuff behind the scenes and you don't have to worry about most of it. A lot of frameworks attempt to handle it seamlessly but from what I've seen, few get it 100% right, but like I said, 100% right is really damn hard to do and mostly doesn't matter. I only study this stuff because I'm interested in it/a masochist.
Also: * CTRL + ALT + UP/DOWN
Both are for commenting and uncommenting. Try to Ctrl+/, Ctrl+/
Thanks, chriswatt already answered ;)
The creator of the Symfony framework posted a good 12 part series on how to [wire together a framework using the Symfony components](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1). You should be able to get some good ideas from the series even if you choose to not use the Symfony components it does explain a lot.
Okay, remove all the innodb related settings. Add skip-innodb to your cnf as well. it'll disable it entirely. Definitely you need a *vastly* larger key_buffer_size. That's the main myisam performance variable. For your system, I'd recommend key_buffer_size=1G read_buffer_size=1M tmp_table_size=256M max_heap_table_size=256M I've never worked with Magento but iirc it uses an EAV model which is inherently going to be uber slow?
That's looks like a great series. Thank you so much! I can't wait to dive in.
Maybe so, but as you say a good web server will take care of most of it. I think it's foolhardy to recommend a web dev *not* to learn about http, however confusing it may be. 
I don't recommend anyone ignore it, just not to try and deal with requests with the type of precision required of a server. Unless you want to of course, it doesn't hurt. I mean there are web servers written in PHP e.g. [nanoweb](http://nanoweb.si.kz/) which claims HTTP compliance (the built in webserver in PHP is kind of a "dumb" server). http://www.w3.org/Protocols/rfc2616/rfc2616.html &lt;--- lot of reading, and it only covers the official word. There are lot of non-official extensions to HTTP that are de-facto standard.
So there's the part I didn't know. 1 million products + 4K Categories. Think of Varnish as keep whole HTML pages in memory and then serving those pages from memory. Magento (extensions) then uses ESI to notify Varnish when a page changes and the cache must be refreshed. For things like compare / products in cart etc, generally the client makes an Ajax call back to Magento bypassing Varnish but because it's only loading small blocks of data and only WHEN it's needed, the load is significantly reduced and speed is increased. Though, still with that many products it might be wise to separate the DB and the frontend servers and introduce Nginx+PHP-fpm instead of Apache.
I got as far as starting up varnish on port 8080.. now it says to bind server to port 8080 instead of 80 and then reconfigure varnish's default port. how would set the default port to my server? via WHM ideally, or ssh if i must. also, how do you quit out of "varnishlog"? man page doesnt say.
I cannot believe you changed your tables from InnoDB to MyISAM. I hope you don't rely on transactions.
I hope you're doing this in a testing environment. You will need a few days of testing to ensure Varnish is setup and running properly. Varnish will need to run on Port 80 and Apache on 8080 (for http). It's not really the simplest of things to achieve. What are your page load times as it is right now and if you run Apache Benchmark from the server itself ie ab -c10 -n1000 http://www.yourdomain.com/ what sort of rq/s are you seeing?
CodeIgniter doesn't have a version 4.x, I was referring to the PHP version that CodeIgniter was originally built on - PHP v4.something (likely 4.4). PHP Object-Orientedness was indeed pretty shitty at version 4, and so any framework that's built to still be compatible (like CodeIgniter) suffers for it, and also from knowing that it had its design roots that long ago. EllisLabs have said they're gonna bring out a new CodeIgniter (v3) that's updated and built for PHP 5 for a long time, but so far nothing has come. That said, there are heaps of other frameworks using pretty good OOP and modular design these days, Symfony, Laravel, CakePHP, Lithium, Fuel, etc.
See it says Non-2xx responses? You're not getting a 200 response meaning you're hitting something else. Try wget http://yoururl.com/ from the same box as you did the AB and then read the contents of the file that downloaded. 
&gt;You should learn the basics of SQL (and of algorithms/mathematics, for instance a "set" is not ordered), it will be useful. Wow. Talk about being a pretentious prick. &gt;Just try writing such a "basic" SQL query! If you try to mix count(*) with LIMIT 0,10, you can't succeed. Yes you can. There are many different ways of achieving this. You can write a subquery, you can poll information_schema, you can go for FOUND_ROWS(), etc. etc. 
How do you define popularity?
Excellent. Thanks Phil!
The links that get more clicks are more popular. Then based on the popularity they get rearranged. Example: Before rearrangement 1. Link 1 (10clicks) 2. Link 2 (30clicks) 3. Link 3 (20clicks) After rearrangement 1. Link 2 (30clicks) 2. Link 3 (20clicks) 3. Link 1 (10clicks) I basically want something that rearranges the links based on how many times they were clicked. 
I'm not looking down on anyone. I'm offering solid advice. A competent systems admin could get this figured out in a couple of hours. Even at $150/hour, you're looking at a $300 investment to have this taken care of once and for all. Not only that, but many sys admins will do a server hardening while they're in there if you ask nicely enough. I'm telling you this to try to keep your site safe. It would be a shame to go through all of this work and heartache only to have your database deleted in a few months because you trusted cPanel to secure your system.
Assuming it's not for a large scale system (tracking individual clicks would be murder on your database), it's pretty easy to implement. First thing's first - you need to be able to run some code when the user clicks the link. If they're all internal, for instance all going to "story.php?id=1234" or something, just change it from "click tracking" to "view tracking" and put the code in your story.php file. To increment the 'click' count. If they're external links, you're going to have to change them to point to something on your site first. Say, "redirect.php?linkid=1234". That file would update the 'click' count and redirect the user to the actual link URL. From there, some SQL to increment the click count (use bound parameters, etc): UPDATE `links` SET `clicks`+=1 WHERE `id`='1234' Then on your links page, fetch the links in order: SELECT `id`,`name` FROM `links` ORDER BY `clicks` DESC Output those, and you're done.
Think you'd need a way to track clicks, like some javascript. Then call some php to check if it was a legit click(user loggedin? different person? etc) if all checks are true just increment a number in the database. When grabbing the data with mysql, just use SORT BY 'clicks' DESC Edit: Oh famousemadphilosopher was 1 minute quicker :)
Seriously? Liquidweb did that? Man. Did you instruct them to or was it their idea? That sysadmin should be reamed.
Ok, so here's the deal. How the hell did your boss get 1 million products into Magento and can justify upping the hardware to pay big $$ per month for a server and yet won't justify a couple hours with a decent sysadmin? With a million products, I would expect at least a couple grand a day in sales. An hour of downtime easily justifies getting the issue resolved.
Don't forget that by putting links that have been clicked a lot at the top, they are of course bound to be clicked even more, not because they are popular but because they are convenient. You would definitely skew your results after a while of this, and make the system pointless, if not detrimental to your site (new content would never be seen). Just wanted to bring this up in case you don't have a plan to deal with it.
Yeah I'm just going through the book, just learned about SQL inject protection through escape string and trim
bit much, aint it?
Suggestions - check out slow query log, You may have slow queries dragging down the system (set MySQL to log any query that takes more than 3 seconds) Do explain plan on slow queries Make sure to eliminate table scans - Indexes are your friend. The hole database should fit entirely in RAM so slowness is more likely really inefficient reads. (Often 10x writes) if you have tables with multiple indexes check to see if any include primary key and a second column, you should be able to use those as primary key index and drop the single column primary key index(saves space and reduces insert times
Sorry, deleted my comment by accident. Looks god to me. MVC is basically a strategy of separating the code for many reasons, being the main one a better organization of the code by separating it according to its tasks, being these: Data display (VIEW), user's interactions (CONTROLLER), data processing (MODEL). In practice, there's no a specific way of implementing MVC. You can use a framework or any existing method, or even implement it your own way, as long as you separate the code in different sections/files, you are doing it MVC. This is a good practice specially in big projects with multiple coders, to keep the code better organized and easily maintainable. If you intend to build a small app, with no much future growth, there's no special need to use MVC, unless you like it and are already used to it. 
There will be few options to click at a time so that is not a problem.
&gt; I have never gotten anywhere with learning in school I just don't work that way. (Sorry if this seems like I believe I'm special or just different, not intending to look like an ass.) Just means that you're an [autodidact](http://en.wikipedia.org/wiki/Autodidact). I'm right there with you, just remember that, teacher or sans teacher, to become a truly great programmer takes a lot of practice.
why not use [reddit's algorithm?](https://gist.github.com/1478806)
Polling information_schema on an InnoDB table isn't a horrible idea, and it's guaranteed to be fast. Unfortunately it's not going to give you accurate results. It will always be an estimate. You can see that it's continually updating this estimate by querying the information_schema.TABLES table multiple times successively and looking at the TABLE_ROWS column. You'll notice the value changes each time you pull it on a large table even if there is no other database activity. This also won't help much if you're using WHERE to limit your result set. Use of SQL_CALC_FOUND_ROWS and FOUND_ROWS() isn't entirely a bad idea, and depending on the circumstances it may be faster than performing a COUNT(). However, you're still going to see very large performance hits when doing this. 
reddit's algorithm is based on clicking on a additional buttons (upvote/downvote), my rating system will based on direct clicking. Plus it's not going to be anything like reddit since it will have only few options to choose from at a time. 
No. On reddit you have to click an additional button to rate (upvote/downvote). This will be based on the click on the link.
Thank you very much! I will definitely try this out.
And the creator of Symfony also wrote [From Flat PHP to Symfony2](http://symfony.com/doc/2.0/book/from_flat_php_to_symfony2.html), which takes you step-by-step from spaghetti PHP to an MVC architecture.
You might find something like [this](http://www.labsmedia.com/clickheat/156914.html) useful. It generates a heat map overlay for a site which is good for determining click activity, and possible misclick activity. If you simply want to count the number of clicks, you could just have all the links point to a single php script and use a parameter to identify what the destination page is. Then the intermediate page could record the click, what it was for, and perform a redirect. If you're worried about it being an actual user click, you could also involve javascript by having it enter the DOM and rewrite each link's href attribute. This way, if javascript is active, each link will point to your php file. If it is not active, each link will point only to its ultimate destination (and not record a click in the process).
make a video response about it :) but yeah; reading it online is much better since you can copy&amp;paste the code and play with it to understand it. If you just watch it on a video you won't learn as much.
I see what you did there:)
Then you need to store the number of clicks. There are multiple ways of doing it. One is adding each click to its own table, which might be an option for you depending on how much data you wish to store (e.g. from which IP did the click originate from, when did it happen etc). When you retrieve it, you count the number of matching rows, which should yield the popularity. Another option is rather basic, and consists of having an additional column with an integer field which you simply update for each click. 
That doesn't matter. You can still use the same algorithm, if you want to. The algorithm works on the number of points, that is, upvotes minus downvotes. If you want, you could simply replace the points with the number of clicks you've made, and it should yield the same result.
You can delete the individual `.git` folders from the vendors if you'd like, you can even make it part of your deploy process (if, for example, you package everything up before shipping it to a remote server). I'm guessing the only and obvious down-side is that `composer update` will take longer to run since it'll have to re-download everything to update vendors, or will not run at all.
&gt;This is originally why I suggested the OP create a different behavior *if* the total row count was omitted. And I think I am convinced to create it!
Maybe it's handy that you post this website when there is actually something to see
Another possible workaround is to disable some validation and/or annotation settings. It's been a while since I've' used Eclipse for PHP development, but I remember disabling some validations/annotations for classes for inheritance increased responsiveness significantly. (I quit using Eclipse because of the ffing subversion mess).
&gt; Assuming it's not for a large scale system (tracking individual clicks would be murder on your database) For that scenario you can push them into a memory storage and run a timed cron to pull them out and add them to the database. That's how we do it.
videos are a pretty shit way to explain/share code. a format most programmers like is probably some code with some comments.
This is a client's site. He is a vehicle parts dealer.
Wow, okay. Actually yeah they didnt even tell me, i went in to phpmyadmin to watch the import process and saw nothing but MYISAM.. those cheap bastards.
Yeah the client does pretty good, 10k a day, and he lost a lot of that on wednesday when the site was offline for nearly 12 hours. Liquid web was on it for 10hours and couldnt do a damn thing until, well, you know, they took a cpanel backup, converted to MYISAM and restarted. That also caused a bitch of problem resyncing orders with their inventory manager.
there are multiple indexes on our tables. it's magento's EAV model.
Interestingly I found this: http://www.cargomedia.ch/websocket/benchmarking-websocket-servers/ I should give another try for Ratchet. 
piwik has had lots of updates in the past year. http://piwik.org/
I have passed it along to the SMF team for you.
This is pretty awesome stuff! I believe this is the work of PHP developer and redditor /u/nikic? The implementation reminds me of Javascript in the way that `$this` represents the primitive (much like `this` would represent the primitive inside of, say, `String.prototype`). It [looks like there's a start on implementing all of the handlers](https://github.com/nikic/scalar_objects/tree/master/handlers), but he could use a hand maybe... 
I agree, and I've ranted about it before, but ultimately it's up to the content producers -- and from what I understand, he's received really good feedback from the videos (and he is [keeping an eye on the metrics](http://blog.ircmaxell.com/2012/12/2012-what-a-year.html)). For me, I do much better with printed materials....but _beggars can't be choosers_.
yes reflection is indeed very powerful and bulky... but closures are the *new hotness*!
Thank you. I just finished installing Piwik and it looks great. phpTrafficA was also giving me problems with depreciated code. Now I can forget about those kinds of worries
How do you handle re-indexing with 1 million SKUs? I bet it would take 28 hrs.
I really like the elegance of the implementation. But how will this NOT lead to naming conflicts when using 3rd party code? I think that's one of the reasons why prototype.js lost to jQuery: Interoperability was bad and led to bugs and unexpected behavior.
because the first implication is: now that PHP has namespaces, they ought to namespace all of their new functions, drastically reducing the conflict potential
From the ReadMe &gt; The ability to register type handlers from userland is just for prototyping. It's not something I would actually want in PHP in the end. This is just for ease of prototyping new API's not something that would land in production code. Although, I can think of a bunch of different uses though.
I can't think why you would need to try and calculate this. What happens if you do manage to get a value that was somewhere near but then the end user has their browser set to zoom 200%. It's going to mess up anyway. 
Thanks, I somehow missed that line.
I use it in conjunction with javascript on my site. If the user has javascript enabled it will check the browser resolution and display what it determines can fit, however more than half of the users to my site run noscript so I wanted the site to degrade gracefully for them. Thus the back-end language to do this. The main scenario I have is with a stylized breadcrumbs trail that uses an unordered list. The breadcrumbs are often times user-submitted titles of pages. The titles can be quite long, but I don't want the breadcrumb to exand beyond the the main div or wrap around it either so I limit the length of title in the breadcrumb. I could have just truncated the string at X number of characters but I want to display as much of the title as possible when possible.
Does this support magic methods like `__get()`? And can methods be called from literals, as in `"sausage soda"-&gt;split(" ")`?
I haven't tried it myself, but would suggest doing some benchmarking. Do two tight loops, do the debug backtrace log in one, not in the other. See if there's a big difference. Post your results! Edit: you might also have luck just using __FILE__ and __LINE__ See here: http://php.net/manual/en/language.constants.predefined.php
Not necessarily, or at least not the way my site is styled. I wanted to be able to display things like image gallery titles to include as much of the title as possible, but still truncate when it's length might extend beyond the width of the thumbnail. [See this example from my site](http://i.imgur.com/tuqTQuA.png?1) When I resize the browser the text and image both scale up (at least in FF and Chrome) so it stays relative and nothing gets messed up.
Rasmus just threw up in his mouth a little.
This is a really bad idea (especially considering that the text can render differently from computer to computer, that you can manipulate font sizes, it being bad from an accessibility standpoint etc). Why don't you simply use text-overflow: ellipsis?
[text-overflow: ellipsis;](http://www.css3.info/preview/text-overflow/)
That's a good thought. The site I've been working on for the last year in my spare time is the first web dev stuff I've done since tables were the golden standard for layout and blood-dripping animated HR tags were common. I'm learning both PHP and CSS as I go along and really struggling with the CSS side. In fact I just recently figured out how to effectively use the text-overflow property the other day. I'll have to give that a go. I see what you mean about text being manipulated client size affecting what I am doing. Somehow changing my browser text side does not affect this...but who knows, it may in the future. I will look into creating a separate div for these elements and apply text-overflow: ellipses. Thanks
28!? longer for some indexes.. we use ssh indexer and the nohup command. works great.
I'm aware of the difference between setting browser text size and the zoom level. It's got to be #2.
good.
Well, that's a nice extension. Can it also do things with that that are common in many other OO languages like dereferencing? $length = "A short string"-&gt;length() $lengthLength = ((string)("A longer string"-&gt;length()))-&gt;length()
I like how you're getting downvoted for the truth. Videos are a TERRIBLE format for programming information. Coding examples? no. Search engine friendly? no.
I can't think of any scenario where knowing the file/line # where a log message originated would ever be useful outside of error logging. And when logging errors, you should be logging the full stack trace anyway. I won't make any assumptions, but I have the sneaking suspicion that you may be (mis)using logs for general debugging if you find yourself wanting to know file/line #s. If that's the case, please consider using [xdebug](http://xdebug.org/) instead.
I like and use closures quite a bit. I think they're one of the best additions to php in quite a few years. As far as what you could have done differently, it's difficult to say without knowing exactly what you're doing. In your test case I'm not sure why you're not just doing something like this: &lt;?php // define a mock "core" class class test_core { protected static $prop = 'core value'; } // define a mock "application" class class test extends test_core { public static function getProp() { return self::$prop; } public static function setProp($prop) { self::$prop = $prop; } } echo test::getProp(); // Outputs: 'core value'; test::setProp('different value'); echo test::getProp(); // Outputs: 'different value' The purpose of protected properties is extending classes *can* read and set their values. What you're doing in your test code is no different than this: &lt;?php // define a mock "core" class class test_core { protected static $prop = 'core value'; } echo test_core::$prop; // &lt;- this would cause an error, "cannot access protected property" Of course you can't access $prop from outside the class. It's protected!
Maybe I've just been spoiled by socket.io and Nodejs - but I just tried for the last 3 hours to get Ratchet working to no avail. Some of the code [to make it work](https://github.com/cboden/Ratchet-examples/blob/master/bin/website-chatroom.php#L46) looks like this: $webServer = new IoServer( new WsServer( new PortLogger($push, 80, new MessageLogger( new ServerProtocol( new Bot( new ChatRoom ) ) , $login , $logout ) ) ) , $webSock ); And requires 4 different ports/servers running on your machine ... it's a bit of a pain in the ass if you're used to the easy setup and go of [socket.io](http://socket.io). Did you get it working OK? What are your experiences?
Yes that would be the ideal way to do it if extending the "core" class were possible in my situation. I am using the Kohana framework which has a great hmvc structure for all classes *except* the core "Kohana" class. That class can only be overridden by the application in the bootstrap. If a module attempted to extend the core class, it wouldn't work by default by just enabling the module, the application would need special hacks, and it wouldn't work as a "drop in" with any existing applications that had already extended the core "kohana" class. And yet I wanted to modify the protected static variable $_paths. I could ask their core development team to add a setter for that property, but I'm probably the first person to require it and I'd have to wait for them to implement it in the next release. I don't actually need a getter, but made one for the example. I understand that it is probably an odd example, but it was meant to show how flexible some things are with closures and binding. It gives a new path to make minor changes to previously "unchangeable" library classes or core framework code.
http://www.phpdeveloper.org/
This can't be implemented in an extension, because extensions can't modify the parser. But when this gets into core those derferencing syntax will have to be added (and it wouldn't be particularly hard, especially as the latter already half-exists).
It doesn't support any magics apart from `__callStatic`. This is just about method calls, anything else like property access and the related magics is not implemented (and would be a lot harder; property access is two orders of magnitude more complicated than methods calls in PHP). For the second question see http://www.reddit.com/r/PHP/comments/1795gc/method_calls_on_primitive_types_in_php/c83n5lc :)
/r/php
Good stuff. I knew it was documented somewhere, but I failed to find it when I looked :)
Zend Framework was Zend Technologies's way to solidify their name as the 'source' for PHP. So yes it's free, but at the end of the day you are making Zend money by using them.
I take what I can get.
reddit, php.net, [hn daily](http://www.daemonology.net/hn-daily/) (not specifically php), and a few blogs written by php devs. also occasionally the front page of hacker news and stackoverflow + other related stackexchange sites.
Dealing with fonts is a full time job for some people. It's next to impossible to try and account for this kind of stuff, especially on server side. There are so many factors to deal with - DPI, resolution, exactly *which* font - Arial, Helvetica, Dejavu Sans, Droid Sans, or whatever their fallback sans-serif is, does the system use gdipp or cleartype and how does that alter character width, etc. It's even hard to do with monospace fonts. I'm sure you could come up with a brilliant solution and have it looking fab in every browser for all common fonts, but it will require constant maintenance and is not worth your time, there are simpler solutions. You can use http://browsershots.org/ to check how it's looking in various browsers. My best advice is to do any JS and CSS and test it in Opera, I have found that if it works in Opera, it almost inevitably works in Chrome and Firefox as well. Unless you're using bleeding edge webkit-only features (please don't do that).
The point is not to truncate after X number of characters, but after a certain width of a string. iiiiiiiiii and @@@@@@@@@@ are both 10 characters, but one is a little longer.
Is it [this guy](http://www.autopartsexpress.com/)? The reason I ask is they have an extremely slow site and are roughly the size you speak of. If that is not them and if your client is an eBay seller I might have something they are interested in.
This would only work in PHP through cURL functions - but only on your server, which you would then serve the contents to the user - again through your server. Using PHP you can't redirect someone to another link and set their user agent, since you can't control their browser behavior. If the link is on your server, though, you could simply use some _GET parameter to set user agent to whetever you want.
I like to monitor Net Tuts http://net.tutsplus.com/category/tutorials/php/ 
Why are you using something as limiting as sqlite to begin with? It doesn't even support row-level locking. The only time sqlite is a good choice is when you're doing small scale local applications.
Perhaps we just don't have enough information, but i'm a bit confused. You're worried about aspects that might matter literally microseconds. If this is important, why are you "stuck with SQlite"?
I would not accept that pull request either. The code for opencart is a piece of shit though. I don't understand his pride in that.
I disagree, if video is so bad, then why do people go to conferences? Reading involves much more digesting when you are learning something new, where video can be much more personal and captivating, helping you drive a few points more directly. Its not all about "googling for it" there are many other ways of getting to the content. Also, no one "medium" is good for everyone, find the one that works for you and learn, whining just does not add to any of that.
/r/lolphp
The purpose in PDO is to take advantage of parameterized queries, to help prevent if not completely eliminate SQL injection. Swapping DB platform is simple on the DSN but not in the queries. If you're concerned about keeping your options open to migrate to another DB platform, then you'll want to check out using an ORM (e.g. Doctrine).
Why don't the private variables have getters and setters? Why all the static variables and methods? It doesn't seem like a very well thought out framework.
Does it even really matter which one is faster? Sounds to me like a pointless micro-optimization question. You're better off solving real problems.
Twitter mainly, HN, r/php
What about performance? 
I think that's an amazing idea - I'm also interested in other peoples' workflow - could you ask them if it's ok to record your sessions and upload it somewhere? Then you could do a small review/audit about all that, like: What is good what the person does and what is not so good?
I guess you were out sick the day they talked about learning styles in high school. Some people are auditory learners, and for them videos work better. It's also a great way to have kinetic flow to diagram the idea for visual learners.
No. The purpose of PDO is to give you a common interface to access databases. The fact that it can emulate prepared queries with databases that don't have them is just a side benefit.
i find it funny that /u/ealf and /u/midir (the mods of /r/lolphp) apparently don't want their usernames associated with that subreddit at all so they hide all username references in the subreddit's default stylesheet.
 what an unfortunate domain .. nope.
It only really does half that job then. It only gives you a common interface to CONNECT to databases. To say it's a common interface to access databases suggests connection and queries will work regardless of the DB platform which isn't necessarily true for the query aspect. Thank you though, I knew there was more to it and might original reply was a side benefit but it was early and I couldn't think of the entire reason.
I think a better setup is if afterward the person in turn audits your workflow. Then you can learn from each other.
You're correct in that it won't magically make your queries compatible, but that isn't really the "common interface" part. The common interface refers to the class interface. The reason this is important is that it makes it much easier to develop adapters for other databases. You're only swapping out the queries that don't work instead of every single method call.
I think the videos are great and they really stand out from all other pattern explanations I've seen. You can read about these patterns anywhere, all day. But it's not often you can watch them. The author's way of communicating really clicked with me, at least. Major respect to the author for his great communication, accessible and friendly demeanor, and coming up with this unique and creative format. For every person that complains about the format of these, I bet there are a thousand others silently enjoying them and getting a lot out of them. 
Good stuff. Thanks for the clarification.
I think it should be combined with Amfy1's suggestion to record it. There could potentially be a video series there if it was edited down. Have 2 people record themselves working for an hour. Exchange videos, watch, and offer suggestions. Then someone edits the recordings down to highlight the things that the 2 people think where good suggestions, or funny, or even what they learned just by watching the other person.
yes please, so we can all learn
You might want to check out [phpmentoring.org](http://phpmentoring.org). I realize this isn't exactly mentoring, but I think even some of the more experienced developers there might be interested in some feedback on their workflows. We'd also greatly appreciate your viewpoint on the topic of workflows, as it'd help us in our own mentoring.
[PHP Weekly](http://phpweekly.info/) has been nothing short of the best resource out there 
This is awesome, my workflow is definitely flawed so I wound welcome if you would share the results. Thanks for doing that.
I like Guzzle!
Are you working with a big structured API? Use [Guzzle](http://http://guzzlephp.org). Are you interested in only sending some HTTP requests without any structure? Use [Buzz](http://github.com/kriswallsmith/buzz).
Thanks. Can I set user agent/referer with Buzz or are things like that only available with Guzzle/other libraries? 
.. i feel comforted that im not the only one with issues typing "recepie"
It's available with Buzz too. You can set every header yourself including the User-agent/Referer headers :).
Great. So, I'm using Buzz now.. but when I echo the response it includes all the headers and stuff of the request/response. How do I get rid of that?
&gt;[..]used besides that fact to make some impressive systems (and WordPress) I laughed out loud. Wordpress, how I love to hate you.
I'll go ahead and throw this here. http://phphttpclient.com I'll check out guzzle. 
I like the idea. I'd much prefer Unicode to be the default though. It's about time that Unicode *just works*. If we're going to completely break userland then I think this is the right time for it.
There is also http://requests.ryanmccue.info/. For simple things I usually just go with curl or pecl_http, or heck even file_get_contents. And when I need oauth, I just use that to make the requests (http://php.net/manual/en/book.oauth.php).
It's time to fork PHP. The core PHP developers are split between two competing design philosophies. Any new ideas are being repressed by developers so burned for past design decisions that they are paralyzed by fear of change. 
OOPHP FTW? Hard to say.
What is this, no hate love for Joomla?!
It doesn't even necessarily have to be a "serious" fork but it should, at least, get the code together for developers to play with. Maybe good ideas will return the mainline if it's shown to be successful. The history of open source projects are riddled with examples of just this -- highly restrictive maintainers keeping new developers with new ideas out -- and then projects are forked and become a success on their own or influence the main project in new directions. We don't even know how much more code for PHP would be written if developers weren't almost assured that their effort would be rejected. 
Wordpress just has a special place for me, because I'm so often called upon to deal with the fallout caused by it and the hideously awful plugins people create for it.
At least with Wordpress, you can separate the core Wordpress code from your theme and plugins. They're both pretty awful but Wordpress is the lesser of the 2 evils, IMO&gt;
Like those other times it was forked and nothing happened?
No love, just hate. 
Hideously awful plugins is the real problem here. And yes, there are an awful lot of them. If you take a look at the underlying data structures of WP, you will find you can do some pretty funky stuff very easily. Most plugin makers don't understand how the data structure works, and so end up polluting the database with unnecessary custom tables. What WP really lacks, IMO, is the ability to pull in and use libraries from composer, resulting in so much duplication of code in plugins (each instance of which seems to be wrong in different ways). It also needs a proper separation of functionality and themes. That is the killer at the moment. But you know, install, set up, write custom theme, and you have a great app that the client will feel immediately comfortable managing. I [put this together](http://www.soulbrother.com/) for a client last year, a little specialist record shop in London, with 22,000 products from day one. The client uploads weekly newsletters, organises albums, puts new albums online, organises collections, uploads music samples, and we seldom have them asking for help. The design of that shop wouldn't win awards, but the important thing was to get people to what they were looking for, quickly. That all works through the metadata and taxonomies built into WP.
HackerNews just traffic-bombed me. Getting varnish up and running in a rush.
Good luck. It has been [tried before](http://www.xarg.org/2011/06/php-hacking/), [more than once](http://bytes.com/topic/php/answers/509299-php-fork) in the past. They're either unknown or dead projects now. It doesn't matter if you make the greatest forked php version ever, if it isn't compatible with the code out there nobody will use it.
I agree, you can't [just](http://www.reddit.com/r/PHP/comments/17bji2/pissing_in_the_wind_about_phps_solutions/c844njn) fork PHP. It also can't break backwards compatibility with existing PHP code. There are already plenty of good languages that aren't compatible with PHP.
Could be intresting if you upload the results with you commentating on it.
I understand the problems with making it just work, but I consider the problem that we have right now to be much bigger. Making Unicode the default isn't aimed at people who know about Unicode; it's aimed at everyone else. If we can tell them to "use UTF-8 and you won't have to worry so much about it" then that'd be a huge gain. I know that there's still people that can't/don't want to use UTF-8. Shift-JIS is still fairly popular in Japan, a bunch of things require UTF-16 and I'm sure there's other encodings still in common use. [Python 3 solved it pretty elegantly](http://docs.python.org/3.3/howto/unicode.html); "string" represents an Unicode string and "bytes" just represents a stream of bytes. There's methods to convert between the two but for the most part, you just don't have to worry about encoding.
I say it to myself, in the way it should theoretically be pronounced, given its spelling, then I always spell it correctly.
Weapons.
So if you were conscripted to join the military and go to war you wouldn't want your weapon work? Cool.
It's inclusive bro, enemy wouldn't have working weapons either, we'd all be pulling the trigger and jack shit would happen, then we'd all go get pissed at the local strip joint instead. Yeah, is pretty cool.
Yep, cool.
You *can't* just say use UTF-8 and you won't have to worry. If everything in the world worked on UTF-8 then that might work but it isn't. And you can't just patch over that. You need developers to be explicit about what encoding, if any, they're reading from a file, getting from a database, or receiving over HTTP. Python 3 actually didn't solve it all that elegantly; some of that design was *specifically* bad for web developers and web frameworks and is one of the reasons why Python 3 uptake has been so slow for web development. Lastly, your suggestion completely break backwards compatibility given that PHP strings are just as likely to contain binary data as they are ASCII characters. Not only does that break code but also every piece of documentation or tutorial on the subject -- that's hardly good for newbies. 
i'd have to disagree. Pretty much all problems with technology become easier with time. Can you even think of one that hasn't? Why you would think this can't be solved just because it's "complex" or "hard" is beyond me. Your boss must like listening to you complain about why you can't provide any solutions for you company's problems. And who said anything about waving hands?
Just because you issue a rallying cry doesn't mean everyone will instantly jump on board either. Maintaining a language, even one that already has a start, is not something you take lightly. It's a big commitment. My point is, don't tell everyone else what they should do unless you're willing to lead the charge and start the work.
Another vote for [Guzzle](http://guzzlephp.org/)! It's pretty easy peasy and you can still do custom cURL options with it if you want.
http://www.openwebanalytics.com/
Why is this dude tagged as "Don't listen to me"?
You really should ignore everything I say and verify it yourself.
Almost all of the examples look just like they would with Pimple. And using annotations for DI looks like a really bad idea. Unless the examples are incomplete, DI is being hidden away and replaced with magic. Not to mention this would tie my class directly to the container. No thanks.
I like to say that WordPress is like democracy: it's not a great system, but it's the best one we've got.
&gt;It also needs a proper separation of functionality and themes. That is the killer at the moment That's the reason I do not do "theming" work. I WordPress a lot, and do a ton of work with it. But I can't just build a theme. No "plugin-like" functionality belongs in a theme. I'll build a whole site, custom plugins and all. But I won't just slap together a theme and send it out in the world. 
I would be afraid to debug this code. What's $bar and why did it magically get a method? It would have to be instantiated, but there's nothing there. I'm not a fan of magic.
I've had good luck with Guzzle. It has a nice plugin framework (event-driven like Symfony2 or Zend 2) that makes it nicely extensible.
Are you trying to destroy the session and cookie? It's only going to do one of those right now with that logic. If the cookie is still set does your code consider them logged in still?
unset (session [user id])
The idea that I can't suggest a course of action merely because I can't, or would be ineffective at, leading the charge is ridiculous. I'm free to suggest it and everyone is free to ignore it. This is like the 3rd or 4th article on this issue from different developers. While the idea behind them is to influence the current direction of PHP development but it's becoming more obvious that change will not be forthcoming. 
Very few things are ever *solved*. Is the problem with memory management *solved*? Sure we have many different kinds of automatic garbage collection and manual memory management but that doesn't *solve* every programming problem involving memory. Things have improved; certainly internationalization is much easier now than it's ever been. But it's still not at the point where you can make it just work. Maybe in another 5-10 years it will be there and we can revisit this issue. You can't force the future. UTF-8 is only 10 years old. Unicode is 20 years old and they didn't get right the first time. Somebody wants Unicode to "just work" without giving much explanation about how that's supposed to happen right now -- sounds like waving hands to me. 
Been using it for some time, very happy about it. Keep up the good work :)
I've been using the "new" design for about a year. It's fine by me. http://prototype.php.net/manual/en/function.opendir.php
Dochub is nice, but just way too slow to load for me. :(
Lovely! I'll soon publish a Drupal contrib vulnerability caused by type juggling. Lesson: use strict comparisons when doing important string compares.
Also, word-wrap: break-word;
I would be OK to talk about annotations if PHP supported them. But right now it is just Dependency injection with comments in PHP.
With Pimple, one has to explicitly call it to get dependencies. That's useless code and that implies much more coupling to the container. I hope someday the @Inject annotation will be standardized into an external package (thus removing any dependency to PHP-DI). After all, it is used in Zend Framework, Symfony, ... It's a very standard annotation.
Why has that not been pushed to the front already?
&gt;This is a work-in-progress experimental design. Things will be broken and unfinished! You may prefer php.net
Annotations are used by, amongst many others, PHPUnit, Doctrine, Zend Framework, Symfony... Also, the @Inject annotation simply marks a property for injection. You could do the same in PHP: $container-&gt;markPropertyForInjection($object, "myProperty"); This is not the injection performing the logic, this is the container. This is simply a marker that could exist in other formats (PHP, YAML, XML...). And Doctrine's annotations of course change the behavior of your code. Just like if you use YAML or XML. PHPUnit @expectedException changes the behavior of your code. But these annotations are metadata, they are only that, the code around (PHPUnit, Doctrine ORM, Symfony...) is the thing that makes things happen.
The non-intrusive part is just bull. Sorry but how can code we rely on to have run, be non-intrusive? Pimple and a few small code changes ensures that DI is correctly set up and also, it runs via the constructor of the class, so you can simply test with mock objects, without reconfiguring your tests to work with PHP-DI which relies on untestable and unlintable comments.
A quick point on this. You will want to create a http interface first, defining all the methods you use (check out this https://github.com/thewilkybarkid/psr-http). Then you can wrap these libraries with classes implementing this shared interface. Then your application can use different http libraries without becoming tied to one in particular.
Testing the objects (marked with @inject) is the most simple thing: just don't use PHP-DI and set the property to whatever you want to. You can set mock objects where PHP-DI would have injected stuff. Regarding "non intrusive", what I meant was that is doesn't impact your code (or the way you code). You take any class, you don't have to add getters/setters, or rewrite stuff: you just have to add an annotation. So this is non-intrusive in your programming. There is no "PHP-DI" way of organizing and writing your code. Just like in Doctrine 1 you had to extend a Doctrine base class, now with Doctrine 2 you code your entities just like you want to, and you add metadata over it.
Oooohh I like! Thanks
Going by the examples, this isn't even DI, it's a service locator. 
Erm... it's the exact opposite. Explain maybe?
You're pulling dependencies from a central registry via the components, rather than injecting them externally.
It's certainly quicker (once it's loaded), but without the php.net comments its useless. Often, on the more obscure PHP functions the comments offer the only sane example usages.
Correct answer
1. The inject annotation could be (hopefully) standardized some day so that it is not related to PHP-DI 2. For example, the Front controller inject its dependencies itself (i.e. calls the container like a service locator). Its dependencies (controllers, services, ...) are automatically created and their dependencies are automatically injected (by transitivity). So when you code controllers, services, helpers... you don't have to call the container. To sum up: of course at some point the container needs to be called, but once is enough, so you can place it in an abstract/base/root class of the application.
&gt; $sql = "DROP TABLE IF EXISTS recipes"; &gt; echo 'Table Dropped Sucessfully'; &gt; $sql = "CREATE TABLE recipes(ingredient VARCHAR(32), quantity VARCHAR(32), mtype VARCHAR(32), address VARCHAR(64))"; &gt; echo 'Created table successfully'; &gt; $sql = "INSERT INTO recipes('A','A','A','A')"; &gt; echo 'Data Insert Successful'; You're not even doing anything here. You're just putting the SQL statement into a variable without executing it, then echoing, claiming that it has been executed. 
How can I execute them? Do I need to remove the $sql = " ... "; . As that would not put them in to a variable, but would execute them. Am I correct?
Just to point out, this is also interesting approach: http://vertx.io/ (no php support still).
No, you're way off. You really need to stop trying to run before you've learned to walk. First of all, you shouldn't even be using the mysql extension. It's deprecated. You should be using PDO or mysqli. Secondly, if you want a query to execute, you need to actually pass it along to the query method of that extension you're using. http://php.net/manual/en/pdo.query.php http://php.net/manual/en/mysqli.query.php
&gt; that's how containers work To a degree. Your classes should still be highly independent and decoupled from the framework, and they should be capable of performing their functions without the aid of a container. The classes you've shown in your examples are highly dependent on being initialized by your container. They couldn't even function any other way, because you're using reflection to assign values to private properties instead of using proper setter method. Which not only violates the [principle of least astonishment](http://en.wikipedia.org/wiki/Principle_of_least_astonishment), but it makes it impossible to reuse your classes without bringing the container along for the ride. The lack of configuration also means more surprises. I think what you've written looks great, and the code is very professional, but I think using this container would lead to an inflexible system that's difficult to debug.
&lt;important&gt;do **NOT** use mysql_* functions. ever. http://php.net/manual/en/function.mysql-query.php read the warning.&lt;/important&gt;
&gt; just don't use PHP-DI and set the property to whatever you want to So how you would test [this controller](https://github.com/mnapoli/zf-quickstart-di/blob/master/application/controllers/GuestbookController.php)? $guestbookService is private. How do you suggest that we set it up as a test double?
Hm yeah, I hadn't noticed that :)
I've seen a couple forks over the years, and they tend to be of the variety, "Here's the changes I need for the project I'm working on. Use it or don't." I haven't seen any real attempts to build a whole new open community around a fork.
The problem with this method is the same problem as using traits as an Injector, but even more so. You have effectively hidden a dependency (in your example, it's a private var). Even if it wasn't private, I still cannot use your class without knowing it's inner details. At the end of the day, you are still "asking" for the dependency rather then being given the dependency. It's not a bad implementation, mind you, it's interesting. But it still suffers from problems that DI works to solve.
My application is AJAX-heavy and I ran into a variant of this problem as well. A bigger issue has been the browser repeating the AJAX request after 60 seconds if it hasn't received a response. Changing the timeout option for $.ajax() didn't help either. The only bulletproof solution was redirecting the user to a new page with setTimeout() a few seconds after sending the request. Edit: After further investigation and help from eyebrows360, it appears the source of my problem is an AWS load balancer and not the AJAX request itself or jQuery.
Was going to reply that it doesn't have anything for SPL as well, but this falls right in line.
Why is there an AJAX request being done that takes 2 minutes to complete?
Normally, a fetch will only get one row/record at a time, so you have to either use a fetch_all method or a while loop. while( $row = $res-&gt;fetch_array() ) { $datarow[] = $row; } 
That's what the OP said in his article - it was for a progress bar.
&gt; I can work from anywhere, with any computer. All I need is an editor and my private key to establish an SSH connection. I don’t need to replicate my development setup on multiple machines at home and at the office. How often are you running into this issue? I have my own laptop I work on, because it has all the tools I like to use. Unless you're rocking vim, then I don't see the benefit of using a remote VPS vs a local VM.
Fair enough, and anything is much better than using your daily driver OS as your server.
I noticed that too, a bit disappointing.
Why don't you store sessions in memcache or mysql or redis or not on the file system of the server?
Ah, sounds like `SELECT U_Id FROM Users WHERE Username = "'.$username.'` is either not returning anything or getting a SQL error. Also, use parameters instead of injecting the variable in the string like that. $stmt = $mysqli-&gt;prepare( "SELECT U_Id FROM Users WHERE Username = ? LIMIT 0,1" ); $stmt-&gt;bindParam( "s", $username ); $stmt-&gt;execute(); $stmt-&gt;fetch(); 
This. Plus when/if you move to a multiple web frontend servers you don't have to faff about with NFS or similar.
Thanks for that clear tutorial, my pet project is outgrowing its shared hosting, so the more I get to know about VPS, the better. I had 2 questions: - Any recommended literature on setting up a production VPS? e.g. Could I base my production server on this tutorial or are there other issues with those (like security)? - I hear a lot about nginx being faster than Apache, any thoughts on that?
belgianguy, I'm definitely a developer rather than a sysadmin, so I'd look elsewhere for advice on running a production box. Same goes for the nginx advice. I've used it as a LB / reverse proxy but that's the limit of my experience there.
Saving the session in a file is the default behaviour of the PHP. And everybody will have this problem if they use Ajax requests. 
If you use HaProxy as a gateway for your webservers you don't need to centralize your sessions because one user will always be redirected to the same web server. edit: You can create a load balancer yourself in node.js if you wish and if you set a cookie so each of the users will always request from the same server, you don't need to centralize sessions. 
I just have a really long query that takes a lot of time. It generates lots of documents in a solr database. Hundreds of thousands
I was just researching the date() function in PHP and discovered something I never knew existed. They already have a properly formatted email date/time stamp that even includes the timezone offset. It is **date('r')**. Hence all that code I wrote before can be condensed to this. The only thing I'm not 100% on yet, is whether that automatically takes DST into account. // Set your time zone to Central Time date_default_timezone_set('America/Chicago'); // Create a valid RFC 2822 (email) datestamp $dateStamp = date('r'); $body = "Name: $name \n\nEmail: $email \n\nSubject: $subject \n\nMessage:\n $message"; $recipient = 'email@gmail.com'; mail($recipient, $subject, $body, "Date: $dateStamp\r\nFrom: $email\r\nReply-To: $email\r\nX-Mailer: DT_formmail"); I guess RTFM is an acronym for a reason. :-/
I am not trying to do file upload. There are better ways to do that with PHP. The comet type stuff was for a web based chat. The other example is a long Ajax request that I cannot change and i need a progress for it
I still use Doctrine 2 but opt for yml. Though unfortunately there's still some coupling with Doctrine in my models when using relations :/
Add a setter. Most of the examples present the most basic use case to make things work (and that may confuse, I understand). There is nothing preventing you to to correct DI by writing setters.
Why not create a backend script to do this and leave the AJAX for triggering the document creation and checking the status? ^Assuming ^this ^is ^not ^already ^how ^you're ^doing ^it
OK misunderstanding from my side.I still don't see the point of annotating, instead of using constructor type hinting + injection the truly DI way. The annotations make it more like a service locator, like nikoon says. 
It's not a bad idea, but we planned a queue that will process all document creation and edit to be implemented. How would you spawn the backend script ?
Interesting issue i never ran in to, i started with a file upload in html5 with drag n drop, then an array was processed through an ajax class, i can do up to 70 tested concurrent requests all running smooth as a button. i dont use php sessions, i use a cookie and a sql session. I also dont know if its something your doing in your jscript either. I created an object which could be created on each request with a stack of requests in a parent file. This way you can do percentage of multiple files uploaded, monitor which ones succeed or fail, which ones hang, and which ones dont get a response and report back to the user. Two sides here, dont use the session, or is there something wrong with the way your using your AJAX in the first place.
This container sets private properties instead of using setters. That's the magic people are talking about.
I completely agree that you should do your development on a matching server, or the same server... that said, I recommend an SVN like SpringLoops instead of a code editor that uploads automatically after each save.
Why not use a websocket?
You realize I'm just the guy pushing the buttons and not the one making this decision, right?
This is fantastic, and it's not just PHP! Thanks!
&gt; I hear a lot about nginx being faster than Apache, any thoughts on that? It's not so much a case of it being faster. That's a gross simplification. It's that to keep PHP in the Apache worker's memory means you have to use a prefork *MPM* - that's the bit that decides how Apache actually serves clients. With the right MPM, for static content and such, Apache's performance is as good as nginx, or near enough that it doesn't matter. But mod_php just isn't compatible with such a worker model. FastCGI lets you keep PHP out of the worker processes completely, which has obvious advantages: if you have someone downloading a page via dialup, you don't want to devote a large amount of resources to them over the entire minute they're downloading your large page. You want a PHP process to generate their page, then move on to generating a page for another client, while preferably your webserver's light worker thread (using the kernel cleverly: events and mmapping) takes care of slowly eeking out their response from memory to the socket. FastCGI lets you do that. And PHP-FPM is a (now built-in) tool to manage PHP worker pools of the sort you need to do FastCGI. (All the old process managers wouldn't cope with PHP going haywire after serving a large number of requests/being around for a while; even now best practice is to regularly cycle PHP workers to avoid deadlocks in things like APC - PHP, it seems, is hard to wrangle across requests, even when you're built in as an extension.) You *can* do FastCGI with Apache. And recent versions of Apache with the right MPM are pretty fast. But most of the time, when people talk about PHP on Apache, they're talking about mod_php with the prefork MPM. And that is technically inferior to using FastCGI, which is more stable and easier to set up than it has ever been (if still less battle-tested than mod_php). *Especially* in the case of VPSs, where you're often bottlenecked on memory, rather than CPU or IO. When people talk about PHP on nginx, they're *only ever* talking about FastCGI. Hope you followed that. I don't know of anywhere that explains it especially clearly, but if you follow the concept of two specialized worker pools (http and php) being more efficient than a combined one, and then ponder on why PHP needs a *process* rather than a thread to generate a page (hint: [libraries, interpreter design](http://php.net/manual/en/faq.installation.php#faq.installation.apache2)), you begin to see the logic. And, all that said: nginx is great, and I find its configuration format far nicer. And it does have the edge in benchmarks AFAIK. So, if you're going FPM anyway, give it a look.
What happens if I do in PHP session_start() ? Doesn't this block my websocket ? It's not a protocol problem it's a file lock problem.
The session was the problem
http://phpmaster.com/
websocket would only need one connection. 
Too much info in the select. The logical one (and, I guess, it's what you want) would be 'get me list of links with a count of votes for each link', and then the sql select would be: select links.id, links.title, links.url, count(votes.id) but a 'GROUP BY links.id' should be added
When you do a join, it is normal for each row to be duplicated if there are multiple matching entries in the joining table. If you just need the # of votes, look into GROUP BY on your links.ID and then COUNT in your select statement on the vote ID. 
Is this still powered by the docbook backend? It is a really horrible way to document API/functions because there is no guaranteed consistency for those of us that need to extract the docs programmatically.
I'm absolutely with you. The comments that share 'benchmarks' and tell you how to do things 'the best way' are always wrong.
Nice explanation of the differences ... thanks!
Yes. Doesn't make it any less of a silly question. Probably a question best left unasked.
Yep. It might not be great to extract content from, but Docbook isn't going anywhere, given how much is in there.
Problem is I still need the whole votes table and not just counting it.
Can you provide some quotes of his recent comments and where he wants to take php? 
You can better use mPDF, which is an open source and you can use WriteHTML() of mPDF class which accepts the html content as parameter where you can call your own function which returns the HTML content as HTML.
Here is what the linked Quickmeme image says in case the site goes down or you can't reach it: &gt;Title: It annoys me too, but definitely a first world problem. &gt;Meme: First World Problems &gt;* MY PROGRAMMING LANGUAGE OF CHOICE &gt;* HAS AN INCONSISTENT API &gt;^〘[Direct](http://i.qkme.me/3sr2jm.jpg)〙 ^〘[Background](http://imgur.com/cgDpI)〙 ^〘[Translate](http://translate.google.com/#auto||MY+PROGRAMMING+LANGUAGE+OF+CHOICE+-+HAS+AN+INCONSISTENT+API)〙 [Why?](http://www.reddit.com/r/qkme_transcriber/comments/o426k/faq_for_the_qkme_transcriber_bot/) ┊ [More Info](http://www.reddit.com/r/qkme_transcriber/) ┊ AMA: [Bot](http://www.reddit.com/r/self/comments/vxeak/hello_i_am_a_bot_who_posts_transcriptions_of/), [Human](http://www.reddit.com/r/InternetAMA/comments/12gog9/i_am_the_creator_of_qkme_transcriber_a_definitely/) ┊ [Voted Bot of the Year 2012](http://www.reddit.com/r/truebestof2012/comments/160lrw/truebestof2012_winners/)
What are ya, 12 years old? Don't use a stupid meme. Give us your thoughts what you think should be happening, or why you see an issue. This just tells me you've got no idea.
In my years of web programming I have learned that doing anything with the assumption that their client will always be talking to the same physical server is one that will eventually come back to bite you in the butt. In your case, what if the web server they're talking to goes down?
It may be inconsistent but it's way better documented than other languages (or frameworks). It may still skimp on certain libraries but for the most part I don't need to google 50 pages or guess. I'm looking at you Python. For example: PHP - [hmac](http://php.net/manual/en/function.hash-hmac.php) I know the return types, parameters and what types they are supposed to be. I also know what algorithms it supports with the hint of how to find the full list. Most importantly - it shows an example. The examples are usually not exciting - but the simple fact that you see how it's used is extremely helpful. Sometimes they go the extra mile and show how it's actually used like the [GD libraries](http://php.net/manual/en/function.imagegd2.php). Python - [hmac library](http://docs.python.org/2/library/hmac.html) * What format does key have to be in? In some languages, it's actually a byte array, in PHP it's a string * What are the possibilities for digestmod? * The output types for the method are there but buried in the description
Set a cronjob to run every x minutes; UPDATE rows with &gt;= 30 minute timestamp If you need anything more than the basics, use a queue system. What do you mean `$_GET` injected? *Always* distrust user input and escape it; better yet, use PDO and named parameters.
I've been using e.g. insert into blah (d, a, g) VALUES ('d', 'a,' 'g'); as well as mysqli_real_escape_string( trim()); I'm kinda new still I was wondering if I need to protect the $_GET variables same way I do the $_POST, also, is there a good tutorial on the cronjob thingy, I'm not to good with timestamps and what not. Thanks.
Yes, $_GET can be injected, all someone has to do is add "?var='; DROP ALL TABLES'" to the end of the URL and you could be screwed. Second, WHY do you want to set it to 1, but turn it back after 30 minutes? As MySQL (as far as I know) doesn't support that, you could do a cron, although my gut tells me you'd be better off storing a datetime instead, and then your program can check if it was in the last 30 minutes.
Not sure what exactly you're trying to do but another way to go about it is instead of using an enum(0,1) field, use a timestamp field. When you do the UPDATE, update the field with a current timestamp and when you do a select, only select fields where that field is &gt;30 minutes.
I'm making something to allow people to add themselves to a queue, so other people can find them, but only while they're online, if somebody forgets or leaves their computer for more than 30 minutes, I want the value back to 0 so they do not appear in the list anymore
A timestamp would do the exact same thing, you just keep it updated as the user uses your website. If they stop navigating, the timestamp doesn't update, and your app logic can remove them after 30 minutes of inactivity.
Ok so, explain it to me like I'm 5 years old, or do you know of a tutorial, been googling but come up with squat.. No idea how to perform the logic you're saying. 
Setup an ajax request on their browser that triggers every 10-30 seconds. That ajax request will update a column on that user's row in the "user" table. Namely, a timestamp column (int works nicely for time() calls). Let's call it "lastSeen". Then when you want to see if they are no longer online if "time() - lastSeen" &gt; (30*60)" 
K, say you have a users table, add a field "added_to_queue" and update it to the current time when you want to put them in the queue. Then, when you show the queue, you can do SELECT * FROM USERS WHERE added_to_queue &gt; NOW() - INTERVAL 30 MINUTE.
no need to do it with ajax most likely. rarely will someone sit on the same page for 30 minutes, just have it update on page load
True, but often depends on the application. I imagine, though, for the level of experience the OP is demonstrating, he's probably not building an AJAX/MVC/backbone/mustache/node type app.
Thank's that works now for a little fixer, but I would like it to unqueue users by setting a value to 0 after a certain time, this will work till I figure it out, thanks alot
I kind of agree with this point. Having two different development machines would kind of drive me nuts. I have a well powered laptop, lots of ram, fast SSD, and two docks. Laptop just undocks from the office and redocks at home (should I be taking it home). Works astoundingly well. There are a few perks too, like not having to pay for a VPS and I can get work done even without an internet connection.
To save setting up vhosts for each development sudomain, use mod_vhost_alias and VirtualDocumentRoot. Works great with wildcard DNS (or xip.io). 
Cool! You'll have to update wordpress manually though, and make sure you do, or it will probably get hacked.
Given all the comments I got, I will add constructor and setter injection. But I repeat: that's just to have the shortest example possible (cause you know, people spend like 5s looking at a website to make an idea; though it seems the choice is counterproductive here). I wouldn't write those classes without a setter. But this is obviously confusing and I'll rework the examples too. Thanks for the feedback.
Ah, that's very clear! Indeed, I hadn't yet found any explanation on the *why* it was faster, just that it *was*, but now I do know why. Thanks for that, saved it to my valuable internet snippets!
I agree with rq60. If you stick people to servers then you're not fault tolerant. You also can't easily balance your visitors onto more servers. If you find yourself under too much load; and you spin up a new server to cope then only new visitors would hit that new server and the experience wouldn't improve for the original visitors (and your original servers would still be overloaded). If you stick people to a single web server you can't: * Reboot a web server * Upgrade your software * Be fault tolerant * Balance load effectively You also can't scale *down* when it's quiet so you have to pay to be at full capacity all the time; which can be very expensive. If you need more than one web server: * *Don't* stick people to one web server * *Do* centralise your sessions (and add redundancy if you can) Doing anything else is just not caring about your visitors / customers. 
I have thought some about it earlier, and imagettfbox is one of easiest way to do it. You might get a bit more speed if you use some font library and do calculations yourself, but personally i do not think it is worth it. And there are use cases. When i was starting with web(and writing even worse code than i write now), had a project where i needed to generate images from layout made in browser (comics). So i had to make text in comic balloon be of same size as that in browser. PHP gd helped me a lot there :). Now, depending on your task, you might take a look at phantomJS, it works great for some stuff that i used GD for in past.
ignore me, i'm an edge case and i gave you well intentioned bad advise :)
Actually in one conference one of the PHP guys told that nobody have time to finish new design and the guy who started it left...
First thing you say to the underlings, "If you have any questions, please, ask me." Also, "I think you should try coding it like this." *Gives logical reasons.* I have memorized the depth of one of our frameworks so much that I have developers that ask me where a function is and I tell them the exact file path. This is faster than searching an entire project on disk. For what you should know is more about how handy you are at helping others.
If you, as a lead dev, are project managing then your employer is doing it VERY wrong.
&gt; I've been there, and I was spending most of my time doing that. In the end, the quality of everything was going down because I couldn't take time to produce work (code or conception) or do code reviews. I have the same problem. I can act like a lead or a senior software engineer, but I'm having trouble acting like both. I can't train everybody, fix every compilation issue, keep the source code tree clean, and produce quality code at the same time. I need to convince management that my time would be better spent actually not producing code (at least not directly) but making sure the rest get done properly.
If you did your job well, you do at this point have a few functions that you re-use at will, when you have to deal with HTTP requests. That could be called a library, you know. Of course you can use Guzzle or Buzz, that many people listed already. These are great libraries. Just be sure these libraries provide features that you need, that your own code doesn't provide and that you don't feel like adding. Because using an external library for the sake of...well, using an external library doesn't make much sense in your case, IMO. 
Be humble to start.
Absolutely this. It sounds like you have a long way to go if you feel this way. I've been in senior management for over 5 years now, and I am amazed by how much I don't know still. Here's a list of things I would be looking for in a lead developer. * Can you lead a team by creating an atmosphere of respect, not fear? * Can you set up a web server, soup to nuts, and customize it for the desired application? * Do you use some kind of version control and deployment strategy? * Can you inspire others to finished projects ahead of the scheduled deadlines? * Do you understand the sales process, and can you work with the sales and marketing team efficiently? * Will you find a solution for any problem that arises, instead of creating more problems for management to solve? * Are you an expert in every aspect of the field you wish to lead in, and can you effectively teach others to be experts? * Can you eloquently describe processes and procedures to a layperson? * Will you support the decisions of management, no matter what your personal feelings are? These are just a few things I can think of that a lead needs to handle. I would think twice before taking on this kind of responsibility prematurely. 
That (and SPL) was the first thing I checked too! We're programmers -- we're looking for more than pretty/easy.
One of the hardest parts of being a lead is getting your guys to the point where you can trust them, particularly when you didn't have any part in hiring them. As a lead, you are going to still code, but you also need to play the rule of teacher. While you won't be able to get them to do everything the way you would, you want them to do the best they can. 1) You don't want it to be that way exactly, you want to say "if you get stuck, don't bang your head against the wall, come ask me". When they do, ask them what all they tried and what the thought process was. You need to teach some people how to think their way through problems and just not give them answers, and some others just have no idea how to debug. 2) Make sure you have established coding rules and then schedule regular code reviews. Sit there, have them walk you through their code, but don't let it take more than minutes on a Monday. Explain why their mistakes don't work with the architecture, where they can do better, and ask them what they are proud of. I have noticed a lot of times, people work harder when they actually care about their code. If someone owns a module and can focus on that, rather than multiple small parts, they will often make sure that shines. You do need to budget in time to make sure you can do these code reviews, people will bitch, but it needs to be done. And why on Monday? Because you want it fresh in their mind for the week and honestly, Mondays are never productive. They might forgot why they did a hack in Friday, which will show them not to do hacks like that anymore, or comment your damn code if you do. Another big thing, keep meetings at a minimum and utilize asynchronous means of communications so minimize disruptions. Make sure you have at least the next week scheduled ahead, if possible, so people aren't thrashing with issues all the time. Yes, this makes you less agile, but it makes you more efficient when it comes to programmer time. Also, one of my own policies, I give you work I expect you to be able to get done in a week. If it takes you 60 hrs to get done, lets talk about why, if it takes you 30 hrs... go have fun. 
As I've said before... Wordpress is the modern equivalent of PHP-Nuke.
So you're saying that after you install PHP you have redis installed or that IT SHOULD be default ?
Can't you just have a db field for ip address and/or user id? If that ip or user id has already commended the player, don't allow it. Use AJAX to process and update the upvote instantly.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
off the top of my head, in php I believe you need $ip=$_SERVER['REMOTE_ADDR'] to get the IP address
Thanks for this. 
Thanks ill try to figure something out. 
Thanks, this is some great advice.
Sorry if I gave the impression that I am arrogant. I am not, I just want to better myself.
&gt;but we straightened him out. Did you have him whacked?
My point was that I am comfortable designing and writing applications, setting the processes etc. But that is not enough, hence this thread. &gt; Can you lead a team by creating an atmosphere of respect, not fear? Yes I think so. A lot of the developers I work with ask me for my advice because they trust my abilities. &gt; Can you set up a web server, soup to nuts, and customize it for the desired application? &gt; Do you use some kind of version control and deployment strategy? Of course. I am a fairly good sysadmin as well as a developer. I've had to "wear many hats" in my career. &gt; Can you inspire others to finished projects ahead of the scheduled deadlines? &gt; Do you understand the sales process, and can you work with the sales and marketing team efficiently? &gt; Will you find a solution for any problem that arises, instead of creating more problems for management to solve? Yes. In my current job I often work directly with sales or the CEO to get things done quickly and with little fuss. &gt; Are you an expert in every aspect of the field you wish to lead in, and can you effectively teach others to be experts? I am not sure. Perhaps I ought to try finding some online tests for PHP etc. &gt; Can you eloquently describe processes and procedures to a layperson? Yes, this is something I have to do on a daily basis. &gt; Will you support the decisions of management, no matter what your personal feelings are? Yes - although I am likely to offer my professional opinion rather than jump right into bad ideas. Thank you for listing these points, they're very interesting. 
Forcing UTF-8 down the throats of unexpecting PHP Developers is going to be a very bad idea. On the other hand, making UTF-8 available easily without having to arse around with utf8_encode() and mb_strlen() is going to make for a much better time for those that know what UTF-8 is, so they can use it optionally when it makes sense.
I'm saying that you are trying to ignore better solutions just so your blog post makes sense.
This post is extremely interesting because my son is going to be graduating and going to school for programming. I got him a job doing PHP programming for a small company in our town... they need some intranet reports and the like. But the structure of team programming is something he has no knowledge of. Going to have him look into this.
For sure. Who do you think should be responsible for handling sec upgrades? The site owner or the host provider?
fuck off, yeah?
In that case just store both added_to_queue and a field in_queue, and then anytime a user is added to the queue to the same query as before, but on page load set added_to_queue = the current time, and set in_queue to 1, then before you get the users in the queue, run something like UPDATE users SET in_queue = 0 WHERE added_to_queue &lt;= NOW() - INTERVAL 30 MINUTE.
or, this may be a little out of your league, but this is a good use case for redis, which you may want to look into.
The site owner...You're just not easy to upload files via PHP the way heroku's set up
I disagree. Nothing tells you he's not humble, all he's said may as well be true. Knowing yourself is very important, and when asking such a question to "anonymous" on internet, being humble is not very practical if you want to get understood in a short question.
My old Manager gave me some good advice when I was fishing for a promotion. Look at the job title for the position you want. If you meet/exceed the description, apply/ask for the position. If not, do everything you can to make sure you meet the guidelines.
Get involved with [http://phpmentoring.org/](http://phpmentoring.org/).
It may be different where you are but I expect lead developers to be more of a 'lead' as in 'leader' than 'lead' as in 'best developer'. That is, you'll probably be expected to actually manage, delegate, and architect on top of your development abilities. Based on where I work lead developers do less development, sometimes by quite a large amount, compared to being a senior engineer. If this is the case, be prepared. Be open with your subordinates, treat them as a team that needs a leader, not minions to be ordered around (Be invested in their success and they'll help you succeed)
Agreed. I'm now "Lead Engineer" and I spend more time in meetings than I do writing code, which is fine by me. Coding started getting boring a while ago.
First ask yourself what do you want your result to look like. Draw a table on your head of what results you need, and put that on the first part of your SELECT. Then add the JOIN and the GROUP accordingly. For instance if you want: | id | url | cnt | |:-----------|------------:|:------------:| | 1 |domain1.com | 400 | 2 |domain2.com | 900 | 3 | domain3.com | 300 That query will look like select distinct links.id, links.url, count(votes.id) as cnt left join votes on ... group by links.id, links.url Now that only brings the domain and click count. If you also need to fetch other information with the same query, such as user information. That information WILL be duplicated in each row, that's how databases work. What you can do is fetch the counts and the duplicated information in the same query, and then use an algorithm such as **Control Break** to display the data.
You just answered your own question.. find a job that is looking for a lead developer and apply if the company you are with does not see you as lead. As for your rant, I understand that you are frustrated but I'm not sure what does CTO and Lead developer position has in common? I would vouch that you in fact can't do CTO's job, you might 'code' better but that's 10% of CTO's responsibility and does not really matter to the senior management.
These are the kinds of questions I would ask in an interview, and the kinds of things I would expect to see on the cover letter of a resume. Sounds like you've got the confidence for sure, and I certainly wish you good luck.
Yes you're right. Nobody uses file sessions.
PDO prepared statements is on my list of improvements. There is some SQL injection prevention with ```$dbh-&gt;real_escape_string();```, right?
First of all, you've limited yourself to only working with a single data source. You literally can't work with two data sources because of the way you've coded it. Secondly, it's a PITA to test, as different objects manipulate the same data and you can therefore not trust its state to be accurate. I suggest you familiarize yourself with [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) design.
Yeah, I'm not looking to completely protect from all SQL injection vectors with library; at least initially. There are some design decisions to be made, partly just because I allow the developer to pass a WHERE statement of their choice, to allow some flexibility.
Here is a taste of how it makes things easier: **Traditional:** ```$db-&gt;query("INSERT INTO `people` SET `x`='y', `a`='b'");``` ```$newPersonID = $db-&gt;insert_id;``` ```$newPerson = $db-&gt;query("SELECT * FROM `people` WHERE `id` = '{$newPersonID}'");``` ```$newPerson = $newPerson-&gt;fetch_object('Person');``` **With Handy:** ```$newPerson = Person::create(array(``` ``` 'x' =&gt; 'y',``` ``` 'a' =&gt; 'b'``` ```));``` Edit: Formatting
Thanks for all this feedback, btw. It was designed with only a single data source in mind. A PITA? I'll read up on SOLID.
Yeah.... not what I'm saying at all. Keep going.
You might want to check out /r/cscareerquestions for related Q&amp;As on the same topic.
I agree
Generally, the advice in this situation is to consider the entire server compromised and start from a fresh install, restoring from a known good backup or (preferably) repository. The amount of time spent hunting and fixing problems is far greater than the time spent rebuilding. Plus you can never be sure the attackers didn't leave behind something that you overlook. Good luck. 
Thanks for the kind thoughts, we are in the middle of making a new secured system server but we are trying to keep the clients happy as our project has suffered heavy delays. And to be honest, I don't trust the backed up code; this thing has inserted well into the six-figure digits of lines with base64. That said, anyone know how to search regex/textpad for unmatched left parenthesis? '('?
While it sounds like you are good with the technology aspect of it, being a leader is whole different game. Being a leader isn't about having the answers, being a leader means that people follow you. It's also important to note that being a leader != being in a position of authority. For example, if you worked at a company that had a flat organizational structure (like a [matrix](http://en.wikipedia.org/wiki/Matrix_management) or lattice organization), would people follow you? People have basic needs as followers (the basics being trust, compassion, stability, and hope), and it's important to know and understand them if you want to be an effective leader. ..and as a warning... One of the biggest mistakes technical people make in expanding their career is that they assume that because they are good with the technology aspect of it, they will be good at leading people (This is a generalization, not pointing fingers). This is mistake for many people because: * Some people take leadership positions for the extra money but become disconnected from their passion of being a developer and eventually hate their job. * Just like becoming good at being a developer took time and talent, so does being a leader. Many people take the job without realizing the extra knowledge and skills they need to learn to be effective at their job. 
I guess it's safe to assume that you don't have any source control or a copy of the code not deployed to your servers... Probably your best-bet might be to run every file through '`php -l`' and any files that fail that syntax check you can look at manually. 
Sadly, no; the security of this system is in terrible shape and was even worse before I started working on it. I'm in the midst of talking with some of the devs to see if they have clean copies but I want to get all of my avenues covered as quickly as possible.
Not to be rude, but google man. You could practically copy/paste that whole question in as a single search and get accurate results.
Google "database unique constraint"
↑↑↓↓←→BABA
That makes sense. But do you think owners *would* want everything to be updated automagically behind the scenes, if it were possible?
I've run into this myself several times. Once or twice a company has recognized me as a natural thought leader and attempted to promote me to a management position only to turn around and make me more of an "dotted-line" manager after a few months. I just don't have the chops for performance reviews, evaluations, or real managerial type work. I need to be coding and leading people through code; not trying to field questions about benefits and sick time.
I agree with wvenable that lint is your best option if the injected code has syntax errors. This feels like a shameless plug, but I wrote this to help me do recursive linting. https://github.com/dprevite/lint You can also disable eval in your php.ini. http://php.net/manual/en/ini.core.php#ini.disable-functions
Its going to be a manual process. Anyone who reads this should go backup their code now and learn from this unfortunate mistake.
That really is one of the hardest parts sometimes. Coming up with an elegant solution that balances practicality with the reality of time constraints (including code refactoring, features, overhauls and so on). I like to say that the sign of a good engineer is one who can develop the same system, but simpler and less complicated. It's tough to not *over* engineer!
I'd rather surround myself with people smarter than me than with people that boost my ego. The former is most likely to be successful as a group in the long run (and thus make everyone happier and a little bit richer too, if I can help it). 
Thanks for the tip about disabling eval, correct me if I'm wrong but during my travels I heard that there is/might be some parts of WP which use base64 eval, is this the facts? The code as it was during the injection was error free but some of the brackets got missed during the cleanup process.
I agree wholeheartedly about this, also make damn sure your applications/code is up to date. 
PHP has thousands of constants built-in. People make all sorts of their own. I prefer class constants for most things, but some things just need to be global/are used everywhere. Generally speaking, I'd say that using it for database connection info is a misuse because you should have a handler that creates your DB connections, and it's the only one that should need to know that information.
To expand on what samg is saying: You don't use regex for things like this because regex is incapable of maintaining context, or keeping track of nesting depth. For example: &lt;?php if ($foo == 'bar') { echo '{'; } is an input you'd have an awkward time writing a pattern for to match curlies with because the curly bracket in the string is in a different context from the other curlies. A parser/lexer is generally used to determine if syntax is valid. It does this by scanning the file as a stream, and breaking the file up in to atomic pieces called tokens, and then analyzing those tokens to see if they appear in places that make sense. Regex does not generate atomic pieces - it just treats the entire thing as a large blob of text. The above php code would convert to: T_OPEN_TAG T_WHITESPACE T_IF T_WHITESPACE ( T_VARIABLE T_WHITESPACE T_IS_EQUAL T_WHITESPACE T_CONSTANT_ENCAPSED_STRING ) T_WHITESPACE { T_WHITESPACE T_ECHO T_WHITESPACE T_CONSTANT_ENCAPSED_STRING ; T_WHITESPACE } after being tokenized, making it far easier to differentiate context. In the tokenized model, the curly which is embedded in the string is not actually treated as a separate language construct. Instead, it's held in a T_CONSTANT_ENCAPSED_STRING token. You could probably write a program that found all the files and the number of unmatched brackets (php has a built in library for such things, have a look at [token_get_all()](http://php.net/token_get_all) if you want to try it), but it would probably be faster to do it by hand if you're not familiar with how such things are constructed. Additionally, it couldn't reliably determine where the missing bracket should go. This is the reason why a php program will error out when it finds an unmatched brace rather than attempting to repair it.
Absolutely right, learning by doing certainly does accelerate the process. My list comes from experience mostly, but it's been on my mind recently as I've just had to let someone go who was several year my senior. I kept asking myself what it was that he did that prevented him from obtaining a management position, but also what things I could have done better to help him succeed more. That's the hardest thing, some people you just can't help, but it's inspired me a little more to try and be a better leader.
Wow... what a garbage blog post. "power users have tried to access MySQL bypassing the SQL layer." "Future user experience will tell whether the MySQL 5.6 InnoDB Memcache plugin is good enough to replace Memcached installations." Do you even program or just try to sound like you do? 
you mean a stack?
I usually use constant as a human readable variables against some database column that has various statuses and yes usally in config files or begging of the class (if constant is related to that object/class) i.e. item has a status value in database define('ITEM_CREATED', 1); define('ITEM_PENDING', 2); define('ITEM_SENT', 3); so when used in if statement, is better to understand if($row-&gt;item-&gt;getStatus() == ITEM_SENT) or $row-&gt;item-&gt;setStatus(ITEM_SENT) 
Hah well thanks for the thought, Luckily web services aren't exactly our main avenue of customer service (because we have shit the bed HARD on it). I'm working to fix it with new servers I'm setting up, ensuring to do it properly the first time. For reference here's what was [injected](http://www.pastebin.ca/2306055) (along with tons of other smaller entries hijacking the HTTP header and google redirect
A) Is correct B) You can define them on class or global level, if defined on a class level they can be accessed statically but they are not within global space. For MySQL connection detail you should be using configuration files in most cases.
Yeah you got injected by a common PHP based 'root-kit'. In most cases your OS is heavily compromised. I hope you did not leave any passwords in clear text within your history / do not have ssh keys stored to other servers on that server. Good luck. 
You don't really need LIMIT 0,1 since username is expected to be unique. Trying to be fancy I guess. +1 on the bindings :)
"While I believe that the creation of PSR-0 was extremely important for PHP, I no longer care about autoloading. The reason is simple: Composer made it irrelevant." Umm correct me if I'm wrong but Composer uses same principle as PSR-0. For his point about Zend/Sympony, if he worked on any complex projects he would understand that it's done due to the fact that you can create your own framework library that might or might not extend Zend's files. Pretty pointless rant.
Lucas, I think this is a bit silly from overhead and deployment stand point. Most of HTTP daemon server parameters are set on daemon level for a reason. Why would your application set parameters that it (in 99% of the cases) has to read from daemons environment? 
People abuse constants all the time because they're available to any scope when globally defined. This allows people to write sloppy code more easily. Constants shouldn't be used to define configuration. They should be used when you have non-human readable things that won't ever change.
As an example of why this could be a problem, suppose later along the project you develop a hooks system, where code you can't pre-examine is executed in your environment. Now you have the problem that people can inspect your environment and determine your database details. 
Do you inline your database connection info? I like the use of constants in a configuration file for this purpose. Sure, maybe it's only used once, but that value changes depending on the server environment. Generally speaking, I'd say this is an ideal use of constants. Karma for 1 DB connection though, get those 100ms calls outta my site!
No - database information is stored in config files that are only used in the relevant functions/classes.
Now I'm curious! :) We've got a config file per language used in our app, like, 4. There's a ton of 3rd party API stuff we do, so I'd think we'd have an above average amount of config data, but it's totally manageable in a single file. Actually, it'd probably be better to have them all in json or yaml so we didn't need to duplicate some data across languages.... Anyway, how many config files do you have, and is it difficult to maintain across servers? What are some of the advantages you find to breaking up config by classes (or groups of related classes)?
http://en.wikipedia.org/wiki/Pushdown_automaton A specific type of algorithm that works with specific data structures to process input, it has a computational power enough to completely programmatically solve your described problem, given its computational complexity. Unless you have a CS degree and know about those kinds of things, or love reading through wikipedia and articles/introductions about computation modelling and actually want to implement the thing, you're probably stuck with some sort of manual process.
We don't break config up by class, we separated the DB info out specifically. The rest of the config is stored in the DB and cached locally by a background cronjob every minute. So... it's one config file on each server as a bootstrap, and then one config that's built and cached by the server itself.
What permissions was your PHP / apache running as? [This](http://www.derekfountain.org/security_c99madshell.php) is what was injected, so your entire server might have had a backdoor installed after.
Nice setup, Ty!
True, but you lose the flexibility of being able to remove nodes from your pool as and when you want. Creating a system to gracefully shutdown a node would add complexity not required for a central session store.
There's a number of ways to do it. Without jumping into what kind of code you're writing etc try this. Build an array that contains each form fields name and the type it should be validated against then create a function that accepts this array and cases the type to validate the field. You can then return an array of errors and handle those easily too (by just looping over the return array)
Well, there's [filter](http://php.net/manual/en/book.filter.php), but you might be interested in investing in a validation library. 
Your blog post was informative. Why all the hate...
That's honestly a bad example. Your database details can be inspected no matter what you do, if arbitrary code is being executed. Whether it be through simple inspection of the stack trace, or through reflection of your database handler instance, if your database credentials were ever in accessible memory, then they're likely still accessible. Executing arbitrary code (such as a user plugin system) should be done through sandboxing. Something like runkit would be the best way to handle such things, but you could also simply spin off child processes and communicate over unix sockets, or something to that effect.
The clues in the name. Constant. As in constantly there &amp; constantly the same.
Surely you should use class constants for this instead of global constants? e.g. class Item extends Row { const STATUS_CREATED=1; const STATUS_PENDING=2; const STATUS_SENT=3; } $row-&gt;item-&gt;getStatus() == Item::STATUS_SENT;
http://framework.zend.com/manual/2.0/en/modules/zend.validator.html
Overuse of constants (especially for things like configuration) is a code smell, they are just another form of global (albeit one where you don't run the risk of code manipulating them and causing problems elsewhere).
I saw this blog post on HN and submitted here. It's not mine. My english is not even good for writing a blog post in english :)
This is a perfect fit for object encapsulation. I've got a small validation library up on GitHub if you want an example (there's a million different ways of doing it). It feels like more work, but when you come back later it's much easier to update/fix. https://github.com/Dachande663/PHP-Validation
Tell that to WordPress... 
&gt;I have memorized the depth of one of our frameworks so much that I have developers that ask me where a function is and I tell them the exact file path. This is faster than searching an entire project on disk. Tell your boss to stop being a cheap cunt and buy a fucking SSD and more than 512MB RAM. Or just use a proper code-aware IDE.
[Yii's validators](http://www.yiiframework.com/wiki/56/) are pretty sweet. They're capable of extending server and client, running though a model or individually. 
The thing that always gets me is tabs/spaces. I'm a fan of tabs because they're faster to work with. Deleting a tab is one character, but deleting spaces is 4 (if you use 4 spaces per tab). They're also 3-fewer bytes data size. There are benefits to spaces in standard indenting width, but I prefer to be able to tell my editor how big to make the tabstops. Why do standards organizations choose spaces? Is there some benefit that I don't know about?
Any good editor will allow you to shift+tab to remove tabs or spaces, so deleting 4 spaces is never an issue. Tabs vs spaces is an eternal argument that will probably never be resolved. I prefer spaces as they're always the same width - tabs are very easy to mess up when people have different settings.
The FuelPHP 2.0 validation component is a standalone composer package that you can use anywhere: https://github.com/fuelphp/validation Otherwise, just go on Packagist and type "validation" into the search: https://packagist.org/search/?q=validation
Sorry, I was slow getting to this one, but it's awesome! Thanks so much for your reply.
I use both and I find that it is the closes to perfect that you can get. I have a psychology background and just like in psychology, if there are 2 sides (nature vs nurture) the best options is that both should be considered and used. I use tabs for indenting. This allows my fellow developers to view the indentation as they wish. Were you raised with 2 space indentation or 8 space indentation? That is fine, the code will look good no matter the amount of space your tabs are since it is only used for indentation. I use spaces for alignment. Need to align text? Values in an array on multiple lines? Arguments in a function on multiple lines? use spaces since, as long as the editor uses mono space font the spaces will always align, irrelevant of the tab size, which might make it look like crap if you are trying to align with tabs and some one changes the tab size. 
&gt; tabs are very easy to mess up when people have different settings. How so? The only time I've ever seen this is when someone has their editor set to something other than _'4 spaces per tab'_ and then they mix &amp; match spaces and tabs -- usually because a developer is adamant about their spaces vs. tabs preference, and chooses to go against the project's standards. If everyone abides by the same formatting there are few (if any) issues.
Yes, that's useful! But I hate that comma formatting style, lol. And no, not wanting to argue it (as it's an old argument as well), but it serves as a good example of how different opinions on something like formatting can be.
Although I don't use Go, I really, really like [their take on formatting](http://golang.org/doc/effective_go.html#formatting): &gt; Formatting issues are the most contentious but the least consequential. People can adapt to different formatting styles but it's better if they don't have to, and less time is devoted to the topic if everyone adheres to the same style. The problem is how to approach this Utopia without a long prescriptive style guide. &gt; With Go we take an unusual approach and let the machine take care of most formatting issues. The gofmt program (also available as go fmt, which operates at the package level rather than source file level) reads a Go program and emits the source in a standard style of indentation and vertical alignment, retaining and if necessary reformatting comments. Problem solved, at the language level; there is 1 standard, it's executed programmatically, and thus there should never be a single argument about how any of the code is formatted. I really wish there was something like this for PHP as a core offering, since if it's only a 3rd-party package it will never be a standard.
If you're building a brochure site you're much better off just using some pre-built CMS. Symfony is very flexible and very powerful, but if you just want to smash together a 5 page site I'd say using that would be a large waste of time. Unless, you want to spend a few weeks on a simple site. Learning a framework is never a bad idea, but don't use a sledge-hammer on a one-inch nail.
Why WP site?
Yet another relatively substance-free article. It boils down to: "USE PHPSTORM BECAUSE IT FIXES CRAPPY INDENTATION". I feel like I wasted a bit of my life reading it.
For: // Setup database handle $dbh = new mysqli( $host, $user, $pass, $database ); // Pass Handy the database handle Handy::setDB($dbh); Why not do the dbh in setDB?
OMG! I read your blog! Huge fan! Well, it's more like a 10-15 page site, so maybe it's not *just* a brochure. I suppose I only meant it's relatively small. It's also going to have to interact with some 3rd party scheduling API, though I'm not yet sure to what extent. I might only need to embed that somewhere. My point being, it's not *tiny*. &gt;Unless, you want to spend a few weeks on a simple site. Maybe I do? It will be my first professional freelance site, and I really want to lay some good foundations with regard to my own knowledge and skills here. But maybe I'm misunderstanding the nature of Symfony. If I *learn* Symfony and get good with it, would it still take "weeks" to create a simple site? Or was that more in reference to the Symfony learning curve?
Yeah, I was just talking bollocks because my preference for spaces clouded my mind. I *do* prefer spaces because they're always the same width, without having to mess about with tab width settings, but I entirely agree that the project standard is king, and I'm not precious about my beloved spaces in practice.
Another Kohana fork?
In the same way Kohana is CI fork. A rewrite with similar interface rather.
I particularly liked the part where he says that other IDEs are bloated and then recommends PHPSTORM! Personally, I use Coda because it is much farther from that "bloated" status. I do fire up PHPStorm when I need a good interactive debugger though.
Well that's kind of an old argument that comes for each framework. WP is awesome for things like code highlight and HTML editor, there is no reason to reinvent the wheen with this. I heard people complai a lot about why Yii (my personal favourite) uses VBulletin as forum. Why wouldn't it? The devs should concentrate on making a framework rather than writing a new halfassed forum
* Went there * Saw "$this-&gt;response-&gt;body=" * Left. Good day sir.
I would suggest just going with wordpress: * you have a convenient HTML editor, categories tags, image upload out of the box * a lot of plugins so you won't have to code every feature you like * caching with WP-cache for speed If you really want a framework: Symfony IS an overkill. Try: * Slim (if you have a very simple site, that needs only some basic stuff) * Yii comes with redactor.js now and it's a damn good HTML editor, also there are plenty tutorials for it * There is a tutorial for PHPixie in a post here: http://redd.it/17i1z2 . Seems lightweight and nice too (just finished their tutorial myself) * Kohana is very good too, i'm using it for my current project 
silex is a reasonable alternative if you want to get familiar with the symfony framework components, but don't need everything the full stack framework provides (yet).
You might want to check out [Bolt](http://bolt.cm). It's a simple CMS, built in Silex, on top of a lot of Symfony components. You won't have to reinvent the wheel, but you can still hack away at the Symfony/Silex code, if you feel like it. &lt;/shameless plug&gt;
I assume you mean Symfony2? Learning Syfmony (i.e. 1.4) is pretty pointless at this juncture. Eidt: Wow downvoted for stating a 100% valid fact? Symfony 1.4 is dead, people. Perhaps you're in denial??
Tabs are for people who never worked on large code bases with multiple groups. Please give me your downvotes because the truth hurts. * Please for the love of god stop with '3 fewer bytes thing' * If you are accessing code base from a device other than a workstation (mobile terminal, a computer that has an editor which does not have tab preferences set (even your own server that runs the code probably does not have that set) in 90% of the cases the code will look inconsistent and borderline unreadable. Not to mention that I'm not going to setup my tabs/editor when I need to access the code due to emergency, space works all the time. * If you are using profiling tools or tools that parse code you might have weird results with tabs if application is not setup in mind that you can adjust tabs. * Just because the code looks great with your current tab setting, when accessing it on an editor with a different tab setting you might be getting a different picture, the point is that the code does not 'feel' the same across different machines. Take line limits for example, etc. * There are tons of inconstancy with tabs, for example if you have tabs in your code / editor but go and edit .htaccess for example and use tabs there enjoy your unreadable .htaccess file with multiple alignment issues. Also Python and Ruby both follow spaces, so it's time to stop with the tabs. /rant 
That's simply horrible. 
He is a time traveler who is posting from 1842 when 3-bytes took 100 years to store.
It could be done this way: // Setup and Pass Handy the database handle Handy::setDB( new mysqli( $host, $user, $pass, $database ) ); I could make it so you could do this way as well: // Setup DB with Handy Handy::setDB( $host, $user, $pass, $database );
The MySQLi extension is now object oriented, so the mysql_query call will actually return a mysqli_result object. You can call $result-&gt;fetch_* (replace * with your function of choice) to get the result.
It depends what your goals are. From a traditional business perspective, if you are thinking about frameworks and talking about a brochure site you are on the wrong track. Sure, there is some value to learning a new technology, but learn it while playing with a side-project. You should be focusing on the requirements on the project and the future maintenance. * Who needs to update it? What is their level of understanding with the web, in general? * How many pages will it have? * How should it be organized? * Is there any special functionality? * etc, etc.
Cheers, So instead of. $query = "SELECT password FROM user WHERE username = '$user'"; $result=mysqli_query($connect, $query); $currentpass=mysql_result($result,0,"password"); I should do something like. $query = "SELECT password FROM user WHERE username = '$user'"; $result-&gt;fetch_row($connect, $query); I'm not sure what fetch functions there are to use. Or which one is best.
Honestly, Symfony is overkill for this situation. However, learning Symfony is *not* a bad idea! It's really well put together. Further, tons of projects are beginning to integrate it. In my opinion, the best way to learn Symfony is by getting a handle on each component used in the greater "framework". [Fabien Potencier](http://fabien.potencier.org/) has a decent set of write-ups that explore building your own framework on top of Symfony components. It's a great way to get intimated with their capabilities.
Out of curiosity, why didn't you just build your CMS atop Symfony itself?
yeah I agree, I use the auto-indentation of the IDE and I have no problem seeing a trailing comma on the last element of the array (in PHP) but I wouldn't like that comma half-way in the middle of my tab.
I agree, however I have no problem using a heavier IDE like Netbeans, as I value my productive time as a programmer enough to warrant not doing my coding on a potato.
With all the new generation frameworks that have been released, or are in beta stages right now, do we really need a new "last-generation" framework? Basically, why u no use Composer? This is how people made frameworks between 4 and 2 years ago. It's not how anybody is doing things today. Well, you and Yii.
If you're looking to dive into Silex, something like this might be useful: http://lyrixx.github.com/Silex-Kitchen-Edition/ It's easy to get started with a lot of stuff, just strip out everything you don't need. 
If the point of doing this is more about learning something valuable then go with Symfony2. It is the king now and will be in PHP for the forseeable future. Most that recommend laravel just were to intimidated to learn Symfony and there is quite a learning curve but that's because it uses so many excellent OO design principles. You will take your coding to a new level.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC That said, http://php.net/manual/en/mysqli-result.fetch-row.php http://www.php.net/manual/en/mysqli-result.fetch-all.php
You didn't address his fanaticism. You should probably remedy that.
&gt; If the point of doing this is more about learning something valuable then go with Symfony2 Depends on the time frame of the project and what it's main purpose is. The project is perhaps better suited for Laravel but if OP wants to come up to the enterprise level when is a better time to learn? OP must answer that question and we are here to help. I will say this again, Symfony2 learning curve is quite steep especially after you factor in Doctrine 2. So OP should decide if and when he wants to make the jump. Also Symfony2 community is **large and active** and a great thing to be a part of. As far as silex Fabpot said it himself "If you are unsure of architecting your project use Symfony2. If you want to architect it yourself use Silex." Also OP for interacting with that API you probably want to use Guzzle library. Will plug right into Symfony or Laravel. 
Thank you, and my bad I was just in a bit of a hurry for a solution next time I shall go there. 
Wow, this looks like another great option. I definitely have my work cut out for me as far as research is concerned. Thanks! [update](http://www.reddit.com/r/PHP/comments/17i2la/thinking_about_learning_symfony/c86agrv)
I was not referring to that. I like more the "static" approach in other frameworks (Laravel, for example). 
Routes, for Symfony // app/config/routing.php use Symfony\Component\Routing\RouteCollection; use Symfony\Component\Routing\Route; $collection = new RouteCollection(); $collection-&gt;add('blog_show', new Route('/blog/{slug}', array( '_controller' =&gt; 'AcmeBlogBundle:Blog:show', ))); return $collection; Routes, for Laravel // app/routes.php Route::get('blog/{slug}', 'AcmeBlogBundle@showBlog'); I personally like Laravel's style. It looks cleaner.. Although, with Symfony, you can use YML or XML too. I think you should start with Laravel, it's a lot quicker to learn. A lot of people from CodeIgniter is migrating to Laravel. Like sixbeerstoomany said, Symfony2 has a steep learning curve. I'm not sure if it's more flexible (and what defines more flexible?) since both use composer and are quite similar on some stuff. 
Wow, get off your high horse, man. We're having a discussion. All I did is copy-paste straight from Symfony's docs, and converted to Laravel using similar vars. http://symfony.com/doc/current/book/routing.html 
I think the latter would be better and simpler no?
You're also copying routing from Symfony components docs not showing what it looks like from within a Symfony2 controller so you didn't even do a good job of that. Here's what it really looks like: use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Cache; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template; use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter; use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method; /** * @Route("/blog") * @Cache(expires="tomorrow") */ class AnnotController extends Controller { /** * @Route("/") * @Template */ public function indexAction() { $posts = ...; return array('posts' =&gt; $posts); } Looks pretty clean to me.
Dude, that was not my point. My point was a simple comparison of how to deal with routes in both framework. I did not even mention the word controller. All I did was demonstrate that Laravel does the same thing in much less code and cleaner. And by the way, Laravel's controller looks exactly the same, so I still don't understand what's your point and what you are trying to achieve. 
If you're wanting to get another alternate Laravel is one I've been looking into a lot lately.
Nor I yours :D
You do know that static approaches are: * hard to test * cannot be extended because of inner referings to class name
Well obviously because there are no dependencies? Edit: I did add composer support, so now you can use your composer libraries too. Look here for more information: http://phpixie.com/blog/composer-support/
yes it is. much more stable than Fuel too imo
Uhmm, fail with that (at least for v.4). Laravel now only uses static facades that in the end lead to injected component instances. All-static first FuelPHP is now also switching to using instance-only components.
I needed something similar. I wrote a custom mysqli result function: function my_mysqli_result($sql_result, $record, $column_name=''){ $row = mysqli_fetch_array($sql_result); if(!empty($column_name)) $index = $column_name; else $index = $record; mysqli_data_seek($sql_result, 0); return $row[$index]; } That way I could replace all instances of mysql_result() with my_mysqli_result() Worked out well for me. Saved me from having to code-hunt and from rewriting a lot of code. A little caveat. The code I was working with used mysql_result() for specific incidences only. 100% of the time it was used for queries that would only return 1 record. They way it was used in most of the code I was dealing with was: $item = mysql_result($result, 0); When multiple columns were used, it looked like: $item = mysql_result($result, 0, 'column1'); $item2 = mysql_result($result, 0, 'column2'); The function I wrote only looks at the first row returned. If you used mysql_result() for multi-row'd queries, it's not going to work right. You can pretty easily rewrite it to do that though..
&gt; cannot be extended because of inner referings to class name Just lold: public static function create() { $request = new Request(); } (c) your own framework. How about: $request = new static(); ? 
This was a pretty good laugh. It was almost entirely incorrect... But funny nonetheless. 
Oh look, another OMGALLSTATICSAREBAD idiot. 
I'm probably in the minority here, but I just can't get into Symfony2, and I've been using Symfony since 1.0. I understand what they're doing, and it's beautiful in a way, but god damn, it's just so verbose compared to Symfony 1.x, CodeIgniter, Cake, and other frameworks I've used. I can build something in Symfony 1.4 with probably less than half the code it takes in Symfony2.
Not the same. Kohana was only a fork originally as EllisLab refused to let people contribute code changes and fixes to the framework. Then they rewrote the whole thing to make a new framework, with a cascading file system that influenced a series of frameworks to come after it. FuelPHP looked a bit Kohany to many, but this is definitely a Kohana fork. I'm not sure it adds much.
I would look at it not by the number of pages involved but by the sorts of functionality you will need to implement. If you don't have much functionality (beyond routing, basic DB needs, mailing, form handling) you can implement it yourself or use a minimal framework. Avoid the bigger frameworks for a site like this as that would be like outfitting your Ford Focus with spoilers, a moonroof, a trailer hitch, fins, air intakes, rims, neon lighting, turbo, gun turrets, an electro-magnetic pulse system, seat ejectors and a self-destruct button. And no one should ever do that. [Here is a great link of minimal frameworks](http://stackoverflow.com/questions/694929/whats-your-no-framework-php-framework). Pick one that has decent documentation and have at it.
What is so bad about it? It will guarantee consistent formatting as long as the other developers are using monospace font. It is also used as the coding standard for Kohana. http://kohanaframework.org/3.3/guide/kohana/conventions Is your argument simply because it is to complicated or something?
Well you would change your mind if you took a closer look. This is not a static interface. In fact it is a factory pattern rather. As you see you are stil calling new and all methods and properties are incapsulated. This static method is nothing more than a shortcut. It tries to be backwards compatible by not using LSB
Not limited to php. What about css and Javascript?
A fork is when you edit existing code. None of the codebase was inherited from Kohana
PHPixie doesn't depend on anything besides PHP standard library. E.g. it doesn't use any classes that are from other packages, hence no dependencies.
Well that's kind of an old argument that comes for each framework. PHPixie is awesome for things like nothing, there is no reason to reinvent the wheen with this. I heard people complai a lot about why PHPixie (my personal favourite) uses symfony for everything. Why wouldn't it? The devs should concentrate on coding business logic rather than writing a new halfassed framework
Any of them should be fine. The only difference is the data type returned.
*The language makes assumptions to help the developer, you can specify the table name yourself if you want to. * 'PrimaryKey' is not intuitive to first time users that have no idea what a primary key in a table is. The idea is to be user friendly. * Wtf is the logic behind calling things 'phantom' anyway? Your names are confusing. Loaded() has nothing to do with dirty actually. Saves are run whenever user triggers them. User may rely on internal mysql triggers to run on save() it is a bad idea to have a save() method that wouldn't run cause it doesn't want to. * As for getByField - there is a perfectly nice query builder that ORM decorates for that, so no reason to use such idiotic methods at all. Instead PHPixie has a VERY flexible where method. Can you tell me why using -&gt;where('id',7) is inferior to getByField('id',7) * Validation is available via a module. PHPixie is designed to be a minimum framework with the ability to add modules * What do you mean no error handling? * There is a separate tutorial for ORM if you take a closer look * PHP is a template engine. If you want to program lazy code you are free to do so. A framework must not constrain you. ther ei s a HAML templating module available too. All your points come from lack of understanding how PHPixie operates actually =) 
Because it makes no sense, why use tabs at all for indentation if you are going to use spaces in the middle of the code to align tabbed lines? ""You cannot safely mix tabs and spaces in Python." That's right, and you don't want that. To be exact, you cannot safely mix tabs and spaces in C either: While it doesn't make a difference to the compiler, it can make a big difference to humans looking at the code. If you move a piece of C source to an editor with different tabstops, it will all look wrong (and possibly behave differently than it looks at first sight). You can easily introduce well-hidden bugs in code that has been mangled that way. That's why mixing tabs and spaces in C isn't really "safe" either. Also see the "bogus C code" example above." etc. there are tons of arguments why it's a horrible idea. I'm not even going to touch the subject of third party tools looking at your code and freaking out or merging headaches. 
I guess it's a matter of taste. I for one like them more as static. Maybe just for me, but the code looks much nicer. That was what got me to change from CodeIgniter to FuelPHP and then to Laravel.
I know it's a factory method. Still your post just pointed out a flaw in the framework - extensibility issues. BC? What BC? Was PHPixie created 4-5 years ago, before the 5.3 went stable?
It actually seems pretty straightforward to me. I come from the Kohana side and I actually have been ooking for some lightweight stuff, as I'm hosting my sites on a rather cheap VPS =( Will definitely give it a spin some time today and report here. My kohana sites should be easily ported to this so I can give it a full test
Not all people have webhosts that have php 5.3 you know. Though I would say this is somewhat far fetched by my old hosting still was running php 5.2.6 half a year ago (the reason why I switched to a VPS actually). I wouldn't hold it as a real flow against them though, personally i can't remember a single time that I extended a request class =) Check out how much static stuff is there in Symfony2 Request class, and that was i used in laravel, Silex (i think) etc: http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html 
What benefit is there to always being the same width for everyone? Seriously, I've heard people say that a lot, and yet I've never heard an explanation. If person A has tabs set to 4 spaces, then indentation level 1 will be 4 spaces, level 2 will be 8 spaces, level 3 will be 12 spaces, etc. If person B has tabs set to 8 spaces, then level 1 will be 8 spaces, level 2 will be 16 spaces, level 3 will be 24 spaces, etc. Aaaand... why is this supposed to be a problem? Like kenman said, I can only see it being a problem if people *aren't* using tabs for indentation. If some lines are indented with tabs and others are indented with spaces, then it'll look screwed up when the tab width changes. So, don't use spaces for indentation! If you consistently use tabs instead, then the indentation levels will always be consistent, and each user's preference for *visual* width of the tabs shouldn't cause any issue. I see tab width as analogous to syntax highlighting color scheme: each developer should use what they're comfortable with, and their choice doesn't cause any impact to other developers.
Well, if the other developers on your team are willing to take these matters seriously, you *could* explain the difference between indentation and alignment. That is, tabs are used to indent the line to the proper indentation level, and then spaces can be applied after the tabs to do character-based alignment within that indentation level. In other words, every line you just pasted would include the same number of tabs, but they could have 0, 2, or 4 spaces to produce that presentation. Personally, I think it's easier to just require all leading whitespace to be *indentation* whitespace (tabs) and leave alignment out of it. An easy way to do it in your example would be to require the commas to be at the end of the line, and all lines between the ( and ) could be indented one more level beyond the "array(". In either case, I wouldn't advocate using tabs to align the "=&gt;". Tabs should *only* be used for indentation (at the *beginning* of the line).
actually the community is good in between, you can't judge all of us because someone had six beers too many :)
There's something to be said for using basic strings over types when needed, but obviously Symfony is looking to support flexibility that Laravel may not. Also, the sheer amount of global state that Laravel maintains is very worrying.
Uh. What? You don't need to set up tab widths. And no, it shouldn't look messed up even if you use an editor with different tab width settings. I think you're missing the whole point of using tabs for indentation. If people are following the coding standards consistently (that is, using *only* tabs for indentation), then you can set your tab width to any amount you want and it isn't going to mess up the readability of the code or affect anyone else. If I have my tab width at 8 spaces, then great, I have "--------" this much space between each indentation level. If you have it set to 4 spaces, then great, you have "----" this much space between each indentation level. But each level is still properly aligned with every other line on the same level. Everything is still consistent in your view, and everything is consistent in my view. You know what really messes things up for me? When I'm working on a project that uses spaces for indentation, and someone somewhere put 5 spaces on a line that should have been 4 spaces, and now half the file has its indentation off by one space. This happens all the freaking time, and it's annoying. With tabs, it's so much harder to make that mistake, because it's much more obvious when you do. As for your .htaccess example, I don't know what you're talking about. I use tabs in all of my Apache configuration files, and all of my PHP code, HTML, CSS, JavaScript, etc., and I've never had any issues with it. And I edit using fancy GUI editors as well as terminal editors. No issues.
Haven't used Kohana in any of my projects, but still can't imagine you would prefer PHPixie over Kohana.
All I want to say is that not moving forward with the language and its whole community is absolutely bad.
Adding composer support will allow people to automatically have updates and easily install your code (and auto load it!), even if you don't have dependencies on other libs. Technically speaking you depend on PHP so you would add what version you require in your composer package file. &gt; require: { "php": "&gt;=5.3.0" } This will ensure anyone who tries to install your code, must have 5.3 or greater, this is just an example of many. Get composer support its easy :)
Yeah yeah, tabs are great until you use the code outside your workstation. If you are using editor that you never used and it has tabs set to 8 so it overflows the lines, have fun editing your code via mobile SSH without going back out and changing tab settings. Or maybe you can explain to me how you will tab your code on a mobile device without tab button? And if you set your tab width to 12, what will you do with line width limit of 80/120? Furthermore you obviously never seen .htaccess or other non code files that need to align with 'tabbed' indentation it simply will not work so you will end up using spaces for those either way. If you are working on a project that has files with random space length then it's not really a space problem. It's a developer problem. Anyways, like I said there are drawbacks and edge cases when using tabs and sooner or later you will see them. There is a strong reason why bigger and mature teams stick with spaces, what you see is what you get. If you want to use tabs, use tabs then you will be switching to spaces. Enjoy. 
The idea is you can include your lib from composer. Doesn't matter what your projects deps are.
HYes, adding a composer file and adding the framework to packagist is probably a good idea. I wouldn't say it's a real flaw in this particular case though, since there is little for composer to do here. Also doesn't composer require you to have a PSR-0 autoloader? I don't think PHPixie uses PSR-0 autoloader, because the classes names are in reverse
&gt;If you move a piece of C source to an editor with different tabstops, it will all look wrong Please explain, because that sounds like nonsense to me. Say you have the following: &lt;tab&gt;{ &lt;tab&gt;&lt;tab&gt;foo( &lt;tab&gt;&lt;tab&gt; bar &lt;tab&gt;&lt;tab&gt; ) &lt;tab&gt;} (Which I think is a terrible formatting style, but that's beside the point.) If you view it in an editor with a tab width of 8, it'll look like this: { foo( bar ) } If you view it in an editor with a tab width of 2, it'll look like this: { foo( bar ) } Notice that everything is still aligned with the things they're supposed to be aligned with. Changing the tab width didn't break anything.
I recently learned about bolt here on reddit and now I am building two sites with it, and plan to build two more soon after. It's so much simpler and gives you a lot more control than Wordpress and Joomla.