We also currently use OVH. Moved away from them after the Strasbourg power plant failure (servers were down for 2 days, big problem) but we got back. They also use KVM which is good. I'm just unhappy about their SSD speeds, otherwise good. 
Not really. Petty much limited by hardware. You probably want to set *some* upper limit (500 char?), so people don't use 500MB big passwords and overload your server.
Worse. Be cause PHP evolve in acceptable pace while wordpress is not even trying :) 
Maybe normal multilang support? Or custom entity support? It's simpler to ask something along lines: "Do wordpress have 5% good of features that OctoberCMS or less?" Of course you can widget / plugin / theme it, but how much is to much? Is framework build on top of other framework build on wordpress not scary to you? :)
Thanks for taking the time to reply. Please note that the line of code in question was written in 2015, in the meantime I have been busy with other things. I was wondering if you have any further helpful comments on the library in general, perhaps pertaining to its architecture and / or if you think you might find it useful?
Do you think sarcasm masks your insecurity? (Spoiler: *it doesn't.)
Devs using React/Vue with WP behind it aren’t going to be dependent on third party plugins.
**LOL**
The [documentation for password_hash](http://php.net/manual/en/function.password-hash.php) can answer a few of your questions &gt; Caution Using the PASSWORD_BCRYPT as the algorithm, will result in the password parameter being truncated to a maximum length of 72 characters. And to answer your question about the column length in mysql, this is what the manual recommends: &gt; Therefore, it is recommended to store the result in a database column that can expand beyond 60 characters (255 characters would be a good choice). Regarding the column definition in the database, I also recommend using the ascii_bin collation because: 1. Storing the hashes with a case insensitive collation would be a sad face, given the fact that hashes contain both uppercase and lowercase characters. 2. The hash is an ascii string, no reason to use unicode charset for it.
OK; will roll my eyes and do as you advise. I'm just getting used to this place, it seems.
I feel like the WP maintainers are incredibly averse to change - for fear they sacrifice any backwards compatibility or making their many, many older devs (who haven’t kept up with modern changes, code or Devops - a reason they haven’t migrated to git)
&gt; But the theory still stands, usually if something is big, exploits are often found and fixed quicker as a lot more people working on it, but not always the case. I think the major issue with WP is it's plugin system. There is an unsaid assumption in here. Like a lot of things, sec is a race between hackers and devs. We assume that with size, the increase in dev work is greater than the increase in hacker work. I'm pretty sure it's usually the case (and hopeful for open source's sake) But 30% of the web is powered by Wordpress, in itself a less than optimal codebase. I'm not sure a general assumption applies to the leader. And I'm pretty sure hackers are way more likely to search a vulnerability for 30% of the web than 2%, even more when it is based on PHP with its low entry barrier, which means every kid could learn to hack with low effort as a past time without being flat out overwhelmed, and become actually good hackers with time.
When using php-fpm there is no requirement to have the index.php in the public directory. Imagine this dir structure for an application: * src * public * tests * index.php Have the configuration in webserver as usual: 1. Attempt to serve the files from public dir. 2. If there's no static file in public dir for a given request, then make the call to php-fpm 3. When calling php-fpm, hardcode the SCRIPT_FILENAME parameter with `/path/to/myapp/index.php` (I think just `index.php` should suffice if php-fpm is started with chdir=/path/to/myapp) I assume the requirement for having the index.php in the public dir is just to make the app compatible with apache mod_php.
Ignore the WP haters and check it out for yourself. You’ll see haters for every single framework/language/platform nothing is perfect in this industry you just need to build your own toolset and get to work. The non complainers are out there making money! That said, I know a bunch of guys who make boat loads with a couple of WordPress themes and plugins. Core being a mix of OOP and procedural doesn’t keep them up at night either. 
&gt; Obviously this wasn't intended as an attack, but I think it's clear you've taken it as one. Yes, my bad. &gt; If it's not on your team, I don't know who it would be on? &gt; It clearly states no warranty or liability from code ... If that's what you meant by it I agree, my bad again. &gt; It shows something broken in IT for sure. I read that as `It shows something is broken in your IT department for sure.` &gt; Thanks for disclosing vulns, but it seems unfair to blame WP for something lots of frameworks have problems with anyway. That, I'll discuss. Maybe it's not fair to blame WP, ok. But I can make a very backed empirical claim that any vuln on wordpress or wordpress plugins is tested on our sites in the following week, often days/hours. It isn't quite as dire on the Laravel's ones, even though they are older and bigger in traffic. What I'm trying to say is, I probably cannot blame wordpress for having hackers, but I can ease my mind a LOT (8.23 times) by not using wordpress. I do see it as a target on your back and giving a gun ammo to randoms in the streets. Lots would miss, few would hit (gun are restricted where I live), but it's a problem I can solve easily by not creating it in the first place, eg use something else. Ah, and while initial cost/speed was better on Wordpress side, after a few (1-2 years) it's the completely other way around.
I'm working on a series of posts about less known but still useful features in PHP. It's organised by comparing PHP to some features taken from functional languages, but I might continue if I have more material. http://www.3jane.co.uk/tags/php/
[https://www.reddit.com/r/lolphp/](https://www.reddit.com/r/lolphp/) 
Optimized for high resolution desktop, while keeping text really easy to read and distinguish words for both Interface and editor. Using \(Noto Sans for IDE interface &amp; courier pitch in Editor\). Nice coding style, with correct use of spaces, 80,100,120 wrapper guides &amp; etc. customized handy keymap. Handy for both writing docblocks &amp; using them in a toolbox on code completion. &amp; so on 
&gt; I read that as `It shows something is broken in your IT department for sure.` It was and wasn't meant like that (it's too broad a statement, but notice it doesn't target you or your direct co-workers, but an environment). Often it's not the people on the ground, so it might not be directly your fault or a specific direct co-worker fault. Maybe it's not even direct managers, but it sounds like you're working on large projects, expecting that a change to something with less mindshare will magically fix security problems based on too small a sample size. I don't know if I should say this, but I'm going to risk it. I've never had a client WP hacked. I've helped remit hacks (and they were as crappy as the code that allowed them). I can promise that moving house/office because it's on fire will not protect you from future fires. Regulation, Research, Diligence and buy-in from above are the only things that can, and those can only be honestly and confidently assessed in something large enough with a sample size that is large enough (so a mega-corp). ------------------------------------------------------------------- I Think for what people are saying Laravel is for (which I've always pegged as startup PoC for CRUD apps) it's fine. It's not magically "enterprise ready" (not that WP is, but it's lack of complexity is a bonus) I Had a laracasts sub for a while, I've worked on a few Laravel projects both in development and fixing things that the "Laravel will handle it" camp had jumped too soon, and could have placed effort elsewhere.
I'm not trying to make an argument that should be debated. I'm giving my categorical opinion as a developer with 20 years of experience, and the opinions of colleagues within my range of skills and experience, that WordPress is obviously, objectively, eye-gougingly poorly written and designed as a codebase. You're free to disagree and promote and sing its virtues. But I'm absolutely not willing to enter a back and forth about it. I've my own eyes and I've seen and experienced WordPress and I've made my conclusions.
&gt; I'm not trying to make an argument that should be debated. I'm giving my categorical opinion as a developer with 20 years of experience, and the opinions of colleagues within my range of skills and experience, that WordPress is obviously, objectively, eye-gougingly poorly written and designed as a codebase. And as a developer of about as many years, there's nothing in that statement one can respond to. You're just stating your opinion and OK sure but there's not much to discuss there. &gt; You're free to disagree and promote and sing its virtues. Except I wouldn't. My point above was that your comment was just being ignored because it didn't contain anything one could respond to. Not just because it's your opinion but because you don't say any one particular thing that could be responded to. If all you say is "WP code is bad" then all anyone else can really say is "Oh, ok." &gt; But I'm absolutely not willing to enter a back and forth about it. Don't worry about it.
&gt; And as a developer of about as many years, there's nothing in that statement one can respond to. In case I was unclear, there's nothing I want you to respond to. But... If you want a taste of the stupidity that is the WordPress developers and codebase, [watch this video](https://www.youtube.com/watch?time_continue=420&amp;v=yQaRUEwEKxE) about WordPress trying to negotiate Unicode in its featureset and kind of tripping up at every step. Anyone who doesn't cringe at the idiocy of every single thing they did there, and facepalm at the final solution doesn't honestly know what they're doing, and I wouldn't want to see their code either. Unicode is complicated in some ways, but everything this WordPress developer describes is of their own doing. It's like watching someone get tangled in rope by their own will and accidentally hang themselves. 
&gt; Well, there's nothing I need anyone to respond to. Except the comment you were replying to was directed at someone who was trying to pretend your comment standing isolated without an upvote or reply was somehow you being silenced or something. You weren't shunned, you just didn't say anything worth responding to. Personally, I don't really care what you think one way or the other. Nothing personal but I just don't put that much stock in randos from reddit and in my experience people who refuse to state things that are a least specific enough to have meaning and only link to things other people have said usually don't have a large amount of experience to pull from. Especially if they're still in the "my camp versus your camp" mentality. Most people after a certain number of years have to shed that mentality through necessity.
That response is an absolute improvisation. There are no "camps". Watch that video, and if you're actually willing to stand behind the quality of the engineering choices that were made, you know, the double escaping and the "detection" algorithm for when to escape once or twice, or how to detect escaped content in unescaped content and all the other nightmares of idiocy you'll see there... then that says enough about *your* experience. The thing about people with experience is, I don't have to write every comment by introducing how the Universe started with the Big Bang and evolve the plot to present days. One link is enough between one professional and another as an illustration of what I'm talking about. If you want me to write a book here, that's not the point of Reddit comments.
&gt; Except I'm now seeing where you deleted your other reply to that person where you basically said that the "Wordpress camp" (or however you phrased it I don't remember) saw an "enemy." That was a bit funny but does kind of convey what you felt like was going on. You're that petty that you're willing to bring back a joke I deleted cause it wasn't that funny? OK, I see the level of character I'm dealing with here. Yes, when you say "WordPress sucks" some people who work with WordPress take it personally. That's a fact. I'm not taking it personally and I can't be held responsible for how the rest of the world works. &gt; The act of linking is what I'm talking about where you didn't say anything concrete and instead wanted me to go watch a half hour video on youtube. First you complain I didn't provide enough specifics for you to "respond to". Now you're complaining I'm giving you too many specifics to respond to. I'm noticing a pattern of you bitching non-stop no matter the circumstances. I didn't link you to someone else's *critique*. I linked you to a presentation by WordPress developers themselves, that's a clear illustration of how way over their heads they are with this product. You wanted to respond to something. Not that I gave it to you, suddenly your PoV is we should "let it go". Bullshitter gonna bullshit, I guess. Thanks for wasting my time.
I'm still confused I don't see any of this explained or documented anywhere. Very little reason to actually import someone else's settings blindly.
&gt; https://twitter.com/infinite_scream I tested it and feel a need to correct myself. Closure use variables passed by reference are references in the array, normal function statics and use variables are by value. I don't know if this is better or worse frankly. You can imagine how much I freaked when my code was altering variables in stack frames above where it was called :)
Much. It's also slated to be the next default. Win all around.
It is. They even documented changed behavior recently in 7.2 so you can no longer have [inaccessible indices](http://jnvsor.github.io/blog/2017/04/14/impossible-indices-in-PHP/)
Thank you, doenietzomoeilijk, for voting on TweetTranscriber. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Managers orders
Ask your manager to get his Microsoft tattoo removed, then use centos 
Always question authority.
Yeah I agree with /u/Rimbles on this, maybe you could add some screenshots?
Find a job that's worth doing. No one should be using a Windows server in this day and age, it's usually ethical to both the server manager and the website. 
first and foremost find the php.ini file from the 2k3 box. it'll tell you what, if anything special was done there. what plugins/external libraries you'll need, etc. come back here once that's done.
I think you mean "Don't use Windows Server, it sucks" But for real, I appreciate the answer. I'll look into that right now, and let you know my findings
Where would that PHP.ini file be located?
Exactly. There is no silver bullets. WordPress in a GREAT solution for many SMB needs.
Custom homegrown back in 2010 before I worked at the company
ok, that's probably going to make things easier. do you need further instruction or can you kind of intuit your way through this, now?
It should be fairly easy, is db ms sql or mysql? 
And tell your boss these guys from Reddit PHP group said you need a pay rise before you can do this migration.
Downvote all you like but I am right, right tool for right job, you don't see many people running virtualbox with windows to run .net app. Same applies here and comes down on education of managment 
He says it's approved
I didn't downvote And I don't disagree with your statements, I just have to work with what I have
From experience, I would recommend 2 connections. One to a central database where your login resides, other to the user's database. You will use either one of them depending on context and what you need to do. 
Use [Git](https://git-scm.com/) and in the development machine enable all errors from the php.ini file.
Store the PDO connection string in their session record. The PHP based Hashtag Framework addresses this by using namespaces. All clients use the same database, but all generated SQL queries will have prefixed table names, so clients only have access to their own data.
[phpinfo()](http://php.net/manual/en/function.phpinfo.php) shows the location of php.ini.
Not unless your calls for hashing look like `exec(bcrypt($vars))` rather than `bcrypt($vars)`. The former will use the system `bcrypt` binary, the latter will use the PHP function.
Nonetheless, this is [Troy Hunt's recommended method](https://www.troyhunt.com/passwords-evolved-authentication-guidance-for-the-modern-era/) for not truncating passwords and there's a lot to be said for doing it. It's a great read. He calls out SHA512 before bcrypt, but same idea.
Pro tip! Thanks!
Another question, I hope I'm not bugging you. I'm trying to implement password_needs_rehash() and I can't seem to figure out how to force this to trigger as true so that I can insure my SQL that runs immediately after is working correctly. if (password_needs_rehash($user['user_password'], PASSWORD_ARGON2I )) { $new_hash_password = password_hash($_POST['password'], PASSWORD_ARGON2I ); # SQL, message updates etc ... } I figured if I switched the algo to argon2 it would trigger, but it doesn't and now I'm confused. Perhaps PASSWORD_DEFAULT is already set to ARGON2I? Here is an example hash created by password_hash(): $2y$10$0G.CaV9C7aXhw2gKJJWMFOF2V0qx929gXTR6zv5Nq.S63sgpZG/ra
On existing site create page info to get details https://mediatemple.net/community/products/dv/204643880/how-can-i-create-a-phpinfo.php-page
why not adding every word right to the database? session is not the right place to put something like that
bcrypt is fine. Use the built\-in password\_hash\(\) function and you will be OK. Experiment with different costs. If you have the computing power on your server, you can increase the cost slightly from the default. But be aware that a small increase of 1 or 2 will hugely increase the time taken to hash a password.
How will having separate databases for each client improve security? Consider the main ways in which databases get hacked. Now tell me why you think that separate databases will improve security, especially when you're going to end up with so much more work in order to take backups, update the database schema if the system gets upgraded, etc etc. And how are you going to protect all those database connection credentials in such a way that they are safer than if you just had one?
bad bot
`PASSWORD_ARGON2I` is only available in PHP 7.2+. When you upgrade PHP (and if `PASSWORD_DEFAULT` is ever changed), your passwords will automatically be rehashed to the default/recommended hashing algorithm. ``` if (password_needs_rehash($user['user_password'])) { $newPasswordHash = password_hash($_POST['password']); // Update in database } ```
You should sanitize user inputs, including a maximum length. A max of 255 characters is reasonable for passwords. 
Sounds great! Thanks so much! My cyber terrorism / databreach insurance will only be valid if I can prove I'm using indsutry standards. 
First of all, max(...) values are supposed to be arrays, so if you don't feed that to the function, result is supposed to be garbage.
Thanks!
Just read the documentation. It's well documented and, examples are given, and the warning has been written in the docs too. &gt; max() returns the parameter value considered "highest" according to standard comparisons. If multiple values of different types evaluate as equal (e.g. 0 and 'abc') the first provided to the function will be returned. Which it says, it uses standard comparison, the `&gt;` or `&lt;` on the said values. http://php.net/manual/en/function.max.php
https://secure.php.net/max &gt; **Note** Values of different types will be compared using the [standard comparison rules](https://php.net/manual/en/language.operators.comparison.php). For instance, a non-numeric string will be compared to an integer as though it were 0, but multiple non-numeric string values will be compared alphanumerically. The actual value returned will be of the original type with no conversion applied. -- &gt; **Caution** Be careful when passing arguments with mixed types values because max() can produce unpredictable results. var_dump(true &lt;=&gt; 100); int(0) -- var_dump((int)true &lt;=&gt; 100); int(-1) -- ¯\\\_(ツ)\_/¯
For those of you trying to suss out the logic here: `max()` assumes the first value of a multi-value input is the type you want to compare, and it coerces the later values into that type. max(true, 100); // === max(true, (bool) 100) === max(true, true) max(100, true); // === max(100, (int) true) === max(100, 1)
It's a variadic function like var_dump, so it can accept an array of values and accept an indefinite amount of values. http://php.net/max
I couldn't test it now, but I think first value doesn't determine the types to compare, as it was pointed out in the docs: max(-10, false) = -10 -10 was evaluated as true here.
What's going on is that if you compare a boolean, all values are cast to bool before comparison. The documentation says: &gt; If one argument is NULL or a boolean, it will be compared against other values using the rule FALSE &lt; TRUE regardless of the other types involved According to this rule, `max(true, 100); ` is actually `max(true, (bool)100);`, which is `max(true, true);` And if multiple values have the same weight, the first one is returned. Just don't compare values of different types.
Here is a php script I wrote a few years ago, later I wrote dynamic image error pages, I think this is the complete script, called it error.php and pointed apache error routine to it. Just had png images for it to link to. Dont have the apache config at hand for what I did in that, but could serve up lovely error pages. &lt;?php $capture = $_GET['errors']; $status = $_SERVER['REDIRECT_STATUS']; $codes = array('400','401','403','404','405','408','500','502','504'); foreach($codes as $page); if ($capture == true){ $page = $capture; } else { $page = $status; } switch ($page){ case 400: $image = "400.png"; break; case 401: $image = "401.png"; break; case 403: $image = "403.png"; break; case 404: $image = "404.png"; break; case 405: $image = "405.png"; break; case 408: $image = "408.png"; break; case 500: $image = "500.png"; break; case 502: $image = "502.png"; break; case 504: $image = "504.png"; break; case nw: $image = "accessdenied.png"; break; } 
503 is ok for temporary errors. a 404 page should also set the http_response_code(404)
Right, if you want to generate a 404 page with PHP, you would need to set the appropriate header. Otherwise PHP/Apache will just default a “200 OK”. `header(‘ ‘, true, 404);` (Note the whitespace - if it’s empty the header function will do nothing.) Or in PHP 5.4+ (Hi! I’m old!) you can simply use `http_response_code` and give it the code you want to emit as an argument. You can use the same function for your 503 page. And yes, 503 is the logical choice for server maintenance.
You might enjoy phpsadness.com
In this case, however, the input is workable and produces a result consistent with the documented behavior of PHP. 
Wait, there's a HTTPS version of php.net and it's not default?
Right there is a machinery behind to help translators to easily see where pages have been updated since last translation. Git doesn't have sequential commit IDs, thus the git log has to be checked for each file. Also there is other tooling depending on infrastructure, like edit.php.net or doc.php.net For all migration attempts I saw over the last ten years effort was too high, motivation too low.
I always use WordPress themes to develop my business. But I have't find any mistake about WordPress anymore. As you mentioned above that "massive security risk", "poor architecture", "90s style development workflows", 24/7 bugs, etc. They are all the least of your problem. For example, Onetone, pay the money to enjoy a rich architecture, easy installation and security is normal for any business. As for bugs, everything has some bugs, it's inevasible. But I promise that WordPress won't have bugs that make you use website unnormally. That's my opinion about WordPress. Maybe it has something disadvantages, but I still love it. Wish that works for you. :\)
"I tried to compare a number and a non-number and weird things happened. The language must be broken."
Thank you! Exactly what I was hoping to hear. &gt; header(‘ ‘, true, 404); I presume it's the same if I want to do a 301 redirect or a 503 unavailable?
That's, uhh, one way to use key files...
I'm not sure if "it's documented" is a valid excuse. Why not true an expect or invalid return or something? Obviously the programmer is doing something stupid so should set of some flag so programmer knows he is doing something dumb and can fix it.
PHP hands you a rope and is very happy to allow you to hang yourself with it.
which is a the major complaint most programmers have. If php can detect a stupid user error, it should warn on it. It's a concept known as "fail fast" (google it).
It's not 😘
Your example makes sense. Compare a boolean true to a non-zero number (also true) are equal (though not identical). Compare integer 1 (true as an integer) to 100 and it will be less than (returned as -1).
It is a valid excuse. PHP is weakly typed language, so when you are doing comparison cross multiple types, you allow PHP to make decision for you of how it should behave and that behaviour is documented.
This is the best answer. PHP has clearly defined rules on how different types are compared. Saying the language shouldn't allow you to is just limiting; learn the rules instead of complaining.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Because *that* would be a lolphp, at least without a whole language rewriting. The "most php" thing of all here would be to make one random core function throw an exception if two differently typed things are compared.
Thanks, good to know, but I took the homebrew php fiasco as an opportunity to switch to a more capable php version manager. I switched to phpenv, which can switch versions automatically based on `.php-version` in directories that have it. It also has the same api as rbenv, pyenv, and nodenv, which I also installed. Thanks, homebrew! Downside: I still have to use pecl :( But that would have happened with homebrew php anyway.
Ha, why is this not part of [`friendsofphp/php-cs-fixer`](https://github.com/FriendsOfPHP/PHP-CS-Fixer)?
At that point what is the difference with `eval`? `eval` is not more insecure than any other way to execute 3rd party code. Like any other tool what matters is how you use it.
I deleted my original comment, after reading it back you are correct that it did not make sense, but in my defence it was linked in with many pages of code from some classes and functions that would have made sense and would have explained what I was trying to achieve, but using a tiny phone I cannot see the correct code from here. I had to edit it in the fly last night to remove parts that were only relevant to my own server, and I guess the remainder in concept did rightly as you say look very wrongly written. The nw code was a custom error code that I could pass to throw and custom error page at the time for site editing etc, without the context of the rest of the code it didn't make sense, but passing it as a string instead of an integer allowed the custom error code to work, that's the reason it's written in that way, but with the rest of the routine it does look silly, and for that I apologise. When it was fully working many years ago, the error basically would be thrown by server or triggered in my control panel and in both instances it passed it to a routine that would imprint the error code, server info, time etc straight into a custom image at it's bottom, custom css was also passed to the page, it all worked really well and looked really great, but it's been some years since I coded anything and finding the full code is limited where I am now. Again apologies but was method to the original madness lol.
The used algorithm is encoded into the hash, this is why password_verify doesn't need a parameter indicating which algorithm was used. When the default algorithm changes your old hashes will still verify. This is the beauty of the password_* api, it allows for future-proof code without breaking logins. As others have pointed out, bcrypt is still very much a good choice for password hashing. In fact explicitly choosing any algorithm is unlikely to be a good idea. Suppose (years down the line most likely) argon2i is no longer considered secure and the default algorithm is now its new and improved successor; had you used `\PASSWORD_DEFAULT` your code would still be ok - but you're still using argon2i! You can create a hash which requires a rehash by setting the cost very low: https://3v4l.org/umoVL
password_needs_rehash() actually return true always when the algorithm or cost parameter(s) are different than defaults. I.e. bcrypt cost 11 also triggers the rehash. I'd recommend to rely on password_hash() defaults most of the time.
Wanna be scripters says that Wordpress is nothing, because they want people find scripters that costs money instead of installing a Wordpress and making things more easy for website user. They do not even find these security issues they are talking about.
Perhaps if there were some “mode” which would could be turned on to log to a “oops” log it would help. Often I don’t realize that in this weird special case that only happens in production that something like this will happen and having some way of php telling you would be nice. I dev using php (Magento, zencart, wordpress, codeigniter, cakephp) for 8 or so years and would have loved that ;) Would strict mode help at all with this?
but i want to add the most searched word for each guest user first then i add it to the database if i just add every word the user searches for there will be alot of rows 
Hey, ahmedxax, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Add a static analysis tool (like phpstan) to your CI pipeline.
Thank you, I found a ton of conflicting views on the extension from SO...what a shocker
I think he means it's a link to a thread on an external board, just like people put [Img] and [Vid] in the title in other subreddits.
Just save some more information to the entry in the database. I'll give you some steps: 1. Check if the current guest has a cookie named "guestid", if not: create it with a random value, so you can identify the guest always with that guestid 2. Every word goes into the database 3. To save an entry into the database, save the word and the given guestid and a timestamp 4. With such a dataset you can now evaluate what you want (whats the most used words? whats the most used words for 1 guest? whats the most used words yesterday? and so on...) Things you want to have a look at: PDO, Prepared Statements, SQL Injections, PHP Cookie read/write, Cookie Lifetime, PHP Random Number Generation (for guestid)
it's mostly the non-obscure features that I most useful, so you should get good at them first.
You can always change the file extension to read PHP files in Apache httpd config file. 
https://www.thegeekstuff.com/2014/03/php-custom-file-extension Here are some ways. 
.php is what i use
Do you know what subreddit you're in?
I am new but php right ?
Why would anyone in a PHP-subreddit hate PHP?
Because some people saying it's dead. Lol
I mean some people 
Only the dead will never die.
I feel so old-school when people say PHP is dead and nobody use it. I do. I am quite happy with it and I don't even use the full power of the PHP yet. It is easy to read and easy to work with.
It doesn't matter. It is entirely aesthetic for the programmer. Well, it does - most modern servers won't pick up phtml *unless you tell them to*. Someone mentioned .blade.php which is favoured by frameworks like Laravel which implement Blade. I would also echo this comment.
No. Simply no. Loose typing is not the opposite of fail fast. You can have loose typing that is not totally retarded. 
Having sane rules isn't limiting and having insane rules isn't powerful. 
Yeah. But while were teaching best practices with php, I figured he'd Google it and learn about php's saving grace: laravel. 
Yes, because mistakes happen. Sane languages make it either hard to make mistakes or easy to spot them. 
It's documented garbage. 
If you think that "it's the best", you don't know enough programming languages.
Also `switch()` and `in_array()` - don't mix those types if you don't want funky things to happen. PHP will silently have a guess at what you actually wanted to do, var_dump(in_array(0, ['foo', 'bar'])); boll(true)
What is this, .php3? =p
&gt; Google announced they are opening their own WP dev branch which may help address a lot of the issues you mentioned. Where can I find out more?
Sure thanks for asking. Basically we are gathering information based on expect scripts. There is a php expect library that can do this however its not that great. So essentially we need php to run the expect script, gather the output, send it back to web application. These could be things like ping and stuff like that. We would avoid these if we have a better solution. Do you have any suggestions?
This is actually horrendous, please don't do this 
It's not bad, it's worse...Unless you are a rock-star developer that verifies every line of code and scrutinizes every plugin you inject into your site, you're in for a trip. In terms of the saving-time, and quick page building, you should really look at other options. Wix and Squarespace are nice, but won't give you access to the source code, and they hold your site hostage. We use AppDrag, which is a really complete CMS for developers, where you can control every element on your page by it's own source code. As well as a back-end on the same platform where you can create your DBs and APIs in every language. On top of it all, it's all already hosted on Amazon's AWS. So you have the benefit of their super performant servers, and their top notch security. AppDrag actually added another 7 layers on top, encrypting files and such. Check it out.
what are you new here? welcome to php pal. 
the scope bind one kinda blew my mind for a second before i understood it. there is some other way i have seen to pollute scope too but i cant remember it offhand
By googling it of course! [article](https://www.google.com/amp/s/searchengineland.com/need-speed-google-dedicates-engineering-team-accelerate-development-wordpress-ecosystem-291214/amp) 
The downvotes aren’t mine because I actually understand what you’re saying and you’re essentially right. My initial assumption was that min/max can only work on ints, but that isn’t the case. It’s documented that min/max take mixed values and also compares strings, e.g. „a“ is lower than „k“. Your comment would be exactly right if min/max would only work on ints, but as I see it, they simply gave min/max more and generic functionality on purpose (which is the keyword here) rather than just implementing it bugged. Now you can also compare strings or e.g. true to false, so it doesn’t cast to ints but rather casts to whatever the first values type ist and that casting behaves based on documented PHP implicit type casting rules. I understand it might be confusing (as you can see, even for experienced developers), but it’s also documented and works based on strictly defined casting tables, so there is basically no magic. Just „have you read the docs or not“, which I, appearently, did for the first time today for min/max.
The very fact that you have to memorize those rules is insane. Just look at how even experts somehow make bad guesses, because it's completely unintuitive. Yes, of course all results somehow make sense when you closely follow the spec. That's obvious, the interpreter is a deterministic system after all. That doesn't make it a good idea that you have to follow a spec closely to grasp those statements. I mean, if it was very strange and rare edge cases, ok, that would be tolerable. But it's not like that. PHP's madness shines through every once in while. One can accommodate oneself to the quirks, but they don't stop being quirks and PHP would be objectively better without them. Note that I'm not a dull PHP basher. I can like some aspects of it and I know one can program impressive stuff with it and also avoid many of its quirks with discipline. But I won't just pretend those quirks aren't there or that there aren't any quirks that even bite me after years of experience with PHP.
Yes, but using it is like trying to have safe sex when you know you have HIV. It's not a good idea.
Strong types cannot come any sooner 
I try to never expose scripting language. AddHandler .html for php and keep .htm for static html files. Thought everyone tried to hide it one way or another. 
Yeah, doing anything with expect sucks. It may be possible to rig up something equivalent with `proc_open`, but that doesn't really change the problem, just shifts it to a different program. If what you're doing is completely controlled by the server, it's not a huge risk. What you want to avoid - or at least need to be _reallllllly_ careful with - is when user-supplied input is provided to the commands (e.g. if the API request indicates what to ping). Look at [this article](https://security.szurek.pl/exploit-bypass-php-escapeshellarg-escapeshellcmd.html) which came up on HN recently for a list of examples of how easy it is to screw up, and use it to provide test vectors for user input to ensure you're escaping things correctly. Feel free to DM me too if there are any really detailed specifics that you don't want to discuss publicly.
Yes, in my experience this is a common practice. It also was the standard used by Zend Framework.
Eh. If you were making a large-scale CLI application then I would tend to agree. CLI commands are used for some quick thing that you want to script. It's one and done. It shouldn't need 17 included classes to function properly.
Thank you I just was looking into this and I think this may actually be a really good option.
Thank you. I am going to review over what exactly we need to use it for then go from there. And you make a great point about user provided data because we will need to send arguments in the commands as well so I need to think that through as well.
Correct is whatever your webserver is configured to handle and whatever conventions the project follows. I personally use `.html.php`, but there's nothing correct or incorrect about either approach. It really comes down to what you prefer, then making sure your server is configured to handle it.
Nice! This helps a lot and works around having to comment each and every comment to get completion. I'm still waiting for PHPStorm to fix the bug in hope to get the full feature of the feature back. https://youtrack.jetbrains.com/issue/WI-38403
In a pure MVC with client side rendering, you are probably correct. Personally, I'm still 100% server side rendering.
The perpetrators used their $9.68 to put gas in their Lada. 
https://nvd.nist.gov/vuln/detail/CVE-2018-7600
I've had to put all of my drupal databases into Read-Only mode. I have also hacked Drupal's front-controller to completely clear out PHP's $_POST supervariable. I have a "normal" instance of Drupal which is only listening on localhost port 444, accessible only via a SSH port forwarding which I use to do site content editing and maintenance. It's a terrible state of affairs. I've been doing this since 2016, when my onlytrump.us and standwithsanders.us sites were mercilessly attacked by every group you imagine, from libs to conservs, Russians, Chinese, the Free Libyan Army, the Syrian Liberation Army, ISIS, and even Da'esh.
 // Steal secrets by assigning scope to closure class secret_class { private $secret = 5; } $secret = (function () { return $this-&gt;secret; })-&gt;call(new secret_class()); I had to do this a few months ago, and for the life of me.. I can't remember why - something tells me it had to do with auto-wiring for dependencies or something.. 
If you run it through the symfony `console` script, you should be able to inject whatever you want into the command class. You just have to add the `console.command` tag to the service. 
Let us assume for a moment that we have a type inference engine for this statement: max(100, max("abc", true)); Logically what needs to be done is to find the common-type of the two parameters and then use the max associated with the common type. Let us begin with `max("abc", true)`. The common type they have is `scalar` (even though this doesn't exist as a type at runtime it still has rules) and scalar's `max` would use the same type-juggling semantics we have, which means `"abc"` is converted to type `bool`, or `true`, and then `max(true, true)` is returned... you would think. In my opinion this that this the issue: the max returned is the original value, not the juggled one. Not that it matters - this won't get fixed.
I guess I don't know what you mean.. but my answer is probably "legacy", code for bad practice in business environments with $$ generating code. My app is monolithic, the entry point is "/index.html" with mod_rewrite()'ing all valid URLs to "/index.html" and AddHander .html for PHP. The "/index.html" is actually index.php, and it has it's own router inside for calling to class objects which serve the route, these in-turn return HTML via their return().
That falls under what I was saying first, yeah, having a single file that every request is routed to, and rendering pages from there. For the "bad practice" part I mean stuff like /index.php /images/upload.php /register.php and such :)
I'd suggest Symfony or Laravel as a next step, since they seem to be the top two frameworks in use today. Which one, specifically, would depend on where you're going next. I wouldn't be too worried about specifics here. If you're as comfortable with PHP as you sound and can demonstrate that in a job interview, then it wouldn't be too hard to learn the framework in use at your next employer on the job. Instead, I'll divert you down a couple of more useful paths to direct your energies: If you aren't feeling strong on it yet, go learn some JavaScript. Pick up one of the currently in vogue frameworks. I like Vue.js as a complement to primarily back-end based sites. Go fiddle with d3.js if data is your thing. Try to kick the jQuery habit (if you've even started it) by using VanillaJS when you'd otherwise be using jQuery. Try to become semi-competent with server administration, if you aren't already. Apps have to be deployed, after all. I'm surprised at how much time I spend caring for servers in my various projects. Even if you use more managed solutions, it pays to know how to do it yourself. Are you up on SQL? Securing and administering a database? This goes part-in-parcel with the server admin stuff. There are specialists that handle it, but sometimes you're going to be the most knowledgeable person in the room. Be ready. No matter where you are in your career, constantly study Computer Science. It will augment whatever you're doing in whatever language. It's timeless knowledge, unlike learning the framework or library du jour.
Thing is all those "anythings" you can do with WP would be better done in some other system. When going cheap I've used WP as a middleware but nowadays I'd use Laravel for the exact same reasons
Damn, I just checked my Drupal sites and noticed a user with admin rights that should not have had it... 
all data with be encrypted. The reason we have separate database is because of GDPR. Have you read anything about it? 
Sort off. The Symfony console command requires using the framework instead of just the console component. I agree it it is the way to go if you want to use things like containers and such. I guess some people want a middle ground between just the component and the framework. Not really sure why.
I know Hack's not PHP, but this update contains a bunch of interesting changes, including: - a non-null type `nonnull`, a slight refinement on `mixed` (which can contain null) - no function/constant fallback to global scope (so `array_map` must always be properly prefixed) - introduction of a `dynamic` type, to prevent `mixed` leaking outside function boundaries (Psalm achieves the same by [having different issue types](https://getpsalm.org/r/5f6a2bccea) for various `mixed` violations) 
# What is this? A PHP library. It's framework-agnostic, to boot. # What does it do? Lets you add searchable field-level encryption to any project. # How does it work? It adheres to [the design described our blog post on searchable encryption](https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql). The [internal documentation](https://github.com/paragonie/ciphersweet/tree/master/docs/internals) may also be helpful. ## Does it involve any crazy voodoo i.e. lattices or order-preserving encryption? No, we eschewed crazy academic designs in favor of accommodating [AEAD](https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken) with [randomized ciphertexts](http://www.cryptofails.com/post/70059609995/crypto-noobs-1-initialization-vectors). Don't get me wrong, the academic work on fully homomorphic encryption is *really cool*. But it's not mature enough to recommend for real-world uses, and most designs don't protect against chosen-ciphertext attacks (y'know, the kind of attacks an adversary with a read-write SQL injection exploit would be capable of performing). We've [covered this before](https://paragonie.com/blog/2017/12/assuring-ciphertext-integrity-for-homomorphic-cryptosystems). ## How do you manage to have randomized ciphertexts and still be searchable? Aren't they mutually exclusive goals? [Blind indexing](https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql#solution).
Wow, 30% upvotes you guys sure dont like experimental stuff.
YES. ignoring security, no self\-respecting developer would learn all the asinine, wordpress\-specific hoops you need to jump through. Its great if you're making a blog. But if you're doing absolutely anything else, you need to use a proper MVC framework. Learning wordpress is like training to be a garbage man.
I couldn't agree more. I really miss it in PHP. 
Haha nice, during my last job, I noticed some code that disabled xss sanitizing if you sent `santize=false`in the request body
Welp. Guess I'm officially dropping HHVM support now.
"i cOdE JaVasCriPT, sO tHaT MAkeS Me BetTer ThAN EVerYOne" - those guys prob
took me a few seconds and without the spoiler I would just have read it over - just wow.
Why is this considered a backdoor?
Right? We actually found the unhashed MD5 password and then another developer said "I can get in with any password!". Puzzled, I stared at the code (there's a lot more) for a handful of minutes before seeing the mistake. So easy to overlook.
I remember that when I was making an API for a personal project on Python Flask, I found a library that solved this using JSON, I think. Can find it much later tonight. 
&gt; but essentially this is a PHP script that allows you to log in as any user in the system. That's what I understood. But that means anybody could break in. I thought that back doors were for specific people. 
&gt; I know code igniter so well that I can easily modify its core files to fit my needs Do you make PR's based off these edits? And if not, why edit the core files and not just make extensions or write "abstractions"? This seems backwards, what you're doing. &gt; What framework should I be learning next and in what sequence if you could tell me? Learn what you need for your business/project needs, there's no such thing as "Learn x before y" in relation to frameworks.
You may want to create a column in your database to store a simplified/normalized topic title before indexing it for search purposes. A Stemmer like https://packagist.org/packages/wamania/php-stemmer may be helpful. Running the following two strings through the stemmer: Input A: "Help me Find the Best Burgers" Input B: "Help Finding the Best Burger in Town" Stemmed A: "Help me Find the Best Burger" Stemmed B: "Help Find the Best Burger in Town" If you are using MySQL, a fulltext index on the normalized and stemmed version of the title column, compared against the normalized and stemmed version of the search query, would probably yield decent results. That should be much quicker than similiar_text or levenshtein.
[Halite](https://github.com/paragonie/halite/blob/master/doc/Features.md#file-cryptography) is your answer.
Sorry for taking awhile to respond. Thanks for the links. Could you elaborate more on composition of object behavior being too hard in OOP? I've heard before that OOP is not ideal for games, something to do with difficulties achieving ideal performance. But I don't care about that for the purposes of what I'm making. It's just a simple text game with no timing involved.
Consider leveraging PostgreSQL's [similarity functions](https://www.postgresql.org/docs/10/static/pgtrgm.html#PGTRGM-FUNC-TABLE) instead of rolling your own c̶r̶y̶p̶t̶o̶ text similarity algo. It'll be much faster than anything you'll come up with, more reliable, you'll get full text search for your forum for free, and it's provided by the database, the thing that actually holds the data, where it belongs.
I really like that stemmer idea, it seems really good. I've also thought about forcing lowercase and removing punctuation and stop words. Another idea I heard would be to remove results that don't include a keyword or two. Do you have a benchmark on how long similar text or levenshtein would be against 5k, 10k, or 20k strings or something? 
&gt; Wouldn't be a terrible backdoor, either, if that mistake wasn't made. Yes it would. There is a lot more wrong with it than just the simple typo. 
I'm gonna have to be able to support mysql and everything else so I can't stick to just poatgre. 
Ok, then depending on the effort you want to invest in, several options: * Ship Postgres with your forum addon, just like MongoDB ships Postgres for their BI backend, or how it's shipped on small IoT devices. * Re-implement the crucial parts of stemming and language processing in PHP, watch out for language support (I think Postgres leverages Hunspell here). Just like there is a [re-implementation of the Postgres query planner in PHP](https://github.com/sad-spirit/pg-builder) * Sell the add-on as "Available only on Postgres installations" (possibly sell migration consulting) Depending on how you market your personal / company brand and how much involved you are, one option might be better than the others.
Ship postgre with it? Oof.. I mean it's an addon. I'll keep that in mind though. Selling it as postgre only isn't really an option here. I'll have to check if php solutions are comparable to postgres. 
Not a clue regarding benchmarking but I'm pretty sure doing it on the database is going to be far more efficient. I also saw this which might be useful as it does not rely on native MySQL or Postgres functions, which while likely making it slower would make it more portable. https://github.com/teamtnt/tntsearch
Nice work, as always coming from you or your team. I would suggest to add a Doctrine integration example to make your solution more accessible. Or any more commonly used ORM. Thanks. 
&gt; I have no idea how you would ship/distribute such a game windows user can packaging their php desktop application project into single executable with [phc-win](http://wiki.uniformserver.com/index.php/PHP_WinBinder_2:_PHC-Win) 
The term "backdoor" is used pretty broadly. I consider a backdoor any hidden functionality that allows a user to access a system. But in the case of this script, if it were properly checking the password, it would be a backdoor by definition would it not?
Yah, so, Kirk knew, but Saavik didn't.
I don’t know drupal. Only seen it. What is he missing? 
Will look into! Thanks for the suggestion. 
What spoiler?
Recently I got an e-commerce site project from a client who wasn't paying enough for the features he had asked for, if I try to bargain for effor or pay, the client would probably seek out another developer. I cannot afford to loose this client. I thought I could search GitHub projects that would fit the client's needs and I even found the project but it was in laravel, I search again, another one was in symphony, and another one was in cakePHP and so on. After searching for a longer period of time, I got it in code igniter. I shouldn't be celebrating about this, instead I should be learning another framework so that there are less worst cases for me.
I rarely edit the core files, as far as I remember, I've edited the core files only twice and that too only 5-10lines(usually a function that I'd be using throughout the project). So far I haven't made any change that requires me to extend the base. Code igniter fits my needs pretty well. And I'm very happy with it.
Security updates, standard cloud hosting practices, and standard site configurations almost never get hacked. I have no idea why you would need to do any of that, 
Potentially related: How do you feel about synthetic IV mode and other deterministic authenticated encryption schemes?
They side-step a footbullet in systems where a secure RNG isn't available. I like the idea of them, but I don't feel warm and fuzzy about SIV or SIV-GCM.
Thank you very much, I think I'll start with Laravel first and then symphony.
I have a very limited knowledge of JavaScript. I'm know jQuery and VanillaJS well. D3.js you said? I'll look for it. I usually use cpanel to manage sites(if that counts under server administration), apart from that I can manage my own server(for testing) using Apache with Ubuntu or any other distro. I'm looking forward to learning nigx as soon as I get a project that requires me to use it. You inspire me to learn more. For database security, I set up different users for admin and client and use those accounts respectively in php. I try to make as much as 1 sql query for 1 request. This is all I can do. Could you please tell me what and where should I improve?(experience: 4years)
I can't make any promises that I'll be able to find time to do such a thing, and if this library is well-received, someone else may beat me to the punch. That being said, I'll definitely put that on my [to do list](https://github.com/paragonie-scott/public-projects/issues/6).
Thanks I will look into this also.
&gt;I have also hacked Drupal's front-controller to completely clear out PHP's $_POST supervariable. The first reason this doesn't help is that [the Drupal exploit from March that hackers are using](https://www.drupal.org/SA-CORE-2018-002) exploits a vulnerability in Drupal's [Form API](https://www.drupal.org/docs/7/api/form-api), namely that request variables are not properly [sanitized](https://en.wikipedia.org/wiki/Data_sanitization). Notice that I said the request, not `$_GET` or `$_POST`. That is because the Form API potentially uses either. That is why [the fix](https://cgit.drupalcode.org/drupal/rawdiff/?h=7.x&amp;id=2266d2a83db50e2f97682d9a0fb8a18e2722cba5) for the vunerability includes [`DrupalRequestSanitizer::sanitize()`](https://api.drupal.org/api/drupal/includes%21request-sanitizer.inc/function/DrupalRequestSanitizer%3A%3Asanitize/7.x), which strips dangerous values from, `$_GET`, `$_POST`, `$_COOKIE`, and `$_REQUEST`. In other words, making only `$_POST` unusable will not protect you. To be honest, if you keep your site up-to-date, you don't have much to worry about. Needless to say, if your site has already been hacked, you should start a new server again from scratch. &gt;I've had to put all of my drupal databases into Read-Only mode. An alternative to that, which provides just as much security but much better performance, is serving a public-facing static site, generated via something like [the static module](https://www.drupal.org/project/static) and updating the private site privately. Keeping your site up-to-date is probably easier, though...
Slack does (I think they hired some ex-FB people who encouraged it).
Automatic updates are fine and dandy, but the update for Drupal 8.51 broke our site and it took the web monkeys three weeks to find the problem and fix it. That's when they were the ones to install the patch; just imagine the carnage if updates were pushed out automatically. Drupal sucks. Wish we had used a python based CMS.
In a dynamically typed language, what "sane" rule would you propose to handle boolean to integer comparisons?
First mistake is md5 hashing a password. 
Might I suggest the "web monkeys" were looking for other jobs in that time..? On account of being called web monkeys.
Do you want something like this? https://wagtail.io
They weren't employees. This is a paid service, hosted on Pantheon.
As if using python is going to magically fix your issues
Is that on their business card/website/email or is it something you call them?
Wtf are you talking about? I’m not dissing Blade. But comment OP was recommending post OP to use .blade.php which, without Blade, is utterly pointless. How did you miss that? And why the fuck did you then waste a quarter hour of your time trying to set up a false straw man on an argument I never made and then attack it? Seriously dumb.
Yes.
Better do it in a reverse order. For the fast development you've got a fw already so I suppose you want to learn more a good practice. An Symfony is much better for that while Laravel is full of tradeoffs for the faster deployment. Not to mention Laravel is extensively using Symfony components, so you'll be familiar with part of Laravel after learning Symfony. 
Some frameworks should die when they time comes. 
I didn't knew that, now I'll definitely start with symphony
There's also a second bug in there, which -- if you pick certain passwords -- will allow people to login with completely different passwords.
Just a wrong position of ")"
Wikipedia and Baidu are using HHVM/PHP
This is nice, great work! Though I don't know if there is an audience for this kind of extension. Gamedev in PHP is still non-existent and adoption life cycle starts slowly. IMHO you should tell us how it differentiates from this existing similar extension https://github.com/Ponup/phpopengl. Also you've made the decision to make a generator for scalability over the many things to bind, which is great, but: - why function/constant basic definitions (with manual overriding for special cases) are not generated as well ? - have you considered using SWIG (a C binding generator for many languages, including PHP 7+ AFAIK) ? 
that's like the 3rd or 4th mistake
I'd argue not every project need to be backed by a "dynamic" CMS. Sometimes using a static one makes way more sense. Unfortunately most static CMS are pure shit and have a horrible GUI or not GUI at all. I guess there are some solutions to produce static pages from Drupal itself. It's the best option. Limit access to the admin side within the corp. and deploy pages via SFTP on a dumb Apache httpd that doesn't run PHP or any CGI scripts.
That'd only be if it used || rather than &amp; &amp; 
Database Vs PHP is going to be a very small difference, doing text comparison will be CPU bound rather than disk/memory. If you've pulled all the titles (and their IDs) into PHP, running Levenshtein over them won't take a long time. As you only need to do it once (cache the result in the DB) when you create the topic, the time is less relevant. Also, do as much as possible to reduce the amount of titles that you're comparing against. Think about if it's actually useful to compare the title with topics from 6 months ago, 1 year ago, 10 years ago...
Why not take it to PR? :) Feel free to use any of my code
"3v4l Uploader", "All Autocomplete", "BetterFindBuffer", "CloseMinimapOnMultiView", "CloseOtherWindows", "DoxyDoxygen", "File Navigator", "Git", "Git blame", "GitGutter", "IntelliDocs", "LsBookmarks", "NeoVintageous", "Origami", "Package Control", "PHP Completions Kit", "PHPGrammar", "PHPSnippets", "SideBarEnhancements", "SublimeLinter", "SublimeLinter-php", "SublimeLinter-phpcs", "Theme - Soda" I made my own linter to interface to phan's daemon client for static analysis, though it's unreleased because it requires changes to phan that I've not had time to try and back port because it's a hacky getting it working implementation I've found that PHPStorm has some problems like you can't get it to display all linting errors on a file if it has thousands in the same file, where as sublime will and the colour scheme is a bit all or nothing, but either way I use PHPStorm for its debugger, and Sublime Text for when I'm writing new code It's too easy to miss linting errors in PHPStorm and it's generally less usable but debugging isn't good enough in Sublime Text
I am having such a hard time using sublime with large PHP projects, such as laravel projects, YII Projects. because it has a hard time finding definitions on vendor folders and namespaces. I have been slowly switching to VSCode, but I really like the SFTP Plugin for sublime and haven't found a good substitute to it.
Yeah I have tried VSCode and am really liking it, unfortunately my machine can't handle so I'll be sticking with Sublime for a while :)
Didn’t drupal themselves alert the world that there was a horrible zero day in the wild? Yes, they released a patch, and apparently most of the world applied it already. Some needed time, or whatever. Point is, there was a flaw in the code, anyone just running “standard” configs thinking they didn’t have anything to worry about....
https://github.com/barryvdh/laravel-ide-helper
Of which the best plugin is PhpStorm.
Sounds good, will take a closer look. 
Sure, if you like bloatware.
TIL: IDE="bloatware"
With installed plugin lists like above here Sublime isn't far from PHPStorm bloatwise...
I agree with you completely.
Sublime code for coding something new, shiny and new. But for real job: Either a real IDE like Pycharm, or Sublime Text.
--you are assuming that the server will be hackable. I'm not saying that the server will not be hackable. But encryption of data and storing that data in a way that it only makes sense to someone who worked on it, is our approach. Even if you have hacked it you will only see things that may take days/weeks to understand what it's doing because of the way the data is stored. --reddit is just storing a simple data for a user, it's not a multi-tenant kind of system. we are just making comments here, not a few simple details there are no robust system/modules being used here. --Have you had experiences with multi-tenant systems? What was your approach? --This is going beyond the question....
&gt; a non-null type nonnull, a slight refinement on mixed (which can contain null) I would have named it something else but +1. &gt; no function/constant fallback to global scope (so array_map must always be properly prefixed) +1. Very good change. &gt; introduction of a dynamic type, to prevent mixed leaking outside function boundaries (Psalm achieves the same by having different issue types for various mixed violations) I don't know enough about this to have an opinion worth sharing.
I like VSCode &amp; used it as my debugger for a while but they've still got polishing to do: https://github.com/Microsoft/vscode/issues/28177
Security updates were first on my list. But that said, Drupal is not a set it and forget it CMS, by any stretch. There is a ton of code in a lot of these open source projects, and there will always be vulnerabilities and there will always be security updates.
No extra plugins that I'm aware of; I'm using the free download version, with updates installed. I wonder how many other people are having the same trouble ... ?
I guess it's time to finally install that
What a python-based CMS offers is a low percentage target. I built a python/Flask data silo, and when I monitor the logs I see it being hammered by bots and script-kiddies trying all the latest PHP exploits. Less than 1% of the hacker traffic is anything intelligent, and only a tiny percent of that targets the pythoness of the site.
I had been using Sublime Text for a while before switching over to PHPStorm full time. Been wondering if I should be going back and having another look at it, but there are a few things I think I'd seriously miss. PHPStorm just does a fantastic job of figuring out the context of the code. It seems to be readily able to figure out from both the code and the doc blocks what is expected in and out of methods. For dynamic properties, it understands looking at the class level doc block for those and treats them like real member variables. I just haven't seen another editor that does that as well. I do a lot of SQL work with PostgreSQL. The smart complete for field and table names, as well as linting works fantastic. The ability to work with multiple data sources on the fly would be seriously missed. You are definitely right about debugging with PHPStorm. It works pretty nicely, and I use it daily. At the same time, I often feel like I'm boxing with PHPStorm as it tries to do too much with syntax and indenting. That, and the massive amount of functionality I never use. This is why I'm always on the look out for a simpler approach that can still handle the basics that I personally have come to rely upon. Worth my while to give Sublime Text, or some other editor, another hard look?
It's a good idea, everyone would appreciate when you implement it. 
I call them that, for a variety of reasons, not the least of which is their inability to manage a Drupal update cleanly and responsibly.
&gt; Very nice change; I suspect this was in part for efficient inout parameters but I don't see that mentioned. I imagine /u/fred_emmott would have more info
I used PHPStorm for 8 years. It's still far from PHPStorm bloatwise, at least as far as felt performance is concerned.
It's not the front door.
I always see this argument (sublime and other text editors being so much faster), but I can't honestly say I experience the same thing. I have a very average setup and my laptop is extremely slow by todays standards (Thinkpad T410s with a SSD) and I can't say I feel like PHPStorm (or other IDEs) are that much slower. Yes they take a few seconds more to start up, but I do that like 1-2 times a month, max. I feel that whole "IDEs are so slow, my text editor is so much better" argument has become more of a hipster opinion than an actual fact. I might be missing out on something though. I spent quite a while trying to use Sublime text a couple of years back but at least then the autocomplete plugins were absolutely terrible, and I've grown extremely dependant on those in larger projects with lots of dependencies.
I use Vim, why ? It’s lightweight, widely available. Learning curve is steep for me , might be different for others but once you past that, you will be surprise how fast it can be. 
&gt; Yes they take a few seconds more to start up, but I do that like 1-2 times a month, max Do you ever switch project directories or get ridiculous CPU spikes while you're coding and not even doing any file operations?
Running code samples tell people nothing about whether it's a good idea or not. Non running code samples may very well prove a specific point about it and preventing it would be counter productive. Finally general advice and common sense still applies: don't just copy paste from the web without understanding what it does and why it does it. 
I have like 20 projects open in PHPStorm, and no, not that I've noticed with the editors I've used over the last years (phpstorm, netbeans, sublime, visual studio)
In retrospect it's probably so `inout` parameters *actually work at all* on arrays; I bet they are disallowed right now.
Phpstorm. Would never go back to something else. 
Here's where it touches reality. &gt;* Unwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment; * Deliberate misgendering or use of dead names (The birth name of a person who has since changed their name, often a transgender person); * Threats of violence like "The person that created this PR should be punched in the face"; * Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm (even as a joke); * Sustained disruption of discussion; * Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others; * Continued one-on-one communication after requests to cease; * Putting down people based on their technology choices or their work. (IMHO) This is what happens when you get too big and finally have to hire an HR person to resolve stuff.
First step into improving the PHP official docs will need to be the migration to Git\(Hub\) repositories. That can be done only by people with access to the Git repositories and GitHub org. It requires a lot of volunteer work but there were discussions on this assuming that those still apply and people haven't given up yet. Running code examples or making some sort of tests should probably be a part of hooking the docs with some CI server. The docs workflow of such scale should approximately be:\- fork the repo over GitHub\- make adjustments\- send pull request\- Travis or similar CI solution builds the docs, checks coding style, parses code examples \(maybe this is this step\)\- review/merge pull request\- build and publish the updated docs on the public php dot net site
OP is talking about user notes AFAICT. It's unrelated to the actual documentation. Most (/ almost all) code examples in the official documentation work fine and if not feel free to make a suggestion to improve it at https://edit.php.net also all documentation pages have an edit link at the top right. Also note your example workflow is basically the current workflow in use although it uses svn instead of git. Don't get me wrong I hate svn as much as the next guy, but the workflow described above is mostly what there is now.
http://testdrivenlaravel.com is an excellent resource for people who are new to testing, even though it _is_ tailored to Laravel. There are plenty of concepts you can apply to other languages/frameworks, though. [Growing Object Oriented Software Guided by Tests] is a book that really helped me understand testing, especially test first. The examples in the book are in Java, but again, the concepts apply to other languages. The Test Driven Laravel link I provided is very clearly inspired by that book. I'm really surprised nobody has included the books by [@grmpyprogrammer] since he's fairly well known as the "testing guy" in the PHP community. I believe all of his books are on his [Leanpub]. [Growing Object Oriented Software Guided by Tests]: https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1525976055&amp;sr=8-1&amp;keywords=growing+object+oriented+software&amp;dpID=51fUKOog3VL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=srch [@grmpyprogrammer]: https://twitter.com/grmpyprogrammer [Leanpub]: https://leanpub.com/u/chartjes
Where did you find this? Screenshot for those like me who are panicking?
There's https://github.com/carnage/doctrine-encrypted-column for the encryption, but I'm fairly sure it doesn't have any blind indexing support.
&gt; Sustained disruption of discussion; This one sounds like a wildcard for anyone they just want to get rid of. In fact, it could be used against people who point out Code Of Conduct violations. &gt; Putting down people based on their technology choices or their work. So you can't point out to people that they maybe should invest in some professional level training or read some specific books because that could be putting people down. Disclaimer, I really don't care about Codes of Conduct, I just thought those two were mildly amusing. 
I was working with WordPress and Joomla for years.. I try Octobercms and i'm really never looked back. For Developer view is super easy to work with it, to make any changes according to clients needs. As for clients view, this CMS is really client friendly because you can customize it to your client needs. For example take a look to this theme http://octobercms.com/theme/ketikidis-octobercms-success It has a Page Builder that is really powerful and easy for everyone. Just give a try to this CMS and see for your self. 
I see, the user comments with the code... Sorry, I've missed that. Yes, that would be probably a bit too much to implement. Sure, I'll gladly help out. I think this is actually pretty related to the whole docs thing. At the moment the [edit.php.net](https://edit.php.net) editor is not working exactly as it should. Maybe some bugs got fixed since I've last checked but I wasn't able to send some patches through anymore and basically just gave up on fixing things :\) I'll check what can be done... I believe that from the contributor point of view, using a desktop text editor for fixing the docs is way more productive than a browser built in editor like edit.php.net.
&gt;&gt; basic examples at the level of assertEquals(1 + 1, 2), which is really frustrating because I cannot put that into practice at all. Just do a case for each function in your program. Does your AddItemToShoppingCart() actually add something to a cart? Test for it. Does DeleteItemFromShoppingCart() remove it? Write a test for it. 
comme ca? https://bshaffer.github.io/oauth2-server-php-docs/cookbook/
It still has bugs, but sending patches works. I think the main problem is that the doc format is (imo) terrible and hard to contribute to for new people. I think a lot would be gained (in terms of external contributions) if there would be a nicer format of the docs, but that too is not as easy to do sadly. I would love if something like markdown could be used, but that would be very limiting in terms of features.
Emmet and Alt+F3 (or CTRL+CMD+G) is life~
There is already a [post](https://www.reddit.com/r/PHP/comments/8ig7f5/visual_code_vs_sublime_text_vs_other_which_do_you/) like this one, posted 2 hours ago.
A few that haven't been mentioned yet: - Case Conversion - DockBlockr - JSON Reindent - Theme Menu Switcher and the ubiquitous Emmet I guess. I have to recommend trying PHPStorm though. I used Sublime religiously for a couple of years and I loved it, still do. The granularity of undo/redo and the way it handles multiple selections are still unrivaled, but once you get past some quirks and minor shortcomings of PHPStorm, the code intelligence and other IDE features are just to good to ignore.
Any reason you didn't require a higher version of PHP to make use of type hinting?
I mean, sure, but in the mean time why not change the internal representation to use one of the cryptographically secure methods prior to removing it?
There was no zero-day as exploits appeared after the updates. (That makes the exploits a "16-day" ?).
example of my architecture is here https://github.com/Dave3991/containers_project
We can’t tell you what’s wrong with your architecture when we can’t see it. 
sorry, edited ...
PhpStorm is by far best. It automates some of the stuff you do all the time.
No way! You use Google Search through Sublime Text? I've gotta try that.
Years ago I learnt 80&amp;#37; of what I know about TDD with Juan Treminio's series on PHPUnit [https://jtreminio.com/2013/03/unit\-testing\-tutorial\-introduction\-to\-phpunit/](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/) It's free, it's relevant to PHP and it goes well beyond the basics.
It's generated from a hex value of seconds+milliseconds. For sure there are applications relying on this fact to reverse-engineering the time, or smart engineer used a fixed-width column to store it. Changing the generating function is going to be disastrous to these applications since it may not fail their application immediately but creating conflicting records more easily at an unexpected manner. Fail the whole app is better than fail unexpectedly.
Can the implementation be fixed to match the interface? I.e. can it be made to return an actual unique id instead of deprecating it?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/lolphp] [uniqid() to be deprecated becase it doesn't actually return a unique id](https://www.reddit.com/r/lolphp/comments/8ii4y5/uniqid_to_be_deprecated_becase_it_doesnt_actually/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Hmm, I guess the mindset is, why fix this when there are better methods at providing unique values?
There are interesting replies here: https://twitter.com/matthieunapoli/status/994627977471291392
Well to my knowledge, the format of it is not officially documented behaviour, the guarantees given are based purely on length, and that's nothing converting the binary to base 36 and substring wouldn't solve. http://php.net/manual/en/function.uniqid.php
&gt; How about making it an alias to the new recommended method instead That would be a terrible idea.
I hear you and agree, though I would prioritize a smooth transition to Argon over throwing an error. There's also the problem that if you present the user with a maximum password size, the savvier among them will suspect you're not hashing the password. It's certainly what I suspect whenever some site tells me that a password can be no longer than N characters. (Though, N is usually something absurdly short on these sites, like 12.)
Ok... I concede that :) But, I won't concede the original idea, that so long as you run standard Drupal with nothing 3rd party, you're off the hook as far as maintenance and security goes.
It doesn't matter whether things are documented or not for a language with as much usage as PHP. Every observable behavior must be assumed to be used.
I try using it too as much as possible, but it's not entirely "in my system" yet, meaning I often obmit it because I don't think about it. It's very easy to remove but very hard to add "final" to a class in existing code. So if you don't immediately have a use case for extension in mind, I think it's almost always best to add it to any new class you add.
Search for phpspec there are some good demos on using it. 
Well maybe replace it with a simpler function: //Generates a cryptographically safe guid function guid(){ $data=random_bytes(16); assert(strlen($data)===16); $data[6]=chr(ord($data[6])&amp;0x0f|0x40); // set version to 0100 $data[8]=chr(ord($data[8])&amp;0x3f|0x80); // set bits 6-7 to 10 return vsprintf('%s%s-%s-%s-%s-%s%s%s',str_split(bin2hex($data),4)); } 
The github project is the new one?
I use Emmet, Git , Laravel Snippets alot on my job.
https://ocramius.github.io/blog/when-to-declare-classes-final/
If it makes sense to test a class via extension then the same use-case should exist in the application domain. If it does not, stop writing nonsense tests that do not reflect any valid use-case.
I don't understand your question. The way you lay out your directories doesn't determine your application architecture. I mean sure, the idea is to separate things in well encapsulated and loosely coupled components and modules. But this can be realized by making each module a simple class, no need for any complicated scaffolding. So the question is what are the specific problems you're resolving and how? 
A plain PDO (mysql driver) example is now available [here](https://github.com/paragonie/ciphersweet/blob/1769f6230c18e43d4cb4135ec8221cbd45d1bbe8/docs/examples/02-pdo-mysql.md).
In Robert "Uncle Bob" Martin's Clean Coder video series, The TDD Episode Part 2 (https://cleancoders.com/episode/clean-code-episode-6-p2/show) starts off with him doing a TDD session showing him doing the Bowling Kata from scratch. It's worth the cost, IMO The code is in Java but is very recognizable/readable for PHP developers. I've had a few people watch this one for a good intro to seeing what/how to do TDD. 
Most of the classes I will be extending are abstract classes, and even in abstract classes I use the final keyword on methods as often as possible. I declare methods and instantiable classes final by default and can always go back, though often I will add a new (abstract) method to the interface (and abstract class) instead, making the extension method mandatory when we're implementing or extending. Therefore my abstract classes retain their functionality by being final, and you fill in the abstract methods. Hope my wording is understandable.
VSCode because it has 90% of the features I wan't and uses a quarter of the memory of PHPStorm. Otherwise I'd use PHPStorm for PHP and stick with VSCode for JS
no way. Hover over a function named get() and the definitions will pop up from inside your node_modules your vendor folder and all base classes in your project. It does not know how to scope the function from the context is in.
I'm disappointed this is getting downvoted. Agree or disagree, it's an idea and discussion in the interest of improving documentation. Sometimes one person's idea, regardless of merit, can kick start another person's improved idea or implementation, which then improves the community.
You might just be due for a rewrite. After 10 years of work that's not surprising.
I guess, with functions like those haha but for those I just Ctrl+P and manually jump to the class it's obviously from etc.
Strings in programming are effectively an array of characters and so when it's looking for and not finding the 'ErrorCodes' key it's returning 0 and therefore the first character of the string "array". I don't think this should stop execution as it is in fact working the way it's designed, I can't see this changing in future versions.
Yep thanks, that‘s exactly my point. A second point was that even code that works fine today might get deprecated or problematic in the future but no one will get a hint as it is today. The comments accumulate mold.
I improve things in my reach and you do yours, how about that?
This sounds like the it might be the kind of codebase that my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) was written for. The book gives a series of small, specific steps to take to improve the maintainability of your application, without affecting the functionality of the application. By the end of the process you'll have a fully modernized codebase. You might want to check the book out; there's a 45-day money-back guarantee, so the most you would lose is the time it takes to skim through it -- and the most you would gain is a better quality-of-life at work. :-) Regardless, good luck!
Emmet Docblockr SFTP (wbond - dude that made package control) And a bunch of syntax plugins like SASS, Babel, etc :) SFTP is a huge time saver if I'm tweaking code on a prod site, or a server that isn't set up in our local environment.
well that's exactly my point sometimes is not that obvious, or you have 10 more things in your head while debugging large code bases. Imagine debugging a function retrieveAttributes() for an importer class this function is an overwrite of a parent class Model that overwrites it and calls parent ActiveRecord which calls another function. now you have 4 classes in your head to try to "CTRL+P" ,because Sublime cannot reference the context of the original class you tried to reference the function from.
no b/c i dont hate my future self when my boss tells me about a scope change.
Can you give an example? This isn't a hard error, just a warning. $foo = []; $x = $foo['bar'];
PHP does it almost right: In integer contexts, cast the boolean value to 1/0, in boolean contexts cast the integer from zero/nonzero to true/false. The problem is with what PHP deems a specific context sometimes. For instance, in this case `max()` should be strictly numerical, i.e. the order of the arguments shouldn't matter and they should always be coerced to integers.
I'm a programming newbie and I keep hearing people talk about their 'workflow', but can't find a definition. What exactly do you mean by that?
Basically, how code progresses from inception until production. 
Why not use a counter against every word and do one loop of selection sort to sort out string with highest count value. O(n) ? 
Coposer files Are in containers ... ./containers/example/coposer.json
I dont't have to think about adding it since I added it to the "new class" template in PhpStorm.
Very good summary! As others already mentioned, with 7.1 onward the use for phpdocs as type-only documentation tool almost goes away. If a) the types are fully expressed via actual declarations and b) the method itself doesn't warrant any docs on its own, then don't write a phpdoc. Safe your time and screen space and mental overhead for the next developer to have to read both. Some methods are just going to be complex by nature and then it's always good to have a brief outline what it's supposed to do if it gets to much to infer this. The only time I require phpdoc is when the type system can't be expressed. If your method is: function getRandomIntegers(int $numIntegers): array { … } then the `array` typehint isn't enough, because it's typed array and the next reader deserves to know. Of course it's clear in this case but it might now in others =&gt; thus a hard rule: /** * @param int $numIntegers * @return int[] */ function getRandomIntegers(int $numIntegers): array { … } I've also seen the argument for whitespace but I object. We actively remove phpdocs which _don't add value_. Nothing is more worse then to have comments which your brain has to additionally parse which _do not convey meaningful information_.
&gt;I would just remove the docblock on the property as well since it's clear what it is thanks to the constructor. I wouldn't, because: * there could be many more properties * there could be additional constants and whatnot * so the constructor might not be in you visible range on screen * \(worst case: property isn't initialized in the constructor but even somewhere else, too. Not endorsing it, but you never know\) * effectively, the constructor/property initialization and the declaration are \_disconnected\_ =\&gt; thus the hard rule: always document properties, no exception. OTOH: the best property is the one you don't need, anyway :\-\)
&gt; a pretty unique developer experience ... you made me chortle. Yes, yes it does.
_"Our company adheres to PSR-63 Code of Conduct and we're all happy plus we smile all the time, and don't you ever dare to criticize your coworker's choice of some technology, even though it does not fit the job at all. Or you'll be fired."_ Aaaahh, THE FUTURE. 🌼
Best answer yet :) yes he needs a full rewrite. Perhaps Laravel or Symfony is best.
Yes, learn testing-- it is highly valuable. I've had the express pleasure of seeing how TDD can go wrong. Building nothing but what you absolutely need and relying on getting hours to refactor as needed can leave you with an infuriatingly missing expected CRUD method that should have been there at the instantiation of the feature or just a messy unmaintained application that is a nightmare because the refactoring bit of the process never seems to happen. The worst is people treating writing the least amount of code to satisfy spec like "code golf". Some people swear by this TDD stuff-- mostly consultants coming in to teach it as the latest fad in programming. I don't like it based on my experience with it in two separate fortune 500 companies. But, having unit tests to know ahead of time that your changes probably don't blow up things elsewhere in the application; the juice is worth the squeeze. Write tests and keep them updated with changes to the code, you'll thank yourself later.
Serious question: Do we REALLY need that as developers / communities or shouldn't we just better concentrate on what the projects were about: Solving problems and getting things done? Sorry, but for me it always feels like those discussions are just a waste of time and mostly initiated by people who cannot add anything really useful to a project in terms of code, so they think adding some "social" things like a Code of Conduct is also a step forward for the projects.
"But this can be realized by making each module a simple class" - No, it couldn't because every class may have different dependencies on libraries in vendor directory For example for computing you don't need latte (template system). I'm resolving dependency problems, for example you want to upgrade certain piece of code but you have to do it everywhere because some library have to be changed. Also every module can connect to different database with different username = you can see which module, which queries Development should be more easy - one developer/one module 
Start playing [Let it go] song to the boss.
&gt; No, it couldn't because every class may have different dependencies on libraries in vendor directory For example for computing you don't need latte (template system). OK, few things. You said "I'm working on a huge company **app**". Emphasis on the singular "app" you used there. To have one developer focus on one module is one thing. To keep their module in a separate repository is *quite another*. You haven't explained why you'd need the separate repositories. Giant companies like Apple, Google, Microsoft, Facebook have gone in the exact opposite direction - they have found it much more productive to keep related projects in the same repository, in some cases, they even keep basically all their projects in the same repository, thus vastly simplifying *internal dependency* management, leaving the analog to PHP's Composer vendor directory only for including external dependencies (which should be introduced with care, rather than wild abandon, by the way). Second thing is, even if you'd rather break up the modules in separate repositories, this doesn't necessitate any particular "architecture". All you need is, again, a simple class, but also a composer.json at the repository root. That's the "architecture". Everything else you have, I'm not saying it's pointless, but I'm saying you haven't explained the point behind it. A simple class is perfectly capable of describing its dependencies and letting the instantiating code *inject* them. That's the point of dependency injection. The caller passes the dependencies, the class doesn't include its own dependencies (at least not those you'd inject). So your goals of relying more on injection, and yet having each module explicitly spell out the Composer packages it uses, those are mutually exclusive, all things equal. Unless those packages are interface-only packages like PSR-s. But in your question you need to disentangle these concepts: - User/developer - Module/component (can be a class) - Repository (can include multiple module/components) - Application (final client of all your modules/components) They're not one and the same. 
I suggests going the way /u/pmjones is proposing, or if you have got enough capacity in your company, skipping it to split codebase into services. Just write down new service and gradually move "traffic" into it. This article can help you: https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/ on how to have some options on scaled stuff from which you can pick what would be beneficial for your situation.
&gt; This sounds like it might be the kind of codebase that my book Modernizing Legacy Applications in PHP was written for. In news: a guy thinks everything sounds like people need to buy his book. More at 11. 🙄
You're right, it's not surprising. At all. But it's still kind of sad, because well architected projects don't do rewrites after 10 years. They refactor regularly and keep things fresh. People, if your company code tends to turn into "legacy" code, don't automatically assume it's how things are. It's not how things are. Rather, it's how things are when you have no competent lead devs and management.
&gt; Best answer yet :) yes he needs a full rewrite. Perhaps Laravel or Symfony is best. I got cancer reading this advice. 
I understand that giant companies keep their app in the same repository, it makes sense if they don't use external dependecies but we do. &lt;Enter&gt; In external dependecies is problem too, because if you are upgrading PHP (7.0 -&gt; 7.2) and one of external libraries needs to be upgraded, the others which are dependend on this library need to be upgraded too, so far it's fine unless developer change namespaces and you have to rewrite half of your code in whole (huge) app ... &lt;Enter&gt; I will give you example `public function __construct(DibiConnection $connection, ...)` have to be changed into `public function __construct(\Dibi\Connection $connection, ...)` 
Of course companies use external dependencies. All do. And managing dependencies separately won't resolve conflicts when you have to load conflicting modules in the same request. In fact, it makes it worse, because the modules work independently, but crash together. So I'm still not sure what problem is supposed to be solved here.
Hey there! Hope ya don't mind me bugging ya once more. Do I actually need to use http_response_code(404) or can I just use the header('',true,404) at the top of my document. Also, should I have the router redirect the invalid resource to 404.php? Or is it fine just output the 404 header to the invalid page? I hope that made sense.
[removed]
ok, I think I got your point of view ... I should say more about what company do for context. Our company builds specific software for big companies in europe (equivalent in US can be walmart or GMC) One of the problem is "specific" but it's different story the other problem is "app core" is changing (a lot). So my goal is to split core into containers a.k.a packeges (versionizing them) and then bring them together in one core 
Well, my personal advice... I'd strongly advise you to split in separate modules, and limit the input/output/responsibilities for each of them, but *keep them all in sync* (one version). What you're doing is, in essence, adding a lot of bureaucracy to the project, for the purpose of some very theoretical advantages, that you can't quite explain the practical benefits from. 
We are using Yii2 to run our online business: www.zhishiq.com. I can say Yii2 is really fantastic. Our company started in 2012, at that time, we were using Yii1. When Yii2 came out around 2014, after learning the architecture and design philosophy, I feel it suit my taste a lot and we rewrote our project with Yii2 immediately. Till now, the project has grown to a medium/large sized project, and Yii2 still works well. Comparing with several popular frameworks, such as Laravel 5 and Symphony, the characteristics is Yii2 hope to do more things in the framework part, hope user can start writing a program out of box, so when designing the framework, the architecture can be more complete. The good result is, the overall design is more consistent. Take the class diagram of ActiveRecord in Yii2 as an example, the class hierarchy from Object -&gt; Component -&gt; Model -&gt; BaseActiveRecord -&gt; ActiveRecord, every level is responsible for it's part with certain purpose, which can be extended easily when building our own feature. Precisely in this example, 1. Object is responsible for Configure and basic getter/setters 2. Component add the feature of event and behavior 3. Model add the feature to contain and validate data 4. BaseActiveRecord add the feature to build a framework to interact with SQL/NoSQL database 5. ActiveRecord add the feature to actually retrieve from RDBMS As I mentioned, in such design, we, as framework users, can reuse these classes easily when each class being responsible for its one purpose. We can inherit Component to support event. We can inherit Model in any scenario that need to receive and validate data. Also because the whole framework is designed as a whole, you can use surrounding features such as ActiveDataProvider, Pagination, gii, form very conveniently, in an elegant way. The code is also very clean and easy to be read. Following the code from index.php, you can easily know what the framework does, from getting configuration, to resolve request, to handle request by controllers (sometimes controllers in a module). Some frameworks just do the core part, they apply existed components from the community and leave surrounding parts to the community. It's good in some way. It avoid reinventing wheels and encourage community joining the project and save a lot of time when implement the framework. But the bad side is, to making parts from the community available to be integrated, the framework designer have to think too much on the flexibility of the framework, to compromise on the whole architecture. It will make the framework over designed, or not consistent, looks like fragments. Another thing I think is important is, in a team, members had better use the same method to resolve a problem, so that every one can understand each other easily. Some framework, such as Laravel seems to encourage people to use the way they prefer to develop, such as what is the directory structure is like, how to create a module. But such freedom may make a new guy confusing when he hope to comply with the best practice. Last but not least, the code of Yii2 is very IDE friendly, IDE can always autocomplete the method and variable I want to use. I notice this is because that our team is helping develop a legacy system based on Laravel, I feel very painful with many Laravel classes without IDE autocompletion, such as Facade, even with the help of laravel-ide-helper. I'm not mean to belittle Laravel, it's good in some ways, but Yii2 suits my taste better. As for job opportunity, at least in China, there are many company recruiting developers using Yii2. I must say, Yii2 is a good framework to work with, to learn from, and I'm looking forward to the release of Yii2.1! 
 &gt; 1! 1! = 1 
And you are telling this to the OP who doesnt even understand how to properly organize his code. He will require a full rewrite and better organization in addition to a quality maintenance program. Most companies or even enterprise users do not realize that monthly or even annual maintenance is required for the full stack.
&gt; And you are telling this to the OP who doesnt even understand how to properly organize his code. Well, neither do you, from what I read.
I'm really thankful for your advice, but at least I can explain benefits - every container has it's own external dependecies (vendor folder) which doesn't contain all libraries from project (I think this is the best benefit) - you can keep containers versioned not just only whole application - you can set up application by client requirements - easy add features/container (open/closed principle) - every container has it's own settings (can connect to db under different logins with different privileges) there is more, it's like different apps working together
Thanks for your complete reply :) I would give more that 1 point if I could
These rules have worked well for me: 1. If a class is abstract, declare all methods that aren't abstract as final (or private; if you need to mix in behaviour or allow extension you can create empty protected methods that can be overriden in children, trying to be as specific as possible in the signature) 2. All other classes are final So far in the past couple of years I haven't found a situation where this fails. When I've felt like breaking those rules they've forced me to take a step back and I've always come up with a better solution. It forces a flat hierarchy, composition over inheritance, the open/closed principle and gives my future self a clear explanation of intent. As far as testing goes I don't really use mocking that often and when I do I prefer to mock an interface than a concrete class. Same with creating stub or inline classes.
Thank you!
Yep, totally on point. These kind of changes are almost always from people who have no actual work to do. 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/3JM7AVt.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dyswj49) 
I much prefer to add comments only when necessary. Even if the constructor is not visible it's clear: go to the constructor. I appreciate not everyone feels the same, but I personally prefer to remove as much noise as possible. 
You can use either of the above at the top of your document. `http_response_code` is probably the more modern way of doing it. You don’t need to redirect (like with a location header), once you have sent the 404 header you are good. But you can still render content if you want, so if you have a special 404.php, you could include that to render your 404 content. If that makes sense. Kinda sounds like you might be using a framework though? If that’s the case, you might want to see if the framework has a documented way they can handle 404’s for you. But if this is a “build your own” (great way to learn) then the above is the route I’d go.
&gt; this is our dependency hell right now https://imgur.com/a/wOtXAgT Having lots of dependencies is not what "dependency hell" means. Dependency hell is the situation where you have multiple apps/modules that depend on different versions of the same dependency, and hence they both can't be used in the same application, as they are incompatible with each other. So ironically what you're *about* to do, that is, break everything into independently versioned components, **that** is what will bring true dependency hell to you. And this is what I'm trying to save you from, but you seem quite determined to learn the hard way. Negative. [Here's an ISO of Windows 10 that contains all editions in one setup](https://softlay.net/operating-system/windows-10-all-in-one-iso-download.html). They have subset ISOs, whose only purpose is smaller downloads, nothing else. So it comes back to whether you're so short on disk, that saving 10-20MB of PHP files is worth the major effort of refactoring your entire application like you want. And the answer is easy: no it's not worth it. &gt; But it's not about checkboxes, it's about features which are changing If they're changing for every customer, then according to the open/closed principle you yourself stated, you can keep the unique code in the tiny repository that holds the customer config. If you actually plan to fork components of your platform every time a customer asks for a feature change unique to them, then this is a direct violation of the open/closed principle, and the most direct route to dependency hell, where you'll be dealing with dozens of *mostly similar but not exactly the same* versions of the same component. My head hurts just thinking about this. I'm telling you, I've done this for 20 years, and all my alarms are setting off. It's quite possible we're simply talking past each other and not understanding each other correctly. Happens over Reddit. But if I'm understanding what you plan to do, then... ***nope***. 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/3JM7AVt.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
&gt; assert(strlen($data)===16); Why? Don't do this. Even the manual tells you not to do this: &gt; Assertions should not be used for normal runtime operations like input parameter checks. As a rule of thumb your code should always be able to work correctly if assertion checking is not activated. Remember, production setups typically use zend.assertions = -1, and that'll optimise asserts out. If you're not running production with zend.assertions seto to -1, go do that now. If your code relies on assert to function, fix that. Also, you can do the uuid like this too: function uuid() { return implode('-', [ bin2hex(random_bytes(4)), bin2hex(random_bytes(2)), bin2hex(chr((ord(random_bytes(1)) &amp; 0x0F) | 0x40)) . bin2hex(random_bytes(1)), bin2hex(chr((ord(random_bytes(1)) &amp; 0x3F) | 0x80)) . bin2hex(random_bytes(1)), bin2hex(random_bytes(6)) ]); } 
I'm unsure why adding a library means you change 40 files and 10 libs in composer.json. Every library includes its own dependencies, you don't have to manually type them in.
Why is that not good enough to cover most cases? People who need a more comprehensive solution can use bin2hex
I don't understand? If the problem is that uniqid doesn't work, then why not make it work? how is this different from any other bug fixes?
I'd happily see this language feature go away. It's caused me issues in the past and I don't think I've ever actually used it intentionally. I'd normally use substr() to extract a single char from a string. Last time I saw it causing an issue was in one of Drupal's arrays of doom, and it took me about a day to find which module was responsible for getting things wrong...
&gt; Also, you can do the uuid like this too: Pretty sure a single call to random_bytes and a single string format is more efficient than what you do here
&gt; Pretty sure a single call to random_bytes and a single string format is more efficient than what you do here Sure, it's ~3.6 times slower (2.4s vs 8.8s to generate 1m uuids). I don't generate that many UUIDs in a short enough time to care about how long it takes (basically 8.8 microseconds vs 2.4 microseconds is something that pales in comparison to the business logic that I run around the UUID generation). But still, don't use assert in production code. random_bytes throws already. 
&gt; But still, don't use assert in production code As I stated in my reply already I didn't put it there. I just never removed it because it wasn't doing anything bad for me.
&gt; As I stated in my reply Which you added after I quoted your reply in whole... &gt; I didn't put it there. I just never removed it because it wasn't doing anything bad for me. Then remove it now, before someone incorrectly relies on it.
That's not what security by obscurity means. "Security by Obscurity" means not documenting an API or service in order to make hacking harder. This is more akin to the Macintosh; by presenting a low number of targets, you reduce the incentive to develop hacking techniques for a given technology. The other reason my solution is more secure is Flask is just simpler than a PHP/CMS, presenting a smaller attack surface and containing fewer moving parts and therefore less chance for errors to be exploited.
Going against the grain, I tend to use final as little as possible in libraries. If only because I've been in circumstances enough where I'll extend and override some methods for a small tweak in a large file. Sure, I could have forked the library or re-implemented the whole class, but just extending and altering it a bit was much easier with less hassle in terms of long term maintenance. So, I try to leave my classes open to extending if someone else wants to screw around the way I did with other people's code. Yes, they might break something, but that's the risk they accept when they do it. I'd rather not tell someone using my library that they can't screw around with it just because I didn't intend for their use-case.
Many of the links are from the last year (I couldn't resist putting in a few of the classic criticisms, though), and all the criticisms are valid: PHP and Drupal are not well engineered solutions.. And any group of developers that takes three weeks to perform an update of something like Drupal has earned the handle "monkey", don't you think?
&gt; That is definitely not my problem if people just copy code and don't look at it. It is your problem, you authored it. Take some responsibility for the code you show others, don't show others code you don't want to take responsibility for.
new template engine means new version of library which depends on other libraries and their versions ... 
Only when the class is named "Countdown"
&gt; don't show others code you don't want to take responsibility for. Don't copy code without looking at it. By your standards we should probably close stackoverflow and render all liability disclaimers invalid.
Funny you mention SO, as there's been lots of work to remove/replace replies that contained insecure cryptographic examples... because the original posters didn't take responsibility for the shitty code they wrote. 
I don't even use classes ( ͡° ͜ʖ ͡°)
For me sublime, I’m just used to it, atom isn’t bad just eats memory.
&gt;random_bytes(16) so only ~65K unique results?
VS code. 
The best long standing comments should maybe just be moved to the actual docs themselves?
The problem with cryptography in particular is that regardless of what you do, it will eventually be outdated and insecure simply because algorithms become obsolete (see SHA1 deprecation for certificates and RC4 for encryption). Newer and better results will take a long time before they gain enough weight in search engines because everyone who searches would click on the first (old) result and this adds weight to it. What used to be OK 10 years ago might be outright insecure by now. The main problem boils down to the same thing: People copying code and not understanding what it does.
Oh yea, I remember when there was an effort to force a CoC onto the entire PHP community(ircmaxwell was part of it I believe). I was extremely relieved when it failed, hoping it doesn't rear it's ugly head again due to this :\
I am considering how one would go about building a template engine with PHP, in the vein of what wordpress has going, have a folder with folders full of templates, a config file for configuring what theme should be chosen, and then applied to the top level, where the site it self is going to be, am I a madman for thinking about doing something like that? * Also, any suggestions?
Use Twig, Blade or Smarty. WordPress can already be extended with Twig using [Timber](https://github.com/timber/timber).
All of the time. I can always make things less restrictive, but it's harder to make them more restrictive. So, I start with as restrictive of a set of keywords as possible and loosen from there. All classes are final or abstract. All methods are final or abstract. Everything is private until I know that it needs to be public or protected. Aside from it being more difficult to lock down an interface than to loosen it up, the other main driver for this is that anything that some other code can do with my code is a part of its published interface. If a class can be inherited from, then the extensibility of that class is a part of my published interface, even if I never intended for it to be. There are times where I have taken the `final` keyword off of a non-abstract class, set up some non-final methods on it, or otherwise opened up a class to extension. The key here is that it is now done with intention every time. The otherwise liberal use of the `final` keyword elsewhere only serves to highlight that these non-final spots are intended for extension, rather than simply extendable without intention. What I end up writing are lots of final classes, a small but significant number of interfaces for where different implementations need to be able to be used, and a sprinkling of traits and abstract classes for code reuse among the concrete implementations.
&gt; The problem with cryptography in particular is that regardless of what you do, it will eventually be outdated and insecure simply because algorithms become obsolete The bigger problem with the code examples that were cleaned up were more basic than outdated things. Such as not using any hmac, using outdated padding schemes (like, problems we've known since 1997... before SO *existed*), using weak CSPRNG sources (mt_rand/rand are not valid), etc. Even if they were using more modern algorithms, the rest of the code around it was absurdly broken. The bigger issue was people using this code and the original author taking no responsibility to update the code, even when commentators indicated it was problematic. Eventually /u/sarciszewski took the bull by the horns and forced SO's hand in cases where the original author stepped back. This is why it's important to take responsibility for any code you publish. *Any code*.
I would ask, why? Have you considered one of the many excellent PHP template engine options currently available, such as Blade, Twig, or Mustache? Smarty is old, but it still works rather well, also. If a full template engine isn't your thing, then why not just use vanilla PHP? &lt;?php include 'header.php' ;?&gt; &lt;?php include 'article.php';?&gt; &lt;?php include 'sidebar.php';?&gt; &lt;?php include 'footer.php';?&gt; I'm *not* saying your shouldn't attempt it. Projects like this help you grow as a developer and helps sharpen your mind. But I guess I'm just not clear as to what you want to accomplish.
&gt; This is why it's important to take responsibility for any code you publish. Any code. Or you now, don't provide insecure cryptographic algorithms in your language at all and make the most secure algorithms the default for parameterless calls. This way if someone really needs AES-ECB they have to implement it themselves. Holding people accountable for code they post online will never work ever. Information has always been provided on a take it or leave it basis and you will not change the entirety of humanity because a few dingbats don't understand what they do.
The only reason why an update would take long is because the base application was either quite out of date or because it was customised to the point where applying the update required first understanding and then replicating the customisation. If the application is working then I suggest that they did their job well. I don't have a dog in the Drupal race, but the PHP posts are well old and many of the "concerns" in them are in reference to versions of PHP no longer supported. Of course there are still many smaller issues with modern PHP, but then the same can be said for _any_ programming language widely used. That's not a useful complaint to make.
&gt; Holding people accountable for code they post online will never work ever. Then, please, do the world a favour and never post code online.
After 10 years of work a rewrite is likely completely impossible now that it has so many weird edge cases you'll forget about and users who will complain in the meantime while you're trying to greenfield.
Microservices. Keep the monolith, but chip away chunks of it to put into smaller code-bases. That's how all of the big players like Netflix, Facebook, etc. handle this kind of thing. Split off services that the monolith uses. Write new client-facing applications to serve narrower slices of the user base. Do what we always do: break it down into smaller pieces that are easier to maintain and reason about.
Better would be to do the world a favour and teach people to read and understand code instead of blindly copy-pasting it. This would be a far better solution.
"How you you eat an elephant?" "One bite at a time." The most important thing to do is to get comprehensive testing; having tests frees you up to make changes without being worried about breaking something. The general process is: 1. Identify a small section of code. 1. Write as complete a test suite for it as you can without changing anything. 1. Refactor. 1. Repeat.
so if new version of template engine library needs new version of robotloader (also exteternal library) you have to update robotloader library, but the others libraries needs lower version of robotloader -&gt; you have two choices: 1) update all libraries to be compatible within their self =&gt; rewrite your app code 2) give up new version of template engine 
Ok, internet stranger with a sales pitch. I probably wouldn't have a company credit card if they didn't want me to spend it on Reddit comments, so I bought your book. I've spent the last 18 months accidentally specializing in legacy refactors where operations are depending on continued functionality as they can't afford greensfield. I'm neck deep in a codebase right now that has it's stack frozen in time because of its dependencies, and is a liberal mix of single-page php scripts and perl among other things. My approach has been formed organically, but I'm now needing to describe and explain that approach to others and I'm not sure I can do that effectively. I'm hoping your book might help with that, and maybe validate some of my approach.
you are right but it's not only PHP, it is mix of PHP,C#, bash, (lot of) SQL, sometimes node.js (for computing not showing something) :( ... It's not possible to test everything + tests which we have now are slow, you have to really start computation with preset data and look into mysql tables what is output
Sooner or later, it's going to. Best to start preparing yourself psychologically.
&gt; I'm hoping your book might help with that, and maybe validate some of my approach. I hope it does too, on both counts. Please let me know, whichever way it ends up!
I'm trying to do this with the containers, services cannot handle everything, I thought this way in early times, I wrote some services but problem with dependencies cannot be solved by services.
Consider [Latte](https://github.com/nette/latte). Context\-aware escaping, compiles to PHP \(which makes it pretty fast with bytecode cache\) and has plugins available for widely used IDEs.
In order to make it work, produced output would have to longer. You can't do that, since there are implementations relying on current length. Solution? You can either produce a notice *watch out, output length is longer now*, which is obviously stupid, or simply deprecate the function now and remove it later. That doesn't break anything in production and from now on, whenever a developer uses this function, warning raises and aims programmer to the right direction \(`random_bytes`, for example\).
[Aura.View](https://github.com/auraphp/Aura.View) is one with a long history.
Your tests should describe what your code should do, not how it does it. For example, consider an object that has a "counter" variable that increases every time you call "increase" and that you can access with "currentCount". A bad test would be to call "increase" and then check if the"counter" has increased. Instead, you would call "currentCount" to get an initial value, call "increase", and then check that "currentCount" now returns a value one larger than the initial value. With this kind of test, you can make the underlying counter do ANYTHING you want when you call increase, as long as the next currentCount is one greater. With properly specified tests, refactoring should never break the test.
this sounds similiar to me, I think my containers idea should help you with dependecy problem, what do you think ?
I like to use it. It's shorter than substr and way more concise. I also use the alternative syntax though so it is instantly clear that I don't want to access an array key, but a character from within a string var_dump('foo'{0}); // string(1) "f"
Uh, that's part of the whole point of microservices. You have small applications running on separate servers doing focused jobs. Because it's a separate application, its dependencies are independent of the dependencies of the rest of things and can be updated and worked on in isolation.
Thank you so much! I'll use the http_response_code. I'm familiar with Php but been a while since I've built anything I cared about if you know what I mean.
Writing large codebase with intention to achieve existing outcome makes no sense to me. Either aim for some added value - an idea to improve something you don't like, or work on small concepts you hadn't yet figured out - a way to learn by challenging yourself. Otherwise you'll bury yourself in dull work wich won't bring any value, and most probably be deleted because new knowledge will make your code obsolete before it's even finished. The sooner you take a step back in such code the better (less time wasted), but the goal set this way (write template engine) and loss aversion will make decision hard to make.
Don’t do this. You’ll never migrate it 100% and you end up with two bad codebases
If you're doing it as a learning project, that's great. As with all projects, sit down and decide what you need it to do first. Then start building that. Don't think about adding features until you're at least 80&amp;#37; done. Even if it's just for fun or a learning project, your goal should be getting it ready to ship \(no bugs\), rather than getting it feature complete. 
I am writing one myself at the moment which is a little more than a template engine. At the end you are writing a parser which parse your code. It will take you about 2 years to develop. Great way of learning. Mine is capable of templating data (json for example) using variables &amp; methods in json which i think is great to use. Smarty is really fast in templating hence they had a decade to develop. But if you go for parsing once a minute and then cache it for the rest of the minute you can have really great templating engine
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.penny-arcade.com/comic/2004/03/19) - Previous text "yes" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I got answer, all I'm trying to do is microservice architecture. Container = microservice :)
You get why this was down voted right? Like we don't have to waste our valuable time for you to figure out why you're, at this time, sitting at -14
clearly you don't understand the concept of refactoring, composer wont help you if you don't have anything at this stage that would make use of composer.
16 *bytes*, not 16 *bits*.
The answers on GitHub were a bit more helpful than yours.
I didn't give an answer. I just said that particular suggestion would be terrible. Aliasing an important function with a known return value format to new method with an almost certainly _different_ return value format would be just asking for trouble.
When I noticed [the voting](https://meta.stackexchange.com/questions/309746/a-new-2018-update-to-our-terms-of-service-is-here) on the announcement I almost spilled my coffee. Given other recent initiatives, like SO for Teams, I would say SO made it to become a hulking bureaucratic giant which board of directors have no idea what are they doing.
ELI5 I don't understand what's happening, outside of users cannot file a complaint against SO or something.
i'm using this portable version in windows: https://github.com/kminek/sublimephp
And then learn to read the code with "not really" implicit before any function call, as not really shuffle this not really random array, and not really append this not really unique id. 
No I have no idea why it was downvoted. Let’s spend some time on this. My theory is people don’t like emojis. 
Sublime and Vim. I use Vim for scripting or small edits when I'm in my terminal emulator anyway. Other than that, I use Sublime for pretty much everything. It's fairly lightweight and does it's job of being a text editor very well.
Thank you. This is because of Facebook isn't it. New laws about collecting data is coming I suspect (or here and I didnt't know it)
It seems necessary to elaborate on my intentions, I am not talking about a template engine in the same sense, as pug is an engine\(rather, a pre\-processor\), what I have in mind is, more like an engine, that grabs a template in a folder somewhere, and grabs information from a database, it then uses all this to render a website, I'm thinking the templates will be html &amp; css code with php hooks for the "Engine". Let's break it down: 1. index page at root level, reads, lets say a config file. 2. This config file, explains what template is selected. 3. Template is loaded. 1. Template is loaded. 2. Database is read for content. 1. stuff like pages, content &amp; what should be shown in the menu. 4. All this is rendered, and sent as html to the browser. P.S. I'm not doing this for any other reason than learning &amp; fun.
i cant believe this is proposed [https://wiki.php.net/rfc/fallback\-to\-root\-scope\-deprecation](https://wiki.php.net/rfc/fallback-to-root-scope-deprecation) 
In projects I maintain I use [`localheinz/test-util`](https://github.com/localheinz/test-util) which provides a test helper as a trait. It has an assertion [`assertClassesAreAbstractOrFinal(string $directory, array $excludeClassNames = [])`](https://github.com/localheinz/test-util/blob/0.6.1/src/Helper.php#L49-L77), which can be used - for example, in the context of a project code test - to assert that classes contained in a directory are `abstract` or `final`. Similarly to defaulting to `private` instead of `protected` visibility for fields and methods, I mark classes as `final` to encourage composition over inheritance. Consequently, if I want to use instances of the classes in unit tests, I need to extract interfaces, which can both be used for type and return type declarations, as for the creation of test doubles, if necessary. Extracting interfaces is a small price to pay when comparing it with otherwise supporting `protected` fields and methods, which automatically become part of the public interface if a class is not marked as `final`. If a class is not marked as `final`, people *will* extend it via inheritance.
😆
Precisely right. The GDPR.
this cracked me up and I have no idea why it was being downvoted. your future self is lucky your present self is so thoughtful :P
We don't recommend running PHP on HHVM any more \- that said, to be clear, these BC\-breaking changes only apply to Hack code, not PHP code running on HHVM. We've accidentally introduced some regressions in our PHP support with 3.26 \(which aren't in this list\), and these are mostly going to be fixed in 3.26.1.
This comment should probably be your post instead. 
I have no idea what you just said.
We (the HHVM and Hack teams) are expecting this from the PHP community; there's two good approaches for HHVM+PHP users: 1. switch language to Hack 2. switch runtime to PHP7 Some of our corporate users are taking option 1, but we understand that there's a lot of pain there when you consider ecosystem, community etc. We're working on improving the Hack ecosystem and community, but even if it were already "better" than PHP, switching languages, community, and ecosystem is a big deal and not always the right choice.
I've never paid all that much attention to the actual comments. I usually stick to the examples in the main DOC area or search externally for thoughts on implementation. Rightly or wrongly I've just never trusted the comments there.
People have clubs and get together and keep bad guy in check with clubs. Bad guy says, "I no bad guy. You stay in cave, I take your club. We fight, I give you something. I pick it. It be good." People need cave. Cave is good. To keep the club you've got, Send an email to `team@stackoverflow.com` with * subject "opt out of arbitration" * a link to your profile in the body 
does this apply to non-us citizens as well? I'm from the EU and I'm sure such wave-your-rights-away-clauses aren't enforcable. (might send the email regardless, just curious)
Probably not yet. You know how the EU is. Eventually all the countries go bankrupt and sell their governments to Germany for Wiener schnitzel, lager, and BMWs. Then all bets are off the table. Be safe, opt-out.
Sehr schön! &gt;Be safe, opt-out aye
TIL About ELIC \(Explain Like I'm Caveman\). I like it.
&gt; make the most secure algorithms the default for parameterless calls Yes please. &gt; don't provide insecure cryptographic algorithms in your language at all No. People sometimes use cryptographic algorithms without needing strong cryptographic guarantees. If your "attack vector" is random bit flips and not a malicious actor, using a weak but fast cryptographic hash function for checksumming might be more valueable than using a slow but strong hash function, because the chance of a series of random bit flips causing a collision is astronomically low, even for very weak hash algorithms. Or maybe you're interacting with a legacy system which uses outdated cryptography, and, yes, that system should be updated or replaced, but until it is, you need to be able to verify its SHA-1 checksums.
That proposal actually makes a little bit of sense though. There is a non-negligible overhead to loading functions from the global scope if you're not already in it. From the externals discussion: &gt; Currently, when you write "foo()" in code marked as namespace "Bob", the &gt; engine does this: &gt; &gt; Check for a function "Bob\foo", use it if defined &gt; Check for a function "foo", use it if defined &gt; Raise an error if neither is defined &gt; &gt; If we add autoloading of functions, the logical sequence would be to &gt; attempt the autoloader every time we encounter something not defined: &gt; &gt; Check for a function "Bob\foo", use it if defined &gt; 1a. Run autoloader callback for "Bob\foo"; use function if one is now &gt; defined &gt; Check for a function "foo", use it if defined &gt; 2a. Run autoloader callback for "foo"; use function if one is now defined &gt; Raise an error if neither is defined &gt; &gt; The problem is that all of this has to happen every time you call the &gt; function, because at any time, the function could be registered, or a new &gt; autoloader registered that knows where to find it. Does `\strlen()` look ugly? Sure. I would agree, but the core concept this PSR is discussing is definitely worth discussion. I think this PSR would best be served if completed alongside a core API update that splits the core methods into different namespaces. So you could have: use Core\String; // Optional alternative: // use Core\String{strlen[, ...]}; foreach($data as $item){if(strlen($item) != 0){ ... } } &gt; is foreach and \foreach the same thing? This is the difference between language constructs (keywords) and functions. \foreach doesn't make sense because language constructs aren't loaded from namespaces.
I have no idea what you just said. 
this overhead can easily be solved by making the core functions "reserved names", and you will not be able to make \Foo\strlen or \Foo\is_array because it makes no sense 
Before: If StackOverflow did something unethical/illegal, you had legal recourse. Now: Unless you opt out, the new arbitration clause in the TOS waives your legal rights. You're "giving the bad guy your club".
&gt; this overhead can easily be solved by making the core functions "reserved names" That would not be a good language design decision, and would only lead to an even more inconsistent language. Reserved keywords is one thing, but globally reserved method names is just the shadow of bad design and the unwillingness to fix it.
So basically you want simple MVC engine. When I was designed mine, I have used many resources, but most helpful in shaping final logic was [this one](https://r.je/mvc-in-php.html) In most simple form you could probably skip controller at all,at least until you want to influence database from user actions
\+
When is TOS deadline?
30 days from May 2, so April 2-ish. Don't wait. https://meta.stackexchange.com/q/309786/157251
May comes after April...
Astute =) Fixed!
ok lets think a bit more in another direction why php should follow the other languages path ?... it has survived this long just the way it is.. why it shoild be so "strict"... as the Joker said \- "Why So Serious" the power of PHP for me is that the language is very very flexible making the language more "strict" is no solution to any problem maybe people wants the language to look more by JAVA and enterprise , but it will never be..... PHP IS PHP ... it made for everyone, its not made only for the "elite" making changes like that is actually making it worse for the language... it makes a barrier for the language to be only for the "enlightened" .... and PHP is not this ... nice discussion :\) thanks 
&gt; ok lets think a bit more in another direction &gt; &gt; why php should follow the other languages path ?... it has survived this long just the way it is.. I thought we were discussing how to make PHP a better language. That's the page I was on. Are you going to burn the book? Sure, if we throw out all history of language design, we can do all sorts of weird shit - shit that largely got PHP into the mess it is/was. We've seen what happens when you start sapping things together with no regard for language design. It's a bloody mess. PHP has only started to become a serious contender since it started making decisions with language design at heart. If you want to go back to the wild west days of PHP 3/4, be my guest. I've been there. I grew up there. It was chaos and fire.
i have been here since php4 and i know the times and the evolution of PHP adopting other language's concepts is great until PHP 7.2 arived and they break the count() there is a line here that makes the language accessible for low level programers... we must remember that PHP used also by front end people , web designers and web shops just to make sites what i was relating to is that the language and the ecosystem are getting mature and changing things like "deprecation the root scope" and count() will do no good to anyone , because they will make people go away to nodejs or some other languge PHP is now the glue of the web... and it works as glue because its very flexible and it worked the same since 5.6 maybe better language design is necessary, but all what im asking is not to break the existing functions 
http://droptips.com/using-dig-to-query-a-specific-dns-server-name-server-directly-linux-bsd-osx
;) ppl on r/php don't work in software dev is my thought.
This is disappointing, any trust I previously had in Stack Exchange is now suspect. Like so many useful services that used to provide great products and treat their users with respect, our capitalist utopia started chipping away until they evolved into yet another gang of profit-seeking shareholders chasing eternal growth at all costs, fuck the users.
Awesome answer, probably the most helpful yet. Thanks alot. 
Hey, QuarkMuncher, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Search for DNS on Packagist. Two examples: [spatie/dns](https://packagist.org/packages/spatie/dns) (wrapper for dig, second argument to constructor is nameserver address), [purplepixie/phpdns](https://packagist.org/packages/purplepixie/phpdns) (talks directly with DNS server). 
Here's a sneak peek of /r/explainlikeimcaveman using the [top posts](https://np.reddit.com/r/explainlikeimcaveman/top/?sort=top&amp;t=year) of the year! \#1: [Why Punch-Man fight Fight-Man?](https://np.reddit.com/r/OutOfTheLoop/comments/6wb1kv/what_was_so_important_about_the/dm70fls/) | [7 comments](https://np.reddit.com/r/explainlikeimcaveman/comments/6wd7e2/why_punchman_fight_fightman/) \#2: [ELIC: Why Grog try to observe electron place but cannot also observe electron path?](https://np.reddit.com/r/explainlikeimcaveman/comments/6mnfkz/elic_why_grog_try_to_observe_electron_place_but/) \#3: [WHY GET OLD? THINGY DOESNT WORK!](https://np.reddit.com/r/explainlikeimcaveman/comments/752ujj/why_get_old_thingy_doesnt_work/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Why is everyone so gung-ho to sue stackoverflow?
yeah great example of phpsadness/phplol that should be deprecated. i do not imagine this feature is used intentionally more than its discovered by accident.
only problem is if you are using mocking in your unit tests final classes are basically un-mockable since im pretty sure all the mocking libraries (at the very least phpunit internal one) uses inheritance to deal with mocks
solid point
HAH ! took me a sec
rolleyes
Please explain how the GDPR prevents non-European companies who aren’t marketing to Europeans from selling data in bulk (including the data on European users who found the website anyway)
PHP is particularly troublesome in this regard because it doesn't strictly enforce good programming standards in the way a lot of other languages do. For example, you can develop a web app in an object oriented manner using an MVC framework like CodeIgniter, or..... You can have flat pages that process beginning to end with html injected throughout. Some languages -- especially newer languages that were developed specifically for the web -- strictly enforce those rules. From a practical standpoint, what this means is that you have a much wider spread of quality when it comes to PHP. There *are* a lot of poor applications that have been made with PHP, but there *are also* a lot of great ones. I think that the best argument, though, for your friend learning PHP is that it's by a huge margin the most popular server side web language at 83.5%* market share. This makes it a lot easier to get work with this language in your toolbelt. *src: https://w3techs.com/technologies/overview/programming_language/all
 ive been refactoring legacy php apps for about 18yrs and have developed an organic approach as well, however i found his book to be extremely good advice and very close to my own trial and error experiences . 
**closed** as not constructive by *has_more_points_than_you*
I just don't understand how this is even legal. You should have an inalienable right to use the actual court system to sue. This corporate-fascist world we are turning into is starting to piss me off.
But what is stopping them from abandoning the previous TOS and forcing all users to adopt the new one? Seems like a whole lot of hassle for something that ultimately will serve no purpose.
No programming language enforces the kind of coding standards that would have prevented WP or Joomla from being the way they are. A strict type system isn't going to stop you from developing a shit architecture. All of WP's global functions and global variables would have just become global statics. It would still have that awful EAV storage pattern. Joomla's module/component/"routing" system would have been just as asinine and convoluted. Magento would have still been XML hell. At the end of the day, good code requires intention and deliberate, thoughtful design.
When it comes to any contracts, there are often clauses that are unenforceable or could be ruled as overreaching. Contracts can not supersede governmental law. You can't have a clause that states and expect to actually have it executed: "If you go against these terms, we claim the right to remove your pinky toes at your own cost." 
What is the current evidence that they plan to sell user information?
Such a linear understanding of time...
It's speculation. Big online free-to-use media companies tend to do it to open another revenue stream.
And only in Europe
Just my personal opinions: WordPress for complete lack of object orientation in its core, and frankly backwards stance of data storage / eav. Magento 1 for it's antipatterns and mage God class. Also prototype (not php, but talk about backing the wrong horse). Magento 2 for cobbling together a bunch of features from other platforms, without clearing out a lot of the old problems, resulting in a framework you can't actually use without a shit-tonne of caching. At the time, the docs were also full of errors (ditched it before/if they corrected them; not looking back). Also, you ditch prototype, but pick up knockout.js? What's wrong with you? 
I am writing my own framework (including javascript &amp; own parser language (Priya)) the poor website https://priya.software is running on it ! i started it from scratch without any help, just experience, it runs on php 5.6 and above and you should check composer to (that can run way more smoother and fancier...) and i needed to add some code to get it to work... (if he likes parsing, the current one is really buggy but hence it still runs the websites realtime without proper caching and one hell of a backend which i am writing...) But yeah the psr-shizzle discussion would be a better topic... I mean let them tput everything first...
Changing the way the function works but producing similar output would break a vanishingly small number of things. Document the change, put it in the release notes of the next 7.x release... seems better than removing the function altogether? That just guarantees that the vast majority of code that used it in a sane manner *will* need to be updated, or patched with a userspace implementation of the removed function. Same thing they should have done with `rand`.
It is not about arbitration. It's about the way it's run. There are thousands technical problems but with tremendous effort and fanfares it unveils... a new toolbar! It's Documentation flop. Its strange SO for teams. I didn't see any strategic decision in the recent years that made any sense. SO is a hulking bureaucratic giant as opposed to an agile startup it used to be long time ago.
_Disclaimer: I'm not an expert in this field, don't take my comment seriously._ The reason why serializer exist (thephpleague's Fractal) but no deserializer is probably due to it being overkilled. API consumers expect that if we get first_name from a service, we should pass first_name back to the service. If this decision was changed, we gracefully fail our API by accepting both values, convert it in our controllers and tests, then return warnings to the consumer. And it's usually not a devastating changes since you don't usually accept same field for more than two API calls (POST and PUT of an entity). Such changes are rare, and if I need to include a whole library just to do it, it seems a little bit overwhelmed and not justifiable. --- Serializer, on the other hand, is my favourite since it hides our data layer properly, and we don't accidentally introduce breaks to our consumers without realising.
yeah there's a lot of talk about "best practices" and abstractions and SOLID and other concepts that are great and all but require an increased amount of time and expertise to do correctly, and nobody's willing to pay for it. I love the theory and do apply these things to my personal and open-source projects, but I also make my living writing PHP and it just doesn't usually work like that in "professional" development. The code I work with on a daily basis has been written over 15 years by around a dozen different developers, it would send half the people here into cardiac arrest. Years of working on such code and making incremental improvements (or at least what I see as improvements) has really opened my eyes about the realities of how most code that's out there running websites and making money actually is. Speaking of money, that's usually the reason that production code is ugly. That and time... 
I do concede that it feels kinda aimless, and maybe grown past what's good for it, and is desperately trying to justify its unnecessary growth with useless or unimpactful projects. But bureaucracy is something much different. A bureaucracy is an organization that's focused on legalistic following of procedure and creation of procedure for procedure's sake. SO is still following it's original goal, it just does too much unnecessary crap on the side.
&gt; My approach has been formed organically, but I'm now needing to describe and explain that approach to others and I'm not sure I can do that effectively. I'm hoping your book might help with that, and maybe validate some of my approach. It will. Read the intro, and either just hand a copy of it to some stakeholders or repeat it almost verbatim. It's spot-on. I used it for exactly this same thing...
&gt; Rather, it's how things are when you have no competent lead devs and management. That puts many of us right back into the "it's how things are" bucket. Working on a SaaS project is nice because it's one large thing that everyone cares about and can take time to maintain. Having 50+ client sites to manage inevitably means that they only get maintenance when something breaks or the client wants something, there's never time put aside to improve or update anything. *No* client wants to throw money at keeping their sites code "good", even when it gets so bad things constantly break and minor bug fixes take days or weeks.
Have a look at https://github.com/like-it/Priya my template = {require("Template.tpl")} and rendered as html / json, database stuff can become {$user = sql.query("Select * from users where username=\"{$username}\"'" limit 1)} the config file is a .json file what kind of hooks do you have in mind ? What is your expierience?
Rewrites can work in one case that I can think of... client hires a new developer to recreate the product with a fresh spec and the new dev can't see the old code so can never be told "just look at what the old site was doing!" Then the original company loses the client and the new product takes over... and the process inevitably repeats itself after a few years or the client's company goes out of business.
There will come a day when Laravel's homepage has an announcement that the project is being discontinued / abandoned to be developed by the community. On that day, a smile will creep across my face and I'll just laugh. I maintain a bunch of sites that use Laravel through and through, and are heavily dependent on it. But you know what? With tons of other companies out there making the same mistake, it's going to keep putting food on my table for years to come. Fixing legacy code has become my bread and butter. Not really what I got into this industry intending to do but I guess I've gotten pretty good at it from having to do it so much, and there are plenty worse jobs out there.
This is an interesting idea. I like the thought of keeping separate vendor repos for different parts of the app, since composer does not natively support installing multiple versions of the same library concurrently. But how does it handle the case when there are two parts that depend on different versions of the same thing? Wouldn't the first one that gets autoloaded continue to be autoloaded in the other component, or is there some magic going on here that autoloads the right `Foo` when I have one part that depends on `Foo:^4.0` and another that uses `Foo:^6.2`?
It's present in a lot of languages. I know in C, and perhaps its predecessors, strings are actually char arrays. Probably a holdover from that. It doesn't particularly bother me even though I prefer to be explicit and use substr. Also pro-tip for dev environments: set_error_handler(function ($severity, $message, $file, $line) { throw new \ErrorException($msg, 0, $severity, $file, $line); }); or alternatively composer require symfony/debug Symfony\Component\Debug\Debug::enable();
I like Sublime. I've been using it since before Atom or VS Code existed and it's fast. I'm also leery of running Electron apps because of how insecure npm is and how huge the dependency chains of most js apps are, it's very possible for malware to sneak in. AFAIK that hasn't happened much yet but I don't want to be one of the people affected when it does.
Moodle
If maintaining old codebases with EOL frameworks is what brings you joy, who am I to interfere? I certainly understand the financial/business aspect of it: lots of repeat work, that familiar, and hence efficient, job security and plenty of clients knocking on your door. That said this is like choosing to be a car mechanic fixing old cars, rather than being a designer who builds new cars. To some the former is secure, predictable, and it's all they want. To others, it's quite soul-crushing. In my search of work throughout the years I've had brief stints working on WordPress sites, and Drupal sites, and yeah, it puts food on the table. But I was never able to live with myself, charging clients for doing all this low-efficiency work where I fight bad plugins and terrible code done by some other half-trained schmuck, so in 16 hours of work I can have a crappy version of what I could do in 30 minutes on a properly architected application / CMS. Also, do note I didn't say "don't use frameworks". I'm just warning against "(re)writing your application as a Symfony/Laravel application". This implies you completely buy into the framework, hook, line and sinker. But 80% of the application is code that does NOT benefit from being tightly intertwined with that framework. It's the 80/20 principle. You can attain 80% of the benefit of a framework, by only having 20% of an application's code embedded within it (as controllers, helpers, templates, etc.). There's no reason to butcher the flexibility and lifetime of the remaining 80% of the codebase, no reason other than ignorance. And, again, if you deal with someone's legacy code, that ignorance is not up to you, you're just maintaining someone else's code. But if it's *your* app, if it's *your* project... then why even go that route? It's pure masochism in disguise.
I wouldn't exactly say it brings me joy, but it's comfortable enough for now. It pays money, and only takes up 33% of my time, well actually about 50% of my waking hours... oh shit I'm sad now. I think a lot of people get into a career or industry wanting to work on the glamorous side of it, but there aren't enough jobs doing the fun work to go around for everybody. Or it turns out you're not so great at doing the fun stuff or just so good at doing the not-fun stuff that it's all you ever get. So it's just a job. Not that fun, but most peoples jobs aren't. Sucks doesn't it? It's also not the worst job in the world and pays enough to live comfortably otherwise. And there are plenty of other perks besides the quality of the product. I get to work from home a lot and have pretty flexible hours, which is nice.
Lmao
indeed. too broad.
He didn't say you gave an answer. Maybe start with understanding why he said something before kneejerking a hard defense of whatever.
Removing it is more of a breakage, so support the better case?
&gt; He didn't say you gave an answer. ... &gt; The answers on GitHub were a bit more helpful than yours. That is in fact exactly what he said.
Answer has multiple meanings. Either you mean the one you gave or another one you didn't. ¯\\\_(ツ)_/¯
This is nice, but I have a question about usage/implementation. I'm trying to upgrade my site to comply with GDPR by encrypting user emails. However, I want emails to remain "contains" searchable by admins. The only way to do that right now is to load all 270,000 member records into memory, decrypt them, and then do string comparison searching against them. This seems to be what your example is demonstrating as well: https://github.com/paragonie/ciphersweet/blob/master/docs/examples/02-pdo-mysql.md Is doing this search in memory in PHP the only way to do this? 270k records is an awful lot.....
In my country, I still have legal recourse so that makes me happy. Feels good to live in a pretty sane country.
I'm not sure they can do that. They could try. I am member of a community. I've made investments in being a member. Pretending like it's stateless and that I can give up and walk away is likely not the same way the courts will look at it. I would be under duress with the threat of banishment, so I may accept and argue it later. Moreover, they'd also lose all of the IP and user information they've thus-far collected. And, I don't think they want that -- so making sure everyone is under the same TOS is their ideal policy. Currently, they can fuck everyone, but they break a law or break our agreement -- we can sue. They just want to reserve the right to fuck you without recourse, and that requires getting you to waive the right to defend yourself.
Please please please!
&gt; This seems to be what your example is demonstrating as well Nope. The purpose of blind indexing (a.k.a. Bloom filter based on message authentication codes) is to allow you to do quick SELECT queries with very few false positives. You can't do an arbitrary "contains" query without creating a lot of indexes, but you can do specific transformations (e.g. first initial + last name; gender + last 4 of SSN)
We art like very much. Art gooood for Zug and Zag. I Zug and burn bone and paint UFO: one *zugging*. One day, one picture, one *zugging*. Slow. Zag brother of Zug and also need to paint art. Zag wait for Zug picture then go burn bone like Zug and paint UFO like Zug: one *zagging*. One day, one picture, one *zagging*. Two days: one *zugging* the one *zagging*. Zug and Zag every day for days. Slow. Zug mad and burn bone and then rage off and start painting. Zug being asshat. Zag no wait for Zug. Zag burn bone while Zug painting, Zag no wait: *zugging* one day, *zagging* one day. **NO MORE.** *Zug-zag* now. Zag wait for Zug to burn bone. Zug go paint and Zag burn bone. One *zug-zag*: two burned bones, one painting. FAST. Zag no wait for Zug. *Zug-zag* no harder. No more bone. No more paint. Fast. Why *Zugging* and *Zagging* ever again? Upvote if you want to see Computer Science From the Cave.
This won’t affect europe right? With the GDPR kicking in soon seems risky
You obviously had some bad experience with Magento /s 
Ya I looked at the code base
I know right, last time I said that here Ben Marks started his evangelism about how great it is
Any company that does not respect GDPR for their European visitors becomes a liability for other companies that do business with them. For example, in case of Stack Overflow, I see that they are using Google's ad platform on their website. Adsense terms of service, for example, mandates certain things regarding EEA (European Economic Area) customers and by going against these terms, they would risk their entire business with Google. Additionally, Stack Overflow runs job ads for European companies, and by doing business in any way in Europe, they will have to follow GDPR or risk all these business transactions. The only way a company can safely ignore GDPR is if: * They have absolutely no business with European businesses or customers * They actively block out all European customers For large international websites or companies, these are not really easy or even desirable things to do.
Are you sure this is made with a CMS? I‘d rather suspect this has been created with a framework (Symfony, Laravel...)
Came here to say this. It's so fucked up it qualifies as modern art. https://imgur.com/RMxWEgR https://what.thedailywtf.com/topic/20898/the-index-is-more-important-than-the-data https://news.ycombinator.com/item?id=13343468
&gt; The break of count() was big Are... are you serious?
&gt; WordPress for complete lack of object orientation in its core Right. https://developer.wordpress.org/reference/classes/ 
What do you mean we are missing deserializer? All well known serializers do both serializing and deserializing.
Can you give an example?
Omg, thank you "gut feeling" from protecting me of those gigs. https://www.reddit.com/r/PHP/comments/8iikbj/do_you_guys_use_final_on_classes_and_methods/ asked recently about `final`: &gt; As with every extendable system, some extensions don't work well together. Every module has the ability to override a Magento core class. Fun happens when two different modules want to override the same core class. That's a real world example what can go wrong if you don't use final.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [schmittjoh/serializer/.../**usage.rst** (master → 7bd6892)](https://github.com/schmittjoh/serializer/blob/7bd6892b452a319246cdf01c755c0255dfbe5430/doc/usage.rst) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyur20a.)
What makes you think they are using the same CMS? Because they look the same? Thats means nothing. Its just a similar design. They may have even started with the same base template. The first one is built on CodeIgniter, which is a framework not a CMS. The second one is PHP but I can't tell if its a framework. It kinda looks like straight up PHP. Other than both being PHP I see no indication that they use the same back end technologies
WordPress, Joomla, Concrete5. They're tornadoes of spagetti code, duct tape, bad practices, and inexperience.
Apologies, but none of your components appear to have tests nor an integration with, for example, [Travis CI](https://travis-ci.com). These are the first things you need if you hope for adoption by others. 
I don't get your question ... Every container has it's own vendor repos and loads only this repos. If you have one thing which depends on two different version of one library, you should split one thing into two containers and let the one container use the other as service
&gt;need to register to read the documentation how high are you my man
thanks for your reply, I will think about it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [flextype-components/cache/.../**Cache.php** (master → 6425a98)](https://github.com/flextype-components/cache/blob/6425a98d11c17331f37af7f3da70eccab3598b39/Cache.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyuvs3y.)
&gt; I would be under duress with the threat of banishment That's not at all how that works. Not even close. What?
What GDPR requirement is forcing you to encrypt fields in your database? Is this some requirement coming down on you from management or is this your personal understanding of GDPR? If it's the former, well, that sucks. If it's the latter, there are most likely other ways to meet the control requirements you're reaching for.
[removed]
we just want to be able to sue them if they do something or are negligent in a way that is actionable. e.g. data breach
No. Not at all 1. The GDPR isn't users bringing suit against a company. It's the Government telling companies to follow legal regulations or be fined. By the Government. 2. Areas where people are protected by the GDPR are areas where clauses like this aren't legal. Because we have rights over here 3. The GDPR requires **active and informed consent**. You can't just throw something in the TOS to bypass the GDPR. That's the **entire point of GDPR**
Your cookie component is basically directly executing client provided arbitrary code making it a huge security issue: https://3v4l.org/mqgR8
Sounds trashy
I think what you are talking about is essentially DevOps. The concept with DevOps is that where as you used to have a development team responsible for writing the application and a separate "SysOps" team whose job was to maintain the platform that the application was run on \(the server, the network, deployments etc.\). The two teams had very different expertise and disciplines. Nowadays we tend to think of these two concerns as being more closely ingrained and is the responsibility of one team. The discipline of SysOps driven by a development team is generally refered to as "DevOps". So in answer to you question: Amazon has a really nice overview with a breakdown to some of the different concepts. [https://aws.amazon.com/devops/what\-is\-devops/](https://aws.amazon.com/devops/what-is-devops/) It does of course reference Amazon's products quite heavily but could be a good place to get an overview.
Hey, WArslett, just a quick heads-up: **refered** is actually spelled **referred**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
A good entry point is the curated [Awesome DevOps](https://github.com/AcalephStorage/awesome-devops) list. However, be aware of [Impostor Sydrome](https://en.wikipedia.org/wiki/Impostor_syndrome) that affects us all, and don't fall into that trap. Somebody specializing in different things doesn't mean you don't understand it; you just had less exposure. A good way to learn seems to be to start a project that motivates you intrinsically. Build your own server from eBay hardware with [Linux From Scratch](http://www.linuxfromscratch.org/lfs/view/stable/) or OpenBSD; set up a GitLab container and a build pipeline for a toy project, a VPN for you to log in securely, a backup infrastructure. You'll have to research a lot, and during that journey you'll gain a tremendous amount of skills and trivia. (Hang out on IRC)[https://www.irccloud.com/invite?channel=%23%23linux&amp;hostname=irc.freenode.net&amp;port=6667] in the channels of your interest, set up a ZNC / IRC Bouncer if you like. Socialize and vist [Meetups](https://www.meetup.com/) and [User Groups](http://lugslist.com/) in your area. (This is the most important thing to do and benefits you the most.) Visit conferences, and unconferences / barcamps, listen to DevOps podcasts, read a (dead-tree) book on a topic of your interest. You'll do fine.
**Impostor syndrome** Impostor syndrome (also known as impostor phenomenon, fraud syndrome or the impostor experience) is a psychological pattern in which people doubt their accomplishments and have a persistent, often internalized fear of being exposed as a "fraud". The term was coined in 1978 by clinical psychologists Pauline R. Clance and Suzanne A. Imes. Despite external evidence of their competence, those exhibiting the syndrome remain convinced that they are frauds and do not deserve the success they have achieved. Proof of success is dismissed as luck, timing, or as a result of deceiving others into thinking they are more intelligent and competent than they believe themselves to be. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
So it took my some time to understand what this all means. It's basicaly saying: "If we somehow fuck up, willingly or unwillingly, you can't sue us. You can't point the finger on us. You give up on your legal rights. §4.1? Doesn't exist anymore for you. §xxxx? Forget about it." (btw. just used a random paragraphn number, I have no clue what this law is or if it exists) In EU you are not allowed to add or adjust the ToS to have negative or bad content for the customer that have to agree with the ToS. You can't say something like "You have to agree that you have no rights anymore.. if you don't agree, don't use our service". You are simply not allowed to do that by law and if you do, this FULL line will be declined. You still have the rights and you will probally win at the court. But.. if you ever want to travel to the US and there is some fuck up while you didn't wrote this mail to StackOverflow (Look at the steps from OP), then you can be fucked up, because if you travel to US, the US laws will count and if they have something against you, you can still be fucked up. [Here's some more information](https://meta.stackexchange.com/a/309806/295766)
No arbitration clause: Twitter Github Reddit Slack Google Facebook Wikipedia
On the homepage is stated that the documentation section is under construction. if you wish to read the code: https://github.com/like-it/Priya . What you where seeing is a glimpse of the backend (which is available on every unconfigured subdomain / domain)
Apart from adding tests, I think it would be super helpful to expand the tests. I clicked through to 5 or 6 different components and it looks like the docs only outline nearly all of the methods and parameters. It looks like they were automatically generated from PHPDoc, without a lot of effort going into explaining how or why they'd be used.
&gt; Because I just copy and pasted from somewhere a few years ago and never changed it because it didn't had any negative impact until now. oh...
You don't need the ORM to do this. 1. Add properties to your object for the indexes. 2. Encrypt any values and store them in the object before you call $em-&gt;persist() or $em-&gt;merge(); When you want to search, use $repo-&gt;findBy(), $repo-&gt;findOneBy() etc. as you normally would except you search on the index instead. I'll provide an example but there is no reason for your ORM to know anything about what this lib is doing. 
Was referring to files like this : https://github.com/WordPress/WordPress/blob/master/wp-includes/post.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [WordPress/WordPress/.../**post.php** (master → 89708c5)](https://github.com/WordPress/WordPress/blob/89708c5cec9c121f7044075d653235b46dc6f580/wp-includes/post.php) ---- 
However the HTTP spec has the misspelling *referer* built in to it. 
Don't think, just do it. Tests (with complete coverage) are proof that your code should work as intended and that you care enough about the project to: a) share it for use with the world and b) allow others to help contribute to it with confidence.
No separation of concerns: view code and business logic is all mixed together. No real code design, lots of global stuff going on. Multiple entry points and lots of includes. Enforcing the use of 777 permissions. Relies on static hostnames and redirects if it thinks your on the wrong host so get's into all sorts of confusion if you try to run it in docker or behind a proxy. It's just generally an example of a PHP application that has taken the templating concepts of PHP and tried to stretch them to a full blown application without really considering any proper software engineering.
Bad bot!
Thank you, thracia, for voting on CommonMisspellingBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
*OP came through*
Whoever makes it should call it `deserious`, the deserialiser.
The easiest way to get good at administering/ops while being a programmer is simply to insert yourself in the most situations that arise at your workplace that are related to these topics. Try to come up with solutions, just try try try, use google a lot, instead of asking your company’s OPs to do something try to do it yourself first. It’s funny how I used to be bad at networking/routing unless my country has banned a few million IP addresses which also coincidentally included my company’s VPN IP address, I had to learn how to route a VPN over another VPN connection and how to make it work reliably and then how to set it up on the router level. Basically facing a problem head on is the best way to get good at it. For fundamentals though, I guess you’ll need to read some books or a few hundred of articles/blog posts. But with work place the idea is to _try_ to always be helpful with these problems and independent when possible.
Waive* your right
This is actually something I'm working on as we speak for version 2.0 of Opulence. It will be able to automatically deserialize request bodies based on the Content-Type header, and serialize the response body based on the media type in the Accept header. The (de)serialization logic will reside in a separate, reusable library. Your models can be POPOs, but you would have to register a "contract" to let the serializer know how to do its job, eg: $contracts-&gt;registerObjectContract( User::class, // Let the serializer know how to create an instance of User from a hash of properties function ($hash) {return new User($hash['id'], $hash['email']; }, // Register User properties as well as how to get their values from an instance of User new Property('id', 'int', function (User $user) { return $user-&gt;getId(); }), new Property('email', 'string', function (User $user) { return $user-&gt;getEmail(); }) ); I'm working on a way to automatically set up these contract definitions using reflection, and, if successful, won't require any work to be able to (de)serialize your objects. It will also let you do stuff like automatic camelCase of property names, DateTime formatting, etc. I'm in the middle of a large-ish refactoring to the library, but once I've got something presentable, I'll be sure to post it here.
Definitely opencart..
So, no evidence. Thanks for clearing that up
A final class is Okay for Value Objects (immutable).
The fact that it is even possible to wave your rights in USA is mind blowing.
In the sense that's it's speculation that any specific tiger will bite you if jump in it's cage. This is a only a defensive measure, I'd rather not wave my rights.
Wow, that's crazy. I had no idea SO had grown so much. I mean, I knew it wasn't a small operation but to think that what started off as a reimagined Q&amp;A forum now employs 250 people is crazy to be. I used to follow Coding Horror and remember when Jeff and Joel first started talking about the project.
Drupal, magento and WordPress come to mind as examples on how to do pretty much everything wrong in a codebase. 
a little error somewhere in the middle: public function __construct(EntityManagerInterface) { $this-&gt;entityManager = $entityManager; } You do mean this, right? public function __construct(EntityManagerInterface $entityManager) But looks nice. Thanks for sharing. ;)
&gt; PHP is particularly troublesome in this regard because it doesn't strictly enforce good programming standards in the way a lot of other languages do. I would like to point out that I have used many enterprise applications that were complete and utter shit, most of these were made using compiled languages (.Net and Java) and as such you can't point at the code and go oh my fucking god what the hell did you do here. For example I was supporting some million dollar Java application (with an oracle DB) that made the primary key in the users table a varchar because while every single user had an integer id the application's super user "id" was "admin", no big surprise the application ran like shit from end to end.
Right. That's why you can't skip over step 1.
Did you reply to the wrong comment?
&gt; We’re missing a serious deserializer package in PHP. Well, dunno if [JMS serializer](https://jmsyst.com/libs/serializer) is serious enough for you. But it does a lot of things already.
Oh good. While you "think about" writing tests, I'll "think about" downloading your incomplete library.
Is any profile good for this? I sent my stackexchange profile, but got no email response - should i send for stackoverflow instead, or does it just take time?
you can do, what you want 
A lot of applications apply some sort of MVC-like principle of splitting database from view. Also ties nicely into SOLID principles. Might be worth to look at them.
https://github.com/paragonie/ciphersweet/pull/16/files
Ok, thank you. I will look into that. 
This should be a great resource for you: http://www.phptherightway.com
Look into composer. It is a powerful dependency manager which can be used to install the things you need to get started for any kind of project. For example I will use composer to install symfony-cli and a few other libraries to get a cli project up and running. 
I do know the basics composer. However thank you for telling me that it is somewhat useful. 
First of all take a look at composer to be able to use dependencies. Learn how to use an ORM (I suggest Eloquent). You should never need to write SQL strings in your code. Make a .gitignore for the .idea folder. The config class should handle the connection parameters from the database differently. Make a config file used to define variable that is gitignored, in a readme explain to the user how to set it's connection parameters. The config class should load the value from that file. There should be a getConnection function in the config class. That last part tells me you probably don't understand the "encapsulation" part of OOP very much. Get back to OOP theory books. Good luck ;)
The point isn't really to get the exit code of command execution, the point is to execute commands without allowing malicious input to screw you over on different operating systems. That's not as trivial as it seems.
A week ago, I found out doctrine/dbal won't let you change the type of certain columns. I asume there are several other reasons why a programmer is required to know (and maybe apply) intermediate SQL when developing.
I don’t see any OOP in your code, would be good to showcase that, look into name spacing, functions, sanitising, gitignore and composer, you’ve had some great responses, are you just looking for things to check out or do you want some critique of what you have submitted? And how much? I don’t want to discourage you or make it feel overwhelming, for some stuff mvc is overkill, especially if you go into a microservice world, you just do the C lol. It is such a breath of fresh air to see people take on board help to improve themselves, I admire your post. 
I overstated "never" probably. Nevertheless most developers agree that it's bad practice to use INSERT INTO like it's done in OP's repositories. That's what ORMs are for
Don't be sorry, just giving the advice you asked for
Here is a project of mine https://git.kingtux.me/TheYoungConservatives/theyoungconservatives.us/src/master/common/UserManager.php Yes, I know, that it doesn't show much polymorphism, Inheritance however, I havn't run into much areas so far in php that I need that. 
Could you go into detail on the doctrine issue? I’ve used it (via symfony) for about 5 years and never experienced this, it new?
Include does have a performance cost but it is so tiny, we’re talking like 0.000000001 second per include, unless you’re hosting on some 1970s hard drive, it’s an IO cost, you can improve it by doing a map (array of files to include) and doing include once, this is what composer does. If you use composer you never have to “include” again because you would include composer and then use name spaces and composer does all the work for you. I wouldn’t worry about include speed, unless you’re including about 800 million files it will never be an issue.
As promised, [here's an _extremely_ early preview](https://github.com/opulencephp/net/tree/develop/src/Http/Formatting/Serialization) of what's to come. A few things: &amp;nbsp; * I haven't added in support for arrays of values or nullable values * I plan to add XML and form URL-encoded serializers * I plan on ripping this out into a library outside of the Net library * Do *not* use this library yet for the above reasons
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [opulencephp/net/.../**Serialization** (develop → 919867b)](https://github.com/opulencephp/net/tree/919867b894e03d77f09c2b9dd21abc58d28da996/src/Http/Formatting/Serialization) ---- 
I have yet to see a positive outcome of a CoC. The only thing that usually happens is that people, those that often do not contribute in any significant way, start using CoCs to win stupid, flawed and inherently offtopic discussions. They use CoCs as weapons, because hey 'stop discrupting my discussion'. Also often really, really mild jokes and such will get blown out of proportion, to the point where contributors leave because the happy-hippy-diversity-is-the-absolute-most-important-thing-when-developing-crowd has now has a weapon to silence them when valid critique is presented. I really hope it will not have the effect as it had on other projects
Well, It is actually an issue on how you design an API over a complex library. https://github.com/laravel/framework/issues/9636
Forgetting a semicolon 
Haha your so right 😭
If this is advanced I must be a god.
Undefined index &lt;insert name here&gt;. It seems none of my coworkers have heard of `array_key_exists`.
HAHA yea that one catches alot of people 
Hey, lovebullet, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
At which point in the development cycle? My IDE catches most basic stuff but unexpected null pointers are the most common, I think. And even those are usually caught beforehand.
Assignment instead of comparison: if ($a = 1) do_something(); instead of if ($a == 1) do_something(); Even after decade plus PHP programming, sometimes I screw myself up with this. Usually after a long coding session when I'm getting mental fatigue.
Method on null
These types of errors have made me stay up for hours, thanks for sharing 
Good bot.
Haha I feel your pain, I recently created my website and the most simple errors can cuz downtime 
In Europe you can't waive your right to sue.
IDEs are getting smarter, e.g. you might want to try this https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-
What were those inconsistencies? 
For example when I simulate a search for something, I get a slightly different products in each search.
Why do you think those slight differences in search results were caused by Goutte and/or QueryList, and not by Amazon itself?
&gt;What's the best scraper available for PHP when scraping information from Amazon? I tried Goutte and QueryList but both shows inconsistent results. You're right, it can be Amazon changing the results. What's your suggestion to minimize this? Use some headless browser like phantomjs or selenium?
Amazon is doing A/B testing and actively has a team implementing anti-scraping measures. For the A/B testing, you could implement cookie handling to minimize falling into different testing buckets. For the anti-scraping measures, be sure to send a radomized User-Agent header, and probably use a rotating list of your own proxies. Delaying the crawls will help a lot, too. This has nothing to do with the scraper implementaion. You can use Guzzle for scraping the HTML.
The short answer is - no, it's really hard to explain why OO is bad for games. So, now a longer and slightly incoherent answer: I think there's a couple of different things, that individually aren't show stoppers, but when added together become too difficult. The first is that OO programming (in PHP and most current OO languages) makes compositing different bits of behaviour into single objects be a lot harder than it should be. e.g. for a driving game, you have cars which are 'moveable', 'rideable', 'can be followed by a camera' etc which can be programmed reasonably. Now imagine you want to add the ability for cars to catch fire if they have a bad accident. Do you add 'flammable' to the object? If you do it that way, you need to do work to add 'flammable' to every type of thing that can catch fire. Second, OO works well when you have a complex type, that can be reduced to a simple interface. E.g. imagine you want to be able to store images that have been uploaded from your users. You can decide to store them on the file system, or in S3 or whatever. The implementations are going to be a little complicated, but the interface for storing images can be reduced to 'storeImage' and 'retrieveImage'. That works well in programming web servers, but doesn't work well in games where anything that happens in a game is already at the simplest representation. Third is the issue in data-locality. OO works well when each object has a very limited number of objects it 'talks' to. e.g. in a web server, a 'controller' would talk to the 'request' to get the parameters, talk to a service object to do the work, and then talk to a 'response' object to send the response to the client. In games, the interactions between objects are not limited. It's entirely possible for one object to 'talk' to a huge number of objects. Or to put it another way, all of the data in a game is in effect a huge global variable, which can be affected by anything, as opposed to having state be hidden away and contained in OO. Fourth, and most importantly, but also probably most difficult to think about - OO works well when the number of 'questions' that can be asked of the objects/system are small and can be known ahead of time. That isn't the case in games, where the 'questions' that can be asked of the system are very hard to know ahead of time, and are far more numerous. (This is actually a more general problem and can be seen in how ORM's http://blogs.tedneward.com/post/the-vietnam-of-computer-science/ fail at scale ). (To be clear, by 'question' I mean any function you might want to call that either retrieves data from the system or updates the state of the system - I just find it easier to think of them as 'questions') Imagine your 'system' is some sort of network card in a computer. The number of 'questions' that can be asked of it are quite limited: * does it have any data available? * is it ready to send data? * can you try to send this data please? For objects like, that using OO is a good choice as we can implement all of the questions you would want to ask ahead of time. Now imagine your 'system' is a library's lending records. The 'questions' that could be asked of it start simple but can then get quite complicated, and may be almost unlimited. e.g. * how many books are out on loan right now? * Do people who have borrowed a harry potter book, borrow more books after that compared to other people? * Are people who check multiple books out at once more or less likely to return them on time? Trying to use OO to solve problems like that would be annoying as each question would require really specific code that would take quite a while to write. Those types of questions can be solved using an appropriately smart SQL query in much much less time. Obviously you're not going to use SQL to update your game state, but you could use something like Lua scripting. 
It seems to me like the Facebook feed, whenever I refresh it, the order changes, or things are suddenly there /not there. It's really annoying. 
Wondering, after a decade of PHP programming, have you considered writing tests?
The best that i know: https://github.com/brandonsavage/Upload
This. ISSET is significantly faster. However, the gotcha is that is that if the value of the key is null, isset will return false, where as array_key_exists will return true.
*"""managing"""*
Either I am a very careful coder, or my IDE is too powerful to point out everything before even I run it. I can't think of any :(
Cool! Does it handle mime types and checks images about XSS stuff?
Thats functionality you cant just put in “a class”. Please explain your use case more thoroughly. 
I'm from Europe and I know, but that doesn't mean that laws don't apply. The guy up there said: &gt; It's speculated that StackOverflow wants to kill off the risk of litigation in the case of being caught selling your information But with the GDPR you have to clearly give consent to what your personal information is used for, and they define consent as: &gt; Any freely given, specific, informed and unambiguous indication of the data subject's wishes by which he or she, by a statement or by a clear affirmative action, signifies agreement to the processing of personal data relating to him or her; There's no affirmative action in that. Having privacy laws violated right away for all of their users doesn't seem like a good idea so I was wondering if that applied to the EU too, seems odd.
I just jetbrains for everything. They make great ides.
Don't forget about [PHP Inspections](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-).
Isset can be used to and might be faster
How exactly can you violate Amazon TOS if you are browsing/scraping it without logging in? Even you are logged in doubt that disallowing scraping in TOS would somehow overcome the issue that Amazon product listings are public not private.
Some shortcuts you should memorize, assuming you're on windows: - CTRL + ALT + L: Format current file (or selection) - SHIFT + CTRL + N: File search - SHIFT + CTRL + ALT + N: Symbol search (method, class name, functions, variables etc) - ALT + J: select next occurance of whatever you've selected - CTRL + W: Expand current selection 
Good bot
Because images and text are copywritten, unless the author has stated otherwise. In the U.S you can be prosecuted for copyright infringement, violation of the CFAA and/or tresspass to chatel. In the E.U, you can more or less do what you want. As long as you don't distribute content, that you need a license for.
I think he believes he is, but nobody "broke" `count()`. `count()` was _fixed_ to issue a warning if something non countable was passed to it. Which makes perfect sense. What is the count of a string? What about `count(false)`? Well, according to PHP, that would be `1`. Even now, `count()` will _still_ return the nonsensical value on PHP 7.2. The only difference is the issue of a warning in your logs. A warning which acts as a notice that you should probably fix your broken ass code, because you're doing something wrong and sometime in the future we may actually throw an error at your stupid ass here.
Product images/description might be copyrighted \(even though it might be a slippery slope because if this was the case, search engines/web archive etc. wouldn't exist\) and CFAA unauthorized access clause doesn't apply just because it is a public a resource.
So you never answered, why not use their API? I don't know any one who uses scrapers any more, it sounds 90's. I mean I get it if you have a good reason, but the API should provide you with everything you need.
Polymorphic returns, loose comparison, associative arrays and no type hinting. And people who don't want to learn the basics of any language. Pro tip, extract a callable as a variable to improve debugging.
Also: * Shift + Shift: Search Everywhere * Alt + Enter: Show intensions (Autofix, initalize properties etc...) * Shift + F10: Rerun last run config * Shift + F9: Rerun, but in debug mode * Alt + Insert: Generate (Implement methods, Create Getters and Setters, etc...) * Ctrl + P: Show parameter info (Useful when you're in the middle of calling a function and you can't remember parameter order) * Ctrl + /: Comment or uncomment line Also worth noting, you can rebind any and all of these shortcuts in `Settings -&gt; Keymap`. You can also add shortcuts for things that don't have one yet if you find you want to use it more often (Like Inspect Code)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_schmiddim] [Omg I think php storm](https://www.reddit.com/r/u_schmiddim/comments/8j5g4i/omg_i_think_php_storm/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
use querylist with headless browser phantomjs https://github.com/jae-jae/QueryList-PhantomJS
I've found mailtrap.io to be very useful for this. I may have to look at your setup so I can keep it internal.
mailtrap, mailhog, mailcatcher are some of the alternatives. But they are either not running on PHP, are a bitch to set up or are not self hosted.
That would be great too, if my coworkers used that. But they don't.
I'm very aware of this change; I want to know 1) how it's a break and 2) big, which is why I asked if they were being serious.
Something new everyday learn. But I don't think that would work for my situation, unless it is valid to say (false == $r = $db-&gt;fetch()), but that just seems nutty to me.
Never publish to your live website until code tested. Simply create a duplicate site to test from. It could be on your local computer if you have a web server running on it, but best if it is within the same environment as your live server. If you have the ability to create a subdomain, just install the new version of the website there, do all the testing, and once stable, push to the live website. Also, be prepared for problems, make frequent backups and always create a backup of the database and code anytime you push a new version live. If it is just a patch, make sure to backup the file you are patching.
I have written a test for potential hires to gauge their abilities and knowledge. Gotta know what someone knows if they are working for me.
Thanks I will surly consider that 
Try [`amphp/dns`](https://github.com/amphp/dns), which allows multiple concurrent queries.
My personal solution is to not sign up for StackOverflow at all. When I look for a stupid question online, there's always someone else who asked it before me.
"Lack of object orientation" isn't exactly the critique I'd use (I mean, there are various ways to factor a program), but I also feel obligated to say that "object orientation" doesn't mean just... having classes. First of all many of those classes have been added late in the game, leaving the bulk of the API most people use mostly object-free. Legacy is the name of the game in WordPress. Second, many of those objects you can't instantiate, or build through a factory, you just kind of have one of them in globals and you reach out to use it. That's literally just procedural code in object clothing. And third, that list of classes looks impressive, but if you start reading more carefully, you see this shit: Requests_Exception_HTTP_304 Requests_Exception_HTTP_305 Requests_Exception_HTTP_306 Requests_Exception_HTTP_400 Requests_Exception_HTTP_401 Requests_Exception_HTTP_402 Requests_Exception_HTTP_403 Requests_Exception_HTTP_404 Requests_Exception_HTTP_405 Requests_Exception_HTTP_406 Requests_Exception_HTTP_407 Requests_Exception_HTTP_408 Requests_Exception_HTTP_409 Requests_Exception_HTTP_410 (... few dozen more like that ...) Very exception, much object! I mean, someone should crack the news to WordPress that PHP exceptions have a "code" property, but hey, at least they get to claim they have lots of classes this way!
Well, actually, if we're serious about object orientation and encapsulation, then "we need a serious deserializer package" stands in direct conflict with those principles. I don't use PHP's built-in serializer (not for objects, I mean, I use it for "raw data" as in scalars, null, and arrays), and my "(de)serializer package" is just two interfaces objects can implement how they see fit. That's all that's needed IMHO.
My personal rule of thumb: - If it's application code, you can omit "final" and prefer "protected" over "private" for methods and properties. - If it's reusable library/framework code, be more aggressive in using "final" and prefer "private" for methods and properties. The reason for this is that application code isn't *dependend on* by outside code, typically. Instead the application is the final link in the dependence chain. It *depends on things*, but it's not a *dependence* of anything. This means you can easily refactor such code, and any class extending another class is within the application, it's within the reach of a hand. If something needs to change, you can change it in the base class. With a library it's different, once you expose something, someone will use it. If you make a class inheritable, someone will inherit it. If you make a property protected, someone will feel free to modify it in a subclass. And you can't freely refactor a library, because you'll break all the users, which aren't in the same repository, so you can't easily see what's safe and what's not safe to change. If a class is just static methods, you can safely declare it final, because extending a static class is typically a silly thing to do (if you want to have more methods you can just make a separate class and then call both classes, no need for inheritance). It prevents bad practice. It's also a good idea to declare a class final if you suspect you might refactor "class Foo" to "class SomeFoo implements Foo + interface Foo" in the future. Not having code inherit from a class that will become an interface means less broken code after the refactoring.
Basically yeah. Thing is, as usual - when. It's ideal to make it E_DEPRECATED and eliminate it in PHP 8. And before you go like "lol if you have this, you a moran", yeah well, trust me, if a language permits something stupid, then in a large enough codebase, you've "used" it by accident at least once, and you don't want your app breaking, do you?
&gt; I don't think this should stop execution as it is in fact working the way it's designed In PHP, a string like "ErrorCode" is no longer silently coerced to (int) 0, demonstration: https://3v4l.org/o9jLR Warning: A non-numeric value encountered in /in/o9jLR on line 3 So what you're saying is no longer correct. It *used to work the way it's designed*, but now the design has changed, and this particular edge case wasn't updated to match the design.
&gt; by the way, "errors" are really useless Wut?
Look at your phpinfo to tell what config file its loading: http://php.net/manual/en/function.phpinfo.php
Just rename it. Xampp contains all of its config within the xampp folder
It's using C:/windows
Ok I will rename it. Does a php.ini file even have anything directly to do with the code I will be typing? It seems that I just need to know about it as there is no configuring of it in the tutorial.
The command php --ini Will give you the location of the php.ini in use.
Nope if you use the original example, which is talking about using a string as an array, you still get the exact same warning. With the example you're giving the warning is correct as you're trying to concatenate a number and a string.
Yeah you're right, because php is written in c this functionality has just been carried over into php
What are you suggesting should be deprecated? Are you saying that strings shouldn't be stored as arrays? Or that this shouldn't throw a warning? Neither of these features should be deprecated.
The fallback to 0 should be deprecated
So if #1 gave you results, you don't need to do #2, especially if you're on windows. Basically, whenever you modify something inside that `php.ini` file (under `C:\users\James\Desktop\Xampp\php\php.ini`), whether it be to load an extension you need, or to modify some kind of setting (ie. displaying reporting errors), you would do it there. This would effect your entire PHP configuration. That means it doesn't just affect your current site, but anytime you create a site that uses xampp.
Its honestly not the worst. I think every application that gets big enough can start to get messy and its easy to blame bad engineering when code is hard to follow. Sometimes its just a complex application and the developers did their best. OpenEMR is ZendFramework based and at least has separation of concerns in the presentation layer (Smarty mostly), and they use the well regarded Doctrine ORM. That alone puts it ahead of Wordpress, Magento and a dozen other big name examples I can think of. 
Explains a lot about why people hate on php and php devs....
Hole? It throws an error.
What error should be thrown then? Fatal, warning, notice ... the list goes on
Did you get off the wrong side of the bed today? None of what you listed is "thrown". The only error that's thrown is E_ERROR, which in PHP7+ is now a Throwable class called "Error". So that kind of an error: an error.
Not at all, didn't realise you were being so pedantic about what you're saying. This shouldn't throw a fatal error though because trying to access an invalid array key doesn't which is essentially what op is talking about. Why would you change this single use case to start causing scripts to break?
I don't want scripts to "break" which is why I said this change should only happen after a major version release, when BC changes are expected. If you seriously need an explanation about why it's beneficial for languages to inform the developer that the code is non-sense, like $string['foo'], then you might need more extensive tutoring in the basic concepts of programming than I can provide in a Reddit comment.
But why change this is the first place when the current implementation makes sense? Say you want to access a key in an array that doesn't exist, should this stop execution too? If you think accessing a string as an array is non-sense then I think you might need more extensive tutoring in low level language data types than I can provide in a Reddit comment. Not only that but you may want to do some research on what a string actually is and how a computer stores and manipulates a string in memory.
&gt; But why change this is the first place when the current implementation makes sense? It doesn't make sense. That's what the whole thread is about. &gt; Say you want to access a key in an array that doesn't exist, should this stop execution too? ... Yeah? If you expect a key might or might not exist, you can check existence in a myriad of error-free ways. But directly reading a non-existing key should of course stop execution, as it's most likely a bug. &gt; If you think accessing a string as an array is non-sense No, you moron, I didn't say that. The problem isn't accessing a string as an array. The problem is trying to read a **string key** on a string. A string has only integer indexes, not named string keys. &gt; I think you might need more extensive tutoring in low level language data types than I can provide in a Reddit comment. Not only that but you may want to do some research on what a string actually is and how a computer stores and manipulates a string in memory. So, apparently you have some sort of a mental problem. Sorry about that. Have a nice day.
Hey, ImSuperObjective2, just a quick heads-up: **should of** is actually spelled **should have**. You can remember it by **should have sounds like should of, but it just isn't right**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
So, surprise, this time you're actually wrong.
Thanks for letting me know what it is for. There are so many files it's almost like a foreign language researching them all.
Thanks for letting me know. It's amazing how many files there are in my installation. It's starting to confuse me looking them all up. So php.ini is one of the most important php files in the installation. I typed php.ini on google and there is so much information pertaining to php.ini it's never\-ending. I've got a lot to learn.
It certainly feels like that. Just take it one step at a time. If you are working with a team, it's usually the sysadmin's responsibility to set the configurations. If you are alone, the default configuration tends to be good enough. 
I am going to get heavily down voted for this but bare with me through the hate to come: Aspects of Laravel 5.6 (And Laravel in general) - The over use of and dependence on Facades, this is nothing new. But as a laravel developer, omg this makes debugging extremely hard, especially since we inherited a laravel app that is, in a lot of places, poorly written it's self. even on a fresh installation the concept of facades, I thought at first, were cool - but did that novelty ever fade away fast. - [Laravels Model Class](https://github.com/laravel/framework/blob/5.6/src/Illuminate/Database/Eloquent/Model.php) The code is clean, but the class is like 8 trillion lines long (give or take a few exaggerations). I get this is Active Record, but really? This is just two of the things that annoy me, as a professional payed Laravel developer in the software field.
webERP The project is written under a misguided attempt to make the code "beginner friendly". What follows is a ~20kLOC web app that's almost entirely driven by includes.
FWIW I bought your book about a year ago and I just wanted to say thank you. It's amazing. I pretty much knew what had to be done, but mlaphp really helped to set the refactoring process in place.
Anyone like to use Laravel E commerce. [AvoRed E commerce](https://www.github.com/avored/laravel-ecommerce)
I've made my living for almost 10 years specializing in WordPress development (in agency environments, not as a freelancer). I build custom themes, plugins and sometimes web apps built on WordPress. I feel like custom WordPress development is dying and I need to find something new to specialize in. I'm leaning towards laravel but curious to hear from the community at large. Is laravel a viable option for the next 5-10 years or should I focus on something else? I'd prefer a role as a backend developer but I have a good amount of experience as a front end developer as well and wouldn't be opposed to going the react route if it's more beneficial in the long run. Thoughts? Opinions? Rants?
&gt; Saving token on a cookie Using session_start() with `session.use_cookies`,`session.use_only_cookies`, and `cookie_httponly` enabled does exactly this with a cookie called PHPSESSID. By default, PHP sessions use files which isn't very scalable for multiple server websites. If you're looking for scalability, you'll want to use a custom session save handler using either redis, memcached, or a database.
I like it, I understand memcached isn’t very secure, what is redis and how would you recommend to structure a database in order to handle sessions?
There’s no API for that
Because they don’t have API for that
Will try thanks 
You should be able to use `hash_init`/`hash_update_stream`/`hash_final` to incrementally hash a file. Since you already have a file handle open, that should be straightforward to implement.
https://i.pinimg.com/originals/85/3b/4c/853b4cb13c5340cc4b762029c5f28c6c.jpg
delet this
Sorry if it's not the good place to share my tool since I developed it with Go. However I use it in my PHP projects to run automatically unit tests when I save them. Pretty useful when I do TDD: I don't need to go to my terminal and type the command to run the test I'm currently writing. This is done automatically so nothing is disturbing my flow. I can go back and forth between my production code and my test and automatically I will have a desktop notification if my test is still passing. You can configure the tool for whatever need you have. Configurations for PHPUnit (and even PHPUnit running in a docker container) is included in the repo in the "examples/" folder. https://github.com/Phantas0s/testomatic
if(isset($_GET['x']) &amp;&amp; $_GET['x'] == 'y')) /script.php?x[]=y Array to string conversion error
Drupal is my best example; it claims to be OOP but still uses many spaghetti code, loads of static calls to other classes because it lacks proper dependency injection and overall it's just quite messy.
Please keep in mind that [__autoload()](http://php.net/manual/en/function.autoload.php) ist deprecated as of PHP 7.2 and you should use [spl_autoload_register()](http://php.net/manual/de/function.spl-autoload-register.php) instead
Sha-1 is deprecated, uses more recent versions such as sha-256 or sha-512.
The SHA-1 requirements are set by a 3rd party so I cannot update them unfortunately.
This was so PHP4.
If your thinking about sticking with CMS, Craft CMS I'd say is on a massive rise. A lot of clients we have built sites for using Craft say they prefer the admin panel over WordPress for managing sites. Plus with things like Craft Commerce, a lot of different functionality is coming into play with the CMS. I'd still advise learning Laravel and having both on hand to tackle a wide range of projects that may come your way
If your thinking along the lines of OAuth, try this: https://oauth2.thephpleague.com
Fixed it for you: How to Develop PHP REST API Step by Step in 2005.
All in all, some of these are the kind of abusable magic which I wish most developers *didn't* know...
# ABSOLUTELY # CLICKBAIT
It only checks files by extension, file size and image size&amp;ratio but you can add your own validation rules.
sha1 ist totally fine for hashing files
Warning: cringe.
Same thoughts while reading...
Its just the intro, the rest is fine imo
Yes the problem is the fread, not the sha1_file. Curl can do this with PUT but not with POST. If PUT is okay, checkout the CURLOPT_PUT / CURLOPT_INFILE / CURLOPT_READFUNCTION options. If PUT is NOT okay, you'll have to do this manually, or find a library that can.
Seems heavily inspired by Propel ORM (or is it the other way?). I looked into Propel some time ago, but its in a limbo state where version 2 is not maintained anymore and version 3 hasn't come out yet. So maybe Ill look into this instead
The word "opinionated" is commonly associated with libraries driven by hype that burn out faster than a sheet of office paper dropped in the midst of a vicious forest fire. I hope there's a better way you can qualify your library. 
Warning checks out: &gt; There is a big part of me I kept mostly hidden and ashamed of. I'm attracted to active records :) [...] not everybody is attracted to data mappers and everybody has a kink :)
/r/lolphp
I actually never tried Propel but TDBM and Propel started around the same date so it's no wonder if they share common roots :)
Mmmm... ok, I'll try to think of a better word for describing the library (any idea?). But we have been using it internally for the last 12 years so it is not going anywhere anytime soon.
Great links! I was hoping to get away without too many dependencies, but I will certainly look into Flysystem (and your hash plugin). Thanks very much!
Well you can say the same by omitting the word, i.e. say: &gt; Announcing TDBM 5, an ORM with a "DB first" architecture Or &gt; Announcing TDBM 5, an ORM designed for "DB first" etc.
Is there a way that developers with discipline can know them, while those without don't? I think that'll be the ideal scenario. :-)
That's kinda a better formatted http://php.net/manual/en/language.oop5.magic.php
I used to love Propel 1.4/2 but I've adopted Doctrine and never looked back. Doctrine is a powerful tool that takes lots of experience to master. I'm glad it's still maintained. But the PHP ecosystem is slowly dying ... when you can't brew your php anymore, I am a sad panda. Thanks for sharing. I've built a sonata cms like from 2009 to 2014 for my web agency but it never got the chance to be open sourced. It was using Propel xD
Interesting stuff! The codebase I'm on is using standalone Eloquent and I've definitely hit all the pain points you've mentioned. I was well versed in SQL before I started programming and I prefer to just write a query that is more readable and makes more sense than the (usually more verbose) querybuilder methods. I'd put an example of the manual joins in the blog post because that was the first thing I looked for.
I'm pretty sure you can do this with only curl-functions as well, if you don't want to use additional libraries - I usually use Guzzle or Flysystem because they are convenient. 
Thanks. 
PHP is dying. Look elsewhere.
It depends on your security requirements. There's certainly no need to panic given that attacks are still quite expensive, but there has been a pretty efficient collision attack involving two distinct files resulting in the same SHA-1 hash somewhen last year, which fucked up subversion pretty bad for example. So no, while safe enough for probably most scenarios, I wouldn't consider SHA-1 *totally fine*, cryptographically it's broken, and if in doubt, use something better. Even MD5 is still fine for some scenarios, but it's a "you have to know what you're doing" kind of thing.
I personally like kotlin's design. Every class is final by default and can be opened to inheritance by adding the `open` keyword instead. But this fact combined with the the practical fact that I use Doctrine in all my projects and Doctrine uses all kinds of code generation and inheritance for it's proxies. I don't see a way to consistently use final in my projects.
I agree but this is the PSR\-2 standard. I prefer to stick to the standard even if I don't necessarily agree with it.
The title itself makes me want to just hurt myself instead of reading it. Where is this new age lingo like "strongly opiniated", "artisanal" coming from? Worst part is this is now so widespread I don't even know where to look for understanding these...
There is no reason to be that anxious. It's just wording. The OP tried to make their text less boring to read, that's all. I am sorry it hurt your feelings but I am sure the OP didn't mean that.
until I read your comment, I was under the impression that it did, so I read up and apparently it's a PSR "bylaw" [https://www.php\-fig.org/bylaws/psr\-naming\-conventions/](https://www.php-fig.org/bylaws/psr-naming-conventions/) I don't really know what that means if I'm honest. I would prefer not to use the Interface suffix because I think the program shouldn't care whether it is using a concrete class or an interface but I've always followed these rules because I thought I had to.
&gt;"artisanal" coming from? Just a guess, but Artisan is Laravel's CLI - https://laravel.com/docs/5.6/artisan https://www.phparch.com/2017/05/artisanal-project-creation/ 
Thank you! 
How would you suggest keeping session alive after browser is closed (if a user checks a "Remember me"-like checkbox when logging in. When they return to the website after a restart, they'll be signed in. Like Google, Reddit and Youtube etc works.)? What I've done so far is to make PHP use a DB instead of files in a similar way as suggested above to save session information. Should I just set the session lifetime and cookie lifetime to the same values (like 7 days for example) and "be done with it" (I'm assuming this should work unless I've missed something) or is this bad practice for security reasons (or other reasons for that matter). Because if I'm not mistaken, the cookie will be kept by the browser for those seven days and it will contain the session id. The server will also not remove the session id until the lifetime is up. So unless I've misunderstood something, this should continue to work and keep the user signed-in? Is this a good idea or would you suggest a completely different method? Also, on a separate note, what function is used to generate the session id that is stored in the cookie and DB (if I don't manually set one myself with session_id())? I tried looking in the PHP manual but couldn't find it. (I found session.hash_function but I'm not sure that's what I'm looking for and it seems to have been removed in 7.1.0 and I currently use 7.2.5. Also if that function is in fact the hash function used, from where does it get it's input, which I suppose should be randomly generated right?)
Interesting. I was under the impression "pivot table" was ok, but it seems to be only used by Eloquent in the sense of "association tables". See https://en.wikipedia.org/wiki/Associative_entity But I see how this can be confusing when compared to spreadsheets. Ok, I'll fix this. :)
**Associative entity** An associative entity is a term used in relational and entity–relationship theory. A relational database requires the implementation of a base relation (or base table) to resolve many-to-many relationships. A base relation representing this kind of entity is called, informally, an "associative table" (though it is a table like any other). As mentioned above, associative entities are implemented in a database structure using associative tables, which are tables that can contain references to columns from the same or different database tables within the same database. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Some sql databases actually have builtin support for pivot tables. For example: https://blogs.msdn.microsoft.com/spike/2009/03/03/pivot-tables-in-sql-server-a-simple-sample/
Woot! Ok, so I must at all cost avoid using the "pivot" name for describing an association table as this can be something completely different for a SQLServer user. I'm in the process of fixing this in TDBM documentation.
Good form, sir!
Every class _should_ be final by default.
Using classes does not immediately mean you're using OOP.
After being a long term Symfony developer, I tried out Laravel and pretty much noped out immediately. Reminds me of shit like Kohana and FuelPHP from back in the day.
Hey I'm a big fan of what you have there. I've been looking for a great PHP 7.1 type hinted ORM for a bit now and was worried I might have to write my own. If anyone knows of a similar ORM that enforces type hinting, let me know though. That said, have you used this in production? I might want to use it on my next project. 
Serializers are massively nice for turning models into json responses (as one example). I find going the other way less useful and usually the wrong approach, but I've done it on occasion.
The other way?
After looking at the answers here, I feel much better about my app :)
"show a developer magic methods, and you make him happy for a day. teach a developer how to avoid magic methods and you make him happy for a lifetime"
Deserializing... so going from JSON back to an object.
Thanks! Yes, we are using TDBM in production and have been for some time, on dozens of projects. So don't hesitate to give it a try (and I'd love some feedback!)
"opinionated" means something significant to me and I very much appreciate its accurate use. I think of an "unopinionated" library as one which tries to provide some general functionality and avoid imposing much convention on how you use it and how your project is structured around it. This is nice when I'm happy with what's established already and want help adding some functionality without moving the furniture By contrast, I think of an "opinionated" library as one that comes coupled with some convention on how I should is it and how my project should be structured around it. This is nice when I'm starting fresh or don't like how an area of my project is structured and want to adopt more than just established code, but also an established set of practices.
&gt; If anyone knows of a similar ORM that enforces type hinting, let me know though. Not to step on David's toes, but you did ask, so I'll point out the existence of [Atlas 3.x](http://paul-m-jones.com/archives/6885), which offers typehinting and IDE completion among other things.
I skimmed this over and was like honey please, learn how to PHP first, then learn what a framework is, then learn best practices. this is some serious 90's shit.
more like in 1995
TLDR: &gt;Members part of minority groups are more often the target of misconduct than others. This creates a vicious circle where those smaller demographics become the most likely to leave the community. That's why they created it
We should focus on the project.
This looks inspirational. Good job :)
You have a good point that this project may not qualify as opinionated, but I think your points on opinionated being bad on general are more rooted in bad implementations. I've seen the voodoo you speak of and agree it's dangerous, but I've also seen convention-over-configuration work well when it takes the form of "sane defaults" on top of well-being documented configuration. Done well, rather than making configuration opaque, it can make configuration progressively optional. There are a lot of folks in the world who need to put applications to work for them, and be able to tailor applications to their operations, who will never be able to afford sane engineering. Why can't sane engineering be bundled up for them when their problems aren't unique and are well-trodden? That's what well-applied convention-over-configuration/opinionatedness should unlock
&gt; those smaller demographics become the most likely to leave the community I would be interested to see their metrics, both before and after, that support this claim.
It looks like it offers IDE type hinting and such but not getters and setters that use php 7.1's return types and parameter types to force type safety on it unless I missed something?
Can you share the list of good apps ? I just want to compare since a lot of people mention widely use apps that appears to be a nightmare to deal whit. Also is interesting to understand why, if those apps are so bad, they hold a pretty big portion of the market in terms of usage and, also, manage to develop a BIG Industry as customization needs. Maybe here is a opportunity to build a solid alternative. I know, maybe \(most certainly.. \) I'm being naive here, but on WP has a HUGE number of users. Are those potential clients once they realize all those bad things? Regards 
&gt; unless I missed something? Maybe? A perusal of any of the codebase repositories should reveal extensive use of parameter and return types; here is but one example: &lt;https://github.com/atlasphp/Atlas.Table/blob/1.x/src/Table.php&gt;
I may try this for something :)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [atlasphp/Atlas.Table/.../**Table.php** (1.x → 87f89bf)](https://github.com/atlasphp/Atlas.Table/blob/87f89bfb9b5442b276015e952235fcab98cb0dfe/src/Table.php) ---- 
Maybe, but it looked like the actual access and setting of the fields were using public field access. That's from a basic perusal though.
Reasonable defaults - of course. As long as all this convenience doesn't unravel into a nightmare at the first few defaults you change, which was often the case in RoR.
I have no interest in defending RoR, but keep its place in history in perspective: it was an early draft in a major trend. It represents first-of-breed not best-of-breed. It's not an interesting benchmark for all things it was the progenitor of
RoR aside, TLDR is opinionated is often expressed not just as default settings, but also pre-coupled components for ease of use, that are hard to decouple. And that's not nice to me, but yeah, I guess I made my point clear. Thanks for the exchange.
Maybe HTML, CSS and plain Javascript \(without jQuery\) first.
http://php.net/get/php-7.0.20.tar.gz/from/a/mirror Be sure to point php.ini to the correct php installation
To clarify, this is the php source. You need to compile them and then build/install. To do so, unpack the tarball after downloading: tar -xzf some-tar-file.tar.gz Then you will have a folder--go into the folder and run: ./configure This will prepare everything for compilation. Then run: make The make command will probably take the longest and errors may be thrown. Ensure you have make on your system with 'type make'. It should tell you where the make binary is assuming its installed and configured properly. Then once the build finishes run: make install And it should install everything onto your system. Now you need to change the php.ini settings to point to the correct installation of php. The php folder is probably in `/usr/local/`. Locate the correct directory and point php.ini to that installation. Check the php version with phpinfo(); once you're done to make sure your apache/nginx server is choosing the correct php installation. Don't run `php -v` because that simply returns the version of your PHP CLI It's also now safe to delete the source files. You may need to run `sudo` with make install if your /usr/ directory restricts write access
I'm not well read on what packages are available in apt. The packages available with apt/apt-get are determined by Ubuntu maintainers so unless they've specifically added that into the repository, then you won't be able to download it with apt-get.
I hope they didn't forget to mix in the oil first!
I remember somebody saying that the best way to get the right answer to a question is to post the wrong answer. I'm half inclined to post my own tool so everybody will tell me what is wrong with it ;-).
Phabricator has some interesting and well written php libraries/applications: https://github.com/phacility
That is interesting. I dug into a few files and the code seems well written, but I'm also confused by the fact that it's both an open source project and has so many things within it that are "hard-coded" to a single use case.
isn't there a code review stack overflow? never used it but could be handy.
What Ubuntu version do you have and what was the exact message that you got? Ubuntu 16.04 currently has [PHP 7.0.30](https://packages.ubuntu.com/xenial/php7.0). I don't think that you should downgrade that.
Honestly it's pretty slim pickings.
I personally liked [PHP Server Monitor](https://github.com/phpservermon/phpservermon).
Never trust a term as used by Laravel. There is an entire collection of terms used incorrectly there.
I highly recommend https://github.com/phpbrew/phpbrew
I don't know how generalizable Facebook is as an example, but I work at another large tech company with a PHP backend that would never want to open source any of our PHP code. PHP being an old language doesn't have as much overlap with the open source community as languages like Ruby that are much newer and "cooler" to work with.
See the League of Extraordinary Packages: https://www.thephpleague.com/
I like Laravel's code a lot
Huh? PHP and Ruby's initial releases were both in the same year.
Whilst not a project, I think the examples and explanations here are an excellent resource: https://www.phptherightway.com/
When interviewing potential new collegues, I always look for these traits: 1) can you learn/rtfm (read the f*ckin' manual)? Are you more likely to just copy/paste stackoverflow, or are are you abled to rtfm and learn something? Looking up stuff that you don't know yet should be something that you master as a developer. Whether you're an intern or a senior. 2) can you communicate what you're doing? What the bottlenecks are? Where you're stuck (because someone in the team might be abled help you, but if you tell no one, they can't help you) 3) can you write some actual code for an actual problem (that you won't find on SO)? I only invite potential collegues on an interview with me who have written their solution to a simple homework problem. (A simple problem that should take no longer than a few hours of your time. It's just to make sure that you're not wasting my time, and it is a good talking point during the interview to discuss why/what/where you did solution X for problem Y). 4) can you (learn how to) work with other tools than your own (WP in your case)? Because sometimes a problem asks for other tools. &gt; If you've got a hammer, everything looks like a nail So now a client asks us if we can use screws, instead of nails. Time to start learning about those screwdrivers. Or say you can't do it. Still using that hammer? You're out. All boxes ticked? You'll be invited to the next round in my company.
I would too. I mean I’m all for equality but come on this code. Does any one care about your race, gender or sexual identity? No. We care about your code.
In my opinion and my team opinion the highest code quality in PHP I have seen in an open source project has to be https://github.com/sylius I have seen and learned a great deal just by analising the codebase. 
More surprising than the new features introduced by PHP5?
You wan write bad code in any language no matter how old or how "cool" it is. I think it's better to have an idea of what type of application you are trying to create, before finding a codebase to potentially draw ideas from. 
The challenge here is that WordPress, Joomla, Magento and Moodle position themselves as off the shelf solutions. There are great libraries and frameworks for you to use to build your own applications in however: * [Symfony](https://www.symfony.com) * [Laravel](https://www.laravel.com) * [League of Extraordinary Packages](https://www.thephpleague.com) * [Paragonie](https://paragonie.com/software#open-source) (assuming this is pretty good)
I use so many of those components :) 
🤢🤢🤢 ***"ARTISANS"*** 🤢🤢🤢
Correct.
Symfony. It's considered an older system now, but just reading the source and understanding how all the components come together alone will make you a better developer that most.
Not a CMS and obviously biased, but here is the [sample code](https://github.com/PatrickLouys/professional-php-sample-code) from my book.
Or maybe they meant Java? Or JavaScript? Maybe even Python? Oh wait..all released in 1995 or in Python's case..1990 I work in COBOL and COBOL was a dad and PHP was the kid, COBOL would have been 36 yo when PHP was born...
Magento seems to be well-coded, but utter shit for actual use or development. It is dense, it takes up over 150 MB to install vanilla, and everything is so abstracted that it takes way to long to figure anything out. Well-coded doesn't mean it is worthwhile.
These guys are awesome, built my own framework around some of their libraries. Good stuff.
&gt; Yes Magento can be overwhelming at start, but after you learn how to use it, you will appreciate it. I'll come to appreciate poor coding standards, a mish-mash of mess and a system that's developed by people who never learned how to code? &gt; developer friendly and secure than other open-source e-commerce Name me 5 other ones that can't stand up to the "developer friendly and security aspect of magento because I'm sorry firned but im calling all kinds of bs &gt; I think if you had some more experience you would see it's a lot more robust in the long run. I think running away from the mess that is magento and laughing a developer out of the room when they suggest it is enough experience for me.
Huh, that reminds me of something I realized. If you really want to find something out about someone, accuse them of something wrong. People are pride monsters and are more than willing to correct someone, and it can be used to manipulate someone in to giving information. 1: "You were born in NJ, I can just tell." 2: "No, wrong. I was born in NY." Where asking directly might result in, "why do you want to know that?"
Cringe marketing works!
PHP released: 1995 Ruby released: 13 December 2005 Huh? What are all the upvoters and you smoking?
You're confusing Ruby and Rails. The former is a programming language, the latter is a framework.
Ah ha! Now it makes sense. That also explains the whole "on Rails" part of it too.
I'm guessing you're kind of new, right? Both PHP and Ruby came out about 20ish years ago, which is neither "old" or "much newer". FORTRAN - now that's old.
Which of the examples provided are you in disagreement with?
A former employer wanted to force a magneto project on me. It is definitely not a CMS you can just jump into.
I'm not sure I would call it over engineered. The code is meant to be very robust and follows SOLID principles.
depending on your solution and what it's built with, it might be something you have to make (with a few flags in place). If its built with a framework, there might be framework specific solutions, I think - and feel free to correct me - that laravel has something like this.
&gt;analising the codebase Once I stopped cracking schoolboy jokes in my head, I have composed myself sufficiently to point out that you _analysed_ the codebase. 
I'm playing around with Voyager right now but I'll definitely add this to my list. Thanks for the suggestion!
Yes, it's pretty nice. You have to follow the rules pretty closely.
Are you not à code purveyor? Perhaps a digital ninja? 
Are you looking for good code examples to improve yourself? Or to grind an axe? imo Joomla's core is well-written OOP code. It uses appropriate abstractions and design patterns, particularly the FoF MVC code, and has slowly been moving away from singletons to DI. I've read some of WordPress's code. It's standard procedural stuff, not particularly messy and not particularly clean. It violates best practices in a lot of ways (lots of globals). The framework-based CMSs (like Bolt) tend to follow the best practices of the framework they're based on, so they're not particularly interesting from a code quality standpoint. EzPublish is based on Symfony, but uses a lot of its own library code and is particularly well written. Drupal is very similar in code quality to WordPress (lots of globals, unsophisticated data structures) but had more attention paid to its extension points early on (so it has a database API for extensions to use, whereas WordPress just offers a few odd events to hang your wholly-separate application off of and a method to squirt your output back in before it goes to the client). If you're interest is in CMSs, the code quality in some non-PHP products is much higher (in terms of usefulness of test cases, code terseness, abstractions provided, following design patterns) than what you'll find in PHP-land. Some well-coded projects include Alfresco (Java), Ghost (Node), and Jekyll (Ruby).
Silverstripe. They’re a Wordpress competitor. Well-written, well-maintained, and well-documented. 
Neos! 
phpBB2 last version
Yeah, it's mostly homegrown and leveraging a few libraries here and there.
Looks like a very solid system. Thanks for the link, I'll learn a lot from their implementation!
There are none. PHP programmers are notoriously terrible.
Fuck I didn't know any of that
[my answer...](https://www.reddit.com/r/PHP/comments/8je0ch/what_are_some_examples_of_wellcoded_php_web/)
Amen
He does go on to praise the community and it's strengths but the first 6 minutes, especially the words about this subreddit is kind of "disgusting" no? Maybe I am taking this out of context?
Why are you upset? He's right.
&gt; By the way, I don't like you. I'm a wanted man. I have a death sentence on 12 systems. I smell a eve statement ..... &gt; I feel I lost some brain cells listening to this stuff. I'd recommend to Eli White I watched his whole talk and was like "Wtf are you even saying" Like it was back and forth and this whole "forbid the reddit" as if we're the scum of the earth
And how is he right? Do tell.
Ignore haters. Just keep doing you. I thought you were exaggerating at first, but here it is: &gt; ... and then there's reddit to quote &gt; 5:37 George Lucas you will never find a more &gt; 5:39 wretched hive of scum and villainy. &gt; 5:41 reddit is a wonderful place however &gt; 5:44 unfortunately the PHP subreddit tends to &gt; 5:48 be the place where all of the angst all &gt; 5:50 of the anger all of everything negative &gt; 5:52 about PHP comes to surface and comes to &gt; 5:54 a head and unfortunately it is a very A somewhat strange talk. He spends half an hour explaining how PHP should assimilate all PHP users into a the community so we can all share the true faith.
I know right, I thought, as I watched the rest of the talk, I was being crazy but he would make subtle hints to both the reddit community and other communities.
I found his talk about this subreddit overboard. But if you go to other spots and post PHP related news ( /r/programming ), then you can really talk about massive negative responses. Nobody noticed how few PHP news ever gets posted or stays alive on /r/programming. NodeJS? Sure ... Go, Java, C, C# ... non get the same bad/hostile treatment that PHP related news gets. The down votes and especially the comments how "PHP sucks" simply derail any topics fast. The misinformation at times is so insane and people do not back down from that misinformation. As a result i see very few people posting anything PHP related. Over time i have seen discussions show a lot of hate when it comes down to interview methods. Or mentioning that you do not need Frameworks to run PHP ( a big no-no here ). Or mentioning alternative PHP setups like Swoole, Peachpie and others. Some of these issues are a result from the lack of the PHP core devs not providing a native competent co-routine solution for PHP ( and avoiding the whole bootstrapping ). We are not going to see all this NodeJS topics everywhere on the internet if PHP was better equip. Its evolving too slow and its making people defensive. Do we need frameworks? No ... But PHP lacks some features that draws people to them and this creates framework competition / community splitting. Do we need solutions like Swoole, React, Amp ... If the PHP Core devs go there behinds in action, we do not need those. But here we are, still moving at slow snails pass when others are pushing more and more features. NodeJS, Go ... they do start to slowly eat into PHP its market because PHP is so stuck in the past. PHP 7.1,7.2,7.3 really do not add a lot of new or existing features. And that is 3 years after PHP7. As somebody who has programmed over 20 years in PHP, it feels like PHP simply keeps sitting on its behind too long. Classes came in very late. Now we finally get type hinting but its again so many years after people cry out about it. HHVM started to eat away at PHP. After YEARS we get PHP 7 what has been the work from especially a few dedicated people. And now PHP News is again non existing. One minor updated in the year. Go every 6 months, Rust every 6 weeks... C#/Core ... They build up more community, news, features people look forwards too. What are we looking forward in 7.3? ... Nothing really. Maybe JIT in PHP 8.0? When ... no clue. 2020, 2021? Php is living too much on its past code base. For people starting new projects, PHP is a lot of times not the choice anymore. I see developers around me going NodeJS. I see guys going Go. That means those projects will grow, where as PHP is stagnating as fewer and fewer companies take up PHP. I am not talking about the whole wordpress/blog/simple sites but real big platform sites, the companies that people take notice and think: "if they use that tech, what is good for them is good for us". That is the real issue. Not the community but the perception and is a LARGE part the whole PHP structure/development/communication being stuck in a almost 1990 attitude. I personally will like to see PHP going beyond just webservers. Some LLVM back-end. The ability to compile and simple deploy without needing docker. Go its simplicity in compiling and deployment is in my opinion the future for big projects. Everybody is going in this direction for good reason. I love PHP as a language even with its flaws from the past but i am realistic that PHP has reached a point where it has more to lose and less the gain. And it will slowly get eaten as more and more people move to alternative platforms. Its so easy to see, even on reddit. /Going to bed. My monthly rant :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Opt out from StackOverflow arbitration before it's too late.](https://www.reddit.com/r/programming/comments/8ji8db/opt_out_from_stackoverflow_arbitration_before_its/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I find it a bit funny that the site runs on Ruby.
I worked there two years it's a really pretty good backend.
How can you tell?
Wappalyzer
Actually, Germany is one of the most consumer-protectionist countries in Europe. Except when it comes to cars - car manufacturers essentially hold an infinite stack of Get Out Of Anything cards.
No.
alot.
Don't even think about it.
Once you realize what they really are, it makes more sense. Their main operation is not being a Q&amp;A platform - it's generating page views. Anything they tried was done with the goal of generating more page views. The original SO has reached saturation, so there's hardly any growth there; so they try other thing and see if they catch on. Some do, others don't. But spinning up another SE site is cheap - they can almost literally just push a button and a new site is live, probably even sharing infrastructure with the others. So if it flops, no biggie, just shut it down; if it succeeds, great, free money.
&gt; I see developers around me going NodeJS. I see guys going Go. That means those projects will grow, where as PHP is stagnating as fewer and fewer companies take up PHP. PHP has a very mature eco system with strong frameworks and packages. I don't know about Go but Node.JS is a big mess with hundreds of frameworks without any real authority (Express though maybe?) but they don't have that many features as Symfony or Laravel have. I sometimes work with Node.JS and I find it a pain to pick a package since no one really knows which is best.
I found a certain sense of irony that the concrete examples were incredibly abstract.
Check out https://github.com/sylius
I'm not sure if we're looking at the same code, but just a random file https://github.com/phacility/phabricator/blob/master/src/infrastructure/daemon/PhabricatorDaemon.php * No Namespaces * Static Calls all over * Everything unnecessary prefixed with `Phabricator` * Clicked on 6 random files, all classes extending something * https://github.com/phacility/phabricator/blob/master/src/infrastructure/daemon/workers/PhabricatorTaskmasterDaemon.php What is the n-path complexity of this? :D
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [phacility/phabricator/.../**PhabricatorDaemon.php** (master → 7aa12f1)](https://github.com/phacility/phabricator/blob/7aa12f192a6bde7edc34cc230b37db94182b2927/src/infrastructure/daemon/PhabricatorDaemon.php) * [phacility/phabricator/.../**PhabricatorTaskmasterDaemon.php** (master → 7aa12f1)](https://github.com/phacility/phabricator/blob/7aa12f192a6bde7edc34cc230b37db94182b2927/src/infrastructure/daemon/workers/PhabricatorTaskmasterDaemon.php) ---- 
If it's SaaS I don't see why you'd even need licensing code. You can simply stop providing the service if the contract ends.
I usually dislike every CMS since I tried working with every most hyped software out there "omg WP is so good, joomla baby!, typo for the world!, drupal or no-pal, CakePHP, whatever bullshit" and I initially started finding interest the first time on Laraval. But it didn't last long and I was like "Why the fuck are they doing this like that??" and there were several key points that really grinded my gears like facetes or the curious naming like "Illuminati/Eloquent".. I mean cmon, this sounds way to hipster. Then my mate tried out Symfony 3 and he was like "dude, this is the best framework I have ever worked with" and then he started to get into it. I also started and at first I was very confused, because there may be documentations, but not really beginner guides that will explain you the basics. Also Symfony always sounded so "big" for me with all the certificates you can get for them. I also struggled the first time with the folder management.. which folders do I need? Why do I need them? Do I need to create a new AppBundle every time? Etc. etc. etc. But then we slowly get into it and understand how Symfony works.. we even came to the point where we understand, that we didn't understand it correctly in the first place, but this lead us to really understand it (It's like thinking "I am a man now" and a few years later realising that you was still a baby, but got wise now). We created some huge ass applications with it and somehow, even if the app was crazy big, it loaded like within ~100ms. Now with Symfony 4, EVERYTHING not only got way easier, but way more powerful! I can only recommend everyone trying out Symfony and taking his time to understand and learn it. You will love it! It's the only framework I would want to work with. My mate has to work with Laravel now and he keeps swearing about John (Laravel), because he hates what he sees :D My next private project will be replacing Wordpress, but I have to admit that I havn't used Wordpress a while and expect for creating posts, having comments etc. I don't know what else it can. Plugins and Themes. I probally want to think about it before I even start to code and plan things out.
Sonata CMS is pretty well coded following symfony standards. Except that it used to rely too heavily on bundle inheritance which is now officially dead.
Oh come on, just look around. A [recent example](https://www.reddit.com/r/PHP/comments/8jar5t/announcing_tdbm_5_a_strongly_opiniated_db_first/): there is **no single fucking knowledgeable person around** to provide a constructive or at least useful feedback. A *word choice* at best. All this educated society can comprehend is a few words from the beginning of the article. What other evidence you need?
[Here's the website's repo](https://github.com/thephpleague/thephpleague.github.io).
I didn't get much into the code, so I'll just ask. I like the way your code handles optional conditions. I've been using a [certain trick](https://phpdelusions.net/pdo_examples/dynamical_where#static) for that. Just curious, does your parser handle cases where null is meaningful, namely &lt;=&gt; operator, isnull(), coalesce() and such?
There is no README, documentation or tests, so it's not really usable.
But but... Beautiful! 
Start here: https://knpuniversity.com/screencast/symfony/setup
The site is open source - it's all there in github.
This part left me rather confused: &gt;&gt; **Avoiding the active record pitfalls** &gt;&gt; The active record pattern violates the single responsibility principle (objects used to query the database are the same that hold data) &gt; Not in TDBM. TDBM does a strict distinction between Repositories (also called DAOs) that are used to perform the query and Models (also called beans or entities) that map rows. In that regard, TDBM is not an active record ORM. Before I was under the impression that objects used to query the database are the same that hold data is a [trademark feature of AR](https://www.martinfowler.com/eaaCatalog/activeRecord.html). Given it is not so in TDBM, why you're calling it AR? What is your definition for this pattern? 
There wouldnt be a code of conduct if there hadn't been complaints. The rules in this CoC are basically just "don't be a cunt in public".
How is that even possible? 
Awesome! Just what I have been looking for.
no your mum is notoriously terrible
probably true but the only other language's libraries I regularly look at is Javascript so I don't know whether it's true for most languages or not?
What is the reason for you to rebuild it? If it works, it works.
those are really good sources for creating custom framework architecture. Love it.
Search keyword position for a specific product 
It's illegal to even set up a TOS in a way that the consumer would sign something he/she wouldn't expect. Most people do not know how much good things happen to citizens of the EU. It's a tragedy, really.
Take a look at the Host#encrypt() method https://amphp.org/aerys/classes/host#encryptstring-certificatepath-string-keypath--null-array-additionalsslsettings--
&gt; Given it is not so in TDBM, why you're calling it AR? Well, I shouldn't call it Active record, but I noticed a trend in the PHP world to consider any ORM that is not a data-mapper to be an active-record ORM. So what I really meant was that TDBM was not a data-mapper.
So, as I got your database-first paradigm, one could call it ROM as opposed to ORM? In the latter, we have our business logic entity first, and then trying to map it to a database record, hence Object-relationsl mapper. and you have a database record from which you create a busines logic entity automatically, hence ROM. Correct?
The parser does not handle those cases itself \(that might be an improvement actually, I'll think about it!\), but you can disable the magic\-parameters feature for some parameters by adding an additional "!" at the end of the parameter. For instance, `WHERE status = :status!` \(notice the exclamation mark\) will turn into `WHERE status IS NULL` if the status variable is null. More info here: [https://thecodingmachine.github.io/tdbm/doc/quickstart.html#usage\-sample](https://thecodingmachine.github.io/tdbm/doc/quickstart.html#usage-sample)
Thank you! I definitely should have checked the docs before. A very nice solution, I am getting to love it. 
the reason why it’s not usable is because there is no code inside except for some interfaces and a bunch of todos.
oh there's some awful negative stuff on here from time to time.
codeigniter :D
Don't run PHP on your Mac, just run it in a container/vm ?
NO, YOU!!! WERE BORN IN NJ.
As someone who is currently rewriting legacy software for a company myself, definitely start with the ERM by talking to the people who use it. Figure out what exactly is needed and put it on a clean foundation. Imho, the worst you can do is copy what has been there and then add changes of functionality later. But when changing an existing system, still try to make it as compatible to the old one as possible. There might be some things working with your existing System that you wouldn't want to change also. As I see it, having a plan before writing your first line of code is essential in your case. I'd go around and interview the people using it already first. They are usually the ones that can tell you what is great, what sucks and what is missing. 
Seventh Amendment to the US Constitution: &gt;In suits at common law, where the value in controversy shall exceed twenty dollars, the right of trial by jury shall be preserved, and no fact tried by a jury, shall be otherwise reexamined in any court of the United States, than according to the rules of the common law.
Oh. I found something. Not tested, but apparently you can work-around this with CURLOPT_CUSTOMREQUEST like so: curl_setopt( $curl, CURLOPT_PUT, 1 ); curl_setopt( $curl, CURLOPT_INFILESIZE, filesize($tmpFile) ); curl_setopt( $curl, CURLOPT_INFILE, ($in=fopen($tmpFile, 'r')) ); curl_setopt( $curl, CURLOPT_CUSTOMREQUEST, 'POST' ); 
Good point.
I compile from source, I run multiple versions of php on my mac this way. I use these scripts to help: https://github.com/joegreen88/php-builder
Thanks!
As others said, whether you need to rewrite it is under question. It all depends how you wrote it the first time. Even if it's a mess, you can be very successful splitting the existing code in units and "wrapping" each of them in a simple facade class (look up Facade Pattern, but **not** Laravel Facade) with a simple API and clear responsibilities, then hook the facades together and boom, you have yourself a modular app (OK, it's not that simple, but it will get you going). But it's hard to say without seeing code, what is it you need from us to tell you. Check out phptherightway.com tho.
Don't rebuilt. Incrementally migrate towards a better architecture, but do it piece by piece, one small change at the time.
It works but the author did point out that he now knows more of there needs. A lot of software gets written where the developers are in the blind and only after a long time you truly know what the needs of the client/company are. A rewrite can help to get features that are difficult to implement in, have a more clean code base, less bugs, ... I have code here that has been "tweaked" several times with months of work because the original developers made a mess out of it. And while the code works (now) bug free, its a time costly process of adding any new code to the system. And has a massive high change of introducing bugs. So a rewrite is actually more economic and future proof as we now better know the client there requirements, how everything needs to fit together .... So a system may work but that does not always mean its a good thing as the technical dept can actually make the future development of the code dangerous and massive time consuming.
When you work business-to-business, contracts are your best insurance. With an SaaS type of Service, you can easily implement authentication and only provide a service to authenticated clients. A combination of both should be enough. Just keep an eye on your API and make sure you log any attempts to bypass your security. 
Probably.
Imho, the issue with most CMS is, that CMS by design was made to bridge the gap between expensive professionals and people already working in a company. It wanted to give a framework where "developers" would set everything up, but the companies could manage it themselves. The issue is, that none of these businesses bothered to do any of the stuff themselves and "developers" ended up installing plugins and configuring templates as a job. When it comes to these kinds of systems, Frameworks are a lot better next step than CMSs ever were. A framework optimises workflow for a developer where it matters, when writing the code. But allows to import Backend-functionality for exactly the functions the client needs to do himself. When you install wordpress and other popular CMS solutions, your issue is that they already try to do everything, no matter whether you need it or not. That creates unnecessary dependencies and forces a certain structure, that you wouldn't necessarily need for your product. It usually grew large quite early and refactoring all of that is usually not easy once it is established. With a well setup framework, you can use different elements for each project, assembled together as you need them. If you do not need it, you do not require it for your project, it's not in it. Many of the CMSs out there, do what they were intended for very well. when people start extending them to do things that weren't originally planned, stuff gets messy. Wordpress is the best example, since it was intended to be a Blog-Software. Now it's used for almost everything that can be a website out there.. that's a mistake. 
It's actually the recommended WP way of getting your admin-credentials back when you lost them. I've done it before, when waiting for a reply from the developers took too long and I just needed admin-status. The Docs also recommend removing the line as soon as you logged in using them. They should definitely not be left in the file... 
What's the big deal? PHP formulae are still available in homebrew\-core, even 7.1 and 7.2. `brew install php` installs the latest stable PHP `brew install php@7.1` installs PHP 7.1 All you need to do after that is use brew unlink and brew link to switch the version. And although I really really don't like PECL, you can use it to install libs like imagick.
Your situation sounds just like what my book, [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp), was intended for. The book gives you a series of small, specific, detailed steps on how to refactor your application in place (keeping it running the whole time) to improve its quality and maintainability. Of course, you don't have to take my work for it; there are reviews, and even a video preview of some of the steps, on the Leanpub page there. Best of luck regardless!
The way things work, the dev has complete control over the content types s/he accepts as well as the types s/he can (de) serialize to. I'm not saying I won't try to break my libraries with thorough testing, but I'd be curious what attack vectors someone could use to break this.
&gt; There wouldnt be a code of conduct if there hadn't been complaints. Just so I'm clear: are you claiming that there is *no other possible reason* to institute a coc?
Not in my mind. I would only institute one if the folk I am herding proved they can't behave. I mean, software conferences are famously full of dipshits who think societal norms are beneath them. I doubt this would be a thing if that wasn't brought to the attention of some lanyard chud. 
Anything made with laravel
Try run it with docker.
&gt;but they don't have that many features as Symfony or Laravel have Give [https://adonisjs.com/](https://adonisjs.com/) a try some time. It is pretty laravel\-like
 Content-Type: Expanding Brain Meme Body: * Not using === when comparing two hex strings. ** Not using timing-safe comparison function for comparing password hashes (http://php.net/manual/en/function.hash-equals.php) **** Using MD5 to store passwords in 2018 ***** Sneaking a Backdoor into the admin panel of a client's website and leaving it there 
The seventh amendment was never incorporated, so it doesn't apply to state courts. The "suits at common law" part also excludes a bunch of different things, including suits that seek equitable (rather than legal) relief. The Federal Arbitration Act of 1925 requires judges to enforce contractually obligated arbitration, and that was ruled to be constitutional by the supreme court. The act also preempts state law, so it's up to congress to fix binding arbitration now.
StackOverflow is generally operating across state lines, so US courts would have jurisdiction. I'm not sure how many people have more than $20 at stake though.
Picking a daemon file is questionable, since those are basically console scripts, and don't reflect the main application. 
Well by the sounds if it, it's 5 years old and only used internally at the company. Chances are it's barely hacked together with unsupported dependencies but works fine most of the time. If OP is at a point where all the features and business logic is there and he doesn't have nay more pressing responsibilities it could be an opportunity to make a testable version that's a bit more future proof: * Test/document first development to guard against obscure bugs and edge cases and document the history of business decisions that led to the app working in its current state and provide a known, tested baseline for any future business-related development * Instant performance benefit from being able to run on latest version of PHP * Potential redesign of app and db/cache source structures could improve performance * Avoid security flaws from no-longer supported dependency versions (EOL PHP, old Pear libraries, flawed Stack Overflow snippets...) * Restructuring the app could help scale for business expansion in terms of more users or de-coupling for integrating additional functionality * Chance to accelerate and improve the UX * Potentially optimise for accessing the app from newer devices in the field
Docker on mac is still horribly slow
&gt; Not in my mind. So, for example, [this introduction](https://bugs.ruby-lang.org/issues/12004) of a coc to the Ruby project could only have been because its members were "be[ing] a cunt public"? (I think it's obvious the answer is "no.") The coc exists for *political* purposes, to give cover for threats and intimidation against those who are not enthusiastically supportive of the coc-introducer's politics. This kind of behavior is exhibited even by the originating author of the coc in question. 
Let's test your theory. 😀😁😂🤣😃😄😅
Interesting, thanks :)
It's called Cunningham's law and Swizec (a ReactJS dev) proved it works. See his video if you like. https://www.youtube.com/watch?v=8kCd4w4kc68&amp;__s=isyfbysoqkzyao8hfehp
Sadly you're using them wrong. /s
OS X is now shipping with 7.1 preinstalled. 
Haha no fucking way am I reading all that pointless drama. People who get sensitive about their patches getting torn apart and shit like that shouldn't be contributing to these projects, but at the same time folk that are blatant arseholes should probably be policed. At a glance this CoC seems pointless, but at the same time I'm not going to get red, hot and nude in the comments about it being introduced.
PECL won't install imagick because of MacOSX security in /usr/lib. I couldn't find any way to force pecl to compile imagick in a folder without this security. Cannot bother to disable it, reboot, install, reenable security... updating will be a nightmare. Could make all of this work using both mentioned methods.
Oh nice thank you not sure how I overlooked that!
But OSX php has 0 configuration. Is it manageable to install all extensions ? I don't think that's a clean solution for long term. I need full control over my php. Pecl won't let me install imagick for instance.
...idk what slowless you speak of... my entire team uses it in vagrant w/o any problems. sub 100 MS response time.
My god docker people ... please stop. https://twitter.com/kai_richard/status/784674714077855745
What framework do you rely on ? Do you use any testing framework, phpunit, xdebug, phpdbg, that kind of stuff ? Is it still fast enough ?
Same story here. Symfony seemed daunting at first. After messing about with tutorials and watching some youtube videos, I was able to convert a few of my web applications to Symfony 4.0.9. I must add that the documentation is a little sketchy for some of the older bundles &lt; Symfony 4. Apparently, they are updating much of the online documentation; I haven't had too much of a problem myself. [Check this tutorial out](https://auth0.com/blog/symfony-tutorial-building-a-blog-part-1/) - setting up a secure blog authenticated by auth0. +1 for Symfony :D
I've had no signifcant problems building imagick on my os x dev machine. I just installed imagick from homebrew and pecl was able to build the php extension on top of the homebrew imagick. Some extensions have required a bit of extra trickery due to homebrew refusing to link some libraries already provided by os x, though
I use phpunit, framework is symfony + doctrine. No issues with vagrant. dedicated 1cpu and 2gb memory. However.. I noticed that SSD makes a MASSIVE difference. Well it did for me. If you don't have an SSD.. that might be your issue. # -*- mode: ruby -*- # vi: set ft=ruby : VAGRANTFILE_API_VERSION = "2" Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| config.vm.box = "ubuntu/xenial64" config.vm.network "private_network", type: "dhcp" config.vm.network :forwarded_port, host: 8080, guest: 80, auto_correct: true config.vm.network :forwarded_port, host: 8443, guest: 443, auto_correct: true config.vm.network :forwarded_port, host: 8444, guest: 444, auto_correct: true config.vm.network :forwarded_port, host: 8090, guest: 8000, auto_correct: true config.vm.synced_folder "../api/", "/api", type: "nfs", mount_options: ['rw', 'vers=3', 'tcp', 'fsc' ,'actimeo=2'] config.vm.synced_folder ".", "/vagrant", type: "nfs", mount_options: ['rw', 'vers=3', 'tcp', 'fsc' ,'actimeo=2'] config.vm.provider :virtualbox do |vb| vb.customize ["modifyvm", :id, "--ioapic", "on"] vb.customize ["modifyvm", :id, "--memory", "2048"] vb.customize ["modifyvm", :id, "--cpus", "1"] vb.customize ["modifyvm", :id, "--cpuexecutioncap", "80"] end # avoid red alert when creating the VM config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'" config.vm.provision :shell, path: "./vagrant/bootstrap-once.sh" config.vm.provision :shell, path: "./vagrant/bootstrap-always.sh", run: "always" end 
It's a shared folder/ntfs issue. Move the cache/vendor folders in your vm instead of the shared folders and you'd see significant speed improvements. 
if i understood your question correctly, cant you use pecl ? instead of brew install php72-xdebug i use pecl install xdebug 
WIP 
Damn, reading this makes me glad I use Ubuntu.
Thx. Good to know. My macbook pro has an SSD so I might give it a try.
pecl will compile imagick but it will fail on permission denied in /usr/lib. Could not figure any way to change the target location.
Whoops, sorry, in my mind I was comparing speed with x number of VMs installed with Vagrant. You are correct that the app runs slower than native services but it’s not as bad as your stats predict (and that’s running a large Yii 1 app).
Eventually we’ll offer it on prem.
Have you tried [Docker Sync](http://docker-sync.io/)?
That's a big blanket statement though. There are plenty framework based CMSes out there, and some of them are basically thin layers. I've been working with Craft CMS 3 for a couple of months now, it's literally Yii2 plus their custom models and admin panel. While developing plugins I end up in Yii's docs just as much (or even more) than Craft's own.
Ew
&gt; Funny how perspectives can be different. True ... &gt; I can't help but shudder whenever I take a peek at node_modules and wonder what the heck is actually going on. Nobody said that Node is a good solution. Just a popular one :) The reality is that PHP its stability is a blessing and a curse. You can run 15 year old code, hell, 20 year old code and still have it work out of the door ( if its not too complex and did not use bad habits from the start ). My issue is the moment you try the new competition, you start to see the advantages of tools they have at there disposable. **Bootstrapping** PHP its fire and forget approach works great as your application ( if not using the same code ) never really stops working. But the whole bootstrap kills performance. Take a look at Swoole + Json. https://tfb-status.techempower.com/ 5 Times performance difference without the need to tune a webserver or php-fpm simply because PHP does not need to rely on the whole bootstrapping. Note: the other test results in the same league as raw PHP because mysql is blocking. The code does uses the exact same blocking PHP code and not Swoole its non-blocking database access. In my book its crazy that people need to rely on a Chinese PHP extension. This is the main reason why Go and other languages dominate PHP. Its not that PHP is that slow, its simply the way PHP works and its like leaving performance on the table for nothing. **No default proper coroutine, async capability** Sure, there are PHP solutions for that but again its not perfect. PHP has build in limitations that prevent these solution from scaling correctly. Probably the same reason why Amp, etc are not ultra popular. **Source** When you get used to playing around with Go and other fast compile languages, you realize something. Its way harder for somebody to break into your system and inject code because its already compiled. PHP as it constantly loads up those script files, makes it so easy for somebody if they gain access to your files ( by whatever injection ) and simply add their code. I have cleaned out so many wordpress websites, that you get tired at this issue. It requires a different level of hacker to do the same with a Go based system. Another advantage is that your code is more "private", very useful when selling your system to others or hosting your code on the client there servers. **Deployment** Nothing more fun as to configuring nginx, php, dependencies, kubs, docker etc just to get a semi workable system. When i compare this to Go again, ... compile, copy, run ... No need to worry about updating settings across servers, different versions, ... For me it makes my life so much more easy compared to PHP. Note: Go also has massive issues but i will love to see a more PHP like language with Go its deployment, speed, etc. But that does not exist. The issue for me is that PHP is stuck in a rather old fashion design that is slowly getting phased out. I see it around me all the time. Pure PHP firms that are now using Go for new product development. Ruby firms that are moving more and more to Crystal. Where is for us PHP developers, our Go, Crystal? You see work in the Ruby community with Crystal. You see Python having CPython and Pypy. Where is our solution? In the past you can say: But normal people will not deploy software on root servers. But these days with Amazon, Google Cloud etc supporting Go and other solutions, those days are also gone. In my opinion and its just that, a opinion, PHP is sitting on there behind so much. Even if my opinion has flaws in it, i truly believe that PHP is digging its own grave and will over the next 5 to 10 years start losing more and more grounds ( because new big projects get more and more done in the new languages ). I hope you understand what i mean by this? I have been programming in Go, Crystal, Rust, Swift and so many other languages that the moment you step outside the PHP domain, you can start to see the cracks in PHP its current process. And it pain me because most of those languages do not have the same easy / relay feel that PHP has ( Crystal is closest ). My monthly rant limit really hit its limit today *haha*
Tip: even simpler `__construct(int ...$ints)` (no need to map in this case).
I keep hearing this, but I haven't had this problem on my own Mac (yet). What causes this kind of slowness on just Mac?
I need someone experienced in Ruby and modern PHP to tell me why I would want to move from PHP. I’m genuinely interested.
Don't knock it till you try it!
Well, the first commit is "WIP" (Work In Progress) and that was 2 months ago. I'm guessing they moved on to something else.
Hey, thanks! * Yup, works jsut as well with object types. You can see an example in the tests. * That's basically what this lib does. I couldn't think of a better/simpler way to have a type safe abstract collection. * The only value proposition of this lib is to have abstract type safe collections. Something like doctrine/collections probably does a lot more with other objectives. Re benchmarks - I'll look into it, but it'll definitely be slower than the built in array. The question is whether something like this could be a bottleneck in an app. In my experience that's not the case, but I too would be interested in doing some benchmarking. 
Absolutely. I still absolutely love PHP. It's grown so much in the past few years, it's really gotten a lot of ill will by those who don't understand the new PSR\-4 changes, Composer, the awesomeness of v7 with return type hinting and all sorts of goodies. I would say the major differences are twofold: 1. You need a lot of setup to do some tasks For example, reading/writing a CSV file is not web application related but it's a pretty common task that needs to be performed by developers. In PHP you can use the built in \[fgetcsv\]\([http://php.net/manual/en/function.fgetcsv.php](http://php.net/manual/en/function.fgetcsv.php)\) which will takes at least a few minutes to get reacclimated with the API of the tool. Good luck understanding it again after coming back to your program after a few weeks. \*OR\* You can go the modern route and use a Composer package that has a much easier API to use: [https://csv.thephpleague.com/](https://csv.thephpleague.com/) \_But\_ if you go the modern route, it requires some setup. You need to: 1. Start a new composer.json with \`\`\`composer init\` 2. Require the package: \`composer require league/csv\` 3. Start programming # Same task in Ruby: require 'csv' [CSV.read](https://CSV.read)\('/home/pierce/Downloads/example.csv', 'r'\).each do |row| puts row # this will echo each row out to the terminal end The CSV librariy is \_built into\_ the language.
are you joking? That thread is full of praise and constructive feedback.
Forgive me for belaboring this point, but I've never used ruby, so I just had some simple curiousity about what its extensions are and what the language looks like. I went looking to see what I could find in the source of the site (view source, not git). I found not one reference in any of the site's source to anything but straight links/html - no ruby (and well, no php for that matter - nothing at all, and honestly nothing about the site seems to need server side scripting anyway). At this point I Googled for how to identify a site as ruby, and there were several tricks ($.rails in the js console, etc). None of them worked to identify the site as ruby, but I was pointed to a website that can identify technologies being used by sites, builtwith. So I used builtwith - and all it returned was php. I thought it was unusual that someone would so casually be able to identify the site as ruby, when I can find absolutely nothing after all this (minutes, I tell you! minutes spent!) effort. Even now, as you point me to their git rep, I can find only a single reference to ruby, in the directory called "Gemfile." But I do see it, so I'll Google that and see where that leads, but it seems like an awfully thin thread for a site to be so easily identified as a ruby based site. I guess I just don't know anything about it, so big surprise. Anyway, thanks for listening to my blathering.
Hey, HAL\_9\_TRILLION, just a quick heads-up: **curiousity** is actually spelled **curiosity**. You can remember it by **-os- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
Are you aware of [Rails for PHP Developers](https://www.amazon.com/dp/1934356042/)?
Former homebrew-php maintainer here (actually the original one). The promoted method for installing non-standard extensions _should_ be `pecl`. This is the method for installing them on all other operating systems, and if PHP as a community doesn't want to back it, then maybe another solution should be considered. Pecl is also helpfull provided by the formula, so provided you've linked the PHP formula and have `/usr/local/bin` in your path, you should be able to use it: ``` $ which pecl /usr/local/bin/pecl $ ll /usr/local/bin/pecl lrwxr-xr-x 1 jose 28 May 3 01:49 /usr/local/bin/pecl -&gt; ../Cellar/php/7.2.5/bin/pecl ``` I see that you've had some issues installing things via pecl because it attempts to write to `/usr/lib`. As a test, I just ran the installation using the `pecl` provided by the formula. Temporary gist with the pecl install output: https://gist.github.com/josegonzalez/6e38a609c31028e9d1c3b711f9622c45 If you are still having issues and have verified that you are using the right pecl, I suggest you file an issue in the homebrew-core repo regarding your permissions issues, as that seems like it would be a bug. Please be sure to run `homebrew doctor` beforehand to fix any issues you might be seeing that would affect this.
Thank you for the great information! I may have to do some Ruby exploration in the near future to get acquainted.
I was going to mention that as well. Good stuff!
Nice idea. One thing tho, I would add your "TestCollections" into the src. This is for the IntCollection, StringCollection etc. So every one who uses this lib don't have to implement them again ;)
Sorry I can't, I have been programming for 6 years and its not an option in your dropdown ;)
Could be interesting. I'd like to see php to node
Releasted February 21, 2008.. uhm.. no thanks
I disagree with this. As soon as you start telling people that you're rewriting the software and there's room for new features every fucker will come to you with their bat shit crazy ideas. You'll get bogged down with a million stupid requests that conflict and cause you problems. You'll never ship the rewrite. People say rewrites are impossible and that everyone should avoid them. Rewrites are great when they're done stealthily. If you can deploy the changes without anyone knowing then that's a success. Figure out exactly what the software does and lock it. Then work to that schedule. You'll be amazed how quickly you produce working code when you haven't got every wannabe entrepreneur giving you their shite ideas.
No probs, I'll actually update the readme to mention immutability, as currently it is not clear. &gt; casts/validates input It's very important that it doesn't cast! Casting would destroy the purpose of a typed collection. It type checks upon creation, so that if it's created it is type safe. &gt; You can simplify that by just returningnew ArrayIterator($this-&gt;elements). This is a valid point. Using Generator was a design decision. The reason is that there is already access to the underlying mutable array using toList(). If you only want to iterate over the collection (to do something with its elements) then a Generator is enough and it doesn't give you the ability to access to the container itself. In other words the semantics of a read-only Generator is a better fit for an immutable collection than the ArrayIterator, which gives you the actual container structure that you can mutate.
Derp! `$this-&gt;assertFalse(in_array([1, 2, 3, 4, 5, 7, 8, 9, 10]));`
Personally i do not see the usefulness moving from PHP to Ruby. There are more benefits going from PHP to Crystal ( Ruby like syntax ).
Might be a lot easier terminating SSL at Nginx, and proxying to the Aerys app. I have a handful of apps working this way, provisioned through Forge and certs with LetsEncrypt.
I'd recommend picking up a copy as research.
Yes, it's from the time there was a market of developers moving from PHP to Rails. ;) I was not recommending it to the general public for modern use; I was making sure OP was aware of prior work.
This is the second time I've heard about Crystal. Could you tell me a little more about it? How does it compare to PHP and Ruby?
Hm, I'm not sure I follow. Why would you typehint `TypedCollection` when you're explicitly looking for the type safety of `MyIntCollection`? Anyway, another tip for your own projects - you can get non-runtime PHP generics via static type checking using tools such as [Psalm](https://github.com/vimeo/psalm). It's pretty cool, it allows you to statically verify definitions such as `@param TypedCollection&lt;int&gt;`.
if you're using xdebug, why not breakpoint in the test and see where it gets stuck? &amp;nbsp; php with xdebug is much slower than w/o, so maybe it isn't stuck forever, just taking a longer time.
Woah, my bad, I'm sorry about the `ArrayIterator`! I have never used it for mutating and didn't even know it's capable of it. About the casting \- I would update the example and put `declare(strict_types=1)` somewhere, since many people doesn't know/underestand it. When omitted, type casting will happen instead of validation.
(IMHO) The community is fragmented because the PHP community is HUGE and has people with lots of different viewpoints and expectations, which is a GOOD thing. Disagreement happens because people care deeply about the future of the language. Everything he points out as a negative in the rest of the video is actually a sign of growth, showing that the language is healthy. Hopefully he realizes that the community is already awesome right now, today.
You cannot tell the technology that constructed the HTML for the static site, any more than you can tell what kind of editor a developer used when creating their source. We just *know* that the php league site is generated [using Jekyll](https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/) because they are delivered by Github pages. We also *happen to know* that [Jekyll is a Ruby application](https://en.wikipedia.org/wiki/Jekyll_(software)).
&gt; I understand whats 'going on', but it's more like I have a hard time coming up with good solutions to problems that rise on this area. Sounds like you're already halfway there!
That’s a lot of assumptions. You need a lot of future development to justify the amount of time and money investment to rewrite an entire app from scratch. It would only make sense if the app is has ever changing requirements that are of tremendous business value and will need the app to grow in the next few years. I mean don’t get me wrong: if you have too much time on your hand and endless budget, go for it. I know very few of these companies though 
Be sure to lookup the licenses of the libraries. It's possible they are not allowed to be used in commercial projects.
Is that an existing project? If so can you please post a link to the source code.
Yes, of course. That would be a very interesting project, especially if other people would eventually would join in. 
&gt; but generally speaking since Ruby (and more tot he point, Rails) was/is so widespread there is definitely work to be had. It was widespread with new startups because it was the cool hip thing. It's pretty fizzled now. When I look to the future, I definitely don't think of Ruby.
Ruby on Rails is still a popular web framework. It's much easier to find jobs or gigs than more obscure frameworks like Django. Also, Ruby's OOP design is actually very similar to PHP, aside from the optional dynamic capability of the language. I think PHP developers have a much lower barrier to entry learning wise than some other languages. Lastly, on average a [Ruby developer](https://www.indeed.com/salaries/Ruby-On-Rails-Developer-Salaries) makes 35k more than a [PHP developer](https://www.indeed.com/salaries/PHP-Developer-Salaries) Now, this is skewed because the barrier to PHP development is so low, but Ruby is synonymous with Rails and custom web *applications* not CMS work. In general if you're more into the custom application work, it's much easier to communicate that because that's all Ruby is known for.
Before you think reading a CSV\-file in an OO\-way is some black magic in PHP that requires composer packages and god knows what, try this: $CSV = new SplFileObject\( '/home/pierce/Downloads/example.csv' \);$CSV\-\&gt;setFlags\( SplFileObject::READ\_CSV \);foreach\( $CSV =\&gt; $row \)print\_r\( $row \);I have no idea how Ruby's CSV\-object handles file\-encoding and crazy CSV\-delimerters, but it's pretty easy to hande CSV\-files in PHP when the example is non\-contrieved and things get dirty.
Shared file system. If you don’t mount a FS it’s about 10x faster (but you need to rebuild the image any time you change almost anything, so it’s usually not a net positive) Might be other issues too, but that’s one of the Mac Docker issues. 
Why would you want to invest time just to deal with old stuff, especially if you're doing that already?
Yup right on, there is not WordPress equivalent in Ruby. So Ruby development is limited writing custom applications. So if you're a PHP developer that primarily works in MVC frameworks like Laravel, Symfony, etc then you're already in a similar market. But get paid more for a language that's easier for professionals to use and more synonymous with the work you're familiar with. A PHP developer working mainly in the rich CMS ecosystem that PHP offers might not see the value in the jump because the limited CMS systems available. You pretty much have a handful of Jekyll powered small sites, but it's not a plugin-able framework. I'll preface in the book that the end goal for a PHP developer is that they'll fare much better already knowing MVC general purpose frameworks.
Why do you wrap `getIterator()` with a closure? This works perfectly fine: foreach ($this-&gt;elements as $k =&gt; $v) { yield $k =&gt; $v; }
I think Ruby is a cool language, but I don't think you have a convincing argument. I'm open to hearing why people should use Ruby though. I feel like you could hone in on more unique to Ruby aspects. Here's some of the issues I had with your above arguments: 1a. Considering Composer as "a lot of setup to do some tasks" is ridiculous. It's no more work than Ruby. `gem install project` is just as tedious as `composer install project`. 1b. Having a easier to use built in CSV library also isn't a great argument. I'm sure I could find plenty of built in PHP functions that are better than the Ruby counterparts. 2a. The underscore vs no underscore argument is also silly. If a developer isn't using an autocomplete IDE with any language, then they're willingly putting a handicap on themselves. 2b. You can just as easily chain objects in PHP as Ruby.
That's coming in [v5](https://github.com/ScriptFUSION/Porter/pull/54), along with async support.
More code = more enterprise.
&gt; A nice implementation! &gt;Active in r/laravel Why am I not surprised.
Here's a sneak peek of /r/laravel using the [top posts](https://np.reddit.com/r/laravel/top/?sort=top&amp;t=year) of the year! \#1: [20 Laravel Eloquent Tips and Tricks](https://laravel-news.com/eloquent-tips-tricks) | [34 comments](https://np.reddit.com/r/laravel/comments/8c2tpf/20_laravel_eloquent_tips_and_tricks/) \#2: [Laravel 5.5 released](https://laravel-news.com/laravel-5-5) | [29 comments](https://np.reddit.com/r/laravel/comments/6wyhul/laravel_55_released/) \#3: [Laravel 5.6 has been released!](https://twitter.com/laravelphp/status/961268622609002498) | [14 comments](https://np.reddit.com/r/laravel/comments/7vx60d/laravel_56_has_been_released/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Yep I'd work on something like that. I need more stuff for my resumé anyway and all of the development I do right now is for work that I can't share. 
Change of scenery more than anything. I once had a job that was almost exclusively writing VBA (puke) but it was a breath of fresh air after the previous 5 years of PHP. Different strokes.
\&gt;Write book on a topic like you're some kind of authority. \&gt;Not even aware of the established literature in the field. Yeah, I'm sure it's gonna be a great book, dude.
&gt;$this-&gt;assertFalse(in_array([1, 2, 3, 4, 5, 7, 8, 9, 10])); What? `in_array` requires at least two arguments, but should always be supplied with three, and PHPUnit assertions are static methods and should be invoked as such. Do you even know PHP to begin with?
Ugh, that process when someone leaves and you have to update the credentials. I'm sure there are better sysadmin/devops tools that are either a better replacement for .env or make having to load credentials into .env a non-issue.
Could this be the glorious beginning of the legendary /r/PHP fixes Wordpress project? ^(Probably not.)
I'm pretty sure this was some pseudo code joke...
Matter of taste and curiosity I suppose. I don’t think Ruby is going anywhere in the foreseeable future, though (at least from what I’ve read). FWIW if I were to pick the next language for my career it would certainly be C# and .NET Core 2.0. 
And after we do it the, “right way,” we can completely refactor it again to do it the right way! :)
For the first point, if your project is larger then you're going to have to have stuff put into composer (or your language's equivalent such as bundler) anyways. Adding one more for csv probably wouldn't break the bank. If your project _isn't_ large then adding a single extension isn't going to be a big deal either. Probably my biggest complaint about modern PHP is the stuff you have in your second point where there's a lot of stuff that only really makes sense once you know it. For example, namespacing in PHP is a lot more counter-intuitive to novice users than in Python or Ruby. Basically a lot of stuff seems to get added in an ad hoc manner and the language isn't ever refactored so that novice users can pick up on a sense of consistency rather than "it's named this just because that's what they decided to call it" BUT on the subject of OOP, one _good_ thing about PHP is that you get truly private properties. You don't get that in Python and my Ruby knowledge is pretty limited but I don't think you get those either. That's something that's helpful both in its own right and because people coming in form more traditional language like Java are going to find PHP's OOP more intuitive.
Pretty sure OP was talking about https://www.reddit.com/r/PHP/comments/8ireiu/what_are_some_examples_of_poorly_coded_php_web/
I wrote `final class Gender` earlier today. I feel like I'm going to get in trouble when I "trigger" developers of the future.
Point taken. In this case, I think not having the pressure of release deadlines will allow us to look at the project as a whole and ask ourselves, “Knowing (as a PHP community) what we know now, how should we have done this differently?” Adhering to well-defined procedures like characterization testing and extract-class/method should help as well. We can take the time to do it, if not right, then at least with great care. Yes, it may (likely) turn into a yak-shaving expedition, but I think the process at least would be enjoyable. 
To point #3, would it have beneficial to extend and reuse doctrine/collections? 
&gt; For the first point, if your project is larger then you're going to have to have stuff put into composer (or your language's equivalent such as bundler) anyways. Adding one more for csv probably wouldn't break the bank. If your project isn't large then adding a single library isn't going to be a big deal either. It was just a quick example of a simplistic task in both languages. &gt; BUT on the subject of OOP, one good thing about PHP is that you get truly private properties. You don't get that in Python and my Ruby knowledge is pretty limited but I don't think you get those either. So there are Private and Protected methods in Ruby as well. _But_ they're not a hard stop. For example you can bypass a private method: class Example def public_method puts 'Yup I'm public' end private def private_method puts 'not accessible outside of the class' end end example = Example.new example.private_method =&gt; Error 'private method' not accessible # but you can bypass it example.send(:private_method) =&gt; 'not accessible outside of the class'
If you learn vim (or whatever else you like that'll run from container) then you can just pull code into VM and you're away. I can slide from Windows to Mac and nothing changes once I've pulled latest code. Can't recommend this enough. Other solution was to have diverging watch files and scp or rsync or whatever then to the VM (not a shared folder). Worked well enough. 
There is https://github.com/phpbrew/phpbrew which I find awesome. But it's becoming less and less maintained and would welcome some help.
I suppose that's better than Python but PHP's private/protected is pretty much inaccessible afaik.
- abuse of traits are considered a code smell - abuse of static methods are a bad practice - abuse of magic methods are a bad practice - the `die-vardump` is a hello-world level approach to debugging - it seems that Ruby's community disagrees with you about DI containers 
For what it’s worth, I’ve created https://github.com/BetterMood/better-mood. I probably haven’t got it configured quite right yet, but send me a PM and I’ll add you the team &amp; we can start discussion in the appropriate places. 
You need to change your credentials anyway when someone who got access to them leaves your company. It does not matter if those credentials are plaintext in an .env file or encrypted somewhere else.
Not in my implementation it doesn't. It comes before NaN and after NaN.
Admittedly not the toughest Docker topic, but if you're new to Docker it shows you how easy it can be to get started with SQLite.
HOLY FLUSTCLUCK! Everyone "knows" Moodle but I've never "seen" it. Took a brief look. wow. I guess you've to admire those who can work and know their way around this codebase. The number of `composer.json` dependencies is ... interesting.WOW the namespace naming choices... `core_competency` ... Now to the action: * "Hey, got an idea. First, we need to make a dedicated folder for the public files!" * "And, of course, all those 'components' have to live in their own repository and need to be made into compoer dependencies". * "Hold my beer…"
Do you mean "Laravel 5 Snippets"? Do you like it?
When you `yield` in a function the return type must not be present or if it is present it must be one of these: - `Traversable` - `Iterator` - `Generator` In other words, when `yield` is present the return type is a generator.
&gt; then thanks for Kohana *tips fedora*