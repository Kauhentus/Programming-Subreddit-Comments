You are going to need to provide a lot more information. Is he using a content management system? Framework? Have you tried editing index.php? Are you making sure you're even in the right directory?
That doesn't at all answer OPs question. 
I personally prefer jQuery: http://api.jquery.com/category/ajax/
If using index.html, would bet money that you're not dealing with PHP. If it is really index.html as the correct page to modify, then check for some sort of caching mechanism.
Get off my lawn.
I thought this was the OP's question: &gt;I want to know if there is a way to put these functions in one file and be able to call the functions from that file, kinda like javascript or c#/vb codebehinds.
Ask your teacher. Isn't that what school is for?
It's not. Have a look at ASP.NET Web Forms, if you want to find out what he meant. 
 $protocol = strtolower(substr($_SERVER["SERVER_PROTOCOL"], 0, 5)) == 'https://' ? 'https://' : 'http://'; This doesn't work. $protocol always will be "http://" because the substr($anything, 0, 5) can NEVER be 8 characters.
I don't think the original author did. I can't find out, because I promptly deleted the plugin as I found it hokey.
Hmm i see your point. Admittedly I wrote this for my web programming fundamentals class, and I guess it should also be re-titled "counter" not "protection." 
How is it going to break while you're asleep? You shouldn't be deploying untested code ever, especially not while you're asleep. 
I'm saying Laravel 4 is ready for use, not production, not if you plan on keeping up to date.
lol he laughed, any other questions?
That's the whole point of this thread, if it's production ready or not. &gt; You shouldn't be deploying untested code ever, especially not while you're asleep. You literally just said that you do this: &gt; git pull git://github.com/laravel/laravel.git develop
You are confusing untested code and beta code. This beta code is INCREDIBLY well tested by Taylor's unit tests, even though it's beta. I then unit test my code, and have a few integration tests too of course. If it all works who cares if the branch is called BETA, RC1, RC235 or Stable? Test your code, then you wont be worried about using it. If you're waiting for somebody you dont know to tell you all software is perfectly safe then you're doing it wrong. Besides, stable frameworks have bugs too. I've fixed CodeIgniter bugs that have been around for at least a year without being reported. Some of them were pretty nuts.
Why would I be using to write code that is not going into production? Keeping it up to date has not been an issue. Every now and then I spend 30 seconds on the pull, and another minute resolving a few conflicts. then I run my tests, deploy the code to production and all is well with the world. As I said elsewhere, test your code.
1. Yes you can. 2. What are you on about? $ composer update $ git pull laravel develop Its up to date.. When it launches final: $ git pull laravel master It's using stable. Don't run around spreading vicious rumors because you don't understand version control.
You can run tests after you pull code and before you deploy...
You guys are awesome. I'm going to read through all of these tonight!
http://www.happyaccidents.me/blog/benchmarking-dependency-injection-containers#.UTfT2ny93dI
You can reset the counter to 20 but I'm pretty sure it's not possible to then skip a record, is it MySQL? You could manually set the records at 40 back to 20 then reset the counter to 1 more? 
I get what you are saying, but I am very hesitant to have a production deployment with "beta, but well tested." Beta is not a release, and is incredibly risky because you don't want to be "the one" discovering that bug after it is live with a beta branch. Edit to add: Also, just because it passes *your* tests doesn't mean your users (or malicious users) won't find bugs that you won't be able I fix. Yes, I realize, a competent php developer should be able to debug and patch, but more often than not, that php Dev isn't the responsible one. 
&gt; Not if you do it the way I demonstrated just two posts up. You are correct.
Yeaj I do ut a;; the time.
Then don't use it...
To start the auto increment at 20 again, I believe the SQL is: ALTER TABLE your_table_name AUTO_INCREMENT=20; It's been a while, so I may be wrong about that. Read the manual to confirm :) As far as skipping to the next number available, that's not possible, as far as I know. Once it hits 40, you might have to set the auto increment to the next value yourself, or give an INSERT such as: INSERT INTO TABLE (auto_inc_field, field1, field2) VALUES (48, 'blah', 'blah'); I believe that should set it, but that's the same as setting the auto increment value manually. From a practical point of view, there's no point in filling those records. So you have a gap in your table. It's not going to kill your application... or is it?
I don't. And I recommend others don't. It's irresponsible unless you are truly a competent developer, and the developers I know wouldn't risk it "just because it passed my test." When the own developer isn't labeling it as "ready for release."
I can on a mac keyboard but if I change to a PC layout I fall to pieces and end up 1 finger typing
Yeah, I'd hate to have tests for everything. That'd *suck*.
I've just checked and you are indeed correct! As I said, it's been a while (I haven't had to adjust an auto increment value in at least a decade), so thanks for the correction and explanation :)
:)
Don't worry about it, really
*picks up lawn chair* I apologize *leaves*
There's a dichotomy in this thread. 1) The developer that uploads whatever changes to the shared FTP site whenever. 2) The developer that does releases to QA every 2 weeks, which then go to the Test/review site for client approval, and then some wizard under a mountain pushes a button and distributes the app and new content to a half dozen app servers and pushes content across the CDN. I don't think many 2's are using Laravel, but I could be mistaken.
This is not an ok way to handle a single connection. You're going to end up with a disgusting code-base following this path. My best advice is to spend some time with a decent framework and an ORM, and implement something similar to what many people have already decided is a good way to model the database. If you're just starting to model the database, why not install Doctrine or Propel and be done with it?
You can safely ignore it unless it really bothers you. If it does really bother you, typically you'd either create another ID field along side it, and set that as your new PK. (create it, let it auto-populate, then make it PK, delete the old one, rename the new column to the old name) You can also remove PK from the field, turn off auto increment, and wipe the values and then turn auto increment back on and it will re-number them all. Again tho, it really doesn't matter. They're just there to be unique identifiers. 
The incremental number when used as an index, is there to ensure that there are no two rows with the same index. In other words it makes each row unique The database loves that since it allows it to operate on the database really fast. When rows are deleted, the uniqueness of the rows still persists, the DB does not care about the gaps, in particular because it almost never scans all of the rows to do any particular task. So, leave them as it is.
&gt; You can use it in production, sure. [...] But keep in mind it's not *stable*. Are you honestly not seeing a problem there?
There's nothing to work with. If you've edited the correct file, then something is cached somewhere, be it server-side caching, or something client-side.
okay well, thanks anyways, i'll keep learning and come back when i can at least ask the right questions. 
Definitely not as elegant. Very close. Python has lot more baked in reflection/introspection and meta programming (metaclasses) that allows you to do some super cool and extremely intuitive stuff. Contrast Django's ORM or form functionality** with how Symfony does it. Django admin for free is also really hard to beat. Admittedly it's just an "app", so there is likely something like that for Symfony2. ** Symfony does a much better job of more loosely coupling form generation (html) and validation, IMO. Django it's kind of all mucked together into different field types -- I suppose that's more Pythonic.
As Jesse said, learn something like Doctrine, the setup time is a con but the time you save developing compared to manually writing every query and manually handling your models will benefit. Also, try to sway from using 'die', instead throw exceptions, and don't hide errors with the @ symbol, again, handle the error properly.
Nice first impression. Saved and I'll take a look at it. Love the documentation I'm seeing so far.... You can access by Book, API, Glossary, Reference... Just skimming their docs, I really like their use of entities, but from what I can see they treat data integrity as kind of an afterthought - and the developer has to write their own join's and the like. Not the end of the world, but lots of potential for badness here like with RoR. Anyway, I am going to check it out more in depth later. It looks really cool (and a little C# like). Thanks for showing this! My current project is too far along right now (And I'm absolutely falling in love with Django and Python) but I will do a test project with Symphony2 when I get some time.
After reading the Symphony2 docs for about 10 minutes I have to agree with you. Django ORM is so awesome. The only two features I am seriously missing are composite PK's and non-integer PK support. They don't have native UUID types, but it's so easy to add it in! Every time I do something new in Django I like it more. I also agree with you on Django forms.... a little too much is in the code and not enough in the template. I'm comparing to MVC4, which if it played nice with Mono and Postgres would be The One Framework to Rule Them All.
No joins. Just [map relations in Doctrine 2](http://docs.doctrine-project.org/en/latest/reference/association-mapping.html), it's all done in annotations these days but can also be done in yaml and xml (my project uses all three).
&gt; Doctrine 2 ORM, while albeit a bit esoteric at first for the unseasoned developer, is extremely powerful and well built to design enterprise level solutions. Having built more enterprise software than not, and more in enterprise platforms than PHP (java, C#) I kind of agree but not all the way. The Entity-Relationship model they use is indeed pretty familiar for those of us in the industry and is a very nice start. What seems like is missing is referential data integrity enforcement. It's up to the developer to code it manually with SQL statements, which almost defeats the purpose of Code-First methodology. Django's ORM is pretty much perfect and is only missing (as far as I can tell) two features that are badly needed: composite PK's and non-integer PK's. (Actually, that could probably be stated better - it only has one flaw: Requires a single integer to be a PK.) When you may have 20+ developers working different parts of a project, and an iron-fisted DBA, and a data warehouse you will never get access to, reading their ORM tutorial scared me a little bit. I'm sad to say that Microsoft has the best game in ORM town right now. To be fair I haven't poked around in Websphere or any other Java frameworks lately, but god help me if I ever have to go down that road again... Edit: Last time I used an Active Record pattern was in RoR and about 3 years ago. I have to agree with you: It's (was) a complete joke. EditEdit: Symphony2 looks like it also supports Propel, which looks more powerful than Doctrine right out of the box. EditEditEdit: pope55 gave me some awesome links below - looks like Doctrine does have decent support for integrity. Cool.
Yeah, I should never have put that @ in there. Thank you.
I'll check into those. Thank you.
Ok it sounds like you have built more enterprise software than myself and it sounds like you have worked with more ORM's and frameworks in multiple languages *but* you don't have to write SQL in Doctrine, you can and I suppose sometimes you must but you can write [DQL](http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html)(and the ability to do so is not a detractor but adds to the ORM's completeness) and everything you are talking about regarding referential integrity is absolutely handled by doctrine. I really recommend you go through the doctrine [docs](http://docs.doctrine-project.org/en/latest/index.html), I don't think you are giving it a fair shake or acknowledging its power or robustness. (Yes the doctrine docs will take just as long as the Symfony2 docs fair warning). Also your pk gripes are *absolutely* covered in doctrine [composite primary keys](http://docs.doctrine-project.org/en/latest/tutorials/composite-primary-keys.html).
Hey - got your other reply and yes that is exactly what I was looking for. Thanks for the info!
no Propel is activerecord, Doctrine is object relational mapper, Doctrine is definitely more powerful and a better enterprise solution, a better any solution IMO. Perhaps you must try it to see, you should go for it!
Remember, composer is PHP *catching up* to Ruby's bundler and Python's pip, not stepping ahead of the game.
When you have to switch to the development version to fix stuff, yeah that's pretty much my definition of not being production ready. Try having bugfixes going out to master instead.
yes I have not had much problem with it. Sometimes I'm off by one key, or I just can't hit the right key and I just mash in its general vicinity until the right one types out, then I carefully backspace around it.
Do you recomend any login/auth library for CI? Thats the reason im checking bonfire
Agreed. The number says nothing visually. Users don't know there's a gap. Nor do you really. It's an identifier, nothing more. Unless you have OCD; But the only option to clear the gap is by truncating the whole table.
All I'm saying is stable or not you're going to need tests.
Just because it's not a *stable* release doesn't mean you can't develop software with it. Not being stable doesn't necessarily mean that it's inherently broken or untested, it just means the API isn't set in stone yet.
Cool, well hopefully OP has the time to wait for Laravel to write them.
We're talking about production, not development.
The general guideline with exceptions is that you have lots of throws but very very few catch's. If you pair every throw with a catch then you might as well be using error codes. But, as others have pointed out, it really depends on the circumstances. 
If you're a regular contributor to an Open Source project, you can apply for an Open Source license. I got one, that way. http://www.jetbrains.com/phpstorm/buy/buy.jsp#openSource
The docs for Laravel 4: http://four.laravel.com/ The docs for Laravel 3: http://laravel.com/docs
Note this doesn't apply if you actually normalize your tables, however normalized tables and the web don't work so well so it's all good.
You know you can view all the wordpress source right? You can also try making a very simple wordpress plugin. I learned a ton about the basic concepts that way.
&gt;For example, I have a static view file. I would now like the plugin to be able to write to the DOM of that file or append content to different tags ... like what? A view helper? [They already exist in CI](http://ellislab.com/codeigniter/user-guide/general/helpers.html).
It's a good way to waste time when you need to re-code everything after a major change. 
&gt;and don't hide errors with the @ symbol Just to be pedantic, there is a use case for this, but only when you are also handling the error properly. It just saves some bs logging with some of php's built in methods.
I just bought a license for 50, 6.0 just came out few bugs. Hope they fix them.
An object per table is the Active Record pattern. Each object models a row in a table and provides some CRUD. It's one way to do it, but I would also recommend a look at Doctrine (which incidentally used AR for version 1). As far as multiple connections go you should google the Singleton pattern. Again, it's not really recommended these days, but it's a better option than what you have there.
So is writing code on version 3 when it's no longer being developed.
My intent with this question was in fact to drive an open-source project that would allow the developer to write more (humanized) readable regular expressions, with a fluent object oriented API in PHP.
Yes I know I can comment them, and I agree the developer gets more comfortable reading them as the time comes. But the truth is, I really think it is not humanized as it should be. That's why I'm asking people and trying to come up with a project to solve that readability problem.
I liked coda for front end stuff, but to be honest after switching to phpstorm (or even webstorm) the auto complete for classes, css etc across the whole project turned me, not to mention the auto complete for previously used color codes.
It's one thing to talk about it, and quite another to do it. Without a specification over how it would work, or at least a vision of it, it's just talk.
Ya I think I'm just going to try it and watch the change log on Github. I'm super pumped for the final release. 
Frankly, I find that less readable than regular RegEx.
This has absolutely nothing to do with PHP...
We are still in the brainstorm phase :)
It's tagged as [Beta 3](https://github.com/laravel/laravel/tree/v4.0.0-BETA3).
Actually, being Beta 3, the API is set in stone by now.
I've used ion_auth in the past. It's good, and has good docs. Try it out. 
I did a quick look at it, check out: http://demo.lol-php.com/index/controller/foo-bar/bar-foo///ff%5C/e I don't think using eval() would be a good idea, line 179. ~lol
That's not how git-flow works. * master = latest stable version (3.1.something) * develop = next version
No thats completely ridiculous. What _massive_ unsurmountable changes do you expect to happen between betas in feature freeze and the stable release? And if they happen, they'll be documented in the change log and updatable with the simple pull I showed you.
I upgraded from beta3 to beta4 in about 5 minutes...
People asked if it was ready, and for me it certainly is. I test my code, Taylor tests his code, and thats all we can expect. People were using CodeIgniter for years without a single test and that was a buggy framework labeled as stable. You have to exercise your own discretion, especially if you are not a competent developer. Do as you will.
Frameworks should be entirely agnostic of any sort of ORM and allow all of them to integrate perfectly. Doctrine is not the only option, and you seem to love it way too hard.
The 90s called they want their framework back.
If Django's orm is "pretty much perfect", why does just about everyone say that its not even close to sqlalchemy, which is considered the gold standard?
Well, good luck with that.
brilliant!
Sadly, our old friends are being deprecated in PHP 5.5. Time to learn PDO :(
&gt; $input = Input::all(); &gt; if (Input::has('name')) { .. } really? Only an ignoramus would use this framework. Great abuse of static classes too.
|Well, what I found was that there was a big difference between the docs and what I got Just wondering what were some of the big differences you found?
If i understand correctly, you should be able to create a folder called plugins and have your plugin writers extend your current classes to allow access to data models.
In Laravel 4, [Input](https://github.com/laravel/framework/blob/master/src/Illuminate/Support/Facades/Input.php) is a facade for [Http\Request](https://github.com/laravel/framework/blob/master/src/Illuminate/Http/Request.php), based on the Symfony HttpFoundation. It's pure sugar. In Laravel 3, things were pretty different and yes, the majority of functionality was actually static.
You give me a lot of credit! I was one of 4 developers on FuelPHP, and I mainly contributed Oil, which is clearly become the inspiration for Artisan which improves on it drastically. How that is relevant to my comments about "frameworks should be agnostic to the data layer" I don't know, but if you feel every framework ever should be restricted to only one ORM EVER then we're really not going to see eye to eye at any point. Doctrine works in Laravel, they even use the doctrine-common package because L4 is all about using composer to stand on the shoulders of giants as you say. This is why I got off the Fuel team, to avoid reinventing any wheels. Think a little harder about the bigger picture of the PHP community instead of just trying to troll me.
Yeah, how dare anybody try anything new! I mean really, we already had PEAR why do we need Composer? Wait, we already had the ability to use PHP's baked in functionality to connect to a database, doesn't that mean ORM is redundant? ALL HAIL RAW SQL QUERIES!
Thanks.
`$_POST` is not a session variable. `$_SESSION` is.
`$_POST['username']` is set whether or not they fill in a value, if the element is on the form. It'll be initialised to the empty string. If it's blank, `strlen($_POST['username']) == 0` and probably `is_null($_POST['username'])` [Aside, PHP library fails again - note the `_` in one and not the other] Don't try and unset a superglobal. It should work, but it's bad practice in my view. The superglobals should tell you what the user actually sent in the first place. Assign them to regular variables and then change and test against the regular variable. If you're trying to make it so the user can refresh the page, use the POST/REDIRECT/GET pattern.
You should be able to use empty() on the variable to check it :) if(empty($_POST['username'])){ }
empty() should do it instead of == "" - Right?
Pretty pointless because there's already a superglobal with both $_GET and $_POST vars: $_REQUEST (it has cookie as well). http://php.net/manual/en/reserved.variables.request.php
Well, Wordpress handles it by using its 'loops' or 'events' or whatever they call them. There's a global class or something which events are registered at. Say, 'print_header'. Code can then register a callback to be called when that event is fired. That callback can print output. They'll also have another event, say 'filter_header' which is called after the entire header is generated, and is passed the header, giving it a final chance to make modifications before actually outputting it. You can take a look at [some of the WordPress documentation](http://codex.wordpress.org/The_Loop) for a better idea. WordPress isn't necessarily a paragon of design decisions, though. So take that as you will.
&gt; First of all, it's neither a session nor a constant. It's the data posted from a form. I just realized that. I don't what happened right there.
I know. Sorry, brain fart.
Ah. Thanks.
What you really want is: if ( strlen( $_POST['username'] ) ) { echo "Yay, you entered your username!" ; } else { echo "Nope, you didn't enter your username, bummer!" ; }
We have empty() for that.
Wuh! :)
it doesn't. what he said doesn't make sense.
Thank you, I the mistake and didn't realize they've a repo for that. I immediately found the following candidates: [Filtering of the package list](https://github.com/composer/packagist/issues/297) [Related packages](https://github.com/composer/packagist/issues/297)
Actually, you can already search by tags: https://packagist.org/search/?tags=persistence
Not programatically, but by logic: Because of the next validation (not that is stated in OPs question, but it can be deduced) that will surely come: if (empty($_POST['password']) || count($db_check_user)==0) echo 'error, wrong password'; So you are right, it can not be deduced if you are only checking for empty string; i was just assuming the upcoming code. 
You mean [like this](https://packagist.org/search/?tags=javascript) ? [brown tags are clickable](http://prntscr.com/ve3w6)
Cool. It looked like lots of additions, but a couple of changes - like "escape sequence" changes (not sure what the context is). Anyway, I interpret beta to mean "Feature-complete, but there are a few bugs left we know we're fixing, and a few more that we probably don't know about." Laravel's beta is "It's just not done yet, we have a lot more work to do. Here is our WIP." That's why my reaction was wtf. I was just shocked. If you're on a project with 10+ developers and have various 3rd party dependencies and requirements, I can't even tell you how much of a nightmare that is. You'd basically have to fork the project from whenever you start to use it and pull mainline updates manually, then spend lots of time regression testing every release cycle. My overall impression has been (after one full day of use and reading lots of the great responses here) - maybe great for tiny projects, or people coming from a RoR type world, but so much of it just screams "WTF?" to my brain I got a bad first impression. So, not saying I think it's terrible, (I really don't have any experience with it other than a day of monkeying) but the claims it and the actions of the lead developer (and attitude of the community) seem to be "I think this is awesome/right because I don't know any better." Would love to give it another shot with all the great info I've gotten in this thread in a few months after my current project.
Coming on three weeks later, sorry I don't quite remember. But as I was setting up my initial test project/models there were some things I was trying to do that weren't working so I went to the google. Results sent me to the forums, which pretty much went right to what I like to refer to as "lame OSS project hell" - where the rules are made up and the docs don't matter. Sorry it's after the fact and I didn't write any posts about it asking for help... but I felt at the time like if I had to ask for help, and in the community that I saw (official forums) I was better off moving on to the next one on my list (Django) and every step of the way on that journey has been "Wow"ed me. (First time Python developer as well.)
Wow. I guess I'll be voted for the troll of the day for my question. But I really did not get them. I browsed a bit around, but simply didn't realize that this was the tag categorization. I didn't miss this on npm. Maybe because there, they say it's a keyword and the links look like any other links. Thank you!
That's not what Troll means.
Well in that case I see no problem.
Can't develop/can't use in production. Same point applies that non-stable doesn't mean broken.
Already done: https://github.com/laravel/framework/tree/master/tests And I was talking about testing your own product, not about testing your vendors.
Ok just wondering, we don't use laravel, which is why I asked.
There are a lot of Laravel zealots around who will scream YAAAY in your face for no apparent reason other than they just f**king love the framework, but may not be doing much with it. And yes, clearly Rails is more stable (although not without bugs recently. heh). I'm coming at this from the perspective of somebody who has been building with Laravel 4 since a VERY early start. I had the first application running L4 even before the dev team, because I had Taylor on Skype and he was using me as a guinea pig. Really, it was a rough ride at the start but very worth it. Again, im saying since November it's just been a non-issue for upgrades. The docs are now up and it's not changing madly. It's barely even changed notably. Every different project has a different meaning for BETA, some mean "This shit is crazy, who knows what is going on" and some people use it as "seriously guys, give this a try and let us know if you spot any bugs". It's meant to be a call for action for people to find and report bugs to get it to stable quicker, and if everyone runs around screaming "BETA IS BAD BETA IS BAD ITS GOING TO BREAK MY CODE WHILE IM ASLEEP" (that was an actual comment on this page) then this stuff is never going to get stable. Beta 1 is always likely to be rough, but to be fair it's on Beta 4 now. Don't use it if the thought of finding the occasional bug scares you silly, but as somebody who has been using this for months I have had 100% uptime on all my L4-based production code.
Did you reply to the right person Digitalis? :)
&gt; I'm very leery of global variables. Not leery enough to avoid using them… in a constructor, no less! You **monster**. More grumpycatting: * Name your variables properly. What's `$d`? You're a cruel and unusual person. * There's no difference in complexity or learning curve between mysqli and PDO. One of them talks to one database, the other to many, and that's about all. You'd be better off learning PDO once instead of learning mysqli now and having to learn something else for Oracle later. * Make the database connection outside of your object, then pass it in when you make the object (pass `$connection`, set `$this-&gt;connection = $connection;` instead of `$d`, `$u`, etc). Now you know what dependency injection is! Not even joking. If you don't want to clutter your global variable-space with your database connection object, put it in a container. [Pimple](http://pimple.sensiolabs.org/) is one small script, and acts like an array, so you already know how to use it. Bonus: you can use it to create your table objects and pass the database connection to them. Double timesaver. * Right now if you unset one of your table objects, the database connection will be closed and your other table objects will fail. Oops. 
&gt; Same point applies that non-stable doesn't mean broken. "Broken" has nothing to do with the discussion. I haven't used that word once, and you're almost wilfully ignoring the point I'm actually making. The problem is stability. &gt; You can use it in production, sure. [...] But keep in mind it's not *stable*. This is the oxymoron I quoted, and we've since been discussing. Sane people don't use unstable software in production deployments.
I think the core of our conversation is that I don't understand what you mean by stable.
Hating on dreamweaver?! USE VIM LIKE A REAL MAN!! 
&gt; There are a lot of Laravel zealots around who will scream YAAAY in your face for no apparent reason other than they just f**king love the framework, but may not be doing much with it. People do this when they don't know anything else (see: RoR zealots, Fanboys of any type) or just have a very narrow landscape view. &gt; Every different project has a different meaning for BETA, some mean "This shit is crazy, who knows what is going on" and some people use it as "seriously guys, give this a try and let us know if you spot any bugs". This is interesting... I agree that beta should normally be a CTA. But some projects do this badly. For example Gmail was "beta" for *five years* after public release. That's just stupid. Plenty of open source projects perpetually use "Beta" forever and are always at version 0.9.39827492874923 or something. It's a lame excuse. I know the reasoning is "don't blame us if it eats your dog," but it's still just a lame excuse. Anyway, some people do misuse the term Beta, and a lot of people misuse a lot of things, and everyone is free to develop their own software development lifecycle or modify one if they see fit. But... Beta is pretty universally "feature complete, now we are fixing bugs. If any features didn't make it into this version, they'll be out in the next release." Anything else is either: * I'm too afraid to call this a "release" because I'm afraid people will make fun of me. * I want more attention. * I didn't do a proper job designing my software up-front, so I'm going to throw some stuff at the wall, see what sticks, and basically design by trial-and-error. &gt; "BETA IS BAD BETA IS BAD ITS GOING TO BREAK MY CODE WHILE IM ASLEEP" This is people that either don't know what they're talking about or have experience with *very* badly managed projects. It's tough to be in a situation where new users are encouraged to use the new version because the old one will soon be yesterday's news... but the new version has bugs that new users may get frustrated with encountering. Python and Linux are two examples of projects that handled this well. The previous incompatible versions were either somewhat forward-compatible (python) or backported features and fixes for long enough (years and years) that nobody got left out in the cold. Obviously a small project like this doesn't have those kind of resources... but my general idea here is that a *plan* for all these things would have made things much more clear. Again, Django handled this masterfully. From 1.4 to 1.5 (released last week) their docs were very clear about where new people should start, and what to expect. 1.6 has been in development for a while already, 1.7 is probably already underway even though 1.6 is a year off, all these versions have features that have already been discussed in detail in the mailing list, and if a user needs to know what to upgrade from one version to another, it's in the release notes *before* that version is even released (while it's in beta.) Obviously that's 100% ideal, but I just want to contrast it to a forum post where "Is version 4 production ready?" and people having wildly different and strongly opinionated (and frequently uneducated) answers. The project developers either don't have a plan, or don't know how to communicate it, so it's the complete opposite. I read a few forum posts expressing this frustration on the official site. Just offering some constructive feedback on the way a old grizzled industry dude sees it. Thanks again for all the education.
&gt; in a constructor, no less! It's cool. It's cool. I took it out. :-) &gt; Make the database connection outside of your object, Thank you, that's the route I'm going with.
http://www.phptherightway.com/
Just to point out that traits are 5.4 only. Also, only my opinion but im not sure that you need the combination of a trait and an interface, been wrestling with that point recently myself and I've settled on using one or the other as in most cases they're achieving the same goal. Nice overall though
For what it's worth, this "wave animation" is exactly the same as the JPEG zigzag encoding. If you can find an efficient piece of code which generates the JPEG zigzag indexes (on an 8x8 array), that can be generalized.
I disagree - arguing is better!
http://www.youtube.com/watch?v=kQFKtI6gn9Y :)
I like to remember the frustration I felt when I was first learning testing. All the examples I would come across would make me ask, "Why do I need to test? This is stupid.". I am trying to avoid that. Everyone does eCommerce, everyone can see why it may not be a good idea to ping Authorize.net's servers a hundred times when you run tests, and why its results are out of your control. I still have a lot of work left in this series, but I am hopeful that by the end of it I can bring someone up from complete newbie to being able to look at any piece of code and immediately knowing how to test it as is, or refactor it to be able to test it.
What is the framework you are using now?
I am now fully gung-ho about Silex.
By direct injection, do you mean dependency injection? It probably wouldn't matter in Wordpress because every fucking thing is a global.
Thank you for this. We were considering Laravel 4 for our next version of our project, but were put off by the Facades part of it. We will definitely make use of Eloquent though.
Probably not :/
JetBrains ended your marriage. Time to sue!! /s
I have to apologize for my earlier posts, late night I tend to speak without thinking and can come of as more of a dick than I actually am. I'm very hesitant to use most frameworks that aren't thoroughly tested based on past experiences in a team environment - I wasn't as knowledgeable in Java at the time, and they decided to pick up [DWR](http://directwebremoting.org/dwr/index.html) - when I started finding bugs, they turned to me to "work around" the limitations of what was a problem in the Java code, with a Java developer that had no desire to do bug fixes. (Someone else made the tech decisions and we all were forced to deal with it). That's left a bad taste in my mouth in regards to "taking someone's word" for the viability of production ready code - but then I have moved in to an environment running node and have more than project that used PHP frameworks/CMS systems that I had to patch (and worse, in some cases, I had to do bandaid solutions to other developers attempts at bug fixes, thanks Expression Engine!) I digress, but based on our conversation, I would take you at your word to not strike it down with a fierce vengeance (and a few former coworkers swear by Laravel - I haven't had a chance to really check it out–yet). Thanks for dealing with my lack of manners :)
Yeah but empty(' ') evaluates to false. So to be actually useful, one may have to suck up and squander that extra .01ms by using strlen(trim($_POST['username'])).
Yeah, so maybe the choice is not using Laravel until it's out of beta. But at least with version 3 it's stable, even if it's not getting updated anymore. I don't know why it's apparently difficult to understand peoples apprehension to using L4 in beta. It's a beta, it's not finished. If it was ready, it would be released. 
I duck for the downvotes, but: I find monkey patching for testing cleaner than DI. Why? DI requires you to modify the production code and extend it with a feature it does not require. If you create the instance yourself, you're 100% sure it contains no unwanted data, is not derived and is not anyhow modified in a way you don't want. The biggest antipattern of most unit-tests advocates is, that they modify the buisness code in order to write unit tests. But the buisness code has nothing to do with the unit tests, the test should ony _use_ the code, not require modifications to it. And i'm totally aware that it's not always possible to test certain code. I once saw someone who derived all objects from a single SuperObject which contained methods like "getUser" which were solely for injection mock users in unit tests. What was making it worse was, that this "getUser" method returned always the currently logged in user, which caused problems in classes who could belong to a different user than the one who was logged in. It was a huge pitfall and caused big trouble. Ask yourself: Has the dependency to be injected? Do you actually WANT to couple component A to component B? (in a lot of cases, you really do) Bottom Line: Simple DI (please don't use reflection containers in production code...) is totally okay, but please don't hack your architecture in order to be able to test some code. Switch to simpler testing like Integration tests in order to cover those weak points. And actually try never to write unit tests for your own software. Someone else should do it, because the person who makes errors in the buisness code, will make the same errors in the test code as well.
Cheers, that's what I was thinking as they'll all be maintained separately 
&gt; DI requires you to modify the production code and extend it with a feature it does not require. No, it doesn't. See the Open/Closed Principle and the Liskov Substitution Principle. &gt;The biggest antipattern of most unit-tests advocates is, that they modify the buisness code in order to write unit tests. I don't know who you've been listening to, or whose code you've been reading, but DI and unit testing has nothing to do with that. The problem here is that that person/those people aren't following SOLID. &gt;I once saw someone who derived all objects from a single SuperObject which contained methods like "getUser" which were solely for injection mock users in unit tests. Which would likely be a violation of the Single Responsibility Principle. &gt;Ask yourself: Has the dependency to be injected? Do you actually WANT to couple component A to component B? By the sounds of things, DI does the exact opposite of what you think it's doing. Please refer to the Dependency Inversion Principle. 
If you're trimming the input, then your argument is moot... The only difference is that you'd have to store the value in a variable, since empty( trim( $var ) ) isn't allowed, but presumably you would have stored it in a var already...
Check [SemVer](http://semver.org) out for a very good versioning scheme!
I agree with you that the stuff i described violated the single responsibility principle, amongst a lot of other things, i explained it to provide a bad example of people understanding the workflow wrong. I read a lot of code of people who claim to be proficient with unit testing, most people just aren't. Same with OOP, few people get completely and use even the basic things totally wrong. People tend to overengineer. One should always have KISS and YAGNI in mind, as well as SOLID. 
guess that's what separates a professional developer from a hobby dev. just listen to yourself, i only say "you can use it, just be aware that it is beta" and you are yelling out loud "DO IT, THERE IS NO RISK, USE BETA FOR PRODUCTION, DOOOOOO IT" (i think you are yelling because you are getting a bit too emotional on that topic)
I'm getting ready to release the next tutorial in the next couple of days. I'd have been finished by now but work exploded followed by a well-deserved week at home with the wife :)
So, your comment has nothing to do with DI or TDD, and everything to do with crappy developers writing bad code.
No worries. I was trying to make a simple point that nobody should be taking a single persons word for if something is ready for them to use or not (be it the project dev or some guy on reddit) and if you're testing your code properly you KNOW it's not going to randomly break based on its beta status. You can take my word on that xD
I'll be sitting down with a designer shortly to help put together wireframes for a slick new interface, then we're donating it to the team. I'll see if we can make tags a bit more obvious.
so awesome))
Thanks, semantic versioning is the route I'm taking anyway, just wanted to know whether to version the components or to version a stack of components
Looks just the thing for my new project, but then I spotted that they don't check that the class name exists in AdditionOperator.php. Amateurs...
In general, yes. I wanted to say that a lot of developers hear / read, but don't understand principles and implement them very wrong, while thinking their engineering is totally great. Especially the species of the "classic overengineer" is very common in the industry. I use DI myself a lot, but i try to keep everything plain and simple (KISS) and don't implement stuff i never need (YAGNI). 
Oh sure, everyone thinks this is funny. But what would you do when you need to change how addition *works*? Huh? In PHP, you're hosed. With SimplePHPEasyPlus, you could simply inject some new classes implementing your required behaviour change. 
&gt; pdo doesnt need escaping Oh boy, cannot be further from the truth... Parametrised prepared statements don't need escaping (and that regardless of the extension used), but queries do very much need escaping.
for loop? :)
It's sad that you can't look at one of your code files and it has over 2000 lines yet you still know where everything was.
Reminds me of when I mocked OOP design astronauts but with [random string generation](http://zaemis.blogspot.com/2009/10/pop-quiz.html).
Someone put my critique into code: http://www.reddit.com/r/PHP/comments/19wpn2/simplephpeasyplus_a_parody_of_php_oop/ ^^
Missed the "parody" part?
This is so funny because it's absolutely true. Everything single project on Github is like this, no matter how pointless of a script/application it is. I am also really disappointed that you forgot your travis.yml file. I mean how can i reliably do addition if you don't even run tests mate!
Hey, We just modified the entire site to be responsive and mobile-friendly :D
&gt;$firstParsedNumber = $numberParser-&gt;parse('1'); Needs a try/catch block.
No. Like i said: It visualizes my critique, as a parody.
well, that's [settled](http://news.php.net/php.internals/66531) then...
That's in the available Beta now, but it brakes the addition functionality. I'd do some unit testing before putting it in production.
Brilliant.
you need to check the return code on mysql_query, and if its failing then output mysql_error() 
"Community" All the darma on php-internals takes me back... to high school.
Unit-testing is bad now? The point of this I believe is to make a joke out of people who go waywayway over the top with OOP. Some projects rely on a lot of dependency injection to allow absolute flexibility for the implementers and some components are VERY tightly coupled static bits of junk that do one thing well but wont budge from their original goals. There is a line down the middle that you have to try and hit. Or your code looks like this.
I'm so, so glad to see that I'm not the only one who feels this way about the absurd level of over-abstraction of every piece of PHP code I see these days! Code that should be a 20-line simple function is almost always divided up into 7 PHP scripts divided across 3 folders, with 4 classes totally 18 methods, and 100+ lines of code. A simple function is often faster, more efficient, and most importantly... easier to understand and maintain! I've seen unnecessary PHP "password libraries" that can be replaced with 5 lines of PHP using the built-in crypt() function, the absurdly massive Amazon AWS SDK which can be replaced with a single 20 line function for most common purposes... and really pretty much every PHP project on Github. I come from an object-oriented programming background, and OOP is a powerful too that can simplify complex architectures. *But too often it's used to add complexity to a simple problem!* Over the years I've learned to know when to avoid adding unnecessary levels of abstraction, and just write simple, straight code that simply performs the required task.
No, man, direct injection. I'm sick of messing with the carburetor, especially on cold days. I just want to go to work, not spray start fluid in there man it's -10 out! 
/r/LISP is leaking.
Don't forget the mandatory composer.json for one class and of course a Travis-CI build file. Contunious integration is a very important topic for a single class. edit: Reminds me of people who normalize every database to the max and wonder why it's so slow.
But won't negative numbers cause overflow!?!??!
This has absolutely nothing to do with PHP at all so I'm not sure why it's labeled as a parody of PHP OOP. If you really want to see bizarre design pattern zealotry, I invite you to come into the Java world.
PHP is too loosely typed to multiply. You should be calling out to a script written in Python or C.
They used to say radical to the max in the 80s. Now they are saying normal to the max. Times have changed.
What an amazing way of explaining complex concepts you have. Thank you and please keep going.
good use of time.
Your Weather class is doing too much - it can't decide if it's a template engine, a file handler or something to just grab the weather from a source.
its just a way to display weather data based off a zip code. you set up your template and from there it goes reads the xml source then finds and replaces the values. There is a lot of data that is available... what should I do differently?
What he means (sorry to presume) is that you have a single class doing everything, with OOP you really should split separate functionality then wire the objects together
Almost none of those things. It's a weather class. It should only grab weather data from a source.
Any set of functionality that doesn't relate to something else should be its own object (class) so rendering templates in one, dealing with the data in another, think of it as UNIX philosophy, let your objects do 1 thing but do it well
Side effect/operator precedence programming. Yeah, no thanks. If I saw anyone using this, I'd definitely begin to question their abilities to write understandable code.
or just run it through mysql shell or phpmyadmin and see what's happening.
I wasn't talking about slow logs, i was talking about the general query log
I don't agree with writing code like this either, but that isn't a side effect. It's working the way it should.
Doctrine 2 is very, very similar to Java Hibernate and .Net nHibernate. If you ever worked with these two, Doctrine 2 shouldn't be that hard to grasp.
Most tutorials for CodeIgniter - video or otherwise - are out of date. It's a disappointing fact. Luckily, the general practices advised in the tutorials are still fairly applicable to recent versions of CI. The Nettuts series, while there are a handful of syntactic differences (Controller is now CI_Controller, etc.), they are still a good resource for understanding and working with CI. Since you're already a developer, you should have no problem becoming re-acclimated with PHP. You'll pick up the syntax and patterns pretty quick. To learn CI itself, certainly check out some tutorials if you want. Read the user guide to learn how CI maps URLs to controllers, how the whole singleton pattern works, etc. Give the `/system/core/CodeIgniter.php` a read through when you're freshened up with PHP. It holds the real application logic behind a request, and will help you understand how things are being assigned, where certain things might fail (like a route, for example), show you where hooks are fired, in case they may be handy to you, etc. CI doesn't have a legitimate API documentation, and IDE auto-fills are sparse due to the singleton pattern. So going through the code is one of your best bets. And there really are very few files that process the logic before hitting your controllers/models/libraries, so it will not be difficult to follow. For IDEs, I use Sublime Text 2 now, and Coda before that. I'd recommend both, depending on your style. There are other good IDEs mentioned in this thread, but those are the ones I've personally used.
Who spilled Java in my PHP?
That made me physically ill just looking at it.
That's pretty neat. Now what should I use to replace APC's data cache? Is there a simple equivalent that doesn't require installing another server? Redis and memcached both seem over the top for simple cases like Doctrine's query cache or Symfony's APC class loader. 
What is up with those comments?
Yeah, what you described conceptually just now would be perfect. A nice, simple weather class that would go get the XML weather data given a zip code, and simply return an array of the data. But your class doesn't just return data; it returns HTML, with an image, inside a little templating magic. Let the user worry about putting the data in HTML, or in a template, or displaying any images, etc. All it needs to return is the raw data (such as in an array).
This is pretty much how working with Zend (1.x) feels, aside from no namespacing. :)
Ummm. I agree you need help. But I have no idea exactly what you need help with. Everything? What is the program and what are you trying to do? Do you have any experience with web servers, programming, any of this stuff? Assuming you don't, you're gonna need to figure out a lot of stuff. So the best way to do that is one step at a time, slowly. Be prepared for it to take a while and be a steep learning curve. First, you need to get the server going. Xampp is perfect for that, it should install apache and PHP for you. Then the next step of running the program will vary a lot on what the program is. Does it interface with a database? Use a bunch of plugins? Etc. So, one step at a time. Don't worry about anything else until you get xampp running, go to localhost/ and see It works! You'll know what I mean. And it will feel good. Then it is time to worry about the rest. Xampp is pretty simple to install and configure, assuming you don't need the mail server, ftp server etc. Which you don't. And when it comes to this stuff... Sometimes you just gotta read the readme and work through it. Good luck, let us know your questions as they become more specific and pointed because right now, no one can really help but say "well, follow the instructions." You gotta get started. Have fun!
Thanks a lot! I do have MAMP on my Mac and I just installed XAMPP on my Windows. I dont understand the next two things that he said on the list: How to run the script - You need to install a web server on the desired computer you are using, regardless of operating system you use. You then need to install php via system environments http://stackoverflow.com/questions/3550449/how-to-set-path-in-php
It's because people can't find anything useful or meaningful to post, so they do stuff like this. It bothers me that a large portion of the PHP community is either incapable of, or disinterested in doing anything useful.
Wait just a minute! I was able to use PHP to create a NoSQL database that includes encrypting/decrypting and very simple management of data for different situations to make database networking even easier, all using only two small files (one to do CRUD, one to do encryption).
Read up on ORMs - object-relational mappings. I am a recent graduate, and OOP didn't really "click" until I got to partake in the building of a custom ORM for a large website. The ability to generate a model representing tables in your databases, coupled with a DBAL (database abstraction layer), creates an extremely flexible and easy-to-use codebase. Without OOP, this just simply couldn't be done.
the ones in the HTML are whatever (just tongue and cheek) and the others in weather.php are just personal notes/bad habits with a little bit of left over? EDIT: I've also been watching BSG lately. 
I guess, it enables the programmer to THINK in terms of actions performed on objects as opposed to changes to variables and function calls....If your oop code does not enable you to think like that, then you are probably doing it wrong.
one very important reason is that there is no autoloading facility for functions! Python folks often use both objects and functions in the same codebase because python makes it feasible to do. That way you can use the appropriate style for the appropriate code. PHP makes it quite a bit more difficult. I really do wish php would offer autoloading for functions.. 
Just so you know, the "community" didn't decide shit in this. The decision to delay and ship with ZO+ was done by the release managers and them alone. The vote itself was just some formalism to make it seem like it went through the usual processes. (You can see that the vote had no decisive power in the fact that the release delays were already done *before* the vote even started.)
The plan is to remove the opcode cache parts of APC. Currently called APCU - https://github.com/krakjoe/apcu The other option is chdb, but I don't have any experience of using that.
My point just was that this was by no means a community decision ;) Whether it actually made sense to do the delay is a different question on which different opinions exist :)
Fair enough :) here's hoping there isn't a big delay and it get lots of people updating their stack from older versions as a bonus.
eh, In the past php has suffered from having everyone give their input. So I'm happy to see it's not as quite rigid these days. 
Down :( http://dl.dropbox.com/u/25676018/Screenshots/12d9.png
That's like asking "hey i want to build a skyscraper, i've never done this before, i heard you need a crane for that, how do i use that and what tools do i need". I'd suggest hooking your mobile thing into some existing CMS, or _really_ think hard about if you really want to code a CMS from scratch (without the frontend part).
Why not use an existing CMS with an (optional) RSS module or plugin or whatever and use for your mobile app? News is actually what RSS is designed for (or you can use Atom).
Hi, please try again! I guess AppFog had some downtime? Who knows.
While this is a pretty funny lampoon of some libraries it's important not to confuse over abstraction with a high but appropriate level abstraction. Some libraries might look like this (Doctrine springs to mind) but it needs to be that way because: 1. It facilitates testing. 2. It allows components to be shared across libraries (e.g. ORM and ODM). Personally I'd rather have slightly ugly testable code than extremely simple untestable code. Tests are just more valuable than aesthetics.
I'd suggest [SilverStripe](http://www.silverstripe.org/), given your level of skill.
That would be nice wouldn't it. I've had no problem loading files with functions in them ahead of time, but you have to know the relative physical location of it. If you use an opcode cache I think it should be minimal overhead to just load all function files without autoloading. You can kind of emulate function autoloading using exception handlers but it gets complicated fast and is probably a lot of overhead.
I think PHP's mix of OOP and imperative style is pretty nice. I can see the utility of writing OOP-exclusive code for enterprise level software, but for the majority of PHP "apps" etc, it allows for a good blend of styles. I've been iffy about encapsulating utility functions into classes, e.g. right now my array functions are all stuffed into a class called just the letter `a` so I can do `a::sortRecursive` or `a::map`, but sometimes I like it better to use them in imperative fashion with `array_` prefixed names. I dislike how verbose OOP makes PHP. Very long function names and deeply nested namespaces to access simple utilities. The only way around that is to have a bunch of `use` statements at the top of a file. If you look at ruby code, which is technically entirely OOP, it's much cleaner and more succinct than PHP. Having everything as an object helps, and ruby is a smart language, but for some people it's a toy language because of its flexibility. PHP is looking more and more like Java, where you spend 60 characters per line just naming methods and classes.
do not use mysql_query anymore. This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_query() PDO::query() http://php.net/manual/en/function.mysql-query.php
What if I told you phpstorm had static analysis built in
You're not really asking the right question, if that's accurately typed in. You generally don't apply a single pattern to web applications as a whole, but to the various bits and bobs that make up the application. They're probably looking for some pretty standard answers on how well you know patterns and how they apply to various MVC concepts. That being said, do you really want a job that you don't know how to do? You will not be loved of someone who hires you if you misrepresent yourself in the interview as having skills other than you do.
Most frameworks use MVC, or something similar.
Guilty as charged. A project, if released, will be packaged in packagist, will be fully unit tested, and will have build files for both phing and travis-ci. Even if it's a single class. Why? Because I don't have the opportunity to do any of these things in my day job. It's both a learning experience (for me) and a showcase for my colleagues, in my endless quest to convince them to write unit tests for our 16*10^6 loc application. A "see how easy it is?" kind of thing... Furthermore over-engineered &gt; spaghetti code. People starting with PHP today will scout github and bitbucket and find tons and tons of not-so-bad code to read, and chances are they'll pick up a few good practices. When they get to write production code, a senior developer will be there to help them optimize their code, blah blah blah. While I get and adhere to the "simple, straight code" argument, I'll always pick [over-engineered](https://github.com/yrizos/brainfart) over spaghetti. 
&gt; Singleton pattern (which I ll probably use for handling DB crud ops) Singleton database connections, being mainstream before mainstream was even invented :D Seriously, it's a good singleton usage (though shouldn't be totally singleton), but also the most obvious one.
Nice one, thanks!
Thanks for all the effort you've put in this reply!
What does this have to do with PHP? Other than "PHP" being in the title.
This is great news - to finally have a single official mainline opcode cache is a sane step forward considering the performance gains this can give production sites. **Edit:** Got a mention on H-Online today http://www.h-online.com/open/news/item/Zend-Optimizer-will-land-in-PHP-5-5-1820237.html
Just reiterating: If the form posts to your site, you're "collecting and/or transmitting" the information. If you handle the credit card information *at any point*, you need to be PCI compliant. If you collect the information and immediately just pass it to PayPal (through their API) without ever storing it, you need to be PCI compliant. (Just bringing it up since I've come across this misconception from people a few times.)
I already tried $xml_str = file_get_contents('xmlfile.xml'); $xml = new SimpleXMLElement($xml_str); What else can i try?
 &lt;?php $a = json_decode(json_encode((array) simplexml_load_string($s)),1); ?&gt; http://gaarf.info/2009/08/13/xml-string-to-php-array/ 
Sounds like the question is testing how you would design a domain model for bookings. Start out identify the common traits of each booking sub type and concentrate on building out each. Concrete Class Inheritence is a useful storage pattern (common table for base properties and 1 table for each subtype) and use and ORM like Propel to quickly build your CRUD code. If your looking to impress spend more time on the user interface and unit-testing your domin model and use an MVC framework and ORM to handle the boring stuff. Thats my two cents.
I was really interested in the php aspect of this, was disappointed.
I fully agree, but this assumes you can find perfect code that does exactly what you want right out of the box every time. "Oh thats a nice OAuth 2.0 Server packages, but it only works with MySQL and not Mongo? Balls!" Not if DI is a thing. Boilerplate sucks now and then, but if it stops me having to write a whole damn oauth server because the one available was too tightly coupled then im all over that like a rash - and my boss will be happy about that too.
Last time I had to deal with this was a couple of years ago. Isn't it the case that there are different levels - so if you only store last 4 digits you need one level, if you only store a token for a payment processor it's another... but if you store the full card number, ccv and exp it's max level?
Nothing. The PCI standards could and should be applied to any and all projects, but they are language independent. They speak to networks and algorithms and cultures, not languages.
Very nice.
thanks :)
Very nice, some great code right there! 1 thing though, the ?&gt; at the end of your scripts is redundant if you're not escaping the PHP code to go in to HTML or the like. 
I don't have Philips Hue so didn;t look at the business logic, but from an initial glance, I'd use namespaces and PSR-0 properly, i.e. Break the packages into folders, and drop the "class" prefix. You could also get rid of the custom autoloader, composer will handle that if you conform.
thanks i didnt know i could leave this out. I like to leave it in there though :)
You are completely right. In my initial post I forgot to mention not to look at the Autoloader ;) I will change that to be PSR-0 conform
Please don't, though. You avoid some issues if you leave it out. There are no advantages to putting it in.
You are right, I didnt think of that. Although I am very careful with that kind of stuff, it could still happen.
This is now done Thanks a lot to github user filp!
Storing the last 4 of an account number does not count as cardholder data. However, collecting the full account number, CCV, exp date, name/address/zip/etc... on your form on your server, and tramsmitting that via paypals API DOES require PCI. If you redirect to PayPal, and only collect an email address through a form on your website, than you do NOT need to be PCI compliant. Just for some added info, you should never store the CCV/CVV number - they recommend you have the user retype that every time. 
Guess you have not actually read the code? Its called a facade pattern.
Well, for someone who has 15 years of experience, I'm sure you can work this out yourself.
Your code is clean, readable, and you are obviously a capable developer. Therefore you have absolutely no excuse for the lack of unit tests. I'm sure everything works, but please consider taking some time familiarizing yourself with [PHPUnit](http://www.phpunit.de/manual/current/en/) (or any other PHP unit testing solution) and start writing tests. Most half decent IDEs integrate PHPUnit and once you write your tests running them and generating code coverage reports is as simple as pressing a button. I'd love to test run your code, but I don't have access to Philips Hue lights. A [mock server](http://www.phpunit.de/manual/3.0/en/mock-objects.html) would have been ideal and I wouldn't need the real thing to fool around with your library. 
like erdemece said, dont use the mysql_ functions anymore, learn pdo it gives you more tools to test against errors and also helps prevent most injection issues
Haha :) My excuse is lack of free time and laziness. PHPUnit is definitely something i need to learn and integrate into my projects. Better sooner than later
Thanks for pointing me to phpDocumentor! As for unit-tests see my answer to yannisrizos' comment ;-)
Laziness is a good thing (if you don't believe me, ask [Larry Wall](http://c2.com/cgi/wiki?LazinessImpatienceHubris)) and it's actually the reason I convinced myself to start writing unit tests for _everything_, even the most [idiotic pet project](https://github.com/yrizos/brainfart). When I change some code, all I have to do to verify that I didn't broke everything is to press a button. When I add some code, all I need to do to find out how it interacts with my old code is press a button and check the code coverage reports. When someone wants to use my code, I don't have to write example scripts and boring documentation, all I need to do is point them to the tests. Every test function is an isolated mini script that showcases the code after all. I write unit tests _because_ I'm lazy. edit: It _will_ seem like a waste of time at first. But once you get the hang of it and automate everything that can be automated (hint: www.phing.info), you'll never look back again.
phpDocumentor is starting to show its age (at least the last time I checked it out), if it gives you any grief with 5.3/5.4 structures (e.g. traits), you should take a look at [apigen](http://apigen.org/) (It uses exactly the same comment format as phpDocumentor, you won't have issues switching from one to the other). Both phpDocumentor and apigen (and a ton of other tools, including phpUnit) can be automated via [phing](http://www.phing.info/). You write a single xml file, where you tell phing where everything is and what tools you want it to run over your code, and you're done. Here's a [simplistic example](https://github.com/yrizos/brainfart/blob/master/build.xml) of a phing build file that: * gets the current version of the project via git (as easy as reading the latest tag) * runs the test suite (which also generates code coverage reports), * generates api docs (via apigen) 
RE: packagist/composer; I'd be careful using "SVN" as my namespace. I'd probably put it as "Sgry/HUE/Hue" or some such. You don't want to collide with SubVersioN (SVN) projects. You might want to add a [License](http://getcomposer.org/doc/04-schema.md#license) to the composer.json too. Its an optional part of the [composer.json schema](http://getcomposer.org/doc/04-schema.md); but without it people who care about licensing won't be able to use your code. If you want a wide variety of people to use and extend it, try [MIT](http://en.wikipedia.org/wiki/MIT_License). If you really don't care what other people do with it, try [WFTPL](http://en.wikipedia.org/wiki/WTFPL). ..Reading further, it turns out the namespaces are actually "sgry\svnhue". Your README is outdated. Its a pain to update documentation, but if you don't then anyone who wants to use your code later has a lot of hassle to work out why they are just getting a "not found" error message. I submitted a pull-request for the README.
This (sorry, couldn't explain before as I was on my phone). The PHP scripts that contain just PHP, i.e. libraries, can avoid accidentally outputting anything by not closing the final ?&gt; php tag. No matter how careful you are when you remember, not to allow *anything* after that closing tag - no newlines, no spaces, no tabs - there will be times when someone else edits the file, or you swap editors or IDE, and the file is treated slightly differently.
I know it's a shallow reason, but [there's this](https://mobile.twitter.com/thinksaydo/status/277080651310710784)
That's cool a lot better. The only tiny thing I'd say about your changes are that, while not in the specs, convention seems to be to use StudlyCaps for namespaces as well as class names https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#examples. So in your case sgry\svnhue\Hue becomes Sgry\Svnhue\Hue stored in src/Sgry/Svnhue/Hue. Again not essencial but convention.
Thats hardly a thing. You can just not use them and boilerplate your way to an early grave like SF2/ZF2.
That works fine for single dimensional arrays, but please give me a manageable method for doing this from inside an array and managing multidimensional arrays with up to 10 dimensions. You would end up having an enormous list before the start of the array with hundreds of variables being assigned. Then tell me how someone looking at this is going to know what each variable represents without going through the entire array. You call that easier to read? Please.
Uhm. You don't need a dependency injection container and all it's overhead for that. Just use a behavior? It's some sort of DI too, but much more lightweight... Use interfaces for your behavior and that's it. That's what interfaces are for.
If you like Dependency Injection, then this will blow your mind: http://en.wikipedia.org/wiki/Design_Patterns
The one I started with is pretty basic but gives you a great starting point, it's called PHP Fundamentals by a guy named Jefferey Way from Tutsplus.com. This is the guy here if you want to see if you like his style with some tutorials on HTML/CSS that are free. http://learncss.tutsplus.com/ Good luck!
[The New Boston](http://thenewboston.org/list.php?cat=11) isn't too bad.
Without a doubt, Alex from phpacademy.org. Check this out for example: http://www.youtube.com/watch?v=XQjKkNiByCk They have tons of other langs aswell. I think Alex is the best of them however. Totally free aswell. EDIT; this one is great aswell, not vidtuts but interactive coding: http://www.codecademy.com/
Agreed on The New Boston. He has lots of great videos and they assume absolutely no knowledge of the subject coming in. The first video is all about setting up an environment you can use to test your PHP knowledge. They're very clear and concise. 
I found this: http://www.youtube.com/watch?v=jbwVKdl1g-4 
http://en.wikipedia.org/wiki/Singleton_pattern
Right now codecademy is ... not highly recommended. That your first introduction to PHP on codecademy is inter-splicing with HTML is... unnerving at best. It may improve possibly when further lessons are introduced, but in general the community prefers to NOT use PHP mixed with HTML in early lessons so as to drive home the point of not mixing PHP and HTML as a best practice (the mixing should be minimal). I think most distressing is no one I know and no one they know were approached by codecademy to help start writing lessons on PHP, it kinda came out of nowhere. I hope they put some good people on as lesson writers because the last thing we need as a community is another gang of newbies being taught bad and outdated habits.
Second this. I first seriously started to make traction with his 'Diving Into PHP' series. Which also covers MySQL pretty extensively too. Great batch of videos. http://net.tutsplus.com/articles/news/diving-into-php/ Jeffery (All The) Way 
That's the reason why i only implement solutions which accept the data on the aquirers site, and not solutions which post the data to some webservice. Even having a Credit card form on your site requires PCI compliance.
Thanks a lot! I completely forgot about the readme file. I have the cold right now, my brain is kinda slow ;-)
Oh, and the WFTPL looks nice :) Didn't know about that license before. Everyone should use it and do whatever they want with it.
You've done an astounding job here, and put in a lot of effort. Lot's of people would have given up once they made it run but making this portable and even giving it unit tests is an extraordinary length to go to. This is on reddit, so I feel the need to add: I am not being sarcastic, I am impressed.
Just commenting to second the nettuts links, but I don't think they're worth paying for the premium ones. Once you have a basic understanding, the easiest way to learn is by reviewing other peoples code (especially when it does something close to what you want to do). [Github](https://github.com/) is a relatively good resource for this, and you can't go past [stackoverflow](http://stackoverflow.com/) for questions with more detailed context. These sources aren't video tutorials though.
Didn't they just get millions in funding?
I think that was [Code.org](http://code.org), actually
The arethmic exercise keeps getting stuck for me. Doesn't matter how I enter it, always claims the paragraphs are empty. And then it said "program taking too long, restarting"
I've been reading up on that, since novelty_string suggested it. Thanks.
You're probably right, but I'm too far into using mysqli now to turn around. I will keep what you said in mind for future projects and make a point to read up on PDO as soon as time allows.
I plan on starting the course tonight if anyone cares to join me.
it focuses on the programming aspects instead of the network aspects.
Fixed now!
* Bypassing shitty code 
Agreed. When I started going through the tutorial, I thought it was either 1999 or that someone just made w3schools interactive and changed the name.
You should've gone outside
It's more like government. You have a bunch of smart and stupid people yelling from the sidelines while the people in charge do whatever they want. 
I sent in a form to help them, haven't heard back though.
It's been dead for a while now.
Same with me. Annoying.
Personally, I'd rather see __get and __set methods over pointless individual getter and setter methods. Also, I would pre-define the class variables that you are going to use. Edit: An example: https://gist.github.com/timw4mail/5137338
Getters and setters have the same issue. 
$i will be the counter for the "for" loop I will implement.
Dumb.
I believe the syntax you're looking for is "**[extend](http://php.net/manual/en/keyword.extends.php)**". class OutputVerification extends Verify { public function __construct() { parent::__construct(); //run the things from the original Verify as well /* TODO: insert your own, new constructor here */ } /* TODO: insert additional methods here */ }
This really doesn't have anything to do with php vs asp. Also, asp isn't a language which makes the comparison even more pointless.
No you don't. The pricing is set by the vendor in this case, just because somebody charges more for ASP does not mean * &gt; ASP. This is just stupid circle jerk post that adds nothing to /r/PHP. Also: http://mono-project.com/Main_Page And if you look at actual pricing: http://www.rackspace.com/cloud/servers/pricing/ Windows VM is 0.02 cents more... let me call the waaambulance! 
The magic methods are syntactic sugar only. Anything you could do with them you could do with getter and setter methods. 
I see. So my full code would be the following: class Verify { public function __construct($name) { $this-&gt;name = $name; } public function giveName() { echo($this-&gt;name.'&lt;br&gt;'); } } class VerifyX extends Verify { public function __construct($name) { parent::__construct($name); } public function addressMe() { echo("Greetings, " . $this-&gt;name . "!&lt;br&gt;"); } } $v = new VerifyX("Ryan"); $v-&gt;giveName(); $v-&gt;addressMe(); This is helpful, but slightly different than my original idea. To make this work, I now have to initialize new variables with the extended class' name. My original idea would have me continue to initialize the variables as "new Verify('blah')". I don't want to consider one to be an extended class / child class, I want them to be ... sibling classes?
How to scrape: Step 1: Learn QueryPath. http://querypath.org/ Step 2: You're done. Way easier and more powerful than farting around with DOMDocument.
This has nothing to do with PHP vs ASP (.NET or whatever). This is an issue to do with operating systems and license costs. Linux is free, Windows Server isn't.
Why not both?
1. Wordpress is a CMS. It's not meant to be modified, it's meant to be plugged in and used. 2. PHP is a bit nicer because you don't have to compile every time. Java is more Object Oriented than PHP (You'll be getting into OOP much sooner in Java than PHP), but PHP OOP still works pretty well. My recommendation? Look at both languages and decide which one you like the syntax of more. And are you more interested in Android Apps or websites? 
Depends on what you want. Java has a lot of scalability, though I find it difficult to understand. If you're good at Java, you can create websites that run rings around PHP/Apache websites, performance wise. However, PHP is much easier and more widely used for most web projects, meaning you'll have more community support for it. I'd start with Apache/PHP, if I were you. If, after you've built a few apps with it, you still want to learn Java, you definitely should. Java jobs are very high paid, and still in huge demand (I'm not sure about the USA, but definitely in Australia). Personally, I steer clear of Java, I was a Java coder for a year, and couldn't wrap my head around how verbose it was. Maybe it was because I was trying to mess with the GUI features (awt, I think it was called). I've been a PHP developer for 10 years, and it's easy as pi. ------------------------------------------------------------ Also please note that Python is becoming pretty popular now, and I think it may eventually take more of PHP's marketshare. Python will be even easier to learn than PHP, and is being used by more and more websites now (including Reddit). I won't learn Py myself, because I know PHP, but you may want to look into it. You'll want to look into the Django framework for creating websites. ------------------------------------------------------------ Regardless of which road you choose, learn Javascript. You'll always use it for the front end of your app, and using Node.js, you can use it as a server side language. Phonegap and Titanium will allow you to create iOs, Android, WP apps with HTML5/Javascript. So it's entirely up to you what you choose.
Depends on what you want to be doing with your time. If you want to be working with the web, then go with PHP. If you do, you'll find yourself getting deep into CSS, JavaScript, and SQL, since those are the technologies that just about every web-site uses. Trouble is, you'll _only_ be developing for the web. If you want to be working on desktop apps (and yes, native mobile apps) then you really should go for Java. It's a good language for that type of programming and would leave you better prepared for doing systems development or game development. You may deal with the web, but through the awkward interface that is Spring or one of the other Java web frameworks. Odds are, though, that you'll instead be working much more with large enterprise applications of some sort or another.
&gt; Wordpress is a CMS. It's not meant to be modified, it's meant to be plugged in and used. If I want to master Wordpress I need to know how to develop plugins. &gt; Look at both languages and decide which one you like the syntax of more. And are you more interested in Android Apps or websites? PHP seems easier, but Android is more appealing to me. I'm afraid I'm losing the capacity to learn, that's why I'm going the practical route. 
Thank you for a great comment. &gt; Regardless of which road you choose, learn Javascript. I'm working on that.
you are. php and java are very similar. There is a small hump when you initially learn to program but once you get over that it's like riding a bike
add docblocks. use tags. write meaningful comments.
If you can learn one or the other, you can learn both. They're just languages. If you're just starting out, or have to pick one over the other, I'd probably say start with Java just to learn some better practices. PHP lets you do a lot more stuff that you probably shouldn't compared to Java, which is much more strict.
I want a GitHub API library. No composer, no namespaces. One class that will work fine with [CodeIgniter](http://ellislab.com/codeigniter). 
Here are my suggestions: * Rename the class... The object that you create doesn't represent an "injury object," but instead provides a means to query for them. This might seem silly, but in the OOP world, an Injury object should represent the data about an injury, not the service that is used to create injury objects from some data source. Maybe call it InjuryService? * Rethink how the object is used. Currently, you'll create a new instance of the object, call a bunch of getters and setters... and then I'm not exactly sure. You're never using the search_term property, but instead are passing it as a throw away parameter to RetrieveURLs. BuildURL is never called internally, so you must be calling it outside of your object and then passing it back in. You don't want to have to do that outside of the class, but instead bury all the guts in internal methods. This is encapsulation, and is a big part of OOP. * add a constructor to set parameters that you'll reuse. I think the usage of this object should look like: $service = new InjuryService($api_key, $search_cx); $malkin = $service-&gt;findInjuriesFor('evgeni malkin'); $pronger = $service-&gt;findInjuriesFor('chris pronger'); 
Objects are not just containers for functions. You need to [separate your concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). You should have a class for performing calls to the search API, and then another class which specializes in what you're trying to do. The Injury class should not need to know how to call google API, and the google API class should not need to know anything about the information you're trying to get beyond whether the call was a success or failure.
You can by using Gist or PasteBin.. which is what you should be using if you are posting more than 1 line of code. #firstworldproblems
This is definitely a better option but as far as appearances go in the subreddit, it would look better to just a have a solid color the formatted text.
No, I already have a Reddit client called [Chrome](https://www.google.com/intl/en/chrome/browser/).
I like the custom styles on other subreddits. In fact, I don't mind this one except for that implementation of the code display.
PHP is a funny language, because of the low barrier of entry to understand the language, it was the default choice for script kiddies and amateur web devs to build something quickly. I am not trying to discredit PHP but it is an one-dimensional language. If you get to a stage where you understand more beyond programming but to engineering maintainable solutions. PHP itself is a pretty broken language because after all, your code must run with the php interpreter integrated with a web server like Apache or Nginx. The evolution of PHP from no OOP to OOP has caused alot of confusion with obsolete documents. It is really hard to learn proper syntax and architecture by grabbing some PHP source examples from the web because it can be legacy syntax. Java has changed too but it did not go through this radical change as long as I have worked with Java. Moreover, it's pretty crazy also how by default PHP dumps an error stack back to http response. In most other languages including Java, the error stream goes to the console or server logs. Which can safe-guard from some whitebox probing attacks. As for Java, you can do way more with the technology but Java has a steep learning curve. To be a good Java developer, you will and can learn ways outside of just writing the code. There's alot of more interesting bits to look at like automated testing, build scripts, dependency injections, software patterns which most PHP devs do not focus on. Doing continuous delivery is a discipline a successful engineer will have to understand at some point. It really separates a good dev and a bad dev. If you use the right IDE and right libraries and frameworks in place, you can do things rather quickly as well with Java. Once you know how to work with JSP (Java Server Pages) and servlets, you will learn PHP in no-time. However, going in reverse is quite hard. The reason is most PHP devs don't write with MVC (low code cohesion) in mind, as it's very easy in PHP to write really tightly-coupled code.
I think it's fine, but the color should be toned down a bit... it should only be an 'off-white' purple, and not properly purple. Too much contrast.
[Same.](https://chrome.google.com/webstore/detail/reditr-beta/ejmiceoebcclihjdpnmmkdcmcboekibc) 
Hum, looks like this was kinda put in sort of hacky-ish to make it work with Reddits style sheets. Let me see what I can do here Line1 Line2 Rinse Repeat Edit: Ok, I lightened up the color some, does it not eye rape you as hard? [Old](http://e.thumbs.redditmedia.com/vMpOHHFlfkyC_22v.png) [New](http://a.thumbs.redditmedia.com/TOCNW2e0L7ybveMr.png)
I threw my name in. I've been doing PHP a while.
We've all got code to write.
Losing the capacity to learn? That's a scary thought. I'm 29 and still learning things every day. I hope it doesn't slow down by much.
Sure I learn things every day, but I'm afraid I'm losing the concentration needed for learning how to code. Especially since there's not a lot of great guides and documentation in my native tongue.
Are you trying to learn programming because you want to learn how to code? Or are you learning because you want to make more money?
I want to make stuff, coding is just a tool which I have to use and money is one of the rewards for it.
Basically, this. OP is missing the whole point of objects. This is basically still procedural.
Agreed, it should just be a #eee or so.
If you want to do chaining methods on your Setters, you can add a `return $this` to the last line. Also, make sure the variables in your Getters and Setters are declared as private variables. private $google_api_key; public function setGoogleApiKey( $google_api_key ) { $this-&gt;google_api_key = $google_api_key; return $this; } // setGoogleApiKey public function getGoogleApiKey() { return $this-&gt;google_api_key; } // getGoogleApiKey
Moderators should serve the community. Honestly, I thought it looked fine, but if it is causing you a problem and it really does not negatively impact myself or any other reader to make the change there is no reason not to make the change.
&gt; To make this work, I now have to initialize new variables with the extended class' name. You would only initialize with your extended class, so instead of `new Verify('blah');`, you'll do `new VerifyX('blah');`
Still has some work to do though; fixes and tweaks here and there.
Looks good. Side question though, why do people create a bootstrap.php file in the tests directory to load the autoloader.php file? Composer is going to do that anyways and TravisCI doesn't need it. Also, I found you don't have to do the `wget http://getcomposer.org/composer.phar`, as it already has it and a simple `composer install` will do. Just questions, I am not trying to be an asshole, I am just curious why I see so many people doing it like this.
IMO fluent OO isn't really a concept the OP needs to worry about in this early stage of his learning.
This IS true. But more often than not, the division that I laid out will apply, particularly in situations in which OP is likely to get paid. Good point with the part about the web really being where the action will be over the next several years.
 RewriteEngine on RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^([^/]+)/([^/]+)/?$ index.php?p=$1&amp;action=$2 [L] If you don't have too many modules/functions you could possible make the rules a little stricter. RewriteEngine on RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^(modulename1|modulename2|etc)/(actionname1|actionname2|etc)/?$ index.php?p=$1&amp;action=$2 [L] **Edit:** updated with fixes from *ScabusaurusRex* below.
As a professional PHP dev working with other PHP devs, if I find anyone writing anything more than a single-page toy of a site without some MVC in place, there will be blood. I have seen the spaghetti that people who haven't grokked MVC write. It spans languages and is equally appalling wherever it's found. OP, if you ever write anything for the web, learn MVC. It doesn't matter the language. If you're writing for the web, use an MVC framework. It'll save you so much pain and clarify the concepts greatly.
Yellowish, scalding white light, yellowish, surface of the sun. I think this works in other weird ways. [Slightly different](http://i.imgur.com/h7cXz8L.png) (also without the 1px gap between the colors). I should note that screenshot, paste into Gimp, save as PNG, upload to imgur, and link here has darkened the color ever so slightly. The light purple is #ebeaff.
I think so far codcademy has been pretty responsible with their standards and I think the ultimate goal is to comfortably ease newcomers in to a language. Right now, there is only one sort-of teaser section to the track to get people interested and I'm sure it will be revised eventually, also they depend on contributors to write the courses so I expect that anyone willing to dedicate the time will make sure that it is taught responsibly. Personally I'm really excited they added it because I love php.
Ooh no. I don't think codecademy will want to go down that road. They have too much support and momentum to slack up on responsible standard. Plus, right off the bat, the fact that they allow user input and discussion solves the number one problem with w3s; each exercise has it's own forum and if the standards are bad, people make it known. I think that once the course starts filling in, it will be pretty solid and extensive.
best practices
The language barrier is never fun.
1) Where are your namespaces? 2) Composer.json files? 3) travis.yml? 4) Libs??? Honestly how can u call urself a dev this project is way too advanced to be using imperative programming.
This kind of thinking doesn't help PHP move forward. Namespaces and Composer are very good things. And there's no reason you can't use Composer packages in CodeIgniter.
No. __get and __set are basically syntax sugar for public attributes. And public attributes are bad, because they override the attribute scope (a protected variable can be set through __set) and decrease maintainability. Have well defined getters and setters for all variables which need to be set from the outside.
Fuck off
saying that something is dumb while misspelling words is the epitome of dumb. proprietary. 
I assume reddit doesn't make it possible, but no syntax highlighting is a way bigger problem than the line striping (although it is/was damn ugly, I agree)
It's a good start. If you want to get into the heavy details, I would: Use $_POST instead of $_REQUEST; $_REQUEST pulls both GET and POST variables. Do at least some *basic* data validation. isset() or !empty() every required variable first; if they don't exist (or are blank), you can display the form again with a notice. A session variable might help you, if you've got sessions in use on your site. &lt;?php if (!empty($_POST['subject'])) { $subject = $_POST['subject']; } else { $missing_data = true; } if (!empty($_POST['from'])) { $from = $_POST['from']; } else { $missing_data = true; } if (!empty($_POST['message'])) { $message = $_POST['message']; } else { $missing_data = true; } // // or a little cleaner version: // $missing_data = empty($_POST['subject']) OR empty($_POST['from']) OR empty($_POST['message']); // // $missing_data will be true if ANY if the variables are blank or null. // $subject = $_POST['subject']; // $from = $_POST['from']; // $message = $_POST['message']; if ($missing_data) { $_SESSION['email_form_missing_data'] = $_POST; header('Location: http://www.my_site.com'); } else { mail( "email@theurlforthesite.com", "$subject", $message, "From:" . $from ); header( "Location: http://www.theurlforthesite.com/" ); ?&gt; Then in your HTML, check for (!empty($_SESSION['email_form_missing_data'])) ... if you get true, there is something there; display the form as per normal with an extra "You must fill in ALL fields" message, and use the data in $_SESSION['email_form_missing_data'] to pre-fill the boxes with what they already entered. (I hate having to re-type a message due to a bad programmer...) I'm sure there is some basic sanitation that should be done before using mail(), but someone else can figure out those details. 
He should at least have the full CodeIgnitor code base require()'d for that file, right? 
See my other comment below. I'll also give you your first snippet for your own utilities.php file: function redirect($url) { if (!headers_sent()) { header("Location: ".$url); exit; } echo '&lt;script type="text/javascript"&gt;document.location.href="'.$url.'"&lt;/script&gt;'; } function redirect_back() { if (!empty($_SERVER['HTTP_REFERER'])) redirect($_SERVER['HTTP_REFERER']); else redirect('/'); } redirect('hello.php'); will send an appropriate header or Javascript redirect. redirect_back(); will send the viewer back to the previous URL they were at - OR to site root if they were direct linked. 
The biggest question is how you will USE this data. Is it just going to be a row by row display? Serialize. It's not pretty, but it does simplify your life. Will the data be polled (ie. how many respondents were male)? Second approach. Querying is much easier than you think. Never the first approach. 
Instead of viewing the stolen content on this crappy site, you can view the original at: http://net.tutsplus.com/tutorials/php/the-whens-and-whys-for-php-design-patterns/
What about adding some better fonts? Consolas, Inconsolata, Dejavu Sans Mono, Andale Mono would be some good ones most people should already have, that would all be better than Courier New...
Read this: http://me.veekun.com/blog/2013/03/03/the-controller-pattern-is-awful-and-other-oo-heresy/ A lot of it will go over your head but take some time to think about it and how it applies to your code. This blog post aptly describes objects as being behaviour and state and this is the mentality you should have whenever you design your code. Truthfully, it's hard as hell and you won't get it right for a long time, but if you think about what kind of object and what state and behaviour it will have every time you write the keyword "class" then you'll move forward fairly quickly.
I can't think of a single use-case where this would be appropriate. As [cracknape posted](http://www.reddit.com/r/PHP/comments/1a3u1z/can_i_add_new_functions_to_alreadydefined_classes/c8ttx4v), you're more than likely much better off having two objects.
Is there a reason you're using CI and not a framework based on at least PHP 5.2 or later?
some people fear mistaken assignment. I don't
I think that php is easier than java as the static typing and the all is class way of thinking of java is an heavy thing for a developer. But php has drawbacks such as not being consistent.
I hear mine is pretty popular: https://github.com/philsturgeon/codeigniter-template But I dont maintain any of my CodeIgniter code beyond occasionally merging pull requests because there is no reason for me to use a PHP 5.2 framework when the vast majority of the PHP community (and more importantly the folks I work for) have adopted newer versions of PHP. I'm on PHP 5.4 for everything these days, but 5.3 is pretty reasonable. Use Slim, Silex, Symfony, Laravel 4, PPI or ZF2, but not CodeIgniter.
I have a 3 year old project built on CI. Is CI so outdated that I should start looking into porting it to a different framework for the long-term or is there no real business reason to switch?
And you can do the same overriding of scope with getters and setters. And if you still say getters and setters, I say use __call to not have to do all of them. 
It means you can't mistakenly assign a value if you miss an equals sign, e.g. &lt;code&gt;if($i == 1) // correct use If($i = 1) // accidentally making $i equal 1, and thus having the if() block always execute and possibly affecting code down the line that relies on $i if(1 = $i) // PHP will throw a syntax error, which will make you realise you need an extra = sign&lt;/code&gt; Personally I think it's stupid and usually makes code less readable. I've written a lot of PHP, C#, C++ and C code, and I've never once assigned a variable instead of comparing a variable. However, I can see where it might be useful in a framework with lots of contributors and a large codebase - at least it's less likely that mistaken variable assignment will slip through the review/patch screening.
Personally, *I* thought it was funny.
You can sort of do it by assigning a variable that is a closure and binding it to the object, but it is not exactly the same.
progress bar using PHP 5.5 new progress session thing would be cool
Yeah, but the setter and getter methods override only scopes which are supposed to be overwritten. With __get and __set you enable something to basically overwrite EVERY class variable. If you want to prevent that, you have to make a whitelist for __set and __get, but this would be the same like using getters and setters in the first place. But anyway, using setters and getters is a no brainer, i wouldn't even consider using __set and __get, if it's not really old legacy code which works with public attributes.
I think you should learn Java because I think there are more good Java resources than PHP resources. To clarify in inverse: I think it is easier to become a bad PHP programmer than a bad Java programmer. There are tons of PHP books, tutorials, etc online, but many are very outdated or are encouraging bad habits. Since it is so easy and you just want to get things done, these bad habits become engrained and can be difficult to unlearn. If you learn Java, you will not have much difficulty picking up PHP, and jumping right into the current best practices. Java is, in my opinion, harder to pick up because it is verbose and simply does not have the quick productive feeling of getting a PHP web app returning something that looks cool. **That said, I'll propose a third route for you:** Learn an "enterprise" modern php framework, such as Symfony2 or Zend and use that to back a Titanium Android app, or Phone Gap app. Best of both worlds, you'll get your mobile app (and cross device!) and you'll learn PHP. The reason I recommend Symfony2 or Zend over other popular PHP frameworks such as Laravel or Kohana are that I think they encourage good application design habits, are well documented, and are supported by quite large organizations. If you are unsure about Titanium vs Phone Gap, choose Titanium. 
stackoverflow once made me aware that there is a jokingly term for that: yoda conditions.
Same thought here.
&gt; No. __get and __set are basically syntax sugar for public attributes. No, they are not. They are last-resort callbacks for *undeclared* properties. Their use forces you to eliminate property declarations.
Declare properties. Eliminate those that you do not (eg $json_link). Have a consistent, PSR compliant naming scheme, you should not have methods FooBar and fooBar mixed. Handle errors. Use {} interpolation ("key={$this-&gt;google_api_key}?..."). Document properties and methods with DocBlock.
What do you mean? upload?
I asked about that before, apparently they can only change the CSS. Syntax highlighting would require JavaScript.
This is a great feature. I like most subreddit designs, but some are just awful.
Finally! That's much better :)
This is simply not true. __get and __set only expose what you make them expose. You don't have to have a white list either. Suppose your magic methods only work with a single array of values... How is that exposing EVERY property in an object? One thing that should be said is that the op barely has a grasp of OOP in the first place, why confuse him with magic methods. 
I think you are asking the wrong question. You should learn what you *want* to learn, what will be better for what you want to develop. It's not like there's this massive gulf in difficulty, where you can pick up PHP in 5 minutes but have to spend 5 years learning Java. Both take a bit of time to learn but you can get started pretty quickly in both.
sure, but if you limit the exposure, why not use normal getters and setters in the first place? It's simply very bad practice to use them. But i agree, magic methods are not a topic for beginners.
You're right, my explanation was misleading.
Everybody else has the PHP side covered, but I'm surprised nobody has mentioned the HTML (perhaps not the place?). &lt;br&gt;s should not be used for layout and there should be labels that correspond to your inputs. Example: &lt;label for="subject"&gt;Enter Name:&lt;/label&gt;&lt;input type="text" name="subject" id="subject" /&gt;. This is semantically better and makes the form more user friendly.
Laravel seemed super easy to me.
sure! http://phpixie.com here's a tutorial for you: http://phpixie.com/tutorials/learn-phpixie-in-30-minutes/
Roll your own template library and just wrap Twitter Bootstrap / Initializr into it. 
Hrmm it's still hard to read using RES's night-mode, due to the [green text color](http://i.imgur.com/j4FV2QX.png), but not impossible.
I wouldn't go with laravel because: * new version is in the making so you'll have to relearn it in a while * it's not lie CodeIgniter at all, it's more like Symfony * if you consider laravel at all, you're better or just using Symfony instead. Laravel uses it's components anyway, and symfony is just much more well known * laravel suffers with performance issues http://phpixie.com/blog/php-framework-comparison/
You can try Kohana too, very similar to CI with good community and long history
The reasoning behind this is that some people use editors that don't syntax-highlight `==` differently from `=`.
Don't use "new version" as an excuse :P, you can see that the documentation is virtually the same http://four.laravel.com 
Their learn tutorial is completely broken D:
It kind of depends on what you're doing, too. If it's small things with only a few routes, [Silex](http://silex.sensiolabs.org/) is awesome, quick to learn and build stuff in. If you're looking for a little more control, Symfony2 isn't that bad to at least get started in, and you get the insight on the components used by several other projects. We use a mix of the two, depending on the project, where it's going, what it's doing. Typically self-contained services that will live on other teams' boxes will be done in Silex, but if it needs our UI/ACL/Anything complex, it's done in Symfony2.
How come?
Personally, I have accidentally changed comparison to assignment more times than I care to admit. Note that this rarely happens when you initially write the code. It usually happens when you go back and edit/re-factor. You would think it would be easy to identify and fix, but it is usually not because you are usually handling something else in your head. You are struggling with a complex algorithm or multi-stage process so a simple assignment may slip in unnoticed and cause weird, erratic behavior that will throw you off. I think the case for the reverse order here is implicit vs explicit checking. This is one way you can turn a logic error into a syntax error. The latter blows up instantly, while the former can take some debugging to locate.
Engineers not good at design, more at 11.
Kohana is nice and reminds me of CI. I think Laravel is more promising though.
You and dracony are the only ones ever posting about PHPixie (and that's all I ever see you post about). I take it you two know each other. 
You can run CodeIgniter on the latest version of PHP, that's not the problem. What makes it outdated is that it haven't been evolving along with the language, as well as new patterns and practices. 
That's probably because a lot of people started learning with it. It's still based on PHP 4 though, so not a great base to start learning with, imho. Nowadays I'd recommend laravel if you want to stay on the edge of things, Symfony for building big apps, and CakePHP if you're limited to PHP 5.2
Fair enough.
* Just learn new version then. It's basically the same. * Not a disadvantage. * OP asked for something easy to learn like CI. Symfony is a lot more complicated than Laravel. * Performance is important but maintainable code is even better. 
I love this IDE. Love it, love it, love it.
As far as I know the documentation is awful, not what the OP asked
Me too. I switched to it from NetBeans last fall with they had a 50% off sale. I was pretty excited today to see that any purchase after May last year gets the 6.0 upgrade.
yes - it has a different install location. You can't just upgrade 5.0 to 6.0. It does import all of your settings over when you run 6.0 though.
Awesome stuff. I've been using the 6.0 EAP for a while and am glad to see it go official. Darcula is the stone cold nuts.
Great, thank you.
I wasn't doing the EAP so today is my first view of it. I'm loving the new start screen and Darcula.
I also go to the old version and export the settings to a .jar file just in case.
The start screen is so much better. Darcula in full screen is amazing. The retina optimization makes it look so much nicer on my laptop too. I'm looking forward to digging into the non-cosmetic stuff. It looks like a great release. Edit: The REST client's nice and handy.
but they are part of the interface, and if they express logical properties of the class, rather than physical properties, then they shouldn't really change, even if you change how those properties are implmented
Thanks everyone for your input. The consensus seems to be that I'm trying to do something that's not really possible or logistical, and that I should just use multiple objects. I'm still in the process of learning a lot about these more advanced Class properties and really appreciate the help!
http://www.phptherightway.com/ This would be top of the list of things to do.
And you can always call __get and __set directly. Any way you look at it though, changing class properties outside of the class introduces coupling to that class. 
Does it have a builtin FTP client (so I can add FTP accounts and edit files directly on them) or does it still lack one?
It's got FTP, FTPS, SFTP. You can set it to automatically update when you save locally. 
3.5, 4.0 and 5.0 all had a built-in ftp. I just think you had to use SFTP. Actually looking at the settings now it offers, FTP, FTPS, and SFTP (which is done over SSH). Are you saying specifically 6.0 doesn't have one or that you just haven't found it in the previous versions? 
Would people that use or have used [PHP Designer](http://www.mpsoftware.dk/phpdesigner.php) recommend it over that? I had loads of people tell me PHP Designer was crap compared to Net Beans or Sublime Text but couldn't get into either when I actually tried, so i've kind of given up on trying other IDE's.
Using PHP 5.3 is not "implementing language changes the moment they come out". Firstly, PHP 5.3 was released in mid 2009. Secondly, namespaces, callbacks and the obvious speedboosts provided by PHP 5.3 mean that upgrading is not just "because its cool" but means you can take proper advantage of Composer, PSR-0 packages and better unit tested code. You certainly can put PHP 5.3 code into PHP 5.2, but what reasons do you have for using a PHP 5.2 framework if you could use something newer? If your client tells you they need PHP 5.2 then you need to tell your client they don't know what they're talking about...
I highly recommend at least downloading the trial and give it a shot. I use PhpStorm for anything other than doing a quick edit on a single file, for that I use Sublime Text.
**Edit: To avoid any further confusion by folks here, this answer is to the "Edit" in the original post body, not the original title which is a little different. The edit is this:** &gt; EDIT: Seeing as this is actually quite a controversial question, perhaps my original question should have been whether or not CodeIgniter is actually still valid as a framework to use in 2013 even though it still uses PHP 5.2 There is nothing valid about CodeIgniter today. Nothing at all. I used to be a core contributor to the framework and was very happy using it for years before that. 2007-2009 I was building out sites with it, blogging about it, running conferences for it, all that jazz. 2009-2010 nothing about CI changed. No new features. Nothing. 2010-2011 trivial updates happened and we got 2.0.x and 2.1.x out the door (without breaking the API). 2011-2013 and CI 3.0 still isn't out, even though its ready to go and has been for at least 6 months. EllisLab refuse to dedicate the time to designing the documentation that they half-heartedly threw into the develop branch without notifying the dev team - and refused to roll back out - so they cannot release it. Those new docs are AWFUL, and while they could be made better EllisLab have shown no interest whatsoever in improving this, which is a terrible shame seeing as the one saving grace of CI today is its apparently superior documentation. I left the team about 6 months ago of my own free will, because I couldn't see any future in CI and because I didn't see the point in trying to play catchup with all the more modern frameworks, when people could just use a more modern framework. I wrote a big blog about why CI isn't going to be moving forward and since I wrote it nothing has changed. http://philsturgeon.co.uk/blog/2012/12/5-things-codeigniter-cannot-do-without-a-rewrite You might use CI and love it. If it still solves all your needs then great, but I'd suggest you looked around the PHP community and trial out a few other options. Amazing things are happening all around the PHP community all thanks to PHP 5.3, Composer and PSR-0, but CodeIgniter is not doing, supporting or even paying attention to any of these things. A year ago I'd have said "I'm glad CI is around for my PHP 5.2 projects" but I don't have ANY 5.2 projects anymore, and I think thats pretty common now compared to a year ago. Final advice: don't recode applications for the sake of it. Build your next site, project, app, or version of the same app with Laravel, Slim, Silex, Symfony, Whatever when you are hired to build it anyway, but don't port everything you've ever made for the sake of it. Lots of people are doing that, and it makes no sense to me at all (other than maybe educational purposes, but converting one will train you, the rest is just wasting time). I've been doing a lot with Laravel 4 (not 3) and I find the documentation to be perfectly adequate: http://four.laravel.com/ Composer makes things seem tricky at first but you HAVE to learn it. You might ignore it for now but in a years time you'll give it another shot and be so freaking angry you didn't use it before. Then I hope you remember this thread and pop back and say "Phil, you were right". Or, just use it now :)
Darcula looks nice from I'm seeing on google images. I've been using my own hodgepodge of settings for a dark theme, but that looks awful in .htaccess files.
shadowhand quit to become a Ruby developer years ago didn't he? I've not seen much action around the Kohana github.
&gt; new version is in the making so you'll have to relearn it in a while Or just use the new version beta. http://four.laravel.com &gt; it's not lie CodeIgniter at all, it's more like Symfony It uses components much like Symfony, but most of its common functionality is clearly inherited from CodeIgniter. Kohana, FuelPHP and Laravel have all inherited many traits from each other and any rightminded PHP developer can switch between them with barely any effort - in the same way that PHPixie is clearly influenced by Kohana. &gt; if you consider laravel at all, you're better or just using Symfony instead. Laravel uses it's components anyway, and symfony is just much more well known You've heard of "Standing on the shoulders of giants" right? If L4 does nothing, why does it exist? It adds a LOT of functionality, structure and simplicity to the very tried and tested components of Symfony. Think of Laravel 4 as Ubuntu to Debian. It adds on top of the framework, and gives it CI simplicity on the super-power of symfony. &gt; laravel suffers with performance issues I've benchmarked the fuck out of my applications running L4 and the only slow parts are me being lazy and writing a few dodgy SQL queries. These benchmarks are... interesting. Its nice that you've built a framework, but im not going to let you just make things up about a framework that is actually very good. 
You have to sanitize the $from to make sure your script isn't used by spam. As it is now, its subject to a mail header injection attack. See http://stackoverflow.com/questions/11040328/is-this-mail-function-safe-from-header-injection to learn how to use PHP built in filter functions.
How about CakePHP? Their upcoming version is using Composer components too. What do people think about the upcoming version of Cake?
Me too, best $25 I've spent in a long time
What did you mean by "These benchmarks are... interesting."?
Man, are you crazy? Nothing compares to PhpStorm once you tried it!
I am gonna charge more for working on that type of code, that is a good idea. Thanks
$this-&gt;response-&gt;body=&amp;quot;We will add fairies here&amp;quot;; Edit: reddit formats it properly. This is what I see http://puu.sh/2gxec.png
&gt; yoda conditions Awesome that is.
On a sidenote: 'optional' braces should never, ever be omitted. I think it just looks horrible. if ($var == 1) { echo 'yes'; } What are we? Python-writing peasants? ;-)
I used this: http://stackoverflow.com/questions/9627947/code-igniter-themes-library/9628000#9628000 Since then i've done some changes so i don't have to call $this-&gt;template-&gt;load anymore, but it involves some custom controllers and more.
Yes the white looks "right" to me, it shouldn't be beige as it is currently
+1 for Darcula. Super nice looking interface. 
The interface and code completion worked better for me.
This is worse: if ($condition) echo 'yes' or: if ($condition) echo 'yes'; in python, i find no problem with the latter, but mixing it up in php is just horribad.
Since the isset function returns a boolean value isn't " == true" redundant?
Stackoverflow deleted it, but jeff atwood summarized all of them in his blog: http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html
There's not a single downvote on any comment in this post and only one downvote on the post itself. I think that just shows how much we all love this software =)
This is the most informative post I've read so far. Thank you for the information, I've taken a look at the L4 docs and they seem to be perfectly adequate indeed. I'm also going to look into learning how to use Composer, it looks quite useful. Thanks!
It sounds like they're making some big changes and the move to Composer is definitely a welcome one. But, moving to PHP 5.4 will certainly be a barrier for many. Not for long hopefully.
Regarding awesome SQL, look at this: http://forums.laravel.io/viewtopic.php?id=6140
Those are great. Thanks!
I switched from phpdesigner to phpstorm last August. I didn't look back since. The reason I switched was the sucky support on phpdesigner and the slow update cycle. Meanwhile I also switched to Mac, which is a great platform for web development. But that's kinda irrelevant here :)
&gt; PHP itself is a pretty broken language because after all, your code must run with the php interpreter integrated with a web server like Apache or Nginx. I am not following. Why is that a reason why it's "a pretty broken language"? First of all, it doesn't necessarily have to, and secondly, to the degree that it does, so do Python, etc. &gt; it's pretty crazy also how by default PHP dumps an error stack back to http response. 1. Take new server out of the box, connect the wires, set it up. 2. apt-get install libapache2-mod-php 3. Run a PHP script with an error. Presto, the error goes into the logs and not into the HTTP response. I think you have to go out of your way these days to come up with a PHP installation which "by default" sends the errors to the browser. &gt; As for Java, you can do way more with the technology but Java has a steep learning curve. To be a good Java developer, you will and can learn ways outside of just writing the code. There's alot of more interesting bits to look at like automated testing, build scripts, dependency injections, software patterns which most PHP devs do not focus on. Your argument here seem to be that because some people don't use something, it doesn't exist.
You might be interested in the atlassian connector for storm. You can close tickets + commit in one step with that. http://plugins.jetbrains.com/plugin/?id=2190 Works for all JetBrains IDEs.
&gt; If this were the case, Java would be ruling the day among the most visited websites in the world. But it actually is. I'm Australian, and the majority of huge corporate Australian websites run on Java. Maybe you should move to Australia, mate. :P We're about 6 years behind the USA. Java is only just now going out of fashion, and PHP is the new "fad" for Australia. I love Australia and all, but sometimes... I don't know how North America's websites operate. I have heard things about Py and Ruby on Rails growing larger, but I haven't heard much about Java being used. *shrug* Edit: I do agree though, Java should be used for websites. It's really overkill. However despite its problems, there are reasons for Java. I've heard that some of the fastest http servers run on Java, but I could have heard wrong.
That's how I do the Jira ticket connections... with that connector. Having it loaded means I only have to write a comment like: // AGC-91 Change foozle to use smoodge on update and the AGC-91 part will automatically be turned into a link, thanks to the connector.
Checkout Yii. The docs aren't too bad, but the community is huge, and there's a lot of extensions available. 
It's the best, hands down. JetBrains makes great stuff. I use PyCharm for all my python needs, and it's just as good. I particularly love the svn/git integration and the code inspectors, as well as the code sense. The regex parser add on is pretty sweet too.
I really like CakePHP and I have pulled a bit from their source code for my own personal use, they have a pretty solid setup and good docs, large community and lots of plugins. If you look [on their github](https://github.com/cakephp/cakephp) under the branches, you can see what changes they're making to the structure of the code.
I noticed this too... but I don't think we should discourage them from trying to make something nice. Yes it's young and small but it's not nice of us to say "just give up and use something better" instead we should encourage them to do their best and make something nice and modern. There is room for a lightweight, up-to-date framework, I notice Slim has not received any updates in a while. Also the PHPixie database component is not bad at all. Just saying, we should always encourage new developers to learn and be proud that there is still enthusiasm for PHP. I want to see them succeed in making something good, not to just give up. It will take time, sure, but there's always time.
The "feel" of phpStorm is (at least for me) superior to anything else I've tried. Sooooo many options. 
(I deleted my comment by mistake (whoops), so I'll go ahead and repost it) As a first step, put your code under version control. Also, there is no "best way to use PhpStorm". PhpStorm is a versatile piece of software. What the best way to use it is depends on what you want to accomplish. I suggest you have a look at the [feature page](http://www.jetbrains.com/phpstorm/features/index.html) and see if there's something that strikes your fancy, and also just simply use the editor. If there's something you find missing (say, debugging), then you'll know what to look for and add it in. 
Drupal is a strong CMS with a good framework behind it, maybe look into that. If you are looking for something more lightweight, there's always wordpress, Anchor CMS (Which as it happens also has a nice very cleanly coded little lightweight framework powering it), Fork CMS, Concrete5, and many others. For a local paper, having a CMS set up would probably be best so that people with little technical knowledge can do some editing of the layout and text. I have worked with Concrete5 doing the website for my last workplace, and it's basically drag and drop, very simple for someone who knows how to use a blog/cms administrative interface.
&gt; a lot of extensions available. There are quality issues with this "a lot". You have to spend some time to find smth good.
Anyone else using this on Linux and having problems? Version 5 worked flawlessly, but I'm finding 6 really buggy. For instance, I can't get any of the project panes to appear. Navigator, Project, Remote, Favourites, Database, etc - none of them show up. I've tried resetting the layout, deleting my settings folder... I even switched from OpenJDK to the Oracle one and the same problem. Also having problems where half the time I start it up, I get a blank "Complete Installation" dialog that just hangs... Edit: Ubuntu 12, 64-bit if anyone's wondering
This is pretty harsh. I'm not saying you're wrong, though. To me it seems like CI is facing a tough dilemma, like you mentioned in your blogposting: Either they do a rewrite, which will anger a lot of people, and will take a _lot_ of time. Or they will not, and they will stagnate. Or, keep stagnating, perhaps. Looks like they're in the same boat as Wordpress. 
Maybe, but even WordPress can be bothered to finish up their documentation. Change management is the hardest part of software development and there is never any path that makes EVERYONE happy, but you have to pick it right for your community. PyroCMS keeps change minimal, but 2.0, 2.1 and 2.2 all have updates to your addons. CodeIgniter hasn't changed anything in years, which was great for a while but now it's really really showing. I might sound harsh, but im definitely not wrong. :)
Well you could go with Symfony2 if its a really big site or give Laravel a try which is a really good framework and easy to learn. Good luck and let us know your fonal choice :)
I tried it, but all it gives me is a 404 not found error.
Keyboard support is awesome. And if you don't know a short cut key combo to use press control+shift+a and you can type in a keyword or phrase and perform the action from there (and show the shortcut combo) 
Boom - yep, on the money - my apache mod_rewrite skills are a little rusty these days (nginx only here!).
[Pimcore](http://www.pimcore.org/) is a CMS built with ZF1 Looks badass if you ask me. */magento dev*
I switched from Zend Studio... I was even used as a testimonial for Zend studio 9. Hands down phpstorm is the best. I'll be trying version 6 tonight!
Agreed. I almost can't believe it's Java. It feels like a native application.
I only had one thing with the new Darcula, the font size is too small, and I just dont know which font is using, so now Im at Bitstream Vera 16pt - that looks good, though I better like the Darcula font.
I just want to add this... Benchmarks should be made on the application and not the framework itself... The same application might run faster on a slower framework and vice-versa. I have always found every single performance bottleneck coming from my written code and not the framework I was using.
I know! Java can be fast if done right, and Jetbrains pulled it off.
This is correct.
Let me be the first to admit that I can not make things look pretty. I understand the science behind some of it, but in no way am I a designer. I make the application work, someone else makes it pretty.
I am not sure what in RES is making it do that, but I am way to tired to be able to figure it out right now.
I think it's just because it's within the `code` section, which shows up that same color except on a very dark gray background. Don't worry about it, I found I could disable the sub's CSS, which other than making the php-alien 2x larger, doesn't seem to have any ill effects and makes the code easy to read.
IMO, it is better than sending to a processor and then redirecting. Some things to keep in mind: 1. Keep in mind what would happen when someone starts using their back button (when they see a whole page is loading, they may be more tempted to do that compared to when using Ajax). Each time they hit back they will most likely get prompted about the browser needing to resubmit the form. 2. To get into good programming practive, if you are not already using a MVC setup, at least make sure all of your processing of data (form submission/database loads) before anything is ever out put. This makes it easier to manage the output later, compared to pages that do the logic in the middle of output. (myself, the only "programming" once output starts is simple things such as conditions or loops with data that was already populated before output.)
2 good points I had not thought of.. is there a way to handle the resubmission of post data on back or reload. The only thing i can think of is to set a session variable maybe, but that could get tricky. I have heard of MVC but have not read up on it at all. know of any good resources. I am doing the output (except for some loops through arrays set prior to output which are populating HTML entities) Thanks for the response. 
Looks really nice to me. Hopefully others agree.
I've been using all 6EAP versions since they came out but not the final version 6. I use it under xubuntu and kubuntu. No obvious problems at all that I'm aware of. There were some minor issues during that time like some settings couldn't be changed or something - likely bugs during development. I'll check v6 out now EDIT: My just downloaded version says the evaluation time has expired. So I can't test whether it works or not. The noted difference to the EAP version is: different splash and a much faster startup time. I uses both cores (dual-core laptop) to the max. So there has been done some parallel computing stuff since last EAP.
The bootstrap.php is recommended in PHPUnit's documentation, so that's probably why you see it a lot. Think of it as an easy convention, it's there even if you don't need it. And of course you will need it if composer isn't available (composer is awesome, but not everyone has caught up with it). As for wgetting composer.phar, I had no idea Travis didn't need that, thanks ;)
I'd be more than happy to discuss specifics of the design if you have questions, there are a couple of unconventional choices in there. For example the trait isn't really necessary, I only used it because it's a relatively new feature, and I wanted to see if and how it would fit. 
Thank you for your kind words. On a somewhat personal note, although I didn't really go for PSR-2 compliance, I think it's obvious that I've set my IDE to automatically format my code to be as close to PSR-2 as possible. I don't necessarily agree with all the choices FIG made, but I certainly enjoy that I don't have to waste any time thinking about those silly foo vs bar choices and concentrate on actually writing code instead. Your and the rest of FIG's effort is much appreciated. 
There was a thunderstorm, outside wasn't a very good option at the time.
I find the articles on [phpmaster](http://phpmaster.com/) generally well written and to the point. They do have some beginner articles, but most of their content is for developers that have been writing code for a while. 
Ah okay, i thought this was something of the builtin functionality :)
I switched purely for the performance benefit. If I'm honest, I barely scratch the surface of what Phpstorm has to offer but it's still a fantastic program.
First World Problem : my desk is next to large windows and a dark UI does not work well with light reflections :(
I used to use PHP Designer but now use PHP Storm. PHP Designer is a great second best, but PHP Storm beats it hands down. It always takes time to get used to a new IDE but in this case it's worth it.
Thanks! If somebody uses PSR-1 for their code I am over the moon as from the outside it all looks the same, what you do on the inside I don't much care about but PSR-2ish seems to be fairly popular. Do what you like with tabs :D
Giving context to insight is bad? I know madly spouting opinions is pretty popular on Reddit but I like to lace mine with experience and facts instead. To do that I have to explain why, when and how, otherwise I'd just be another troll on the internet saying stuff.
PHP5.3 and Composer are literally revolutionising the PHP world, definitely don't get left behind on those :)
i bootstrap all the things. -_-
I've downloaded it and it looks easy to get to grips with and hopefully the git stuff and pushing local versions to live via ftp are a bit better, although I haven't really got into that yet. At the moment the worst thing is that I can't get used to the highlighting! I may fiddle with the settings and try and make it more like PHP Designer.
There a couple of books on OOP in PHP that I thought were pretty good. There's a book on PHP Design Patterns by Oreilly that's okay. I thumbed through this at the library this weekend, seemed like a good book. Apparently the guy is a fiction writer too: http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098
ZF2 had some cool features I was interested in, like the event manager. It seemed like a lot of bootstrapping though. But it used a pub/subscriber model, so you could throw some cool logging tools or things like that it. But you're right, it doesn't seem friendly to learn. Is time a factor? Find something cool that you want to try that seems like a good fit. 
I upgraded yesterday on Fedora 18 and haven't had any problems at all. I'm using the Oracle java for what it's worth.
As an everyday user of this subreddit perhaps this can bother you (somehow?) but as a new user here I actually found pretty much everything he said very insightful. I myself have been wondering why the hell CI never updated past 5.2 and the little history lesson was very interesting to me. I think you're being judgmental of something that is not really harmful to anyone.
Put them in docked mode, then pin them (gear icon) when open. edit: one of these (eg structure) needs "split mode" set, also on the gear icon.
A tip for those using it on Windows with high DPI and scaling (eg Surface Pro) and getting sick of the blurry text, go to the program's Compatibility tab in properties and choose "Disable display scaling on high DPI settings", then up font size for the editor in File &gt; Settings &gt; Editor &gt; Colors &amp; Fonts &gt; Font . You can up the interface fonts on File &gt; Settings &gt; Appearance by overriding the default font. So far the only thing not enlarged is the Project file list, but that's ok.
This is the best way to debug SQL code. If you have some complex query, it affords you the opportunity to break the query down and run the different pieces before assembling them back together.
If you're going for custom-developed code instead of a CMS, definitely grab and use a framework. Start reading up on the different frameworks out there to get a feel for their different styles. You'll definitely want to use one that feels good to you. Though I haven't used them personally, I do hear good things about Fuel and Laravel, so go check those out.
It looks like you missed the Edit on the OP: &gt; EDIT: Seeing as this is actually quite a controversial question, perhaps my original question should have been whether or not CodeIgniter is actually still valid as a framework to use in 2013 even though it still uses PHP 5.2 I feel I answered the question perfectly, nothing to do with self-indulgent rants. If I had missed answering the question you'd be right on the money, but it looks like you missed reading the question. ;)
[This.. picture...](http://phpixie.com/wp-content/uploads/2013/01/phpixie.png) What the hell am I looking at?
I still use it. Guess I'm behind the times, that and we don't have a memcache server.
Those are two different things heh.
See, that is the thing I was wondering about. I love that phpEd has built-in editing files over FTP without the need to create a project. Never played around with Samba etc. but I know ppl used that to overcome similiar limitations.
The edit was made about an hour after the original post. Sorry about that.
just the security issues, that java has, make me go for php. when i started to learn programming, i started with java. i didn't understand it, so i switched to php and i immediately loved it.
If you're looking to read about design patterns, I'd recommend [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). The examples are written in Java, but the patterns can apply to any language.
I haven't delved too deeply, and I'm not too great a PHP programmer myself, but I haven't seen any glaring issues. Why not write a unit test suite?
I'm just curious what made you create this? What aspects about other php frames made you design and build your own?
Around 320000 files (some of them with multiple Mb of text data). The memory goes up and it becomes generally slow. Not as bad as Eclipse, Netbeans &amp; co.but still not pleasant. I'll try the 6.0 anyway, the features are attractive. Edit: I tested the 6.0 and it is much better, but my dev machine (i7, 8GB) cannot handle so much memory consumption. (Almost crashed my UI). I don't know if it is Storm or the linux java version, but I'll stay with sublime for now :(
I agree if you are using a truly remote server it will experience lag and makes it virtually unusable. In our case all of our servers are on the local network so it works pretty basically like a VM. At home on my beautiful macbook pro I of course use a VM and it is a dream setup.
Took a quick look and am impressed with the neat formatting and documentation of the code. It looks very similar to how I like to write PHP (braces on their own line, deep tabs, etc). I'll keep the tab open to look through it more later. :)
It was more a learning experience to teach myself good Object Oriented Design
Sounds like the perfect time to learn testing then....
If it's a very basic site you may want to add any sort of functionality, checkout [Sinatra](http://www.sinatrarb.com). On the surface you may be like "WTF? I don't want to do ruby!" But it's actually pretty badass and easy to setup.
Thank you mjcov, after some quick lookup Drupal seems to be a great option, I'll still look into your other CMS suggestions though. Anyway it will be a CMS and any other subproject will be done with a microframework like silex.
Java has a much steeper learning curve.
I'm looking forward Symfony2 and Silex as frameworks, but after some consideration I've decided to strick with a CMS for this project, possibly Drupal. But these two suggestions Laravel and Fuel, I didn't knew them and I surely will look into these too. Thanks :D
Haha I already know testing, i just wrote this a long time ago
For-profit technical schools have pretty bad reputations. I would suggest that you follow an online course and then build something you're interested in. [Codecademy](http://www.codecademy.com/) just launched a PHP course. There was a recent [AskReddit question on learning programming](http://www.reddit.com/r/AskReddit/comments/19krxl/how_can_a_person_with_zero_experience_begin_to/). Most modern languages are very, very similar, so finding a good course is more important than finding a course taught in PHP.
So.... what's this for, exactly?
What you are doing is not something that requires OOP. OOP is not the silver bullet. There is no silver bullet. You are basically doing a gather data, loop through data, output process: $site_contents = array(); $sites = do_search($athlete_name, 3); foreach($sites as $site_url =&gt; $keywords) { $site_contents[$site_url] = scrape_site($site_url); } display_your_shit($site_contents); You don't need objects. It's just extra code and more bugs. If you were to take your results (i.e. 'injuries') and attach them to an 'athlete' which is persisted in a database, and indexed by a category (cat 'sport'), then you have some relationships that coding OO might help with. As it is now, you're wasting time masturbating to code.
has anyone else noticed a difference with scrolling? when I use my laptop's touchpad to scroll, it's switching files and re-opening files
A snippet site, it appears.
Throws a 500 error if you hit edit
I just needed a place to put chunks of code that i wanted to save. I guess like a code wiki?
fixed that, thanks
Dat code. In all seriousness, this is very well documented, and easy to read. The only thing I'd do is give Route and Router more descript names. What on earth is the difference?
just [Slim](http://www.slimframework.com/)
Thanks for the answer. It's still acting kinda strange and throwing me and error: RewriteEngine on RewriteBase /test_site/ RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule /^([^/]+)/([^/]+)/?$ index.php?p=$1&amp;action=$2 [L] 
Can you not exclude some of those files from the project?
Router takes in a Route, and uses it to determine what to do. It then calls the Dispatcher to actually do whatever it needs to. Separation of concerns ftw
Yeah, I can't speak for others but I don't mind seeing your comments or a link to your blog. Some people spam garbage articles from their blog, or are shills just for phpmaster content. They usually never comment or respond to anything. On the other hand, you are providing relevant / great information, and you had a *personal* role in this, so I don't see why anyone can really complain about such an informative post.
Ah I'm used to codeigniter, and I never had a separation between route and router. Thanks for clarifying this. The other commenter said this is pretty standard practice, so I applaud you. My statement still stands in the fact that your code is very easy to read. Nice work, OP.
Ah, yes, I see what you mean now. Yes, my bootstrap.php for this particular project doesn't make much sense and it's there only because it's there on my other projects (where it actually does something useful). I have a project skeleton on a local repo that I use to quickstart everything, and I probably have to get a bit better at removing redundant stuff. 
Yeah, just *using* a framework you rarely touch the router directly, but depending on the framework you would touch Routes. Since you mentioned node, here's some of the code from Express: https://github.com/visionmedia/express/tree/master/lib/router They named the files oddly, but you can see that in index.js there is a Router class, and in route.js there's Route.
This is not helpful at all, but "seekquarry/yioop" looks like what happens when my cat lies down on my keyboard. **Edit** To add something constructive: a lot of people are using either [Solr](http://lucene.apache.org/solr/) or [Elasticsearch](http://www.elasticsearch.org/) to create custom search solutions. I've heard a lot of people mention elasticsearch, lately.
Pretty much, use Gists for everything now, used to be hooked on PasteBin, but source code highlighting/markdown and online diffing of Gists are a huge win - and you can fork them/treat as a repository if you like. Still for something stand alone, this is pretty good looking. Well done.
Wow thanks for the example. I assume this is part of Express, the part that does the heavy lifting for me when I build an Express application?
I'm going to say this: I'm not a fan of MCV frameworks. Separation of Concerns is great, and there's a time and place to do that. MVC frameworks try to do it "By Design" and I think that falls flat on its ass. However, the code here is clean, if not too clean. I'm not a fan of adding more and more layers of abstraction when not needed, but the Config and such seem like a natural usage of this. 
I second that, GitHub Gist usually does the job well when it comes to code snippets. This is neat, but reinvents the wheel.
I saw this in some code the other day. It completely confused me for several minutes if ($foo == $bar) do { //something } while ($something = 1); I thought there was some crazy version of IF that i'd somehow missed over several years of using the language.
I'd consider Zend Server a little heavy for a local dev environment, a better option would be compilation. Personally I use nginx locally with several different versions of PHP-FPM running than I can switch between by changing config in my server blocks for backwards compatibility testing etc, overall an easy install that beats Mamp, Xamp and the likes though. https://github.com/skl/phundamental currently in development but a great light weight stack that can be compiled on any OS or distro including Windows (with Cygwin).
Protip: APC user-caching space is orders of magnitude faster than mongoDB as a cache store (if you don't need it distributed). Just for information, this is otherwise neat.
Thanks dude. It's not HiSam's fault, I answered the Edited question, not the original title. He didnt notice the edit and thought I was rambling about irrelevant shit - but really I was very much on target. He apologized!
There's no such thing as "bypassing" ofuscators; if anything, you may be able to retrieve code that was previously encrypted/compressed/whatever, but even then what you'd get is still scrambled code. You can *try* to make sense of it by restoring identation (ie line jumps, tabs and whatnot) but you won't magically get back the variable/function/class names or comments because that information is lost forever (the PHP intrepreter doesn't need it to run the code, which is why there's no mercy in this area by code ofuscators) "Reverse engineering" a ofuscated source code may or may not be worth it depending on what you are attempting to do. It's *possible* to figure out what the source code does by reading the ofuscated code with some hard work, which is why security through obscurity is always regarded as ineffective; but you'll never be able to get back the original source code verbatim. 
Definitively go with Solr if you are serious about it.
Fuck yeah! I love the coding style (it's pretty much the same style that I assume). Do I smell a hint of C# developer?
I concur, using yoda conditions for the sake of avoiding mistakes is just silly and makes the code uglier.
There's an easy way not to fall into this trap when you are getting started with OOP: think of classes as "things". For example, a Chair is a thing, so having a class that represents a Chair and every related function to it would work. Likewise, a SearchQuery or an URL could also be things, with their own classes and properties. The concept just makes sense once you get your head around it.
Not to mention this is mockable (and thus testable), compared to the built in operator.
http://phptherightway.com Make use of classes and objects, go on from there.
Not me, I just always preferred that coding style. Sucks when I develop java and everyone hates that style. Fuck the haters.
EXCELLENT point. Testing often gets overlooked. Relying on the built-in behaviour of + could lead to trouble in future versions of PHP too.
I learned a lot from this book http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124
It's called [Allman style](http://en.wikipedia.org/wiki/Indentation_style#Allman_style).
I haven't read that book, but if it's nearly 10 years old, published in 2004 it will likely be teaching some things that are considered anti-patterns today (e.g. singletons)
It's strange to me that you're hosting the source of this on Github and yet still found it necessary to build this.
It's still good info. Only small changes (relatively speaking) have been made to what you'd read in that book. 
Haters gonna hate. When I do develop Java code I have to flip to Java style because it throws the IDE off for formatting for like newlines and tabbing.
I use pretty much the same style in both PHP and Java as the OP's framework. Using Eclipse it's pretty easy to train it to format exactly how I like.
Well, for me it solves a couple issues that gists/github don't.
I think by "libraries" he meant code that is not necessarily part of the framework, like helpers. Database can be deleted or swapped out and everything still works, or it can be used alone.. thus it is a library.
Learn Python and you can do both with it.
Class design is tricky. Objectification is tricky. Sure it's easy when talking about car, animals, food but it is quite difficult to write good, maintainable, decoupled classes without training.
Whoa, you're awesome. Thanks so much for this!
I use PHPStorm and MAMP for local dev on OS X. I push to a remote git repo and deploy to production from the repo as well. The production deploy is done with a terminal command. For general PHPStorm tips, look at the Help menu and click on Productivity Guide.
For me OOP is more about code reusing and simplicity (DRY) than abstraction. When you do class someCleverName { function __construct() { trigger_error('someCleverName firing up!',E_USER_NOTICE); } } $scn = new someCleverName(); You'll magically get a new line in your log (if properly configured, of course). If you create another class that inherits from this one, you'll also get a line on each new instance. No code duplication, no direct function invocation. Want to change the text? you have one single place to do so. That's code reusing and simplicity right there. Try to plan your classes as theme-based containers. All your HTML widgets on one, all your security checks on another, all your templating on a third and so on. Surely some common needs begin to emerge. Your security needs access to a database, but also some parts of your HTML widgets (for tables, dropdowns and whatnot) you _might_ want to move any common DB accessing code from those 2 into a third class, and change their definition to inherit from it. Of course you might want to go on a different path and require some sort of mandatory message passing between classes at instantiation time, more like real world networks. To each it's own. I've found that simple, chained classes as the common base of your repetitive functionality go a *long* way to provide you with simple, maintainable, clean applications and that just fragmenting by it's own sake and abstracting to no end gives you the opposite, which is more like JAVA lol. Also try to use Reflection and function related classes to make your code react to which code is using it, for example to customize the "firing up!" bit I wrote before. Hope it helps. Flames? &gt;/dev/null of course :) EDIT: superfluous semicolons 
While researching this topic, I found that these obfuscators use [bcompiler](http://php.net/manual/en/book.bcompiler.php) (or [something equivalent](http://en.wikipedia.org/wiki/List_of_PHP_accelerators)) to turn the script into bytecode (AKA [opcode](http://en.wikipedia.org/wiki/Opcode) or p-code). Then they add their secret sauce to obfuscate the code and run it on the [PHP virtual machine](http://stackoverflow.com/questions/3380581/does-php-have-a-virtual-machine-like-java). For obfuscators that do this, the best the modified PHP interpreter would do is spit out the bytecode, which isn't human readable. So in many ways, you're correct. The one point that I disagree with is the manual nature of reverse engineering the bytecode to clear text. While hunting around, I found some de-ionization and de-zending scripts that seem to work (although I didn't do a full functional test). I also found several websites that offer automated decoding services as well as several [Fiverr jobs](http://fiverr.com/gigs/search?utf8=%E2%9C%93&amp;query=ioncube&amp;x=0&amp;y=0).
Not really; Standard libs are modified for the platform needs and code archeology is often needed to maintain it. We could work on subsets but this would force us to switch constantly between different sets. Anyway, Sublime has no problem handling it and for everything else there is the command line :)
I just have to say, THANKS.. this is a lot to digest, but its great to get references other than the top 20 that google spits out.. you guys rock!
&gt;you might want to move any common DB accessing code from those 2 into a third class, and change their definition to inherit from it. Of course you might want to go on a different path and require some sort of mandatory message passing between classes at instantiation time, more like real world networks. To each it's own. Dependency Injection (aka IOC) is pretty much the accepted solution to this problem. This really is as simple as passing everything in through the constructor (or setters), but of course you can use containers as well when things get complicated. &gt;Try to plan your classes as theme-based containers. All your HTML widgets on one, all your security checks on another For me I like to keep things more specific and only put what is necessary to do whatever task the class performs inside it. So, instead of having all my widgets on one class, I'd have a base widget class and lots of highly specific widget classes inheriting from it (and possibly themselves).
I used to hate this answer, but read other peoples code, and write your own. You might want to try and create a simple MVC framework and then compare to how others have done it (or compare first and try to replicate). Books are OK, but I don't think anything can compare to actually solving real world problems in trying to understand how to solve real problems.
The theory is that OOP makes code more maintainable six months down the line when someone else is working on the project or you've forgotten how your code works.
That makes it amount to an excuse to not need to comment. :)
This is the problem I'm having I see plenty of examples about cars or animals, but I can't find examples that do real-world things. Even for a simple blog site or something.
A class is essentially just something which has related actions, in my opinion OO can be a very confusing thing to learn so just start where you want, don't be too worried about the different disciplines out there, OO undoubtedly made programming both more flexible and confusing at the same time, you will get people from other languages trying to force you into the "Java" or "C#" way of doing things (or even new methodologies like MVC), but I am of the opinion that people should just get creating to learn stuff and its the best way of realising what tools are available over time. You can start with a database class, which has a construct to connect, a method to do a query etc and you can pass that object to other class constructs, learn about scopes and what a private / public method/variable in a class is, for a database object it should only be initiated once in a project and passed to where it's needed. After that you can start learning about inheritance and polymorphism, but when I was first learning OO I found it got in the way, once you understand how to structure simple objects and how they get passed by reference you can expand upon that. Frameworks are fantastic, but if you don't start learning the basics you will be just going through the motions.
I think you can fairly easily dump the symbol table, it's not the same as having usable code though. edit: you can use [vld](http://pecl.php.net/package/vld) to do that, although it specifically says its not for decompiling stuff.
How about http://pastebin.com/ http://pastie.org/ http://paste.ofcode.org/ http://paste.org/ http://codepad.org/ or anything else you can google?
I would not really learn from frameworks. Frameworks often have some crude idea about how OOP should look like and contain very advanced concepts which are often wrongly implemented. It's not wrong to get an inspiration from frameworks, but learning the core concepts of OOP takes a long time, beacause you need to fully understand what you are doing and having concepts form up in your head.
[PHP Mentoring](http://phpmentoring.org/) is worth a mention too.
You can use [BitBucket](https://bitbucket.org/) with SSH key.
Which are?
If you're really interested in learning object oriented programming you should pick up another language like Java or Python that will force you to design that way.
There are people here that know much more about the PHP internals than me, and as such they'll be much more qualified to debunk these points. One thing that stood out to me: &gt; Tip 5 (Cache your filesystem checks, such as file_exists) Yeah, that's not going to help much.. The PHP docs say: &gt; Note: The results of this function are cached. See clearstatcache() for more details. 
&gt;Is this guy giving worth advice? In my opinion.. No, not really. 1. You should be using a profiler instead. 2. This does not clear the memory immediately. unsetting it merely removes the reference, and it's still up to the garbage collector to collect it, which it does whenever it feels like it. As for NULL, you'd be overwriting the data in the variable. This might lead to faster memory collection, but also waste CPU cycles. 3. The __d**e**struct method is still subject the same issues brought up in #2. Its purpose isn't garbage collection, but ensuring that it terminates correctly. 4. LOL. Need I even comment on this one? 5. Uh.. file_exists [is already cached](http://php.net/clearstatcache) 6. There are many types of databases, plus most cache their results in-memory. Additionally, it depends on what type of query you are executing. Caching is good and all, but this is a blanket statement which is often more wrong than right. 7. [Objects use less memory than arrays](https://gist.github.com/nikic/5015323) **tl;dr**: The guy is full of shit.
Yup, exactly.
Hah it's like hazard pay for programming
You can probably retrieve PHP code back from the bytecode, much like there are programs out there that can put together *some* C code from compiled machine code, but this would only get you a reconstruction of the code so to speak. My point is that even with the reconstructed PHP code you would still need to do some reverse engineering work to actually *understand* what the code does. For instance, given the following original code: class Door { protected $material; protected $knob; public function __construct($knob) { $this-&gt;knob = $knob; $this-&gt;material = "wood"; } public function getKnob() { return $this-&gt;knob; } public function getMaterial() { return $this-&gt;material; } } At best, you'd be able to recover the following from either old school ofuscated code or by "decompiling" bytecode: class A { protected $b; protected $c; public function __construct($d) { $this-&gt;c = $d; $this-&gt;b = "wood"; } public function e() { return $this-&gt;c; } public function f() { return $this-&gt;b; } } It's *possible* to understand what's going on here with some work, but definitely not the same as having the original source code.
But only really good up to a certain level of caching. We have many gigabytes of cached data in our app, and that wouldn't work as well with APC - especially as we run on multiple web heads. We use Redis with a custom "cluster" system over the top to allow consistent hashing, repartitioning and running certain operations over the union of all servers (e.g. keys, sInter, sUnion etc.).
As a real, basic introduction, I found the videos on this site pretty useful. It is just a simple overview and you will want to go elsewhere for more in-depth tutorial, but it helped me get my head around the concept. OOP is a revelation, it is awesome. http://www.killerphp.com/tutorials/object-oriented-php/
psst... those `;`'s following the method &amp; class declarations are superfluous.
[Here you go](http://msdn.microsoft.com/en-us/library/ms439083.aspx).. &lt;sarcasm&gt; you poor, poor soul! &lt;/sarcasm&gt; This should also work with cURL as it's just a POST and as you may know you can also use [cURL from PHP](http://php.net/manual/en/book.curl.php). Click up through the index on the first page I linked, to find some explanation on what the actual calls are on the wire.
&gt; Objects use less memory than arrays Disagree with this one *most* of the time. The link you provided is a very simple test case. In reality most of the time you're using objects for database records it's with something like Doctrine. If you're doing a full blown ORM then the memory overhead of creating objects for each row of results is rather huge, I myself had many issues with Doctrine 1 (back when they were an activerecord implementation) that caused me to have to switch to fetching array results rather than full blown objects. So I would say, if your options are huge complicated objects for database results vs simple arrays, the latter is far better when memory/performance matters. If you are honestly just going to create a simple object with nothing but variables to hold the results (and perhaps some setters/getters), then sure, it does not matter so much.
&gt; Objects use less memory than arrays The way I read his point, was not so much about objects vs arrays. When you fetch a big result set, your client library typically already has it in memory. If you then whip through the result set creating objects (or indeed arrays) out of each record, then you're roughly doubling the ram requirements for that query. So I think he was more saying.. loop over records and process them sequentially, rather than creating objects or arrays out of them if you can help it.
Good point. Every time i sit down to write the hello world script I get frustrated though. instead of print('Hello World'); its.. class HelloWorldApp { public static void main(String[] args) { System.out.println("Hello World!"); // Display the string. } }
thanks, i've used it a bit, seems good to keep sync about the installation and setup of local virtual machines
LOL.. every six months I am going "what the hell did I do here?" time to hack my own code.
Yes I too. Recommend this book. It was so easy to read and understand.
Wonder if this developer is using SimpleXML (or another DOM based parser), or the libxml streaming parser? The first will use oodles of memory, the latter much less.
Right, but the advice in the linked article suggests that if you already have recursive (not looping) code, you should consider putting it in a function. I'm curious what that original code would look like.
The issue there is more likely to do with the sheer number of objects, rather than the issue of arrays vs objects itself.
&gt;So I think he was more saying.. loop over records and process them sequentially, rather than creating objects or arrays out of them if you can help it. That's not how I'm reading it.
I wanted to give him the benefit of the doubt and say, well that blog post was from 2010, but then I read it... He's making way too many assumptions, which are almost all blatantly wrong and this is just another example of PHP misinformation.
or if your bosses change everything all the time. Procedural is good if your going to write it once and never again. But anything else good luck, you will be rewriting from scratch everytime a major feature is changed or introduced.
Starred! I'm going to try this in my next project. But I'm wondering, how did you change the incognito icon to a cupcake? 
It's a custom user I have for demo purposes, simply go into your settings, scroll down and look for the "Add user" button. Thanks! 
Wow, chrome updates so fast I didn't even see that option. lol thanks. I'll try your library in Laravel4 and see how it goes. 
I've earned good money "saving" projects from procedural coding that need updates and no one wants or knows how to edit. Any programmer who thinks his code won't need to be maintained is a bad programmer, code changes as needs change.
Was trying to decide between python frameworks for my next project, now php frameworks are back on the list. Decisions, decisions, decisions... 
Yo dawg, I heard you like caching...
Okay I just tried this and it looks beautiful. Well done. First thoughts are: * Clean up output buffers and display their contents somewhere in the error page. If I do `print hello` and then throw the exception, it appears before the text, though I do have a default output buffer running. * Wordwrap stuff displayed in the main (right hand) column. I have some cookies with long text and no spaces giving me a long horizontal scrollbar. Just a minor UI issue. * I like this enough to add it to my auto prepend file. Provide a simple function or static method that you can just call, have the base exception handler registered, and be done with it. * Consider packaging a phar version. [Box](https://github.com/kherge/Box) makes it really easy to make phar files, you just write a box.json file and then do "box build" in the same directory.
I came here to say this. We moved over to Vagrant boxes provisioned with Puppet and it's taken all of the hassle out of local development.
While there are only small differences, building on one OS and deploying on another will ALWAYS bite you in the ass eventually. It's been said already below, but here is another vote for Vagrant. It's [super-easy to set up](http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/) - especially if you don't worry about provisioning, but even then its not so tough. Provisioning becomes even easier and more useful if your whole team shares the manifests.
Quick question since you seem to know your shit and would appreciate the help. I have a bunch of data saved to the session, this data needs to be able to be saved temporarily from page to page, but it's a couple of arrays. Would it be faster to store this in a database, and upon each page reload grab the data, insert it into an object? 
 $videos = array_diff(scan_dir('/uploads'), array('.', '..')); foreach ($videos as $video) { echo '&lt;a href="uploads/'.$video.'"&gt;'.$video.'&lt;/a&gt;'; } You may want to strip out the extension when displaying the name etc
&gt;..So, instead of having all my widgets on one class, I'd have a base widget class and lots of highly specific widget classes inheriting from it (and possibly themselves). That's what I meant by not fragmenting for it's own sake. Let's say you need to programmatically create HTML. I don't think I've done that in a long, long time, but let's assume you need it. My approach is to have a html.class.php file that defines all the html widgets I need as functions. &lt;?php class HTML5{ public $widget = ''; function __construct(){ //your initialization bits go here } public function aSelect($items=null, $idx_selected =0,$multiple = false){ //iterate over your items, tag them and infer which one should be selected. $this-&gt;widget = '&lt;select&gt;..'; return $this-&gt;widget; } public function atable($ar_headers=array(), $ar_rows=array()){ // build the table markup, cute headers and all $this-&gt;widget = '&lt;table&gt;blahblabllha'; return $this-&gt;widget; } } $html5 = new HTML5(); echo $html5-&gt;atable(array('Name','Address'), array( array('Steve Jobs','One Infinity Lane, CA'), array('Bill Gates','Somewhere, WA') ) ); This way you can extend almost indefinitely this class by adding new widgets. Same interfase for all widgets, almost no code duplication!. (you could echo $this-&gt;widget in a __destruct() for even less code duplication) The alternative is dozens of classes (and files) scattered all over your project with only two methods each. Add namespaces and all the other brouhaha and you're suddenly coding in Java.
done
I think that the most important benefit of OOP is encapsulation. I'm currently working around some year old procedural spaghetti, and it's maddening. In order to understand the impact of almost any one-line code change, I have to get the entire code base into head. Encapsulation, loosely-coupled systems, the functional programming ideal that a function should return one value with no side-effects -- the result of all these are that you can reduce the amount of code that you need to load into your head in order to make changes or understand what's going on.
Well, this is the nature of the beast. Java, and other mature OOP languages, aren't necessarily useful languages when you're trying to accomplish a task like printing hello world compared to scripting languages. (I know PHP is OO but still, born from scripts -etc) The barrier to entry with Java is pretty large, so maybe try some other language like Python. The point is that with most OO languages, there's going to be some boilerplate that you need to import, write, reference, or whatever to do most anything. Get past that. Understand why the language needs that. Also get a good ide (like eclipse) that can help you automate some of the boilerplate and also can help you learn the language. One of the hugest benefits of using Eclipse and Java or Python is that they can use real time code completion and stuff like method hints and so forth that can really speed development and help you learn the language... 
I intend to test this: http://www.php.net/manual/en/function.chdb-create.php
I take it this (http://codereview.stackexchange.com/questions/23874/looking-for-architectural-feedback-on-my-php-mvc-framework) is you? 
My local development machine is Windows and my deployment servers are Linux, and I've almost never run into any kind of issue between them.
You should develop for the web. Android (and iStuff and others) are environments that are turing fast into web-friendly environments to lure web devs in their platforms. If you develop for the web you'll find that the two most important things are backend architecture (which you may or may not be in charge of) and front end developing. The modern middle tier is, IMHO basically about marshalling data to and from the backend (DB, memcached, whatever) and to and from various frontends. That's in fact the same thing that mobile apps are made of. You code a nice looking app (using web friendly stuff like jQuery and CSS and HTML5) that needs to reach trough the net to feed on bits. 3/4ths or more of the apps in your mobile device need the net to be useful. That's a big thing! Now: how to marshall data in the most efficient, simple way from the backend to the frontend and back? PHP hands down. Java is too bloated for that specific purpose. 
I think (and I may be wrong) he's saying instead of: function myFunction() { // stuff foreach($myArray as $val) { // do something } // stuff } he's saying you should do: function myFunction() { // stuff iterateMyArray($myArray); // stuff } function iterateMyArray($myArray) { foreach($myArray as $val) { // do something } } edit: And I don't see how this would possibly help. It might de-reference the iterated objects or it might not if $myArray is still being used after. Depending on what you do in // do something. Unless myfunction is a long function (which clean code practices mean it shouldn't be) or $myArray is gigantic than I can't imaging holding onto a few extra objects can make much of a difference.
Sure is!
I work on Windows with WAMP and PhpStorm and deploy on a CentOS machine for production. The only things to keep in mind are to make sure that you have all the required PHP extensions on both development and production environment, to always use forward-slash (/) when working with directories (Or DIRECTORY_SEPARATOR) and also to always make sure that the case in your files and folders name is the same as-in the code since Windows doesn't mind about the case while Linux does.
^ Really? Captain Obvious obviously reported for duty today. heh
Okay, glad you figured out the difference. Glad to help.
Right, that was my point. Trying to give him the benefit of the doubt (I don't know why). But in the real world objects created for a database result are rarely a simple object with 3 attributes, they're usually complex beasts that are likely to use much more memory than just fetching an array of results.
Well, what are we talking about here? * What type of database is it? (RDBMS, OODBMS, ...) * Which database is it? (MySQL, PostgreSQL, MongoDB, Redis, ...) * How is it configured? (in-memory storage, write-to-disk, queued or direct writes, ...) * How is the session management set up? (file system, memory, ...) There are many factors which come into play here. &gt;Would it be faster to store this in a database, and upon each page reload grab the data, insert it into an object? A better question might be "Would it make any noticeable difference if I went with A or B?". Unless you're operating a website which is under heavy enough load for it to become a problem, using normal sessions stored in the file system works just fine. In these cases, replacing it with something faster would not be a worthwhile exercise, as it would not lead to any noticeable speedup and therefore no improved experience for the end user. I suggest you read the following: http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html
&gt; Includes a DamnitServiceProvider for painless integration with Silex This looks great. Thank you!
I was curious. I have no answer to any of those questions besides knowing it's a MySQL DB. Site isn't launched yet, it's just a project I'm working on in an attempt to teach myself. The issue is I grab the information from DB, use sessions until the user leaves the site, and store it back into the DB. I'm having trouble figuring out the last part as I don't know when a users session is destroyed and what not. Cookies are out of the option as I don't want the data to be tampered with.
&gt;The issue is I grab the information from DB, use sessions until the user leaves the site, and store it back into the DB. [And what is it that you are trying to solve?](http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem) &gt;I'm having trouble figuring out the last part as I don't know when a users session is destroyed and what not. Yeah, well... PHP doesn't really work that way anyway, so...
Do you have a list of good stackoverflow articles? they're good reads for someone like me. There isn't a problem and I was trying to micro optimize. Thanks! :)
Please share!
RE: my issue about losing apc_fetch() https://github.com/krakjoe/apcu Someone is porting the user cache functions in apc into it's own library.
Never said procedural programming is bad, but **I have seen** more messy projects, using procedural programming than using OOP. If OOP helps OP to manage better the project resources, then it *is* a technological advantage. The Linux kernel is coded using procedural programming, yet it is modular, thus using OO design.
I would properly also add if ($file-&gt;isDir()) continue; or you would properly get into a mess :)
and how i can do with debug? that's the only problem that remains if i choose vagrant
thanx for the suggestions
we used netbeans, but it's too slow. sublime is faster but the xdebug plugin doesn't support remote mapping :(
Looks great from what I saw! However, I do want to say that the name could limit adoption. I've been involved with 2 projects who wouldn't use FCK editor (before it became just FK editor) because of the obvious joke. It ended up being too time consuming to rebrand it, so we had to go with something less "offensive." (Not that I found its name--or yours--offensive personally, but clients and their users would have.)
you're putting the file directly into a web accessible directory? so i could upload a .php file to you and have apache execute it for me now that it is in that directory? food for thought.
That's from 2010. Use this instead: https://wiki.php.net/internals/references
I use XDebug only for improved backtraces, I don't even try to get Breakpoints and the like working, because they always end up sucking for editor/IDE integration. You can simply: $ vagrant ssh $ tail -f /var/log/whatever Done. As for your list of cons for virtual machines: &gt; work with local virtual machines (servers without gui), always through samba shares. Problems are: the setup of these virtual machines can be annoying, and difficult to sync with others; the lack of debug in localhost; the memory requested to keep open a virtual machines (suppose 1gb ram or more) They can use NFS not Samba which for me has been excellent, no problems at all. Setup involves running `$ vagrant up` once you've build the box or the Vagrantfile + puppet manifests. Do it once, never do it again. They are not difficult to sync with others if you provision your system, so whenever its brought up they have the same extensions, software and config. Lack of debug? Maybe. I'm sure you can set it up with XDebug Remote, I just don't care. I run a headless ubuntu server on 512mb of ram and it doesnt give me problems. You don't need a super-computer to use vagrant. If missing the debug breakpoints (potentially) and whatnot is the only actual con, then it's not much of a con list.
I completely agree. I think I'd have problems including this as a dependency in a company project.
Well, admittedly I'm giving him the benefit of the doubt :p
I'll look into it, thanks for your post.
That's a good point. I wouldn't be against re-branding, this is about the best time to do it, but only if necessary, and if there's other good ideas for a name.
Your first three points are on the (unwritten) list of things to do (you know, as opposed to the written list of things to do in the README). How useful would you actually find having a phar of this? With Composer, it's already very easy to handle dependencies for a project.
My pleasure! I use Silex a lot, and the exception page always felt a bit shoddy, this library was initially designed with it in mind.
yes, but xdebug is the killer feature! and xdebug needs localhost to work properly/easily with breakpoints nothing to add to everything you've said, vagrant is very nice
Yup. The switch to ckeditor was great. 
I would strongly advise changing the name. Ignoring the problems developers might have writing up proposals to have something like this added to a project (and that is a huge issue), it just comes across as a pet project and not a serious product. I have a similar problem with GIMP. 
`time()` is always in UTC... Well, *somewhat*... UNIX Timestamps are timezone independent. The value returned by `time()` can be safely converted to any timezone. The system has to take into consideration its current timezone to return the proper UNIX Time. Right this second, the value returned by `time()` in New York is the exact same that in Tokyo.
On the contrary. There's no time like the present to change the status quo. Slightly profane library names should be the new standard and *you*, my friend, can be its pioneer! Here are some ideas for your framework components: * Damnit (Error Handling) * WTFRU (Authentication) * AssLoad (Class Loader) * ReachAround (Request Router) * SpeedBall (Dependency Injection) * BootyCall (Event Dispatcher) * Gobshite (I18N) 
For your limitations: * You can install xdebug on your virtual machines. There are [standalone tools that use xdebug in PHP](http://xdebug.org/docs/remote). * There are tools that are available or can be made that can make these deployments very easy and automated. * Using a dynamically filled drive will most likely be your best friend when it comes to solving this problem. Which option I feel is best: I will always recommend virtual machines without a GUI. I run all my web instances in 512MB ram with CentOS 64bit minimal to match my production environments. You could easily create a virtual machine, configure it to a basic minimal, and take a snapshot to work similar to how Vagrant boxes work. Run a SAMBA server on this system and dedicate a static IP on an address like 192.168.56.1xx on a host-only network and you shouldn't have any problems connecting to it. Then you just specify your hosts file to point to the IP and you can test it locally and debug without problems. You could even use an IDE to make it work even better. Also shy far away from stack solutions like xampp/wamp/mamp. If you're developing a product as any sort of professional, you should be developing it for the specific platform and not a platform that will never be used. I've been burned a few times using WAMP/MAMP in the past, but it was for more advanced things like PECL/PEAR and compiling extensions I needed. I personally run a virtualbox CentOS machine over a host-only and NAT connection, then connect to it via a SAMBA share on my windows 7 box. I haven't ran into any issues with it. 
Although I think his comment is helpful, I'll agree it could have been more positively intoned. Perhaps "Don't forget to secure your upload with appropriate file filtering". The question itself was fairly easy issue so might be a fair reason to suggest it.
I can make my own phar, it's not a must. I am just anal about keeping my code organized, and for stuff that I don't intend to modify, I like to pack it up and throw it in a library folder so that I can browse it and have a sense of everything that's there.
Decent advice, PHP5 introduced the DateTime and DareTimezone classes which really simplify working with dates and times. Instead of GMT though, I always use UTC. I think they're the same though.
But aren't all code for methods shared between the instances of an object? So why would an extra instance take more memory than needed to store the attributes that are unique to that instance? Do you mean the case where each row object in the result may contain other big objects as attributes apart from the columns of the result? 
&gt; modular, thus using OO design. Huh? That's a serious stretch. Modular means it farms out part of its function to optional pieces of code. Nothing OOP in that unless those modules are objects of defined classes, have inheritance, are instantiatable, and separate definition from instantiation. Just to name a few core OOP concepts that don't apply to this analogy. You may as well say that using include()s is OO design.
Did you look at chef at all? I'm trying to push us towards vagrant and so far I'm leaning towards chef, but not used either to date.
What? No! Don't just use the PHP 5 date and time zone classes to grab the offset, use them to do everything! $utc_time = time retrieved from the database $date_obj = new DateTime($utc_time, new DateTimeZone("UTC")); $date_obj-&gt;setTimeZone("America/Los_Angeles"); $display_date = $date_obj-&gt;format("Y-m-d H:i:s"); Plus, this way you no longer have to care about DST because it's handled for you.
&gt; For example, name is common to all form elements, yet you would have to have a name argument on every method instead of just a base class Not necessarily; you could use class properties for that; when you instance the class into an object, you require the name (and class and whatever) as arguments. No need to subclass for that. &gt; And if you perhaps decided to add some data-xxx property to your form elements you would have to do it to every method rather than in one place. Again, you can manipulate $this-&gt;widget inside your class! you could use _destruct() and add or delete bits of text from it before leaving. No need to subclass for that requirement either. &gt;&gt;The alternative is dozens of classes (and files) scattered all over your project &gt; Aside from that there's nothing wrong with that.. It's wasteful and shows poor craftsmanship. It introduces lots of places where things could go wrong, requires more effort to babysit and it's an obvious rookie mistake :-/ on another /r/php thread someone pointed to this great video [Stop Writing Classes](http://www.youtube.com/watch?v=o9pEzgHorH0) 
Loose coupling is a concept from OO **design**.
When I'm building a site where users can set timezones, I use date_default_timezone_set($users_preferred_timezone) when initialising stuff. I save timestamps to the database using integer fields (ie. UNIX_TIMESTAMP() in MySQL) and display them using date() with nothing fancy. I've never had any problems with it. It helps if you think of Unix timestamps as a fixed point in time around the world, and date() is just converting it into the user's timezone for display purposes only.
i've tried most of these "standalone" tools, and almost every one of these has problems with remote debugging. thanks for sharing your experience!
it's not "my IDE sucks", it's "PHP debugging sucks". i mean, in python there's pdb, it's so difficult to have such awesome (and basic at the same time) env feature in php? BTW, Netbeans has problems too with remote debugging, and is getting worse version after version. What version do you use (on Windows, clearly)? 
Sublime Text 2 is not an IDE. I personally use it because every single IDE I've tried is a Java behemoth (they often can't get "adding text at the same speed I'm typing" right) and tries to do too much for me (like PhpStorm enforces some weird formatting style - can't be turned off, bug not fixed after a year)
http://vimeo.com/7403673 and in word form: https://msmvps.com/blogs/jon_skeet/archive/2009/11/02/omg-ponies-aka-humanity-epic-fail.aspx
It's been there [for more than three years](http://toys.lerdorf.com/archives/54-A-quick-look-at-XHP.html) now... what's new? that it's on github?
Actually, he said he is putting them in ./uploads, implying that they are going to be in .../htdocs/uploads. And I didn't come in here and call him an idiot or anything, I was trying to help by sharing a valid security concern. Thanks for overreacting and being a total prick, really helps.
Why are you the only PHP developer not making their own framework?
I'm not sure about that. Firstly, why? Does your boss check the composer.json? The only place it shows is on the exception screen, which is only going to be in the development environment anyway. I guess it depends on how tech the layer above you are, and how much they care about a silly name.
This looks excellent, similar to Kohana's Exception Handler but potentially better if you can see the code locations of each item in the left frame. It might be worth shifting the first line of the exception to the top instead of using that space for "Uh oh!" as I feel that would get annoying after a while. Also, would you look into making a Laravel 4 service provider? I'm normally happy to pull request stuff like that, but... deadline this week and I've sent about 10 PRs this week already.
Hi Phil! The first line of the exception is already on the top - the exception's class name and its message, or are you referring to something else? As for making a Laravel 4 provider, I'd love to! I don't have much experience with Laravel yet, but this seems like a fun and fairly straight-forward exercise. I'll look into it still today.
I've opened an issue for this, hoping to get some input: https://github.com/filp/damnit/issues/1 A planned feature for today (hey, I just woke up!) is to either remove or add the ability to disable the 'damnit' branding on the tio right of the `PrettyPageHandler`. Maybe that would help with those that have concerns with the naming. 
So then it's new that it's on reddit. That's... a good thing, I guess. 
Fair enough, but its not like you can't switch between multiple applications for different purposes. One True Dev Environment doesn't really work well.
Don't worry about making that L4 provider, Taylor is giving it a go now. I was talking about this: http://d.pr/i/6hOP Put the blue where the black is, and then you dont have "Oh No!" in massive letters or "RuntimeException" twice. Does that make sense? I dont mind if you do it or not, as long as you understand my suggestion :)
It's similar in syntax to [Opa](http://opalang.org/), which was recently posted. I'm sure there's some sort of connection, at least subconsciously.
Use stackoverflow.com for these type of questions.
Very well, I asked the question [here](http://stackoverflow.com/questions/15434470/trouble-converting-multi-dimensional-array-to-dropdown-with-optgroup-using-codei).
Check username.
http://troll.me/images/10-guy/sure-thumb.jpg
I don't see any info on what license this falls under.
This is a terrible idea on multiple levels.
As if reading complex PHP code wasn't bad enough already... Good job Facebook! :)
Its the developers fault if they do not separate it. Plain and simple. This is really just another template system, and I'm willing to bet, one that is significantly more efficient than others out there.
It's displayed in capitalized letters 'LICENSE' -- twice. * [PHP License](https://github.com/facebook/xhp/blob/master/LICENSE.PHP) * [Zend Engine License](https://github.com/facebook/xhp/blob/master/LICENSE.ZEND)
The original post is, but I have kept the post up to date so it is still relevant and current. There is a note to that effect in the post. I updated it this month in tandem with the publication of my PECL article in Web and PHP magazine.
Those are for the licenses for PHP and Zend. Not this actual project. Unless it's implying it falls under those licenses. I've been dealing with a lot of 3rd party licenses lately with the company I work for and it can get a bit interesting when lawyers are involved... and by interesting I mean annoying.
xhp: if you're looking for something worse than Smarty, we've answered your nightmares. What was the business case for this?
Given that this is a PHP extension, it makes a great deal of sense to fall under both the PHP and Zend Engine licenses in some cases. HipHop is also PHP/ZE licensed, for example. They might not be the best licenses, of course...
I'm ccurrently working on a project using codeigniter and twitter bootstrap(because I suck at design). So far I really like it, specially because of the MVC-approach, but also, because of the many libraries and such (check out tank_auth for access management for instance)
It's the devs fault if the presentation layer isn't separated from business logic. And the real power of XHP is in creating custom tags (which is clearly what PHP built it for). You basically enable your frontend devs to implement their own markup language. Here's an example: &lt;h2&gt;Recent Activity&lt;/h2&gt; &lt;xhp:newsfeed user_id={$session-&gt;user_id} limit=30 offset=0 /&gt; Now whenever I load this template, I can have all of the logic associated with creating a newsfeed automatically handled. My frontend guys can write in a language they're comfortable with and move complex components around as they please.
Hah! Actually for this project I was looking at Code Igniter as well (and planning to use bootstrap for some thing, too). Though really, I want to try something new. I saw Paul Irish's video elsewhere on reddit today, where he shows using Yeoman. and it got me thinking about stepping up my game a bit and trying something new.
I'm a solid, long time PHP guy and I want to see what "my people" think first.
This stinks of ColdFusion
Wtf. If PHP syntax isn't desirable, or isn't feature rich enough, *use another language*. Don't shoehorn stupid shit like this in.
Unless you use node.js as backend, Javascript does not rule out the usage of PHP, because Javascript is frontend, PHP is backend. They have nothing to do with each other, and can and will communicate through Asynchronous requests (AJAX, commonly speaking).
How does syntax highlighting function? Does this freak it out?
An explanation of your reasoning would provide substance to your statement.
There has been a lot of laravel hype lately but fuelphp is my go to framework these days. Everything you love about ci but a lot more modern
An easier way to transition between PHP and HTML in your views. The business case was Facebook wanted a new template engine that worked well with HPHP.
Where to begin. - Neither HTML nor XML shouldn't be inline with your PHP. - Throwing raw data at the interpreter is sloppy and bad. - XML is awful. - There's already acceptable ways of dealing with XML, and ways that are better than this.
PHP and XML. Yup, that's a fit.
Most javascript frameworks still requires a source for their models, and that's where PHP comes into play (unless you plan on using node.js, which would mean your app is 100% javascript). Whatever you do... don't go CodeIgniter. It needs a massive rewrite but that will unfortunately not come. There's more recent frameworks like Symfony, Silex or Laravel which would be more suited for the task. What I would do: - Use Laravel for the API / database access. - Use Angular for everything browser related. 
This makes perfect sense. Thanks for such a simple way to look at it.
Very, very old, not sure why is this the top story on here. Chances are Facebook doesn't even use it anymore; I know I wouldn't in any case, and most likely any self-respecting dev wouldn't consider it either.
And as I know people will ask: Yes, this *will* kill APC, simply because APC won't work with new PHP versions anymore. But don't fear, you will still be able to use the APC user cache using a separate extension: https://github.com/krakjoe/apcu
Yeah, how dare he not provide you with swift and free support in sidestepping PCI complicance laws!
Will this kill all other opcode cache projects then? I suppose it would unless you can build without ZO+. I hadn't thought about that before. 
I said: &gt;Let's say you need to programmatically create HTML. I don't think I've done that in a long, long time, but let's assume you need it. You offer: &gt;&gt;html.class.php &gt;That's from about 6 years ago. I'd hazard a guess you will be using the mysql_ library as well. You are rather inexperienced with PHP. Hopefully you can realize this, it is no shame, the stupid thing to do is continue to pretend you are a guru. /thread
Why did you type html.class.php? Is that what you still call classes? Or have you not done any programming for 6 years? Or did you copy paste it? Anyone that has done any amount of PHP programming is over that naming convention. It's hardly just that though, your class was a fucking abortion, and you don't understand basic OOP principles like inheritance. Dude, stop thinking you're awesome. It's the worst mistake a programmer can make. E: Also, why would you give an example of something you haven't done in a long long time? Why not something recent? Do you not do any OOP now?
My favorite thing about PHP Storm (and other modern IDEs) is the ability to follow code through a large project. Grab a fresh install of a framework you've never used, setup a breakpoint on the first line of index.php, and ctrl+click your way to knowledge.
If you don't enable ZO+ you should be able to use other opcode caches. I'm not sure though whether alternative caches will really stand a chance now that PHP has a "native" cache.
I assume this will be better than APC? I'm not familiar with what this will do in the end..... 
The idea is that it will be more stable and actually work for new versions, whereas APC would often trail behind by many months.
Speaking of which, what is the status of apcu, is it ready for prime time/production?
Temp laying systems are a good option, yes. 
If time is not a critical component, I'd go with server-side javascript if you can choose. I find it to be a more flexible language compared to PHP (self executing closures, scope chains, data type prototypes, etc etc) and it's future proof, since the future of the web and HTML5 depend on it at the moment. It also enjoys a better reputation than PHP, though it's as easy to shoot yourself in the foot with it as it is with PHP (be sure to look up and read about javascript gotchas)
I was exactly in that spot and man, this is a *great* opportunity! Get out of your comfort zone! There's a big trend with full JS apps, and I'm not saying this is *the* way to go, but it's worth trying it, even if that's to come back to PHP afterwards. You can only gain from that. On top of my head, you can look into Amber.js or Angular.js for popular client-side JS frameworks, or you can try something more modern/more risky like meteor.js which will literally blow your mind: http://meteor.com/ (I've only tried the examples so far so I can't say how it is in "real life"). Don't forget Atwood's law: "any application that can be written in JavaScript, will eventually be written in JavaScript". So keep up to date with JS, even if you stay on PHP.
&gt; Unless you use node.js as backend Isn't he talking about exactly this? :) you can't (realistically) build an app primarily in javascript without using server-side js, and node.js is the go-to choice for this.
Well, personally I have a framework I've built over a few years. That's what I always use, it's like an extension of my mind at this point. Regardless, you should use what the project needs. Nothing more, nothing less.thats the best I can say about that. Additionally, I feel the need to point out that you can make a complex app with client side js. Using one of the many NOSQL databases the provide a REST interface and a bit of Ajax, and you just completely removed the "need" for a server side language. Although, I can't say it would be secure in any way. 
premature. have you paid attn to their github pull requests? not something id put in production
~~If~~ When this kills APC, maybe there'll be another shot for the property accessors RFC. One can only hope.
ASP seems to do a fairly nice job of it as long as you do it the ASP way. I can totally see it useful if you have designers in the code but it's still one of those things that needs to be kept on a short leash.
I too would like to know this! The closest that I have found is nettuts.com 's php tutorials. good luck!
I wasn't sure, he sounded like he was mixing things up ^^
Last time i used SimpleXML i ran into huge problems with empty tags, boolean values being treated as strings, arrays of data and pretty much everything that is not a plain 5 line XML file. I had to switch to DOMDocument and parse that shit myself.
Some oddities tho. Search for these things to get odd results: 'if' shows CSS's @keyframes (was hoping for PHP's if) 'php' shows PHP's abs 'css' also shows CSS's @keyframes 'x x' shows PHP's in_array Also, using voke.fm works fine, but www.voke.fm has JS errors that stop the search working.
There will certainly be another shot at the property accessors RFC, just maybe not in its current form :)
FWIW we're building our app with ZF2 and our interest management tool uses backbone. The two work seamlessly together, you can check it out here wripl.com, the backbone app syncs with ZF2 REST endpoints beautifully.
Pretty much this. In my world SimpleXML isn't even an option. It's DOMDocument, or XMLReader/XMLWriter if I happen to need a SAX parser. It should be noted that SimpleXML and DOMDocument are not actually two different parsers - they both use libxml to parse. They're different interfaces to the same library. SimpleXML is very limited compared to DOMDocument. Also, being able to cram everything in to a 1-liner doesn't necessarily make it better.
&gt;How does syntax highlighting function? Does this freak it out? I'll venture a cautious guess and suggest that it depends on you highligting engine (i.e. most likely your ide).
The fact that there is a whole bunch of constants like NO_EMPTY_TAGS in the PHP documentation that don't work and never have been is just terrible.
Didn't know that was available. Back then the comments told me about non working stuff and it seemed as a generally well known problem.
How can optimizer+ shared memory work when php is run as a fastcgi application? Based on my experience with APC and fastcgi, the caching becomes useless.
&lt;this_breaks_everything /&gt; edit: using the newest version w/php 5.4 also, why would that example be a one-liner? you gain nothing from condensed php code. but despite my original comment, i am just as happy about the progress as you!
How is it **better**? Or rather, what has changed over the years? Isn't this possible with 5.2 from 2006?
Not sure what you mean by "mask some content." Could you elaborate?
I need to make it so that for a credit card number field, the number provided is fully masked by X's except for the last 4 digits. I am trying to build this into CF7 plugin on WordPress because I already have forms built with that n want to add cc info functionality. I know Gravity Forms plugin already has it but I can't figure out how it's done.
Aha. I'd just use substr to limit the output to the last four digits: substr($ccnum, -4, 4)
* 3 - `&lt;input type="password" name="cc[]" maxlength="4" /&gt;` fields * 1 - `&lt;input type="text" name="cc[]" maxlength="4" /&gt;` field Then you've already got it separated for your PHP.
Good point, you can omit the 4.
Does ZendOptimizer+ still conflict with xdebug? The "old" version - before ZendGuard - did. 
Thank you man.
&gt; you can't (realistically) build an app primarily in javascript without using server-side js I'm not sure the exact interpretation you mean by this, but sure you can. You just implement an [authenticated, if need be] api on the backend in any language you like (node, php, python, w/e) and call it from a client js app. Most of the "app" will be js code then, just not your data access / storage.
I don't completely understand this. I don't get the syntax. What are the 1 and 3? Pardon me I am very new to PHP, only been working with it for like 2 months.
You would use 3 input fields of type "password" for the portions of the credit card number you want masked and 1 input field of type "text" for the last 4 digits. Using `cc[]` as the name will make the values accessible in an array. `$_POST['cc']` would be an array, `array('1234','5678','9012','3456');` **EDIT** Sample &lt;form method="post" action="form_test.php"&gt; &lt;input type="password" name="cc[]" maxlength="4" /&gt;&amp;nbsp; &lt;input type="password" name="cc[]" maxlength="4" /&gt;&amp;nbsp; &lt;input type="password" name="cc[]" maxlength="4" /&gt;&amp;nbsp; &lt;input type="text" name="cc[]" maxlength="4" /&gt;&amp;nbsp; &lt;br /&gt; &lt;p&gt;&lt;input type="submit" name="submit" value="Submit &amp;raquo;" /&gt;&lt;/p&gt; &lt;/form&gt; Accessible in $_POST as array (size=2) 'cc' =&gt; array (size=4) 0 =&gt; string '1234' (length=4) 1 =&gt; string '5678' (length=4) 2 =&gt; string '9012' (length=4) 3 =&gt; string '3456' (length=4) 
I'm imagining that the reason OP would want to do this is to prevent the user of the web page from retrieving the whole credit card number just by visiting the page, as opposed to protecting the number from shoulder-peepers whilst putting the numbers in.
Well, the question was to implement a mask to a contact form, so unless he's referring the displaying what the user typed after submitting, this would be relevant. Also, separating the form fields like that could actually handle should-peepers in addition to making it easier to only pick out the last 4 digits for display.
What, really? You don't think there are *any* languages on the market today that are better than PHP? *Really?* ***Really?*** 
it mentions that right in the readme. as long as you order it correctly it *sounds* fine.
.... this sounds scary. 
Do the pages you're making he AJAX calls to also have session_start() in them? Some code examples would also be very helpful for troubleshooting. 
Thanks man, even from my awful description you were able to help, much love. Thanks - Matt. 
Sorry, but: - What kind of output does the function Random() provide? - What kind of input does the function Random() expect? - "if it is write": What do you mean with "it"? Do you mean a string "write" with write? If not, what else?
I´ve uploaded it here so you can see the whole code. it worked fine with cookies, but my teacher told me i have to use sessions. http://itp2.bplaced.net/Webtop/index.php username: admin password: 1234
I'm guessing OP means 'right' instead of 'write'. Sounds like OP it trying to build his own [captcha](http://en.wikipedia.org/wiki/CAPTCHA). If that is the case, don't. Use [google's recaptcha](http://www.google.com/recaptcha/captcha). Or better yet: don't use a captcha, they are annoying and ineffective.
100% agreed - but if OP wants to compare a user's input with a random string, he (or she) maybe intends some kind of lottery? Or guessing game, I miss the right words.. maybe OP will deliver some added insights :-)
No, I am trying to build something similar to Satoshidice with a UI that the user can see the result first hand. (I am an amateur and so I am awful at explaining things.)
You can watch [thenewbostons](http://www.youtube.com/user/thenewboston) php tutorials. It's mainly videos, but it's complete and he has a full playlist of them [here](http://www.youtube.com/course?list=EC442FA2C127377F07).
I'm sorry I don't know Satoshidice or what Satoshidice is. But apparently, you got help.
Clearly, but not with php 5.5
Dont ever mask with HTML.. you can can change disabled, maxlenth and more with the dev console. do the masking server side, and never let anything more out.
Uh.. &gt; ReferenceError: isset is not defined &gt; if (isset($_SESSION['nettop'])){ &gt; draggable.js (line 79) And the code: $(document).ready(function () { if (isset($_SESSION['nettop'])){ var top = $_SESSION('nettop'); var left = $_SESSION('netleft'); $('#net').css({ top: top, left: left }); } [....] }); You're trying to access PHP variables in JS, but they're two different domains.
I'm not quite sure what the practical reasons would be for using old-school fastcgi standalone processes with PHP 5.5 would be so I have know knowledge of that, however AFAIK sharing cache between workers works fine with FPM^[\[1\]](http://stackoverflow.com/questions/12860487/is-apc-opcode-cache-shared-between-php-fpm-pools-workers).
Thank you man, much appreciated!
So they're trying to guess a random number or is this like a CAPTCHA? First, $_POST is NOT a function. It's just a variable. It's an Array that stores everything that was transmitted by the HTTP POST method. The other "easier" method is $_GET, because those variables can easily be seen in the URL. That might help you a little bit for debugging whatever project you're working on. --- Now to answer your question... on one page you'd want to have some HTML that contained an input field called "guess" for instance... and you want to submit this form to whatever is checking the guess (could be the same page or something else, doesn't matter). &lt;form method="post" action="guesschecker.php"&gt; &lt;input name="guess" value="0" /&gt; &lt;input type="submit" name="submit" value="submit" /&gt; &lt;/form&gt; Then in your PHP code you'd want to check that the page has been submitted, and then do your comparison. &lt;?php if (isset($_POST['submit'])) { // Display congrats or failure message. if ($_POST['example'] == $random) { echo "Hello Mrs. Cleo, you guessed the number correctly!"; } else { echo "Better stick to card counting rainman, you guessed incorrectly." } }
those people think they are special, that's all
shouldn't you be using === instead of == ?
Nopes, just enthusiastic. Feeling special would be a tad arrogant, wouldn't it? ;)
Probably nothing. Just hoping for some traction for Laravel. 
I like isset($_POST['input_name'])
Oh, god. I was thinking of giving Laravel a go, but if it is "the PHP framework for web artisans" I'm feeling kind of put off. I know it's just a phrase, but what kind of developers does that kind of talk attract?
That's good if you're checking a single value, but to check if a form has been submitted I think it makes more sense to do this: if($_SERVER["REQUEST_METHOD"] == "POST") { // Whatever you want done after the form has been submitted. }
Fair question. You certainly can use strict comparison, but for brevity's sake I decided against it. 
Very cool. That's the sort of thing I'm interested in hearing (and it looks like you have some Twitter Bootstrap flavor going on with your site as well).
That seems to fit my example of a $_POST variable just fine. What specifically are you unsure of? The random number part?
No, it's more that for some reasons there is a blank screen (for the picture and because it is null and if you haven't filled in the text area, you will win) and when you load up it comes up at the bottom a PHP error, or did you not get that?
I didn't submit anything yet. And I got a picture of a 6 when I was loading from my phone. EDIT: I just tested it and am not getting any errors at all. Seems to work fine. (PS. You should upvote everyone who responded to you, good etiquete). 
Considering they would give Zend Framework their own space, I doubt they will actually give Laravel one. 
Will do, thanks for everything! :D
Someone just decided to make the I-Framework experience )
See above. You are using PHP in your JS code. 2 separate languages...
You can actually check multiple values with isset : if(isset($var1, $var2..)), I only learned about this recently.
Yes, that was the Problem. Thank you very much!
You *could* do this, but you still have to check if the fields you are going to use are there, so you might aswell do the latter directly and assume the form has been submitted if they exist. The opposite, checking if the request method is post and assuming the fields are there if so, is not a good idea, since someone could have spoofed the request to change or delete some of the fields being sent. 
Ignore marketing and evaluate the tool in its own merits. Nobody should use this framework because they like the sound of being a "web artisan", but nobody should avoid the framework for that phrase either.
I agree. I like Laravel, L4 is great, but why on earth do we need framework specific stack exchanges for it? This is a terrible idea. StackOverflow is just fine.
Sweet! I don't mind. Cool site.
Just to be clear, it needs people to **upvote** questions to at least 10 votes. You only get 5 votes on a proposal so go and vote for the lower-ranked questions :)
Simon: How would you say this differs from a tool like [Geotools](https://github.com/toin0u/Geotools)? I've been using this beast for a little while and it takes care of some of the same functionality, but I feel like its possibly further along. 
Ok, fixed the www. thing. Just a tip, if you have "php" or "css" as a keyword in the search, it will only go through php or css terms, and just perform the search as normal for the specific language. So you could be better off just doing a search for whatever the user highlights+" php" or +" css". Or reversed with the language at the front I suppose, if you want to allow the user to edit their search slightly more easily. That explains, for example, why abs shows up for php, because abs is alphabetically the first function. Let me know if you find any other issues and I'll try to fix them.
Whaaa? Yeah, that's news to me. Thanks for the tip.
I've been finding it interesting to see the New Relic profiles of other people's sites. My typical experience has always been that most of my response time is spent in the database (although we made some performance improvements and upgraded our db server to SSDs; now the time spent is evenly matched between PHP, DB, and Web External). How is your site spending 1 second in php? That's fairly hard for me to conceive of. 6 second page load time? What is this site?
A big reason for the RFC not getting pushed through was the changes that would have been needed in APC that Rasmus did not want to make.
One of the arguments against property accessors was the added complexity for the available opcode caches. I dont think APC going away will necessarily help, but maybe having the cache integrated into the core will help make sure that any problems could be addressed upfront.
I do hope so.
PHP 5.5 is alpha, why are you even bringing up production?
Techically if your PHP is sending a page of output to the browser you CAN access php variables from javascript, but only in the .php files. You can assign the values of the php variables to js global variables that can then be referenced in .js files. e.g. in index.php (before you link in the js files, add the following): if (isset($_SESSION['nettop']) { $v_nettop=$_SESSION['nettop']; } else { $v_nettop= "default_value"; } echo &lt;&lt;&lt; EOF &lt;script&gt; g_nettop = "$v_nettop"; &lt;/script&gt; EOF; Now in draggable.js you just reference the global javascript variable called g_nettop.
Using APC with PHP-FPM has worked well for me for a very long time now. The APC cache is shared nicely between workers. I'm guessing (hoping) "Opcache" can do the same.
&gt;Zend Optimizer+ has been merged into PHP 5.5 - now called "opcache" are you guys fucking retarded? all i said was ZO+ is buggin out left and right with 5.5 builds and the topic here is that it's been merged. celebrate all you want but its all premature. "alpha", no shit dummy.
SimpleXML. A laughably ironic name. Once you actually start dealing with namespaces (or namespaced attributes, ack), it becomes anything but simple. At least they fixed that godawful memory leak with circular references, though. 
What the... Oh man. Why has it taken me 10 years to find out about this :~( 
Just as a sidenote, you may aswell just show 6 buttons with 1-6 on them, rather than making them type a number and hit submit. Yeah I know its just a play project, but usability ftw :)
Not just the variable scope fubar though. There is no isset() in javascript or jQuery. 
I'll be in there, good to see that it'll be recorded
How do I mask server side? What should I look into? Where to start reading/learning how to mask/filter server-side?
Never output it to the user? Shaunc had the right idea, only output the last four digits.
For data that a user enters, that needs to be masked, do this: &lt;input type="password" /&gt; That will make everything typed look like ******* If you're going to be pulling the info from a server, do something like for(I =0; I &lt; str_length($str); I++) { $new_str .= "*"; } you NEVER want to send information to the user unless they are meant to see it. If you send it to the user, assume they will be able to read it in plain-text. Also, if this didn't make sense to you, hire a pro because you're in over your head.
The creator of Laravel, Taylor Otwell, agrees with you on that one. I believe the next iteration of Laravel (4) that is due anytime now, leaves this out.
That's right!
Here is what I would do: My design would be a single page application (SPA) using heavy use of AJAX calls. Tech used is HTML5/CSS/JS/JQUERY/PHP/MySQL or whatever database we need. My single index.php file would load in config settings, output an almost empty HTML file with header includes (jquery, etc) and a couple of container divs. My jquery ready function would dynamically load a custom js file and a custom CSS/HTML file which contain your initial "skin". Later you might have different skins for different languages or themed skins for different clients. Horror of horrors I would not support non-Javascript clients!! The javascript file would contain a number of methods all stored in a single literal object called ui_travel_ed. One method (ui_travel_ed.init) woud be called in the jquery ready function in a callback function from the dynamic load that loaded in your skin. The init method in turn would call a ui_travel_ed.setup_events method to setup the events for all the divs and buttons in your skins HTML - these events (such as onload, onclick) map to run different JS methods in the ui_travel_ed object. When a user performs an action one of the JS methods will be executed and this will perform actions on the view such as hiding or showing divs, or it will make AJAX calls to submit/retrieve content data from the backend using ajax calls and then present this data to the user. The AJAX code on the backend is PHP and will verify the client is genuine (via SESSION data), process the request and return status and content data in JSON format back to the front end. The AJAX gateway code will call PHP classes on the back-end with business logic, database abstraction etc, which may well use L4 or a similar framework. I think this architecture keeps you doing PHP on the back-end but forces you to implement a more modern front-end using jQuery/AJAX Calls, SPA etc. All views are in HTML/Javascript, your model is the database abstraction classes (L4 framework) and your controller code is a mix of the Javascript, Ajax gateway and the PHP business logic classes. So thats what I would do....
The thing is that APC doesn't work with 5.5 at all (and not really well with 5.4 either). Considering that ZO+ works fairly well :) I do agree that merging it for 5.5 was premature, but for wholly different reasons.
I used to hate Smarty too...
I'm actually just starting (started yesterday) on a new project myself. I'm going to be using Backbone.js to build the frontend, with some Twitter Bootstrap for visuals. For the backend I will be rolling my own REST API in PHP with a MySQL database. I cannot see the advantage of running a framework to build a REST API. It just seems like it would be pointless loading all those extra files etc when my goal is a fast and lightweight API. There will be a front end site apart from the app that I will likely throw together in CakePHP - it will just be a few simple pages / order form / etc. But, that is going to be done in a way to run on a separate server anyways, and register new users through the apps API.
As others have mentioned, it sounds like you're using the wrong tools for the job. SublimeText is *not* an IDE. You know that (previous comment). It's a text editor with some helpful plugins. I've tried using it with remote debugging on a local VM, but as you've seen it is either not possible or is too cryptic to be able to easily set up for someone not willing to dedicate hours to the cause. You should use git or mercurial, and keep between 3 and 4 environments running on remote servers: 1. Dev - What your developers will push to when they are busy coding new features, 2. QA - What your QA dept. actually tests new, complete but untested features on, 3. Stage - What contains your "final", "ready" environment that can still be tested by QA, Devs, managers, etc before final production push, 4. Prod - What your customers actually see. Should be a 100% mirror copy of Stage most of the time, or at least should be when you reach your pre-determined publishing dates. Your developers should push to Dev *only*, and they should clone that environment. Commit new changes to local Dev, then push to remote Dev once a day. Each developer should create a new branch for every single new feature. Never commit directly to master. Each developers should have a VM running *locally*, not on shared Windows drives. Stop using a text editor for development, since it is obviously not meeting your needs. If Netbeans is too slow, I swear by the speed of Phpstorm (which supports remote debugging like from a VM). If your development machines would be negatively affected by dedicating 1GB of RAM to a VM or two then you need to start bugging management to stop treating your jobs like cost departments - you *are* the product. You need proper tools for your job, *not* dinky little shitty computers. If they won't spring for that - it's an employee's market right now! Find a new job that will appreciate you enough to throw a kick ass machine your way!
There are still questions regarding installation, updates, general management etc which don't fit into Stack Overflow (or more precisely, their anal definition, "every question must definitely be programming and not issues that are clearly related to programming but don't have code in them").
Right. Point is, he's muddling the client-side and the server-side, when the two are separate.
What is "abnormal" about your input data, and what does "normalized output look like? Are you trying to convert a complete address from a single string into something else? Quite realistically, APIs such as what USPS provides work because they maintain a large database of every valid address in the US. For you to recreate and maintain such a database is such a massive undertaking (read: impossible) that there's no reason to not be using the API. No matter what the restriction is as to why you cannot use an API, circumventing it would still be cheaper and easier than trying to do it yourself. Unless I am not understanding your question?
I think it should look like this: echo $i==2 ? $i : $x; You're pretty much telling echo what to show, based on the comparison.
Drop the two 'print' statements. Because $i = 3, this will be evaluated as : echo print $x; This first prints out $i. print returns 'true', then this is left: echo 1; So this is probably what you want: echo $i == 2 ? $i : $x; This would also work: $i == 2 ? print $i : print $x; But I would not recommend this!
Ok thanks, that clears things up. I wouldn't do it, but why don't you recommend $i == 2 ? print $i : print $x; 
This is indeed the point of the ternary operator - you can easily use the values returned from it as input for a function or a variable assignment. 
Either is okay. I actually prefer your method of "logic first, then actions," rather than defining the action first for this particular operation. For example $i == 2 ? print $i : $i++; Something like this wouldn't work with "print" at the beginning. But to PHP it does not matter. It's just a matter of preference and readability.
It's highly uncommon :) The ternary operator is in particular used to return a value, depending on some condition. If you want something like : $i == 2 ? print $i : print $x; I think it's better if you'd instead type this as : if ($i==2) { print $i; } else { print $x; } This is is indeed subjective ;)
Sorry, not going to watch videos to find out something that could have been in a bulleted list. How about we rename this to "Video Tutorial on Laravel 4?
Not a bad set of videos. But it's more of a tutorial on how to get started with laravel 4 (along with some custom stuff by the author). Probably doesn't cover everything that is new in L4. If you do watch it I would advise against skipping around because he uses some of his own tools throughout the videos which might misrepresent what is actually in vanilla L4
would rather like a list, and then another simple convert your laravel 3 to laravel 4 how to. watching videos is a waste of time.
Yes, what is "abnormal" do you want to cleanse the addresses? You might have a rough time without an API, or a MASSIVE db of geodata. Why don't you want to use an API?
Lol I forgot to say, if you're wanting to take a string and split it into street, city, state, and zip, you're going to want to jump into some regular expressions. If you don't know regex that well, I'd suggest checking out "Regex buddy" it's good stuff
It is intended simply as an API revamp of my much older (2006) Geographic Calculations in PHP library: http://simonholywell.com/post/2006/12/geographic-calculations-in-php.html So the goals and objectives are very different from Geotools. It is based upon a far simpler philosophy and it will never be a complicated library built upon other dependencies or with non-core functionality such as geo-coding, ancillary interfaces (CLI), geo-hashing, etc. It is a library for distance calculation between two points on a pre-defined ellipsoid and thats it :)
Setup an Address class and a USAddress class to extend the Address class. Then if you ever Address is for generic information shared in all address types, USAddress class has the US specifics for addresses. Then if you wanted to eventually allow addresses from other countries, you just have to create another class or classes that extend Address.
If you *need* to use a ternary operator there, this would be almost always better: $numberToPrint = ($i == 2) ? $i : $x; echo $numberToPrint; Otherwise it's probably best to go with a simple conditional "if". Readability is important, specially if you intend to understand what you wrote ten months from now. 
why no API??? you could just use the google maps API for validation. otherwise, youll have to provide some examples of good vs bad input so someone can give you a decent response.
Looking good. You should probably include in the doc how does it compare to var_export in detail, so that the benefit is clear to the visitor.
I once had to write a function that would split up a full string (like, entire address in one field) into separate street, zip, state, etc fields - It's not perfect, but if you'd like, I could pastebin it :)
ternary works like this condition ? ifTrue : ifFalse; so if you put $n = 1 &gt; 2 ? 1 : 2 it would store 2 in n 
Just remember that creating a variable only to echo it right after (and not use it again) is silly. If you only use a variable once, chances are you don't need it at all.
This is a good example of when not to put the action first -- because depending on the result of the conditional, two different actions are performed. If the end result of the ternary is the same action -- print/echo, define a variable, etc. -- then no sense in repeating it, so the original syntax `echo ($i == 3) ? $i : $x;` is much better. Edit: Downvoted for agreeing. You're a fickle bitch, Reddit.
"which is determined by the value of 'page' in the query string"
I've always called "page" a url parameter, and "index" the value. PS. Please don't actually program this. Apache does an excellent job of serving pages if you just put the directory and file name in the URL. There is little reason for you to write it again.
The proper term for that (according to [RFC3986](http://www.ietf.org/rfc/rfc3986.txt) which is the standard regarding the format of URIs) is a **query component**. It is usually referred as a *query string parameter*.
It doesn't only serve the page, it's part of a blog engine. There are many different files in a "theme" that do different things -- for example, in a Wordpress theme, "post.php" loads one single post, but "index.php" loads the latest posts, and depending on the query string, it determines which "theme/template file" to load. My engine does something similar.
Thank you very much
A [quick search for Laravel questions on SO](http://stackoverflow.com/search?tab=votes&amp;q=laravel%20is%3aquestion%20closed%3a0) reveals a ton of (open) questions that are about installation, updates, general management...
The issue is that I have over 700,000 addresses to normalize. Nothing is abnormal per say, there is just many ways to write out an address. I'm looking for a way to compare addresses that are written differently. 
Nothing is abnormal, I just need a way to compare two addresses to see if it is for the same place.
I need to do this over 700k records, possibly numerous times. Unless the API has unlimited access and is lightening fast, I see it being a burden. 
That is exactly what I am looking for. I would be very thankful if you did.
Well, you did not explain what youre trying to accomplish or what "normalize" means, but in the end all you needed was something to parse strings and identify address parts. As far as i knew, you were looking to validate commercial vs residential or determine if they are real, or determine if they are within the lower 48, or to get missing components such as zips or area codes or fucking counties. But i digress. While I strongly doubt youll achieve 100% accuracy without a map API, you never explained the purpose. Please understand that if youre going to ask for help, the accuracy of suggestions relies on you not being so secretive about what you really need and why you need it. Ive used the google maps api to analyze over a million addresses, while it wasnt "lightning fast" which data manipulation tasks never are, i was able to do my calculations, which was to find the closest physical location (out of ~50 possibilities) for all existing customers.
You're probably looking for ##php (that's two #'s) on freenode.
I saw another comment that you had posted: "Unless the API has unlimited access and is lightening fast, I see it being a burden." The API may not be lightning-fast for 700k records, but I guarantee it is faster than creating your own solution. Letting the API queries hit for ~24 hours (this is a definite worst-case scenario for API calls, this is like maybe 5 to 10 calls per second) is still going to be faster than trying to make your own solution. Otherwise, if you have fairly "clean" address data, and you MUST develop it in-house, then go with several regexes and then filter out any "unprocessable" addresses for manual review. You can filter numeric digits as house numbers, any two-character words as a state, 5-digit numbers at the end of strings as ZIP, etc. I can't give you a better solution without knowing what the input data ACTUALLY looks like. I'm just assuming you have a string that is like "123 Anywhere Ln., Springfield, MA 01234". Parsing an actual address from that is tough manually, but again, such services and APIs exist to extract proper data from these with relative ease (Google Maps, USPS, etc.) If you DO go with the manual route with absolutely no API, if you can parse a ZIP successfully, you have half the work done. You can discard any city and state data in the input, because the ZIP already includes this info. Somewhere on the internet, there is likely a database of ZIP to City/State information. From there, you just need to parse a unit number, street, and possibly "address line 2" information. If you're trying to physically send mail to these addresses after parsing, your solution could be slightly error-prone, yet still provide a "functional" address to which a postal carrier may deliver.
Thank you very much for your feedback, much appreciated. The interesting thing about this project is that the addresses were scraped from online resources, and I do not need them for any functional reasons. They could be converted into hashes for all practical reasons. I just need to know which addresses should be identical. You are correct about the zipcode. I guess if I can regex a zipcode out and then numerically filter the rest of the address, then I should get a major chunk of the issue.
The addresses will be for businesses, and I only need to identify which addresses are identical. When I say Normalize, I mean to process the addresses to be uniform to compare against each other.
Library is now called Whoops, and can be found here: https://github.com/filp/whoops
Well, step one would be to strip out every single address that is === to another address. That may reduce your sample to below 700k. If it were myself, my next step would be to produce a script first groups every address for a single ZIP into one array, then compare house numbers against each other. If any collided, its complete address would be printed out. Then I, as a human, could visually check each address against its' collision(s) to see if they are indeed duplicates. The odds of collision are low enough that it is not too time-consuming. There are 100,000 possible zip codes, and house numbers are distributed through a range of (typically) 1 to 10,000. For your sample set, having a house number and ZIP collide with another entry is low enough that manual review would not be a very daunting task at all.
btw, there is another irc channel on freenode which is quite good but requires you to register your nickname so when you login /msg nickserv register &lt;password&gt; &lt;email-address&gt; when you connect to freenode /msg nickserv identify &lt;password&gt; The channel itself is ##php
You could get away with a string parser function for this, but itll come with a slight margin of error. If you need to be absolute certain, i would choose the API method. Good luck, sounds like a fun project!
Laravel 4 has full code test coverage, everything's tested. Every new feature added has tests coming with it.
Like I said, it's not perfect; I had to write this for an import of about 340,000 database rows; it failed quite often but it was due to the fact that a lot of times things like "road" would have a typo - you'll see in the array of words that trigger an end, I included a few common errors. I wouldn't use it straight-up, but maybe as a starting point or as inspiration to write your own :) I wrote it like 3 years ago when I got my first developing job. I've grown quite a bit since, haha Just pass the string in to the function and you get an array back :) http://pastebin.com/ne56HC3H
Don't forget to use a programming language and a text editor.
&gt;http://example.com/?page=index It's called not SEO friendly. edit: downvoted? well that explains why i dont see any of your sites on the first page of google!
What you're advocating isn't even a micro-optimization, but a micro-micro-optimization, which is just A Bad Idea™ in any language until you know you need to do so. But if the "unnecessary logic" of some one-use variables are of grave enough concern to you that you would actively seek to avoid them, you probably shouldn't be using PHP in the first place, as it's obviously the wrong tool for the job. That being said, one-use self-documenting variables are often times (most?) the more readable, easily understandable, and maintainable alternative, anyway. Consider this jibberish example: $isFooRed = strpos($foo, 'red') !== FALSE; $isBarFast = $bar-&gt;getSpeed() &gt; $avgSpeed; $isThingsBig = count($things) === PHP_INT_MAX; if ($isFooRed &amp;&amp; ($isBarFast || $isThingsBig)) { // do stuff } vs.: // If foo is red and bar is fast and things are big... if (strpos($foo, 'red') !== FALSE &amp;&amp; ($bar-&gt;getSpeed() &gt; $avgSpeed || count($things) === PHP_INT_MAX)) { // do stuff } The former is more easily scannable, less prone to future developer error, and (if I can be a little less practical for a moment) it just plain looks better, too.
Just once I'd like to share something with the intent of being helpful without someone taking it so damn seriously. I was commenting on @-Mahn's example; nothing I said was wrong.
The one on the bottom reads better for me and if you're used to reading code figuring that out isn't hard. You're also assigning variables for no reason and all this is going to do is slow your script down and consume more memory. I'd rather see 2 comments and a well constructed if over variable abuse any day of the week. cryode is right.
I don't feel that this is the place to be promoting a series of free tutorials with the intention of converting to paid customers. OP also has a self-interest in Lavarel if you check his post history.
what if you have ssl? it must be https
It might require you to register your nick first, but I'm not usually on the channel so I don't know for sure.
Right, I heard from more than one core developer (paraphrased): "We wont merge this because it would require a lot of work to be done to update APC, and the only person who knows how to do that is Rasmus, and he doesn't want to."
it'd be a lot easier to explain PHP to someone who has a background in JSP because it works in a similar way.
The '?' operator is such a terrible thing to have to google. What does php ? mean Took me ages to find out it was really called the ternary operator. But more to the point, I think it's confusing and hard to read. It may save a few lines, but it compromises readability, so I steer clear of it. Just because a feature is there, doesn't always mean you should use it. Of course, your mileage may vary. 
That's fine if those type of questions are gonna stay open on SO. They are pretty inconsistent though, questions in less popular tags often stay open despite not being about programming at all (cf. the seo tag). Anyway my original point still stands, that SE is for *communities*. SO's laravel tag is not a "community".
Hi! By popular demand, it was renamed to 'whoops', as there were some concerns with the original name. The new repository is available at: https://github.com/filp/whoops Cheers!
I'd go with url argument, personally.
"query string" is the entire part after the question mark. So on this URL: http://example.com/?section=blog&amp;page=index The query string would be `section=blog&amp;page=index` and each of the two parts would be a "query component" or "query string parameter".
I actually do like video tutorials, but a bulleted list would have been nice.
What you are doing is: echo print $x; So you are echoing the result of print which is true. What you need is echo $x;
I'm using your package with Laravel4. It's working nicely - just a quick question. I can't seem to find where I could change protected $loginAttribute = 'username'; There doesn't seem to have a conf file or a setter method somewhere? Thanks. 
Step 1: develop your php app in an object-oriented way. Step 2: get a fake compiler and don't tell the java engineers that it's not necessary.
Stop with the useless fizz buzz bullshit. It does not indicate if you are good at any language.
To be a pain in the ass, the query string isn't the entire part after the question mark. &gt; URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ] As you can see the fragment, or url fragment, is after the query string.
Not to be pedantic, but I hope this is not what actually went into production. You'd probably want to do some error-checking at each step :)
The provided User and Group models are there mainly as examples, or defaults more accurately. You should really be creating your own models that implement the same interfaces, or extending their models and overriding any values or methods you wish to change. This is how I've been doing it for PyroCMS.
Massive +1 on this, I've been playing with it during its development stages and I'm a big fan. Thanks to its intelligent use of interfaces this is completely configurable for any project, wether it uses a framework or not. * Step 1: Install Composer * Step 2: Install Sentry * Step 3: Craft your models with the interfaces as guides * Step 4: Use the same API, whatever framework you're rocking This is a stellar example of how to use Composer and PSR-0/PSR-1 to build a framework agnostic package.
Did I miss something? When did sessions become evil in web services?
I just glanced at the documentation for this thing. Static methods, exceptions for flow control... Yikes. Edit: And failed login attempts seems to throttle user accounts rather than the active session, which should never be done as it's a potential DoS attack.
And it'd be a lot easier to explain with a background of PHP, but thats not the case. You are comparing bananas to oranges