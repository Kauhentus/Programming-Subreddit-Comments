My eyes!!
At work, I don't have a choice. I use XP on the desktop, but we have a number of VMs running SQL Server 2000 which also run Windows 2000. It's a licensing thing.
What about gmailÂ¿?
711.97 php 5.2.10-2ubuntu6.4
&gt;allow_short_tags=0, nope :p Come on, what serious coder doesn't have control over that? &gt;fancy widescreen-monitors Most coders use them in this configuration: http://jamesmckay.net/2007/03/vertical-monitors/ As for: &gt;PHP isn't english prose, and shouldn't Yes it is. It's written in english so you can read it, not ones and noughts as the computer would like it. It's you opinion and you prefer it, but your argument it wrong. I like this: &gt;and then come back when your scroll wheel/pgup/pgdn wears out you don't even have a sideways scroller wheel. So that whole statement is a bit retarded. Come back when you invent the sideways scroller and pgleft and pgright. Lol.
&gt; I guess the poster is trying to suggest that string parsing should be favoured to concatenation, performance-wise I have no evidence, but I'd guess the string parse is slower. But it's part of PHP and is the prefered way of coding, so as a coder you should work with the language. My IDE (PhpEd) will find all the "abc{$d}ef" variables and show me their values. Which is nice :)
&gt; Come on, what serious coder doesn't have control over that? ... I don't even know what point you're trying to make here. &gt; I like this: &gt; &gt; and then come back when your scroll wheel/pgup/pgdn wears out &gt; you don't even have a sideways scroller wheel. So that whole statement is a bit retarded. Come back when you invent the sideways scroller and pgleft and pgright. Lol. Way to cut out the important part, how you wanted to write your code in newspaper column format. You know they are narrow, right? And no, I seldomly need sideways scroll, on account of - you know - widescreen monitors. Also, I don't need to invent pgleft and pgright, home/end work in 99% of the cases. In the remaining 1%-cases, ctrl+arrow works. In regards to "most coders" using two monitors in vertical orientation, over the past 5 years I've seen that 3 times, 2 of them not being coding-related but rather because of bad administrative tools with automatic scrolls to top and 60+ rows of options.
I only use OOP when its benefits are apparent. 
I just wanted to put your comment in context, I see a lot of weird set ups suggested on /prog/ that newbies may confuse as commonly used or correct. You set up is neither, but it works for you. PEAR suggests: &gt;keep lines at approximately 75-85 characters long for better code readability Zend say: &gt;The target line length is 80 characters. That is to say, Zend Framework developers should strive keep each line of their code under 80 characters where possible and practical. However, longer lines are acceptable in some circumstances. The maximum length of any line of PHP code is 120 characters. and lets be honset here, they are the experts, not you or me. When in doubt keep to a standard convention. I suggest you petition Zend and PEAR to try and get this standard updated!
&gt; I just wanted to put your comment in context so you turned &gt; And if you want to write your code in the format of a newspaper column, go right ahead - and then come back when your scroll wheel/pgup/pgdn wears out. into &gt; and then come back when your scroll wheel/pgup/pgdn wears out Yeah, this "discussion" is officially over :)
Has this been extracted from Squirrel Mail or Horde? I'm assuming they both have similar libraries within them (or perhaps they don't?) Nice anyway - a good one to file away for future projects. I could imagine using an IMAP account as a logfile storage ans sorting platform, and this would be great to implement that. 
Caching is key. Even per-page-load caching of things like loading settings or dictionaries of IDs-to-definitions helps if the code reuses them in various places. Remember functions that load this kind of stuff (caching them in the process) - either by commenting them with a special tag or by keeping them in a separate include file. Later when you're ready for it, apply a generous helping of memcached and improve the caching by storing this data in an application-wide in-memory cache. Shared code is key - using similar constructs twice is a sure way to forget to modify one of them when you figure out a better way. I would say the wisdom to figure out when to make something generic vs. leaving it alone comes with age (or the length of time you've been programming). PHP is not the easiest language for making things generic (C# is my personal favorite for this, although I never really get to use it unfortunately, PHP is just so much better for the things I do). If you can find a framework that already has a set of generic helpers for tasks that recur most often, use it. Be really anal about handling user input. Always sanitize data that gets displayed, and data that goes elsewhere (be that an xml file, a database, whatever). Design Patterns are you friends. Get the [book](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), there's a [PHP version](http://www.amazon.com/PHP-Architects-Guide-Design-Patterns/dp/0973589825) although I'm not sure I have the right link there, the cover looks strangely wrong and my copy was borrowed by a friend a while ago. Umm.. oh, and ORM (Object-Relational-Mapping) tends to become the Vietnam of Software Engineering very quickly for large projects. It happens when you try to scale or to change/refactor. Be wary and try to stay close to the data model. Too early in the day to try to lay down any other pointers. :(
But a newspaper column is 70-80 characters wide, the PHP standard is 80 chars wide. PEAR is 80... You're using a non-standard setup. You are also a troll and a bit of a twat - haha! :) Which I'm delighted to find out :) Looking forward to the pg-left and pg-right, the sideways mouse wheel and the petition to Zend ;) &gt;Yeah, this "discussion" is officially over :) Agreed.
I use Symfony.
Do you use prepared statements for every query with external input? I really like prepared statements, but (at least with mysqli) you just cannot nest them w/o a second DB connection (or at least I haven't figured out how to). Example: looping through a prepared statement result set (lets say category) and inside the loop running another prepared statement (lets say, getting news by category). I would get "Commands out of sync error" and I believe it is because I was trying to prepare a statement before the category statement was closed. I hope that all makes sense. I typically use prepared statements for any add/edit, or getting a single item by id, but not usually for a search or browse type query.
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.
Unless the result set is big, you can always wrap these prepared queries into a class/function that reads all results and returns them all as an array.
Thanks for the tip. I kind of do that now, I have a class that extends mysqli_stmt and gives me a fetch_object() method. It basically uses result_metadata() and fetch_field() to build an object for a row like fetch_object() does with plain old mysql. Really helpful in a while($object = $newsSTMT-&gt;fetch_object()) type of loop. This is more like a row wrapper than an entire result set wrapper though and I may look into making an entire result set wrapper if it means I can nest prepared statements. EDIT: I think reddit removed my underscores.
Flourish is great!
For simple statements I have functions to fetch a single row or even a single field, as well as more specific yet useful ways to obtain data, such as: fetch_hash('SELECT id,name FROM table'); that would return an array of id=&gt;name pairs. &gt; I think reddit removed my underscores. _formatting help_ doesn't tell, but \_ is the same as \* for formatting purposes. Use \\\_ to prevent that.
NERD FIGHT!
See, that's where we're different.
Wow, that was supposed to say *as* few...
Wow, guess you need to go read up on good coding practices. Symfony sucks.
Both Squirrel Mail and Horde have IMAP stuff (and probably POP3), but they are both GPL. I wrote fMailbox from scratch so it can be MIT licensed like the rest of Flourish. Like other parts of Flourish, I try to provide for security, so fMailbox will upgrade the IMAP or POP3 connection to secure if possible via the STARTTLS or STLS commands. In addition, all of the text content and headers are converted to UTF-8. It is primarily focused on allowing websites and apps to accept mail as a form of input. Obviously the app itself would probably need to parse the Subject or body to determine what to use the message for, but it should provide a solid base to work from. I've tested it across a number of freely available IMAP and POP3 servers, including Gmail, Courier, Dovecot, Windows Live Mail, aim.com, gmx.com and Zoho. Unfortunately I don't have a paid Yahoo mail account to test there, but I can't imagine most people would use that for an automated mailbox anyway.
I'm resisting the urge to write a PHP routine for that...
When working with money, scientific data, or other important numbers, don't use floats. Keep things as integers, until you want to print them out. Example: number_format(((237325 * 3) / 1000), 2);
concatenation is easier to read, and I've always heard string parsing is more resource intensive.
That statement doesn't help anyone. Symfony follows MVC and has a good OOP architecture. Why do you think it sucks?
You should look at http://lithify.me
Was just trollin'. :-( I've worked with Symfony before, and it left me with a bad taste in my mouth. It was a complete pain in the ass when something small would go wrong.
* I use OOP extensively * Sometimes MVC, though not always * PHP Doc * Memcache most queries &amp; config settings * Single quotes * I pre-declare all parameters/variables/methods/visibility within my classes * I use a PDO singleton for all database access * I don't like any of the off-the-shelf templating systems for the presentation layer so I usually end up generating an XML document with PHP and using and XSLT file to transform to HTML.
Floats are evil but if you have to use them use round() before calling number_format.
&gt;Memcache most queries &amp; config settings You memcache your configuration settings? For what purpose? Security?
You sound way too perfect to be real.
autoload was the only benefit I needed.
Freudian slip?
I seem to count 5 errors, but I'm a noob at php. I can't seem to find any combination of 4 of these that still works. &lt;? class **simple_class** { **public** $my_variable; function __construct($str) { **$this-&gt;**my_variable = $str; } } $object_variable = new simple_class("hello"); echo $object_variable**-&gt;**my_variable; //And the lack of the second $ here. ?&gt; Also my apologies for not understanding reddit markdown.
&gt; this particular framework is modeled after the MVC pattern ... &gt; it does not include a model layer
Oh, another PHP framework? You don't say! Does it use MVC? It does? WOW! Does it have a broad goal in mind? Does it have something new to bring to the table? It doesn't? I see. So it glues together some concepts it likes and doesn't really bring anything new. I will never understand why people think it's better to rewrite a router and dispatcher for the 100000000000000000th fucking time instead of just integrating with a modular framework like ZF. I contend that writing frameworks is subconsciously a way for developers to impose their own workflow into the entire application development process. If everyone on the project team uses their framework, they don't have "put up with" ideas and concepts they disagree with.
My guess is that he did it for the purpose of learning and I thought it was quite fun.
No, don't include one. You're just going to fall into the Rails trap. If you include a model layer you limit your framework to only doing basic CRUD applications, making applications that use web services or alternative data stores or creative queries ugly and hackish. Take the Zend approach, maybe include some ORM but don't actually provide a manged Model layer, the onus is on the user to provide and set up the model layer.
On the mac I'm really a fan of Coda, I haven't really found one on windows that I really love.
Try taking a walk.
Nice trick!
I'm also working on a php framework and seeing so many frameworks out there, and many of them similar in nature, sometimes I wonder if it would be better for all these developers to get together and work in something bigger and more robust, perhaps. However, I agree with you that it is so much fun. (Btw, in case you want to see mine, [here it is](http://code.google.com/p/orange-php/))
hi.. i just installed Notepad++ (been using EditPlus so far) and it really looks amazing. i'm already a big fan of the autocomplete feature.. *can you please suggest some other essential PHP plugins? * P.S. is there an inbuilt PHP code beautifier / formatter too?
I seem to use list() more than most people. I also use ' in my HTML instead of " because it's allowed and it makes it easier to to do this: while (list($url, $name) = mysql_fetch_array($res)) { print("&lt;a href='$url'&gt;$name&lt;/a&gt;"); } (It's been a while so I forget, there may be the need to uses an "@" to suppress an error when the last fetch is attempted.) I really hate seeing code like this: while ($row = mysql_fetch_array($res)) { printf("&lt;a href=\\"%s\\"&gt;%s&lt;/a&gt;", $row[0], $row[1]); } It's not the use of printf() I object to, it's the unnecessary and uninformative use of $row[] and the the unnecessary and ugly use of " when ' would have done. Of course, the hideousness of the abusive formatting screams for itself! :-) EDIT: I'm having some trouble with formatting the ugly example. There are supposed to be double-quote marks being escaped by the back-slashes. I've tried escaping the backslash but that only changed the problem, it didn't fix it. EDIT2: I'm leaving it at this. Ignore the white-space after the back-slashes.
Well, I use FunctionList all the time, and RegexHelper is useful, and I'm a big fan of the VibrantInk theme. I use the Droid Sans Mono Dotted myself, very clear, easy on the eyes font for coding. I do most of my coding in NetBeans, but NotePad++ is just so quick for a small project/edit etc...
Neat, this will definitely come in handy. Breaks on something like echo "\""; though, as far as I can tell there isn't a trival way to make NPPexec escape strings for the shell.
1) calm down 2) why should we settle for code written by someone else? That's one of the perks of being a programmer - if we don't like crap code written by someone else, we can write our crap code. :D 
It is possible to save the selected text to a temp file first and pass that to the PHP commandline. Would that solve the escaping problem? I just checked: this works fine, the only difference is that you need to include the '&lt;?/php' header at the top of the selected section, however all PHP syntax is respected including quoting styles. Example NPPExec settings: set TEMP\_FILE = $(SYS.TEMP)\php_cur.php SEL_SAVETO $(TEMP\_FILE) :a C:\Portable\Server\Home\php\php-win.exe "$(TEMP\_FILE)" Could be a good starting point...it would be great to select any bit of code and have NPPExec add the &lt;?php itself...
Your PHP code prints markup? Personally, I'm a strong believer in separation of concerns and I think that markup should not be kept in the code, but specified in the template. That way you would be empowering the developer to change it without having to rewrite the code. Anyway, regarding your concern with the ambiguity of indexed result sets, why not simply switch over to using [associative arrays](http://se2.php.net/manual/en/function.mysql-fetch-assoc.php)? $row['url'] $row['name'] One more thing. Is there any reason to why you are still using the mysql extension rather than MySQLi or PDO? the mysql driver has been superseded by MySQLi and isn't available in PHP5 by default. 
thanks, gets the job done. you should though fix the disappearing underscores in your comment. 
Done!
Not having Notepad++ anymore is one of the only things I have disliked about moving completely to Ubuntu. I could run it in Wine, but it's just not the same. 
I use [SciTE](http://www.scintilla.org/SciTE.html) when running in Linux. It's not quite as powerful as Notepad++, but it is better than most other text editors. Notepad++ and SciTE also share the same backend (Scintilla), so it's pretty familiar to use. The main difference is you have no GUI for editing config/settings, you have to do that manually in the .properties files.
Very useful, [Kate](http://en.wikipedia.org/wiki/Kate_%28text_editor%29)'s built in Konsole can be used for the same functionality.
Oh hmm, yeah I used SciTE 3 years ago for doing some HTML work but for some reason didn't realize it would work out as my PHP editor. I'll give it a try again, thanks.
This.
I agree, a templating system is usually better. However, I started writing PHP in 1995 (I'm the guy who discovered and named "variable variables" - when I told Rasmus about it he was quite surprised but that, upon reviewing the code, he could see how it was happening) and the templating systems when I was full-time active with PHP ranged from bad to non-existent. It's a personal thing but I find associative arrays ugly compared to just using a simple variable as I've done. I don't find that the characters "row['']" add anything and so I just use the remaining characters such as $url. My example used the mysql function because that's what was current when I was writing a lot of PHP (it actually didn't exist when I started because MySQL didn't exist - we used mSQL at that time or Postgres95 and Perl) and, as a result, it was natural for me to use it in a contrived example.
&gt;However, I started writing PHP in 1995 I'll make the assumption that you're still using PHP, for which case I ask you the following question: Why haven't you evolved your practices as the language matured? Relying on outdated practices such as these makes your code not only hard to maintain, debug and reuse. It's also potentially *dangerous* to to the security of your website. &gt;I'm the guy who discovered and named "variable variables" - when I told Rasmus about it he was quite surprised but that, upon reviewing the code, he could see how it was happening No disrespect, but I'll remain sceptic to that claim. Even if you did discover variable variables.. I don't know.. good for you, I guess? Also, I'm unsure what value it gave to the discussion other than providing me with random trivia. Again, not trying to be disrespectful. I don't wish you to misunderstand me as being hostile, I'm just being honest =). As for the query, there are multiple reasons to why an associative array is beneficial. Here are two from the top of my head: * Relying on the index position isn't always reliable. Altering the table definitions by adding or removing fields could potentially break your application. You would not have this problem when referencing the field by name. * Encapsulation. When working with a template engine, you might not know which fields are actually going to be used, and in what way. Also, since the printing takes place in the template rather than the loop, you cannot use normal variables as the data is treated per result set, not per row. 
&gt; I'll make the assumption that you're still using PHP Bad assumption. I went to work for IBM in 2001 doing project management of Beowulf cluster installations and then for six years I was CTO of a company providing an automation/integration platform for the healthcare industry. I'm currently semi-retired. Mostly I'm interested in Groovy but I dabble in a few other languages. &gt; No disrespect, but I'll remain sceptic to that claim. Like I give a shit? No disrespect, of course. :-) &gt; I'm unsure what value it gave to the discussion other than providing me with random trivia. Sorry, I thought you had a general interest in PHP. The main point was that I started PHP when a lot was not known about web programming or PHP. &gt; Relying on the index position isn't always reliable It's 100% reliable unless you don't specify the columns in your select statement. Only neophytes fail to do that. &gt; Encapsulation. When working with a template engine, you might not know which fields are actually going to be used, and in what way. In that case what's the point of your names either? If you name the variable you have to use judgement. All you have done is add characters: "$row['foo']" v "$foo". The letters 'r', 'o', 'w', and the symbols '[', "'", and ']' add no information, don't change the reliability of any statement, and clutter the code. Of course, I like the ternary operator too so perhaps I'm more sensitive to clutter that most.
Beside this script, is there any other garbage collecting mechanism running (PHP 5.2.4+Suhosin, Debian)? Can this script be disabled?
Show code or it did't happened. (for this one who don't use PHP) 
Maybe he has config settings in the database.
Depends on what you want to learn, but a modern PHP framework can be interesting to read through. SwiftMailer has some nicely written code as well.
Magento is very well engineered, in my opinion. The way it's designed tends to bug some people, but they're following established design patterns. I've learned alot from working with it.
I am looking for something as scalable as reddit running on php.
Thing is, reddit isn't scalable because of the specific language it was written in (python) but because of the system architecture and clever use of distributed services and other "tricks". [Steve Huffman on Lessons Learned at Reddit ](http://www.reddit.com/r/programming/comments/c1j0i/steve_huffman_on_lessons_learned_at_reddit/)
I have seen this video, excellent video :-). I mean not specifically reddit. I am looking for something that has been well developed and structured as reddit. Thanks for suggestions
The difficulty with Magento is trying to work out what code gets executed when it runs. I'm sure it is ideal in the way it is structured, but is very difficult to reverse-engineer. However, ignore how it handles data - its tables follow nice ideals in theory, but that can make it extremely slow (select one record of data, and it could be thirty or forty selects involved across many tables - in the real world that is just wrong). They do this by splitting every datatype off into separate tables. If it were me, I would have started by combining the main datatypes into a single table (an int, a float, a string etc.) just using the column required and leaving the others null. It would have much less load on the database. Edit: I put together a [simple script](http://magento.consil.co.uk/themes.php) that allows you to look into how the Magento themes are structured. If that is any help, I'll make it available and develop it further. Just pm me, in case I'm not back at this thread.
SilverStripe - very nicely structured CMS, that is still small enough to see how it works.
Eclipse PDT + Aptana Studio Plugin for PHP is a killer combi.
* [Zend Framework](http://framework.zend.com/) * [Doctrine](http://www.doctrine-project.org/) * [ModX](http://modxcms.com/)
[Kohana](http://github.com/kohana/core) and its [modules](http://github.com/kohana) make for a good read, the code is well documented and designed. Some of the best PHP I've seen. I also suggest keeping a close eye on [Fabien Potencier](http://github.com/fabpot) as he writes some nice code too. 
For the PHP side of things I use the Zend Framework exclusively, along with some of the components from the incubator and half finished proposal components. I cache the application's ini file itself on /dev/shm, and as much application data as makes sense in memcache. I despise smarty and similar templating engines that do what PHP already does out of the box, so Zend_View is great. I've previously used multi curl to pull data from services (I'm a fan of SOA) in parallel but more recently been using gearman. I code for reusability and clarity, rarely for runtime performance. I let APC and memcache help out on that end. I don't do TDD, but I write unit tests and aim for 80%+ coverage. Not a fan of ORMs at all, I tend to just extend Zend_Db_Table. I aim for thin controllers and tend to move most of the glue logic into what I call my service layer which can be called from the controllers or from Zend_Service_* classes (Soap, XML-RPC, JSON, etc). I tend to write simple html, and try to follow the JQuery UI CSS framework and use JQuery plugins to provide fancier features while degrading as gracefully as possible. Been playing with more NoSQL (shudder, lame term, cool tech though) stuff. CouchDB and, even more so, Riak 
Given last weeks shenanigans, I'd pick a different example.
[FLOW3](http://flow3.typo3.org/) has the most well-written, well-documented PHP code I've ever seen. Projects to avoid: WordPress++
SwiftMailer. Always SwiftMailer.
I learned most of my programming best practices and code formatting style from [PHPBB](http://www.phpbb.com/) (I learned from PHPBB2, not version 3). I always thought they had a very clean and readable coding style, with good commenting, as compared to many other projects.
Projects to avoid at all cost: phpNuke
&gt;I cache the application's ini file itself on /dev/shm What kind of ini file would that be? &gt;I despise smarty and similar templating engines that do what PHP already does out of the box Ah. A man after my own heart, I see :) &gt;I code for reusability and clarity, rarely for runtime performance. I let APC and memcache help out on that end. IMO, it's the website's architecture that will decide whether or not you will have a speedy website, not the runtime execution speed. **Edit**: Why do people always arbitrarily downvote everything in this subreddit? Someone needs to read the [reddiquette](http://www.reddit.com/help/reddiquette) guidelines. 
How is that interactive?
Not 4096 yet though
Party pooper.
The Best: http://cakephp.org/ * strict MVC (or not if needed) * Great and flexible ORM * Components * Behaviors * Helpers etc...
That's known as the EAV (Entity, Attribute, Value) model (the DB design). Wikipedia sums it up nicely: "Entity-Attribute-Value model (EAV), also known as object-attribute-value model and open schema is a data model that is used in circumstances where the number of attributes (properties, parameters) that can be used to describe a thing (an "entity" or "object") is potentially very vast, but the number that will actually apply to a given entity is relatively modest. In mathematics, this model is known as a sparse matrix." Because in a product catalog you can potentially have many different attributes, this is a good model to use. Magento is programmed in such a way that you shouldn't be writing SQL to interact with the data, rather you should be using the complete set of Model classes that provide access to the database tables. I can attest that Magento can have some performance issues, however, due to this design. With that said, though, I've been very happy since moving to Nexcess's Magento SIP hosting plan. We're getting very good performance out of our dedicated server.
I take the view that knowing the syntax of a language is the less important part of being a programmer, so highlighting is highly useful (Pun is intended). It is much more important that you are able to quickly and efficiently produce the best program to fill a need. Disclaimer, I am a student who needs to switch between languages often, if you develop solely in php and other web languages, then maybe you have a valid point. 
I also think there should be only one of every kind of software. That way, we won't have that terrible choice thing to deal with.
Just to add another vote.. Netbeans here. I use Windows 7 x64 and had some problems with XAMPP with respect to debugging, but found that WAMP worked without with Netbeans + xdebug. I am currently testing projectlocker for SVN support, and using Netbeans + https SVN access from projectlocker is pretty cool so far. Netbeans streamlines using SVN pretty well from what I can see. I do use TortoiseSVN to do some things that you cannot do directly in Netbeans.
Because you had to ask this question.
Encapsulation. None of your variables bleed into the global namespace. Properties set to the class can be shared between the methods. Also more manageable as all the methods related to each other are collected in one place. 
OO brings a lot of concepts that make your life easier - think CMS modules - it would be hard to do without the concept of polymorphism. It's also easier to take maintain OO designed code, easier to catch up with the design, replace a part of code in the future if such an need is presented and easier to land a good job ;)
Anyone who asks "why should I learn" has automatically failed the programming test. You learn it because knowing more techniques, principals and ideas makes you a better developer.
I'm a big fan of [Twig](http://www.twig-project.org/).
Most importantly a lot of existing solutions that you may need to debug in the future on different projects could possibly be written using OOP. How do you expect to know wtf is going on if you don't know OOP. You can learn on the fly but it would be better to save yourself some trouble and learn it now. Also understanding OOP concepts will improve your procedural coding skills. Finally it will make competant PHP programmers hate you less because you will be closer to a programmer and less of a coder.
Am building a tiny mvc on drupal atm and is looking for something similar. This looks good: http://pear.php.net/manual/en/package.networking.net-url-mapper.example.php There is also: http://framework.zend.com/manual/en/zend.controller.router.html It's pretty easy / fun to write your own though, done that a couple of times too.
Agreed. But you chose to use PHP, so you may as well use it as the authors intended. Otherwise use Python, Perl, Ruby or one of the thousands of other languages that work in a way that you prefer.
I've done quite a bit of cakephp, but I'm not really a big fan. CakePHP appears to be insecure-by-default in terms of XSS and CRSF and doesn't follow many of the best practices outlined by pear, zend, and many others. Lastly, it abuses OOP and subclassing IMHO.
WordPress itself should be avoided too IMHO. Never actually heard of Wordpress++ until I googled it.
was actually thinking of wordpress and its derivates, hence the ++
Don't get me wrong - I'm not writing SQL for Magento, and neither should anyone else, because the object models handle all that nicely. I agree the EAV model is great in theory, and is the right model to use in an application such as this *at one level*. However, I do feel there are some reality checks that come into play when implementing such models, and efficiencies could have been gained by flattening the tables at the database layer - higher layers up would not need to have been affected. The way Magento gets around this is simply by building an enormous cache of everything at a fairly high level (close to the request layer). Yes, it uses the EAV model, but then caches what gets generated to avoid having to touch that database layer where-ever possible. Anyway - whether you agree or not is not really what I was arguing. I just wanted to add some background to help the OP. It's all good stuff - but just tread carefully.
I notice Drupal is not mentioned. Although a lot of people rave about it for what it can do for them (i.e. get a job done), it's non-OO code base is really now stuck in the past.
Maybe no one mentioned it because they consider it not to be a good oss project for study? The next version of Drupal has upped requirements to PHP 5.2 and is slowly converting to an OO approach. In 7, the database drivers are OO based, with procedural wrappers.
lithium: http://lithify.me/ symfony: http://www.symfony-project.org/
Flourish.
Great, that's cool. But you know, when you send people on a journey, it does always pay to point out some of the distractions they are very likely to meet on the way.
oh holy, then all you've got is worst practices. start over.
Your point is well taken. I think the fact that it generates discussion is all the reason to nominate Magento as a good project to study. It does data storage differently, and it does a lot of other things in a very deliberate way, and so there's a lot to learn there.
I'm not perfect, just really anal... my syntax is also incredibly and annoyingly anal as well.
&gt;echo $dropbox-&gt;getFile('flower.jpg'); Storing the entire file in memory seems very inefficient.
Site configuration settings like a URI for assets, service silos and the like that are normally stored in XML files and parsed. I'll parse them and cache them as a serialized array or object and clear cache at either a timed interval or as part of an update process. You can use memcache for much more than query results. 
Don't use htaccess, modify php.ini to fit your needs. If you're on a shared host, don't be. VPS is cheap now. If you *must* be on a shared host (ie: client needs it), write a custom session handler and do whatever you want with GC.
This adds support for namespaces, closures, NOWDOC, multi-line class/interface definitions, and all of the new built-in functions. It also updates all of the tooltip docs (press ALT+F1 with cursor on a function) and auto-completion docs (ESC or ALT+ESC) to include stuff added through 5.3.1 (5.3.2 changes forthcoming).
&gt; Don't use htaccess [...] Also don't use ini_set(), custom php.ini for customised php modules, apache virtual host directives. Wouldn't it be better, to replace session storage mechanism, with a one that stores session lifetime within it's data? &gt; If you're on a shared host, don't be. VPS is cheap now. [...] &gt; write a custom session handler and do whatever you want with GC. Actually, I'm using VPS, but I would like to have 3 virtual hosts, for serving main application, some blog and i.e. static content. I've already replaced GC with my own code, just wanted to bitch out, how iconsistent PHP is.
Not just an example, it shows how the library works: when retrieving a file with getFile(), the entire file is stored into a variable and that variable returned. Not a major problem with a 150KB jpeg of a flower (although still bad code), but what if I want to use this library to transfer 100MB+ backup files, for example? That would mean 100MB+ of memory is addressed by PHP, enough to in many cases cause the OS to swap out pages or overwrite disk cache. There are some applications where the file needs to be fully in memory, but for majority of applications the same effect can be had with a 1-64KB buffer in which the file is stored for the duration that it is processed or stored to disk.
So what code do you recomend exactly, write directly to disc? it seems open source, perhaps they accept suggestions
You can use stream switching for this. SO has a pretty self-explanatory tutorial on how to do this. http://stackoverflow.com/questions/2126330/uploading-large-video-via-youtube-api-causing-out-of-memory The example shown is for uploading files to youtube, but the concept still applies. This shows how to manage large files without needing a ton of memory available. I'm pretty sure that this technique would work fine, but unfortunately I have not tested this at all. 
It was left there on purpose - so that people would eventually exploit it and deface the website. That would be used as excuse to ramp up "cybersecurity" related bills and budgets that would, in turn, give the US government more ample powers over the Internet.
once again, proving that productivity tools aren't always the best thing there is.
"code is poetry"... that's some of the ugliest poetry i've ever seen then!
*Unofficial plugins. **Edit**: Why was I downvoted? I'm right. The problem isn't in the Drupal software itself, it's in a user-created plugin. In fact, this is true for most open-source CMS software. Take Wordpress for example. The security exploits we hear about isn't in the software itself, but the plugins their users create. 
You are correct. This is something I plan to fix. The problem is that the underlying oauth implementation only allows me to work with strings; and it does't allow me to simply let it generate a signature so I can make the request myself. Either I need to submit patches to the oauth extension, or I need to write my own in-php oauth class. Not sure yet which way to go about this. Good suggestion though.
Wow, way to be a complete jackass while adding absolutely nothing to the discussion.
you need to learn every existing paradigm known to man because you want to make better design decisions and in order to do so you need tools which can only be acwuired by experiencing other approaches and points of view. OO is just another one, but as important as the rest.
&gt;Not a major problem with a 150KB jpeg of a flower (although still bad code), but what if I want to use this library to transfer 100MB+ backup files, for example? That would mean 100MB+ of memory is addressed by PHP, enough to in many cases cause the OS to swap out pages or overwrite disk cache. My server would probably explode if I tried that. It only has 256MB of RAM, and I have a bit of trouble balancing that between NGINX, PHP and MySQL.
Patches are typically the preferred route ;)
I've actually taken a stab at it a few hours ago. It's very hard if you don't understand the PHP engine.. macro's everywhere and not sure where to begin. I've open a feature request instead. If this gets implemented I'll be able to easily fix this issue. Evert
You got a lot of downvotes. 
Finally, been waiting for this a long time. Awesome
No, many of WordPress' security issues *have* been with WordPress itself.
I think I have some tinfoil in my kitchen that you can use to make a hat.
Geez, why is this such a huge deal? &gt; You can find this hole without much digging... Bull shit. They're probably using ~100 modules on that site (100 seems to be a pretty good average for sites as large as this one). Assuming an average of ~300 lines of code per module (just a guess; it may very well be more), that's 30,000 lines of contrib code. So they're expected to dig through all of that, line by line, looking for XSS, XSRF, SQL injection, etc. vulnerabilities? No, they do it the Drupal way, which is to keep an eye on the security reports and make sure your modules are kept up to date, since the vast majority of exploits come from not updating a module once security bugs are fixed. whitehouse.gov is still just a website; articles like these make it seem like it's the government itself.
sorry for the harsh tone, guess I was just deeply shocked over a guy telling me phpbb consists of good practices. Don't want other people falling into the trap of thinking phpbb is well-coded. Enjoy the day :) 
http://www.eff.org/deeplinks/2009/04/cybersecurity-act
Haven't seen an XSS or CRSF bug in Cake since 2007. Having worked with other CMS frameworks in various languages for years, I spent a good bit of time looking at all the PHP versions before I settled on Cake. I think my dislike of using YAML has something to do with my opinion as well since Cake doesn't use it.
This article is pure sensationalism. The "exploit" is only available to administrators, thus this was not a "gaping hole", indeed the chances of exploit were 0% because the White House doesn't dole out adminstrator roles. This article made me lose a lot of interest in the Register. 
lol, fun idea, if a little vapid and ad-laden. I scored 6 in 46 seconds.
Holy crap, that's awesome! How did I not know this?
this is memory. it is always dependent of luck.
Yeap. I have a shitty memory. 4 in 1 minute. I didn't realize I was getting scored though so I just clicked on a bunch of shit and then easily chose the right definitions. It'd be better if there was a button called "correct match" so you could actually say you had picked the right definition. Then the score would mean something. 
Well why do you believe it has bad coding practices? I think there is many good lessons to be learned in that project.
&gt; why should we settle for code written by someone else? That's one of the perks of being a programmer - if we don't like crap code written by someone else, we can write our crap code. No, that's stupid. This is *exactly* why PHP gets the bad rap that it does in the programming community. It's the only popular scripting language that gets dumped on time and again. It has nothing to do with some of the downright illogical things in the standard library (like String functions). Every language has quirks. The reason why programmers get so bent out of shape about PHP is nearly all of them, at some point, gave PHP a try due to its popularity. Some of them are introduced to PHP because they are asked to fix a small bug in software written by someone else. The code they end up seeing is exactly like you see coming from this guy. He's re-inventing the wheel in every possible way. There is absolutely **nothing** different in his framework and all the others. Nothing new. Nothing changing. Nothing. Nothing. Nothing. Instead of adopting an existing framework that closely resembles his style, a framework that has a development *team* with an actual dev process, he chooses to write everything from scratch. Pointless. People think this is just an innocent project and why am I being such asshole, right? More power to the guy for writing something for fun and learning, right? Wrong. He will likely get very little constructive feedback on his framework because there's nothing new there. There's no reason for anyone to take the time and critique his work. In the end, he'll think this is a pretty big accomplishment and why let this code go to waste? He'll pick up a freelance project or, *shudder*, convince the company that he works for to adopt the framework into their process. The end result will be another half baked framework put into the wild that some poor developer will have to understand in 2 years. Worse yet, a C programmer may be tasked with modifying his code to fix a bug in a couple years. And, as the cycle goes, the C programmer will ask: "What is this guy's obsession with static classes? Doesn't he realize unit testing this is impossible? PHP is stupid". You can marginalize my opinion all you want. It doesn't change the **fact** that the PHP community refuses to rally around any major frameworks due to crap like this. And that sucks.
phpBB2 perhaps was quite... interesting... in coding style. phpBB3 is pretty well coded though. What exactly do you see as bad practices?
&gt;But I couldn't directly use the output of this suggestion in AutoComplete plug-in. &gt;The reason is, search querystring "q" is hard-coded in the jQuery AutoComplete, but the Google suggest is using "qu" as search query string parameter. Wouldn't it be easier to just change the AutoComplete plugin?
and now, with bonus readability: &lt;?php function f_l($d) { foreach (array_diff(scandir($d), array('.', '..'))as $f) if(is_fil($d.'/'.$f)&amp;&amp;(('php')?preg_match('$php$', $f):1)) $l[]=$f; return $l; } $u = preg_replace('/[^a-z^A-Z^0-9^_]*/', '', $_GET['u']); $f1 = f_l("./view"); if(is_callable($u)and in_array($u.".php", $f1)) { $l=$u(); extract($l); include("view/{$u}.php"); } else { echo"Nice try."; } ; ?&gt;
ooops :Ã¾
I don't know if Google will like people scraping their site directly. Their suggestion would be to use the Ajax API. Here's my JavaScript library that makes any site searchable easily: http://chir.ag/projects/drop-search/
Syntax and logic problems aside (I assume this is just untested, hypothetical code), I don't see any major security problems here. You effectively sanitize the PHP script's filename (note that your current regex will allow '^' in the filename). The only problem I see is inadvertently creating a PHP script in the view/ directory that has the same name as a built-in PHP function. Having a file like view/shell_exec.php would be disastrous. A more robust and reliable solution would be to implement something like MVC; your index.php corresponds loosely to a controller already.
thanks master! ^^ I know that the use of "reserved words" is a weakness of the script ... now I'm trying to eliminate this problem by inspecting the file name comparing by existing php function; yes it is only for fun, i call it "MCVre?" (in Italian it sounds like *"but [why not] f#ck?"* :Ã¾ ) When you talk about "Syntax and logic problem" what do you mean? The "original" working code (not very readably - I like the compactness of code!) is: &lt;?php function f_l($d){foreach(array_diff(scandir($d),array('.','..'))as $f) if(is_file($d.'/'.$f)&amp;&amp;(('php')?preg_match('$php$',$f):1))$l[]=$f;return $l;} $u = preg_replace('/[^a-z^A-Z^0-9^_]*/','',$_GET['u']);$f1 = f_l("./view"); if(is_callable($u)and in_array($u.".php",$f1)){ $l=$u();extract($l);include("view/{$u}.php"); }else{echo"Nice try.";}; ?&gt; where and why it is wrong or inelegant? 
A tutorial on how to install a plugin? Really useful...
Hah...classic WTF. Nice post! I think your writing is improving.
You've summed up my feelings for EE quite well. Sometimes I love it, other times I wonder why it even exists, let alone is put into production (For example: editing a search timeout ['please wait 15 seconds before searching again'] is done via the "Members" control panel --- many other seemingly insane design choices). I often wonder why they didn't try and integrate Smarty templates instead of their custom extremely wonky template system.
EE is built on CI right? Am I wrong in thinking that EE would user the built in CI auto-escaping features available for user input? I've never used EE but I use CI all the time and &gt;90% of the time CI escapes any variables I send to the database for me. Wouldn't that make the whole "Eric OâReily" issue a non issue? again... I have 0 experience with EE.
I switched to Notepad++ to try out [Zen-Coding](http://code.google.com/p/zen-coding/downloads/list). Since then (about 2 weeks ago) I've never looked back. If you have to write any HTML, it will change your life. I'm also a fan of [this ftp plugin](http://www.rarst.net/software/notepadpp-ftp-plugin/) that lets you edit files directly on an FTP server (I came from using Crimson Editor ... which had this feature built in).
Wow! Droid Sans Mono IS pretty nice for coding. I use Bitstream Vera Sans Mono ... I'm going to have to use Droid Sans Mono though for a while before I pick which one I like better!
EE 2.0 is built on CI - the older 1.6 version that most people still use isn't.
Yeah, my only experience is with the 1.6 branch. Good to know this is a non issue with newer versions though :)
oh my freaking god.. Zen-Coding is the most brilliant thing i've come across in such a long time.. i just installed it and can't think of enough good uses for this already.. this is going to save me so much time.. thank you so darn much for sharing this.. wow! what an amazing concept! too good!
ahh. thanks to the info :)
That's a pretty good selection of code snippets. What does "pronti all'uso" mean, btw?
Those headings have to be one of the worse uses of `text-shadow` I've seen.
is_fil, i think you meant is_file More importantly, you want to control this in your webserver with a handy urlrewrite so that nobody can directly request files at all (which is what you're kinda trying to do). I'd like to see same-line braces and no braceless logical structures. It's bad form in PHP and Java and Javascript for others (or yourself) to work on at a later time. Writing clever or complex or efficient code is not difficult, per se. Writing any kind of code that can be easily maintained, is difficult. See: http://javascript.crockford.com/code.html (or http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf if you prefer) http://framework.zend.com/manual/en/coding-standard.coding-style.html If you use java IDEs and like collapsible blocks or use the code cleanup, it'll fix your java blocks for you by default. 
It's Italian and mean "*ready for use*" (but normally is a cooking-related speaking form)
http://xkcd.com/292
The MySQL one looks quite useful, why didn't I think of that :-)
For the sake of all that is science, use [PDO](http://php.net/pdo).
You might want to crosspost to [r/phphelp](http://www.reddit.com/r/phphelp) also. In the $body var do you have any static text, or is it all just from to user? Basically, are the $_POST vars passing correctly?
Hey, thanks. It's all input from user, but no, I'm not receiving the content from the input boxes ($_POST).
&gt;I know it's more fun to build things yourself, but phpmailer is very easy to use and will handle this. &gt;That said, you've misspelled 'boundary' quite a bit: 'MIME_BOUNDRY' &gt;edit looks like that misspelling is up to spec though... gotta love it lol It's not my code. I was acctually looking for something readymade that would work withouth any special dependencies and found that post :) I'll take a look at phpmailer, thanks! 
This may not help depending on your host, but create a php.ini with debugging options. You usually have to put it in the same directory as your script. Then you should see all the warnings and errors your script may generate. For example, put this in your php.ini to see all the errors on the screen and in a log file too: ; Show all errors, except for notices error_reporting = E_ALL &amp; ~E_NOTICE ; Print out errors (as a part of the output) display_errors = On ; Log errors to specified file. log_errors = On; error_log = /home/user/logs/php_errors.log;
See if a simple script like this works: &lt;?php if($_POST[submit] != "sub") { ?&gt; &lt;form action="&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;" method="post"&gt; Name: &lt;input type="text" name="fname" /&gt; Age: &lt;input type="text" name="age" /&gt; &lt;input type="submit" value="sub" /&gt; &lt;/form&gt; &lt;?php }else{ ?&gt; Welcome &lt;?php echo $_POST["fname"]; ?&gt;!&lt;br /&gt; You are &lt;?php echo $_POST["age"]; ?&gt; years old. &lt;?php } ?&gt; Disclaimer: Code has not been debugged, probably not secure and is pretty much ripped off another site.
That's even in the goto [documentation](http://www.php.net/manual/en/control-structures.goto.php).
I second using [PHPMailer](http://phpmailer.worxware.com/index.php?pg=phpmailer). Also the code you linked to on that forum uses the "extract" function which I don't think is a very good idea (especialy if you're not very familiar with what it does) since it could overwrite other variables you have defined in your script. If you're using PHPMailer for PHP 5/6 here is an example that should get you started: require_once 'class.phpmailer.php'; $txt_body=''; $html_body=''; foreach($_POST as $k=&gt;$v) { $txt_body.=$k.': '.$v."\n"; $html_body.='&lt;b&gt;'.htmlspecialchars($k).'&lt;/b&gt;: '.htmlspecialchars($v).'&lt;br&gt;'; } $mail=new PHPMailer(); $mail-&gt;SetFrom('FROM_EMAIL_ADDRESS'); $mail-&gt;AddAddress('TO_EMAIL_ADDRESS'); $mail-&gt;Subject='Your email subject'; $mail-&gt;AltBody=$txt_body; $mail-&gt;MsgHTML($html_body); foreach($_FILES as $file) { $mail-&gt;AddAttachment($file['tmp_name'],$file['name']); } $mail-&gt;Send(); Here's the full working example if you need it: http://pastebin.com/b0LEBB09
Can we now all agree, once and for all, that obfuscators/encryptors/encoders for php as a type of DRM is just pointless and stupid? Tell your boss.
Yep. And if that tiny script turned into that monstrosity, I wonder what it would do to a large script? And how would the execution time be impacted? Just silly.
http://oss.oracle.com/oracle-plus-php.html
This stuff is rarely if ever used by actually legitimate companies. If they really wanted to something harder to exploit they'd use a project that ties in directly with the core (as the guy said, it's the user space aspect that makes it so easy to decrypt). This is used largely by malware authors who are injecting php onto sites that aren't theirs. The idea is to slow down how fast people can find the payload (the url they're getting the actual exploit for the computer from). Malware authors will chain redirects across multiple domains using obfuscated scripts like this one, making it so the researcher needs to either find the entry point (since each point on the chain has it's own mini authentication scheme to make jumping in the middle more difficult) or convince all the sysadmins across each bump on those chains to give up a copy of the script. This obfuscation just adds an additional burden on researchers. ISP's were much more likely to give out a url in a script than the entire script itself (especially with it being obfuscated- they have to worry about distributing copyrighted material and crap), and not every researcher is running PHP on their home systems (although many more are because of tactics like this, and obviously you can see that there are tools freely available to make this easier).
If anyone just burst into tears of joy, you're not alone. I had been torn between transitioning my current DB abstraction layer to either Doctrine 2's ORM for MySQL or making the leap to MongoDB. Mongo's native PHP interface is nice, but I still want some kind of abstraction layer. I hadn't seen anything out there yet that really clicked for me, but this looks really promising.
So?
&gt; {exp:query sql="SELECT name FROM exp_freeform_entries WHERE entry_id = '1'"} I hate expression engine, I hate it so much. CodeIgniter sucks too.
Little bits and pieces to help work with db items (like changing row "active" state, sorting rows etc) in the CMS. Some wrappers (mostly for array_multisort witch syntax and usage is just plain brain damage), string operations (changing localized string to url safe ascii version) and that like.
PEAR MDB2. Always.
I have a custom function as a replacement for print\_r. it wraps its output in a scrollable div with monospaced font.
that sounds pretty helpful.
May want to check out http://hli.forestfactory.de/download.shtml
It's a little thing, but I always put in a redirect() function that adds the appropriate header and then kills the script. If I don't, then I'll always forget to kill the script and something unexpected could happen.
Is it a specific CMS that you've written this for?
I got a lot, most for debugging. * I got one that is print_r basically but toggles that array. * Another one for dumping the trace, debug_get_trace() but it shows the source code if i click the file, 5 lines around the line that triggered it. 
It's for my own CMS and they're mostly simple functions like (simplified for the context): function check($tableName, $elementId) { mysql_query('UPDATE `'.$tableName.'` SET `active` = 1 - `active` WHERE `id` = '.$elementId); } Used to change the `active` value from 0 to 1 and the other way around.
URL Router, Template (Twig) abstraction layer, MVC Router, Autoloader.
While I haven't written up anything particularly reusable (since someone has pretty much already written everything I need), I do happen to immediately integrate a formal error handler and a error logger into each app I write. Oh and if I am ever writing stuff that involves working with dates, I almost always reuse a nice and simple time conversion function rather than bother with PHP's built-in ones. Besides from the stuff I have personally made though, FirePHP is a must. Formaldehyde is actually pretty slick too. http://code.google.com/p/formaldehyde/
If its useful on most sites, chances are, these days, its available in some framework or another. In the past i had collected a library of custom classes. Session management, lightweight db abstraction layer, server side form validation. I also put together a procedural based MVC pattern that i used on most sites before php5.
So now do you just use a open source framework?
if it's not an existing site, I generally look to CakePHP.
Switftmail !
cURL class
I have a little script that generates the body of an autoload function by scanning your project for class files and dumping a map of class name =&gt; file. Whenever I add classes to the project I just re-run the script, there's no need for file naming conventions and multiple classes can be put in one file. It's on github: http://github.com/jaz303/superload
Care to share?
why do you need anything other than __autoload() ?
Yes. I typically like to use Zend Framework or CakePHP, depending on the project requirements and the hosting environment. Sometimes I will use Zend Framework components inside of CakePHP ;-) If I am using Zend's MVC I will almost always also use Doctrine ORM as the Model layer. Zend DB leaves plenty to be desired.
I don't. This just saves me from maintaining the map of class locations manually.
Don't have it here, but it looks like this: function dump($o) { echo '&lt;div style="overflow:scroll; width: 800px; height: 300px;"&gt;&lt;pre&gt;', print_r($o, true), '&lt;/pre&gt;&lt;/div&gt;'; } print_r isn't optimal for e.g. boolean values and there are some more points that could be improvedâ¦
Don't forget session\_write\_close() :)
A database build script which wipes the entire database, recreates it from scratch and builds dummy data for each table. It's part of my development process now. Whenever I add a table, I create the SQL files for it as well as dummy data. This way the site content is filled up with fake data and users that look real instead of "test test test" everywhere. This works with another one of my libraries that generates fake data (ie: random top 1000 first/last male/female names in the US, thousands of real addresses, a lorem paragraph/word/sentence generator, and more). For everything else, Zend Framework has suited me well. 
For when I'm lazy: [Class XMLHttpRequest](http://www.moonlight21.com/class-XMLHttpRequest-php)
I second this one, whenever I develop something which requires mail functionality Swift ( http://swiftmailer.org ) is my way to go. Very complete and easy to extend for logging / testing etc.
zend framework. Takes care of almost all of these things plus more.
htmlescape as a shortcut to htmlspecialchars with utf-8, also modified to work recursively with arrays: function htmlescape($str) { if (!is_array($str)) return htmlspecialchars($str, ENT_QUOTES, 'UTF-8'); $result = array(); foreach ($str as $key=&gt;$val) $result[$key] = htmlescape($val); return $result; } 
Komodo Edit. works in all major OSes.
How come you need a map?
Probably because there's no need for file naming conventions and multiple classes can be put in one file.
I created a media library that I use to gather CSS and JS files from one directory into a single file. I then created a controller (in Zend Framework) to retrieve the files just like a static file. So, if I go to "/media/js/myJSLibrary.js" it gets all the files in "/assets/js/myJSLibrary", compresses and adds caching headers. This makes it really easy to separate different CSS and JS elements instead of having a single, really long file.
And your point is?
I built a [caching library](http://code.google.com/p/mortar/source/browse/trunk/system/thirdparty/Stash) as part of a bigger project but I use it all the time. I actually just went through and made sure it had no dependencies on the bigger project and could be used anywhere- I'm thinking of releasing it on it's own.
Yes, I found it really useful after spending hours on a problem I can't resolve. Once I post question, I poke around the same subject and try to answer others' question until someone answers my question.
Cool. What are you going to call it?
I'm guessing his point is either that he's illiterate (since you asked for things people themselves wrote) or maybe just incapable of writing his own code.
I actually already have a name, Stash. The link I gave is to it's location in svn, so if you want to check it out you're more than welcome to. It uses a bunch of different handlers to store data- the sqlite and filesystem ones being the most tested. The filesystem handler stores it's information as an actual php script so it can take advantage of things like opcode caching, and the sqlite one is smart enough to pick sqlite3 if it's available and to otherwise fallback to sqlite2. There are a ton of optimizations in the core itself too- I've been working on this library off and on for a few years now so it's damn snappy. The big thing holding me back is just having time to setup the website and provide some documentation.
oh. I wasn't sure if you were sticking with that or if it was just a place holder name. Looks awesome.
Thanks- I guess now I have to actually release it, lol.
I use [phpCodeBeautifier](http://www.waterproof.fr/products/phpCodeBeautifier/).
Doctrine. It saves my sanity from the madness that is PHP database obstruction layer. 
thanks, but i've tried phpcb.. unfortunately it does not indent the HTML/JS code in the php file.. i'm looking for something that can beautify the entire thing
Wow, I have the same two libs, a database reset switch and random dummy data creation class that can do urls, phone numbers, email addresses, big texty blobs, names. Lorum ipsum being a little over-common, I also added a Hawaiian word generator. Mahalo!
Xdebug can improve `var_dump()` output quite a bit, and also makes stack backtraces a lot easier to read. http://xdebug.org/docs/display
Got a few that I use frequently, not always. PM and I might just share: * refresh() - reloads the page via headers with optional redirect. Nice when using POST-Redirect-GET * nl2p() - turns text with linebreaks into properly wrapped &lt;p&gt;'s. * dump() - also mentioned in the thread, nicely formatted print_r with formatting and line numbers for debugging. * filter() - shorthand for the filter_var family. * norm() - normalizes text for ids, strips special chars, lowercases, spaces to underscores, the works. * format() - handles digits for a variety of outputs, phone, ssn, credit cards, many more. * custom database access layer, custom cms/framework, most of the things you shouldn't reinvent...
I have published work in Zend Framework. Way to be a dick when you have no clue what you are talking about.
How did you handle human names and physical addresses?
Everything I write now is class based and I have the same base class I extend for every project which has 26 functions in it. Stuff like; * SetupForm($type,$name,$display,$value,$size) - easy html form elements * dbInsert($tbl,$name) - drops data into $tbl. $name is an array of fields which match names of variables in $_REQUEST['name']. My favourite is part of the constructor which escapes everything so I don't get pesky MySQL errors. $this-&gt;request = $_REQUEST; $key = array_keys($this-&gt;request); for ($i=0;$i&lt;count($key);$i++) { if (is_array($this-&gt;request[$key[$i]])) { //escape array components $sub_key = array_keys($this-&gt;request[$key[$i]]); for ($ii=0;$ii&lt;count($sub_key);$ii++) { $this-&gt;request[$key[$i]][$sub_key[$ii]] = addslashes($this-&gt;request[$key[$i]][$sub_key[$ii]]); } $was_array=1; } if (($key[$i]=="string")||($was_array)) { //do nothing } else { $this-&gt;request[$key[$i]] = addslashes($this-&gt;request[$key[$i]]); } $was_array=0; }
Single 'Hawaiian' words! I was in Hawaii at the time, so it made sense. I like the list idea, this had a little more entropy however. Single Lorem Ipsum words might give a Latin feel
I have a full MVC framework that I've written over the past two years that I always start new projects with. This consists of several things: - A mod_rewrite engine for clean urls that parses the full request path from right to left until it finds a controller that matches, and then passes the rest of the url as an array of arguments split on the slashes. - This is coupled with a path library that lets me just pass an array of arguments and/or key /value pairs and spits out the correct url. It also has functions for making it easier to work with local file paths, sanitizing data for SEO use in urls, and a handful of other path related functions. - A database wrapper library so I can switch database engines without having to change functions (tho so far I've yet to need to use anything other than mysql). - A data model class that handles my inserts and single table selects, presenting the data as an ArrayAccess object. Makes reading and writing individual rows a LOT easier since I can just pass it form data, kill any values that could be security vulnerabilities, and let it handle all my data sanitizing for me. - A very basic template system. I've also built up a collection of helper classes for stuff like sanitizing phone numbers, outputting relative dates, creating thumbnails, wrappers for phpmailer and recaptcha, etc.
Source? Link me to a commit page or something.
Kohana with a few tweaks?
For PHP: http://us3.php.net/manual/en/function.highlight-file.php
I've sent you the PM.
I'd like to see your Data Model Class and your Template system, if you don't mind.
Why not just learn to indent when you write your code. It'll save you the time of having to run a beautifier program and you won't make the mistakes that the program will make.
I only just heard of Kohana a couple months ago, but it is similar. Mine isn't nearly as large or feature rich, and the url system is quite a bit different. I don't have actions, just controllers, and each controller only has a single action. A path to /a/b/c will first check for a.b.c.php, and then a.b.php, then a.php before deciding the page doesn't exist and returning a 404. It also supports foo=bar syntax in the arguments. It does mean it's a little more file system heavy when finding the controller, but that amount scales by the length of the url so it's pretty easy to control. Their model system is similar in that it does smart inserts, but I implemented ArrayAccess so that the model itself holds the data instead of having to pass an array to the function. I also have one table per model, and the table name is defined at instantiation.
One would assume that he needs this for code he didn't write. Lord knows I've opened up plenty of php files that made me go "WTF? Does this person have no concept of tabs?"
Ahh. I assumed it was his code. My mistake. I have a coworker that doesn't know what the tab button does as well, so I can understand this point.
Ok, but please be gentle :) I haven't released it to the public mainly because of how brutal much of the PHP community can be when reviewing code. Plus, most of it isn't documented. [DBRecord](http://chipersoft.com/cakeless/Framework/objects/DBRecord.php) data model class, which relies on my mysql [Database wrapper](http://chipersoft.com/cakeless/Framework/objects/Database.php). [This example model](http://chipersoft.com/cakeless/Framework/models/dExample.php) shows you how to implement it. I'm not kidding when I say the template system is very basic, all it does is provide a unified base for the page foundation. [Page](http://chipersoft.com/cakeless/Framework/templates/Page.php) class, which is then extended by [pFoundation](http://chipersoft.com/cakeless/Framework/templates/pFoundation.php) and [pSubPage](http://chipersoft.com/cakeless/Framework/templates/pSubPage.php) so I have several layers of layout control. Page is just the html document base, pFoundation creates the page foundation, and pSubPage is where the navigation components get defined. [This page](http://chipersoft.com/cakeless/Framework/controllers/index.php) shows you how to use it.
 function getFromGET($varName, $defaultValue = '') { if(isset($_GET[$varName])) { return sanitize($_GET[$varName]); } else return $defaultValue; } and this one for working with Interbase databases: function getFromBlob($blobID) { @$blob_data = ibase_blob_info($blobID); @$blob_hndl = ibase_blob_open($blobID); return @ibase_blob_get($blob_hndl, $blob_data[0]); }
dBug! Makes a collapsible, pretty-print version of arrays, objects, etc. Blows print_r() out of the water. http://dbug.ospinto.com/
ahh, i did forget session_write_close(). funny, i overlooked this function for years now. 
i have some functions to read the data and meta data from a sql statement and generate forms and data grids. i also have other functions which update/insert/delete records based on the meta data of a table. these are mostly just tools for admin sections of a website.
Debugging php is still a clusterf*ck, but xdebug makes it far less so.
thanks for the link. Seems to be a popular function.
...on a related note; tabs or spaces?
tabs
Posting it here would reveal who I actually am. I would prefer to not have some dickhead like you knowing who I actual am and what I actually do in real life. Seems very much like a stalker what you are doing.
It's the only sane answer.
What annoys me more is when one person decides to change all files in a project to either spaces or tabs. It really screws with git. Making matters worse is when they don't tell us what they did and we have to resolve conflicts in every single file we've edited. Not fun. Almost as bad is someone changing line endings.
Emacs with multiple major modes is the best php and html and js auto formatter and syntax highlighter that I have ever used, but it's still sucky. Bummer, your problem isn't lack of a formatter, it's the dude that puts html and js in php. :D
yeah.. sometimes it's beyond your control, esp. when you're working with code you bought from somewhere. anyway, i guess i'll just write a small perl script that segregates various sections and formats them each individually and join them after that.. could work, at least does in theory.
Spaces.
I always go for tabs because who would want to type out 8 spaces? 2 tabs is easy enough when you're doing code blocks. Then when you open the document (code) up in your favorite IDE you can see it formatted the way you want based on the IDE preferences for tabs.
I use tabs myself, but the guy at work uses spaces. And only two spaces at that.
Worst troll ever.
You need to do an instant find/replace whenever you load his projects and convert all &lt;space&gt;&lt;space&gt; to &lt;tab&gt;.
Unfortunately our project is so damn massive a find in the entire project takes a good 10ish minutes on an i7 desktop. I'd hate to see what a replace would be on that. Millions of lines of code. Then there's git having to merge it all.
I think you'll enjoy this Facebook blog post about this: http://developers.facebook.com/blog/post/358 Basically, PHP does scale; it can just be a bit of a bitch.
Horizontal scaling is usually backend thingy. 
In a word: Yes. I think the fact that Facebook and Yahoo use PHP extensively shows that PHP does scale. Sure, they both use compiled languages for some of their batch programming tasks. That's no different from what you'd do if you built your extremely-high-traffic site in Ruby, Python, or another scripting language. Bottom line is this: Scripting languages such as PHP, Python, and Ruby offer a lot of advantages in terms of fast development, etc. to extreme-traffic sites such as Facebook - but because of slower execution it can be an advantage to make some of your batch processing things in compiled languages such as C.
I think Facebook is the end-all argument that PHP can scale given the following: 1. You have a massive amount of servers. 2. You have tailored optimization software. 3. You don't care that your site occasionally behaves like crap. I can't help but think that if Facebook switched to Erlang, they could use 1/2 the servers they do now.
I thought Yahoo used a lot of PHP which would be a better case I think.
Yeah, it'd be a quick re-write job, and rolling it out over their infrastructure would be a cinch. Oh, wait.
Interesting. Know of any popular sites actually using this right now?
Oh it's impractical as all hell, I would never claim the opposite.
Well there's this one beginning with 'F'... But that's all I'm aware of.
Talking about "scaling" a serverside language means you're misusing the word scaling. It's not a generic term. Is PHP efficient? In what way? what context? 
Scalability has very little to do with the technology used, but the architecture of the application. Facebook may use PHP for their front-end servers, but their system is very different than, say, some random Wordpress installation. There are non-PHP middleware and backend components to provide a gauntlet of caching and asynchronous processing that PHP interfaces with, but it's not a situation of "everything is PHP, therefore PHP scales". PHP *can* scale, however; just throw more servers into the farm. But things become more complex once you're trying to do something stateful. As soon as you start doing something like COMET / long-running AJAX calls, the Apache / PHP combo looks a lot less attractive, because each request eats up a lot of resources. My favorite tech for tackling that kind of problem is Erlang. That said, PHP is a great general purpose web scripting language, that works well for most issues, and can scale with proper architecture. For anything serious, you'll want to use a framework (I prefer the Zend Framework), some kind of caching backend (memcached is great). Apache child processes are expensive, so getting a response out as quickly as possible and freeing that resource is optimal. Gearman can help offload some of the non-critical processing onto a separate worker to be handled asynchronously. An architecture where your front-end servers can quickly serve pages, pull as much data from cache as possible, and off-load heavier processing to workers via a job server can scale well horizontally.
ZOUNDS ... and inspiration strikes! Thanks, I was struggling with a bad case of myopia and your simple comment helped! Always the simplest things ...
Correct, almost all of Yahoo's sites are built in PHP, including Yahoo Mail. However, Yahoo is ranked below Facebook on the alexa list. That may or may not translate to lower visitor counts.
*shiver*
It looks like facebook has more than double the page views of yahoo; I think that's more relevant to scalability than visitor count per-se. http://www.wolframalpha.com/input/?i=facebook+vs.+yahoo.com+page+views
Whoever says that PHP (or any other language, for that matter) does not scale clearly has no idea what "scalability" means.
My company writes all of our webapps in PHP - it scales very well. Basically our stuff is used in nearly every school in the country in one way or another. Like another user mentioned, it's all about architecture, but PHP itself works real well. We use sharding for DB, and multiple application servers to help as well. Also, we don't use Apache. We use nginx with PHP patched with php-fpm. Apache is really hungry and not the most efficient web server. We've been playing with Cherokee a bit as well. We utilize APC and memcache extensively as well - for instance, to reduce APC's stat calls, as part of the deployment/development, we have a script which condenses alot of our includes into one file. We don't use a framework or ORM because of the overhead (a lot of use of stored procedures).
Are we talking about the PHP implementation that facebook no longer uses?
Not everyone is an expert. For example, managers of developers along with business owners might need reasoning to back their language selection. 
Glad it helped. It's funny, you never know what is going to hit your mind just right to help you figure out a problem.
I am surprised no one mentioned phpDesigner .. I love it http://www.mpsoftware.dk/phpdesigner.php
Thanks for this!
How about Wikipedia? I'd think it's a better example.
Script execution time is rarely a problem so much as your backend and blocking processes like database access and searching. This is why Facebook use things like Memcached and Tornado. The only reason they use PHP is because a lot of devs know it. Scalability is about the complete setup, not about the choice of interpreter language. Personally I'd prefer to use a python Twisted or WSGI application, though.
I fail to see how Erlang would solve problems with caching and I/O, which are already solved with things like Memcached and Tornado.
&gt;$old_count = $row['id']; id? What is old_count set to now? &gt;SET count = '$new_count' column count is of type STRING? &gt; WHERE id ='1' id is of type STRING? Why is $table a variable? This is a bit odd. &gt;$date = strtotime('now'); returns a number &gt;"INSERT INTO $table VALUES ('','$date')" inserts a number into a STRING column You could try: "INSERT INTO $table VALUES ('',NOW())" It looks like you have a few problems.
Are you by chance using AVG (Anti Virus)? It could be sending the page back to AVG's server to test for malware. Try turning off all AV, Malware, spyware monitoring and see if that solves it. Start turning them back on until the problem occurs again, and you have your culprit.
Clearly something is making the request. If it's your browser, you can verify this with for example the 'Net' tab on firebug. 
you should also check your apache/iis server logs or if you can't get to the logs, log the ip-number, referer and $PHP_SELF to a file on every request.
Not a chance it would work that way - one insert statement, one row inserted (*in this example) Check that you aren't calling the page multiple times. Is the page public? Maybe some other visitors triggers the query. Is the page using mod_rewrite? Maybe some of the resources (images, css files) you request are not there and the request is passed to the PHP file once again. Plus - dont use strtotime('now') - that's what mktime() is there for.
I agree with most arguments here that language != scalability. However, I think most people here missed the fact that most of Facebook runs on C++ these days: Hip Hop generates C++ from PHP code. http://developers.facebook.com/blog/post/358 
&gt; Is the page using mod_rewrite? Maybe some of the resources (images, css files) you request are not there and the request is passed to the PHP file once again. My money's on this.
Don't store a password in plain text.
Yeah I suspected I'd get no love. Nvm, back to my joomla component.
yeah, I think "4"+1 will result in "41", so he's probably adding 1 to the ID of the row.
I concur. Plus, instead of reading it out of the db, just doing; mysql_query("UPDATE $table SET count = count + 1 WHERE id ='1'") or die(mysql_error());
I came here to say this as well
Your script is looking for a div with className jsps_results_criteria and floatLeft, there is only one such DIV: &lt;div id="resultsCountHeader" class="jsps_results_criteria floatLeft" title="82 nurse jobs in Perrysburg, OH"&gt;82 nurse jobs in Perrysburg, OH&lt;/div&gt; Maybe you we're looking for the div innerHTML, not the number (collection.length)of such DIVs?
I am using the collection.length just to reference how many divs there are. I know that there is only one of that div. I just don't know why the $results-&gt;item(0)-textContent doesn't return "82 nurse jobs in Perrysburg, OH" Am I overlooking something? I am new to this whole DOM thing and just trying to do some reading and script digestion to see how it works.
Are you sure it returns 1? That's weird. Anyhow - your method wont work - the data is loaded via JavaScript - the actual HTML is: &lt;div class="jsps_results_criteria floatLeft" id="resultsCountHeader"&gt;&lt;/div&gt; View the source with just Ctrl+U and not Firebug / other source viewer as it views the parsed HTML, not the source one witch is used by DOM. Only way out now is to parse the HTML yourself - and by that I mean to just find the thing you're looking for using REGEXP 
A possible alternative to REGEXP could be YQL? This query seems to return all the even results: [YQL, Remember to hit test](http://developer.yahoo.com/yql/console/#h=select%20*%20from%20html%20where%20url%3D%22http%3A//jobsearch.monster.com/PowerSearch.aspx%3Ftjt%3Dnurse%26where%3DPerrysburg%252C%2520OH%26rad%3D60%26rad_units%3Dmiles%26tm%3D60%2527%22%20and%20xpath%3D%27//div%5B@class%3D%22jobItem%20evenRow%22%5D%27%20) The problem is, if you want to grab all the results, they seem to be putting in different classes for sponsored jobs, and the first result. There some good documentation on YQL and its not too difficult to get it working. 
Yes - but then again - this query returns the DIV elements that area already there, in the source HTML - the same could be done with PHP DOM. You can fetch the actual job offers - witch are put in the HTML - but not the job count ("82 nurse jobs in Perrysburg, OH") witch is entered into the DOM with JavaScript after the page is loaded. Why did they choose to put the actual jobs into the HTML and not the count - I do not know ;) So you can try to use: $xPath-&gt;query('//div[@class="jobItem"]')-&gt;length And probably get the correct results edit: ok, not quite - that would give you the number of job offerings on that single result page, but the data is paginated so you would need to fetch addidional pages thus making the process more complex and easier to trace on their end ;-)
Kudos, it looks like a nice light system. 
Bingo! Thanks much for that. I found that when I removed the html the query would only be inserted once, though I hadn't thought of it as I had not specifically enabled mod_rewrite, apparently the host had it enabled by default. Happy Bday btw.
I'm fucked.
[Link for the extremely lazy](http://www.reddit.com/r/PHPhelp)
I'm not active on either much, but it seems more logical to me to keep them all here. Since there's not much activity over there you'll hit more people over here and it's closely related enough that it doesn't cause clutter or anything imo.
I think it does add clutter. I come here to find and discuss interesting PHP related things, and not stumble into Q&amp;A sessions that can be seen in a zillion different other places. Granted they can be interesting too, but not usually.
What kind of interesting php related things would you prefer to see? I mean, this is like the web_design guys complaining about the abundance of "Evaluate my design" posts, there just isn't that much other content to post.
Non-issue. Seriously, there isn't enough activity here to be concerned.
Disagree, with a few counterpoints: r/php is a small and infrequently updated. There needs to be a concentration of activity in the main category to generate more user interest and more interesting/useful posts. I like the code sharing and critique, this has potential that r/programming does not. r/phphelp is a tiny/useless stackoverflow. 'Help' related posts could be tagged as such: [help] for instance so they could be easily found or ignored, depending on your preference. Better to think of the good of the community versus personal preference. I wouldn't post help topics, and I doubt my replies would be very lucid, but I can see the benefits for others. Complaining about clutter on reddit is also an exercise in futility.
I stumbled upon [thechangelog.com](http://thechangelog.com/) the other day, so something like that I suppose. Or discussing the future, things you like/dislike, interesting code snippets and finds, gotchas, and the like.
Wow, I didn't know that anyone knew about /r/phphelp. I started the subreddit so that people could ask specific programming problems they're having. Some people loved the idea, others didn't because /r/php doesn't have enough activity to warranty a new php-related reddit. I guess it's a matter of opinion, and to be honest, I thought phphelp flopped and I haven't even checked it in a while.
This is exactly why I created /r/phphelp... so that /r/php didn't get cluttered with useless "why isn't my code working?" threads. Some liked the idea, others didn't. And there are very valid reasons on both sides of the debate. I figured that /r/phphelp died and I haven't even checked it in a while. I'd like to hear other people's opinions on the issue.
I don't actually work with WordPress, so if someone else chimes in who does then I would definitely take their advice over mine. But for now I don't see anyone else responding so I'll try to point you in the right direction. I'm not really sure what you should do about your third question, but my initial guess would be to see if modifying the "showposts=6" part of the query on line 55 of single.php. To change the width of the lines in your post, you should be able to make some changes to the CSS files. I can't really help you out with where to do that, but it might be done through the admin panel of WordPress or maybe directly on the FTP. I'm not entirely sure... Modify the style for the class ".entry" in style.css on line 505 .entry { margin-bottom:20px; border-bottom:1px solid #E4E4E4; } can be changed to: .entry { margin-bottom:20px; border-bottom:1px solid #E4E4E4; width:800px; } or whatever width you want. If you also want to center the text in the white area you can add: .entry { margin-bottom:20px; border-bottom:1px solid #E4E4E4; width:800px; margin-left:auto; margin-right:auto; } You can also try adjusting the width of the white area itself, but I wouldn't really recommend it since there could be other parts of the layout that are assuming this width. I think the tags are expecting to be on their own line, but you should be able to easily space the previous/next links out by removing the "grid_4" class from the div on line 9 of single.php &lt;div class="grid_4 alpha"&gt; changes to: &lt;div class="alpha"&gt; Then you should be able to float the next and previous divs to the left and right by adding the following to your style.css file: .navigation .previous { float:left; } .navigation .next { float:right; text-align:right; } I hope some of this can help you out, and I'm sorry I can't be more specific about how to make these changes in WordPress.
There are 1-2 posts a day here. Maybe 3-4 on a "busy" day, and this includes the "help me" posts... To consider this subreddit cluttered at this point is unfathomably crazy to me.
The 960.css file (that defines all of the grid classes) looks like it's a part of a grid system that you can read about here: http://960.gs/ I'm not actually familiar with it though. The other classes that are applied to all of the elements (div, p, h2, etc) are just normal CSS classes. If you're not familiar with CSS you can probably get started here: http://www.w3schools.com/css/ It's not a particularly complex thing to get started on, but there is definitely a lot there if you really want to learn it. Basically a div is a block on your webpage and you apply classes to it to define the layout of that div. By default it's just a square area that takes up the width of the its container element (the page, or containing div, or whatever the div is inside of). Those different "grid" classes set the div to a particular width and define some padding or margins. A good way to mess around with things in your browser is to install the FireBug plugin if you are using Firefox: http://getfirebug.com/ After you install it, you can right click on any part of your page and choose "Inspect Element" and you can see all of the styles and classes applied to whatever element you clicked on, and modify them in real-time to see the effects.
I check it occasionally to see if anyone needs help with anything.
Honestly, I disagree with you on this point. There is normally only very basic stuff in this subreddit, I think it could be fun to branch out into discussions about things like extensions and other more advanced topics.
I don't really see the difference, if its a complicated enough problem whats the issue with posting it in r/php? Even the stupidest questions help people learn and build the community you never know someone might post an approach you have never thought of. Is everyone here a php god that doesn't have the time to help someone?
thanks.
There is a link to that subreddit in the description box on the right ;)
You can't do this directly from Javascript to PHP without reloading the page. If you're using it elsewhere in the page, why not just do it with javascript too?
Basically you have to send a request to the server for further processing in the background. Then you can return a value from PHP to JS and update the page accordingly. Take a look at jQuery's .post function.
1. Make sure the &lt;select&gt; is contained within a form-tag, something like this: &lt;form action='index.php' method='post'&gt;. 2. Add a submit-button to the form with &lt;input type='submit'&gt; 3. Load the page, and press 'submit' 4. The value you selected in the dropdown box is now available in the PHP variable $_POST["List"]
dogg, its 2010, use: console.log(value + ' chosen'); and not: alert(value + ' chosen') 
Thank you, this worked.
Ironically, I've had a few cases of Firebug duplicating form submissions, resulting in similar issues to the OP.
The original envisionment of /r/php was to contain tutorials and news (like security and updates) along with discussions about random things in PHP. When I stumbled upon /r/phphelp I thought it was a good idea to separate out the "help with my code" post from the news post, and thus the reason why I cross linked it in the sidebar. Being that /r/php is not extremely busy, it really doesn't matter if the help post get lumped into /r/php, but /r/phphelp is a nice backup if the day ever comes that we end up with more help post then news post.
Second
The problem is that that div isn't populated till the JavaScript on the page runs. BTMPL also noticed this. Disable JavaScript in your browser, load that page, and you'll see that the div is empty. The data you're trying to get is on the page, but you'll have to use regex: &lt;?php $html = file_get_contents('http://jobsearch.monster.com/PowerSearch.aspx?tjt=nurse&amp;where=Perrysburg%2C%20OH&amp;rad=60&amp;rad_units=miles&amp;tm=60'); preg_match('/"Header":"(\d*)\D/', $html, $matches); echo $matches[1]; ?&gt; Note that it doesn't work unless you change the space in `Perrysburg%2C OH` to `%20`.
this is not even true memory as two pieces are not the same
But 'clutter' is not a synonym for 'busy'
Okay thanks, that's understandable and fine, I just wanted to know as it wasn't clear to me.
Personally I'd go with Virtuemart. Its a Joomla component and althoguh its got its downsides it's a lot better than PrestaShop. It also tends to be more reliable. I've used it on loads of sites. E.g. My [wooden toy shop](http://www.oldfashionedtoyshop.co.uk). 
I've used Magento and Cs Cart. I like both of them. There was a bit of trouble getting Magento running but once it was fully installed I found it works very well. You definitely need to have an opcode cache such as EAccelerator or it'll be painfully slow. On the other hand, cs cart costs a couple hundred dollars but it's fully featured, very easy to customize, and pretty fast. I also have contacted their support team various times and they are usually quick to respond and helpful. If you need a free option then Magento is the best you'll find. Otherwise, I'd go with Cs cart for the reasons listed above.
Unfortunately, both carts are horrible. Magento will require dedicated hardware for anything but the most trivial of sites (its 275 tables, all set up using an EAV system, so it's essentially forcing MySQL into a NoSQL database). It also had a huge CSRF vulnerabilities I discovered a while ago (that they fortunately patched). CS Cart is equally as bad. I discovered a slew of errors a while back (http://leftnode.com/vulnerabilities-in-shopping-cart-software-cs-cart/) which the developers seemed reluctant to fix. I don't know if they're still there, but it wouldn't surprise me. CSRF is, unfortunately, not as well protected as SQL Injection or XSS attacks, but is just as damaging, if not more.
I'd stay away from any software that thinks using a single statement like: global $vendor_image,$vendor_country_2_code ,$vendor_country_3_code, $vendor_image_url, $vendor_name, $vendor_state_name, $vendor_address,$vendor_address_2, $vendor_url, $vendor_city,$vendor_country,$vendor_mail,$vendor_store_name, $vm_mainframe, $vendor_state, $vendor_zip, $vendor_phone, $vendor_currency, $vendor_store_desc, $vendor_freeshipping, $module_description, $VM_LANG, $vendor_currency_display_style, $vendor_full_image, $vendor_accepted_currencies, $vendor_address_format, $vendor_date_format; As good programming standards. 
I was not aware of CS Cart's security flaws. It's kind of sad that their recommendation is to rename the admin.php ( http://kb2.cs-cart.com/adminarea-protection ). Magento won't run well if you have shared hosting because of the lack of the opcode caching but I ran it on a VPS that cost $20 bucks a month just fine. However, it seems you are knowledgeable on the subject so what's your recommendation? 
seriously! What. The. Fuck.
Yeah, I was a bit miffed to see that was their scheme. Totally avoiding the issue at hand and just using a red herring to potentially alleviate some issues. I'm still not a fan of Magento, it seems to be overkill. I mean, the thing has like 4 separate frameworks built into it. Unfortunately, in the PHP arena, there aren't many good carts. I've been slowly working on one for a while, but haven't had much time to finish it. For my site, I've given up the hosting it myself route and gone with BigCommerce. While it bugs me I don't have access to the source, it's pretty powerful and has worked so far. I've also heard good things about Shopify, but again, it's hosted. On a side note, stuff like this is why PHP developers get a bad rap. Here you have a company selling software with known security issues and their solution is to rename the offending file. PHP is great because you can get started quickly, it's powerful, fast, has a huge library, runs just about everywhere, and has tons of prewritten software. However, those reasons are also why it gets a bad rap: because it's easy to write shitty software, release it, and make money from it. Alright, rant over, but if you find a good, solid, secure, and fast PHP shopping cart, I'm all ears because I'd love to hack on one (the closest I've seen is OpenCart, which I may give another shot now that it's more mature).
Wow, I can totally relate to that. Creating change on a crappy process with a crappy team is tough sometimes. Creating change when the project is as successful as php is; fucking nightmare hard I imagine. 
Analyze the web logs and get more inforamtion about web traffic
Oh it's certainly messy but it *works*. It's very easy to alter (unlike Magento). Has a huge array of cheap/free plugins (unlike Prestashop). It's built on top of one of the best CMSs you can get.
I can see why he would want to step away after the way the php internals group fell apart over unicode. Don't get me wrong i am glad they scrapped their current approach and have started fresh, but I didn't like how it came about.
blogspam, here is the direct link: http://piwik.org/
I could tell that from the displayed URL, and came straight to the comments instead. Thanks for posting the direct link. Edit: not that the direct link works!
That sounds like a Chinese spammer statement. It is something about the sentence structure.
I really hope PHP pulls their act together, it's a great language it just needs to be worked on.
Prestashop has the same bad design: for example in Discount class, getCustomerDiscounts you have global $cart; global $cookie, global $smarty all over the place.
Yeah, now you're tightly coupled to those global variables, and they have to be mocked if you want to do any type of unit testing.
tl;dr
Unit testing in PHP is as rare as a black president.
Qcubed is basically just an ORM and a form library. Frameworks include much more like routing, controllers, view abstractions, and much more. Qcubed is basically just a slice of a framework.
Unfortunately, you're right. However, it's picking up steam and a lot of competent projects are using it now.
That's usually a good attitude to have about something that could help you be a better PHP programmer. No wonder we're not respected...
To be honest, like jezmck, I didn't read it. The lack of images makes it look boring, and when you decide to push past that you realise there are no subtitles. And if you make it past that then you realise there are no subtitles because there is actually no structure at all! It's just a train of thought article that meanders so much that it's impossible to follow.
Let's see: 1. He denigrates his topic in the head. 2. His first paragraph is about his ego. 3. Within the next three paragraphs, he uses terminology that an uninformed audience doesn't know, and doesn't bother to explain. So, I made it to the fifth paragraph and killed it.
See the article [PHP to Scala, Scala to JavaScript](http://www.scala-lang.org/node/6394), too.
I think I just threw up a little.
You made it further than me :D
I've heard of and worked with QCODO, and must admit that I am not really a fan, working with it really felt like pulling teeth.
Use the foreach. It's much clearer to read. If at some point you need to optimize, run a profiler. I doubt the speed of for vs foreach come into the equation until you are running a site with traffic on the yahoo / facebook scale.
OOP didn't make much sense to me until I saw a working example. Instead of looking for a tutorial to guide you through, you could try and examine a currently operational example while referring to php.net. Good luck.
I'm not sure off hand but I do know it's bad practice to use: for ($i=0; $i &lt; count($people); $i++) {... This will call count() on every loop. $count = count($people); for ($i=0; $i &lt; $count; $i++) {... will avoid this. If I had to take a guess without testing I'd probably say the for loop is faster. That's a guess.
I like foreach because it is super simple to put up and get a result quickly. Though a "for" loop gives you a bit more control in my opinion.
I'm not exactly sure how to do this in PHP, but in C, to test if this is actually making a difference and recomputing each time, I'd probably take a look at the object code. I'd test out the foreach vs for as well as the two versions you suggest. But I'm not really used to some of the recomputing that goes on. I was playing around with javascript the other day, made an array of elements with a certain class and then one by one removed that class, but it kept giving me error messages. Eventually, I figured out that it was recomputing the array even though I had declared it before my loop.
What if I need to loop again inside the original loop? Should I keep using foreach? I mean: foreach ($people as $person){ foreach ($person as $p){ foo(); } } 
foreach allows me to pull each key from the array as well as each value (if I need it). The for() method you mentioned does not seem like a logical method at all.
Try $time = microtime(true); for(){...} $time2 = microtime(true); echo ($time2-$time)." microseconds"; Make sure your data set is obscenely large.
I agree. Using a for loop to run through an array isn't a common practice either, would likely confuse anyone else reading the code for a second. And for loops make my eyes sad. 
Yep. It's actually better - instead of thinking in terms of a count you think in terms of sets which winds up being more intuitive and easier to read. foreach ($countries as $country { foreach ($country as $province) { foreach ($province as $county) { foreach ($county as $township) {... Try thinking of that in a for loop.
Why not? Just make sure the variables make sense. Depending what your example is, this would probably be more appropriate: foreach ($people as $person){ foreach ($person as $attribute){ foo(); } } 
Mammal is a class that represents a hairy, live-birth creature. It has functions for makeNoise(), move($direction), and properties for legs, toes (all fingers are also toes), among other things. A Dog is a class that implements Mammal. It also has functions for makeNoise(), which is extended by bark(), and it defines how many legs and toes it has. It does not include a move() function, but it does include walk() and run() functions. A Cat is a class that implements Mammal. It also has functions for makeNoise(), which is extended by meow(), and it defines how many legs and toes it has. It includes a modified form of move in which the only line is "return null;". It has a different function called walk() which is always malfunctioning because it likes to walk the Cat class too close to other objects. It also has a special function called takeOwnership() in which it will make the Cat class rub its face on another object, thereby making the other object unwilling to think clearly while Cat is near. If takeOwnership() is not effective then there is the mark() function. This releases a foul smelling liquid that quickly destroys Furniture and Rug objects. It also causes RespiratoryDisease objects to enter Human objects. A Cat object's eye property implements the AlienInvader class. This is the same class that's implemented in Snake and Goat eye properties.
There is a nicer way to go about this: for ($i=0; $i &lt; $count = count($people); $i++) {... It has the same effect, is clearer, and does not need an extra line of code. I think that the $count variable also goes out of scope when the loop is done, just like the $i variable will, which is an added bonus for keeping your scope clean. Just remember to name it something besides $count in any embedded loops, just like you would need to change $i.
IIRC, a PHP Dev stated that it definitely does recompute every time.
You should use whichever is more syntactically clear for the task at hand. From what I remember, one of the two uses more memory, and the other uses more CPU, but the difference is so incredibly tiny that it does not matter which you use, even under high load.
Yup it does
Yeah, use foreach. Even if for is faster, I think you would sacrifice a lot more in readability than you would gain in speed unless you're having massive scalability issues, and even in that case it's much more likely the real bottlenecks are elsewhere. 
I would have to do testing to confirm, but if I remember correctly, the way I stated does not re-compute every time, it initializes the variable only once and then reads it after that. I would be happy for someone to prove me right/wrong though, I would hate to be typing extra code for no benefit.
I'll take code clarity over premature optimization any day.
Ignoring that your $count initialization is in the wrong section, another clever-ish solution would be: for ($i=count($people); $i; $i--) {... This will cause you to iterate the list backwards, but often, that doesn't matter. Also $i is 1-based in this usage, so you'll need to subtract 1 from it to get your actual index for $people accesses. Also, PHP arrays aren't necessarily continuous. For example: array( 0 =&gt; 'a', 1 =&gt; 'b', 3 =&gt; 'c', 4 =&gt; 'd', ) is a valid array, but can really only be iterated over with a "foreach" loop. If you try to use "for", you'd need to so some much messier crap in each iteration to the point where it wouldn't even be worth the effort.
The question wasn't about which one you prefer. I'd actually be interested in seeing some data on which one's faster, because I often wonder the same thing.
You're worrying in all the wrong places. :)
bdlang is right. $nums = array(1, 2, 3); for ($i = 0; $i &lt; $count = count($nums); ++$i) { echo "Current number: $nums[$i] Total count: $count&lt;br /&gt;"; unset($nums[2]); } Output: Current number: 1 Total count: 3 Current number: 2 Total count: 2 
Well actually there were two questions, and the second was: &gt; Which one should I use as "good practice"? It would be fairly easy to determine which is faster. If you really care that much, just take the couple of minutes to find out.
the for loop is much faster than the foreach loop: #!/usr/bin/php &lt;?php $a = range(1,500000); $startTime1 = microtime(); foreach ($a as $num) { // do nothing } $time1 = microtime() - $startTime1; $startTime2 = microtime(); for ($i=0; $i&lt;count($i); $i++) { // do nothing } $time2 = microtime() - $startTime2; echo "Foreach took $time1 microseconds\n"; echo "For took $time2 microseconds\n"; Results: [david@supercat] ~ % ./foreach.php Foreach took 0.046144 microseconds For took 3.4000000000034E-5 microseconds [david@supercat] ~ % ./foreach.php Foreach took 0.045981 microseconds For took 3.6999999999954E-5 microseconds [david@supercat] ~ % ./foreach.php Foreach took 0.046679 microseconds For took 3.5000000000007E-5 microseconds [david@supercat] ~ % ./foreach.php Foreach took 0.04625 microseconds For took 3.5000000000007E-5 microseconds [david@supercat] ~ % ./foreach.php Foreach took 0.045676 microseconds For took 3.9000000000011E-5 microseconds [david@supercat] ~ % ./foreach.php Foreach took 0.046156 microseconds For took 3.5000000000007E-5 microseconds 
Your code is bugged, you are douig a count on $i not $a. Also, foreach is also assigning the $num variable which would be another step inside a for loop.
Fixed: &lt;?php $a = range(1,500000); $c1 = $c2 = 0; $startTime1 = microtime(true); foreach ($a as $num) { $c1 += $num; } $time1 = microtime(true) - $startTime1; $startTime2 = microtime(true); for ($i=0; $i&lt;count($a); $i++) { $c2 += $a[$i]; } $time2 = microtime(true) - $startTime2; if( $c1 != $c2 ) die( 'Something wrong.' ); echo "Foreach took $time1 microseconds\n"; echo "For took $time2 microseconds\n"; $ php test.php Foreach took 0.072410821914673 microseconds For took 7.8921890258789 microseconds $ php test.php Foreach took 0.072641134262085 microseconds For took 7.9382688999176 microseconds
&gt; No wonder we're not respected... Talk about yourself, my clients appreciate me :)
Silly question: just try it and find out. Okay, it's not as easy as that. On older versions of PHP for() was faster, since it did not manipulate or copy the original array. foreach() makes a copy of each element for the loop, so there is an additional penalty on making that copy. Except - in later versions of PHP, the copy you make only becomes a real copy if you manipulate either the copy or the original element that was copied. Until they diverge, they are both handled as the same structure in memory. So the answer is: yes, once, but not now, except if you manipulate the copies ($person in this case). Personally I use foreach() nearly all the time. It is just easier to see what is going on, that is important for quality of code and correctness.
Your code reevaluates the array's size everytime, which foreach obviously doesn't do. &lt;?php $a = range(1,500000); $c1 = $c2 = $c3 = 0; $startTime1 = microtime(true); foreach ($a as $num) { $c1 += $num; } $time1 = microtime(true) - $startTime1; $startTime2 = microtime(true); for ($i=0; $i&lt;count($a); $i++) { $c2 += $a[$i]; } $time2 = microtime(true) - $startTime2; $startTime3 = microtime(true); $max = count($a); for ($j=0; $j&lt;$max; $j++) { $c3 += $a[$j]; } $time3 = microtime(true) - $startTime3; if( $c1 != $c2 ) die( 'Something wrong.' ); echo "Foreach took $time1 microseconds\n"; echo "For took $time2 microseconds\n"; echo "For2 took $time3 microseconds\n"; ?&gt; Foreach took 0.055773019790649 microseconds For took 0.13694095611572 microseconds For2 took 0.059796810150146 microseconds
For performance reasons on older versions of PHP for-loops were a lot more common. It is something to bear in mind when looking at older code.
Good find. I'm normally avoiding this myself, but just used the original code this time. You can do the following to make it more compact: for ($j=0, $n=count($a); $j&lt;$n; $j++)
7.89 vs 7.94 - virtually nothing in it. In that case go for what is more easily understood. Now - one thing that should make a difference is changing the value of any element in your loops. If you add one to each $num in both loops, I would expect foreach() to support a lot more. That would be amplified if $num was a larger data structure instead.
It also makes some big assumptions about the continuity of the key value range, and the order in which the elements were created. You may know it is guaranteed, but I have seen so much code in my time that does not.
&gt; one of the two uses more memory In PHP4 yes. In PHP5.2, not necessarily.
If you fetch the key in the foreach() loop, then that gives you the control to manipulate the original array: foreach($items as $key =&gt; $value) {...}
This times a million. If your code needs this or the echo vs print or the ' vs " to run properly you have other problems.
Pay attention.
You can use [vld](http://derickrethans.nl/projects.html#vld) to check the generated opcodes and see it for yourself.
I seriously doubt there has ever been any merit to that statement.
* [PHP Builder](http://phpbuilder.com/) * [Devnetwork](http://devnetwork.net) * [Stackoverflow [php]](http://stackoverflow.com/questions/tagged/php)
This is not a spam statement. The Software is a open source product to analyse the web logs.
* [Sitepoint](http://www.sitepoint.com/forums/forumdisplay.php?f=34) * [Stackoverflow](http://stackoverflow.com/questions/tagged/php) * And I run a local [meetup group](http://www.meetup.com/copenhagenphp/).
so it is - how embarrassing! As for assigning to the $num variable, well inside the for loop you would just use $a[$i] rather than assigning so I think it's a fair comparison to not do this inside the for loop ... unless I have misunderstood you.
People really do this? IMO readability is most important, until speed becomes an issue. When speed becomes an issue, it's more likely that optimizing a DB query is going to be what you end up doing rather than changing your for loop.
People should only worry about this when they care about performance. Since this thread is about answering a performance-related question, it's a perfectly good answer.
It's not advisable to manipulate the array while iterating through it.
Premature optimization is the root of all evil.
It does matter to me. I see support requests nearly everywhere I go (even on linkedin) and I'm sick of them, especially the lazy ones ("which is faster, foo() or bar()?" and the "I cannot be bothered to open php.net" type of questions). I've unsubscribed with some regret.
I agree. I have inherited a piece of code that, although it works, has inconsistent usage of the " and ' simply for embedding variables. Mixed in the same line, you'll have code like: $variable .= 'This is harder ' . function() . " to read $evenif it still works."; Drives me up a wall. Doesn't affect functionality but truly affects maintainability.
&gt; The question wasn't about which one you prefer. Sure, but if the question is irrelevant, then we should point the submitter in the right direction. Newbies often worry way too much about speed. As someone else said, for vs. foreach won't make a difference speed-wise unless you got a site with Yahoo-like traffic. Sure the question is relevant if you're into the nitty-gritty details of how PHP works, but I'm guessing an expert like that would know how to perform benchmarks.
At that point, the foreach alternative becomes a while block with the old-school array functions: next(), current(), each(), etc.
Right. I don't know about the performance of PHP5+, my knowledge in this area is based on the 4.x line.
Thanks! I am trying to track down where I read the method I said, but I am not having much luck. Would like to set them straight. :)
Right on all accounts. For loops are really only for the situations where you know you are using a continuously indexed array, and they do have their place.
Will answer all of your questions about benchmarking stuff like that: http://www.phpbench.com/
i got in the habit of using ' vs " because it's easier to type, and it's harder to make mistakes. echo "foo = $bar"; looks different in dreamweaver than in npp, and since that is a divide i deal with daily i take the extra 1/2 second to type 'foo=' . $bar so nothing explodes when someone uses my code for something else. *edit halytech posted the same thing an hour ago articulated better.
OP wrote: &gt; Which is faster? Which one should I use as "good practice"? Whichever is faster, I reckon that "good practice" says use the most readable one, unless you have performance problems in which case run a profiler and optimise where you get the most benefit.
* [/r/php](http://www.reddit.com/r/php/) * [Stackoverflow](http://stackoverflow.com/questions/tagged/php/)
That's pretty neat. I would like something like that.
foreach is faster to type, understand and maintain.
It's pretty close to what kate does
foreach, while clearer, can be 3-10 times slower than a traditional for loop. If you're doing enterprise development, using the for loop is considered best practice. 
Not to mention, single quotes are not parsed for variables or special characters so they are also faster than double quotes.
I like that, I'll write a plug-in for Aptana during this weekend if I'll have some freetime. 
That all depends on the complexity of the loop and array/object.
I was looking for this answer. To quote The PHP Benchmark, &gt; In all cases I've found that the foreach loop is substantially faster than both the while() and for() loop procedures. There you go. Readability AND Speed.
Awesome! I'd sent this around to some developer friends some time ago, but they didn't get the point. I would have done it myself but I had figured somebody out there must have already done it. Thing to consider: - threshold limits if doing by gray-levels (i.e., if too deeply nested, then possibly cycling through shades from beginning, otherwise deeply-nested functions get shaded too darkly). - perhaps CSS-based, as in /r/php. Possibly doable for mozilla-based IDEs, such as Komodo and Komodo Edit. Dunno about emacs . - would likely require some fine-tuning so doesn't clash with syntax highlighting. Anyway, lemme know how this gets on, definitely would be a useful feature. 
Since PHP is such a weakly typed language, it might not be the best one to learn about OOP (that being said, it might then be the least frustrating language to learn about OOP). You might want instead to look at tutorial for [Java](http://java.sun.com/docs/books/tutorial/java/concepts/index.html) instead, which is strongly typed, and thus you are much more aware of how you are already using objects when you do things like declare variables.
Kate is an amazing editor. I wish I could setup a project and have it autocomplete from my classes. I'm going to install Kdevelop 4 because I think it uses the Kate editor.
Yep. That is the answer.
I'm aware of [this](http://www.foldr.org/~michaelw/emacs/#color-box) which does it for lisp in emacs. It should be a simple matter to modify the scanner to support indention instead of parenthesis.
yeah, that's what I was going for. need to get my emacs chops up to speed again....
Well it's not always about a huge amount of traffic. I actually have 8TB of logs that I parse every once in while with a PHP script. Knowing which one's faster could actually save me some time, seeing as how it takes a couple hours for it to parse everything.
Mainly Stackoverflow and [Habrahabr](http://habrahabr.ru/blogs/php/).
what's up with the odd-dithered oversharpened JPEG? :/
well of course, but it only becomes a problem at large scales.
so you start coding without thinking in optimization?
what do you mean?
I use "blah" . $blah . "blah". Or ideally, sprintf( "blah%sblah", $blah );
Yeah, variables in strings are dumb as shit anyway. sprintf, people, use it.
You shouldn't worry about these micro-optimizations, they save nearly nothing at all. You should still use foreach() for readability purposes, but more effort should be put on streamlining your code (saving queries, caching, that sort of thing)
But if you get in the habit of using your quotes correctly in the first place then it never becomes a problem... 
I came here to say this.
Don't waste your time worrying about the small stuff. Profile your working code and discover where the true bottlenecks are. It's easy (and it can be a fun learning exercise) to spend hours profiling the difference between things like for() and foreach(), but in the end, you need to focus more on programmer time. What's more important, saving a few microseconds, or writing more easily understandable (and therefor less bug prone) code that saves programmer time figuring out what your program does? 
You get the point of the pic, so why the hell does it matter? This ain't a beauty contest.
This is /r/php, people aren't out to do things well, just to get them done. ;)
This is the kind of mentality that I absolutely dislike. But oh well.
that hasnt been in the case in php for years. http://www.phpbench.com/
I vaguely recall that [KDevelop](http://www.kdevelop.org/) provides something like this.
Quanta does this. I love Quanta but it is getting out of date. It is also missing one feature I would love to have: 'code jumping', or being able to Ctrl-Click on a function name and jump to its place in a file.
I see that. As a general practice I use single quotes for strings unless I explicitly need the string parsed.
I use Zend Studio based on Eclipse and it has a code formatting tool that allows you to use preset code formats or define and distribute your own. I'm pretty anal about code format for readability so I tweaked the hell out of most of the settings. 
Reading through Doctrine has blown my mind more than once... 
haha, I was looking at that code and was thinking "man, that's a weird method of writing PHP code" then realized the .py in the filename.
I used to be a moderator of DevNetwork, signed up a day or two after they opened. I just logged in and apparently I've been stripped of my modhood, which is easily understandable because I haven't been there in over a year or two. Was a really good community when I was there, the questions just got so repetitive that I just stopped visiting. Ah, I miss the days of evilwalrus, phpmac, and the other sites.
I submitted it to /r/php cuz the CSS template for /r/php does the visual scoping I was looking for.
I agree, its a good practice for readability.
Legacy code is still around. I have to work on a project now that depends on $GLOBALS, =&amp;, function &amp;derp() { }, and had to scour the web on how to compile PHP4 on Ubuntu 10.04 (and impossible feat, unless your time is worthless). I settled on installing an ancient version of XAMPP that had PHP4 support. sigh
Don't use count in the loop, ie... for($i=0; $i &lt; count($people)... You are calling the function each time the loop runs, it is recommended to run the count before the loop and just increment from there.
Well, foreach is the most readable and fastest method. So, everything is dandy :)
it doesn't matter how good *my* habits are when other people are making changes to code i wrote.
the first one is a waste of double quotes, since they send the string through the interpreter to look for $variables. either do "blah $blah blah" or 'blah' . $blah . 'blah' but not both.
Komodo Edit does that. http://www.activestate.com/node/1533
Besides /r/php and stackoverflow I sometimes go to the Seattle PHP meetup group or help on the email threads for it.
I use Notepad2, which allows to define different highlight colours for single-quote and double-quote strings. I set it with a rather pukish colour for double-quote strings so I use the faster single-quotes all the time until I need to embed a variable (a neat feature!) or escape special characters.
Sounds like you're involved in Aptana, at least to more of an extent than I am. Please pardon my hijacking of this thread to ask a question that continually annoys me: do you know if it's possible to enable code assist for CSS, JS, PHP, etc. when using a remote server (in this case, SFTP)? I can get code assist working on local files, but not over SFTP. Otherwise Aptana is by far my favorite and preferred IDE.
[PhpED](http://www.nusphere.com/products/php_ide_major_features.htm)
How do you enable that type of highlighting in PhpED?
Netbeans!
I of the only "snippets" in this article was showing how to make your code vulnerable to SQL injection attacks.
* /r/php * StackOverflow * Zend Framework (#zftalk as well) * Doctrine Also used to go to the local meetup. (edit: formatting)
VI can be configured to do the code folding. Not sure about the color coding of scopes though.
+1 - You beat me to it by 956 milliseconds!
Prepare to take it twice. The questions are arcane, impractical, subtle, random, and ultimately difficult. Also, it never meant as much to anyone else as it did to me, after passing it. I am proud of it, regardless of what anyone else thinks about it. Know the XML functions, know how operator precedence works by writing a random string generator that generates symbols and letters of an arbitrary (small) length and try to figure out if it will run and what the result will be for the variables. Know a little about MVC. Know the string manipulation functions. Hell, just make sure you know lots of the functions that PHP offers.
/r/php sometimes, Daniweb (yeah, the ads make it difficult), and I help run the [Buffalo PHP meetup](http://www.meetup.com/buffalophp/)
I actually already took it... And failed... Boy, what a death trap :(
freenode.net#phpc #doctrine-dev phpdeveloper.org I go to conferences (at tek-x right now, can't sleep) and meet up with the community there.
Is there a big difference compared to the preparation exams you take on phparch? Those were a breeze. I've bought a voucher to take the exam but didn't have time/interest of scheduling it.
May I recommend [FirePHP](http://www.firephp.org)?
I can't remember where I read it, but I distinctly remember reading that that's not the case for some reason.
No, what I meant was that even in PHP 3, I don't think there was ever a noticeable performance gain.
It won't be in 5.3, but will be in the next major/minor version (whether that be 5.4 or 6.0, nobody knows, but my money is on 5.4 existing). To test, checkout PHP trunk from SVN or to make it easier, test the latest snapshot. Here's one way: cd /tmp wget http://snaps.php.net/php-trunk-latest.tar.bz2 tar xfvj php-trunk-latest.tar.bz2 -C php_trunk_src cd php_trunk_src ./configure --disable-all --prefix=/tmp/my_trunk_build &amp;&amp; make &amp;&amp; make install cd /tmp/my_trunk_build ./bin/php -r 'function foo(int $tmp) { var_dump($tmp); } foo("foo");' This will say: Catchable fatal error: Argument 1 passed to foo() must be of the type integer, string given, called in Command line code on line 1 and defined in Command line code on line 1 
I'm not familiar with the term and googling "Scalar Type Hinting" just gives me lots of blog posts saying "it's finally here". What does this mean for PHP?
It means that you can force types on function arguments, basically. So now you would do this: function something($integer) { $integer = (int) $integer; } You can avoid having to type-cast it by doing this and force an integer. function something(int $integer) { // code }
oooo, ok, I like that.
I NEED THIS RIGHT NOW
tl;dr Sanitize user input!
With the difference being that type hinting (as it stands today, in trunk) emits an E RECOVERABLE ERROR instead (near-fatal), and does not cast anything. And, a custom error handler is needed to catch said errors.
I remember you
And input sanitization is more than adding slashes, html-escaping chars, etc. For example, remove the null byte if you're not expecting binary data.
No need to get chipper
tl;dr Never use eval.
It's much much (much?) harder.
Cool, good explanation, this looks handy.
type casting != type hinting. it doesn't cast anything. the only equivalent to the new scalar type hinting is: function something($integer) { if (!is_int($integer)) { trigger_error('Given value is not an integer', E_RECOVERABLE_ERROR); } }
&gt; it doesn't cast anything I didn't say it did.
Their test prep material is a joke. 
The prep tests don't resemble the real tests. Make sure you know what all of the string and array manipulation functions do Be familiar with SimpleXML and DOM and remember the main functions Spend way too much time going over the differences between PHP 4.4 and PHP 5.1 The test doesn't cover anything from PHP 5.2 or 5.3. Be familiar with MySQLi and differences with MySQL functions, prepared statements, etc Be familiar with PDO Know everything about PHP5 OOP, the magic functions, visibility, interfaces - especially the included interfaces that deal with array functionality for classes, type hinting Know what SQL injection attacks, Session Fixation, Cross Site Scripting, Session Hijacking, and Cross Site Request Forgery attacks are and how to protect against them. Study the SOAP functions Study the Stream functions Know the basics about OOP design patterns like Model-View-Controller, Decorator, Singleton, Factory, Prototype, Adapter, Decorator, Chain of Responsibility, Command/Action, Iterator, Observer... 
oh yes, and regular expressions of course
upvoted for the badass kid in the thumbnail
Regardless, the analogy is misleading (as seen by artnez_'s interpretation of your post).
http://www.php.net/manual/en/language.oop5.php
It's to convert entities for the &lt; and &gt; characters into those characters so nobody can sneak a tag through. I saw a presentation on the [Inspeckt](http://code.google.com/p/inspekt/) library at Tek-X this week. It's more complicated than that function, but probably a heck of a lot more effective.
The doc for [htmlentities ](http://php.net/manual/en/function.htmlentities.php) says: $str = "A 'quote' is &lt;b&gt;bold&lt;/b&gt;"; // Outputs: A 'quote' is \&amp;lt;b\&amp;gt;bold\&amp;lt;/b\&amp;gt; echo htmlentities($str); Why would you convert the tags to the ampersand version if you are going to strip them?
Instead of taking the 30 seconds to look it up, I was giving them the benefit of the doubt that was the right function. You're right, I could totally see using html_entity_decode() there. But htmlentities() would just make things worse.
You also want to ask: What tags will there be left to strip if you converted all the &lt; and &gt; to their HTML equivalents?
Not an answer to your question, but: [Many](http://www.rooftopsolutions.nl/blog/when-to-escape-your-data) (including me) argue that it's a better idea to **sanitize** input (e.g. [trim](http://php.net/trim)) and **escape** output (e.g. [htmlspecialchars](http://php.net/htmlspecialchars)). The only exception to this rule would be to escape, when you're using unsafe input to [evaluate](http://php-security.org/2010/05/20/mops-submission-07-our-dynamic-php/) something (e.g. SQL, regex with *e* modifier, eval, strings with curly braces, variable variables). Also, using something like *htmlentities* on input can cause bugs during output (especially if that input will end up in not-html formats like plain text emails or pdfs).
The question is valid only if you assume that the author was right, while he is wrong. There is no need to call strip_tags() after you've called htmlentities as there will be no tags left.
What you are asking about usually involves [**l10n** and **i18n**](http://stackoverflow.com/questions/754520/what-is-the-actual-differences-between-i18n-l10n-g11n-and-specifically-what-does). Anyway, the answer always is *it depends*. Personally, if I can control the webserver, I use gettext, because it's simple (to setup and use) and the translation file format (*.po) is very well supported (lots of apps to edit translations). Otherwise, I choose some abstract solution like Zend_Translate (that allows to use different backends like plain arrays, xml or .po files). The main reason why frameworks don't use gettext is exactly because of that need for abstraction.
Sanitising should be about validating and stripping out what is not needed *according to what the input expects*. If you expect and integer between 0 and 255, then that's what the sanitising function should check for. There is no "catch-all" sanitiser.
gettext is a great solution, but the problem is that it requires the extension be enabled, which sucks if you're making distributable software. There are PHP libraries for gettext which don't require the extension, such as [pomo](http://svn.glotpress.org/trunk/pomo/) (used by WordPress, along with others) or Zend_Translate (I prefer pomo personally, as it isn't tied to the Zend Framework).
I got curious about this and did a little benchmark with an array of 1000 strings and an array of 1000 objects: &lt;?php # Load company names $company_names = get_test_data(); # For loop... $mt = microtime(true); $num_names = count($company_names); $bench = 0; while(++$bench&lt;10000) { for($i=0; $i&lt;$num_names; ++$i) {$company_names[$i];} } echo 'For loop: '.round(microtime(true)-$mt, 4).'&lt;br /&gt;'; # Foreach by value $mt = microtime(true); $bench = 0; while(++$bench&lt;10000) { foreach($company_names as $name) {$name;} } echo 'Foreach by value: '.round(microtime(true)-$mt, 4).'&lt;br /&gt;'; # Foreach by reference $mt = microtime(true); $bench = 0; while(++$bench&lt;10000) { foreach($company_names as &amp;$name) {$name;} } echo 'Foreach by reference: '.round(microtime(true)-$mt, 4).'&lt;br /&gt;'; **Results on an array of strings:** * For loop: 1.7566 * Foreach by value: 1.5641 * Foreach by reference: 1.712 **Results for an array of objects:** * For loop: 2.0467 * Foreach by value: 2.3766 * Foreach by reference: 2.6299 **Conclusion:** In the *string* test case, FOREACH is actually faster than a for loop. In the *object* test case, a FOR LOOP is slightly faster. Surprisingly, in both test cases, the foreach loop by value is slightly faster than the same loop by reference. However, if you're taking the time to worry about a 0.00000003 second performance gain per iteration you are more often than not just wasting your ti... ...oh shit.
Yes, the call to strip\_tags() is doing nothing in this example. Maybe the author meant to call strip\_tags() first and then htmlentities(), which would make more sense.
thanks for the help, currently using phpmailer and it works fine!
That code is wrong on several levels, but perhaps we are missing the context of it. However: * There isn't a catch-all silver bullet one size fits all (someone else mentioned this) * stripslashes() should not be blindly called. You should know exactly why, like if magic quotes is enabled and affects said string, because it will strip desired slashes even if they don't come from MQ * likely you'll want to pass additional arguments to htmlentities() like htmlspecialchars($var, ENT_QUOTES, 'UTF-8'); is the preferred default way these days (same arguments apply to htmlentities() but most use htmlspecialchars() ... but knowing the encoding you're working with is important * The strip_tags() usage there is bogus and more of a paranoid 'just-in-case' Also check out the [filter](http://php.net/filter) extension as it works in many cases. 
Could take a look at this if you're trying to avoid a framework: http://flourishlib.com/docs/fText 
Unless the author carefully qualifies when and where this function should be used, I question whether this is a good book to be learning from. There is no such thing as catch-all sanitation.
Dear PHP programmers: Please stop adding to the already overflowing bucket of MVC frameworks. We have enough already and yours is not significantly different from half a dozen that already exist. Yes, they're interesting to build and it's a good way to understand how MVC works. But keep it to yourself unless you're truly doing something unique.
I would use netbeans in a heartbeat if the Java Swing font rendering on linux wasn't god awful.
I've seen way too many scripts that expect an integer, but sanitize the input with htmlspecialchars(). Seriously people, learn typecasting.
Obsolutely agreed, it's always better to store what the user actually entered and then change it on output. edit: especially if this is something the user could be editing in the future. It's better for them to be editing what they entered rather then what you created. i.e.: Markdown vs generated HTML
Not to mention he only needs to strip slashes if magicquotes are on, most systems have them off by default now.
It's also way slower, which sucks - enter once, process n times, display n times? or enter once, process once, display n times? ...?
So process on entry and save separately from input. Storage is cheap.
i wrote some i18n classes a while back, but don't have time to maintain them anymore: http://code.google.com/p/flaimo-php/ i preferred text-files over gettext, because with the latter you can only define the language once per page.
&gt; There is no "catch all" sanitiser. And, also, there's no need to roll your own. PHP has perfectly cromulent [filter and sanitize functions](http://www.php.net/manual/en/filter.filters.sanitize.php) that are faster and more comprehensive than what you or I would write. 
Can you expound on what you consider abuses of OOP and subclassing?
&gt;stripslashes() should not be blindly called. You should know exactly why, like if magic quotes is enabled and affects said string, because it will strip desired slashes even if they don't come from MQ I hear what you\\'re saying.
I kinda miss those days, of seeing \' all over the web.
Judging by the cover, that book was written by rodents punching on keyboards with their acorns. And the pathetic sanitizer function proves it. Your question should be: why call strip_tags() if you're calling htmlentities() before it? There won't be any tags left to remove.
&gt; Outside of a framework, of course There's your problem right there.
I have an Irish last name, which means I have an apostrophe in my last name.. I can tell you, I *still* see it all the time. Worse even, I get checks from companies that put backslashes in my last name........ often.
Sure. Except when you're, you know, building a framework.
I never thought about this nasty, nasty trick...
Assuming that the reason for building a framework is a good one (which is an assumption that I *am* willing to make), then yeah, that's one spot. 
I have 2 functions. - safe\_for\_db($string) which will make any string safe to go into the database. It checks if stripslashes is needed or not (so you don't end up double slashing). It can take an array so I can make the entire POST array safe for input if I want. The rule for me is, anything going into the database goes through this first. Also I never display anything that's been through this function on the page again, otherwise you'll see extra slashes. - safe\_for\_html($string) which will output a string, basically that does htmlentities(). This is incase you want to output text that won't affect the page. Of course checking the user has entered something within range is done separately.
The most obvious example is that the AppController can be changed by the user. If the user defines the AppController, it will be used as the baseclass for other controllers, if it's not defined cake defines it. Not sure there's a term for this.. underloading?
I don't really trust PHP functions to do what they claim (or even follow relevant RFCs). Before you know it, a stray zero or invalid UTF-8 byte screws you over. That's how we finally got to: htmlspecialchars($foo, ENT_QUOTES, 'UTF-8') To show my ignorance of filtervar; Should I assume filtervar and friends work on ISO8859-1 ? How to tell it my input is UTF-8?
seriously, they don't have anything easier? OS X sucks.
No. Massive security holes with OpenCart. I read a thread about this the other day on Reddit, but don't have a link on hand. Anyone else have it handy?
Why don't you just adopt a piece of another framework as a vendor to your framework? There's really no point in reinventing the wheel if it's already well done. Doctrine2 dropped their caching component in favor of ZendCache, you could adopt ZendTranslate/ZendLocale and have a huge amount of work done for you. edit: formatting
he links to it in the article. http://blog.visionsource.org/2010/01/28/opencart-csrf-vulnerability/
Hmmm, that is kind of strange. I wonder what their reasoning is to do that?
It's worth mentioning that 'numeric' and 'scalar' type hints are now in SVN trunk, meaning, numeric behaves like is_numeric() would. And not sure why artnez_ example was down voted as it clearly demonstrates type hint behaviour in current PHP SVN (trunk). Oh well.
Sounds like it should be written in Javascript.
seconded
Google for: jquery animation tween
Just insert an image for every field with a link tag around it. If each link has different query parameter (e.g, index.php?x=3&amp;y=4 where 3/4 are the coordinates of the field) you will know where the user clicked. This way you can do it without any javascript.
Use [jQuery UI](http://jqueryui.com/demos/droppable/photo-manager.html) for the drag &amp; drop part, add a callback to send the new position (like the id attribute of the drop target) to your back-end via ajax.
Thank you, I will read about it
input type="image" will post/get x and y coordinates of the click
Ahem. WAMP also exists, as does MAMP.
yeah this find a good tutorial on drag/n/drop and ajax calls, something that works with an example that you can download, then start making little changes til you understand whats going on and how to work it to your specific needs
If the players are on different computers it'll probably need a backend to deal with that.
You use JavaScript to record the movements, and submit those movements to a PHP backend which processes everything.
I'm on it! thank you!
Off the top of my (albeit, recently smoked-out) head, I would first split the board up into squares, probably the easiest to go with [what is already there](http://en.wikipedia.org/wiki/Algebraic_chess_notation). Then you can calculate the relation of a piece according to how it can move, for instance a rook can only move on the second number of the notation. I.e., if it is located at c2, then it can only move +-c2 or c2+. If I were to write this now and have it be easy, I would probably change traditional notation to something easy like 1.1 = a1, 1.2 = a2, 8.7 = h7, et cetera. Then you can can just take the value a person wants to move, say move that aforementioned rook 3 places, and then check 3.(2+3) to see if it is legal and if so register the move. For something more difficult like the knight, it would be the same, just a bit more complex, and have to conform to something like (2+-x).(1+-x) || (1+-x).(2+-x), and you could check and filter that with if/elses. I believe a bishop would be something like (n+x).(n-x) || (n-x).(n+x). Of course my immediate response in tracking the moves is to say use a database, but that could be a bad idea depending on how many people would use the game and if you want features like replays and move tracking, et cetera. If so, then use a database to record all the squares of the game board so that you have a record of what piece is on what square during what move of what game. Throw a timestamp in there too so you can track time elapsed to make a move. If you don't want replays or any of that good stuff, a database may be overkill and you could use sessions or cookies instead to persist the game board data. Perhaps, I'm no expert. Say as an example, &gt; $_SESSION['BN1'] = 8.2 // or, black knight #1 is on h2 &gt; $_SESSION['WQ'] = 4.4 // or, white queen is on d4 If I was setting up a db, I would probably structure it something like: &gt; table\_name.id, table\_name.game\_id, table\_name.piece, table\_name.location, table\_name.turn, table\_name.timestamp OK, I am really rambling; I hoped I helped out a bit.
thank you sir!
np, though I realized I screwed up my notation above. It should be: &gt;something like (2+-x).(1+-y) || (1+-x).(2+-y), and you could check and filter that with if/elses. I believe a bishop would be something like (n+x).(n-y) || (n-x).(n+y). Basically, in traditional notation a-h is the X axis and 1-8 is the Y axis, so the way I presented it would be (X.Y). I messed that up because I am pretty awful at the maths.
I love that smoked out heads can still come up with this. I can't remember the last productive thing I said while drunk.
lol, sure for all 12 of the people that use 'em. The point was the ubiquity of linux in any real php shop, to me makes it worthwhile to develop in linux as opposed to windows (Full disclosure, I dev in OSX but spend my time sshed in to linux [generally centos or ubuntu, depending on the client])
I would lay the board out in an x,y grid based on a series of divs, giving each div a unique ID based on its position "a1", "b4", etc. Then use jQuery UI's draggable/droppable component to handle the actual animation and have it trigger a callback function that would submit the data via AJAX to your PHP script on the back end. The PHP script, in turn, would run the validation checks and return the response. Based on the x,y coordinates derived from the ID, it should be easy to validate the move. If it fails validation, it pushes an error back to the user. If the move is valid, it pushes the move to the opponent so that their board is updated. You can add another step in the middle there if need-be to save the move to the database, which you'll probably want to do, since it's likely you'll need to validate against not only movement, but other pieces on the board. As for getting the client end to listen for the push from the server, the easiest way is probably to use [long polling](http://screenr.com/SNH) since you can't do real push over HTTP. Apache isn't well suited to this technique, though, because you'll quickly run out of worker threads. [Here's](http://github.com/slact/nginx_http_push_module) a NGINX push module that you may find useful, as NGINX is fairly easy to set up and configure and it plays well with PHP.
Though it might be easier to make it without java script first and add that in later...
Meh. You'd be surprised how many amateur web designers use WAMP. Really easy to set up and use to test a website for someone with little experience.
You got some good tips already on jQuery and such, so I'll just add: post again when you have something to show us! :-)
I use `for($i=0, $c=count($people) ; $i&lt;$c ; $i++)`
One of my best problem solving developments came at 2am after 9 beers. I was just drinking and listening to music and looking at my code, and eureka!
I think you got yourself confused now.
sure I will
:D that is a good idea dude! thank you very much
CakePHP uses classes as if it was some kind of include statement. They try to import anything that's useful into $this-&gt;, disregarding separation of concerns. Not pretty =) 
Fair enough, I probably would; :D The point still stands though. No one who has any real scale or real performance or just simply wants to turn a profit (I worked in a shop with 500+ webservers, buying windows would have made that untenable immediately) uses anything besides linux to server php.
:) Alternately, if you didn't want to do long polling, you could have a timer on the client side that runs a script via ajax to check the db for updates (indications of a new move) and reacts accordingly. It's not going to be as responsive, however. 
If you're storing the scraped data in a database, the actual scraping process would be entirely separate. You know, set up a simple php script that does the scrape and database write that runs on a cron at midnight or something. In that case, the Model would access the now-in-database scraped data and return that to the Controller. The Controller would run any business logic on it and then pass it to the View, which would display it. If you have a database, you'll typically want to pull information directly from that instead of loading it into an object. While an object might be faster, if the data changes in the database you'd want it reflected immediately, instead of old data being temporarily cached in an object. You can indeed put the data into an array and use a foreach to cycle through them. $sql = "SELECT * FROM datastuff"; $query = $this-&gt;db-&gt;query($sql); $result = $query-&gt;result_array(); foreach ($result as $row =&gt; $data) { print_r($data); }
&gt;I have a project where I am scraping a bunch of separate pieces of data from a webpage.... The code that scrapes the data should be in its own class--or separated from the code that inserts it into the db. The logic here is that the HTML of the web page you are scraping is subject to change--when it does, the last thing you want to do is modify your scraping code, so segregate it now and take a 1/2 day off later. Also, depending on the HTML you are scraping, your scraping code is at best junk code--that's not your fault. &gt; ...then storing them to a database and displaying them. The code that scrapes the HTML should produce (i.e. return $x) some sort of entity, which you will pass to your database layer. This entity $x might also be what you pass down to your view to display. If you your have an edit view, you might be able to load up entity $x with the $_POST params and send it back up to the database. Can you see the logic here? &gt; Each 'thing' has about 30 pieces of data that I have to keep track of. What I call an entity, you call a thing--it's the same thing :) $entity = array( 'id' =&gt; NULL, 'firstName' =&gt; 'John', 'lastName' =&gt; 'Doe', ); Or // use setters/getters class User { public $id public $firstName; public $lastName public function __construct(array $params) { // configures object with supplied array. } public function getFullname() { return $this-&gt;firstName . ' ' . $this-&gt;lastName; } } $entity = new User(); $entity-&gt;firstName = 'John'; $entity-&gt;lastName = 'Doe'; &gt; Should I be using an object and storing all the variables as data of the object? Entity $x could be an array or it could be an object--this is largely irrelevant! It's about separating your code into logical units. I prefer using objects. &gt; Can I make an array of variable names then cycle through with a foreach? Whether you use a collection of arrays or a collection of objects you want to loop through them using a foreach loop. Google PHP domain driven design to find some good but crude code you can use. &gt; As for MVC, I am starting out on CodeIgniter. &gt; Correct me if I am wrong here: the model would do the data scraping, the view would display it, and the controller points to the functions? Cool. I use Zend Framework. Expect change. I don't need to know CodeIgniter to know I can migrate one of my MVC apps to it. There is a huge debate of what the M in MVC means. But as far as I'm concerned, MVC as it relates to web programming is this: the view contains mostly client-side scripts and is used to render the page; the controller handles the request (i.e. takes the post/get vars, shoots them up to whatever "model" for a response and figures out what view to render accordingly. Whatever framework I use, my model IS COMPLETELY INDEPENDENT from said framework--reread the last paragraph.\ &gt;As for MVC...and the controller points to the functions? Avoid mixing object-oriented programming with procedural programming! Pick one. If you're learning, it's OK--but if you keep doing it, know that eventually, you will be kidnapped and thrown in a North Korean jail! Pre-edit: Ignore comments appealing to code-efficiency; you are no where near that level--nor are they in my view.
Seems like your controller action would perform the scraping, get the data ready, and save it to the database using a model. The OOP data storage you're talking about would essentially be your model. 
Does the View "pull" data or do I "push" data to it? In other words, at what point does the data get to the View? Maybe I want to display an unordered list: $output = '&lt;ul&gt;'; foreach ($query-&gt;result() as $data) { $output .= '&lt;li&gt;' . $data-&gt;value . '&lt;/li&gt;' } $output .= '&lt;/ul&gt;'; return $output; 
I'm not sure if this is how the MVC works (or should work). I am currently working on a project, where I show an entity like so: showPlace.php: &lt;?php include_once('controller.php'); $controller = new Controller(); $place = $controller-&gt;getPlacesById($_GET['id']); ?&gt; Place name: &lt;?php echo $place-&gt;getName(); ?&gt; &lt;br /&gt; Categories:&lt;br /&gt; &lt;ul&gt; &lt;?php $categories = $place-&gt;getCategories(); if(!empty($categories)) { foreach ($categories as $category) { echo "&lt;li&gt;&lt;a href=\"index.php?cmd=showPlacesByCategory&amp;id="; echo $category-&gt;getId(); echo "\"&gt;"; echo $category-&gt;getName(); echo "&lt;/a&gt;&lt;/li&gt;"; } } else { echo "&lt;li&gt;No categories&lt;/li&gt;"; } ?&gt; &lt;/ul&gt; edit: So I guess it's being pulled when the page is loaded.
Typically, the model would represent the data you are scraping from the webpage. This way the same model can be used by your screen scraping code and your MVC structure. Here is an example of how the structure of your controller could look: class MyController extends Controller { // Perform screen scraping. function scrape() { $scrape = new ScreenScraper(); if(($model = $scrape-&gt;parse($this-&gt;config-item('url'))) !== false) { $this-&gt;save($model); echo 'success'; return; } echo 'failure'; } // Display all things. function listing() { $things = $this-&gt;getAllThings(); $data = array( 'things' =&gt; $things ); $this-&gt;load-&gt;view('allthings', $data); } // Display single thing. function view($thing_id) { $model = $this-&gt;load($thing_id); $data = array( 'item' =&gt; $model ); $this-&gt;load-&gt;view('single', $data); } } *edit: updated code example*
In CodeIgniter, you "push" data to a view. When you start "pulling" data from the view you are no longer using MVC. [CodeIgniter User Guide](http://codeigniter.com/user_guide/general/views.html) 
Yeah, I can't see windows stacks being used at that scale.
&gt;When you start "pulling" data from the view you are no longer using MVC. Not that this is relevant to the discussion, however you can pull data into your view using the MVC Design pattern. For example, a view helper might interact directly with a model and bypass the controller.
&gt; salted and stretched hashing implemented in phpass tee hee
MVC is a design pattern, which stands for Model-View-Controller.
&gt; Finally, some of the more recent blog posts, forum comments, and the like have started to recommend phpass, the password/passphrase hashing framework for PHP that **I wrote**, and which has already been integrated into many popular âweb applicationsâ including phpBB3, WordPress, and Drupal 7. ahreum
A relationship.
Build a tree fort.
&gt; however you can pull data into your view using the MVC Design pattern. and I hope people remember that.
[stackoverflow](http://stackoverflow.com)
Thanks, but I know that part. I've read many books on design patterns, and tuts and guide to MVC, and I have some code examples - somehow I just cant use it in my projects, because I just don't get it... Maybe it's because I haven't read it thoroughly or maybe it's because the pattern is 'bigger' than I imagine. I'm sure I'll get it some day, but if you have a great article or something describing how you use MVC in PHP, I would be thankful. :)
But Zend Framework libraries are modular, aren't they? So they're not really tied to the framework?
They are still tied in to "core" components of ZF (exceptions, the loader, etc), IIRC.
define "really well"
C++ if you want to build some PHP or Apache extensions, Python if you want to learn another web-language\* \* not necessarily web
The pattern is simple. Basically it's suggesting you separate your code into models, views and controllers. As I mentioned before, the controller handles the request by taking user supplied data calling various models to get data/functionality and passing it down to a view to be rendered. That's it! How various frameworks implement the MVC pattern is another story altogether--most of them go way overboard. The problem with the MVC pattern as it relates to web programming is that the model is never really clearly defined, which is why I use "Domain driven design" to implement my models. Learn a framework such as CodeIgniter, CakePHP, Fusebox or Zend Framework. Try writing your own mvc framework to learn how it works. 
The controller merely handles the request. In this example, it might get the parameters from the URL/config file and pass it to some scraper model. The scraper class would provide some sort of configured entity (transfer object) back to the controller. The controller would then pass the entity up to the data layer to be inserted. If all goes well, the controller would then load a view file. See how a controller could use many models to get the job done? &lt;?php class FooController { public function booAction() { $scraper = new RedditCommentPageScraper(); $comments = $scraper-&gt;parse('/r/PHP/comments/php_mvc_oop_questions/); if(!$scraper-&gt;hasErrors()) { $dao = new CommentDataAccessObject(); foreach($comments as $comment) { $results = $dao-&gt;save($comment); ... } require_once('hello-world.phtml'); } } ?&gt; 
I'm in the same boat, so far I've familiarised myself with the basics of Node.js and Django (setting them up, displaying basic web pages, not much else really; it was more of a 'just in case I need them' thing), but I'm looking at something to contrast my dynamic language abilities. I've given some thought to which language is most different to PHP and my answer is Haskell (I could be wrong of course). Every time I look at Haskell code I have no idea what's going on; it's a confusing syntax and people talk about operator overloading and related stuff and it sounds like I'm not smart enough to understand what they're talking about. If I can get my head round Haskell then I think that will open my mind more than any other language out there right now.
build a framework or learn some other web-languages as ruby on rails or python cgi.
I'd highly recommend taking a detour and learning either python or ruby first, your PHP and JS experience will count very little towards a purely functional language like haskell. Perhaps you should even try Scheme or Common Lisp first since they have a gentler learning curve and would also introduce you to the functional paradigm.
This is important. How well? If you know those 5, somewhere along the way, you've made some mistakes. Fix those. Somewhere, a project idea had to come along. Make that. Or you can do the best, most challenging thing: Teach someone else what you know... A humbling experience that keeps 'really well' out of your vocabulary.
[Ook!](http://www.dangermouse.net/esoteric/ook.html)
Thanks. :)
Build a UI framework. That's keeping me busy for the last few days. Basically, to eliminate the HTML in your code. My first work was a Item Menu: $menu = new ItemMenu(); $menu-&gt;SetHeading('My Account'); $menu-&gt;AddItem('account.php', 'Edit my account'); $menu-&gt;AddItem('settings.php', 'View my settings'); $menu-&gt;AddItem('edit_settings.php', 'Edit my settings'); echo $menu-&gt;PrintMenu(); And this will echo out a item menu like what you find in applications (File, Edit...). It's 35% PHP, 5% HTML, 40% CSS, 20% Javascript (depending if you need it). I'm using Ext.JS at work and it's way to heavy of JavaScript for our client so we're moving in direction of pre-rendered HTML. It will help your CSS and JavaScript a lot, as well as helping to develop a robust OOP architechture in PHP. That's my suggestion.
I'd pick up Objective C and write an iPhone app from scratch. Not only would you learn something new and useful but you may make some money while you're at it.
BUILD SOMETHING. Knowing languages is good and everything, but in the end you're learning skills to actually create something of use. Build the next big web app!
I meant literally querying the database in the view or something, but pulling data via Helpers or even the model is fine as long as its encapsulated and can be used in other views. 
All that aside, it's the missing p that seals the deal. Unless it's pass for a language called ph.
As for mitigating timing attacks as discussed in the article, one could insert something like: usleep(rand(0, 10000)); Which will randomly skew the response time by up to 10ms.
1. wtf is this supposed to be useful for? 2. you probably meant to use call\_user\_func\_array
2 - yes you're right. I didn't even get as far as testing the code before I realised what it did and removed it (edited the snippet above though). 1 - I don't really know what I was thinking; I'm writing a generic getter and setter and thought something along the lines of "what if the setter is a private method" and wrote the code for it before I really thought about whether that's a realistic scenario.
Paint my house.
[projecteuler](http://projecteuler.net/)? Doing it in PHP offers some unique challenges.
You know there are \_\_set() and \_\_get() magic methods, right?
&lt;/thread&gt;
They are slower than direct calls.
True, but these don't require you to write them...
:) yes, but: `$u-&gt;foo = 7;` can be caught by `__set`. But if I later want to write a custom setter I can't without writing special cases into `__set` or changing the public API of the class. Whereas: `$u-&gt;setFoo(7);` can be caught by default by `__call`, and if I want a custom setter I just add public function setFoo(..)
so's using __call though
[Overloading](http://php.net/__set), not magic ;) Edit: Okay, also [magic](http://php.net/manual/en/language.oop5.magic.php) :p
I currently work for a small company, as the only developer, building mostly internal applications. I try to find new things to do on each project so I don't get bored.
Those blintzes were terrible.
I learned OOP from my teacher... it was easier than books (I think), because he only taught me what I didn't understand (Could answer my questions, give a different example if I didn't get the first one). If you have any questions, you can ask. I'll help if I can.
Awful, a company I used to work at had: foreach ($_GET as $k=&gt;$v) { $$k = $v; } foreach ($_POST as $k=&gt;$v) { $$k = $v; } Which was nice.
this... if you don't need the value of $i for anything other than the index of the array.
ah, re-creating register_globals, because that was *such a good idea!* :) not to mention you could use $_REQUEST and one foreach instead :P
&gt;wtf is this supposed to be useful for? Here's a detailed example. *.Abstract.php* &lt;?php /** * Contains the Project_Domain_Entity_Abstract class definition. * * PHP Version 5.2 */ /** * The Project_Domain_Entity_Abstract class provides a generic setter/getter solution * as well as a populate() functionality allowing callers to quickly populate classes * inheriting Project_Domain_Entity_Abstract using associative arrays. * * The protected member variables prefixed with an underscore of classes * inheriting Model_Abstract are magically exposed publicly via setter/getter * methods or as public member variables. * * @uses Project_Domain_Abstract * @since 2010-03-04 * @author xxx &lt;xxx@xx.com&gt; */ abstract class Project_Domain_Entity_Abstract { /** * Creates a new Data Transfer Object optionally populating it with * values supplied in &lt;var&gt;$spec&lt;/var&gt;. * * @param array $spec Defaults to NULL * @since 2010-03-04 * @author xxx &lt;xxx@xx.com&gt; * @see Project_Domain_Entity_Abstract::populate */ public function __construct($spec=NULL) { $this-&gt;populate($spec); } /** * Magic method handles setter/getter calls to protected properties prefix with an underscore. * * @param string $method * @param array $args * @return mixed * @throws Project_Domain_Entity_Exception If the property doesn't exist for the specified setter/getter call. * @throws Project_Domain_Entity_Exception If arguemnt 1 is missing when making setter calls * @since 2009-12-06 * @author xx &lt;xxx@xx.com&gt; */ public function __call($method, array $args) { $accessorType = substr($method, 0, 3); $propertyName = '_' . strtolower(substr($method, 3, 1)) . substr($method, 4); if(!property_exists($this, $propertyName) || !in_array($accessorType, array('set', 'get'))) { throw new Project_Domain_Entity_Exception(sprintf('Call to undefined method %1$s::%2$s().', __METHOD__, $method)); } switch($accessorType) { case 'get': return $this-&gt;$propertyName; break; case 'set': if(count($args) != 1) { throw new Project_Domain_Entity_Exception(sprintf('Missing argument 1 for %1$s::%2$s().', __METHOD__, $method)); } $this-&gt;$propertyName = $args[0]; return $this; break; } } /** * Magic method handles getter calls to protected properties prefix with an underscore. * * @param string $propertyName * @return mixed * @throws Project_Domain_Entity_Exception If the specified property doesn't exist. * @since 2010-03-04 * @author xxx */ public function __get($propertyName) { if(!property_exists($this, '_' . $propertyName)) { throw new Project_Domain_Entity_Exception(sprintf('Call to undefined getter property %1$s::$%2$s.', __METHOD__, $propertyName)); } $getterMethodName = 'get' . strtoupper(substr($propertyName, 0, 1)) . substr($propertyName, 1); return $this-&gt;$getterMethodName(); } /** * Magic method handles setter calls to protected properties prefix with an underscore. * * @param string $propertyName * @param mixed $value * @return mixed * @throws Project_Domain_Entity_Exception If the specified property doesn't exist. * @since 2010-03-04 * @author xxx */ public function __set($propertyName, $value) { if(!property_exists($this, '_' . $propertyName)) { throw new Project_Domain_Entity_Exception(sprintf('Call to undefined setter property %1$s::$%2$s.', __METHOD__, $propertyName)); } $setterMethodName = 'set' . strtoupper(substr($propertyName, 0, 1)) . substr($propertyName, 1); return $this-&gt;$setterMethodName($value); } /** * Populates a domain entity with the values supplied in &lt;var&gt;$spec&lt;/var&gt;. * * &lt;var&gt;$spec&lt;/var&gt; is an associative array of name/value pairs where the name * maps to a protected property prefixed with an underscore. * * &lt;code&gt;&lt;?php * $spec = array( * 'foo' =&gt; 'some'; // Maps to $_foo * 'bar' =&gt; 'value'; // Maps to $_bar * ); * ?&gt;&lt;/code&gt; * * The populate method depends on the magic setter/getter functionality defined in * Model_Abstract. * * @param array $spec * @return mixed * @since 2010-03-04 * @author xxx */ public function populate($spec) { if(is_array($spec)) { foreach($spec as $propertyName=&gt;$value) { if(property_exists($this, '_' . $propertyName)) { $this-&gt;$propertyName = $value; } } } return $this; } } *Member.php* /** * The Domain_Members_Entity_Member class definition. * * @uses Project_Domain_Entity_Abstract * @author xxx * @since 2010-05-19 */ class Domain_Members_Entity_Member extends Project_Domain_Entity_Abstract { protected $_id; protected $_firstName; protected $_lastName; protected $_email; /** * Returns the member's full name by concatenating their first and last name. * * @return string * @author xxx * @since 2010-05-19 */ public function getFullName() { return rtrim($this-&gt;firstName . ' ' . $this-&gt;lastName); } } *foobar.php* $member = new Domain_Members_Entity_Member(); $member-&gt;firstName = 'John';
Here's a generic setter/getter solution I wrote. http://www.reddit.com/r/PHP/comments/c8nzx/hideous_bit_of_php_i_just_wrote/c0qvnma
It wouldn't make the private methods public, because call_user_func_array wouldn't execute as $this. So any private method would throw the same access error as it did before. So, this basically does nothing.
If it walks like a duck and it talks like a duck, it's a duck! Yay! 
that's simply not true. try this: &lt;?php class Foo { public function __call($func, $args) { if(method_exists($this,$func)) { return call_user_func_array(array($this,$func),$args); } } private function getFoo() { return "foooooo"; } } $f = new Foo(); echo $f-&gt;getFoo(); // foooooo ?&gt;
The part about MySQL would have been much more readable if it used PDO instead of MySQLi. It's such a pain in the php-ass to do prepared statements in MySQLi. PDO just takes an array of parameters.
Handy function for doing just that: extract($_GET); (I don't condone the $_GET / $_POST code though)
You're right. I never realized that call_user_func_array used the scope of the caller.
`$_GET['username']` is a lot of typing. I'd much rather write `$username` and so would everyone else, were it not for the security issues with such the register_globals *semantics*. However `extract($_GET,EXTR_PREFIX_ALL,'Q_');` lets you write `$Q_username` giving you most of the benefits with less of the risk. I say less (and not none), because I've run into at least two projects where someone has written `extract($_REQUEST,EXTR_PREFIX_ALL,'');` so that they could write `$_username` and then *some later developer* didn't know what was going on and simply started prefixing all of their variables with an underscore thinking it was the local convention.
Only if `variables_order` and `request_order` have the same value. It's not like `$_GET` is some subset of `$_POST` so it's not like it's going over twice the data by doing this...
dude, that's a lot of code right there. Maybe edit it to a [pastie](http://pastie.org/) link instead?
Dude, I don't really care that much. I've been looking at /r/PHP for the last few days and am seeing a lot of people struggling. I was programming some PHP when I saw this post, so I just cut &amp; paste the contents of some files and clicked on submit. 
Actually, I usually hear it as hash _strengthening_.
I don't condone extract myself.
yeah but it uglies up the whole thread...
Yeah but dude, I'm actually pretty fucking good at PHP--forgive my lack of humility. In my opinion, the code I posted addresses this thread quite nicely--it's just a matter of interested readers in analyzing it carefully. &gt;yeah but it uglies up the whole thread... I'd suggest, the conversation we're having right now uglies up the thread--this thread is about a specific PHP problem no?
ok. Yes, the `__call` function you wrote is quite similar to what I've written: [edit: removed proprietary code as I probably shouldn't post it, but it's very similar to yours.] So yeah, that code is relevant, I wasn't saying it wasn't (also I'm not downvoting you)
&gt; I'd much rather write $username and so would everyone else, were it not for the security issues with such the register_globals semantics. I disagree, it's really nice to know where the input's coming from. It's much harder to trace where `$username` comes from, even if it would be globalized in a secure way. Even `$Q_username` isn't very easy to read for a newcomer to your codebase.
My knee jerk reaction seeing that code is that it's a lot of code to do almost nothing except slow down your object property accesses. The counters here would probably be: - hey, it checks for typos, so you can't end up with $member-&gt;firstname = 'Bob'; - and -&gt;blah = "1" is so much more expressive than -&gt;setBlah("1") To which I'd say it's a lot of runtime code to check for typos, and simply running your code through a static analyzer like [phplint](http://www.icosaedro.it/phplint/) would accomplish much of the same, except without the extra helping of code. The other point essentially sacrifices code size and speed for the sake of making your PHP code marginally less ugly. I'm not sure what to say about it, except it's largely futile. Anyway, if you really like that pattern, you could convert your strtolower and strtoupper lines to use ucfirst and lcfirst. That'll shave a few cycles. 
&gt; lcfirst TIL! &gt; sacrifices code size and speed for the sake of making your PHP code marginally less ugly. I'm not sure what to say about it, except it's largely futile. yeah, I agree. Unless we're talking about &gt;50 properties all with getters and setters I'm not sure I see the benefit either. Even then, it's really just being a lazy coder. I suppose there might be a use case if you're setting properties not known to object. But then, use a public associative array? As regards the "lots of code doing nothing" thing though, I think marcth's example is a little more verbose than it needs to be; __call can just test if there are arguments or if you prefer test if the method name begins with "set", if so then set, else get, and kill the rest of his code.
Disclaimer: I suck at PHP, in that I hate almost every chunk of PHP code I've ever looked at. The language itself is horribly misdesigned and somehow became popular far beyond its worthiness, but that's nothing in comparison to the horrors PHP coders feel compelled to write on a daily basis. My idea of a good PHP program is less than a hundred lines of PHP code, calling into as many PHP extensions as needed to get the real work done. It's a glue language. Anything more than that invites tears. Now assuming I haven't just completely lost all credibility here, the main issue I have with that sort of code is that it adds a layer of pass-through code without adding nearly enough value to justify its existence. Even if you replace the \_\_set and \_\_get "magic" methods (did I mention I hate magic?) with a \_\_call method, the underlying problem is still there: Your code would still be simpler, smaller, more readable and faster if you just defined your setStuff($v) and getStuff() methods for each $stuff property your class has. (unless those setters/getters are just passthrough, in which case your property should simply be public.) 
&gt; It's a glue language +1 &gt; it adds a layer of pass-through code without adding nearly enough value to justify its existence. yeah absolutely. I agree.
Getting edge cases like functions called using `call_user_func` would be trickier, if I'm just lexically parsing a source file for something like `/[a-z_0-9]+( ?)+\(/i` though...
&gt;The language itself is horribly misdesigned and somehow became popular far beyond its worthiness, but that's nothing in comparison to the horrors PHP coders feel compelled to write on a daily basis. Your mom is misdesigned. &gt;My idea of a good PHP program is less than a hundred lines of PHP code, calling into as many PHP extensions as needed to get the real work done. It's a glue language. Anything more than that invites tears. I assume you're admitting that PHP is quite good at the web. Assuming MVC, if you wanted the M to be in your-language-of-choice, I'd support you. If you're not talking about the web, then we should not be talking about PHP. &gt; Even if you replace the __set and __get "magic" methods (did I mention I hate magic?) with a __call method, the underlying problem is still there: Your code would still be simpler, smaller, more readable and faster if you just defined your setStuff($v) What is interesting about the code I posted, is how easily one can write a script to undo the magic--write a script to edit the transfer objects file to add the setter/getter PHP code. This is why I think the code is smart--because it saves a shitload of time initially and an be re-factored manually/programmatic should the shit-hit-the-fan. Said script could be written in any language ;) &gt; ...unless those setters/getters are just passthrough This is the problem. 90% of the time they are pass-through methods. From my experience in the PHP world, you just don't know ahead of time--in fact, according to me, a web page should always be in flux but your model shouldn't change that much. 
I like Zend_Form. It's part of the Zend Framework, but you can use it as a standalone class.
We still have that, Russ...
&gt; why is the call to htmlentities necessary if you are calling strip_tags afterwards because htmlentities escapes things like &amp; as well. I'm amazed no-one's said that yet... (edit: of course, as people have pointed out, it should be doing the strip_tags before the htmlentities, as well as various other issues)
I built my own form library as part of a bigger open source project, [Mortar](http://code.google.com/p/mortar/). It handles server side validation as well as client side validation through jQuery.
Toss in eval support and the nightmare just continues to grow.
You really shouldn't from within the view... but you can with get\_defined\_vars() - that will return an array of all the defined variables in the context, so there might be a few you don't want in there. what are you trying to do? 
flexy and a common validation class I've been using for a few years
Not really, no. But I'm stuck in an environment that doesn't change very often, so perhaps I'm not aware of new shiny functions that I can't use yet.
Break it up differently. In Controller: $data['name_of_array'] = $array_of_values_from_model $this-&gt;load-&gt;view('viewname', $data); In View: foreach($name_of_array as $els):
you could create an array in the controller and add it to the $data array, and then iterate over that in your view: //in your controller ---------------- $mytabledata = array(); for ($i = 0; $i&lt;4; $i++) { $mytabledata[] = "row".$i; } $data = array(); $data['mytable'] = $mytabledata; $this-&gt;load-&gt;view('your_view',$data); //in your view &lt;?php foreach ($mytable as $myrow): ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $myrow; ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php endforeach; ?&gt;
eek, yeah. I could use [get\_defined\_functions](http://uk.php.net/manual/en/function.get-defined-functions.php) and actually execute the script. That doesn't look inside classes though.. Still suffers from eval because that's not known till runtime. And actually get\_defined\_functions wouldn't tell me which internal functions were actually executed though. I need access to some internal gubbins to do that.... I think APD might help. Need to get that installed on my local machine though...
Another common approach (besides form based validation) is to use an ORM with built-in validation (model based validation).
Try the [Table Class](http://codeigniter.com/user_guide/libraries/table.html)
For [Mu5ic.me](http://mu5ic.me) I used [CodeIgniter](http://codeigniter.com) with its built-in form processing and validation stuff. It's easy to use, but there's no built-in clientside (JS) validation, though, only serverside. You could build clientside validation yourself if you wanted to, of course.
[token\_get\_all](http://php.net/token_get_all) and [T_FUNCTION](http://php.net/tokens) might be of use.. Also, found [PHP_CompatInfo](http://pear.php.net/package/PHP_CompatInfo)
I think you can set $data to $this-&gt;data in the controller, then use that property in the view again (where $this and its properties still exist). irc://irc.freenode.net#codeigniter might be able to tell you more :-)
What I do is use function_exists on some key functions which might be needed, in an installer script. And I check for a minimum PHP version required. I don't really think scaring across would be too useful, since if you need a specialized library, you would know so. You might be able to write an addin for PEAR's CodeSniffer, that already does most of the legwork in scanning source files. I had to write a plugin for it some time ago for work when we were converting from one system to another.
I wrote up my own utility for this a while back. My framework has a slightly different flow than most, and needed a drop in solution. I also had been toying with the idea of an object that would validate data, and make it impossible to invalidate it after the fact. It does not generate the forms because I stick to templates, but it has a lot of nice validation features. There is some discussion [here](http://askyourcity.com/blog/?p=7) and you can check out the code [here](http://github.com/Dashron/Giggles-Framework/blob/master/util/form/formbundle.php)
^ This is correct. Behind the scenes the data array generates a variable based on the key for the view.
As for php.net, the PHP manual is written in XML so instead parse that. It's rendered with a tool called 'PhD' that generates other formats like HTML. And there's a new PhD package named PhD_IDE that allows easy parsing of the sources (the idea being that IDEs can generate custom syntax files), which you would likely use. And I can help with this part if you wish. Someone mentioned PHP_CompatInfo which does a decent job, but it's not really maintained anymore. However, maybe someone such as yourself will start maintaining it. Tokens was also another good suggestion and it could check for non-functions, like namespace usage for 5.3, or various constant usages.
I'm impressed with how much effort you put into this comment for that alone you get a +1
I take back my comment on a lot of work lol. However I'll leave the +1
&gt;Try thinking of that in a for loop. for (int countries=0; countries&lt;NUM_COUNTRIES; countries++{ for(int provinces; provinces&lt;country[countries].num_provinces;provinces++){ for(int counties=0; counties&lt;... Ok, you win.
I also use Zend Form, it is great for easy forms. For more difficult forms you can expand on it and create custom elements. 
Wow.
Agreed, this is the exact reason why I hate `extract()`. If I'm scanning through the code quickly looking for where a variable is from and see this, it annoys me to no end.
&gt;It's not like $\_GET is some subset of $\_POST so it's not like it's going over twice the data by doing this... I think he meant in terms of code quality and redundancy, not a performance issue. I seriously doubt there is any performance gain at all, due to the PHP parser's optimizations.
&gt;Plus-don't use strtotime('now') - that's what mktime is there for. What about mysql's UNIX_TIMESTAMP()?
thanks, that's all very useful. Looks like PHP\_Compatinfo does exactly what I was thinking of. But token\_get\_all is an interesting function, there might be some cool "source visualisations" I can do with that. Thanks!
Depends on the context. If you need it only to insert into database, you can use UNIXT_TIMESTAMP() or even emede in the schema as the default value. If you need to use tha date later (eg. display on the page, insert into other table) use a PHP variable as the time can and will change if the code will take longer than 1sec to process
&gt; It got me thinking about how I should approach forms on my own project, are there any serious downsides to using QF2? Yes. Operating with a "form" concept couples your controller and view to each other. That's often an acceptable trade off, but it is a thing to consider.
http://pear.php.net/package/PHP_CompatInfo
yes. then when you're finished, run the code through a profiler like xdebug, and eliminate the actual bottlenecks.
My next article will be writing a program to parse .po files and automatically translate them with Google translate so you can maintain many translations easily if you don't have professional translators.
I much prefer pure PHP implementations of gettext. Sure, they're most likely slower, but they don't require the `gettext` extension. I hear good things about [`Zend_Translate`](http://framework.zend.com/manual/en/zend.translate.html), but I use [`pomo`](http://svn.glotpress.org/trunk/pomo/) (used in WordPress, continuation of the old `php_gettext` library).
Zend_Translate looks interesting, I'll check it out, but compiling in gettext is trivial and it's fast.
Those translations are still a bit 'bumpy' *"This string will be translated to whatever language you have set."* for example gets translated into *"Dieser String wird Ã¼bersetzt werden, was Sprache, die Sie gesetzt haben."* A much better translation would be "Diese Zeichenkette wird in die von Ihnen gesetzte Sprache Ã¼bersetzt.". It always hurts my brain when reading texts translated by machines. Sometimes it's even impossible to guess the meaning of a machine-translated text. Try, for example, an arbitrary article on msdn.microsoft.com in german-translation. Reading those artificial sentences will severly hurt your brain, and the more you read the more time it takes to recover. Back in english it all makes perfect sense (microsoft-style). Seriously, machine-translated texts are absolutely useless in most cases. The longer the texts the worse it get's.
setlocale should not be used. Here's why: If multiple users are accessing the site in different languages and every page load triggers the setlocale function, the thread (which a single thread could execute a couple of page loads from various users) will be switch to the locale of the user. While the thread is in english and suddently changed to french, a user may see half of his page in english and the other half in french. I don't know if there are some solutions to this but that was happening to me on PHP 5.2.6. We had our own language system but we were using setlocale for dates and money formats.
I disagree. We used machine translated strings from Google on our website and saw a huge increase in sales.
Yeah, unfortunately it's not thread safe, I should probably mention that in the article. You can get around it using putenv() apparently, see the first comment on http://www.php.net/manual/en/function.bind-textdomain-codeset.php Edit: nevermind, that code still uses setlocale().
I have to admit that i have not read any google-translated texts. I guess they are of better qualtity than the mentioned redmond ones. The texts you refer to; Just curious about the average contextual length. I do believe that short statements and descriptions are translated much better than whole paragraphs or whole pages. 
Do you need help understanding OOP in general, AND how it works in PHP? Or are you just struggling to understand the use of OOP in PHP?
I see what you mean by that and I am intrigued. Could you please elaborate what you mean? What is the alternative - writing your own validation/et al in your controller and handling forms the traditional way, or do you mean something else?
Haha, I thought you'd notice...I didn't mention names though. "Legacy" code ftw
See, the problem lies in when this code was written, I believe it was ~PHP 3 (c. 1999)...it just followed things around...
 $data = array('data' =&gt; $table_data, 'some_other_var' =&gt; true); $this-&gt;load-&gt;view('view_name', $data);
We use it often when entering methods in objects to get the configuration variables out of an array, something like: extract($this-&gt;configuration); $this-&gt;_connect($server);
Sounds a bit like the system I use at work, we use Artesia as the CMS
I'm in a similar situation and looking at playing around with building Android apps.
I've been debating between learning how to make Android apps or learning Python. I'm getting the EVO when it comes out so I will probably be going that route since it's something not relating to web development.
"thread safe", that's the word I was looking for.
The problem is, if you're creating software that users are going to install on shared hosting, most of them don't have that option (or can't be bothered).
Oh no, the idiots! They should have used enterprise software - maybe a few Oracle dbs, running on big iron, and they should have written the interface to use EDI (it's a new up-and-coming trendy format *all* the kids are using), and written the API in Java, as everybody knows that PHP can't be used for anything serious. I mean, give me one example where anyone has *ever* used PHP for anything more than "my furst home page". Oh, phew, they used Java after all, and just wrote a few scant PHP scripts to bridge Java to the web, because doing anything other than SOAP, SAML, STS and all that fun yet completely fucking useless shit is nigh on impossible in Java in any reasonable timescale.
what's this nonsense? first of all, why do you need to parse the json? "json" means "**javascript** object notation" and you don't parse javascript in javascript unless you're doing something silly (dawg). also, you're just echoing some stuff from the php side? no [json_encode](http://www.php.net/manual/en/function.json-encode.php) wtf? oh and btw you have an empty $document.ready :| edit: this seems more like an example of how to add rows dynamically to a table with jquery than anything else and even so I wouldn't use raw text but that's offtopic here.
Most of this is common sense, but it's good to have it all in one list for reference, and especially for those with less experience. Even though this is pretty much a copy of the [Yahoo optimization document](http://developer.yahoo.com/performance/rules.html) (with less info). &gt; Avoid CSS Expressions, since it is evaluated more than we expect: on load, resize, scrolled, and even on mousemove You can use one-time expressions, where the first time it is evaluated, it explicitly sets the css property, overwriting itself. &gt; Use GET for AJAX Requests, because POST method is implemented in the browsers as a two-step process: sending the headers first, then sending data. Don't use GET for AJAX requests if you're changing data server-side. &gt; Split Components Across Domains, Splitting components allows you to maximize parallel downloads. This is a debatable. Multiple domains allows more parallel downloads, but a DNS request is necessary for each domain. &gt; No 404s, because the HTTP request is expensive Not sure what is meant by this. &gt; Optimize CSS Sprites: Arranging the images in the sprite horizontally as opposed to vertically If you want to use sprites for images that will be used for gradients, you'll need separate sprites with the images arranged vertically and horizontally, so you can repeat them horizontally and vertically, respectively. (that was a mouthful) 
[Original](http://developer.yahoo.com/performance/rules.html) Useless blogspam from a serial blogspammer.
So we're supposed to listen to regurgitated advice from a site that gets an F... a *48* out of 100 with the Yahoo ySlow tool!??! I have been working with clients for over 3 years on the specific task of site speed optimisation, and I have *never* seen a site with a score this low! Ever! It also got a 72/100 with Google Page Speed. I *have* seen slightly worse than that. Ignore this blogspam and download [ySlow](http://developer.yahoo.com/yslow/) and Google's [Page Speed](http://code.google.com/speed/page-speed/). The concepts aren't too difficult to grasp if you have a small amount of experience in web development. Got a WordPress blog that feels like a dinosaur jumping rope in a tar pit? Then install [W3 Total Cache](http://wordpress.org/extend/plugins/w3-total-cache/).
Missleading title - the article is about website / httpd optimization - NOT about PHP.
How many times do people have to post the same content over and over? tl;dr - Combine javascript - Reduce requests - Reduce cookie size - Use correct expires headers Down voted for boring and uninspiring content. Wrong title too as BTMPL points out.
Came in here to say the same exact thing. But what gets me is that each and every one of these optimising articles is on a site that doesn't follow any of their own advice! I mean, seriously...you can't even turn on gzipping? Even his personal website hasn't been tweaked for speed in the least.
I'm not the best PHP developer in the world, so I may not be 100% correct on all the points. I didn't install, but checked the code. Here are some suggestions. **install.php** function Install() { parent::Controller(); } You don't need to define a construct and call its parent if it doesn't have a body. You can remove this. **join.php** - You have raw SQL queries in your controller which are best placed in the model. I'm not sure how CodeIgniter handles queries, but it appears (from first looks) that you're susceptible to SQL injection attacks too. - MD5'ing a password is not considered secure anymore. Check out [How to manage a PHP applicationâs users and passwords](http://php-security.org/2010/05/26/mops-submission-10-how-to-manage-a-php-applications-users-and-passwords/) - This includes a bit of repetition. Keep to the DRY (Don't Repeat Yourself) principle. $username = trim(strip_tags($this-&gt;input-&gt;post('username'))); $password = trim(strip_tags($this-&gt;input-&gt;post('password'))); $passwordcheck = trim(strip_tags($this-&gt;input-&gt;post('passwordcheck'))); **logout.php** - Same points apply from the join file. - Your logout function can be exploited using [CSRF](http://jarlsberg.appspot.com/part3#3__cross_site_request_forgery). In laymens terms, someone could place an image with the logout URL on their website and it would log you out from your website. **views** - Try not to use tables for laying out your registration forms. Typically they should be only used for tabular data. - Place your CSS into a new file and include it in via the [CSS helper](http://codeigniter.com/user_guide/helpers/html_helper.html#link_tag) or the [normal way](http://www.w3schools.com/css/css_howto.asp). - Include a doctype and character encoding. This will help the browser render your website properly. - Create a base template and have all your views use that. This is so you wont have to keep redefining the doctype, head, title, etc ... **models** - Keep the HTML to the view. The function should be returning the raw data set and the view should be formatting it. You're throwing out all the benefits of MVC by having them together like you do. I'm sure there are a few more issues I've missed, but that will get you started at least. Have fun and good luck.
The NSFW thumbs aren't big enough
Implementing the search feature was surprisingly easy :D function search($searchterm) { return "There doesn't seem to be anything here"; }
Please make sure that you allow for unlimited upboats on April 1st.
Use this feature in your application/config/config.php $config['global_xss_filtering'] = TRUE; No need to worry about sanitizing input as it does it automatically. Unless you purposely don't want to sanitize inputs.
Scala with lift is the way of the future IMHO also try a good framework like symfony 
Whoa whoa whoa, the amount of time it takes to write the css to makes forms look good without tables is very minimal.
I advise you make a GIT repo for this.
I recommend you don't use this feature, why you might ask? - It has no context, I feel dirty blanket applying a filter to all global input. - Works via a black-list and not a white-list. It'll miss something and will always be playing catchup. Use a library such as [HTML Purifier](http://htmlpurifier.org/) and specify what you want to allow. When you're outputting the variables use htmlspecialchars to escape "dangerous" characters. htmlspecialchars('&lt;script&gt;alert(\'Hello world\');&lt;/script&gt;', ENT_QUOTES, 'utf-8', TRUE); &amp;lt;script&amp;gt;alert(&amp;#039;Hello world&amp;#039;);&amp;lt;/script&amp;gt;
If you don't like using it globally, you can use through the input class: $this-&gt;input-&gt;xss_clean($foo); or use the form validation class: $this-&gt;form_validation-&gt;set_rules('password', 'Password', 'trim|required|xss_clean');
How about [this](http://code.google.com/p/gheddit/)?
True, but how do you get them all aligned without tables?
well, for example: &lt;dl&gt; &lt;dt&gt;&lt;label for="username"&gt;Username:&lt;/label&gt;&lt;/dt&gt; &lt;dd&gt;&lt;input type="text" name="username"&gt;&lt;/dd&gt; &lt;dt&gt;&lt;label for="password"&gt;Password:&lt;/label&gt;&lt;/dt&gt; &lt;dd&gt;&lt;input type="password" name="password"&gt;&lt;/dd&gt; &lt;/dl&gt; Then for css: dl { } /* just a habit */ dl dt { clear: left; float: left; width: 200px; } dl dt label { font-weight: bold; } dl dd { float: left; width: 300px; } Might need some tweaking, but thats the basic concept. Alternately, you could not use a DL and instead use paragraphs, which I think is much uglier. I do understand where you are coming from though. A lot of times you just 'need to get things done', but after having to come back and maintain that code, you will hate yourself, or the person editing the code will hate you. Then again, I work full time as a UI Engineer so it's easier for me to say how things should be. But if you're a web developer, you should take the liberty of learning at least some of these html/css conventions. It will make you a much better web developer.
I am a web developer. Thanks for the heads up on the dl/dt/dd tags I didn't know about them. I get to do the boring php/python behind the scenes, and rarely get to do ui coding.
Where's the obligatory "[Reddit clone in X hours in Y lines of CodeIgniter](http://www.google.com/search?q=site%3Areddit.com+%22reddit+clone+in%22+hours)" headline? Did you leave that out because Y &gt; 50,000? Just kidding, I love CI. I can't wait for 2.0. No more php 4! woohoo!
I'm currently working on a highly separated approach towards form creation / data validation in my framework. I basically introduce two concepts : Data and DataTemplate. A DataTemplate is a structure which is capable (but not limited to) defining a form's structure with validation rules. Data is a possible attempt to match this template. Any attempt to validate will result in a ValidatedData instance which is annotated with feedback. By this 'recipe' an authentication attempt will look like this : ... public function auth(PostFormData $data) { $linkTemplate = create :: DataTemplate() -&gt;add('address', create :: EmailType()) -&gt;add('password', create :: PasswordType() -&gt;setMinimumLength(1) -&gt;add('token', create :: TokenType()); // For prevention of form spoofing $validatedData = $linkTemplate-&gt;build($data); if(!$validatedData-&gt;isValid()) { return; } if(UserSession :: auth($validatedData-&gt;address-&gt;getValue(), $validatedData-&gt;password-&gt;getValue()) { return Route :: to('/user'); } } ... The reason why the visual representation is left out is due to the fact that I'm aiming for reuse of DataTemplates. That way it can be used for plain old on-submit validation and for asynchronous (continuous) validation through AJAX as well. For rendering the DataTemplate into a usable &lt;form&gt; I'm in the process of writing a FormBuilder which combines the DataTemplate and the validated Data (which is annotated with feedback) which can create a Form object ready for rendering. Hopefully this gives you some idea on how I think how we should deal with forms, any feedback is (of course) highly appreciated :-). Also if you'd like to see the work in progress, check out [the framework](http://code.google.com/p/mgframework). 
Does Google Code have Git support? Last time I was there they didn't.
http://kohanaframework.org/
Of course, the dl/dt/dd thing doesn't really separate the function from the presentation any differently than a table does...
&gt; I get to do the *exciting, interesting &amp; rational* php/python behind the scenes, and rarely get to do *tedious and frustrating* ui coding. FTFY.
Haha, I agree. Personal preference and all, but doing UI stuff = boring to me. I much prefer leaving that to somebody else, if possible, and doing the fun and more challenging programming. 
No, but it has subversion. Close enough.
Then it's not a Git repo ;) /OCD out.
I will do my part to prevent Reddit inanity.
Somestimes UI can be very tedious. But then when we get to build new features from scratch, it's really fun. I really love writing Javascript. The html is really boring if that's all I'm assigned.
A form is neither tabulated data or a definition list. BUt it's also not a paragraph either. We don't have a good way to markup forms, unfortunately. Tables restrict you way to much to layout. It's always going to be exactly where you tell it. In my example, you could just as easily make it where the labels are on top of the inputs. You can make it two columns instead of one.
I'm "dead set on password hashing" nobody should know the other user password, the user most likely uses the same password for everything, that includes bank accounts, mail accounts etc... so not even manager should be able to know the original password. As for the method for reset, just trigger an email with a link to a page where user can insert the new password.
Agreed. Not to mention, if your servers get hacked, there's a good chance the attacker will be able to reverse the encryption scheme, making it hardly better than leaving the passwords in plaintext. 
Encrypting passwords is a big security risk. Alternative is you can have the managers be able to change the passwords if they forget.
Hash. **Always** hash passwords. **Never** use two-way encryption. Also: use a salt; a reasonable sized one. And don't use MD5 for the hashing - it's way too fast. And wear a coat or you'll catch a cold!
md5($SALT.$pass);
Someone referred to this document in a comment a day or two ago: http://php-security.org/2010/05/26/mops-submission-10-how-to-manage-a-php-applications-users-and-passwords/ The article recommends using phpass. Let me know how it worked, if you decide to use it. Otherwise I recommend salting your hashes to prevent rainbow attacks, because users tend to select easy passwords. I would use some kind of jquery password strength meter when taking in the new password, but leave out the requirements for password strength in php code. Here is a couple: http://www.webresourcesdepot.com/10-password-strength-meter-scripts-for-a-better-registration-interface/ (googled it with "password strength jquery") Last but not least, you asked about resetting. User "adrock" had a couple of decent examples in this thread: http://webforumz.com/php/8394-php-forgot-password-script.htm I'd go for the "reset password" -feature because of it's simplicity. Just generate a new password and send it to user's email. They can change it to whatever they want to using your application's existing "change password" -page. It is easier for the user if you tell them what to do. Something in the lines of * click the above link * fetch password from mail * login * change password
I'd recommend stronger than md5, but salt is definitely a good idea. :D
phpass is an excellent library. I use it for all of my password hashing functions. It degrades gracefully but if you have the latest PHP 5.2 it will use blowfish bcrypt.
this.
Full disclosure: that was an article about how awesome phpass is written by the author of phpass.
How is it meant to be read? PHP-pass or PHP-ass...?
That's a good ass question.
I didn't fully read the article but it had the topics "hashing" and "salting", so I supposed that it gives at least remotely useful information.
I'm going to assume that the authentication system you're going to use is pretty basic (User enters username and password and then gets a cookie back). When using that level of complexity, the only thing that is private (given enough security (https), and to guests (usernames are public)) is the password. Hence, if you allow the password to be public (by encryption) then nothing is private and no accounts are secure. tl;dr Use a hashing algorithm, something like sha1 or stronger, and please use a [salt](https://secure.wikimedia.org/wikipedia/en/wiki/Salt_\(cryptography\)).
I cannot upvote this enough.
I disagree, md5, with salting ( in case your db is compromised) is strong enough for most web applications.
Hashing with [HMAC-SHA256](http://www.php.net/manual/en/function.hash-hmac.php).
MD5, if properly strengthen, is definitely adequate for storing passwords. In fact you should strengthen the hash no matter what algorithm you're using. Adding a couple of ms to the time it takes to make the hash is rarely an issue for anyone other than someone trying to bruteforce it. You should also employ a scheme that generates a different hash for the same password. In PHP something like this: &lt;?php define('HASH_FUNCTION', 'md5'); define('STRENGTHEN_ITERATIONS', 50000); define('SALT_LENGTH', 16); function myhash($plaintext) { $salt = ''; for ($i=0; $i&lt;SALT_LENGTH; $i++) { $salt .= chr(mt_rand(34,127)); } $hash = $plaintext; $func = HASH_FUNCTION; for ($i=0; $i&lt;STRENGTHEN_ITERATIONS; $i++) { $hash = $func($salt.$hash); } return sprintf('%s!%s!%d!%s', HASH_FUNCTION, $salt, STRENGTHEN_ITERATIONS, $hash ); } echo myhash('foobar') . "\n"; echo myhash('foobar') . "\n"; Which gives you something like: md5!Fu0^v2%Nlqh`l5g&gt;!50000!7584cda317d484b6ce3611a53655989d md5!,-|}P{wj-QU=h/@^!50000!2a29f7d6d2437d170a7a1ba1451d3109 Which can be put in a database column easily. Adding the iteration count and algorithm used to the hash string ensures compatibility if you ever want to make changes. Edit: Slight corrections Edit: Fixed errors noted by RetroRock, switched to mt_rand()
why not use sha1? It is 1 extra character to type but you don't get people thinking you're an idiot for using md5. You argue md5 is strong enough for most applications, but why not use the better option when it requires ZERO additional effort?
Hash, always hash. If an attacker has access to the encrypted passwords you have to assume a complete breach which would mean they have access to your code as well and at some level your code needs to know how to de-crypt those passwords, so so will the attacker. Which means you might as well store them as plain-text. Hash users passwords using a random salt and stretching to the maximum amount you feel is acceptable (a 0.75 second delay in logging in will be acceptable to your users, but increasing the time taken to generate single hash by a thousand fold will make brute forcing hashes unreasonable) To offer reset make it a simple form, 1 field for email. User enters email and they are emailed a link with a single use UID appended to it. Make these time sensitive (they become invalid after 20mins?) as well, maybe link them to IP address as it is not likely for a users IP to change in the time between them submitting form and clicking link in email. Page that loads shows a form to enter new password and logins them in. Can't ask for easier :)
Granted, for PHP it's a matter of one more character to use SHA-1. But you might find yourself in a (non-PHP) environment where only MD5 is available. The point is that MD5 is sufficient for these kinds of applications. The flaws found in the algorithm hardly comes into play in these scenarios (and by the way, weaknesses have been found in SHA-1 as well)
I'd go a step further, when resetting the password, email them the new one and set a flag in the db saying they need to make a password change, then take them directly to a page prompting them to do so when they next log in.
Agreed, if you have nothing better then md5 is better than plain-text. But where sha1 is available why would you not use it?
[Pretty good resource](http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords)
&gt; don't use MD5 for the hashing - it's way too fast. .. that kind of goes for all hash functions. They're supposed to be fast, they're heavily used cryptographic primitives. A decent GPU can run MD5, SHA1 and various other hash functions upwards of a *billion* times per second. With that sort of power, a trivial `sha1($salt.$pass)` is little more than a vague nod at the problem which doesn't really bother solving it properly. If you're going to do this, at least run it through a good few (tens of) thousands of iterations to knock off a few orders of magnitude. Better, use something [made for the job](http://en.wikipedia.org/wiki/KDF), like bcrypt (as implemented in phpass, for instance). Stop reinventing the wheel badly.
My god, it's full of cells! So what is the compression loss ratio of this thing? The resulting file output has to be HUGE in relation to the source.
GIMP can do this too, but the HTML it generates is a little more efficient.
heh, I wrote something like this a long time ago. Colspan compression is pretty easy to add, and can lead to compression rate.
Is it via a plugin?
Save As &gt; HTML Table
If you do it with all floating divs it makes it a lot more efficient... but an image is still better.
I've once made a similiar one but with 1px/1px spans. The output from a 1024x768 wallpaper was huge: &lt;? $file = fopen('b.html', 'w'); fwrite($file, '&lt;!DOCTYPE html PUBLIC \'-//W3C//DTD XHTML 1.0 Transitional//EN\' "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="pl" lang="pl"&gt;&lt;head&gt; &lt;style type="text/css"&gt; span { height: 1px; width: 1px; overflow: hidden; position: absolute; text-indent: -9999px;; display: block;} &lt;/style&gt;&lt;/head&gt;&lt;body&gt;'); $img = imagecreatefromjpeg('./img.jpg'); $size = getimagesize('./img.jpg'); for($p = 1; $p &lt; $size[1] ; $p++) { for($j = 1; $j &lt; $size[0]; $j++) { $rgb = imagecolorat($img, $j, $p); $r = base_convert(($rgb &gt;&gt; 16) &amp; 0xFF, 10, 16); $g = base_convert(($rgb &gt;&gt; 8) &amp; 0xFF, 10, 16);; $b = base_convert($rgb &amp; 0xFF, 10, 16);; if(strlen($r) == 1) $r = '0'.$r; if(strlen($g) == 1) $g = '0'.$g; if(strlen($b) == 1) $b = '0'.$b; $rgb = '#'.$r.$g.$b; fwrite($file, '&lt;span style="top: '.$p.'px; left: '.$j.'px; background-color: '.$rgb.'"&gt;.&lt;/span&gt;'); } } fwrite($file, '&lt;/body&gt;&lt;/html&gt;'); fclose($file); Have an upboat.
Well, that's one way to keep your users from downloading your images... *ever*.
No, since you can just do printscreen...
shit...
Why? This adds a whole new level of IMO unneeded complexity. Just separate the two (ie: use MVC).
I'm involved with PHP North West (in the UK, local to me), PHPWomen and online mostly phpdeveloper.org and techportal.ibuildings.com (disclaimer: I work for Ibuildings and edit techportal, I am very definitely biased!)
In Addition: 1. Hash + salt your passwords correctly 2. Make sure your PHP, Apache, etc server technologies are updated to the latest version.
I wrote some tutorials on OOP lately - maybe these help? http://carsonified.com/blog/dev/getting-started-with-oop-php5/ and http://carsonified.com/blog/dev/getting-started-with-oop-php5-part-2/ ... there will be a couple more in the series as well. Or you could try asking specific questions in a forum like devnetwork as you start to work things out? Good luck!
Thanks, I like this, I think I'm gonna go with it for password reset.
Thanks for the links, especially top one - very interesting read. I'm going to implement phpass in CodeIgniter and report back. As for "password reset", I'll probably go with what pffffft suggested.
I &lt;3 techportal.ibuildings.com. Such great, relevant, well written content. Thanks alot!
This is really the kind of thing that should be implemented in the language. A native `generatePasswordHash()` function would solve many, many broken/naive implementations of password stores.
PHP MySql Development â IndiaNIC provides PHP Application Development and PHP Web Development at highly competitive prices. Hire PHP Developer and Programmer for your PHP Web Development requirements. 
Mine has four sides!
A slight explanation: You never want to use encryption because then the server can decrypt the user's password. If the server can decrypt it, an attacker who gets access to the server can decrypt it. Hashing makes it so no one can decrypt the password, all they can do is check to see if the password creates the same hash using the same salt.
Does phpdeveloper.org actually have editors? It looks like a blog with a load of RSS feeds plugged into it. 
If you are running a linux/BSD machine with &lt; PHP 5.3, or any machine with PHP 5.3, bcrypt hashing is available via the PHP function crypt() (http://php.net/crypt). You'll need to generate a random salt for each password you hash, on linux/BSD you can use /dev/urandom. Here are some convenience functions: /** * Hashes a password using bcrypt * * The $cost should be increased so that function takes as long as reasonably * possible, since this is the key ingredient in preventing brute-force attacks. * * @param string $password The password to hash * @param integer $cost The setup cost for the blowfish algorithm * @return string The password hash */ function bcrypt($password, $cost=7) { // This grabs 22 "random" base-64 characters for the blowfish salt $salt = substr(md5(file_get_contents('/dev/urandom', FALSE, NULL, 0, 16)), 0, 22); return crypt($password, '$2a$' . str_pad($cost, 2, '0', STR_PAD_LEFT) . '$' . $salt . '$'); } /** * Checks a bcrypt hash * * @param string $password The password to check against the hash * @param string $hash The output from bcrypt() * @return boolean If the password is the same */ function check_bcrypt($password, $hash) { $check_hash = crypt($password, substr($hash, 0, 29) . '$'); return $check_hash == $hash; } $hash = bcrypt('password'); echo $hash . '&lt;br /&gt;'; echo check_bcrypt('password', $hash); The above code is licensed via the MIT license (http://www.opensource.org/licenses/mit-license.php).
This is an HTML/CSS issue, not a PHP issue. The problem is that your CSS defines #footer with a great deal of padding. If you want the footer gone entirely, either remove the contents or set it to display: none.
One thing I see on a regular basis is a complete lack of understanding regarding basic filesystem permissions. By long and far the amount of "Oh just chmod 777 this dir to get it to work" mentality is extremely pervasive amongst PHP coders. Quit that shit. 
You deleted the content but not the code that surrounds it. You are not only a PHP noob, but a HTML, CSS and likely Web developer wanna-be noob. However everyone has to start somewhere, so i recommend to you [tizag](http://www.tizag.com/) and [w3schools](http://www.w3schools.com/) as good starting points and google should suffice beyond those links.
You already do that by feeding it a thumbnail image.
I realize this question is about 12 months too late, but: why?
&gt; A metaphysical digression _fap fap fap_
It isn't PHP that made your development environment suck. It is your fellow developers, and your tech leads.
because it's a poor form of type casting, it's slow and all around just bad form.
Upvote for #1. If your application has an "email me my forgotten password" option, you've done it wrong; it should be "email me a link to reset my password."
C can save you a lot of time if it's actually CPU bound. ;) I can help! Also, consider binary logging - much less data to write, and read. However, not human readable.
I'll try to answer this as best as I can... It is going to depend on what user you are creating the files as, and what user your PHP interpreter is running as. If you are on shared hosting, it's possible that the PHP interpreter is running as a shared user (like "http" or "apache"), but your ftp login is the owner of the files. In that case, the shared user needs to be able to access the PHP files to read them and you won't be able to set them to 600. What that means is that everyone on the shared host is running PHP as the same user, and can theoretically access one another's PHP files and read the source code. Web hosts do different things to stop this from happening (like using the open_basedir configuration setting to keep people from accessing files outside of their own home directory). In my opinion, the optimal case would be to have your PHP interpreter running as the same user that creates the files, and then you can set the PHP files to 600 because the interpreter can read them, but no other users can. But there's not much you can do about that if you aren't in control of the environment. The best place to start would be to check your error logs to see why exactly you are getting the blank white page. It should give you some insight into the exact issue, but from what it sounds like the interpreter doesn't have access to the file so you'll probably have some error about the request being forbidden or something. I hope this helps some, but it's hard to tell you exactly what's going on without the error logs and knowing your exact setup.
&gt; whether it is generated by a script or input by a user Huh? Did I miss something? How do you get a variable that's NULL or unset as user-entered? &gt; A test like isset($var) returns true for the values 0 (the integer) and FALSE, which are thus set even though supposedly they are nothing. Someone please explain thx.
If you want cron to run a PHP script just add this to your cron table: wget http://server.com/my.php -O /dev/null This will download the file my.php and place it in the /dev/null (thus delete it). If you need to call he file localy you can always try adding: php /path/to/my.php
not an efficient solution but the first one that comes to mind: &lt;?php file_put_contents('/tmp/import.csv', file_get_contents('http://somesite.com/importfile.csv')); myqsl_connect(...); mysql_query('LOAD DATA LOCAL INFILE \'/tmp/import.csv\' INTO TABLE test_table'); unlink('/tmp/import.csv'); ?&gt; to cron the php file you can either "/path/to/php thescript.php" or add #!/path/to/php to the beginning of the file, make it executable and call it directly.
I'd write a php script that does it, and then have a cronjob scheduled to run it whenever. I wouldn't just run a blind import, as you'll want to do a sanity check on the data before trying to put it in your database. Remember you still need to treat it like filthy outsider data, no different than a hacker trying to type some nasty stuff into a contact form or something.
&gt;How do you get a variable that's NULL [...] as user-entered? Pretty sure form elements cannot send a NULL value. &gt;or unset as user-entered? If the form contains a checkbox and it is not checked, the checkbox's name/value pair is not sent to the server: &lt;input type="checkbox" name="check" value="1"&gt; &lt;input type="text" name="text"&gt; If both fields are empty, this data will be sent: ?text= isset($_POST['check']) is false, isset($_POST['text']) is true If the checkbox is checked and text is entered into the text field: ?check=1&amp;text=value $_POST['check'] is set, $_POST['text'] is set. &gt;Someone please explain &gt;A test like isset($var) returns true for the values 0 (the integer) and FALSE, which are thus set even though supposedly they are nothing. 'nothing' is pretty vague. If you do this: $exists = false; $no_longer_exists = 0; unset($no_longer_exists); isset($exists) //true isset($doesnt_exist); //false isset($no_longer_exists); //false `isset()` returns if the variable is defined or not. It doesn't care about the value. `false` and `0` aren't *nothing*, they're `not true`. `empty()` checks if a variable is defined *and* checks the value. empty(0) //true empty($doesnt_exist) //true empty(false) //true
Somewhat related and interesting read - http://blog.unmaskparasites.com/2010/04/11/network-solutions-and-wordpress-security-flaw/. Basically hacker was able to read wp-config.php (database settings) of all WordPress sites hosted on these shared servers (one of them was my client's).
This will help: http://php.net/manual/en/function.fgetcsv.php
To move the files to the local server, use *curl* (slightly more sophisticated then *wget*). To people saying to do it all in PHP, just be careful about how big the files are and how long they take to transfer. I use curl to fetch jobs from a number of jobs sites - some as RSS feeds, some as XML files and some provided by a SOAP interface - into local files, then process them using XSLT into a common format, and *then* load them into the database using PHP. Some of the files are massive (tens of megabytes) so they are never loaded into memory in PHP, but read record-by-record. The main point is, the stuff that can easily be done from the command line, is done there.
That is not entirly true - for example his host might be blocking access to php binary. Additionaly - when you run it via the binary some variables aren't set - for example $_SERVER['HTTP_HOST'] will not be set at all - witch might cause trouble (eg. when sending mail and using $headers = 'From: info@'.$_SERVER['HTTP_HOST']; - the host will be set to info@default-server-domain-name)
Wow, thanks a lot for your help. That makes a lot of sense. I'm on a shared server given free by my university on a LAMP environment. I'm not sure exactly how to check errors (the only folder I can access is my public_html one, it seems), but I added lines to my .htaccess file that display PHP errors when I visit the pages from my browser. It gave this error: &gt; Warning: Unknown: failed to open stream: Permission denied in Unknown on line 0 Which seems consistent with what you mentioned. Thanks again! edit: formatting
The Harvard course required 644 for html files and whatnot, 711 for directories, and 600 for PHP with this explanation: &gt; *Wait a minute, donât we want everyone to be able to read (i.e., interpret) your PHP files?* Nope! For security reasons, PHP-based webpages are interpreted âas youâ (i.e., under your username) on cloud.cs50.net, no matter who pulls them up in a browser. Seems like, as NedRyerson stated, this varies by server.
cron curl http://somefile php loadfile.php and make sure your file has some input checking 
chown www \*.php chmod 600 \*.php this will mean that the www users can read the files and no one else can. 
I would agree with this, CronJob would be the best. Make sure that you check everything on it as someone could figure out you are updating your site based on this information and use it against you.
&gt; $salt .= chr(rand(33,127)); and &gt; return sprintf('%s:%s:%d:%s', Don't use : as your delimiter unless you prohibit it from the salt.
But if you're not logged in as www, you won't be able to edit them ever again.
 uksheep@compscihosting:~/repos/hworld/web$ chown www front-controller.php chown: changing ownership of `front-controller.php': Operation not permitted
If the webserver user (www or apache or something) owns the files, then you can set them to 600 (although ideally anything that doesn't need to be writable shouldn't be), but if the owner is someone else, then you want to go with 644. From most to least secure 1) Files are owned by apache and most files are 400 but some are 600 (like the cache and log directory [which are not in the webroot]) 2) Files are owned by apache and are all 600 3) Files are owned by the user and are all 644 However, there are a bunch of things to do before you worry about this.
That's poppycock. Your HTML and PHP files are getting read and interpreted by the same thing (apache as www, probably), so it would make sense that you'd need the same perms for .html and .php. **Edit:** The php files would get passed off to the php interpreter (mod_php probably), while .html would just get output to the view/browser **end** Escalating privileges from www to your user makes sense at some level (for example, so you can't erase the entire /var/www/ directory by mistake), but you can see that it's obviously not setup properly because you're getting a permission denied error. It makes vastly more sense to have the files owned by "user:www", and the perms set to 640. (Assuming your login is "user:user", and that user is not a member of the www group.)
try sudo before your command that should work. also the group is sometimes important too, chgrp for some reason i was thinking 555 when i clicked this link, execute and read, no write for owner group and world
It's likely a shared hosting environment. They're probably running all of the PHP as the individual users in order to prevent one user's mistakes from affecting other users.
either sudo or su www to edit the files or put them back again. This assumes you can get root privs if you can't then only www can write them. 
That's pretty unlikely in a shared hosting environment. Or on a university server. In fact, if you can get root, you're probably the only person on that server, in which case 600 or 777 doesn't make any difference at all.
I just wanted to add that this setup is ok for permissions on a dedicated web server with controlled user accounts. However, in a shared hosting environment, you'll want them to be (3), owned by the user and set to 644, so that the apache/webserver user cannot write to your source files. If you allow write access to the webserver user on the file system*, another system user can create and execute another php file running as the webserver user to delete or edit (maliciously or politely) any file you set to have write access as the web user. It's an unfortunate and unavoidable vulnerability of shared hosting. There's no real secure way of getting around it for files like uploaded images and session data outside of going VPS or dedicated. PHP attempted to secure it with safe_mode which did a series of checks on file ownership, but it was deemed useless as there were ways to thwart it. You can attempt to obscure it by making it owned and writable by you, readable by the webserver user's group and 0 for everyone else, but any system user can still read it because they can spawn the webserver user to read/execute the file anyways. Interestingly, since you have to set the webserver to be able to read all of your source files, files with sensitive configuration setting like database passwords and api keys can essentially be read by anyone else who shares the system with you. It's probably not a big deal for a blog no one's reading anyways, but definitely a concern for even a small ecommerce site with keys to your credit card processor. Just some food for thought for your next project when you go to choose a hosting provider/setup. *(2) is already writable by the webserver user, (1) can be made writable by the webserver user with php's chmod function. Both can be run by the web user since everyone shares the same apache daemon. 
 uksheep@compscihosting:~/repos/hworld/web$ sudo chown www front-controller.php Password: uksheep is not in the sudoers file. This incident will be reported. Which this fine gentleman will not doubt *not have* in a shared hosting environment.
This, I believe my friend, is working. I've spent 4 hrs so far working on the script. Very helpful advice, thank-you!!
I think in this person's case, the same user is reading both the .html and .php files, but it sounds like the course material they are referring to has a server setup where the PHP interpreter is running as their own user, so Apache doesn't actually have access to any of the PHP files that are being executed.
I use 600 on my PHP files. Otherwise, how do you keep other users on the server from reading the sensitive stuff in your PHP files? Merchant account info, database user/pass, what have you...
Another thing to note: If everyone can read the files and your PHP gets turned off your PHP files won't be interpreted and be shown as is e.g. any passwords (for MySQL or whatnot) will be visible to the Internets.
I'm a WordPress guy, but Drupal kicks just as much ass. A good friend of mine does Drupal sites for a living. Check out her site: http://www.amandarodriguez.com/
I've always been pretty leery of Drupal because I'd heard so much negativity about it (performance, complexity and security issues mostly) . I don't think you've changed my mind, the review was a little too neutral, but I'm glad it wasn't another "Drupal Sucks and Here's Why" post. I am curious about 7.0 a little more now though.
I don't know if this is useful to anyone else but I was really bummed that there wasn't any hresume libraries available (at least at the time).
I've only done one major site, so I didn't have any real strong opinions. I wanted it to be more of an objective 'here's my experience' rather than flame bait.
If nothing else I know you can get a degree in furniture design. Um... upvote for you?
I agree, that's probably the *intent*, but not what is actually happening.
in general, it is fantastic if you make a website that fits the drupal ideal. Typically this means some kind of blog or news website. The problem with drupal is that people get attached to it, theyll take totally irrelevant projects and try to fit it into drupal, they're given a hammer, and now they gotta nail things in. Unless youre making another blog, drupal isn't all that useful.
I have a class that I send the total_number of pages, the current page index, and the number of items per page to the constructor. The class then has a function to generate pagination with a param array to specifiy how it should be generated..
 foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator(dirname(__FILE__))) as $item) { if (!$item-&gt;isDir() || $item-&gt;isDot()) continue; echo $item, PHP_EOL; } 
Does the script time out because there are too many directories to scan, or does it time out because it's stuck in an infinite loop or a very inefficient process? On modern hardware it would not normally take 30 seconds (or whatever your execution time limit is) to list 3 directories unless the hard drive was in very heavy use. Recursion is not easy to get right; you could be stuck in an infinite loop. Or maybe there are too many files in each directory. Some filesystems are really bad at handling thousands of files, and if you're also checking each file to see if it's a directory, that would be very slow. By the way, PHP 5 has scandir(), which might be easier than opendir/readdir to use properly. Also, don't try to generate the listing on every request. Generate it once and cache the result for a reasonable amount of time.
201 folders, 8,000+ files :(
Thanks, will give this a try and see what comes about. I was doing much the same thing, but with one less RecursiveDirectoryIterator in the loop. Thanks. Edit - This semi-worked. For whatever reason, leaving the isDir and isDot methods cause it not to work. When removed, it prints everything, and doesn't take too much time to do so. Maybe because I am using Windows too :P Now I am regretting this move.
FWIW, all of SPL's RecursiveIterators need to be passed to RecursiveIteratorIterator in order to be used as a normal Iterator.
On most projects I use the Zend Framework which has an awesome [paginator class](http://framework.zend.com/manual/en/zend.paginator.usage.html).
http://mis-algoritmos.com/digg-style-pagination-class
If running ls in a directory takes too long, then you have too many files. Performing a recursive ls in a directory via php would fall in the same category as running a php command to perform the same task. Either way you need shell access to get this task done faster.
I believe too many files and folders. The example below, it can print everything off, in little time. However, when I go back to using PHP's file handling functions, it slows down incredibly and often doesn't complete. It seems the iterator's are the way to go.
 $totalRows = fetchColumn('count', 'SELECT COUNT(id) AS count FROM table;'); $perPage = 20; $pages = ceil($totalRows / $perPage); $allPages = range(1, $pages); $page = min($pages, max(1, $_GET['page'])); $start = ($page - 1) * $perPage; $rows = fetchRows("SELECT * FROM table LIMIT $start, $perPage;"); foreach($allPages as $aPage) { if($aPage == $page) { echo $aPage.' '; } else { echo '&lt;a href="?page='.$aPage.'"&gt;'.$aPage.'&lt;/a&gt; '; } } foreach($rows as $row) { /* print results */ } That's the pseudo-code gist of it. It's pretty easy if you just sit down and think about the code for a few minutes!
Seems like the process of checking whether a filesystem entry is a directory or not is taking up most of the processing time. Not sure if that has something to do with Windows/NTFS, though. If all else fails, you could try to make the distinction using only the name. It's your site, so it shouldn't be too difficult to come up with a naming scheme. For example, you could make directory names always begin with an underscore, and forbid file names beginning with an underscore. But then again, if you're forced to take this route, something might be wrong with your design in the first place.
 $allPages = range($page, $pages); should be $allPages = range(1, $pages); also, you'd usually want to display only 5-10 links even if you had hundreds of pages. But that's easy homework for the OP ;) 
For older versions of PHP that do not use SPL yet, take a look at glob()
How do you guys handle pagination in search results? My problem was clicking on another page lost the original query, so I saved a query string in the browser session to retrieve the query from the database. Is that the most efficient way?
you should always put the query string in the request uri so you are able to pass it on to friends... imagine not being able to pass google result pages to someone because it'll say "no valid search session found". 
Hi 2003!
Yeah, good point! I should change the query string from the browser session to the request uri. Thanks.
Something like this to do the query: /** * Paginate any SQL query and return comprehensive result info * * @param $sql query to execute * @param $page page number * @param $rpp rows per page * @return associative array with 4 elements: * 'stack' =&gt; associative array of items on this page * 'page' =&gt; page number (same as $page input param) * 'row_count' =&gt; total number of rows * 'page_count' =&gt; total number of pages */ function paginate($sql, $page, $rpp) { $limit = (int) $rpp; $offset = ((int) $page - 1) * $rpp; $sql = preg_replace('/^select/i', 'SELECT SQL_CALC_FOUND_ROWS', $sql) . " LIMIT $offset, $limit"; $res = mysql_query($sql) or die(mysql_error()); $stack = array(); while ($row = mysql_fetch_assoc($res)) $stack[] = $row; $res = mysql_query("SELECT FOUND_ROWS()"); $row_count = mysql_result($res, 0, 0); $page_count = ceil($row_count / $rpp); return array( 'stack' =&gt; $stack, 'page' =&gt; $page, 'row_count' =&gt; $row_count, 'page_count' =&gt; $page_count ); } And then a template like this to render the pager. This rewrites the new page number each link into the query string, and assumes the parameter `$_GET['page']` is used for this purpose: &lt;?php // $collection is an array returned from paginate() $page_count = $collection['page_count']; $page = $collection['page']; $base = rtrim(preg_replace('/(\?|&amp;)page=\w+(&amp;|$)/', '$1', $_SERVER['REQUEST_URI']), '?&amp;'); $base .= ((strpos($base, '?') === false) ? '?' : '&amp;') . 'page='; $base = htmlspecialchars($base); ?&gt; &lt;div class='pager'&gt; &lt;ol&gt; &lt;? if ($page &gt; 1) { ?&gt; &lt;li&gt;&lt;a class='prev' href='&lt;?= $base ?&gt;&lt;?= $page - 1 ?&gt;'&gt;&amp;laquo; Prev&lt;/a&gt;&lt;/li&gt; &lt;? } ?&gt; &lt;? for ($i = 1; $i &lt;= $page_count; $i++) { ?&gt; &lt;li&gt;&lt;a class='page&lt;?= $i == $page ? ' active' : '' ?&gt;' href='&lt;?= $base ?&gt;&lt;?= $i ?&gt;'&gt;&lt;?= $i ?&gt;&lt;/a&gt;&lt;/li&gt; &lt;? } ?&gt; &lt;? if ($page &lt; $page_count) { ?&gt; &lt;li&gt;&lt;a class='next' href='&lt;?= $base ?&gt;&lt;?= $page + 1 ?&gt;'&gt;Next &amp;raquo;&lt;/a&gt;&lt;/li&gt; &lt;? } ?&gt; &lt;/ol&gt; &lt;/div&gt; 
I usually use this jQuery plug-in: http://www.datatables.net/ It has a bunch of options such as on the fly searching, built-in pagination, sorting.. For larger tables you can use server-side processing.
Or with a recursive function using readdir, which is faster than using SPL :)
These guides are a dime a dozen, and still I see absolutely atrocious code quite frequently. Bad programmers aren't reading Reddit. That's part of the reason they're bad programmers--they see no reason to learn more, to expand their knowledge.
I totally agree with most of your comment, but the way your last sentence is worded almost implies an active decision to avoid learning. From what I have observed, it is often a case of programmers not knowing what they don't know, or to be more explicitly verbose, failing to understand the vast quantity of pitfalls and language intricacies to be wary of and remaining unintentionally ignorant of the fantastic resource that is /r/php. One positively tremendous occurrence I have noticed about this sub reddit, in addition to all the brilliant solutions and general good will and code, is the willingness programmers here have to admit mistakes and share them with the community in the hope that they will be helpful to someone. Kinda makes me smile :)
[CodeIgniter's pagination class](http://codeigniter.com/user_guide/libraries/pagination.html)
Duh, good point :) The quick and dirty fix is bumping the range to 34 and using ! (charcode 33) as delimiter.
Also, ensure $page param is valid (in range): $page = min($pages, max(1, (int) $_GET['page']));
CakePHP pagination works great for me.
I commiserate with you. I've used a lot of the solutions listed here already, and I still never feel like it works as well as it should. Essentially it's a hard problem, so just stick it in and go on. 
I love in Cake it's literally just adding maybe 5 lines
I try this and result is this. with php : [http://scanf.info/icerik/scanf-vertex.html](http://scanf.info/icerik/scanf-vertex.html) with html : [http://scanf.info/icerik/scanf-vertex-2.html](http://scanf.info/icerik/scanf-vertex-2.html) Only for fun. :D
I don't think I'm the first to think of this, but I did think of it on my own. I made a pagination view element, since pagination for each controller is essentially the same. It makes making changes so much easier, since it is only in one place.
Yep, that's what I did as well. In the controller, you just need to enable pagination, which is why I &lt;3 Cake 
Nice catch! Updated the parent.
Sure. Updated!
^^ Why the downvotes?
Are you aware that only the reddit alien appears in IE8? Also, why do you not include any padding/margin around your copy text? I have noticed a lot of people doing this these days, and I cannot and why. I think it looks awful, and can make it hard to read.
sfPager
http://www.symfony-project.org/blog/2006/07/17/ajax-pagination-made-simple
if you are having a problem with that amount of folders/files, you are definitely doing something wrong.
Yet another reason to use a framework. Most of them (if not all) have easy to use pagination classes.
You actually don't need the `COUNT(id) as count` part... You can use the special `SQL_CALC_FOUND_ROWS` keyword to fetch the number of rows that would have been returned, had a limit not been applied. $sql = "SELECT SQL_CALC_FOUND_ROWS * FROM table LIMIT $start, $perPage"; $rows = fetchRows($sql); $totalRows = mysql_fetch_assoc(mysql_query("SELECT FOUND_ROWS();")); http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows Just another way to solve that particular issue. AFAIK, there's no huge benefit one way or the other.
Netbeans has an auto formatter built in for a bunch of languages, including PHP.
You could also use SQL\_CALC\_FOUND_ROWS so you don't have to execute the query twice: $query = "SELECT SQL_CALC_FOUND_ROWS * FROM table LIMIT $start, $perPage"; $result = fetchRows($query); $totalRows = fetchColumn('count', "SELECT FOUND_ROWS() AS count");
[jEdit](http://www.jedit.org)
Use the PRG design pattern: http://en.wikipedia.org/wiki/Post/Redirect/Get
http://pastebin.com/rnDd0is4 Pretty useful to paginate small number of items, but might not work as well for a lot of items. You might want to pass an array of IDs to it, and it will then return to you the list of IDs of items that should be in the current page (as well as info about the previous page, next page, position of current items in the current page, etc). For example: define('ITEMS_PER_PAGE', 50); $ids = array(); $q = mysql_query('SELECT ids FROM articles'); while ($id = array_shift(mysql_fetch_array($q)) $ids[$id] = $id; $current_page = (is_numeric($_GET['page']) ? intval($_GET['page']) : 1); $page_items = pagination($ids, ITEMS_PER_PAGE, $current_page, $page_total, $page_prev, $page_next, $index_first, $index_last, $items_total); if ($page_items) { print "&lt;h1&gt;"; if ($page_prev) { print "&lt;a href='?page=$page_prev'&gt;&amp;lt; previous&lt;/a&gt; &amp;middot; "; } print "displaying items $index_first to $index_last of $items_total (page $current_page of $page_total)"; if ($page_next) { print " &amp;middot; &lt;a href='?page=$page_next'&gt;next &amp;gt;&lt;/a&gt;"; } print "&lt;/h1&gt;"; print "&lt;PRE&gt;" . print_r($page_items, TRUE) . "&lt;/PRE&gt;"; } else { print "no items to display." } 
[Notepad++](http://notepad-plus.sourceforge.net/uk/site.htm). Just highlight the section you want to indent and press Tab, or Shift+Tab to remove the indent.
[Vim](http://vim.org/) or if you prefer a more GUI approach Gvim, massively powerful and customizable with thousands of drop in addons. The only drawback is that some of the key combinations seem to have been planned by an octopus, but they can easily be remapped. 
emacs (of course) can do this [php, php, yaml in that order](http://img.skitch.com/20100603-kt8et39rretugwxssxkmgrmyu8.jpg) It also will comment/uncomment blocks of text [check the middle](http://img.skitch.com/20100603-j5tpj1tx6xemm5dmwudqgj8xq2.jpg)
[Zend_Paginator](http://framework.zend.com/manual/en/zend.paginator.introduction.html) ed: Adding link
I think it has to be a Windows issue now. When I used getType and print that out, I see nothing but files, no directories at all. The very last entry in this huge list is NULL. Even when I check with isDir and print them out, I am returned null.
However, with lots of rows, it can be MUCH slower. [source](http://www.mysqlperformanceblog.com/2007/08/28/to-sql_calc_found_rows-or-not-to-sql_calc_found_rows/).
If this is the single hardest thing for you to develop, you my good sir, in a good spot.
Zend Studio is pretty good PHP IDE that won't only fix your indents, but format your code according to whatever standard you define in the settings. It's pretty cool stuff... 
I've been developing in PHP for over 8 years. I probably should've used "annoying" instead of "hardest" primarily because I have to rewrite the functionality on every job. Probably should've noted that I was wanting something a little more advanced than &lt; Next | Prev &gt;, but oh well. :)
Not so great for SEO, but that is a really cool plugin for jQuery.
[ggVG=](http://www.vim.org/)
Sorry, I wasn't as specific as I should've been. Although I've never heard of the SQL\_CALC\_FOUND\_ROWS method, I can do the rest in my sleep. I was really focusing on something like... &gt;&lt; Previous 1 2 ... 35 36 37 38 39 **40** 41 42 43 44 45 .. 99 100 Next &gt; Thanks for the code, either way. :)
How does emacs auto do this? It could just be my php-mode but I still have to hit tab, all it does is decide where it should be tabbed to. So if I have it tabbed in too far it will untab it, or if its not tabbed at all it will put in how ever many tabs it needs. Still a pain when you have a huge block of code to tab though.
One of the first php functions I copied and I still use it today. I also prefer 3 periods at the end instead of two as it seems to be industry standards.
[PEAR::Pager](http://pear.php.net/manual/en/package.html.pager.intro.php) has some nice features.
Reddit needs pagination... 
Eclipse can do that (command-shift-F or command-I). Also, it can help you with your comment problem (command-/ toggles comments).
Komodo? It shows you indents as a vertical line, maybe you can tab to it. 
vim is truly the best editor.
This would get you part way there, although it ain't perfect. I'd probably spend some time modifying it to support always showing a set number of pages, so it's easy to design around. &lt;?php $npages = 100; $nends = 2; $naround = 1; foreach( range( 1, $npages ) as $selected_page ) { $pages = range( 1, $npages ); if( $selected_page &lt; ( $npages - ( $nends + $naround ) ) ) array_splice( $pages, $selected_page + $naround, - $nends, '...' ); if( $selected_page &gt; $nends + $naround ) array_splice( $pages, $nends, $selected_page - ( $nends + $naround + 1 ), ( $nends + $naround + 1 ) != $selected_page ? '...' : null ); print "selected: $selected_page pages: " . join( ", ", $pages ) . "\n"; } Edit: Oh yeah. Comes with built-in "test" loop.
Select the region (or the whole buffer: `C-x h`) and do `M-x indent-region` (or `C-M-\`)
Thank you!
Aptana
Nope, and xpost.
You should try netbeans or some other fully featured IDE, it's fantastic when not only does it format for you, but you get to choose all the format rules to fit your style.
You don't need to cast it as an int, the max function will do that for you...
And updated again :)
Not really. A lot of these are exceptionally trivial or require major effort to trigger. For example, [this bug in pack()](http://php-security.org/2010/05/31/mops-2010-052-php-pack-interruption-information-leak-vulnerability/index.html) requires that malicious data be passed to pack(), then requires that the error handler modify the *global variable* that the pack() call is operating on. The chances of this happening in the wild? About nil. All of the "interruption" bugs have similar conditions: an internal function operating on a *global* that is then modified in custom error code. The suggested fix, no longer using by-ref passing to builtins, is perfectly logical and a sane idea. I hope that's the route the PHP devs choose to fix those issues. Also keep in mind that a lot of the bugs reported aren't for the PHP core, but for open source software written in PHP, like [this bug in e107](http://php-security.org/2010/05/19/mops-2010-035-e107-bbcode-remote-php-code-execution-vulnerability/index.html) that lets users call freaking eval.
Benchmark please.
I have one that I use for paginating through arrays http://hbalagtas.0fees.net/paginator.php I use it to paginate the RSS feed from blogger that I display on my site and also for my photo galleries. For paginating database results I normally use whatever pagination class is available on whichever framework I'm working on.
&gt;Gutmans added that the vast majority of the flaws reported in PHP itself belong to a class of issues that requires local access to the server for the bug to be exploited. Yeah, worried! Switching to Ruby on Rails and noSQL RIGHT THIS SECOND DELETE MY WEB SERVER.
troll + FUD
http://www.php.net/manual/en/index.php
Think of a problem you would like solved. Write an application to solve that problem. This is the best way to learn any programming language. For reference material use http://www.php.net/manual/en/index.php and pick up a copy of PHP 5 Objects, Patterns and Practice (published by Apress)
PHP: The Good Parts should be a nice starting point. Avoid random google results, about all of them are just sources of misinformation. Could take a look at W3Schools too.
Do you know any other languages? If not, I would start with one of the really basic websites. Then go to the manual. If you know another language go to the manual and a framework type site like Cake or Zend. Better to learn it the right way. 
I completely learned php using php.net. I had previous programming experience, though. Mileage may vary.
php hello world
The best answers have already been given. I'm just going to throw my ring in the hat and support them. Whatever failings PHP has (and it has enough) it does have the advantage of having probably the best online documentation. Failings aside, it is definitely possible to write good PHP code if you are aware of and follow best practices. It also has the advantage of being in wide use, so there's lots of resources just a Google search away. It has also been shown to be scalable should you be lucky enough for your app to catch fire. If you have any programming experience at all (especially in a C/C++-ish language or Perl) the online documentation should be all you need. Let me add one thing though. If you are intending to do any professional-level development, it will probably do you a lot of good to learn the language in concert with one of the MVC frameworks out there. Some good ones (in no particular order): * CakePHP (This one's a lot like Rails. Learn this, and it'll be easy to learn Ruby on Rails too) * CodeIgnitor / Kohana * Zend Framework * Symfony 
[W3Schools](http://www.w3schools.com/php/default.asp)
Seconded. This was my only resource for learning PHP, it has everything you need.
Stay the fuck away from that website. Block it in your hosts file so you don't end up there by accident.
Same, but I had *no* previous experience.
Start by setting up WAMP/LAMP if you haven't already. If you don't already know, that stands for Windows, Apache, MySQL, PHP. It's a web server you run locally. Do not make the mistake of signing up for some shitty free-host that provides PHP like I did when I was a kid. Next, build a standard website. You will need a home page, a registration page, a login page, and a members only page so you can test the login. This is a great start because there are a billion tutorials on it and it teaches you the most important part of PHP which is interacting with a database (MySQL). Once you have all this set up and working, read up on XSS (Cross-site scripting) and work on breaking your application. Now would be a good time to add a component to the site that allows users to post content/links/pictures. Continue to try and break it with XSS. Tools you will want if you don't already have them: - Notepad++ (or an IDE like Aptana or Eclipse if you want to use a framework like Zend, CakePHP, CodeIgniter, etc) - Firefox with the Web Developer Toolbar and Firebug addons. You can use Chrome if you'd like but it doesn't have Firebug which is a must-have tool. - WAMP comes with SQLite and phpMyAdmin for managing the database. They basically suck. I'd recommend NaviCat but you'd have to shell out money. My final recommendation is that you don't start with a framework because it won't give you a firm grasp on the fundamentals of PHP. Because you gave no extra information I assumed you were a programming novice. My advice to designed around the idea that you aren't already a programmer.
agreed. example: the javascript [for loop "documentation"](http://www.w3schools.com/js/js_loop_for.asp) on that site is really misleading: &gt; Syntax: &gt; for (var=startvalue;var&lt;=endvalue;var=var+increment) It should say something like: &gt; for ([comma separated list of initial condition(s)];[loop while this is true];[comma separated list of things to do on every iteration]) The way they characterise it makes it seem like for can only do numerical iteration upwards. Compare the [php 'for' docs](http://php.net/manual/en/control-structures.for.php)
And why is that?
 &lt;?php echo "Hello, World!"; ?&gt;
thirded, but be very wary of the user comments. They're often dangerously wrong.
I fell in love with this books first edition. Don't be afraid of the thickness. It's written so it's easy to understand. Will recommend again. 5/5 stars. http://www.amazon.com/PHP-Bible-2nd-Tim-Converse/dp/0764549553
PHP6? Did I wake up in the future?
Your files should not have a trailing ?&gt; It's bad practice and can lead to all manner of 'headers already sent' woes.
I know what you're talking about. it is a pretty annoying thing to do, but once you get the idea behind it, it's pretty damn simple. * User on page 3 (3rd page) * User sees 25 items per page * There are a total of 1,000 items in DB 1. total = Select count(*) from table = 1,000 2. PerPage = 25 3. Page = 3 4. ItemsStart = (Page - 1) * PerPage = 75 5. Items = Selet * from table limit 25,ItemsStart 6. TotalPages = total / perpage = 40 That's it... 
Well i'm familiar with HTML, CSS and a bit of Javascript, thats about it, i've been more focused on learning after effects and Maya lately, though i want to keep my skills varied!
Go to [this site](http://www.tizag.com/phpT/) It has many many tutorials on core concepts to php such as loops, cookies, sessions, arrays, etc. And it also provides practical examples of their use. Very simple for someone to not only learn, but learn why. 
thanks for the response, are there any particular bad practices people develop when learning PHP that i should avoid? My friend is a web developer and i'm sick of having to ask him to do things for me! :P
Thanks for the great reply! I was told to get XAMPP by a friend which i have installed and am using at the moment. I am hoping to develop a movie review website, are there any particular areas in PHP you'd recommend I familiarise myself with? I've only familiar with HTML, CSS and a little Javascript but that will be enough to set up a basic website as i already own 4 domains (2 unused). Thanks once again
alternatively, gg=G
At least they're not as bad as emacs shortcuts! ha-HAH! *dances out of thread, never to return*
Is this true?
[Yes](http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html).
Wow ... too many to list. Big ones: 1. Failing to sanitize user input 2. Creating dynamic sql queries without using some sort of parameterization 3. Lots of PHP code inline with your display code. Using a Framework will give you lots of tools to avoid many of the common pitfalls. However, you then need to learn the best practices of whatever framework you're using. NOTE: This isn't just an issue with PHP ... all languages have flavors of these issues that must be dealt with. In the end what this all means: You can learn to write PHP code that "works" very quickly. However, it takes time and study to write PHP code that is reliable, "safe", and maintainable. 
My other advice would be, don't start making the review site. Do a one (minimum) site that employs similar concepts, THEN start from scratch. Obviously most developers will tell you that a core concept is "code reuse" in which you take code you've written elsewhere and employ it in what you're working on. I would recommend that if you do that, refactor your old code to see where you can improve it the most. That's the best way to become better As for Javascript, the mistake I still seem to make is thinking I'll need less than I actually do. I highly recommend jQuery as it is one of the most popular javascript frameworks available. Also, if you want to incorporate some visually interesting javascript elements, jQuery UI is a good start and is well documented. Also, consider PEAR when you're thinking about a component that you may need. PEAR is a collection of components that may have already solved the problem for you. Also, you may want to bookmark sites like [Noupe](http://www.noupe.com), [Six Revisions](http://www.sixrevisions.com), [NetTuts](http://www.nettuts.com) (particularly this one) These sites focus on info/tutorials on design and development of websites. They are great resources. I even remember seeing one for making an AJAX Star rating system that you may end up needing. Good luck! (also, emphasis on Firebug. That shit will save your life)
Only if your text editor isn't configured properly and it adds EOM characters to the end of the file.
From the amazon description: &gt; PHP 6 (due out in 2008) Apparently this book (as well as mhankins) have leaked into our universe from an alternate timeline.
Don't get me wrong, this is an excellent resource. It is in no way a cheat sheet.
In response to this. I've been working on my own commercial site for almost a year now. It's basically gotten way more complicated than I originally planned it to. All those things you listed above are a problem for me. I am currently a one man show, I do all front and back end development, marketing, and content (perhaps I need to hire someone). But using a framework might make sense now. Are these things free? What are the drawbacks of using one? Can you recommend one?
Once upon a time it was a fair bit of work ;)
Generic framework benefits: 1. A lot of common functionality is usually written into the framework. This prevents you from "reinventing the wheel" over and over again. 2. Frameworks abstract away a lot of the details, allowing you to write (for example) one line of code in the framework that would have take a dozen lines if you hand-coded it all. (A great example of this is that many framework abstract away direct access to the database, freeing you from writing a lot of SQL) 3. Frameworks help to standardize your code. Anybody who has experience with the framework should be able to walk onto your project and very quickly have an understanding of how it works. This is a boon if you ever decide to bring in an outside contractor or hire a full-time developer. 4. Frameworks help you write maintainable code. Certain types of operations are always done in certain places. By keeping your code segmented, it's easy to hone in on a functional area when there's a bug, our you want to do an enhancement. 5. Frameworks promote code reuse. Write once, use everywhere. This is kind of a corollary to the above point. Generic framework drawbacks: 1. They can be somewhat heavy. Using a framework imposes a certain amount of extra overhead with every call. Some frameworks are leaner than others. However, if you choose a framework in wide use, you'll be able to leverage other people's knowledge when trying to optimize your bottlenecks. (Note: your data layer's going to be a bottleneck before your app. layer, and frameworks can help a lot by making cacheing easier) 2. You have to learn how the framework works as well as the language it's written in. (This is why I advocate choosing a framework and learning it in concert with the language) 3. Frameworks can sometimes feel a little constraining. However, if you're creative, there's always a way around a sticky problem. 4. If you don't have the ability to customize your server configurations, and/or don't have access to your server's command line, running a framework can be difficult (as in shared hosting situations). Some frameworks deal with this better than others. In general, you probably want at least a virtual private server if you're going to be developing with a framework. However, if you have access to a server you have more control over for development purposes, you can deploy the working code (with its configurations) into a shared-host environment. In PHP, I've worked with CakePHP, Kohana and Symfony. I've heard that ZendFramework is difficult to use, but I'm completely talking on hear-say. Of those three, I like CakePHP because it brings a lot to the table and is pretty flexible about where it's deployed. Kohana is a "lightweight" framework that has a much more limited scope. Using Kohana is a bit closer to hand-coding, but takes a lot of the busy work off your hands. It should also be pretty flexible about its deployment options. Symfony I found to be heavily reliant on command-line access. I haven't worked a lot with Symfony, but I think it'd be more difficult deploy, and I wouldn't consider it unless you had full control over your production server.
http://pear.php.net/package/PHP_Beautifier
I have to disagree with one point you made. In my opinion it is better to learn the language first, after you have a good grasp you can start learning a framework. There are a lot of people out there that ended up learning a framework instead of the language and it is always harder to go back to pick up the pieces later as you don't know what you don't know. As a beginner you don't know anything so it makes the approach easy. 