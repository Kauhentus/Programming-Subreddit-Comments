Skip all the verbose variable assignments and turn your logic around to make things more readable: private function invalidLicenseKey($key) { if ($this-&gt;compareArgs($key[5], $key[10], $key[15]) &amp;&amp; $this-&gt;compareArgs($key[8], $key[11], $key[18]) &amp;&amp; strlen($key) === 19 || in_array($key[0], array('T', 'G'))) return false; return true; }
This. PEAR is shit-tier.
Instances where you have an "if any fail, just fail" situation, I think one of two strategies are good. Strategy One: (Pointed out in an earlier post) On first failure, just return false, don't load a $failure_x variable with true. Although! I had a professor who HATED this so I never got into the habit. His opinion was it makes it difficult, down the road when you would prefer to watch variables with a debugger. You might not be there just yet...i'll elaborate a bit later. Strategy Two: A success flag. Start your section of code and assume it'll work. $success = true. If any of the expressions that would have previously set a $failure_x to true, set $success = false. At then end all you need is if (!$success) return false; I tend to like this more because down the road when you use a debugger, you can watch this variable and step line by line until you see it's value change to false. Otherwise you'll have to try to remember what line you had just stepped from when all of a sudden your function just dropped out. Edit (just saw your function): $success = true; if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) $success = false; if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) $success = false; if ((strlen($key) &gt; 19) || (strlen($key) &lt; 19)) // Why not strlen($key) != 19? $success = false; if (($key[0] !== 'T') &amp;&amp; ($key[0] !== 'G')) $success = false; return $success;
Create a method for each test (better for unit testing). Each test method throws an exception if the test fails, otherwise it does nothing. When ever validateKey is called, the caller can examine the exception in a try...catch block to find out why the test failed. /** * @param array * @throws KeyException */ public function validateKey($key) { $this-&gt;_compareArguments($key); $this-&gt;_validateLength($key); $this-&gt;_validateRequiredCharacters($key); } private function _compareArguments($key) { // test code for first two tests goes here // if test not passed, throw exception containing test information throw new KeyException( KeyException::ERR_INVALID_ARGUMENTS, $optionalinfo ); // otherwise, do nothing! } // other test methods here class KeyException extends Exception { const ERR_INVALID_ARGUMENTS = 'KeyException: invalid arguments'; // exception class methods go here } // calling the validation method: try { $this-&gt;validateKey($settings[0]); } catch (KeyException $e) { $this-&gt;addKeyValidationError( $e-&gt;getMessage() ); } EDIT: Or, catch the exceptions individually in validateKey and append them to the error array, returning false if error array is not empty. Then the calling function can access information about all the tests, even if the first one fails. I use this when validating form fields to show information about which fields failed and why.
In light of the OP's full problem, this is the cleanest-reading solution I've seen. Keep the tests isolated, easy to read, and closely associated with their return value. The only thing I would change is if (strlen($key) != 19) { return false; }
yeah tbh I didn't even bother reading the details of what was being checked, just reformatted it a bit. A better method signature would also be: class LicenseKey { // Stuff here that encapsulates any functionality that is required around the key itself } interface KeyValidator_Interface { public function isLicenseKeyValid( LicenseKey $key ); } class KeyValidator_Default implements KeyValidator_Interface { public function isLicenseKeyValid( LicenseKey $key ) { // Do logic to validate the key here } } class foobar // dunno what it's generally meant to be doing { // An injected key validation class to make DI/Unit testing easier private $_keyValidator; public __construct ( KeyValidator_Interface $keyvalidator ) { $_keyValidator = $keyValidator; } private function isLicenseKeyValid( LicenseKey $key ) { return $_keyValidator-&gt;isLicenseKeyValid($key); } } Why all the classes? Because it lets you unit test each class with seams to let you inject mock key validators etc. It's also separation of concerns. Each class should only be concerned with one thing. Why does a validator understand anything about a key? You don't want to tightly couple all those bits of logic together.
i personally like the [Yii framework](http://www.yiiframework.com/). I was just experimenting with applying different themes to the site and found that it is extremely *easy* to implement. Let us know what you try out.
Any chance your company would sponsor a visa?
I find the former easier to read even if lengthier. In my opinion, the second is saving 8 characters but sacrificing easy readability.
* Best framework for fast development on any type of PHP project? * MVC framework with a good OOP design * What's the latest and greatest coming out of the PHP Framework world? * If you were starting a new project today, in PHP, what framework would you choose and why? * What is the best framework to connect with sql server? And is there a step by step tutorial. * Good PHP framework for making a web app * Looking for help selecting a framework * Best PHP Framework? * I've been out of the PHP game for a while and I need a simple CRUD framework. Preferably simpler than Cake. * Best PHP Framework.. Fight! * Help me choose PHP framework * Can anyone reccomend a good PHP CMS / framework for social networks? * Favorite application framework? * Looking for a framework 
Also a reminder that the human factor is always the weakest link in any system.
case.
Something like -- &lt;?php $random = uniqid(); echo '&lt;input type="text" value="' . $random . '" readonly="readonly" /&gt;'; ?&gt; This is not okay for security though. Users are still able to change readonly text boxes and uniqid is only using the current time as a seed. Should you need something you can control I would advise using mt_rand() to get a random number and storing it in the session so you don't lose it. 
would there be a way to make it so it isn't in a text box and just *there*... with an assigned name/id so i can send it with the php(mail) form?
Sure, try this -- &lt;?php session_start(); $_SESSION['random'] = uniqid(); ?&gt; Then on the page that's sending the mail you can say -- &lt;?php session_start(); $random = $_SESSION['random']; ?&gt; You must put the session_start() at the top of the pages, but after that you can access $_SESSION[] as an array which will stay as long as that user is browsing. 
Sorry to be a pain in the ass, but just to clarify, in the head of the page with the form, use &lt;?php session_start(); $_SESSION['random'] = uniqid(); ?&gt; and then access this inside the form by using $_Session['random'] ? and on the mail handler/process page put &lt;?php session_start(); $random = $_SESSION['random']; ?&gt; in the head and send it via the variable $random in the body of the message? sorry if i'm screwing this all up. I appreciate the help but like I said, i am completely new to PHP. ...EDIT: On a side note, how do I get code to show up as code? I checked "formatting help" but saw nothing.
you got it
 return !(!$failed_a &amp;&amp; !$failed_b &amp;&amp; !$failed_l &amp;&amp; !$failed_i); return (bool)array_sum(array($failed_a, $failedb, $failed_l, $failed_i)); return in_array(true, array($failed_a, $failedb, $failed_l, $failed_i));
1 final question. How would I limit the number of characters generated bu uniqid. I've googled a bit and can't seem to find an answer simple enough that my newbie mind can understand it. Thank you for the help.
building off of that, I would take it a step further and say private function invalidLicenseKey($key) { if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) return false; if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) return false; if ((strlen($key) &gt; 19) || (strlen($key) &lt; 19)) return false; if (($key[0] !== 'T') &amp;&amp; ($key[0] !== 'G')) return false; return true; } but really at this point it is pretty trivial. 
The positive version of a property is usually the more cleaner and understandable version to use. In this example, I'd suggest using is_validLicenseKey() instead.
It's much more than 8 characters - the second would only be used if your code is of the form: if (boolean) return true; else return false; It's kind of useless code when you should just `return boolean` instead. For readability when I have several clauses, I often do this: $success = $abc &amp;&amp; $def &amp;&amp; $ghi; return $success; 
Because no one did, I will: $values = array($failed_a, $failed_b, $failed_l, $failed_i); if(array_reduce($values, function($a, $b) { return $a === $b; }, true)) { // passed } Edit: silly me, I taught you had an `and` relation between them
It's the end of it that's most unique (as it's based on time); so you could say -- $random = substr($random, -6); That would give you the last 6 characters. Also to do code formatting put 4 spaces in front on reddit
I don't see that happening unless the position cannot be filled by someone in the area.
There's loads of PHP bug tracking tools. Did you google at all?! ;) I've used mantis [http://www.mantisbt.org/] and it was OK (it was a few years ago) so I think I'd spend some time writing plugins for something that is available. Or these days I'd pony up the cash and go http://www.fogcreek.com/fogbugz/ then spend my free time surfing.
Don't hardware firewalls generally run a locked-down version of Linux?
I'd suggest getting better hosting. Bugzilla has been in development for many years, and keeping up with its own updates and bugfixes will take up more time than you actually using the thing.
Put 4 spaces in front of the code. Like this.
yep, i figured that out. Thank you though.
Perhaps you can help me with my current problem lol. I've managed to use a completely different method after googling for 8+hours and it appears to be (mostly) working. I'm using: &lt;?php function genRandomString() { $length = 5; $characters = ’23456789ABCDEFGHJKMNPQRSTUVWXYZ’; $string = ”; for ($p = 0; $p &lt; $length; $p++) { $randomString .= $characters[mt_rand(0, strlen($characters))]; } return $randomString; } ?&gt; and calling it into the form like: &lt;?php echo '&lt;input name="reference" id="reference" type="text" value="'.genRandomString().'" readonly="1" /&gt;'; ?&gt; The problem that I'm having is that a vast majority of the strings are showing up like [this](http://i.imgur.com/D0hYM.png)
 return !($failed_a||$failed_b||$failed_l||$failed_i); Readability concerns aside, this is probably the best solution in terms of CPU processing. If/else conditionals require additional CPU cycles, and so does each comparison you have to do. So, by eliminating the == from your statements, you've saved yourself four cycles. Additionally, if the first variable is true in a statement containing only OR operators, the other three aren't even evaluated because the entire statement is logically true. PHP is smart enough to "[short-circuit](http://en.wikipedia.org/wiki/Short-circuit_evaluation)" the conditional when this occurs, thus saving you three more cycles. It's really nit-picky, but when you're performance tuning every cycle you save counts! * Edited for short-circuit
*Something's* up with your file's encoding, I suspect. Couldn't say exactly what though, I've not run into issues like this. I can point out that you don't define $randomString anywhere; you define $string instead. Also, you want mt_rand(0, strlen($characters)-1), else it's possible that mt_rand will return strlen($characters); and $characters[strlen($characters)] always results as an error, as that is trying to access the character after the end of the string, which doesn't exist.
To say that that went over my head would be an understatement. I understand the first sentence...after that *crickets* EDIT:: Actually, $randomString is defined here: for ($p = 0; $p &lt; $length; $p++) { $randomString .= $characters[mt_rand(0, strlen($characters))];
To answer your question: No. I found out it's rarely a good idea to rewrite projects from scratch. You'd be far better putting your time into refactoring Bugzilla. I guarentee doing the following: &gt; * There is not a good UI other than Bugzilla &gt; * Installing Bugzilla to my shared hosting is impossible &gt; * There is not big community that contributes to Bugzilla &gt; * Bugzilla has many dependencies which it makes it even hard to install would be faster than rewriting it. I'll play devils advocate. Any reason you need a project manager written in PHP? If you're not too scared away by ruby, then you should take a look at Redmine. Ruby is easy to install if you use something like RVM. All you really need to is install the gems and run `passenger start` in the redmine root (if you're using passenger). Job done.
That's not defining it. $randomString .= $characters[mt_rand(0, strlen($characters))]; Is the same as $randomString = $randomString . $characters[mt_rand(0, strlen($characters))]; So you need to define it before-hand. As for the second part: mt_rand(&lt;min&gt;, &lt;max&gt;) returns any value between &lt;min&gt; and &lt;max&gt;, *including* &lt;max&gt;. strlen(&lt;string&gt;) returns the number of characters in that string. $string[&lt;number of characters in string&gt;] returns an error, because it tries to access the character after the end of the string - for example: $string = "123"; echo $string[0]; // outputs 1 echo $string[2]; // outputs 3 echo $string[3]; // error, because there is no character at position 3 So, putting that altogether: $characters = "12345"; $len = strlen($characters); // Returns 5 $position = mt_rand(0, $len); // Returns 0, 1, 2, 3, 4 or 5 $character = $characters[$position]; // This can result in an error, because $position can be 5, and there is no character at position 5 in the string However, there is a solution! In order to tell mt_rand() not to return the last character, just tell it to return numbers between 0 and the position of the last character in the string, rather than the position of the end of the string. That is: $position = mt_rand(0, $len-1); Hope this helped.
PHP BOSTON REPRESENT!!! You don't want to party with me.
I sure appreciate your time. But that is waaaaay over my head at this point. Perhaps because I've been working on this one thing for hours and hours, or perhaps because I'm so new to PHP. I'll look at it a bit more tonight and then maybe wait until tomorrow. Thanks again, but like I said, I'm really at a copy/paste point in my knowledge...but I am working on it.
Anyone for a PHP Milwaukee?
Honestly, I'd suggest sitting down with a book on programming and going through it; completing all the exercises, and making up your own as well to make sure you're understanding things right. It doesn't even have to be a book on PHP, it could be on Python or C++ - the majority of the ideas are transferable between languages, and books on Python or C++ are often of better quality than ones on PHP.
Thats a very intense situation. Luckily, I am learning code from somebody who knows much more than me (owner of the MMO I code for). I'll be sure to pay even more attention now. Thanks for the experience warning!
Fire your HR person. 
if (!$failed_a * !$failed_b * !$failed_l * !$failed_i)
PHP... Hervanta?
&gt; Also Rubby has no big community as PHP. Yes it does, the Ruby community is one of the largest programming language communities around. Also, it's Ruby, spell it right at least. If you're not interested in getting real hosting, there's not much you can do, really.
&gt;There is not a good UI other than Bugzilla Seriously? [Lighthouse](http://lighthouseapp.com/) or [FogBugz](http://www.fogcreek.com/fogbugz/) come to mind right away as *way* better options. Bugzilla is downright archaic with its interface. Showing you every possible option on one screen does not make for a good UX. Fixing the bug should be the difficult part, not filing the bug.
The idea of rewriting Bugzilla from scratch in PHP is something that would take a team of expert developers a few years to accomplish. This is not some simple website project you can complete over the weekend or in one month. I think it would be infinitely cheaper and much saner to get a good VPS server and install bugzilla on it. Look at linode.com or similar VPS providers. The $20 a month plan will do you just fine.
Central Jersey, US here. And none of my friends are really programmers (all artist types).
yes. use curly braces
It sounds like you already have an answer in your head. You aren't really asking if it's okay to re-write Bugzilla, you **want** someone to support you in doing this. Typically when you ask the community what you think, you should be open-minded to their responses. Personally, I think it is a bad idea to rewrite Bugzilla. Change your host.
This is the kind of employers that you want to avoid. If you are a GOOD software developer go independent or go for a job that will give you security and benefits... those employers usually are more willing to share information and tell you about the business plan. Let the bad programmers fill these jobs... 
Looks like the perfect prospect for the profiled job. HIRED!
[Lithium](http://lithify.me) It's not ready for most people if you want an easy life but it's my favorite so far out of CodeIgniter, CakePHP, Kohana and Yii. I just can't use it as much as I'd like to due to its immaturity.
You should check the length is 19 before you attempt to reference the 18th index. if ((strlen($key) != 19)) { return false; } if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) { return false; } if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) { return false; } rather than if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) { return false; } if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) { return false; } if ((strlen($key) != 19)) { return false; }
I'm using phpmyadmin, but I have the url protected with apache authentication and ssl, then you still have to login using the mysql account to access the db. Also I'm restricting access to allow only our specific IP's, am I safe enough?
&gt; but that doesn't make it "better" That's entirely arguable (as I'm sure you realize), so I'll argue it :) I contend that every programmer should know that `if (expr)` simply means: _'if expr evaluates to true'_. This is a programming 101. I also contend that less code is better code; while this isn't a tenet that applies to everything (I'm not a fan of "clever" code most of the time for production use), but I do believe that it's very applicable any time you're doing comparisons like `== true` (or similar) in a dynamic language. Otherwise, you end up with crap like the following: if ($x != true &amp;&amp; $x != null &amp;&amp; $x != "" &amp;&amp; $x != 0) { ... } Shit like that makes me want to headbutt an icepick.
Please, please, please read this. http://mywiki.wooledge.org/XyProblem Then come back and keep it in mind when posting. Notice we gave very different answers for the two different problems you posted.
....and we're almost ready for the enterprise!
I have always wondered which technology was more secure, Perl or PHP. 
To my experience on-site always means "visually monitoring him/her will increase productivity"... Micro-managing a software developer has negative outcome to my experience. So, have him on-site if it makes you feel better but that won't always be productive to your final goals. The best way to incorporate a software developer with experience is offering him job security or benefits directly involved to what his working on. That will keep him motivated and working for the extra mile. For that you don't need him on-site.
Stop learning; create things.
Apply DeMorgan's law and it becomes even clearer: return !$failed_a &amp;&amp; !$_failed_b &amp;&amp; !$failed_1 &amp;&amp; !$failed_i;
I'm trying to find a suitable example but lack one. Just general lazy and sloppy code with comments here and there saying "why the hell did I just implement it this way?! oh well" Public... everything's public...
Listen to this guy.
Can someone rate my code??? &lt;?php if ($attendees &gt; 3) { $self-&gt;notEnoughCash(); }else{ $self-&gt;beersForAll(); } ?&gt;
What about setting up an ODBC connection and using the PHP odbc functions?
 $attendee_count = count($attendees); if ($attendee_count &gt; 3) { $self-&gt;notEnoughCash(); } elseif ($attendee_count &gt; 0) { $self-&gt;beers($attendees); } else { throw Exception('Forever alone'); }
Hey, did you nip up to the PHPNW conference in Manchester that's just happened? There was quite a representation from the PHP London crew.
I went to the North Jersey one once. We didn't talk about PHP much, it was just kind of a lame tech-talk hangout.
Certainly! I'm often at the phpwm meets, was at phpnw11 this year too. The london and manchester conferences are both very worthwhile. I'd recommend getting on irc as well. For some strange reason the london php group is oddly absent, but #phpnw and #phpwm are nicely active during the day (on Freenode, that is)
PHPNW, lots of redditors go there :) Well, at least 2 anyway.
Are you interested in the position? If so then we can talk details. If not then thanks for the input.
That's very short sighted to be telling @crmaki that they do not need someone on site, then giving just your own reasons why you think it's not needed. There are plenty of reasons why it's a good idea to have someone on site that have nothing to do with 'micromanaging' - too bad that's your only view of on-siteness.
How is the conference? I would be tempted to go.
"to my experience" said twice. Never said "they do not need someone on site".
Oh bollocks, do I have to start matching Reddit usernames to real people as well as IRC and twitter names? ;)
This should help get you guys started: http://pastebin.com/gKft97Yk
PHP Orange County, California. Let's do this!
Fucking LOL! * You should pass an array to the Attendee constructor. * Age should default to 0, don't assume they're legal. * Meetup-&gt;ageLimit should be drinking_age_minimum * You can have more attendees than you can buy drinks for; only buy drinks for the first three - $beer_recipients = array_slice($this-&gt;attendees, 0, 3); * Need a validator for Attendee-&gt;age in the Meetup. * Keep track of duration between rounds when calculating approximate BAC. If you really want to get anal, also include weight and use http://www.drunkdrivingdefense.com/general/bac-comparison-over-time.htm as a rough reference
PHP Phoenix/East Valley area? Anybody?
For the array to Attendee constructor I thought about that, also thought about no constructor yet figured since there are only two values as of now to just do parameters (and refactor in the future). Good point with the age, and ageLimit could be renamed. Just wanted to get the code out before the deadline. ;) As for the bac, I was going to add an hourPassed function and then toss all of this inside of a while(true) with sleep but then I realized, I should probably get back to work. Also wanted to add more custom exceptions, and drinkBeers method to the Meetup. Maybe with your 4th point we could have it tell anyone outside of $beer_recipients that they should buy the next round, or we could randomly select $beer_recipients out of our array of attendees, so others could get some rounds too. **Edit:** Also, would like to rename Meetup to Event and namespace this all under Meetup for any future revisions. Could add a Model namespace infront of Event and Attendee as well.
*slow clap* Fucking. Awesome. Forever alone is part of a meme though? Aren't you 'fraid you be gettin banned!?
Once a month!? Where is this PHP London conference?
Neither and both. They're both just tools, and both can be used to write the most insecure code, and the most beautiful secure code you've ever seen.
Came here to recommend Redmine. It's *awesome*.
php Mexico City!
Better would be to have a message queue so you can tell what failed. An empty array would mean success. Remember, less code doesn't always mean better. $errors = array(); if (somecondition) { $errors[] = 'somecondition failed!'; } if (someothercondition) { $errors[] = 'someothercondition failed!'; } return $errors; I'd probably make a validator facade for my own code, but this approach seems more in line with where you're at presently.
PHP Philly, checking in
&gt; Aren't you 'fraid you be gettin banned!? No. &gt; This doesn't mean that memes are prohibited in the comments, or that we're now prohibiting humorous posts. All it means is that any link posts involving advice animals, rage comics, or similar content that we deem to be a "meme", will be removed. No punishment will be meted out (unless someone's spamming them to troll); the post will just be removed.
Hi, I just want to drop a quick note. I'm part of Montreal Python organizers, and we do monthly meetups with 4-5 presentations of 20 minutes. After, we have two free beers at a microbrewery across the street. We always have around 40 to 50 people showing up. One of the lead organizer of Montreal Python made a speech at the last PyCon on boostrapping a *Python* community, but it works without problems with a PHP community. His 20 minutes talk is avalaible at the following address: http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-montreal-python-lessons-learned-from-bootstraping-a-python-community-4901495 And if there's anyone from Montreal, feel free to join us at our next MontrealPython!
No - applying that many "nots" when you're trying to read code is not clearer. Just because you can reverse it doesn't mean that you should, or that it's in any way better.
This is where I point out that your example is impossible, right? ;) if ($x != true &amp;&amp; $x != null &amp;&amp; $x != "" &amp;&amp; $x != 0) false &amp;&amp; not false &amp;&amp; not false &amp;&amp; not false
Silly me, I assumed that the captcha rotated out politicians, blair for bush, etc..
Not necessarily better, but - return $failed_a + $failed_b + $failed_l + $failed_i &gt; 0;
Is it that time of the month again?
&gt; There is not a good UI other than Bugzilla *Any UI* is better than Bugzilla. Bugzilla is one of the most over-hyped projects I've ever seen. It's terrible to use in just about every way.
Impossible? If it were impossible I could not have typed that. Believe it or not, code exists out there that matches this pattern (including suspected logical errors), and therein is the crux of my argument about why this is very bad. Also, due to [type coercion within dynamic, loosely-typed languages](http://php.net/manual/en/types.comparisons.php), the above (or a similar variant, yet still containing the same suspected logic error) could be valid. Here, a demo that is only very slightly modified from my original code (I removed the `$x != 0` expression): $x = "0"; var_dump($x != true &amp;&amp; $x != null &amp;&amp; $x != ""); &gt; bool(true)
I'll take excessive negations in [CNF](http://en.wikipedia.org/wiki/Conjunctive_normal_form) over ballooning sub-clauses. I find CNF much easier to modify and easier to read when whitespaced out: return !$a &amp;&amp; !$b &amp;&amp; !$c &amp;&amp; !$d; versus return !( $a || $b || $c || $d ); Using disjunctions like that means the $d is far away from the negation, and if you have anything that *shouldn't* be negated, you have to double-negate it (`!($a || !$b) === !$a &amp;&amp; !!$b`), which is confusing. Especially when you consider "$a" is quite likely to represent a function call or a sub-clause of its own: return !in_array($keyword, $banned_keywords) &amp;&amp; user_logged_in() &amp;&amp; ($credits_available &gt; $cost || $user-&gt;isAdmin()) &amp;&amp; PHP_SAPI != "cli"; versus return !( in_array($keyword, $banned_keywords) || !user_logged_in() || ($credits_available &lt; $cost || !$user-&gt;isAdmin()) || PHP_SAPI == "cli" ); - On which is it easier to: - see that "the user must have enough credits to cover the cost, unless they are an admin"? - see that "the user must be logged in"? - also ban a specific user? - also allow 'moderators' to skip out on the credit cost? - remove the 'not command line' requirement? There may be situations where `!($x || $y || $z)` is better of course, I'm just not used to seeing them; perhaps I don't use that programming style. [edit] wrote [DNF](http://en.wikipedia.org/wiki/Disjunctive_normal_form), meant CNF
It's less a matter of style and more of which is appropriate to the readability of a given clause. In your first example, I say that using !&amp;&amp; is less readable. It takes much longer for someone to understand what the return value will be. In the second, you're using an example which can be read and understood in normal language. These are very different examples, and I think that they warrant different usage.
Well, at least we can agree on "it depends" :)
&gt; or a similar variant Of course if you leave off some of the tests one or more values will pass. However, *your example* is impossible. $vals = array( true, 'a', 1, array('foo'), new stdClass(), false, '', 0, array(), null, ); foreach ($vals as $x) { var_dump($x != true &amp;&amp; $x != null &amp;&amp; $x != "" &amp;&amp; $x != 0); } returns bool(false) bool(false) bool(false) bool(false) bool(false) bool(false) bool(false) bool(false) bool(false) bool(false) I challenge you to find a value that passes your original example as presented.
Try using $this-&gt; and self:: properly...
Shouldn't be too hard with me ;)
You mean week.
I don't see where he mentioned Doctrine. I think he means PHP frameworks, not ORMs?
FYI the conference (aka phpuk) is annual. the user group (aka phplondon) is monthly.
You're being exceedingly stubborn on this; I know you're proud to flex your impeccable knowledge of De Morgan's law, and I hate to break it to you, but loosely-typed languages don't particularly care for De Morgan's laws. Let me back up to provide more detail. You posited that the following is impossible: &gt; false &amp;&amp; not false &amp;&amp; not false &amp;&amp; not false However, my code that I just demonstrated to you _precisely fits that paradigm_. Let's apply your pseudocode to my actual code: var_dump( $x != true // false &amp;&amp; $x != null // &amp;&amp; not false &amp;&amp; $x != "" // &amp;&amp; not false ); Unless you were being so literal so as to constrain your comment to only expressions with contain exactly 4 sub-expressions, then you're just being difficult, because nowhere in your pseudocode did you make any reference to any particular code. I _could_ alter my code to include another "&amp;&amp; not false" that would also mass my test, but I didn't think I'd need to spoon-feed you. EDIT: And you're doing nothing here but proving my original point, so thanks! I wrote the original code that I did without putting any thought into whether it was actually possible. It was just a demonstration of how bad things can get when programmers don't know what they're doing by using expressions like those.
Christ. Seriously? I told you that your example was invalid, so you changed your example and said "is not". I don't know how many times I can say "your example was wrong" before you get the idea that I'm talking about ***your example***, and not some ridiculous law that has no point in the discussion. Your original example covered every possible typing conversion in PHP, except that one of them was reversed. That reversal made the entire statement impossible to evaluate true under any circumstances.
Hah, you know you're wrong. Direct quote: &gt; false &amp;&amp; not false &amp;&amp; not false &amp;&amp; not false Again, there is no specific mention of code there. _That_ is what I was going off of. Anything else? I could give a fuck less. Done responding to you regardless as this is so pointless and off-topic so as to be construed as a sad troll attempt by now. Good day.
Someone around in south germany, munich preferably?
Good fun, you get to meet some cool people, watch a presentation (this month it's on Xapian) and then drink beers. I always come away from it learning something new. It's free to attend too.
I'd have to disagree on Models. You could make the argument that each view is unique for your application, but ZF provides template/view technology anyway. The mechanics to provide view functionality are the same across apps, and the mechanics to provide a baseline of functionality for models *should* be provided as well. Some core logic for managing data in a standard model should be provided, but isn't. We then end up with loads of apps that all implement model behaviour completely different from each other, with attendant inefficiencies and potential security problems. 
I'm all for using common code/libraries to build models. But I don't like when a particular approach (usually activerecord) is assumed throughout the framework. Frameworks that are tightly coupled like that break down as soon as your models don't conform to their assumptions. Form-support breaks, view helpers like pagination breaks, etc. I'm not against frameworks including support for the model layer. I don't even mind if other parts of the framework integrate nicely with it. But I want to be able to drop in my own stuff and be able to easily wire it in to the rest of the framework. Maybe I don't have a database, and use some RESTful service as a datastore, for instance. 
LA, close enough :)
Some more PROTIPs: * Constructor doesn't need to return anything. By design, it returns a reference to the created object. * Both of the \_\_set() and \_\_get() methods in Attendee should call the parent method instead of returning null or nothing at all, e.g. parent::\_\_set()
Yeah, LA or somewhere inbetween works for me.
* Yeah, the \_\_construct returning this is kind of a hope for dereferencing. If I were to refactor the \_\_construct it would probably be just to dump an array in with key =&gt; values and then dump it into another public function. e.g.: public function __construct(array $settings = NULL) { if($settings !== NULL) $this-&gt;setData($settings); } public function setData(array $settings = array()) { foreach($this-&gt;settings as $key =&gt; $value) if(array_key_exists($key,$settings)) $this-&gt;settings[$key] = $settings[$key]; return $this; } * As for the \_\_set\\\_\_get, as of right now Attendee doesn't have a parent\abstract class it's extending (edit, so parent::\_\_set is undefined). In practice, Attendee would probably be extending a Person class or equivalent but that's not the case here (since it was something whipped up in about 5 minutes while temporarily escaping from magento at work). If desired they could throw exception for InvalidArgumentException yet figure that would be overkill for something that could be checked outside of the class. No need to toss tries around every "echo $Attendee-&gt;$key;".
I'm in as long as it's not just you and me hanging out. Awkward.
..at.. Atlanta?
 switch (true) { case $failed_a: case $failed_b: case $failed_c: case $failed_d: return false; break; default: return true; break; }
Personally I think they should ban this topic and make a FAQ instead. As long as the FAQ is updated. This topic comes up weekly.
fuck, just 37. Really young. Not to use clichés, but 'fuck cancer' , seriously. 
1) Comments, you're missing yours. 2) Your code doesn't give correct answer if end date is on a weekend. 3) Constructors can take parameters, use them. For example line 8 could be: function __construct($start_date,$end_date) { . . Your code here . } This will save you from doing the explode. 4) You need to comment your calculate function. It takes me a bit to understand what its doing, in six months when you go back to fix this, you're not going to understand it either. 5) If you use parameters, line 30 could be: $hrs = new hours($startDate,$endDate); 6) No need for the closing php tag "?&gt;" on line 33 if all your code is php. I agree with isometriks for just making this a function. [Check out this Stack Overflow question. It's what you want but in a function, and it is well documented.](http://stackoverflow.com/questions/336127/calculate-business-days) edit: corrected a function name.
Or you know, like unit testing...
Who has time to write tests after all that!
Why the hell would you downvote OP for asking a question
the tests come first :-) http://en.wikipedia.org/wiki/Test-driven_development I know this seems like a massive amount of stuffing about to solve a problem but when you start getting serious amounts of code and largish teams working on that code it becomes very important to be able to isolate your code and test each thing independently so you can pick up when breakages occur. It also lets you reuse the exact same license key validator across a stack of different projects with minimal changes.
You can use Ajax to communicate with the server in real-time, and use Javascript to print out to a terminal that tells them what's going on. http://www.tizag.com/ajaxTutorial/ You can make PHP files that analyze the database to see what's going on in the world, like having an attribute of a table with the players in it that lists their current location, like Orgrimmar Auction House. I would keep the fancy stuff server-side for security. Sadly I do not have experience with the type of high performance database like a company like Blizzard would have, I only have worked with MySQL which is more or less better for "regular ass websites." But, it's a learning process, so don't be afraid to get messy. I had a professor once that said new coders often suffer from wanting to over-optimize things, and end up wasting time. Keep it organized, cut the fat later. EDIT: What do you mean by text-based? [Like this?](http://www.homestarrunner.com/dungeonman.html) 
I don't know about you, but my family doesn't know anything about where I have a presence on the Internet (and then I mostly use my real name). Neither do I know where each of them hangs out. Could have taken a while before someone in the family combed through his computers or Google to see who should be contacted.
substitute an icepick for a narwal and ill do it for $20
&gt; It also lets you reuse the exact same license key validator across a stack of different projects with minimal changes. Classic over-engineering. At the time you need a license key validator across multiple products, you refactor it out. If you build everything with this same level of flexibility you end up with exactly what people deride as "Enterprise" software. 
*yawn* http://en.wikipedia.org/wiki/Separation_of_concerns http://en.wikipedia.org/wiki/Single_responsibility_principle Explain to me exactly why the hell your controller or model code should understand how to go about validating a license key? And then explain how you separate out testing the functionality of validation from the rest of your controller/model logic. But whatever, enjoy working the way you do. I will happily continue working on my project with 350,000 unit tests and 150 developers ...
What the hell is going on this week?
The learning curve isn't too steep, it's just different from CI, you'll have an 'eureka' moment when using the active record model soon enough. What's special about Cake is that it comes with a lot of useful features baked into the core/via plugins that you can use such as Authentication, jQuery/Ajax integration, UnitTesting, Flash messages, Breadcrumbs etc. The book is also a great resource: http://book.cakephp.org, I prefer the 1.3 version over the 2.0 one though. I highly recommend hanging out in #cakephp on freenode and asking for help if you need it.
&gt; I prefer the 1.3 version over the 2.0 one though. Any particular reasons?
You'll likely be using 1.3; read the first 3 chapters of http://book.cakephp.org/ and you'll be absolutely fine. I don't see it as complicated at all. If you want complicated, try symfony 2.0. You get to learn all its YAML configuration and namespacing. (Just noting that each framework can have a lot of things to learn to use it well; I'm planning to learn symf2 soon). What exactly is complicated to you? What don't you understand? CakePHP also uses Convention over Configuration principles. If you don't understand the conventions, things may seem confusing. Once you do, they'll be much simpler. I'm not sure how much this can happen with other frameworks also, but I certainly think it's easy for someone to not 'get' cake's approach and develop 'against' it, rather than 'with' it, indeed making the code horrible. Hopefully your project isn't like this. In reference to your last question, I actually think cake has a lot of stuff done for you that other frameworks don't [provided you learn how to use it, first...]. It has a nice community, a good irc channel, a good base of 3rd party plugins at it's bakery, and a really really good documentation approach and complete content in the book. 
As a little test I tried to access the phpmyadmin of the company I used to work for and it works … without any password being asked. Nice.
"Containable", model bindings, trying to add pagination, a really weird way of running queries - all quite overwhelming. 
I'd really suggest reading over the book. All those things are quite straight forward to me. I thought about explaining them in this comment, but the book does it just as well, and more in-depth.
Exceptions are used badly in this. Exceptions are not for stating that a simple, recoverable validation has failed. Exceptions are for stating that the current execution is so broken it can't continue.
If convention over configuration is your thing then of course a configuration based framework will at first not be for you, but the point of using a framework like this is that you have the freedom to do what you like. The developers don't enjoy using cake for the same reason most of us don't like how a lot of Rails works. We like to tell our framework what to do and not follow its rules to the letter, having to turn things off to stop it doing something by default. Now, we are starting to add some optional shortcuts that allow for you to build your own conventions quicker, and having some optional conventions you can use. class Model_Foo extends Model_Crud {} That'll give you read, write, update, delete, etc methods and stop you needed to rewrite common functionality just like you mention, allowing it to work with the DB builder nicely, but by default you would extend Model which assumes nothing. My example demonstrates use of the ORM, which is a totally different tool and of course is coupled with DB interaction as ORM does not work with Twitter API requests. A normal model could do that fine ;-) Validation can be part of the models if you like, we just show it in the controller to make things clear. Errors come out automatically from Fuel-generated forms. The general approach of fuel is to give you a whole bunch of tools to make your custom app development as quick as possible, not hold your hand the whole way as that just gets in the way of building things, but the convention v configuration argument is hard to win for us as people who want shortcuts to their goal will never be swayed.
Head over to the irc channel of freenode (irc.freenode.org #cakephp). Lots of really helpful people there.
I don't know how to access individual visitor's stats like that - i use AW Stats and all i can see is that this page is in our list of referrers, but not many deeper details. 
Cake models work just fine with Twitter API requests. You'd just give them a Twitter-based datasource and off you'd go. If you'd like them to interact with different data, just build a different datasource. The purpose of cake is not to *always* follow its rules to the letter, it's to follow them *when you want to*. You're using a straw argument in that respect to try and make convention over configuration look like some sort of horrible thing in relation to customisability. &gt; and having some optional conventions you can use If conventions weren't optional, they wouldn't be just conventions. That is exactly what cake does. I can't give credence to 'most of us don't like how a lot of Rails works'. That implies that A) most of 'you' (whoever that is) have learn Ruby to a good degree, and B) that you've also learnt RoR to go a good degree. I wouldn't ever presume to say that I knew I wouldn't like how RoR works, without having actually *used* it first to some extent. That's arrogance at its finest. The purpose of Convention over Configuration is *in no way* to hinder customisation of a project. That would just be fucking stupid. It is to hold reasonable defaults *until customisation is needed*. You don't need (and almost always, don't *want*) to write configuration to get a basic site up and running; it just does. When you want it to do something different, you just start overriding defaults *where you need to*.
Downvoted you because you didn't use absolute paths.
Just to clarify I am talking about the book, not cake itself. The 1.3 manual list search results in order of relevance (+ instantly) whereas for some reason book 2.0 orders results in alphabetical order.
Ouch. Good catch.
Some good info here: http://www.pseudocoder.com/free-cakephp-book/
When did 2.0 book came online? It wasn't there last time I checked :D
What do you mean by preferred format? It's a matter off coding style, and as such I'll have to downvote your post.
I appreciate the effort, but we already have the official PHP documentation and the other five thousand tutorials on the subject for this stuff.
One class per file... I would define the namespace at the top of the file and leave it be. So your first option would be suited. If your planning on having multiple namespaces into one file, then use the braces to wrap around the classes for those namespaces.
The PSR-0 autoloader interoperability standard is what you want to follow: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md#readme Example: \Doctrine\Common\IsolatedClassLoader =&gt; /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php One class per file, one namespace per file, don't use the braces, keep the namespace and all the `use` declarations at the top.
http://www.php.net/manual/en/language.namespaces.definitionmultiple.php &gt; It is strongly discouraged as a coding practice to combine multiple namespaces into the same file. 
It's not exclusively a matter of coding style, there are actual structural and interoperability concerns. You also decided to completely disregard Rediquette, and as such, I'll have to downvote your post.
It's been there for a while (you had to manually put 2.0 instead of hte 1.3 in the URL), but they just added the link about a week ago
Oops, I just saw there is a r/phphelp. Sorry, guys. Can I move my post there?
I created a tiny MVC for educational purposes just for people like you. MVC is NOT complicated. Check it out and send me an email or message if you want some more help. https://launchpad.net/phpu-mvc
&gt; there are actual structural and interoperability concerns. Care to give an example? Because the standard you've cited has nothing to do with the style used to mark the start of the a namespace.
Officially came online during the CakeFest conference, first week of September.
"You don't understand something until you think it's obvious" Cake, Drupal, Zend build their frameworks on sound principals and design patterns. If you know these common principals and patterns their work is then seen as simple.
[One example.](http://www.reddit.com/r/PHP/comments/lasci/what_is_the_preferred_format_for_namespaces/c2r5ur7)
Your example has nothing to do with my remark, or even the OPs question. Your example explicitly talks about a discouraged use of namespace jamming in a single file. That is understandable, but, the OP has asked what is more preferred, the curly bracketed version or the other. And *that* is only a coding style based decision.
&gt; Explain to me exactly why the hell your controller or model code should understand how to go about validating a license key? It shouldn't. But this could be one function instead of an interface and 3+ classes. &gt; And then explain how you separate out testing the functionality of validation from the rest of your controller/model logic. A test flag; maybe as a global constant. This is PHP after all, "globals" don't really exist since everything is per-request. &gt; I will happily continue working on my project with 350,000 unit tests and 150 developers ... To write 350,000 tests you might need 150 developers! But honestly, I do understand your point and your design but not all projects can afford to take 2x as long to develop for a debatable increase in robustness. 
Read the link. It states that the non-bracketed syntax is "not recommended for combining namespaces into a single file. Instead it is recommended to use the alternate bracketed syntax." It then discourages even doing that at all. It's just not possible to simultaneously be using the bracketed syntax and be following the recommendations made by the documentation.
You should think about changing your name to "shitfaceddicktard".
That explains it.
Saying "use the braced style when combining multiple namespaces, but don't use multiple namespaces" is not the same as saying "don't use the braced style in a single namespace file".
Yii. Awesome framework, great documentation, helpful community http://www.yiiframework.com/
CodeIgniter has a good community and amazing documentation.
Symfony
I used CodeIgniter, which uses MVC, where I currently work. It takes awhile to learn but once you do get a good grasp for it you can write code much faster than without a good framework.
Some general comments: Your constructor is doing way too much work. Using $_REQUEST, really? Pretty sure this isn't doing what you think it is: foreach ($this-&gt;request as $k =&gt; &amp;$v) { $v = trim(stripslashes(strip_tags($v))); } 
&gt; take some time to get a pulse through the layers of lard You obviously didn't know Tim. It was posted shortly after his funeral: http://gforgegroup.wordpress.com/2011/09/20/goodbye-tim/ Fuck You. 
It sounds to me like a big part of the reason that you're reluctant to apply the MVC pattern here is that you're unfamiliar with it. To be fair, your situation does sound very simple, so who knows. I'd definitely recommend properly familiarising yourself with the pattern at some point though, because eventually you're gonna want to be able to make this sort of call for yourself based on professional experience. Actually, ignoring the word "MVC" for a second, I'd definitely recommend using some template system for your HTML. That doesn't mean you can't use PHP to cycle through the data and output it etc, but getting HTML out into a separate file from the main script (the controller) is one of the first things I'd do in your situation. Also, inb4 half a dozen completely useless my-favourite-framework-is-x recommendations.
Ah, so that was not only a "cleaned up" version, but altered enough so that my comments were actually meant for you, eh? No worries. I have the tendency to be a dick on PHP forums myself on occasion. Shocker, I know. Ok, so my personal opinion is that you should be using $_GET or $_POST (whatever) rather than the generic $_REQUEST. There is no documentation stating how much a constructor can do. You can shoe-horn your entire class functionality in there if you want. But it's not good OOP practice. Getting to the foreach.... What does `$v` represent in the context of the class? Now, if you were using `$this-&gt;$k` as a variable variable to represent class members, I could see it. But you're just reassigning `$v` over and over.
&gt;I've always been taught that using _POST is not good practice It's precisely the opposite, actually: $\_POST is what you should be using (you should really always know what request method you expect to be used on a page), whereas $\_REQUEST is unreliable and generally discouraged.
I don't think MVC is *too* complicated. It just seems like a tool that doesn't fit every problem, you know? But thanks, it looks promising. I'll definitely take a look!
No, the old pages are ancient and adapted to work with IE6 only. They don't validate and are a mess. There's even font tags here and there. My current solution is loosely coupled (if I understand it correctly), and definitely modular. I am trying to make it extensible, which is why I'm asking about MVC here. Any realistic extension of the site will be another simple page that works just like the others though. That's why I think MVC is overkill. A new page with MVC requires a new model, a new controller and a new view, and then putting it all together. A new page in the simpler page-based structure is just a page. It feels like MVC is dynamite where a gentle push is needed.
Judging what framework is good is a nightmare. Ask 10 developers and you'll get 11 favorites. CI seems easy though. It might be good to start with.
If the visitor is using an vulnerable browser - there sure is. There were a lot of attack on Windows in the past using doctored JPEG files. There is no way to protect against those kind of attacks other than using a virus scaner. But there hadn't been any such atacks in long time so I wouldn't worry that much.
$_REQUEST is not unreliable. It does exactly what the documentation says it does. It is sometimes not recommended because a POST or COOKIE can be overridden by GET possibly making for confusing results. The idea that $_REQUEST is somehow bad is stupid. As long as you treat it as hostile user input and do proper validation it's fine.
Oh I will definitely learn MVC, but there's so much to learn and I want to do it all. For me juggling and displaying data from a database was the main big problem that an ORM solved really neatly, which is why I went for that first. I'm not sure MVC is the next best step, but it is on the list. But just as I wouldn't deploy a whole ORM just to read a single value from a database, I think MVC might be too much for a simple site like the one I'm doing now. If I understand templates correctly, I am almost using them now. Some recurring parts of the pages would likely count as templates. It's just that when everything isn't some hugely complex web app I like the to keep everything neatly together in one file. Figuring out what framework to learn first is going to be tough. Like I wrote above, ask 10 developers and you get 11 answers.
I expect this to improve rapidly, too. There's a lot of excitement around 2.0.
...why is this being downvoted? The guy just wants help. Or is it because it's not in /r/phphelp?
Your answer satisfies what OP asked for. PSR-0 however is not a factual standard. That's just a declaration chosen to legitimize a naming scheme post-factum. Not everyone is in agreement that PHPs ugly namespace syntax warrants simulating established Java conventions under the presumption that would make everything more enterprisey.
A big concern with file uploads is making sure that what you allow them to upload really is an image. Some issues that have come up before are when people upload files like "test.jpg.php" and the script allows it to upload (since they probably use "strpos" to check the ".jpg" extension). Using "pathinfo" is better for that. If you don't have it already, check that extensions are validated before moving them because then people can upload PHP scripts and compromise your website. Other than that, I don't know much about virus attacks through PHP scripts other than having security holes that you missed when writing the code. I could be wrong but that's my two cents.
What are you trying to achieve? I see that this script is basically a slightly different version of [this](http://jemturner.co.uk/wp-content/uploads/2010/11/mail_form_v2.2.txt). I have to admit that it's not a very good script. Both in terms of how well it's written and also the ethos it is written with; $exploits = array("content-type", "bcc:", "cc:", "document.cookie", "onclick", "onload", "javascript"); foreach ($exploits as $exploit) if (strpos($_POST['comments'], $exploit) !== false) $points += 2; By even entertaining the notion that more than a single "exploit" is acceptable is setting off major red flags for me (not that this filtering is achieving much anyway). If I knew more about what it is that you are trying to achieve I may be able to point you in a better direction. Are there any features of this script that you feel that you need, or are you simply looking for a script to take form data and e-mail it? Looking at your comment history it seems that you are a novice developer. Unfortunately there is a massive amount of really poor quality PHP code on the internet and as a novice it is all to easy to fall into the trap of implementing some of this terrible code. I would advise against implementing anything from random folks websites/blogs and instead look to more credible sources such as established frameworks and open source applications while you are still learning.
I do all my coding in PHP and I have posted in this sub reddit before. I figured there would be people here that could offer some insight into this question. r/whitehat no longer exists and I didn't feel r/programming was the right place for this question. Let me rephrase my original question. If there was somehow a picture that had a virus attached to it, when a user requests the webpage which in turn display's the picture through the users web browser, could that at all compromise the webserver? Or is the file never executed on the server, only served to whoever requested it?
If you maintain the original file name and fail to properly validate the extension, an attacker could upload a malicious (PHP, etc.) file and execute it on your server. The type should be validated using something like end(explode('.', $name)) -- $_FILES["file"]["type"] can easily be faked. You'll also want to strip slashes from the file name to prevent directory traversal and escape it on output. Other than that, it should be safe (unless you have an LFI somewhere).
[edit] - This is more about nginx than it is PHP, but it's worth knowing. There are two ways I know for people to embed PHP into images. 1. They can put PHP into the image comment or ... 2. They can create a fake image with just the header followed by the PHP. The way to stop this is to not allow your web server to process those images as PHP. So if you had a regex match location like this in nginx: location ~ \.*php$ { // Process PHP files. } Then that'd be vulnerable because a user could append `.php` to the end of your image: http://example.com/avatars/user001.jpg.php and PHP would execute any code inside. There was a discussion about this on the Nginx mailing list a while ago: http://forum.nginx.org/read.php?2,88845,88996 Other things to look at would be: * Size restrictions at the server (Apache &amp; Nginx), PHP and code level. * PHPs max_uploads (might be named differently), should be as low as possible.
i just got a newere script a little simpler, i think that was too much for me right now. But thanks, i do see what you mean
Second that. Also some amazing development going on lately.
5 comments and 3 different frameworks suggested, love it!.
I agree. very easy and simple to get started. I would also upgrade the community to great. lots and lots of contributed libraries and helper scripts.
$\_REQUEST is unreliable, by design, as its contents depend on the [request_order](http://au2.php.net/manual/en/ini.core.php#ini.request-order) and [variables_order](http://au2.php.net/manual/en/ini.core.php#ini.variables-order) configuration settings. It's quite possible to disable $\_REQUEST being populated with GET and/or POST variables. I just don't think there's ever a good reason to use it. If you want a single array with GET and POST values in there (and it's usually a sign something's gone wrong with your design), then create one with something like `array_merge($_GET, $_POST)` or `$_GET + $_POST`, depending on your needs, but don't rely on $\_REQUEST at all.
TIL about namespaces. Just started PHP OOP a few months ago. Thanks.
Open the image with imagemagick or gd and then save it to disk.
CodeIgniter is great. A neat side-project/"addon" to be checked out would be Bonfire, its built on top of CodeIgniter.
&gt; Or is the file never executed on the server, only served to whoever requested it? Depending on how you wrote your upload and file handling class/functions, you should never execute anything a user gives you. If you need to run it through GD (and by extension, libjpeg, libpng, libtiff etc.) and those libraries have known vulnerabilities (somewhat common on non-up-to-date versions), your server could be compromised. Just make sure your server is running current versions of all programs and libraries you will be needing (or make sure you're hosted on a server run by a competent hosting company, for more than just this reason). But generally, if you want to let a user upload a jpeg or png as an avatar or whatever, and you do not do any processing to it, all you need to do is make sure that the file is an actual png/jpeg/gif/whatever before you move it to the directory you serve it from (ex: /var/www/mysite.com/images/user_avatars/ ). Validate based on filename extension and MIME type, and never allow your application to `chmod +x` or `chmod 777` the file, as images are documents, and documents **should never be executable**.
Nice class but I just have one question. Why do they have to be saved in the session? All of the frameworks I've used set the breadcrumbs in the view.
Thirded.
Because "halp, it doesn't work!" is generally considered impossible to diagnose. This is a better way to ask the same question, and provides plenty of detail to anyone willing to spend a few minutes to volunteer a solution to fix somebody else's problem: "Help, I am trying to do X, and it doesn't seem to work. I've been working on this problem for 2 days and seem to not be getting anywhere. I've tried to do Y and Z as well, but I receive the same error messages. Here is my serverlog, and these are the error messages I keep on getting when running this script."
I'm a Linux Sys Admin, so I have a real world example for you. But as a preface, let me say this is a common way to exploit a server (second most common in my experience is weak password attacks against email accounts or shell users). Image Galleries are a common target for exploits. What usually happens is they upload the exploit using your php form, which then gets executed to abuse your server. Now, for the real world example. I have a file I downloaded from an infected server for forensics. The attacker named this file star.jpg and was able to successfully upload this to a server. star.jpg is actually a compressed gzip file. In Linux shell, you can use the file utility to get file information: &gt;$shell&gt; file star.jpg &gt;star.jpg: gzip compressed data, from Unix, last modified: Sun Jun 5 09:24:16 2011 My antivirus found a file named fix.c which it identified as such: &gt; C:\MyHacks\star.jpg\star\fix.c Perl/Shellbot (Trojan) As you can see the antivirus is showing the directory structure inside of "star.jpg". Alot of these hackers get by because a simple mime-type check is not done. Sometimes they upload a shell script, gzip, .php script... I'm not a PHP security expert by any means, but alot of these exploits would be stopped with a mime-type check.
Zend!
Because you have to, somehow, keep record of where the user as been. Since PHP has a runtime per request even if you add a breadcrumb in one runtime in the next one the previous "crumbs" will not be there. That's why I opted for putting it in sessions, this way you only have to add: \Breadcrumb::add_crumb("Set User" , "users/set"); in your Controller method or View. Or maybe I'm a dumbass and there's a much easier way to do this that I'm not seeing. 
noir_lord has a fantastic community and outstanding documentation
It's only a couple of years ago a buffer overflow problem was found in a popular jpeg library for windows, literally allowing attacks execute code while a user was just looking at an image. The best way to avoid it is to 'convert' it on the server using php's image libraries. That's a pretty good guarantee I'd say.
If you are using ORM, you are already essentially creating models. The "O" is the object/model. Controllers are essentially just the "short PHP snippet on the top" and views are just "the clean html below with simple PHP here and there to cycle through data and print it". You are, by and large, using the idea of MVC already - you just aren't using a framework and you aren't separating the stuff into separate files. I suggest you use a MVC based framework. Why? 1. When the next developer needs to get hired down the road, the company can ask for a CodeIgniter or Kohana or Whatever developer. They will be able to easily pick up the codebase and run with it. 2. Having a framework is nice for some other things, as well. What about a nice routing class to give you http://example.com/employee/view urls, for instance? Form validation? 3. Using a framework tends to make everything nice and consistent, on the whole, and I have no doubt you could pick up CodeIgniter to the degree you need in a couple hours/maybe a day.
You can use google trends to see which frameworks are more popular or see the trends..but I would guess cakephp
CakePHP hasn't been mentioned yet. It's a great framework, even though I prefer CodeIgniter.
having been part of defining PSR-0, I agree it's not a formal standard. However, the intent has always been to make a lot of different codebases easier to integrate and I believe it has succeeded in that. Many new projects and new versions of existing projects now stick to it. 
Seriously? You change the crumbs on a page depending on how a user got to the page? I have always understood the pattern to be a representation of hierarchy of categories, ie "Home &gt; Food &gt; Dairy &gt; Cheese &gt; Tasty Cheese" I'd be totally confused if the path I happen to take "Wine &gt; Beer &gt; Wine &gt; Crackers &gt; Condoms &gt; Cheese" was in the breadcrumbs. 
Wow, this is awesome, how did in not know about this before!? 
A) Check the extension B) Check the mime type, use a check to see if the data looks like the beginning of an image C) Save it using your own name, programmatically serve it as the desired name
Well my implementation is different, it's works more like a tracker where you have been, maybe more aimed to web applications then "standart" website. This is how it works for eg in a backoffice: 1) User Action: http://example.com/bo/dashboard BreadCrumb: \Breadcrumb::add_crumb("Dashboard , "bo/dashboard", true); BreadCrumb Links: Dashboard 2) User Action: http://example.com/bo/users/set BreadCrumb: \Breadcrumb::add_crumb("Set User", "bo/users/set"); BreadCrumb Links: [Dashboard](http://example.com) / Set User 3) User Action: http://example.com/bo/users/view/12 BreadCrumb: \Breadcrumb::add_crumb("View User 12", "bo/view/view/12"); BreadCrumb Links: [Dashboard](http://example.com) / [Set User 12](http://example.com) / View User 12 4) User Action: http://example.com/bo/system/configs BreadCrumb: \Breadcrumb::add_crumb("System Configs", "bo/system/configs"); BreadCrumb Links: [Dashboard](http://example.com) / [Set User 12](http://example.com) / [View User 12](http://example.com) / System Configs etc.... If the user decides to go back to for *Set User* the breadcrumb will "rewind" and be like this: BreadCrumb Links: Dashboard / [Set User](http://example.com) ------------------------------------------------------------------- I prefer this way of breadcrumb instead of the "hardcoded" ones, it's also easier to code, you just have to invoke the *add_crumb* method. 
I've heard of using the getimagesize() function to see if the file really is an image in PHP. It will return a valid result if it is an image, false otherwise. Couple that with an extension check (using pathinfo) and a MIME type check (although that can be spoofed) and you should be good.
MVC is a way of structuring applications that's known to work well, especially for the web. There are a few others.
Also, directory transversal can be a problem Oh, and I might sound like a newb here but I vaguely remember something called a gifar attack that would embed a java .jar file into a .gif and allow the attacker to do a kind of XSS attack if a victim ever stumbled upon their site. Not sure if that's still a relevant vector though...
I really love the organisation of [Cake's Book](http://book.cakephp.org/). There's hardly a question about Cake you can't answer by looking at one of it's pages. I'm pretty sure most of the frameworks all have awesome communities hanging out on FreeNode's [IRC](http://webchat.freenode.net/).
Kind of sad that it's [security](http://codeigniter.com/user_guide/general/security.html) documentation doesn't include anything about CSRF.
It's new as far as I know, but it really is speeding up the development of a site I am working on. The HMVC addon makes everything a lot cleaner.
judging by the [community's reaction to this framework](http://www.reddit.com/r/PHP/comments/ix1na/phpuniversitys_mvc_a_concise_model_view/) , you probably want to look for something more well-known and battle-tested like kohana or code igniter. seriously. as far as MVC is concerned, you're probably already doing it. how many 'scripts' do you have that look like this?: if (/* form is submitted */) { // sanitize form data if (/* form data is valid */) { // save something to database and redirect } else { // set a validation error, to be displayed // display form again } } else { // display form } .. this is what you call a controller action . Rather than having multiple files for add, update, delete, and list eg (bla_add.php , bla_update.php, bla_delete.php, bla_list.php) , you have one object/class with separate 'actions' eg class BlaController { public function addAction() { .. } public funciton updateAction() { .. } public function deleteAction() { .. } public function listAction() { .. } } .. so it is practically the same thing, MVC is just more standardized, and testable. You're better off using a framework that has been unit-tested by thousands of people.
The CakePHP community is awesome, but the formal docs kind of suck. CodeIgniter has some very welldone docs
Codeigniter has far wider community and great documentation. Although it seems rather ~~friezed~~ frozen in time. Lately I've been using http://fuelphp.com the community is also great and growing, irc channel is very welcoming and helpful the documentation is good.
Not Cake. It's a good framework, but the official documentation needs some serious work before it will be really useful. The docs do a poor job explaining the best way to use Cake, and it's got way too many features for a new user to sort through. Nothing is there to teach best practices, or even warn new users away from really bad ones. The Cake support network is pretty big, but that can be a hindrance. There's not a huge user base, so a lot more questions get asked than answered. There's so many places to search for answers that it can be hard to find them. The user community is divided into three parts: helpful and friendly, helpless and friendly, and sneering and arrogant. In the google group, simple questions from beginners are frequent because of the poor intro docs. When you ask them, you are just as likely to get snide replies telling you to RTFM as a helpful answer. It's a great framework with a lot of potential, but I'm hesitant to put all my chips behind it yet.
I kind of hate the organization of Cake's Book. Finding the right way to do something can involve a pretty extensive hunt for the correct info, and lots of very important and powerful aspects of the framework have horribly minimal documentation.
There's also two pretty good books out now, Agile web application development with Yii and the new Yii Application Development Cookbook.
You and my most recent client both have a very strange understanding of how breadcrumbs work. Perhaps I should put you two in touch.
I still don't understand what they are very well. Could you either give me a 30 seconds explanation like I was a 5 year old, or direct me to some material? I'd much appreciate it : )
Makes perfect sense to me. Plus, you can search the hell out of it. Have any specific examples?
Well in his defense breadcrumbs works just like you wanted then to work. For backoffice I prefer them this way, maybe breadcrumb per say is not the most accurate definition maybe trackingcrumb is better? Here's a pic of how it looks like: http://i.imgur.com/I8uAg.png 
Think of it as categorising, for code files. There might be tonnes of different projects that have a class called `Media`. If you tried to use those projects together, normally they'd clash because of the name collision, until you did some workarounds / hacks / whatever. NameSpaces allow you to make a class named `Media`, but also say that it's under the namespace `MyProject`. It's *full name* would be `MyProject\Media`, which is far less likely to clash than just `Media` by itself. That way when you combine the projects, you can fully specify that you want `MyProject\Media` to avoid naming collisions. In PHP it's also useful as a file autoloading tool, rather than manual includes. Go read http://php.net/manual/en/language.namespaces.php
explanation AND source, I do thank you a ton
[Here's an article](http://www.time.com/time/magazine/article/0,9171,751374,00.html) about a frieze, in Time.
(re)developing this app in an established MVC framework, or even just following MVC principles adopted from other projects, *will* help *you*, and may help the project as well. You'll get better at understanding how to take think more abstractly. Given that it's a simple project (based on what you said) it's probably a great time to learn these concepts and apply them to the project. You'll be setting up the project to be more easily maintained and understood by a wider variety of people later on. You'll be setting up the project to be much more easily extended or reused in the future. "It's mostly a way to present and interact with another system". In a smartly architected system, adding things like logging, monitoring, etc. become generally pretty easy. In a 'page-based content-oriented' PHP app, adding any new feature becomes much more time consuming. You'll make the app easier to test, because the pieces will be separated out in to various concerns. You may argue that none of these are *necessary*, and they may not be for the project at hand, but they probably are necessary skills for you as a developer to get a stronger handle on, and this sounds like a great learning project for you. I had a project back in 2001 that we'd developed in an MVC-oriented approach. Client wanted 'mobile' version of the site - something that could work on small laptop screens and possibly WAP. The logic for all of that was able to be injected in an earlier part of the request cycle, modifying the view/template handler appropriately to use different output techniques (different surrounding layouts, different styles, possibly different content-types as needed, etc). *no* logic had to change in the core controllers or models, and the existing views didn't need to be touched. All that code that was already tested and working remained untouched. That was my first large project, and we'd just finished porting it from 'classic ASP' spaghetti style code (which was my own) to PHP, and I'd been working on MVC-style structure in PHP4. The architectural benefits were enormous compared to the earlier ASP, and also my earlier PHP-spaghetti-style. It may seem like 'more work' and 'overkill' up front, but any project larger than 3-4 files will benefit greatly over the long haul from solid structure, and web-MVC-inspired organization works, is pretty well understood, and will make you a better developer.
I've used noir_lord for the past 4 projects. However, it's getting a bit stale. Next one we are looking at having the team migrate over to execrator (but I think it requires PHP 5.3).
http://en.wikipedia.org/wiki/Factory_method_pattern "new SomeClass(param)" is going to give you a someclass "SomeClass.getInstance(param)" can secretly return a subclass with a different implementation. Perhaps the parameter you pass in will allow the getInstance call to choose one optimized implementation over another. At the very least, it lets you change your mind about it in the future. You see this sort of thing a lot with library code, where the programmer has to be able to make changes that don't require clients to alter their code.
Its form helper will do csrf protection for you
Actually, I think the Symfony documentation is maddingly sparse.
I've had a tough time with CI. Any good third party documentation? I like it so far .
I tried gaoshan but the documentation was all in Japanese.
I've only read a few chapters of each book so far so I can't really say. Sorry, you might get the information you seek by reading the Amazon book reviews. If you'd like to review them you can subscribe to the Packt Publishing library for like $20/month and have instant access to every one of their books, including these, and for every month you're subscribed you can download a free pdf/mobile version of any book as well.
can you also include solid support for oracle,sql server, and postgres - CI database drivers are focused on mysql and would require serious rewrite to function the same on all databases from sqllite to mongo etc.
This is from the very awesome PHP Objects, Patterns and Practice by Matt Zandstra: abstract class ParamHandler { protected $source; protected $params = array(); function __construct( $source ) { $this-&gt;source = $source; } function addParam( $key, $val ) { $this-&gt;params[$key] = $val; } function getAllParams() { return $this-&gt;params; } static function getInstance( $filename ) { if ( preg_match( "/\.xml$/i", $filename )) { return new XmlParamHandler( $filename ); } return new TextParamHandler( $filename ); } abstract function write(); abstract function read(); } ---------------------------------------------------- class XmlParamHandler extends ParamHandler { function write() { // write XML // using $this-&gt;params } function read() { // read XML // and populate $this-&gt;params } } ---------------------------------------------------- class TextParamHandler extends ParamHandler { function write() { // write text // using $this-&gt;params } function read() { // read text // and populate $this-&gt;params } } So, here what is happening is that you want to allow a user to open a file, and read/write to it. A file can be either an XML or txt file. You could create two different classes and force a user to choose which class to use. This would work just fine, but then you'd end up with some code duplication. Also, if you wanted to add any features, you'd have to make sure to update both classes. Soon they'd be out of sync with each other. So, what you can do, is do as above: have one parent method that gets called, and depending on the filename's extension, it returns the proper class. All this is done transparently, with the user not knowing how it works, but trusting that it will work. This is called polymorphism. $test = ParamHandler::getInstance( "./params.xml" ); $test-&gt;addParam("key1", "val1" ); $test-&gt;addParam("key2", "val2" ); $test-&gt;addParam("key3", "val3" ); $test-&gt;write(); // writing in XML format We can also read from either file format: $test = ParamHandler::getInstance( "./params.txt" ); $test-&gt;read(); // reading in text format You can see from this code that the user instantiates the class the same way, but the work is being done without bothering him/her. I highly recommend picking up this book and reading it through and through, you'll love it. Edit: Just to make it clear, I'll walk through it with you. $test = ParamHandler::getInstance( "./params.xml" ); This calls a static method whose only job is to decide what type of file you want to work with. It then returns the correct class, which extends ParamHandler, except this time it instantiates it with the construct. Everything else is self explanatory!
Symfony2 is a wonderful beast, but the documentation kinda sucks. It's a tutorial, more so than actual documentation. What would make it better, in my opinion, is actual reference docs, such as creating custom roles, app/console reference, and top down PHP reference for things like AppKernel.
Is this a jab at CodeIgniter, and if so, what are your thoughts? I'm honestly curious... not trying to start an argument.
I just got started with CI as well (actually any MVC for that matter) but [this tutorial](http://ie.mirror.twsweb-int.com/codeigniter/user_guide/tutorial/index.html) kind of got me going. I know it isn't documentation like you were looking for but it does help to set something working up for you so you can experiment with it. I personally learn best through experimentation so this was a lifesaver for me. 
It also makes caching easier.
You can chain other methods off the factory method. You can't chain when using new.
In the PHP world you can't immediately reference methods on an object instance when you're using the new keyword. So for example: $bar = new SomeClass()-&gt;foo(); Will trigger a compile error in PHP. However the following is valid: $bar = SomeClass::getInstance()-&gt;foo(); In pretty much most every other OOP language you can do *both* of the above samples so seeing a static method to generate an instance 99% of the time indicates a Factory pattern as Yare_Owns describes. However, in the PHP world if you see the example you've given with a still-public constructor and `getInstance()` doing nothing but a `new self($same, $params, $as, $constructor);`, it's not the factory pattern, it's a workaround for a one-liner. Just to note I'm taking your example literally. Likely in the SwiftMailer project the example of which you speak are mostly likely true Factory methods use to generate instances of arbitrary subclasses through a common interface (great for extensibility and plugins).
I assume this is a PHP-specific benefit to Factories?
Chinese! Argh... I... I... 你为什么觉得我的文档是日本!? ;)
Because people can't tell Chinese from Japanese most of the time if they are not Asians.
Here is a decent write up to demonstrate how CI defends against it. http://www.beheist.com/index.php/en/blog/csrf-protection-in-codeigniter-2-0-a-closer-look I was even able to find this using Bing as my search provider :)
From looking at the SwiftMailer code, I suspect the authors are at least partly enamored of the ability to chain methods using a static method that returns a new instance. There's a lot of stuff like class Swift_Attachment extends Swift_Mime_Attachment { public function __construct($data = null, $filename = null, $contentType = null) { [...] } public static function newInstance($data = null, $filename = null, $contentType = null) { return new self($data, $filename, $contentType); } public static function fromPath($path, $contentType = null) { return self::newInstance()-&gt;setFile( new Swift_ByteStream_FileByteStream($path), $contentType ); } } PHP doesn't do return new SwiftAttachment()-&gt;setFile( new Swift_ByteStream_FileByteStream($path), $contentType ); I don't know what to think about this. I had a co-worker who used to use static `newInstance` methods to conceal his use of singletons. Whenever I saw `foobar::newInstance()` I knew it was really `foobar::getInstance()`. The factory-type use in the Zandstra book (best PHP-specific book I've read) is definitely valid.
The one that drove me up a wall to find my first time was the redirect function. The book describes it as "The flow control method you’ll use most often," yet it's section 3.5.4.2.1 which is buried pretty damn deep. When I was first trying to do this, I didn't know what the function was called, so I didn't know what terms to search on. The sample blog app doesn't use it at all. It took way too much time to find out that bit of information. Another example: I want to figure out how to access the $_POST variables submitted via a form. A search "post variables" or "$_POST" turns up no hits in the book. The search for "post data" turns up 21 hits, but the one that describes the $_POST variable access ($this-&gt;params['form']) is fifteenth down in the list.
I think what ExistentialEnso meant was that by using ::GetInstance type calls you gain the ability to do many things - return different objects - XMLThing vs TextThing vs JSONThing - return an existing instance of an object instead of hitting the db or creating a new object - limit total instances to 1 or X, limit 1 instance of each "SELECT * FROM table WHERE id = Y" row to one in memory object. - call a function on the returning object - Thing::GetInstance($param)-&gt;doVerb(); 
Try typing "php app/console" in the console all by itself... It prints a sweet little reference
So far as AppKernel, the internals chapter of the book has some stuff too
I don't like PSR-0, and I will not use it. It just makes everything less flexible with little gain. It's a restricting "standard" proposal. There is no one size fits all, and PSR-0 clearly is not either.
Is it because that's what you'll end up in using Zend?
One thing: MVC doesn't mean framework. You can be using the MVC pattern without using a framework. If your model is encapsulated in your ORM and maybe some other classes, and your view is in your templates and other classes, then the code in the public-facing scripts is your controllers and you're pretty much MVC anyway.
Ooh, Bonfire looks pretty interesting! I'm using Kohana at the moment (switch from CodeIgniter quite a while ago), but might have to try out CodeIgniter again.
A simple search will get you of 'redirect' almost instantly: http://book.cakephp.org/revisions/search/redirect it's the fourth result. If you'd read through the initial chapters of the book, or fully through the blog tutorial, to fully get an idea for the framework, you'd know that accessing user input through `$params` is usually not the right thing to do, and skips most of the framework's helping functionality. What you want to use is the controller's `$data` property. If associated with a model, you can simply call `$this-&gt;ModelName-&gt;save($this-&gt;data);` in one fell swoop to save the data from your form. This can be found as the very first result of searching 'post data': http://book.cakephp.org/revisions/search/post%20data I'd say you hadn't read nearly enough about the framework to have a good enough understanding of it and be able to ascertain its strengths and weaknesses, but rather you made a cursory glance through the book and decided you hadn't been able to learn it, and that was satisfactory for your appraisal.
I see. I covered your first bullet in my post. As for the second bullet, correct API design would dictate that a function called "newInstance" (in his example) should return a new instance, and not a cached value. "getInstance" on the other hand could return a cached value.
This design pattern is much older than PHP.
Interesting. If it's common practice to use a factory method just so you can reference the new object on the same line, does that indicate that PHP code commonly employs the builder pattern?
I can write a ton of nasty evil PHP in a smaller file than a 16x16 gif, how does making the size of the file low save you? Open it with gd or imagemagick and save it during the upload form processing.
The first Yii book is pretty poor, the second one by Alexander Marakov is much better
Why the upvotes &amp;#3232;\_&amp;#3232; He didn't ask how to manage namespace in PHP. He asked which of the two syntax is preferred. (And as far as i can say, it's personal, as long as you are consistent - it's at the same level as putting curly brackets at the end of the line or on a new line) 
The ones that glow in the dark....Japanese.
I'd dare say that's not a class. It's just a namespace for functions.
is this a troll? the answer is literally everything. gaping sqli holes. php4 style classes variable variables class methods don't take sensible parameters, rely on $_POST methods that return "sucess" (sic) or "false" rather than true/false "retrieve" can only select 1 user at a time, but it iterates over "all" of the results and returns an array of users. mysql not mysqli or pdo unhelpful, nonstandard comments broken indentation
&gt; $test = ParamHandler::getInstance( "./params.xml" ); &gt; $test-&gt;addParam("key1", "val1" ); &gt; $test-&gt;addParam("key2", "val2" ); &gt; $test-&gt;addParam("key3", "val3" ); &gt; $test-&gt;write(); // writing in XML format Can also be written as: $test = ParamHandler::getInstance( "./params.xml" ) -&gt;addParam("key1", "val1" ); -&gt;addParam("key2", "val2" ); -&gt;addParam("key3", "val3" ); -&gt;write(); // writing in XML format *if* you `return $this;` from the methods in question!
This is how I approached it recently. I wrote a lists helper for lithium: https://github.com/rich97/li3_lists/blob/master/extensions/helper/Lists.php In Lithium, views are rendered first, then elements, then the layout. This allows you to use magic methods to set properties of the view object which will then be available to the main layout and the rendered elements. So here are a couple of view examples: li3_admin/views/staffs/index.html.php: $this-&gt;title('Accounts'); $this-&gt;description('Manage CMS Accounts.'); li3_admin/views/staffs/edit.html.php: $this-&gt;title('Accounts'); $this-&gt;description("Editing {$accounts-&gt;username}'s account."); $this-&gt;lists-&gt;crumbs("Editing: {$account-&gt;username}"); My layout: (fictional example) li3_admin/views/layouts/default.html.php: &lt;h1&gt;&lt;?= $this-&gt;title(); ?&gt;&lt;/h1&gt; &lt;p&gt;&lt;?= $this-&gt;description(); ?&gt;&lt;/p&gt; &lt;?php $root_crumb = $this-&gt;title(); if ($this-&gt;lists-&gt;crumbs()) { $root_crumb = array( $this-&gt;title() =&gt; array('action' =&gt; 'index') ); } $options = array( 'ul' =&gt; array('id' =&gt; 'crumbs', 'class' =&gt; 'clearfix'), 'append' =&gt; 'prepend' ); ?&gt; &lt;?= $this-&gt;lists-&gt;crumbs($root_crumb, $options); ?&gt; &lt;!-- This prepends a link to the root of the breadcrumb trail on every page. Note: [See Lithium's FAQ on "&lt;?= =&gt;".](http://lithify.me/docs/manual/appendices) --&gt; Output for GET /admin/staffs: &lt;ul id="crumbs" class="clearfix"&gt; &lt;li&gt;Accounts&lt;/li&gt; &lt;/ul&gt; Output for GET /admin/staffs/edit: &lt;ul id="crumbs" class="clearfix"&gt; &lt;li&gt;&lt;a href="/admin/staffs/edit"&gt;Accounts&lt;/a&gt; &lt;li&gt;Editing: rich97&lt;/li&gt; &lt;/ul&gt; Of course, I could prepend a root node in the layout that links to "/admin", but you get the idea. So yeah, this is how I do breadcrumbs, they should lead you back to the home page in case you get lost, that is their original intent. To me, this class looks more equivalent to a file or web browsers back button.
Just a nitpick — you forgot to remove the semi colons from the chained lines.
Yeah this is why PHP gets a bad rep. Although the guy's English is terrible so I dunno ifany people would trust that code anyway.
That's true about the "tutorial feeling" of the book but I find that between the book, the cookbook and the api reference you can usually find what you're looking for. What I find more annoying is the forum (or the mailing list). Good luck with getting an answer to your question there ! Where is this huge community that Symfony2 is supposed to have ?
Well it's optional to use of course. Many do, and me and many others tend to only go for libraries that I can drop in a 'library/' directory and just work with a default autoloader. I don't know if you heard of the 'Zeta components'. Used to be Ez components. I have an incredible hard time navigating their codebase. But yea, not saying your wrong or I'm right or anything, just wanted to give you my motivation for using it.
Connecting to db with root (in a users class?!);
Yep, it's a masterclass in doing absolutely everything wrong that's possible to do wrong. WTF. This guy needs to take this article down.
My favourite part is how he sets out some goals at the start of the article: &gt; Hi friends, In this post i would like to explain about how to implementing object oriented programming in php, How to create class, and how to call the method of that class. Then he forgets about them completely and instead just pastes in a class so badly written that I'm a little annoyed that he's promoting it online to be "helpful for who is newbie of php classes".
I particularly enjoy the comments at the end of the article: Nice programming..! I'm putting Pardeep Beniwal on the do not hire list
&gt; variable variables Just realised what he's doing there. He's implemented his own little version of extract(): foreach($_POST as $key=&gt;$value) { $$key=$value; }
upsy! fixed thanks.
I rewrote the example with PHP5 OOP in mind and some basic security practices: http://pastebin.com/cQv4QaML (updated): http://pastebin.com/S7P71wDL It's by no means perfect, but it's definitely a good start on a database model.
This guy knows his shit, check out this one: http://www.anil2u.info/2011/07/simple-steps-to-build-a-custom-cms-application-using/ $query = "INSERT INTO CMS (title,meta_keywords,meta_description,content,created_by,created_dae,status) VALUES ('".addslashes($_POST['title'])."', '".addslashes($_POST['meta_keywords'])."', '".addslashes($_POST['meta_description'])."', '".addslashes($_POST['content'])."', '".$_SESSION['user_id']."', now(), 1 )"; $result = mysql_query($query);
I also just realized I derped and put $(underscore)db instead of $this-&gt;(underscore)db everywhere.
I'm glad for him that he's using Wordpress and not his custom CMS.
We had an issue with this for the company I used to work for. The best solution that I came up with was making the folder with uploaded images to be made off limits to the PHP interpreter.
except he's messed that up too, try commenting on his blog post, type in a field, go to the next field, go back to your previous field, bam text gone.
The MIME type is a user-supplied header. It's no safer than relying on a cookie or GET data.
Hum? No it's a class, it's not an Object though.
That one made me chuckle the most. While I've seen such code before, the way he loses focus on his goals between the code section is just astonishing. I think he actually didn't knew how to explain the concepts.
I answered his question, and added extra information. And while the braces/no-braces question is a matter of style, using braces around namespaces is strongly advised against. You can't, or shouldn't, develop in a vacuum.
Generally I prefer PHP extensions. I also tend to write my code with procedural and functional styles. I rarely need to revert to writing OOP style (although I understand it very well). There are use cases for OOP, but usually PHP acts as a glue, at least for me. I'm still using namespaces to organize my functions, and function builder functions. If I need state in my function I just declare variable as static inside function. For my use I rarely need autoload, as it doesn't help to load namespaced functions. Why I don't prefer OOP that much? The main reason is that with procedural and functional style I can archive the same with OOP with less code, and in a more straightforward way. Sometimes thought OOP does things better, but it's a rare case. I wish PHP develops more to hybrid language and less to the enterprise Java or .NET clone. I can use Java and .NET if I want that kind of environment. PHP is more hacker friendly language, and it doesn't need to be enterprise level. PSR-0 feels a lot like these enterprise systems. If you have good enough components, please translate them to PHP extensions.
This is just unforgivable. I wrote a comment, and it's awaiting moderation. No wonder the 500+ comments about this being the most retarted and unsecure code will never show up there. And since June 6, only 2 people wrote something good about it. It's sad that every Indian guy with no knowledge is making a site with tutorials :(
I'd probably still side with the poster, in that, in his view, it doesn't provide documentation that works for him. Bigger picture is that no one doc style works for everyone - people need to find projects that work for the way they think and learn. As good as Cake's may be for you, it doesn't fit uglor's style. Many people love Rails, and think it's the bee's knees. I found it to be rather difficult to find out how to do certain things in it - searching around found contradictory advice, things that didn't work with my version, etc. But there are many who will argue up and down that Rails has an awesome community and loads of great documentation. I can still see where uglor's coming from. The 'book' has 'common tasks with cakephp' as a section, but nothing on 'redirect' in it. Redirecting a web app is far more common than 'localization', but i18n is there as a 'common task', whereas 'redirecting' is buried in 'core'. To each his own.
I was doing that in 2000 and loved it at the time - I felt it saved me some keystrokes over $HTTP_POST_VARS['name'] access. Then I learned about extract(). And the extract() flags to allow/deny overwriting, and prefixing. If you have to extract stuff, extract() is far more useful than this technique.
1999 called, they want their users class back
What if you want to guarantee that your code only uses one instance of a particular class? [http://en.wikipedia.org/wiki/Singleton_pattern](http://en.wikipedia.org/wiki/Singleton_pattern)
It's a huge community of people that already know everything, so have no need to participate in online communities. They're too busy raking in all the dough from their successful websites ;)
No mention/love for [PureMVC](http://puremvc.org/)? Cross platform awesomeness...
Oh my. I'm speechless. This might just be the worst code I've ever read.
Let's not forget the syntax error on the last line of the insert() method. I wonder if he has tested all this. Probably not.
Well in your defence the term "breadcrumb" probably originated from the Hansel and Gretel book where they leave a trail of breadcrumbs in order to find their way back home. That makes your implementation more true to the term and its origins.
Unintentionally, I suppose it was. CI's goal was for the user to use CI like Rails (MVC) and they seem to have went from there. CI has its own conventions, makes you follow their flow. This results (among other things) in the inability to write unit tests for CI or a CI app.
Nitpickery seems like fair play in the case of bad sample code. The rewrite is very nice for readability, though. I guess that's very subjective. Ah well!
I would like to see an example of how you would set the header of a gzip renamed to jpg. If possible, please upload it somewhere, so I can take a look.
Sorry, did not mean to imply that this is a php-only thing.
The Cake book is great when you already know the exact term you are searching for. "post data" returns something, but "post variables" or "user form data" or a bunch of other common sense searches return nothing. The Cake Book lacks any simple listing of the ways that the framework can best be used for the common grammar of web development. A big percentage of webdev boils down to dealing with data in forms: reading them, writing them and guiding program flow based on them. I know about $this-&gt;data, and there's no easy way to navigate through it when I just need to know if a user checked yes or no on a specific radio button. You have also conveniently demonstrated the style of a lot of "help" that comes from the Cake community: 1. Offering information that is technically correct, but in no way actually helpful for me to do what I want to do. 2. Condescendingly telling people they didn't pay enough attention when reading the manual. 
You can use [Tamper Data](https://addons.mozilla.org/en-US/firefox/addon/tamper-data/) to set the Content-Type header (the MIME type) to whatever you wish. [A screenshot](http://i.imgur.com/0W1Dr.png).
i'm pretty sure this horrible code wasn't acceptable back then either.
I agree, he's been tweaking (read: breaking) something. The comment counter reports 3 comments when there are only 2. Oh dear.
I almost want to hire the guy just to see what sorry mess of an application is handed to me at the end.
I didn't even read the code, but the article serves no purpose. "This is a tutorial for how to make and call a class in PHP," &gt;&gt; posts an overly-specific code for performing a single action (MySQL querying) with no introduction as to how a class is made or called &gt;&gt; "Thanks for reading!" My first thought was this is someone who can't program. I imagine they got that code off the Internet, thought it was the only "class" that can exist, like some magically complex super-code, modified it a little himself, and called it his own tutorial. It seems the guy isn't aware that classes can be used to do things other than run MySQL queries, given that he thinks "this inserts a row" is a valid explanation of classes as a whole.
[About](http://www.anil2u.info/about/) &gt; I have 3 Years 8 months of experience in PHP Web development. Mind is blown.
This article is quasi-dangerous, I only quantify it with quasi as I would hope most up and coming developers wouldn't give this piece of code the time of the day... However a lot of outsourced code I used to get paid to clean up and fix came in looking like this... As a bonus, I'll just leave this scary\sad gem here: [Learn PHP in 5 minutes](http://www.youtube.com/watch?v=VnIsAHw24H8)
Nah, it's way worse! &lt;?php $blah = function() { return "helloworld"; }; $name = "blah"; ${${$name}()} = "1"; print $helloworld; ?&gt; Gives 1.
I guess? I don't put much stock in pattern taxonomy :P
I didn't explain myself too well on that point. Malicious users can upload a 50M image if the server allows for it, but your code doesn't. All they'd have to do is fire off a few hundred threads and your server would be held up. 
Let me clarify something: This is *NOT* a singleton. First, it returns a new instance every time the method is called. Second, the constructor is public so that the getInstance (or newInstance) methods are 100% optional. It's a [Factory Method](http://sourcemaking.com/design_patterns/factory_method). There are really only 3 main reasons to implement it. The primary reason is to enable creation of different classes through a similar polymorphic API. So you can have varying constructors between the domain objects, but a common method for creating them. Typically in this case the factory method doesn't create itself, but creates other classes. An example where you would use this is where you have multiple application classes, and you want to get the configuration from the application. Each would have its own method to return the specific configuration as needed by that application (possibly a different class or a different routine). The second main reason for using this, is when instantiation of an object is complicated. Perhaps you need to create and configure dependencies. Perhaps you need to call a few methods in order for typical setup. By decoupling the construction (via __construct) with the steps needed to make the object useful, it enables far greater reuse and aids testability as well as maintainability. Finally, it's also used to gain the ability to chain instantiation. So it enables `Foo::getInstance()-&gt;doBar()`. To me this is not a valid reason to use a factory method. It introduces tight coupling with the class (since it's static), as well as gains very little bit. I personally feel it's harder to read chained methods, but that's just me. 
I don't want to really explain but, I disagree with everything that Blogger said. 
Caching what? Instantation? In that case it's not caching but really either a singleton or a [multiton](http://en.wikipedia.org/wiki/Multiton_pattern). Don't confuse them with factories, as they are for completely different purposes. 
I think this guy doesn't understand what people mean when they say "PHP is like a Swiss Army Knife". "Like a Swiss Army Knife" just means something has a wide use of applications. It doesn't mean that something is analogous to a Swiss Army Knife in every single way.
Hey guys, this is my blog full of meaningless analogies.
There is a typo in the comment on line 87. Clearly you are going to have to throw the whole thing out and start again.
I've always been impressed with Zend Framework's documentation.
"Anil Labs" ? Huhuhuh.
Also, PHP isn't red. 
&gt; Now, what is **right** with this article? FTFY
I see. I'm not exactly doing that, but it is my goal. I guess it's a shorter step to MVC than I thought. Thanks for the insight! I know there's more to frameworks than MVC, but every time I read MVC I read about framworks too. I guess because they implement it well.
I do want to learn and become a better developer, but also to learn to use the right tools for the right problem, you know? And there's so much to learn. I have to prioritize. Right now that's decided by the needs of the project and the deadline. But MVC is higher on my list now that I've read everyone's arguments for it. Creating a mobile version of a site sounds quite simple. I think I understand how you did it (in principle at least), but I could do that in a pretty neat and simple way too. I thought MVC was more for when you have complex pages where a lot of things come together, like Reddit or Facebook. Anyways, thank you for your feedback!
Oh wow. Now I'm afraid to ever show anyone my own code. :) But I guess it's good that people are strict. I am working to get my code as structured and clean as in your example. I guess I've been moving towards MVC for a while now without knowing it. I do try to avoid having a million files for each thing on the site. That was why I first doubted MVC, because it would seem to split everything into three parts, but I see now that it's not entirely true. I will go for one of the big frameworks when the time comes. Thanks!
My Victorinox doesn't have 5 blades. So, you're saying that my Swiss army knife ... is not actually a Swiss army knife?
I'm beginning to see that I've been moving towards MVC for a while now without even knowing it. I was just trying to structure everything neatly. I guess the step to real MVC isn't as abig as I thought. Your points make a lot of sense. I might go for CI anyway. If I've understood MVC correctly, actually adapting what I've done so far will be really simple. Hmm... So many decisions. I'll let it percolate over the weekend. Thank you for your help! It's really useful.
People call PHP that? I've always heard the phrase used for things that are actually commonly used in multiple fields, like Perl. If you use PHP-GTK I will shoot you in the face.
Excuse my french, but what the fuck was he doing in that time? This is 4 month experience work, when you start with qBasic knowledge in how programming works.
Can't say on 2.0, but on prior versions I always browsed it's core classes to actually find the solution I was looking for.
**Now, what is wrong with this reddit discussion?** Let's first conclude that the hostility might actually be deserved, given the abhorent code. But let's also keep in mind that's obviously yet another developer from India. Very obviously a newcomer with a blog and too much Internet spare time. It's not much of an excuse, but would be relevant for an productive discussion. The real problem I can see here, is that nobody bothered to contact said author. There are a bajillion similar articles out there. Contacting every author is infeasible. It's oftentimes even pointless as seen with w3schools. But not even trying isn't helpful. It's just yet another awfully outdated pseudo tutorial that's online, without anybody putting a warning *where it belongs*.
But the comments are the best :]
I'm looking at Yii after giving Kohana a go. Kohana's documentation is not comprehensive enough for me. It was a struggle to get through Packt's book on Kohana 3.0.
I use PHP-GTK, and quite enjoy it. Its development has slowed a bit, but it's a good tool for when you need to get a quick utility written, or need to make use of existing PHP code in a graphical application.
By "3 years 8 months", he means that the first heard about PHP that long ago, and maybe read through some code, then. He's likely been actually using PHP for a couple of months at best.
Well, yes, but to be specific, I meant caching DB-stored data to cut down on query loads using sessions, which may be a multiton, but certainly constitutes caching as well.
Perl = Swiss Army Chainsaw
That's unfortunate... I find it easier to communicate with other programmers (especially across computer language boundaries) when there's a common vernacular.
No trouble. Though it does seem that the use of this pattern to support... new Object()-&gt;method(); ...might be PHP-specific.
what makes you think no one contacted him? i sent him a link to this discussion (bonus fact: his email me link is broken too), sadly no reply yet
That was my wonder as well, I taught of Perl as well.
Thank you for the compliment, good sir. I'd like to dig into the algorithm that actually does the error correction. Just seems pretty neat that you can lose any 30 percent of the information and still reconstruct the data in whole. For anyone interested, I did find the source for a barcode image processing library: http://code.google.com/p/zxing/wiki/BarcodeContents I've yet to dig through it myself, though. Edit: after some more reading it looks like this is the algorithm behind it: http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction The math is over my head. Edit2:grammer
What a pointless and irrelevant argument.
Thanks. I never disagreed that they cannot. I just deal with exploits nearly every single week. Nobody ever does this in my limited experience. If they do, I guess I wouldn't notice, but if so, it rarely is done. I'll test it and see if it fools "file -b /tmp/file". I'm curious. :)
The language has no standards when it comes to this. The case you use with true/false is a programming style choice. As long as he is consistent in how he does this in his code, you really have no room to be critical of this non-issue.
If you can't figure out how to do a case insensitive grep, you have bigger problems.
Very informative, thanks for sharing your links, I'll definitely be digging through those. Your hidden QR code idea intrigues me. I was considering hanging a picture with a QR code embedded in it on my wall that had my wifi credentials, so that when people came over I didn't have to tell them my pass or set it up for them. It'd be a little more secure, neat if it could be done in IR. After hearing your idea, here's my thoughts on how to do it. Maybe you could use a sheet of thin copper, print a QR code on a plastic sheet with toner, apply, then use etchent to get rid of the holes. Then, make a small lightbox with the copper covering it. I might have to experiment with that. What would really be neat is some way to have it be dynamic, though! Pretty cool idea, either way :)
Actually you have a fair point :/
Off topic: how do you make that tilted-looks-like-a-picture-taken-off-a-screen effect? and what is it called?
Haha, I hope this answer isn't going to be disappointing; I took a picture of my screen with my fancy cellphone :P The cool thing is, you can see the outlines of individual pixels in the monitor this way! However, I've replicated this look in photoshop, it's not terribly difficult but not quite the same, either. I think the term you might be looking for are scanlines. That and a perspective tool will do a decent job. Here's a photoshop toot: http://www.bradruggles.com/2009/04/17/tutorial-creating-tv-scan-lines-in-photoshop/ 
I wish PHP had a toothpick.
Just a couple thoughts: &gt; 2) Powerful function to Find Files I personally prefer using [DirectoryIterator](http://us2.php.net/class.directoryiterator) over scandir()/glob(). Creating recursive and filtered scans is much easier, and takes less writing. &gt; 6) Serialization Again, this is just personal preference, but when possible I would use [json_encode()](http://us2.php.net/json_encode)/[json_decode()](http://us2.php.net/json-decode) instead of serialize()/unserialize(). Native PHP serialized strings can be awful to work with.
I fail to see any improvements, you just change php4 into php5, * you code still uses mysql instead of mysqli (or pdo) with prepare statements * comments are useless - why can't people just adopt JavaDoc (PHPDocumentor) commenting style * retrieve and delete don't sanitize input whatsoever * indentation still broken (in sprintf lines) * retrieve can still select only one user at a time etc. 
That looks like a wonderful and challenging product (it depends if you have a listening supervisor). Single Sign On, Maybe quick new instance for the user, maybe monthly based payed subscription, a good framework for your job (flexible, solid, well documented, extensible). Support system for the clients, to have to debug remote server problems. This could be a fun challenge if you: * have a tolerance for wordy documentation, or lack thereof * like to analyze different platforms and decide which ones are the best for the job * like to find ways to automatize your work (scripts to check remote server compatibility and such, if you'd have your cms distribute on client servers) * have a pleasure in linking different platforms by services, REST API's or IPC (or whatever this weeks trend is) Otherwise it would be a painful project, because there are so many point where I see a hard part of development and maintenance.
For me Zend downside is that it has become a PEAR alternative, it is not soo much a rapid application framework like most of the others here but a massive collection of classes that happens to include a front_controller..... 
I learned about glob at my current job I started this year. Definitely has A LOT of potential an uses.
&gt; I personally prefer using DirectoryIterator over scandir()/glob(). Creating recursive and filtered scans is much easier, and takes less writing. Not sure it would be less writing than glob since it only takes one line to get all the files you're requesting unless you're wanting to recursively read all the directories too. I do like DirectoryIterator checking it out a bit.
I build and maintain Drupal sites (and have had a few brushes with Wordpress as well). Quite a bit of the work I've done has been on streamlining what I do and how I do it. You need to be comfortable with the command line and some basic linux skills IMO. Cron jobs for backups, moving files around, and just in general they are great skills to have. Originally I did updates etc. via FTP and that's a one way ticket to inefficiency. #1 priority needs to be keeping sites up to date, and ensuring they don't become spam magnets. Spam generates a lot of customer complaints, looks unprofessional, and can be a pain in the ass to clean up. Preferably don't allow comments at all (not much good can come of it) but if you do, use a service like Mollom. #2 priority needs to be keeping it as absolutely simple as possible. Stick with a few basic themes that you like, avoid excessive customization (want the site to have the color of your logo? Fine. Want to move everything around? NOPE NOPE NOPE). Provide minimal permissions on the site. Avoid Ecommerce (Ubercart etc.) If they want to sell something, suggest Paypal + Paypal button on the site. Or an opentable widget for restaurant reservations etc. #3, I'd have to say backups. At the minimum, do a daily backup of the databases to another server. I do a daily db backup with a weekly file backup. #4 don't provide FTP access. This is just going to be a stupid shit magnet where people want to upload homework files / irrelevant shit / shit that's going to make backups huge, and just in general shit that should not be on the server. I would not even tell the customer about the backups, IMO they are for you (unless you are charging for making them). Also, the database credentials are in there somewhere and anyone with some google skills can find it, take a few guesses and try to hit phpmyadmin, then they have full access to the site. (I provided myself admin access to a clients Wordpress site in this fashion.) #5 use some sort of static page cache. For Drupal this means "Boost". Wordpress has one as well. This is *not* negotiable imo. For the type of sites you are talking about, the vibe I'm getting is &lt; 500 page views a day. I could probably run a few hundred of those sites off of a single reasonable VPS (very vague guess), but not if every page that is being generated has to bootstrap Drupal and hit the database. Drupal itself has a great tool called Drush that you can almost (99.9% of the way) automate updates with. I can't tell you how many old Drupal / WordPress sites I've seen that are not updated where some security hole is exploited and they are spammed. I found some old WordPress sites on our servers that were before my time that had 60,000 spam comments. With Drupal, you can get a fairly basic implementation of the type of thing you are suggesting without getting too deep. The main thing you will want to do with clients is give them a *specific list* that says "Here are the 4 things you can edit, and here are the links to edit those things". With any CMS, the more stuff you pack in there, the more complicated it becomes. When you work with it, you grow accustomed to it but clients are hit and miss, mostly miss. I'd also advise that you should set up WAMP (assuming you have a PC) and install Drupal 6 (Avoid 7 IMO). Alternately if you have access to a server / mysql, install on that and get Drush working and go from there. The only part I'm uncertain of is the SSO portion. I'll be quite honest and say that if its really that big a deal, the customer probably needs a "real" website, and should pay for an actual website. Barring that, if you *really* need that functionality, pay someone to develop it if it is even possible (at the least this will let you put a price on it to consider how much you really want it). I've seen some other CMS solutions like CushyCMS, and honestly it seems like some pseudo CMS that really just didnt do much at the end of the day. I will tell you to be prepared for some picky ass people. For some reason, it seems the people with the lowest budgets are the pickiest. Even if you give it to them for free, they are going to complain about some really absurd shit. I'd suggest you have an escape valve. Find someone you know that makes websites and work out a referral plan. Chances are when they've been quoted out the cost for a website, they will stop bothering you (hopefully). Quite a few people have ideas about what a website is supposed to be. You *WILL* get people that ask "Why can't this be like Amazon has it?" They don't understand that there is a tradeoff between static HTML (fast, small, hard for the end user to edit) and a CMS (heavy, dynamic, feature loaded), and that making a CMS seem snappy like static HTML requires compromises (indeed technology itself does). Make sure you know in advance what things you don't offer. You don't want to have to say "Let me check on that for you." That's just going to tell them to pester you more about it, because you didn't really know. Responding quickly with "We don't do custom themes because this is a very basic service and we don't have the in house people to manage that." is far better than "Uhh... uhh what is it that you want?" One thing that stands out is that a single Drupal site (or CMS) tends to be a problem on cheap hosting (shared hosting etc.). A typical Drupal site with Boost will not be very resource heavy 99% of the time, but then someone logs into it and starts adding content and BOOM requirements go up by an order of magnitude. This means to *reasonably* host an average Drupal site, you need to buy much more than you need on average. Contrast that with hosting quite a few sites that are rarely accessed, and overbooking takes care of this issue for you. This is something you can relay to clients. If you charge a small amount for hosting a 4 page website they can edit and provide occasional tech support, you both come out ahead IMO. While what you are talking about is going to be fairly time consuming on the client side of things, though its definitely an interesting niche. I'd expect for this to be more of a full time project if you have more than a handful of customers. Finally, I can answer any Drupal questions you may have (within reason), but keep in mind Drupal is the tool that I know. There may be other tools better suited, so should someone suggest something that fits this type of environment better, its all fair game IMO. I do know that Drupal is fairly flexible and easy to extend, and Drupal 6 is quite mature at this point.
You can still check the mime-type locally using finfo or mime_content_type (deprecated) if you don't have finfo. A lot better then using $_FILES['type'] but it's still not safe, you can still include scripts in an image file for exemple. 1. Check extension 2. Check mime type locally 3. Disable script execution in file uploaded path. In the server config or with htaccess
Holy cow dude, thanks! Right now if the sites is built on a framework, which likely will be the case, that decision is up in the air. Since most everything I've coded in PHP has been though google searches and shear dumb luck that everything holds together, whether it's Drupal or Codeigniter or Cake PHP or what ever, it will have to be built on something. I'm pretty sure how i'm going to present it is that the end customer can have updating capabilities of content only though some sort of back end. No FTP, no muddling with html for templates and the such, just strait content. Let them use some sort of formatted like Markdown or Textile and let them run with that. CSS will be predefined, JS will be predefined. I'll likely have questions that will spring up as this progresses. Thanks for your advice! 
Usually we use a WYSIWYG (ckeditor to be specific) with a module that lets us control which buttons are visible, and this works out pretty well from an editing standpoint. We still get the people that don't quite understand that copying and pasting from Word is problematic from time to time.
[ckeditor](http://ckeditor.com/) looks actually pretty slick!
&gt;making it the number one SEO CMS. This throws some huge red flags immediately. &gt;Small Footprint. A default install of Etomite takes just over 2MB of webspace Really? If you give a shit how much space a CMS takes, get a new host. Just looks like a very basic CMS on the surface.
So extract turns $_POST['phpnewb'] into $phpnewb?
Few things that might get you started: https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Secure_Coding_Guidelines http://www.reddit.com/r/PHP/comments/gssh4/best_method_of_logging_in_and_keeping_user_logged/ http://codahale.com/how-to-safely-store-a-password/
Use bcrypt. Here's one of the simplest explanations. http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php/6337021#6337021
This was a great help when I was designing an authentication system: [The Definitive Guide To Forms based Website Authentication](http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication)
http://php.net/manual/en/function.explode.php (use it, love it) array explode ( string $delimiter , string $string [, int $limit ] ) Returns an **array** of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter. so $etext is an array (use print_r to see the contents) Edit: after re-reading your code it appears thee are a couple of thing wrong with your approach. i suggest you also take a look at the functions file() or file_get_contents() 
There's a few things wrong here. The biggest is you're trying to over complicate the whole thing. You say you want to display each line of the file? That's good, because fgets() returns a line from the file. while (!feof($openfile)) { $line = fgets($openfile); print($line); } Also note that it's `print` and not `$print`. Edit: It dawned on me that you may be confused by seeing the script output **in a browser**, which ignores carriage returns and new lines (\r and \n). If that's the case you would want to use `print("$line&lt;br /&gt;");`.
So to display the array I created I would do this? $openfile = fopen("textfil.txt", "r"); if($openfile) { while (!feof($openfile)) { $text = fgets($openfile); $etext = explode(" ", $text); print_r ($etext); } fclose($openfile); } ?&gt;
* \r is the character specific for Windows * \n is the character for new line So, if you're running it on Windows: explode("\n\r", $text); On *nix: explode("\n", $text);
Yeah I don't think I asked the question correctly. What I am trying to do is create an array from the text file and then display it. Also noted the typo for print.
Well, in that case this works: $lines = array(); while (!feof($openfile)) { $line = fgets($openfile); $lines[] = trim($line); } print_r($lines); However you're not real specific about how you want the array displayed. The `print_r` function will certainly do that, but might not be what you're looking for. If not, you can iterate through the array. $lines = array(); while (!feof($openfile)) { $line = fgets($openfile); $lines[] = trim($line); } foreach($lines as $line) { print("$line&lt;br /&gt;"); }
that would print the array you created, but it would not be the result you were aming at. but reading a file line by line "into" an array is exactly what file() does. so you could do: $array = file('textfile.txt'); print_r($array); and it would print out all lines in your file.
Are you trying to get each line as an array entry or exploding the words into an array?
This isn't true. It doesn't matter what OS he's running the script on. What matters is the OS the file was created on. Even that is a bit iffy, since text editors don't have to save the file in the preferred format for the OS it's running on. For instance Nodepad++ on Windows is more than happy to save a file in Unix and/or Mac format.
Okay, so I was not accounting for exceptions. It matters more where the text file was created, not where the script is run. Using "\n\r" accounts for both circumstances, so it doesn't matter.
Sorry, but you're still wrong. First, Windows uses "\r\n", and not "\n\r". Second, if the file is in Unix format, neither `explode("\r\n", $text)` nor `explode("\n\r", $text)` will split the lines. The first parameter to the explode function must match *exactly* the character sequence you're trying to split on. Since a Unix file contains neither "\r\n" or "\n\r" your explode example would not work. Edit: Also the OP doesn't need to be using explode in the first place. The `fgets` function automatically returns a single line from the file.
Well, I'm trying to display this (http://i.imgur.com/hI3Ft.jpg), the output would be this is line one this is line two this is line three I know I could simple display the text file, but I need to use the .explode function where the string $delimiter is the enter key (i.e. "\r") 
I thought I might have those reversed but I was thinking it would work, meh, guess I was wrong. Btw, why didn't you just say that in the first place. Kind of an asshole move.
Oh c'mon! You can't blame me. haha 
Some things that helped me when writing my own authentication into PHP scripts was just studying the ways open source PHP scripts did it. I just looked up some popular PHP scripts that had login capabilities (e.g. phpBB). Then I studied how they handled logging in, cookies &amp; session info, etc. There are plenty of ways to authenticate but some advice is not to put the password hash into a cookie. I had a nasty habit of doing that, and it's more secure to use a PHP session instead since it uses only one cookie (for the session ID) and stores everything else server-side. Hope this helps and good luck!
The latest version of CKEditor (3.6.2) has resolved A LOT of the Word copy-paste problems. Rather than trying to emulate the word styling it will basically just strip out everything but paragraph breaks which is a much better compromise than the previous version. Try copy-pasting a load of word junk into the demo then view source to see what I mean: http://ckeditor.com/demo
Interesting. I may go ahead and push that out :)
I've worked with people several times to make user-friendly apps and PHP scripts and there are two things I always use. 1. Customers never know what they want. 2. Never implement something without showing the customer first. I had a way of doing the second one too many times and when I thought it was a good idea and thought it'd be easy, the clients were easily perplexed. Anyway, I would try offering something that uses a WYSIWYG editor (CKEditor, TinyMCE, etc.) but don't let them go out of control with their web pages (i.e. letting them change HTML or CSS that could ruin the site's look and feel). I'm not sure how you're using templates (using a template gallery or making the templates yourselves for them) but those are usually nice since the content should remain relatively static while the site's style can be changed with relative ease. I don't want to get carried away but when I do these things, I always offer to train my clients on their products I wrote for them so they understand it better. Don't expect every one of them to get it right away. I also offer support for them so if they run into trouble, they can contact me and I'll resolve their issues. Well I hope you can find something useful from my post. It sounds like a neat project to work on and I'd just try to see what they like one step at a time. Involve them in the development by showing them what they think is good and easy to use. I'm sure you'll do fine. Good luck!
What about this? &lt;?php $etext = file('textfile.txt'); ?&gt; This code reads in a file into an array split by line breaks. Also your code above, "fgets" reads until a line break unless you specify how many bytes to read with a second parameter (which you don't). You also "print $etext" which is an array created by "explode." I think you might mean "print $etext[0]" or even "print $text". The character separator is "\r\n" on Windows and "\n" on most other platforms (Linux &amp; Unix). Typically "\n" works. Let me know if this helps.
I would advise caution before using Doctrine in preference to an extended Zend_Table implementation. Find out if Zend can fulfil your requirements first as Doctrine can cause some big problems such as: 1. DQL queries returning HUGE datasets or generally producing extremely sub-optimal SQL. You really need to be on top of everything or you can end up with your application slowing right down for no apparent reason. 2. It's a very big framework (maybe almost as big as Zend itself) and it will generate a lot more classes as you develop the application. As such there is much more overhead in terms of maintenance and you should also look at opcode caching. It does a lot good stuff too! but maybe air on the side of YAGNI (you ain't gonna need it) unless you have a compelling reason to pick Doctrine. Note: I'm still using Doctrine 1.2 so some things may have been improved.
It's a simple upgrade luckily. I had no broken functionality after basically just deleting the old version, copying in the new and copying in my old config. If you're source controlling the application you still might want to delete the old one as a commit will not notice any redundant files. Also there is a new version of CKFinder which finally supports multiple file upload.
I use it in Drupal so the config is handled through a module. I have it symlinked to several Drupal installs so all I do is download and extract and I'm done. Yeah I'm lazy like that. I checked it out and didn't have any issues with the new version so thats good.
While it is probably *slightly* less convenient to recreate it in the "one file that rules them all" format, the majority of time is spent maintaining or upgrading typically. I'd say that any time spent making something easier to read and maintain is time well spent. When they come back asking for a new feature or rule etc, its likely to be easier. The larger a project gets, the more obvious the benefit is.
I don't blame you. lol. It just felt like you dragged it out rather than just saying it in the beginning.
Yup I added "print $etext[0]" and it works. &lt;?php $openfile = fopen("testfile.txt", "r"); while (!feof($openfile)) { $text = fgets($openfile); $etext = explode("/r", $text); print ($etext[0]) . "&lt;br /&gt;"; } ?&gt; This outputs this is line one this is line two this is line three
FWIW, I've seen people argue for [bcrypt](http://codahale.com/how-to-safely-store-a-password/) over normal hashes, since todays hardware is fast enough to bruteforce sha/md5'd passwords. Of course, they'll need to have access to the table with all the password hashes, and if they have that, they can probably also get to the data those passwords were protecting; regardless, you have other problems.
I don't think the reason to hash passwords in a hard-to-crack way is necessarily to stop hackers from accessing your website. People generally use the same password for all websites they need to log in on, someone hacking my website and getting access to someone's account would be bad... But it wouldn't be nearly as bad as a hacker getting access to a user's email account (for example).
Things have improved by an order of magnitude. I've used 1.x in the past, I abandoned it, because, IMO it's really just yet-another-activerecord-oriented ORM. That said, I really kind of fundamentally disagree, as far as YAGNI in the context of Doctrine2. D2 solves so many common problems so well, that IMO, what YAGN are the sorts of optimizations you allude to. And with D2, if you need to make them, you typically can do so without dumping the ORM. You probably owe it to yourself to check out D2. It's really a completely different animal. While there are certainly tradeoffs, it provides some great features: * Automatic (or not) transaction management. There's an internal unit-of-work implementation that manages running inserts/updates/deletes for you. This can be a [net win](http://www.doctrine-project.org/blog/transactions-and-performance) over all-too-typical "no transactions, everything with autocommit". * You actually have a lot of control over what gets fetched. D2 lazy-loads associations by default, but and you can force eager loading either by configuration (I never do), or by constructing queries properly (join associated entities, and reference them in the "select" clause). * Support of Single-Table/Class-Table inheritance is quite solid, and pretty easy to grok. Having polymorphism managed for you across the persistence interface is somewhat cathartic. * You have options to make specific optimizations when needed. You can make native SQL queries and use a [ResultSetMapping](http://www.doctrine-project.org/docs/orm/2.0/en/reference/native-sql.html) to get hydraded entities, for instance. You also have non-object hydration modes, like those in 1.x, which allow you to greatly reduce overhead at the expense of OO-utility, which is often useful in read-only use cases with large result sets. * The only code generation that (should) happen in D2 are the generation of proxy classes used to facilitate the lazy-loading stuff. Their generation and caching is configurable, but otherwise largely transparent. 
So would he store a hash of the password in the database? i.e. on signup: $bcrypt = new Bcrypt(15); $hash = $bcrypt-&gt;hash('password'); $isGood = $bcrypt-&gt;verify('password', $hash); on next login: $hashfromdb = get_password_from_db('user'); $bcrypt = new Bcrypt(15); $isGood = $bcrypt-&gt;verify($hashfromdb, $hash); EDIT: This is probably a stupid question. I will try to work it out. EDIT2: I figuired it out using an example for Portable PHP password hashing framework (as this kinda borrows from that): Example using Bcrypt class mentioned in the URL above: include('class.BCrypt.php'); $password = 'passwordfromforminput'; $pwdHasher = new Bcrypt(15); // $hash is what you would store in your database $hash = $pwdHasher-&gt;hash($password); // $hash would be the $hashed stored in your database for this user $checked = $pwdHasher-&gt;verify($password, $hash); if ($checked) { echo 'password correct'; } else { echo 'wrong credentials'; } Example using Portable PHP password hashing framework: require('PasswordHash.php'); $pwdHasher = new PasswordHash(8, FALSE); // $hash is what you would store in your database $hash = $pwdHasher-&gt;HashPassword( $password ); // $hash would be the $hashed stored in your database for this user $checked = $pwdHasher-&gt;CheckPassword($password, $hash); if ($checked) { echo 'password correct'; } else { echo 'wrong credentials'; } 
You're not... advising to just fix problems as they arise... *are you??*
Well, that was absolutely useless.
It definitely sounds like an AJAX search, which simply adds the search to a work queue, and redirects the browser to the result when the work's done.
This is why I hate PHP.
Upvote for "How to safely store a password", or my preferred title: "Just fucking use bcrypt"
&gt; I don't even know the proper name for this, if there is one. Ajax polling. It sounds like you don't know JavaScript very well, because this isn't really a PHP question. Do $.ajax() every 5-10 seconds. When the result is ready, set document.location.href to the new URL (given by the server in the Ajax request). You don't need to "refresh" the page at all... that's an old school way to do it (you can do this without any JavaScript if you really wanted to).
Maybe I'm not being helpful, but making something from the ground up at least once is only going to help you in terms of understanding how other things like it will work. It might allow you to actually appreciate just how good the proper ones are.
Alternatively I could probably get some good ideas from trying out some of the things that are out there. For example, I'm currently working on a module loading system- and I'm not entirely sure how I should organize the load order in a way that's both flexible and 'understandable'. For the moment I've chosen to go with understandable. I suspect other systems out there will have already had some good ideas on the topic.
I find myself rewriting other people's classes and libraries all the time, usually because they used some dependency that I don't have available, or simply because I think the way they did it is retarded. If you find yourself CONSTANTLY rewriting the same classes over again, then you might have a problem...
It sucks only if you're developing something that has been done that is extremely similar. I've learned to have a good sense of "that has to have been done before", and actually looking for the code. Once you get a feel for the problems that programmers have already created, you'll get more in the habit of modifying something existing rather than doing it from scratch.
All these comments just talk about password hashing and storage; for the rest of your questions I use sfGuardPlugin for the symfony framework. The only thing left up to implement in there is the password recovery system, everything else is there, with simple intuitive api. $user-&gt;isAuthenticated(); $user-&gt;hasCredential('write_article'); $user-&gt;signIn($user_from_database); // even overwrite the login page and do your custom login
I do this quite often. For me I feel most other PHP scripts that do something similar don't do it the way I want or are too bloaty. I also do it just to learn more about them and make one that's better or unique in its own way. I feel like you're not reinventing the wheel but just making a better one.
http://jqueryui.com/
[](/)
thanks - if i see another example blog/cms/cart with a framework or on a resume i'm going to barf. any good ways to simplify the learning curve of doctrine2? 
Try writing object oriented reusable code. You shouldn't be rewriting the same stuff every time. Put them all in a library to use alone or in a framework, or even in your own framework if you decide to write your own. It takes a little longer to write reusable code but it's worth it.
well first try to split the problem up. and then look at other other people solved it. Like symfony2's bundle system. or drupal or wordpress's module loading system (or any other similiar project) I also find that contributing changes upstream to the original author helps. 
I never run into this problem, but it's mostly because i would prefer to modify someone else's code above all else. So i just look for the best available lib and then fork it (if on github) and try to get the code back upstream.
It may not be a direct php question... but it does go hand in hand... one way to achieve is by ajax polling and php queuing... After someone performs a search, add the keyword to the queue and make a database entry with pending status that updates when it gets executed... redirect to a page which only has the ajax code that keeps polling php to see if that pending status has chenged.. if you receive a success code back, then redirect them to the display script..
Sadly, there's nothing I know of that provides a terribly detailed introduction. I can however, point to [these slides](http://www.slideshare.net/jwage/introduction-to-doctrine-2) which provide a nice overview, and the official docs provide a [getting-started type guide](http://www.doctrine-project.org/docs/orm/2.1/en/tutorials/getting-started-xml-edition.html). The official [reference guide](http://www.doctrine-project.org/docs/orm/2.1/en/) is quite good too. My tips: * Don't bother with xml/yaml for describing entities. Use annotations and keep everything in one place. * Consider using a base class for your entities so you can implement some __get/__set/__call magic and avoid having to write/generate getters/setters for all of your entities' properties. 
http://flourishlib.com/
I know there's quite a few /r/php'ers that use SimplePie, so feel free to ask anything in the comments here!
It appears there is the lesson from historical computer systems that you shouldn't be scared of currently reinventing the wheels. As long as you keep up to date with the field and from time to time refactor old code to use new tricks you have learned. A lot of the stuff isn't that hard to make, once you forget it *might* be difficult to do and do some careful thinking. 
Thank you. This is the kind of answer I was hoping for.
You've got the basic idea correct on the client-side. You have a page loaded, and a user does something that might take a while: You javascript code makes an XHR request saying "put this work on the queue, please". You server-side code does so, and passes back a token of some sort to the client-side code. Shiny token in hand, your client-side codes goes into 6-year-old-in-the-backseat mode, asking "Are we there yet &lt;token&gt;?" twice every second. Server side replies "SOON", or "FOR THE LOVE OF GOD YES, HERE'S YOUR RESPONSE". You'll want to implement some kind of nice work-queue on the server-side. Relational databases work, but you can also look into doing things in memory only, using APC/memcache, etc, and save a lot of database calls.
Start ridin' em.
&gt;I feel like you're not reinventing the wheel but just making a better one That's just it... I don't believe I've come across any 'wheels' in my programming experience. It is limited mind you. Some stuff is extremely well written to me, but there is always room for improvement. It's extremely variable, but ultimately, one of us has made a mistake somewhere even on really simple projects. The quest to improve code is a good one. You reach a point where it's not productive, but it can teach you a lot.
I would probably just go with some combination of curl and regex - but you could go fancy and give Alchemy API (http://www.alchemyapi.com/api/text/) a shot. Pretty impressive data analysis tools, as well as this one to just get the cleaned up text from a site - as it seems you are want to do.
I think one problem I have is that I don't *really* know where to look for code that fits my needs, and because I don't know I typically end up writing it myself.
I do this.. Find a framework; do some research and pick one you like. Then learn it, use it and begin to trust it. After a while, you'll stop reinventing parts of the framework, and you can concentrate on reinventing important wheels that you do need to reinvent!
I looked at anything that would integrate with phpBB a while ago and found nothing. Then I looked at doing it myself and decided not to. phpBB does not play nice with others - they may have made changes since I looked, but afaik you need to find a different bbs...
For me that's an upside. I can pick which components I want to use. For instance sometimes I don't really need a front controller, I just use Zend_View.
1. Use a framework, and be aware of the "module" community that probably comes with it. 2. Think about what you are about to build. Has someone else probably done something extremely similar? No? Check anyway. 3. Plan ahead, so you know what works together, what doesn't, why you use what you use, how long things will take, etc. This is the difference between software architecture / software engineering and programming (in my opinion).
What article? All I see is a (bad) code sample and some comments.
The most future-proof way would be generating a PDF file with phantomjs or wkhtmltopdf. 
Oh wow, this looks very promising. Thanks! I've never felt a lot of love for the bloated MVC frameworks because they tend to inflate small projects into huge ones and overcomplicate stuff. This looks a lot closer to how I'd approach projects if I were to be writing modular code from scratch. 
Both the comments here are great ways to go about it. I'd also like to add [libots](http://libots.sourceforge.net/) in to the mix as a great way of "compressing" various bits of text down into a summary. I've used it briefly with some [basic scheme bindings](http://demonastery.org/52/chicken-scheme-and-ffi/) and it works wonderfully.
Yeah, I know this is is /r/php but this would be a great use case for [node](https://github.com/chriso/node.io), phantomjs or wkhtmltopdf
I wrote a script to scape Steam profiles wishlists and aggregate the results using this: http://simplehtmldom.sourceforge.net/ It works pretty well if you know the structure of the page you're scraping and just want to extract some simple information.
&gt; The Cake book is great when you already know the exact term you are searching for. You know what, so is Google. Knowing what you're looking for helps in *any* context, and is not problem specific to Cake. I don't get the point you're trying to make. &gt; I know about $this-&gt;data, and there's no easy way to navigate through it when I just need to know if a user checked yes or no on a specific radio button. $this-&gt;data['Model']['termsAgreed'] isn't simple? &gt; Condescendingly telling people they didn't pay enough attention when reading the manual. That's because I took the time to sit down a read its first few chapters, now know how cake works and is structured, and can find in the book any query I have about how cake works. Paying attention when reading the manual worked *absolutel wonders* for me in this context, so I always recommend the same to others.
You're probably better off just implementing a full CMS. Something like this one that was posted the other day: http://www.fork-cms.com/ It will be less trouble in the long run than anything hacked together.
Yes, but do note it can extract content only when the websites language is in English. Or in a more generalized way, it can extract content, tag, conceptual tag, etc. only if the provided website is in English. edit: and all this is irrelevant if the aggregated links have feeds.
Wow, that is nice - I looked at the code and it's html5 and pretty well organised. The CSS isn't too bad either...
Aye, it doesn't appear that a PHP library for accessing GNUCash data exists... and it likely won't be possible until the developers properly split apart the "library" side of things and the GUI.
+1 on SPL iterators in preference to glob. Glob is okay but iterators can make short work of traditionally complicated file-related tasks.
Wouldn't `wget` be suitable for this as well? It has a mirror mode that I think you can set to "mirror just the page and the linked contents from that page" Yeah, this did a pretty admirable job: wget -E -H -k -K -p 'http://www.reddit.com/r/PHP/comments/ldurt/if_you_were_making_a_link_aggregator_with_php_and/' to here: http://jrm.cc/extras/wgetdemo/www.reddit.com/r/PHP/comments/ldurt/if_you_were_making_a_link_aggregator_with_php_and/index.html The idea others are putting forward about making a PDF from the page is a pretty neat idea as well -- would keep the file system a bit cleaner and probably more accurately preserve the content/appearance of the site. That said, PDF != HTML -- you would lose any JS interactions, the page width becomes static, etc, etc.
That was not a very informative article. 1) Add proper sanitization. 4) Not really a "security" practice, per se, but alright. 6) This adds little to no security what-so-ever. If a person is going to try an attack based on a specific ersion of PHP, they will simply try it. They will not attempt to first see if you have the right version or not, they'll just point the evil hack at your domain and fire. That said, I do this simply to cut down on the amount of headers sent out -- but that's not security related at all. 7) safe_mode has caused enough trouble that it is actually being [removed from PHP entirely](http://php.net/manual/en/features.safe-mode.php) 8) This implies that your setting files should be in a place accessible by web request -- and that's terrible advice. Place your configuration files **outside** your webservers document root, that way even if your server goes and does something crazy like serving all php pages as static content, no malicious users could ever get at the files anyway. *edit: graaaahh, making OL on reddit is painful*
[JFusion](http://www.jfusion.org/feature) If you want to use Joomla as CMS there might be a solution on the CMS side.
And more stuff for safe coding :)... * Use PDO * Escape and purify output from database and user input with something like HTML Purifier. * CSRF Prevention (Tokens, etc) * Hash/Salt passwords with something like PhPass or something custom.
Yeah, I didn't really bring that kind of stuff up because that's more "general coding practices" as opposed to "securing php specifically". But none of it is bad advice.
If your willing to spend a bit of money on a CMS, I recommend [Perch](https://grabaperch.com/). In a nutshell, it sits on top of your website &amp; puts content in where the PHP code below is called: &lt;?php perch_content('Intro');?&gt; You/the user can then edit the content via Perch's admin section. It also have a blog plugin.
Ah link wouldnt load on my phone lol took a guess at the article from your comment ;)
The Suhosin patch does a good job of closing a lot of security holes in PHP. http://www.hardened-php.net/suhosin/
CodeIgniter and CakePHP were easy to learn for me. Started looking at Symfony2 few days ago and loving it so far :)
how about something like this $lines = file(myfile.csv); foreach($lines as $num=&gt;$line){ $row = explode(','$line); /* row logic */ } **edit** this is for simple comma deliminated csv 
http://php.net/manual/en/function.fgetcsv.php function parse_file($filename,$delimiter) { //assuming first line is headers if (($handle = fopen($filename, "r")) { $headers = fgetscsv($handle,0,$delimiter); $i = 0 while ($row = fgetscsv($handle,0,$delimiter) { foreach ($row as $key =&gt; data) { $outputArray[$i][$headers[$key]] = $data; } $i++ } } else { return false; } if (count($outputArray) &gt; 0) { return $outputArray; } else { return false; } } The more I look at this the more I want streamline it, but I think that would be it. You could then write a nice form to submit the file and set the delimiter (so Bill can use "," and Fred can use "/t"). That being said, I know what you are saying in terms of users not knowing what delimiter they are using but there also must come a point where standards are laid down I keep editing this post....sorry
&gt;A real-world application for your code guru genius: how do you turn the mystery CSV file from "Bill in Marketing" into a usable PHP array? You don't. Trust me on this. If there is one thing I've learned over time working with spreadsheets is that people want to change / tweak the shit out of them. Even if you lock them down, people will want to move columns / add formulas etc. I'd strongly suggest you reconsider why "Bill in Marketing" needs to be able to do this, and if it can't be done in a different way. Unless you are lucky, you are going to spend more time troubleshooting why it didn't work quite right every time, because "Bill in Marketing" won't understand "garbage in garbage out". Even if you attempt to map the headers to a column in a table, bad shit is going to get put in the fields, extra commas will throw things off, people will find an irresistible urge to rename the column headers etc.
How can we be sure they are using the (comma) delimiter? What if the fields are also encapsulated in (quotes)? e.g. "bob"; "is"; "annoying"; must become: array('bob','is','annoying') 
This is the way to go. Write a validation function that checks each column's input and keeps only the sanitary ones for database input. 
str_replace &amp; array_walk
That will work (except you may want to set the delimiter as a variable) but explode takes a slightly more processing time IMHO
I know what you mean. Looking through Frameworks right now, too. Can only provide some insights with the Zend FW. It's a bit bulky and slow in execution at first, but easy to setup and mighty in function. The good documentation also supplies a small, yet insightful tutorial to get things rolling.
just use fgetscsv and you can pass the delimiter over
Probably the best answer actually, I have coded a solution in my other post but this was my nagging feeling. You need some standards.
It's tough to say, it depends on your learning and development style. I have not looked into Symfony2 yet, as I have worked with CodeIgniter before - it's simple, to me, but gets the job done. Now, I started out by trying to use Yii, and found it to be a bit too confusing for me. What I'm trying to say is that if you can't seem to get the hang of it, try another one. Zend, Yii, and Symfony2 are probably the most powerful frameworks, but that doesn't mean that you can't use something like CakePHP or CodeIgniter. Try more than one out, see what fits your personal preferences. Try to do the same kind of project in each one. Make a simple blog system, and see which one is the easiest/most flexible, for you, to do it in.
very good point, I forgot that.
To make it even better, the [author](http://reddit.com/user/wbond) of Flourish is a redditor.
I use [cushycms](http://www.cushycms.com) for small, user-editable content.
There's a few different parts to it really. 1. Mapping the fields in the document to the fields in the DB. I've done this in a couple of different ways before: first attempt used .ini configs which just mapped columns to fields. Second attempt output select boxes for each column containing all the possible fields of the DB (and some other special cases like "override" and "ignore"). The second was obviously much better. 2. Dealing with dodgy data - protecting existing data. I was concerned about dumping stuff directly into a table from a csv because I wanted to be able to see the result first to confirm nothing went wrong. Furthermore I wanted to be able to clear an import if it had problems without touching the live table. In view of this I opted for an intermediate table called e.g. temp_users that everything would go into before being imported into the live users table. This also allows individual records to be adjusted if they have problems without doing a whole new import. 3. Doing the actual insert. For this I wrote a somewhat unusual system that I will avoid going into too much detail about but essentially it involves dumping the entire temp_users table to XML and processing these through a general-purpose importer. So the XML would look something like this: &lt;record&gt; &lt;model_name&gt;User&lt;/model_name&gt; &lt;fields&gt; &lt;first_name&gt;Foo&lt;/first_name&gt; &lt;/fields&gt; &lt;/record&gt; The reason I have this system is that I do imports from a variety of different sources so it's simpler to just standardise them all to a single format. If you will only ever be dealing with csvs or xls then you could probably just go though all the records in the temp table and insert them to the live table. So to summarise what happens is as follows: -&gt; Upload CSV -&gt; Scan CSV to obtain column names -&gt; Output column names along with select boxes to a form -&gt; Take mapping an apply it to the csv dumping the result to a temporary table -&gt; output a preview of the import from the temp table -&gt; if the user hits submit dump the temp table to the live table
I'm in a situation where I need to build something for someone like "Bill". This is probably the best advice I've ever read, thank you. As a Junior level developer, I do have a thought that maybe you or anyone else here can discuss: what if we restrict the table structure and write a validation function to check if it passes the structure and refuse it if it doesn't pass?
I like that solution. I'd probably use json myself and pass it into jquery so I could ajax that lot of it and edit some data on the fly but I love the way you go about the checking
Sometimes you have to reinvent the wheel to realize why you needed a wheel in the first place.
You can't just validate and boot anything that does not pass. You need to be able to validate, and then provide an export of the rows that don't validate so that the end user can receive feedback. It also has to be feedback that is not so cryptic that the end user cant figure it out. Even then, there is a good chance that they will ask you anyway. With the data that *is* imported, you would need some sort of preview functionality like "are you sure this is what you want to import?" because you can't just blindly plug everything in and find out 2 weeks later that it imported all of the wrong stuff. You would probably also be well served to store whatever was imported (the spreadsheet) so that you can reference it later in case fingers are being pointed. My initial thought is "If they can be put in spreadsheet one at a time, they can be entered in a web gui one at a time" and its much better suited to providing feedback / editing etc. Probably a process adjustment somewhere along the line that could make things 100% better. If they are not entering them one at a time and they are getting them from somewhere else, then the question just pushes on up the chain. You need to know if they are trying to reinvent the wheel by hacking together some sort of CRM, if they are pulling data out of a CRM or something similar (for some unknown reason.. but it happens). Also, its important to consider that validation only handles the most egregious of mistakes. Things you would see and say "Oh, thats obviously not going to work" someone like "Bill" may not understand. Like it being a bad idea to have 18 different "formats" for "First Name". I've seen clients that just shove anything in there. It might be "Sally and her husband", or "Bill from Megacorp" or "Jim and Susan", maybe even "Janitor". The end result was that a great deal of their data was very poor in terms of quality. This may not seem like a problem until you go to generate a mass email and want to fill in some blanks with "First Name" and find out that half of the fields don't really contain what they should contain.
warmans take on the solution is probably a good way to do that. Also please try to take the advice above. Why can't bill input the data using a a standard form which you build. There is a reason it's the standard way of data entry.
Very good point. Didn't think about cryptic feedback for the user. &gt;"If they can be put in spreadsheet one at a time, they can be entered in a web gui one at a time This is also a good thought, but I'm not sure if I can force this for my project. But I totally agree!
&gt; Why can't bill input the data using a a standard form which you build. There is a reason it's the standard way of data entry. Totally agree here! But unfortunately, I can't force this issue in my project.
Really tired of seeing self-touted "how to make X more secure" articles that always trot out the same useless modifications. Most of this is in the default configuration, and the stuff that isn't is generally more broken than working in the first place (safe_mode, open_basedir)
This might beat that foreach: $outputArray[$i] = array_combine($headers, $row); 
And also checking that each row has the correct number of columns (compared with the header), can be good.
In the amount of time it takes moronometer to code out, test, and deploy this application, would the business not just be better off buying Bill a copy of Excel or hooking him up with Google Spreadsheet? How often are you planning to use this code? I wouldn't even use PHP for this. It's slow and cumbersome, and there's too much that can go wrong (SQL injection, screwy data, etc). You're reinventing the wheel. If getting Bill to use an already-developed spreadsheet program is out of the question, I'd suggest you, the programmer/database guru, look into the [LOAD DATA INFILE](http://dev.mysql.com/doc/refman/5.1/en/load-data.html) command in MySQL to help Bill out this one time, then go on with your life.
You may not be able to force the issue, but you can state your concerns upfront (in an email!) to cya when something goes wrong.
Yeah, nice i knew there was a better way on that. Just couldn't think of it.
SQL injection is only an issue if you don't use msqli. Its speed is not a concern at all (you have millions of users to import or something?). The csv files exist so unless he is creating them by hand in notepad, he already has Excel (or calc). If there was an already developed spreadsheet program, they probably wouldnt need a way to import users into another program. I'd also think its fair to say that he has indicated he does not have much control over this and that a one off import is not what they are looking for. Surely a "programmer / database guru" can tell the difference between a one off task and something that is going to need to be repeated.
Oh for sure. There will be a record of this haha
I fear you have misunderstood the application. The is a PHP-based webware system. Users need profile info which can be completely customized. Example- client can define the field "Age" and now accept "Age" data for each user. When importing a large number of users, it is easier for the client to prepare a single spreadsheet containing all the info, versus using the webware edit screens (designed to handle one user at a time). What makes this so tricky is that the questions themselves, plus all the info in the CSV, is user-defined (for better or worse). Ya dig? 
To make a portal, you must first invent the universe.
 'page' doesn't translate to anything in MVC. a single action with a single view can output anything from none to infinite number of different html pages. you usually only have no more then a single action for all the 'static' pages, along with maybe a few other actions for rendering different parts that make out the template (news feeds etc). so a new 'page' is nothing more then an html fragment rendered by the view either from a single file, or anywhere else (db etc). the correct 'page' can be decided by the action according to the routing (perhaps communicating with a static pages model). 
Sorry, I misunderstood your question. I thought you received a "Bill wants a million records in the database by the end of the day" sort of question, and you weren't sure how to tell Bill why this was a bad idea. Need more coffee!
No need to be snarky, I misunderstood what he was asking. &gt; speed is not a concern at all (you have millions of users to import or something?) I do, actually. Speed, memory, and security issues with new features are constantly on my mind. If something went pear-shaped on the users database because marketing wanted the ability to edit everybody at once, I'd be yelled at for not doing due-diligence on the risks of the request and be shown the door. Questions like this absolutely have to be asked.
Something about [portal](http://en.wikipedia.org/wiki/Portal_%28video_game%29) and [cakes](http://3.bp.blogspot.com/_cd6_MFUGTUE/TI-qhkYbt0I/AAAAAAAAAV8/wJHhnJVi8Lo/s1600/the_cake_is_a_lie_portal.jpg).
Can we make apple pie afterwards?
If($error) {$me-&gt;drink-&gt;coffee();}
Update: here was my approach 1. User defines CSV file (uploads it), plus which "role" these users belong to (which loads a customized form for that role). 2. System attempts to purge CSV using default delimiters w/ fgetcsv. It creates two arrays- the first is the header row (assuming this is column titles) and the second is all other data. 3. If we have any obvious errors- e.g. not a CSV file, errors parsing, etc, we stop and show errors. However, some "garbage" files may survive to this point by sheer luck. 4. User maps the header array (from CSV) with the custom fields (defined by role) 5. We show a table to the user, which shows exactly what the system is about to import. Example: [fname] Bill [lname] Smith [role] Marketing [grade] C+ [notes] Not very bright; ignores my emails (imagine the above in a normal horizontal table) At this point, any errors will be apparent (probably as a missing field, or the wrong info in a given field). This way the user can review and approve the import BEFORE we add 100+ user records that are all messed up and must be removed again. Your thoughts? 
&gt; Why can't bill input the data using a a standard form which you build? Always the best option. In this case, we are adding a large number of records which already exist in an older system. A "mass import" ability makes sense here. The issue is Bill's ability to create a usable CSV, and dealing with the errors he will inevitably bump up against. 
So how many users would you have to import at one time before speed became an issue that would make you want to do this in a different way? Security is already spoken for (this is a "you must do this" task not up for argument) and what features may be requested later on does not seem to fit the context of the post so they may want to edit all users at the same time at a later date, but I don't think that has anything to do with the post.
Since you asked, here's what went through my mind: * how much memory is on your server? It goes to reason that if you don't need hundreds of thousands of users loaded into memory at once, you shouldn't. It may be great for debugging, but not so great in production. * What are the memory and execution time limits in your instance of PHP? * what's the effect of running this script during peak usage time? * what's the effect of more than one person running this script? Is the database locked during the edit/dump process? Or is Susie from Marketing going to open it up while Bob is also working on it? 
So you think that some language other than php would be significantly better? That the database would not be the bottleneck? Not sure why you would need hundreds of thousands of users loaded into memory at the same time for importing, but would having hundreds of thousands of users loaded into memory be significantly better in a different language? How many users would you have to attempt to import at one time before that would be an issue with PHP when considering execution time, where it would not be an issue with another language? Would multiple people running the script be better in one language over another? Is PHP unsuited in that respect in some way that another language could do better?
Thanks, that was nearly trivial to implement!
How did SimplePie get to be so dang awesome? :) Seriously, thank you for it.
Not really so fine.
There are good reasons why CSV parsing functions exist. - Individual CSV rows may span more than one line. You should not expect CSV rows to be terminated by the first linefeed encountered. - CSV entries may contain string values which contain the delimiter. CSV parsers understand escaping rules, explode does not. For example: foo,bar,baz,"Blah, Blah ""Blah"" Blah" is a valid single CSV row that when parsed would be * foo * bar * baz * Blah, Blah(linefeed here)"Blah" Blah Never use explode() to parse CSV.
 Name, Address "lorem", "ipsum, dolor, sit, amed" That one won't quite do it.
use a cms. phpnuke is the best. so you can say, hey i had nuked my site :) kidding. you can use any framework under the sun. the best for me is my drupal website. it had a cms, and has the best documentation, and is easily extensible. tons of plugins, tons of ways to customize it. learning it may take a month of systematically following every customization tutorial on the web, but once you get the hang of it, it's like magic.
I agree 100%. However, at the time of writing the solution I was thinking of numbers being the row data. Also, I was not aware of the csv parser class so TIL :D
It isn't a class, it's just a collection of functions much like many other things in php.
It wasn't my intention to call out any issue with PHP, but to point out some concerns with the idea that the OP may not have considered. You're right - none of those is an issue with PHP specifically, but the OP would do well to protect the database from bottlenecking if he can avoid it. He said he wanted to build up a multidimensional array from a CSV file - pardon me for then assuming he wanted all of his users in an array, and pointing out why that wouldn't be such a good idea. Before the question was clarified to me, I was trying to indicate that this seemingly one-off request would be better suited for MySQL's data import utility. And it would be, if he were only loading it up once.
[Logged.](https://github.com/mcordingley/PHPStats/issues/10) I'll get to working on that after I get what I have in release ready. 
My point was that exposing phpMyAdmin is a bad idea. I did not define "production", but my intent was any system not exclusively available for development. I think that is a well accepted definition. Threats come from inside as well as outside.
i preferred to use SplFileObject with these options DROP_NEW_LINE | SKIP_EMPTY | READ_CSV instead of fgetcsv so i can subclass it and feed in my own set of options in a standard way. Since some of the sheets i've had to import have had single object data across multiple lines, i subclassed it for those custom files .I was able to keep that formatting logic contained to the subclass without hacking up the logic of the generic import code.
link to the lovely class [SplFileObject](http://www.php.net/manual/en/class.splfileobject.php) 
Why not write it from scratch? If you're a beginner, it would be good experience.
if a beginner wants to make a site, don't use a framework. Also, jesus christ how many of these questions are we going to have?
I have good reason to believe this error is on Twilio's end (what I am trying to work with/grab the remote .mp3's from), but am not 100% certain. If anyone could chime that would be greeeaaatt!
This is a pretty basic but solid way to read csv's. You'd want to string replace the \n and \r newline chars though.
Thanks. :) I could really use some help with putting this in. I've added a namespace to each class file, but my concern about following the PSR-0 standard is that I'll end up with ridiculously long class names, like ProbabilityDistribution_ContinuousDistribution_CauchyIsATroll, but neither do I want to flatten out the directory structure, since I'll then have a mess of files all together. The other thing is that I'm having a hard time finding anything on the actual use of the SplClassLoader. I've dropped in a class/file for it in the lib/ folder. Do I put in a short declaration in each file, or do I write something up in its own file in the project root for it? Thanks again!
I think showing the table to the user for their confirmation that the data is alright is a good idea. At this point, I think we can mitigate any garbage files that get past the first two points. My only concern are those damn delimiters! Commas, semicolons, quotes in the field with commas and/or semicolons! Argh.
Try the same code with a different song, and then with a different host, and see if you can find where the error is introduced that way. If it occurs on all of those scenarios then you know for sure that the error is in your code. Also maybe try a different MP3 player?
I dont really understand - does loops once mean that the file plays twice? Check the file size - is it twice as big as the original?
This is not correct: &gt; 12. Do not copy extra variables &gt; &gt; Some people like to make their code more appealing by copying predefined variables to smaller-named variables. However, this is bad coding practices and hurt the performance and potentially double the memory usage of your script." Wrong! Simply not true. PHP uses COW (copy on write), which means that copying a variable (especially an array) uses no extra memory at all until you modify the array. The other stuff in here is reasonably correct, but pretty useless since nothing is properly explained.
Yeah seems like its dumping 2 mp3's into one file.
10+ PHP Best Practices and the article starts off by using mysql_ native functions instead of PDO and also in the end recommends using mysql_real_escape_string for proper SQL injection prevention... sorry but, next! Other than that, good logical tips for noobies on there like deep nesting, functions in loops and caches.
I've had success using [parse-csv-for-php](http://code.google.com/p/parsecsv-for-php/) in the past. It has pretty good auto-delimiter detaction, handles enclosed values(single / double quote) fairly well. In fact, I've used it for user import with great success, though as someone else suggested, I dump the data out as a table for verification before anything gets written to the DB
actually, I did, I commented on the article with a summary of things mentioned here and he deleted the comment ... so fuck him!
I was going to say the exact same thing. Lots of bad (or at least inaccurate) advice in this article... (actually, in every article this user has posted)
There are several things that that statement doesn't cover, though. The first, and foremost, is that the rule is specifically applied to when your conditional data doesn't change. If your count($var) is static, then only call it once. If your conditional data changes as part of the loop then it needs to be re-evaluated. Whether that's done inside the conditional or at the end of the loop itself is (largely) academic; It's actually better to do it in the conditional section because you're less likely to have to repeat your conditional-check code if you have multiple "continue"s in your loop.
Does the filesize of the copied file change from the original? 
Always a bit wary of making blanket statements but I'd say if there's an SPL version of a native php function always use SPL. It always makes for much better quality code in my experience (due to being OO from the ground up).
If anyone can think of a clever PHP script to look through a CSV file and make an intelligent guess as to which delimiter is being used, I would be most impressed. Playing around I tried counting the most common punctuation, figuring that would be the delimiter. Wrong. I found a field "full, of, annoying, stuff, like, this". My next attempt was to run the CSV file past some REGEX rules to determine which delimiter is being used. Ex: '/\"[A-Za-z0-9[:punct:][:space:]]\"(.*) \"[A-Za-z0-9[:punct:][:space:]]\"/U' Warning- the above code is **wrong**- my REGEX sucks, test thoroughly. You should get the idea though- basically I'm trying to see which delimiter is separating the fields. This worked better than the count method above, but still imperfect. My "production" solution assumes a (comma) delimiter, and has an "advanced" option (tucked away on another expandable panel) to allow users to edit this. In practice, I figure I can use NeoOffice to take "Bill from Marketing's" garbage CSVs and massage them into something my PHP script will accept. 
Could you provide more information: * Do you have any experience in programming? * Do you want to simply set up a portal or would you like to build it by yourself? * What do you mean by *portal*? If you want to build application by yourself and you don't have much experience, Symfony may be to advance for you. It offers the best practices but it require a good understanding of object oriented programming and workflow of web application. CakePHP is much simpler and it should be easier to learn basics using it. 
Yeah, specifically is the copied version twice as big?
ok, thats what i thought that cakephp may be easier no wexperience in programming but the desire to make a custom portal - , so wordpress and drupal wont do it probably 
Maybe we should direct all of these beginner questions to r/phphelp?* Or direct them to ##php on freenode and sit back with a box of popcorn to watch the body parts fly? Edit 1:* As in moderate them, I would like to see more PHP news/articles on here as opposed to the hundreds of questions here. Edit 2: Or send them all to stackoverflow where they belong.
I like drupal, some of the nuke forks also integrate well.
Take a day (or 5), build him an admin console backed by mysql or sqlite... seriously, as a person who's lived through CSV/XLS hell and "[Name] from [Marketing/Sales/Warehouse]" at the end of the day rolling them a nice little admin interface to modify, update, delete data will cost you more time up front, but save your days in the long run.
http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton mysql&gt; SELECT INET_ATON('10.0.5.9'); -&gt; 167773449 mysql&gt; SELECT INET_NTOA(167773449); -&gt; '10.0.5.9' I do think you've got premature optimization syndrome... but it's a good way to learn new stuff. EDIT: I just re-read your question and I've decided I'm not sure what you're asking... have you looked at how Doctrine does this sort of thing? Worrying about the type of something is a bit... weird. If I'm using your model, then it's up to me to learn what type your storing an IP address in. Doctrine lets you define all this in a .yaml file so you can say I have a table called [person] with [name] column which is a [string] then it generates the database table and the PHP model files that use that table. Doctrine is an ORM, so the back end (MySQL) is almost pluggable, you can replace it with something else, the theory is that you're interested in the PHP objects, not so interested in how they're stored.
PHP is already secured. Your application is the one that's not secured.
That's a poor attitude to take to security.
What's with PHP bloggers and this exact content? Just a couple of days we had the same thing, it's like there's a whole world of PHP developers who do nothing but write about the same absolutely basic concepts every other week. I don't mean to shoot you down or anything, and the article is well written, but there's a lot more interesting things to read and write about than the 50000th re-wording of some php.net manual entry.
Oh good, you got it! Sorry if the question was misleading, I was having a tough time putting it into words. Okay, so in my mind storing the type as a string in the db is bad for memory (20-ish bytes vs 1) and bad for speed (not only is tinyint faster to search but using type as a varchar would make it the only nonfinite length field, and finite length rows are faster to search), so using an int in db is way better. I'd also like the calls to insert and check to be human readable (so 'login_attempt' and 'register_attempt') for simplicity's sake. The hardest part is where to do the mapping. I *could* have a little comment area at the top of the flood model with the mapping and when any controller wants to use it they check into the flood model and add a new mapping, but that seems completely against simplicity since it requires setup. I was just wondering if there was a better way to do it than a separate table with the mappings.
You are right, this is a bit of a beaten horse. I have a whole series of PHP related posts planned (some of which are already written) and I guess I just had to get this one over and done with. I hope my future posts about things like moving from Procedural to OOP and proper class usage will be more useful.
This is based in Guelph, Ontario, Canada. The first meeting was quite good. Ilia Alshanetsky, a core developer, spoke about hidden features of PHP. I found the [INI `auto_prepend_file` and `auto_append_file` directives](http://php.net/manual/en/ini.core.php) to be particularly interesting.
I should have been more clear: I meant how many more of these "Which framework is best framework" questions are we going to have.
The [ENUM](http://dev.mysql.com/doc/refman/5.0/en/enum.html) type is what you are looking for. It uses "1 or 2 bytes, depending on the number of enumeration values (65,535 values maximum)", see http://dev.mysql.com/doc/refman/5.0/en/storage-requirements.html 
Watch out for ENUMs when you decide that you'd like to add/edit/remove one of the options. MySQL has to go through all of the rows and update them. Or, at least, it did at one point. Worth researching before using.
A few bytes isn't going to slow anything down. This type of "optimization" will only cause a headache for anybody who has to maintain the code or use the library in the future, including you. Believe it or not, RDBMS vendors know a thing or two about optimizing indexes for various field types. That's nothing to concern yourself with. Just index the field and let the DB do the work. In this case, there is no difference between integer or string types, or even fixed- versus variable-length rows. Your best bet would be to use a group of constants with clear string values. Use the constants in your code to refer to the value (as thefool88 suggests). This makes things clear for any other code which may need to look at the table, as well as for somebody digging through the table manually.
Not sure Doctrine is the way to go for somebody fretting so much over performance. :-)
nice post, thanks
&gt;don't use a framework shooting self in the foot.
I know :( I just get really perfectionist when I refactor my code for future use because I'm hoping it will be the last time I write it ever. And that's kind of what I was going for; no matter what controller calls flood, as long as they're consistent with their `type` (or first parameter), all they have to use is insert and check and it'll just work with no more configuration. All of this mapping takes place in flood itself, so it's invisible to the calling controller. It's just kind of hard for me to wrap my head around it since php doesn't share state so there's no good way to add mappings to the flood model without doing it manually in the model (which is against the simplicity I want for the controller) or using mysql to save the mappings (which I worry will ruin any effort I've put into mapping in the first place). I think the best lesson to take away from this is don't prematurely optimize haha. Thanks for the help!
Based on your edit, you might be looking for a lookup table. In your cars example, you might have a couple of tables, which look like this: CREATE TABLE `makes` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `make` VARCHAR(60) NOT NULL , PRIMARY KEY (`id`)); CREATE TABLE `models` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `make` INT UNSIGNED NOT NULL , `model` VARCHAR(60) NOT NULL , PRIMARY KEY (`id`); You might attach a foreign key constraint for models.make to makes.id as well. the makes table would hold all the information about a given vehicle make. The models table would hold the data for each model, categorized by make (using the integer ID from the make table). This approach would allow your application to dynamically add or change makes and models without having to manage any code changes. This is a very common design pattern, and this is exactly what relational databases are for. The other approach, mentioned briefly in your original post, is to maintain the makes in code and reference them through some form of in-code lookup. So instead of a makes table, you might have this: &lt;?php class Makes { const "MERCEDES" = 1; const "BMW" = 2; const "CHEVROLET" = 3; } This method can and will quickly turn into a nightmare, and saves very little in terms of performance. If you really want to worry about performance from the database, this is NOT the way to address it.
The best way to ensure future refactoring is to prematurely optimize. :-)
Doctrine is pretty good for performance. If you hit a bottleneck query, or something that appears sub-optimal, it's pretty easy to go in and write a manual query without changing your model's interface. It's nice to have the ease-of-use when you need it, and be able to get back real model objects from SQL when you don't.
Haha that wouldn't necessarily be awkward, could give us the ability to collaborate a lot better! But yeah, Im down for a meetup that consists of more than two people. Know anybody else (even if they aren't a redditor) that would be down for a PHP meetup? Let's make this happen!
Let's make this happen! Im down to meetup, even if you have friends that aren't redditors, but love PHP, the more the merrier! 
From a "proper" database design your first answer is correct, I can't imagine anyone would store these as constants or enums... However you don't really want your foreign key column to be named the same as your value column. OP should do the tables something like: CREATE TABLE `makes` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `make` VARCHAR(60) NOT NULL , PRIMARY KEY (`id`)); CREATE TABLE `models` ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `make_id` INT UNSIGNED NOT NULL , ... PRIMARY KEY (`id`), KEY `make_id` ('make_id'); To get your data you do: SELECT models.*, makes.make FROM models LEFT JOIN makes ON makes.id = models.make_id; Constants in PHP? That's too much of a mess if you ever want to change anything, now suddenly your data in the database may be corrupted. enums? Enums make it much more difficult to get a complete list of your makes and also make it impossible to do inner joins and such against makes if ever needed. Doing a proper relation in the database gives you flexibility in how the data is fetched, filtered and sorted.
Tinyints are a misfeature. You really want to prefer ints that match the processors native size....so in other words a vanilla int.
You're absolutely right, I must have forgotten everything I learned from that mysql book. I suppose it just slipped my mind since the mapping is so small and I'm used to database relations being enormous. Thanks!
You might also check if the site implements RSS; if so, then you could have deal with a known-good XML datasource that _should_ be much easier to work with then the HTML. RSS doesn't always include the full content, though, so be warned. On the other hand, sometime it will include the full article and yet omit the ads and other content.
You're right re: column naming. I typed that out quickly without thinking too much of the actual modeling. An oversight on my part. :-) Thank you for pointing that out. 
lol - too true :)
&gt; Obviously storing make as varchar would be way slower than mapping bmw=&gt;0, mercedes=&gt;1 and audi=&gt;2 and storing as a tinyint. *Obviously?* Don't bet on it. There are indexes that will make this a moot point, because what you think you are storing is not necessarily what gets indexed, if you choose the indexes right. In my experience, keeping stored data in a readable and understandable format pays dividends many times over later in the project.
Here's my functions. Feel free to use them/add them to your own class etc: function csv_to_array($file, $header_split=true, $all_lowercase=true, $key_space_convert=false) { print "Reading CSV: \r"; if (($handle = fopen($file, "r")) !== FALSE) { while (($temp[] = fgetcsv($handle)) !== FALSE) { print 'Reading CSV: ' .cli_spinner(); } fclose($handle); } else { print "ERROR: Could not open $file\n"; exit; } $ret = Array(); if ($header_split) { //create header map $temp2 = Array(); $temp2 = $temp[0]; unset($temp[0]); $headers = Array(); foreach ($temp2 as $hc =&gt; $h) { if ($all_lowercase) $headers[$hc] = strtolower(trim($h)); else $headers[$hc] = trim($h); if ($key_space_convert) { $headers[$hc] = str_replace(' ', '_', $headers[$hc]); } } $header_count = count($headers); $rc = 0; foreach ($temp as $ts) { if (count($ts) == $header_count) { foreach ($ts as $tc =&gt; $t) { if ($all_lowercase) $ret[$rc][$headers[$tc]] = strtolower($t); else $ret[$rc][$headers[$tc]] = $t; } $rc++; } } } else { if ($all_lowercase) { foreach ($temp as $row =&gt; $ts) { if (count($ts) &gt; 0) { foreach ($ts as $key =&gt; $val) $ret[$row][$key] = strtolower($val); } } } else $ret = $temp; } print "Reading CSV: DONE!\n"; return $ret; } function cli_spinner() { static $num; $star = Array('/', '-', '\\', '|'); $last = 5; if (!$num) $num = 0; if ($num == $last) $num = 0; $ret = $star[$num]; $num++; return $ret . "\r"; } This is obviously meant for the cli, but you could edit the spinner or remove it and the print statements for the web side.
I'm always down for a meetup of some kind, especially when tech-talk is expected... Not a lot of friends that code php though, most are those weird cubicle-inhabiting java weirdoes, and also live on the east coast...
Use enums!
Both wordpress and drupal are highly customizable. There is a tons of plugins and tutorial available especially for the first. I'm not sure what exactly you want to build but I'm sure there is a plugin to wordpress for it ;-) Give it a shot! If you still want to build it by yourself from scratch remember that programming is not that simple like it may look like... Start from something simple (like news system, believe me it will be a challenge), buy a book about basics, learn from more experience people - read their code, learn object oriented programming, design patterns, then you can start using frameworks... and start thinking about serious applications. I won't lie to you it won't be easy. But it's also a great adventure - you will learn a lot. The question is, do you have a time and self-denial to finish it? You can also hire a developer. It won't be cheap if you want a decent one. Experience and knowledge costs. Building a good portal will costs a lot of money.. no seriously.. a big money. Don't believe in cheap offers - you will get poor quality, un-maintainable code that can cost you ten times more money you did pay for it.
Humm. Apparently every framework is the best at everything.
Hey I just wanted to say thank you to everyone who chimed in. Turned out I was already doing all the things suggested. Now I feel better about the security of this application. Opening with imagick would probably be the simplest way to deal with not saving a file that is not actually an image. 
Okay, same here.. I have a couple non-redditor friend that code PHP that still may be interested in coming and geeking it up with some tech talk. Where are you located? My friends and I would be from Orange County, but we could meetup anywhere nearby.
I've programmed in both CodeIgniter and CakePHP. I think CodeIgniter has the better docs. CakePHP has some nice tutorials though.
SYMFONY NOT SYMPHONY! www.symfony.com
&gt; I hope my future posts about things like moving from Procedural to OOP and proper class usage will be more useful. Just make sure you understand it before you start writing about it. If you get it wrong, a lot of programmers will jump on you for it.
I'm having a similiar experience. I think CakePHP is a fine framework, but my big gripe with it thus far is it seems to be very brutal on the SQL server. Sends more queries than it needs to. I know you will all scream that this is because of the developers not the framework but I still worry about Cakes ability to handle large sites just looking at how this thing is put together. It seems it becomes very easy for developers to just keep tacking on uses and hasmany etc...
I don't think there is a benefit besides being quicker to write and more compact code. If you feel more comfortable writing it all out, go for it.
I don't know, I can see benefits for setting up the class with a single entry point. Say if your database access class is a singleton, wouldn't you want to make sure the connection is always there before you call method? A getInstance() method could always check that, instead of having it in every method. Or perhaps the state of the class depends on what you pass to getInstance(). For example, you have a read only method that doesn't depend on up to date information you can call a slave database instead of your master. So you could do getInstance('slave')-&gt;Retrieve(...), instead of getInstance('master')-&gt;Retrieve(...). Just thinking out loud.
There are totally advantages for using constructors in classes, I agree. PHP classes are sometimes used as just a namespace, in which case it is really just a group of functions and not used for creating actual objects. In the case of using a class as a namespace, there is no need for a constructor, in my opinion.
Singletons may have some use, but they are considered an anti pattern by many. Personally, I haven't found many legitimate uses for a singleton which couldn't be solved with smarter object management. 
Definitely, I guess my point to the OP would be more: apply the right solutions to the right problems. Don't just *always* use singletons or *always* use static methods for some arbitrary reason.
Truly depends on the system. Hate to sound generic. Some things you will absolutely have to have in place though: a CND (Content Distribution Network), Load Balancers (Design your app so it's stateless), Caching Caching Caching, and minified frontend. For frontend code you will want to make sure you use as few images as humanly possible. A single sprite could suffice and be utilized in many areas of your app. Combine and minify all of your JS and CSS files into a a single JS and single CSS file. Together this allows you to handle more concurrent requests and keeps your bandwidth as low as possible. In terms of backend code I think PHP is perfectly sufficient. Sure, you could use Java if you want to erk out a little more performance, but these days quick iterative development is the way to go and you're further on your way to achieving that with PHP, Python, Rails, etc than you are with non-dynamic languages. If we are serving millions of users I would avoid using frameworks at all if possible. Systems like CodeIgniter are FANTASTIC, but under such high load you need to cast away the bloat in favor of higher performance code. That said, I would either write your own framework, or use one that is minimal such as Kohana, or one that is well-tested under load such as Zend Framework. 
Really depends on where the bottlenecks of the site are (besides the obvious database queries). Are there a million small queries a minute or 1000 huge 10+ second ones a minute? Are we doing a lot of background work or is it mostly static content? What all is caching an option for, and how long is a cache appropriate for? etc etc.
I sure hope not.
Different ones than I'm ever going to use for a project. Thus, not particularly of concern for me. If you think you're going to have millions of users but have to ask this question, you're almost certainly wrong.
You are listing quite a few untruths or opinions as facts. 
Smarty is used by many Comedy Central websites with lots of usage. 
There are scenarios where some concepts of the singleton pattern can be useful, but it's a slippery slope. I like this particular article on the subject: [Singletons are Pathological Liars](http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/) - Miško Hevery
Whatever I was most comfortable and proficient in. Just plain PHP is fine if that's what you're good at. It worked fine for Mark Zuckerberg.
A lot of what you say is almost universally true: &gt; Until a few years ago, [...] used to be buggy, insecure Yup. Most software is like that at some point, some for longer than others. I don't see PHP as being as bad as a lot of other software; no worse anyway. &gt; Especially in comparison to alternatives You could almost compare any two pieces of software and find things in one that are better than the other. &gt; gradually lost market share to its more "modern" alternatives. When something new comes out, people try it. *cough*google+*cough* &gt; began to add nice features Software gaining new features?! How revolutionary! :-P &gt; fix a lot of long-standing security problems See point #1 &gt; Many of those problems were originally introduced in the name of making [...] easier to use. Also very common, I would imagine. Can't think of any specific examples at the moment. &gt; The latest version [...] is much nicer to use than previous versions. Yep. &gt; Some people even say that it is now up to par with its alternatives. And some will say its better, some will say its worse. Yep, you can pretty much substitute most software titles in and the points still work. :) BTW: No offense meant, mostly comedy and truth. ^_^ Edit: formatting.
PHP was never as bad as IE was at their worst, nor is IE now as good as PHP at its best.
Usually when someone tells me they want help building a multimillion-user web site, the resulting project never makes it out of a Photoshop file, so I honestly couldn't tell you.
&gt; lost market share [Yeah, no.](http://w3techs.com/technologies/history_overview/programming_language/ms/q) 
PHP has not been inherently insecure since php3, it is people changing default settings to make php3 code work in php5 which makes it insecure. Every language has security gotchas, you just have to make sure you validate / sanitise and make sure you don't create security holes yourself.
I would go with PHP, using NGINX for server software, and caching with APC/memcached.
get a vps and a domain to stash all your development sites as subdomains. then you can setup the kind of flexibility you need. once the site is ready you can deploy from there.
i don't think you can really compare them as easily. Mostly because web developers were stuck dealing with the browsers people were using. You can't force people to change browsers, but you can choose whatever software you want on the server side as long as it spits out html.
Database connection initialization is a great time to use singletons. The same goes for other similar things (perhaps you have some sort of 'settings' object that initially pulls its data from the db but then caches it into an associative array).
Never thought of getting the vps part yet but that does sound like the best plan. Any recommendations?... had been recently tempted to try Linode so that could work. For now I might just suck it up and use relative paths to load my initial config files and then start working on this solution shortly after the projects done. Setting up the domain to the vps and all that will take some reading on my part since I only recently have been getting into the server-side of things.
G-WAN web server Otherwise, php/python with caching, mongo/reddis etc.
G-WAN is fine for static assets, extremely unreliable and untested otherwise.
I'm the head developer of a website with currently 1.8 million users in the users table. I manage all of the servers and basically do most of the big coding. When I was given the specs for the website, I never thought it would amount to much, but over the few years that it has been around, it has grown quite nice. I'm not CEO of the company, just the tech guy. I work with two graphics guys and two other programmers that do a bunch of different small things with the site. Like I said, site started small and grew over time. Original site was basically 2 webservers, a database server and an email/random scripts and management stuff. It has grown to 10 webservers, 6 database servers, 4 nfs image/shared docs and crap servers, a few memcache, email and various other random servers. One thing I stress is have more servers than you need, but not too many more. Right now, the webservers are have a .20 load and that is usually about average, maybe a little higher than normal. I could get away with 6 or even 4 webservers, but being the only guy that manages stuff, if there is a spike or a bunch of traffic, I really don't have to deal with it. As for language and database, I went with the standard php/mysql stack. I went with it in the beginning because I knew it best and while I didn't know how big the site would get, I knew it would scale, and that it has. One thing I am glad however is that I didn't go with a framework. I feel at this point if I used one of the feature rich frameworks, my webservers would be be screaming for a break. Too much overhead and too much complexity for the frameworks. Yes, I have had to rewrite a bunch of things from the database classes to interact with memcache servers and master/slave configurations, but the speed I get with it has been worth it. I'm not saying all frameworks would have not worked for this, but I'm happy with my decision not to. Some important things that I've learned are to go over your queries and index your tables very carefully. There are some great resources on writing better queries and the proper way to index that really help speed things up when your database becomes the bottleneck. Add caching in when you can. Not just memcache for your database calls, but go even further. On our home page, we have stats like users, logged in during the last day, etc. Don't run that query for every page load, run it every 15 minutes in a cron job and save it to a text file and read it when you load the page. Less trips to the database, the better. Cache the crap out of your user's data and store it in their session. Don't go overboard with the amount of data, but if you call something that you can cache and does not change often, even if it is used 1 out of 10 page loads, cache it! Find ways to distribute or shard your database. Don't have all the big tables on one database server, but be careful with joins if you do that. If you do shard a table, make sure it's not one where you need to get data from every shard when you call it, that almost defeats the point. Do not however do this to your tables unless you have to. I did this later when there were 10 million or more rows in a table. For small tables, it's just not worth the hassle or slight overhead. And finally, don't think 10 steps ahead, think 1 or two. You don't need to do any of this in the first version of you site, but they are things to keep in mind. If I had all this technology in the first version with 500 users, our site would be slow for no reason, but with all this, it keeps everything quick for the amount of users. Never stop learning and thinking about ways to improve your site. Plan things out and have a game plan before you dive in.
Can't upvote this enough. Global state is really bad for testability in TDD.
This is the best reply in this thread.
linode is nice, or you could go the route of something like pagodabox, phpfog (now appfog), or orchestra.io. Linode might be best in that you can make the os, php,web server, and mysql versions match your webhost for less potential deployment compatibility issues. Ultimately i wouldn't recommend deploying software on any shared host, but we don't always get to make that choice :( But even if you go the product as a service route (appfog, etc) it is still no substitute for more indepth knowledge of the technologies you are harnessing
No. never a benefit. Never use a singleton. It is always bad design. Singletons also add extra behavior to a class which it shouldn't care about.
This is a great reply. I'd add really good monitoring (~~nation~~ nagios, ~~factions~~ cacti, etc.) as well as ideally being able to load test a staging environment via a tool like siege. **edit:** stupid phone spell correct! factions = cacti, nation = nagios above. 
The server host has to support the scripting environment as well.
Webfaction. Does exactly what you want. 
First of all, you need to understand this: Your website is never going to reach a million users.
Hmm never heard of these guys but liking what I see so far... thanks for the suggestion!
Awesome thanks for all the advice. Yeah unfortunately I get stuck using shared hosting accounts since most of what I build are independent websites. 
Not sure why you've been downvoted. Nginx is a totally valid alternative to Apache. Personally I think lighttpd is also quite.
First off, are we talking active users? Or visitors? Or just that many accounts? There is a huge difference between say 2 million visitors and 2 million logged in users. The former can be handled in almost any platform with static page caching. The latter is much much more complex. The other problem is premature optimization. I'm assuming this would be a new project, because otherwise you wouldn't really have any choice in what platform is being used. For a new project, writing it with millions of users in mind is likely a mistake. For most such projects, it's best to get the product out there and see how the market responds. You can worry about scaling it and/or rewriting it when the time comes. If you put a lot of effort into making it scale up front, statistically the odds are good that it will be a waste of time. Finally, the nature of the project is also something that would need to be considered. For example, I might turn to something like node.js for a project where that makes sense. I'd probably stick with PHP if I had legacy code or a platform setup where that works best. If I had my choice I'd probably do it in rails though, just because as a general rule it's what I find fastest for rapid application development as well as a lot of flexible options for serving up and load balancing your app. Certainly Java could be a good fit as well, and .Net/C# even. Heck you could do it all in C++. Or use hiphop php and convert your PHP to C++. In general I'd say what's more important is that you get the project out there and see if it'll be a success, rather than worrying about what you should write it with to prematurely scale. And even then, when it comes to scaling the techniques for almost any language are the same and will need to be utilized, though perhaps at different load levels.
I'm a Linux sys. admin and alot of our customers end up going with a load balanced site, LAMP stack, as it is one of our offerings. The way ours work is we have hardware load balancers. a VIP IP (the front end IP you point your DNS to) then points to the web servers which have the "real" IP's (these IP's should not be given to the customers or used in your code, as that would defeat the purpose). Most customers just sync their webservers, and maybe setup a Datbase clustering with the Redhat cluster suite. If they need to cache static content, we also offer them CDN. We do host some traffic intensive sites, but I don't know exact numbers.
&gt;Design your app so it's stateless &gt;Minified frontend Very interesting. Can you elaborate on these?
Perhaps because he was telling people use his chosen technology/solution, which seems to miss the point of the parent comment - that the technology doesn't matter all that much as long as it's something you're comfortable with and proficient in.
Stateless: Don't store any state with the server running the code. Sessions and all other variable data should be a shared resource, so that a web frontend can crash and burn with no significant impact on service (other than the increased load on your other app servers).
Linux, Apache, MySQL (or PostgeSQL), PHP (Zend Framework + [APC + Memcached](http://www.slideshare.net/FordAntiTrust/php-performance-with-apc-memcached)), Git for version control (my personal preference, Subversion works too) and ease of deployment. Round-robin DNS for load balancing. Or if you can, set up [auto-scaling with Amazon EC2](http://aws.amazon.com/autoscaling/). Also read [this](http://stackoverflow.com/questions/1597930/architecture-of-a-php-app-on-amazon-ec2). Zend Framework because it's actively developed, has a large community and following, can handle the stress (when used properly, of course) and I know it very well. On top of that, using a framework makes it very easy to go directly where you need to in order to update something (although you can do the same thing with a well-structured application and excellent coding standards). Just make sure you document everything. 
Ps. who down votes a legitimate question?
Try putting up a demo.
Try using a framework or writing your own. That will at least save you from boilerplate CRUD code. When writing classes try and make them reusable. Don't crack out and go overboard, but try and think beyond the task at hand. Principals of OOP.
I've worked with CodeIgniter, CakePHP, and my own little framework. I prefer CodeIgniter, good documentation, easy to learn, no conventions to follow. CakePHP certainly does a lot of stuff for you though. I like too free-style a bit more which is probably why I like CodeIgniter over CakePHP. Pick one, code, then try the other. Just make sure you choose an MVC one. Once you have one down you'll pick up the others easy. I actually need more from CI at this point and have started writing my own base models and controllers for all the others to extend. Yes it inches closer towards CakePHP, but like I said I likes to freestyle a bit ;-)
There aren't in PHP but MySQL has enums as a data type. It's a lot nicer than using an integer which means nothing when you come back to it. 
Being that you went with PHP/MySQL and did not go with a framework, do you find the php scripts to have become a mess of spaghetti code or do you have a well documented, standardized coding in place that you adhere to very strictly?
You'd be surprised by the crap code and products business runs on and then sells to other people. It's good your nervous. Its the morons who think they know what they are doing that worry me. You'd be amazed at the noob code companies allowed me to pump out while I was still green. Some advice. Just make sure to get all the requirements you can upfront, do good project management (use something simple to start with - I use taskfreak), make sure the applications UI looks decent and works well. When you release the code create a simple excel sheet of everything that must work, go through the checklist on each release. You'll be amazed at the bugs you find. When you miss one - add it the last for next time. Backup peoples data and try not to fuck up on production. One question though - why are you not just pumping out some wordpress sites for these people? Seems like a good solution for "Mom and Pop" local business.
I use my own local Ubuntu machine for development. For staging I use a hostgator account (they are cheap, no limits, have cron jobs etc, has SVN client, allows SSH access). When showing off sites/applications to people I just direct them to whateverblah.mysite.com. This handles the absolute paths and document root stuff you brought up and doesn't expose the staging site to the Internet and if you are worried about that just throw up a simple htaccess password and no-index robots.txt file. Don't bother with a VPS unless you need total control. VPS is too pricey for the disk, ram, and proc you get. I pay like $5-$7 per month for my hostgator.
I'm not a fan of Wordpress for starters. For the user base they are looking at an install of wordpress (or any other popular CMS, i'm a fan of Textpattern) would be too big of a hassle to keep maintained for every single customer. I know what you are saying, if it was me doing this on my own I'd likely use a prebuilt CMS for each customer, but it sounds like this could get too out of control user wise for something like that. Plus i like knowing how every nook and crany of a site tool works, inside and out.
&gt; Critics further argue that it is pointless to use a Singleton in a Shared Nothing Architecture like PHP where objects are unique within the Request only anyways. It is easier and cleaner to create collaborator object graphs by using Builders and Factory patterns once at the beginning of the Request. &gt; Singletons also violate several of the "SOLID" OOP design principles and the Law of Demeter. Singletons cannot be serialized. They cannot be subtyped (before PHP 5.3) and **won't be Garbage Collected because of the instance being stored as a static attribute of the Singleton**. [Source](http://php.net/manual/en/language.oop5.patterns.php)
Same here. We use them for load balancing our servers, proxying TCP connections, caching etc. They're a bit too easy to use. They tend to cause laziness in developers. "code optimisation!? But we've got those things! "
Something strange that stands out in my opinion: &gt; I feel at this point if I used one of the feature rich frameworks, my webservers would be be screaming for a break. You certainly are in the right place to talk about frameworks like that. But are there any other arguments besides your feeling? Did you compare for example small modules (one written with, one written without a framework)? If yes, what were the results? Frameworks will slow down an application. That's for sure. The question is, how much. I'd say that even a performance loss of about 50%, although very much unlikely to happen, would still be worth it. On the other hand you said you are the only one working on the "big stuff". One major advantage of frameworks is that you can easily read code others have written (of course if they understood what they're dealing with). As someone who has to dig through bad PHP spaghetti code now and then I am really happy that at least the applications I work with every day are written for frameworks.
I said "The developers don't enjoy using cake for the same reason most of us don't like how a lot of Rails works.". Maybe out of context that does not make sense, I was talking about the Fuel developers of which I am one, so "us". If you have learned via a conventional system then it makes perfect sense to you, if you have learned outside of that then conventions just get in the way. This is an argument I have over and over again with Rails developers who just fail to believe there are any limitations to their framework, of which I find many. At a basic level the difference is that I want to say "Do X" not "Please don't do Y".
I've been working on a site with &gt; 2 million daily actives. I wrote all the code for the backend and there is a lot of heavy backend processing as well. Everything had to be fast with this one and everything had to scale. MySQL was actually completely out of the question because it's just too slow and caching wasn't a good option because the keys would have been invalidated just as fast as they were created. A little background: I've coded in PHP, ruby, and Node.js and I've done a number of big projects in the first two and a few smaller projects in Node. The LAMP stack work I've done scaled to 300k DAU no problem for the bigger project but involved a bit of caching and used index servers to make sharding simpler. While PHP is alright, and node gets interesting to manage at a bigger size and has many challenges with respect to how long its been in development and is harder to code effectively in, Rails is almost seemingly perfectly built for any development work. We went with Rails and the database we chose was Redis because I had used it previously. It's fast. It's very fast. However, it's single threaded so if you do anything that is extremely CPU intensive with a huge number of threads pinging it at once, you have to realize that you're going to have to spread the CPU cycles over multiple redis shards. There are a few ways to do that, but you have to be able to realize that there are going to be bottlenecks and that it will be up to you to determine what those bottlenecks are and the best way of getting rid of them. Looking back at it, you can write it in any language, but I've found that Rails and Redis have been quite a duo. There are some places where I still use MySQL however, simply because Redis makes it very difficult to sort anything. But overall, I'd highly recommend the nginx-rails-redis stack. I'm sorry that this is in the PHP subreddit. I'm still a PHP programmer, but I think I've been converted.
A good talk, but he doesn't really show a practical replacement. As I understand it, he argues that instead of restricting one instantiation in the code, you just refrain from creating more than one object and pass it through dependency injection. Maybe I'm missing something, but it seems like that solution demands more than using a singleton and a few tricks to make it more easily testable.
I need one and only one instatiation of my database wrapper and configuration object. Right now singeltons solve that neatly. Testing is an issue, yes. But there's nothing stopping you from dependency injecting your singelton in the constructor of any class that requires it, and calling the default class if nothing is passed. That alone makes it possible to inject mock objects or test objects. I know I don't develop the most complex and demanding code there is, but I haven't come across a good reason to always avoid singletons at all cost. I certainly haven't found an alternative that is as functional and easy.
Isn't there a contradiction here? A singleton only exists in one request. Within that it can't be garbage collected, but does that mean it has an existance outside the request because it has static attributes? Isn't it cleaned up anyway once the request is over, and if so, why does this matter?
&gt; Add caching in when you can. Not just memcache for your database calls, but go even further. On our home page, we have stats like users, logged in during the last day, etc. Don't run that query for every page load, run it every 15 minutes in a cron job and save it to a text file and read it when you load the page. Less trips to the database, the better. Cache the crap out of your user's data and store it in their session. Don't go overboard with the amount of data, but if you call something that you can cache and does not change often, even if it is used 1 out of 10 page loads, cache it! This solution sounds like a tightly coupled hack that may introduces a lot of boiler plate code (if implemented in other parts of the app) targeted at a problem that is more generally solved by a caching mechanism. If you had a [framework with a capable caching system](http://www.mivesto.de/agavi/agavi-faq.html#caching_0), you could have implemented the same effect a lot quicker and using a general solution that can be deployed through out your application output in a very finely tuned way, I bet that would have lead to much more caching enabled. &gt; One thing I am glad however is that I didn't go with a framework. I feel at this point if I used one of the feature rich frameworks, my webservers would be be screaming for a break. I think your feeling is really misguided. Talking about run time complexity and memory footprint a well designed framework will have very small efficiency impact compared to your business logic on a moderetly complex application that operates on large data-sets. 
Oh yes. If you run a query the "cake way" to retrieve the user profiles of 500 users, it will run 500 queries. That's one of the things I noticed as well.
I'm a huge CI fan and believe it shouldn't be thrown on the same pile as other frameworks that are "slow". Rasmus himself said CI is the "least like a framework" when comparing them to all the rest. [This article](http://www.haughin.com/2008/02/13/optimizing-and-scaling-your-codeigniter-application/) runs a test that shows CI serving 45 req / sec out of the box. When you apply a whole array of caching methods it reaches 389 req / sec. I don't know how that compares to other frameworks, and I know these benchmarks are never like real world scenarios, but I'd be surprised if some one could come up with a good reason not to use CI when it's in the hands of a good developer.
Back in the day, people used to keep tons of data in user sessions and that would all be kept in memory. Users were always sent to the same web server via "sticky sessions" (session affinity). Stateless means you keep all state in shared databases/resources.
I work in a company that handles far more users than the parent poster has. Legally, I can't get into specific details, but let's just say "millions" is small here. Anyways, the point is simple: we use a framework, and are very aware of speed and performance. The key has been extensive caching. Actually, caching is our biggest bottleneck at the moment. Internal network traffic between caching servers. It's a very interesting problem to have. Regardless, having a framework is important. Even if you have to develop it in house, having some formal framework to develop applications will help in the long run. Frameworks get a bad reputation because they seem large, unwieldy, and slow. This is very rarely the case, especially when you consider caching all the other bottlenecks that you'll have to deal with. Honestly, at this point, I'd love to have a more popular framework in use here. It would not only make development much easier, but it would be easier to hire for.
So, a minified front end is great for end users and highly important, but putting all of your static content (css, js, imgs, etc.) on a CDN makes your server not have to deal with concurrent requests and bandwidth. So, as far as importance goes: CDN is your most important front end decision.
Monitoring is definitely key. Knowing the load, storage size and overall health of the servers is great. I've built a stats/benchmark system that I like to turn on every other week and get some stats. Usually after that is run I'll look over those results, check the slow query log, error log etc and look for ideas of where to go for performance changes. Some things may seem like small changes, but even rewriting a query to run in 25 ms faster can be a huge boost in page load time. And a staging environment helps greatly before we push everything live. Development server -&gt; staging server (where we minify js/css etc) -&gt; production servers. This really helps with not having a delays or bugs when updates come as well as a way to undo changes if we do find problems. 
I've worked quite a lot of CI. I do think it's a good framework, and I've changed a lot of things in it to suit me, but at large scale, you will end up with a mess.
We didn't go with a framework, but I feel our app is built in a framework, minus a lot of fat and things we don't need. It seems lightweight to me and I do think that someone coming from another framework would pick it up quickly. I try to document the code and add some comments here and there as well as keep my coding standardized. But then again, someone's amazing code could be spaghetti to someone else. I feel that there might be some places where others would not like my code, but I try to not over OOP things and not everything sticks to MVC standards. A lot of time, I will write something then later go back and change it. I do feel I am at an advantage because I am the main developer and not a lot of people have to mix coding styles with me. 
What do you guys think about Symfony2 as well? Maybe compared to Zend Framework?
You mean a mess in the way your code is organized? I get this a little bit as well but I'm sure that's my fault and not CI's. Surely it's just a matter of organizing everything in to the proper controllers, models and especially libraries?
Yeah, you will end up with a bunch of files and code together. It it developer's fault but it's hard to keep code clean in a framework targeted at small-medium projects while developing an enterprise application.
I now have an app with a few controllers that have 2000+ lines, which is a bit messy. If I could do it all over again I would place only methods that correspond directly to a URL in the controllers, and put all data processing stuff in libraries. That should help. In your experience, is it easier to organize files of an enterprise app in other frameworks?
Well, at the end of the day, it will always be developers fault, how you manage it. I've got a system, with around 40 controllers each of them of over 1k lines, and around 500 views, 50 tables in DB built on CI. Right now, it's a bit messy, and I would still say it's medium sized app. I can't imagine CI running a really big applications, but it's only because I've never knew it will become so big. Symfony2 for example, forces you to keep your code tidy and everything in separate places. I'm not sure about Zend because I've got very little experience with it. One day, we all start taking shortcuts, and we end up with a mess ;)
If there was a possibility of me having an idea for a website that'd be classed as a multimillion user site, I certainly wouldn't be the one coding it.
I've never heard of an SWF background without making that section of the site (or the whole site) in Flash. I could be wrong but I don't think it's possible since Flash sits on top of almost everything on a website despite changing the z-index. What's the background look like just out of curiosity?
In theory - entirely untested: 1) Setup SWF as normal inside a div, using CSS apply 100% width and 100% height. 2) Absolutely position the SWF to the top left of the screen. 3) Using z-index move the element containing your SWF behind all other content. 
The SWF background? It's a guy in full scuba gear exploring underwater.
To be fair, when I made that reply, people had downvoted the reply to -1.
I would go with the following: OS: Linux distro (I would go with Ubuntu/Debian) Language: PHP HTTP Server: NginX RDBS: MySQL NoSql: mongoDb (Cassandra and Solr are nice alternatives, but mongoDb is the easiest to use, with a nice PHP driver that's easy to work with). Caching Level: Memcache. Frameworks: Custom written (easier to maintain; no unnecessary overhead; easier to debug since it's your code). That's just a basic setup. Then, you need to get into things like load balancing and server distribution. That's a huge thing when dealing with websites that deal with high traffic levels. I try to have each application separate: the web application on one server, the API application (if required) on another, MySQL on a third, and mongoDb and memcached on a fourth server. Now, you just have to configure your code to call the appropriate server to get the appropriate code at the right time. This is an approach I use at work, and it's done well for us. It's not necessarily the right solution, but it's what works for us with our code.
Alternatives (most of them carry the same problems), Disclaimer: I didn't test them: Singleton Function: function static db($dsn = null) { static $db = null; if ($db == null &amp;&amp; $dsn != null) $db = new PDO($dsn); return $db; } // Config Phase: db('mydb'); // Usage Phase: $db = db(); Global State: // Config Phase: $db = new PDO('mydb'); // Usage Phase: function read() { global $db; } Dependency as Arguments: // Config Phase: $db = new PDO('mydb'); // Usage Phase: function read($db) { } read($db); Anonymous Function Dependencies: // Config Phase: $db = new PDO('mydb'); // Usage Phase: $read = function() use ($db) { } $read(); Trait Container (I'm really not sure if this creates singletons): // Config Phase trait Dependencies { static function db($dsn = null) { static $db = null; if ($db == null &amp;&amp; $dsn != null) $db = new PDO($dsn); return $db; } } // Usage Phase: class DB { use Dependencies; function __construct($dsn) { $this-&gt;db = $self::db($dsn); } function read() { $this-&gt;db-&gt;... } } What else? More Abstraction?
Instead of a pure singleton, add an appropriate "set" method for replacing the singleton object and then you get testability. If you've got a singleton database wrapper, for example, you can replace that object with a mock globally inside the tests. Since state is per-request this doesn't harm anything else.
You can change wmode on the Flash embed\object to transparent and it will sit into the page with z-index. However note, if theres animation going on and a lot of layers over Flash you're going to start killing browser performance as it will constantly need to render a page. Even putting a simple alpha transparency over the Flash object can be killer on performance. Honestly, there can really be a good usage for this unless the entire site is Flash which I always recommend against.
I hope I'm not being too forward about this, but having moving things on a website background is a little annoying and not always good practice in web design. I suppose if you had to, you could make something in HTML5/JavaScript to have a DIV where the scuba diver would be, absolute position it to the top-left corner with full width and scroll height, and place it in the back with a low z-index.
I'm sorry, but this has absolutely nothing to do with PHP.
Well, I figured it might because the Wordpress CMS is php.
By that token of thought, you could post this in /r/linux, because the webserver is probably running Linux. Instead, I'd suggest posting it in /r/webdev, or /r/web_design.
- W/r/t Hosting: I know opinion on GoDaddy is mixed, but I've had great success with their Deluxe shared hosting, and setting up multiple sub-domained development sites for clients. It's like $75/yr for the hosting. You can also [install an SVN client](http://erikfantasia.wordpress.com/2009/03/18/subversion-on-godaddy-shared-hosting/). - W/r/t coding for multiple hostnames and varying configurations: i'm a big fan of using something like this as a starting point to load host-based configurations: $host = str_replace("www.","",strtolower($_SERVER['HTTP_HOST'])); switch($host): case 'test1.mydomain.com': define('SERVER_ROOT', $_SERVER['DOCUMENT_ROOT']); break; case 'test2.mydomain.com': define('SERVER_ROOT', $_SERVER['DOCUMENT_ROOT'] . '/sites/test_2'); break; default: // production define('SERVER_ROOT', '/my/path/that/is/special'); endswitch; Then try to get away from referencing $_SERVER variables in your scripts, and instead use constants defined at the outset, ideally organized in one place. One note, since I touted GoDaddy - that above code example requires tweaking to work on GoDaddy deluxe hosting, as DOCUMENT_ROOT refers to ~/html. All the more reason to not trust $_SERVER variables, I reckon... 
&gt; but these days quick iterative development is the way to go and you're &gt; further on your way to achieving that with PHP, Python, Rails, etc than &gt; you are with non-dynamic languages. How's that? Wouldn't a dynamic language be (even in the most militaristic scenario) as easy as: Change, compile, commit, CI server tests and builds, and you deploy? With a dynamic language, AFAIK, the only step you can remove from there would be "compile", and I doubt that that step eats up too much time... Or am I misunderstanding?
Yes, that's a good way. It's also fairly easy to use autoloading to redirect to a mock class in a test environment.
With multiple database servers, how do you handle replication? This has always been my biggest concern with using multiple database servers.
If doing Wordpress CSS is a PITA, I'm not sure you're doing it right. I've done 3 (simple) WP sites this year that took me less than 6h each to do a custom child theme, tweak CSS, and deploy. There's no matching that, in terms of bang-for-buck. Granted, the sites were glorified pamphlets, albeit nicely designed - but the clients got a great setup for cheap, and the infrastructure for whatever they might want in the future is there also. /wp_sales_pitch :)
CodeIgniter with TankAuth. Took some elbow grease to get it working right, but it's dead-solid for my needs. Also, CI has fantastic documentation, and is a relative of ExpressionEngine. (I've landed a couple gigs just based on the fact that I could work with EE, so that was a nice little bonus).
Perhaps because some might see it as a troll attempt. I'm not saying it is, but....these type of posts that question dogmatic practices come up all the time, and as such, have already been argued _ad nauseum_, both here and elsewhere, since the concept first emerged. Given that there is no real consensus on the "right" answer, there is usually little to do here but argue back and forth over which is "right". However, given the cruel reality that there is no "right" answer to be gleamed, you might as well ask why some people are republicans and others are democrats, or ask why some believe in a higher power, because the validity of your answers would be about the same as the answers for your given question here. Also, vote fuzzing, look it up on reddit; and redditquette, which says that you shouldn't complain about downvotes...
you should never have controllers that big - this sounds like a design flaw, IMO. Two things: - ~~Phil Sturgeon~~ WiredDezignz has an [HMVC (Hierarchical MVC) plugin](https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/) that makes CI work in a more "module"-based fashion (so you create a freestanding module/folder with controllers &amp; views, then in the CI routing, you route a URL to that module. - Even without HMVC, I suspect most of that code would be better suited to be in either a helper, a library, a model, or some combination of those. edit: corrected authors of HMVC plugin, added link
Yes constants are good. From there you can just include your config file everywhere, use htaccess to auto include it or even SetEnv in your htaccess.
The framework thing struck me as misguided as well. I worked on a site that had 3+ million users and averaged 10 thousand concurrent users. We chose not to use a framework as well and ended up writing our own during a massive code refactor. This was mostly because none of the options were very mature at the time. What I'm getting at though, is that if you're doing it right you're likely duplicating much of the functionality/overhead of a packaged framework anyway only you're doing it without the benefit of an entire development/testing community. I choose Kohana these days for its light weight and well organized approach. Given a well designed system I have every faith in it's ability to handle as much load as I throw at it.
Lots of people like Django for web framework. As a PHP dev'ver, i found it had an annoyingly long learning curve (for me), until I finally just "got it". Now I think it's pretty fun. You've gotta have your own servers though (VPS, whatever), which you probably would either way, I suppose. But the server architecture is 'nother ball of wax, along w/ DB setup &amp; caching. If I were to fill in the blank here, I'd say set up an nginx frontend to dish up static content, and proxy the rest to an Apache/MySQL backend. If desired, you could then also hive off the Apache backend to several servers and have nginx round-robin for load balancing. Or you could visit that idea down the road, either way you're set up for it. Database replication poses a challenge though, and one might also argue for PostgreSQL, or something else for a DB. I'm still young with the Django stuff though, and would be interested in what others here have to say. 
upvote for SetEnv :)
our site just crested 10 million users a few months ago. We're on the standard LAMP stack. And output caching and memcache are both really the key. We've got lots of distribution going in as well. Our current challenges is that all of our servers are in one datacenter. Which is fine, and we're not 'expecting' anything to happen to it, but if for some reason that data center got destroyed (earthquake, tsunami, whatever) it would just put us out of business. So, we're looking to distribute across multiple datacenters in the US, then maybe Europe or somewhere else.
Couldn't agree more
Development cycles on average are much faster with a dynamic language compared to a static language. Simply because you can implement features quicker. Obviously this does not apply to EVERY scenario.
Can you say what framework you use? With that many users, and because you mentioned it isn't really popular, I'm guessing Yii? I feel like the speed of Yii makes it perfect for applications with the amount of users you're likely dealing with.
Awesome. Thank you very much. Go ahead and delete the thread if you haven't already. :)
I hope you understand this code doesn't do what you think it does, and in fact may cause bugs. First and foremost, it's "\r", and not "/r". What you're telling `explode` to do is split the string when it finds the exact string "/r", which very likely doesn't even exist in your file. The only reason your code works at all, is because `explode` will return an array even if it didn't split anything. The array will be exactly one element in size, eg `$etext[0]` is exactly the same value as `$text`. Regardless, like I said in my comment above, there's absolutely **no reason** to use `explode`. I don't even know why you're using it. This is all you need: &lt;?php $openfile = fopen("testfile.txt", "r"); while (!feof($openfile)) { $text = fgets($openfile); print ($text) . "&lt;br /&gt;"; }
The technologies suited to the task. A question like this is irrelevant until you know what it is that the website has to do.
At least it's in the right place, since it is a joke.
I'm wondering why it's even much faster "on average". Can you expand? Some examples?
I find Singletons to be a great way of avoiding a lot of boilerplate dependency injection. All database classes accept a connection but the default connection is supplied by a singleton, etc. Singletons are slightly different in PHP than in other languages due to the fact that PHP is a share-nothing architecture. Even global variables in PHP are just per-request variables.
umm... Why would you WANT to allow SQL injections? Your question doesn't really make any sense. If you want to allow SQL injections just write a page like this: &lt;?php if(isset($_POST['query'])){ mysql_connect(...); $q = mysql_query( $_POST['query'] ); while( $rs = mysql_fetch_assoc( $q )) print_r( $rs ); } ?&gt; &lt;form method="post"&gt; &lt;input name="query"&gt; &lt;input type="submit"&gt; &lt;/form&gt; I still have no idea why you'd want to do this unless you were practicing to try to break another site. You can't just arbitrarily inject SQL into text fields and expect something to happen. You'll also have to have data in your mysql database but I strongly suggest you go do some more reading because it doesn't sound like you know what you're doing. 
Try building a blog in C or Java. Now, build one using PHP, Python, or Rails. See which one takes longer. Ready? Go!
Yea I admit it makes no sense, but it's an assignment. I need to demonstrate defense and injection on the same website. The defense was easy enough, but my XAMPP enviroment seems to be set up in a way that blocks any injections I put in. 
Oh ok, well you should probably look into magic quotes. http://www.php.net/manual/en/security.magicquotes.what.php I was more worried you were trying to use this for *evil*. Your server might be configured with magic quotes on so whenever you try to inject quotes or slashes they are unescaped. This was a hacky way of trying to prevent this for programmers who don't really understand how to defend against it. 
You see, that's the thing! Magic_quotes is disabled..
"The beta release cycle will follow the "gmail" style of betas, whereby new features will be added in each new release, and BC will not be guaranteed." ಠ_ಠ
Can you give an example of what you are trying to inject; maybe it's another problem entirely.
http://pastebin.com/fHykYBUH (ignore the stripslashes, I realise they're not assigned to anything) Anyway, when I'm inserting a username into the textfield, I should be able to end the mysql query and start a customized one. Shouldn't I?
magic quotes are deprecated. Don't use it, don't rely on it. It was ***never*** an acceptable security measure.
Nope, mysql_query only allows one query at a time. You can't stop it with a semi-colon and add another one, you need to add onto the one you already have with an OR statement typically to get the query to return other results. 
I know.. did you read the entire post?
For instance if you wanted to make this query fail: mysql_query("SELECT * FROM users WHERE username = '$name' and password = '$pw'" You could make sure that $pw gets assigned a value of say ' OR '' = ' So it evaluates to SELECT * FROM users WHERE username = '$name' and password = '' OR '' = '' 
Try sending a username and password that's something like "foo' OR 1=1".
Nope. The mysql_query() function will only execute one query at a time. You can, however, use injection to add to the query so that you can bypass the login without actually having the username or password. 
Nah, whenever I try that it prompts the user with "Incorrect Password". 
Try doing this for both the username and password
Same deal, incorrect password. It's funny, I thought defending it would be the hardest factor.
Hmm... Try moving all of your queries to variables and outputting them so you can see what is going on: $sql = "blah blah '" . $var . "' blah blah"; echo $sql; mysql_query( $sql ); 
Ahhhh I think I found why it is not working: if($count == 1 ){ header("Location: mainpage.php"); } The injection we are trying to do is going to return multiple results, not just one. If you change this line to be $count &gt; 1 then it may work..
Holy shit that's it! Christ.. how did I not realise that one. It's tricky learning to code in php/mysql whilst also learning to break your code. :P
get it working, refactor when it becomes valuable to do so. I wish more people understood that.
you're comparing a web framework with a language. C# also sucks at creating blogs, but when you add in ASP.net and ADO.net for a little bit of spice, suddenly, it's not so bad. I'm not agreeing or disagreeing with what you're saying, just pointing out that your comparison is not valid.
I took a look at a few of the video tutorials on NetTuts which were helpful. I'm sure there's a bunch of things I should have done better or did wrong but it's the first stab at MCV for me.
You consider that to be a bad thing? One of the biggest contributing factors to the poor implementations and bloat in ZF1 stems from an early decision to preserve backwards compatibility from their early betas. They're not going as far as Symfony did (Symfony can break BC until version 2.1), but I think it is a good decision to say that BC is not guaranteed before a stable version is released.
Perhaps filter out foul language? The first thing I saw when I clicked the link was this: http://i.imgur.com/q4lNK.png EDIT: NSFW
It's my blog, it'd be good to know if I'm doing it wrong before I start defending it. Thanks!
oh my! I'll take a look at that. 
Include this as part of your header: $headers .= "MIME-Version: 1.0\r\n"; $headers .= "Content-Type: text/html; charset=ISO-8859-1\r\n";
This fixes the links but it breaks the multiparts
I personally love it when people aren't afraid to break backwards compatibly. It means lots of cool new stuff gets implemented and you end up with a better mature product.
In that case...try this: $headers .= "MIME-Version: 1.0\r\n"; $headers .= "Content-Type: multipart/alternative; boundary='==Multipart_Boundary_x5cf6ade81be1cafa704ccdbb470b8c6ax' charset=ISO-8859-1\r\n";
Somewhat related, I made a [list of some cheap VPS](http://geekness.eu/vps-plans-under-10-dollars-a-month) providers a while ago, all are under $10.
ZF2 has been in development for a long time now. Beta should be feature freeze. Symfony has tagged a lot of more features with an @api attribute which means LTS and will not change unless it's for a security reason.
I personally don't like Symfony2. There's a lot of "magic" in it now and a total 180 on previous versions of Symfony. Symfony 1.4 or CodeIgniter are my faves.
The one problem with this post is it assumes that one would never modify the framework over time. I think the ultimate goal of any project started on a framework is to eventually tease the framework down to be as lean and specific to your needs as possible. For example, many frameworks have a layer between to facilitate multiple DB servers (MySQL, Postgres, MSSQL, Oracle, etc). The first thing you do is take out that extra layer and talk directly to the MySQL driver. A lot of overhead from many frameworks comes with supporting older versions of the framework or older versions of PHP. These are easy to strip out as well. Both approaches have merits. Regardless of which approach you take, you will be constantly refactoring and improving your codebase. I think it's disingenuous to imply that a project started on a framework will never be as fast or efficient as a custom job.
I don't suppose this is for an internal or company site for employees you could use LDAP to login with their domain credentials?
Ok I fixed it. Fuck multiparts! Thanks for you help.
No kidding. Frameworks are designed to help you organize your project, not only for yourself but if others were working on the project too.
Ha! There is actually a [Symphony](http://symphony-cms.com/), it's an open source CMS rather than a framework.
I've looked at this before, seems like it'd do the job fine: [Savant](http://phpsavant.com/).
What you need to google for is SSO. their's several providers out there, like CAS. Also you can create an OAuth provider, which among other things, can act sort of like an SSO provider. All you gotta do is during the authentication stage, keep a session and if they have logged in recently just redirect back to the callback page without showing them the signin form. If you don't fell like authoring your own OAuth provider, you can just use others that already exist, like facebook, twitter, etc....
This sounds like the beginning of an Enterprise System? Is there an easier way to do this with maybe REST or XML or Session Database. I heard the term "session algorithm" Thanks! 
Whatever /r/php - hate Smarty all you want, but it's used on those sites. They get multi-million users one their site at given times. I'm sure of that.
When I looked into technologies to use, 3 years ago, the PHP framework market was not that great. I took ideas from different ones and tried to make a really lightweight one. That came out to the framework that I developed and have been using since on our app. There are a few frameworks that now I would think about using, Yii, Zend and a few other smaller/lighter ones for example. However ones like Codeigniter, while full of great libraries to do basically anything you want have way too much extra stuff to slow us down. Not to take anything away from it as it is great for many different types of sites. Basically we had to go with our own because at the time there were not many options that I felt comfortable going with that would scale well if our application did grow. All that being said, I don't know what I would go with if I had to start from scratch today, not knowing the growth in the future. I'd probably still roll my own, but a lot of thought would go into that decision.
Read what I just wrote above, which pretty much is what you were talking about. 3 years ago when I started the project, the framework market was really lacking and I didn't feel comfortable using one for this project.
If you can get your servers set up properly, you could technically share cookies between the two servers for auth. Then, based on that cookie, look up the user in a common session store. Not necessarily recommending this, and I don't know about the scalability of such things, but it's doable.
Our app is a little weird. Our database servers are set up like: Master -&gt; two slaves Master -&gt; slaves Master We are lucky because we can easily distribute our data across these servers as they don't really interact with each other. The first 3 servers have only a few tables. They only get around 10k to 15k inserts per table, per day, but millions of reads (Actually not as bad as it seems because the memcache helps a lot). The second 2 are basically the user table, profile tables and user setting tables. Most of these tables have an almost identical number of rows. About 3x to 4x more reads than writes. They less than 3 million rows each and indexing makes them quick. Last database has a bunch of random tables (supports and not updated or used too often). Like I said our app is a little weird and allowed us to have this layout. Standard mySQL replication works wonderful and only two times in the past 2 years have we had replication problems, after a power outage and when a hd in the raid died (but I quickly changed the slave to the master and things went back to normal). It's pretty reliable in my opinion and I feel it can scale out more if needed. While I'm not ready to move to a different database type or design with the amount of users we have, but I think the current design can withstand double or triple the users/traffic with maybe adding and additional slave to both masters.
How about developing a web service with a centralized database for authenticating both web sites? Does anyone have an idea of how to put this together? Thanks. 
Session ID is generated in the same manner on both sites, a request is sent to your authentication database to see if the session is active or not. The toughest part is designing it so that the sessions themselves are secure.
If the user logs into one site and then is automatically logged in to the other, does that mean they share a database? If so: Store the session in the database. (This may require writing a custom session handler in both PHP and ASP.NET). If they're on the same domain, like php.wherever.com and aspx.wherever.com, they should be able to share cookies. If not, you may have to pass the session ID from one site to the other.
If you're still on this... the Mail_Mime PEAR package makes doing this pretty easy. 
Yeah thanks but I'm not very familiar with PEAR and stuff like this. I think if you still get your mail in plain text nowadays, you must know what a href= means in front of a http string.
Create or reuse an [SSO](http://en.wikipedia.org/wiki/Single_sign-on) service and modify both apps to defer to it for authentication.
There on separate servers and domain with separate databases. So if I go this route "you may have to pass the session ID from one site to the other" when site A logs in and the session is created how does site B get this session?
I wasn't "telling people" anything. I was saying what *I* would do, personally. I am familiar with those, so I would use them, as opposed to spending time figuring out Ruby or whatever.
Fair enough. People probably misinterpreted you.
Cookie + database... one site stores a token for a logged in user in a cookie and in the database. The other site checks the cookie back with the database's token, verifies, and can log them back in as well.
I see Zend_Form is not there. Ad I thought Doctrine was going to replace Zend_DB. Anyway I'll monitor the beta progress.
Out of the box Doctrine integration would be super, but I think the rewrite overall is enough to keep me pleased for a while.
Exactly what I was looking for. Thank you. :)
The lack of Zend_Form puzzles me a bit. So far I know there haven't been any change of the plans to make Doctrine af first class citizen in ZF2.
I've actually built one, I've been thinking about putting it up on github or google code or something... It uses PHP and MySQL and has an external authenticator for squid...
You could implement this http://www.jasny.net/articles/simple-single-sign-on-for-php/
Both PHP and ASP can do netowork requests without any libraries or much effort. PHP has curl built in, asp has HttpRequest class (or something like that) so there is certainly an easy way to do this, if these requests are made locally in your vlan response wont be an issue, you can develop the system in one language or the other which produces a "session_id" and "session_hash" and you can load these into the built in sessions and cookies in each language. You just need some way to interface between the languages, you can connect to mssql or mysql from either language, so you can make direct database queries to the other site, or you could go to the next level and make xml requests and respond with the correct information from a completely independent service.
Worth a look - [Janrain](http://www.janrain.com/)
IE is still easily the worst major browser, followed closely by Firefox which has become bloated and slow in my experience. IE supports some CSS3, but continues to lag behind Webkit &amp; FF in standards compatibility. I would definitely NOT say that IE9 is up to par with the alternatives.
Until you actively use and understand multiple tools, you won't know what the "right" tool is for the problem at hand. That only comes with experience. That's great that you think you could also do something similar in a 'neat and simple way'. But it's not MVC. Until you use it and understand it, you'll be constantly grasping at ways to justify your refusal to learn something new, and you'll never know what you're missing out on. It may turn out that you do projects with MVC and find that you hate it. Fine, but you'll know from experience why it doesn't work for you, not because of some criticism you read in a book or blog written by someone who tried something once 3 years ago. Not trying to be harsh here - we all have limited time and resources to focus on this. I get that. "I thought MVC was more for when you have complex pages where a lot of things come together". MVC makes it easier from the start to *evolve* to much more complex systems. And FB started off as pretty crappy spaghetti code, from what I saw (also didn't start off with the thought that they'd be the largest site on the planet either). Had FB started with an MVC structure from day 1, I suspect they'd have saved an enormous amount of re-engineering time over the past few years as they've rebuilt and extended to be more complex. MVC is conceptually simple, and even if you don't conform to a framework's specific intepretation of MVC, using the basic separation points of MVC apps will buy you great flexibility later on. Good luck.
Oh, my suggestion probably won't work then. What exactly does it mean to be "logged in" on site B? Does it need to know the user's name? Email address? Other information? Etc.? Where does that information live? In the database for Site A?
I know you've read a lot more of the comments already but I wanted to react to this one: "That's why I think MVC is overkill. A new page with MVC requires a new model, a new controller and a new view, and then putting it all together. A new page in the simpler page-based structure is just a page." A) So what? B) There's generally nothing to 'tie together'. Most frameworks and any tooling you put together to support basic MVC will be using a convention as to where things should live. Put model in dirA, controller in dirB, view file(s) in dirC - that's it. Lastly, I'm sure your predecessor thought "modularity" was "overkill", and look at the mess he's left you with. Take your current situation and someone who's conversant with MVC will probably have similar disdain for whatever your current non-MVC approach is, and probably for justifiable reasons based on what an MVC approach allows them to do easily.
You should really be using one of the many PHP email libraries rather than using your own. For example, are you sanitizing against header injection attacks? Just use Swiftmailer.
I've been thinking of learning the Zend Framework. Should I learn 1.11, or should I wait for 2.0?
I agree. And ZF2 did that. But they're warning about breaking their new product already.
They're breaking a beta. That's what Betas are for, all it means is that you have to read the changelog before you move an existing codebase.
Tried out web faction for the hell of it to see what it can offer. Definitely liking how easy to install apps and the fact that you can host multiple domains if wanted. I'm still trying to figure out how to get the apps to run from app.domain.com instead of domain.com/app/. Their admin area I wish was a bit more organized/polished, kind of confusing at first... not liking how all the apps are in the same pool so I cant have two named 'home' for two different domains with an app installed at / but I can prefix... still getting the feel of things, definitely different but good once I can figure out how to customize and work with it. UPDATE - Webfaction's awesome now that my friend at work realized you need to actually create a second website to make a true subdomain. The organization is a bit clunky I still think but now that I know what it wants it's awesome.
^(\.*)$ index.php?k=$1 [L] Try that. You had the right idea, but you didn't have the Regex written correctly. /. does not escape the . - it treats it as two characts: the / and the . . This means your regex expression is expecting /. as the two characters, and, if it ever gets that, it will redirect to index.php?k=/. essentially. A few notes: 1. You're opening yourself to a volley of potential attacks. You should consider putting *some* restraints (e.g.: ^([a-zA-Z0-9\-\_)$ -&gt; that will allow all alphanumeric characters, underscores, and hyphens). 2. You'll notice [L] at the end of the rule. It means that, if the htaccess matches that rule, it will go no further (L stands for Last). 3. Add $ at the end of your regular expressions. It's the exact opposite of ^, meaning it means read the regular expression until the end of the string. If you got any questions, PM me. I'll give you a hand.
For the .htaccess in /folder: RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^.+$ index.php?x=$0 [L] The first line should let your CSS file pass.
I'm up in weho but I get down to orange county fairly regularly
I feel like this is a decent article. I feel like caching is a balancing act between disk usage and processing time. One of the big issues is deciding what needs to be cached on a page. For example, if you have a product page with a review banner at the top that displays a different user's comment and rating on that product each time the page is loaded, you know you can't cache the whole page entirely. Caching parts of a page is fairly ideal since you're not using your DBMS as much for getting information that doesn't change on a regular basis. And like you said, when that information changes, the cache has to be updated. Anyway I hope I didn't rehash it in this comment, but I found it to be a neat article.
They're supposedly working on a redesign at the moment, but I agree. And yep, a website is tied to a (sub)domain. Each website can contain multiple apps in subdirectories, though you'll often just mount one app to / This makes it easy to blow an app away and replace it. 
Caching to file is better than nothing, but it's not great. Using things like memcache, or APC/xcache (in single-instance environments) are much faster, and remove the 'age management' overhead that you need to handle when using file-based caching.
This could be really useful, or really horrible. I'm erring more towards the useful side though.
Yeah. The documentation explicitly indicates that it's for development purposes only. Obviously, some people who know just enough to be dangerous will try to use it as a light production webserver. But, you can't account for stupid. :P
Who's gonna use that?
Whats the point?
It's so you don't have to install a fully featured web server to develop a small PHP web site.
I feel like this is a bad idea. My development server is set up exactly the same as my prod server. Things like XAMP are already available for you if you don't have the ability to set up the stack yourself.
Okay, great. Im up in Hollywood quite often myself. Was there last night, going to be heading up there today as well. :p Finding somewhere in-between would be good though. Waiting to see what the other person whos replied to our SoCal meet has to say.
you can build and deploy self-hosted packages.
Awesome, an article that regurgitates (and truncates) some information from the PHP manual without actually adding anything! Heaven forbid the author qualify his statement about reference usefulness or offer any actual insight or commentary.
Just to add to the article, PHP keeps an internal REFCOUNT value for each value you create which is referred to when garbage collecting. Every time you create a new reference to a value, REFCOUNT increases by 1. Also interesting is that if you do something like: $a = $b = $c = 'foo'; What you're actually doing is creating 3 variables that point to the same value. Internally, 'foo' is not replicated 3 times. However, if you change any one of the variables, the one variable you do change will point to a new value while the other two remain pointing at the same value they were pointing at it before. For example: $a = $b = $c = 'foo'; // a, b, and c point to the same 'foo' value $a = 'bar'; // a points to value 'bar', b and c both point to the same 'foo' value // important to note: internally there is only one copy of 'foo' with a REFCOUNT of 2, and one copy of 'bar' with a REFCOUNT of 1. A value can't be garbage collected until all references to a value have been destroyed. To learn more about how php internalises variables and references, see: [reference counting basics](http://php.net/manual/en/features.gc.refcounting-basics.php). Also relevant: Sara Goleman's [you're being lied to](http://blog.golemon.com/2007/01/youre-being-lied-to.html) article that discusses an object's reference-like behaviour in some detail.
Relevant but not covered here is how references work with foreach loops. foreach($array_val as &amp;$element); foreach($array_val as &amp;$element); Will corrupt your array, because foreach loops leak the loop variable ($element in this case) and the next loop begins by assigning to that leaked reference. You need to unset() the reference between loops to avoid this. [Of course, this is a feature, not a bug.](https://bugs.php.net/bug.php?id=29992)
Other langauges like python have been doing this stuff for years with small deployable web apps that usually don't get a lot of public traffic, like [Trac](http://trac.edgewall.org/), for example. It might make sense to use it on a dedicated MySQL server too, for example, if you want phpMyAdmin installed directly on the server and you don't want to install Apache just to host phpMyAdmin. Many people use sqlite for development when working remotely so that you don't need to have mysql access on your development machine (this usually only makes sense if you have some application side schema generation tools such as Doctrine). Now they don't need apache either for development, all they need is PHP installed. Question for anyone smarter than me: Might this someday open the door for [using PHP for comet](http://stackoverflow.com/questions/603201/using-comet-with-php)? Or is this in no way a move in that sort of direction?
Well, I'm not really scared of header injection because the whole mail content is generated by my app and I have some solid regex validation on the email and name coming from the user. I was curious and looked up at swiftmailer and it looks very neat. Thanks for the information!
Curious developers who haven't installed Apache yet? I know I may give it a whirl, see how it performs. I am wondering if typing a couple of commands would be faster than setting up virtualhost lines in a file and restarting Apache. Yet I wouldn't use for big project development. More like, playing around maybe.
This isn't about an inability to set up a stack. It's about having a tool that developers can use so they don't have to bother setting up a complete stack just to develop small applications. Expand your horizons. PHP is not the first language to do such a thing.
It doesn't really make much difference from a Comet perspective. Given WebSockets are going to become more popular in the next couple of years, I'd like to see some more work in that realm, but there haven't really been any fundamental architectural changes to support this.
I don't see that as a problem. Better to develop on a platform it is going to run anyway.
Think using this built in web server may be good for real basic projects that don't require heavily on web server features. Hopefully it will probably mature with features that could be aimed at being a via 'production web server' solution some day.
You should never ever ever deploy the embedded webserver. The intention of it is very specifically to ease development, there are no security considerations and performance will probably not be much of a consideration in the development of it.
Thanks, I appreciate your thoughts. It seems that disk usage is a small cost these days, so the trade-off between disk usage and processing time is weighted towards optimizing time. It wasn't that long ago that I held the assumption that DBs were faster than disk. I am constantly finding my sites bottlenecked by queries.
Or you could type "apt-get install apache2" then just save "test.php" in /var/www and start playing straight away on http://localhost/test.php? Probably quicker and easier than trying to work out the embedded server. Phillip.
Thanks, but I'm not sure how an embedded web server will expand my horizon. Besides concern about this adding unneeded bloat, this really doesn't affect me, so I guess I will keep my nose out of it. Googling "programming language embedded web server" didn't yield any obvious candidates to support your claim. Out of curiosity, what other programming language distribution includes a web server?
This is only logical. I can `git clone` my Django apps and be running a dev web server on `http://localhost:9000/` in about 30 seconds, no Apache config required. I'm pretty excited about this feature.
People do use Windows.
I'd like to switch my team to a local, rather than shared, development model. I much prefer "run `php -S`" to "install and configure XAMPP".
Why no love for UTF-8? $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
Very true, but not always possible. **EDIT:** "Ideal" is what I meant--It's not always ideal for every situation.
 python -m SimpleHTTPServer Enjoy.
I don't need to try that, as I have apache2 installed. It wouldn't stop me from trying it out. Probably way of my head here, now I am wondering if they plan to embed a small database server too heh. Paul. 
I spoke about this in another thread. LAMP has been made so easy to install these days it negates the need for a embedded dev server unless it adds value. People use the Django dev server for a number of different reasons: changing the .py file needs the server to restart to detect the change and recompile the .pyc, Python scripting did not used to work out-of-the-box (wsgi? mod_python?), amongst others. All issues that do not apply to PHP. If the dev server automatically integrated in debugging, break points and stepping, then that would make it worth having. Having the dev server use ncurses so I can use the cursor keys to step back and forth through the script, giving me the current line number, have the last half dozen accessed variables being constantly displayed in the top half of the screen with their current values, etc. Now *that* would be worth having. Phillip.
I still don't see the point. Who has PHP installed, and doesn't have a web stack already installed? The only use I can think of for this embedded server is possible on small devices. Perhaps having a full blown PHP server installed on a router, or a portable device, with out the need to install web server.
&gt; for example, if you want phpMyAdmin installed directly on the server and you don't want to install Apache just to host phpMyAdmin. That's been the only reasonable explanation so far.
Right now, probably very few people. Then again, would you still bother with a full webserver for local development if you didn't have to? If you want to use a full webserver, nobody is stopping you. However most people don't need all that for development.
Say "Very true, but not always possible." again. I dare you. I double-dare you, motherfucker! Say "Very true, but not always possible." one more goddamn time.
[Ruby](http://raa.ruby-lang.org/project/webrick) and [Erlang](http://ftp.sunet.se/pub/lang/erlang/doc/apps/inets/http_server.html). My pleasure.
I could actually see some uses for this. Lets say you just recieved an XML file in your inbox, and need to make it json with some small modifications - and you dont have access to your dev machine apt-get install php5 | cd ~ | php -S localhost:8000 | wget http://localhost/tojson.php 
Thanks, but one question: why the attitude? 
It's early (here) and I'm grumpy. Get off my lawn. Damn kids. http://farm4.static.flickr.com/3197/2708790601_d5c0c65008.jpg Apologies.
PHP already has [support](http://php.net/manual/en/features.commandline.php) for running directly from the command-line, no server necessary.
 apt-get install php5 | cd ~ | php -S localhost:8000 | wget http://localhost:8000/tojson.php ftfy but an an interesting approach since it would start it temporarily make the request and quit. You wouldn't want to do the apt-get install php5 every time though, would you?
I would say that it would be more useful for integration into your IDE. If you do any Java dev you would know that eclipse will happily fire up an embedded application server and redirect the appserver output into eclipse. I imagine this may make it easier to fire up your php app inside eclipse/zend studio/phpstorm/whatever ide and let you stop/start/restart the app.
That is how variable passing into functions works too. In PHP4 we used to pass large structures around by reference into functions to prevent them from being duplicated and eating up memory. Now we can pass massive structures into a function without passing by reference, and so long as the function does not change that structure, it is just referring to the original variable content without it being duplicated.
&gt; PHP server running on my router DO NO WANT
&gt; Expand your horizons. PHP is not the first language to do such a thing. The difference, at least as I see it, is that most of the other languages that do this sort of thing (Ruby, Python, etc) are often commonly used for things other than *web apps.* (where-as PHP tends to be web-related with a few off-shoots in to a CLI -- though I've found that those are often non-scriptors that do that sort of thing... at least in my experience) Overall I find (assume?) that these sort of environments can promote bad coding practices/habits ... or, at least create a larger ramp-up for some developers when it comes to actual "production deployment" (and suddenly the environment changes in to reasonable settings instead of a wide open self-hosted development machine). I know I may not hold popular opinion here... but most of the WAMP/LAMP environments are *extremely useful* for developers, and already allow for rapid testing between different versions of common hosting setups. This just feels like "re-inventing the wheel" -- or, at least trying to fill a niche that might be better served, elsewhere. It's not like PHP isn't become bloated enough, already... ;-)
Where isn't it possible? In which cases have you found that you can have the php binary run, and not apache?
`php -f tojson.php` 
 Using mod_vhost_alias, I just create a hosts file pointer to 127.0.0.1, and a folder of the same name, and I'm up and running with a new dev site.
I do a lot of development on Windows machines and this would allow me to test on my Windows machine without having to have IIS or Apache installed. The end result would be more rapid reflection of changes since I wouldn't have to wait for FTP, and portability to other development environments without requiring a full server installed. The idea is nice, I'm just curious to see how it works in practice.
seems useless for most, but makes sense. like webrick in rails.
This could be secure... # php --start-the-server-omg
I would think this would have some pretty cool uses in automated unit testing. A quick embedded application server might also be good for proof-of-concept code and other quick one-off tests. Hopefully the practice of running the embedded server in production (or even stage) doesn't get picked up, though.
I suppose it's personal preference, but I believe your development environment should mirror your production environment, which includes using the same http server software.
That's what your staging environment is for. development -&gt; staging -&gt; production
I agree that python does, but ruby? Not to detract from its elegance and versatility as a language, but it gained most of its popularity due to rails. When you say "ruby" in a room full of people, most are going to associate it with web development I'm sure. As for php and bloat, I'd say a very large portion of it can be stripped down during it's build process if you really want a leaner php build. I would be surprised if the webserver portion wasn't optional.
&gt;Safe Mode has been removed in PHP 6.0. What? Are you from the future? Jokes aside tks.
Why are you piping each command to the next? I think you mean &amp;&amp;, instead of |.
Although I find myself agreeing with the "what's the point" crowd, I also can't wait to see what kind of advances in modularization might get made. Maybe it won't be a shit-show, and instead, it could lead to development of apps that are more portable. Also, a note to my Windows brethren: virtualbox+ubuntu. 
Double-submitted; sorry
here's a [link](http://www.reddit.com/r/PHP/search?q=framework&amp;restrict_sr=on) to the most recent discussions about php frameworks. This question gets asked every week. Also, here's a [link](http://www.reddit.com/r/PHP/comments/lb25r/which_mvc_framework_has_the_best_documentation/) to last week's post
You could just include it at the top of a file. There is nothing wrong with using another class in a class. For readability sake, please include all class files at the top
You're already using namespaces. You don't need to include your class within your function. Using include() is probably worst-case scenario. Using require() is slightly better, but not quite ideal. Are you using a home-made framework? Any well-known framework will already have some sort of autoloader. Anyways, you should just need: use Clients\AccountList; class SomeACLClass { private function _getAccounts() { ... $accounts = new AccountList($this-&gt;id); ... } } 
If you're not trolling, can you at least re-edit your question and add the answer?
Kind of a lame troll, don't you think? Anyway, I'm trying to explore PHP by making a D6 roller. I've got the rand function down pretty well, but I'm trying to achieve a very specific goal: I want the user to click the "roll" button before a number is shown. Still haven't figured it out to be honest, but moments after posting I had a flashback to the last time I sought coding help from reddit, and decided I didn't have it in me to get ridiculed for some rookie mistake I could've avoided by just researching a bit better. 
ok so you just learned what programming feels like.
Good points, all around... but, I generally differentiate between Ruby and RoR - almost (but not quite) to the way I differentiate between Perl and Perl-mod or CGI. Probably a completely fair comparison, these days... but I largely equate Ruby with "Mac scripting" in a way (in that Ruby is generally quite separate from Rails - though Rails has, as you say, been "what it's since become" and, likewise, what the most common use is that you might likely see today... agreed). And yeah... surely I hope that any PHP framework can be split-off. Though, as has often been the practice... a lot of stuff surely seems to "be compiled in" during install (though, perhaps I'm just bitter from assembling way-too-many Solaris webservers with PHP).
I'm on my first Symfony2 project, coming from ZF (but with Zend_DB then Doctrine1). * Yes sometimes the cache:clear command fails because of a "directory not empty". Then I clean the cache folder by hand. I'm on Windows however. I think cache is supposed to be cleared on each request on dev mode but I sometimes get errors, like with translations or routing, that work when the cache is cleared. * I never liked using yaml for database schema on Doctrine 1 especially because I felt the need to modify the php generated files often. So I jumped on annotations. My flow would be like : creating/editing the php file and the annotations, updating the database with "doctrine:schema:update --force" and then updating getters/setters if needed with "doctrine:generate:entities". Is your problem more about defining relationships ? * Never used the crud generator. I hope that someone with more experience can answer you. 
net books working from home, second machine for demos, running test suites. Some of us use more than one computer, some of us work in large teams where a lot of time and energy is being used to LAMP when you could be just P
http://www.php.net/manual/en/function.spl-autoload-register.php
The first thing to do is enable errors and/or wrap the object creation in a try catch block and output the message and trace. Then you should be able to see exactly what the error is. I've had some very inconsistent behaviour when using SimpleXml and file_get_contents in combination before but I haven't really been able to find an official bug so maybe it's just me.
Install (/unzip) XAMPP, bam! Everything you need to run a non trivial app. 
While we're posting recommended reading for OP, here's this as well: https://gist.github.com/1234504
y u no use PHPMailer?
I just started (month ago?) using Doctrine2 as library for the CI (code igniter) on one of the projects that i am working on. So it may be a bit different, but regardless * What are you using for caching in dev environment? use array() cache, instead of whatever cache driver you set up in your Doctrine. Array cache basically is - no cache (cache is not saved between requests). Ideally and once in production you shouldn't have the need to empty your cache *that* often (apart when you deploy new code changes) * I don' know what problems you are having, but creating post category relationship should be easy using yaml format (that is what i am using at least). If you named your fields an relationship keys correctly, it is just the matter of running orm:create-entitles..and doctrine will do that for you. * I don't know what you mean by routes? Do you mean proxy classes? I personally, before I did any line of code I first created the whole schema and relationships using come of db schema tools, then replicate that to db, then I create the mapping, then entities, and then start coding. If any of the fields need extra processing I override those functions/constructs manually. I am a bit confused with your last sentence, actually. I mean, DC2 uses Active Record pattern methodology, so not sure what you are getting here at. EDIT: Didn't add summary. As said I use DC2 as library in CI, because I didn't like the way CI's Active Reecord was working and for now.. I love it. 
Why would it not be possible? You are in pretty bad position if you can't choose the tools you make the application with.
header('location: whateverurl/child/add'); exit();
This was written in 2006. Some of the stuff recommends to enable Safe Mode which has been deprecated due to creating problems when enabling it.
What sort of stuff are you looking for exactly?
 if ($hasChildren) Header("Location: /site/viewChildren"); else Header("Location: /site/addChildren"); exit;
I'm going to assume you're talking open-source? Magento is pretty extensible, but it's a heck of a learning curve, and has it's own quirks.. I'd also love to know the answer to this question though. I flit between Magento / osCommerce and they seem to be two opposite ends of the spectrum.. (but unfortunately still the best I've found so far).
Read the installation instructions on their website, they address the cache/log thing there and provide a way to fix most issues. Edit: also, search for symblog. Great way to get up and running quickly with Symfony2.
wow, you got all the answers lol, you should get on http://news.php.net/php.internals and let them know
I'm not a Java developer, so take my post with big fat grain of salt, but there are obviously ups and downs to each language/environment (as is the norm in this industry). Certainly PHP will give you a much more rapid development speed (concept to mock, this is one of the things that PHP has over most other languages in the webdev context), has a larger market share/developer base (but Java has a good chunk of the corporate world), a more web-oriented approach to it, and better support across hosts, while Java is a faster language with more solid libraries available and OOP done right (as opposed to PHP's implementation, which is only now starting to improve). Same as always, pick the right tool for the job, and the one you're comfortable and productive with.
I am developing two projects in Symfony2 and I still have a lot of questions. Thanks for the symblog tip, honestly I really like the framework so far but the biggest mistake was to not release a "jobeet" tutorial.
Seems to happen a lot, lately, think some hardware's due to be replaced at reddit hq.
I've only worked on Java for developing web apps for a short while and in my opinion, Java is powerful but you need a good IDE to consolidate everything into a nice package. I worked with JSP and Java Servlets and one of the biggest issues I had was just getting everything to work smoothly easily. On the latter side, I like PHP because it's easy to learn (if you know Java) and pretty straightforward. You just upload your PHP script on some PHP-enabled web host and go to it in your browser. Java masks all the servlets as URLs that you map in a web.xml file in your WEB-INF folder. You have very little alternatives. In PHP, you can use "mod_rewrite" if you wish with the help of a ".htaccess" file (and an Apache server running with mod_rewrite). I feel like I'm more biased towards PHP because I learned it years ago and write in it more often than I do in Java. I also never gave myself enough time to get used to how servlets work and everything.
I had the same question for about 2 years now. (want to migrate an 10-year old shop from OSC, since it's pretty much unmaintainable now and OSC3 is getting ahead of Duke Nukem 3 as vaporware of the century). Prestashop would be my choice, if not for the ugly templating system (Smarty :/ ). Magento is way too constricted and poorly documented, unless you have a full team of experienced developpers. TL;DR : OSC is clinically dead, Magento is overkill, Prestashop seems ok
They should probably include a builtin SQL server as well... maybe I should suggest?
A loosely coupled eCommerce library with a well designed API allowing me as a web developer to integrate payments, customers, stats, special offers, delivery costs, categories and inventory to an existing system.
There's already SQLite which comes bundled with PHP and has a pretty good PDO driver :)
I have worked with both for several years, and honestly one isn't really better than the other. Just different syntax and PHP is interpreted while Java compiles to byte code. The general divide from my perspective seems to be PHP for small to medium sized operations, and Java for more enterprise software. This isn't a hard fast rule but I think when you start dealing with larger datasets Java handles things a little better. Facebook for example started on PHP but seems to be making a move to more of a Java based implementation. But that is Facebook and they still use PHP quite a bit. What I am trying to say is unless you are the size of Twitter or Facebook then the differences are negligible. 
Take a look at prestashop.
Sorry, "possible" was the wrong word to use. "Ideal" is what I meant--It's not always ideal for every situation. This is one of those nice-to-have features and is by no means a necessity. I didn't meant to imply otherwise. 
A most basic example: &lt;?php if(isset($_POST['mode']) &amp;&amp; !strcasecmp($_POST['mode'], "roll")) { $num = rand(1, 16); echo "You have rolled: $num&lt;br/&gt;&lt;br/&gt;"; } ?&gt; &lt;form action="roll.php" method="post"&gt; &lt;input type="submit" value="Roll" name="mode" /&gt; &lt;/form&gt; 
I really don't know if it's what you're looking for but [Shopify has an API](http://api.shopify.com/). Obviously this is a hosted solution but maybe you can do some funky things with it. I guess nothing stops you from using Shopify as the admin area of your shop and then building your non-shopify site just using the API to get all the products etc. Magento is pretty much the only 2.0 eCommerce solution that's not as ghastly as oscommerce and zencart and shopify seems to be the best of the hosted 2.0 solutions.
The jobeet guys are making an up to date version, iirc. The one that's out now is for a beta version that no longer works as is.
I started redoing one of my larger projects in symfony2 in early July. I got pretty far into it before realizing that I hated the way Doctrine worked. I ended up ditching symfony because of it.
The language you pick is largely irrelevant. Use whatever you are comfortable with. A language won't automatically make the website you have developed better than it is. What matters is the architecture, not the language. 
I know you jest, but take a look at http://opalang.org, they have webserver and DB baked into the language. After all, why not? If 50% of projects are using some sort of free SQL DB, why not bake SQLite into PHP? Or MySQL? If you wanna know where PHP is heading, take a look at modern languages and ideas.
Ubercart is the best solution here, but it's implemented in Drupal, meaning you've got two learning curves to handle.
I was talking about Symfony's caching mechanism. It creates php files for various things in app/cache/ . I guess this question is more geared towards Symfony2 , rather than CI, but I appreciate your input. 
Your comment on using entity annotations rather than yaml/xml schema files gets into the sort of workflow information I'm looking for. It seems like annotations is the way to go with Symfony2. As far as not using crud generator, I'm not surprised to hear that. It seems there are some workflow options that don't exactly meet expectations.
If you are a developer, Prestashop is the way to go. Much better than the alternatives for usability and writing new code. Magento has a higher start point, pretty much needs a dedicated box. It also has a real high learning curve and documentation is sparse, making it even more difficult to get up to speed.
The Symfony2 version of the jobeet tutorial isn't finished yet. I was reviewing it late last night. I don't have the link handy right this second.
Interesting. What did you end up using, or what do you prefer?
Yes, I have seen it but it is not complete as you said and also there are a lot of parts no longer relevant as they changed a lot of stuff in the beta phase. But I am checking the symblog which seems good.
It's more likely related to your `file_get_contents` call than `SimpleXMLElement`. Try `var_dump` 'ing its return value and see if you're getting the expected result.
I've been messing with [OpenCart](http://www.opencart.com/) for a few weeks now and it's pretty nice.
Yeah I'd be interested to hear this as well. I switched over from propel to doctrine recently and am much prefering it.
I recently took a look at Doctrine and Propel to bolt on to an existing app. I went through the Propel docs and install and then did the same with Doctrine. I got a headache after looking at the Doctrine docs - it seems over-engineered and bloated - at least for my needs. I went with Propel and could not be happier.
The documentation for Magento is annoying, as well as a lot of bad\outdated examples floating around the net... However after a point everything just becomes one big "A ha!" moment and it gets very easy to customize\edit everything. Another gripe with Magento is the tight coupling of Prototype\JS for doing everything on the front end (even alternating row colors for tables). Like you said, the dedicated box is an absolute must, and it should have a decent amount of memory for caching. On the plus side, love the event handling, models are very easy to work with, the ability to overwrite everything, and the external site API.
Wow, you're right. I found out about namespaces a few days ago on here, but I didn't read anywhere that it would include the other class automatically. I just commented out the include line and the function still works. I was wondering how the Account class was being used by this class without an include, but didn't give it a second thought. Thanks.
the biggest con would be having to use java
Relevant question. I'm with the same doubt. The concept of the framework changed in a way that it would screw the head of a noob who is just starting?
Looks nice, i shall look into this, thanks
I get tired of people trying to say that something must be bloated and over-engineered just because they can't understand it. Are you sure the problem isn't with you?
Same with Twitter. Built on Ruby on Rails, [Twitter is porting more and more to Java](http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html).
I'm getting: &gt; bool(false) I'm guessing that means it's not working. However, if I go to the URL, I see text. And view source gives me XML. Why would file_get_contents not be working? Did something change there?
There's your problem. Try setting your error reporting to `E_ALL` and see if it spits something out. Also check that you have remote fopen enabled in your PHP settings. Finally, the website you're accessing might have limited direct access to its resources.
Yeah I've finally got the hang of it now. I love being able to host multiple domains as well from one account that is just amazing to me and saves so much $ on just static sites that get little traffic. And for my staging site setups, this is perfect... your advice with them saved my lotssss of time, can't say thanks enough for the suggestion. 
I _hate_ WAMP/etc. Yes, there was a time that I used it, but now that I know what I'm doing, it's like trying to use Dreamweaver to make web sites -- it just gets in the way. They include lots of silly stuff I never need, and omit other stuff that I _do_ need, and the php.ini and httpd.conf's are never what I need. At the end of the day, it's faster for me to just download Apache and set it up myself. At this point, I'm really not sure if I'll ever use WAMP again. While I'm not sure if I'll ever use the embedded server, I would much prefer it over WAMP. 
I know it was working before. Can you tell if you can grab this somehow? http://api.twitter.com/1/statuses/user_timeline.rss?screen_name=Clayburn 
IMO: Ideally, your code wouldn't care which server you're using, so long as it provides the same API's and other functionality which you require.
&gt; it seems over-engineered and bloated "It seems" does not mean "must be."
[RFC Page on php.net](https://wiki.php.net/rfc/builtinwebserver) for more info. Also, the [php.internals discussion](http://php.markmail.org/thread/xt26inbzf54fgh5h#query:+page:1+mid:xt26inbzf54fgh5h+state:results) has some useful info. 
Also come check us out at [r/magento](http://reddit.com/r/magento)
Good link to Sara's blog, I was going to link it but I won't now. However, I'll add 2 from Derick Rethans (another PHP core dev): * [PHP References Article](http://derickrethans.nl/php-references-article.html) (click through to the PDF) * [Circular References](http://derickrethans.nl/circular-references.html) With so much good, _solid_ information out there, it boggles my mind why people try to explain it who don't even seem to have a firm grasp on the concept.
This is sort of how I solved it. I had a legacy PHP app and a new C# app that needed to authenticate against the PHP app, since there's tons more logic within PHP involved in the authentication than a simple DB lookup. I created a PHP web service interface (fancy word for request) that would accept requests from the C# app, and return either success or failure. Not perfect, but it works.
You should check out [SPBAS](http://spbas.com). 
Yea, it was a bad example :) Sometimes your script needs some file upload or you just want to show it to someone on another machine
I'd say probably your biggest factors would be your development team's skillset and the availability of java programmers versus php programmers.
The cake is a lie
If you're using a framework you may have a class that will do it in a slightly more elaborate way. For example Zend_Http client. Otherwise cURL is always a safe bet. http://www.php.net/manual/en/curl.examples.php - see the comments here for examples.
I set up a get_contents() function that uses curl and sends back the string. Seems to be working. Why would file_get_contents suddenly stop working, though?
&gt; I hate WAMP/etc. I hear ya... I *mostly* use WAMP as a quick way to throw together a server on a Windoze machine, so I have an easy way to do development when I travel (and unfortunately, work and/or gaming generally requires that I run windoze rather than Linux on my travel laptop). Otherwise, I'd just drop things on my staging servers for development/testing (which require silly little things like network/ssh access ... which is difficult, unless I'm flying Delta or someone else that supports in-flight wireless).
Yeah, and to be clear, I have nothing against the WAMP/XAMP/etc. projects themselves, I think they're great for beginners (or pros looking to save time when in a crunch) to just get up &amp; running and get to coding.
Yes.
Alright! Been using the beta for a while with no problems.
I'm using opencart on a project right now. I'm not 100% pleased. It is nice because it gets running quickly, but starts to fall down when you try to make customizations.
Yep, this sounds wonderful. Especially for all those small personal projects. Can't wait to get my invite code! edit: [link](http://www.phpcloud.com/) to the actual website (although article is still a good read by OP)
I like OpenCart a lot, but I have [this gripe](http://www.reddit.com/r/PHP/comments/lj7jn/a_request_to_all_phpbased_product_catalog_builders/) about it.
[I like this one a lot better](http://www.fluffycat.com/PHP-Design-Patterns/).
Static-level variables don't exist outside of each request, once the request finishes the singleton class instances are garbage collected. However singleton instances exist globally and persist in memory as such, whereas if they exist only within a function call scope then normal class instances will (for example) be garbage collected. The issue with singleton class instances is that they exist globally and persist for the whole request (unless destructed manually). In most .NET and Java applications it is poor form to use singletons because they persist in memory indefinitely (until cleared manually or the application exits) so they usually unnecessarily consume memory, and as such there exists ways to create application-level and session-level variables (in addition to request-level variables). 
I upvoted that... that is one of my big gripes with what I have experienced in OpenCart too.
Yeah, I had some issues too. The thing I really like about OpenCart is that the MVC structure is nice enough that I feel comfortable making some core edits to force it to accomplish what I like.
I totally agree! 
easy theming + proper hooks in product catalogs? Hell yes. However, I have a couple other requests -- SQL injection and XSS protection. 
It would be awesome if this would make deploying PHP applications to, say, Amazon AWS as easy as that Ruby host that lets you push from Git.
But look -- in order to build plugins with it, you have to drop a file in an overrides/classes directory, and this creates collisions. For instance, want to override an order.php? Great -- only one plugin at a time can override order.php. If that isn't stupid, I don't know what is. I mean, seriously, what age are these product catalog programmers? Twelve? They need to read up on how to code a decent plugin architecture like WordPress has. SOURCE: [http://www.ecartservice.net/17072009/writing-your-own-prestashop-module-part-1/](http://www.ecartservice.net/17072009/writing-your-own-prestashop-module-part-1/)
I can't see any reason why a Factory pattern would be of any use at all unless you just *wanted* to use it. 
I'm going through the symblog tutorial right now. It's great! Thanks
the licensing of both makes it completely improable for me to use either
i've kinda done that . it's not quite done but you can have a look if you like
In one of the recent weekly meetings, they decided that they definitely do want Doctrine ORM integration out of the box. However, they're waiting for someone to step up and take the initiative to actively develop/maintain it.
I don't think starting with 1.11 would be a bad thing. It is extensively documented and thoroughly real-world-tested. It can teach you a lot about the ZF approach, which is very hands-on. They leave a lot of implementation decisions to you. The same is true for ZF2 as well. Keep in mind, however, that ZF2 is going to be different in many fundamental ways. This, coupled with the flexibility to provide your own glue for the various ZF components, means it is very unlikely that there will be a _clear_ way to upgrade a ZF1 application to ZF2. That said, Matthew has demonstrated that the controller setup in ZF1 can be emulated in ZF2, so it may be easier than you'd think to get a ZF1 application switched over (depending entirely on the application itself, of course).
Yay!! After having to use wordpress for a project this past week I'm very much looking forward to diving into pyro.
DrupalCommerce might be your best bet; more than UberCart. I know all of the dark corners of Magento, and it's one of the best options, but I don't necessarily recommend using it. Magento is built on top of ZendFramework, which is great, but the XML layer essentially turns it all into spaghetti. It becomes a game of cat and mouse to find the code you need to look at. At a certain level, the view/block layer within a theme becomes a hierarchy of include voodoo.
I'm looking at making a cart with Symfony2. I'm not sure where an event layer could be created or tapped into, but I'll keep the idea in mind. I plan on creating a GitHub when I'm ready and posting a link to /r/php for code review; probably around January, maybe sooner. I've deployed around 12 Magento stores, and I know ZF like the back of my hand, but I'm going with Symfony2..
Those aren't feature requests, they are absolute necessities.
Ubercart is pretty meh in my opinion. It's decent for people that don't know much PHP, but if you're looking to do any modifications at all, you should definitely stay away and look into a real cart product, not some plugin.
One way to do it is to create a Plugins class in your models folder. In there, make a way to add and remove callback function names into a database table for certain events. Then, on load of a new session, read this table and cache it in $_SESSION. Then, upon the junctures of key points of the MVC, or any database SELECT, INSERT, UPDATE, or DELETE, pass the relevant data as parameters to the connected callback functions via call_user_func_array(). With that in place, one can simply create a new plugins folder and make the plugin class inherit from Plugins, register itself with the proper events, and load its callback functions. As the app runs, then, these custom callback functions will be called automatically and passed the proper parameters. Yet another way to do it is *perhaps* with the [Observer Pattern](http://www.ibm.com/developerworks/library/os-php-designptrns/). I'm not certain, but I think that would fit well here. Anyway, once this is in place, you merely publish the event API much like WordPress has their event hook list in the Codex. Developers will be able to create plugins without ever needing to edit or replace a core file of the application.
why? it cost 20 minutes to do it yourself on any cloud platform...
Im playing with propel now, but for the time being I am using.g a code generator I wrote a few years ago that has served me quite well, its kind of similar, but doesn't support namespaces, and instead of an entity manager, I put static code in a class that extends the base entity.
A bit off-topic, the problem I have with this The problem I have with these comparisons is that most of the time they also change the architecture or some other component so it is hard to tell if the gain is because of the "new language". There was a project in a company where I used to work that had a blog using PHP, you can imagine, include files everywhere, spaghetti code, it will write to a database with no indexes (seriously) and so on. Then they got a new developer that used Python (django specifically) and he said "I am going to develop it to django, python is faster, it compiles to byte-code, etc.". He did it, of course MVC structure, caching, etc. and then the manager back then said "OK, we need to move everything to Python as it is faster". Now, I am not saying PHP is better or not as it depends what you are doing but I believe if they implemented all the features they did in PHP (let's say with Zend, Symfony or whatever) they would probably get the same performance gain. But then again, this kind of discussion is like VIM vs EMACS, Ubuntu vs Arch, Java vs C++ and so on...
Can anyone explain why I would want to use something like this?
Nice! Still prefer [Concrete5](http://www.concrete5.org/) for the moment, but this is really nice indeed.
I would certainly like to have a gander. Are you planning on open-sourcing it?
Looks a bit too comprehensive and integrated for this instance. Looks pretty nice overall though, I'll keep an eye on it. Thanks. :)
You probably already know this, but use `require_once()` to directly include class or function definitions. Otherwise it'll throw a fatal error if you try to include it twice, which is especially likely if it's being done in a constructor or something.
Google around a bit and you'll discover there have been vulnerabilities in this function.
Any full screenshots of the Admin Interface for v 2.0 yet? Last time I tried Pyro, I was sort of annoyed with the Admin Interface. It set the language to Dutch, with no apparent way to change it. I think the translation was made by a drunk monkey with a dutch dictionary, because it's horrible. Hope you guys can fix those for 2.0!