I have worked with Java 5 years back, I started learning php from last Friday. I am following w3schools{dot}com, which is good but they did not explain how to set up tools. Check out udemy and Lynda websites if you can pay some money.
You're in /r/PHP so most people here will agree it's a fine language to go with(I certainly will). As far your learning path, in between bigger chunks of learning, you're just missing practical projects. Nothing beats hitting a roadblock, and then googling up on the subject matter to solve your problem. Yes, you do need the theory part of things, but I think you won't cement your knowledge unless you implement it into a working project.
i think your path is good, but i would recommend this order: - Basic PHP and MySQL - Object Oriented PHP - New features of PHP7 - PHP database &amp; PDO - Design Patterns in PHP - MVC basic concepts - PHP Unit Testing &amp; TTD - API &amp; Microframeworks - Silex, Slim - Move to advanced frameworks
Hmm looks familiar ;) https://github.com/barryvdh/composer-cleanup-plugin I know it's MIT and missing a license file, but some attribution would be appreciated. Or submit your fixes as PR. But generally, this plugin should be mostly obsolete because of gitattributes.
Thank you so much !
Could you please explain reasoning behind this? 
The best path is to not learn it 
Thanks for the feedback, the reason was that I wanted a minimal stuff to plug in. But yeah you have a good point
I understand :). I've submitted a pull request. Do you mind taking a look? If you're open to it, I'm willing to work on it to make the namespaced functions part of the class.
1. unit testing should be before patterns. This is part of decomposition process, basically. 2. GRASP/SOLID principles should be before patterns, since it's better to understand them. 3. MVC basic concepts should be replaced by "separation of concerns". Also by doing GRASP/SOLID you will have much more clear understanding of how to separate view logic from application logic than just reading bunch of crappy articles over MVC. 4. "PHP database &amp; PDO" may be part of learning sql. 5. "new features of PHP7" could be skipped if PHP is first language. Anyway PHP manual already contains pretty much updated documentation.
If you want to be in a field where competition is far less and money are good, learn something like Access and Office VBA. There are fewer and fewer developers to maintain old software written in these. And for many companies that software is critical. Plenty of job offers, high salaries. COBOL? Even better.
This has been built in response to https://www.reddit.com/r/PHP/comments/6ce5j2/simple_package_to_calculate_geodistance_between/
I am always surprised by the eager to drive competition even on the small stuff people have. Thank for your response, the only thing I don't like of your library is that it uses way more classes than mine, and I even more complex to use, for the sake of what ? :) #overengineeringwayoflife
Why do you change the file name and then complain that the file name changes?
You're taking a filename with an unknown amount of "periods" and exploding it to an array of unknown length based on how many periods there are. Then you're joining just 2 and always 2 of them back together. There's nothing about file extensions really happening here. I guess a short term way of finding the extension would be to just check the last part of the array. Have you instead searched Google for just a method of finding file extension (instead of finding why your implementation didn't work?)
&gt; There are too many changes happening too fast which has resulted in a chaos and nobody know that is the proper direction. Sometimes I wonder why lot of complicated things has to be done in JS where a few lines of php is sufficient. FYI: Being humble about something you don't understand rather than making up stories about it makes you look better. Advice from someone who's done PHP for a long time: Node can teach you a lot of great things that will improve the way you code in PHP.
This is simply not true. Yes, a lot of the jobs around are wordpress, magento, etc. But there are many startups and many software houses that use PHP for their software.
Awesome. Thanks !
&gt; (that is if your mental health still allows you to work at all) Funny :) Definitely not the prettiest. However I've been looking at some tutorials right now and I see no reason for a coder not to be able to learn it. It's still easier than the assembler work I was doing on Z80 eons ago with all the registers juggling.... Or trying to learn Forth with its reverse notation. But I'd stick with VBA (if I was looking for a job, which I haven't been doing since 20 years ago). I still have the skills, only unused for more than a decade. It's more fun and I still think you can land a similar salary - without the COBOL headaches. Edit: Or VB6. I'm actually at expert level on VB6, including performance tricks that you don't find in any books. Dust has settled though. Long time ago.
What is not true? I know that there are some freelance jobs outside magento and wordpress... I never say that they were zero... 
Laravel. Make some simple projects using Laravel. You could start with tutorials and move up from there.
W3schools has a pretty terrible reputation, mainly because for years they did not fix their material that warranted security criticism. I think it's a little better now, but I'd still not recommend them. 
The `MetricDistanceCalculator` does not really make sense. The decision whether choose metric or imperial system is no concern for the library. It should be left to higher layer (internationalization). For units, you can use library like this one: https://packagist.org/packages/nmarfurt/measurements (first one I found, maybe there is a better one) Additionally, the coordinates do not really make sense without a reference model to be placed on. The model should be part of the coordinates. Lastly, the name is confusing, you even include the definition of geolocation in the package description but it does not look like the package has anything to do with geolocation. This is my re-creation of your example: &lt;?php /** @var Model */ $model = new Mars(); /** @var Coordinates $position1, $position2 */ $position1 = new Coordinates(50.0, 5.0, $model); $position2 = $model-&gt;createCoordinates(53.0, 3.0); // alternative way of creating the coordinates /** @var Length */ $distance = distance($position1, position2); // In view layer var_dump($distance-&gt;convertTo(UnitLength::kilometers())); Edit: Replaced `Coordinates::distanceTo` with `distance` function.
Well, thats coding :) Just dont give it up. I cant count all the endless nights i just was looking for errors and/or bugs. You should consider this, if you want to learn php.
At the moment, there are 500 jobs open on UpWork, tagged with "Laravel". I'm sure there are more CMS jobs, but saying that MVC jobs are very low is underselling it. Also, if you're looking at "proper job platforms"(non-freelance) like stackoverflow careers, linkedIn, etc, you can notice plenty of advanced PHP work - although that's mostly not remote work.
&gt; I think it's valid to reuse coordinates on multiple spheres of different sizes. I do not really see an use case, care to elaborate? &gt; What's more, I'd see it being confused with Mars then becoming a location on top of another spherical base, while Mars itself is the base. The distance calculator and other methods would of course need to check if the base models are the same. Maybe `Coordinates` could be even made abstract and used `MarsCoordinates` instead. &gt; I don't like the data model holding domain logic in your example. The distance calculator and position model are decoupled for a reason. I do not like it either. But I also do not like having a class for each function. I changed it to use `distance` function, that feels the least wrong. 
Basicly [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) is just another name for decomposition. MVC is just one of the examples of applying separation of concerns principle. Basicly your application concern is to do data processing. But in order to interact with app you need some kind of representation of it for client. Client here is anyone who uses your app. In case if we are talking about web app - it could be json api or just hypertext (http+html). Your application should not bother about such stuff. Instead of it, we need some kind on layer around it which will handle this. This layer is responsible only for one concern. You may think of it as an adapter instead of controllers+views. The reason why this is important is basicly that view and application logic has very different reasons for changing. It also has very different change cycle. UI is changing far more often that logic. And we all know that if something works - we should not touch it.
Yes, laravel is the framework with more job offer in upwork for freelancing. Some of these offer are still for wordpress like this https://www.upwork.com/jobs/_~01b8177ef896da4f02/ . But the important is half of these jobs offer are for 50$, and you have to work like a week for a few dollars. Which is also my point at least in first comment. 
Canttellifserious.png
Your code with the quotes is correct. The unquoted code is not. In PHP the key of an array must have an integer or string value. edit: And this is irrespective of PHP version.
Interested. Tick most boxes but I'm from the Netherlands. Can you shoot me a pm with details? Thank you!
I see. I will be sure to always quote my string keys in the future. Thanks for the quick replies, that really cleared things up!
I suggest you change course immediately. The author is relying on a broken behavior (that is up for removal, IIRC), and they're doing so while talking about an extremely basic concept such as arrays. Run!
Thats a really good list, thanks for putting it together. 
I am using Symfony 3. I have some routes that require certain roles to access. /stuff/homepage - requires ROLE_STUFF_USER or ROLE_STUFF_SUPER_USER /stuff/superstuff - requires ROLE_STUFF_SUPER_USER /things/homepage - requires ROLE_THING_USER or ROLE_THING_SUPER_USER /things/coolstuff - requires ROLE_THING_SUPER_USER If a ROLE_STUFF_USER goes to /stuff/superstuff I want to redirect them to /stuff/homepage If an anonymous user (or one of the other users who don't have access) goes to either /stuff/homepage or /stuff/superstuff I want redirect to /stuff/login and add a query parameter that says /stuff/login?next=/stuff/homepage (or whatever page they were trying to get to) Same thing with the /things paths. If the user tries to access /things/coolstuff and is a ROLE_THING_USER then redirect them to homepage. I assume I would probably be able to do something with Exception listener, but I am unsure how to do it without having to hardcode which paths require which roles. I have over 100 routes so I don't want to have to maintain it in the security.yml and in another spot. All my routes do match with the roles (/stuff/* has to do with ROLE_STUFF_*). Not all pages require the roles related to the route (/stuff/login, /stuff/information, etc).
a few suggestions: - (easy) try to write a basic version of twitter from scratch (no framework), complete with image uploads, login, user profile pages, etc - (intermediate) write an api using a popular framework like Symfony or Laravel. Write something that allows you to lookup information about a movie and save it to a database. Add user authentication and for bonus points write a search endpoint using your database and FULL TEXT on MySQL. themoviedb is a free api that you can use to get data about movies. These may be challenging at first, but I am a firm believer in jumping right in and figuring stuff out at you go. Google is your best friend and you will need to learn to use it efficiently. Programming is a different way of thinking. If you run into a problem, which you will... all the time, do your best to target the root cause and google that specifically. Identifying problems and learning how to fix them quickly is the name of the game so don't get discouraged if you have to constantly look stuff up; we all do it. A good book to get you started: http://www.phptherightway.com/ 
Thats exactly the issue I'd like to see solved with `$str-&gt;asUtf8()-&gt;graphemes()` This would produce an iterator of graphemes, not of the individual bytes. 
I'm not arguing against generics here, but still: class Collection implements Iterator, ArrayAccess { private $type; private $position; private $array = []; public function __construct(string $type) { $this-&gt;type = $type; $this-&gt;position = 0; } public function current() { return $this-&gt;array[$this-&gt;position]; } public function next() { ++$this-&gt;position; } public function key() { return $this-&gt;position; } public function valid() { return isset($this-&gt;array[$this-&gt;position]); } public function rewind() { $this-&gt;position = 0; } public function offsetExists($offset) { return isset($this-&gt;array[$offset]); } public function offsetGet($offset) { return $this-&gt;array[$offset] ?? null; } public function offsetSet($offset, $value) { if (!$value instanceof $this-&gt;type) { throw new InvalidArgumentException("Value must be instance of {$this-&gt;type}."); } if ($offset === null) { $this-&gt;array[] = $value; } else { $this-&gt;array[$offset] = $value; } } public function offsetUnset($offset) { unset($this-&gt;array[$offset]); } } class Post {} $coll = new Collection(Post::class); $coll[] = new Post; // Ok. $coll[] = 1; // InvalidArgumentException Would need some more enhancements for it to support scalar "types", though.
I can suggest you: http://flexi.ink/ Really good developers
My initial thought as well, but it seems quite low, even if the party is a year old. Also, I'm surprised that they would handle the newsletter expedition this way. It's one of those things you know from the start won't scale well. And seeing how trivial and cheap Mailchimp and such services are, you just want to use them from day one.
Join this PHP Slack community: http://www.phpdevelopment.community/
That's a runtime error : correct me if I'm wrong, but I think existing static code analysis tools can't detect it. You need to actually run the script and feed it a value to detect such error.
Scalar types are indeed an issue, but I doubt it would be unsolveable, I also ignored scalar types in the blogpost for the sake of generics btw.
I think your answer was meant for /u/prema_van_smuuf :)
Not really :) Also answered him below.
Hehe I knew that one :)
Wait.. you don't have a Docker Stack with React, Angular 2, Vue, Backbone, NodeJS, Ember, ThreeJS, Bootstrap, jQuery and 42 other frameworks? Pah, grandpa!
Both platforms are best at their levels but when you compare them Magento is better. PrestaShop can be used for small stores and Magneto for the larger one. When you compare the security of both platforms then Magento is better than PrestaShop in terms of security. PrestaShop is easy to use but Magento is not so much difficult to handle. In my opinion, Magento definitely has the upper hand! You can also check this comparison: https://magenticians.com/magento-vs-prestashop-comparison/ This comparison is based on following categories: 1. Features 2. Performance 3. Ease of Use 4. Support 5. Security 6. Pricing 
I'd be very dubious about this course based on that
Noob namespacing question: Is: namespace Omg; class Wtf {} simply the same as: class Omg\Wtf {} Or are there any other benefit I don't see ? Similarly, is : use Omg\Wtf\Bbq; use Music\Instrument\Guitar; // and then, somewhere: $meh = new Bbq(); $muh = new Guitar(); Just the same as : $meh = new Omg\Wtf\Bbq(); $muh = new Music\Instrument\Guitar(); Wondering if it's just about saving a few keystrokes or if there are benefits or implications I don't grasp. Thanks!
Let me get this right, regarding the [FeedItem](https://github.com/mateusjatenee/laravel-json-feed/blob/master/src/FeedItem.php) class: You are converting a property name from snake to camel case, prepending a `get` prefix, calling the non-existing method so it’s catched in the magic `__call`, where it’s stripped of the `get` prefix, converted from camel to snake, and passed as an argument to the `getProperty` method…? Your lib basically does: function createFeed(array $config, array $items) { if (false === isset($config['title'])) throw …; // required fields $config = array_intersect_key($config, array_flip($allowedKeys)); // allowed fields return $config + ['items' =&gt; array_map(function (FeedItem $item) { return array_filter([ // filter removes empty values 'id' =&gt; $item-&gt;getId(), 'title' =&gt; $item-&gt;getTitle(), 'date' =&gt; format_date($item-&gt;getDate()), ... ]); }, $items); }
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [mateusjatenee/laravel-json-feed/.../**FeedItem.php** (master → 0bee829)](https://github.com/mateusjatenee/laravel-json-feed/blob/0bee829c6819bc344a0c27d861ccb9cf7782ed6e/src/FeedItem.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhvpc1u.)^.
&gt; I won't explain in detail what generics do, you can read the RFC to know that. Actually no you can't. You can read the RFC and see the proposed syntax, but there is no patch or description of how it would work internally, and definitely not one that goes into detail. &gt; you should spread the word in the PHP community, and share the RFC: https://wiki.php.net/rfc/generics Maybe; but only if someone is going to step up and hire someone to work on the code needed to implement the idea. Otherwise, if we're just wishing for things, I'd quite like a pony.
Interesting, thanks. 
I would very much like to know where the downvotes are coming from and why, and why this was removed from the subreddit.
Now that I see it... 40h sleep deprivation hasn't been good. Gonna take it a look when I wake up. Learned some stuff regarding arrays though! Thanks! The magic stuff is very bad tho; tried to make it as magic as possible but it's looking terrible. Gonna refactor this later
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
``` class FooConfig { public function __construct(array $data) {} } ``` Congratulations, you've achieved nothing.
Congratulations on not reading the full conversation thread?
I'd say give it for free. or remove it from the sub. I dont like advertisements. Subreddit rules: &gt;Do not advertise. Unless you are sharing PHP-relevant content, please do not post links to websites that you own or develop. If you're unsure, run it by the mods first. also, asking for retweets is against the https://www.reddit.com/wiki/reddiquette
I never said he should work for free... I just dont like self promotion for paid services in an open community about an open source project. dont think there's a rule against it here though, just my personal preference :) edit, there is a rule: &gt; Do not advertise. Unless you are sharing PHP-relevant content, please do not post links to websites that you own or develop. If you're unsure, run it by the mods first.
Hey there -- how's your blog and other public work going?
&gt;I constantly see php jobs (freelance) ... This is a tended that has more to do with employers wanting a freelancer that is a jack-of-all-trade and them wanting "cutting edge" web stacks than it has to do with the popularity or usefulness of php. If you look for full-time 9-5 employment this is a little less prevalent. Employers would like for you to be familiar with JS and Frontend development, but it's not as important if you're be hired for a backend position. &gt;What is the point in ask for php if most of the work is done with javascript? Probably because most of the work isn't being done in JS on the back end. The only thing I tend to use node for on the backend is asset building, and as a queue system. I do everything else in PHP. 
Where would you suggest I'd gather information as to whether the community would be interested in such a book if not here? Seems like a great audience here of people who would be interested. And, i'm not selling anything (yet), just giving stuff away :)
What is wrong with not supporting PHP 5?
There is no migration sadly. It's mostly a rebuild unless your store is very simple. Data can be migrated, e.g. customers, orders, products and attrs but your mileage will vary on how good that works.
I think I'm wholly aware of that fact. It is my well considered choice not to support PHP 7 in new versions of OSS I write in my personal time.
It just opens the door to a subreddit full of spam...
Great, then I'd definitely be interested in it. As for monetization, if you're confident in front of a camera, you could always do screencasts and post a course on a website like udemy. What most "early access" books seem to do, is releasing the book once there are something like 50-70% of the content at a lower price. Have you searched equivalent books on any website? (leanpub, O'Reilly)? If you need any help, feel free to ask.
Depends what you want to do. If you choose a web direction, PHP is really popular in this field. If you choose between PHP 5 and 7 choose 7.
cmon man, it's just some sauce over a clear advertisement, link to a site where he can gather personal information, and asking for retweets. The latter even being against reddit rules... I think you're being a bit naive here...
&gt; PHP has reputation of being difficult and not very welcoming of new users. OK, now I've read it all.
Read the conclusion-sentence in the end. "learn both - use the one predominant in the field you want to go in" I think that pretty much sums it up.
The retweets one ill give you.
I've removed the twitter link.
Was trying to make it work on Win 7 but with no luck. The documentation is a bit lacking, e.g. it names some "~/.ssh/config" file which is not documented. There is also no word about password protected SSH keys.
True. The problem requires the tool, not the tool the problem. 
Maybe I'm stuck on the particulars of the example, but this doesn't seem like much of a gain. You get an exception instead of a fatal error, sure, but the actual problem is something not returning what it's supposed to. You're just becoming aware of that bug differently.
Rather than just private classes, a full fledged module system à la SML.
&gt; implicit interfaces like Go That's what I really like about Go - no more hassle of who owns the contract.
do you mean the IDE would show the type error immediately? I can see that, but as you said phpdoc already gives that. otherwise something isn't clicking for me how it's not still a runtime check. You even say "We're using &lt;T&gt; as a dynamic type, which can be checked for at runtime". I am trying to understand, not just argue with you, so please try to straighten me out if I'm just being a dummy here.
There is no direct method of migration from Magento 1 to Magento 2. However, Magento has developed Code Migration Toolkit to migrate custom codes and Magento 2 Data Migration Tool to migrate critical store data like products, categories, orders, store configurations &amp; settings, etc. For reference, please visit this brief blog post: https://www.cloudways.com/blog/migrate-from-magento-1-to-magento-2/
Obviously PHP if you are posting on /r/PHP
have you tried http://www.reddit.com/r/phphelp
10 bucks, not bad. Hopefully the stream won't have bad quality.
&gt; that’s wrong… Nope. They are more than 2 versions behind and can deal with the consequences of using an outdated (almost end of life) version.
There's still a big difference between PHP and Java. Furthermore, good OO concepts don't belong to one language. There are a lot more languages to implement generic programming in one way or another: https://en.wikipedia.org/wiki/Generic_programming
ok, that helps a lot, actually... you're not positing it as a solution to a problem without one, more so as a *better* solution. I will fess up to not reading the original RFC before commenting here, which I probably should have done. 
Generics are kind of an artifact of static typing systems and aren't strictly necessary in dynamically typed languages. In the context of a dynamic language the generic thing becomes more of a hint for IDEs than a core feature of the language. In a lot of language communities this problem is solved through idiom rather than through language features. Python and Ruby both do this. The idiom there is to just ask the object if it has an attribute name "Id" (or whatever) and handle the case where it doesn't. Using generics is the same idea really, but enforced at compile time rather than runtime. That's why I say this feels like a graft from Java to PHP. The desire to push so much stuff to compile time is typical of static, AoT-compiled language communities and their idioms. It feels out of place for a dynamic, interpreted language. 
Reminds me of how everyone wants/wanted classes in Javascript.
Always nice to see books coming out on this stuff. I'd gladly drop 30 for anything that is well written - even though I already do this stuff. When I first started setting up our CI process i barely understood what was going on. It's nice to get condensed, easy to understand information just so I can have it on-hand for others or use that information, or to better explain these things to others.
similar. I will say that in that case it at least makes sense in that everyone had already learned well how Class inheritance works and the issue of learning the behavior of Prototypal inheritance was a major source of learning issues and bugs. 
Personally, I like the ability to enforce specific things at "compile" time rather than having to repeatedly insert boilerplate to check if a variable is of a particular type or has a particular value. Unlike with Java, this is entirely opt in. There are still plenty of places where it makes perfect sense to leave it open what type a particular argument is. PHP _has_ types and has had them for a long time now. Things like this are just the natural continuation of having types.
Thanks for the link. Just signed up.
I often tweet about PHP. Feel free to add me: https://twitter.com/TheRealJAG
We are treating it as a complete rebuild from scratch. 
I just considered it is a good opportunity, mostly for people how want to easily win couple of bucks and sale their PHP apps / scripts. If you think 6 months it too much, we may consider reducing it to 3 if more object about this. Thanks and have a good one! Also, if the mods consider this as being spammy - let me know and I will the delete the post
Eh. Instead, go grab one of our [Sourcehunt](https://www.sitepoint.com/tag/sourcehunt+php) app ideas and snag yourself $500. No other conditions or catches - just write the "app" and a tutorial of how you did it.
Table looks weird on mobile
Hey, thx for the tip that's actually a good idea. I just might get some interns to work on some, but currently we have a lot of work in progress.
How come the union type rfc was denied?
&gt; Well your "a)" is of no consequence since it is literally microseconds before runtime - might as well be runtime. FWIW, I'd rather have the server error in production early so I can rollback to previous version and investigate, versus having a bug lying in wait to be triggered who-knows-when. Is it ideal? No, but it is the lesser of two evils. Also, if the environment supports CI, the CI server could catch it before production. &gt; OTOH, your "2)" would be welcome but to be useful the IDE needs to do it or its going on the server prior to failure anyhow. To be fair, that's an apples vs. oranges argument. PHP cannot, and should not, be responsible for what the IDE does or doesn't do. But, you are right that IDEs should be taking advantage of any and all static code analysis that it can. If I'm not mistaken, most already do. So having Generics support would help to catch it in the IDE. I forget the CLI switch, but the PHP CLI executable does support linting of code, and if I'm not mistaken, this is part of what IDEs rely on. &gt; As to narrow minded - there's a lot of "fad" or "cargo cult" language features that - once they take hold in one language, everybody wants to drag into their pet language of choice. If we do that without thinking hard about why, we end up with all languages being the same and I don't see the point of that at all. You are absolutely right on point here. Too many times we see RFCs that are nothing more than syntactic sugar. That is one of the downsides to OSS and "volunteer time". We get what the volunteers want, which may or may not be what's good for the language as a whole. However, in this case especially, I feel that Generics would offer the community more than just a sugar coating. &gt; PHP is a sloppy, messy, dynamic scripting language with some nice dynamic OO capabilities. I like that about it. A lot. If I wanted more rigidity, there are many different languages I could select to get that combination of properties. Definitely. It's lower barrier of entry is what makes it so popular. But to be fair, you're not forced to use this extra rigidity. The only time it would be a requirement is if you're using a third-party library. To which I'd say that nowadays there is usually more than one choice out there for any given solution. I will concede that not everybody is ever going to be happy about changes like this. But like you said, things like this need to be thoroughly discussed. 
iPhone 6s Plus, I'll post a screenshot later
Thank you!
There is a migration tool from Magento, but it doesn't touch anything from your extensions, and as listed in other comments, doesn't move custom attributes. It also requires way more customization than it's worth, and that's all before it ignores everything.
If you released a few sample pages and based on your description I would easily pay $15-$30 for this.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This may be mildly controversial, but **security**. Learn about security as soon as you can, so you can save yourself a lot of headache down the line. &gt; I have some grim news for the programmers in the audience. This news comes with a silver lining of course. &gt; &gt; If you are a web developer (or are thinking about teaching yourself web programming), you probably don't think of yourself as a security engineer, or a white-hat/blue-team member of an information security assurance team. You might have considered security threats in the context of quality assurance before (e.g. validating input), but perhaps you're no expert on the subject. &gt; &gt; But the second your code is deployed in production, your code is the front line of defense for that entire system and quite possibly the entire network. Logically, that means the software you produce must be made reasonably secure. This is an excerpt from [*A Gentle Introduction to Application Security*](https://paragonie.com/blog/2015/08/gentle-introduction-application-security), the preamble to our [application security reading list on Github](https://github.com/paragonie/awesome-appsec). You can probably get by without learning the ins and outs of security. You probably don't need to know the difference between SPN and ARX-based ciphers. You'll probably never need to implement a polynomial evaluation MAC, write a plaintext recovery attack against unauthenticated CBC mode, or overflow a buffer and use a ROP chain to execute arbitrary code over a network. But you will need to at least know the basics: * Using HTTPS everywhere, not just on e.g. login forms * Using prepared statements instead of "escaping" for database queries * Using a password hashing algorithm (`password_hash()` / `password_verify()` for example) * Security headers (e.g. CSP, HSTS) 
Start here: http://www.phptherightway.com/#databases
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [S0FTY/GoodHub-Music/.../**login.php** (master → 4cc6625)](https://github.com/S0FTY/GoodHub-Music/blob/4cc66254404e23530837c2773d1d41b5241702e0/login.php) * [S0FTY/GoodHub-Music/.../**delete.php** (master → 4cc6625)](https://github.com/S0FTY/GoodHub-Music/blob/4cc66254404e23530837c2773d1d41b5241702e0/delete.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhwtskq.)^.
Where did I do that?
I saw what you meant and fixed it via separate dir on drive. Thanks for the keen eye:)
Looks pesky. Ill run it on a test server to see if I got the hang of it.
Yes, lots. Start reading up on SQL injection and prepared statements, every query on your site is vulnerable. http://www.phptherightway.com/#pdo_extension
Noticed that before. That's a header issue PHP gives me because i'm trying to redirect the user.
That would be a brilliant idea. Also, read this: http://www.phptherightway.com/#password_hashing Your passwords are being stored in plain text. It appears you tried to use `md5` to hash them, but this is still not anywhere near good enough.
I did try to, but as I told another redditor, the login failed.
Yes, because your existing passwords arent hashed. You can either manually hash them, update your code, and then logins should work. Another option is to update them as users log in, but I honestly think that both of these methods may be beyond you. Give this course a look: https://laracasts.com/series/php-for-beginners All the lessons are free, and I think it may help clear up a lot of things for you and help you see where the problems in your security and application flow lie.
Unfortunately this is not enough: - https://github.com/S0FTY/GoodHub-Music/commit/a8c2222d938c165452824c758786c99dbcf632c4 - https://github.com/S0FTY/GoodHub-Music/commit/134d2f040500e4cc5efdb67e04535974dbbfc2a6 [You need to completely remove your commits](https://stackoverflow.com/questions/448919/how-can-i-remove-a-commit-on-github).
I havent updated the github repository yet. I'll remove then re-make it with pdo commits.
Not yet. Got to convert to pdo then hash.
Also if you can, regenerate those keys now that you know they've been compromised. Good luck with your project. 
The database keys? 
Yeah it's been hard balancing code &amp; high school.
God damn it, [dlegatt](https://www.reddit.com/user/dlegatt), did you get a zebra pregnant again?!
A zebra?
Yes. Again.
And don't say you slipped and fell on it
I think the overarching lessons here are 1. Be an apprentice for a while and make all these mistakes under the supervision of someone who has a lot more experience and can help you learn and grow as a developer without jeopardizing overall security. And if you can't, ask for a code review from someone you respect or from the community. 2. Don't reinvent functionality that is commonly provided by reputable libraries. They've been battle tested and are actively maintained by a large and experienced community of developers. Take advantage of all they have to offer. Learn Laravel or Symphony ... or even Wordpress is WAY mor hardened at this point than anything you could write on your own. Don't think that you aren't learning by using someone else's code. These libraries force (okay, not Wordpress) you to code a certain way, and as a result, you can learn so much just by USING them. 
I feel terrible for laughing so hard at this (wasn't me, btw).
I accidentally did this recently. It works. Why is it legal for a parent to refer to a child class's instance variable that isn't defined yet, and if there's a good reason, why does it make logical sense? class ParentClass { public function go() { echo $this-&gt;onlyInChild; } } class ChildClass extends ParentClass { public $onlyInChild = 42; } $cc = new ChildClass(); $cc-&gt;go(); 
&gt; cucks up
Because object properties are dynamic. When PHP tries to access a property of an object named "x", they look up **at runtime** if the object has said property and if it should be visible in the current scope (private/protected props might not be). You can even do class ParentClass { public function go() { echo $this-&gt;notEvenInChild; } } class ChildClass extends ParentClass { } $cc = new ChildClass(); $cc-&gt;notEvenInChild = 'We must protect the youngns'; $cc-&gt;go(); The only thing that could prevent the parent class from accessing members of the child class is private visibility.
Ah, right, dynamic voodoo! Thank you. Would this be an anti-pattern though? My IDE certainly can't figure out what's going on. 
Lmao this post made my day.
I'd consider not defining properties on classes an antipattern, but using child properties in parent classes is just stupid.
You can spin a DO VM instance for $5/mo. There's no reason to still be using free web hosting in this day and age. If you absolutely can't afford $5/mo, then there are infinitely better options that what you're currently using. * https://elasticemail.com/ * 150,000 emails per month, __free__ * https://cloud.google.com/appengine/ * 28 instance hours/day, 1GB NoSQL database, __free__ These two services completely solve the technical issues you've stated in this thread, as well as them being far more reliable in just about every way. [Devs love to give free shit to other devs](https://github.com/ripienaar/free-for-dev).
https://www.reddit.com/r/PHP/comments/4o2zyg/union_types_rfc_in_voting/ Here you can read some reasons.
You could go the annotation route for routing (pun intended) like Symfony offers: * http://symfony.com/doc/current/routing.html You should then do the reflection once and cache the finished routes inside a temporary route file that can be regenerated when you change your controllers.
Seems to be down for me, but phpstorm starts just fine.
I have the licence configured through Jetbrains Account and for some reason it keeps on asking me to login, but can't since that domain is down. I just succeeded to download the legacy activation code and I switched to that mechanism and now I have my phpstorm back. It seems that the domain is under heavy load.
You can use the builtin functionalities: http://symfony.com/doc/current/security/form_login.html
&gt; Would it be ok if I PM'd you no
 Using PDO won't fix the fact that you were passing a GET parameter in to `unlink`. This is a great way to get files deleted that you don't want to delete 
What would be the difference? I know of this pending RFC, further building upon generics: https://wiki.php.net/rfc/generic-arrays How would typed arrays be implemented?
A full featured generics system in place should be more complex (my humble "guestimate") than a simple "Array of" enhancement, more on the lines of this RFC: https://wiki.php.net/rfc/arrayof
fix the formatting here, man
it's now fixed. but it was according to the format :-( (there's a bug somewhere)
What even is this?
Worst spambot ever. (S)he's not even trying. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/lolphp] ["My PHP code is not secure and I need help" \[...\] "Which one of you guys committed an SQL injection on my site?"](https://np.reddit.com/r/lolphp/comments/6cuhdb/my_php_code_is_not_secure_and_i_need_help_which/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [WordPress-Coding-Standards/WordPress-Coding-Standards/.../**README.md** (develop → 7763772)](https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/7763772ed2859ab86179714cd3ea5607531a7ffb/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhxftcf.)^.
much better. now, I am not sure I understand why you're doing this. what's wrong with defining all routes explicitly? if you have so many that it's a problem, could you change your pattern to use more query parameters instead of URL paths, perhaps?
I can't recommend this link enough: https://phpdelusions.net/pdo, also, phptherightway was already linked on this thread
Git is amazing at this. If you have access to running shell commands, you can compare two files as such: git diff --no-index --word-diff file-a.txt file-b.txt - `--no-index` tells Git to not look for a tree/repository. - `--word-diff` to get the inline differences. Normally, Git compares entire lines. `file-a.txt`: Lorem ipsum dolor sit amet, consectetur adipiscing elit. `file-b.txt`: Lorem ipsum dolor amet sit, consectetur adipiscing elit. Diff: diff --git a/file-a.txt b/file-b.txt index 4f006a8..4d4936a 100644 --- a/file-a.txt +++ b/file-b.txt @@ -1 +1 @@ Lorem ipsum dolor [-sit amet,-]{+amet sit,+} consectetur adipiscing elit. 
Yeah, this doesn't seem like a good idea. Let the router do the routing for you. This is going to be a maintenance nightmare, and won't be as efficient as just letting FastRoute do the work.
The picture of your book is opening backwards. Whoops.
It kind of sounds like you want Git. Git is great at tracking who made changes to specific parts of files. If Git is out of the question I'd probably build something that compares lines, not characters. I think it would get unwieldy to build something any more granular than that. Here's an example I wrote: https://3v4l.org/5W5ib As you can see it handles different line endings, extra spaces around each line and outputs an array afterwards. I hope this helps! Update: I just realised trimming the start of the string probably isn't very useful... here's an amended version that only trims spaces from the end. https://3v4l.org/gcd13
I get your point, and I agree from a technical POV, but the thing is that is much harder to agree on internals the details and implementation to push something like generics in the core than typed arrays, so waiting could take forever...
Your code behaves exactly the same as simply creating a new SplFileObject instance and iterating over that. It's iterable all by itself.
Thank you!
Care to elaborate?
splfileobject uses stream
Even if it's handled by a background process you may the file may be too big to be loaded in one go, so streams is the way to go. Rewriting it in another language _may_ make sense, or not, depends of the task at hand and decoupling it enough to be able to delegate that to another language may be too complex for your use case. So it really depends but streams are in any case a simple solution.
What he has done is exactly what streams are about...
Wait does this mean that php is building a huge array behind my back when I parse through a large SplFileObject using fread()? Ugh. I suppose I'll need to implement a generator and test the difference in an ap of mine.
This is great, where can I learn more about this?
Couldn't be interesting to try this simple case indeed. But why do you say this wouldn't work? I'm using a similar approach for a project, even though it's definitely slower than loading in one go, it allows to avoid a too high memory consumption.
A good start would be: http://www.phptherightway.com/ 
Yeah, I knew that, I have it facing both ways but for some unknown reason I thought it looked better facing the form lol. Good spot though!
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [WordPress/WordPress/.../**revision.php** (master → 21b1135)](https://github.com/WordPress/WordPress/blob/21b1135b1c5759ecb9aaafbd57c32434d70069ea/wp-admin/revision.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhyk0xh.)^.
it doessnt give me clear instructions on how to do it 
Watch this course: https://laracasts.com/series/php-for-beginners 
What's the purpose of a JSON feed? (Yes, I've gone over https://jsonfeed.org)
Good read, but [this](https://github.com/pmjones/adr/tree/a1661e134590b00b04557baa00b1f9b74dfbea66/example-code/Domain/Payload) still seems over engineered and there must be a better approach.
[learn php](https://www.codecademy.com/learn/php). The syntax hasn't really changed. if you knew it then you could read it now, just have to follow the code and function calls. Read the comments. It might also be using a framework. Not sure there is a tool to "explain code" other then telling you it is wrong or that the code smells.
They've used that as a display name on the internals mailing list for quite some time. It's uh, an interesting choice.
Doesn't it bother anyone that this is a ~5000 lines diff? I understand that a lot of it is tests, but still, that's a lot of code to maintain for the standard library.
You should consider including some more examples, such as Concourse for projects with complex build pipelines. I might even suggest DroneCI, because of its heavy focus on utilizing containerization (Docker) as part of the build process. That might require dipping a bit deeper into Docker technology though, which might be out of scope, but I mention it because it can be powerful. Maybe even a description of Jenkins might be useful, if only just to highlight its strengths and weaknesses and thus when and when not to use Jenkins (I'm admittedly not a Jenkins fan, fyi). I'd also cover different deployment strategies and workflows. Also, what would be very neat is emphasizing that CI can encompass more than just software and that automation can be used in other novel ways. For instance, you could create a build pipeline for your book, which basically runs a suite of tools against your book in markdown format or latex or whatever, such as checking the spelling and grammar and validating urls and then compiling your content into "shippable" artifacts, such as PDFs and ePubs and, heck, even using text2speech to create MP3s for the hearing impaired with some of the different CI tools and providing that as real world examples. Good luck with everything! I'm signing up for the sample chapter. :)
&gt; You cannot install PHP extensions with composer Ya, but you can add PHP extensions to composer as requirements and composer with error out on install if it doesn't see that extension there with the version specified. Which is pretty handy IMO. I believe there is some talk about figuring out a way to get composer also install extensions, but that could be a pie in the sky dream...
I would say no, because now you probably have mixed return types. The use of exceptions makes more sense here.
&gt; or taking an "out" $errors parameter by reference, that you fill with errors Not too such how I feel about this one. Why not just use a DI'ed logger instead?
I'll create a repo with the new PDO addons.
To wit: https://paragonie.com/blog/2015/07/common-uses-for-csprngs-cryptographically-secure-pseudo-random-number-generators#uuid-v4
Eh... honestly, that's pretty common and you should really be blaming their marketing department. Ansible is pretty nice though. I suggest you take another look. I will say, however, Ansible is meant really more for things like managing systems - just like Puppet and Chef etc. I wouldn't use it to as my deployment tool though.
hahaha :)
You obviously are not taking my reply in context of this guy's actual problem.
Have really liked deployer for quite some time. I'm actually in the middle of writing a DroneCI plugin to support using Deployer as a deployment method. One thing, which I think Deployer could benefit from is the ability to create and use encrypted vaults to store and read secrets from. A bit like how Ansible does it (`ansible vault`). This way, you can store your secrets in your git repo safely. I might have some other suggestions, but let me check out the release notes for 5.0 first. :p
Any time! In terms of implementation, you could make it as simple as adding a wrapper around the openssl shell command or use phpseclib or even go as far as using libsodium. I implemented something along these lines for as different purpose, so maybe if I have some time, I might send you a PR. Not making a promise though sorry :)
I think you took that remark too negatively. When people say they want the community to have a voice, it just means they want the actual users of the software listened to and the software made more usable. Too many open source projects are developed in an ivory tower with little regard for the needs of their users. Not that PHP is one of those projects today, but it definitely used to be. 
No PHP does not. This article is misleading just for that. SplFileObject is optimized for memory usage. so you don't need to worry about. You may use generator with the fread method because there's no flag for that on the SplFileObject object but that's the only thing that may be of use really. 
There is, that's why Paul is mostly the only guy who keeps talking about it ;-)
Ok cool. I only mention it because doing it that way can lead to unmaintainable code by polluting the method signatures. That's all :)
I've been quite happy with [ramsey/uuid](https://packagist.org/packages/ramsey/uuid) for a while now.
Well in the case of a validator, you want the caller to know about the errors, so you can't tuck it away in a constructor.
this is not producing a standards-compliant UUID. You couldn't use this in any strongly typed database with a uuid type for example. Or if you need to exchange data with 3rd parties using interfaces that specifiy UUIDs to be used. Plus, you should not be using openssl_random_pseudo_bytes because openssl tends to fall back to a really bad RNG under some conditions (or to copy its internal state when, say, fpm forks) which might lead to easy duplication of uuids. Use the new `random_bytes` function or a polyfill.
Cool! Thanks for your effort! 
&gt; Especially when a single line in userland can get you something compatible... Or you can use this: public static function uuid() { return implode('-', [ bin2hex(random_bytes(4)), bin2hex(random_bytes(2)), bin2hex(chr((ord(random_bytes(1)) &amp; 0x0F) | 0x40)) . bin2hex(random_bytes(1)), bin2hex(chr((ord(random_bytes(1)) &amp; 0x3F) | 0x80)) . bin2hex(random_bytes(1)), bin2hex(random_bytes(6)) ]); } 
&gt; Although I'm still more leaning towards generics because it feels cleaner And importantly, by using a compiler functionality instead of home-made hack, you make the intent clear and make sure there's only one, standard way of doing things.
agree, database based calculations are always faster
Thank god.
Given how many people still do it incorrectly or poorly, or use a source of insufficient randomness, I think it definitely makes sense to have in the standard library, just like the password_* functions. EDIT: Also python has UUID generators in its stdlib, so it isn't exactly unique to PHP.
A fair but respectful warning: If you have to ask for functions which perform the most basic of all security operations, I would STRONGLY advise against publishing any public facing websites until you've done at least a crash course in basic security, or you're likely to find your website defaced or your databases deleted. Even specialists can miss a vulnerability every now and then, but you need to start with the basics: https://www.owasp.org/index.php/Main_Page
This has been needed for way to long. Should have been implemented back in the 4.x days
😅 this is my username for more than a decade. It has its origins in my taste of Metal music and brutal horror movies. So, yeah, it is intentionally creepy. Fun fact: non-native speakers always think that it is flashgrinder.
The actual code is more than tiny. I wrote lots of comments to ensure that the implementation is also good for others to learn from on how to write internals code, and of course lots of tests. Simply because tests are a very important thing.
Why would you want to review code when you don't know (PHP) programming. How would it help in any way to "iterate over the features faster"? Let the developer do its work instead of being one of those manager types who think it somehow helps if they throw in (or even force) their opinion about technical stuff. 
You still got the old ones without pdo?
Thanks. I did try some google searches but it came up with soe many matches that were just basic syntax checkers. will check there out.
better specification / explanation of the domain should help here. this situation just doesnt sounds right.
So much that ^ Nothing in your explanation told me you have a reason to be able to read the code. Just make sure you give the developer all the information he needs instead.
/me nitpicking named constructor in PHP always starts with `createFrom` prefix, look at `DateTimeImmutable` for instance you used `from` :)
This provides version 4 UUIDs only (if you set the variant and version), and you still have no parser or type safety. However, you are correct that it is very simple to implement these things in PHP; not efficient, but simple. The idea of an STD is it to provide the most basic and universally applicable things out of the box. This is exactly what this is aimed for.
Yes please!
&gt; I saw a guy video said in a video Enlighten us, what guy in what video?
&gt;3. If the service receives invalid input, this should throw a general-purpose ServiceException, which the controller caller automatically converts to status 400 at a higher level. The whole point of the post was to separate domain logic (such as catching exceptions thrown by the service layer) from the user interface layer (ie the HTTP request). Your recommendation completely violates that.
Blog posts are good, but do you know books related to async programming (even if it doesn't talk about PHP)?
HMVC is not composition of views. It's composition of MVC triads. All web frameworks are a "soft" implementation of HMVC, because what they call the "model" is not the model from the triad the view belongs in (i.e. the model the view reads) but a parent model, to which the controller is a view. It's kind of confusing the way I'm explaining it, but very simple in concept. Controller &lt;-- model --&gt; View / Controller &lt;-- model --&gt; View / Controller &lt;-- model --&gt; View Or in web frameworks: Domain (Controller) &lt;-- model (command/queries) --&gt; Web Controller (View / Controller) &lt;-- model (data array, HTTP requests) --&gt; View
Sorry don't know any books of the top of my head so cannot really recommend one. Is there something in specific you are looking for? 
Can someone smarter than me link to further reading on what the 'high', 'low', etc. bits being derived from the time are? I googled but not able to find anything conclusive.
Good introductory chapter. Looking forward to seeing this in more depth. When can i expect that? 
Good post. I really like the animations :)
I already wrote the outline of the second one, but have been in doubt what exact direction to take. Also considering this is my first ever blog post I wanted to give it some time so people can shout at me I am doing it wrong. Also this is a great opportunity for me to gauge interest. So if people like it I will try to get the next one out next week or the following week. 
This is really interesting! I can't wait for a post that explains how not to fall in common pitfalls like callback hell and how not to reinvent javascript, in php!
Methods names should be verbs
&gt; For this specific problem, using middleware in the Command Bus is where I would make the translation from Domain Exceptions to Application Exceptions in such an architectural model. Of curiosity, are you using those things in the user-interface layer (i.e., controllers) ?
just doing this is the same as using fgets //Read file line by line $file = new SplFileObject('/path/to/file.md', 'r'); //you may use the flags to skip empty line and remove the \n at the end of each line $file-&gt;setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE); foreach ($file as $line) { //line by line }
He is leveraging a lot of features in the amazon MWS library. If nothing else, knowing more about PHP will allow me to determine what features/data are available from the amazon MWS feed. Any spec I write is dependant on my knowing what data he can extract from the Amazon MWS feed. I totally agree that I need to be fair to developer. This project is in the prototype stage where it is mostly about - 'see what information amazon makes available on the feed for my amazon seller account and cache it in a database.' Phase II will be for me to figure out how i want to use the data that is available, I agree that will need a much more detailed spec. Maybe my original question should be re-wroked as 'I want to learn more about php using existing well written code as a starting point, is there any recommendations on software or websites to get me in the right direction' 
&gt; Where's the supposed "violation[s]"? You have successfully described them; well done!
Thanks for getting back to me. That's a shame... it's good to know the plan though. Just realised you're the author of the fast route package. Thanks for authoring that BTW!
Thank you! Send me a PM, I'll give you more info!
Need to check the performance difference. Do you make a speed comparison?
/u/assertchris is currently writing one.
Please poke me when its ready! 
Nice article, a bit lacking in content but really well polished nevertheless. By the way, what is that static website generator you're using? I've seen it before but I just forgot the name.
&gt; How is it different from MVC? MVC shouldn't deal with the domain or core business logic at first place, MVC should only deal with the http request/response cycle. It's two MVC triads connected together. One doesn't deal with the domain, as you say. The other deals with the domain. Hence why as I said it makes it sort of a HMVC example. But in HMVC you have an arbitrary number of levels. &gt; What is the model in a server application? I just explained that...
That's a really elegant implementation \^^
You are correct. It is basic. My idea is to write a series of posts. I am not sure what you mean by "What problem solves?", but that might be a language barrier. But you are right in saying there is an event loop managing async execution which I will certainly cover either in the next post or the one after that. I am trying to start easy and basic so that even people who are new to the concept can follow.
&gt; Why bother replying if you won't make sense? I see you're projecting again. ;-)
Note that for some reason the **6** (4th digit from right) was lost when pasting into calculator -.- (full number in bytes didn't fit so I had to get rid of last 3 digits)
Of course you do: we don't do things efficiently around here!
No
I don't understand the _not to reinvent javascript_ part. Anything specific you're worried about?
&gt; D. You couldn't use this in any strongly typed database with a uuid type for example. Or if you need to exchange data with 3rd parties using interfaces that specifiy UUIDs to be used. &gt; `openssl_random_pseudo_bytes` also has a few issues. When a PHP process is forked, its state is entirely copied (and so are the random seeds), which means two subprocesses running concurrently can generate the same UUID: https://github.com/ramsey/uuid/issues/80#issuecomment-188286637
The fact it was able to calculate that without causing an error itself, is amusing. 
That's actually very true. I'm running 64 bit version though so I don't think this is such a big problem... EDIT: just checked, 1 more digit and it would've been a x64 integer overflow :D
That's the best part: there was none. Just reloaded a page and got this. Didn't go away (exact same number kept coming up) until I restarted apache. Xdebug profiler snapshots yielded absolutely nothing.
Let me guess, your manager wants the app to scale to 10000 concurrent users?
Factory methods are not normal methods. It's perfectly okay for them to be different, especially as it is more logical to read like this (SplFixedArray from array is more logical than SplFixedArray create from array).
I'm still not sure how I would use async within PHP if it existed. I use it all the time with JavaScript, and it's a wonderful thing when you can display something and perform other logic while waiting for data to be retrieved. With PHP as a middle-ware layer role, I need to gather ALL the data needed to produce an output before sending it out. Executing a stack of queries to the DB isn't going to make that go any faster. In this context, I really want everything to be on hold until all of the resources are gathered before producing any output. I would feel differently about it if PHP was controlling the UI layer, like JS does in the browser. Since it doesn't, is there a use case that would make asynchronous calls desirable?
No man I know how C code is working, I worked with phalcon before :) I'm talking about difference between SplFileObject with fgets and file_get_contents() functions 
It's .5 EB, not 5 EB.
The only scenario I can think of it where you're orchestrating multiple parallel I/O tasks e.g. SQL queries, webservice calls, or file operations.
It's made to just to show the concept. I will be showing actual functions and packages later in the series. If you are looking for an async http client in the meantime look at https://github.com/amphp/artax for example
I created a tool to help you out: https://puphpet.com
This isn't really PHP related (at least not yet). I assume future articles will be more PHP specific?
Maybe it was and you couldn't tell
7 deep nested callbacks
Ok, as I newbie that found this very informative I'd like to know where the next page of the tutorial is.
Start here: https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04 Complete that guide with Ubuntu and VirtualBox. That'll get you a LAMP stack up and running in a virtual machine. After you have a little confidence I'd move on to learning a bit about Docker and containers.
Plenty, for instance workers which primarily collate data from multiple http endpoints. Or the opposite (deconstruct data and make many rest write calls). Curl multi is very useful for this particular purpose.
The original problem was that services throw HTTP-specific exceptions. I don't do that, obviously. So I don't know what your problem is.
Thanks, Laravel.
Is it even possible to allocate 5EB of memory on Earth?
Wordpress is just using sebastian bergmann diff library (linked above).
Anytime. Digital Ocean has some of the best guides/tutorials. All of them are applicable to you just using linux in a virtual machine locally. 
Assuming you have an array of items, i.e `$items = ['one', 'two', 'three'];` you can do `$items[array_rand($items)];` `array_rand()` returns the index of a random element.
PHP can have 'em too: [github.com/assertchris/beepboop-api](https://github.com/assertchris/beepboop-api/blob/9423ba717562ab852aa13b77ace77489f9550196/app/Action/User/AddAction.pre#L11-L36)
Thank you, I'll check that tutorial out to begin with. Trying to find the cheapest ways of learning before purchasing anything (broke student) but I'll keep your book in mind! Much against my will I'm working on a windows machine so if vagrant is good across all OS then that's a win
Psst! See the sidebar here: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). Also, titles - helping people who help you starts with a good title. In this case, how about "How to make a website that selects random words from a list?". 
Thank you very much, really appreciate it!
That's type hinting for documentation/autocompletion. Your code will still run and not complain when the developer decides to ignore the type hint in the doc block. OP's question is about type hinting that is checked runtime.
Looks like he used symfony.
Result/Either type (as used in [Rust](https://doc.rust-lang.org/std/result/enum.Result.html)/[Haskell](https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Either.html)) contains a success type or a failure type. It's a nice alternative to exceptions. Typed collection stuff alone is a big reason I want generics. 
The ability to do go like multiple typed returns like in Golang (lol no generics). In php it could look something like the [Hack Pair]( https://docs.hhvm.com/hack/reference/class/HH.Pair/)
Maybe the php beginner course on Laracasts might be of help (it's just php you can skip last lesson on Laravel if you don't want it) [PHP for Beginners](https://laracasts.com/series/php-for-beginners)
I'm saying that's quite a good advantage! :-)
Interesting! (That's the error page I see in Laravel, which makes sense as Laravel is taking it from Symfony
https://github.com/filp/whoops
Yeah, 1 digit was lost when pasting into calculator. I mentioned it [here](https://www.reddit.com/r/PHP/comments/6d3lgw/apparently_you_need_5_eb_of_ram_to_execute_class/dhzj9ml/)
That's awesome
I'm really tired now but I have absolutely no idea what this is supposed to mean -.-
I would but I can't reproduce it. This is the first time it happened to me and didn't go away until I restarted Apache. After that it never happened again
/u/freekmurze
W8, how????
Wait, where can I get 5 EB of RAM for &gt; cheap ???
That's an interesting point but I don't think so
Sorry, I was just looking at the posted image, not doing any math.
DDD Value Objects
Since the project conflicted with the organization I created it in, I recreated the package in a different organization, using your suggestions as guidelines: https://packagist.org/packages/zero-config/geo-distance
Yes really. The reactphp people have been doing an awesome job already. And the amphp people are also doing a fantastic job.
&gt; Others might suggest Docker, but I do not. This is subjective, though - I don't like being coupled to it (then you have to deploy on Docker in production as well) What does this mean? If you use docker for local development you dont have to deploy on docker in production as well.
never seen async in php before
Can we see the errors you are getting, edited into your post? 
Yes I know the basics of all those concepts. I'm now looking for some good learning resources to put that theoretical knowledge into practice, in PHP. 
Can't you just go ahead and buy a 105 million DVDs?
I like the approach of using discreet hashed values for search matching of encrypted values, but depending on the type of data concerned I might choose a more general tokenization / concatenation approach rather than storing multiple index columns representing different search type matches. For instance, if dealing with SSNs and you want a fuzzy(ish) search on them, you can tokeninze the incoming value (`111-22-3333 = ['111', '22', '3333']`), then hash the tokens before concatenating them into an index column. In this way, you can tokenize your incoming search term in the same way (say you have a search for `3333`, you can identify it as a single token and hash it), and then do a normal `LIKE '%hash%'` query on your index column. Of course, this approach relies on the use of a fairly performant hash algorithm and careful choice of tokenization routine. You would also need to be sure not to apply this approach to data with known / guessable token frequencies (like tokenizing English words to letters for example).
Why not?
Agreed, but the nice part of this approach is that if you're tokenizing your incoming search terms in the same way and applying them via an `AND` in your query, then you can pretty effectively at least obfuscate the blind indices problem to minimize the potential data leakage. For instance, you may take a static list of invalid value hashes for your data type and use them as padding during your concatenation operation, and further may concatenate your index hashes in random order. It certainly could be problem that an attacker could infer from the data that two users share a common token, but if those indexes instead are concatenated with a bunch of repeating hashes (the list of invalid values) and in random order makes the problem space much larger. Of course, like any approach there are some downsides to this to consider, including performance of your database indexes if you're indexing / querying large data sets. 
Need your error message Marv!
DISREGARD MY COMMENT, [FOR I WAS STUPID](https://twitter.com/CiPHPerCoder/status/867814507111907329).
Because I'm a PHP programmer, I like PHP, and because I'm working on a real life project on PHP, in the need of asynchronous code :)
nit; UConverter::fromUCallback() isn't a factory, it's a callback. :p But yes, I agree that from*() is more concise.
Impossible to tell for people like us who did not implement it, the manual is completely empty. 😉
*mutter* Something about nobody having time for SVN, let alone phpd. *mutter*
The most basic thing missing is that it's not possible to share objects between threads.
When you use a consistent convention it's easy to make a filter for it. That even goes both ways (input -&gt; object, and errors -&gt; output). So that could work. What I've realized in my own work, however, is that it's typically counter-productive to have different conventions for naming the same things, so you can superficially fit a style. I.e. your client applications probably have "obj.fooBar", which becomes "foo_bar" over HTTP, and "$obj-&gt;fooBar" again on the server side. It'd be much more natural if the wire representation matches what is typically found on both sides of the wire. Mapping will still be required, as you add fields, rename individual ones of them and so on. But I feel a sign of a good workflow is that mapping is done for reason of adapting independently evolved systems and formats, or the evolution one system in time. I.e. not just for the wire format.
Great solution.
We've got a few [pretty sweet tutorials](https://www.sitepoint.com/tag/async+php/). Basically, /u/assertchris is a champ :)
What did you think about how Lumen does middleware?
Wait what just happened here
Someone registered a throwaway account to trash-talk me and my employer. When they signed up, they used `fuckoff@paragonie.com` as their email address. Anything `@paragonie.com` that doesn't have an actual destination goes to me. (Shotgun attempts at phishing are easier to catch that way.) So, seeing as they handed control over this account over to me, I initiated a password reset and replaced their comment. The initial comment was something to the tune of: &gt; Hey pmjones don't ever link to Paragon again because I don't like them. Something something "security expert" in scare quotes. General trash-talking. You're not missing much. I think an admin can recover the original message if anyone's interested.
One thing on PHP pthreads, they're cool, they're a bitch. You need to compile php yourself because tis not a standard part of it, and no OS will have the packages. I develop with it on a VM. Also, there are quite a few tricks and limitations to it. So far I've like it, but it was hell trying to get it to work right.. 
Hmm, doesn't is do it through /usr/sbin/sendmail?
If you have sendmail on your machine then it will likely use that. However, sendmail is not required if you have postfix or some other mailer.
&gt; There are different ways to create new threads (pthread, forks, exec (?), probably others), how to choose which one? There are. For older (or with which you have less control), you can use something like `exec` (check out the second half of [this tutorial](https://www.sitepoint.com/the-delicious-evils-of-php/)). It's messy but supported as far back as PHP 4, and is the simplest to reason about. If that doesn't work for you; you can try Pthreads or Process Control. Pthreads is multithreading, Process Control is a form of multiprocess management. The former isn't installed by default, and requires a PHP installation to have Zend Thread Safety enabled (which causes a handful of other popular extensions not the be installable). In other words, it's a pain to use. It is a brilliant bit of code though, so if you can do without the other extensions, and are comfortable recompiling PHP then go for it. The Process Control extension is usually installed and enabled by default. It allows you to split a process into a parent and a child process, and to respond to changes in the child process from the parent. It's slightly confusing to use, and has a few side-effects I don't very much like. For Pthreads or PCNTL (it's tiring typing Process Control every time!) it's easier to use a good abstraction. The one I like is [github.com/amphp/parallel](https://github.com/amphp/parallel). It works alongside the other Amp libraries, so you can easily use it as part of an async HTTP server or with web sockets. It smooths over the differences between Pthreads and PCNTL, to the point where you pass a deferred callback and get a promise for when it's done. So simple, when compared with using the libraries directly! &gt; It should also support a fallback for PHP installations which don't support multiple threads. PCNTL is a good bet here, because of how common it is. You can use it without either Pthreads or PCNTL installed. Exec works everywhere, but can be a bit messy and (implemented poorly) can lead to security issues. I would go with that parallel library. You don't even need to use the event loop to make it all work: [as demonstrated in this gist](https://gist.github.com/assertchris/81046395dd8ca22d4a7a0aff1de941d7). &gt; How to manage those threads. Worker pools are one way. There's [an example of how to do that](https://github.com/amphp/parallel/blob/master/example/worker-pool.php), using the parallel library. ReactPHP has a similar system. There's also [a recent SitePoint tutorial](https://www.sitepoint.com/parallel-programming-pthreads-php-fundamentals/), which shows how to do something similar with Pthreads. &gt; How to communicate between the parent and children? This will differ between the extensions/approaches you choose. There's no easy answer here, without knowing a lot more about the processes and structures you want to share, but the most interesting way I've found is by distributing events. I wrote about [here](https://medium.com/async-php/reactive-php-events-d0cd866e9285), and then again (but in more detail) in [php[arch] magazine, June 2016](https://www.phparch.com/magazine/2016-2/june/). The idea is that you serialize and store events in a message queue, and "emit" them to other processes/threads by pulling them off again. It doesn't work for everything, and you're not going to share database connections in this way, but it's a neat abstraction for certain types of data. Hope that helps!
Thanks for taking the time and writing this down! I actually got interested in async PHP after reading some of your articles :) Now on to AMP. After reading on of your SitePoint posts, I went and tried out amp/parallel. I very much liked its interace, BUT there no stable release yet. Not even alpha or beta tags. It furthermore requires dev dependencies on amp 2.0. Basically, every composer up I did caused everything to break. Do you use amp/parallel in production projects? How do you handle its versioning, or better, its lack thereof? After the amp/parallel shenanigans, I tried ReactPHP, but to be fair.. I was a bit spoiled by the excellent interface provided by amp. 
You don't need threads for async _at all_.
Or some sort of infinite loop. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
My test was ± 2 months ago. I've used amp/parallel for about two weeks, during active development in a project. I think composer up broke amp 3 times, even when I specified specific commits for composer to use (that's because some of the packages had dependencies which were updated or something). Anyways, at that point; it took way too much time resolving all versioning conflicts between the amp core library and amp/parallel. So I'm very much looking forward to a stable release :) I know I'm not in the place to make any demands, and I know many people asked the same question on GitHub. But is there a specific reason why not to tag development, alpha and beta versions? If you would give developers the option of a dependency they know is "stable" for that version, without composer up breaking that stability, you'd have a much bigger audience to test your library with. But maybe you're trying to avoid that publicity until a first stable release? Which would also be understandable :) My gut tells me to wait for a stable amp release before re-introducing asynchronous code in my project. Like I said, it's such a much better interface than eg. React PHP. But I do hope this stable release will be here soon!
I guess that's why PCNTL is the better choice to make?
True, but I'm indeed looking for information about asynchronous programming in combination with multiple threads.
I just logged in - my last issue was May 2009, and I remember it being two or three months before that. Chances are that there's an editorial in one of those. I'm pretty sure I also had an email. Unfortunately I lost my email repo in the 'great hardware raid corruption disaster of 2010', or I would send you a copy of that letter. (Never trust hardware raid is the bitter lesson learned from that. It will silently corrupt backups too.) Props for keeping the promise you made to give lifetime access to the issues bought; they are still available. I'll have a look at the magazine - maybe there's something there that will tempt me to subscribe again.
Just scanned some back issues... December 2008, exit(0) column has some details on how it was much better for the environment to ship paper across the ocean. Re-reading it gave me the same feelings of incredulity and annoyance. 
This approach no longer works at scale unfortunately at scale dud to the shared IP problem
IMHO (and my opinion may not be right) I think your design is a little bit off and you should move the authorisation to the action itself. I used to think authorisation should happen before the action is even called (maybe in the controller's constructor), but then I stumbled on something called attribute based access control (ABAC) and it changed my opinion. ABAC takes four inputs to return a yes or no decision. Those four things are the subject (user), action, resource and environment. Between those four attributes I'm sure you can work out whether you should authorise anyone to do anything on anything anywhere. Quite often the business logic of whether someone should have access to a particular action involves knowing something about the thing that action fetches. For example, maybe you have a blogging system where anyone can create a blog post but only the author can update one. In that case you need the action to fire to fetch the resource THEN put it into your authorisation layer. If you agree with me the next step is to figure out where to put that authorisation. I would personally say a seperate authorisation layer but others say the model... it's up to you. I hope this helps!
Wow, hellafail.
If anyone wants an *anonymized IP log* that allows statistics per 24 hour period but is otherwise irreversible, the conference talk and demo code referenced in the article covered that too. https://github.com/paragonie/bsidesorl-2017/blob/master/src/AnonymousIPLogger.php
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [paragonie/bsidesorl-2017/.../**AnonymousIPLogger.php** (master → 882a3cc)](https://github.com/paragonie/bsidesorl-2017/blob/882a3ccb56070668ca82e0d02c1baed82a8db015/src/AnonymousIPLogger.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply di2i444.)^.
The problem only arises when you're talking about multiple packages having dev dependencies. eg. I'd like to require `amphp/parallel` in a composer project with the default minimum stability set to stable. That means I need to composer require amphp/parallel @dev Now `amphp/parallel` itself has dependencies on other dev packages, which it will install without a problem. Fast forward a few days later, I'm installing a new instance of that library in a new project. As far as I know, composer will not take that library's composer.lock file into account, so composer will try to install all packages, and checkout the latest dev-master commit of all the `amphp/parallel` dependencies. This causes two problems. 1. You can only specify package stability in your main composer file. So if my project, using my library, has a minimum stability set to stable, I'll need to manually specify all dev amp dependencies manually. This makes my library unusable in production projects, without manually specifying amp as a dependency. 2. In the, let's say, past week, things have been happening in the dependent packages of `amphp/parallel`. Things that break my code. Because these packages are locked on dev-master, a new install of my library will load those breaking changes. Tests fail, real life code fails. In regards to minimum stability, you could say "just set the minimum stability to dev". That doesn't really solve the problem. See, there are a lot more dependencies, which would then either be loaded from dev-master, or you would have to manually set the stability of each package. When I was working on multi threading, the project was already far in development phase. I really didn't want to throw everything around just for amp to work. In my eyes, this could be solved with tagging amp v2 libraries as 2.0.0-alpha1 or 2.0.0-beta2. During beta phase, We could be sure no breaking changes would be added anymore. During alpha phase, you'd release a new alpha version when breaking changes happen. That way, I could lock on, say: `amphp/parallel 1.0.0-alpha1`, and `amphp/parallel` would have dependencies on eg `amphp/amp 2.0.0-alpha3` Maybe I'm missing a way of making composer work in this situation btw, if so: please let me know, so I can use amp today :D
Hey thanks for your point of view! If you don't mind I'd like to share three reasons why this wouldn't solve my (and many others I think) use case: - I'm reaching out to multiple processes because of an existing performance issue. Bootstrapping my app for every single progress defeats half of the purpose. It would give a performance increase during page rendering, but each page render would take a lot more time. I can totally imagine why shared resources are a pain to manage. That's why I'm looking for a decent library, toolset or patterns to help me manage that problem, but I think I really want to tackle the issue instead of working around it, just because it would have a much bigger performance increase. - Secondly, I really want to use PHP as the interface. Not all servers have PHP's `exec` enabled, so the command line solution would in some cases even mean configuring extra scripts etc. In my case, a big part of the project is a commandline tool, made with Symfony's console component. I really want to avoid writing another commandline wrapper around that, just to manage concurrency of page renders. - Finally, because of the commandline application, I'd like to send users feedback on how the rendering phase is going. Falling back to your solution, it seems very hard to me to provide that feedback back to PHP, without writing a lot of other boilerplate code to manage that part of the application. Thanks nevertheless to share your point of view! Really made me think even more about the situation. But to be honest, I'm only more convinced now that the solutions should be managed by PHP. Or in such a way where communication between parent and child process could be done in a transparent way.
I read your article about macro's too just last week :) I've skimmed through the codebase, and wonder if its easy to manage all those small files doing small things, seems to me they're difficult to be coupled to each other. Maybe I'm wrong and just too used to one way of thinking :) Anyways, one question about the communication between children and parent processes. Aren't there any solutions to manage the communications, even with exec? I can think of updating files and reading them etc. But that actually seems like a big hassle to manage..
&gt; Falling back to your solution, it seems very hard to me to provide that feedback back to PHP, without writing a lot of other boilerplate code to manage that part of the application I don't necessarily think so: no matter if you have threads or processes, if you want to provide a user feedback you've to *track* the progress somewhere. I'm assuming the reporting is "somewhere else", we're talking about some common denominator like a database/keystore. So, no matter if it's your thread or process: you would write to the database which pages you already finished and there's your progress. The actual architecture doesn't matter. But: I'm not arguing on favor of my solution :) Another thing you could explore is [CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes), it's a specific pattern how you can operate with your fork/exec (pcntl extension) model. I've seen this in use in a package I once dug into which used this CSP approach for concurrency and feedback (it was some kind of file scanning / parallel processing tool and it had a progress indicator). Unfortunately I forgot the package and searching for "php csp" turns up distracting stuff. I found https://packagist.org/packages/ccirello/csp however but it's homepage is outdated. Anyway! I think no matter what solution you find, would be great if you would report back once you have it :-)
Mother of God, ABAC is amazing, thank you so much for it!
I used [this](https://github.com/amphp/process), for the first time, today. It works well for executing things in parallel (as one would, using exec) and returning the results; in a non-blocking way. I think it might be possible to read, from child processes ⇒ parent processes, by partially writing and reading to/from stdout... Edit: reading and writing to files is one way, but yeah, messy. Message queues or web sockets are probably the cleanest way of communicating.
You are welcome. :)
This is a good overview. I like that they distinguish between encryption and obfuscation. I find most malware obfuscation techniques to be trivial/boring to break. I just download it to a VM, disable said VM's network interfaces, then get to work. Typically takes only a few minutes to reverse the obfuscation for manual analysis, and I have some canned reversing scripts for common techniques. (Replacing `eval` with `print` in a loop, for example.)
Looks good, but I'm a novice and couldn't read the full transcript on my phone. Edit: saved for later :) 😃
hahaha. oh laravel.
I have testet a lot of SQL query builders and decided to use the [cakephp/database](https://github.com/cakephp/database#query-builder) library (without the whole framework).
My quest for consistency has pushed me back not using an ORM. It's probably more fair to say that I prefer raw SQL because I can write the SQL and test it against the database, and then copy it in. Likewise, if something odd happens and I need to test the query, I can just copy it from the code.
I did the same thing (use SQL, then use ORM, then go back to SQL). I have ended up back at ORM again, though not as heavily as before. The trouble for me was pulling out relationship data. Quoting from http://paul-m-jones.com/archives/6568 : &gt; Selecting one or many objects from a single table was no big deal, but doing multiple selections from multiple tables and building up the selection statements for those relationships was a tedious, tiresome, and time-consuming burden. (Wiring them up in memory once they’d been selected was not too bad, given Aura.Marshal, but it was still more effort than I’d’ve rather been expending.) The end result has been [Atlas](https://github.com/atlasphp/Atlas.Orm/), an ORM for the *persistence* model.
while this is a great advice in real world you use app("foo")-&gt;whatever(); and why human should do the IDE work? should I really find the class namespace and name and type in comment? And this will only give me hints. If you'll ask IDE to refactor It won't be raefactored instances, factories, whatever - everything would be better ---- i moved rest to post see (more rant) :)
I've seen them abuse php by casting array to string to get the word "Array" and then shifting the ascii codes to get to other chars to build up function calls and things too to avoid them showing up. 
I don't hate it but it is crappy to use Static to access everything... $user = User::findOrFail($id); ... Queue::failing(function ($connection, $job, $data) { // Notify team of failing job... }); ... Mail::send('emails.reminder', ['user' =&gt; $user], function ($m) use ($user) { $m-&gt;from('hello@app.com', 'Your Application'); $m-&gt;to($user-&gt;email, $user-&gt;name)-&gt;subject('Your Reminder!'); });
Disabling eval doesn't stop someone from doing this: $file = 'tmp-' . bin2hex(random_bytes(32)) . '.txt'; file_put_contents($file, $maliciousCode); require $file; unlink ($file); 
You should be using dependency injection in more places instead of calling app('example'). When you construct a controller, for example, you can put a parameter with a specific type and it will be resolved automatically. Then the IDE will understand too.
&gt; You should be using dependency injection in more places instead of calling app('example'). wait i don't want to use whole hellish app(...) at all together with very common method in laravel controller: $this-&gt;middleware("foo")-&gt;... all of this is suggested way to use framework 
&gt; should I really find the class namespace and name and type in comment? Well.. no. Make the IDE do [most of the work for you](http://i.imgur.com/okyRVz7.gifv) Note that in normal usage it'll just import the namespace and you'd just have `ArrayCollection`
Your initial complaint is about resolving using the service container. This is not a problem unique to Laravel, or even PHP, please see other implementations of dependency inversion. All advantages of OOP are not lost because your IDE doesn't understand features/implications of the language and framework. Dependency inversion is the 'D' in the SOLID principles, which is the very basis for Laravel's service container. That being said, Laravel IDE Helper addresses many issues. Appropriate docblocks as mentioned in a previous reply also help. I don't recall CodeIgniter ever having a service container. Also, if moving from Zend is a step backwards, something's wrong--stop drinking the Kool-Aid, it's poison. Laravel is built upon Symfony's components, as such you will find similar details with Symfony. In other words, it's not Laravel--you're scapegoating Laravel due to your lack of exposure to other frameworks and languages. Laravel has its problems, this is not one of them.
Also there's more functions like passtru, system, SQL...
&gt; So it’s similar to a global variable but the scope is confined to that function – safer. You know what's _safest_? Not using WordPress code to demonstrate good programming practices. This is (unfortunately) good advice in some cases of WordPress, but this kind of code should not be encouraged in almost any other environment. 
[.phpstorm.meta.php](https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata)
If you're going to point out logical fallacies, you should probably know what they mean first.
&gt; and regarding your example - looks cool on gifv clip but in real world is useless Oh, I must have been mistaken because as part of my real world job writing real world software for my real world company I use exactly what you saw in the clip. I used an extremely simplified example which I thought was obvious considering I assigned the string value `bla bla` to the variable named `$a` and then type hinted it as an array collection. Use your brain, quit throwing a fit, and stop being an asshole. &gt; sorry I don't write code in plain PHP file since first OOP php4 What magical file do you write in then? &gt; don't change the topic please It sound like you should have written a blog post with comments disabled if you weren't interested in a discussion. You're lashing out at every valid criticism, suggestion, and comment that shows up here. 
Lucky for us, I do!
&gt; me: OK I can really see you are just defending Laravel for all costs &gt; you: you're just bitching &gt; me: show me example non given and you attack me not the technology
After having my Wordpress site hacked multiple times over the years, I set up a `cron` job that runs every 15 minutes to watch for unexpected changes to any PHP files. First, I `file_get_contents()` a file called `checksums.txt` which is auto-generated at the end of each time the cron job runs (so it's absent on the first run). I then run this on my document root (../public_html): find ../public_html -type f -name \*\.php -print0 | xargs -0 md5 &gt; ./checksums.txt This creates a text file containing all md5 checksums for all files in the document root recursively. I then compare the data I read from the old `checksums.txt`with the content of the new `checksums.txt`. If they differ, one or more PHP files has changed since the last run. Usually it's nothing bad--a planned Wordpress update or something. But occasionally it catches something nasty a script kiddie has managed to insert into a PHP file. Even if they obfuscated their code, I know the file was altered without authorization, so I can lock down and intervene.
&gt; me: OK I can really see you are just defending Laravel for all costs &gt; you: you're just bitching &gt; me: show me example non given and you attack me not the technology &gt; Spending 10 minutes with a Google search, in the documentation, and/or with Laracasts would have resolved 10% of your frustrations. The other 90% of your frustration is in your knee-jerk reaction to immediately call the technology jesus man you are the one who is frustrated I think you use laravel daily and that's the cause of frustration. I only pointed huge flaws in laravel and you want me to dismiss them all the thing is that if there is possibility that you CAN use global voodoo like app() helper or -&gt;middleware kills whole IDE+OOP ecosystem and it's HUGE issue and all you do is attacking me
THANKS! and it sucks in both cases. now let me say this again - thanks for examples - this is very uncommon, you had to dig out zends dependency injections to find it but in Laravel you have this bollocks as daily bread, literally used as recommended code
Okay, so we've established that you don't understand what the word 'file' means. Avoiding the rest of what I said makes it even more obvious you're not here for discussion and opinion, just to bitch and moan.
&gt; If your coworkers are using them when they shouldn't be, don't blame the framework. holy shit it's literally in manual: &gt; Controllers are not required to extend a base class. However, you will not have access to **convenience features** such as the **middleware**, validate, and dispatch methods. https://laravel.com/docs/5.4/controllers you either follow some path or not "hey kids you can create shitty code that no IDE underestand but you don't have to! it's great framework! if you won't use convienient middleware feature you will write quality code!" and i don't even talk about magical helper app(). you keep talking about it and forget about "convenient middleware feature" which is the same but injected into controller and after paragraph i quoted you keep attacking me, just drop it. read comments above we don't have any discussion you are just attacking me
So controllers that don't depend on the **convenience features** don't have to extend the frameworks base controller. So they could be plain objects as long as they don't need to access the DI container. Huh, it's almost like he's saying you could not use the base controller if you don't need things from the container. Thank you for proving my point by posting a quote that deconstructs your argument. You don't have to have middleware to use a request. You don't require access to it. If your use case does, then extend the base controller and inject it. You're right about one thing. The documentation is obviously confusing to beginners if that's how you interpreted it.
&gt; But if someone - me or coworker will ever use global function/$this-&gt;middleware shortcut it breaks whole IDE+OOP promise. &gt; Laravel is so advanced in guts, well PHPDoc documented yet one app(...) call breaks all promises and purpose of OOP That's not what OOP is about in my book. And I use a better IDE. And I know what class to search when I see 'mailer'. And if I really have a problem with that and want to use that `middleware` helper (which I didn't ever needed to), I'll just use it like this : `$this-&gt;middleware(\App\Http\Middleware\MyMiddleware::class);` &gt; This stuff shouldn't be provided at all. Same argument can be said of some symfony stuff. You not liking it and not using it isn't a reason it shouldn't exists IMO. IDE compatibility is very easy to break btw. Ever used __get or __call in dynamic context to proxy to an array of properties or closure/callable ? Can't document that either. Yii2 behaviour are undocumentable, as they can be bind at runtime at any point of the code, it still is a very usefull feature, and core of the yii2 workflow. Well, basically you see a problem where I don't. If this didn't change you mind, let's leave it at that, no point anymore.
So you only write classes that have no properties? The middleware method isn't a magic global function. It's a class method on the controller class. It's extremely obvious you don't grasp the fundamentals of OOP. Littering object creation everywhere is generally a poor choice. What you're suggesting is to use OOP without the encapsulation and without abstraction. What happens when `Class` needs some constructor arguments? And their constructors need arguments? You start to pass those in with dependency injection. Most frameworks, if it all popular PHP frameworks, do this. This is what the DI does. It uses reflection to determine which class your constructor is requesting, and gives it to you. Type hinting and all. No required global functions and no magic strings. As an aside, if you would stop quoting the same page of the docs and read the rest of it you'd learn how to properly register middleware (strict type hinting included). The entire community isn't rallied against you because you've found the magic loophole in the framework that will be its undoing. You're insulting other community members and pushing your fingers into your ears when they talk. It's insulting, and people will continue you treat you like an idiot until you stop acting like one. Accept that your conclusion is wrong until you understand the counter argument or until you can present something new. Or be ignorant. It's your career.
You could potentially use git for this. Just install git and run a git init in your web root and bam all changes are tracked. Just be sure to modify your web server not to serve the .git files.
Just because there's a knife on the table, doesn't mean you should stab yourself to death. But someone else might want to do that. Still, doesn't mean you should. Even though the sheet of paper that's on the table says you should. Just because there's an app() helper on the table, doesn't mean you should use it. Someone else might want to do that. Still, doesn't mean you should. But nevertheless, even though the path you think is right is still available to you, of course you are going to complain for having an extra option, even though someone's put a lot of effort in order to make all that possible. Because that's the kind of person you are. Have a nice life
This is the correct answer.
I'm lacking context I think, because on the surface this looks like a bad way to solve a problem you shouldn't even be having. In this case, it's...another way to have global, shared, mutable state? With all the drawbacks of global, shared, mutable state. Sometimes when you have a problem which only seems to allow bad solutions, you should stop trying to invent *better* bad solutions, step back, and find a way to *avoid* the problem.
What this won't help you with is the fact that a plugin that might already be compromised will make it into git (or the checksum file) either way. The exploit might not be used to change any files but could make database changes that will also have an impact. Also what happens with updates? Say a plugin is updated, at that point you recommit to git but again you need to have a look through the code of every updated file to confirm there's nothing suspicious about it.
I appreciate the effort but isn't guzzle supposed to simplify http requests in the first place ? :)
Not sure to proud of that or...not...we have a shitty government. I even went to the protests to take it down!
Hmm, fair question. I'm doing a code review and I came across this. The platform is WordPress whether I like it or not, and WordPress is still stuck with globals for the forseeable future. I wouldn't use statics or globals in my own code, but given the context of WordPress and how that's sort of the only way to do the things they're doing, I'd say statics are better than globals (slightly). The reason I thought it interesting enough to blog about it was just because I've never seen that done before, and didn't understand it. Once I got someone to explain it to me, I wanted to remember, hence the post, and thought others might be interested, hence posting here. I am in no way recommending that anyone uses static OR global variables, or anything else, really. It's just FYI a thing you can do. 
I don't understand the draw towards these SQL abstraction libraries. Whats wrong with just just writing SQL and using PDO? I typically have a `MySqlModel`that my model extend from. They provide the access to the database, and child model provides code that doesn't require the database. E.g. class Person extends AbstractModel { // Properties protected $firstName; protected $lastName; protected $companyId; //Related entities protected $company = null; // Table name protected static $table = 'person'; // Columns protected static $columns = ' person.id, person.first_name AS firstName, person.last_name AS lastName, person.company_id AS companyId, person.created, person.updated '; // Json public function jsonSerialize() { return [ 'id' =&gt; $this-&gt;getId(), 'firstName' =&gt; $this-&gt;getFirstName(), 'lastName' =&gt; $this-&gt;getLastName(), 'companyId' =&gt; $this-&gt;getCompanyId(), 'created' =&gt; $this-&gt;getCreated() ? $this-&gt;getCreated()-&gt;format(static::DATE_TIME_FORMAT) : null, 'updated' =&gt; $this-&gt;getUpdated() ? $this-&gt;getUpdated()-&gt;format(static::DATE_TIME_FORMAT) : null, ]; } // Save/insert/update/delete protected function insert() { if (!$this-&gt;getCreated()) { $this-&gt;setCreated(new \DateTimeImmutable()); } $this-&gt;query(' INSERT INTO person ( first_name, last_name, company_id, created ) VALUES ( :first_name, :last_name, :company_id, :created ); ', [ ':first_name' =&gt; $this-&gt;getFirstName(), ':last_name' =&gt; $this-&gt;getLastName(), ':company_id' =&gt; $this-&gt;getCompanyId(), ':created' =&gt; $this-&gt;formatMySqlDateTime($this-&gt;getCreated()), ]); $this-&gt;setId($this-&gt;lastInsertId()); } protected function update() { $this-&gt;query(' UPDATE person SET first_name = :first_name, last_name = :last_name, company_id = :company_id, updated = UTC_TIMESTAMP() WHERE id = :id LIMIT 1; ', [ ':id' =&gt; $this-&gt;getId(), ':first_name' =&gt; $this-&gt;getFirstName(), ':last_name' =&gt; $this-&gt;getLastName(), ':company_id' =&gt; $this-&gt;getCompanyId(), ]); $this-&gt;setUpdated(new \DateTimeImmutable()); } public function delete() { $this-&gt;query(' DELETE FROM person WHERE id = :id; ', [ ':id' =&gt; $this-&gt;getId(), ]); } // Find methods /** * @return Person The instance matching the ID, or null. */ public static function findById($id) { return static::fetchPerson(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . ' WHERE id = :id; ', [ ':id' =&gt; $id, ])); } // Find by attribute First Name public static function findByFirstName($value) { return static::fetchPeople(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . ' WHERE first_name = :value; ', [ ':value' =&gt; $value, ])); } /** * Find the first instance matching the supplied First Name or * `null` if there was no results. * * @return \App\Model\Person|null */ public static function findFirstByFirstName($value) { return static::fetchPerson(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . ' WHERE first_name = :value LIMIT 1; ', [ ':value' =&gt; $value, ])); } public static function countByFirstName($value) { return (int) static::query(' SELECT COUNT(id) FROM ' . static::$table . ' WHERE first_name = :value; ', [ ':value' =&gt; $value, ])-&gt;fetchColumn(); } // Find by attribute Company ID public static function findByCompanyId($value) { return static::fetchPeople(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . ' WHERE company_id = :value; ', [ ':value' =&gt; $value, ])); } /** * Find the first instance matching the supplied Company ID or * `null` if there was no results. * * @return \App\Model\Person|null */ public static function findFirstByCompanyId($value) { return static::fetchPerson(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . ' WHERE company_id = :value LIMIT 1; ', [ ':value' =&gt; $value, ])); } public static function countByCompanyId($value) { return (int) static::query(' SELECT COUNT(id) FROM ' . static::$table . ' WHERE company_id = :value; ', [ ':value' =&gt; $value, ])-&gt;fetchColumn(); } /** * Yields an instance for every row stored in the database. * * WARNING: It is not advisable to use this method on tables with many rows * as it will likely be quite slow. * * @return Generator|\App\Model\Person[] */ public static function iterateAll() { return static::fetchPeople(static::query(' SELECT ' . static::$columns . ' FROM ' . static::$table . '; ')); } /** * Returns an array of every instance stored in the database. * * WARNING: This method can quickly cause a out of memory error if there are * many rows in the database. * * @return \App\Model\Person[] */ public static function getAll() { return iterator_to_array(static::iterateAll()); } /** * Fetch a single instance of Person from a PDO result, * or `null` if there was no results. * * @return \App\Model\Person|null */ protected static function fetchPerson(\PDOStatement $result) { $entity = $result-&gt;fetchObject(static::class); if (!$entity) { return null; } // Parse date attributes // Parse created/updated dates $entity-&gt;setCreated(new \DateTimeImmutable($entity-&gt;created)); $entity-&gt;setUpdated(new \DateTimeImmutable($entity-&gt;updated)); return $entity; } /** * Yield multiple instances of Person from a PDO result. * * @return \Generator|\App\Model\Person[] */ protected static function fetchPeople(\PDOStatement $result) { while ($entity = static::fetchPerson($result)) { yield $entity; } } // Fetch relationships // Fetch has one Company relationship as Company public function fetchCompany() { return \App\Model\Company::findById($this-&gt;getCompanyId()); } public function getCompany() { if (!$this-&gt;company) { $this-&gt;company = $this-&gt;fetchCompany(); } return $this-&gt;company; } public function hasCompany() { if (!$this-&gt;getCompanyId()) { return false; } return $this-&gt;fetchCompany() ? true : false; } // Attribute accessors public function getFirstName() { return $this-&gt;firstName; } public function setFirstName($value) { $this-&gt;firstName = $value; return $this; } public function getLastName() { return $this-&gt;lastName; } public function setLastName($value) { $this-&gt;lastName = $value; return $this; } public function getCompanyId() { return $this-&gt;companyId; } public function setCompanyId($value) { $this-&gt;companyId = $value; return $this; } } 
I've added this to the list of libraries I will go through - always interesting to see how others have achieved what they feel is a good solution.
What? You mean I cannot write a wrapper around Zttp to simplify common use cases?
Everyone in Romania knows PHP
&gt; Not sure to proud of that or...not Depends on if he works with Wordpress or not.
They'd still need to edit an existing file in the webroot or modify one for their file to ever be able to be executed over the web, thus the changes would be detected by git
What was the initial reaction, out of interest? :-)
Nice :o thanks!
because if you have lowerCamelCase member variables it won't work. try something like this $firstName and check the results 
It was originally strtolower(substr($str,0,1) . substr($str,1)) It has since been fixed. Don't try to BS and act like it wasn't a coding error when it was. I got the response of "it was just for testing and I have fixed it". (I am assuming it is your blog)
works like charm my friend. http://imgur.com/a/EW2DX and this is why we substring then concatenating the two back together.
It is not an error. This line **strtolower(substr($str,0,1) . substr($str,1))** is used to deal with lowerCamelCase member variables like $firstName and you can check the results without it. One of the editors thought that its an error but actually its not. 
It can handle camelcase with this line and the line is still present in both funtions toArray() and toObject(). Regards.
No, it was around the whole string. You probably don't want to argue with someone who has a eidetic memory. Otherwise I would not have been able to reconstruct it. I also would not have asked you the question in the way I did in my original post if it wasn't around the whole string. At first I was thinking optimization (why substr and concat back to the EXACT same string then strtolower when it would be more performant to just strtolower the string) Someone else asked you about camelCase as well, I am assuming because he saw the same thing I did.
FWIW there is also [Zend Hydrator](https://docs.zendframework.com/zend-hydrator/quick-start/).
Also, you are making yourself look a little ridiculous, everyone makes mistakes programming, you could have simply said "Yes, thank you I corrected this", but instead you are arguing with me about what I saw on your blog. Makes you look bad.
Think different. No the hassle of hydration. Deadly simple and fast. https://github.com/makasim/values
Exactly he was asking about camelCase does it work with it or not? and I answered him with Yes.
Just curious why not use lcfirst. http://php.net/manual/en/function.lcfirst.php
It was away from my mind while typing the sample code but I think it should work in similar way.
No, It is not. The object gives you the contract (by public methods or the interface it implements). How the object stores data is its internal details. The data is stored in the array. There is no any serialization-deserialization at all. 
Dude just own up to it, you made a mistake, you're making yourself look bad and your site, everyone just sees his post at the top, all your posted downvoted and thanks you don't know what you're talking about. There is nothing wrong with making a mistake, by trying to deflect it looks makes you look like a fool.
I'm not a fan of using *Lets-pretend-it's-ok* solutions, but at least you could optimize this code (key normalization would be an option to enhance naming style coverage): foreach ($methods as $method) { if (substr($method, 0, 3) !== 'set') { continue; } $key = lcfirst(substr($method, 3)); If (array_key_exists($key, $values)) { $object-&gt;$method($array[$key]); } } Btw. You might want to set "falsy" value sometimes.
Doesn't this make you question the needs for such `Employee` class? &gt; Information is simple, we wrap it up in stupid classes that accomplish nothing. You'd be better off, 90% of the time you use classes to do 'data things', to just use a hash instead. Your system would be simpler, you could write generic data processing utilities that didn't had to know about your class, your get, whatever thingy. Just use it like it is, an associative piece of information. https://youtu.be/rI8tNMsozo0?t=29m36s
I didn't say not having a CMS was the way to go. I said not having a securable CMS was the problem. Plenty of CMS are more easily securable than WP. If someone's set of configs and plugins make it impossible to secure their site they probably shouldn't be running it. 
Before accusing someone of not knowing how SEO and web development works, you should think about it yourself. Google isn't spamming your page 24/7, every 5 seconds to check for new pages, nor will they crawl a new page immediately, it will be added to a queue.
Honestly, you're the one that looks bad. Why is this so important to you? Jeeeezuuuuus christ.
Functional programming and type systems are orthogonal. There are many functional programming languages that suggests typeclasses instead of hashmaps, for example.
The post is not about SEO and crawling. The main goal is to check the first image of the page.
I wish I had taken a screenshot of my home screen where the app had a reply from them saying "yes this is a mistake". I wasn't thinking this would be such an huge deal to just admit they made a mistake. I had two replies on my mobile app when I came back from my shower, one was a "yes, mistake, fixed" and the other was "no, working as intended" posted slightly after. You can even see likegeeks admitting it was a "editor" who "thought it was wrong but wasn't" in one of the previous replies. Hindsight is 20/20 and if I would have though about it I would have screenshot my homescreen.
``` $a = hexdec($arr[$i]); $b = 3 &amp; $a; ```
From your second link: filter_var() can be used to check if a string contains a hexadecimal number, and also to convert a string of that type to an integer
P.S. In your defense, hexdec() is horribly named. It's not converting to decimal format, it's parsing to an integer, which is not intrinsically based. But it's also an ancient function, and the time to rename it is long since passed.
You mean my comment, which was the second comment to be placed here (going by timestamps) and the first pointing out something potentially wrong with the code. Someone posted before me pointing out something? Which you then corrected? &gt; Finally it was REVERTED BACK TO THE ORIGINAL ONE That means it was correct from the beginning. Show me a screenshot of the edit history on your blog then I will believe you.
Yes, of course, that was stupid. Don't know what I was thinking - or actually: I somehow got stuck on the idea that the numbers had to be hex numbers specifically. Thanks!
Ah, right. Forgot intval() took a base arg. I'd use that as it's name it much more meaningful.
Thanks. I saw that but it seemed there had to be a simpler way. Turns out there is: /u/SaraMG's [answer](https://www.reddit.com/r/PHP/comments/6dq3rx/upgraded_to_71_yesterday_and_just_been_bitten_by/di4jo2w/)
Because you have a guarantee about the data's structure. You get more safety and IDE auto-completion. It's also easier to find usages to refactor whenever the structure changes. Hack has a nice alternative called 'shapes' where you can define the structure of a hashmap and get some of the advantages of a DTO while using a PHP array.
Ah, yes that's a good option.
[wat](http://img2.wikia.nocookie.net/__cb20140804211707/whatever-you-want/images/e/e3/Comment_sX6IlbdWPEsMOjCjsMKGP42imLppt8yX,wat.jpg)
Thank you for this reply. I was going to say something similar but decided it probably wasn't worth it. Web developers should be agnostic about the stacks we (often don't choose to) work with. PHP has come a long way and Javascript has become a titan in its own right. Both have their pros and cons, good and bad frameworks, etc. We should all have our opinions without being condescending to the "other."
Ad placement. and questionable reddit history.
TIL! Thanks, OP!
Awesome!
If you're dealing with string's as array keys, you could go down this route, $array = [ 'name' =&gt; 'Adrian', 'age' =&gt; 26, 'sex' =&gt; 'Male', 'location' =&gt; 'Sheffield', ]; $key = 'age'; $position = array_search($key, array_keys($array), true); $values = array_values($array); $previous = $values[$position - 1]; $next = $values[$position + 1]; You would check array_search returned a valid value and the next/previous indexes was existed before using them however, in practice.
Ugg, you sound like someone that ~~refactors~~ pointlessly rewrites code to use single quotes instead of double to "speed things up". What ever you're doing this is not going to be any contributing factor from real bottlenecks. 
EDIT: Look at /u/ocramius one --- If it's a numeric indexed array, /u/Man_IA is right. If not, nothing elegant I can think of, but maybe look into [next](http://php.net/manual/fr/function.next.php), [prev](http://php.net/manual/fr/function.prev.php) and [current](http://php.net/manual/fr/function.current.php). Anyway, data might not be sorted the way you think it would be. You might want to look into the array sorting functions too. If `next`, `prev` and `current` aren't a better solution, I would do a kind of sliding window : &lt;?php $array = [...]; $search = 'my value'; // You can't have null value as a search or as a wanted result. function nextAndPrev($array, $search) { $prev2, $prev1, $current = null; foreach($array as $key =&gt; $value) { [$prev2, $prev1, $current] = [$prev1, $current, $value]; if($prev1 === $search) { return [$prev2, $current]; } } if($current === $search) { return [$prev1, null]; } return [null, null]; } [$prev, $next] = nextAndPrev($array, $search); // Check for nulls. But you might be better off with a custom data structure.
Thanks! I didn't know that
PHP is generally used for web applications. Currently your best time will be measured in milliseconds for end user experience. Compound that w/ client side java script rendering. It's a waste of time to worry about microsecond optimizations. You may say "but they can add up"! Do they? Worry about your database queries, network latency, shit even disk IO. This is a particular case of what makes code more readable and maintainable.
Same is true for `unset`
~~Also, in case you weren't aware, `isset()` does the equivalent of a `==` comparison. This means that any value that would equal false would make the test fail; i.e. false, null, 0, or ''. If it is reasonable to expect any of these values, but you need to know if the key exists, use `array_key_exists()` or `property_exists()` instead. Not as slick as multiple arguments to `isset()`, but more accurate depending on your use case.~~ Edit: It's also important to know that `isset()` with multiple arguments–like an `if` statement–will only return true if **ALL** keys/properties exist: **[PHP.net/isset](http://php.net/isset):** &gt; If multiple parameters are supplied then isset() will return TRUE only if all of the parameters are set. Evaluation goes from left to right and stops as soon as an unset variable is encountered. 2nd Edit: It seems I was mistaken about `isset()`. My apologies. 
Typically micro-optimizations are considered an anti-pattern because you get very little benefit for the amount of effort you expend. There are also readability/maintainability concerns, as well as misconceptions surrounding micro-optimizations (e.g. single vs. double quotes). 
 &gt; What is so important with old plain PHP objects? The fact that they convey their own intent, without containing technical details about orthogonal concerns. This allows for focused dev work on just what is going on in the logic of the plain old php object. In addition to that, your objects keep working as they should when you need to change some business logic or serialisation logic independently. &gt; Why do people use them without questioning this? I do use what you mentioned above with the concept of "Data Transfer Objects" (DTOs) when it makes sense to build a data packet that has that concern as central purpose (data transfer). I do question what I see as a mis-fit, otherwise I wouldn't have replied :-) &gt; In addition to the above, Things come to worst when you deal with objects tree\aggregation root. To get a state you have to walk through every single object, doing reflection magic, complex transformation logic and so on. Yes, that's a price I'm well willing to pay to avoid mixing serialisation with my object's business logic. Most folks seem to be scared by reflection logic, but [it's really dumb/simple](https://github.com/zendframework/zend-hydrator/blob/9a4bc5571bfe903da4ed763b624d05103e8349fb/src/Reflection.php#L23-L62). Also, it doesn't need to be magic: a custom class per use-case can do this, it doesn't need to be an agnostic library. 
&gt; isset() does the equivalent of a == comparison. This means that any value that would equal false would make the test fail; i.e. false, null, 0, or '' I've read this several times, and [I don't know what you mean](https://3v4l.org/ldrdh). `isset()` is equivalent to (set and) `=== null`, not `== null` - because `null` is falsey but `isset(null)` and `isset(false)` give _different_ results (well, if you could use `isset` on an expression, they would) - specifically, `isset` on "falsy" values is `true` not `false`! Maybe you were thinking of `empty()`? 
The code sample at that link already does: $array = [ 'false' =&gt; false, 'null' =&gt; null, 'zero' =&gt; 0, 'empty' =&gt; '', ]; var_dump(isset($array['null'])); // false as expected var_dump(isset($array['false'])); // true, not false var_dump(isset($array['zero'])); // true, not false var_dump(isset($array['empty'])); // true, not false Also, it'd be pretty weird for it to act differently on array values...
Hm. Interesting. I can't try it atm because I'm out of town and not near a computer. What version of PHP are you using? 
Retrieving the values would be ambiguous, since `null` is a valid value, so I limited myself to getting the previous and next keys: /** * @param mixed[] $phpArray * @param string|int $key * * @return array&lt;int, int|string|null&gt; of 2 elements, first one being the previous key, `null` if not found, second one being the next key, `null` if not found * * @throws AssertionFailedException if the provided $key is not a string or an integer */ function previousAndNextKey(array $phpArray, $key) : array { Assert::true(is_string($key) || is_int($key), sprintf('Key must be an integer, %s given', gettype($key)); $keys = array_keys($phpArray); $position = array_search($key, $keys, true); if (false === $position) { return [null, null]; } return [ $keys[$position - 1] ?? null, $keys[$position + 1] ?? null, ]; } [EDIT] Meh, just noticed that /u/Lelectrolux's response is equivalent and older :-\
&gt;Same goes for *var_dump()* As always, the real LPT is in the comments. But for real, that's awesome. Thanks to you and OP. 
For the love of god please use incrementers php.net/manual/en/language.operators.increment.php 
Yours is better, I search on a value, not a key. Missed OP's 'given a key, ...' part, focused too much on the 'elements'.
Nope. It wouldn't work. $array = [ 'name' =&gt; 'Adrian', 'age' =&gt; 26, 'sex' =&gt; 'Male', 'location' =&gt; 'Sheffield', ]; $key = 'age'; $position = array_search($key, array_keys($array), true); // $position = 1; $values = array_values($array); $previous = $values[$position--]; // retrieves 'Adrian' // From here $position === 0 $next = $values[$position++]; // retrieves 26, not 'Male' I'm more concerned about the `array_values`, as it would reorder numeric keys is some cases, and can be a easyly avoided : $array = [ 'name' =&gt; 'Adrian', 'age' =&gt; 26, 'sex' =&gt; 'Male', 'location' =&gt; 'Sheffield', ]; $key = 'age'; $keys = array_keys($array); $position = array_search($key, $keys, true); $previous = $array[$keys[$position - 1]]; $next = $array[$keys[$position + 1]];
I await your ground breaking research paper showing that isset(x) &amp;&amp; isset(y) vs isset(x,y) improves performance beyond any margin of error one way or the other. 
Did I say that it would? Or did I point out that unless you actually test different ways of doing things you will never know what is and what isn't going to be labeled a micro-optimization. I'm not advocating to do anything a certain way. I'm only pointing out that there is no way to know what is better until you actually implement it. So you can get all excited and defensive or realize what I was actually pointing out is somewhat of a quandary.
My comment had nothing to do with PHP explicitly, it was more of a general statement that programmers have become extremely wasteful. It would be interesting to see some type of competition to perform a complicated task with a finite resource limit and code size limit. Like most people, I use PHP because you don't have to understand how the underlying computer works to use it effectively. Even though I have that knowledge base, it is nice to just throw something together without having to worry about all of the complicated bits at times. So I completely understand the perception of hostility towards optimizations using this language as the majority of users might not have the skillets required yet. But they are worth investing in. 
&gt; As always, the real LPT is in the comments. You're right, and the **real** LPT is to just stop using `var_dump()`. Use a debugger, or at the very least something like `PsySH` so you can get into a REPL.
You have three options: 1. Fetch all keys with `array_keys()` then `array_search()` for the key, and -- and ++ in the keys list, to get prev/next. 2. Use `reset()`, `next()`, `prev()`, `current()`, `key()` to walk the array and compare the keys until you get to where you want, then use `next/prev()` to get what you want. 3. Don't use order information in associative arrays. Modify your data structure, so this inefficient and awkward situation doesn't happen. The best option is really 3, but I can't give you concrete advice on the alternative without seeing your data and your needs. But just as one example, if you'll be walking key/values in sequence, you don't need an associative array, you need a list of tuples: $listOfTuples = [['key1', 'value1'], ['key2', 'value2'], ...]; With this, the index is numeric, so walking forward or backward is more intuitive.
Do you know what **really real** LPT is? You can use an interactive debugger without stopping the use of `var_dump()`. Those are not mutually exclusive tools, so we don't need this misplaced pretentiousness every single time whenever someone mentions `var_dump()`.
It's not pretentiousness, or misplaced. I don't see many cases where `var_dump()` is actually a more beneficial workflow than what I suggested. Sure, if use TDD and you dump and exit you have kind of a point. However, I'd argue it's still better to get thrown into a REPL at that point so you can tinker around and write the code you want, then go back to your test, update, and run the test again from there. It's a pretty big productivity change. I'm actually almost always using PsySH now instead of xdebug. If I could step over/in/out with PsySH, I would probably never need xdebug again.
i sometimes do `ob_start(); var_dump($relevant,$data);$debuginfo=ob_get_clean();` for throwing exceptions where the stack trace would be insufficient to debug it
ofc if you were running a debugger when the exception occured, use the debugger's capabilities instead. but in live production code, i'm not running every execution through a debugger. are you?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Brb fixing my code Thanks OP!
What's the benefit to incrementors here?
Is there any reason why `isset()` supports multiple variables while `empty()` does't?
I guess the only valid reason is to have consistency, to be able to later "Find and Replace" things easily.
Perhaps, but how would you pass that as a parameter?
Honestly you should just setup your expectations properly or straight up ask him if he did this. Your wasting more time by coming here and making this post. 
&gt; True! I'll retract my statement ;) incrementers would only work with numerical arrays, Even with numerical it wouldn't work or would be worse. Incrementers mutate the variable. `$x + 1` doesn't. Try this : $x = $y = 0; $xPrev = ($x--); // Should use --$x I know $yPrev = $y - 1; var_dump($xPrev); // return -1 var_dump($yPrev); // return -1 var_dump($x); // return -1 var_dump($y); // return 0 $xNext = ($x++); // Should use ++$x I know $yNext = $y + 1; var_dump($xNext); // return 0 var_dump($yNext); // return 1 var_dump($x); // return 0 var_dump($y); // return 0 And `$x++++` doesn't compile So given : $array = [...]; $key = 45; You can either : $prev = $array[$key - 1]; $next = $array[$key + 1]; Or : $prev = $array[$key--]; $key++; $next = $array[$key++]
I agree with you. I can't remember when I last used var_dump, several years at least. Not that I care what others do but it just seems like an odd choice when you have a debugger.
We're looking at implementing an AB testing feature for a site, using Varnish as the edge side cache. All of the examples given for how to do AB testing in varnish are trivial e.g. a single test with just two options. Does anyone have any advice on how to manage a medium number of tests without the varnish config files becoming horrendous? Also - it's not clear to me which approach is best to manage the AB tests for edge side includes e.g. using vary on cookies, to cache different versions with the same url, or to rewrite the include url, to avoid needing to use the possibly fragile 'vary' caching. Does anyone have advice as to which is easier to manage long term?
The information provided is quite sparse. If you have two pages, you can write tests for them if their logic is encapsulated within separate classes. I would attempt to determine what is it that you would test yourself if you made changes to the page, and then write a test to test for that very scenario. Otherwise, understanding the logic for each page and writing a test that ensures that it works correctly isn't a bad thing either. 
This would be a huge improvement! So far, `is_callable()` and `callable` are too fragile for library code, and require a lot of additional checking. Sure, we can dump the problem on the user, but this RFC actually fixes the type, making it usable in all known scenarios \o/
I'm reading your senseless rage all over the thread and wondering what is wrong with you. At best you are frothing at the mouth about what was a simple typo in the code, now fixed. At worst you didn't read the code correctly and now you are in a holy war to prove you can't possibly be ever wrong. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The problem is, in short, that legacy callable can't capture context. With a closure, I can capture a call to a private method, and pass this as a callable to a location that can't invoke the private method directly, but it can invoke it through the callable. This is much cleaner than having a bunch of public methods sticking out of an object, whose only purpose is to be called back as callables. Closures are also much faster than callables to both check at a type hint location and to invoke, as they are an encapsulated type whose properties are known without expensive runtime checks. The entire existence of "callable" is weird to me, especially as it came long after we had closures. Why encourage some version of it at all, instead of deprecating the entire class of string/array callables and leave these two definitions: 1. Closure. 2. Object implementing __invoke() This will make the "callable" type hint faster, more predictable, and push people in the right direction towards the safer, cleaner, more flexible, more performant alternatives to legacy callables (i.e. closures and __invoke() objects). We already have this: http://php.net/manual/en/closure.fromcallable.php so everything can be a closure. The only improvement here is to probably split this in three methods with a clean API, so we don't have to pass in arrays created only for this purpose: Closure::fromFunction($stringFunction); Closure::fromStaticMethod($stringClass, $stringMethod); Closure::fromObjectMethod($object, $stringMethod); Or if you don't care about overloaded parameters, just: Closure::fromFunction($stringFunction); Closure::fromMethod($stringClass / $object, $stringMethod); **The trouble with this RFC:** The only thing I'm worried about this RFC is that it might break `Closure::fromCallable()` and provide no alternative. I can currently convert private/protected methods to closures with this API, because it uses *the current call context*. But if callables are redefined to only "public methods and functions" then this very useful API will stop working in these cases.
No mention of Magicento? For anyone doing Magento development it's easily worth every penny. http://magicento.com/
&gt; So far, is_callable() and callable are too fragile for library code, and require a lot of additional checking. Do you do additional checking? Or you just ask for \Closure. Because I do the latter, and I never looked back. The whole legacy callable format should be put out to pasture.
I hope we'll also eventually get some kind of ReflectionCallable that allows reflection of any callable. I see the code that analyzes what kind of Callable it is and that creates a ReflectionFunction or ReflectionMethod depending on it duplicated everywhere.
Well, now you know what to change when the next major release rolls out ;-)
Yea funny how I didn't know that for years too, but last week when I was refactoring old code PHPStorm was like "These like could be done better.." and told me that I just could use one isset with an arrays of items. Then I checked it at php.net and was suprisingly confirmed. I knew this for var_dump for years, but never thought about that it could be in isset too. 
I knew about var_dump, but the isset one is just really interesting
I've already posted it here (https://www.reddit.com/r/PHP/comments/6a439k/composerci_a_continous_integration_tool_for/), but since the old link is no longer working, we changed name and launched, I'm posting it again.
Do you mean extensions like [these](https://github.com/php/php-src/tree/master/ext) ? The source code is compiled on each platform and the comments are ignored. You can read the comments in the source and use your IDE to walk through the code as it is executed.
It's expected that the source code is proprietary, most companies won't be happy if you're just giving away source code. I'm talking more about the general structure of those pages, object oriented / procedural or what exactly you're looking to test. There are two books that I bought long ago when I was going through testing myself, [here](https://leanpub.com/grumpy-testing) and [here](https://leanpub.com/grumpy-phpunit). Both were excellent resources, made me less grumpy the more I read.
Yes, extensions like these, because it looks like the only way to implement my idea and learn. Basically I just want to output comments in php scripts on runtime. So I guess php extension is required, but not sure if extension is capable of doing it.
Yes this one looks good, but it did not met my requirements.
Thanks for replying! I'm gonna check out the two sources you provided.
Is this elegant enough? https://gist.github.com/mlebkowski/5c7dc9be4492b458ee1536dbbc2353d2 // loop determines if the first item is next to the last item function findNextItem(array $input, $currentKey, $loop = false) { // array_to_entries converts array items into a `key` and `value` touple return array_reduce(array_to_entries($input), function (array $context, $item) use ($currentKey){ return [ // this marks the current item for the next iteration "isCurrent" =&gt; $item["key"] === $currentKey, // if the previous iteration found the current item, use this item’s value, // pass along what we got previously otherwise "value" =&gt; $context["isCurrent"] ? $item["value"] : $context["value"], ]; }, [ // initial state. we found no matching key yet: "isCurrent" =&gt; false, // and we have no value yet. if the loop mode is enabled, treat the first value as a default "value" =&gt; $loop ? reset($input) : null, ])["value"]; } This function has the upside of searching not only by keys, but by any other criteria (with little tweaks), for example your items have an `active` key, etc.
I thinks this deserves some kind of reddit hall of fame
Depends on the type of comment. If it's a class/function/property level docblock (`T_DOC_COMMENT`) then they should be available (as long as `opcache.save_comments=1`) but if it's just a random inline comment then they will be stripped. But depending on what you're trying to achieve that may not matter; you've always got the option of tokenising the original source...
It's called functional or integration testing. Your unit tests give you only so much certainty, that everything will work. Actually testing if it DOES work in a real-world-scenario should be the final step. If you want to test an http-client you don't have much choice but running a local http-server with a demo-app simulating what you want to test for (are redirections working as they should, ...).
Thank you for your comment. Feel free to take part of the project and improve things. Also, be the first to add some unit testing using travis, etc.... Background: The R&amp;OS pdf class was one of the first PDF libraries and the main focus (since Wayne Munro became inactive) was to keep it compatible with newer PHP versions. But of course the more developer we become the more we can optimize this library. This is kind of a wake-up call to all motivated PHP developers
&gt; Feel free to take part of the project and improve things That kinda is a problem, since I already got loads of libs. I'm just pointing out that this library is NSFW in its current state, sorry :-\ 
true. doing a key search for it would work, but it's not elegant or efficient.
Learn Symfony, has a ton of opportunities on the market at big companies. Laravel is liked by startups, but it does a lot for you, Symfony is more defined on that aspect. Also, Laravel uses the Active Record (Eloquent) where your database logic resides in the objects itself, whereas Symfony uses the Object Mapper (Doctrine) which in my opinion is awesome, your php objects directly translate to a database schema and it separates your models from your logic. Drupal uses some Symfony components, but that's about how far my Drupal knowledge goes. WordPress is something you don't want to touch at all. So, my recommendation remains Symfony. 
maybe this was for https://www.reddit.com/r/PHP/comments/6dyx5e/what_is_a_good_place_to_learn_writing_php/ ? thanks anyway :)
Thank you. I will look into this
I've been a Drupal developer for 5+ years and you'll always find work once you've mastered the framework but it does have a steep learning curve. It really depends what kind of job you're after but I'd recommend coming up with a sample app idea and then building it in a few different frameworks. It's a great way to compare how different frameworks solve the same problems and you'll be able to relate your implementations to each other for comparison. A few good demo apps should help you get a job as well.
How come? It's every bit as versatile as C, but with a simpler and more familiar syntax imo. See [here](https://www.sitepoint.com/getting-started-php-extension-development-via-zephir/) (old post, but still valid as an overview).
Knowing the Symfony HttpKernel/EventDispatcher components is very useful when starting with Drupal 8 but imo that is also basically where it ends. Still it's better than not knowing these components.
&gt; This is where it becomes apparent you're arguing just to argue That's not even true, and it's really rich coming from the guy **still arguing**. &gt; This is why when an application or an OS crashes it produces a "crash report" I'm fully aware. &gt; This is why exceptions produce a "stack trace". That's a var_dump() of your call stack, so to speak. I'm fully aware. You are making quite a lot of assumptions about what I do and don't know. Look - you can pretend all you want that the only bugs that ever happen are only going to be weird race conditions or something. The fact of the matter is most bugs are going to be simpler than that. The way I work out dealing with bugs, crashes, etc., is pretty damn simple: I follow the steps locally and see what happens. If I don't replicate the issue, I follow it on QA. If I don't replicate it there then I try it on production. If I **still** don't replicate it, I'll big a little deeper into the reporting mechanisms we have in place and truth be told - I've not found it to be a big enough issue. Honestly, I think I've only had 2 cases where this was not enough, but I was fortunate enough that our support reps were able to communicate rather effectively w/the clients and we were able to get the issue figured out. The thing is, I couldn't reproduce it in production though without knowing more specific data about what the client was doing. I'm sure this doesn't surprise you given that you want to `var_dump()` all the things. Keep in mind that none of that involved going into teh production server and `var_dump()`ing shit. In fact, I'm 100% against `var_dump()` in a production environment. Yeah, maybe you'll write it in some crafty way to where you **think** the other users won't see it, however, there's a chance for that to fail. I much prefer just cloning the database/cahing/etc into the QA environment and following the client steps there. Then, I again, have a playground to work with.
&gt; output comments in php scripts on runtime Could you elaborate more on this? I don't quite understand. You can do this with Reflection and reading docblocks...
It really repends on the company. I am pretty sure that both directions have good opportunities, one day X will be better, the other day Y will be better, but there is no master who performs the best. You just should take care not jumping on every hype train that is active. Symfony is a pretty awesome tool that ranges from small to big business software project. It's a little bit tricky at the beginning (didn't understand the most thing when I started).. I myself needed a lot of reading and trying. But after I tried to build up some private projects, I found out that this is pretty easy and so mighty! You will learn a lot of magic, but if you master it, you will be able to build projects very fast, very easy and powerful scalable! Laravel seems to be good too, but I don't have much experience with it. I started with it, actually liked it, but damn the namings.. "illuminate", "eloquent", "facades".. that sounds so tryhard. It's just a (stupid) personal reference.. nothing special. Some might say "whats wrong with them? they fit perfectly" and yea, what ever. WordPress.. well, there was a time where I was like "damn that's beautiful" (I have no clue why..), but when I look at WP code todays.. urgh. For real. WordPress is a CMS. It's perfect for blogs and shit, but todays it's used for everything. Wordpress is not a Godtool that can do everything. You shouldn't use WP if you want a shop.. it's sad that you want to pay for that instead of real solutions. So.. if you want a simple blog, you can use it. Maybe even if you just want to use the inplemented backend + content managing it have some reasonable strenghts. Perfect for creating small pages with some dynmaic content. For everything more, it's the wrong solution. So getting hired as PHP Developer.. well, nowadays they searching for Full Stack developer.. or something specialist like Magento or something. Otherwise having very good basic/advanced knowledge is helpful!
Personally I haven't see these "tons of opportunities" in big companies. I saw some but the requirements were to high. Jobs offers for real software engineers with testing, debugging and agile skills. There are more jobs for Laravel, yii and codeigniter for normal developers 
Yah, plus some other irrelevant ZF stuff
&gt; they look pretty, which is about *all* anyone making an initial decision cares about (for better or for worse). The problem comes in the moment someone wants any deviation from the theme. Most of the themes I've seen over the years are extremely brittle and convoluted, with little supporting docs as to how to make changes. There's a few I've seen that are more documented and describe how to make common changes, but they often still seem very convoluted when needing to make any substantive change. 
&gt; the Active Record (Eloquent) where your database logic resides in the objects itself It doesn't have to be this way at all. AR is just a way to easily map data from database to php objects. The vast bulk of any "logic" can still reside in separate re-usable classes (generally how I do it).
Why do you want that? Possibly use https://secure.php.net/manual/en/closure.fromcallable.php ?
I was there too, and my take-away regarding documentation on creating your own extensions is that it is fairly non-existent, and many of the core extensions were written via the copy-somebody's-working-code-and-edit method. 
The second link is the one you wanna learn. I've had to read it 3 times before I actually got it all :) To this day I still need to look up what `setMethods` does (worst method in history). What is unclear in part 3? For a beginner, you DEFINITELY don't need to get into protected/private method testing + generating coverage + crap reports.
Interesting, this does seem to do exactly what I want. Thank you.
How is this different from Illuminate collections?! It looks literally like copy paste... 
Yea fine, if you want to learn c, learn more how php works etc then yea, it could not met your requirments, it was just an idea if you don't want to learn all the hard stuff and still to write extension and simple and nice way it's good to check it out.
Serious question: why do we need another another collections library? There are literary tons of them out there (even more than routers....). Lem me rephrase this: why should I use your library over other ones?
The OR version could be written `if (((int) A + (int) B...) &gt;= 0)`. I guess coercion might negate the need for the casting.
You'll get hired doing drupal, massive shortage of devs. That being said it's very unique and not like other frameworks, you will spend time mastering Drupal rather code. It's not a horrible thing but symfony and laravell are the typical frameworks you'll see everywhere
Why bother with that? Just write stored procedures.
Because I did not find that you can hook in a code being processed. It is for making a class/function that is compiled into extension. Am I wrong?
I'm sorry I don't understand. What do you mean by &gt; you can hook in a code being processed 
So the script is being processed line by line. I guess I can hook into this process by extension and use a tokenizer to read if that line is a comment and then output comment content into console. It is similar like xdebug going line by line. Maybe I have to read xdebug source to see how it is done. Also it can be zend extension that has more hooks than php extension, but yet again I am not able to find information about php extensions.
Not by default. If your database is on a separate server, you should have it on a private subnet so that nobody from the outside can access or listen in on your database connections. Someone else pointed out that you can secure the mysql connection, but the hit to performance isn't worth it. Also keep in mind that the physical location of the database server should be as close to the app server as possible. If you're not sure that you need a separate server, use the same server the app is on to start. You can always move it later - unless you're already expecting scale problems with one instance.
If you want the connection encrypted you have to force the use of ssl in the connection. If the security in your case is important you can authenticate the mysql usar with certs to strong the access
It's always good to do a real check. If you're on newer MySQL (5.6 might work) you can check encryption on live connections: SELECT sbt.variable_value AS tls_version, t2.variable_value AS cipher, processlist_user AS user, processlist_host AS host FROM performance_schema.status_by_thread AS sbt JOIN performance_schema.threads AS t ON t.thread_id = sbt.thread_id JOIN performance_schema.status_by_thread AS t2 ON t2.thread_id = t.thread_id WHERE sbt.variable_name = 'Ssl_version' and t2.variable_name = 'Ssl_cipher' ORDER BY tls_version; (simply put sleep() in PHP and check)
That's nice. Stop spamming /r/php please.
Assuming you mean "literally", how did you work out the individual weight of all these software libraries? How many tons did they come to, roughly speaking? And are you using metric or imperial tons? `:==)`
Lordy, there are literally millions of people misusing the word "literally" in this thread. What would be the difference between a "copy and paste" and its literal variant? 
having now been working with Symfony for 6 months, after a 5 year stint in Django land, I will recommend Symfony. It is a well designed, fully featured framework that is also highly modular and easy to customize. 
Yii and codeigniter? Where are those jobs? If If I see a CV that only has codeigniter experience I count that as no framework experience.
Quite simple: just download all libraries in question and weight the disks required to store them
I can count on no fingers the developers I've met that had a pleasurable experience with drupal though. So there's that...
Std = Sexually Transmitted Disease? Would love to see a `\Core\Uuid` and `\Core\LibSodium` for example. Why like this and not UUID? Because AUUIDInterface would look really weird. With UuidInterface, there's a clear separation between the words and avoids using single letter words. I believe its called PascalCase? I don't think UUID (or HTTP, or...)should be treated as an abbreviation in class/namespace names, but a word on it's own. We don't call it by the full name when talking either, but we use the short name.
Dear me, that means there must be quite a lot of libraries out there. If a library takes 1M and you can fit squillions of those onto a 3T drive, there must be literally gazillions of libraries to make up many tons worth. I surely don't want to be the sucker who has to download them all! 
&gt; Std = Sexually Transmitted Disease? Heh -- though no more or less so than `stdClass`.
[Credits to Percona](https://www.percona.com/blog/2016/02/23/mysql-connection-using-ssl-or-not/)
`PHP` is a reserved namespace, whereas `Std` is not. We should not ignore the PHP ecosystem that is built on top of a `Vendor\Library` namespace scheme. Using anything else than `PHP` is most certainly possible, but using `PHP` is the safer route.
While that is true, a quick search on Packagist makes it seem like there are no packages by Std. And yes, PHP might be safer... But if this is something we are going to stick to for the rest of the language, we should opt for something comfortable and useful. PHP has enough problems and bad design decisions as-is, we shouldn't introduce new ones if possible.
I would point to RHEL as an example of why this is unfortunately not workable in the real world. RHEL 7 shipped with PHP 5.4. RHEL 8 will probably ship with PHP 7.0 or 7.1.
PSRs are part of PHP core now? Wow, that’s news to me. 😉
There is no real consistency and no real rule, but except for SPL almost all classes that are defined in the core itself are following the abbreviation/acronym approach: - https://php.net/class.GMP - https://php.net/DOM - https://php.net/SimpleXML - https://php.net/XMLDiff - https://php.net/XMLReader - https://php.net/XMLWriter - https://php.net/XSL I personally do not care. At trivago we also have the PascalCase for everything rule, because it is easier to have a consistent naming scheme. In Java it’s abbreviation/acronym, in Rust it’s PascalCase, in … I seriously couldn’t care less. So far nobody from internals raised a concern in this regard, so my guess would be that it’s fine as is. PS: Having `Php` seriously looks wrong in my book, but purely from an aesthetic point of view.
Maybe [this extension](https://github.com/nikic/php-ast) can do what you need in terms of reading comments
Or use a virtual private (encrypted) network with tinc or openvpn for example. But yeah by default your setup is completely unsafe!
cURL is usually faster (we're talking maybe 1 second difference sometimes!), so I usually have a library that can call either curl or PHP streams depending on what's available, so I can see the point in having a wrapper, but yeah it could be in front of PHP functions or curl functions directly, instead of depending on Guzzle, which is quite overkill for that.
Really?! Yes LITERALLY the same! Down to method names and even arg positions. So, yea to conclude it is EXACtLy the same... you might prefer non teenager like variant of the sentence better... but then again you did start your sentence with "Lordy"... so...
A C/C++ base is probably your first order of business for writing a PHP extension.
So what happens when they get moved *out* of core? Would anyone have really guessed that `mysql` would get moved out back in the day? Just use a meaningful namespace like `UUID\` and there's no issue.
yeah, it was mostly for callback hell, the reinvent js part was mostly a gentle joke 
Here's what I'd like to see: 1. I build the entire website in static HTML/CSS, etc. but with PHP file extension and try to have pretty pathing except for the .php on the end, which I can use a regex rule in NGINX or Apache .htaccess to pull off the end. (I worry about the .php thing later.) 2. I edit all text or HTML sections, or image sections, and wrap with a SPAN class as "cms-editable". 3. I zip it up. 4. I open my CMS on some Linux domain I use to host nothing but the CMS. 5. The CMS interface would be much like CraftCMS. No bells and whistles. Pretty simple. It can use SQLite as the database. 6. I upload my zip into the CMS. It creates a new "project" for it in the CMS and then identifies all those editable SPANs. No files to edit. No directory structures to create. The only editing I had to do was take the static HTML website and add SPAN wrappers with "cms-editable" class. 7. I can then adjust the HTML, plain text, and image content in that CMS. Also supports a blog mode for certain types of content that needs to act like that. The editor should be powerful and have a WYSIWYG mode. 8. When done, I can then click a button "Replicate To Server". It asks (and will store) the SFTP/rsync credentials to that server. It will then use rsync and sftp to push that content to the Linux PHP server. It pushes static content (as PHP files) to the server. Can then also be told to ignore certain files (not blow away certain files on the server). 9. Next time someone needs to edit this, they login to the CMS and repeat from step 7 above. Here's what you get with this: * the website is less susceptible to hacking because the CMS is hosted on another domain * most of the pages are static content, so they load faster -- no interaction with a database necessary on the production domain * you can give a client a login to the CMS and they can push some changes in WYSIWYG mode for the most part without needing to do programming * if you have some section of the site that's news items or blog items, it's still supported * if you have some section of the site that needs single image swap or even a gallery, it's still supported I so wish this existed. I wish this CMS were PHP-based, free, and community supported on Github.
Your assertions would seem to be obviously wrong. A simple glance shows a very different structure, features, classes, files, methods, and arguments. Feel free to provide an example, because I'm not seeing it at all.
Thanks! My personal opinion also favors consistency, but PHP\Std got me confused. Looking forward to seeing namespaces in PHP core classes. Thanks for the hard work you (and the other PHP contributors) put into this!
Quickly going into the `cms-editabl`" class, because at my job, we've also been brainstorming that concept a lot. Here's the thing: as soon as you want to edit more than content on that page, a single class isn't enough. Then you've got to start fiddling with data attributes, which adds a lot more difficult to maintain configuration in your pages. Let's take a look at an easy to relate to example: a blog. You've got an overview page with all blog posts showing the title, date and teaser intro. Clicking on an item will show you the blog detail page. Say you want to make changes to blogpost A. If the detail page has the `cms-editable` class, you could edit the blog post there. But what with the title which is shown both on the detail page and the overview? How would the CMS know that when you're editing the title field (which is just a text field without any context btw), it should also edit that title line in the overview? Of course there are workaround for this. You could add a data-attribute which specifies this blogpost also appears on another page. But what then with pages where multiple "content types" exist? eg: a homepage with both featured news and blogposts. That brings me to another problem: what if there are multiple overview pages showing that blogpost? You could build in more logic based on HTML elements (eg: h1 always is the title of the content type). But than you're limiting yourself to a very strict set of rules, probably making your CMS less flexible for people developing with it. One more possibility is that you just edit the same blog post multiple times. Which, from a developer's point of view, might not be the biggest issue, but it is for content managers who would use your CMS on a daily basis. Even if they have technical experience. Maybe even you would get sick of it after a while, because it are a lot of relations to manage in your head. After our brainstorm, we came to the conclusion that yes, it would be possible; but is would in no way be scaleable or easily maintainable. You would also probably pollute your HTML with classes and data attributes which add nothing of value to your production site. From my point of view, even those small bytes are a no-go from the standpoint of performance. Sorry to pick on your idea.. Just wanted to share my thoughts on it, exactly because I think the concept would work like a charm, but there are too many issues which cannot be solved in a scaleable, performant way. 
I'm a Drupal contractor in the UK. Currently in a nice contract, and getting contacted by recruiters for new positions on a daily basis. I don't know about the other systems, sorry. 
Hi Hydros, I was n't even aware of Illuminate/Collections. Therefore it just can't be a "copy-paste". Feel free to spend some time to read the source code. Usually that helps learning new things. I just had a quick at Illuminate/Collections. Looks quite promising. Thanks for the hint. I added that to README.md ( https://github.com/bastman/php7-Arrayly/commit/32065898371f1a5bb8aab1e2ada962301341fa59 ) . Btw, I guess most of the api's (including method signatures) are not invented by the awesome Laravel guys. They just "copied and pasted" it from python itertools, javascript, java streams - who knows ??? And who cares? I am working in a polyglot microservices environment, where php is just one out of a few languages I deal with. In the end I'm glad these languages have collection frameworks that provide more-less similar api's. Makes my life much easier, when switching between them :)
Thanks for the tip!
That was terrible. I can't believe I now have that in my watch history. Didn't even cover the important differences.
Wow! I really appreciate this a great deal. No offense taken in the least bit. I'm surprised you put so much energy into thinking that one through. That was nice of you. So many people are snarky, and it's nice to see a real adult for a change. So, take for instance [this site](https://hollywallfirm.com/) that also has a news page [with repeatable sections](https://hollywallfirm.com/news.php). I did that website. (Yes, I know the FAQ isn't done -- I have an appt. with the client next week on that.) You don't think a remote CMS could be used to maintain such a site and push out changes over rsync/sftp to it? In other words, the CMS is on a completely separate Linux PHP domain, and the website is static HTML/CSS on another Linux PHP domain. Changes would be pushed over rsync sftp. Let's take for instance the homepage. On that page, you see: * Menus. This could be an HTML block. My current one is done with Bootstrap and has extra stuff, but I could probably simplify that with just UL LI with A links and then some Javascript in the page could automatically "Bootstrapify" them. That way, it's a little easier on the lawyer client to not munge this up if editing. * 15 images that could be labeled and then someone could go into the CMS to swap these out if they wanted. * two logos -- one very large, and one you see only when you scroll. Again, could be labeled and swapped out via the CMS. * 6 text entries. A simple WYSIWYG HTML editor could be used to edit those. Some CSS in the page could help format them properly. I think the problem you posed deals with cross-links. So, let's say I have a blog item, but that it gets referenced multiple times in the website. Hmmm... the CMS may need a special system where you can link to existing content in the CMS. I still think the concept has wings. It's not easy. It may not satisfy all websites. It may require some extra thought on items like blog/news repeating new sections, or summaries that when clicked go to longer articles, and on things like sidebar menus that repeat menus from other pages, or news or blog posts that may need to get cross-linked on other parts of the site. However, I don't think I'd need to litter the site with too many classes or data-* attributes. 
Meanwhile, I'm checking out Grav. It's interesting. A2 Hosting has a super easy way to install it via Softaculous. I need to look at this product more deeply and then share some of my thoughts here on it.
Hi Shadowhand, Thanks a lot for your hint. I wished I had known knapsack before. I just had a quick look. I like it very much, since it makes heavy use of Generators and tries to mimic Clojure's Collections. I added the link to knapsack's github repo to README.md . ( https://github.com/bastman/php7-Arrayly/commit/14d9fb14eba7eccdbabcd23e2742a63036824bf2 )
&gt; It's one of those things that you can learn in a weekend This mindset leads to poor code. 
As someone who actually writes stored procedures; I find your derision offensive. 
Where is your evidence?!
What is std or core actually. I think namespaces should be defined as per common usages in other languages so that it not only serves the purpose of a **library** but recalling too. Putting everything in core/std is a bad idea. I would love to see **Php\String**, **Php\Array**, **Php\Curl**, **Php\Numeric**, etc. They would be simple and easy to use.
The infinite amount of work hours spawned in a client project where the entire domain logic is in SP. Also, the fact that state mutations in the data layer lead to unpredictable and non-symmetric xhnges, usually bringing you to a "wtf moment". Feel free to use SP to copy data around (projections, views, logging, auditing), not much more without causing massive headaches.
Thanks. I guess this is what I was looking for and it looks like extension can't do that I want.
This will conflict in any project where anyone has created an unnamespaced UUID class. If PHP wants to maintain as much BC as possible and make upgrading older projects as easy as possible, it should avoid using the "root" namespace. The root namespace is only the "defacto" core namespace because it used to be the only namespace - it's also the "defacto" namespace of every project that does not use namespaces everywhere / was written before namespaces were introduced. The "PHP" namespace is what it should be using going forward to avoid conflicts.
Dang, you totally had me!
After deleting the old and downloading a new zs-client.phar it runs but spits again an error out: but this one is another array(5) { [0]=&gt; string(70) "======================================================================" [1]=&gt; string(43) " The application has thrown an exception!" [2]=&gt; string(70) "======================================================================" [3]=&gt; string(46) " ZendServerWebApi\Model\Exception\ApiException" [4]=&gt; string(15) " Not Acceptable" }
That is probably the least elegant namespace you could have come up with.
The link at the top of the repo
Btw, I do think the FTP/rsync/version control approach is a legit way to do this. Also rendering your site on a different server is nothing wrong with. But I do think that if you're aiming for a reusable approach, it will take a lot of configuration to be a "generic solution".
Not trying to diss you, but you could also apply the same questions in reverse order: "do you understand why certain patterns came to be the way they are?", "have you applied these concepts in real life applications? Where time, money and scope do matter; and where maintenance is a big part of your job?"
Not sure why, but all of the links appear to be working now 
&gt; Why should I use a logger that doesn't follow PSR-3? I don't know &gt; What benefits does this have over creating a handler for Monolog that forwards requests to another external log aggregator? Because you have to create a handler, this solution can be added to your project in 2min (literally). It's for devs that just need a quick and simple way to debug projects when using a local log isn't working for them. 
&gt; Please remember that your job is reading, understanding and thinking before typing, and typing is just a side-effect. &gt; And please, please, please: remember that most of your time you are not coding for yourself alone. You are coding for your employer, for your team, for your project, for your future self. *feeling a bit relieved*
I decided (again!) not to post the wall of text "critism", but just this: This is not an advertisement place and also not a beginners place. I am pretty sure that the most know the difference or is at least able to Google it by himself. I really liked to give feedback about the video, but I can't find nice words for you, so I will stop right here. So you should. 
My full opinion is [here](https://www.sitepoint.com/balance-visual-technical-debt-php/). TL;DR: - I don't see a need for `final` - use interfaces when building something that's meant to be extended/replaced, or when building something that simply has to conform to a contract in order to be accepted as an argument - definitely **never** remove `public` from methods because it introduces unbalanced and, to my OCDish eyes, jarring layouts - type hints I like, because I prefer to be able to get precise error locations and types and good static checking done.
You want to chuck some Abs in there: A=-1, B="1". And (int) 0.7 is 0 which could be a problem. And (int)"ABC" is 0. There are probably other edge cases I haven't thought of; to be safe, anything which is not 0 has to be treated as True.
Not working from UK ISP A&amp;A: http://i.imgur.com/lRrGEq5.png http://i.imgur.com/gUpnkUR.png
if only :(
I agree, there's no need for final. Why? Because everything should be final. It should be an opt-out, not an opt-in. If you design your class to be extended, you should note that, otherwise you should not be extending but composing.
Whats in your tmpVhost.conf
Also check https://zephir-lang.com/ its a wrapper for php extensions so you don't need to worry about the low level problems like memory management. It also lets you interface with other php classes / functions.
just the basic Virtualhost configuration
&gt; I'd read that book/blog! 
Really too bad that lock didn't make this release. 
Whatever happens in laravel, stays in laravel. I hope.
As long as you're not reckless like logging your private SSH key, I can't foresee any major security threats to logging using a 3rd party like this. Perhaps you could elaborate on this point?
I use child's STATIC:: constants (the same principle as with properties) in parent class methods all the time. Well, maybe not all the time, but it definitely has some uses.
Ooh. If we go for the 100gsm paper, using the font size you suggest, roughly how many pages should we aim for, to obtain the literally tons that Xymanek was referring to?
&gt; Do you not understand that 50 shades of grey was based on a consensual relationship bro. Do you not understand consent? That's probably the worst example I could think of. 50 shades of grey featured actual rape. He kept going when she withdrew consent. Whereas Larry's kinks were *actually* consensual.
Crappy spam post fora crappy Indian developer 
If you're interested in creating a extension you might want to checkout Zephir as well, it's much easier to get up and running with and will help a lot if your C isn't quite up to scratch 
&gt; its a common php stack to use mysql I would say no, the common one is MariaDB not MySql since Oracle fingered it. It depends, are you using SSL? If so then yes its "safe" for as long as SSL is safe. It's also worth mentioning that 101 database security is NOT having your database publicly accessible so I would reconsider your plan and move the database server into the same datacentre as your webserver and have it set up in a local VPN so the database server is not public facing.
&gt; How do I store this in the database? Store them as ints with lowest unit as 'one', or if your database supports it [decimal](https://dev.mysql.com/doc/refman/5.7/en/precision-math-decimal-characteristics.html). This allows you to store precise values in the database without float rounding craziness. If you're storing money values as ints, you would need to format them on output. e.g Dollar value = cent value / 100. &gt; I need to deal with money precise to four digits. Actually, it's better just to work with money values completely accurately within your application, and then display values with the precision required, rounding as appropriate for each scenario.
2015 wants is blog post back.
the top nav looks exactly like JIRA/Confluence which is freaking me out otherwise it's a cool idea, but not sure how much better it would be than using xdebug and an IDE
Thanks for that, SaltTM.
I get what is being said, and that you should question what you put in. Do you need a full framework to create a blog, possibly? Do you need to write tests for a landing page that is going to live for about a week during a promotion, possibly not? Do you need strict types for everything, no. I agree with the questioning, I don't agree with an opinion being made available on a resource that is known and respected for it's value of resource. People need to realise that learning new stuff is hard and stressful. If someone is at a junior type of level and read this then get into these habit's, when they are interviewed and asked why they don't use said features of the language then they could miss the chance of that job/stepping stone to progress. So, although I get what is being said, I personally feel it should not have been put on laracasts. Jeff has put a lot of his personal time into this resource and think the personal attacking is not on. Some of the comments are damn right rude, even reading mine back I feel it was not written well enough.
I think all of your thoughts here are perfectly reasonable. Mine: - `final` - pointless in most cases. - Interfaces - useful when they're useful. Not useful when people to default to creating them for everything. - "Remove public" - That was a two second addition to make you rethink even the most fundamental of practices. I do agree that keeping public helps with OCD a bit, haha. I personally use "public" for everything except test classes, where I change the rules up a good bit. - Type Hints: Again, useful when they're useful. :) They should be opt in, not opt out. 
What's wrong with it? (honest question, I'm not a native english speaker - also I copied the original blog title)
I think you should look into implementing PSR-3, that would mean developers won't have to learn another set of API calls in order to use your logger. It can be a drop in replacement for local development.
&gt; but I'm also really baffled that throwing proven concepts out just like that is promoted as "the way to go". "Proven concepts" is an assumption. Dynamic languages have been a thing for a very long time. And I would never suggest that removing everything is the way to go. The point of the video was to challenge even the most basic of assumptions. &gt; But as soon as you're talking about real life, production projects where multiple people work in the same codebase Remember...this translates to every Ruby app in existence. Every Smalltalk app ever. 
Same from the U.S., ping results in `unknown host`
I find it a good way to discover what incremental changes are made. It will make migration to new LTS version easier
&gt; the elitist framework How is it an elitest framework? &gt; used in the most important projects by the biggest corporations with thousands of jobs available Because it's a good framework, with good support, and LTS releases &gt; What is the point of being promoting a 6 months support version? Because the minor releases are backwards compatible, and not everyone lives only on LTS releases. It contains new features that people will want to use for now. People don't have to upgrade, but there's no problem with promoting a release that many people do want to use &gt; And what is the point if the incoming version 4 is nothing like this? As long as you remove deprecations, then there shouldn't be that much trouble to upgrade to Symfony 4. And if you can't upgrade to Symfony 4, you'll have 3 years of support on 3.4. Just because Symfony 4 is coming, doesn't make 3.x pointless. &gt; I remember the last job offer that I saw for symfony, it was for creating console command for symfony 1 Okay? I haven't actually had a job where people use Symfony 1, but that's your experience. Doesn't mean it's everyone's &gt; symfony 1 lol not even decent wiki Symfony 1's last release was 8 years ago, and stopped support 5 years ago. If you're suprised you can't find good documentation for a version from almost a decade ago that hasn't been maintained in half a decade, I don't really sympathise with that. Sounds like you just have a grudge against symfony for some reason
&gt; Except, technical debt isn't always bad. 100% agree. And visual debt isn't always bad either. I was trying to illustrate that you need to measure these things, rather than blindly adopting them. &gt; The removal of language keywords is not akin to "removing unnecessary things that you need to read". In some cases, absolutely it is. More than one developer has drowned in a sea of PHP code complexity. &gt; It's completely bananas. Maybe it works in a 20 line strawman code sample but in 20,000 lines of production code which have had 5 sets of hands all over it in the last 6 months? Again, what I suggested is no different than what every Ruby app in existence does. &gt; And while we're at it, nevermind that this whole silly idea will only work if there is a well crafted and complete test suite in place to document how everything is meant to work. Sadly, in my experience, such things are not terribly commonplace. I'd rather have some built-in language features to help convey intent than nothing at all. This, we can agree on. Adam Wathan had a funny inflammatory tweet about them being akin to training wheels. Really useful, if you don't have a test suite to validate your code. 
This is a quick and dirty solution for developers who need to remotely log variables. In it's current form, Console is not suitable for 'high-risk' users, nor was it designed for them. Both of you and irphunky points are valid but not applicable. Note: "MVP I made over the weekend."
haha, I actually did not know they had a library for it
Could you elaborate? I don't understand what your mean at all. The composer package (...and the whole project in general) has been designed so developers don't need to learn anything. You just need to call one method.
Obviously I wouldn't want to put any of my day job code through this, but I also wouldn't want to put any of my personal projects through this if I had users as I wouldn't want to expose there data to a third-party. I think the idea is great and as MVP it does all you require, I was just stating that in it's current state I wouldn't be able to use it which is a shame. I was in no way trying to belittle or criticise your work, so my apologies if that's what came across.
I don't see 'visual debt' in things like type hints, I see it in poorly structure code, code that doesn't have a consistent style, 300 character long lines, etc. Yes it's important to review the reason you're using certain constructs and language features, but throwing the use of `final`together with type hints and visibility keywords in the same throw away basket is really bad advice IMO. Sure, the use of final is definitely debatable. But to pretend that enforcing the restriction of parameters to only types that you handle, strongly defining what types your method will be returning, and restricting the direct modification of properties in favor of accessors which may do more than a straight get/set is just mostly useless visual clutter is silly. Especially when you're speaking from the position of an educator.
Lord, hear our prayer.
PSR-3 provides a [`LoggerInterface`](https://github.com/php-fig/log/blob/master/Psr/Log/LoggerInterface.php) which people can typehint in their code. Most third-party logging libraries (such as [`monolog`](https://github.com/Seldaek/monolog/blob/master/src/Monolog/Logger.php)) implement this interface. This makes it easy for people to swap out specific loggers in a given application; they can just inject another implementation without having to change anything else.
Trying to give a constructive answer here, I really respect you as one of the big tutors the past years in the PHP community. And I've only seen the video today. After reading up on the many reactions, pro- and contra and listening to your followup podcast, I notice you're falling back to the same answers, yet ignoring the real arguments made against your video. I see "Ruby" coming up as an argument a lot, yet find that comparison to be not very fair? We're talking about PHP, with PHP developers here. A quote from your followup snippet podcast: &gt; One repsonse to my suggestion that it puts a lot of [...] on the class [...] I think a lot of people would again say: "Well that's why you have interfaces Jeffrey. [...] And now you have a contract that exists." &gt; And okay, once again: that's fair. &gt; But.. we're adding more complexity. It's just, it's just no two ways about it. That's not giving any constructive counter arguments against the thing many programmers are telling you! Furthermore, these concepts are proven by many programming languages in the past what? 20+ years? It are, as far as the programming world goes, proven concepts. Now again, nothing against you personal. I've noticed you reacting quite heavy on the topic, often sneering at people. From one side I can understand that reaction, but from the other side.. That's not really building a good reputation either. Anyways, thanks for replying here, and sorry if this reddit topic once again tore everything open. I myself just really wanted a place to discuss this with fellow PHP developers, because no I do not agree with the things told in your video. But it was in no way meant as a personal attack.
That is a serialization format ;-) `array` is a serialized format, when compared to a plain object.
&gt; More than one developer has drowned in a sea of PHP code complexity. Sure. And, whilst we're all throwing around statements without evidence, I'll suggest that the majority of those are drowning in ACTUAL complexity - you know, insane branching conditionals, poorly named methods, classes with reams and reams of unrelated code, dreadful organisation. I don't think they are drowning in the _grammar_ of the language which takes no extra effort to parse &gt; This, we can agree on. Adam Wathan had a funny inflammatory tweet about them being akin to training wheels. Really useful, if you don't have a test suite to validate your code. For those rare projects which DO have decent tests - I consider these keywords to be useful language artifacts. The punctuation of the language. Much like the mental parsing effort for punctuation in English, The mental parsing overhead is negligible (and if it is actually significant, I invite you to provide links to the relevant research to back up your assertions - I'd be interested to read it). I work on projects with other people. It is faster for me to look at a class and see that a typehint for a given interface is required on a constructor, open the interface and figure out what I have to give the class than it is to read through/process a dozen test cases. If I see a class if final, I can either whine about my colleague not trusting me or I can apply the principle of charity, assume they have done this for a reason and be potentially guided by the code _around_ any potential landmines (even if those landmines are a function of the architecture). Perhaps the dynamic is different when you are working by yourself, or closely with someone of equal skill with a nearly identical philosophy with respect to design. The point here is, that these extra pieces of punctuation provided an opportunity for the developer to show intent. Yes, your strawman example code (which for something so trivial, nobody in their right mind would write in the manner you so disingenuously presented at the beginning of your video) will *run* in your final form just fine. But I would argue that some of the *intent* is lost. Visibility keywords allow me to quickly scan what is or isn't part of the public interface. Typehints give clues as to what should or shouldn't be passed on. Return types tell me what I can expect to have back. Final tells me that the class is, for whatever reason (a reason hopefully conveyed in a nice class comment) not intended to be extended. It perhaps would have been easier to get to accept your assertion if it didn't come across as you sneering down your nose at everyone who actually finds this stuff useful. That probably wasn't your intent but that's certainly how it came across. 
So basically Jeff's opinion is an "array" typehint in userland library. *Yes, it was sarcastic reference to some Jeff's "arguments" in comments under video.*
Yup, that about sums up your arguments. No real points, just some weird personal resentment for the framework. ^^^MercadoAleman Edit: Just a note, MercadoAleman has edited all of his replies in a childish attempt to make replies look bad for Symfony.
The PHP namespace is explicitly reserved *for no current purpose*. As stated in the discussion thread multiple people would prefer to use this namespace for projects that are directly related to the language such as lexer, parsers, asts, etc and not just any library we ship with core.
To recognise that its core php, rather than vendor supplied.
And now you make a large BC break when upgraded? How is that better?
Thanks.
&gt; It perhaps would have been easier to get to accept your assertion if it didn't come across as you sneering down your nose at everyone who actually finds this stuff useful I use and find some of these things useful. You completely missed the point of the video, like so many others. 
I'm trying to reproduce the way the built-in PHP server rewrites URLs in production using lighttpd. localhost:8080/index.php is the actual script localhost:8080/foo/bar/ is a URL I can enter, but /foo/bar does not exist PHP routes that to the /index.php file and then I can parse /foo/bar from the URI What is this type of routing called? I built a PHP app relying on this functionality so I need to reproduce it in production. I'm using lighttpd but I might also try Apache and/or Nginx. I'm having trouble searching for it because I can't think of the proper name of this routing.
Care to elaborate or are you just a hater? 
&gt; I see "Ruby" coming up as an argument a lot, yet find that comparison to be not very fair? We're talking about PHP, with PHP developers here. I bring up Ruby because every argument that relates to projects breaking from a lack of typehints becomes void as soon as you recognize that really, really large apps are built on Ruby...and they're not drowning by any stretch of the imagination. &gt; That's not giving any constructive counter arguments against the thing many programmers are telling you! Dude, the co-architect of PHP shared and agreed with the video fully. Complexity is a real concern in the PHP community, and so many people refuse to see it. It's like we're dealing with religion here. Every time you create an interface to follow some arbitrary rule about typehints and inverting dependencies, you're stacking little bits of complexity onto your app. These things add up. That doesn't mean they're never justified. It just means they add up, and you should be aware of the cost. Look at a typical Ruby class from a competent developer, and then a PHP Elite Approved version. The latter is too often a monstrous piece of work that gives you a headache. Sorry, it's true. &gt; That's not really building a good reputation either. Sounds like you haven't read some of the replies that triggered me to respond in the first place. I've never seen such vitriol.
I have heard this argument before and my comp sci profs would be livid. Having worked in a code base that hasn't had any type-hinting and questionable documentation, I can attest to wanting to shoot myself.
Do you plan to extend the list of supported graphql features in your parser? It would be great to be able to use unions, have checks for interfaces and stuff like that.
&gt; I don't think these are rules that people will blindly follow. Have you not met any laravel fanbois? Have fun dealing with laravel apps now.
An event should be an interface. Every event is different in a system. This __triggers__ me greatly.
Apologies, this was my error.
Also "curated" is being misused here. Curated usually means you're going to, over time, maintain and tend to your list. This is usually because there will be new stuff to link to, and older things that aren't maintained or simply disappear from the web. A typical "curating" activity would be where you'd maybe update the 404'd links to a link in WayBackMachine, if they exist. This is just a glorified set of release notes. There's no "curating" needed if it accurately reflects the what you just released. The chances of that blog entry being updated for "curation" purposes is very low.
[removed]
I was actually going to bring this up... My dev team uses Doctrine with all our Laravel/Lumen apps. It's fairly easy to set up and works phenomenally.
Which is exactly what I want to start doing. Well, not as fine grained as you are proposing, but rather by common reuse only: - `PHP\Core` or `PHP\Lang` would contain everything that is directly related to the PHP language itself, e.g.: - `AST`, `Parser`, `Lexer`, … - `Object`, `Array`, `Bytes`, `String`, … - `Comparable`, `Equalable`, … - … - `PHP\Std`maps to [`ext/standard`](https://github.com/php/php-src/tree/master/ext/standard) and contains implementations of common algorithms and data structures: - `Path`, `File`, `Directory`, … - `URL`, `EmailAddress`, … - `UUID` 😉 - … But things like cURL would go in their own namespace, as they are tied to a specific vendor: - `Curl` - `COM` - `MySQL` - `PostgreSQL` - `Oracle` - `SOAP` - ... I’m going to draft an RFC where I will explain this in more detail. Seems like most people get this horribly wrong.
A namespace per class? This is the opposite extreme of putting everything into the global namespace and is equally bad.
&gt; Eih. What people consider a clean api varies. In this case I'm referring to the fact we need to pass an array when we have two arguments. That's not clean under anyone's definition, particularly considering the function doesn't have other arguments. &gt; You can create functions that provide you with the exact functionality you want. In this case I can't, because that function still has to make a pointless disposable array and pass it to fromCallable(). &gt; Don't worry, it won't. Closure::fromCallable() will still use the current scope. I would worry less if the current RFC doesn't state the exact opposite, even if unintentionally. If the RFC is accepted, then fromCallable(callable $foo) will no longer accept references to non-public methods as callables, as... they're not callables. It would throw a TypeError. So the RFC should either provide alternative methods, as I proposed, or include a change that says "fromCallable() no longer requires a valid callable". And if it's the latter, then using arrays for object/class + method becomes even more pointless.
Lot's of quality of life improvements ### DependencyInjection * added support for named arguments (dunglas, nicolas-grekas) (21383) ### WebProfiler * added cache data collector and profiler page (Nyholm) (21065) ### Twig * redesigned the exception pages (javiereguiluz) (20951) * added a simpler way to retrieve flash messages (javiereguiluz) (21819) ### VarDumper * added search keyboard shortcuts (ogizanagi) (21238) * added a search feature to the HtmlDumper (ogizanagi) (21109) ### HttpKernel * added Kernel::getProjectDir() (fabpot) (22315) ### Asset * added a new version strategy that reads from a manifest JSON file (weaverryan) (22046) ### FrameworkBundle * added new "controller.service_arguments" tag to inject services into actions (nicolas-grekas) (21771) * added about command (ro0NL) (19278) * added a new way to follow logs (lyrixx) (21080) ### Miscellaneous * [Ldap] allowed search scoping (xunto) (20310) That last one may be just me though I may not use all of these(e.g. service injection into actions) but I'm happy to see features like this added, if for nothing else but developer ease of use.
No, I'm not advocating a namespace per single class in general. If your ext has only a single class with no additional functions or constants then fine but that doesn't mean I'm advocating for that in general. Also, if you have only one single item in the symbol tables then consider that maybe this *shouldn't* be in core for being too small and isolated.
`MySQL` is not part of the standard extension of PHP and would not go into `PHP\Std`. It would most probably go into `MySQL` because that is the vendor of it. No user can have that name, as it would most probably result in a legal issue for that person (the name is reserved by law in almost all countries in this world). Of course, your concern is valid for `UUID`, but how likely is that? We need to be smart while deciding what is part of `PHP` and we need to be smart while deciding what goes into `PHP\Std`, `PHP\Core`/`PHP\Lang`. However, I know that we are already smart in this regard, since we are already organizing the code in exactly those directories within the `ext` directory in [`php-src`](https://github.com/php/php-src). Mcrypt for instance is also a vendor supplied implementation that would go into `Mcrypt` and not `PHP\*`. SPL is actually Std, so that one would be a BC problem. However, SPL is already a BC problem. Namespaces will not solve such issues.
I'm still 50/50 if this video is a parody.
Small and isolated is good and exactly what we want in the standard extension of PHP. Otherwise, according to your logic, we should remove arrays, strings, URLs, paths, files, directories, … as they are too small and isolated. What we do not want in core are evolving technologies like MySQL, MongoDB, Symfony, Drupal, … we only want highly stable standardized things (okay, in case of cryptography related cases stable does not apply, but security is a special case).
&gt; Remember...this translates to every Ruby app in existence. Every Smalltalk app ever. There's a reason Ruby is in the ditch in the last few years. It has become another example of write-only code. It's prettier than Perl, but the resulting dynamic mess is just as bad.
The array and string libraries are *huge*. In what way are they small and isolated?
&gt; The point of the video was to challenge even the most basic of assumptions. Just some feedback based on the fact that I am a viewer of the video and seem to share the same opinion as many others: This seemed to be more of a 2 second foot-note rather than the focus or message of the video. For me the point seemed more like &gt; remove what you can as long as it still runs. See? Smaller!
I would keep `PHP` completely empty, like we do in the userland world too. It is also what Java, Scala, Ceylong, Kotlin, … and all the others do. `Std` we want to keep, as it is meant for all the things that belong to the standard extension of PHP (which already exists in C). We would also have `Core` or `Lang` and maybe other stuff like `PHP\Math`, `PHP\Net`, `PHP\Geo`, … to organize things together that make sense. `Std` in the end is a namespace to collect common algorithms and data structures that are built on top of what is available in `Core`/`Lang`. They are small, like `UUID`, and applicable to the widest range of use cases. Other good `Std` examples include but are not limited to: - Specific exceptions (e.g. `InvalidArgumentException`) - `Collections` (possible sub-namespace or directly add it as `PHP\Collections`) - `Path`, `File` and `Directory` - `Environment` - `Process` - `OperatingSystem` - `Date`, `DateTime`, `Time` - … Whereas `PHP\Math`, `PHP\Net`, `PHP\Geo` for instance provide more specific stuff that is not applicable to the widest range of use cases. They are easy to exclude while building PHP from source (well, `PHP\Std` as well, since `PHP\Core` or `PHP\Lang` would contain everything that is actually required to run PHP).
Conceptually from the outside, they represent a single thing. UUIDs would also be bigger if the stuff required to implement them would not already be readily available as part of the standard extension. However, to accommodate you, `random_bytes` and `random_int` must be removed according to your logic. Too small and isolated.
* Agree on removing return type hint * Agree on removing callable from the second type hint * Keep the first type hint * Don't give a shit about final * Don't give a shit about that interface * Fuck checking if its registered to return false. Just vomit an exception. * Should i fire events based on name or give it an event class to use to fire and then attach an interface on that? event(new ShittySubscriptionEvent()) seems to make sense * That's way better, I should wrap it into a facade so i can use it everywhere * Let's add some service providers * Whats a good event system if i can't use artisan to generate the scaffolding * Now my IDE can't find the base class so I can just remove those type-hints anyway. Joking aside - this should probably be renamed Visual Noise. **excess visual noise that has no benefit to the underlying code should be removed**. If i had to pick between this and non-existent PHPDOC i would probably go with extra inline sugar. But none of these will really help if im returning a crazy object 40 folders deep in composer that my IDE can't jump to. 
&gt; You completely missed the point of the video, like so many others. Have you considered the problem isn't the viewer, but the presentation? 
Why does it trigger you?? What on earth?
Every single Ruby app in existence is my concrete example. It's like this is lost on so many people. Use whatever works for you and your team. Nobody has ever suggested otherwise. 
It's the idea that you know what's best for the developer consuming your code. It's so incredibly arrogant, imo. 
Then learn more languages and it won't seem like such a joke. 
You're all over this thread, being angry that PHP isn't Ruby. It's hilarious.
Heh.
For me **Core** or **Std** always meant **Php** so something like **Php\Core** is like saying **Php\Php**. There is no reason for Core/Std/Lang namespaces - but this is just my personal view. It will be confusing for everyday programmers to understand what is Core, Std or Lang signifies. **Standard** as a library still confuses me, **Exceptions** is one case - I cant wrap my ming around it. Putting Object, String, Array, Path, File, URL, etc, in second level namespace is a better option. I haven't seen what UUID is but a namespace like Php\Hash or Php\Algo should be good enough. I dont think this is fine graining, I think this is more about having a proper structure. Namespaces are more about having proper architecture then about programming. &gt; I’m going to draft an RFC where I will explain this in more detail. I would love to see.
[removed]
I remember reading a while back that `classes.php` and the bootstrap file are no longer needed due to composer's optimized auto loader and OPcache. I can't find the link unfortunately.
I think /u/geggleto is being sarcastic about the triggering.
No. Those Ruby apps only demonstrate you can write it that way and still maintain it. They are in no way proving it's better to drop all type declarations and make no use of them _if we have them_.
Can we stop trolling or down voting /u/JeffreyWay ? I'm all for making fun or poking at Laravel/Tylor but Jeffrey is one of the nicest guys and above all The Best instructors out there, not a single person I have seen has the talent to teach programming like he does. We should all be thanking him, he has done more to the PHP community than most of you combined. So what if you don't agree with him on one topic? 
&gt; I'm all for making fun or poking at Laravel/Tylor but Jeffrey is one of the nicest guys and above all The Best instructors out there, not a single person I have seen has the talent to teach programming like he does. I'll take what you say is true. Can you tell me what happened to his knowledge and talent in this particular video? I expect to hear such things from an arrogant beginner who has no clue about programming, but not from a tutor.
That's exactly I don't wanna see. PHP is CORE so Php\Core does not make sense. If there is still a need for SPL namespace then Php\Std is fine it, although I would say this a *programmer*'s approach towards namespacing - if it is in library A then it should be namespaced A, if B then B. To a programmer or end user there should be no difference between CORE and SPL. I know I am talking too much and deviating from the topic too but anything which does not convey things clearly to end users should be discussed. Will wait for the RFC on namespace.
I’m trying to explain it, and while I understand your point, you do not seem to understand mine. Probably my explanations are not good enough. I’m sorry for that. Maybe I can express it better in an RFC, or maybe somebody else can after I was able to convey my idea. That being said, my idea is not the only approach to this problem. Just throwing everything into `PHP` would work, no argument there. I personally just consider it less organized, that’s all. I like it neat and tidy. 😉
Fair enough!
My code has one `TODO`/`REVISE`/`FIXME` per 3 lines of code. If I convert to this rule, half my code will be exclamation marks. Neat idea, but I don't think IDEs offer things like "sort by number of !-s". Do they?
Blog post about this change: http://symfony.com/blog/new-in-symfony-3-3-deprecated-the-classloader-component Composer docs: https://getcomposer.org/doc/articles/autoloader-optimization.md
Return types take up less space and therefore cause less "visual debt" than their alternative - the doc-comment. A decent IDE will highlight things in such a way that it's a none issue in any case. I would rather have the return types and ensure that colleagues are implementing things correctly.
This kind of makes me want to cancel my Laracasts subscriptions. You made a video and when people say it and responded, youve done nothing but turn into a dick. You can have your opinions, but rather then defend them you just attack others. Love or hate the community, people do look up to you, and people do respect your opinion. But now, I look at this and twitter and just wonder. 
Calm down.
Look into [stunnel](https://www.stunnel.org/index.html)
If VISUAL DEBT isn't a thing than neither is the opposite: INVISIBLE CONTRIBUTIONS.
&gt; You are are a horrible teacher. and then &gt; we are all a part of the same community Respectfully, I am not part of the same community as people who can disrespect strangers this easily.
That's not what I asked.
&gt; I've deleted it. I HAVE ERASED THE EVIDENCE. (/me sighs) &gt; If you had read the mass shitstorm of tweets I've received in the last two days, you might be a bit edgy too. I guess you're going to have to be satisfied with fame and fortune, then.
Getting annihilated at your own game 10/10. Canceling that subscription by the way.
What?! He branded my hard work as a "terrible solution" without going into any depth or suggesting an improvements. I have a right to be pissed off.
My comment was more in relation to the implied forced usage of Eloquent, and inherently AR. ORM being a better alternative, and still a supported DBAL for Laravel.
So you only want to hear people who agree with you? Everyone else you sneer down the end of your nose at until they sneer back, then you cry foul? I don't give a damn what you _want_ to hear. You claim these things need to be talked about and yet get incensed when people engage in the debate by disagreeing with you. I've nothing against you holding an opinion. It's your condescending delivery of that opinion, and the implication that anyone who disagrees with you is wrong and not worthy of a counter opinion that I have a problem with. 
Why the design choice to do the different color spaces as different classes? Wouldn't it be easier to just include the type when creating the object?
Paul, that is not on! Grow up. This is what makes me steer away from this community! He has deleted due to the realisation, not to hide the evidence and I don't think he needs a boost on the "fame and fortune".
... Yes. Having interfaces for for the sake of having interfaces is bad. No-one is debating that. What we have a problem with is how you went about saying it. We do not want PHP to be java. We also do not want PHP from 2004. Learn when to use Type-Hints appropriately. What you failed to do in your video and in your messaging is point out that Type-hints are a valid mechanic of OOD/P. The fact that you seem to not want to endorse proper OOD is scary.
Event if this has some truth hidden in it - It is insane. They are of course moments when interface is not needed, moments when you don't have to use type hints because they are useless (simple helpers), and when final is not needed (And this is that case probably) but example that is provided in this video is just so insane and inappropriate. I'd even say that this is perfect example for using interfaces - because you can have a lot of different implementations of Event and with interface you don't have to worry about API. However if we're talking about non-API (well not public and not mentioned to be used outside of project) things, you can in fact omit it - but this is not said in any part of video. Well, this is the worst content about PHP that i've seen in last couple of years. And not because it's false - there is no justification to do such things. 
No, I wouldn't wait. phpColor mentions it's accepting new maintainers, I'd probably do that. It just sounds like one more library that will be abandoned in a year or two.
I may be wrong.. but this package doesn't force you to use any symfony standard... The implementation of .env files is not being done by symfony. I think Symfony is trying to be more like "we are PHP developers" rather than "we only know Symfony" so I absolutely disagree with your opinion sir, unless you provide any example that shows the opposite.
The one thing I don't like about the current state of PHP is they have refuses numerous other PR's that add similar namespacing, more recently the libsodium had 2 votes, 1 to implement it (vote passed) and once to have it under `/libsodium/` namespace, (vote failed (all the functions will be prefixed with `lib_sodium_` much worse)). So if they agree to vote on this to go under the `/php/std` namespace I really am going to go on one hell of a rant in a blog about the leads of PHP completely negating standardisation to a point where their own votes aren't even standard.
If ADR is mentioned in that plea to heaven...no thanks.
Dude, I have no idea why you're being so hostile. I don't know you. You don't need to be so rude. The entire point of the video was to illustrate that these features can be useful when appropriate, and that you shouldn't default to using them. I use type hints all over the place. My goodness, I had three minutes to voice my thoughts. 
Paul, you spend so much of your time being snarky. What is the benefit? Honest question. We're all just trying to do good, honest work here. 
You've mostly convinced me. `PHP` as the root namespace for everything is fine, the only question is if `UUID` belongs under `Std` and not something like `Crypto` or `Random`. It's really hard to choose a namespace for `UUID` in isolation from everything else. If we could see all the classes that are going to moved around, we could organize and group them better.
Read my tweets. I've politely had discussions with everyone who politely started a conversation. But *too* many people began with snark and cruelty. It's not cool. We're talking about freaking interfaces and type hints here, not world hunger. 
It'd be easier, yes, but I don't want to mix their properties and handle all the operations in a single class, I find that hard to maintain.
I'll think about this next time, pardon me for my first post in here :)
I think you misunderstand the definition of arrogance, entirely. Whether you have good intentions or not, this library fills a narrow, if existent, niche. It's statistically likely that this will end up abandonware. The number of abandoned libraries far outweighs those that are well maintained. Priorities change, people move on. Only time will tell.
"Honest" generally means living with your own past deeds, not hiding them after the fact.
It's really a ridiculous argument. And OP's post only serves to throw some fanboi fuel on the fire. In case you missed the argument ... Jeffrey says, you don't need to use type-hints or all these language features just because they're there, and in some cases they may be adding debt to the project. It makes sense (for him), Jeffrey, Taylor, and crew seem to come from the "build it, ship it" camp. They also seem to work mostly on their own or in 2-3 people groups. They favour simple solutions which focus on getting it done, rather than following strict architectural patterns. Some who have responded to this, insist that you couldn't be hired, or work in any serious programming shop without using type hints, and other available tools which assist in structured programming particularly in larger groups, and that Jeff has a public responsibility to ensure that upcoming programmers are encouraged to use these features. Both have great arguments. PHP is a dynamic language, and by using some of the more recent language we might be just trying to emulate what we need in other more strictly typed languages and thus lose some of the flexibility of the language. I'm in the other camp, I prefer to use appropriate language features when they are available, especially type-hints which make refactoring MUCH easier. I also would prefer types to annotate the code rather than doc-blocks. However - I can also appreciate why you would just want to get it done, particularly when your code doesn't need to be maintained by other people.
:| Seriously, though. You insert yourself into these conversations so often. I don't get it. We're all good people here. Why do you always have to position yourself as the enlightened person. We're all figuring things out.
&gt; Well no, or maybe - it depends - they could be possibly valid in some cases, but you're not explaining when they are valid. Because I only had three minutes to record the video. I feel like that's being lost on so many here. That series is intentionally for rapid-fire thoughts and tips. I have 1000+ other videos on the site that discuss more nuance. 200+ are free to everyone. &gt; It's more like if you can remove it, and code will still work - think why it's useless and if it really is. You see? I agree with that. 
Sorry to hear that. I've spent years and years and years thinking about these things, and trying to offer a good product. Take care.
It's definitely not black and white. The only side I'm fighting on is the one that advocates choice, rather than "always do this, just because" dogma. Thanks for the reply. :)
He is very successful, and he does say a lot of silly shit. This tends to happen sometimes. Success really hits some people directly in the head and suddenly they believe they achieved all this by themselves, luck played no role, and therefore they must be extremely intelligent, and their every thought is profound and innovative. But not really. He has written posts that reject unit testing, post that support "magical" and "implicit" behavior, and tons of other silly shit. And he then gets reactions on Twitter. But it's a giant mistake to believe he's successful *because* he says a lot of silly shit. I could just as easily make an argument that all this silly shit has played a significant role in RoR stagnating and fading out from the public eye. It's kind of obvious you and Taylor look up to DHH, and model yourself a bit after him. Make bold controversial statements! Wake-up the sheeple! We should stop following and starting leading! And stop using interfaces, type-hints, and so on.... It's just that these bold statements, to my adult ears, sound like the things that a 12-year old hormone struck teenager finds insightful and profound. Which is, not at all. 
It comes across as recommending something. I don't believe you are naive about the level of your influence. And please don't insult our intelligence by saying you couldn't get your message across in a 3 minute video. If you couldn't then perhaps a 3 minute video wasn't the right format - unless your express intent was to create drama, which seems increasingly likely to me. 
DHH doesn't test his code? That's news to me. :) No, trust me, he writes tests. &gt; It's kind of obvious you and Taylor look up to DHH, and model yourself a bit after him. If we're being friendly here, I'm a little bit suspect of anyone who doesn't admire what DHH has accomplished in his career. :) Just kidding. But kinda not, haha. &gt; Make bold controversial statements! That bold, controversial statement was "Keep things as simple as you can, and decide for yourself (or team) whether namespaces, interfaces, and type hints are appropriate for your app." There's nothing controversial about that, sorry. This is basic 101 advice. &gt; It's just that these bold statements, to my adult ears, sound like the things that a 12-year old hormone struck teenager finds insightful and profound. I think you could have skipped that part. :(
Okay thanks. Let's move on now.
&gt; What is this type of routing called? A front controller. https://en.wikipedia.org/wiki/Front_controller It's common in other languages as well. 
I thought you weren't making recommendations?
I think this video is full of bad arguments with contrived examples. However, I agree with the attitude that questioning best practices may lead to better practices. 
When all else fails, be a smug passive aggressive douche. 
Honestly, I think we're all blowing this way out of proportion. Do I agree with /u/JeffreyWay? No, however, let's take a step back and acknowledge that maybe a topic like this requires more than two minutes to cover. Personally, I find things like interfaces, type hints etc allow me to be more explicit about my intention, and I can use that to cut down on a whole raft of bugs automatically. Plus, the more context I provide in my code, the more PHPStorm helps me. On the flip-side, I'm not overly against talking about visual debt in some circumstances. Recognising that a certain block of code is hard to read, or has too much going on in a small space is a good first step towards learning why refactoring is a good thing. The only problem I have with this video is that the example given seems less about "visual debt" and more about pushing an agenda for writing PHP in a certain style. And while /u/JeffreyWay is free to say and do whatever he wants on Laracasts, I personally think that wrapping an agenda in the guise of an educational video is a little disingenuous.
So did Jeffrey win some sort of prize? Trump is looking for a new communications director. Maybe Jeffery should apply.
Love the `: 0;` bit: `false` is indeed too much to type.
What do I stand to gain from this agenda? I'm a fan of typehints and interfaces...when they feel appropriate for me to use. It was never my argument to suggest that they're "stupid." My argument, as I've said so many times, is that I don't like how the current PHP culture seems to recommend these things as a default, rather than as opt in features based on the needs of each app. It's a culture where so many refuse to even admit that their might be true advantages and situations when duck typing is preferable, and funnily enough, more in the spirit of OOD. I'm far more reasonable on this issue than people want to give me credit for. 
My opinion is that that this was a really cavalier and fundamentally incorrect attitude towards stripping out useful information about the behavior of your program. I only use IDEs now. Being told what the signature and return type of a method is as I enter it cannot be understated. "What data format should this argument be?" is answered immediately when that information is provided either via a scalar or a type hint. "What does this method return?" is answered immediately when the docblock contains that information, or the function has a return type. It's not visual debt if it *fucking saves you time*. If his argument is that all that extra information makes the code harder to grok, he is absolutely, unquestionably, undeniably ***wrong***. It makes the code *easier* to grok. I cannot stress this enough. If we are to assume visual debt is analogous to technical debt, then what Way is describing is the opposite. Visual debt would be when you take a shortcut to simplify the visuals of your code structure, at the cost of making it take longer to understand what it does - similar to how taking shortcuts in your architecture leads to difficulty adding new features later. So when Way starts stripping out useful information to simplify the visuals of the code, ***that*** is the visual debt. He literally has it backwards. EDIT: wow, I get more passionate about this every time I think about it. It's really difficult for me to express how much time I've saved, not just in PHP, but also in TypeScript, by code that correctly describes the shape of its inputs and its outputs. You don't have to guess. You don't have to dive into the function to learn about the shape. It simply tells you, right at the surface, what it needs in order to function, and what it will give back to you. When you use an IDE, it tells you this information in real time. Maybe this isn't as important if you're the sole developer and you're working with the codebase daily, but to any other developer, or you yourself if you only touch parts of your application infrequently, that extra information saves ludicrous amounts of time.
&gt; It was never my argument to suggest that they're "stupid." At no point did I ever refer to anything as stupid. In fact, for the most part, I actually agree with you. Please don't put words in my mouth that I never said. The reason I say agenda, is that there seems to be a section of the PHP community that vehemently disagrees with the direction that the language and community have taken in the past years and wishes to go back to early php 5.x days. But that's not the point here, and if I have misconstrued your thoughts on the matter, then I will step back from the agenda assertion. Personally, I think that we should encourage these things as default, because it forces developers to not write PHP so haphazardly like we used to and rightly got mocked for. I'm not saying that it is the be-all, end-all feature, but rather than starting without them and slowly adding them into code is harder and teaches more bad practices than starting with them and learning when to take advantage of the dynamic nature of the language.
Sorry, but this post is a massive non-argument. &gt; (Real reason) He stood up for his opinion all the time (it’s a 3rd day right?). All the others, was just a passengers, which come by, comment their “pro” opinion and disappear. And Jeffrey was fighting all way long with everyone in separate. This means a lot. No. That's not how things work. Stamina is not a factor in the validity of an argument... &gt; If you are not dumb enough, you should understand, that this 3min TIP video is just exploring and it’s all about your own choice. And he is totally right. Yes, except the title and the contents of the video were very much making the argument that it's beneficial to strip out useful information. As the top comment said in the other thread, the contents don't match the message. &gt; He can put anything on his Laracasts business. Irrelevant. &gt; The technical position: are we enforced to type-hint in PHP ?? How the **** dumb you should be to say yes. Of course its a NO. Do you write on your fridge “ONLY FOOD HERE” ? You have this possibility, but you don’t do that, because it’s in the home you are living and you know that you don’t put your clothes there. This analogy makes no sense and fails to account for the complexity of software. A more accurate analogy would be labeling the different sections *in* the fridge to help you remember where to put things. Turns out, lots of fridges do that for you anyway, because it's clearly valuable information to people. &gt; In the other hand, when car factory are modeling the cars, they MUST to have an interface that car MUST contain 4 wheels Another irrelevant analogy. &gt; Some fictitious statistics: (I bet Im nearly right) I'll just use your own words against you: "***fictitious*** statistics". Why you think pulling numbers out of your ass to support your argument makes it stronger is beyond me. &gt; My only advice for you is, try to never argue with those “Professional coders”, you are just wasting your time. Better make next episode, about writing all the classes static ^ They will maybe die of anger then… Crazy notion: some of us are actually professionals, who do actually earn a living working in complex codebases written by several developers, and (going back to your absurd refrigerator analogy) don't actually write and own and live close to every line of code in the application, and thus don't know the application as well as we do our own refrigerators.... If I have to use an API my teammate wrote, I don't want to have to dive into the logic to see what are valid arguments and what kind of response I can expect back. I just want to look at the function signature and be done. Conversely, my teammates expect the same of code that *I* write. If you're a hobbyist, that's great, but you seem awfully brazen about your convictions considering your apparent inexperience...
&gt; much of the PHP culture seems to default toward more complexity, not less. The video I saw did nothing but reduce the amount of keywords used, and in fact increased complexity by removing constraints. 
&gt; Now my worry is that, these days, much of the PHP culture seems to default toward more complexity, not less. And this is sad to me :|, but type hints and interfaces don't add much complexity at all though. I'd argue it makes things less complex by making things more readable and easy to understand at a glance by what the function/method expects and what it should spit out. I do agree that not everything needs an interface, but your video didn't convey that argument and that's what the real problem of the video is ultimately. &gt; however, and I also recorded a Laracasts Snippet that dives into greater detail. This should have been the response you send everyone to if your original video didn't communicate the point you were originally trying to make. Then the jokes, trolls and responses probably wouldn't have blown up as much as it did. Just my opinion though.
No one is ditching Rails because of typehints. They're moving to solutions like go, node.js, elixir, etc. because of the performance/other benefits those solutions offer. This is a pretty dishonest claim.
Laravel makes a lot of use out of typehints. For example, it uses typehints with reflection to resolve dependencies in class/method constructors and inject them. Most of the components in Laravel are coded to interfaces. Most of the methods have type hints, as well. If you're gonna join the cool-guy anti-Laravel club, at least know why you're joining it.
Lol @ "Wordpress Hater" in your twitter bio. Good grief -- hating something so much as part of your identity you advertise it as who you are.
I'll agree that interfaces are overused (though they are useful when used correctly), but type hinting and explicitness grow in usefulness with the size of your project.
Appreciate the answer, thanks.
You're so far up your own ass. 
You'd like me to provide proof my subscription to Laracasts will not renew? How exactly would I do that?
You're mistaking hobbyist for people who don't work on large teams or work on projects that don't have the same requirements. I am paid for my work and I mostly do solo projects. Does that mean I'm not a professional?
I was addressing OP, whose use of quotes for "professional coders", and overly-simplified understanding of code, indicates that he in particular seems to just be a hobbyist and doesn't really understand *why* type hints and return types add value and clarity to a codebase.
Let me make it little less vague for you. Only people who constantly talk down about Laravel or Jeffrey and Taylor seem to be misinterpreting it just to start shit. The video was posted over a week ago, but all of the sudden it blows up like a day ago... Probably because someone who doesn't pay attention to laracasts and is just digging for stuff to complain about found it.
http://i.imgur.com/RJDilOo.gif
&gt; Only people who constantly talk down about Laravel or Jeffrey and Taylor Did it cross your mind that people who place more value on proper coding standards and implementation might be more likely to criticize Laravel and the content of this video? I don't have a dog in this fight but that's been my impression of the past year or two. &gt; seem to be misinterpreting it just to start shit. I really don't understand this. What was misunderstood? Like I said in my comment further up, I feel that the issue is with the presentation of the video. A misunderstanding is a failure on the listener's part, not the speaker's. You also seem to be implying malicious intent on the part of the critics &gt; Probably because someone who doesn't pay attention to laracasts and is just digging for stuff to complain about found it. Overall your comment comes off as paranoid. Maybe someone who doesn't watch Laracasts on a more than weekly basis just saw it? No reason to assume someone is hunting for points of criticism.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/PEBoF1e.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^| ^[Creator](https://np.reddit.com/user/AUTplayed/) ^| ^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^| ^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20di97hwo) 
I'm surprised you even had a subscription. It seems like you got it all figured out. On a side note, you're evil. Jeffrey helps many of us and he doesn't deserve this despicable comment for a 3 minute video he did among hundreds of great videos. You don't rip someone apart, because of one video. 
Agreed, that's the type of stuff that grates on me. Right now I can just sigh and scroll past/reply, but over time I could see myself visiting less and less.
Doesn't show recent, but I'll take your word for it. Congrats on not being a puffy chest elitist. 
Ha, you're a WordPress hater, which tells me you're just a tiny and jealous human being. You pretty much hate success, so Jeffrey should be flattered by you going against him. Have fun living with yourself, I can only imagine how hard it might be :) 
As u/Wirone pointed out, that was just a sarcastic comment. I felt provoked by oversimplified receipe to contextual problem supported by straw man example. So, yeah - I didn't like it, I think it's harmfull for people that still learn and depend on opinions of others, but can't simply say it's wrong.
Ha, my bad, I didn't even take the time to notice. In my defense, I was eager to get back to House of Cards. But here's the correction: http://imgur.com/a/JrXqq In full disclosure, I don't really use it a whole lot anymore, I just kept the subscription active to support Jeffrey's work. But I'm not a fan of when someone uses their success to belittle someone else as though that person's opinion doesn't matter. THAT being said, Jeffrey did apologize, so I will consider resubscribing at some point in the (probably near) future.
I don't care much about type hints, I chose PHP, because it makes me productive. I'm aware of the cons and happy to deal with them when time comes. I don't think type hints will save your ass like you think it will do. Don't forget that correct types don't guarantee correct VALUES, which won't throw any exception and would crash your app. For me starting to use type hints is some kind of debt, I need to start thinking about it and start adding it and I don't like it. Does that make me evil? Does that deserve me getting hate? And Jeffrey didn't even say not to use them, he just said to question when to use them. The guy made hundreds of helpful videos and some of you ripped him apart, because of a 3 minute video, and for what? In the name of ego? The guy is helping our community, you can disagree with him, but not like this. Hope you get the hint :) 
WordPress is another example.
I completely agree profile. There are certain classes of things that are generally accepted to be magnitudes faster, registers faster than ram, faster than spinning disk, faster than basic network IO. 
Thanks for digging that up. That was way before I was a subscriber and I wasn't aware of it. The thrust of that article was a bit odd, basically arguing that having *more* subscribers allowed them to use greener papers and inks so on a per-subscriber count, each issue was greener. It did ignore the costs of transporting all the new subs though, but oh well. That was almost a decade ago under the old regime :)
You could replace his entire file with two `echo`s if you apply his principles for long enough.
Along with a description, yes. If you're just regurgitating the parameter names and types from the method signature, you might as well save yourself the bytes.
I can't think of many things I'd consider visual debt, but here's some: * Commented out code * Using array()/list() instead of [] * Concatenating variables with "" strings * Not using the ?? operator It's not a problem I run into often.
Could you link the book please? I've seen a few with similar names
Enough with these topics. This whole thing's played out already. Move on.
Just as a follow up I've wrangled a vagrant homestead improved set up together, it seems to work perfectly so far. Thanks for all the help everyone!
You are right, but what I meant is that Symfony keeps on reimplementing packages instead of using existing ones done by others.
He's probably talking about Uncle Bob's book. https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1496214502&amp;sr=8-1&amp;keywords=clean+code
The content has staggered, videos like these are not helping and I feel like he is overwhelmed trying to take on that website by himself. Besides that I can not relate to this man anymore since I feel he runs projects the way he wants them(like Laravel mix) at the expensive of the 99% who disagree.
Seems to be! Cheers man
&gt; Python reddit on typehints. A mix of opinions. And I'll be damned, no one has their pitchforks out, nor are they making personal attacks against those who disagree. The idea that you wouldn't always write typehints and interfaces for everything is not controversial, and it's just fine to discuss this. The thread you link to was prompted by a question: "what do you think about type-hinting". Perfectly fair question. And you'll call me biased, but most opinions in that thread talk about the benefits of type-hinting, with a few not seeing the point, or not liking the extra work. I can't blame them, Python has implemented this feature late, and in a half-hearted way (no reference implementation, not even a detailed spec saying if the type system is nominal or structural AFAIK, no existing ecosystem of typed libraries). But give it time and these things will be worked out. And there will still be times where skipping interfaces and typehints is more than warranted: 1. Interactive code execution on the command line (REPL). 2. Prototyping, i.e. throw-away code. 3. Small applications (less than 10k lines) where the code is mostly straightforward data mapping, templates and glue for pre-existing libraries. Not surprisingly these use-cases match R perfectly, hence why it doesn't have type-hints (yet). The web framework you're listing is an interesting curiosity, but what R is first and foremost is a version of Excel that's code-first (vs. Excel itself which is UI first). It even renders charts! BTW, all of the R's libraries check the types of their arguments through calls to `class()`, `is.{type}()` method family, `inherits()`, `inherits2()` (... long story) and it has casting via the `as.{type}()` method family. If Jeffrey's video did what R actually does in library function/method calls, and replace typehints with PHP's `gettype()`, `is_{type}()`, `instanceof`, `get_class()` and so on, he'd end up with **more visual "debt"** compared to type-hints. R certainly does give a damn about types, but the line between "runtime checks" and "static checks" is very blurry when a language is mostly used interactively, hence its particular factoring of type checks. Anyway, the reason people react to Jeffrey this way is that while we have those three cases I listed above (and I might be missing some) where you would skip typehints and interfaces, there isn't a situation where you can **improve code by removing information from it that was already present**. Just going over code that *already* has typehints and stripping them away is quite asinine, and very different than not bothering to write them in the first place, because you don't care. The difference is very subtle, but important. People who tend to argue against interfaces and typehints argue they aren't always very useful in quick, small and throw-away code. And I fully agree - typehints aren't always that important. It depends how stable, how large, and how reusable the code you're writing is. Things like interfaces, typehints, PHPDoc, documentation, tutorials - those are all finishing touches reserved for code that you aren't going to throw away a week or so after you write it. But Jeffrey's argument goes past that, by introducing the idea of "visual debt" and arguing that not only are interfaces and typehints not useful, but they are *actively harmful*, and removing them *improves your code*. He also called making classes `final` "hand-holding" and an example of "arrogance". Now, that... is just stupid IMHO, and hence people's reactions.
I feel dumber for reading this.
Do you want to do unit testing (testing classes in isolation) or functional testing (testing an application at a user level e.g. driving it via browser automation)? 
Please just let the term die already. It's counter productive and the person who made it up the doesn't want to question the term. There is no point in discussing anything about it anymore because the author is in a "NANANANA I CAN'T HEAR YOU, ZOMG RUBY" loop.
Hi there, thanks for responding. All the services are running on separate containers (when you run `docker ps` you'll see it). These services use the `busybox` image to derive shared volumes :)
Why does everyone have to make everything so much god damned harder and more annoying? We don't need a god damned javascript library for god damned everything. 
unit testing.
&gt; Laravel makes a lot of use out of typehints. For example, it uses typehints with reflection to resolve dependencies in class/method constructors and inject them. Which is frankly the single worst abuse of typehints in our industry... I don't mean Laravel in particular, I mean autowiring based on reflection.
Nice. I'm not the only one tired of using type hinting and return typing. If you want to use it, use a strongly typed language like Java. 
I see no arrogance, only pragmatism. You enforce rules to ensure encapsulation and making things easier for you and your team (for both apps &amp; libs). If something needs to be exposed for some reason and the use case legit, then changing a `private` to `public` or removing `final` is trivial. My experience with relying on conventions like leading underscores for private properties or not enforcing final only led to abuse and bad designs. And by "bad designs", I mean things breaking up way too often for what it was doing. So rather than pretending it's knowing what's the best for the developer consuming your code, I would rather see it as I know with what issues I'm going to deal with as a maintainer and be able to move forward without risking to break the code of all my consumers. That said it's true that languages like JS &amp; Python are doing fine without (although there's been a lot of complains for the lack of support of those features as well), but I think it boils more to personal opinion wether you want to use a language feature to enforce a rule or enforce it softly with a user convention.
One example of one container for one service (and a shameless plug) is my proposal for a container with nginx+php (https://github.com/nrobinaubertin/dockerfiles/tree/master/nginx-php) That way, I can have a container for my blog, my forums and other services separately.
&gt; every keyword, variable, class, interface, namespace, etc. you write has a cost. This is indisputable Many years ago I read exactly the same thing on an official Google blog post about "basics for programming fast websites". Don't declare a variable only to use it in 1 other place (I'm sure there are exceptions). So, yes it's a totally fair point. &gt; much of the PHP culture seems to default toward more complexity, not less. And this is sad to me, because so much of what makes PHP great stems from its simplicity And yes, oh my god yes.
All major IDE's or Editors support themes - and you can use one that puts the contrast on what is important for you on the screen and hides the *clutter*. The dude from the video is doing it wrong (to say it softly).
Next step is going procedural - `class Event {` adds to much of a visual debt! and that lonely `}` taking a whole line... unbearable. Not to mention `$this-&gt;` so much characters to type and read, I can't handle it.
1. With regard to Python, the lack of typehints also makes the case for how a language can still produce perfectly maintainable code bases without them, as Jeff pointed out with Ruby. This isn't an argument for or against hem, but a proof that not using them isn't a mortal sin. 2. Jeffrey doesn't argue that interfaces or type hints aren't useful and doesn't argue that they're harmful and doesn't argue that removing them all the time is a good thing. Not in that video. And even if you took it that away, any laracasts user will know full well he doesn't believe these things. He throughout the site teaches the VALUE in all of them in different places. I don't see why you and others can't seem to grok that. My feeling is that people don't WANT to grok it. They'd rather strawman Jeff and get a little dopamine boost from piling on. It's so sad and this behavior is way more common in the PHP world than in other communities. It's almost bizarre to me--I watched the video before reading everyone's hysterical reactions and took away 0 of the things people have attributed him to arguing that he wasn't. Maybe it's because I've seen his other work. For example, his work where he explains interfaces and shows their benefits and discusses how he uses them. 3. I can't tell if you're being sarcastic, but R is not just Excel that's code first. It's not really germane to the arguments here, but saying that casually ("first and foremost...") shows the kind arrogance (and in this case, ignorance) that is a real turn off to someone like me who spends a good amount of time using PHP but frequently uses other languages. 4. Despite the above, your reply here was decidedly civil and well-argued/content-filled in comparison to some of your other comments here. It stands in contrast to the gross pile-on/down-voting that this thread and others here and on twitter/laracats forum showed.
Well, sure I wanted to keep the code the same in use, as the author wanted. Same class name, same method names with same arguments, return results and behavior. If I was really allowed to *improve* the API, I'd remove even more Visual Debt, like this: function event($n, $h = 0) { static $e; return $h ? $e[$n][] = $h : (isset($e[$n]) ? array_walk($e[$n], function($e) {$e();}) : 0); } In use, [this is still excellent](https://3v4l.org/NNcZq). Thanks for the idea! I'm questioning everything, and this makes me question objects. I'm kind of starting to question functions, as well.
I recommend using Laradock, it should work for any PHP project
We can always count on good ole pmjones to turn up with a quip, or a subtle kick while someone is down. God bless this community.
Not sure exactly what you mean - there are two possible meanings that I can see: 1 - Make your class generic interface Stack{ public function push(Object $o); public function pop() : Object; } This provides flexibility, but no type safety as the result of `pop()` has to be downcast at runtime (pre-generics Java used to work like this). 2 - Extend the class for your needs interface StackOfCars extends Stack{ public function push(Car $o); public function pop() : Car; } This provides the type safety but requires a new class defining for each combination of types you want to support. Plus, as shown in this example, you may need covariant in-parameters, which breaks LSP and so breaks type-safety in other ways. Unless you meant something else? **Edit:** I suppose you could also mean parametric polymorphism, but that's basically what generics is implementing (\*waits to be lynched by type theorists\*)
Someone asked Rasmus about this at PHP Serbia last weekend and he said it's "unlikely and extremely hard, but not impossible" to implement. 
Can you show that in action? Sounds like just what I want to do
How else would you do it? Or do you think autowiring should not happen at all?
&gt; That was a two second addition to make you rethink even the most fundamental of practices. You keep saying this, yet you didn't even think when removing it. I was with you at the beginning of the video: sure, get rid of the interface, it's not really doing anything; sure, get rid of 'final'. But then you just start removing stuff with no explanation. **You're not questioning your own actions.**
Nice, I gave it a test and it worked well. I added gd to make Drupal work and it works great. It does however seem a little slow, using Docker for Mac, 17.05, compared to my vagrant apache/mod_php/mariadb stack, about twice as slow. Never looked into it anymore to see where the issue could be.
Usually shouldn't happen: if it happens, it should happen at compile-time, in a controlled environment only.
Hello guys i hope i can get some answers out of a few questions that i have: * Error catching: I've been reading up on how to use error catching but i cannot find a good example to make my own custom error catcher; and its not about how to make it, its more about in what instances is good and what can i do with it in a more "real" sense way; i guess my question should be like **What is a good example for a custom error handler**. * Aside from php and programming techniques what things are good to know as a developer? im talking about maybe resources, tools that are important to know; im fully just learning php development right now but tools to use for testing for example im just completly lost on that.
There was a post from Fabien when the component came out where he explained that he did indeed look into all of the popular .env implementation and explained why he wrote his own.
I wonder how long he searched for a condescending quote to throw up here rather than contributing to the discussion.
I suppose databases could also benefit from this.
You could ask /u/ocramius ;)
Yeah: `$users = new Repository&lt;User&gt;($dbConnection)` would be quite awsome.
I'm glad he did't talk poorly on Node. He mentioned being possibly more piqued if a Laravel-like framework came to Node (maybe he doesn't care for adonis?). I do wish Taylor (or someone with his good taste to appeal to the masses) would provide such a framework to Node, too. Sortof wonder/hope if he'll ever eschew PHP and jump over to Node. I switched from PHP to Node 1.5 yrs ago and can't imagine going back. Maybe we'll get lucky and he'll personally do a JS version of Laravel :) It would be massively popular, I'm sure. In the meantime, there's definitely that opportunity sitting there waiting for someone in Node-land. 
In my mind, Jeffrey is in a really tough position. He's trying his best to create a lot of content in an industry that is a minefield of controversy. Anyone in this sector could easily piss off everyone. Not only that... he's a person. He's a person that you and I don't know. We do NOT know him and we shouldn't presume to. I've personally NEVER had to defend myself against such loud groups of people. But, I've seen Jeffrey under fire many times in this way. I realize that he has a very successful communication platform and that comes with ethical responsibilities. But, while I don't know Jeffrey. I do fundamentally believe that he takes the responsibility seriously. Jeffrey makes some extremely reasonable assertions about the quality of questioning practices. I don't believe that any reasonable person would argue with that. On the other hand, some perceive there to be a disconnect between that position and some of the tone of some online communications. But, let's be honest. Tone is a very difficult thing to manage. Perhaps it's in our individual and collective best interests to listen to what he actually explicitly states as his purpose and take that at face value. After all, we'd all want the same. Perhaps some effort (that is probably already in progress) could be made to better understand what precisely people are upset with. But, as humans we so rarely know our true reasons and instead retroactively justify our thoughts, behavior, and feelings. Some conversations that I've had lead me to believe that a major reason that the video's content frustrated people is that they believe that there were important bits of context missing. I can understand that argument. If someone appears to be talking about the downsides of something without acknowledging the upsides it can come across as divisive. ASSUMING that this debate is about the expression of abstract concepts through the idiom of the programming language, there's a lot of REALLY great opportunity here for people to write about very interesting ideas and contribute to the conversation. On the other hand, if we assume that this debate is about a complete rejection of techniques that are widely used and perceived as beneficial by entirely reasonable people that exist across countless contexts... I could see why people would feel alienated and offended. I believe that we have individual responsibility to ourselves and others to reduce toxicity. Sometimes that means that we just... walk away and stop participating in the toxicity. Sometimes that means that we learn to listen and take someone at their word. I believe that this article hit a lot of people who have been seriously struggling and overcoming difficult challenges as an attack on their work and values because the stated position of Jeffrey (to question the status quo) perhaps didn't come off that way to them. But, I believe that unless we want to leave a smoldering ruin behind us. We need to learn to trust people and have civil conversations. Why was this video an opportunity for the toxicity that Jeffrey's facing in the comment section of his website and not an opportunity for people to openly and with civility discuss such interesting ideas? I'm super sorry if this comes off as preachy. But what a waste of a good opportunity.
Later it turns out he had a lifetime subscription. Will continue my subscription Jeffery
Debating which one is better is a dumb argument. Some sites would be better off using Laravel and some with Symfony. If you have to spend a ton of development time undoing a lot of things that Laravel does so that you can customize the application to your requirements, you are better off using Symfony. If your requirements match up closely with what Laravel already does, you are better off saving time using Laravel.
&gt; What he was referring to is that by using interfaces and typehints everywhere, there's (visually) more characters on the screen that your eyes and brain have to go over and process, vs if they weren't there. And that is true. It's actually not true. Because when a method has a PHPDoc and typehints describing what it takes in and what it returns, I only need to read *those characters* in order to understand how to use it. I don't have to read the implementation. When the function has nothing, I'm forced to read and understand its *implementation* which is more characters, and characters that take more effort in order to extract function and intent. This is programming 101. When you don't document your code, people are forced to reverse-engineer it through its implementation, and that's a lot more effort.
I just pass objects to objects. Autowiring is usually symptomatic of a project with a lack of structure, where hundreds or even thousands of classes with unique constructors are asking for arbitrary things. If you are in this mess, autowiring starts to look inevitable. The trick is not to get into that mess.
I don't see a real advantage over using SASS/SCSS. I'm resisting a political joke comparing javascript and Jared Kushner, but there's one there.
&gt; Also, Symfony educators usually don't go around telling you to delete code so you have less to read. There is also that. Lolll, i love your reference to the recent controversy about a 3-min short video
Have you used Adonis? No one talks about it.
Jumping on the bandwaggon ? You could have posted that link in the previous thread [here](https://www.reddit.com/r/PHP/comments/6e65sm/what_is_your_opinion_on_the_visual_debt_video_of/) instead ...
You should never underestimate the creativity of stupidity
No, because in this context WheelType actually holds the variable type of the wheels property, `int`. We could just as easily change it to `string` with `$car = new Car&lt;string, string&gt;('Racing', 'Honda');` without changing the class (but changing what `Car::$wheels` means for this particular instance).
&gt; I switched from PHP to Node 1.5 yrs ago and can't imagine going back. Out of curiosity - why? Feel free to be wordy :)
Something like [that](https://github.com/fesor/api-example/blob/master/docker/php/Dockerfile). I will update this to something more reusable on weekend in this repo. I also maid [PHP images](https://github.com/fesor/php-composer-onbuild) with ONBUILD composer install. 
I've posted this elsewhere, but I wrote down my opinion here: https://engineering.facile.it/blog/eng/visual-debt-typehints/ IMO type hints and interfaces may have some "cost", create "debt", but it is greatly over-weighted by the great amount of benefits that they bring to the codebase. In the post I've explained in how many ways they are helpful, and I've also [attached a PR](https://github.com/facile-it/paraunit/pull/93) on which I was working on at the same time that highlights how, simply by adding type hints, an already-working codebase can be improved or fixed.
I think some folks have taked your short vid too seriously and have gone too far in their agressive arguments. It was a interesting video to make people questionnate about their habits but some peoples can't understand nuances... I think it's for the same reason some people like Taylor Otwell have deleted their reddit account. reddit is, most time, a toxic place for well known figures in php community. That's sad. Continue you great work and have a nice day!
&gt; I am not sure I understand. He doesn't really provide anything to dispute the originally stated assertion. I agree. He basically saying in a more polite way: "Nuh uh, you're wrong". And that's it. You could plug in any language and any framework in there and it would literally be the same argument. &gt; I know of a few rather large Laravel projects too but the majority of people I know who like and use Laravel are agency developers who use it to build lots of small sites because it allows them to do it easier and faster than Symfony would. And I'm not a fan of Laravel, but if I were to build some quick agency sites, I would probably choose Laravel. But if I'm building something that's going to be around for years that I'm going to build upon, if I'm going with PHP, I'm choosing Symfony because of LTS among other reasons. I'm not going with something that random releases just remove features and have no deprecations. I'd expect all my code to work if I upgraded releases, but that's not the case with Laravel.
What the fuck is this?
Damn! I proof-read it a lot but I still missed it. Fixed, is due to the fact that in italian "type" is written with an I.
One person spouting personal preferences to counter another man's personal preferences. It appears either author has difficulty understanding actual design decisions over gut feeling. For instance, OP says something along the lines that not every concrete implementation requires an interface. When I write reusable code, even when it has only one implementation, I still give it one or more interfaces, so the implementations I write can always be swapped out by someone that has to tackle a scenario a bit differently. I'm not preaching this to be the only good approach, but I do get annoyed by people that do preach and then don't follow up with solid reasoning or good understanding of the subject at hand. Everyone just comes across like a ten year old explaining to it's parents why their calculation for spending money was flawed.
And Aman, the author, is a wonderful fellow. Really responsive to feedback, incredibly hard-working (as is Taylor), and keen to help newcomers. I wish more people knew about and used Adonis...
No, it doesn't, not if you value static typing. 
I guess it depends of the application, in my case I'm just using crud websites and there is no need to go AngularJS, Vue.js or React I think 
There's no debating going on here even. The title of the article is "Taylor Otwell Wants You To Build Your PHP Apps On Laravel". They wanted a debate, but they failed to get someone on the Symfony side. There's only substantive discussion of Laravel.
&gt; He mentioned being possibly more piqued if a Laravel-like framework came to Node (maybe he doesn't care for adonis?). What about sails.js? Most Laravel-like framework I've seen for Node.
What's the context here? I'm curious to know about that controversy! I love me some Symfony/Laravel debacle...
I do this as well but I copy the configuration files instead (e.g: xdebug) and use .env files for my docker compose 
Not Failed exactly! Fabien Potencier was contacted to give the arguments with Taylor Otwell. But he refused to go in any flamewar. The idea was to create a healthy debate between the two creators.
&gt; when I had to work with Eloquent it was a nightmare That seems pretty strong. I've used both Doctrine and Eloquent, and both seem to have done their jobs well for what I needed. What about Eloquent made it a "nightmare"?
I'd like to know at what point do we stop fighting over frameworks. 
Eh, nothing you haven't heard before. I love being able to stay in the same language all day. I love Node's performance. JS seems to be the fastest evolving ecosystem. The biggest factor ... there's nothing I can do with PHP that I can't also do with Node ... so there's just no reason to go back at this point. After writing ES6 all year I've just come to like it better as a language than PHP. Note, I do not believe either is actually _better_ ... it's just a personal feeling. I used PHP to make a living for 15 years, so it will always have a special place in my &lt;3 :)
Desire for healthy debate is one thing, this seems like desire for conflict. It's not like you're framing it with respect to larger issues, eg "a debate about X, featuring Laravel and Symfony developers". It's just "Laravel vs Symfony, head-to-head deathmatch!" which I don't think is particularly helpful. 
This is one side which you think. If you read Taylors answer he told why Laravel help developers in projects and how they can create workflows using Envoyer and Forge. He even tell Laravel Community is a family. This is what I want from Symfony Side. There is no death match in any of the framework. 
Hi Scott, Thanks for your awesome work! For me "The Update Framework" project is very interesting. If you can make it run on shared hosting many existing applications will adopt it. 
`UUID` definitely does not belong into `Crypto`, UUIDs are not meant for security related things. `Random` would actually match, but it would probably end up pretty empty in general. Hence, it’s questionable if we want to create that NS in the first place, but it’s a valid choice for sure. We can, as always, look at what others are doing: - Java: `java.util.UUID` - .NET (C#, C++, F#, VB): `System.GUID` - Ruby: `SecureRandom.uuid` (v4 only) - Python: `uuid.UUID` - Rust: `uuid.UUID` - Haskell: `Data.UUID` - ActionScript: `mx.util.UIDUtil` - Objective-C: `Foundation.NSUUID` - Swift: `Foundation.UUID` - … As we can see, everybody has a hard time finding a proper place for it.
It will be a matter of preference, I am not saying eloquent is bad, but for me after using doctrine for years, it just feels horrible to use anything else..it really slows down my workflow and lacks many features I am used to with doctrine
&gt; Don't wait for us to ask questions - just write about them! What are these things? [Already explained what they are](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded). :) I've been doing this for long enough that, by now, there are probably a few people out there that have questions that they're waiting for us to tackle. But if I don't know what those questions are, it won't happen.
shared hosting environment is very limited and the server side will not run, but for the client side "basic" signing is possible with even with md5. still its something
"It's something" doesn't really work with security. Usually "it's something" only offers the illusion of security, which only serves to stop people from realizing the danger they're in and actually securing their systems. If I'm going to give the community something, it's going to be something dependable.
Hi man, just to add to what you were pointing out regarding the slowness: Upon Googling, Docker for Mac seems like it needs improvements on its mounted volumes: https://github.com/docker/for-mac/issues/77 We use Vagrant here at work and the RW times are faster compared to Docker.
definitely difference of opinion. I find the choice of eloquent to so bad it colors my opinion of the entire laravel framework. (i do know it's technically optional)
is that really true? I don't personally use laravel, but the built in job queue, laravel homestead, and other bits like that are likely very useful. Of course one could assemble such a thing on top of symfony, but it's nice to have stuff that's meant to work out of the box, and work well together.
It also enables cleaner collections-style classes; another big win for projects like Doctrine.
Hi Scott, As a guy who does shared hosting for a living, I'd like to know how I can bee seen as "less bad" than "generic shared hosting" in eyes of both customers and experts. So far I enjoy all your articles and implement some of stuff needed in our internal projects. As for PHP in general - our versions are up to date within 1-2 weeks of those released by php.net (we rely on CloudLinux for hardened php) and we have libsodium enabled for all available php versions. As for questions you've mention: * I'd love series of small articles dealing with bad examples in docs/online materials. This for me is a hell of a struggle when dealing with custom-made customers' sites. Most faulty code is taken at face value from examples without doing what's said 2 paragraphs below (eg. "Never use this code in production without [...]" or "You need to choose secure method instead of sample presented" etc). * In similar vein as above - maybe some stuff dealing with common pattern of "you had chosen wrong encryption/authentication/hash algo". Many (most) people choose wrong algorithms for task at hand. It would be helpful to have some point to refer to. In my imagination it would be something like "you chose X for Y. X is bad algo for Y. You should choose Z. And here's why" or something like "We have common task Y. There are multiple ways to skin a cat. Currently (31st May 2017) the best way is Z and here's why. Commonly in use is X, here's why it's bad" or something completely else. Honestly though - stuff like this is quite time-sensitive so while info MIGHT sometime in future expire, the advice in it would be better than having most people choosing X instead of Z ;) In upcoming projects you have some nice things I'd love to see flourish. Let me give my comments: * Shared Hosting Exodus Toolkit - this would be a great tool... Inhouse we use plesk as a default panel and enabling most of what exodus does is within couple calls to updater. One thing problematic is mail which honestly is absolute pain to get everything right. * The update framework - this thing sounds nice... I'm working on something far more limited, dedicated for my environment, but if that would work in shared then this sounds VERY nice. In other forms I'm interested in both Signal and Noise protocols. From first brief reading seem very interesting.
There is so much wrong with this comment I don't even know where to begin. I want to break reddit's rules and create more accounts for the sole purpose of downvoting this comment more. 
Different color types have different behaviors. If the author ever added `RGBA` and `HSLA`, then a `setOpacity()` method would make sense for those, but not for `Hex`.
That is very unreadable and nonobvious.
A color-changing elephant would be badass
Yes, I have. On mobile so I can't go into detail right now (through Monday). PM me and I can follow up back when I'm at a proper computer. Tl;dr is read the row, detect if old, update if so. Need to support both crypto methods in parallel. A key_version column goes a very long way here. 
Could someone provide a clear definition of "Laravel-like framework". Thanks.
Why should developers have to bow to the whim of some cranky developers who want their way? If you don't like mix, build your own alternative. 
I have used AdonisJS and it's really cool. Very, very, very easy to grasp if you work with Laravel. 
&gt; What are your views on the PHP vs JS debate? According to a GitHub survey, JS has increased its market share significantly. Do you think JS could give PHP a tough time with tools such as Node.js? &gt; Taylor: I don’t think Node.js has a full-stack framework solution that is as intuitive or easy-to-use as something like Laravel. However, I do thoroughly enjoy the language itself and think there is a great variety of high-quality packages in the Node ecosystem. If there was ever a full-stack framework that I truly approximated the feature set of something like Laravel or Rails, I would certainly enjoy experimenting with it. I do think the ease-of-deployment of PHP is something that is hard to replicate in JavaScript for the average developer, but I do admire and respect the efforts of companies like Zeit who are innovating in that area. Um .... Loopback? Unless I am missing something?? We use it every day at work.
&gt; If you are not dumb enough, you should understand, that this 3min TIP video is just exploring and it’s all about your own choice. And he is totally right. Maybe that was his intent, but even if so, the _meat_ of his video was suggesting bad practices. So assuming the best of him, he bombed the execution of his point. Really hard. Newcomers are more likely to pick up the bad practices in the video than the "question everything".
Well, the directory structure is the same, the way routing, DI, his AR syntax, middleware, is very similar to laravel. Anyway, take a look at their site. Documentation is good and it has loys of useful examples.
"Taylor Otwell Wants You To Build Your PHP Apps On Laravel". "Steve Jobs wants you to buy a Mac". "Bill Gates wants you to use Windows". "Linus Torvalds wants you to use Linux". I think I see a pattern here... except, 1 of these names isn't as famous as the others.
&gt;They are visual debt. The human brain can't focus on so many things at the same time. You must be one of the people who thinks the human brain can't see more then 30 frames per second.
I starting experimenting with it but couldn't figure out how to set up auto completion on my IDE which slowed me down considerably :(
The lack of an built in caching gets me. Was investigating a slow page and found that displaying 150 cart items instantiated 19000 Eloquent models. That's 19000 models instantiated directly from the database query. Many of those could be cached, and would be by symfony. Eager loading becomes increasingly painful when you have a large application. It's becomes especially painful when you have polymorphic relations in a large application.
Nothing. It's a made-up term to pile onto the myriad of other new "anti-patterns" that everyone seems so focused on these days.
Without type hints, instead of a visual debt, it becomes a mental debt. The type hint is always there when you're actively coding. Either written in your code, or its written in your mind. And the mind is forgetful, and slow. I prefer to offload as much mental burden to the compiler, so my mind can focus on the more important stuffs. On simple systems, without type hinting, the mental debt is still manageable. But on larger systems, with thousands of files and lines of codes, it gets needlessly troublesome incurring that mental debt, especially when when a simpler solution exist. Leave it to the compiler. On large systems, without type hinting, refactoring can be a nightmare. There's a reason why dynamic languages are getting type hinting. Python's getting it. JavaScript also through Flow or TypeScript. I get this feeling that the people who dislike type hinting are those people who have yet to write significantly large/complex code or work on a team with one. I've worked on large code bases before there was type hinting. When type hinting was adapted by the team, it felt like such a relief, and we were able to get so much more things done, faster.
Almost? https://www.kickstarter.com/projects/1817732114/the-phpdiversity-rainbow-elephpant
i downvoted you because the original thread is cancer and i would never have found this article if it had just been posted there. i think this article is good on itself and doesn't belong on the original thread alone.
Why not just raw PHP? As long as you understand the core language the others are simply a matter of knowing what to look for in the documentation.
cache is simple if eloquent is used within laravel, but in my experience, it need independence cache handler when it used as library
I have built a webapp, which has user registration, login, etc. It runs on MySQL, php, javacscript. I am trying to set up a php CRUD system so that a user can edit records related to their account, but the examples that I find online pass record id to the edit script via something like &lt;a href="edit.php?id=$row[id]" &gt;Edit record&lt;/a&gt;; as I understand it, this is insecure (a user could edit records that do not belong to him, or a spider could exploit this to edit all records in the table). Could someone point me to a tutorial that explains how to do CRUD securely to work with sessions? Or at least point out keywords I should be googling for?
This came up a couple of weeks ago: [thread](https://www.reddit.com/r/PHP/comments/6c9lf4/as_a_php_developer_which_websites_or_publications/) It's not far from blogspam, but the new site I liked the most from there was www.phptoday.org
We have some complicated polymorphic relationships that get run. Complex virtual products with a shared shopping cart, a user can purchase a shared item if it or some descendants belong to them or their organization. Most products have complex logic that has to be run In order to check availability. There's a lot being checked at runtime to display these. The lack of flyweight caching in Eloquent is a big problem here, another big problem is that you can't eager load nested relations on a polymorphic relation unless they all share that relation. The problem isn't even the number of queries due to the polymorphic relations here though, it's the expensive models being recreated over and over. If we have to actively circumvent the ORM, it's a problem with the ORM. 
That's not how Entity caching works. The idea is that if you pull user:1 out of the database, and blog:5 tries to fetch user:1 again, the Entity manager will give them the same instance that was already pulled out. No extra database queries, no new objects.
Hey, thanks for looking into that. Unfortunately, the `:cached` flag is only available starting on `Docker Community Edition 17.04.0-ce-mac7, 2017-04-06 (edge)` as per the release notes @ https://docs.docker.com/docker-for-mac/release-notes/ Most people are on the `stable` channel, which currently uses ` 17.03.1-ce-mac12` as the latest version. However, I've put your suggestion on the project board :) thanks.
Would it be better to initiate the database when an event happens. Does this block other I/O as well?
No, you probably just want a connection pool.
At the language level, [Hack](http://hacklang.org/) is to PHP what Typescript is to JS. They key difference is its dependency on HHVM, and there's no reliable Hack to PHP transpiler. I like types too, so I made [Psalm](https://github.com/vimeo/psalm). It uses docblock types and whatever other typehints you give it to better analyse your code. It's deliberately stricter than [Phan](https://github.com/etsy/phan), and has the equivalent of TypeScript's `noImplicitAny` option, so that it can be configured to raise an issue *any* time it cannot safely infer types.
Also phpstan and psalm. Phan can be quite slow.
+1 for connection pool.
Well, to be honest comments are not the way to go to make code readable. As Uncle Bob says, if you need to write feel compelled to write a comment, maybe you can make your code more readable with some refactoring that makes the intended meaning more explicit. 
My argumentation is that it should not. But we can at least agree to disagree.
well played. 
True you can do whatever the fuck you want to do with your product. Except if you have a really popular product like Laravel and create a frontend tool like Laravel mix which couples really nicely and is taken into the main documentation, it is kind of a dick move to not listen to your user base.
Yep :)
Why? Is speed a concern?
This is correct. The current coding standard in my team is that phpdoc comments shouldn't be used unless they add something that is not described in the method signature otherwise the docblock is simply a big waste of space.
This is a good example of how this method of 'reducing visual debt' does more bad than good. The type hints have a purpose, and removing them means that I have to cast each of my inputs "$a = (int)$a; $b = (int)$b" as well as the method output "$result = (int)sum(23, 'Day 1');" to EVERY call to this method in my code to guard against invalid data going in and coming out. I also need to add a phpdoc to describe what the expected inputs and output should be. This all adds up to produce code that in the long-run is more convoluted, error-prone and contains more 'visual-debt' than what you started with. 
I'm using PHP. Not just plain PHP but a an in-house "view framework" for extending/including other views. I feel it's the best one I ever used, just because type-hinting and all the other features are available for all variables and inherited properties. Mainly because I never was a fan of replacing one language for another, which i.e twig or smarty does.
Twig. The main reasons are 1. I never seen a project with native PHP templating where devs were disciplined enough to do a 100% separation. Every time some business logic creeps into "templates". Twig makes it much harder, yet it is powerful and flexible enough to implement whatever complex *display logic*. 2. A real lot of useful [helper filters](https://twig.sensiolabs.org/doc/2.x/filters/index.html). `first` and `last` for arrays for example. 3. Extending and blocks. With PHP it's always a headache, where to add a specific js for one page only? With Twig it's a piece of cake. 4. Auto escaping. A must from security point of view. The last two points of course could be done with native PHP but the key word "could be" - it have to be implemented somehow. Why bother if there is Twig already? Some examples from my recent code You have a block "stylesheets" in the head section of the main template and now you have to add just one specific CSS file for the particular page: {% block stylesheets %} {{ parent() }} &lt;link rel="stylesheet" href="{{ asset('dashboard.css') }}" type="text/css" media="all" /&gt; {% endblock %} An example of rather complex display logic to produce a string that shows only the first campaign name and then if there are others, list them in a tooltip triggered by a +N link (i.e. "Campaign Name +5") {{ row.campaignsToApplyNames|first }} {% if row.campaignsToApplyNames|length &gt; 1 %} &lt;a href="#" data-toggle="tooltip" title="{{ row.campaignsToApplyNames|join(', ') }}"&gt; +{{ row.campaignsToApplyNames|length - 1 }} &lt;/a&gt; {% endif %} The last one was improved, thanks to /u/Dgc2002
&gt; For instance, Jeffrey Way, the creator of Laracasts, is currently running the most high-quality and extensive PHP video tutorial site on the Internet. So where's the high quality if [this](https://laracasts.com/series/php-bits/episodes/1) is posted by the creator?
the only issue i have with that is when you return `$this` since that can't be properly typehinted, forcing you to write the `@return` tag
The Symfony framework provides a really easy way to do that within a Symfony application using functional tests. It uses the Symfony dom crawler component and is intended for testing controller classes. You can select arbitrary output in the HTML output using xpath or CSS selectors, and then apply an assertion like assertFileIsReadable(). The Symfony functional tests are tightly coupled to that framework though. I mention it because it might give ideas for finding comparable stand-alone libraries. The Symfony docs on it are here to get the general idea: https://symfony.com/doc/current/testing.html As another commenter mentioned, Selenium would work also. I use it for integration testing. Setup is a little involved but the package is generally pretty easy to use. Good luck! 
Further to this, I saw some commentators suggest that your tests should then pick up when a developer has passed in the wrong type. Fairly sure my brain broke at this point, because wouldn't tests that include type correctness checks have *more* "visual debt" than just adding hints in the first place?! The whole argument for this seems to be steeped in the same mistakes of writing murky code and thinking "I totally understand the context of this, it's fine" rather than "what if myself or someone else has to revisit this in a couple of months time, will I still have enough context?"
I have some arguments as Ruby (RoR) / JavaScript / PHP developer. I see what Jeffrey tries to say. Whenever you see some Rails concepts you will love how simple can be working code. This is especially useful for startups, saas applications. Lots of great software has grown from the ground of Rails: GitHub (oh my, how did they survive without static typings and interfaces?), GitLab, Discourse, Shopify, etc. However, PHP is different. It is different not only in its capabilities but also in the community. We have PSR-x rules, we have different frameworks, etc. In the very beginning of PSR-2 I didn't understand why I'm banned from writing one-line coditionals like I do in Ruby: ``` if (!count($posts)) return; ``` However, there tend to be reasons to do it, right? And the same applies to other stuff. Those languages are different and you should think about it in a different manner. What makes beautiful code in Ruby doesn't make one in PHP, and same for JS. Because of conventions, coding standards, and the way the language feels, PHP tends to be more like Java or TypeScript. I'm against unneeded complexity. But before adding some stuff we need to understand why we do it. You should not make an interface before you understand that you will need it. You should not make class final without explaining why it is designed this way and so on. I agree that adding lots of cool keywords without understanding makes no sense for code, but hey, what if they put *intentionally* there. The advice should be: think twice before producing extra complexity but not: remove interfaces, and other keywords to make code cleaner.
And you should probably still have them for documentation. Saying the code documents itself is a lie.
self doesn't work the same because you have to point you are returning the same instance, not another instance of the same class. you still need an `@return` annotatio to point its the same instance.
i can understand visual debt with things like stairways to hell if ($date &lt; now()) { if ($active) { if ($amount &gt; $tolerance) { return true; } else { return false; } } else { return false; } else { return false; } vs return $date &gt; now() &amp;&amp; $active &amp;&amp; $amount &gt; $tolerance; but this has 0 to do with typehints, its about messy code.
You'd have to have the edit function validate the row against the user. Personally, I'd add a foreign key into your`records` table - `user_id`. Then your CRUD can only act on the `records.id WHERE user_id = :user_id`, given that the `user_id` is the currently logged in user. edit: formatting
Good point, thanks!
&gt; class Bar { function foo() : self { return $this; } } $b = new Bar(); $b-&gt;foo(); why no just: class Bar { function foo() : Bar { return $this; } }
again, that typehint doesn't say its not a different instance of the same class.
If that happens, then you should review your development practices because your code review did not catch this.
I'm surprised by the fact, that Taylor have not rushed into this comments as he often does on reddit.
People are zealously downvoting everything they disagree with or don't like in this sub. Or even jumping on the downvoting bandwagon for the heck of it. It pains me to see that this community is getting more and more salty overall, spouting downvotes (against the reddiquette) everywhere.
&gt; it have to be implemented somehow. Why bother if there is Twig already? Because you can just use PHP syntax instead of having to learn a new syntax as well as for everyone else using the project.
Well, if you know PHP, learning Twig will take like... 2 hours, maybe?
Judging by the comments on the position, he cannot
&gt; Every time you create an interface to follow some arbitrary rule about typehints and inverting dependencies, you're stacking little bits of complexity onto your app. Weren't those things invented to counter complexity and promote maintainability and readability in the first place?
Blade. Reasoning: 1. It comes with Laravel. I use Laravel. 2. Pleasant syntax to look at and visually interpret 3. Auto-`htmlspecialchars` by default 4. Allows me to write PHP in the template *if I absolutely have to* 5. I don't have much experience with Twig, only Smarty (years ago) 6. I *love* the directives related to `@section`. Makes it much easier to split up HTML across different files
&gt; My main problem with doctrine is the event system which is a bit limited when you want to create some advanced behaviours (I hate when I have to use unit of works :D). Please don't use "advanced" event management - it is a giant foot-gun for most scenarios I hear of.
Either `Twig` or `TaleJade` (https://github.com/Talesoft/tale-jade) (New name is TalePug, but I don't know if it's in a working stage) which is a PHP implementation of the famous NodeJS Jade Template Engine. 
This dude seems to be getting a bit too arrogant imo. I know he has a product to sell but come on...
Mostly my desire to learn React and Electron. Needed a project that wasn't too hard to implement and wanted it to be something that I could use myself.
I don't think you understand what he's saying. Essentially, a Ruby developer has to right his code in a similar way to the code sample above, or run the risk of failure under certain circumstances. This issue is overcome with type declarations, which actually leads to LESS visual debt. In other words it's a weakness of Ruby not having them rather than a strength.
Good points. I was probably over thinking some of this. Thank you for the insight. 
Blade ftw
This sounds more like advertisment. It's not a comparison between Symfony and Laravel, it's just what Laravel can do. The questions ask him about the difference of Symfony and Laravel and the answers mostly contain what Laravel can do, but not what Symfony can do. Not that this is wrong, but then the title shouldn't be Laravel vs Symfony.
Hello. According to the readme, there is an unstable state for $config: $config = new PascaleBeier\Config(__DIR__.'/../config/'); // we cannot get configuration if we forget to call load() $config-&gt;load(); What about putting the contents of load() into the constructor? This is not the best practice in the world but it will keep your class light, and you can drop the $path class member. Another solution would be to create a static factory into the class, like: $config = PascaleBeier\Config::create(__DIR__.'/../config/'); // will instantiate and call load() 
or if you want to decompose it further you could create a config builder that can create a config. $config = (new ConfigBuilder()) -&gt;addPath(__DIR__.'/../config/') -&gt;build();
... Doctrine works in Laravel. I've been using it for several years (for both Laravel and Lumen projects) and had no issues. http://www.laraveldoctrine.org/ Most quality packages are built to be framework agnostic and only require minimal additional work to make an implementation. That being said, I wouldn't dismiss a solution solely based on a single feature. You'd likely be able to find the same or equivalent feature available for nearly any framework.
This is a matter of opinion really. I liked the Dotenv API and mirrored it! Edit: +/u/reddimato looking at it again - this seems to be the best solution!
You're just doing it wrong. Better example: ``` &lt;div class="foo {{ $foo == 'bar' ? 'bar' : '' }}"&gt; ``` or even ``` &lt;div class="foo {{ $foo ?? '' }}"&gt; ``` 
But that's my point, you're actively avoiding using Blade syntax besides the echo braces here
`pug` known also as `jade` &gt;it is the most minimal 
Hell, I've gotten a good grasp of it just looking at OP's example.
Your example fails to illustrate that point though, because in both Twig and Blade the explicit conditional there is superfluous. 
Twig. I have experience with raw php, smarty, jade, haml, blade, and twig. I would rank them in that order from least to most favorite. Twig wins for the same reasons others have mentioned. Blade is close second and clear winner if you're going with Laravel.
have you read the third para of the article? this is why it seems like what laravel can do. otherwise the scenario would be different. 
Any particular examples you're talking about? I haven't checked the Mix issues board in a while so maybe I'm missing something. 
All of the above is noted and will be reflected in the next release. 
What is FPC?
Ive been moving towards SPA's and API's so Ive been using a lot of Vue.js lately. Love it. But I tend to use Blade since I do a lot with Laravel, but I love Twig. Its a great solution.
I despise having to write the words endif and endforeach. As a result I've always used plain php so I can use the if(){...} syntax. I've never had to work on a site/design complicated enough to absolutely need template inheritance. Never worked with a designer who didn't also know more than basic php.
Well i still prefer cli, but i really love the look and feel of your UI. Nice work!
Gosh, it's only my own stupidity. Going to fix both here and in the code. 
Blade
Twig was dead simple to pick up in my experience. 
GUIs have their advantage. It's not just ignoramus vs. superuser.
Smarty...old school cool
Full disclosure: I have more experience with blade and I'm just trying out Twig with a project. My first impression of Twig is: Interesting. It really forces you to keep your logic in a controller and out of a view. I like that. BUT, there was a situation where I really wanted to use some vanilla PHP in my twig file, but because Twig is so strict about that -- I can't. Now I have to write more code in my controller to parse the logic when I could have simply used php in the view. Yes, there are purists that say, "don't ever mix logic in views" but you know what? Sometimes I want the flexibility to make the decision for myself. I try to follow best practices, but I'm not running queries in the view or extensive looping with temporary variables. Let me decide if I want to sprinkle in some PHP where it could reduce lines of code. That said, I really like Laravel's blade. It handles all of the annoyances of htmlspecialchar'ing echoed content, and provides simple, easy to use syntax. The only drawback I will mention (which someone else in this thread brought up) is the inline syntax can be a little cluttered. That is typically when you want to apply a class to an element and you're using an ``if`` statement to do so. My vote goes to Blade though.
I've no issue with command line work, but I find this style of package/version presentation easier to parse. I can glance and get a nice overview of the state of my dependencies.
I haven't put deep thought into it, but I was thinking along the lines of having a standardized text format that sits next to composer.json (composer_metadata.json?). It could mimic the structure of composer.json, but allow a place to put important notes that Composer stubbornly refuses to make an accommodation for: { "require": { "vendor/foo": { "comment": "Included so we can take advantage of feature x." }, "vendor/bar": { "comment": "Included to enhance the functionality of foo.\nKeep this on an older version for now, or foo will throw errors.\nWe can probably remove this entirely once foo is at the net major stable release." } } } The GUI would provide a nice way to keep the two files in sync.
nobody said they didnt, or called out people using one or the other :) 
How does this compare to PsySH?
Good idea and easy to implement. Thanks, I'll add it to the roadmap.
To each his own. It's a matter of personal preference, experience and the features that a templating language can offer you. Once I dive more into Symfony I'll definitely give Twig a robust try!
Looks awesome, keep up the good work.
trying to receive API data from TimeStation using their API guide: https://www.mytimestation.com/API.asp . the Report examples start a csv/xls file download immediately. What can I use to create an array from the file?
My first thought was this looks like an electron app :) good choice
Volt 1. Because it comes with Phalcon 2. Because it's fastest(written in c) 3. Because it compiles to totally plain php(without any additional classes/objects) 4. It has similar syntax as twig
Thank you all for your feedback, +/u/reddimato and +/u/yannickl88 ! I heavily refactored the API now. You can "even" change the delimiter and use white space now: $config = new PascaleBeier\Config\Config(__DIR__.'/../config/'); $config-&gt;setDelimiter(' -&gt; '); $config-&gt;get('app -&gt; software -&gt; version') This is getting more and more awesome :)
I'm actually aware of this article, read it in the past (although lost until today, thanks). It shows ways to create several indexes as you can see based on the type of search (fuzzier). Unfortunately it doesn't work with substrings, like for example what a LIKE '%abc%' search will do. It doesn't solve what we need. It's limited to the exact cases you design the index for. You can use beginnings or ends of column values, but not with a substring placed anywhere in that string (won't match). e.g. 'Joe Corp. Ltd' and 'Mike Corporation LLC' will not be found when searching for 'Corp'. Not to mention you also need different indexes for uppercase, lowercase, uppercase first etc.
Not really. For example, with MariaDB that does full table encryption, the overhead is only up to 5%. I can live with that. Edit: The problem with self-managed MariaDB servers isn't encryption, but securing the master key without a hardware lock like USB memory stick, because these are cloud servers and you do not have physical access to them. Otherwise it works in principle and offers like medium-grade security.
I've used Twig, Blade, Smarty, and PHPTal for many projects over the years. Twig is my personal choice if I'm not using Laravel. Smarty was great to use but I haven't touched it for a long time. I reserve all my hatred for PHPTal simply because its horrible to use and debug.
I think you are either out of date or young and didn't look to much. Static error analysis - PHPStorm (JetBrains per usual - they have the awesome stuff) - configure your level, the severity (I just crank to max) and document stuff with phpDoc blocks (it's a great habit to have - document all the params/properties/return types as you go - never leave even an obvious method undocumented). Second part of it - PHP has Class and array type hints since 5.3 I believe (damn that's a long time ago). since 7.0 we have scalar types too - int, bool, float, string and other enhancements in the type hinting area (arrays of types are still on the phpDoc shoulders though - the syntax is "@var Class[] $variable" - alternatively typed collections can solve that if needed. 7.1 brought ability to have nullable type hints - in my view this was one of the things that greatly hindered adoption of type hinting - optional params had to have no type hints before this. So basically, yes, we have all that. I wonder how you where able to miss all that...
&gt;tipehints
I fixed the post, here reddit doesn't allow editing it :(
You can always extend Twig if you need full PHP.
I strongly prefer the way most editors allow expand/collapse/select-all-between of { and } to assist comprehension of several layers of nesting over endif and endforeach which don't have as much support across editors I've tried.
React is really nice, but electron is incredibly bloated and buggy on a lot of systems. A pure C/C# implementation would be really nice.
Or you could use the "extra" key which is for arbitrary data anyways. For example: ``` { "extra": { "require-comments": { "vendor/foo": "Whatever", "vendor/bar": "This again?" } } } ``` Taking advantage of the extra key not only allows anything using Composer to take advantage of it without extra work but also keeps everything in one file so you're *more likely* to update comments as things change without forgetting to touch the other file.
&gt; Not to mention you also need different indexes for uppercase, lowercase, uppercase first etc. That's why most full-text search engine tokenize keyword before stocking &amp; indexing them (if you lowercase on insert &amp; on search, it's case insensitive). &gt; You can use beginnings or ends of column values, but not with a substring placed anywhere in that string (won't match). Break the string in distinct keyword, and index. Look the concept of [Inverted Index](https://en.wikipedia.org/wiki/Inverted_index), also used by fulltext search. &gt; Unfortunately it doesn't work with substrings, like for example what a LIKE '%abc%' search will do. It doesn't solve what we need. If you can search on full like, it kinda defeat the purpose of storing it encrypted, because you can guess all your values. 
You can, I did recently and it was not difficult. 
Joomla's Framework-on-Framework (FoF) Rails-based RAD environment has done this (extracted Blade to use in a different environment)
Actually it can be very useful to get Composer to Cpanel/WHM, which will enable shared hosting accounts to use Composer like they can do with PEAR right now. 
That is a framework that I haven't heard in quite some time. How is your application doing? What would you point as a downside of using Phalcon?
Commit messages aren't front and center enough for my taste, plus the "why" isn't the only thing that comments are needed for. For example, I wouldn't think to go back 3 years in the commit history to look for a warning saying "don't update this package or the site will break!"
Yes, you should use the `extra` key. Just read about it :)
Of course he will say his framework is better, what else did you expect?
https://josephg.com/blog/electron-is-flash-for-the-desktop/ (I like the app btw, but using Slack, Chrome, and Spotify all at the same time, another Electron app will literally put my ram usage well above 50%)
Twig, because I don't like Smarty and I haven't used blade since laravel 4.2 or work with laravel there's really no need to use it there. I have tempted to try using Mustache for applications written in other languages since mustache seems to be available in every language, but I hate the syntax.
It's doing totally fine, im using angular + phalcon, maybe why i don't have many problems because part of application is done in angular(like 90% of views), but i still use volt in some places(like email templates, or some stuff to prerender on server side to avoid overhead on client side). They biggest downside is also the biggest advantage - that it's written in C, and when some bug is occuring in core(zephir) then it will be hard to fix it without having good knowledge about zephir, c, zend engine and how php works.
I just found out there's a literal "extra" key that you can use for this.
&gt; That's why most full-text search engine tokenize keyword before stocking &amp; indexing them (if you lowercase on insert &amp; on search, it's case insensitive). Good point. It appears I'm tired (how could I have missed that). &gt;Break the string in distinct keyword, and index. Look the concept of Inverted Index, also used by fulltext search. I have some knowledge of this, although many years have passed since then. Been creating some custom FTS stuff and indeed there was an inverted index. Although at that time I had no idea about its proper naming (it is long time ago). &gt; If you can search on full like, it kinda defeat the purpose of storing it encrypted, because you can guess all your values. Kinda, yes. I agree that there's a contradiction between this requirement and the whole search thing. So far I'm working with another big contradiction, it's like a nightmare that never ends, worse than encryption (there we have options as posted here). On one hand, business users insist "their data to be stored in separate database, not mixed with others", so row-based sharding is a no-no (god, why me...?). So we switched to a database-per-user model (tried all ways BTW). Now I've just realized in the last minute that you can't truly use replication for such a type of model (thousands of databases per server, ever changing). It's something for a much more static config with a fixed number of databases. So failover &amp; high availability is like impossible. I'm also testing with Amazon RDS and for some reason it works EXTREMELY slow and can't figure yet why. It might be due to ping time accumulating (lots of queries per pageload).
because Electron is slow as hell!
If you have choosen a per-user database model for business constraints, "usually" it also solve the replication scaling on heavy updates. If you can handle 1000 DB on a server, a replication master write/slave read only should be manageable with a second server without too much overhead. I might miss something but I don't see the replication problem here. Also I suggest this [read from MariaDB blog](https://mariadb.com/resources/blog/protect-your-data-row-level-security-mariadb-100), I find it's a great usage of a row-level security based on user privilege, which really limit for the application other users data access (either it's a missing security check in the appli, or even an unseen sql injection).
I'm going to try this out I think. I don't really know a ton about composer yet and like to learn this kinda stuff with a gui when I can. 
imagine you have the following method. /** * Sums two integers and return the result. * * @param int $a * @param int $b * @return int */ public function sum(int $a, int $b): int; how is it better than /** * Sums two integers and return the result. */ public function sum(int $a, int $b): int; On the other side /** * Determines if a number is a prime * * @param int $number the integer to determine if * its a prime. If it has value 1 or lower will return `false` * @return boolean if the number is a positive prime. */ public function isPrime(int $number): boolean; This doc contains information outside the typehinting so its actually important to keep it.
My opinion? Not that it's worth much but I found it largely irrelevant. He's more than welcome to his opinion. Any individual or group can take it or leave it as they see fit. It's an opinion piece - an editorial - not really of much value to me personally.
Upvoted for being sarcastic
Yup. Do it all at once if possible, so the time during which the code has to handle two schemes is minimized. If it's a hash, then it's best done just as you described. Replacing the hashes upon login just feels nice and elegant. If it IS a password migration, then it's worth noting that there may be some laggards who _still_ have the old hash a long while later if they rarely log in. If there's a password reset function to the application, then it may be worthwhile to simply drop the old hash support and let them reset their passwords. One other thing to note is that there's a much simpler way to test the password and if it needs rehashing. You don't even need the extra column. if (password_verify($password, $user['password']) || md5($password) === $user['password']) { // Verified if (password_needs_rehash($user['password', PASSWORD_DEFAULT])) { // Make a new password hash with `password_hash` } // Do login stuff... } else { // Failed } Once all passwords are off of MD5 or should be off of MD5 (with a password reset scheme), the MD5 comparison can be dropped. The rest would remain in place to automatically handle when PHP's default password hashing scheme changes. Examples of this would include an increased default bcrypt cost or if PHP switches to using Argon down the road.
i wouldnt even interview someone whose only exposure to a language (any language) is through a frame work.
Why don't encrypt the disk?
FWIW, I much prefer "Iris". The humor of "Yet Another Foo" has started to wear thin.
When not using Blade with Laravel, I like Twig. It fades into the background as much as is possible, so it feels like I'm editing an HTML file instead of a mixture of PHP and HTML. I find that I don't like the look of two different languages mixed together in the same file.
What are you trying to achieve with encryption? Against what scenarios do you want to protect yourself? Physical attacks? Server hacks? Network snooping? Malicious users? Bugs? Also, are there standards you need to comply to? (pci, hipaa, etc) Security and encryption is difficult, and just blindly encrypting stuff often gives a false sense of security. 
It's provides lowest grade of security. Not acceptable. It's only good for physical tampering like stolen hard drives.
If they updated their website to just seem modern, less people would be afraid to approach it. They're rocking that 1999 aesthetic right now.
If you want to do it without frameworks - you should also to pay attention to security One day here on Reddit I tried to describe possible problems with file uploads, but the post became pretty big, and I transformed it into an article on medium https://medium.com/@igordata/php-running-jpg-as-php-or-how-to-prevent-execution-of-user-uploaded-files-6ff021897389 I hope you'll find some useful info there.
thanks will look into this 