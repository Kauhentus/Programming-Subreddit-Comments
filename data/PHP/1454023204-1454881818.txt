Because it's online. Turn your head away from the screen and *poof*, the insult is gone. In offline spaces, physical abuse, harassment and someone's unwelcome presence is much harder to remove - that's where a CoC is very necessary. That's the major difference here, and why we oppose the CoC - it's just. Not. Necessary. You say "prevention". From what? Name *one*, just a single instance where online harassment in a FOSS project actually occurred. All these people cite "protection" and whatevs but no one produces any examples, whereas we in the anti camp have a plethora of examples of abuse and ruined lives due to policed speech and immoral doxxing on the side of the tyrannous pro-CoC.
&gt; You know what, when you dismiss people saying that something is important to them for long enough, they're just going to start flexing their muscle instead. There are lots of things important to me. The thing that you don't seem to understand is that there are many people and many different things are important to them. Diversity is not skin deep. Tolerance is not just about race or gender. I can understand where someone from a different nation or gender is coming from, just as I can understand where the rabid libertarian or fervent christian or staunch socialist are coming from. I don't discriminate against any of them. However, I will fight them all if they try to impose their ideology upon me. That is what it means to be free. 
Slides can be found http://ocramius.github.io/doctrine-best-practices/#/
Most people in society have no clue what GamerGate even is. If they've heard anything about it, it's been from crazies calling it a "harassment campaign against women". I've followed it from the start, since I enjoy playing games, and I've not seen anything happen from the "GamerGate" side (which is tenuous to call it a "side", since it's mostly just individuals commenting on articles) which could be called "harassment". A lot of politically correct busybodies want to denigrate gamers and enforce their own busybody politics on games. I don't support that. If that makes me a "GamerGater", so be it. But I've never been involved in any "movement" beyond commenting on a few reddit posts. I've certainly never harassed anyone, which is something you can't say, unfortunately.
The usage of the software may be political, but we're discussing the creation and maintenance of the software. This is why people bring up the meritocracy argument.
While I'm against the CoC in general, I think that proviso is fair.
master/slave is well understood industry jargon that is easily identifiable when reading code. It's also time spent on something that's trivial and unimportant, that time could be better spent elsewhere.
I never mentioned the usage of software.
I'm sure the decision to use the Contributor Covenant was made in good faith, but given its authorship it is understandable that many might be skeptical of its motives. As you well know the author of said Covenant is also the person behind the infamous 'Opalgate' incident. So it does not seem an unreasonable stretch for many to believe that that sort of behavior is the kind of behavior the Contributor Covenant is designed to facilitate. It may very well be that the idea of that sort of behavior is against the current spirit of the CoC, but I think you are dealing with a sort of "fruits of a poisonous tree" type of deal here. Indeed, some of those who oppose this spell this out very clearly, that they do not trust the motives of this CoC because of this fact. That may be unfair and unfortunate for this particular manifestation of a CoC, but why does this particular incarnation of it have to have any special significance? Simply replace this CoC with one from a 'clean' source, like the golang one you mention above. A steadfast insistence to keep this one only increases your opponents suspicion of your motives. After all, if they are interchangeable in their ends, why not change to one that is found less objectionable, even if you think your opponents suspicions are baseless?
I know and it's problematic, which is why I clarified.
What exactly is the point of bringing up your "white dude" point, if not to denigrate white men as some sort of problem?
I don't "support" master/slave, but I don't oppose it either. I oppose efforts to remove it, because I see them as injecting politics that are undesired. It's possible to defend something without agreeing with it. "I may not agree with what you have to say, but I will defend to the death your right to say it".
Glad to hear you are doing well now. I've heard of people suffering from this only in 3rd party accounts so its good to read to see the reality. I sometimes suffer from imposter syndrome but only lightly. Like if I needed to write some big integration I can do it no problem but sit me down and ask me to create a class that does X while someone watches? Its like i forget how to code! Makes me think I'm no developer - but I obviously am, I make amazing sites how do I let myself think that? Either way, not important whats important is your story and the good ending.
Publicly shaming me for a reddit comment, and calling for my removal as a mod, is definitely harassment. Stating the self-evident, that you love drama, is not.
I support this provided you're available for hands-on instructions on partying on. I'm a bit out of practice.
&gt; So it behooves those in the established party to perform a cost-benefit analysis when a group of people comes forward saying "this is important to me". Because if you do dismiss this group of people, the next thing for them to do is to flex their muscles. And that's the problem. It becomes about power and muscle. Someone expresses an unpopular viewpoint and because the CoC has given a committee the power to banish the unpopular person, a twitter mob is formed to descend on the committee. The committee doesn't want to deal with it, and decides it's better to banish the one to appease the mob. But if you don't implement the CoC, the twitter mob doesn't have targets to appeal to, you've cut off the problem before it starts.
It's not the web. It's PEBKAC through and through. Circlejerks and echo chambers are a far more efficient way to make yourself feel knowledgeable then actually trying to understand the problem. And in almost all cases, all the information one needs to make an informed opinion is readily available. We've convinced ourselves that ignorance is a feature, not a bug.
You know, I've been trying to get myself to meditate and practice yoga for a while to help get my stress levels down, but hearing from you that it helps with anxiety, too... maybe I'll use that "calm" app on my phone more often. This thread has been a good read for me because anxiety and self-doubt has followed me for quite some time, and I feel like a lot of it has to do with [Imposter Syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome). I'm a fairly successful student, my employers and past professors give me glowing reviews, and so many people assert that I'm a great developer. But I just... I look around me and see so many smart programmers and researchers and I think, "Man, I'm nowhere near as smart as they are", and the performance anxiety and imposter syndrome kicks in and my confidence in my work and ability sinks. Honestly, it's not crippling or causes panic attacks *anymore*, but it's definitely something that shouldn't be swept under the rug, you know? I have a tendency to overthink shit, and that's where I think a lot of my anxiety stems from. Hopefully just meditating, like with yourself, will help calm those thoughts and fears.
 The name "contributor covenant" has been removed but the wording people are objecting to still remains. REF: https://github.com/derickr/php-community-health/blob/master/code-of-conduct.rst
I'm in the same position, except a little earlier in the process. Would love to see some example code in the same situation as yours
There is also a lot of good highlights which are not specifically related to Doctrine like immutable objects, UUID for primary keys (love this idea) or requesting entity repository/source via DI (are there people who is not doing it already???). Why not make selection "functions" to be just an iterator with set of configurable options instead of putting everything inside __invoke? Something like: final class UsersWithSubscriptions implements IteratorAggregate { private $someOption; public function __construct(EntityManagerInterface $manager) { } //for example withMonthly, withYearly, withBlaBla public function withOption($option) : UsersWithSubscriptions { $r = clone $this; $r-&gt;someOption = $option; return $r; } public function getIterator() : Traversable { //DQL and etc } } //Not the greatest example foreach($usersWithSubscriptions-&gt;withMonthly()-&gt;withYearly() as $user) //With DI user don't even need to know about that being a function, it's basically //typed "array" protected function showAction(UsersWithSubsriptions $list) { foreach($list as $user) //... } In this case you can do the same thing (including requesting it via DI) but you are getting power to declare iterator specific options (kinda domain and selection specific query builder) without putting arguments into __invoke or creating new "function" for every possible variation. But i agree, putting a ton of method into repository not great idea. P.S. Sorry if i'm getting it wrong, i'm not Doctrine user.
&gt;How were they forced? You said it best "Someone made a pull request, ..., and it was quickly accepted.". That removes the chance for participation in the discussion or it decision to merge, which removes choice. At minimum everyone, within a reasonable time frame, should be allowed to voice their opinion no matter what it is. If you don't agree that's fine, difference of opinion. &gt;it was uncontroversial Yet I, you, and others are discussing it anyway. There's nothing wrong with that, not suggesting you think there is.
Sorry, I was only referring to the master/slave thing. My point was that if the only technical reason for not changing it just familiarity, well that's not very compelling, imo. Just note it in the docs and it'll be fine. So, with that in mind, I'm arguing that people opposed to the change are themselves contributing to wasting time on something trivial. Ie, why not just make the change and move on to important stuff?
Partying on has only one goal: 1. Get RIGGEDY-RIGGEDY-REKT!
It's certainly a prejudiced representation. I don't think it's a misrepresentation, though. It's certainly supported by the current text of the RFC, given how these things tend to go down. You might not like how I've framed it, but this is how I perceive the "mediation process".
To be fair, that kind of removal would be a very public reprimand. It would have repercussions elsewhere ... and that's part of the plausibly-deniable intent.
&gt; We're already seeing most of people who aren't "allied" to radical feminism getting pushed out of the community. Curious as to what makes feminism particularly radical and what it means to be allied to it? 
&gt; I'm asking people to evaluate problems on a singular basis instead of just trotting out some rhetoric and giving it no thought at all. So comments like: &gt;So, anyone actively against the concept of having a CoC at all is essentially saying what happened in the FreeBSD community sounds cool. &gt;[REF](https://www.reddit.com/r/PHP/comments/3zhapd/rfc_adopt_code_of_conduct/cymbpcs) 
The cause is totally different but there are actually a lot of similarities in the response, [here's a more detailed and accurate history](http://rationalwiki.org/wiki/Gamergate) if you're interested in seeing some of the parallels.
Ok. That sounds like a horrible experience. I understand why you oppose the Code of Conduct. I don't think it justifies your original statement though: "We're already seeing most of people who aren't "allied" to radical feminism getting pushed out of the community". It's a bad situation, to be sure. But it's not most people. Nor does support of the Code of Conduct mean one is a radical feminist ally. I guess I'm just cautioning against the line of thought that makes supporters (or opposers) the "others". You may not personally want to contribute to the discussion, but that doesn't mean other people can't or shouldn't. It is a request for consideration, and needs majority acceptance to ever get off the ground. Your experience serves as a warning, which may be helpful to the ongoing discussion. Whether or not PHP does get a Code of Conduct, I hope clear-headed discussion is what people remember in the end.
It seems backhanded. From their point of view, why is "white dude" and male hate okay if they're fighting for equality? I can't really take it seriously because of that.
I would never claim that I'm not political. I'm just saying that to oppose this CoC isn't necessarily political. It is simply the rejection of the injection of politics into our project. Imagine if someone submitted an RFC asking for Christianity to be accepted as the official religion of the PHP project. Would it be anti-religious to reject that? No. It'd simply be secular.
Shouldn't they be able to decide for themselves what they are.
I'd never say that everyone who supports the CoC is a radical feminist. My position has been that the text of the CoC was developed by a radical feminist who references the "Geek Feminism" wiki and calls meritocracy a cult. Read the [Contributor Covenant website](http://contributor-covenant.org/) and tell me that it's not about feminism. Additionally, Anthony, who originally put the RFC forward, is close friends with Randi Harper, who is currently involved in going around pushing radical feminist codes of conduct on open-source projects. She was actively commentating on the discussions right from the start, insulting those who opposed the RFC. I do not believe that this RFC can be voted on without serious outside manipulation. It has been politicized from the start, and has driven a wedge into our community. It has become a [wedge issue](https://en.wikipedia.org/wiki/Wedge_issue), and everyone opposing it is suffering from constant character assassination and the threat of losing their jobs.
Ok .. maybe it's a cultural thing then - and the reason for my confusion... where I'm from "extreme" views are treated as such, so I don't see the CoC as any sort of attempt at giving the kinds of people you point out any particular drum to beat... 
This whole issue is a fucking travesty, mostly because it shouldn't be an issue. Our species is doomed to evolve into jellyfish for lack of spines.
Love Adam's stuff on testing.
Except when we are talking about abstractions not implementations ie UserRepositoryInterface.
It's gotten pretty bad in the US and Canada. Most people just can't fathom these sorts of people exist. But they do, and they're in power right now. It's hard not to look crazy talking about them.
I though this was an easy test when i created it. I was surprised when people failed. I can think of some reasons: people are used to SQL where it is dead simple to order by sum(points), when they are faced with raw data they are just too junior to make it work. You're not considering how easy it is for someone to just repeat the same CRUD pattern over and over, copying it from some tutorial and then just changing some words. This test is to most of them a new problem where they need to use their brains instead of just copy-paste code.
http://symfony.com/doc/current/cookbook/security/guard-authentication.html
The `Guard` library in 2.8+ is much easier to work with than any of that stuff.
&gt; I wasn't aware that Derick had started working on the RFC elsewhere. Yeah, I think the only place it's been mentioned is in the mailing list discussion. (which kinda sucks) &gt; I'm not going to "out" people who have been wronged by powerful people in the community. That's not exactly what I asked, but I see how you could get there. If you were to "out" alleged bad actors, it might also "out" accusers. This is a difficult problem currently being discussed. &gt; I can only ask that you believe that I'm arguing in good faith. I believe you that it ~~is~~ may well be happening. This is the exact same argument made by many supporters of the Code of Conduct, so I hope you would afford them the same credibility when discussing the Code of Conduct. &gt; StoneCypher often comes up in those discussions as an example of the sort of person they're glad to have badgered out of the community, though that was simply because they didn't like him. I don't know the history here. Is this the guy Rasmus had to ask to "cool down"? If it happened ages before the Code of Conduct then I don't think it's 100% relevant. It does indicate a "push out of the community", but in a different context to be sure.
I grew up starving, disadvantaged, and abused as well. And I don't hate anyone for their race, gender, sexual orientation, religion, disabilities, or otherwise. Do you? If you do, I don't actually care what you are or where you came from; nothing justifies that behavior. If you don't, then good for you, you're not the person I'm fighting. As you'll see in my comment above, I make no claim that "all white dudes are racist and sexist" - a ridiculous claim to make. I do claim that "most programmers who are racist and sexist are white dudes". Now, you're under no obligation to change that. If you never did anything wrong, you owe the disadvantaged nothing. But if you're going to actively work against efforts to help those who have deliberately been held back *because* of their race, gender, sexual orientation, religion, disabilities, or otherwise - then you and I have a problem.
I am an egalitarian. I support equality for everyone, regardless of any factor that's outside of their control (like the ones you've stated). Feminists would like everyone to believe that anyone who opposes feminism is hateful/regressive, but the complete opposite tends to be true. Feminism of today isn't about equality. It's about identity politics and harassing people over personal pet peeves. I can't support that. I want to live in a society where merit matters, not the colour of my skin or what I have between my legs. Feminists today want the colour of your skin and what's between your legs to be *all that matters*. They've started calling what I want a "cult of meritocracy", shaming it as regressive
Why not pass a mailer to the registration handler instead of staticy calling it?
Now see, you make this argument above that you don't like people to make statements about "all white dudes", and then you come at me with statements about "all feminists". You can't have it both ways, friend. You wanna back down from that double standard?
My understanding is that pro side's argument is that the existing language is socially and politically awkward and so let's alter it. The anti side's argument is that no, that's a trivial waste of time and stop injecting politics into the project. Now, what I'm saying is that I think the politics are already there. That's the whole reason anyone wants to change it in the first place. In fact, I think the pro side would argue that *they're* the ones trying to remove a political issue from the project by moving toward more neutral language. It's funny you mention secularism because that reminds me of how some people say "happy holidays" instead of "merry christmas" and how other people get really bent out of shape about it. But that's irrational because, like you said, secularism isn't anti-religion. The point of saying "happy holidays" is not to advance an ideology, but instead to take something ideologically divisive and make it neutral. And I think this is kind of similar. Imagine there was "merry_christmas" function somewhere in the code and someone changed it to "happy_holidays". Yeah, that's ideology based, but then so is Christmas. And what really confuses me is that I can't imagine that would generate nearly this much acrimony, but that's fundamentally the same type of change.
Thanks. So you're recommending phpbBB more than Simple Machines or vBulletin or any other?
Please don't ask my to do anything more than basic select queries while the Google is turned off. 
..... Fine, have an upvote.
You act like all discriminated against groups are neutral bodies. They are not. Black people are just as likely to be racist towards whites as whites are to blacks. There is no difference between race. You can not, I repeat can not correct bias toward a particular group of people by artificially creating a bias toward another group of people. It's a pretty noticeable phenomenon for instance that implementing affirmative action results in the unintentional discrimination of groups that would previously not have been discriminated against. When you equalize based on some characteristic of a particular group of people (which is what you are proposing), you are implicitly favoring that group at the expense of the other. The solution is to work toward **legal** equality without bias toward any given sect of people **regardless** of historical disadvantage or social disadvantage. Obviously this solution does not work immediately but is a long process of social change. For instance, instead of affirmative action why not make it illegal for universities to collect non-pertinent information about a perspective student? Why not have a review board that reviewed anonymous applications containing only academic merit without any personal reference (including name)? This makes sense. Removing barriers makes sense, if this were law acceptance discrimination would be almost impossible. Instead affirmative action is a system in which we explicitly look at race in order to determine how much extra benefit that person has. This does not make sense.
Yes! I knew there was something recent that made it even simpler but couldn't remember.
I'm just using it as an example. Anyways, up until this point since the root comment we have been talking about society in general, not PHP. 
What? I'm absolutely serious. I gave my impression of the situation, but if anyone has a serious technical argument against it I'm very interested in hearing it. I can't imagine what it is, but that means it must be interesting if it exists.
I mean, be real with me. Do you think you've made a strong technical argument? Every point I've read so far is stuff we deal with all the time in software.
&gt; Write a function named numberOfUniqueFirstNames that takes in an Array of names, and then returns the number of unique first names in that list. ... This should return 2 since the names Jeffrey and Sarah are unique. I would have interpreted this requirement as defining each distinct first name in the set, regardless of number of occurrences (e.g., `SELECT DISTINCT first_name FROM users` in SQL terms). If you actively give this test, I would make sure you make your requirements very easy to understand. A qualified applicant would hopefully ask you for further clarification. &gt; You are not allowed to use any hashmaps, hashsets, in_array, etc. Just for loops, if loops, and basic logic. I disagree with having unrealistic constrictions like these when testing applicants. You want people on your staff who can solve problems practically. You can use their answer to gauge their talent, depending on if they used the "best" means by your definition.
that ``` $value = $values['some_key'] ?? null; if (null !== $value) { // ... Some magic for existing key } ``` Hurt my eyes. `if ($value !== null) {` is a better practice
Are you actually serious? Where is there an example of a black person ever being insulted, thrown out of a project, told to go to the "back of the project with the other coloreds" or had their PR rejected solely based on skin color? Please stop making things up.
No, not it wouldn't. That's like saying a formal petition and a court case would be necessary to ban a knighted scientist. Whoops, there's Tim Hunt, whose decades long career was (almost) ruined over lies and false accusations. Even the university which asked him to resign said they did so to calm the mob which mercilessly descended upon them without doing their due diligence. So don't tell us it would take an RFC. It would take a *hint* of extremist torches and pitchforks and the person would be made to disappear.
http://rationalwiki.org/wiki/Genetic_fallacy
I feel like the sea lion would have been better portrayed as a narwhal. 
&gt; I don't know much! Short version: An Opal developer was having a "discussion" on twitter (discussion has to be in quotes, because twitter is terrible) about sexual reassignment surgery for kids, which he is against. CoC activist Coraline Emhke took part of a twitter message to try and get him kicked off of the project. https://github.com/opal/opal/issues/941 &gt; A system of justice is not "a tool used to do others harm". It absolutely is. What, you think the people put in jail are not harmed? A justice system is an application of violence. Because sometimes, violence is necessary. That is why we place some many rules upon it, to do our best to create a system that uses as little violence as possible. And as has been highlighted in recent times, it doesn't always hit the mark. But, most importantly, the violence of justice must always be kept away from the hands of the mob. Vigilante justice is not justice at all. And let us not forget that different parts of the world have different ideas of what justice entails. Saudi Arabia will behead people for atheism or drug use. America is often seen as barbaric for its continued use of the death penalty and the enormous size of its prison population. Europe outlaws speech that it deems "hateful", while China will imprison you for speech against the government. In some countries, you can be imprisoned for being gay. While the idea of justice may be universal, it's application is anything but. Your idea of justice is almost guaranteed to be in conflict with someone else's. While the western justice system is founded on the principal of justice being blind, many people today believe that "minority status" should instead be taken into account, the so called "social justice" movement. Others see that as simple racism. What I'm trying to convey to you is that these things are complicated. They're not simple, nor are they all agreed upon. So trying to create a code of conduct is inherently a political statement. I don't want to see Open Source as a political football for people to fight over, because it inevitably fractures a community. 
Can you prove your skill answering some questions in /r/phphelp? So we'll be able to tell how high your experience is and then start recommending your service.
&gt; if a moderator maliciously deleted them, someone else can review it or restore it. Is it a broken idea? 1. it is easier to implement that from an audit log anyway ("Restore" is an additional feature anyway, so it may well be based off the audit log, from a data-source pov) 2. is it really a "deleted comment"? Or is it "moderated comment"?
Thanks. Maybe I read that the wrong way. I'll try your suggestion though.
&gt; we are high experience php developer
https://en.wikipedia.org/wiki/Ad_hominem#Non-fallacious_reasoning &gt; When a statement is challenged by making an ad hominem attack on its author, it is important to draw a distinction between whether the statement in question was an argument or a statement of fact (testimony). In the latter case the issues of the credibility of the person making the statement may be crucial.[8] https://en.wikipedia.org/wiki/Ad_hominem#Criticism_as_a_fallacy &gt; Doug Walton, Canadian academic and author, has argued that ad hominem reasoning is not always fallacious, and that in some instances, questions of personal conduct, character, motives, etc., are legitimate and relevant to the issue,[9] as when it directly involves hypocrisy, or actions contradicting the subject's words. It turns out, questioning the motivations of the person making the claim, or their interpretation of events, isn't actually a fallacy. For example, the onion will most likely not be considered a credible source. neither conservapedia, nor rationalwiki are credible sources, they both have agendas that are not to be trusted.
IQ's are flawed. The more you do IQ tests the higher your IQ gets, also your IQ all depends on which IQ test you did. What I used to test was how quickly/well they could learn something. So the tech test was to write a plugin for Phergie the IRC bot to test and tell if a web site was up or down. Really really simple but you have to read and figure out the Phergie API.
As Malteser88 said - that was exactly what I was up to. To put it simple - create new classes and divide persistance, templating and bussiness logic. So instead of just one AdminModel class I will make 3: PersistanceModel (DB), TemplateModel (views), AdminModel (logic). Also, I would be great if I could learn smth from you, imagecritic, but I feel that the only thing would be nonsense and fury. No need to troll or hate, I am here to become better. And, I guess, most of people here.
Bob doesn't live in the UK where healthcare is already paid for. But the analogy is still good. Interesting article. New projects often waste a lot of time of things that aren't important in the early days.
Could be a misconfigured mirror. Try going to a country-specific subdomain, for example, http://uk.php.net/ or clearing your cookies. If that works you might want to log a bug on http://bugs.php.net/ to get someone to check the mirrors.
Oh I absolutely would. I've denied PR's for much less. I've been involved with running and managing open source projects for over a decade. :) When I run into a bully who shits all over the work of contributors, I would much rather tell the bully to fuck off and help the beginners grow. Then I have multiple friendly contributors in the place of one awful ego-fuck. It's always easy to make that choice. It has never backfired.
Italy. whois is fine and php.net is also fine. Only the www is messed up. 
Right, if you're super against a CoC you're well into the fact that problems not being mediated properly sound great. That is literally your choice here. Mediation for these problems, or.... not. Which is it?
Good night. :) 
Just checked - it's local. 
It's very easy to miss this post in between all of the paranoid SJW-blaming delusions of the ignorant woman-hating gamer-gate defenders in here, but I did cover these questions in a rather large post. https://www.reddit.com/r/PHP/comments/433ioy/why_is_everyone_outraged/czfkeaa
"Technical debt" is a great analogy for the concept. Even though it is generally not a good thing, sometimes it's the correct decision to take some on, just like with real debt.
&gt; Did this actually happen? Yup. &gt; If the organizer is terrified to remove a platinum sponsor that's on them. Ok let me know when you run a multi-thousand dollar conference. That shit is hard. &gt; Plus, who the fuck cares if the organizer is too big of a pussy, the victim should call the fucking cops. There's a big grey area in between "inclusive environment for attendees" and taking legal action against those who mess with it. Probably hard to tell from your armchair position. &gt; It can say that you have to be a feminist hindu pedestrian to attend Lol what. &gt; A FOSS project is not private, it is a more than public entity. If the project chooses not to accept patches from a contributor, that's fine too. A CoC is not needed to reject patches from people you don't like. The contributor can fork the project start their own. You don't understand what a CoC is at all. &gt; Now I post something on twatter "I'm sick and tired of all this CoC and feminist/lgbt bullshit that's distracting from what PHP is about." and suddenly I'm banned from future contributions. Fuck that. That is literally not at all how the PHP RFC for the proposed CoC works. Not even vaguely. You're panicking over an imagined problem that specifically is not possible with the RFC text. &gt; This is what happened to Brendan Eich at Mozilla. Lol this is not even vaguely what happened to him. People got fed up with his shit and said they didn't want to hear him talk. This had nothing to do with CoC. &gt; What is something I can get away with today that I would not be able to get away with after it's in place? It doesnt matter, you are not an internals/docs/web contributor so nothing you do now, before, during or after matters. So basically, you can wind your neck all the way in. You are not affected. Good night! :) 
Being "unpopular" is not covered by the COC. The COC also conveys very limited power, and it can only make recommendations based on the rules within the COC, which must then be presented to Internals. People seriously need to read, quote and actually discuss that the COC actually contains. Making stuff up is a transparent attempt to derail any serious discussion.
Here here. This is the entire point of the article I wrote. Moderates are assumed to be extremists based on the binary scale that folks like frozenfire insist on.
Yeah that's pretty weird.
Very excited about this! I strongly recommend that more experienced developers give this a go when they get an opportunity. The skeleton installer is brilliant, and lets you easily set up an app with a choice from three routers (FastRoute, Aura, ZF), templating engines (Twig, Plates, ZF) and dependency injection containers (Pimple, Aura, ZF). It's also dead simple to wire in your own components as a replacement for any of these. I had a crack at using this [when I wrote an article about it for SitePoint](http://www.sitepoint.com/build-nasa-photo-gallery-zend-expressive/). For me, this struck the perfect balance between a full-stack and micro framework - happy to answer any questions that anybody has! :)
Kinda off topic and bike shedding but... &gt; So after a few weeks they started writing unit tests before writing the actual code (because TDD says so). No TDD says write enough test code to make the tests fail then write enough code to make it pass. Edit: Update "enough code to make the test fail" to be "enough test code" to make it clearer.
&gt;Next, we need to remove all the example code that we will not be using. Change into the project directory and run the following commands... Cant you just create a project without all that stuff in it?
It may seem like a meaningless distinction at first, but I would recommend against "soft deletes in general" approach in favor of capturing *why* the item is no longer in circulation and modeling it as a regular state-change in the system. For example, posts may be archived, comments may be blocked-by-moderation, user-accounts may be deactivated, and products may be discontinued... But none of those are "deletes". Similarly, *bringing items back* probably also has rules that you want to capture *now*--while everybody's thinking about it and designing the feature--rather than a year from now when something goes wrong and nobody even remembers how to know if the soft-deleted data *can* be restored without causing problems. 
How long were you meditating before you starting to notice a change?
But he's not being a bully. He's a perfectly okay contributor. It's just in his free time and when not coding, he decapitates people in the name of Allah. Would you still reject?
Do you often feel like you just aren't keeping up with advances in technology and stuff? That can be a horrible feeling yes, I've been there! I'm not sure how I learnt to deal with it, my feeling on other people being better now is really that, in the nicest way 'I don't care'. It doesn't really bother me, I'm doing what I'm doing and enjoying it and just taking my time now. And you might think that makes you less likely to stay on top of things and fall behind, but somehow my mind is sharper and more able to soak stuff up, it's weird. When you don't try so hard, you get more out of it! Regarding meditation, please please try it! It's ultimately about just being comfortable with your thoughts and feelings and seeing them for all they really are, thoughts and feelings. It's about not letting those things dictate and control us on a daily basis. The overthinking is something that meditation can really help with, because you can notice it and go "Hey, that's a negative thought" and then that's it, it tends to just gently leave you once you are comfortable and acknowledge it for what it is. I highly recommend Headspace. You have to do their 30 day foundation pack (you get a 30 day free trial so perfect), then I recommend their "anxiety" pack which really helped me. If money is a concern paying for this, I will happily gift it to you because it's been transformative to me and I'd love to pass it on. Good luck!
It kind of is - just a simple wordpress :D with removed links to wordpress and [CM Answers](https://wordpress.org/plugins/cm-answers) Plugin for that "Q&amp;A" :D
If you only want to debug web pages in dev (Vagrant etc) I think it's simpler now with the "Web server debug validation" entry in the Run menu, allowing you to skip the deployment / sftp part and the debug configuration. Also browsers extensions that enable/disable the xdebug cookie are a must.
It's a bit short sighted, is it not? Even if your startup might not live for the next 20 years, it is not unusual for a startup to change direction mid course. "We wanted to sell kitty litter online, but what people actually want is pictures of dyslexic cats! Our business plan has changed, the software has to follow that!" Go through that two or three times and you'll wish that you had tests that would show you when your tiniest change brings the whole house down.
The [skeleton installer](https://zend-expressive.readthedocs.org/en/latest/getting-started/skeleton/) will always install a skeleton app. If you're not interested in this, you can follow the [standalone install instructions](https://zend-expressive.readthedocs.org/en/latest/getting-started/standalone/).
Ah, yes, makes sense (I was only looking at the signature), thanks! I'll think about it, but the DSL deriving from this sort of approach seems nice.
I think you misunderstood what the author wrote. When he said you write the test code before writing *the* actual code, he is talking about the feature code
Maybe, but it reads like he's saying he writes his tests before he writes his code instead of writing both at pretty much the same time. The entire article reads like someone who only knows of practices but never actually has implemented any properly. Not that there isn't a valid point in there is a time and place for hacking and slashing. But I just think this guy only knows hacking and slashing and is writing to try and make himself feel better about it.
Perhaps you want to look into JWT (https://jwt.io/) Essentially there is a secret key that you can share between servers to decode the payload of a token. I think you can use a Public/Private keyset as well, and have public decodable and provate decodable payloads. So you can have your LDAP log in server generate a JWT with whatever you need to identify the user. Any server that the client sends that token to that knows the secret key can decode payload, and retrieve the information.
I meant writes the entire test case, not just a single test.
How did I not know about this? I was about to port a large peace of JS code to PHP. This extension is going to save me so much time. Thank you!
Cool. I'm used to articles being a transcript of videos so I skipped it. I'll know better next time.
&gt;While real interesting complex questions seldom attract any attention. Could you give an example? Often when you see things like that closed on SO, it's because they are not code based questions, they are generic programming questions, which belong on Programmers.StackExchange, not SO. That aside, are you actually suggesting the OP's site fills that void? Because all I'm seeing is a website with little traffic (the 'most popular' article has only had 186 VIEWS - not UNIQUE VIEWS), little reason to be there (unless you're the one asking the question), and terrible grammar. I appreciate the OP is clearly not a native English speaker, but to claim its a site for the experts, and then have the line directly under that riddled with grammar issues just highlights a lot of issues. All this is also ignoring the fact that the person running it is clearly not an expert when they post articles like this: http://www.phpsupport.co/how-to-upload-audio-file-in-php/ No explanation really needed there.
just a psa, your website takes 20 seconds to load... 
one piece at a time is the proper way to go my friend.
Great job at completely ignoring the questions of concern. You don't know who the fuck I am but you do indeed know me. If I were to be outed I suppose I could no longer contribute.
No, sane people *respect* other people's opinions.
There are multiple ways to take this... 
&gt;A justice system is an application of violence. This is such deeply twisted logic that I fear for the society of which you are a part, that you find a way to make the criminals punished by any given justice system into the victims. The people and their representatives determine the laws. AND HARASSMENT IS ALREADY AGAINST THE LAW. If you don't like that, go lobby Congress. &gt;What I'm trying to convey to you is that these things are complicated. This is not complicated: the PHP Group can function like a company or it can get sued the next time someone gets harassed. It's time to get ourselves culturally into the 1970s at least.
During the hiring process for my company, the senior developer turned down every female candidate because "she didn't want competition", and the CTO indulged her knowing that was the case. No one sued, no one was punished. And I *really* hope I don't have to remind you about [Titstare](http://www.theguardian.com/commentisfree/2013/sep/09/titstare-app-women-tech-sexism) And you sociopaths may not be aware of this, but being deliberately misgendered by your peers in your code comments *is* harmful. Not that you'll give a shit. Not to mention that there are pieces [like this one](http://www.exceptionnotfound.net/an-open-letter-to-women-and-minorities-in-technology/), personal accounts like [these](https://www.quora.com/What-are-some-stories-about-discrimination-against-women-and-minorities-in-science-technology-engineering-and-mathematics), national coverage of our shortcomings [like this](https://www.washingtonpost.com/business/economy/silicon-valley-struggles-to-hack-its-diversity-problem/2015/07/16/0b0144be-2053-11e5-84d5-eb37ee8eaa61_story.html). I work for a Fortune 500 company with hundreds of employees and I have yet to see *one single black employee*. This is our industry. Welcome to it. It's not welcoming toward minorities and it's even *less* welcoming toward anyone but cis-males (another term which I'm sure will make you arbitrarily roll your eyes rather than find out why it's significant). I work with a bunch of fucking troglodytes in this field and until I can CHANGE fields I'm going to be up your ass about it every second of every day. Deal with it.
I'm in a similar situation. I've been working on a startup for the past two years. I always felt guilty about not writing tests and not relying on all the good practices I learned for the past few years. DI, containers, SOLID principles, seperation of concerns, everything. I know how to write testable code, I know what seperates crappy code from good code, but I never write tests. Sometimes my classes grow in size and I don't seperate them into logical subclasses. Sometimes I make a quick and dirty workarounds instead of fixing the cause of the issue. All of them made me feel guilty. I'm telling people how they can code better, do code reviews and tell them how they can do it better, yet sometimes I write crappy code myself. To be honest, initially I cared about the architecture and being good so much, that I refactored some functionality over and over again for the sake of having a better project. I spend like a week refactoring a feature, a year later we made a completely improved version of that feature and ditched it. Everything was cutting edge. I always told myself this: "I must prepare a very slick environment and codebase for our future developers." so I wanted to develop something quality. The problem? I did it in a 4 man startup. We had no monetization options and relied on funding. Every single day, our company wasted hundreds of dollars. Impatient clients left us (for sure they will, why not?) and joined competitors, because developing a features took months and I wasted time to make things better. Our HR and marketing team had alot more to do, because they had to convince people to stay. Like the butterly effect. A choice me as the developer takes, may affect other departments at a much bigger scale. I argued with my coworker plently of times before he left the company. (for education, he was young and had great skills) He was a best practice addict and to be honest, he never coded apart from telling me which parts sucked in my code. - "You need to do this in a single query! I can't accept two queries in this page!" - "That method has more than 10 lines. You must seperate it!" - "You need to write Coffeescript because it is awesome!" Remember the feature I worked on refactoring for a week, and ditched it after a year? I refactored it because I listened him. It was a barely used feature which generates some charts on the screen. (Like, 15 pageviews per week and that's it.) I generated the charts using 7 queries and merged them together, he insisted that we need to do it in a single query or WE WILL BE DOOMED, WE WILL NEVER SCALE PAST 10 USERS. I knew it wouldn't be a commonly used feature, I knew it would scale well, but I did a mistake and listened to him. I had to write 30 lines long query. Having SQL queries when you rely on ORM's? That is a bad practice. I had to write it in our ORM with a repository on the front. How sad, the ORM I relied on didn't support all of it, so I had to add plently of functionality to ORM myself so 30 lines long query could be written in an ORM. What for? All those pointless arguments on IM and a week of refactoring costed our company so much, to the point where our biggest client left us because apperently they can't trust a company where developing features takes so long. My mindset is a bit different nowadays. I no longer feel guilty for not relying on cutting edge technology or all the good practices on my code. I no longer imagine our Github repository and my codes when I hear the term `project`. I remember how hard our CEO tries and flies everywhere in the world with the help of medicines, I remeber how hard our marketing team tries to convince our clients to not leave, I remember how the company will die and everyone will be jobless if we won't be quick against our multi million dollar competitors. Thinking if you should pass the class in the constructor for the sake of being testable or initializing it inside the class means you can't see the big picture. You can do it anytime after the success. If we can success, personally I'll take a step back and start refactoring the most important parts, write unit/integration/functional tests, prepare enough documentation for the future developers, do anything that will increase our stability and quality. Until then, I'll promise myself to do my best (even my "best" may require a refactor soon due to specs changing, no matter how SOLID I go.), break fast, fix fast and move on. Writing tests are for stability. If your test coverage prevents you from having fuckups where you lose millions, then go for it. If your test coverage prevents you from fuckups where an user sees 404 page for 30 minutes then it is really not that important. Let your bug tracker catch it with a stacktrace and you can fix it sometime soon. To be honest, most of the successful software/startup I've ever seen had plently of technical debt. It is not because the engineers working on that code were amateur programmers. They were geniuses whom found the shortest path to success. This is how startups success and explains why startups carry a technical debt along with them. It is the natural selection rules of software oriented startups. Startups that are quick and dirty are usually the ones beings selected. Perhabs the world's most quality startup code is saved in a rusty CD, which an amazing developer whom prioritizes quality over anything wrote before his startup collapsed, lies in one of the garbage cans in San Francisco. I don't want it to be mine. Ps. ...welp, time to fix some more bugs on Bugsnag. 
I imagine that LDAP support will be your highest cardinality limiter. Find everything that has it and you'll have a small set to choose from.
Probably PHP's most lightweight framework.
I started to get Authentication after reading Kris Wallsmith slides: http://fr.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play. Here's a TL;DR: Authentication, aka "Are you who you say you are?" * **Firewalls**: * listen on `kernel.event` * have many listeners * **Authentication Listeners**: * map client data from request to token * pass token to authentication manager * update state of security context * **Authentication Managers**: * responsible of authenticating the token * call the appropriate authentication provider * handle exceptions * have many authentication providers * **Authentication Providers**: * perform authentication using client data in the token * mark the token as authenticated * attach the user to the token * *may* rely on user provider * **User Providers**: * retrieve the user (from a database, a configuration file, etc)
Well, dunno which example you need. Did you ever notice the speed at which new questions are coming under PHP tag? In half a hour your question will be out of reach. I myself can get an answer on SO *only* if I put a bounty on it. Worse yet, if you take a look at SO answers, you will see their quality is no better than this article from the poor OP. I am not saying this silly phpsupport thing is good. I am just stating that SO is scarcely better.
Good thing you're not using the whole framework, then. 
Best microframework right now IMHO.
troll bait confirmed.
`index.php` should be moved into a folder called `public_html` or `public`, and `bootstrap.php` should be outside of it. This will encourage better habits (i.e. keeping bootstrapping code and configuration outside of the document root). Err, I'm sorry, what even is a joke? :)
I'm sorry if I misconstrued your relationship with Randi. I got the impression from your interactions with her that you were friends. I'm not sure how that could possibly be considered an attack. I'm simply reiterating what she's said is her goal right now, and stating what's actually occurred recently on Twitter. I'm certainly critical of her activities, but to call that an attack perhaps makes clear what our difference in values is. I don't see criticism as a personal attack.
I really like Expressive due it's moving PSR7 abstraction as high as possible in application chain (not cos all this config options, that's just a cause of good code). Generally speaking you can use it as "micro" framework to isolate and run other application which are written using other frameworks (with internal DSL optimized for some specific task/purpose): use Zend\Diactoros\Server; use Zend\Expressive\Application; $app = new Application(); $app-&gt;any('/forum', function ($req, $res, $next) { return \Vendor\Domain\ForumApp::init(...)-&gt;http($req, $res); }); $app-&gt;any('/store', function ($req, $res, $next) { return \Vendor\Domain\StoreApp::init(...)-&gt;http($req, $res); }); //some quick methods for domain specific problems Meaning, at some moment in future you will be able to create/scaffold your application using pieces/abstractions written by different teams, the only thing which is needed - some glue, that's were Interop Container and other PHP-FIG ideas are good in.
The RFC has been announced somewhere at the end of December.
this is better than tv
[:)](https://media0.giphy.com/media/GVK5Cn6tnqnUk/200_s.gif)
[mfw this](http://www.reactionface.info/sites/default/files/imagecache/Node_Page/images/1314029520391.jpg)
I think you are mistaking the Form component for something else. It is perfectly cut for the job, the "UI part" that the form can handle is completely optional.
&gt; Thanks to /u/philsturgeon, we finally know what's really going on. What did you not know before? Did you believe that Phil, and others, are engaging in bad faith and are not being honest with you about why they wanted things? Why would you have reason to think that? &gt; Instead of doing what any sane person would do and call the police, the event host didn't want to offend the sensibilities of the sponsor. This was a multi-thousand dollar event and losing that money would be devastating to the bottom line. People not wanting to call police in response to certain types of incidents is hardly unreasonable or even uncommon. Not everything needs to be escalated to a criminal prosecution if the involved parties do not want that. &gt; They're using that one occurrence, which has absolutely nothing to do with PHP other than that was the content matter of the conference, to rationalize their political agenda and shove their CoC down our throats. There's not a conspiracy of people plotting to force a code of conduct on people. If Phil thinks that's an incident that shows why a code of conduct is necessary, then fine. What's wrong with that? &gt; This is not unlike what the U.S. government does with the NSA/TSA/encryption backdoor demands. "Oh a terrorist from a foreign country came over here and bombed or shot up something, we're going to need access to every piece of data available on all of our citizens and backdoors into every product on the market. What do you mean it has nothing to do with the event that happened? Terrorism! Think of the children!" God forbid someone try to have a justification for a proposal. What makes you think that this is the *sole possible justification* for a code of conduct that they are presenting? What makes you think they are intentionally fearmongering and not, well, simply being honest? Hanlon's razor. &gt; Here's the sad part. Phil's a good guy and a good developer. I've worked with him several times in the past without issue and none of this sort of shit every came up. Now he and his cohorts have decided to try and drive a wedge between everyone. What's wrong with trying to get controversial things done that you believe are necessary? When I made the Scalar Types proposal, it wasn't an intentional effort to "drive a wedge between everyone", yet that did happen. And wasn't the community better for it in the end? Sometimes the best ideas are the most divisive. &gt; In their crusade to cleanse the land of the intolerant, they do not realize they are the ones who are intolerant. https://en.wikipedia.org/wiki/Paradox_of_tolerance
One thing that has stuck with me is only refactoring when it makes it easier for you to deliver business value. I try and focus on one extremely granular feature at a time that is going to actually deliver value to our customers. When developing creating a simple test that explains how I want to implement that feature is mostly just to give me a bit of time to really think about how it is going to be put together. Optimization often waits until I have the app in customers hands and they can use it for a while. Often times some clunky inefficient code never gets rewritten, but that is OK as long as you've got the test written that covers it and can safely optimize it when it does become a problem.
Wait... the CoC written by the person who perpetrated that incident is what's going to stop that sort of incident from happening? Is that seriously the argument you're making? Coraline Ada was the perpretrator of "OpalGate". Coraline Ada wrote the Contributor Covenant, and is pushing it on open-source communities. That's the CoC we were initially debating - the one still listed in the RFC as the proposed CoC, though Derick is writing another one elsewhere.
All you seem to do is generate and feed off of controversy. Why do you want to turn a development community edging towards 2 decades of growth into a shit show? Is there not enough demeaning towards php and its community already? Why does this get you off? Go home mom, we've done just fine without you, seriously. With all due respect - Please just EDIT: eat delicious pies./EDIT
Please keep it civil. Edit: Thank you.
I've had some luck with [SimpleSAMLphp](https://simplesamlphp.org/). It is a bit old and difficult to configure but it supports a huge amount of options and many places use it. Other than that I really like the PHP League's OAUTH [server](http://oauth2.thephpleague.com/) and [client](http://thephpleague.com/oauth2-client/) libraries if you want new and modern stuff. For connecting to LDAP many of my apps use [ADLDAP](https://github.com/adldap/adLDAP).
If you're going to respond to all that, can you respond to this? &gt; name one thing I can do today that I can't do after the proposed CoC is in place. Here's the list, I want concrete examples: &gt; Unacceptable Behavior &gt; Examples of unacceptable behaviour by participants include: &gt; - Coercing other members to vote for a particular option on an RFC, or to change or withdraw an RFC How would one coerce another to vote one way or another? &gt; - The use of sexualized language or imagery What's an example of this? What can I say? What can't I say? &gt; - Personal attacks Way too vague, anything can be a personal attack. Are my posts on reddit personal attacks against Phil? &gt; - Trolling or insulting/derogatory comments Are my posts on reddit insulting or derogatory comments? &gt; - Public or private harassment relating to project concerns Have I publicly or privately harassed anyone? How would you prove private harassment? If I post something you find offensive on twitter, have you been harassed? What's a very specific example of something I can't publicly state. If I say you're an idiot for this stupid CoC, have I harassed you? &gt; - Publishing other's private information, such as physical or electronic addresses, without explicit permission (AKA doxing) Fair enough. I've already gotten a couple of PMs from people trying to figure out who I am. I'm sure they'd violate this clause if I told them. &gt; - Other unethical or unprofessional conduct (i.e. anything that would be unacceptable in a professional context. Think: conference, not boardroom). Like groping? What does a conference have to do with PHP other than the content matter? Now let's look at the application statement: &gt; Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviours that they deem inappropriate, threatening, offensive, or harmful. What can a project maintainer not do today that's in that list? &gt; What's wrong with trying to get controversial things done that you believe are necessary? When I made the Scalar Types proposal, it wasn't an intentional effort to "drive a wedge between everyone", yet that did happen. And wasn't the community better for it in the end? Nothing is wrong with it when it has to do with PHP. The CoC does not have anything to do with PHP.
If it is not escalated it is not criminal -- Simple as that. You are not the law, you have no further punitive legal recourse. If you take further steps of your own, you are a vigilante. This is just like the recent controversy with the female comedian who accused her ex-boyfriend of raping her, but only wanted to publicly humiliate him with the accusation instead of formally pressing charges. If you dont press charges all you do is embolden a perpetrator, draw scrutiny towards your accusations and make a mockery of our justice system.
&gt;Then why should any open source group get involved? Why should any company have a harassment policy? To protect itself against liability for the actions of its employees and give itself plausible deniability. "We don't support the actions of that employee/volunteer. We fired that employee. You can go ahead and sue that person now, we're not liable." The fact that those who aren't professionals in law feel they have the competence to comment on this subject is why this is a problem. A bunch of programmers thinking that because they know a programming language and can think like engineers, then they must also understand law and ethics.
&gt; before they think it's ready for presentation. You're implying that maybe the RFC isn't ready for presentation? What could possibly make you say that? /s 
You mean the post that this was in reply to? Not sure if this is sarcasm or...
I'll again reference the Opal incident, and these quotes from the rfc. https://github.com/opal/opal/issues/941 &gt; This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. The person in question mentions that they were a developer of the project in their twitter profile, so it was claimed he was "representing the project or community", even though it was a personal twitter account and the discussion had nothing to do with the project. &gt; Trolling or insulting/derogatory comments By opposing sexual reassignment surgery on children, the person was declared to have made a transmisogynistic attack that would make all alternative sexualities feel unwelcome to contribute to the project. This was enough for the social justice warriors to swoop in and attempt to remove him from the project. 
I agree with him 100%!
Reminds me a lot of my situation. Started as a three person start-up, and for the past 12 years I've mainly been the only IT person (programmer, sysadmin, db, etc, etc). I've noticed a lot of people seem clueless as to what it is like in a smaller bootstrapped environment, or to work on a large legacy code base. Do I cringe when I see some of the stuff I've done over the years? Yup. But, when you are constantly put into the situation of "get it done" to secure business or risk everyone losing their job, standards and practices take a backseat sometimes. I've just about stopped coming to /r/PHP and some other places because you see the way people try to degrade others for not coding a specific way or using this or that. You see so much smugness and judgement of people that aren't in an environment to write "perfect" code. I found myself getting deeply depressed over where the current code base is and where it should be, and the things all the things I need to learn or haven't learned yet. But in reality, there is some crap code that I wrote back in 2000 when i barely knew what I was doing still running in production today. It was thrown together to secure clients that enabled us to survive and now processes billions of dollars a year. If I'd taken a huge amount of time to design it out perfectly we would probably have been out of business. And it has been non-stop forward progress since then, so really not a whole lot of time to revisit everything. I'm kind of rambling, but I guess if you're work accomplishes its goal then you've done OK. Take time to do the best you can, but in the end real business is about results. No one in sales/marketing/etc cares if it is coded pretty or ugly. As long as it brings in money, that's all that matter.
Sir, you have violated the CoC, you will now be placed in ethereal prison for 7 days. Please make no code contributions during this time.
He must be rasmus's apprentice :D
Thanks for proving my point. &gt; they waffle and redirect and rationalize their way onto some other non-sensical topic. 
That's a personal attack on /u/frozenfire, you have violated the CoC and are now banned from PHP. Please enjoy your next 7 days of not contributing.
&gt; **You are not an internals member this CoC does not apply to you.** "... so shut up speaking out against it already", amirite bro? 
Thanks Dr. Phil. You're a great PHPsychologist. No one asked you to name anyone. In fact, doing so would be a violation of the CoC and you would get another 7 day ban.
&gt; Volunteers of a non-profit ARE employees and they CAN be fired. So you are wrong. Contributors are not volunteers nor employees nor contractors. Again, I ask you, please cite for me a single case where an open source project was found liable for the actions of a contributor.
Of course, that's how conversations work. :)
I too am looking for something along these lines. I want to have an oAuth provider on a subdomain account.example.com, then I can install software on other subdomains that you can login with your "example.com" oAuth account. Trouble is, I want a quick off-the-shelf PHP software to use rather than a library to build into a system I have. Rather lightweight is fine and the smallest number of fields and admin levels. Although if it's customisable for fields that could be good. No need for CMS stuff, really this software I only want to allow creating accounts and to give access as an oAuth provider. Any suggestions?
I'd call you a liar or misinformed but then I'd be in violation.
If I knew somebody was committing murders I'd report them to the police and write my own code yeah.
No CoC required!
&gt; No CoC required! The code of conduct is the conference's justification to kick you out, and means someone told to leave can't scream about not being told something was against the rules.
&gt; awful lot of hassle For the accused.
I've made similar mistakes with the best of intentions. In the end, I'm comfortable in the fact that my first attempt at coding a startup years ago was just that. My first attempt. Fifteen-ish years later my first attempt at most requirements look a lot better. Even better than 3 years ago. More SOLID and a better overall understanding of the tech stack. Right now many are preaching heavy unit tests and TDD. I'm far from the person to say you should or shouldn't. I'd like to say my judgement on the value of when to unit test is better than it was. It is, however, sometimes frustrating to work with someone who isn't on the same page when it comes to SOLID or TDD. Many, including me, have tried to fix that frustration by creating policy or 'laws of development'. YOU SHALL NOT HAVE 10 LINES PER FUNCTION. This was another mistake. Anytime I have theoretical debates online I always end up going through the same process. I do NOT know the context of the project you're working in. Nor do I know the context of the developers skill set. A web developer who creates X amount of sites a week is going to have a different skill set than that of a developer who works on just one codebase. Saying you SHOULD or SHOULDN'T is a little too brash. Our industry is still young, and we're all still learning. Yes, we've figured out that the 'better' way to program with less bugs. Some would argue specific frameworks can get you to the end requirements faster. Before we say there should be 'one way to rule them all', remember that: Developers have a vast array of skills. Not every developer is going to have the same skill set. Devs who create many small sites will most likely have a different skill set from a dev who just works on one. Developers have a vast difference in individual skill that is learned throughout the course of a career. Devs who just learned SOLID yesterday will have a different understanding from someone like Uncle Bob etc.. A company who has a budget of 1M may have to be run different than a company with a budget of 10M just out of necessity. A company with a profitable product being maintained may have different policies than one trying to figure out how to make a product. A company will always want the cheapest, feature rich, product yesterday. That said I can also pick the company I work for, and how I develop. I prefer the one long standing code base with a profitable company whose product is already determined. I enjoy more enterprise-ish development with a DDD architecture (slowly trying to convince everyone else on that architecture) with a TDD methodology these days. Early on in my career I was happy to use a class correctly, and often didn't because PHP classes sucked. 
&gt; It's just odd to see people fight so hard about something which doesn't effect them. You yourself "fight so hard about" what you think is bad behavior towards (marginalized|oppressed|victimized) group. You yourself are not in (marginalized|oppressed|victimized) group. So that behavior doesn't "effect" you. Odd indeed!
Sorry if I missed a question, I feel like I point for point answered everything. Repost the question you'd like to hear an answer to, if that's not already done on your other wall-o-text post. Not sure why being outed would stop you from contributing, unless you are harassing somebody?
What does it matter if they scream? What kind of low-life spineless organizer is running these events that would tolerate this behavior? Why is justification needed if the law is broken? I volunteer to be the bouncer at the next conference. Can you answer my other question on the other reply about some specifics or will you dodge like Phil is doing?
I will reply to your non-reply with that is literally exactly how all of this works.
Except... it wouldn't. It would provide the tools for her to be able to more systematically and surreptitiously have political opponents removed. She would be able to submit a secret complaint against her target, and the processes by which the accused would be hung out to dry would also be kept secret. To claim otherwise is to be woefully disingenuous.
Most things I post about are "Well that argument is a pile of baloney." This post was one of those. People are using FUD about the CoC to argue against a CoC. I don't like that. I've also had plenty of (marginalized|oppressed|victimized) friends, so yeah, it affects me in two different ways. Doesn't seem very odd does it. :)
A lot of people are speaking about this because it will afffect something they're passionate about. It will affect PHP, how contributions will get in (or not get in). Saying people who aren't part of internals should just shut up is not really helping you win arguments for your cause. The CoC will only apply to people in internals, but its ripples will affect the language and everyone relying on it. Isn't that obvious to you?
I've asked you multiple times to point out the questions I've apparently not answered. 
&gt; What is something I can get away with today that I would not be able to get away with after it's in place?
That too is literally not how this works. :)
Alright. In order to present you with the argument that I have I would like to first know what in your opinion the worst AND the best possible scenarios might be in case this is passed? 
This is a weird way to look at it. What does "getting away with something" have to do with anything? A CoC is put in place to let people concerned about toxic and horrendous behaviour know, that if somebody is bullying them they can email somebody and have it dealt with. It's the report button on Reddit. Just because the report button is there, does not mean everyone reports everything, or every reported action is followed up on, or that everyone is banned if the report is valid. So, right now you can get away with acting like a jerk to somebody. In the future you might have somebody say "Hey lay off a bit." Oh the horror! :)
&gt; It has literally nothing to do with you. Wrong again!
&gt; name one thing I can do today that I can't do after the proposed CoC is in place. Nothing. You can do whatever you want that doesn't violate the laws of physics. However, if you're part of the internals team, and you start posting neo-Nazi propaganda on your public Twitter feed, they can kick you out of internals (if they vote to do so). If you comment on your public Facebook calling a woman a "whore", they can kick you out of internals (if they vote to do so). If you use your known Reddit alias to post a lewd drawing of "PHP" as an acronym of "Pussy Hooker Penis", they can kick you out of internals (if they vote to do so). If you just HAVE to be an asshole, create an anonymous account and asshole away... ALL the CoC says is don't be an asshole while you represent the PHP community. 
Actually, it's not like that at all. In the broken window fallacy, there is no consideration of the negative effects, other than the positive effects should outweigh them. In the case of the CoC, there are ZERO negative effects, and ONLY potential positive effects. Though, technically, if you're a raging asshole who gets kicked out of internals for displaying that assholishness, you could see that as negative. No one else would, though.
Most people commenting do not have a 'badge' that doesn't mean they don't consider themselves to be a part of something. Fact is the reason PHP has survived is not because of it's technical merits but because of it's popularity. Attitudes like the above will only end up reversing that trend. 
No, it is intolerant to be tolerant of intolerance. 
&gt; However, if you're part of the internals team, and you start posting neo-Nazi propaganda on your public Twitter feed, they can kick you out of internals (if they vote to do so). Nope! Please read this: https://wiki.php.net/rfc/adopt-code-of-conduct &gt; Activities on a social network &gt; &gt; On social networks, the CoC is only considered to apply if the context of the conversation makes it clear that the person represents the PHP project. &gt; &gt; For example, merely having “PHP contributor” in an about or bio is not enough to be “representing the project”. However, a conversation about the PHP project itself (including RFCs, etc) is enough to justify “representation”. Please don't post FUD. :)
Are you telling me right now that if someone started posting neo-Nazi propaganda on their public Twitter feed they would not get voted out? What if I just say something like, "that Phil Sturgeon is a narrow-minded jerk". Still a candidate for getting voted out?
Even if this person is an internals member hiding behind a secondary account, unless they start harassing people they're still not going to be affected. 
I've read it dozens of times and it's too vague and arbitrary to say for sure if these examples are covered or not.
I love how you move the goal posts. Here's the progression so far: Phil: "I don't understand why people fight about something that doesn't affect them." Paul: "You fight for things that don't affect you." Phil: "They affect me indirectly." Paul: "And this affects them indirectly." Phil: "They're still not affected, unless X happens." So now we've gone from "it doesn't affect them" to "it doesn't affect them unless X happens." X, in this case, can be anything, not just your preferred imaginary thing. You want to keep going? Because you're doing *great* so far.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Is it not blindingly obvious that your muppet scenario would be crowned king? You've worked on PHP before, you have to know that this is what would happen all the time further stirring the hornet nest while swimming through a shit storm. Listen up Don Juan, your contrived women contributor example is just as imagined as anything else. Post a link to one of these toxic internals messages that is scaring people away. The burden of proof that your scenarios are real is on you.
&gt; Wait for your house to burn down before you get a smoke detector. That is not the way the law works. And I submit to you that you are not proposing a smoke detector, but instead a rickety sprinkler system installed by the lowest bidder that has a greater chance of misfiring and ruining your furniture than actually saving you from a fire. &gt; There HAVE been many complaints of sexual harassment in the open source world. It's easy to complain. It's much harder to prove. &gt; none of them have been taken to court yet, because very few precedents exist in cyber law yet. I would submit to you that it has nothing to do with "cyber law" and everything to do with the law actually not having been broken. The law isn't much interested in hurt feelings on the internet. &gt; This would be why the STEM fields are viewed as a post-apocalyptic wasteland for social progress. Is that the same "social progress" that is sweeping mass rape and sexual assault under the rug because the perpetrators are higher on the progressive stack than the victims? Is that the same "social progress" that wishes to re-introduce segregation under the guise of "safe spaces"? Is that the same "social progress" that wants to restrict the freedom of the press? I'll take our current "post-apocalyptic wasteland" of freedom and innovation over your Orwellian "social progress" any day. &gt; But go ahead, keep pushing. See what your "freedom" nets you. The highest standard of living ever? The greatest prosperity in history? A society that has all but eliminated hunger? A society so free that its government will protect even those who condemn it? A society that has eliminated racism to the point that they are now complaining about "microaggressions"? Do you have any idea how amazing this is in human history? You are living in the most wonderful age ever conceived. Do we still have problems? Of course, we are still human. We are still haunted by the instincts of our primitive past. But you would throw all of this away to live in a distopian world where every thought must be censored, lest it "trigger" one of those who are "more equal" than the rest and disturb their "safe space". Where innovation is squelched, because someone might be offended. Where ideologies of evil are enshrined and protected because of the skin color of their adherents. No, I much prefer our free society, thank you very much. 
So I assume this is similar to how symphony lets you write a framework on top of there components? This gives you the components and stitches them together in a basic way allowing you to build more on top of it?
&gt; Something is either an 'event' or a 'non event'. And this is exactly what I hate about this entire discussion. Hardly anyone on here understands what the fuck nuance is.
Why the obsession with concrete examples of wrongdoing? Why do we have to wait for something bad to happen before we instate a process for dealing with them? If a new town is built, the speed limit on the road is not set at 80mph until some people get killed.
[^(**Mouseover** or **click** to view the metric conversion for this comment)](http://fiddle.jshell.net/ConvertsToMetric/xhk4y5h5/show/light/?80%20mph%20=%20128.7%20km/h%0A "80 mph = 128.7 km/h Post feedback in /r/ToMetric")
No the speed limit is set to 35. It's well defined from the start. Here are you are enacting "laws" with no definition so no one really knows what they are. That's why the obsession with concrete examples. Just like any other RFC has concrete examples of the current way and the new way and how the changes work. I'll tell you why it is so hard for any supporter to list a concrete example, it's because no one knows. It's vague and arbitrary. The closest concrete example Phil has produced is the ability for someone to say "Hey, lay off a bit." which they can already do.
Woah, somebody responded to new information differently? Shocker. I hadn't realized that hiding behind secret accounts was a thing. Now I know. Let me reiterate my point. If you're not a contributor, this does not directly effect you. (Lots of folks have been confused about that.) If you _are_ a contributor, it's only a problem if you're bullying and harassing people, which none of us plan to do I'm sure. The only problem left is your continued paranoid assertions that the SJW's are coming to take our freedoms. Which, lol, I can't do anything about. 
Phil, I'm 100% okay with your scenario above. In fact, I agree with it. If one person is attacking another then sure, tell them to fuck off. Vote to ban or not ban. Do it. Do it now. What I don't agree with is why or how the CoC is needed for this. Maybe I'm dense, maybe I'm just an angry person, but I don't get it.
&gt; If you are a contributor, it's only a problem if you're bullying and harassing people, which none of us plan to do I'm sure. Not quite. It's only a problem if "someone reports you to the enforcement team and that team decides, for their own reasons and without any rights for you as the accused, that you have violated the COC." That is not the same thing as "bullying and harassing".
A well known contributor left due to bully tactics employed by one of the leaders of PHP, consistently harassing and attacking them personally. We nearly lost out on some amazing features due to that, and a CoC would have resolved the situation quietly and easily. I've got stories for days about harassment problems at conferences if you want any of those. I'm confused about how at the same time, a CoC is entirely pointless and not necessary, and something we should be concerned about. If these things don't happen, what's the problem with saying "We would like these things not to happen". I signed an agreement at work promising not to bring guns, knives, a sword, an axe, a fucking mace and god knows what else. Did anyone ever bring them in? No. Is it worth saying "probably don't do that?" Absolutely. 
It's funny you should use that metaphor, since it's a good one. The CoC's ambiguity is equivalent to your new town putting a law into effect saying "don't speed." But what does that mean? 35? 50? 77.3? Nobody knows until they get busted for speeding. Like some of the offenses in the CoC, certain speeds are obviously breaking the law just by common sense. You can be relatively certain doing 100 in the middle of town is speeding, just as you can be relatively certain telling someone you want to beat them to a bloody pulp is threatening. But with ambiguity for the non-common sense scenarios, violations become arbitrary and open to abuse by the regulators. And people who oppose the CoC don't want to wait until "someone gets killed speeding" for the group to come out with **concrete** rules.
&gt; No the speed limit is set to 35. It's well defined from the start. How do you know to set that as the limit, and not 40 or 30 or 25? You look at how other towns do the same thing.
You've gone so far off the rails I was conflicted about paying you any more attention at all, but you need to be told two things: 1. You're resorting to insults, and have thus joined the bottom of the barrel in this discussion. You have nothing else of value to offer and are trying to use harsh language to prove a point. Needless to say, this merely proves your ineptitude in this discussion. 2. No one is opposing OFFLINE code of conducts, a.k.a. those you encounter in environments where you physically interact with people. What we're opposing is the introduction of a fascist bill that removes the value of skill from the equation, and prioritizes balance in color / dick to tits ratio / superstitious convictions and other irrelevant attributes. What we're opposing is forcing a measure into place that's so utterly unneeded in online projects, it would literally do more harm than good just by forcing everyone to walk on eggshells.
Are you talking about ircmaxwell? Is this the bullying? http://news.php.net/php.internals/68870 If it's this or some other example, how specifically would the CoC have resolved anything? What does the CoC allow that was impossible to do without it in regards to your referenced example? "If these things" don't happen is the problem with it. There's no definition of what "these things" includes and doesn't include and it can and will be abused to settle vendettas by the muppet brigade. No one is bringing a gun or a knife to a discussion about PHP so stop trying to dilute and redirect. It's not the same thing and I don't know why you keep bringing it up. If you want to say no guns at conferences so be it. It has nothing to do with PHP. **EDIT** Are you talking about Andrea? She came back. 
Cheers. Yeah its a little hyperbolic, but it literally does not affect people directly. The indirect affects will be _maybe_ some folks are told to calm down, and a few more contributors come to the table who has until know been too scared of all the toxicity. I know a few women who have literally said exactly this. So if we lose one (probably only for a week) and gain a few, nobody is losing out. The CoC in this scenario can only be considered a net gain.
Not everyone is as comfortable telling other people to fuck off as we are. Nor should they need to be. 
&gt;A well known contributor left due to bully tactics employed by one of the leaders of PHP, consistently harassing and attacking them personally. We nearly lost out on some amazing features due to that, and a CoC would have resolved the situation quietly and easily. Can you be more specific? If it's common knowledge, then naming names and describing these "bully tactics" shouldn't be putting anyone at risk. &gt;I've got stories for days about harassment problems at conferences if you want any of those. We've been asking for them for some time. Those requests have been consistently ignored. Please use less vague language, though. We can only come to agree with you if we have enough details to judge the situation fairly. &gt;I'm confused about how at the same time, a CoC is entirely pointless and not necessary, and something we should be concerned about. We're concerned that there aren't any real problems to use a CoC for, but there are certainly a lot of imagined problems that people will have their lives ruined over. &gt;Is it worth saying "probably don't do that?" Absolutely. I'd actually disagree. I don't think anyone should be bringing weapons to work, but unless there's a case where someone seems to have misunderstood that basic bit of common sense, I don't think it needs to be stated. That's right up there with "Please don't shit on the bathroom floor" or "Please don't watch porn at work".
Why, if everyone is equal? What do his hobbies have to do with anything? Would you be okay with being rejected in a project for eating ham or drinking beer? Would you object? Would you like a CoC to protect you in that case? To them, it's perfectly normal to kill someone just as it is for you to eat ham. But let's take another example. Let's say our ISIS guy is an ISIS *sympathizer*, i.e. you don't know if he ever killed anyone. Let's say all you know is that he supports them, and nothing else. Would you then still reject him? To draw a parallel - for christians, it's perfectly normal to see their fairy tale headmasters rape little boys, and they do little to nothing about it. It's a matter of perspective, but I'd argue such acts are more evil than murdering overly curious tourists and reporters, and yet, they continue to send PRs to your projects regularly, unchallenged. Where do you draw the line between the desirability of people's infatuations? If not you, who does? The committee? Would you make sure the committee is made up of a balanced number of people of ALL religions, convictions, stances, colors, creeds, etc, to ensure a fair "trial"? Or would it just be easier to say "If you'll be a dick to someone, we'll kick you out after we notice. Otherwise, have at it."?
Gah, Phil. You completely miss (on purpose?) the point. Fuck off = "Lay off" = "Whatever other term you want to use." Answer the part about how the CoC is needed in this case. You've got serious freaking skills for avoiding the question. How does the CoC magically enable any action that wasn't possible prior to the CoC in this straw man scenario?
&gt;Even if the police do something, it may not stop them attending conferences you're at. If they're an actual threat to you, get a restraining order. But no, you likely just want to ruin lives over momentary misconduct. Edit: Since /u/padraicb is [threatening to use a misrepresentation of this to smear me](https://www.reddit.com/r/PHP/comments/4390up/the_truth_comes_out_about_the_motivation_behind/czgr4st), allow me to clarify: No evidence has been presented as to what happened, that's being referred to as "groping". I've heard "groping" used before to mis-characterize innocent unwanted physical contact, whereas to most people it certainly brings to mind violent sexual touching. I think there's a real good chance that this "groping" was something as innocent as an unwanted hug. *That* would be a momentary misconduct. If it was something more than that, then it would be a matter for the police, not for a code of conduct.
I think you mistake me. I resort to insults re: your first point because of your logic re: your second point. If you really think that a hostile work environment can only be created in the physical space, then we have a fundamental difference in core opinion. That doesn't make you a person with whom to hold discussion and make compromise; it makes you an enemy to be outvoted and defeated. I recognize the basic and primal competitive instincts at the root of some philosophy; incontinence proves a much greater measure of ineptitude, and many in your camp hold logic that crumbles into double standards under the microscope. Edit: Also, I use insults because I sincerely hoped that one of you would have the gall to complain about it and dig yourself deeper into double standard. :)
I've told you repeatedly I'm not going to throw anyone under the bus and name victims. &gt; We've been asking for them for some time. Those requests have been consistently ignored Other than the two examples I've given you already? A conference in South Africa, where the host called out a group of women. Pointing to them, asking if they were single, asking if any of the panel sat on stage - myself included - were interested in dating any of them? This awkward thing went on for a few minutes, almost like it was in slow motion as I couldn't believe what was happening. It was gross. Myself and Rasmus shouted **stop** eventually, but if a CoC had been in place the host would not have said that crap. Too late. They won't be coming back. I dunno how much time I have to tell you stories of not-ok-shit. I did put together a [Pocket Guide to Sexism in Tech](https://philsturgeon.uk/2014/05/31/the-pocket-guide-to-sexism-in-tech/) for these reasons though. &gt; I don't think anyone should be bringing weapons to work, but unless there's a case where someone seems to have misunderstood that basic bit of common sense, I don't think it needs to be stated. Do not put your dog in the microwave. These peanuts contain peanuts. This coffee may be hot. Warning, steep hill. These things all seem absolutely ludicrous until you realize somebody has done that, and probably sued or been an ass about it. And I've absolutely seen signs in the bathroom saying "Please treat this bathroom as you would your own", probably after somebody destroyed it. Sometimes outlining things that are obvious to 99% of people but are missed by that one jerk is just fine. The 99% say "WTF this is dumb" but then when you spot the 1% happening you'll say "Oooooh right yeah." I used to think CoC's were pointless. I laughed a few times. I've said "Why can't it just be 'Dont Be A Dick'?" Talking to you is like talking to me a few years ago. Then I saw a shitload of things, and heard stories from plenty of my other speaker and contributor friends. Now I've changed my mind. And no, I'm not going to name names and give you links. If that makes you think I'm a liar, so be it. 
With an actual speed limit I can say, if ($speed &gt; 35) { issueCitation(); } The CoC doesn't have that capability and it's more like: if ($muppetWithAgendaAttitude === $pissedOff) { waveArbitraryMagicWand(); }
Murder is not a hobby. Drinking beer is not the same as beheading somebody. &gt; Or would it just be easier to say "If you'll be a dick to someone, we'll kick you out after we notice. Otherwise, have at it."? If somebody reports you for harassing them, a team will look into it, give you a warning and if you keep going then you'll be kicked out. If the ISIS member is threatening to behead you, then you could report them to the mediation team after you've reported them to the police who will hopefully let the FBI know, or the CIA, it depends. If somebody is drinking eating ham then that's totally ok.
I've told you over and over I'm not going to name names.
Fine, so respond to this then. You can't respond because there is nothing the CoC would do differently than if it didn't exist. &gt; If it's this or some other example, how specifically would the CoC have resolved anything? What does the CoC allow that was impossible to do without it in regards to your referenced example? Handle the fucking conference problems within the conference. Why is this so difficult? I'm done for now Phil, you have won the endurance challenge of not actually answering a single fucking thing today. Bravo.
Anything that anyone reports go to mediation. If people report you, they'll get an email. Wether or not that goes any further depends on the context doesn't it. Let's be honest, you probably don't need to give your feedback for an RFC in quantity of dicks they should choke on. You could probably give constructive feedback instead.
I don't concede a thing Paul. No. I said: If, in your paranoid imagined world, things go poorly and you're falsely accused, the worst that can possibly happen is a 7 days ban, if you continue to do whatever it is the accuser has told you, and the mediation team decide to escalate. That will only happen until you are rightfully unbanned after a majority vote. So, your worst case scenario is unlikely. Very unlikely. It assumes the mediation teams are idiots and/or out to get you. We'll have to disagree on the likelihood of this, as you're assuming the worst and I'm not. 
https://www.reddit.com/r/PHP/comments/4390up/the_truth_comes_out_about_the_motivation_behind/czgmy59
 $response-&gt;getBody()-&gt;write('You visited ' . $path); return $next($request, $response-&gt;withHeader('X-Path', $path)); Isn't it supposed to be immutable? Writing 'You visited $path' to the body shouldn't, according to PSR7, modify the content of the current $response object. I know the implementation of the interface may actually return a reference to $body, which is a StreamInterface, and not a clone of it allowing it to be modified. But I think that goes against what was the intention of the immutability for PSR7.
&gt; If somebody is drinking eating ham then that's totally ok. Nope. It's a capital offense in extremist muslim environments. Who's right? You because you're raised that way? Or they because they're raised that way? But I can see you're not willing to participate fully in this hypothesis and are dodging the sensitive parts that might relate to this CoC stuff in shape/form. I'll drop it.
it is a good point. hopefully your tests will catch unintended consequences of a change. oftentimes a large number of tests will become invalid when making sweeping changes but at least you will be aware of the things that are being affected.
Ha, if the mediation team consists of the supporters of this RFC, that seems like a fair assumption.
Common sense doesn't require ratification. The only thing the CoC brings to the table is ambiguity to be misused at a later date.
Damn, what happened to you at this conference? Out the mother fucker so that he knows that we know what he did. No one deserves to go through whatever happened to you and I sincerely apologize that you had to experience that, but the CoC does not remotely solve what happened either. I'd also recommend you stop attending conferences where the organizer doesn't give a damn about what happens to you. Every mention of a conference is a distraction from what the CoC solves.
Momentary misconduct? I'm at a loss. How does anyone respond to having a jackass groping a woman put down to "momentary misconduct"? How? It's entirely unacceptable behaviour and I'd happily fire the halfwit if I were his employer. An individual is responsible for their own behaviour. You want to insinuate that a possible victim is "ruining lives" by reporting this? Did they also force alcohol down this guy's throat, and mindwash him into assaulting someone? No. They did no such thing. He went and did that all himself, using his own judgement, and has only himself to blame.
&gt; Listen up Don Juan, your contrived women contributor example is just as imagined as anything else. I wasn't going to reply to any of this, but as a woman who has been working with PHP for 16 years now, having a solid Code of Conduct is something that would encourage me to become a contributor. 
No, no. You are completely correct! Dan Lugg's joke should have been promoting good practices (since all the other php frameworks actually don't) instead of containing such newbie mistakes.
&gt;A conference in South Africa, where the host called out a group of women. Pointing to them, asking if they were single, asking if any of the panel sat on stage - myself included - were interested in dating any of them? This awkward thing went on for a few minutes, almost like it was in slow motion as I couldn't believe what was happening. It was gross. Sounds like a cultural difference best handled by enacting a code of conduct at the conference, given historical issues. That doesn't justify a code of conduct for everyone else, though. Your "Pocket Guide to Sexism in Tech" seems to be little more than whining about injustices you perceive in the world, and re-iteration of radical feminist talking points. It doesn't address anything worthwhile in the PHP community (I'm sorry, but bitching about $babe is retarded), and relies on people to already agree with you, for them to accept anything there. Care to offer any concrete examples? Hell, even just a single good one would be a good place to start from. &gt;These things all seem absolutely ludicrous until you realize somebody has done that, and probably sued or been an ass about it. And people around the world laugh at America for it. You have to be a complete moron to need to be warned away from doing these things. I guess I just think better of my colleagues than you. &gt;And no, I'm not going to name names and give you links. If that makes you think I'm a liar, so be it. I don't think you're a liar. I just think you're fighting on ideological grounds, instead of using evidence and reason.
That's not what happened with Brendan. [He gave $1000 supporting Prop 8 in California.](http://projects.latimes.com/prop8/donation/8930/) Political justice warriors decided his personal life was more important than his technical achievements and they would do whatever they could to destroy him. Even after he posted about [inclusiveness at mozilla](https://brendaneich.com/2014/03/inclusiveness-at-mozilla/). Maybe he deserved it, maybe he didn't. The problem with vague documents like the CoC is that can be used for any purpose that the majority wishes to pursue. You get a few too many social justice warriors grasping at straws and you end up doing irreversible damage to a project. If an internals contributor is in the exact same position as Brendan, you can be sure it would go to mediation and depending on how many sane folks were on the mediation panel he'd be gone. This shit storm is already doing irreversible damage more than likely.
Anyone who tries to speak with an inside voice is drowned out. God help you if you want to voice an opinion and not be extreme about it.
Do you know of any good tutorials to get up an running, other than their own docs?
Jeez. I've completely lost track of this entire convo. People saying the same things over and over, multiple threads of the same users having arguments. It's like we've got simultaneous proof that we do/don't need a CoC. * We do, because we need to reign in all of these disrespectful idiots * We don't, because clearly we are all too irrational to properly deploy it
It's a shame nobody bothered to look up groping in a dictionary. It is, in no way, a vague term. A little assistance from The Google: "fondle (someone) for sexual pleasure roughly or clumsily, or without the person's consent." 
You sir, can have my upvote.
Nothing is stopping me, per se. It's more so about knowing that there are procedures in place. I'd hesitate to call it *just* a comfort factor. It's more a requirement. I would never work for a company that did not have something similar in place, so why should I lower my standards for something I am potentially doing in my free time? As for bad experiences, yes. The ones that spring immediately to mind: a stalker of ten years, being denied a project ticket simply because of my gender, being told I was a "sexual harassment lawsuit waiting to happen" by a superior, and having all conversation about an open source project turn into a discussion about how "fuckable" I was instead of my contribution. A Code of Conduct would have helped in all but one of those. (The ten year stalker is for law enforcement.)
Logic has no place in politics.
Yes. The question is whether someone was actually *groped*, or if it's being used like "harassed" is in radical feminist newspeak (to disagree). I'm inclined to think that nobody was groped. But I have no way to prove that, just as you have no way to prove they were, unless you have some information that I don't. If you do, please share.
The thing I'm building does this correctly... :\
It never ceases to amaze. When I was growing up the rule was "never give away your personal information online. don't even say your real name!" Now everyone has multiple linked social media accounts with real names, locations, places of employment, up-to-the-minute activity logs, what their dog ate for breakfast... What good did we really expect from this new paradigm?
Why not? If the things you have to say stand on their own merit, and you believe that they're right, why not post with your main account? If the worst that can happen to you is that other internals think you shouldn't contribute anymore, then, do you really think you want to keep contributing while hiding your thoughts? 
Because we live in an era of entitled politically correct social justice warriors who can do no wrong. If you don't agree with them they will take it upon themselves to destroy you. If I wanted to post as myself, I'd do so on the PHP internals mailing list. (And I have) I can speak my mind here without fear of repercussion. If I get a little heated under the mask of anonymity I apologize. I've seen ONE single example of where the CoC would be used targeting Gary and his joke about renaming Doctrine to shitty. Talk about knee-jerk reaction overkill. Someone could simply email Gary and say knock it off and he'd take it to heart. This discussion alone is already discouraging me from being involved with PHP. Maybe that's exactly what the supporters want. Weed out anyone who doesn't think like them.
You used the phrase "momentary misconduct" to describe the groping of a woman. Groping is clearly defined in any English dictionary you choose. Even were the event never to have occurred, your word association would still remain on record - it's not likely to leave my memory any time soon. Should I quote you verbatim as a reminder, or do you want to find a few other unrelated points to dilute this irksome thread with?
Mediation has nothing to do with you preaching "do as I say not as I do". 
Oh man, that other reply. Let me juxtapose something here... &gt; You've just manipulated PHP into being worse off because of your own agenda. ... &gt; having all conversation about an open source project turn into a discussion about how "fuckable" I was instead of my contribution. ... &gt; your agenda ... &gt; all conversation turn into how "fuckable" I was ... &gt; agenda ... &gt; how "fuckable" I was Oh yes, the clear agenda of *not being harassed by men just for being a woman*. I'm sorry you had to go through that, /u/Iversia. I hope that the actual PHP project community can come together to create a CoC that protects everybody from harassment in their interactions with the project, no matter what their viewpoint is.
&gt; If they're an actual threat to you, get a restraining order. But no, you likely just want to ruin lives over momentary misconduct. Verbatim. Wordplay all you want. You've so far attempted to re-define "groping" as a political feminist phrase despite being in a dictionary. It's a common English word. You attempted to drag in that it might not have happened. You yourself referred to "misconduct" in reference to something happening. You're now attempting the same, and throwing around a few other irrelevant odds and ends to distract. &gt;It would be a serious misconduct if they actually groped a woman's breast or touched them in clearly sexual ways. That's all you really had to say at the start, you know. 
You dodged my question. All I asked for was an honest answer to my question. 
I didn't attempt to redefine anything. I said that it's very likely that the accusation of "groping" is a misrepresentation of what happened, if anything even happened at all. It's probably being referred to as "groping" in the same way that Gregory Alan Elliott was referred to by similar sorts of people as a "pedophile". Purely to defame him, because being accused is all that most people need to condemn someone.
Not really, it took me a while to get it talking to our Shibboleth server and even then it stopped being able to logout over SAML2 after an update to the Shibboleth IdP. Really some times I'm tempted to use an Apache mod to handle SSO instead of doing it in PHP.
Well, have you *tried* it? Apparently not, because yes, this will work, if you allow them to enter HTML to style their content, then display their content back to them as HTML. However, allowing users to enter arbitrary HTML into a field that gets sent back to them is dangerous. Go read about [XSS](https://www.owasp.org/index.php/Cross-site_Scripting_\(XSS\)). You can mitigate this a few ways, such as using a markup processor that disallows HTML and/or by using a whitelist-based HTML parser, like [HTML Purifier](http://htmlpurifier.org/). If you'd rather not have users edit HTML directly, consider a WYSIWYG editor combined with HTML Purifier.
JWTs + Secure Cookies for storage if possible.
How exactly do I use raw queries with laravel 5's eloquent/query builder without using facades?
Agree. 
I know it's not mentioned, but since you say company there's at least a chance you're working on a Windows domain. If that's the case, authenticate against AD.
I'm afraid I lost my protection rights when I placed a "sexist" fairy on the front-page :))
This can actually be de-coupled via visitor pattern, but it is not something simple to do, and leads to a lot of BC concerns.
Agreed.
Use plain notepad. Code hints are for people who can't remember function names
That's what they all say until they start working on a mature project with 100+ entities
Not sure why you need OAuth for this. Although OAuth has "authentication" as part of it's spec, the purpose of OAuth is give some application the permission to access some other application, and it's resources, on your behalf. Usually server to server. In case you have an app, you get the app to send you the username+password (over https) on which you perform authentication on the server and if authentication succeeds you return some token. If you want you can make it OAuth-esque by returning an access token and a refresh token, meaning that the access token might have a limited life span (e.g. 1 hour or whatever) and when the app makes a call which returns auth error you'd use the refresh token to obtain a new token. 
sounds good enough. do you have an example on how to do it?
&gt; Cars are for people without legs 
Groping is a specific term which means a specific thing. Your continual insistence on redefining the term doesn't magically make is so. Again, check a dictionary. Seriously, do you have any idea whatsoever how utterly distasteful your attempts to do this are? If you want to take this road, find a reference, any reference, to support your claim that "groping" is being mis-defined somewhere. Please. Anything. At. All. 
True. I walk everywhere. You know what girls say when I go by? "Damn he got some fit legs!"
&gt; a new problem where they need to use their brains instead of just copy-paste code. We do something similar and we're very happy with the results.
It could be lazy legacy code? Or the dev wasn't sure what the full requirements were for the function so stuck it in.
Then it's time for a rewrite from scratch amirite
It's always leg day for Jimmy_Hammergrip
If you want to disable an if statement and be able to re-enable it, the easiest thing to do is change if(something) to if(false)//something). Otherwise this is the same thing as #if 0 C style languages.
Quick and dirty debugging. I also do that: if(0). I remove it after debugging though. Maybe your person forgot to remove it afterwards. It could also be that he wanted to disable a code section for later review. That also happens in our projects sometimes. Also: when I want to enforce entering a block I write: if(true || [original statement]) or even more lazy: if(1 || [ ... ])
No tests/? 0 / 10
You're seeing that in a code review? Yeah no, that's not getting pushed to production. Least not if I were the one reviewing it.
There is also [Thruway](https://github.com/voryx/Thruway) which builds on Ratchet.
I recently read a question about what to do with legacy code and decided to write a blogpost about my own experience with a bit of legacy code, which I just recently had. Feel free to comment if I'm not making sense or not explaining things correctly. English isn't my first language, so that makes it a bit more difficult to write a consistent story.
It's been so disappointing to see all the misinformation and scaremongering you've spread during this debate.
My life right now
&gt;[**Mechanical keyboard.exe [0:19]**](http://youtu.be/jO5IaAKTKsQ) &gt; [*^Andrewjcm*](https://www.youtube.com/channel/UCVy9DB9XJ6_yPUZ2MOy6PHA) ^in ^Comedy &gt;*^386,833 ^views ^since ^Nov ^2014* [^bot ^info](http://www.reddit.com/r/youtubefactsbot/wiki/index)
Sorry, I have worked with a lot of legacy codebases and (except "step 1") this article would be completely useless. What this article seems to advocate instead is: "just slap Symfony stuff on it". As if frameworks are made out of magic fairy dust that you can sprinkle on to make the boo-boo to go away. In reality modernization of legacy project is a long, complicated and slow process, where each of your iterations has to be extensively tested (which for the majority of the undertaking is done "by hand", because you cannot test include-oriented-programming project). 
&gt; Guys, In hindsight I apologize for posting this. Thank you for this, even though I'm sure it's never going to be seen by most. &gt; at best at least the supporters will understand that there are a lot of people who are opposed to this even if they don't understand why That's because a lot of the discussion is emotional, not rational. We software devs are well-practiced at tackling rational problems, but we're often ill-prepared for arguments where there's ambiguity due to things that can't be expressed in a rational manner. It's not like we can wrap every conversation we have in a try/catch block. [This post by frozenfire](https://www.reddit.com/r/PHP/comments/433ioy/why_is_everyone_outraged/czfv1h6) drove a point home to me that had only been previously made by third party anecdote. He got **bullied** because he expressed an opinion that was offensive to some. The bullies contacted his coworkers and employer, and may (let's face it, probably *did*) have had a part in reducing his participation in the PHP project. Something I think the anti-CoC group doesn't always understand is that **both camps have a common enemy in online bullying and harassment**. That shit above? Not cool. People on both sides can be blind to the extremist bullies that they're friends with, or that they sympathize with. In another post that I frankly can't be assed to go look up, frozenfire also defended GamerGate supporters and asserted that their [long, long, looooong history of harassment](http://rationalwiki.org/wiki/Timeline_of_Gamergate) wasn't a thing. Yeah, I know, biased source, whatever. Meanwhile, there's a bunch on the pro-CoC side that don't think that pure idiocy like Opalgate was a significant problem. They both can't be more wrong. The CoC isn't going to stop bullying. It isn't going to stop the over-the-top harassment pointed out above. It's not designed to. The type of person that is unhinged enough to repeatedly harass someone online, the type of person that would get *so angry* at something that somebody wrote that they go *tattle* to an authority figure that they think will get their enemy in trouble... that type of person is going to be entirely unphased by a rulebook on their behavior. No, the CoC is trying to tackle the "small" problems. [Like those expressed elsewhere in the thread](https://www.reddit.com/r/PHP/comments/4390up/the_truth_comes_out_about_the_motivation_behind/czgpo3o). That shit right there? Also not cool. But that type of shit is something that *can* be moderated. That's the goal. It's about trying to make sure that people aren't harassed, on a small scale. One more thing. I do not believe that *most* of the anti-CoC people here -- the ones that are *active contributors* to /r/PHP, that is -- are acting in bad faith. Sometimes I can't get your arguments, but often enough the arguments are clear, and I believe that you believe you are trying to make a positive contribution. I *urge* you to understand that the pro-CoC people are also trying to act in good faith, and that *we* are also trying to make a positive contribution. **Online harassment is the real enemy**. I'm not saying we can fix online harassment, but I am saying that a CoC can help *in some ways*, and that we *can* build a CoC that can't itself be used as a vehicle for harassment. If you're anti-CoC, please don't continue the endless circles of arguments by trying to attack the pro-CoC points I've made here. That's not what I'm looking for by bothering to reply to a dead thread. But please, if you *are* anti-CoC, I hope you come back to the table and help to improve the process instead of blocking it. e: -1? I suppose that's what I deserve for thinking I could extend and olive branch and actually succeed. I've learned my lesson and will not be trying again. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
It is going to be more realistic to simply have your application(s) speak to LDAP directly than to worry about adding the complexity of SSO... especially SAML.
I'm legitimately sorry to hear that kind of stuff has happened to you. Given a real, concrete example of someone who refuses to contribute WITHOUT a CoC, at least I know this isn't just a few people with a political axe to grind hypothesizing a mysterious cloud of developers who *want* to be involved but won't (or can't) without a CoC in place. I guess this is a situation of "it's either your or mine," so if a CoC is adopted, I certainly hope you find your way clear to follow through and replace any of the contributors who will have to remove themselves from the project.
They are really loud if you work in an open area.
This is what we use it for, in cases where a code path must be temporarily disabled. Same with `true`.
I know I sound harsh. It's just that I have worked on several legacy codebases and every time I (or more precisely - we) attempted to modernize those, it was a complete and utter nightmare. And those steps would helped at all. Even the "write better code" one, because just *not that simple". When you have a large legacy code base, you also tend to have one or two people in the team who have worked on it for 5+ years (and have learned nothing new since then). One of the major obstacles is not the shitty code that has been written, but the shitty developers who are still writing it.
Try /r/emacs, the community is friendly and they have some amazing resources for learn. 
Dunno .. I think it would be better to focus on the post as your own experience instead of making it a proper how-to.
There's a dedicated frying pan in hell for people who do that...
Another weird phpStorm thing: Every time I toggle comments with a hot key and follow it with an arrow key, phpStorm litters the document with weird UTF8 chars. I have to comment -&gt; escape -&gt; arrow key This happens on several of my computers and versions, but funnily enough not on my colleagues' computers.
&gt; Most often this is caused by a lack of planning, which IMO separates the shitty developers from the good ones. "be good" is such a shitty way to respond to that post. It's lazy as all get out. For anyone reading this, the last thing I would do is treat this person as if they know what they're talking about. Anyone who's response is basically "don't be bad" can't be someone you want to try and learn from.
Apart from "commenting" out code, I've seen `if (false)` used to have a prefix goto target that is not executed by default. So something like this: // code ... if (false) { label: // code ... } // code ... However I've never seen this in PHP, and hope very much not to see it :)
I think there's two trains of discussion in this thread and the overlap is confusing. Some are answering *why* you'd *ever* use "if (false)". The answer to that is to temporarily disable something from running or to change the control flow. But in your code example, the only result of re-enabling the if would be to echo "do nothing". This means that if statement is wholly pointless. There's no reason for it to be there at all. Maybe it was used for some debugging at one point, but in it's current form it couldn't possibly be useful or do anything.
No they remove the whole if structure, thn un-indent the contained code, so it runs regardless. Or possibly they just change the conditions of the if. if (false) becomes if ($customer['has_access_to_new_thing']) { // New thing runs } else { // Show them the new things purchase link or something }
Everything in the "if" conditions (the round brackets) gets boiled down to true or false in the end. $hasThing = true; $hasAnotherThing = false; $overrideActivated = true; if ($hasThing &amp;&amp; $hasAnotherThing || $overrideActivated) { is just true &amp;&amp; false || true thus false || true OR means either can be true so true So the code will run. Check out http://www.webopedia.com/TERM/B/Boolean_operator.html (or more visual venn diagrams in google images can help to understand whats going on) When debugging you can just try `var_dump($hasThing &amp;&amp; $hasAnotherThing, $overrideActivated)` to see what's going on. Hope that helps.
Try https://codility.com/ Test ability to solve problems, not ability to use flavour of the month scaffolding.
&gt;lectured professionals &gt;call people "asshats" I could lecture you on how you are narrow-minded, juvenile, ignorant charlatan.
Facades always map to a regular class, you can find a list of these mapping in the documentation. Once you've found the underlying class just inject it or resolve it from the container in whatever way you want.
Your post was actually good until you crossed it all out and replaced it with mindless waffle. Do not delete your post.
i think, php is not the language that is being used for web socket applications. java and javascript (nodejs) have been the go-to languages for web sockets and other real time applications. there are more web socket packages out there for those languages and they have been using it actively. i don't mean to diss php, because it is capable of doing real time with sockets, but other languages are used to this usage\^^
Isn't the CoC a part of php? ^^ 
The talk from Laracon (I think this is the one you're referring to): https://www.youtube.com/watch?v=Z6x9wmlFz_c
Interesting approach IMHO. Unfortunately there seems to be no solution "ready for production".
I told my friends a and they told me that you are a bit dizzy. Can't tell who to believe anymore!
&gt; Its controllers should adopt psr7 Wouldn't work without a major rework of `HttpKernel` and a huge BC break. It depends on the request and response being mutable so it can be passed through and modified in events.
There are many important things that you should be doing as a developer, but the most important of these things is shipping. Modern development tools and practices help with this, but one thing to always keep in mind is, no matter how pretty your code is, no matter how well tested and perfectly refactored, if all this is done at the expense of shipping the product, you are not doing your job. I have spent a large part of my career working with legacy code, I often inherit monstrous misbehaving code bases, passing around globals and 10,000 line singletons (Really). They were slow, they were ugly and they were a pain in the arse to work with. I have also joined teams with design paralysis, where a project has been stuck in development hell for the last three years, the code base is immaculate and been through rounds of refactoring to keep it modern and up to date, and the product still has not shipped. I have always found it quicker to fix a bad code base than to cram the years of features that were never written because the time was spent refactoring a well written one. Write tests, optimize your code, refactor as you need to, but do all of these things to **aid** shipping, not at the **expense** of shipping. 
Why does a framework integrate new code with plugins in 2016, rather than simply letting the developer pull in *any* PSR4 php package via composer? If I need UUID functionality in say, Laravel or Symfony, I don't build something tightly coupled to those frameworks, I simply create a standalone package and then use it where I need it. It doesn't have to go"through" the framework to be used.
Just wanted to comment that you may want to reword "Doctrine and Propel both fall under the Symfony umbrella", they're package together often but are very much different projects. 
So many butthurt dudes losing their minds over this.
My mercenary heart demands that I mention my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) as a step-by-step guide to getting yourself out of a legacy mess. (You don't need to take my word for it; the reviews have been excellent, and are linked at the end of the book description.)
&gt; The CoC isn't going to stop bullying. It isn't going to stop the over-the-top harassment pointed out above. It's not designed to. The type of person that is unhinged enough to repeatedly harass someone online, the type of person that would get so angry at something that somebody wrote that they go tattle to an authority figure that they think will get their enemy in trouble... that type of person is going to be entirely unphased by a rulebook on their behavior. I hear you. One of my main premises has been, and remains, that Codes of Conduct in general, and Social Justice derived codes like the Contributor Covenant in specific, enable and legitimate a particular set of bullies; that is, those who serve Social Justice. They are to be opposed for that reason (among others). The improvement is to *delete Social Justice derived codes* out of hand. If you must have a code of conduct, it should say *only* "No bullying or harassment." That's it: no lists of identities, etc., are needed.
I just read this review http://php-and-symfony.matthiasnoback.nl/2014/04/book-review-modernizing-legacy-applications-in-php/ and it reminded me exactly of the things I ran into. If I didn't have to buy enough books as it is for college, I might've purchased it.
You just informed me of the elasticity of PSR4 standardized packages and the importance of adhering to that standard. P.S. Thanks. 
The rumours of my non-existence have been greatly exaggerated. :-)
I can't get autoloading to work... :( 
How do you migrate data with this approach ? It's not always about the structure in the real world
You can always use both approaches in your application, when declarative modification of schema work in 95% of cases (especially when you developing your project), 5% can be covered by classic migrations where you rename columns or move data around.
So get MX Red with dampeners. It would be totally quiet.
Alas, this no longer works in PHP 7 or HHVM: https://3v4l.org/MVOiQ
Read ModernPHP and have good problem solving skills. More often than not they're looking to see how you solve problems, not necessarily if the code or pseudo code you write on the board is 100% functional and bug free. &gt; Responsive Design with and without aid of Responsive Frameworks Why is this a requirement for a backend dev? There is a _lot_ of ever changing techniques that make this overwhelming to keep up on, especially if it comprises a small percent of your workload, if at all.
&gt; Its controllers should adopt psr7 Remind me why the controllers should even be aware of the request or response objects?
"Studying" for an interview makes no sense whatsoever. You're either qualified for the position or you aren't. If you are, you'll be hired regardless of what you do or don't study. If you aren't, you'll be rejected regardless of what you do or don't study. Best case scenario if you aren't qualified is you study enough to trick a sub-par interviewer into believing you're qualified, and then you suck at your job and waste everyone's time and money. This isn't an exam; it's real life. If you want to advance your knowledge and experience, I commend you, and you should absolutely do that. **Don't** think you can suddenly become qualified for a position you aren't already qualified for just by hitting the books for a week or two. That shows a genuine disrespect for the profession. Just be comfortable in the knowledge that any moderately experienced interviewer knows the difference between "this person's PHP is rusty" vs. "this person needs a few more years of experience."
Yes, good explanation. @phpdevster You might not have looked into the plugins itself. If you do, you will quickly find out why they exist. Usually the behaviors on top of models allow to ad-hoc change the way they work. In this particular case of hashids, this behavior makes the entities transform their primary key into a hashid - fully automatically. This must be provided as plugin, as otherwise there is no way to get this functionality going standalone. But as said before, of course you can integrate any PSR0/4 packages just with any other composer application and use anything as freely as you want. Plugins are most of the time glue code to make it even more convenient to use certain addons.
I disagree. Doing an interview on a whiteboard vs doing real work is a huge difference. When doing an interview like this, you need to brush up a bit, whether you like it or not. It's the interviewers' fault, they've made this a requirement. How well do you know regex? Can you write out a few rules on a piece of paper, or are you more comfortable in front of a screen, typing out a few rules and testing them out first? What about certain PHP functions? Do you know exactly how they're written, what about their parameters? How often do you reach for the documentation? PHP or anything else for that matter? In a perfect world, there would be no need for interview preparations, but unfortunately that's the way it is.
Should they not? I've always done them that way. The idea is that the controller reads the request, does it's business logic, and writes to the response. What's wrong with that?
@SaltTM Not in the core itself. I have not tried this but you could check this plugin to use Twig with CakePHP 3.0 https://github.com/WyriHaximus/TwigView
Yeah, if you have enough automation in place to manage load balancers switching between application versions, this can be a better approach. But it's a lot more moving parts (read: more to go wrong) and has both a steep learning curve and large set-up investment. You're basically just shifting complexity from developers to devops/sysadmins. That may or may not be a good thing depending on your situation.
I don't think it's been mentioned plainly, but in that code, the else{} statement will always run, because if() is false.
Holy shit. It's like you are describing the position I had 6 months ago. I was in that EXACT same spot so all I can say is: Please make sure that you are paid well and that you are good taken care of. These environments are usually toxic and tend to suck the life out of you until you hate what you do. My old boss used to promise features left and right and lump everything into one system without understanding a thing about data-coupling and management. I had to fight an uphill battle for months until I decided one day that it is not worth it and quit. The thing that most bosses in that situation don't seem to understand is that data-integrity and security are the most crucial parts of an application's architecture. &gt; We're supposed to be unifying data from many different client systems and presenting it back to them and offering good uses for it, but thus far a lot our code just sucks in data, puts it there, and does nothing with it, without even normalizing it first. It's always an illogical uphill-battle in these environments. Unless there is a good data-architecture and management procedures, you will never be able to construct anything meaningful regardless of how much data you gather. You will at best be able to utilize a fraction of what is there but the inconsistencies will make the rest of the data unusable. It's a tough place to be in. May the force be with you fellow PHPer :)
Best way to start debugging this, set `CURLOPT_HEADER` `true` and see exactly what the server is returning. The [curl_setop](http://php.net/manual/en/function.curl-setopt.php) manual includes a number of additional options you may need to consult to resolve the issue - I'd recommend starting with: * `CURLINFO_HEADER_OUT` - track the handle's request string (compare to browser request string and define cURL options accordingly to replicate results) * `CURLOPT_HTTPHEADER` - to mimic browser headers The page you're requesting appears to be trying to set cookies and responding to my test GET a 404 error, so you may also want to look into [working with cookies](http://stackoverflow.com/questions/17476828/curl-returns-404-while-the-page-is-found-in-browser) to replicate browser results w/cURL.
Nice. But please don't do it. In JavaScript, for example, we've been able to monkey patch for a very long time, and years back we went full monkey and made libraries like Prototype.js, which seemed really cool at the time, but in hindsight we realized monkey patching is a terrible idea and best avoided.
This guy doesn't know jack shit. COBOL is still around. People have literally said PHP is dead for years now, yet, it is entering a renaissance. "The genius of Matt mullenweg" - holy shit, get the fuck out of here.
I would be interested.
i wanna try that.
*A relevant comment in this thread was deleted. You can read it below.* ---- This argument presupposes that using simple DBAL and/or some custom SQL does not allow you to keep your concerns separated (false), and using an ORM greatly simplifies and/or vastly speeds up development (also false, sometimes in the short term, always in the longer term). Personally, I find SQL queries, relational models, foreign keys, etc. to be much easier to reason about and understand than allot of the abstractions that ORM's create. I always have to parse the documentation again when thinking about the "owning" side and gotcha's associated with that. [[Continued...]](http://www.resavr.com/comment/doctrine-orm-good-practices-2635749) ---- *^The ^username ^of ^the ^original ^author ^has ^been ^hidden ^for ^their ^own ^privacy. ^If ^you ^are ^the ^original ^author ^of ^this ^comment ^and ^want ^it ^removed, ^please [^[Send ^this ^PM]](http://np.reddit.com/message/compose?to=resavr_bot&amp;subject=remove&amp;message=2635749)*
Then what should it get?
Well first, what they are: JSON is a string representation of a JS object with a few different types (arrays, objects, mostly) XML is a markup language.. markup language. As in, good for generating derivative markup languages. Has mature and stable tooling in almost every language, many types of parsers (streaming, DOM) query language (XPath/xquery), transform language (XSLT), multiple forms of format specifications (XSD, DTD) ... it has a bad wrap because it can be verbose, and historically its been used for some heinous things (SOAP). JSON, good for key-value stuff, doing in-line markup is ... kludgey. XML, perfectly capable of key-value OR in-line markup.. no easy way to serialize it magically into a JS object (unless you use one of the JSON-in-XML tools) .. XML is a one-man-band, JSON is an electric guitar.. its the cool sexy one, but the one-man-band certainly has the edge in versatility. 
Both JSON and XML can do nested hierarchical data. JSON: { "person": { "name": "Bill Clinton" "born": "19-08-1946" "office" : { "title": "President", "country": "USA" } } XML: &lt;person&gt; &lt;name&gt;Bill Clinton&lt;/name&gt; &lt;born&gt;19-08-1946&lt;/born&gt; &lt;office&gt; &lt;title&gt;President&lt;/title&gt; &lt;country&gt;USA&lt;/country&gt; &lt;/office&gt; &lt;/person&gt; The same data is represented, but JSON is usually less verbose and easier to work with. XML has some nifty things that JSON lacks, like a schema language to specify what a valid XML document is. For the most part though, people just use XML because there application was written before JSON became a popular thing. Originally XML was a markup language, and when used as a markup language it can do things JSON can't. For example: &lt;statement&gt; &lt;person born="19-08-1946"&gt;Bill Clinton&lt;/person&gt; was the 42nd &lt;office&gt;president&lt;/office&gt; of the &lt;country acronym="USA"&gt;United States of America&lt;/country&gt;. &lt;/statement&gt;
There's some weird DNS issues going on with your domain. The Google Public DNS servers aren't resolving it, though Verisign does: $ dig +noall @64.6.64.6 blog.koenreiniers.nl +answer blog.koenreiniers.nl. 15 IN A 37.97.144.43 $ dig +noall @8.8.8.8 blog.koenreiniers.nl +answer $ 
Look at Markdown https://en.wikipedia.org/wiki/Markdown is one way to protect you. Or you can try to write thing that strip out things javascript and etc. McGlockenshire's comment would be good, but I would convert it to markdown. Then when you display it, you can translate it back to HTML with out the breaking stuff.
It would be great if something like this could be made, but I can't see how it would work since CMSs have their own way of doing things, having a common interface in the middle will mean the plugin will be constraint to the lowest common features of the supported CMSs.
I *love* XPath and schema validation. JSONSchema is great in the JSON sphere, but the few attempts I have seen at making a query language have all failed with terrible runtimes (minutes!) for some common queries because the implementors didn't think about runtime complexity when designing the query language. So in some ways XML are easier to work with than JSON. I think most of the bad reputation comes from bad or overused XML. I for one think SOAP worked great when coupled with a WSDL schema, but I have not seen many projects who actually used it correctly. *Of course* you get upset if an API doesn't follow its own specification, but that's a PEBKAC problem, not SOAP.
Sadly I have to use XML because that's what my company forces me to do. Enterprise software is often still XML &amp; SOAP.
It doesn't need to get anything. I have plenty of controllers that act as components. For example say you want to show a twitter feed on your home page. You could build it all into a single controller. Or you could have multiple controllers that are combined into one output. Your main controller would return a response in this case (and possibly access the request but again doesn't need to.) However a "twitterfeed" controller would simply do a service request to twitter to fetch back a list that you would then turn into a "component" that the main controller assembles as part of the response. 
That sounds awesome! There's something out there that's trying to achieve something similar: http://docs.puli.io/en/latest/
Magento1 was developed with all of its XML configuration put through SimpleXML. We'll be living with that nightmare for many years still.
I am posting a link to my own library I have made a few dev tools in the past and I wanted to try something different. I don't see many finance and accounting packages posted so here is my attempt at a General Ledger. Every database table is a ledger of sorts and while its not difficult to wrap an sql insert into a class and run a sum query, problems do arise when the dataset grows. When the tipping point is reached an aggregation strategry is often necessary and in my library I experiment with upserts run during execution of a transaction. I am still in two minds with this approach as I have used triggers in the past but as this library uses a dual table split (Header/Movements) a trigger would have required a select with join and I think that would have been an unacceptable penality to write speed. If have a need to track account balances, sales, donations, expenses any recurring figures that might fit into a ledger I do hope I provided you some inspiration. 
&gt; The rationale is that if you have a framework that has the field names in the models like Phalcon, you wouldn't want to have to update your schema in two places The model fields are not always the same as the database schema (eg: a 'full name' field). Though I suppose annotations would solve that.
&gt; Doing an interview on a whiteboard vs doing real work is a huge difference. When doing an interview like this, you need to brush up a bit, whether you like it or not. It's the interviewers' fault, they've made this a requirement. It's absolutely not a requirement, but it is still common for lower-level positions. However, you're missing the point, which is that while you may still have to whiteboard, there's no need to "study" or "brush up a bit" for this. You aren't going to get dinged for forgetting the needle/haystack order of `strpos()`, or derping when asked to pseudocode a recursive solution. Interviewers are fully aware of the not-so-subtle nuances between a nervous developer who forgets things in a stressful situation in front of other people, and someone who flat out doesn't have the requisite engineering chops. On the flip-side, you also aren't getting any brownie points for remembering this stuff either. Studying is a waste of your time. &gt; How well do you know regex? Can you write out a few rules on a piece of paper, or are you more comfortable in front of a screen, typing out a few rules and testing them out first? What about certain PHP functions? Do you know exactly how they're written, what about their parameters? How often do you reach for the documentation? PHP or anything else for that matter? This minutiae that developers constantly stress about doesn't actually affect your odds of landing a job. What interviewers are looking for is much more abstract (and important): your ability to solve problems, think critically, communicate your thought processes, etc. You're fully expected not to be a Rain Man with total recall in the middle of an interview. &gt; In a perfect world, there would be no need for interview preparations, but unfortunately that's the way it is. Interview preparation is fine. But what you want to focus on are your communication skills, and collecting your thoughts and responses in an organized way. Articulating yourself well and selling yourself are the two things that most developers fail miserably at during interviews, and they're perhaps two of the most important skills for landing a job that you're qualified for.
XML can be very ugly with the wrong tools (DOMDocument I'm talking with you). I hope FluidXML will make your job more pleasant... ;)
Because \FluidXml is the public one, \FluidXml\Core is the "private" one, for classes not exposed to the user. If only PHP had private classes/namespaces... :( Do you have any suggestions apropos?
Good question. FluidXML is for... surprise... XML. :) But in the next release it will handle even HTML, as input and output. This, because FluidXML is the core of a lib called Klay (that I will release soon), that changes the way of generating HTML views.
FluidXML in the *next releases* will implement many other coolness like **CSS selectors**, **filter callbacks**, **HTML handling**, etc. So, *stay tuned*.
I will definitely check it out! It sounds like something I have a use for from time to time.
People still use XML?
Nice. Though I disagree with the omit needless words part: https://swift.org/documentation/api-design-guidelines/#omit-needless-words I very much prefer action methods to be &lt;verb&gt;&lt;Noun&gt; named as that's how I think about and remember my API. `removeElement` is an uninterrupted statement that "rolls off the brain" so to speak. `remove(Element element)` isn't. What's more is it makes sense for Swift when you're programming in a tightly integrated environment. But if this is PHP (or Javascript, or really anything), people might be programming in a non-IDE and won't get the benefit of the IDE completing the sentence for them. As such, it's best if the method or function name communicate what it does in its own right, without the need of supporting information from its type hints. Also, PHP doesn't have method overload, so you can't have multiple methods with the same name, only differentiated by their signatures (not sure if Swift does or not, but I've seen the method overloading argument used to justify naming conventions in other languages as well, and it's not applicable to PHP obviously).
I'm not taking design advice from the people who designed that bloated shitpile.
I'm sorry where is the diferent approach?
&gt; Can someone explain why some devs / apps use XML while others use JSON Well, the ecosystem for XML is just too old and mature to create new tools. So hipsters invented JSON.
I'm mostly a Python programmer, and I'm a big advocate of "we're all adults here." If users _really_ want to use classes they aren't supposed to, there's nothing that will prevent that from happening if they're determined. I personally would never use poor development practices to keep people from shooting themselves in the foot. My suggestion would be to split out the namespaces into separate files and accept that there's nothing that will prevent determined people from being bad actors. If you _really_ want some type of protection, you could use multiple inheritance and make all non-public methods private.
You sound like someone who knows exactly what they're doing.
I've just posted another XML library on r/PHP, which has a much different use case. Still it might be of interest to people here. Also i'm looking for feedback. [arc\xml](https://redd.it/43kjs3)
Have you tried reading the [manual](http://php.net/manual/en/language.oop5.magic.php)? Hint: Yes, it's magic.
Yes, this is hard coded into the PHP engine
Thank you for the resource. Im giving it a read
Can you elaborate on why you think Swift is a bloated shitpile?
The secret of success stands before you. One day you shall usher others through the gauntlet - on that day, please remember that /u/jpswade offered gentle encouragement instead of saying "RTFM".
I agree with your requirements but would add one (although it's kind of an combination of the existing ones): I need the setup process for new instances to be as easy as possible.
ibus restart probably fixes it
&gt; Compare current schema against the sum of previous migration files If you have some kind of diffing-mechanism, what would be the advantage if you are using migration files anyway?
Until you apply auto-formatting
Prove it.
That's one of the things that has continued to puzzle me about Swift (from both a language and API design standpoint): sometimes the first argument is named, and sometimes not. It's still a feature I miss when trying to design non-crazy APIs in PHP. And most other languages, for that matter. Most of the Cocoa APIs take it so far as to be somewhat abusive - methods with eight arguments are usually doing *way* too much - but two or three is reasonable, and `function writeDataToFileWithMode(string $data, string $absolute_path, int $mode)` feels awkward compared to `func write(data: String, toFile absolutePath: String, withMode mode: Int)` and a less clunky `function write(string $data, string $absolute_path, int $mode)` is too non-descriptive at the call-site. Still, I can see why people would disagree, or prefer one style over another (especially without the benefit of an IDE). Named arguments as part of the method signature can go a long way, but not having them adding a bit of "forced creativity" also has the potential to simplify the API. Related reading: https://swift.org/blog/swift-api-transformation/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Learning about the black magic that is PDO::FETCH_CLASS. This truly seems like awesome magic, but I just can't wrap my head around how to make a class be able to use this within itself? For example, if I have a basic user class, and I use: use App\User; ... $query = "SELECT * FROM user WHERE u_id = :u_id"; $result-&gt;bindValue(":u_id", 123); $result-&gt;setFetchMode(PDO::FETCH_CLASS, User::class); $result-&gt;execute(); $User = $result-&gt;fetch(); ... $User-&gt;getUsername(); This does all the correct magic to generate all the data inside the User class, but I can only seem to do this outside of the user class. If I try it inside an existing defined instance of user, it generates a completely separate of user INSIDE of the existing user class. Normally I'd just: $User = new App\User; $User-&gt;someLookupFunctionByID(123); ... $User-&gt;getUsername(); What am I missing? This seems like really cool functionality, but not if I have to do all the PDO outside of the user class when I want to have a defined user instance populate itself based on an internal function.
omg I am signing all my code with u/bga9 from now on.
For anyone else that's curios, that code is from [youtube-dl](https://rg3.github.io/youtube-dl/).
So I've taken six months off to look after my new baby and now I'm starting to think about heading back to work. In that time PHP 7 has come out. How much traction is it getting? Do I need to make a little home project in 7 to get me up to date?
$ git blame
To fill an existing object, you need PDO::FETCH_INTO
I just went back to my old job. My new job just wasn't fun. My old position opened up when my succesor started throwing stuff in the office and was threatening to beat people. He was like 6' 3" and 240 lbs. He had to be removed by security.
That's silly. I already know where I live.
Yes. Focus on code quality, keeping up with different PSRs and different coding styles. Most of your current skills are enough for a Jr. Position. Experience is what makes you a Mid-Level to Senior.
I tend to wait about 6 months to a year before implementing it on a production server. But, yes, it should be good to run on your personal Dev machine on a side project to experiment with. If you push your code to a VPS or web host, be prepared for it to not work right away unless you installed php7 yourself on the machine.
Well, I would never name a method in such a verbose way like `writeDataToFileWithMode`, it would rather be `writeDataToFile` or `writeData` (or `writeToFile` when we know that we operate on "data" always) - it implies saving the file on disk, and saved file requires filemode (can have a default value). You shouldn't translate ObjC names 1-to-1 to "traditional" (c/java/php/name it) function names.
It depends on the practice you were using before. * If your PHP were quite recent, following practices from last 5 years, there will be no traction at all. * If your PHP were from last century, with all that while mysql_fetch_array stuff, you'll find it difficult to run on PHP 7 where a lot of stuff has been removed completely after several years of deprecation. 
But it's Python 
It certainly looks great! I was just wondering how much overhead it adds. I often replaced SimpleXML in the past because it consumes a lot of memory. Did you ever run some tests regarding speed and memory consumption?
[removed]
It really should have no database code inside it. Here is a [short description](http://martinfowler.com/eaaCatalog/repository.html), or [more words](https://msdn.microsoft.com/en-us/library/ff649690.aspx). &gt; I'm just getting started with OOP and every basic OOP tutorial I need to blog about this....the reason this happens is that when writing tutorials, you want to keep code as short as possible, particularly for tutorials aimed at newbies. When writing actual code to keep, you want to separate different responsibilities into different classes, as this makes maintaining it, and writing tests for it much easier. This means that a lot of tutorial code is not a good pattern to follow......you should only take from the tutorial the thing that the tutorial is about. &gt; Granted, they're usually passed some object that interacts with the db, but all still have select queries. The exact problem that this 'coupling' has is, that it couples your User class to the database.....so how do you write unit tests for the User class that don't rely on a database being present? If whichever classes needed to load users (which does not include the User class itself), actually relied on a UserRepo interface, rather than anything tied to a database, it would be trivial to make an in-memory UserRepo. interface UserRepo { function getUserByID(int $id); } class ArrayUserRepo implements UserRepo { private $users; function __construct($userInfoList) { foreach ($userInfoList as $userInfo) { $this-&gt;users[] = new User($userInfo[0], $userInfo[1]); } } function getUserByID(int $id) { foreach ($this-&gt;users as $user) { if ($user-&gt;id === $id) { return $user; } } throw new UserNotFoundException("Could not find user with id $id"); } } $users[] = [0, "Jane"]; $users[] = [1, "John"]; $userRepo = new ArrayUserRepo($users); // You can now pass $userRepo around to all objects that need a UserRepo....and no database is needed. 
You should not follow the steps from this blog post unless you want to fast test Redis. A better approach would be to have a configuration file and inside it you will specify the session.save_handler and session.save_path. You should use the function http://php.net/ini_set to set the two values. Also the path should be a local address and not "localhost". These changes will help set up a second (third...) server faster and will make the session (Redis service) available from the local network (for all your servers).
There is an error in **Validate method arguments** code example section.
I'm even a Python developer too, and some of your arguments are shareable. I'm thinking on removing the Core namespace in the next release. Thanks for the feedback!
Interesting. **arc\xml** and **FluidXML** have something in common like _xml fragments_ and _CSS selectors_ (featured in the next release of FluidXML) but as your stated, they have a very different use case. Thanks for the sharing!
Because you would get something similar to this: fluidxml('book') -&gt;add('title', 'The Theory Of Everything') -&gt;add('author', 'S. Hawking') -&gt;add('chapters', true) -&gt;add('chapter', 'Ideas About The Universe', ['id' =&gt; 1]) -&gt;add('chapter', 'The Expanding Universe', ['id' =&gt; 2]) -&gt;query('//title', '//author', '//chapter') -&gt;attr('lang', 'en') -&gt;query('//chapters') -&gt;times(4) -&gt;add('chapter') -&gt;query('//chapter') -&gt;each(function ($id) { $this-&gt;attr('id', $id); })
I've started prototyping something (a Last.fm API client for a project I'm building) that might give you some ideas - it separates each section of their large API into different Manager classes, but they're all callable from a central Client class. Here's an extract: https://gist.github.com/jonjomckay/51a3152a8b635075be80 I got the idea from the Box SDK for Java, but modified it a bit to fit my needs as I also found guzzle-services to be a bit inelegant!
&gt; A CoC or a code of conduct boils down to a list of rules ... and they should be rules derived from Social Justice, to legitimate and enable Social Justice bullying, threats, intimidation, and/or speech-policing. &gt; if you turn into problems later down the line, you can easily refer to the rules. ... such as getting someone kicked out of a project or user group (or fired from their job) for insufficient enthusiasm for Social Justice. &gt; the general opinion is the same as on encryption, "Don't invent your own". ... because if you do, Social Justice activists will have to read your new-and-different one to figure out how to weaponize it. Better to adopt one that already has known uses. &gt; implement something that's already thought out and proven to work. ... and by "proven" we mean "that serves the ends of Social Justice." &gt; Make sure you clearly show that you have a CoC and that you expect people to follow it. ... and the best way to do that is an Enforcement Team! Can't have a Code without Enforcement. Be sure they are good Social Justice adherents. &gt; There will be reactions on your decisions (if there aren't you should ask for them), now it's the time to discuss it with the community. ... but only *after* you have adopted it. If you call for discussion *before* adopting a code of conduct, they might resist. You should allow no opportunities to defy Social Justice. 
&gt; "Well we've never had any problems before and I don't see the point in having one". Sure, don't adopt one. The world isn't going to end if you don't adopt one. So, its settled?
What's wrong about guzzle-services? I think that's the best approach (and the one I'm using :) ) I'm refactoring an MVC site, migrating it towards the consumption of a REST api created with apigility and using guzzle-services to expose the api and it's working great :)
Unless something has changed (and it doesn't look like it has), that session handler doesn't do any locking, so it's possible for things to go wonky if you are setting session variables and have concurrent requests for that session. See https://github.com/phpredis/phpredis/issues/37
Good idea. :)
I promise we will, but right now I have this problem and I'd like to recieve some help please.
What do you mean by ' when I isolate the package development' , testing ?
When you create your package, the Laravel's documentation says you can create a repository of it and make an independent development, and that's what I've done. I'm trying to develop the package independantly, but I have the problem I've mentioned before: I can't access to the basic Laravel classes, so I can't execute, for example, the following code: Config::get('package::database.connections.mysql'); Do you understand my problem now?
If you want to develop your package independently, you shouldn't rely on Facades. You should use dependency injection instead : https://laravel.com/docs/4.2/ioc For example, from your package's service provider : $app-&gt;make('config')-&gt;get('package::database.connections.mysql'); 
We agree on most points, but I have to disagree with your tact here. Anything to do with codes of conduct has my back up right now, but this article seems to be mostly-neutral and doesn't seem to use targeted language like many others. It also seems to be aimed at finding a constructive approach to this bullshit, instead of the one we've been forced to take due to the discriminatory nature of the original CoC proposal for PHP. The only criticism I'd have for this article is that among the CoCs it references, only one seems to be ideologically neutral (the Linux Foundation one). Referencing the Geek Feminism wiki is also ill-considered, given that any fruit from that tree is necessarily poisoned by radical ideology.
I think the controversy appears when long-standing community projects implement codes of conduct that create a political imbalance and additional potential for corruption. PHP has been a wonderfully meritocratic project for as long as it's been around, and some ideological zealots want to change that in favour of identity politics and hugboxes. What we're worried about is that a code of conduct that is intentionally predatory will be adopted by an unaware complacent majority. It needs to be made clear when the details of a code of conduct overstep its purpose, creating a threat to the stability of the project.
we've been using https://github.com/tebru/retrofit-php in recent projects, works really well, it's a port of https://github.com/square/retrofit nad makes it really easy to write REST clients
Dude chill.
Aaand I don't get it. Yes, I must be the dumbest person in this world, but I'm really trying to understand what you're telling me. So... You say to inject that dependency in the Database class constructor form the service provider and I don't get it. What I understand is I should extend the service provider with the Database class, create the __construct() method and then add the line of code you've gave me, but there're some questions: * Shouldn't $app variable be calles this way: $this-&gt;app? Just because is the extension from the ServiceProvider class. If not, what object I should contain in the $app variable? * I have read the Laravel documentation several times and I just don't se a clear solution to the problem. Sorry for being that dumb and stupid. And thank you again.
Here's a [series](http://www.sitepoint.com/starting-new-php-package-right-way/) with a from-scratch approach, you might be able to harvest some useful information from these posts. Maybe a little bit outdated by now, but has unit testing, starting with League/skeleton, and some other "best practices". Resulted in a [kind of okay API client](https://github.com/Swader/diffbot-php-client). 
If you are trying to set the email attribute for a user it's done via the `mail` attribute per user. I don't see the PrimarySMTPAddress attribute when I'm browsing AD. Also try [AD Explorer](https://technet.microsoft.com/en-us/sysinternals/adexplorer.aspx). It allows you to browse AD via LDAP. It's been helpful for me. If you are trying to do this to Exchange - then I'm out because I have no way to test Exchange. EDIT: I'm at home now and am able to test. Groups that are set as 'Distribution' have an attribute named `mail` and if you set a user to manage that group the attribute is named `managedBy` and the user needs the full DN set like so `CN=Administrator,CN=Users,DC=home,DC=testserver,DC=io` for home.testserver.io. The schema for both looks like this (from AdExplorer): CN=E-mail-Addresses,CN=Schema,CN=Configuration,DC=home,DC=ioserver,DC=io CN=Managed-By,CN=Schema,CN=Configuration,DC=home,DC=ioserver,DC=io EDIT2: Also - I initially rolled out my own ADLDAP library to get a task done real quick, but I'm slowly migrating over to [adldap2/adldap2](https://github.com/Adldap2/Adldap2) - it appears adldap/adldap is dead as there are bugs/pull requests that have not been merged in 8 months. Regardless the adldap2 library is pretty well written - documentation is pretty light, but it's good enough to get going.
I'd suggest the MX Browns with o-rings (I have 2 keyboards like this -- it's comparable in noise to a membrane keyboard.) The MX Brown switches have a more tactile activation, like the MX Blues (but quieter). MX Red and MX Black are linear. 
No documentation. No License. No use.
I've experienced it using around that much RAM on the first install after starting up. Once I reopened the IDE it went down to half memory usage
I have 2 open PHPStorm editors... 1 GB of ram being used.
I know in earlier versions, If you leave the IDE open over night, it would leak like crazy on a Windows box.
Have you also tried asking on r/laravel, stackoverflow or the laracast forums? I think you're more likely to get some help on a Laravel 4 workbench related issue on one of those places.
At a previous company, we used [Swagger](http://swagger.io/) to define our API endpoints, and then auto-generate SDKs from that. In all honesty the SDKs weren't amazing code, but I think it's gotten better since I last used it. We've also used [php-apidoc](https://github.com/calinrada/php-apidoc) to generate documentation. It reads annotations and compiles from that. Could be useful.
My PHPStorm tends to eat up to ~4Gb of ram, and to be honest I do not care. I got 16Gb of that stuff anyway.
Eh, you know how I feel about that.
 $ cat ~/Applications/PhpStorm.app/Contents/bin/phpstorm.vmoptions -Xms128m -Xmx750m -XX:MaxPermSize=350m -XX:ReservedCodeCacheSize=240m -XX:+UseCompressedOops The heap size is [configurable](https://www.jetbrains.com/phpstorm/help/tuning-phpstorm.html).. I've actually increased mine: $ cat ~/Library/Preferences/WebIde100/phpstorm.vmoptions -Xms256m -Xmx1500m -XX:MaxPermSize=700m -XX:ReservedCodeCacheSize=480m -XX:+UseCompressedOops -Dawt.useSystemAAFontSettings=lcd -Dawt.java2d.opengl=true
And no tests!
I've got four projects open right now, and I'm using 1.5gb of ram. I don't think that's much personally. Besides... empty ram is a bad thing.
I think a lot of people who complain about PhpStorm don't understand indexing. They open a new project and it's sooooooooo slow that they immediately give up. They don't realize that once the indexing completes EVERYTHING is sped up. 
I'm of the opinion that all else being equal, explicit is better than implicit. Implying anything requires domain knowledge to be effective, and that's often not the case when you're writing code for anyone other than yourself. In any case, the idea of `writeDataToFile` over `writeData` or `writeToFile` is to indicate the order of the parameters in the method signature, so you don't create ambiguous and inconsistent APIs like PHP core (is it `($data, $file)` or `($file, $data)`?) If you take a lesson from Apple's book here, the arguments will be in the same order as the method signature: `writeDataToFile($data, $file)`. It's slightly slower to write, but vastly easier to read and maintain, and that's where you spend most of your time. Of course, you could also take the OO-approach with your API design too: `(new FileWriter())-&gt;setData($data)-&gt;setDestination($file)-&gt;setMode(0644)-&gt;write()`
Thanks for this and the other articles! I really enjoy reading them ☺
well, I've never once worked with wordpress in my 16 years as a PHP developer... but I guess it's time I stop using it now ^lol^lol^lol
I used to believe in the total dismissal of this language feature until I realised there are situations in which it can be semantically useful and correct. Take the following example, for instance: $isValidRegex = @preg_match($pattern, "") != false; `preg_match` returns `1` if there is a match, `0` if there is no match and a falsy value if an error occurred. So this code would set `$isValidRegex` to `true` if the regular expression does not cause errors. But omit the `@` and you would also get warnings (or exceptions, based on your error management scheme). Now you _can_ register a custom error handler just for this call, or you could see the ~~suppression~~ suppressed warning as a duplication of the conditional logic you're already doing...
Great article. I'm learning a lot from that series! Please Matthias, keep up with the good work!
&gt; The use of the at sign (@), the Error Control Operator in PHP has been prevalent through it’s history. I've rarely seen it used anywhere ever, and I've been programming in PHP on &amp; off since 1999. Sounds fucked. Am I just lucky or something? 
If you want a really *crude hack* to make sure you don't do more than 100 queries per second, just sleep 10ms before each request -_-
http://i0.kym-cdn.com/entries/icons/original/000/000/128/slowpoke_pokemon.gif
Please see the [curl_setop](http://php.net/manual/en/function.curl-setopt.php) manual page and this article about [vampires](http://www.skidmore.edu/~pdwyer/e/eoc/help_vampire.htm) (not to be accusatory, I know you're just getting started and the manual can be overwhelming, but I did provide the specific terms you'll likely want to read more about and the manual won't get all preachy with you if you have to consult it more than once).
Curious, why 4 projects? Completely separate, or different parts of one large system? 
Im not OP but I often have 3 projects open, sometimes 4. One project I am working on. Another project that is similar (to copy look &amp; feel, copy similar code that isn't part of a bundle, keep similar coding style, etc) A project to fix a quick bug (but this often gets closed quickly) And if the current project is a complete rewrite of an existing project: The old project to look at documentation to keep an eye out for gotchas of why certain things were done the way they were 
Nice blog 
I meant that the ajax request will only see that the task has finished on average 2.5 seconds after it has finished....and so to the user it looks like it took longer. &gt; stores its state somewhere like mysql or simple file... Redis. The other two don't scale for task checking.
I installed phpstorm 10 today but constrast / brighnest looks strange. Is hurting my eyes. 
I've seen a database abstraction library use @ on mysql_fetch_assoc() so that it doesn't trigger a notice if the query had failed. That's nice, but it also silenced the fatal error when PHP ran out of memory. It took me a ridiculous amount of time to figure out why a script was dying with no error. These days I've leant that XDebug has a feature to override the @ operator. But yeah, it's still not wise to use @ on internal functions because they might throw a more serious error than you think.
 Going off on a tangent there, this question reminds me of [Gaffer on Games: Fix your timestep](http://gafferongames.com/game-physics/fix-your-timestep/), which may offer some ideas if you decide on a very-fancy solution. 
Its perfectly fine if its a good article, which this is.
I guess I should say: my personal opinion is that `@` is not always bad and that context-less, absolute statements (like `@` is always bad) are frequently good and that I arrived at this personal opinion of `@` based on the thread I linked. I'm not interested in debating the validity of my personal opinion and I'm not convinced by your responses that I should be interested in debating the validity of my personal opinion. Good day, sir!
This couldn't have come at a better time. Awesome work, thank you! :)
Hey, it's crude but it works ;)
Seriously, thank you for taking your time out on helping me troubleshoot this! It's defined as Email in the group when you load the properties. With your adldap2, is it used like adldap as is? At the moment, i've got quite a few things running from adLDAP, so i'm just wondering how to do basic things, like disable a user, browse members of a group etc? Thanks again!
Don't forget behat!
This guy wrote a stupid article while ago, then realized it was stupid and now trying to disawow one of 50+ stupid statements. Without any reasoning as well.
&gt; so that it doesn't trigger a notice if the query had failed. That's nice, OMFG
For some strange reason you aren't using a try catch in your last example. Which renders your rant more than useless.
It depends completely on the project size and code. It seems to me like some types of code requires more memory than others. Sidenote: Slowness in general for huge files (nightmare css files with 10k lines etc.) I got 16gb ram so that phpstorm can index everything without resorting to swapping. Worth it. 
&gt; The idea that `private`="from within this specific object only" is an extremely common mis-perception, one which leaves some programmers very confused the first time they see an object accessing another sibling's "private" properties to do copying or comparisons. Yea, [that can be really quite surprising](https://coderwall.com/p/1iwm_w/php-private-class-member-visibility) just because of the way that `private` tends to normally be defined and discussed.
Thanks guys for the positive feedback! That means a lot to me :).
ubuntu 14, phpstorm 8, without changing any java arguments, 3 very large open projects with a shitload of plugins. 1gig total
Fair point, this might very well solve my issue in a simple fashion, depending the amount of resources the storage handling takes. Thanks !
A bit over my head for the quick 30s look I gave the article, but definitely getting in my readme list. Thanks!
Oh god. I worked at an Australian ISP that put in an order for a business connection through the following steps. * A technician fills out an Excel file, then saves that Excel file to a Windows Shared Folder (Did I mention this was a PHP app running on Windows Server?) * A PHP script is started either every five minutes or when a button is clicked on a website. This script is ~2000 lines long that basically loops through the files in the share folder, performs roughly two opersations, but has nested ifs with the exact same raw SQL queries 20+ times. * Said PHP script moves the file to another folder, uses curl to launch another web page * Which copies the ID of the thingy (it's been a couple years, and I try to forget the specifics of this job) to the clipboard. With IE only JS code. It then launches a *different* excel file * Which, using VB macros converted the original excel file to another kind, as far as I could tell. It then used whatever VB uses to execute curl-like things to start *another* PHP Script * Which runs validity checks on the transformed Excel file by checking the background color of certain cells. Because yeah, that's a thing * After validated, it runs the data through roughly 2000 functions stored in the DB in a language none of us knew about or could read that was apparently a custom-made language by some contractors a decade ago. Yeah... The end goal was to replace this process by providing a SOAP service, so that engineers could just fill out a form online and it would be sent for processing. Limitations: * No versioning. No svn, no git, no what have you. Why? Because it would take time to get the people on this project permission to use the SVN repo that it was stored on, and no one else in the company used it properly any way. * No staging server. Well, no, there was a staging server, but other contractors were using it as dev servers. Over windows share. With notepad++. And we had to FTP code up. Which only the TL could do. Yeah... * No external components. Are you even surprised at this point? * Entire time from getting the code to putting out a solution had to be done in less than two months, because the contracting company I was working for agreed to the job before knowing anything about it So my first thought on how to do this, in order to get this done within the time frame before understanding anything of this multi tens of thousands of lines of code over multiple platforms was to take the data, create the first excel file in the process manually and run it through the existing process. It was a rickety process, threw roughly 2000 errors when successful and had no tests, so I wasn't keen on messing around with it too much. The idea was nixed, so I spent about a month and a half trying to understand how the code worked (Turns out we didn't even have all the code in the first place. Took us a month just to find out where it all started because that existed in a different code base that we didn't have access to), then a week and a half to come up with this. * Replace PHP file #1 with a ~200 line file that just did some simple if's to set variables and pass that in to SQL. * Created my own micro ORM based off of Zend Db. it wasn't really anything much, I had a table class that knew what it's table name was and what class to hydrate in to. It accepted queries with parameters that were converted in to PDO and escaped properly. It wasn't exactly fancy, but it helped. * Skip the transformation bullshit * Do some basic validation on the IPs and data for the connections * Put that data in the right format for the functions in the Db * Run said functions. At the end of the day it seemed to work in so far as I could verify that using the new and original method, data up to the point of the function running was identical. Since the original still threw thousands of errors and there were no tests, and we weren't given any understanding of what the output should be or how we determine if it's correct or anything, I couldn't say any better than that that it worked. I could only verify up to a certain point, and then I ran from that contract as fast as I could. 
Yeah I'm kinda sold on this now
This, I love &lt;3
I flat out refuse to work in such constraints (when I'm hired) by charging extra. A lot. Windows servers? No SSH? FTP only? No deployment process? Sure, but it'll cost you. Working such jobs makes me extremely angry and unhappy. So the two options are: 1. Not do them and 2. Convince controlling that I'm right and it will save them lots of money in the long run. Many clients pick option two with the result of me being happy because I can do what I like and them being happy because they get a good product out of it.
"Stupid and evil" are not programming terms. A case, vividly demonstrating stupidity and evilness, would have been much better than his lengthy excuses.
Bitwise shift. Basically it divides or multiplies by two, I think.
+1 for retry the request with exponential waiting time. Some APIs will even send a 503 with "Retry-After" response header.
Oh I'm not saying the article's not bollocks. He doesn't really explain why you shouldn't suppress errors. I'm objecting to your comment that he's "now trying to disawow (sic) one of 50+ stupid statements." He's not. He didn't say you should use @ in the last article. (PS stupid is not a programming t.... oh never mind)
Well in 2009 I had 16GB in my workstation... So it's still good a few years ago :p
Good point.
There is no single situation where you should use ``@``. If you are using it - you are doing something wrong.
&gt;a political imbalance and additional potential for corruption. Political imbalance? It was proposed by pre-existing Internals people. Potential corruption? Compared to what, exactly? You can be kicked off the mailing list on a whim right now. &gt;ideological zealots want to change that in favour of identity politics and hugboxes Name calling will get you nowhere. You might want to pay attention to your own politically loaded terminology before casting stones. Also, if "identity politics" and "hugboxes" translate to making it clear that harassing people on the basis of their "identity" (sex? orientation? race?), then that would be accurate. You are, however, using those phrases in a way which suggests something more nefarious than only making it clear that harassment, personal attacks, and other ills are not tolerated. I'm sure that will be clarified in due course...
To be clear this is not my adlpad library - I'm just migrating to it. The API looks to be about 90-95% the same as the adldap/adldap library from what I've seen, but you might want to approach with caution and test each feature you're using currently. The adldap2 library is a fork of adldap, but is still active.
Try the darcula theme. 
Pros: If you already know it, you can build apps quickly in it. Cons: If you don't, you have to take the time to learn it. /thread
This may also be useful, since it has some examples of why you'd use the bitwise operators: http://imrannazar.com/Bitwise-Operators *^Disclaimer: ^I ^wrote ^that ^article.*
FWIW, this isn't just compatible with Laravel 5, you can implement this in any PHP project.
Well, it was abandoned long time ago, causing many forks to offspring, like Kohana, FuelPHP and such, none of which succeeded. CI itself has been finally picked up last year by some Canadian university. So there is a hope someday it become a good up-to-date framework. But at the moment it's too ancient and I would suggest to take a look at Laravel.
Just about every other major language in even vaguely the same vein as PHP has gone with Exceptions for error propagation, with some functional languages doing it there way. In most all these languages there is nothing like the PHP error suppressor. The closest you get that I know of is in Pytho 3.4&lt; where you still must explicitly specify the exception to ignore. with suppress(IndexError): x = foo[5] + foo[6] y = bar(x) And that still has the desired behaviour of skipping the `y = bar(x)` if the error condition is encountered. Any valid use-case for @ should be considered a wart of an older PHP. 
Interesting. I never thought of letting the api "keep me out" if I excess the request cap. I guess I figured i'd get blacklisted or whatnot, but maybe not.
So I need to install the symfony plugin first. I see
&gt;C also uses error signals C is very intentionally one small step up from assembly and the machine's inner workings. There's a reason nobody writes anything that isn't an OS or a driver in C anymore; it's giving you no runtime features to help with the big holdups of the low-level. (And there's a reason C is so popular for OSes and drivers: nearly no run-time, no limits, and also proven stable.) Standard POSIX signals and some other sort of interrupting signals like it have some great uses, but are generally not needed in the domain of PHP. If you find yourself sending SIGHUP or something to a PHP process you've probably made a mistake. &gt;This is not an issue in PHP, where each line of code is already executed separately. ... I never implied it was bad for optimization reasons. &gt;So what do you propose to happen for divide by zero? Either follow the IEEE 747 standard of returning the floating-point infinity value *without any error of any kind* seeing is that's exactly what the standard says *should happen* (An approach in JavaScript, Ruby and some others), or if it's decided your language most likely shouldn't be using that part of the standard or similar: throw an ZeroDivisionError exception. (Python does this). Either one makes sense to me. I you go with it being valid then either the function should pre-condition check the divisor being 0, or the caller should sanity-check they don't get infinity. If you go with the exception case, but don't care about the issue in this case, any construct similar to the Python context-manager with suppress(ZeroDivisionError): x = y / z Which lets you be picky about what you're ignoring, and signals very clearly to anybody else reading the code what you're ignoring. (And hopefully in context: why you're ignoring it.) Even without the syntax sugar to make it a bit nicer you can do this in PHP already: try { foo(); } catch ($e) {} &gt;btw yeah - I saw the Python suppress stuff.....it seems nuts, as it operates on blocks of code..... Why's that nuts? It's very common to have a block that needs to get ducked out of if you hit any error-condition. Simple, somewhat contrived example: you want to have an optional command-line flag `--option=thing` to your program, so you might do this: option = DEFAULT_VALUE with suppress(IndexError): name, value = sys.argv[1].split('=') if valid_pair(name, value): option = value That will manage to set the DEFAULT_VALUE without any issue if there is no flag given because the IndexError will jump to the end of the block, then be ignored away. If the flag is invalid different Exception can be raised and the context-manager will not suppress it. If there is a valid flag it will overwrite the default. It also isn't really operating on blocks, rather it's using the Python context-managers. Basically on a with statement block being entered the manager's object will have its `__enter__` method called, and on leaving the block - no matter how you leave it - it calls the `__exit__` method. Generally it's used to ensure that, even if you have an error that means you have to exit and abort, some resource is cleaned up. You can context-manage a lot of stdlib things like file handles, or you can even define your own context-manager simply by implementing the `__enter__` and `__exit__` methods on your own objects. &gt;when the programmer probably only intended for it to be used for a particular line. White space is semantically significant in Python, if you do Python for more than a day you'll get used to understanding that the same indent level means the same block. Haven't seen that sort of accident in Python ever.
I used CI back in the day...switch to Laravel because it's modern, nice to use, and there are tons of resources for it.
I'm also not a teacher and haven't tried to teach. But, maybe teach by emulating your own education? If the order in which you learnt things worked for you, there's no obvious reason it shouldn't work for others. 
What does she need it for? If the answer does not involve 'Wordpress', then please guide her to /r/learnpython.
Hi, I have attended a session on Ruby. This idea came once I noticed how he taught ruby. Start with a REPL. Either you can use https://github.com/bobthecow/psysh . Once they start playing with it, they can start slowly. I hope that helps. Thank you
if that is the case, why not just remove Laravel from your branding?
i have been guilty of over using the @ operator. Lesson learned.
1. Start from HTML. As PHP is an HTML Preprocessor and HTML is almost the only result of PHP scripts, it's essential to understand HTML basics. 2. It is essential to explain the difference between a server and a client, or PHP and browser in our case; the basic request-response flow and basic HTTP. 3. Then move to programming basics - variables, control structures, functions. 5. Back to HTML with aim to interaction with PHP - forms, query string. 5. Then relational databases and basic SQL. 
&gt; Start from HTML. As PHP is an HTML Preprocessor and HTML is almost the only result of PHP scripts, it's essential to understand HTML basics. PHP is a scripting language and can be used for significantly more than html. It can be setup as an API and only output JSON. It can be a server side script ran by cron if the user doesnt know how/cant do what they want with bash scripting. It can be a chat server. It can be a long running daemon. PHP is far more than just an HTML/web server handler.
I always loved this kind of comments from people who is completely unaware of context, always ready to nitpick on some irrelevant statement or peddle some idea nobody asked their opinion on. PHP users are so PHP users.
Done!
&gt;It's okay when the code is initially being written. But when another programmer comes along and adds a line of code that can have the same error, if they forget that error is suppressed or miss reading that the block has that type of error suppressed, they will have an error suppressed in the new code, that they didn't intend to be suppressed. There's always the opportunity to mis-write something, but considering that Python blocks are necessarily at the same indent level as the rest of their block, and necessarily every code block begins and ends either at the first column of the file or with another block indented less, it's always really, really obvious what codeblock something is in. If someone wants it to be in the same code block, but doesn't want the suppression behaviour, then, well, at some point you have to just accept that programmer error can happen. There is no system that won't rely on a programmer applying such a feature carefully. And really that's not `with suppress(Exception):` specific, it's any try/catch block that can have the effect of catching exceptions you didn't mean it to catch. &gt;It's not just SIGHUP signals: Nope, but it was just an example. (SIGHUP is used a lot by daemons so it came to mind first) But my point remains: it's not a reasonable way to approach it in PHP or other high level languages. The POSIX and similar signals are a low-level thing that introduces issues that are not needed or particularly reasonable for high-level programs. I'm sure more example abound, but I know that, for example, Python's interpreter will actually register a handler for SIGINT and it'll use it to trigger a KeyboardException in the running program. (Since SIGINT usually comes from a ctrl-c in the shell I suppose they figured calling it KeyboardException made sense.) Python 'upgrades' the signal to an exception because an exception-handling system provides all the same features and functionality as signals, but with fewer problematic issues. &gt; The SIGFPE signal reports a fatal arithmetic error. Although the name is derived from “floating-point exception”, this signal actually covers all arithmetic errors, In Python you just get a ZeroDivisionError, an ArithmeticError, or similar. The big problem with the POSIX signals is that they're unaware of the context in the program that raised them (I mean the OS can tell you need to get a SIGSEGV because you tried to dereference 0x0, but it can't tell you why you did that or what line in your source code that corresponds to.), and the program is unaware of what situation caused the signal to be sent. What if I have 2 places where I might want to do divisions and catch a ZeroDivisonError Exception? Easy, use a try/catch for each, put the right error handler or suppression in both. I can even decide to suppress in one case, but exit the program in another, and later add a third part of the code in which a zero-division should do something else. If I want to rely on OS delivered signals I have to have one handler to decide how to handle the signal. If I have two places in which I might zero divide I don't get to know which one caused the signal I just got unless I do annoying housekeeping crap that's error-prone and hell to debug like keeping a `static int context` that tells me which part of the code ran most recently before getting the signal. And in a C project that needs a really small runtime and a really fast execution speed that might be worth the hassle. In a language that can and does support exceptions happily? Why would I ever use signals? 
I programme PHP to a REST API domain that has no reliance on HTML at all. If you don`t want others opinions perhaps don`t post in the first place.
That's what I am talking about. The number of people who can write PHP but can't read few consequent sentences in English is scaring. 
&gt; In a language that can and does support exceptions happily? Why would I ever use signals? Exceptions have two downsides; they can't be handled in place, i.e. they always interrupt the currently running code and jump up to a catch block. But more importantly, they don't allow the calling code to collaborate with the code being called. function calculateFoo($values, $bar) { $result = $values[0] / $bar; $result = $values[1] / $bar; $result = $values[2] / $bar; $result = $values[3] / $bar; return $result; } function limitFoo($values, $maximum) { $result = []; foreach ($values as $value) { if ($value &gt; $maximum) { $result[] = $maximum; } else { $result[] = $value; } } } // This bit of code knows that $bar might be zero // and knows that the values need to be checked afterwards $result1 = @suppress('DivideByZero') calculateFoo($values, $bar); $result = limitFoo($result, $maximum) // This bit of code thinks that $quux is not going to be zero. // Any divide by zero should result in an exception. $result2 = calculateFoo($values, $quux); I don't believe that the same could be achieved with exceptions. I'm pretty sure you would grok it naturally, but to be clear, the syntax of "@suppress('DivideByZero')" would suppress only errors that would be converted into DivideByZero from being triggered, so is safer to use than just "@". Obviously you could rewrite the code to try/catch every single line, but realistically most people would rewrite that code to be two complete different function.
It actually makes it harder to read when you make the paragraph text so wide. Optimal line would be &lt; 80 characters for readability.
much the same as /r/_emanuel I believe that using `ini_set` inside specific applications is smarter if you need this or memcached (which btw is pretty much any time you horizontally scale PHP) Don't forget to use auth with redis, and connect by known machines blocking access to the in-memory storage for non-provisioned clients. Also you may wish to replicate or ensure you save important data to both the DB and session using a hit / miss cache setup so that the cache (memcached or redis) can be primed, or refilled if it goes down. 
I've written a Guzzle rate limiting middleware which might make things easier for you: https://github.com/rtheunissen/guzzle-rate-limiter. I've been using it with Reddit's API. There's also a cache handler.
Er...so I wrote the example incorrectly, it should have been: function calculateFoo($values, $bar) { $result = $bar / $values[0]; $result = $bar / $values[1]; $result = $bar / $values[2]; $result = $bar / $values[3]; return $result; } i.e. it's possible that `$values[2]` is zero, and the other lines are going to produce valid results. &gt; I'm just not really sure what you want calculateFoo to actually do When the suppresion of DivideByZero is active, I want all of the code to be executed as normal, as if the error never occurred in the first place, which is different from stack unwinding of exception handling. When there is no suppression of DivideByZero, I want an exception to be thrown. &gt; but it helps clarify nothing stop you doing something like: Yes, it is possible to rewrite the function being called to handle that specific scenario. But having the @suppress be on the outside of the function being called, allows the behaviour to be modified without re-writing the function. That's really useful when the function being called is part of a library or class that you can't modify for whatever reason.
I would say ask her to think of something she wants to achieve. Come up with a fun project with her then enable her to make it. Start with a small part of it and plan what to do so she can see progress. I find it much easier by to learn something if I have a goal to aim for. 
This is pretty much how I started programming and each milestone is rewarding enough to keep the drive up. I might even start on paper to help illustrate the thought process and walk him/her through each step so the logic sticks. I find logic to be the hard part to teach - like rhythm.
You donated this code (as a favour, so I assume "donated" is the correct word), and now it's theirs. You can keep a copy and use it for your own purposes, and so can they. Please get out of the mindset that your code is yours anymore when you've agreed to give it away or sell it (as an employee or contractor). Those feelings lead to the dark side. Conversely, if you write an app or site and license it to someone, you are free to secure it in any reasonable way (like using Zend Guard or things like it). The only people you might tick off, particularly if you use a commercial code security product, is future developers who need to expand your application and want to be able to run it in their local environments, test servers, staging servers, and maybe even virtual machines, none of which are necessarily going to be the same platform or environment that you used. Case in point: a client has a site that is old (but works well); he occasionally wants some changes to layout or styles, but little else. Unfortunately, because of the commercial code security product his original developer used, we can only run the site on the live web server. Our nice virtual machines can't run it, our test and staging environments can't run it, and he doesn't want to spend the money on extra licenses or an upgrade for it. Don't do it. Just let it go.
&gt; I'm not malicious &gt; I don't see why I should leave the code readable ok
You brought the code in (likely without any written agreement) and as soon as you used it on day 1, it becomes property of the company. Whether it is in writing or not, theres no reason to burn this bridge because you never know how this can come back on you later on. It's a dick move, really.
Can't you host it on a server that only you control? It sounds like a small user base so its likely that it won't be requiring much resources?
Yep! An "ode" is a song `:-p` 
My point wasn't that Guard wouldn't work, but that if I could physically attack the person that decided to obfuscate their code - I would. All I would be doing at this point is fixing things that are now broken since 5.2 - if anything - I don't know because the code is obfuscated/encrypted.
That's just it, though: It's not **YOUR** code. You wrote this code for a company that employed you. Did your codebase have a proprietary license? Did you license your codebase out to them? What was the nature of your agreement? You say you gave them this code "as a favor", but it sounds as if you were under their employment when you used it for the app you built. That makes the codebase for that specific application **THEIRS**. Without any specific written agreement regarding the codebase you used, the application became theirs the minute you exchanged your time and services for money or bartered goods. This is how employment works in any country. Now that you're no longer working for them, any action taken on your part that affects **THEIR** application - however minor - means that you're defacing **THEIR** property. In any case, I can guarantee you that whatever codebase you built isn't worth worrying about. You don't have anything THAT special that's worth burning bridges over. Focus on fleshing it out and making it better so that whatever version they're currently using quickly becomes obsolete. Make sure you set up a proprietary license agreement and a demo site that will allow companies to purchase your application. Then if these guys approach you to make changes or improvements, you can either sell them **YOUR** proprietary code in addition to the time it takes you to fit it into their particular use-case, or you can charge them a premium for your time in developing **THEIR** application. It's as simple as that. Let it go.
Isn't CI4 still supporting PHP 5.2 though?
&gt; Warning! This library contains global str_name_case function, that potentially can break your function with this name. In your actual source code, said function is only defined if it doesn't already exist. Doesn't that eliminate this warning's necessity? Personally, I'd have a single static method that creates an instance instead of relying on static methods so much, like so: public static function toNameFormat($string, array $options = []) { return (new static($options))-&gt;nameFormat($string); } But that may be dogmatic on my part. Good work though!
&gt; You brought the code in (likely without any written agreement) and as soon as you used it on day 1, it becomes property of the company. Not quite - the company would have an implicit license to use it, but unless there was an contract that explicitly transferred the copyright it would still be owned by the original author. &gt; It's a dick move, really. Totally. OP - stop being a dick. If you are really interesting in getting some money out of it, you should either talk to the owner about "when they're going to buy a license for the code you brought before joining the company and never received compensation for". If you get ignored/told to fuck off, you could talk to a lawyer about your legal options. However, trying to get money out of a company that is apparently running out of money, is not a cunning plan. 
Interesting, but… really think before you use it. My last name is "Van Patten". Capital letter. Making assumptions on formatting like this is not always ideal.
No, they're pinning to PHP 7.
Please don't shit post. If you have some valid criticism, you should post some details.....in a thread about Symfony. This is about the profiler. 
I'm surprised how quickly I read all the source code to that project. Once I started, I could not stop; was done in like 5 minutes.
But it was never abandoned at any point. That one guy (narbg or something) was continually working on CI3 even before the university took over.
I think you made a valid point, but not a popular one. Reddit is not about truth, it's about popularity.
800-900 MB is a pretty sizable amount of memory, to be fair. Webstorm tends to even use 2 GB for me. I have 16 GB on my workstation, so it doesn't affect me, but even on an 8 GB machine, 2 GB is quite a bit, especially since browsers (which a developer will almost always have open) also tend to use a lot of RAM.
The same could be said for literally any other framework. So no, not "/thread".
Start with variables. Show the differences between strings, numeric, and bool. How do you assign a value to a variable? How can you manipulate strings? Perform mathematical operations? Then move on to basic control structures. The most important part of programming is expressing logic. Show her if/elseif/else. Once she has a handle on that, show her switch statements. Next comes iteration. For/foreach/while. Then arrays. How do you create arrays? Numerically indexed and associative. How do you iterate over all elements in an array? Then move on to OO Principals. What is an object? How do you get an instance of an object to set properties and return result of a method call? Pass arguments to a method. Each one of these topics can serve as a building block for the next topic. I strongly recommend starting from the CLI. Save HTML and Databases until she has a grasp on the fundamentals. 
Whatever "working" is not "active development" by any means. Start of Kohana is the direct result of such fruitless "working".
Sorry I should have clarified a lot more as you guys are thinking this is a lot bigger than it is... I was never hired to do this. This was never a part of my employment. It's not a software based company. It's actually a local tv repair shop. I was hired to deliver and collect tv's. I just happened to have something that would help him organise jobs. The guy I work for was using paper to manage certain parts of his job and I offered to let him use my web app to help manage it. It is an app I wrote at least 4 years before working there and own it outright. There was NEVER any payment because it was never something I was hired for and not something a company this small WOULD pay for. I did the guy a personal favour and helped him by letting him use it. I never gave him the right to use the software in any other way and I certainly never gave him ownership. I don't intend to sabotage anything. Just protect my code from being used outside of my control. It will continue to work and run the normal life of code. It could be argued that nobody would be able to maintain it in the future but I liken this to any app that has run its cause. The data stored is not proprietary and can easily be read so it's not like anything is being held to ransom. I'm 100% happy for him to continue using my app but don't see why i should be happy for it to be potentially used on other projects or even used by other people. Like I said though, this is a lot smaller than I think you guys are assuming. The guys getting use of the app for free when I spent a lot of time working on this app prior to ever working there. Why shouldn't I copy-protect it?
I thought about speed, according to this (http://www.codedwell.com/post/59/static-vs-non-static-methods-in-php, which may be wrong) static is a bit faster, and in such a simple case I do not really see a need for creating new object every time when calling a function (singleton will help, but again, it's unnecessary extra in such a simple case). And thank for reply it's really useful! 
Lol. When did I mention money? Look. There is no way to make money from THIS company on this app. I don't want to make money off him from them. All I want is to prevent another developer making money off this in the future. This is precisely about the fact that it's being used for free. I'm more than happy for it to be used for free. But I'm not happy that others could step in and use it for something else. That's all.. This isn't embezzlement, blackmail or some kind of software hostage situation. The code runs and will continue to to run its natural life. But if in the future he decides to pay someone else to given him a bespoke package I don't want them using my app as a starting block. The data the app stores is in a MySQL database that's really easy to read so any developer would have no problem accessing all the data. All I want to do is make MY code hard to read. 
This might be an issue :/ [DomainException] Windows is not supported Any plans to support windows?
There are tons of developers on here who can help. Paging /u/geggleto
You could potentially do a facebook lookup on surnames, then choose the statistically-most-significant casing. Would be too slow for real-time, but could be cached.
I use Fractal with transformer classes in cases like this. http://fractal.thephpleague.com/transformers/
will it run under cygwin?
how is this php related?
I appreciate the effort members of the community like yourself have made to make PHP accessible and to teach it with modern standards. I slapped this script together thinking installing some of the requirements would be intimidating to first timers: https://gist.github.com/mrferos/9ef7f8e6aa80b3acee3d
I cant help with the windows, cause Im on Mac,but I will help you guys get some better test coverage :)
good man. 
Great thanks! Most of the core code is here: https://github.com/php-school/php-workshop which is almost all tested. cli-menu is a bit lacking.
Thank you. We tried really hard to support Windows, it was important to us but we just couldn't solve some of the issues.
cool will take a look. 
~~Would be great if you gave a basic description of what it was, other than an "alternative to Parse.com".~~ Found it on the [main page](http://hook-platform.org/#/): &gt; HOOK IS A RESTFUL, EXTENDABLE BACKEND AS A SERVICE THAT PROVIDES INSTANT BACKEND TO DEVELOP SITES AND APPS FASTER, WITH DEAD-SIMPLE INTEGRATION WITH IOS, ANDROID, JAVASCRIPT AND MORE.
Has this been discussed with other stakeholders, I wonder? Also, shouldn't it be `zend` and not `php`?
The worst code I've seen was my own from when I was younger. I gave up cleaning it up because it was too much work.
This useful to work on the LAMP stack servers
What nightmarish hellscape harbors code like this? Yes, this is the original indentation. while(list($GET_Key,$GET_Val)=each($HTTP_GET_VARS)){ $Var_Key_VAR = $GET_Key; $$Var_Key_VAR = $GET_Val; } while(list($POST_Key,$POST_Val)=each($HTTP_POST_VARS)) { $Var_Key_VAR = $POST_Key; $$Var_Key_VAR = $POST_Val; } while(list($SERVER_Key,$SERVER_Val)=each($HTTP_SERVER_VARS)){ $Var_Key_VAR = $SERVER_Key; $$Var_Key_VAR = $SERVER_Val; } Christ.
I don't know much about HHVM as I've never used it myself. But I'm struggling to think of a case where this would actually be useful. HHVM claims to be compatible with "code written for PHP version x" - so why should that code care whether it's HHVM running it or regular old PHP? The way I see it, the preferred way is feature detection. Consider PHP 'the standard' and if you want to rely on interpreter specific functionality, feature detect it; if(function_exists('some_cool_hhvm_thing')) { some_cool_hhvm_thing(); } else { // Gracefully degrade, throw exception etc. } Otherwise, I can see this leading to bad code like; switch(PHP_ENGINE){ case 'hhvm': switch(PHP_ENGINE_MAJOR_VERSION) { case 5: doSomething(); break; default: doSomethingElse(); break; } break; case 'php': switch(PHP_ENGINE_MAJOR_VERSION) { case 7: doSomethingElse(); break; default: doSomething(); break; } break; } Which reminds me of the way some people do browser detection in javascript; which is generally bad-practice. It'd be a shame to similar behavious creep into PHP. 
Just for a simplicity. I checked github and web for such name, and didn't find any conflicts. Also I wrapped it to **function_exists** so not to break any code that already uses this function.
&gt; Instead of using a server-side redirect, he instead injected a &lt;script&gt; block into the page to send the browser to a different page. I saw a site recently that done that. I giggled, then cried a bit.
I have a friend who insists that this is the way to do it and in fact instructed others at his job to do so when adding/changing code. Old code is left in there, but commented out. Also this was all done in Cold Fusion.
This sounds much like the horrible "user agent headers" thingy that was much abused in the past by JS libs (and sometimes by PHP) for browser detection. Sounds like a big no-no to me.
The only time I have ever seen code similar to that was with code that had been outsourced to foreign devs as a cost saving measure. Apparently the code they produced was designed with register_globals enabled and the server that it was to run on had register_globals disabled (this was before register_globals was disabled by default). The code was sent back with the instructions that it had to work with register_globals disabled, and returned a week later with the following at the top of every file: &lt;?php extract($_REQUEST); Since the code ran without producing any errors it was accepted without any further questions and did go live.
Seems to work fine in ConEmu with Cygwin bash integrated on Windows, Or am I missing something? [Image](http://i.imgur.com/EoGQA3u.png)
I'm a big fan of [HTML Goodies]( http://mobile.htmlgoodies.com/beyond/php/article.php/3472391). Also, always, always refer back to the [source]( http://php.net/manual/en/index.php). I'd like to say l that I appreciate your attempt to learn base PHP before digging into frameworks, too.
[No Framework tutorial](https://github.com/PatrickLouys/no-framework-tutorial) is a great starting point to understand what frameworks provide.
Hah, it's been a while since I've seen a DailyWTF article show up. Those always make me feel better about myself.
From what I know, Game Maker: Studio is a bit better than older versions, but it's still quite a quirky language.
I'm a little bit confused by your phrasing. Can you post the code where you use `strpos`?
$_SERVER["HTTP_HOST"] and/or $_SERVER["SERVER_NAME"] should contain the domain. If substr should do the trick.
You may be interested to study how I implemented SimilarWeb's API Client library that is their official one for PHP: https://github.com/thunderer/SimilarWebApi . Let me know if you have any questions.
I'm writing this on my phone so forgive any mistakes: If( $_SERVER[SERVER_NAME] == "live") { // live DB settings } $vagrantShareUrl = 'http' . $_SERVER[SERVER_NAME] elseif(strpos($vagrantShareUrl, 'vagrantshare.com') { // local settings }
Could someone explain to me what Parse.com was for or was offering ? On their website I couldn't find a single word about them except that they were shutting down. So I don't understand the hype since two weeks about that.
What is worse is people who do it but don't **learn**. I can forgive bad habits if they can be brought out of them.
Honestly, I'm getting a bit tired of programmers bashing on other programmers. We have too much gossip in our profession already.
in case you don't know, w3fools is a worst place to learn php 
it is fine for picking up the basics and moving on to phpdocs... i dont' think it goes into OOP and that sort of thing though. I'm sure the OP would love any others you can provide as well. EDIT: even [W3Fools](http://www.w3fools.com) says pretty much what i said. &gt;W3Schools still has issues but they have at least worked on the primary concern developers had. For many beginners, W3Schools has structured tutorials and playgrounds that offer a decent learning experience. However, it would be a mistake to continue your education without learning from more reputable sources, so when you're ready to level up, move on.
I think you guys are assuming this is a much bigger issue or company than it is. In fact, I let him use my code. I never gave it to him, I allowed him to use my code. If you want to get technical the code currently resides on my own (very old) laptop that i have loaned to the company. My intention is, out of my own generosity, to let them have the laptop and continue to use my code. If i so wished, I could take my laptop with my software that I ALLOWED him to use. I am not talking about that. I'm also NOT talking about mangling the code, the code will run fine. I want to try and prevent my code being re-used without my permission. Realistically all I would be doing is making some coders job harder (and not really much harder!) with the hope they wouldn't use my code but would write their own. In any case, people have answered the initial question and I thank them for that.
Perhaps that's the main reason isn't quite easy to explain how BasS works for newcomers. "instant backend" means that you don't need to write any backend code. The "backend" is always there, ready for you to consume/use.
Hi, Luke :\^)
BaaS - Backend as a Service. You write front-end, like facebook game or mobile application, then connect it to PARSE which provides auto-scaling database, auth, acl, notifications, analytics, etc. You can look at their [REST API docs](https://parse.com/docs/rest/guide) to see all their available services.
It might be a good place to start for **basic syntax only**, but for anything more complex it's horrible and full of bad practices. For learning beyond that, I would suggest [Code Academy](https://www.codecademy.com/learn/php)
Will look at this in the next few days, the only problem is where to put the phar. We are currently just hosting on gh-pages.
I'd love to stay updated on this. I'm currently arguing to the death at my work because they do not believe their needs to be a testing/qa period
Here's a list of projects with specially tagged github issues: http://up-for-grabs.net/#/tags/php
Luke, I am your father
&gt; Jorge nearly quit, but Carol had been a great customer in the past, and he really wanted a steady gig. There is nothing steady about working for a company that doesn't use source control. One accidental file deletion and the entire company can go under. No Joke.
Your are welcome! ;)
I'm still cleaning up the customisations done by a Luke for us to a SugarCRM application, five years ago. About 10% of the code, I think, is actually needed, but unwrapping that is a nightmare. The indenting is truly horrible, so random.
Came across a Luke once that did not even know what a WHERE clause does. He scanned the entire tables, retrieving every row, then programmatically checking to see if each row is the one the application needs or not. We left that guy on the .Net team. If he'd got anywhere close to the Financials database, he could have brought the whole company down.
Good eye. Thanks.
"Make PHP Great Again" -- Luke
What about the case when there is an issue where the same function behaves differently between the 2 engines for a particular edgecase. The edgecase might not be in the PHP spec yet, so the differing implementations are somewhat legit. Even if you were to raise a bug report and they did patch it, the time to actually get that out in a release version can be quite long.
I will not say that its a great way to do, but i did it several times: Choose what you want to learn, ex.: how the framework is routing. Use something on your controller to expose the call stack (debug_print_backtrace, xdebug_print_function_stack) and follow the calls. If you want to know more how the dependency injection works, you can get the stack earlier and so on... Again, its not a great way but it works.
holy shit, didnt realize TDWTF was still around. I remember reading that back in college 10+ years ago, I should check it out again. That site also used to have one of the best trolls I have ever seen -- TopCod3r. He was subtle enough where if you didn't read the name of the poster you would think "ok no one is that dumb, or ok that is such an insane thing to do" then read the name and realized you got trolled hard. Heck he was so good I still somehow remember the name. Now if I can find that wooden table... or that irish girl...
And that's how we got healthcare.gov being however many million lines of code they claimed it was.
&gt;Luke’s indentation was so chaotic it could double as a cryptographically secure random number generator. lmao
You laugh, but I've seen this in the wild before... except without the salt.
I find getting the chance to fully rebuild and refactor an aging code base very satisfying. Maintaining a system that sucks is frustrated, but I'd jump right on the chance to rebuild an existing system. So much fun!
Indentation notwithstanding, could someone break down what exactly is happening line by line? I'm learning PHP at the moment, and have figured out how to do a lot but am still wrapping my head around it all. I've found that getting line by line breakdowns (I know computer logic and am most well-versed in JavaScript) of code snippets are the best way for me to learn. And I do recognize that this is an example of how not to do things, but I'm more interested in the syntax than anything.
It's basically taking every GET and POST field and extracting them to their own variable. It's recreating an old feature of PHPs that was removed because it was a massive security risk. Someone could use that to override any global variable in the script. EDIT: I would do line-by-line but I'm currently on mobile.
"UPDATE/INSERT" also known as UPSERT
"Oh but the files are versioned in my Dreamweaver cache" I had a boss say something to that effect when I said we need to implement version control or at the very least frequent backups
I'm not sure what `$foo` is in this case but the way I'd do the Null Object Pattern is start earlier: whatever class your `$foo` object is, have a null version of that. If it's a `Bar`, have a `NullBar` class also, and figure out which object you're using upon assignment to `$foo`: `$foo = $some_condition ? new Bar() : new NullBar();`
My apologies.
I know for sure that `$foo` exists though, and I might need it later.
Well, that would've come in handy.
I usually have a threshold of 2 simplicities myself.
I think you absolutely did the right thing. You saw a repeated ugly pattern (the ternary operator with basically the same first and second part) and found a solution for it; the complexity is hidden away from the actual usage of the method calls. It's fine how it is, but I wonder if you could implement a __toString() method for the return object of getAttribute which would call getValue() if used in a string context. That might be misleading though.
If you're running Sublime on the windows host, yeah you'll need to install php on the host as well, so it can run CodeSniffer. That should be fine though, nothing wrong with having PHP on both the host and the guest Vagrant VM.
As soon as the hard-coded prefix becomes public, it actually degrades security ;)
Sometimes it's suitable. The NullLog is a typical example. It's a threshold. Is passing a null object the exception and not the rule? If passing in (or returning) null is rare, it's preferable to use a null object and avoid all the extra logic of checking for null. But if passing null is very common, and the calls to the null objects are frequent, and there can be significant speed ups if the receiver knows a null is a null (the idea with Null Object is that the receiver doesn't care), then you might as well just pass null and have some if ($foo === null) special cases in your code. Another solution can be, by the way, to have hasAttribute() and getAttribute() and getAttribute() should throw if there's no such attribute. Then this: $node = $foo-&gt;getAttribute('bar'); if ($node !== null) { ... logic ... } Becomes this: if ($foo-&gt;hasAttribute('bar')) { $node = $foo-&gt;getAttribute(); ... logic .... } It's more explicit, and if you don't check hasAttribute() and there is no attribute, you get an error immediately in that line, and not potentially much later, like it'd happen if you propagate your null.
My irc botthats supposed to read the title tag from sites was supposed to handle redirects... Well, after discovering that Google uses script redirects, I build half of a JavaScript parser with regex. Ouch, but it works.
I take over projects from people as bad, and I work with people as bad all the time. I just don't consider it noteworthy, or as dramatic as the article makes it out to be. Incompetent programmers are not the exception, rather, competent ones are the exception, especially in a mainstream language like PHP (but also Java, C# etc.). Every profession has incompetent people in it, and this is especially so with programming, where the range is so wide. I just don't know what makes it notable. At work I deal with such people two ways: I try to train them, or if that fails over time, I let them go. With other projects, I just prepare the client that the mess we find will cost a lot to fix, and then don't let their previous developers ever touch client code. It's a nuisance, it's everywhere like the air we breath, there are solutions, and I don't know why it's interesting.
Philippines pesos, if you are wondering.
hhvm isn't the only php implementation.
and if the function behaves differently between two different versions of the engines.
It's human to want to have an outlet to vert your frustrations on. That's the entire reason this story was upvotes in the first place. If the story is fictional then all the better, no one gets hurt and we all get to live in blissful ignorance. Also if you're in a position to be able to let a failure go then you are in a privileged position. Fortunately the team I work on now, even those junior to me, actually give a damn. But there have been plenty of times in the past where I've been forced to work with people who a much greater my senior and are quite happy to vomit the first thing they think up onto their text editor.
&gt; do not apply if you are a juggler https://s-media-cache-ak0.pinimg.com/236x/88/26/91/882691d586082bff264467b7326783d1.jpg
Yeah, that is probably a better idea, since it doesn't change the way the original methods work and won't interfere with any other services/bundles/plugins using them. I like the simplicity of the solution as it is more though, but I'm considering using yours, since I ran across an issue where an attribute was compared to null, which lead to all sorts of problems. I've fixed this one issue, but there might be more (and there probably will be).
Exactly, cheers! 
I could be wrong, but I don't think so: `$foo-&gt;getAttribute("bar")-&gt;getValue() ?? null` That would still return an error when `$foo-&gt;getAttribute("bar")` returns null
cause when u work in an abusive workplace, it's not your place to tell your manager what to do, or what things are :P
I assume that was what the original ad meant. But it was probably written by someone who's first language wasn't english, to be fair. 
Any idea why it's USD for the trial and Pesos for the job?
It's definitely both possible, you can't assume either, and it's no exception. There are even cases where both occur in the same name: "Von Den Name" vs "von Den Name" vs "Von den Name". But I would guess it doesn't matter that much for the people who have a need for this library, since they are already storing it incorrectly.
Thanks so much!
Not sure if it will be of use, but I [wrote something](https://gist.github.com/mikefrancis/63436f1cb94ec31ce31f) a while ago that ran PHP CodeSniffer as a Build in Sublime, but not through Vagrant. If you can globally install Composer packages on the host machine then you should be able to use it. Some of the commenters were Windows users so if you have any issues they might have already solved them.
I pay a dev PHP for PHP. It's fun every time.
I'm responsible for creating a code base of exactly this nature. It was my first ever Wordpress project for a huge client. During my research at the time, nearly all information about Wordpress says "put this in your functions.php file". So I didn't give it much more thought. It would have been great to find resources that recommended alternative and better ways to structure your Wordpress code. At the time the project was fairly simple, most functionality was provided by plugins, so all that went in functions.php was filters and actions to tweak plugin functionality. Probably just a couple of hundred lines of code. But then, more features are added, more features, more features. Then we outsource the project for a bit, then the client takes over development, then it's given back to us. Four years later I'm still maintaining spaghetti central, built on my own foundations put in place by a much more ignorant younger version of myself. Lots of lessons learned though, and the client has agreed to pay for us to rebuild some of the legacy code to optimise it and bring into the modern age. It will be satisfying to rip up my own ignorant code and replace it with much better methods I've picked up over the years. 
(╯ಠ_ಠ）╯︵ ┻━┻
That's why tabs are the One True Indenter.
I just write stuff in a Markdown file. I don't see why you'd try and make things more complicated for yourself.
WordPress is horrifying, but at the same time it's impressive how well it's able to function despite lack of things like foreign keys.
Please use something like DOM Document instead of regex to parse HTML.
It does have foreign keys, though I didn't see where there are any foreign key constraints. My guess would be because MyISAM didn't/doesn't support foreign key constraints.
TLDR: Don't. 
Null is an object. So as long as you are meant to return objects then this makes sense. However is your attribute is meant to be a value/string then it makes more sense to return an empty string/0 or throw an exception.
Its useful to know the limitations and quirks of the language. But please post the version number, for a number of those examples don't result the same as mine. If a bug fix has been issued, is it really a quirk? Its as if, someone is digging through PHP change logs just to make a post "How broke is this!"
The lack of consistency in the order of arguments (especially for the array and string functions) as well as the sort functions that modify the array in place are the big killers for me.
&gt;In context of relational databases, a foreign key is a field (or collection of fields) in one table that uniquely identifies a row of another table. In simpler words, the foreign key is defined in a second table, but it refers to the primary key in the first table. Constraints would be nice, but in my view not needed for it to be considered a foreign key.
1991 called, they want their "script" back. You might check out something like http://symfony.com/doc/current/components/http_foundation/introduction.html#serving-files.
Lol WordPress
A method name should describe what it does. So go for separate methods.
Personally I subscribe to the idea that the function name should define its functionality, not the number of arguments. So I go with `set/get`
Seriously, you can do the same thing with five lines of code: $document = (new DOMDocument('1.1'))-&gt;loadHtmlFile($remoteUrl); $nodeList = (new DOMXPath($document))-&gt;evaluate('/html/body//a[@href]/@href'); $hrefs = []; foreach($nodeList as $node) { $hrefs[] = $node-&gt;value; }
No contest. Always separate getters from setters. * It's **much** easier to find usages and analyze program flow. * It's easier to safely refactor, when renaming methods or changing arguments. * The behavior is much clearer at a glance (remember, successful projects get read more than written.) * Your documentation tags like @param or return-value types aren't a misleading mess, IDEs can intelligently help the user. * Type-hints are actually useful for preventing unexpected nulls. * It's easier to subclass or create wrappers, especially ones that need to know about read/write semantics, like caching or lazy-loading. * You aren't screwed when a getter needs an optional argument for filtering or formatting the results. * The caller isn't screwed when they set a `null` value but the method unexpectedly switched to retrieving data instead. * Stack traces--which may not contain argument details--make a heck of a lot more sense. Even with "fluent API" styles which return `$this` for chaining (like jQuery), I have never encountered a time when I wished getters and setters weren't clearly separated.
[removed]
Do I have to?
Right: The NullLogger style is for "nice if it's there but I don't really care." In contrast, literal nulls are for... Well, *communicating* something.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Fair enough, but I've been stuck in MyISAM for so long I still consider something like `computer.inventory_detail_id`to be a foreign key for `inventory_detail.id` (without the definition), because functionally that's how it used. Technically you're right, but in practice - including in Wordpress - there are still 'foreign keys'. I'm willing to concede that 'foreign key' should be in quotes in that context due to the fact that literally anything (int/bigint) can be in the 'foreign key' column regardless of the table.column the 'foreign key' is referring to.
Immutable data structures ftw. Complexity is reduced because operations that do mutate state are now more obvious and limited. For operations that can mutate state on a given object, I'd consider creating a new object with the updated values and returning that instead of changing the original.
The HTML on both of them is from the early 00's at best. :P
Good thing they had backups. Backups are important! I backup all my Linodes/Droplets both using the backup service for each provider and doing SQL dumps of important databases.
I enabled backups as well. Nice to hear Digital Ocean lets you know when it happens, I had a hosting provider not tell me, and restore from a week old backup (which was much older than the backup I made myself). It was for a call center platform I wrote, and it really fucked things up. If they let me know I could have just swapped it for a backup from the same day :/
When data is so important, I usually have at least one server which is used as replication slave (for streaming backups). Also all my stuff is under docker container, so if I lost my server, i could just use DO Api and create new one, deploy application on it and so on. Automatically. There is a million ways of how to deal with such situations.
What does that even mean. Will the manager beat him/her up or something? I've had a few jobs in the last 15 years. My rule has always been to speak up when I have to in order to do my job efficiently and benefit the company. If your manager would rather prefer you do your job inefficiently and hurt the company rather than learn, it's in your own interest to quit and seek a better job. But truth is in most cases it's not that the manager wouldn't listen, it's that the employees wouldn't speak. I'm sick and tired of telling everyone I manage "speak up if you think I'm wrong or you have a better solution", or "speak up if you're blocked", or "speak up if you aren't sure how to do something". And people just. Don't. Speak. Up. Then they complain behind their managers back about an "abusive workplace". Give me a break. If you wanna open your mouth and say something, nobody can stop you. 
i just picked through a couple random things on w3schools and didn't see anything downright horrible and when i google w3schools bad practices generally turns up nitpicking on their site in general... you got an example of advice they give that is bad? I have no stake in it in any tutorial site since the '90s (and they don't exist any more lol)
What do you mean by "backend" it can mean so many things and have so many purposes.
It's far more alright, but do you really think that teaching someone who doesn't know basic HTML how to create REST APIs or run cron jobs is a good idea? 
If you were a programmer by trade, I wouldn't hesitate to say that there is no problem, but given the fact that you don't seem to be, I think it's not as simple as that.
Age has nothing to do with it. Your best bet is to get started and see how it feels to you. My first career choice was as an architect and I hated it when I started college. I fell backwards into programming and here I am 15+ years later and I still love it. Programming is NOT for everyone. Some people can do it, but hate it. Don't be that guy/girl. Only get into it if it ignites a fire inside you that makes you want to write code without hating your life.
* different url: `&lt;button href=/myurl&gt;asdf&lt;/button&gt;` * same page option 1 `&lt;button href=#someanchor&gt;adsf&lt;/button&gt;` and `&lt;a name=someanchor/&gt;` where the link goes * same page scroll plugin: `&lt;button href=# onclick="someJSscrollPlugin();"&gt;asdf&lt;/button&gt;` * same page javascript: `&lt;button href=# onclick="window.scrollTop = 1337; return false"&gt;asdF&lt;/button&gt;` if you dont want to use a scroll plugin like scrollTo * (tbh i dont remember if its return false or return true to cancel the event, you might want to do that also. and you probably should use a js func w/ onReady not inline js) 
You can learn any language and php is actually easy. Getting good at it requires dedication and a lot of study. You can get a good paying job and grow rapidly in this field just keep in mind that not everything are roses. Look for some online trainings and look for meetups on your area. If anyone can give you any advice for novices and how the job market is at your area you can find that on local meetups. 
You... won't want to learn from the massive amounts of information on most websites. Generally speaking, PHP is easy to learn which means there is a ton of BAD code out on the web that will teach you to do very bad things.
Dude i know for html but i need for php! :)
PHP7 didn't exist when this article was written.
Good to know, and noted;)
Don't believe anyone who tells you you can take a short course or a few tutorials and start earning loads of money as a programer right away. However, this applies weather you are 14, 24 or 34. If you want to start working with PHP professionally soon after starting to learn, it may be hard to find pure software development jobs without sufficient training. However, I can imagine that you could find jobs where knowing "some PHP" is required. For instance, managing content management systems such as Drupal or Wordpress for organisations or agencies is something you can become productive at without being an expert in PHP, but still gives you a chance to learn more. Good luck, have fun!
and keep the icon or what? if not just change the html... you need to find where the click is handled its either in document ready/load - ex: `$.ready(function(){ $('.parallex-buttonwhatever').click( ... ) }` or in the esc_attr_e then set it to do whatever u want one thing you could do is override it on body load (jquery not php): $(function(){ $('.icon-arrow-carrot-down').unbind('click').bind('click', function(e){ window.scrollTop = 1337; }) }) idk tho. thats my best guess
If OP downvoted me, let me clarify, it takes time and lots more than just PHP to get it. And the job probably won't come fast.
Thanks! Yes, the idea is to take the introductory course to cover the basics, and then to continue learning by myself using manuals and other resources, but I'll take more advanced courses when needed. I'm kind of good at self-learning, so even that I'm a complete ignorant about the subject, I'm not intimidated. Yet.
There's [Room 11](https://chat.stackoverflow.com/rooms/11/php) which is IMHO better than Slack.
Depends on how quickly you want to be making a career out of your new skill. You can probably learn it fairly quickly, in terms of months, but a lot of places hiring want to see experience. You'll need to toss up a few free projects, have code samples ready, and be "working" for kind of a while without money coming in from the work. Learning PHP, like anything else, requires effort and dedication. If you have it, go for it regardless of your age. If you just read some articles that say php developers make good money and you're wanting to get some of that in the next year or so, you're likely to be disappointed. You're going to take an entry level position (most likely) after quite some time of learning and have to climb through the ranks. Senior positions typically want 3-5 years of experience, some want degrees, etc... Tl;dr I don't think your age matters nearly as much as your personality and desire.
No, I didn't downvoted you. And yes, I'm aware that this will take time.
The caller (`$val = $func();`) won't know which arguments to pass. There are about 30 potential arguments, so I'd either have to Reflect, or make every signature 30 args long.
I like this, but there are many (~30) possible arguments, so that signature could get unwieldy. 
I assume in this case you might want to reconcider your approach, for example by dedicating closure creation to a external class which will hold this arguments instead of just one trait function.
Let's go through them! ---- &gt; Default arguments and type hinting This is an interesting one. Why is `null` special? &gt; The poor parser is easily confused This one is not a parser bug, but a consequence of PHP not requiring a leading digit in a float. So it's not valid really. &gt; instanceof is smart I'm not sure how to feel on this one. It's basically just a complaint that the syntax isn't super-specific. &gt; NULL is a data type and is not a scalar Huh, I didn't know `is_scalar` was weird like that. `null` *is* a scalar type, so the function is kinda misleading. &gt; ArrayAccess or what's the difference between NULL and nothing Ah yes, the wonders of PHP's array key conversion. &gt; in_array really loves typecast What? Wow. &gt; More on array references `&amp;` takes an lvalue, so this isn't that surprising, but maybe it should produce a notice. That's debatable. &gt; PHP protected and an assault Not a WTF, other languages do this and it doesn't violate information hiding. &gt; PHP function calls returning references This feels like a bug. &gt; PHP function calls have quite some overhead I think overhead has gotten better in subsequent releases, but yeah, function calls add overhead. &gt; foreach and references Well-known and inexcusable PHP issue. We should add block scoping some day. &gt; Array reference always succeeds See other reference complaint. It's an lvalue. &gt; Static properties and variable classnames This is a complaint about PHP's static properties syntax and separate namespaces, I think. Reasonable. &gt; On class properties Dunno how to feel about that. Static properties on an instance might be confusing, but they might be useful. I can't say if PHP made the right call. &gt; _FILES array Ah, the horrible layout of `_FILES`. Everyone hates it. &gt; array_slice confused about negative length It's not, the author is confused about what negative length is. The array is 1 item long. 1 - 10 = -9, which will be capped at 0. &gt; Identical arrays vs equal arrays `array_diff` is apparently poorly documented, this is a reasonable complaint. &gt; Numeric and integer keys Long-standing and unjustifiable issue. I'm currently trying to get this fixed. &gt; Even more hexadecimal fun Also a long-standing issue. It was finally cleaned up in PHP 7. &gt; Explicit and implict casting This is related to the previous issue, [and I'm currently trying to clean up part of it](https://wiki.php.net/rfc/invalid_strings_in_arithmetic). &gt; Variable names I've always wondered why `$1` etc. aren't allowed. They really ought to be. &gt; String comparison Famously terrible PHP anti-feature. Cause of many security issues in login forms. Reasonable complaint. &gt; version_compare Wow, what? I wonder if this bug was ever fixed. &gt; Looping Whaaaaaat. What. Why is `switch` considered a loop for `continue`? I know it works with `break` but just... why, PHP. o.O &gt; The beauty of string parsing, parting shot &gt; The beauty of string parsing part 2 &gt; The beauty of string parsing PHP's interpolation syntax is indeed rather quirky, and it's less useful than it could be because of it. &gt; More incrementing and decrementing I actually tried to get this fixed once. &gt; Incrementing and decrementing ?! why, PHP &gt; Emptiness and arrays Omitting a value and an empty string are different, yes. Slightly confusing syntax, maybe, but not really a WTF. &gt; php_uname is "consistent" Reasonable complaint to me. While showing the OS it was built on will probably be fine most of the time, this will catch you out sometime. &gt; It's quite logical... PHP's comparison operators *are* awful. ---- Yeah, as expected, they're mostly valid.
My two cents: I don't think it's ever too late to learn how to program. But one thing to keep in mind is PHP is NOT the only thing you need to know in order to become employed. If you're doing PHP development, especially when you're first starting, it's likely you're going to be doing a lot of front-end development as well. So you'll need to know at least HTML/CSS and some Javascript. Maybe some basic photoshop skills to be able to slice from PSD to HTML/CSS/JS/PHP. Then, any useful website is also going to have a database. So you're gonna need to learn MySQL (most popular, there are other databases though, like Postgres). So that's another thing to learn and get good at. So, there's a lot to learn: 1. PHP 2. MySQL 3. HTML 4. CSS 5. Javascript 6. Maybe some Photoshop And that's just the tip of the iceberg! It's definitely not impossible though, what it does take is motivation and passion doesn't hurt either! My advice if you're still serious about getting into it: start building websites, ASAP. It's the experience that counts when getting a job, and becoming knowledgeable. They don't have to be good, or useful, or anything. You just need to start learning things, and the best way would be to build something. Plus, you get the satisfaction of being able to say "I built this!".
I need access to the keys in other classes, so putting the closures directly in the method won't work. I could put a separate accessible array of just the keys, but that invites synchronization issues (spelling, forgetting a field ...) I think I'm going to go JavaScript style, and have one argument that's an array of all the arguments I need. Not an elegant solution, but at least everything's dependable and in one place. Thanks for your input. 
First of all: English is not my native language and I've had a couple of beers, so please forgive my grammar and spelling. Secondly: I've created an account on reddit just to answer this question, so I'm serious (I've been a long time lurker though). I've been in webdevelopment for 12 years, mainly as PHP and .Net programmer. I didn't have any formal education in this field, I'm self educated and I'm 34 years old now. It's never to late for anything, true. But.... Web development and programming in general is a huge topic. If you're going to develop relatively simple websites, there are a lot of things you need to learn: PHP (or another backend language), HTML, CSS, Javascript and databases are just the beginning. You'll also need some basic grasp of networking. That's just for basic sites. You'll also want to learn a source control system like Git or SVN. Most jobs require experience with a framework as well, so adding Symfony or Laravel or Zend or another framework is a pretty big plus to your resume. Furthermore, age discrimination is a thing. That sucks, but it's reality. If my manager has to choose from 2 people who are both newbies but person A is 22 years old and person B is 34 years old, he's probably going to choose A. A is cheaper and has probably been hacking away at an interesting project while living at his parents house. Both A and B are of an unknown quality in programming so even though A might be an awfull programmer, he is still the safer bet since he is cheaper. Which brings me to my last point: experience is everything. Landing that first programming job at age 34 is going to be hard without formal education and previous experience. I think that building something cool to show off during the hiring process is the best way to land a first job, so start with a hobby project ASAP. You'll learn a lot and have something to talk about during the interviews. If you get a job in the industry, just stay put for at least 2 or 3 years. You'll learn a lot more and will have a much better chance of getting a job that actually pays okay. If you make it on your second job, you'll pretty much have a big chance of developing onwards from there. TLDR: Can you make it in programming while being uneducated at the age 34? Sure! It's going to take an investment in time and there is a lot you're going to need to learn but it's possible for sure. On the other hand: if you have a newborn child and a mortgage that needs to payed, it might be wiser to look at your current skills and position and reconsider your options (becoming a programmer might still be the option though). I've been very lucky to get a career in this field. I've always been coding for fun and liked it. I've landed my first programming job during my study of history. When I couldn't get a job as historian I got a very lucky second job in the field and from there on things just happened. Remember: experience is everything. And you'll also need a bit of luck. And a lot of hard work and dedication. But it's possible for sure.
Thanks. Mmm... I'm starting to see a pattern here and other sites: PHP alone isn't going to be enough, and the idea of learning more than one programming language is worrisome. But, I'll see.
@OP - regarding your edit, it's important to note that Jeff Atwood should not be taken seriously in any regard. Any man capable of taking forum software to a *new low* with his abysmal [Discourse](http://discourse.org) platform (an "app" built with so much dysfunctional JavaScript - a language objectively far worse designed than PHP - even its JavaScript is written in JavaScript) is one who clearly has no (longer any) idea what he's talking about. I mean, just look at [this tweet](https://twitter.com/codinghorror/status/695143348521140225). Even as a joke, it's moronic. He's often listened to and revered because he's popular, but he's bringing *nothing* to the table nowadays. PHP used to be shit, yes, but PHP of today is a far cry from what it was back when the haters still had a glimmer of a right to hate.
You're never not too old to learn. My suggestion would be to start it off as a hobby, whilst working another job. When you start feeling competent enough, you can take on a couple of freelance jobs and go from there. Definitely go for it!
We use OctoberCMS which stores content in files, and regularly commit and push changes to git. If our server went down, we would simply reclone the sites, recreate email accounts, and then send out new admin passwords. It would only take a few hours. That being said, I hope that this never happens to us.
Hi, As it's been said here, age doesn't matter to get you started (but beware of age discrimination!). To be fair the programming world is in constant evolution meaning that the technology you learn today are going to be very different in 5 years (on the other end practices from early 70s are still valid today). PHP is no exception: it has evolved a lot since its creation and continues to do so (which is a good and healthy thing). Here's a testimony of an "old" programmer who went down the path of entrepreneurship and once he got retired decided to work again as a developer: https://medium.com/@garywiz/five-things-old-programmers-need-to-remember-e78caf0b0973#.bxoxbspc4. The point is age doesn't matter to learn programming, so don't lose hope. Regarding "The PHP Singularity" and other "PHP a fractal of bad design", you shouldn't worry about it: developers of a X language have a tendency to think themselves superior to developers from Y language and will bash them (to be fair I consider this trait being revealing of how junior a developer is: being open minded opens a lot of doors). I think you'll be interested in reading "PHP the right way", which is a nice and good quality learning resource: http://www.phptherightway.com/#welcome. Best of luck!
Sure, I can explain the issue. `var_export` takes a PHP value and outputs PHP code that, if it was evaluated, would produce the same value. So, for example, `var_export(123);` would produce `123`, and `var_export("some string");` would produce something like `"some string"`. For float values, `var_export` wouldn't include a decimal point unless it was needed. For example, `var_export(123.0);` would just produce `123`, whereas `var_export(0.5);` would produce `0.5`. This meant that if you put in a whole number float (like `123.0`) into `var_export`, the resulting PHP code, when evaluated, would usually end up as an integer, because PHP only makes numbers in source code into floats if they're written in scientific notation (e.g. `1.2345e9`), contain a decimal point, or are too large to be a float. I didn't like that, because it might cause problems if you have strict typing. I fixed that by making it check, when exporting a float, if the output (produced by some C function for converting floats to strings) included a decimal point. If it didn't, it would add `.0` at the end. So `123` would become `123.0`, but `1.5` would stay `1.5`. This way, there's always a decimal point in a floating-point number. Unfortunately, I forgot about the special floating-point values of `INF`, `-INF` and `NAN`. They don't have a decimal point in them, so `var_export` stuck a `.0` on the end... but `INF.0` is not correct :) That I didn't realise my mistake and that it slipped into 7.0.2 is my fault.
Always have a disaster recovery plan before you need it. Is losing a week's amount of data acceptable? If not, don't trust that some other company is going to worry about that for you. I also wouldn't trust any one sole service to handle this. Let's pretend your digital ocean account got locked for one reason or another. This actually happened to me with AWS. Whether it's a pain in the ass or easy through terraform and provisioning scripts - do you have the ability, if needed, of moving all of your servers and data to another provider? If not, you don't have a serious disaster recovery plan. And you should if your business depends on it. 
my favorite is the function that takes two arguments and order doesn't matter. sry, don't recall which one as I thankfully haven't written php since switching jobs.
Full marks for the Dune reference.
Which is why many WP sites end up making several dozen queries to get a trivial amount of data to show up on the page :/ It really is just one festering pile of technical debt for all but the simplest of blogs and sites that should probably be built with Jeckyl or Hugo anyway......... The only thing I've hated more than WP development is Joomla development, because Joomla is in a whole other league of fuck.
This looks pretty shoddy at first glance: - [rolled your own bcrypt](https://github.com/olscore/ornithopter.io/blob/master/application/helpers/bcrypt.php#L100-L116) - [likewise db escaping](https://github.com/olscore/ornithopter.io/blob/master/application/libraries/database.php#L1672-L1684) - [doesn't look like you are escaping view output at all](https://github.com/olscore/ornithopter.io/blob/master/application/views/welcome.php#L9) - [singleton all the things](https://github.com/olscore/ornithopter.io/blob/master/application/helpers/arr.php#L55-L86) - [really?](https://github.com/olscore/ornithopter.io/blob/master/application/models/demo.php#L32-L33) - no package management - no readme - no coding standard followed, and inconsistent even with itself - no autoloading - no namespaces
I love everything about this comment. 
Not according to PSR-2, you heratic!
I run http://larachat.co, while we talk Laravel we also talk a lot of PHP/JS/APIs, etc. Usually about 700-800 people online at all times out of 7k members. Source: http://hamsterpad.com
please go to the TOP my friend!
&gt; You have to reference their online docs frequently during development. I rarely have to. I've used Laravel so much I know it pretty much inside and out. I have a bash script that spins up a new Laravel instance in literally 2 seconds. Quick prototypes just need a few routes defined with some static content to demonstrate how it works, maybe a few models / restful routes and controllers generated through artisan. Takes no time at all. &gt; But for 99% of what I do (which is fast prototyping) I need really hackable code Not really sure what you mean by "hackable" code, also not sure you quite understand that a framework is supposed to save you time by not requiring you to write a lot of repetitive code yourself. And if all you do is fast prototyping, at what point do you build actual applications that have a lifespan longer than 4 weeks?
You're both right. Foreign keys don't have to constrain anything. WordPress [doesn't](https://github.com/WordPress/WordPress/search?utf8=%E2%9C%93&amp;q=references&amp;type=Code) use [foreign keys](https://github.com/WordPress/WordPress/search?utf8=%E2%9C%93&amp;q=foreign&amp;type=Code). It does use primary and regular keys which help with look-up times only.
After reading this, I'm setting up my home server to use for backing up all my sites.
Is there any reason why you can't just reference `$this` in your closures? trait ATrait{ public function getFuncs(){ return [ 'a' =&gt; function() { $this-&gt;a.... }, 'b' =&gt; function() { $this-&gt;b.... $this-&gt;c.... }, 'c' =&gt; function(){ ... } ]; } } class BClass{ use ATrait; public function doFunctions(){ # variables I want function to use $this-&gt;a = 1; $this-&gt;b = 2; $this-&gt;c = [3,4,5]; $funcs = $this-&gt;getFuncs(); foreach($funcs as $name =&gt; $func){ $val = $func(); } } } Then if you ever need to, you can use `Closure::bind($func, &lt;new object&gt;)` to give them new `$this` context, just like in Javascript. That said, I think your decision to pass in a single object argument is a lot more clear than this. I dislike it when traits depend on a property or a method to exist in the class they're being used in. Traits should basically be pure functions if you don't want to go bat fuck insane trying to figure out which classes are compatible with which traits (or trying to make them as such).
Your idea would work since I only need the keys in the other classes, but like you said, it's a little more manageable with a single argument. It would be nice if there was a `defer` attribute to wait until the function was called before evaluating the `use` variables. `$func = function() use($a, $b) defer { ... }`
This is a big concern of mine. I'm a lone developer and admin for a high transaction e-commerce website. My files and DB can be recovered fairly easily but I can't begin to tell you what all server configurations are in place. For example Mutt and Solr were installed and configured once and practically never have to be touched. I know practicality nothing about either and would lose the better part of a day if I ran into a hiccup reconfiguring either from the ground up. 
This is the worst excuse for writing a framework that i have seen in ages.
Use this framework then https://github.com/northborndesign/vanilla-php
I'm going to get a lot of flack for this, but I'll say it regardless: don't read. Install XAMPP and create a small site with a contact form. Then go on and add basic content management, make a simple blog. Then read. If you start out reading, you won't see the problems to which the material offers solutions and coding is first about solving problems. 
Awesome must read
This is not (necessarily) Digital Ocean's fault. They host a server, but hard-drives can still develop faults etc, the same as a self-hosted one could. Unless they are providing a managed service where backups / redundancy are included (which would inevitably cost more, and put restrictions on what is possible on the server), then being in the cloud does not protect you from hardware failure by default. It's impossible to offer this redundancy in the *general* case- the requirements of one app are so different from another that it's not always possible to instantly mirror &amp; version a hard-drive or seamlessly load-balance over to another instance. This is why every application has its own way of adding redundancy- think DB replication, hadoop clusters, http load-balancers, S3 replication, etc. There's no one-size-fits-all solution, and DigitalOcean leave it up to you to decide how best to handle a server going down. How you address this depends on the critical-ness of your application. Manual backups are a simple option, frequent automated backups are better, automatic replication can be even better, and if you can't even tolerate downtime then you need some live-live setup. Unfortunately this costs more and more to develop, set up and test as you go down the list, so if it's not a critical production app then it's not always worth it. **tl;dr: Be aware: Stuff breaks and you're not automatically covered for it, by design.**
Maybe go one step further and actively kill your server(s) on purpose at random intervals. The chaos monkey approach. If you aren't actively restoring from the "backup" how can you ever be sure it'll work?
Is Digital Ocean even suitable for production? I hear so many bad things about their support, and how they don't make enough money to care about their $5 customers, how they'll just delete a droplet for all sorts of reasons without giving you a chance to rectify whatever the problem was, etc, etc.
I'd take a look at either S3 or BackBlaze B2. Your backup costs would be measured in pennies. Way cheaper and more reliable than keeping a home server powered up all the time.
$15 credit compensation is a bit of an insult, especially when they regularly hand out $100 credit's to people at conferences! Tight bastards.
You just don't understand the nature of rebukes you get. You think people scolding you for creating yet another framework. But they just criticize its quality. 
So how is [Vultr](https://www.vultr.com/) as an employer, anyway?
I thought this was a pretty well known best practice, but maybe the closer you are to something the harder it is to see!
This was a nice advertisement for the services you listed. 
Respect to your marketing team that managed to create a title that makes you link nuked real fast. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
...this has been my solution. Everything captured and stored elsewhere, specifically financial transactions, is replicated onto local servers at the office. Differential backups are done every hour. SPOF is the internet connection at the office which is not redundant.
https://deadliestwebattacks.com/2013/01/14/a-lesser-xss-attack-greater-than-your-regex-security/
It was removed as part of https://wiki.php.net/rfc/removal_of_dead_sapis_and_exts?s[]=mssql There was discussion on this on internals at the time. The most relevant message I can find is: http://permalink.gmane.org/gmane.comp.php.devel/95252
[removed]
I'm looking at job offers and *a lot* are for people that knows PHP, but also, for people that *also* knows other languages so I don't know what to think about it.
that ", M" saved you there, no its not too late :3 &gt; EDIT: now I'm reading this, almost mocking the language. What's your honest opinion? there are language that arent perfect, and there are languages that arent used and have no ecosystem 
Thank you for your experience. That's encouraging :) 
&gt; I care about certain things, like speed, ease-of-use and just getting things done quickly. I do too, which is why I use Laravel...
&gt; *Best Practice* &gt; Make your controller extend the FrameworkBundle base controller and use annotations to configure routing, caching and security whenever possible. from [Symfony best practices](http://symfony.com/doc/current/best_practices/controllers.html) Edit: jeez, I was merely pointing out the irony in that comment since "that day" already happened and the world has not ended.
Mssql is still supported using [PDO](http://php.net/manual/en/ref.pdo-sqlsrv.php)
That's only useful if PHP is running on Windows. If you're running on *nix, there's [pdo_dblib](http://php.net/manual/en/ref.pdo-dblib.php), though keep in mind that it's kinda minimally maintained and I've had to fix multiple segfaults at various points over the years. The other option is to use the official MS ODBC driver and pdo_odbc, but that one requires a relatively current version of unixODBC which might not yet be in your distro
Sooo... looks like someone needs to perform a backup.
This. is. so. good.
With the way all popular frameworks and bundles right now are done, PHP IS Java. Boot everything and cram all the design patterns you can think of into your work, and port every library you can find from java over to PHP. That is the norm and that's what's being praised. The "right way" of doing things is so focused on putting abstractions upon abstractions that even with modern hardware, we are measuring requests in tens per second. 
Being on the hosting side, it sucks a lot when something like this happens. We have to send out emails and such saying the same thing: "it's gone, hope you have a backup" Inevitably, there is always 1 or 2 schmucks who pay for the cheapest package who then bitch and moan because the solid state is literally dead and we can't recover anything. They didn't pay us for backup and weren't doing it themselves. We end up spending more time answering tickets, phone calls, chat, and emails than they pay us explaining what happened. And finally those idiots rate our service as terrible on the sites we use for advertising. Our personal sites are definitely backed up for this reason, and we have had to use those backups more than once over the past decade.
Uh.... k. I use it in production [2 years 1 month] and have not had a single problem with their service. In fact I would classify their support has better than that of Rackspace.
loooooool. 
PHP is such a good skill to have, even if you don't get a full time job doing it you can always freelance sites and whatnot. 
tl;dr annotations are stupid.
That fails with FreeTDS Drivers, though.
Interesting - thanks for the find!
Seems like pointless language trivia, the same as any "X essential Y language interview questions!" 
No. These questions tell you that the person can memorize facts. It does nothing to show you how they think and how they would solve a real life scenario. These questions are only useful to weed out the most ignorant of applicants and nothing else.
That was clearly not aimed to you but to anyone wondering wtf was your point.
In my opinion interviews should ask for best practices, light algorithm (no quicksort and binary tree operations ffs) and common security issues. Depending on the job level.
I think the most practical approach would be using closures, so something like this: $foo = new LavarelSimfinioWidget; $this-&gt;assertExceptionWithin(SourceInflamerException::class, function () use ($foo) { $foo-&gt;murderKittens(); }); This would have the benefit of allowing checks for multiple exceptions within a test. It's a bit of a pain to have to write one test per case which can throw an exception. I'd rather group the tests that throw some specific exception together.
A general "web developer" role (which is what you're preparing for if you focus on PHP) pits you against everyone with a similar level of understanding of PHP, Apache/nginx, MySQL, HTML, CSS, and Javascript (... this will, of course, be very uneven and difficult to gauge - particularly if you're just getting started in the field). It's far more lucrative to, for example, be an accountant who knows how to utilize third-party API's, parse through files, and implement advanced spreadsheet macros. Adding programming skills to an existing skillset can give you an extra edge in a field where you already have an advantage over competition.
I never see it suggested but I'd be tempted to start from the command line and then involve a web server later. It might make things simpler. Edit: I should have read /u/josh-moody's response properly first. :p
I have the feeling this is exactly what I need on my dev environment where I stage multiple clients of various hosting configurations. I've already installed 7, and 5.4 through 5.6, could you give an example of configuring an Apache vhost to use the appropriate version? Or send me to some documentation, I can't find any.
Yeah I just wonder if you can ever be sure that the restored vagrant will actually function. If you start from day one dealing with servers being killed you'll have confidence that your processes work. http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html
It's not that pointless, but rather useful. If you see these questions on the interview - take up your belongings and run away!
Not cheaper if he already runs the server anyway. More reliable, perhaps.
[removed]
So...we should go back to PHP 4?
There's this, not PHP specific though: http://webdev-collective.clarkt.com 
I figured it out. After installing the appropriate apache packages ([a good guide is here](https://www.digitalocean.com/community/questions/apache-2-4-with-php5-fpm)), the relevant configuration is dropped in /etc/apache2/conf-available/php-fpm.conf: &lt;IfModule mod_fastcgi.c&gt; AddHandler php56-fcgi .php Action php56-fcgi /php56-fcgi Alias /php56-fcgi /usr/lib/cgi-bin/php56-fcgi FastCgiExternalServer /usr/lib/cgi-bin/php56-fcgi -socket /var/run/php/php5.6-fpm.sock -pass-header Authorization Action php70-fcgi /php70-fcgi Alias /php70-fcgi /usr/lib/cgi-bin/php70-fcgi FastCgiExternalServer /usr/lib/cgi-bin/php70-fcgi -socket /var/run/php/php7.0-fpm.sock -pass-header Authorization &lt;/IfModule&gt; &lt;Directory /usr/lib/cgi-bin&gt; Require all granted &lt;/Directory&gt; Then just a2enconf php-fpm, and the default PHP version is 5.6. To switch to 7 for a particular site, drop `AddHandler php70-fcgi .php` in an .htaccess file
Sure, that's fine. I just loved the "I don't give any f***s" attitude of your comment. :)
Well, i'm not using Doctrine, but implementation seems interesting and pretty flexible. Thx for your work.
Was thinking the same thing, maybe name it something as simple as `assertThrows` even. Really nice to be able to explicitly declare what piece of code you are expecting to throw the exception.
None of our themes have blogs, jobs, or content stored in the database. So far, we are have been able to deploy a site, run October:up, change the admin password and be on our way.
It wasn't day one... but 4 months into my current job our production server died... i was able to recover it from backups and redeployed it over night....to the cloud :P
I use DO for production work, basically all my side projects minus one that is on another service due to one technical requirement. If it weren't for that one requirement, I'd move it to DO without hesitation. DO is not for everyone as you need to know how to setup your server/droplet for production use. Security measures, backups, etc. are all up to you. This is really no different than any other VPS solution though. I know I'm just one person, but I have had nothing but good experience with their support. I've had to get help with a few things here and there over the years. I've found their support people to be super helpful. Most recently I did a backup then ran a bunch of updates which broke the fuck out of everything. This wasn't the problem, but restoring the backup was. I opened a ticket and was emailing back and forth with someone in minutes in the middle of the night. Resolved the problem after a couple hours of fiddling and they credited me $15. Sounds like $15 might just be the standard support olive branch. Hardware failures are a thing. No server solution is 100% immune from this. I don't exactly understand why murze.be is singling DO out here. Sounds like DO did all the right things notifying and working with their customer to fix the problem. Sounds like murze.be did all the right things having a backup solution and the ability to restore. At the end of the day the message of this post is good, but the clickbait title is kinda bullshit and is at DO's expense without justification.
I think it's suitable for production, IF, you have an in-house hosting expert, or team, on staff.
Well, I knew a little bit going in, I'd toyed with various web things and coding languages off and on but had nothing close to professional level skills. When I decided to make a living at it I took a three month course at a local college. The instruction was actually pretty lousy, but taking the course put me in front of a desk for eight hours a day, five days a week and I made good use of it. I often just ignored the instructor and did a lot of self-directed learning. While in the course I started hanging out at local meetups and making friends in the local dev community. I landed a couple of smallish freelance gigs through the college's placement program and then I started picking up other jobs through the connections I made in the meetups and I've been doing freelance work ever since. A few of my classmates, some of whom were older than me landed salary jobs right out of school. (They're making more money but I'm having more fun.) The older students who were going through a career change did a lot better coming out of that course than the young kids did because we all busted our asses and taught ourselves a lot of extra material. It wasn't the class we needed, just the time out in to learn. You don't need to take a class, but you will need to put in some hard work. If you've got good self discipline and can take some time to focus on learning you can break into this industry. Just keep in mind that there are a fair number of beginners and hobbyists out there competing for the entry-level work. Learn as much as you can and use your age to your advantage. Network your ass off and present yourself like a professional and you might just look pretty appealing to someone who's sick of hiring cocky, unreliable kids.
Most of these questions will make me reconsider my application. - Encryption of passwords, - Javascript questions, - System administrator questions, - Smarty (is that still being used?), - The use of mysql_ functions to name a few.
Yes, apparently Laravel is something I should also learn. Probably some Java too, but later. Thanks for the invitation, but I'm from Argentina :)
https://s-media-cache-ak0.pinimg.com/originals/95/dc/1f/95dc1faebf2b7947c56cca0fcea44a25.gif
Thank you very much for the advice. I'm a beginner in this field, and any experiences are useful for me. I'm kind of bad at networking. Do you know a website or subreddit to learn from?
I don't see why this should be installed globally anyway. What's the benefit? Just make it work in a local directory.
You can calculate image hash (not file) using image blocks, basically resize image into NxN square and later normalize it into some string (based on brightness for example). Obviously it's not very accurate but worked well for me 8 years ago. There is a lot of sample libraries which are doing so now: https://github.com/kennethrapp/phasher
Welcome to the club :) I've been doing it for ~9 years and I still learn new things every day.
HTML, CSS and MySQL are quite easy to learn. They all follow different conventions, but after a while, you can more or less guess what you're doing and get pretty close. PHP and Javascript are more difficult (but the most rewarding, at least for me). You don't *need* photoshop; but some photoshop skills are nice to have for images, icons, logos. *I* would prioritise PHP and Javascript and if you get as far as making money of it, outsource the rest until you know them better (there's always family teenager who knows their way around photoshop and who'll work on the cheap for cigarette money).
&gt; Top 10 Comments in this thread -- number 4 will shock you! Meh, I'd expect more for $1/comment. How do I cancel?
That would be our other CaaS - Cancel as a Service platform. I think they charge more.
&gt;abstractions are performance bottlenecks This is how retarded you're being.
*Thank you* for that. That's very helpful. :)
&gt; And since an annotation such as @expectedException is technically only a comment and not part of the code you have to use a fully-qualified class name such as vendor\project\Example when you use it. This point is moot, Doctrine's annotation library doesn't require fully qualified class names.
I also agree with this, the documentation is lacking.
I much prefer to use the "ruby" way which is: name() name($name) I call it the "ruby way" because its where I learned setters and getters
Why do you even post here, if you're not interested in constructive criticism? The people replying here are all seasoned developers who try to give you feedback. Judging by your replies, you're not interested in learning anything new and rather want to do stuff as it was done back in the days.
Over night? That's when I sleep.
Doesn't support `Class::class` either though. And as far as I know you need the FQN unless you're in the same namespace, which isn't that convenient if you namespace all your tests behind `tests\` or if your exceptions don't live in the exact same namespace as your class.
:-(
I have made you a little [pull request](https://github.com/olscore/ornithopter.io/pull/1).
Abstractions for "academic's sake" are indeed poorly applied abstractions. Abstractions that are surgically applied to keep the code both easy to understand, quick to write, AND more efficient, are correctly applied abstractions.
To reiterate [from the previous discussion](https://www.reddit.com/r/PHP/comments/41bm7j/new_rfc_allow_specifying_keys_in_list/cz19lz5): &gt; On one hand, neat little convenience... but on the other hand, I'm nervous about anything which encourages people to use PHP's ancient array constructs for key-value stores more than they already do. (Especially in all these scenarios where the keys are known at design-time and being hardcoded.) More generally, I'd prefer a fast and convenient way to define a struct or named-tuple, where the keys are fixed and you can type-hint it and statically-check for certain problems. 
Brilliant.
http://php.net/manual/en/imagick.compareimages.php Examples in man
There is a team working for MS at the SQL Engineering department actively working on sqlsrv extension for PHP7, 64 and x86, Windows and Linux. They've just release a tech preview binary for Windows. https://github.com/Azure/msphpsql/issues/58#issuecomment-177054661
Win 32 binaries here: https://github.com/Azure/msphpsql/releases/tag/v4.0.0
I agree that your example is correct but I'd just like to point out two things: 1. Any half decent IDE will list the parameters and types already, without the need for it to be embedded in the syntax. 2. This pattern in general actually makes it harder for things like static code analysis to do its job. Personally I'd much rather see named arguments as this pattern is often used in lieu of them. I can possibly see other examples where this syntax may be useful but I don't think the examples you gave are very good ones. If you are using options arrays like this it's usually a bit smelly and an indication that something could be done better.
&gt; Any half decent IDE will list the parameters and types already, without the need for it to be embedded in the syntax. Sure, but you shouldn't need the IDE to be able to read code. &gt; This pattern in general actually makes it harder for things like static code analysis to do its job. Only for tools which aren't used to it. &gt; Personally I'd much rather see named arguments as this pattern is often used in lieu of them. Named parameters might be a good thing, but there's a number of issues which make it unlikely we'll actually see them in PHP. This is a simpler alternative without their problems.
Useless.
I've can't find any corresponding uptick for other frameworks in php or another language (rails), or any CMS like wordpress or drupal.
/u/b1ack1323, please do not delete your questions after you have got an answer. It might be useful for someone else, and meanwhile readers now might be wondering why their time is being wasted by an empty post that has been voted up +7. (You probably wanted /r/PHPhelp anyway - /r/PHP is not for support, as the sidebar says). 
Symfony and Doctrine are javaesque frameworks. 
I'm all for removing the annotations. In my experience, they have produced more false positives than they have for successful tests. I like the idea of calling the expectException() right at the moment I should expect an exception, which should cut down on some of the false positives. Unfortunately, there is nothing that can be done if a developer decides to always throw \RuntimeException for every exceptional situation. ;)
Almost certainly an anomaly in data collection. I see similar up ticks (though less pronounced) for other search terms.
Right? I'm more interested if the candidate fits with our team than if they know gotcha #352
I didn't delete anything?
[Adding Laravel to the mix shows an interesting trend](http://www.google.com/trends/explore#q=%2Fm%2F09t3sp%2C%20%2Fm%2F02qgdkj%2C%20Symfony%2C%20%2Fm%2F0cdvjh%2C%20Laravel&amp;cmpt=q&amp;tz=Etc%2FGMT%2B5)
Your post now reads `[removed]` for me - not you? 
No, I haven't done anything to it and it doesn't have that tag on my reader. Odd.
Alright, apologies - I will report to a mod as a bug. I'll try logging out and back in again in case there's a weird caching bug going on. 
I believe it's [node.js, as you can see when added to the graph](http://www.google.com/trends/explore#q=%2Fm%2F09t3sp%2C%20%2Fm%2F02qgdkj%2C%20Symfony%2C%20%2Fm%2F0cdvjh%2C%20Node.js&amp;cmpt=q&amp;tz=Etc%2FGMT%2B5)
Could it be automated with those options? I usually just FTP down the files and extract a .gz of the SQL database via SSH - manual yes, but also free
Does it mean you do not have error_reporting(E_ALL) in production? That's bad. Yes you should crash on every warning and silence those warnings you do not need. In case of @file_get_contents you want to check the return value and act accordingly. You do this already, right? So where is the problem with silencing such warnings? You simply don't need them. Not in dev, not in production.
I have a question about domain design. Let say I have "Store" entity. Store has "Address" value object. Address can have types. Online and Physical. Store can only have one address. It's either Online or Physical. Online has string value of URL (e.g example.com) while Physical is string value of an address (e.g Street 123 No. 456). Physical can have additional data like Province, Zip Code, etc but Online cannot. How should I design my value object in a domain design? Or is there any better design other than value object?
Lordy, you're not still playing this record, surely? PHP and Python are both fine languages. If the OP has time, he/she should learn both, and pick one according to taste and employment opportunities in their local area. 
Your humility, explanation, and contributions are awesome! We all have stories like this, just most not as public.
CodeIgniter is still a supported framework, and it is still very powerful for the size.
Try as I might, I just can't see the sarcasm there. My bad, I guess...
Sorry about that. Looked like a support thread when I was modding earlier, so I had removed it. I've re-approved it now.
Hi, We´re starting with Reddit, so we managed to use the YouTube´s Sharing Options. By the time, I believe we will get used to this tool and add more posts.
Thanks mod. I think it probably _is_ a support thread, but in those cases, a ghost ban is rather confusing (see convo above). Would it be better in deletion cases that a mod message is added? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Deleted? Wtf?
I'll think about adding something like that with AutoModerator. Shouldn't be overly complicated.
Probably because it's hard to get fundamental language capabilities to pass the RFC stage. It's easier to dress up existing clumsy syntax since people tend to agree with it more easily.
Volume gained in node doesn't match volume lost in all other frameworks combined.
Ruby on Rails also took a hit. This is likely just a data collection issue.
Hmm, coming back to what you said before: &gt;But in dev you would not be able to test this without either silencing the warning or putting your env in prod mode. Why can't you have basic error handler which converts warnings to exception, in dev &amp; in prod? Then you can try-catch for these exceptions to get warning message. If exception is unhandled, app will crash in dev. In prod you handle with exception handler. So I don't really get what you mean with: &gt;maybe we should not crash on e_warning, How do you handle let's say fopen currently in dev?
Named tuples and structs would be great, even just structs would be enough. No, not objects. Structs!
Strictly speaking from a technical point of view, they are. Assembler vs C vs high level language? What I'm saying is the trend is leaning too much on the far end of the spectrum. Too much object orientation correctness at cost/expense of performance. Too much generic code, trying to solve 99% of the problems outside your needed 1%.
Yes, but Google Trends isn't measuring installed platforms, it's measure what people are searching for. A change it one does not mean a equal and opposite net change in the others, as they are not mutually exclusive. Why I believe it's node.js or similar related technology is the timing. Right at the point of the dips, node.js is released. At the time it was the hot, new, radical platform, and I'm sure that many people were trying to figure out how to get it to work, and what it could do for them, hence the growth in searches, possibly in place of them searching for things related to PHP. While the volume shift doesn't match perfectly, its difficult to use that to discount as it appears difficult to have more than 5 things used to compare. Whos to say that people were searching for "node" and not "node.js". The timing of the rise of node.js seems too fitting to ignore without a better explanation than volume shift not matching.
I just cited concurrency as an example...but there are other aspects. For instance, I can turn on and off the garbage collector, but I don't have much control about its behavior.
You win this time! And you're entirely right. People are going after low hanging fruit. But my argument is that is due to the nature of the language as much as it is due to ease of passing an RFC.
Different people have different priorities.
&gt;PHP is a fine language. No.
This guy debugs. It's almost like computer programs are extremely deterministic and tend to fail in unpredictable ways when one allows for ambiguity...
I'm talking about Sep '09 too, it goes up before it comes down again.
We actually use the hash as the filename of the uploaded file. hash: aabbcccccccccccccccccccccccccccc path: aa/bb/cccccccccccccccccccccccccccc.extension The first few characters are used as folder names to avoid performance issues where the number of nodes in a single directory is too high. To check if a file has already been uploaded simple check for the existence of the file at the same location. You can also `touch` the file to update the modified time (should that be useful to you) or even replace the file entirely (but there is little advantage to doing that, other than ensuring that the existing file has not suffered data corruption since first being uploaded). 
Necessity is the mother of invention. Since the concurrent paradigm isn't a largely necessary one for a language run mostly as a FCGI/CGI language you just don't see it.
We deploy from scripts, and backup daily; with restore scripts in-place should we need them. Pre-deploy, we have local up-to-date environments for development and staging, so aside from the annoyance factor and time to check once deployed, it'd be a cakewalk. 
&gt; But, the business rule is one Store can only have either Address OR URI. ya... that's what they tell you NOW !!! Plan your data properly and when they change the business rules down the road you'll be in a better position to manage the change. If your code is going to be littered all over the place with if else statements, then maybe look at using strategies to separate all of that logic into separate classes, then inject your strategies where they are needed, and type hint for a common interface. Then your client code can just call methods from the interface, but the appropriate strategy class will do the work.
There are now three ways to install random_compat: 1. With composer (the easiest) 2. Manually (download that .tar, extract) 3. Download the .phar and .phar.pubkey; from then you only need to replace the .phar We also include a GPG signature of the ECDSA public key so you can verify it's really ours. We also include the command line tools we used to build and sign the Phar.
What do you think of something like WebWorkers, a detached thread that could signal/fire a callback in the main thread? I think it would take a lot of careful design/thought, but it would be nice for people with less programming experience/interest to be able to solve more problems. But lock contention is not something I want to be solving when writing CMS extensions that is for sure :)
Because of bike shed problem.
&gt; But my argument is that is due to the nature of the language as much as it is due to ease of passing an RFC. If I said to you in 2000 that one day PHP would have *any* kind of strict mode, you would have laughed in my face. It isn't the year 2000 any more ... it's nature is, to a large degree, dictated by RFCs that pass the vote ... and while you will hear people use it's nature to argue against certain features, those voices aren't enough to stand in the way of progress.
&gt; several months of unpaid work which may result in members voting no Is there a possibility to have member's vote on particular feature *without the implementation* so that this issue can be avoided.. &gt; Why is it that of the millions of shops relying on PHP, as near as makes no difference none of them allow their staff to work on PHP ? The *internals* team have to blame on themselves, [From someone who keeps a close watch on php-internals for over 2 years.]
&gt; Is there a possibility to have member's vote on particular feature without the implementation so that this issue can be avoided.. That's a reasonable question to ask ... I don't know that you will care for my opinion on the matter ... it is just my opinion ... In some cases, it would be like voting on whether or not we should implement time travel in SPL :) It's a matter of fact that not everything can be done *reasonably*. The proof that your idea is reasonable is actually the existence of a patch that is worth talking about merging. In some cases patches are totally rewritten before being merged, but they serve as proof that it's a reasonable discussion. Discussion from the outside might seem like a kind of nattering between old cronies, sometimes it may even devolve into that :) Given that our most precious resource is time, discussion needs to be as direct as possible, the implementation itself is one of the best ways of trying to ensure discussion is productive, and direct; You only have to discuss and solve problems you do have, not problems you might have. A "no" result isn't the end of the process, most of the time. It should serve to redirect the research that produced the RFC and the patch, you have to have more time ... It all comes down to hours available, which is a result of the number of people available, which is a result of the number of managers neglecting to actively encourage and or allow their more than capable staff to help ...
If you are tech savvy, than you will be able to learn PHP, but I don't know how viable would it be as a source of income in a few years - there are a lot of people studying programming out there, and a lot of poor countries where the programming could be outsourced to, especially when it comes to junior level stuff. 
&lt;/jerk&gt; &gt; The natural save-refresh loop for development let me iterate my way to solutions and experiment with different things very quickly. Excellent advocation of interpreted languages
Web languages become just as complicated due to their dynamic abilities and the large systems they take part in. Programmers that just look at PHP, Ruby or Node and say 'Easy' have only looked at the basic scripts, they have not had to design an entire well working and secure system in that language. A web programmer doesn't have to deal with the problem of operation blocks. You don't have to write an entire class every time you need to handle some dynamic data, the web language handles that for you. You don't have to worry about the trivilties of implimentation of basic logic. Web languages already do that for you, and for good reason: This makes it possible to focus directly upon solving the problem infront of you, and not solving the problem of 'where did I put that pointer?', or 'how do I access THAT type?'. 
OMG, I can't believe spammers can be *that* dumb.
&gt; Why is it that of the millions of shops relying on PHP, as near as makes no difference none of them allow their staff to work on PHP ? Of those millions of shops, how many of them employ people who would be qualified to work on PHP? It seems like a weird catch 22 where the vast majority of php developers are not competent C programmers, and yet the shops that rely on PHP probably do not have an incentive to *have* C programmers on staff. There is one rare multibillion dollar unicorn that does have the funds, staff, and business needs for advances in php, but it seemed like they decided that it would be a better decision to fork php in order to get their business needs satisfied rather than work with the internals team to advance the project as a whole. As an aside to the funding question though, what if Im a small shop, and rely on php, dont have any spare staff time to give, but could afford to pitch in 1000$ to help php. Who would I even give that to? There's no org that I can pay that I can see. Theres no account manager who has a database of which shops rely on php. And there isn't anybody asking those shops for money or time. So, why aren't more shops helping? Because nobody is asking them to. But even if they were, who should they pay? Do they give money to the Apache foundation? Linux foundation? MariaDB? Do you give money to the Drupal Association because you're a drupal shop? Or should you pass some money to the openssl guys? I don't think anybody has truly cracked the problem that once you have an open source project of a particular scale, you cant rely on volunteer labor to manage it very effectively, and you need funded positions to keep everything sorta in line. - Unless there are major services companies with funds that are able to pay for project positions. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Web development gets a cred for not being "real programming" not because of the technology itself, but because it's so mainstream and flooded with poor solutions and badly trained, down to outright incompetent people, that it gives the whole industry a bad name. This tends to happen with mainstream platforms. So, sure, if you program in PHP/JS it doesn't mean you're a bad programmer, but statistically speaking for the whole industry, chances are that you are. I do write a lot of PHP/JS code myself, but I don't fell it's "sticky", when I need to use Java, Python, C#, I do it freely without saying to myself "oh wait, I'm a PHP programmer, I should use PHP". That's what I recommend to everyone. Don't be a {specific platform} programmer, just be a great programmer who's ready to learn anything fate throws at them. Then you'll be impervious to the stigma of the {specific platform} developer and feel free to use the right tool for the right job, *inluding* {specific platform}. More specifically, if you want to be less of a "PHP programmer", and a better programmer who happens to also use PHP, I recommend you sample some of these: - Rust - Erlang - Java or C# (check out also the mobile frameworks for these: Android's SDK and WinRT) - TypeScript (that's actually quite essential for big Node.JS or browser apps) - Swift (iOS) On the browser side, if you don't want your CSS to look like a monkey-in-a-hurry wrote it, I also recommend SASS or LESS as a layer which allows "real programming" to happen for your site/app styles, with variables, macros, reusable functions and all the nice modularity and reuse features a "real" programming language has (and CSS doesn't by itself).
After checking this out. We can't see how this would work. The project executes php files within the project and also performs tasks such as running composer installs *inside* the project to run solutions which have dependencies. I do think this could work with a phar without considerable work. We have relaxed the symfony requirement, it will probably work now.
&gt; Of those millions of shops, how many of them employ people who would be qualified to work on PHP? Most of them aren't even qualified to work *in* PHP.
That doesn't really sound like a problem caused by the programming language...
Quoting this in a talk I'm giving, this morning, at SunshinePHP. Because it's great. 
Sure, that's your view, but _my_ view is that you are putting way too much effort into telling people about it. You're becoming a street preacher full of zeal and evangelism, and every time someone suggests you put a sock in it, your message becomes even more shrill and urgent. Why not just let people use the languages they enjoy? 
&gt; I never mentioned giving out money to anyone, so I'm not going to quote or directly respond to "who should we pay?" ... But do you think that could be a good idea? I.e. companies or individuals pitching a small amount of money each to pay for core developers? Is that doable in reality? I'd happily pay a little bit each year to support full time developers.
Looks nice after skimming the code on my phone. I will play with it on monday. How can I use it to create offers in bulk. Let's say: 500 offers? Would be nice if there was a $plaza-&gt;createOffers() If it's production ready, I can make a pull requests for that feature if you'd like.
TBH I am not an expert on the modern way of achieving concurrency. I do use http://amphp.org/and in particular https://github.com/amphp/artax/ as a way of doing concurrent HTTP requests. I don't think traditional threads are actually that useful a technology. Although they do allow some forms of concurrency to be done, they are not trivial to use, and don't scale as well as something like 'Go channels', allegedly. 
As evidenced by how easy [Play](https://www.playframework.com) is to make changes to. Edit: though I still empathise with anyone who has to do this much work for a single iteration.
&gt; Why not just let people use the languages they enjoy.. That would be fine, if they didn't say things like "php is fine", "php is great" etc etc... 
It's fine that you disagree with that, but you become the wild-eyed street preacher when you make it your mission to teach large numbers of people that they are all wrong. Let those folks build great (and some not so great) pieces of software in PHP, and you carry on using using Python. 
It makes discussions annoying but that's not it.
IPA characters are available in Unicode, you just need to make sure you're using Unicode consistently. PHP The Right Way provides a good overview: http://www.phptherightway.com/#php_and_utf8 In particular, MySQL is weird and `utf8` is not the encoding you need, rather `utf8mb4` – `utf8` doesn't actually include all UTF-8 characters, though all the stuff you need for IPA is within the range for `utf8`. Either way, make sure all tables in your database use `utf8mb4`. Your database and table encodings might not match. In order to make sure your HTML output and HTTP input is correct, you must include encoding information in your HTML pages in some form, either as an HTML element (`&lt;meta charset=utf-8&gt;`) or ideally as a header (`header('Content-Type: text/html; charset=utf-8');`). You're reading data from an XML file, right? Make sure you're reading from it in the right encoding. If whatever you're using to read XML expects Latin-1 then it will be garbled.
You got me wrong. My warnings are not directed at people alreading using the language (even though it irritates them). My warnings are directed to people who want to pick up php as their first langauge or their entry into web development with out knowing it's flaws...
I've had nothing but good experiences too; any time something has gone wrong they fixed it too. I think this is because rather than point my finger and be a dick, I ask questions, keep a log of past resolutions (any company growing like DO will have new people, so you have to factor this in), and I follow server-management best-practices I know and understand.
&gt; Is there a possibility to have member's vote on particular feature without the implementation so that this issue can be avoided.. Only trivial changes could get to a vote without a patch being complete. For anything complicated that would have language changes, it would definitely need at least a partial implementation before getting to a vote. However there is some value in having an RFC be written up and discussed even without a patch. For example, I've spent probably about ten hours investigating and writing up https://wiki.php.net/rfc/consistent_callables . The feedback I've had on list and elsewhere, is that it's probably going to be accepted, so I'll continue to work on it. Actually, I'm probably going to put it to a vote without a complete implementation done. I'm certain it's all possible....but there is probably a significant amount of work to change the SPL code to work with it, but all of it would just be small details. For stuff that brings new features to the language, then there really needs to be a clear path of how they would be implemented, otherwise people would be voting on stuff that might either not be possible, have huge BC breaks, or only be possible in horrible hacky ways. 
&gt; Assert::nullOrIsLowercase Wow, great assertion, there. What exactly are you trying to assert in that case? That your code is shit? 
This is the right answer to some extent. You should never be a 'PHP programmer' or a 'Java dev'. You're a problem solver, the language is just a tool, different tools have different abilities and problems. This is one of the big reasons those who subscribe to /r/lolphp or other such childish communities makes you unhirable. Any good lead dev doesn't want someone who purposely makes themselves ignorant on how to solve a problem.
Eh.. `nullOr...` assertions are common practice. You can't just assert that incoming input is a valid number, because optional inputs left empty will fail the assertion. But you don't care that the input is *always* a number. You only care that it's a number only when a value has been provided. Hence `nullOrIsNumber` or similar. Some libraries build it into the base assertions, and others (like this one) provide both variants.
&gt;MSSQL on *nix What the fuck are you doing?
&gt; you are evangelising to could go on to do great things with PHP Sure. They might. But they also have better chance, less frustration and faster results if they use a something better. &gt; language wars are pointless. This is not a language war, but a spreading of awareness against a bad practice called Php.
Dude, no need to be rude in first place. fuzzycardboard already replied. So just read the comment.
The thought does occur why we need such basic assertions in a library: assert(is_null($x) || ctype_lower($x)); Assert::nullOrIsLowercase($foo); A library obviously can't cover all possible conditional expressions we might want to have, therefore the language has assert() and boolean expressions. I have a debug checks library, but it has more complex conditions like Test::callerIsInstanceOf(Foo::class), or Test::isFormat($formatSpec, $input); This makes sense in a library because it's not a one-liner to implement when you need it. But nullOrLowercase()? It seems written because of someone's completionist's inclinations and little more. There's no value there, aside from maybe the cargo cult feeling you're doing the right thing by using an assertion library, and therefore good things will follow somehow. Not to mention that when it comes to true assertions in production code (and not just unit tests) you want to wrap your assertions in assert() so the code can be disabled and removed on production deployments. In which case to do it right you need to do this: assert(is_null($x) || ctype_lower($x)); assert((function () use ($foo) { Assert::nullOrIsLowercase($foo); })()); Of course the library could just return a boolean, which would allow this: assert(Test::nullOrIsLowercase($foo)) But that's not what it does. 
I've dabbled with x86 assembly and OSDev, I've written DOS GUIs in Turbo Pascal, I've written a web server in C++, I've written desktop applications in Delphi and C#... I would gladly have someone teach me how to write a device driver for a USB dongle I've conjured up ($CHICAGO$, $WINDOWS NT$, am I doing it right?), or let me have the time to jump in neck deep into the Win32 API. But customers don't want that. Clients don't want that. Employers don't want that. The dev world has quickly shifted towards the browser, and I have to put food on the table. That doesn't mean I stopped having fun, because web development, like any other, can be and usually is fun. That also doesn't mean I've stopped toying with Arduino or shell scriping on my raspberry pi. I grab whatever info and resources I have, and I construct a solution. That's what *real* programmers do. The rest is just needless circlejerking, and those who look down on a programming language usually do so in order to stroke their ego and justify their own choices.
Sorry, whats this for exactly? I don't get it.
just think of builder classes or having instances with optional values. If value is set, it must match what it is expected, otherwise, just let it pass. It's just optional, you may ignore nullOr and go full-assertive. I prefer going full assertive 99.9% of the time.
Running a network of about 25 Linux and FreeBSD machines (some virtual, some physical) to handle about 80% of Switzerland's business food orders. Unfortunately, some of the systems we have to exchange data with run MS-SQL on Windows. I'm not going to run Windows machines just to import some data from third-party servers. Not when we're all unix people with unix experience. I never said I wanted to run MSSQL servers on *nix. I want to run clients to talk to MSSQL servers very likely running on Windows (I don't care - I just talk on TCP port 1433 :p) 
They still aren't. Abstractions *can* be slower, but they don't have to. An abstraction doesn't necessarily mean (slower) polymorphic dispatch. E.g. Go has classes without inheritance (interfaces only)… this still are abstractions, but compiler now can inline the code and resolve the dispatching. [Also note that abstractions can be also just simple functions without class binding etc.] Optimized code without abstractions will be the fastest, but your code with abstractions can be just as fast as code without. Also, over-engineering is a separate problem which is absolutely not a reason to call abstractions a bottleneck. The abuse of them is.
&gt; You should never be a 'PHP programmer' or a 'Java dev'. While I'm *not* - have never considered myself one (been doing this for too long) - clients and employers still do. Most people think of their particular problem, start with the tech in mind (especially employers, for many reasons - some valid) and say "we need 2 .net people". Had a client with a problem this week - I said "I can handle that". "oh... I'm sorry - I just have always thought of you as a PHP person". Because, when working with him, that's all he thinks about. The project is PHP-based, and I'm on the project. Nevermind that we've also set up a testing environment, automated continuous integration and deployment, virtual dev environments, etc. I'm doing "PHP" in his mind, and then he goes on with the rest of his business. 
I'm not sure how this addresses the points I've made.
PhpStorm has a REST API debugger?! Mind = blown.
What exactly is impressive about being able to debug an API? Xdebug is already able to handle this through JIT sessions and conditional breakpoints via xdebug_break(), and this is suitable for everything not just "REST APIs", which in this context is just HTTP API, but I digress.
Have you memorized all of the functions/methods of the languages that you utilize? Or do you frequently use notes when going from language to language?
It take 30 minutes to make a site mobile friendly... just do it
That's hard to say. C# is my most recent. PHP/Java are my main ones, but C# is quickly overtaking Java.
I like to put my IPA in a pint glass, preferably one that has been in the freezer for a while. :)
[removed]
Are you thanking yourself, or what? I don't get it.
That's cool. A while back I was looking for an Rx style library for managing data imports, RxPHP looked dead in the water and ended up using something else. Going to take another look.
[removed]
I dont know whats worse, not having tests at all, or thinking 'ill do them later'
If this library is meeting your needs, great. But if I was vetting it to include in a project the lack of extensibility would be an issue. For example, how can I change an assertion to suit my needs? (Imagine I define nighttime as after 10pm.) Or how can I add my own assertions, isPantomimeHorse and nullOrIsPantomimeHorse? I see this as a big problem with using static methods, ever.
Haha, no I was saying thanks for sharing it here.
Thanks, I thought this is a really shitty way of writing unit tests or something like that but after reading the article I must admit that it's REALLY awesome. I am happy that I asked first before answering that I find it's useless junk - which it is not. Merci. :-)
I think you would get debate, it doesn't require much effort for people to get involved there. Some people will vote no if the patch adds a lot of complexity however. If there is no patch at all, that could cause the same thoughts. If it passed I see a couple positive outcomes * Someone familiar with php-src is interested, and they implement it for you * It serves as an inspiration in the future. Someone may implement/propose a subset of your idea that is easier to implement. Also, there is a running list of [Pending Implementation](https://wiki.php.net/rfc#pending_implementation) rfcs. So looks like a known outcome!
Ah, that's where you are meeting significant disagreement from the community. You are saying that one language is clearly better than another, when this is not objectively the case. This _is_ a language war you are waging, and I would dissuade you from wasting your time on it. 
&gt; I prefer going full assertive 99.9% of the time Then what's the point of your library? Is not clear to me.
I can't find if this package includes any sort of visualization app (to see the results)? If not, what do you use?
Idea is to reduce the amount of code for implementing assertions in your model and also simplify the code paths to implement assertions. That's if you're doing assertions. if (null != $value) { Assertion($value); } or nullOrAssertion($value); i prefer the latter. 
Great work for such a young budding programmer! Have you thought about making it compatible with [Composer?](http://www.getcomposer.org) Also, you may want to browse [the repository of agreed upon PHP coding style standards.](http://www.php-fig.org/psr/) (Specifically PSR-1, PSR-2, and PSR-4.) By doing those two things, you can ensure more exposure and potential users of your library because most modern PHP developers follow these guidelines in order to maximize compatibility between libraries and their applications. Final Edit: I highly recommend, in addition to those two things, to browse www.phptherightway.com!
Asserting that a value is non-empty or satisfies some other criterion is the 99% use-case, so it's completely reasonable to optimize it in terms of API terseness. I can't say I've ever wanted to assert lowercase before (transform, yes; assert, no), so I agree with respect to it probably just existing for completeness. Is that a big deal, though?
^ this. No one asked me to share this, I share anything interesting I come across.
&gt;when this is not objectively the case... It is objectively the case. There is a limit where 'better' or 'worse' being subjective ends and the shittyness of Php puts it way, way beyond it. 
No need for the language to be interpreted; you just need to have the compiler invoked on the request during development. This is how 1/2 of ASP.NET works.
[removed]
&gt; I think I followed the standards.. right? Not even close. How exactly did you expect to be following standards that you've clearly never bothered to read?
Good article! My conclusion, after about 20 years doing PHP, is that while there are more elegant languages out there for sure, since I dont have the time or inclination to really focus on them, and since I can express myself quite fluently in PHP and since I've never built anything even approaching the limits of easy scalability for PHP that I'm good with it. My other observation is that many software engineers are pretty self centered and often emotionally immature as people go, which accounts for a lot of the continual 'my stack is better than your stack' conflict that said engineers engage in. 
There are a multitude of standards you may follow. However composer is definitely a very good place to start. Once you figure out how to create a composer project. Add any dependencies you may want or need. Guzzle looks like it would be useful for this particular script you made. I definitely woulnd't use constants for the purpose you did. A config file is more appropriate. Another thing you can look into is to make it platform agnostic. There are multiple URL shortner providers out there. If you built an interface that provides a contract for the integration of all those platforms into a standard structure, your code would be much more robust. 
Yes, I think I'm going to make a composer package out of this. Great idea! Very good advice, thanks :-)
Thank you, I try and keep my code's standard as high as quality as possible. Yes, again, thank you so much for the advice and feedback - means a lot! Thanks!
IMO - You probably won't find many workplaces jumping on it just yet, except for maybe some greenfield projects or some very eager developers. It's a good upgrade, both language and performance-wise, but depends on the teams capability to update everything they run. If you're pretty cluey with PHP, take a read over docs like: http://php.net/manual/en/migration70.php and get a feel for what's changed. It wouldn't surprise me in the slightest to see an interview question about it. I'm currently migrating a side-project to PHP7.0 and it's been fine in Symfony, which has luckily stamped out a lot of the bad practice that PHP7.0 has eliminated (see the "backwards incompatible changes" section) and Symfony is 100% PHP7 compliant anyway. Just start getting a feel for the better typing you now get, rocketship operators etc :)
While this guys phrasing is crude, he's not entirely wrong. You don't want users to have to modify your library's source to use it properly.
Ok.
What's the difference between this and stash? 
why people downvoting? is something wrong in my question? please let me know. thanks
so what should i do now?
Yes, I pushed an update a few hours ago that lets you do this.
You don't even know how great that is to hear from someone other than myself trying to belive it! Thanks for cheering me up abit.
[removed]
I like it. However looking at the cURL option should this be set? CURLOPT_SSL_VERIFYPEER =&gt; false, Admittedly this isn't dealing with CC numbers or passwords, but (and I am not using any Google APIs so I may be wrong) this could lead to the API key being compromised with a MITM attack. Does Google allow launching of compute instances with this key?
I wouldn't get wrapped up over what people think about what you do. You're doing it for your own enjoyment, not theirs. Code how you want to and experiment, its how you learn and how you drive innovation.
Great but how do you get over the hump of releasing the site/code to the world? Just release it? I deal with something like this on the same level as OP. I can do some great work with PHP/JS/MySQL/etc... but when I come time to release it... i back down and always seem to find a reason why i shouldnt put the site/code out there. It freakin sucks.
Please ask in /r/PHPhelp 
sad in what way?
Grails make a lot of that better if you ever get the chance to play with it (and I definitely recommend intellij for it as it deals well with dynamic finders and such).
I'm not a fan of the interface. In my opinion, you should only have to create a single Google URL shortening service, and that service can generate any number of shortened urls: $api_key = $config['google_api_key'] $googl = new \Googl($api_key); $url1 = 'http://reddit.com' $url2 = 'http://ebay.com' $s1 = $googl-&gt;shorten($url1); $s2 = $googl-&gt;shorten($url2); Welp, nevermind, your example is outdated. Looks good. I see your api key ;). 
Thanks. ive been so close to releasing my site(s) so many times. I just need to do it. Blows me away when people can just create something and release it. It also doesnt help that im a perfectionist too. That, id say, would be my biggest downfall in releasing stuff... i over think/analyze it.
I urge you to make a single comment without mentioning either "cheap", "subpar" or "deceive". It's like someone is paying you to say the same thing over and over, despite you're only embarrassing yourself.
There's absolutely nothing wrong with exploration outside of production. It's how you grow. If anything, your buddy was doing you a favor by bashing your code to pieces. From there you can take his criticisms and analyze them one by one. Do they have merit? Was he just attacking your code? Now that you've analyzed it, what should you change? What's good the way it is?
Mechanically memorizing the methods/parameters and so on is a job for the IDE, not a job for a human. If you want to be a productive modern programmer, you need modern productivity tooling. If you code in a naked vim, you can't be productive in all languages I mentioned at the same time. To answer your question more specifically, no I don't memorize. I just know what I want, where I can find it, and how I can search for it. Programming languages share a lot of principles, so once you learn a few, there isn't that much to learn in the next one. I intentionally included Rust and Erlang in the list above as a mind-expanding excercise, as these two really teach you new ways to think about software. But PHP, Python, Java, C# and TypeScript, for example... they're essentially the same in all the important ways, and only differ in details (names of things, particular APIs etc.). If we would ignore the differences in their implementation, at a very high level they can all be seen as Java spin-offs. PHP started imitating Java with PHP 5.0. C# is a blatant ripoff of Java in .NET 1 and has since evolved a bit on its own path. TypeScript is a JavaScript layer modeled on top of C#, which is modeled on Java etc. 
Even if your code is totally shit, push it anyways. If anything it'll give people an idea, later on down the road, your sense of progression. I work as a PM and when I'm looking to hire a developer these are the things I look for. I don't want someone who is only showing me the best work they've ever done--because I honestly just don't care. So you can output good work; big whoop. Something far more interesting is how long it took you to get to that point and what you were like when you __weren't__ outputting your best..
Maybe your OS needs a tweak as well. This is a bit old but may do the trick: http://www.lognormal.com/blog/2012/09/27/linux-tcpip-tuning/
What does the code look like? I once optimised a hot route on an API by basically hard-coding that one route to hit a single file. It read from a memcached cluster, formatted the result and spat it out and accounted for ~50% of all requests. Went from doing ~120 req/s to 8000. If you're using anything like Symfony or Zend, make sure you've disabled anything you don't need and are caching anything like annotations.
it sounds like your application is cpu intensive. i'll say it upfront that PHP is a bad choice for this. you'll want to look at Golang, or Java. the success stories you read about are mostly about apps that serve highly cacheable data (eg. read from DB, show it to the user). it may or may not be similar to your requirements. if switching languages is not an option, you might have to rethink your flows. see if your processing can be done via background workers (asynchronous set up). see if previous fragments of computations can be cached (memoization), so future computations will use these cached values. 
It is not very CPU intensive. All it does is calculating your interests/category of the site you're currently browsing and returns you some ad recommendations in JSON format.
Two suggestions: 1. Setup a machine with Apache/mod_php and test on that. This will help to eliminate FPM as the cause. 2. Go through your code and comment out all calls to Composer packages. Test again and remove comments one at a time, testing afterwards. This will help to eliminate slow Composer packages as the cause.
but the loops are tight. your IO only happens at the start and end of the requests, and the rest is all in-memory data manipulation.
A blackfire trace would be the most useful thing to see. The time spent in php, redis and web external all look way too high for the type of app you are describing. I'd disable the web external requests while you are tuning things and benchmark with it off. That looks like it takes 30-50% of your response time. If you have enough traffic you could also just make web external randomly sample X% of your traffic and still get roughly the same value out of whatever data you send to web external. Are you using zsets for redis? The ad selection and sorting logic sounds like the kind of thing zsets could answer without needing to do any app-side post-processing. You can also write a lua script that php sends to redis and let redis do almost everything. Redis+Lua should be able to perform the search much faster than a fetch+scan approach with php. If you can make your Lua script do the token + finger print logic, then php will be doing nothing other than serializing the redis response to json. [https://github.com/nrk/predis#script-commands](https://github.com/nrk/predis#script-commands) You could also look into making nginx communicate directly with your redis server and avoid going to php completely. I think all the nginx modules to do that are in the openresty project. That assumes that the app is really as simple as you are describing though. Server/FPM tuning rarely make a big difference once you've got the basic stuff like the opcache enabled. I wouldn't bother looking into anything that isn't app related until you can get the server response times way down. 
Try nginx microcaching if you're not depending on sessions: https://www.nginx.com/blog/benefits-of-microcaching-nginx/
Can't microcache since every response must be different.
Redis is currently in the same machine but we plan to seperate each Redis database (we use ~20) into standalone instances and seperate them into a cluster. I'll google it. You mean the Slow Transactions? That looks very useful but our plan doesn't support it. If that is like a Blackfire profiler integrated into New Relic, I'll do what I can do make my company buy it. That would give us so many insight.
First off, too general. Can we determine if it's CPU, Disk, or SQL in general. (IE it could be your code, it could be too many select all statements in your DB queries, but we need to figure out where it's coming from first. You said no Mysql so this is an example, but you get the idea) Moral of the story, we need to isolate where it's coming from first. http://www.tummy.com/articles/isolating-heavy-load/ ATM we can say you have a high load. I would tail or check your processes while visiting your site. Do the ps -aux, or etc.. Do you have iotop? See which one is consuming the most, then stacktrace and delve deeper. 
&gt; it sounds like your application is cpu intensive. you'll want to look ... **Java**. You are kidding, right? 
You know those high speed realtime trading systems that run exchanges? Guess what.
&gt; You could also look into making nginx communicate directly with your redis server and avoid going to php completely. I think all the nginx modules to do that are in the openresty project. I would recommend to try https://github.com/tarantool/nginx_upstream_module. This module can talk directly to Tarantool, which is [very fast](http://highscalability.com/blog/2015/12/30/how-to-choose-an-in-memory-nosql-solution-performance-measur.html?utm_source=dbweekly&amp;amp%3Butm_medium=email) nosql db and Lua application server.
Can you issue these two commands on ssh console at your server and show the result? 1. top 2. iostat -x 3 
Doesn't work with PHP 7. I'll downgrade my local environment and do some profiling I suppose.
eww fastcgi. On that note, there does seem to be some correlation to relic+php5? https://laracasts.com/discuss/channels/servers/php5-fpm-very-high-cpu-usage http://stackoverflow.com/questions/13732436/php5-fpm-randomly-starts-consuming-a-lot-of-cpu
Klein seems to be a bit dated, the last commit on Dec 16, 2014. I don't know if that is your problem but your code seems to be quite simple in the routing aspect. Maybe swapping your router to something faster could have positive impact on performance. [FastRoute](https://github.com/nikic/FastRoute) is quite fast. If you don't like to play with that low level there's also [thephpleague/route](https://github.com/thephpleague/route) which is built on top of FastRoute.
I agree with Tiquortoo that 75ms for external requests is way too long, you have your PHP processes just waiting half the time for an external request. It that's unavoidable, and you want to stick with PHP I'll try to do them asynchronously (you have a list of async resources on this [github repo](https://github.com/elazar/asynchronous-php). Btw, when you talk about GeoIP detection, it's something you have in your system or are you calling to an external service? In case it's an external system, can you consider moving it to you own servers (I know that i.e. MaxMind provides both options)? Also 75ms for PHP is way too long, specially if you are only working with Redis and some arrays (btw, the LUA recommendation is not a bad at all, it's easier that you thing and the performance gains can we tremendous). We have complex pages in our website that call Redis, MySQL, Solr... that are served in under 100ms and haft that time is spent on Twig (even with the extension installed). I would debug the code with Blackfire even if it's only in a development machine. I'd also take a look to the server configuration. For example, I think you have keep alive enabled (I'm not sure because I cannot see the *KeepAlive On* setting but as there're other keep alive settings I imagine you have enabled it), that could be a performance killer (you have your Nginx basically waiting). As explained in this [article](https://www.nginx.com/blog/http-keepalives-and-web-performance/) by the guys at Nginx If lots of clients use HTTP keepalives and the web server has a concurrency limit or scalability problem, then performance plummets once that limit is reached. To debug this, you could try to get the [request queue](https://docs.newrelic.com/docs/apm/applications-menu/features/request-queuing-tracking-front-end-time) metric from Newrelic. [Here](https://docs.newrelic.com/docs/apm/applications-menu/features/configuring-request-queue-reporting) you have an article explaining on how to configure it. 
[Blackfire now supports PHP7](http://blog.blackfire.io/php7-support-blackfire.html)
Disabled that in a recent push. No, I think the keys are uniquely generated for each service (cloud computing, URL shortening etc.)
Thank you for this explanation. I removed it and let it display errors no matter what
Xdebug supports PHP7 in 2.4.
[removed]
xdebug is capable of profiling php7, and gives cachegring-compatible output. this is pretty aweseome for profiling. 
Maybe it has to do with those anonymous functions used in klein's routing? I recently profiled an php7 application and the output was displayed perfectly fine in kcachegrind...
[removed]
And, like most easy solutions, definitely not the correct one. Hash the image, not the file. Almost all image files contain more than just image data.
Hashes are designed to be indexed. You have no idea what you're talking about.
&gt; Btw, when you talk about GeoIP detection, it's something you have in your system or are you calling to an external service? MaxMind dump file in our own server. All the external resources were Bugsnag. Removed it temporarily and external IO is completely gone. I'm continuing to do benchmarks and seems like it's an issue with my app. Hello world benchmark allows me to do 600 IOPS, while a recommendation-fetch benchmark does 20 IOPS. I'll dig it deeper and figure what exactly is the slowest. Probably ad system's complexity but we'll see.
Oh, it may be the reason and probably is the reason. Gonna ditch Klein and give it another try.
I agree with you some could be more open. It just can be possible adding a register for overriden assertions. PR maybe? :) 
You can start with using named functions just for profiling. No need to start all over from scratch. ;)
1) Yes. It is possible without annotations. (@Inject annotation is unnecessary for a constructor.) See the sample code here. https://github.com/ray-di/Ray.Di/blob/2.x/docs/demo/05b-constructor-bindings-setter-injection.php 2) Yes.
&gt; What exactly is impressive about being able to debug an API? Having the REST client built into the IDE and integrated with xdebug. I'm currently doing this with xdebug exactly as you've described (in combination with Postman), but it's a multi-step process that requires a separate REST client. I'm impressed because PhpStorm keeps making it easier to debug code in various scenarios (CLI, web browser, individual PhpUnit tests, REST APIs, etc.) with minimal configuration on my end. This saves time and makes my job easier.
There is another tab in newrelic with the answer. I forget what its called, but it will give you the per-route breakdown of throughput and latency. Sort by "most time consuming" and dig into the top 3 cases. When you click on them it will show you an execution breakdown of how much time is spend doing what.
Going to do this now, thank-you.
Obviously image meta data exists, but how prevalent is it for identical images to have different meta data?
This is, and will likely remain, the best comment in this thread.
If redis is on the same machine it still eats up ports to connect and I think it eats up one on both ends. Worth exploring. Your are going to need some code level trace detail. I would upgrade New Relic for a month. New Relic will give you a trial if you have not already done one. Mathematically you've got to further reduce execution time or add more boxes to get much above 60 rps.
Bit late to the party, but in case you haven't seen this: pm.max_spare_servers = 16 Each FPM instance can only process one request at a time. If you have each request taking 75ms, 16 FPM processes may not be enough. I'd recommend increasing it, I run 80 for one of my bigger sites. You'll have to find a value that works for you, as it depends on how many you can run without hitting other bottlenecks (e.g. CPU).
Ray.Di has AOP integration, Raw factory code compiler for performance and InjectionPoint (Provides access to metadata about an injection point.). Most DI containers configure how to build a particular object, But Ray.Di defines only "dependency bindings". You won't need to take any extra steps when new classes have the same dependency bindings.
The "standard way" is just, someone else's opinion. It *might* be a popular opinion, but that's it. Come up with a better test: If someone criticises your code, where they observe a way it could be shorter or faster, learn from that criticism. Otherwise? That's just their opinion. Being able to adopt someone else's standard is essential for working in a team, but it is not a measure of *the code's goodness*.
You're missing my point. I'm not saying you can't find a use for this method. I'm saying you could already address the same use without this library. And as you see both are one-liners.
&gt;When I was your age I didn't even know what OOP meant Neither does he. Do you think OOP is about grouping methods into a class? Because it's not.
It is php7 compatible now i believe. http://blog.blackfire.io/php7-support-blackfire.html
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That New Relic graph shows that virtually all CPU usage is from PHP, which suggests that it is CPU intensive. Either the framework has more overhead than you think, or your algorithms are causing the (relatively) high CPU usage. Can you offload some of that to another system? Or maybe pre-calculate or cache the suggestions? Perhaps a graph database might be a better fit?
Check out xhprof -- it will show you exactly where code-level inefficiencies lie.
If there was only one way to code in PHP then we would all use one and only one framework. The many frameworks that exist show that there are many ways to code in PHP, although many frameworks share many similarities.
So is Lumen
Thanks for your answer. I've had to write tests on paper for a couple of job interviews and it's very awkward when the question isn't the most common stuff that I could do from memory. I was recently using JavaFX to do a small personal project, and I used Oracle's documentation to get me started; if you asked me to make an observable UI object from memory I would fail. If I was sitting on the computer with the code-completion of a good IDE and access to official documentation, I could implement something quickly. Some employers want an encylopedia; and some just want good problem solvers. Lately I've been working with JS again since there are a lot of jobs in my area so I'm always jumping back and forth between languages as projects or job opportunities dictate.
It was fun to write, anyway. I think mine is a lot less complicated but I suppose also less flexible.
Just do you, man. Just do you.
Have your machine learn to build an awesome porn site, then pipe through the captcha's you are trying to solve to the horny people wanting access.
Too bad it doesn't support managing persisting requests as Postman/PAW too: give them proper names, group them by collections. That's the #1 if you're serious into developing with/testing an API.
Please keep it civil.
There's a catch with that. There are multiple commercial, "real time" Java runtimes, which are used in certain scenarios, but not used in the general world due to absurd costs.