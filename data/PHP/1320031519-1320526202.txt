You're probably right, and from the looks of it, all of the school's online resources are hosted by a 3rd party, and not in some abandoned classroom. I have also seen some fairly advanced CMS('s?) being used in various places, which corroborates your statement. Right now, the entire system I'm developing is more of a learning experience, that I might present to the school board. If they like it, then I'll go from there. Thank you for the links.
Allright, I think I just didn't look close enough at the php.net documentation. Thank you very much.
Perhaps it would help if you explained what kind of data you are dealing with. I don't think there is a perfect solution to this.
I use PDO.
I'm in no small way embarrassed to say that I was ignorant of this function and its brethren. Thanks.
For the sake of example, let's say social security numbers and authorization numbers (worth money) being stored into a MySQL database.
If you could help us to understand what you are encrypting and in what situation this all done in could we offer better advice, or advise you to seek professionals as r/PHP is not good for security talk. However, in schemes where information is encrypted in this matter it can be done so on a secondary server (lets say a more firewalled and controlled database server), where the frontend server communicates with this one to store data and retrieve it. This database server could hold the key and a secure communication between the two could authenticate the frontend server to decrypt select data (with proper auditing, quality of service control, and rate limiting requests) or encrypt it when it is received. That way, when your frontend is compromised the db/backend is still secure, and can be shut off or otherwise. Again, if this is all a big deal you are better off talking to a consulting company as they will have a better idea of your situation. Security and crypto work should be taken extremely seriously, and you should (rightfully) acknowledge that I, you, and anyone else on the subreddit likely has no idea what they're talking about.
Interesting approach, though if the attacker compromises the application server, what stops them from talking to the secondary server as the app server? This is purely for survey/discussion purposes. So don't worry about any half-baked implementations from me anytime!
you need to use PDO, or you leave gaping holes in your server. you absolutely have to use parameterized sql. it would take minutes to go bobby tables on you. also, make sure that you escape all user-entered data that might be in the database. alternatively, consider using htmlpurifier
How so? This just seems to prevent injection into the message header. If the form is supplied with a valid email address it will send to it. 
I am a big fan of building your forms using something like Zend_Form (yes it's a bit complex but it's filtering/validation libs are bloody useful). Then I would use either PDO or ZendDB to use ONLY parameterised queries to talk to the db. Seriously save yourself some pain by using PDO at least http://stackoverflow.com/questions/1290975/how-to-create-a-secure-mysql-prepared-statement-in-php/ http://us2.php.net/manual/en/book.pdo.php Don't give up if it seems too complicated to use PDO, the alternative is going to wind up much harder in the long run in my opinion
One solution I have worked out on my personal code as a fun exercise (only in use on my portfolio site so criticism is welcome): On the file system is a basic configuration file. It contains the database username, password, host, database name, a randomly-generated site key, and a user-specified password salt. The file is AES encrypted using the file's path and a nonce (such as the string length of the file path) as the encryption key and encoded in base64 for storage. When your application starts up it loads the configuration file, decodes it, decrypts it based on the above parameters, and loads the plaintext configuration into memory. At this point the database password is also encrypted/base64 encoded. Its encryption is based on the site key, password salt, and all of the other database connection parameters as a composite key. The password is decoded, decrypted, and then used to attempt a connection to the database. The idea I had was that this kind of protection would slow down someone enough to give me time to take notice and be able to change the database password before they manage to get anywhere. I run this code on my portfolio website where the only way to access the web/database server externally is via ssh and that has fail2ban running to prevent any brute forcing to get in so mileage will vary depending on the environment. On a professional level I would recommend [forthelose's](http://www.reddit.com/r/PHP/comments/luqsn/the_encryption_key_where_do_you_store_it/c2vroc3) advice. This is a much larger problem that companies have entire divisions dedicated to so a quick solution in PHP is not a proper answer.
This sounds pretty solid. Using this with monitoring of the rates of requests seems like it would help greatly in a situation where you did become compromised.
Cool, thanks for sharing your approach. I have a somewhat similar personal system too: It basically boils down to giving each user a public/private key. Their private key is only generatable using their plain text password. Assets are encrypted with randomly generated keys and then that key is stored encrypted by the user's public key. When they want to access the asset they are required to give the system their plain text password which is then converted to their private key so the asset key can be obtained. All of this ensures keys are only ever available for a few seconds in memory (although that's all it takes in a totally compromised server) This along with careful monitoring seems to work well for my personal projects. I agree it's an interesting problem best left to teams of pros. 
But that still will not validate, because input elements are only valid inside a form by the spec. Just use a bogus action, capture the enter key and disable it inside of the element, and then use AJAX.
&gt; So I pose this question, what is YOUR favorite way to sanitize input for inserting, updating, or selecting from a database? Prepared statements / parameterized queries using [PDO](http://php.net/manual/en/book.pdo.php). &gt; &gt;Also, is there any way you prefer to verify that input is of a certain type, and only of that type ie, if you're expecting an int or a string, how would you make sure you are receiving one? [intval\(\)](http://php.net/manual/en/function.intval.php) [strval\(\)](http://php.net/manual/en/function.strval.php)
Sanitising input and escaping strings for SQL are two entirely different things. One is done on the way in (as input is read from the user) and the other on the way out (as it's sent to the database). For the latter, I recommend using PDO with parameterised queries. It's fool-proof. It makes `mysql_real_escape_string()` history. For the former, I have my own self-written class which takes input from the user and validates it according to various patterns. So I can make sure that something is an integer, or is a valid email address, or is a name consisting of only letters, numbers and unscores, etc.
Better yet, learn PDO. Any web host does even semi-annual updates will support it. Regardless, MySQLi will definitely be supported as its a pretty old implementation (older than the LAMP term, I believe!). 
:o You can bind a button to a click event, then rig it to post (or get) a URL... $("input[name=INPUTNAME]").val(); gets you the input element values, to do with what you want. No form necessary. o-o
Hey, I cleaned up your code a bit. http://pastebin.com/Z2p82y52 Please use filter when getting user input data. http://php.net/manual/en/book.filter.php
Good question. Essentially nothing, but if they cannot breach your database server, with proper rate limiting in place they also will have to play by your rules in terms of how much data they can grab at a given time. Also, with proper logging (and reading of logs) in place and other systems, they may not be able to touch your database server "in time." If the attacker compromises the application server: * They may not have a ready attack vector for your database server. It increases time needed to attack your infrastructure allowing you time for a response * Should you have an IDS, it may pick up that the application server was compromised and initiate automated shutdown procedures * Should you have any staff that actively monitor logs or access, they may be able to determine such an attack has begun on the application server and protect your sensitive data.
Consider this free (and also cheap) option for your own server: http://aws.amazon.com/free/ (no affiliation, cept that reddit uses aws) Gotta love admins being "wary" about stuff while at the same time being behind the curve in terms of what they support :/
Sure, it's just a lot less code to use var export.
PBKDF2... Derive the encryption key from the user's password. This way, you do not own the key (and therefore cannot decrypt the information) without the user logging in.
Everyone should. It makes me sad seeing people "recommend" using mysqli and bunch of other crap.
Codeigniter.
Upvotes for all saying PDO.
The encryption key should only be known to the user, and sked for each time you want to access this data. It should be something that is individual to each user, but less obvious than the email address. Numberplate of his first car would probably be a good value for that sort of thing. For creditcard numbers this could be the cc2 value (which you are not allowed to store anyway, if you want to be pci compliant). Even if that is just a small number you can use that, append it with your own string and take the md5 of that as your new encryption key. You could always poll some hardware specific string if your application software allows that, for example os-serial number, cpu serial number, harddisk serial number, mac address or some config thats not visible from the outside. You would have to rehash your data if that component has to be replaced of course. Just make sure you DO NOT store your salt-string in the database, in case someone steals your db. 
FYI the letters in the acronym LAMP do not refer to the system's installed PHP extensions.
[This is my class](http://codepad.org/fuonNGOP) for SQL stuff (very old version!! have a new one at home, but i'm at work now), however I use cakePHP nowadays so it's not used now that much.
Then he also can't do anything useful with the data either. Why even bother storing it?
Everything about this is horrible.
Filter_sanitize_string and prepared statements. Do NOT use the mysql_ functions. Ever. 
by using mongodb.
So instead of $result = mysql_query("select * from dogs where name = '$name'") Which is dangerous and wrong, you'd do $sth = $pdo-&gt;prepare("select * from dogs where name = :name") $sth-&gt;execute(array( ':name' =&gt; $name )); And then bind dogs to :name. Look up pdo::prepare() and pdostatement::execute() 
You're not alone. Christ, to think of some of the validation functions I've written...
read up on PCI compliance.
I can't do much better than [Wikipedia](https://secure.wikimedia.org/wikipedia/en/wiki/Parameterized_query) on this one. However, as a quick overview, the idea of a parameterised query is essentially that user data in the query is denoted with a placeholder, and then specified separately. It stays like this all the way to the server. Thus, the issue of improper/unsafe conversion of data into text form is simply avoided entirely. Of course, this won't fix the use of unsafe data in other layers.
recaptcha.
[It's not quite bulletproof](http://php.net/manual/en/mongo.security.php).
welll... you rarely use MongoCode(). i only use it for map/reduce and those kind of queries are normally already handcrafted.
I've been thinking of this approach before, but it creates a problem if user has large dataset and decides to change his password. In such case data wouldn't be available to him until reencoding is complete, and this could potentially take some time. One way is to serve old data until proessing is complete, but thats error prone. Any other way?
I meant Request Injection Attacks part. From that article: "attack can be used with any databases interation that locates a document, including updates, upserts, find-and-modifies, and removes". Nothing major but still something to be aware of.
That's the best kind of misleading non-answer. This will give newcomers the wrong impression that using PDO will magically make everything more secure. Which it doesn't. It's only *bound parameters* that might, and only if people are stringent about using it.
It was a typo, I had mysqli on the brain :P
yeah but i dont think you can do more than insert garbage into mongo. the only way to execute code would be to send mongocode, which one rarely does. im working for over a year with it now and i see no way that you can inject any code. i literally can just pass on _post/get straight to the insert/update/remove() and nothing will happen.
with ajax
Parameter binding makes inward injections a non-issue.
What exactly is the point of using Heredoc if you're using sprintf?
Yeah basically you want to sanitise stuff for input (SQL injection - use prepared statements), and sanitise stuff for output (XSS etc - use filter_var())
Hey. I'll host you. Send me a PM (located in Germany)
To be fair, if you do not need any other database, `mysqli` is up to the task. You do not need a DAL if you are going to use only one vendor. I personally prefer Doctrine to PDO however.
In a config file or in the php folder. There is some (small) risk you have to accept to allow your application to run. Remember to modify the permissions to minimize risk.
You're right. I've used this approach before. I made it to where I didn't have to re-encrypt the actual files, just kept encrypted versions of the key for the file and had to redo them on a password change. It works but I imagine for large systems it's impractical. 
You must be kidding.
It really depends on what kind of data you are escaping. I tend to do database escaping based in my DAO classes as I'm generating my sql statements. On input, I also tend to strip characters like HTML tags to prevent injecting cross-site scripting attacks. 
with a trojan.
What you are doing is not the same thing. SQL statments -- even those using `mysql_real_escape_string()` can be hacked via SQL injection in some cases. The 100% bulletproof method to prevent this is called Prepared Statements. A prepared statement is a SQL statement which is first sent the to SQL server, without any values, and compiled in that form, waiting only for values. Then the values inserted/sent and they can ONLY be used as values at that point. The mysql_ family of methods you are using does not allow you to tap into this functionality of mySQL directly. Here's an example of what you might do using PHP's PDO extention: # DBH stands for "Database Handle" $DBH = new PDO("mysql:host=$host;dbname=$dbname", $user, $pass); # STH stands for "Statement Handle". This statement actually sends the SQL to # the server where it is compiled and awaits data. You use the statement handle to send # data to it. $STH = $DBH-&gt;prepare('SELECT name FROM employees WHERE boss = ? AND job = ?'); # This is now safe, no matter what values you send. $STH-&gt;execute(array('Bill','Jantor')); You can also used name parameters and associative arrays to pass values. The mysqli_ family of functions also allows you to use prepared statements. 
You should still do validation on your parameters... it's bad form to have a varchar(255) then allow strings to be inserted if they're 260 chars long...
care to explain?
PDO PDO PDO PDO PDO !!!
No, this will just remove non-valid characters from e-mail addresses and make sure that the e-mail entered on the form is valid. It doesn't stop spam. Honestly, the best ways are to either set up a CSRF token or put in a hidden field that will stay blank. **CSRF Token** This will stop spam bots from directly POSTing to your form. You generate a unique token that gets entered for the form, and then compare it after the POST to see if it is still there. These are one-use tokens, so subsequent POSTs will not be able to use a single token. **Hidden Field** Same basic idea, but you are testing to see if a form bot entered data into a field that should be blank. I usually do something like this: &lt;form ...&gt; &lt;input type="hidden" name="areyouabot" /&gt; &lt;/form&gt; &lt;?php if(isset$_POST['areyouabot']) &amp;&amp; empty($_POST['areyouabot'])) { // Process } else { // Drop/deny code } Form bots don't normally check what type something is, and will fill in the hidden field. Neither option will stop human spammers though.
Although on the surface what you're doing looks the same, it isn't - you're essentially doing the 'dangerous' part of haywire's post, just in a round-about way by replacing a string with a variable. The query is still sent to the database with the possibility of it being compromised by a bad value. Parameterized queries don't simply replace a variable with your string (though that's what it looks like) - the query and the values you're inserted are passed to the database completely separately, so that your query cannot be malformed by a nefarious value. As you said, PDO handles it for you - it's not any more work to write queries using it.
Doctrine uses PDO as it's access layer (unless they recently backed off from that). Doctrine is an ORM.
It's HTML that REQUIRES the form. Requires. It will NOT validate without it. It's in the spec. C'mon guys, I shouldn't have to be repeating this kind of stuff here :(
geolocation. You can use geolocation based on the user's ip address. It may not work 100% perfectly well but it should be close enough. There are several ways to go about it, I'd goggle it and look for stack overflow dot com entries.
mysqli is better if you need more control; PDO does things (like emulating parametrized queries for MySQL) that you might not expect. But obviously PDO is much more straight forward for beginners. 
Whatever you do, make sure you have a way for the user to manually select which one they want. Any method you use is going to have occasional flaws. You want to provide the "suggested" or "our best guess" option, not a "this is all you get" restriction.
I love geolocation down to state level, or even town level. Especially since my old ISP would randomly put me in Youngstown, Ohio, on a certain IP in the DHCP stack. I lived in Chicagoland, ffs. Some sites always thought I was from Ohio.
&gt; w3schools.com ಠ_ಠ
I use a [filter](http://pastebin.com/9GF6Sp1B).
If you're doing anything in the DB make sure you're using prepared statements. They give you +5 to security and +6 to coolness. Also, I would recommend using mysqli instead of mysql; why not make it OOP?
If you only want it for Germany it'd be a lot less work than geolocation in general. Set Apache to do reverse DNS lookups, pull from $_SERVER superglobal, then filter that to their ISP's domain. Then match the ISP to a list of the few dozen biggest ISPs in Germany and you should get a good guess for most people. For those it gets wrong, they can change the default/preselected item in a drop-down. If you use analog you can see where most of your local customers come from - though regional ISPs might make things more difficult. You can also get the language string of the browser, assuming German is mostly spoken in Germany, and that related dialects (eg, Swiss German) have their own language code. **edit:** On second thought, if you don't mind spending some money, you can get 3rd party geolocation services, which save you the hassle of keeping an IP allocations database current. These are used by online gambling companies and the like, businesses which need to know exactly where people are in the world for legal reasons, if you don't have much traffic it might be cheaper than your own time.
sanitize, ajax is a cleaning product, get it? haw haw haw -2 for bad joke telling I guess :(
Not sure why this isn't the top answer. The use of a web framework, combined with ORM is correct. People want to re-invent the wheel i guess :/
You know what? Thank you so much for this. You showed me many better ways to code. This is very useful and I'm going to replace parts of my code elsewhere now. Thanks!
International geoip should be extremely accurate for these purposes. It can be dodgy if you're using it to pinpoint provinces or something, but country (or just ensuring someone is in north americafor that matter) is pretty reliable in my experience.
care to explain?
that one was new for me too, but im having trouble on returning proper character sets with that filter. example: á
that's not very "product" friendly
[Doctrine ORM](http://www.doctrine-project.org/projects/orm) is an ORM, [Doctrine DAL](http://www.doctrine-project.org/projects/dbal) is a Database Abstraction Layer Doctrine DAL doesn't necessary use PDO (through it is an option). D-ORM uses D-DAL.
You could try and use the Accept-Language for this purpose. If the Accept-Language header is de_DE then you can assume inside Germany and everything else outside of Germany. Just give the user a way to override it. http://www.w3.org/International/questions/qa-accept-lang-locales 
Thanks, I haven't looked at doctrine in a long while and I wasn't sure anymore.
*EDIT - REDACTED* You should **never** use *mysql_real_escape_string()*.
I can see this having advantages, but if the application server is compromised surely the attacker can still intercept the user's password - this does limit the attacker, because the user must log in before they are discovered, but they can also lure the user with social engineering email / phishing from the legitimate domain. I'd love to be shown to be wrong about this, but I don't think encryption will help much in this situation - used right it'll prevent Eve from seeing Alice's message to Bob, but if Eve *is* Bob...
let's say you have an MVC type app, which means index.php probably does pretty much nothing other than bootstrap and then getting some kind of class to handle the request. If an exception reaches index.php, your application is fundamentally broken, because there should be some kind of logic deeper in the app to catch all exceptions that made it too far, log them, and direct the user to an error screen explaining that something unknown has gone wrong, and yes, that could involve a generic try/catch for ALL exceptions somewhere. Do not willingly let exceptions go uncaught...
If Eve is in control of Bob, Eve can intercept messages. In all cases, if your application layer is compromised in PHP, you are SOL. There is no perfect protection as your application NEEDS access to the data.
An upvote for effort.
Most of my code has several lines written at the top that begins building various classes and doing security checks to see if the user is allowed to see the page. While loading and testing, my server will begin sending headers. However, if there is a critical failure, and I desire to make use of the header() function to redirect the user, I have to ensure no headers are sent before this function is called. ob_start is the solution. Another use is in the gd library. .jpg and .png headers differ from .html headers. You will often need to do ob_start() so you can draw as you like, then begin sending headers before doing an ob_flush. Fail to do this, and the server may automatically start passing the wrong header type.
we use the max mind geo lite free version for geolocation. seems to be pretty good, and should be good enough for country specific geolocation. http://www.maxmind.com/app/geolitecity
hostip.info's [community operated database](http://www.hostip.info/dl/index.html) should be enough for you. I used a similiar table lookup for a site that I worked on in 2003, but the data was MaxMind's Geolite Country. Since you won't be needing precision at city level, don't bother paying money. On the downside, hostip.info's db takes about 520MB of space. You could easily [discard everything else](http://pastebin.com/aEN0EUJD) than germanys ip-addresses and it'll bring it down to 23MB. If your traffic is minimal, you could use a simple get-query to their [api](http://www.hostip.info/use.html).
I know this isn't php, but firefox has geolocation http://www.mozilla.org/en-US/firefox/geolocation/ But, I dont see why as people may use other browsers.
I had this problem when I first started heavily messing with session variables as well. I can't remember exactly what the fix was, but here's some ideas: It might be a cookie thing. If you're accessing the page from /a/path/like/this, but your /ajax/lives/here, sometimes cookies are set into a specific subdirectory. It might have something to do with the session path, and you could need to set ini_set('session.save_path','/tmp'); A tell-tale sign might be that those session_id's echo something different. They should be the same. Also, make sure there's nothing like session_write_close() going on either. I use it a lot on AJAX calls when I don't need to modify it (because it releases the death-grip the system has on the session variable). 
While this might seem like a good idea, it only shows the language preference of the user. I live in Finland, but all my language settings are in english. I like the override feature though. After all, the problem is in the shipping charges.
In my opinion, you should also show a [dropdown menu](http://allwebco-templates.com/support/S_paypal_shipping.htm) for the user. You cannot guarantee at that point in the transaction that the user wants delivery to germany based purely on the country of origin. That said, [here's](http://thepcspy.com/read/getting_the_real_ip_of_your_users/) an article about server variables where you can get the ip.
Perhaps the question then becomes *does the application need access to the data?* I don't know what OP is doing, but OAuth and other schemes work around this. There might be some cases where the data can be encrypted/decrypted client side, and the keys stored by 3rd party (medical records, say) and the data storage service does not access those keys except in rare cases and by a formal process of human intervention. You can authorize a new client to have your key (say when you change doctors), so records are centralized and available, but the storage app does not have access. Individual clients may be compromised, but not the whole warehouse.
Depends what the error is... It's probably because you've not set the third column to allow NULL. In general you shouldn't use NULL unless you actually mean "no value" because it screws up MySQLs optimizer. But this probably won't have any actual effect unless you're dealing with millions of records.
Two questions. Firstly, does the web-facing app actually need to store the SSN, etc, or would a hash suffice? That is, confirming that the supplied credentials are correct, but not storing them on the web server? Could you then transfer batches of transactions/orders/whatever via flash drive to an isolated network where the real numbers are stored? Secondly, how much control do you have over your users? Is it available to the general public, or business customers who can be 'encouraged' to have a browser plugin on their side to properly encrypt requests *twice* before they pass to your system? (once with the public key of the web app, and again for the internal, isolated system, the sensitive part of the data only encrypted with the key of the isolated system)
I'd suggest grepping your codebase for 'session' and looking to see what's manipulating things - it sounds like a session either is not being properly initialized via session_start() or is prematurely being removed via session_destroy(), session_unset(), et al. For what it's worth, you can write elements directly into the $_SESSION superglobal without having first initialized a session. That might be what's going on here.
It's good form to have search query parameters in the GET parameters, to allow people to repeat the search by url. In your current system, if person A does a search and sees 'well there's a good result listing!', they currently have no way to pass that result listing on to their friend, person B. GET parameters should be used for public querying of data, to allow repeating of such queries. POST should be used for submitting data and actions, that shouldn't necessarily be available to repeat just by a url. If the search query data is in GET parameters, the user can easily get back to it by going back in their browser history; there's no need to store it.
Questions like this are why google exists.
My friend who works for a major electronics company (they've made a few consoles, handhelds, and other electronics) said they don't need to sanitize inputs
damn. i'm very new at programming, had just finished going through the w3c's basic php tutorial, and saw this. as i still barely understood what i was reading, i thought i would ask you guys.
upvote for you!! i have issues with spam bots, not human spammers (yet..) so this is quite helpful :)
The way I do it is unusual, but I think thorough. I treat PHP as if it were a strongly typed language, and whenever I assign a variable from outside the application (from $_POST, from a file, etc) I cast it to that type and run it through a sanitizing function appropriate to its type (to strip Javascript and disallowed tags like iframes if an HTML string is expected, remove/markup all HTML/XML/CSS/JS with HTML entities if not expected to be HTML, etc). Nothing else is done to data before it has been cleaned, sanity checked and auth checked (does the user have permission to perform this action on this object). There is a second layer of markup as stuff goes to/from the database wrapper, on the inside of the wrapper itself, as extra protection against SQL injection. The various services my CMS offers do their own checks just inside their API: eg, checking for directory traversal and disallowed locations in: ` /* bool */ $mycms-&gt;filePutContents(/* string */ $fileName, /* string */ $contents, etc) ` This means that each piece only needs to sanitize what it deals with, and there are well defined choke points between the CMS core and modules.
The real problem is using `mysql_escape_string`. Your good friend Google can explain that. Everything else is just ugly cruft. The `$string` parameter, for example, is just pointless. You should be dealing with magic quotes in the server config, not in the code. You call the function `q`, either descriptive names or namespacing are good things. And finally, there are much better, even built-in, ways to achieve your goal. (This thread provides a good overview. Look near the top, there's a reason they've been upvoted.)
If all your columns are set to be NOT NULL, give the third column a DEFAULT value (i.e. if it's an INT make it zero, if it's a VARCHAR make it an empty string etc). Otherwise you will have to include all the values if you want to insert into the table. Also, why are you specifying a value for A when it's an auto-incremental column, surely that defeats the point of it?
This is r/PHP, what do you expect? 87% of advice anyone has to offer here is exactly that. (I know this because I once made the mistake of asking for advice too, every reply, much like in this thread, was "PDO IS GOD")
Well I didn't downvote your code or know why the others did, but I perhaps can do some splaining. You are making a function called error_handler() and setting it as a callback for an output buffer. Tracing through your logic, your final output will always end up being the string FAIL_WHALE.png to the browser. Also inside your misnamed error_handler() callback, you have a useless foreach loop that essentially ends up setting $output = 'FAIL_WHALE.png' 4 times. If you're trying to do something along these lines I would suggest you look at set_error_handler()
Why the need to encrypt rather than hash, if I may ask?
Say it's a credit application which the user submits from a public site. The receiving party will need the actual SSN that is input. The best I've come up with for situations like this is using a public key to encrypt it into the DB, then keeping the private key in an isolated offline environment for later decryption. It does limit convenience though.
bcrypt is a hashing library, don't get confused by its name :) 
Bcrypt is essentially a method of generating a hash from the key schedule of the Blowfish cipher. It's not a two-way encryption method, but rather a one-way hashing method. The name is simply a reference to the underlying cipher. 
Stumbled on this, and it will be super helpful in automating fantasy drafts for a subreddit I mod. So you seem to have gotten reading material that's already there, which is great, and the bulk of what I wanted a script/bot to do, but unless I missed something I don't see any resources on submitting links, not that I need that, submitting text or self posts would be more useful to me, but you've already stated that's still in the works. Cool stuff man!
I haven't found an scrypt implementation in PHP yet, and the version I'm working on is incomplete. In my opinion, either bcrypt or pbkdf2 are sufficient for password storage. I personally use HMAC + bcrypt with a cost factor of 12 in my projects.
If I remember correctly, there are some circumstances in which AJAX requests are unaware of any cookies. That is, cookies are not always sent to your PHP script. Unfortunately, one of the things that is stored in your cookie is the session id. Therefore, in these cases, whenever you do an AJAX request, the PHP will not know which session it is dealing with and **therefore** creates a new session. In order to work around this you can pass PHPSESSID as an URL parameter. That way, PHP will know which session you're referring to. Again, this is from memory and I might be wrong. I remember having this problem on some occasions, but not on all occasions. Good luck!
I think there are two different questions here - protecting the database and protecting stuff passing through the web server. For the former, perhaps you could split your database and business logic from the web front end. You have your application server / db behind a firewall and it polls the web server for new submissions constantly, but always from its own side, the web app cannot connect to the backend, only offer up submitted forms and stuff for approval from the backend. Web server only stores sessions, renders HTML and returns what the app server tells it to. It's very minimal and so hopefully easier to secure. It runs OpenBSD or some other rugged OS, and basically just creates an inbox that the isolated application server checks, and all items are encrypted with the public key of the app. The app polls the hardened web server in the DMZ from behind its firewall through an API like: `/newapplications.php` // poll this `/deny.php` // tell this session and IP address no `/accept.php` // tell this session and this IP address yes` Database is stored on an encrypted volume such that anyone logging in to the app server causes the key to be overwritten in memory, the volume unmounted. It can push need-to-know information out to your isolated network as needed, but no poking around by anyone. Anyone logs in from the terminal and the app server must be physically restarted by a human with IRL keys to a secure room, the volume key reset by USB boot (USB kept in a safe), with the reasons logged and signed. No SSH in either, no listening sockets at all. You have a network share for receiving encrypted backups from the app server, encrypted with a public key, the other half of which is also on a flash drive in the safe, and a copy in a bank vault. As for protecting stuff passing through your web server, as they are submitted, that's a hard problem. **edit:** better if the web server has no HDD, boots from network or liveCD, keeps sessions in a RAM drive, reset regularly. Web server logs are polled into your network and signed so they can't be tampered with.
[Hash-based Message Authentication Code](http://en.wikipedia.org/wiki/HMAC). The [Mozilla secure coding guidelines](https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines) give a good overview as to [why](https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage) you'd use HMAC + bcrypt, but the main reason for me is this point: &gt; The nonce for the hmac value is designed to be stored on the file system and not in the databases storing the password hashes. In the event of a compromise of hash values due to SQL injection, the nonce will still be an unknown value since it would not be compromised from the file system. This significantly increases the complexity of brute forcing the compromised hashes considering both bcrypt and a large unknown nonce value
thanks for the feedback
are you doing things across more than one domain?
Catch it, and display an error message. Log the error and automatically alert a maintainer if its really critical.
Sure: * You're testing for magic quotes which has been out of PHP forever. * You're using stripslashes as a result of testing for magic quotes. * You're using the mysql extension. * Your connection isn't taking the current character set of the database into consideration because you're not passing it to the method AND you're no even using mysql_real_escape_string. * You're not using PDO.
I live in Germany. Most of the people in my office have their computers set to International English. 
 &lt;?php $db = new MySQLi("host","user","pass","db"); $r = $db-&gt;query("SELECT * FROM spartans WHERE ID='".mysqli_real_escape_string($_POST['login'])."'"); if(sizeof($r)&gt;0) { ?&gt; Main Site Contents Here &lt;?php } else { ?&gt; Login Form Here &lt;?php } ?&gt;
Chrome/Safari have it too.
returns the following error: Warning: mysqli_real_escape_string() expects exactly 2 parameters, 1 given
No PHP implementation appears to exist. Bcrypt is supported as of PHP 5.3, I would suggest using that rather than trying to cobble something together for an illusion of extra security.
oops... that should be: $r = $db-&gt;query("SELECT * FROM spartans WHERE ID='".mysqli_real_escape_string($db,$_POST['login'])."'"); sorry about that!
The above example should use: `$db-&gt;real_escape_string()` It's using the instantiated class, not the procedural functions.
http://php.net/manual/en/mysqli.real-escape-string.php When using the function, you have to pass into it the MySQLi instance as the first parameter. I might suggest using PDO for DB access as it allows for binding parameters, which helps against SQL injection. I know this is kind of a one-off site, but you should still follow safe programming practices. http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html
$db is a MySQLI class instantiation, not a mysqli_connection handle. If you're instantiating the class, you should use the class methods, not the procedurals. Among other things, it reduces the repetition of 'mysqli_' repeatedly, and you don't need to pass any handles to the function.
No need to apologize. You're saving my butt and I appreciate it greatly. I entered the correction, and the error is gone, but I've put the form in and it does not appear. I only see Main Site Contents Here.
right below the code where you echo the form erase what you have and add: $login =$_POST['login']; if($_POST){ $sql = @mysql_query("SELECT * FROM spartans WHERE id = '$login'"); if ($sql) { header('Location: main.php'); }else{ header('Location: badcode.php'); } }
and in your database, you need to have a table named spartans, and the column in spartans must be named id. BTW if someone mentions PDO, they are a tool.
agreed, it's bad form to mix the procedural and class methods.....I haven't written this type of code in a while, as it's usually abstracted away to something I wrote long ago.
(Wahaha. I'd know that username anywhere. We know each other from Zendcon.) PDO is everyone's baby, and it's *easier* to do prepared statements in PDO (which makes it "more secure" because it's easier for people to do the right thing), but PDO is *not* inherently "safer" or "more correct" than mysqli. MySQLi also handles statements, and parameter and result binding, but that's not really the point. Using parameter escaping with the proper functions is just as good, it just requires more work and care.
Mod made... getting this error: Cannot modify header information - headers already sent by...
/r/web_design has a wonderful place for you.
the db already exists and is being used to display information on who is/is not attending.
You just need tt reorder the code, try: include '../scripts/inc/db.inc'; $db = mysql_connect("$hostname", "$username","$password"); mysql_select_db("deimos_lan-down",$db); $login =$_POST['login']; if($_POST){ $sql = @mysql_query("SELECT * FROM spartans WHERE id = '$login'"); if ($sql) { header('Location: main.php'); }else{ header('Location: badcode.php'); } echo "&lt;form method='post'&gt;&lt;input type='text' class='inputSignIn' name='login'&gt;&lt;/form&gt;"; 
You're not escaping the values before they're added to the query. Classic SQL Injection. If someone passed in "`' OR 1=1`" as the username, they've instantly bypassed security.
&gt; This just seems to prevent injection into the message header. Exactly. In what's known as _[Email Injection](http://www.securephpwiki.com/index.php/Email\_Injection)_, _SMTP Injection_, _Header Injection_, etc., an attacker exploits the SMTP protocol by supplying newlines within their input, which when interpreted according to the SMTP protocol, results in the ability for the attacker to inject arbitrary SMTP headers into the message (such as a giant list of BCC: addresses). This is essentially the PHP-equivalent of an [open relay](http://en.wikipedia.org/wiki/Open_mail_relay). The spam message that you got from your own form, that you assumed was a bot? It could have used the form to send *any* message to *any* number of recipients....if you're vulnerable to this attack. I believe this is even done manually at times, since it doesn't require you to setup a bot to send out a mass amount of emails -- if they've already found the vulnerable script, they can just return at any time and send 1000's of spam at one time.
that would mean you are getting a result from the SQL statement. Do you have a blank entry in your table maybe? 
You would be the only guy to hack his database, and why? just to delete his records? Bad dog. I dont think hes saving credit card info. 
Yes and No. It will prevent header injection ([discussed here](http://www.reddit.com/r/PHP/comments/lurlw/can_you_use_this_to_stop_email_spam/c2vz6u7)), though it won't prevent bots.
You can also buy bullet proof glass and a robber wont be able to break into your home with a simple throwing of stone. Do you really need the bullet proof glass?
I just say that if you're going to give an example you should give the one that implements proper coding/security, otherwise you're teaching someone bad habits.
No, but you'd still lock your doors, wouldn't you? Not escaping your inputs lets just anyone walk up to your code and 'turn the knob' as it were without any significant effort on their part. If I have something valuable inside, yes, I'm going to protect it... with a safe, or an alarm system, or whatever is required.
ok it's working, but no matter what is entered it goes to main.php.
A basic example for a basic question. If it were me the POST and GET would be called and sanitized by the framework, and it would be the same code except '$id = JRequest::getInt( 'id', 0 ); '
checkout http://pastebin.com/AyXZwZAs Let me know if you need anymore help.
No, it would be the equivalent to a robber using a lock pick, which is applicable already. And if not he can always toss that little stone through the window, same as turning an unlocked door knob
Replace if($sql) with $row=mysql_fetch_assoc($sql); if($row['id']==$login)
**STOP!!** I'm going to nit-pick about this you said: &gt; had just finished going through the w3c's basic php tutorial Please realize this very important difference: W3Schools != W3C * **W3Schools.com** is just a tutorial site. I do not like it because the info they give can be somewhat misleading, and at times downright wrong or bad; but, I will say that there is some decent material there. Just keep in mind that the author of most of that site is just a step or 2 ahead of you, and you should not take anything written there as gospel. * **[W3C](http://www.w3.org/)** is the [standards body for the internet](http://www.w3.org/standards/), basically. "W3" is "world wide web", and the "C" is consortium, so it's the _World Wide Web Consortium_. This is where the specifications for HTML, CSS, DOM, XML, etc. are all administered. You can also find HTML/CSS validators and much more there, though there's tons of content to sift through. To confuse the 2 is funny now, but could make the difference between impressing a prospective employer to having them laugh you out the door. **On to your point: ** That method for preventing spam is fair, but it can be [handled much easier](http://stackoverflow.com/questions/1826044/secure-email-form-header-injection-query) and just as effectively. You also need to implement some kind of captcha if you haven't already. Also, [SO](http://stackoverflow.com/) is a good place (IMO) place to ask code questions.
take all the time you need. :)
You will need to check the request method. http://php.net/manual/en/reserved.variables.server.php
The site only exists to be a flashy RSVP system. The only thing a user can alter themselves is whether or not they are attending, and all they can do there is flag 'yes' by entering a unique multi-digit auth code. He's big into Halo so I themed it like an ONI site. After that, it'll collect dust until his next birthday. :)
Exactly, so you could spend a few hours learning PHP security tonight, or we can give you the basic, innocent answer :p
I edited instead of new comment, try that above. 
The basic example requires the basic security. We're not even talking about using filter_var/filter_input, or other sanitization. Just *basic* DB-input escaping. The problem doesn't even have to be a "hack" to rear its head. What if the IDs he used were the person's last name, and one of them happened to be "O'Reilly"? That apostrophe's going to blow the query sky high. Even filtering through your framework does *not* achieve the same thing as database input escaping. The thing that disturbs me the most is that you're trying to defend bad practice.
altered to: $row=mysql_fetch_assoc($sql); if($row['id']=$login) and we're up and running! I'd like to thank each and every one of you for your help with this matter. Happy Halloween to those celebrating and Happy Monday to those not. UPVOTES FOR ALL!!! :)
cs2818: the problem has been solved. I wanted to let you know so as to not waste anymore of your time. Thank you so much for you help. I really appreciate it. :)
This is true, but you can still store it in a session while on other pages. Store the latest search in the session. When returning to the search page, check for stored session parameters. If found, redirect to the same page, but with new GET variables.
Dude, I bet at least one window or door is unlocked in your house right now. I know all about security and sanitation. This guy has no worry, like I said, your the only one who would hack his site, and just to spite me. and If you wouldn't, then I guarantee he is completely safe. This isn't the appropriate time to flex your new pdo muscle. When I say I know all about security and sanitation, I am saying nothing you're tellig me is new information. Does he need it no. 
This is assuming its an actual id number and number only. So your example doesn't work. If all I had to do was enter a last name, I could socially engineer the hack without even knowing code.
I'm pretty sure it should be a double == == means does this variable equal = defines the variable as in $one =1; and if($one=='1'){echo "1=1";}
SO is a great place to get help as the other guy mentioned. I also reccomend finding some similar scripts and editing them to your liking. Eventually enough editing teaches you the gist of things. Also, PHP is fairly easy to pick up (syntax-wise); once you do it is all just looking up names to functions and what they do in the PHP manual.
this uses the same mysql_real_escape_string without taking the 2nd parameter. it works when using libraries like adodb for php: function q($data) { if(!empty($data) &amp;&amp; is_string($data)) { $data = str_replace(array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'), $data); $data = "'".$data."'"; } return $data; }
&gt; I am saying nothing you're tellig me is new information. Then if you "know it all", and you continue to give bad examples, I can only urge people not to listen to you. We're here to show people how to do things correctly, and faulty security is does more harm than no security; It gives you a false sense of... you guessed it, security. You'd benefit significantly by knocking that chip off your shoulder, and look at things critically rather than defensively. There was no need to get abusive, even if you did edit the post and remove it.
Yeah, this username gets used almost everywhere :P You're correct, PDO isn't inherently safer than other custom drivers, but since it's much easier to use, I generally recommend it. Getting in the habit of always using prepared statements (no matter what avenue, mysqli_* stuff or PDO) is better than using the escape statements since it's so easy to forget to escape things.
Stop, just stop. Stop programming, stop offering advice, stop pasting code snippets. Just stop.
PHP5.3 has bcrypt built into it - http://php.net/crypt - use with CRYPT_BLOWFISH. I'd just use it, simple enough. However, the somewhat outdated (in terms of code style) but still excellent library PHPass (despite the name) is still great. It handles creating a unique salt for each hash as well. http://www.openwall.com/phpass/
You either need to specify all values, or specify which values you are going to use. Example: INSERT INTO tbl VALUES (A, B, C) -or- INSERT INTO tbl (col_A, col_B) VALUES (A, B) You will want to use mysqli to actually do the insert so its going to look a bit different: $stmt = $mysqli-&gt;prepare("INSERT INTO tbl (colA, colB) VALUES (?,?)"); $stmt-&gt;bind_param('ss', $A, $B); $stmt-&gt;execute(); Then if you need to do something with that row after you've inserted it, $mysqli-&gt;insert_id will give you that value (or let you know that the insert failed). This shouldn't be used for error checking, but as a final "Oh shit, something went wrong" notice its not bad. If you are going to specify all of the values, its fine to use NULL for an auto-increment field. In this case, if you are really only inserting 1 value, I'd avoid doing that because you shouldn't need to. If you have a table that has 10 different columns and you want to write 9 values, thats where it saves you some typing.
I think its good to point out because he should be using mysqli, not mysql functions.
Yeah for some reason it's firing perfectly after changing '==' to '='. That's one of the things that used to bug me when I started coding PHP. It's so damn testy. :)
Switched it back, and now it's working. This code is cursed!!! :)
I can't believe how many of you posted absolute **shit** and then got voted up for it. The responses I've seen here are embarrassing. The entire post should be deleted due to the large amounts of bad advice given.
&gt; without the user logging in
...the common use case, is if the person wants to start a *new* search, they'll click to the search page, or just type in the search bar that's probably present on every page. If they want to return to their previous search page, they'll use the back button, and the GET params will do the search for them again. So your suggestion is mostly redundant.
Which is probably going really overboard unless you're working at Google (or Sony), but whatever floats ya boat :P
Why not just give bcrypt a custom salt which you store on the filesystem? This achieves the same purpose. Store $2a$X$Y on hard drive, where X is two digits and Y is 22 alphanum characters; and remove the first 29 characters from the result hash before storage in the database.
This hasn't been the case for at least as long as PHP5 has been around. Ajax requests can be session aware just fine. Even if they werent, PHPSESSID doesn't automatically do anything unless you call session_id() somewhere in your code to set the session id.
Yes, are you? Seconded
* Generate random value * Encrypt needed data with random value * Encrypt random value with user's password. When the user changes password, you just re-encrypt the random value.
Of course he can, the user just supplies their password when they log in again and all decryption can flow from there.
You can repeat this step as much as necessary to gain the level of abstraction you need. Consider: You have 10 files that you need encrypt. * Generate 10 random file keys, encrypt the files with those and store encrypted files. * Generate another random master key, encrypt the file keys with the master key, store the encrypted file keys. * Generate PBKDF2 (or similar) of user's password, encrypt the master key with the PBKDF2 result, store the encrypted master key. I imagine this is very similar to the scheme that the truecrypt file format uses. However you always remember that the single point of failure is the user's password, this scheme just allows for more flexibility; not any more security.
Until the OAuth server gets comprised... *hopes to ***FUCK*** that never happens...*
I see. Thanks. But this code was meant to generate an error. I see what you mean about its logic, but it's not mine, it's someone elses code. Instead of it stopping page executing, it is instead displaying the fail_whale.png. I didn't look into whether their code was the best implementation, it was just me taking a whack at it. 
Everything you mentioned in the first two major paragraphs may as well be in plaintext; it relies on no secret to ensure security. If the attacker has access to that file, rest assured it will take him no time at all figure out its obfuscation method (since it's programmatic).
&gt; Their private key is only generatable using their plain text password. What's the scheme for doing this? Generally you use a key pair *instead of*, or *in combination with*, a password. I haven't heard of generating one from it.
If you're dealing with SSNs that must be retrievable, I'd consult PCI standards.
Implementing that could be a fun weekend project... but bcrypt really is enough. Plus, you don't want to rely on someone's untested (in the security sense, not the 'I looked over the source files' sense) php implementation of scrypt vs php's C implementation.
It's not like this is a high volume sub, even with questions. They should go here. Edit: Also, 464 subs vs. 10k subs. Pretty clear where the most eyeballs are to answer questions.
This depends. I say generated, but in some systems their actual key is stored on their local host in offline software and transmitted when they enter their password. I've also looked at using the plain text password (or some form of it) as a key for encrypting/decrypting the private key. Though I don't do work on actual secure systems, so all of this is mainly just me playing around and curiosity about how others go about it. 
&gt; Pretty clear where the most eyeballs are to answer questions. That point was made to argue against having r/androidquestions as well (that the best place to ask a question was r/android, because that's where people visited); and initially it was true, too. But it's slowly turned around with an official declaration. I know I get an innate kick out of helping people with questions, and so don't mind one bit also following a question-related subreddit in addition to it's main one.
Um, how many years have you been doing PHP professionally? What is your going rate? I'd hope less than 5 and less than $50,000, to be honest.
I'm relatively new here, but I enjoy the mix of questions and industry news together. I suppose if the questions became overwhelming it would make sense that they should be sent to r/PHPHelp. 
O my god. No. mysql\_real\_escape\_string() is **not** universally safe. It only protects one small form of SQL attacks; prepared statements take care of 2 more types but you still have to worry about LIKE and GROUP BY attacks. Please don't spread nonsense to noobs.
Coolness factor. Us veterans just don't understand kids these days ;-)
It's just been the de facto standard for PHP variable filtering since, oh, 2007 is when I started using them in production. It's been around since 5.0.
filter\_input() has one **serious** design flaw (possibly a security feature, I don't know for sure) and that is that it is inherently impossible to use with unit tests! Now, maybe that isn't such a concern with the noobs who didn't know about it until today, but for projects that need unit tests, this is a deal killer. I have to resort to filter\_var($\_POST['value']) instead.
Only if your dsn is "mysql:". Everyone should be using the "mysqli:" DSN in 2011. Or "pgsql" ;-)
ORMs are of the Devil [no sarcasm]. But **please** use them thoroughly in heavily-trafficked production environments; preferably your own home grown solution, too! I have carved a very lucrative niche out of converting crufty production ORMs to SQL views and sprocs.
HOLY SHIT! This looks so fantastically awesome!
The difference is that Android is for "users", not developers. They have a much larger potential audience. 78K users...
Agreed. With the really low activity r/PHPHelp gets, I would have no problem merging it with r/PHP.
GET requests are actually the best way to go. Just because they offend your sense of "pretty urls" isn't a good reason to get rid of them.
I think if you *declare* r/PHPHelp to be a friendly place to ask questions (r/PHP can sometimes be quite *unfriendly* in my experience), then people will be much more willing to ask there, without being afraid of backlash for their lack/misunderstanding of knowledge that we assume "every good php developer" should have.
Yes you could do that. The idea of using HMAC was it is a different algorithm so if there is a flaw in the bcrypt one then your whole solution isn't compromised.
aw crap... another mandate. 
well at least it applies to more than 1 or 2 postings in this subreddit...
**Please don't break the Internet.** If you store that sort of page-specific data should be stored on the page (via the query string). Using a server-side session to store page state will break if someone tries to open up two pages from your site in different tabs.
There are a ton of places to research and get help when coding... It's almost hard to pose a question that can't be resolved through a search. The odd interesting challenge or case study is okay, but preferably keep help posts to r/PHPHelp.
If you specifically want to go back to your latest search state, it's a good solution. I've done several jobs where users go back to a search and expect to see some former decision stay put, like the sorting order. 
Questions should go to Stack Overflow.
Now why would you use constants at all [except php's builtin constants] inside the class? Let's presume you want to move the class over to another system, where __DEVELOPMENT__ already has a value assigned [so it's not feasible to replace it]. What would that cause? One thing only, a almost unusuable object, or an object that needs heavy refactorying. If you need to somewhat decide the state of the object or environment or whatever, you better do it in the constructor or use a static setter in case of static classes methods and so on. Your example is flawed from the beginning.
TIL r/PHPHelp exists
Because you shouldn't re-use the same salt with bcrypt. Each hashed string should have a new, unique salt value. The salt is stored with the hash, so there's no reason to store it separately.
&gt; users go back They're going *back*, so the get variables will still be there and the sorting order will be preserved. :)
I never visit /r/PHPHelp, but might lend help here when encountering a question.
If you'll go down that path, take a look at this ORM which eases the tree use: http://www.propelorm.org/behaviors/nested-set.html
I don't see how it's overboard when it's only a little more complex than sha1(). PHP has everything required for both algorithms built-in on most systems, and always in 5.3+. I think it's very short-sighted to assume it's okay to keep using broken digests, even if they are salted. That said, not every project needs multiple methods like HMAC + bcrypt, but there is very little reason not to use bcrypt alone.
Right, I understand that point perfectly. How do you suppose he were to run a mass report on said data if he has to wait for them to login? Unless he plans on storing it unencrypted at some point for that purpose, I don't consider that a good system.
I replied to eyeckm. I understand this, however for actually doing *useful* things with the data (report, statistics, etc.) it's not a good setup, as you either have to store the data unencrypted or wait for whenever the user logs in.
for me it goes like this: 1. use placeholders and check each filter 2. if value is_bool or is_numeric, return it without modifications 3. if value is_string, return mysql_real_escape_string($value)
 class Node { protected $parent = null; protected $left = null; protected $right = null; public function __construct(Node $parent) { $this-&gt;parent = $parent; } public function setLeftChild(Node $node) { $this-&gt;left = $node; } public function setRightChild(Node $node) { $this-&gt;right = $node; } public function isRoot() { return is_null($this-&gt;parent); } public function isLeaf() { return is_null($this-&gt;left) &amp;&amp; is_null($this-&gt;right); } public function getRoot() { return is_null($this-&gt;parent) ? $this : getRoot($this-&gt;parent); } public function getLeftChild() { return $this-&gt;left; } public function getRightChild() { return $this-&gt;right; } }
It's probably going to come down to just the style of the spec defined for that particular site. The only other reasons I can think of are legacy programs which may use this data, which can't support spaces, or possible urlencoding/urldecoding issues between databases/apis/websites. For example: spaces would convert to %20.
Spaces just have some inherent problems. 1) if you have 'this is my name' in a table, it is possible that the name will display as: this is my name if the table shrinks. So, visually, it can be an extra chore to deal with. 2) a space converts to nsbp; (or whatever) in html. And since your name is Bob Smith not Bobnsbp;Smith, it is sometimes just easier to say no spaces for the same reason you exclude &lt; Edit: 3) spaces are not allowed in URLs, so any ?name=$Name type usages get converted to something like first%20%last Edit: 4) lets say a user tries to register the name Cygnus_X is the name 'Cygnus_X' or 'Cygnus_X ' If someone searches for Cygnus_X, does your query make use of 'like'. Because people searching for 'Cygnus_X' will not find 'Cygnus_X ' unless like is used Edit: 5) Giving credit on this one to driverdave. 'Cygnus X' &lt;&gt; 'Cygnux X'. How? The second name has 2 spaces between Cygnus and X, but only displays as a single space. This would both a) convince the database there was not a duplicate name entry and 2) could easily trick others into believing they were receiving a message from someone they do not know (in forums, etc). The point is, there are good methods for dealing with spaces, but lazy programmer like myself would rather just make a rule that says no spaces are allowed.
I don't agree either of these are problems. I think you are mixing up completely separate issues that are not related at all. HTML and tables do not impose any limitations or hassle on what can be displayed. You just following the proper transform rules, set up the styles you need, and these are really non-issues. Spaces being allowed - or not - in a username really comes down to what the back systems support and the preferences defined by the developer. You basically look upstream until you find either a system that cannot handle spaces, or a developer that decided spaces would not be allowed.
\&amp;nbsp; = non-breaking space and if that happens your 1) becomes moot.
Why even do that? There is CSS for declaring how you want white space handled.
So, I have a table with 2 columns: Name, Email I have a fixed with of 200px, and since emails vary in length, I set the rule to col1 = 50% wide, col2 = 50% wide. Under the right set of circumstances, the name will wrap and not display as I would like. What are the other options? I could set wrap = no and overflow: hidden, but that is also problematic. It is easier for me to just have a single name than it is to develop a set of display rules. So, basically, I do it cause I'm lazy and just want to finish my app.
There is no mysqli DSN. The "mysql:" dsn uses the mysqlng driver just like the mysqli extension. 
I do the first one. I think it is like the over/under toilet paper thing, everyone has a strong opinion.
3) Seems a non-issue, why would anyone do ?name=$Name when a more logical choice would be ?uid=$UserID? Querying by ID allows users to change their names without messing up URLs.
These are two different coding styles. There is no difference between them in terms of execution. I prefer the second style (Allman style) where braces are on a separate line but either is correct. In Javascript it occasionally does matter where you place your braces but not in PHP. 
There's actually a performance difference between over/under toilet paper. So, not a good analogy. 
Lets say you had a gd function that took in a username via a URL and displayed it graphically you 'could' pass the script the userid, let it search the database to pull out the name, then manipulate the name for the graphic.... or you could simply pass your graphic script the name through &lt;img src="display_fancyusername.php?name=thisismyname"&gt; if there is a space, you will need to URL encode and URL decode.... 
Actually, if you have a toddler, toilet paper rolls under actually save you from a big mess if they manage to get into there. Worked this one out pretty fast. 
mysql_real_escape_string() also fails in some situations when SET NAMES is used in your SQL along a given connection
I'm big on making code very clear, so I give braces their own lines. It makes code easier to scan. Quite a few guys I work with are big on setting arrays on singles lines, placing if statements on singles lines, etc... It kills me to look at that stuff.
[Whitesmiths](http://en.wikipedia.org/wiki/Indent_style#Whitesmiths_style) looks the nicest and most readable IMO but I seem to be pretty alone in that view.
Or a cat. But again, there's a performance difference. Not just a subjective choice like with where to put curly brackets. 
One could argue that curly brackets in a specific order give an aesthetic ease of viewing code and matching curly bracket pairs. One *could* argue that, but one couldn't be fucked. As long as the code is consistent I don't care :)
PHP questions are definitely welcome here. While, yes, there is a subreddit specific for asking questions, it is very-much-so a small group of people offering help; I don't even subscribe to /r/phphelp. Ordinarily, I would suggest using IRC (##php on Freenode) to ask questions, as the support community is much more active there, but you are welcome to post the question here as well.
ah...well TIL, I have edited my comment.
&gt; I prefer this kind of formatting: if ($x == $y) { doThing(); } You're a horrible person and you should feel bad. 
and then there's us freaks who like this: if ($x == $y) { doThing(); } http://en.wikipedia.org/wiki/Indent_style#Whitesmiths_style
Easier for your eyes to vertically scan also. No horizontal jumping.
i'm pretty sloppy with my braces, but i do that sometimes. :o]
This is one of the reasons I prefer Python. No squigglies. These sort of discussions are only interesting due to a limitation of the PHP language parser. If { and } were *optional* 'interesting' discussions about their placement would not happen. Having { and } in the same column means your eye doesn't jerk around so much. PHP style tends towards your first example, but c, c++, C#, javascript, java etc... all have their own guidelines. I've also read a lot of code that looks like: if ($x == $y) { doThing(); } Note the blank line.
Lol, why bother with any style at all? ;) just go made and use a random white space algorithm to style it
I prefer the first kind, but with a line of white space in-between the open curly brace and the first line of executed code within said block. if ($x == $y) { doThing(); }
My colleagues that use the second format are usually the ones that don't have indentation guidelines in their editor, and that's why it seems more readable to them.
You could probably get richer meta-data by just querying the schema directly. Though this isn't portable (one would assume the PDO version is). Most ORMs will have a polymorphic driver class for each Db type and query the schema AFAIK. I'd also look at making all your class vars private as you shouldn't ever really have them public. I've written a few of these myself but always found that I ended up needing more control over fields so I'd just end up integrating it quite closely with a Model class that has the ability to override any of the fields with a Field object. For example a field that is just another record's id is hard to do when you infer everything from the metadata... unless you rely on foreign key constraints and stuff - I think phpmyadmin does this. I always had the idea of allowing meta-data overrides to be set in table/column comments but never got round to trying it. Maybe this would be something to look at if you're not already.
I would disagree on your statement that 'staches are limitations. I view them as benefits.
What sort of editors are y'all using that don't have an auto-reformat feature? Or just run it through a formatter on the way into and out of the editor. Everyone gets to look at it the way they like it. Easy, right? https://www.google.com/search?&amp;q=+code+prettifiers 
I also prefer this formatting. Why? Because while skimming code my indent style will isolate conditionals and loops, and I can skim much more code before scrolling when there are not single braces taking up an entire line. Ending braces are important though, and absolutely deserve their own line.
Basically, the problem is that there are several ways to format your code, but only one of them is correct. :}
true, i could get better meta data from the schema tables, but i like the feature that i can define forms from tables or fields that don't exist. i.e. select '' as first_name, foo_field, foo_id from table foo or select '' as first_name, 0 as id plus, when defining grids from complex sql joins queries, it's easier to use PDO's meta data with than try to match up fields returned from the schema tables. yes, i think i needs more private methods. just trying to keep it versatile. 
Symmetry. Code is much easier to read when the starting brace is on its own line.
if you're a lone wolf, then use whatever you like the best. you're not wrong either way. if you're on a team, use what the team uses.
Its not so much one way or the other, but everything in a single codebase must be written in the same way. I prefer the second way.
For me it makes more sense to do it the second way because of scenarios like this: function blah() { if ($blurg == $blugh) { foreach($frrrt in $aghhhh) { doThis(); doThat(); } thenDoThis(); } } With the first method it would be a chore to figure out which closing curly matches with which opening curly.
I got bored and here's a working sample. No output buffers needed &lt;?php ini_set('display_errors', 0); function randNum() { for ($i=0;$i&lt;10;$i++) { echo rand()*$i.'&lt;br&gt;'; } } function failWhaleError($errno, $errmsg, $filename, $linenum, $vars=null) { echo '&lt;img src="fail_whale.jpg" alt="Error: '.$errmsg.'" title="Error:'.$errmsg.'"&gt;&lt;br&gt;'; } function fatalError() { $last_error = error_get_last(); failWhaleError($last_error['type'], $last_error['message'], $last_error['file'], $last_error['line'], null); } $old_error_handler = set_error_handler('failWhaleError'); register_shutdown_function('fatalError'); randNum(); trigger_error('omg'); randNum(); rndNum();
There's no difference in performance, and no lack of opinion on which is preferred and more readable. There are similar arguments about the number of spaces/tab that should be used for indentation. You are right to follow your own preference, and only wrong if you complain to someone about their preference... My personal preference is vertically aligned braces and tab characters for indention, along with some rather particular ideas about comments. I use a tool I wrote to "clean up" other formats to make it easier for me to read and work with. I don't complain about other people strange ideas, but rather do my best to litter the universe with my "properly" formatted code. 
Oddly, I like the second for PHP, and the first for Javascript. My formatting is perfectly consistent within a given language, but I have different preferences for all of them.
Yeah &lt;input name='group1[field1]' value='thing1'&gt; &lt;input name='group1[field2]' value='thing2'&gt; etc... 
for($oneveryonesnerves){ echo "I know a song that gets on everybody's nerves, everybody's nerves, yes, everybody's nerves. I know a song that gets on everybody's nerves, and this is how it goes.\n"; }
As someone who does a lot of python work as well, I cringed.
I follow the [1 True Brace Style](https://secure.wikimedia.org/wikipedia/en/wiki/Indent_style#Variant:_1TBS) which is great for PHP, JS and CSS. $('.haters').blur(function(e) { console.log('How many lines would your false brace style require?'); });
The reason so many people do it the second way is that this is how the PEAR standard suggests it be done and a lot of projects will defer to the PEAR standard because it's well known. Personally I prefer the first one as I feel the latter adds unnecessary length to a file.
Same here and it goes for variable naming too. In PHP it's usually $variable_name and Javascript will get variableName.
this story will in fact only last 60 seconds by default unless you specify: ini_set('max_execution_time', '0'); or use CLI.
Hitting return one less time is also a performance difference.
I never said it was a good example. In this situation it is however benign, not good nor bad. This isn't a crash course on security, its a hey how can I get this little nothing to work quickly.Everybody here was telling him to do this and that, and all I pointed out was he was missing basically two little things and what he wrote would work. There is a time and place for everything. Securing the Halo bday database from chinese hackers really shouldn't be on his list of things to do at this stage. If someone else comes here for advice and they have the same level of skill or less, then let em be. Its better that they learn and understand the basics first, and learn how to secure code once they know what they wrote actually does. Seriously, tell me why someone who is learning to program should learn to use PDO or mysqli when they don't even know how basic variables or arrays work. Once they understand the code they are writing, then they can actually understand how it is vulnerable and prevent the bad things from happening. Instead of saying oh you must use mysqli to do your query blah blah blah. He might do it but the only reason he knows why is because the guy on reddit said so
you can also use: `&lt;input name='group1[]' value='thing1'&gt;` `&lt;input name='group1[]' value='thing2'&gt;` if you just want numeric keys.
edited :P
Maybe you missed the 'optional'? Anyway, I'm glad both PHP and Python exist.
Life isn't a programming language. You can't define('r/PHPHelp', 'friendly'). It either is or isn't. If a declaration was made that questions must be asked there, all the people who want to answer, rude or not, would subscribe. 
Not at all if your indentation is done right. You just mentally draw a line from the first indent to the next closing bracket. function blah(){ | if ($blurg == $blugh){ | | foreach($frrrt in $aghhhh){ | | | doThis(); | | } | | thenDoThis(); | } }
If you're using an IDE, those kinds of things are highlighted for you, and shouldn't even be an issue. Normally the spacing in a function is long enough to where you can't see it on one 'view' anyway, so you wind up scrolling regardless. p.s. $frrrt made me laugh
If they use the back button, sure, but not if they return to the search after doing some operation on one of the search results.
$reply = (doIMakeLongIfStatements())? "That is rediculous! One liners are awesome!" : "I totally agree with you... split those statements up!"
And what about in switch statements? switch($urg) { case 'no': helpMe(); break; default: pleaseIAmDying(); } Or how about function veryLongArgumentList( $i,$would,$like,$to, $buy,$some,$of,$your, $ink) { vs. function veryLongArgumentList( $i,$would,$like,$to, $buy,$some,$of,$your, $ink) { Regardless of indentation, the opening brace on a new line seems to make it easier to read (from my point of view at least).
It might be a few things: 1) How are you accessing the file? Are you going the the webserver (ie.. http://localhost ) or trying to open it directly through your browser (ie.. file://your/file/here/ )? 2) Do you have an .htaccess file in your Webshare directory. 3) Was "Web Sharing" enabled when you edited the httpd.conf file? If so you need to restart it (uncheck then recheck Web Sharing). 
I'm a Python guy too, with similar sentiments. PHP has a pseudo-python mode, but of course it sucks. You can do things like: while($i &lt; 10): if($i % 2): echo "$i is even\n"; endif; $i++; endwhile; Or something like that, I really don't know why they bothered. It's somewhere in the control structures section of the manual if you're intrigued.
I must have an indentation viewing super power. Put the brace wherever the fuck you want, just indent it properly.
Personally find the first one easier to read. As long as there is indentation though I'm content. Also, one of the few weirdos that prefer alternate syntax for block statements. e.g.: if(is_array($elements)): foreach($elements as $key =&gt; $value): echo $key,': ',$value; echo doSomething($value); endforeach; else: var_dump($elements); endif; **Edit:** What I end up using though is usually dependent on the project's standards.
not really - it's return vs. space.
What's up with the extra set of parens around the function call?
You either use the style that is imposed by project/team or you use the one you've learned first.
I always use parentheses like that with conditional operator statements, to keep it clean in situations with sub-operators, like this: $some_var = (some_function() === null)? ... Generally it keeps me sane, so that I'm not fishing through code looking for a question mark.
I prefer the first - I think it's kinda weird that a curly brace takes up a whole line on its own. Both are equally fine though
I think he's being ironic. 
You don't indent cases? switch($urg){ case 'no': helpMe(); break; default: pleaseIAmDying(); } And I generally don't newline argument lists, even if they're long (though in my current project I don't think I have one function that takes more than four arguments). But to each his own.
Thank you for your response, 1) through http://localhost/test.php the file is store at Library/Webserver/Documents/test.php. It accesses the file no problem but it displays the file as test 2) I've look around in the Webserver directory and I don't see a .htaccess file 3) I haven't restarted it, I'll try now
lol
it works now!! Thank you so much!! Now I can actually start learning php
I condense everything to 1 line of code and remove all spaces/tabs/formatting
It's no big deal. It's called a coding *style* for a reason. Automatic code formatting should easily allow you to switch between the two, if you really, really can't handle one.
hint: look at the tabs, it tells you everything you need
Or I can look at the braces. Two options is better than one.
Ha. Simple. Perfect. Thanks.
I agree with your formatting. It's the way it was done in the original Dennis Ritchie books with C, which I learned first. The other way is pretentious. I mean, what are we going to do next? This? if ( ($x == $y) or ($x == $z) ) { doThing(); } As well, a lot of code in the old days was printed on paper as you interacted with a mainframe. People still also print out code. It uses more paper with that extra line wrap on the {.
I can see using it when you have multiple operators, but for a single function call, it just seems pointless to me.
It mostly comes down to preference and business cases. If you're building an app, and don't care if a username has spaces, then there is no reason to disallow it. If, however, you're integrating a system which has restrictions on user ID strings, then you'll have to enforce those restrictions. I guess it really comes down to whatever the lowest common denominator for your application can handle. The dumber restriction is disallowing characters in password strings. :-)
This...if you are doing PHP work then you likely are doing javascript...and you pretty much certainly want to use this style with that. There are nasty bugs which can creep up in certain (rare, but existant) cases when you use the other style.
That is just disgusting...I would hate to work with code written like that. Thankfully you people are a rarity it seems...
it's just habit at this point, with the consistency being a welcome side-effect
The entire point of having semi-colons and curly braces is so that you can really format your code visually any way you want. Python is really the only language where such minor syntax/indentation can make a difference that I have experience with.
1. Can be fixed with simple CSS, and then it's no more disruptive than "thisismyreallylongname." 2. Spaces do not "convert" to nbsp. An nbsp entity is a non-breaking space, and would prevent the exact issue you describe in your first point. 3. Spaces are allowed in URLs, they are simply encoded to either + or %20. The conversion should be transparent in most cases, but if it bothers you it is possible to sanitize the strings as "slugs" for prettier URLs. 4. I assume you mean "Cygnus X" vs "Cygnus_X." In many systems, these would be treated as separate, valid usernames. Again, if it's a problem, strip the strings of non-alphanumeric characters for comparison and store them as well. Then you might have two columns: username, and username_common. The common fields for both "Cygnus X" and "Cygnus_X" would distill to "cygnusx" and conflict, so you'd know the username is "taken." 
One should never use &lt;a&gt; tags for destructive operations. A few uninformed souls out there use web accelerators which may or may not honor 'nofollow'. Destructive operations should always be done as POST forms since they won't get followed.
This is the best way to pass checkbox data IMHO &lt;input type=checkbox name=group[] value=itemone /&gt; &lt;input type=checkbox name=group[] value=itemtwo /&gt; &lt;input type=checkbox name=group[] value=itemthree /&gt; &lt;?php if(is_array($_post[group])) { foreach($_post[group] as item) { dosomethinghere(); } } ?&gt;
To each his own, but for me it's not too hard to point the mouse to the bottom curly brace, or the start of a code block and scroll up or down. if(true){ //do something } //point mouse at start of curly brace, then scroll up to if. This method (and the other) fails if the code is not properly indented.
No, you don't understand the point. The whole idea is that you *can't* run mass reports on the data. Storing it unencrypted as well would entirely defeat the purpose. For many purposes (in which privacy and security are valued above all else) this is a good solution. Obviously, if you plan to run any sort of analysis on the data you are storing at any point then you would not use this system. But there are many cases where the user should be the only person with access to their data. This would be a valid system to use in those cases.
Yeah, people seem to hate it. I don't understand why. The braces visually denote the indentation level, where other formats either seem to denote nothing in my eyes.
Again, I didn't say it was impossible to handle the various inputs, I'm just said that steps have to be taken to ensure everything is handled correctly. It is far easier to 'not include a space' in your regex expression for verifying usernames than it is to take all the steps needed to change .css, use urlencode, use htmlentities(), etc, etc, etc. Some may not view these steps as a sufficient time savings, but I just don't see value in having a space in your username as justification for these steps (and according to the OP, other developers don't see the need either). 
I do this too!
I'm not zealous about it and agree as others stated that it's best to use team conventions when there is a team, but I most adopted my personal conventions according to the PEAR coding standards manual which I read way back when : http://pear.php.net/manual/en/standards.php They favor the same brace style as OP for conditionals, but the open-brace-on-separate-line for class definitions. I also adopted their docblock style for comments, especially on classes so I could leverage automated documentation generators.
Glad to hear it! Forgetting to restart apache has been a thorn in my side more times than I would like to admit.
I found I was often adding a blank line under the first brace anyway (although usually only if there is more code) eg. if ($x == $y) { doThing(); } And after working on a code igniter project, grew to like the second method. However, I do not really like the huge waste of space of an else if ($x == $y) { doThing(); } else { doThing(); }
if that property is needed for the objects to work properly, then you do it in the constructor. I am guessing that's why it is called a constructor, so you can set a initial state of the object from which you start your operations. The constructor has from my poit of view 2 main functions: 1: set a initial known and well defined state that gets your object going 2: perform some startup logic for your object beside 1. So in the constructor you control what the initial state of the object is. Moving some parts off the constructor will lead to inconsistencies and inducesdependancies. I think the above mentioned are reasons good enaugh.
I think the answer lies in the above posts. Just because someone does it, it does not mean that it is ok. Beside there is a big differenc in communities between php and java for example. A good programmer will be good in both, while a bad programmer will not understand alot of things, and will take the easy way out without considering the consequences. Imo, i prefer to have lesser ways for programers to screw up, so i won't handle their dirt few years after they made it. PS: again, i still think php OOP model is pretty much ok so far, and i see no need to implement binding expressions to local object properties. internal properties belong to the current object, and should be provided to them via setters, constructor or any means that is controllable by the object itself. 
&gt; I give braces their own lines. It makes code easier to scan I've heard this argument before but don't agree with it. I agree with your point that code should be clear, but what I disagree with is that extra line makes it more clear. With proper indentation there is no need for it, it adds nothing. I have no problem spotting the beginning of a function, or loop, or whatever. To me it just means i can put a few less lines of code on my screen at any point of time, and that is why I chose not to code that way as vertical space is much more finite than horizontal space. 
Not only that but most IDEs will highlight the matching brace. Plus many of programmers add comments at the end of their blocks to help identify what they belong to when scrolling up (backwards) though code. e.g.: if($x==$y) { while ($b) { echo $i; if($c) { $j++; } else { $b = false; } //if } //while } else { echo "bye"; }//if 
but from now on, it will be return vs space plus thinking about this thread.
actually 3 is the issue at hand. space is not allowed in the url without special encoding. so, you have a profile page that looks like www.example.com/profile/x%20noise . Good luck understanding [without knowing the encodings] that url. I might be srange, but for most people and maybe even search engines, the url counts pretty much. There are entire sites on which i navigate via the url. There are also sites on which i dig usernames like that and check their profiles. Also, this is also the reason other unallowed url characters are also not available in usernames :) PS: i hate urls that have encoded characters. they look like ****.
fixed
I favor the first, this was the formatting I learned from the C Whitebook and what K&amp;R used. So, being an old C guy that's what I use. But if you get paid by the line of code, by all means use the second!
From a Call Center's perspective allowing spaces or any non-alphanumeric characters makes their job and training rather cumbersome. But generally, I agree. It makes more sense just to allow them and handle the spaces appropriately.
Why not just use: if ($x == $y) doThing(); else doThing();
I do if ($foo≠$bar) { $herp=derp; } The statements are aligned with the braces, so you see blocks at a glance and it takes less horizontal space.
In some cases, it is more readable to put the {else} clause on the same line as the if’s, if you have a lot of repetitive test clauses and short {else} clauses. When I do that, I make sure to properly align the same things in neat columns.
Yes. Always POST for destructive data, and use some sort of CSRF token. Please.
There, fixed it for you: if ($x==$y) { while ($b) { echo $i; if ($c) { $j++; } else { $b = false; } } } else { echo "bye"; } No need for brace comments.
He too has been bitten in the arse before…
Yeah, but conditional statements get ugly to parse while scanning. condition?x+1:x; 
Here, let me fix that for you: if ($x==$y) { while ($b) { echo $i; if ($c) $j++; else $b = false; } } else echo "bye"; No need for extra braces
That would make my OCD want to kill whoever did that.
Hiyoooo!
I usually do, but as I said, "usually only if there is more code". Yes if there's just one line each that's what I do too.
So you are saying you 'could' do it properly, or you could do it a ridiculous way that makes absolutely no sense at all? Yeah, just do the search via the user id. 
This code makes me want to cry.
I am saying you could do it properly. &gt;Yeah, just do the search via the user id. quick, without looking, what is your reddit userid? Don't know? Can't remember? How are you suppose to PM someone if you know their name but not their ID? Do you see where this is going....?
yeah, ctrl+k, d in visual studio is a lifesave :)
**YOU'RE WRONG AND YOU SHOULD FEEL BAD** Only joking but it's a style and readability thing. I would find your code 50% harder to understand and parse, to the point where I'd make my IDE reformat it.
Who cares about number of lines? I'd much rather follow the flow of semantic "blocks" with only a cursory glance.
have you set a default for C?
There, fixed it for you: if($x==$y) { while ($b) { echo($i); if($c) { $j++; } else { $b = false; } } } else { echo("bye"); } Brackets are part of the outer block and should hang more on their own for extra readability IMHO. The work inside the brackets is indented as it is "locked" by the condition or loop outside it and must be "stepped into" to be activated.
Anything looks ugly when you don't use sufficient whitespace. `condition ? x + 1 : x` looks much better.
For single lines I too omit the braces, but I use separate lines, like this: if ($x == $y) doThing(); else doOtherThing(); There are people who hate this style, but the only reasons I've heard aren't really great, e.g. "what if you add another line to the if clause?" (in which case I add the braces - I have never forgotten to add them!)
It's easier to add a line than to add curly braces and a line later on. Also, with complex conditions it can get messy. Always add braces, it's never an issue in the future.
What part do you not like? Is it the lack of braces for the single statements? This used to be useful for small screens where you didn't want to scroll for two pages just to see one method, and I still feel that it is.
There are way more than two. Allman, K&amp;R, 1 True Brace, KNF, and Whitesmiths are just a few. And those are just brace styles. There are tons of different "coding styles" if you include things such as whitespace and indentation.
Actually, I'd argue that **condition ? x+1 : x;** would look better, but that'd just be my choice. Sumaes just likes to use **(condition)? etc** 
Here's a relevant Wiki article: [http://en.wikipedia.org/wiki/Indent_style](http://en.wikipedia.org/wiki/Indent_style) It explains pretty clearly the reasons for and against each style. Your second example would be considered Allman style. One of the reasons for it is the ease of commenting blocks. If for example, you were testing a loop, you could easily comment it out without changing much code. Or you could try several different conditionals until you found one that does what you wanted. Like this: //for ( int i = 0; i &lt; 10; i++ ) //for ( int i = 1; i &lt; 10; i++ ) for ( int i = 0; i &lt; 9; i++ ) { // Each block above can be safely commented out } Of course, there are reasons for your first example as well (K&amp;R style), one of the main ones is less "empty" lines of code. However, I personally feel that with today's large monitors, extra lines of code help with readability and we don't have to be so concerned with screen real estate.
Yes there is. It makes it less likely someone editing the code adding a line after j++ will forget to add the braces in.
Cool; thanks for a working example. I never knew about register_shutdown_function() before now.
Die in a fire.
You know what else visually denotes the indentation level? the fucking indentation itself.
All vertical whitespace is evil to me. My example code: if($user-&gt;indentationStyle !== '1tbs'){ killUser(); }else{ $user-&gt;isAwesome = true; } 1TBS for life, your allman style can go fuck right off, and if you indent like code ignitor I hope you die painfully.
The fact that there is even a dialog about this topic should show it is not worth the trouble using spaces in usernames. I agree with Cygnus_X's point that some seem to be missing - if you want to tackle it, by all means do it. But, there are so many other things to worry about. I feel like I've even wasted my time posting this.
$pdo = new PDO('mysql:host=YOURHOSTNAME;dbname=YOURDB', 'YOURUSERNAME', 'YOURPASSWORD'); $query = $pdo-&gt;prepare('SELECT * FROM categories'); $query-&gt;execute(); $results = $query-&gt;fetch(PDO::FETCH_ASSOC); print_r($results); that returns an associative array, you can also return a numeric array or object. http://www.php.net/manual/en/book.pdo.php has everything you need to start using PDO. hope this helps with your homework! :D
Actually, if you're not using any tokens in the statement, you can just: $query = $pdo-&gt;query('SELECT * FROM categories'); If the statement were an INSERT, UPDATE, or something that isn't going to return a row, you could: $query = $pdo-&gt;execute('DELETE FROM categories WHERE id = 3'); If you want to use variables in any of your statements, you would use prepare, and then $query-&gt;bindParam or $query-&gt;bindValue While the manual is an exceptional resource, I find this guide very concise and easy to reference: http://www.kitebird.com/articles/php-pdo.html 
MySQL workbench may have something under it's Data Modeling section but I've never really used it. The other option would maybe be something along the lines of exporting the table to CSV or similar, change the column names then import this. I think phpmyadmin has CSV import functionality. But you're right this does sound like something that should exist.
Exactly. Can't even begin to count the number of times something like that has happened.
If that's your concern then why are you putting braces on their own line?
"pretentious"? Give me a break.
No. Since brackets delimit the inner block, they are part of that inner block and indenting them at the same level means precisely that.
This alternate control structure looks better when embedding the PHP in HTML.
what a waste of space: if($user-&gt;indentationStyle !== '1tbs') killUser(); else $user-&gt;isAwesome = true;
This is my preferred method.
Actually: $var = call() == null ? 'isnull' : 'notnull'; would work just fine. Harder to "parse" visually, though, so I sometimes resort to $var = (call() == null ? 'isnull' : 'notnull'); And putting the whole thing in a set of parens is nice because if you ever make it part of concatenation, it'll do what you expect. $var = 'String ' . call() == null ? 'isnull' : 'notnull' . ' end of string'; vs. $var = 'String ' . (call() == null ? 'isnull' : 'notnull') . ' end of string'; do very different things.
This is an anti-pattern, the language shouldn't encourage mixing code and markup like that. In all honesty, I don't know of any other general-purpose programming language where this behavior is so rampant; everything else requires you to use some sort of templates or echo/print the HTML out. I guess it's that "Hypertext Preprocessor" attitude at work. Off-topic, sorry.
It's not my concern, and I'm not talking about putting braces on their own line (although that is what the above poster did). I was just wondering why the lack of braces would cause "OCD" problems.
I have gotten that much, but when I do: while ($row = $result){ $catName[] = $row['cat_name']; } I am getting a infinite loop which results in a memory error. 
I used to do this, but after working for a place whose standard style that we all followed was to add the curly braces, I have to admit, it does make it easier to read when quickly skimming through the file, so now I add them. It's not so mucha big deal for personal stuff, but if other people are going to be looking at your code, you should make it as readable as possible.
This is how I would do it: $myarray = $pdo -&gt;prepare("SELECT my_row FROM categories") -&gt;fetchAll(PDO::FETCH_COLUMN, 0);
I like the alternative syntax in views, but not elsewhere. It also annoys me when people do things like this: if ( is_array ( $elements ) ) 
 if ($x==$y) while ($b) { echo $i; if ($c) $j++; else $b = false; } else echo "bye"; As long as we're getting rid of as many brackets as possible. (I, however, am of the Always Put The Brackets crowd.)
This is the way. Listen to this person.
I find the parentheses around the condition to be the most logical, but my opinions (like almost everyone's) are influenced heavily by many years of habits, both bad and good. As for the OP's question, **clearly** those of you who do something_like_this() { } are wrong. That is all. __destruct() { me-&gt;stop_sarcasm(); } 
You're missing some brackets
ah ya, forgot about $pdo-&gt;query. did you declare $catName = array(); before the while loop? I also don't really understand why you need put the data in another array when it's already in one
It doesn't matter where you put it provided you do it the same way throughout your project. If you're in someone else's project, adopt their standards. It's the polite thing to do.
You may like Python, then. ;) I don't care for it because `endif` and friends feel like BASIC. With this mode you can neither match braces (there are none) nor reliably look at indention, because whitespace isn't actually significant, it's just a courtesy from the programmer. This is perfectly valid: $i = 0; while($i &lt; 10): if($i % 2): echo "$i is even\n"; endif; $i++; endwhile; Much more readable at a glance. Fuck that, now you've gotta parse it in your head. Don't know about other editors, but vim is also completely ignorant to this style, so no help there. I'd rather have braces with indentation, at least then we can match pairs or autoformat or something when somebody writes this kind of code. Also, it still requires semicolons after each statement. That's just a little detail, but the same kind of thing. It's a cute trick that doesn't really help you and will get you strange looks if used at work.
Yeah. Not to criticize your coding style (to each their own), but if I came across that, I would probably quietly add the braces in and remove the space between the if and the condition, or it might haunt me in my dreams.
The only concern I would have with that setup is that it puts more stress on your servers when the CDN fails (for whatever reason). In theory, this could bring the servers to a halt if it happens at the wrong time. But, I'm really just throwing it out there as a "could happen". Theory != practice, as usual.
I'm not saying that's my coding style. I'm just wondering *why*. Can't a man ask *why*?! */goes and cries in the corner*
Please don't pattern it off of magento. Magento looks like it was developed by Java guys who decided to learn PHP. 
If the CDN fails and you don't have the images in the database, how will you serve them? Sure, you can serve them from the filesystem.. but again, if you have several load-balanced app servers, the currently responding server might not have that image on its filesystem. If you have 5 app servers load balanced, then you can assume only a 20% chance that any given server has an image on its filesystem. That is unless you have a distributed filesystem to handle that. But a mongodb cluster basically IS a distributed filesystem, so if you're going to go the distributed filesystem route, why not just put the images in a mongodb? Hope that rambling made sense!
Nice username, the irony is thick with this one.
Most modern IDEs worth their salt do the space for you.
It makes it a lot harder. Also it really depends on your audience. For example, I do a lot of Drupal work, I want to strangle people that use your method since it is specifically forbidden in the style guide. There is a special circle in hell for you and people who use 4 tabs as spaces and like to run lines on to 500 characters.
I've had to clean up indian code lately that does this shit - and loops through quite often 10-15 levels of if else statements in the same function. I think that should I be able to do the things it makes me want to do to the original coder, I would be able to be acquitted by a jury of my peers.
I used to do it the first way all the time when I was the only one looking at my code. Now, the team standard is the second way and I find it much easier to read.
 if ($x == $y) { while ($b) { echo $i; if ($c) { $j++; } else { $b = FALSE; } } } else { echo 'bye'; } Drupal coding standards applied to it (of course you should use better named vars, but for this example it works.)
if someone is trying to avoid duplicate usernames, not allowing spaces a quick fix. bob jones != bob jones != bob jones 1 space between - 2 spaces between - 3 spaces between then, with something like a forum, any amount of normal spaces look like one space, so usernames look identical. also, a quick regex sanitizes usernames from null chars and all sorts of oddities that someone whipping up a simple username checker doesn't want to or know how to handle.
Additionally, avoid "SELECT *", unless you REALLY need every field that both exists now and conceivably exists in the future. It's more data across the socket, and it's one of those things that more advanced programmers will hone in on as sloppy form. Most of the time it's not a big deal, but you should really be specifically asking for data. The exception typically comes when you're setting up a persistent data object that needs to be bounced around for multiple purposes, but if you're really just making a list of categories for a dropdown, you likely only need two or maybe three fields.
I hate you. I'm the guy they hire later to add a function call after your doThing(); Now, I have to edit 4 lines of code instead of one. Stop it.
I disagree with tabs - you must not work with a lot of code that jumps from platform to platform. Set your IDE to do your tabs they way you want, but use spaces in code you share.
It was done like that in books to help deal with the occasional mistake by the offset printing press.
Actually, I do a lot of cross platform coding (stglib.googlecode.com among others), and I find it easier to use tabs. I'll use MSVC6 in windows, but vi (default configuration uses tabs) on all other platforms (mostly linux).
As I said, feel free to use tabs in your IDE of choice, but don't save your files with them.
I'm heavily influenced by the symfony style guide, personally. I follow it on personal projects. I prefer two spaces to tabs, but at work we use very strange conventions. I get the impression it would make your brain bleed... It's excessively spaced and blocked out. It's a shame, but even worse is that we apply that to symfony, so our auto generated files completely mismatch custom code. Yeah. Our dev management is extremely fractured in methodology and consists of no one with applicable skills.
Yeah, I'm not much for all the extra space, something like this is fine for me: if (is_array($elements)) { sort($elements); } Yet even so, I prefer my parenthesis to be connected. Especially if it's a function\method\class call.
That's a trivial fix in your IDE though, what you describe would bug the ever living shit out of me though. Code should be consistent throughout a project.
Haha, I don't use an IDE. I'm kind of old school... I've been writing with just syntax highlighting for ten years now. Some people think it's insane, but I love the extra interaction. When things are really ugly, I'll use an external formatting tool. People fight with me about this all the time.
I'm not sure why you're being so defensive when I made it pretty clear I was just pointing out a possibility. resource A goes down, puts more pressure on resource B, which goes down, putting more pressure on resource C, cascading until everything is dead. It's not uncommon, I was just pointing out the possibility. No need to get defensive about it.
You cannot simply spam email or you'll get blacklisted. The way to do large bulk emailing isn't to simply do a lot of emailing, it's to get a large collection of servers, and do small amounts of emailing from them. successfully emailing large groups of people is a lot tougher than most people realize.
I respect your right to save your files without tabs as you wish, but what gives you the right.to tell me not to? I've been writing code for 30+ years, always used tabs (at least once I got past basic) and see no valid reason not to continue. Feel free to express your opinion while I stand up for both of our rights to tab/space freedom.
Actually I don't space between closing paren and left bracket. Looks better ;-)
http://www.codinghorror.com/blog/2009/04/death-to-the-space-infidels.html Fact of the matter is I don't care what you do with YOUR code, but if it is code OTHERS will interact with, use the method that works the same across all platforms with no modifications/adjustments. Especially in the PHP world.
Because you're fucking with them. If you are the only one that will ever touch your code, do whatever works, if others will need to touch it - SPEAK CLEARLY. &gt;The depressing thing about all this is that code formatting matters more than you think. Perhaps even enough to justify the endless religious wars that are fought over it. Consider the 1984 study by Soloway and Ehrlich cited in Code Complete: &gt;&gt;Our studies support the claim that knowledge of programming plans and rules of programming discourse can have a significant impact on program comprehension. In their book called The Elements of Programming Style, Kernighan and Plauger also identify what we would call discourse rules. Our empirical results put teeth into these rules: It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims. &gt;There's actual data from honest-to-goodness experiments to support the hypothesis that consistent code formatting is worth fighting for. And there are dozens of studies backing it up, too, as Steve McConnell notes: &gt;&gt;In their classic paper Perception in Chess, Chase and Simon reported on a study that compared the abilities of experts and novices to remember the positions of pieces in chess. When pieces were arranged on the board as they might be during a game, the experts' memories were far superior to the novices'. When the pieces were arranged randomly, there was little difference between the memories of the experts and the novices. The traditional interpretation of this result is that an expert's memory is not inherently better than a novice's but that the expert has a knowledge structure that helps him or her remember particular kinds of information. When new information corresponds to the knowledge structure -- in this case, the sensible placement of chess pieces -- the expert can remember it easily. When new information doesn't correspond to a knowledge structure -- the chess pieces are randomly positioned -- the expert can't remember it any better than the novice. &gt;&gt;A few years later, Ben Shneiderman duplicated Chase and Simon's results in the computer-programming arena and reported his results in a paper called Exploratory Experiments in Programmer Behavior. Shneiderman found that when program statements were arranged in a sensible order, experts were able to remember them better than novices. When statements were shuffled, the experts' superiority was reduced. Shneiderman's results have been confirmed in other studies. The basic concept has also been confirmed in the games Go and bridge and in electronics, music, and physics. &gt;So yes, absurd as it may sound, fighting over whitespace characters and other seemingly trivial issues of code layout is actually justified. Within reason of course -- when done openly, in a fair and concensus building way, and without stabbing your teammates in the face along the way. [Source](http://www.codinghorror.com/blog/2009/04/death-to-the-space-infidels.html)
Our workplace uses same line for if's, for's and other "conditionals", different line for starts of classes &amp; methods etc... Doesn't really matter, what's important is that you follow the coding style in-place (e.g. ours is Zend's coding style) for your workplace or project.
You just essentially stated how I understand the point, so I don't know why you suggested I didn't get it. So I suppose I will ask again: why even store users data if you aren't going to be doing things with it? That sounds like the most secure approach.
What is this team you speak of :) ? I know forever cowbow coding alone :(
they aren't necessary
I once agreed with that - the idea that within a silo you do what you want, but when working on a team you have to conform to the same method. But the squabbles among the team over what was going to be the standard, and then the differences between teams and whole projects meant that one invariably had to deal with various styles as it was, so I made these rules: 1) don't complain about how somebody else formatted their code - if you can't deal with it, fix it, use an existing tool or sed, or write your own filter and change it. 2) If you make a few minor tweaks, leave the formatting alone and take the time to align your changes to the existing pattern. If you make significant changes and feel the need to change the style, do the whole file to match not just a section. 3) The diff output by the svn server at check-in must be set to ignore ALL whitespace differences. What ended up happening at first for a while was some minor squabbling between a few intransigent coders who changed format back and forth ad nauseum, but eventually two things happened: those who were battling started submitting suggested patches to each other (which was not ideal but acceptable), and everyone as a whole developed a new appreciation for, or at least good set of tools (mental and/or programmatic) for dealing with other formats. And the squabbles disappeared and although the codebase was not all equally formatted, the compiler (nor would php) never complained. At least, that's how well it worked except that one guy, who mysteriously disappeared from the payroll at the next opportunity. It's like thermonuclear war - the only way to win is not to play. 
Looks like you got the problem sorted out, but I'm still gonna say this: You aren't/weren't compiling anything. Your [Apache](http://httpd.apache.org) web server was ignorant of the PHP language, and didn't know what to do with that funny file with the .php extension, so was either handing them to you as a download (Because of MIME types), or outputting the script as text that your browser displayed verbatim as you wrote it (because your browser and Apache both thought it was plain text, which you browser knows about). Specific take aways from this: Apache and PHP are two separate "things". The PHP interpreter only knows how to do stuff with the code you give it (the coding part). It doesn't know how to transfer it to you. Apache only knows how to give you the things you ask for. the "LoadModule php_module lib_php5.so" line in your httpd.conf file tells Apache that you want Apache to take those .php files, hand them over to PHP to figure out what the code says to do, and then it hands the results of that back over to Apache, and Apache will spit that out over the network (yes, http://localhost/ is still over the network)
This is the process I was hoping to automate.
Did you bother to read the last part? Also, nothing like coming along to fix some of your code and firing up vim and because no one gave a shit somewhere along the lines there was a section with mixed line endings and since I didn't dig through all 400 lines of code before making a save, I now get to go clean up 150 ^M characters. I wouldn't enjoy working on a project with you. Agreeing on a coding standard and following it isn't that much to ask. Take the one from the framework you're using, or fall back on the well written perl one - they all have one.
Interesting. Didn't realize. Oh well. Why break with tradition? Tee hee. But seriously, though. I really like the [1TBS](https://secure.wikimedia.org/wikipedia/en/wiki/Indent_style#Variant:_1TBS).
Me too. As well as reducing the risk of ambiguity, my editor can easily find the start and the end of the statement using the parenthesis.
I find the opposite to be the case, since at a quick glance { can look a lot like }. By putting { at the end of the line instead of on its own, I can just count new indents and subtract every time I see a }
I apologize if I sounded defensive, that wasn't my intent. My point is that if your CDN goes down, what *can* you do? Either not serve images, or take the hit on your servers.
I have a cat, I just don't let my cat in the bathroom, it would tear up my show curtain, and lick my toothbrush, fall in the toilet all after using litter box which will then leave wet dusty footmarks everywhere. (Really I just hate the under method)
This is an SQL statement example. What is this "process" you are looking to automate? I suspect there is a lot more detail that you are not telling us.
Sometimes I wonder if reddit has reached singularity, that was my first thought when I saw that.
You mean the last part about php? Yes, I did read that, and I thought I'd addressed it. I've been doing nothing but PHP coding for the last 3 years and couldn't disagree with you more. There is nothing special about PHP that says you have to conform to a standard. The php interpreter doesn't care. Only people do. The bottom line is this: There is truly no right or wrong way. There are people who don't care, people who do care but have learned to deal with it, and then militants who insist that everybody conforms to their idea of what is right. I hire the first two types. I do my best to weed out or fire the last type. Actually, I'm really more concerned with other non-negotiables in your coding style, such as do you ever make a call to mysql_query and NOT check the return value. Even just a simple query() or die() is better than not checking. If you don't check return values, I won't hire you, because you don't know how to program, or haven't had enough experience to know better. That's important. Whether you use tabs or spaces, braces alignment, even if you're using an M$ IDE that adds ^M's doesn't matter one bit as long as I can throw you a file with all of those problems in it and you can still fix the code and make it go. BTW, fixing ^M's is trivial. dos2unix. I've also done it with sed. Used to have an emacs script, but then I went back to just vi. And the cool thing about handy unix utilities like dos2unix is that even if you can't get a win32 .exe version of them, you can always install cygwin. Yes, agreeing on a coding standard can make life easier for those who already prefer that standard. But I'd rather hit the ground running with programmers that can program and can adapt to different input and can get the job done. Most can hack it, and strangely enough, those that can are also producing better code. Yes, all the code I produce uses tabs. And honestly after all my time in the business I think that's the best way. But not all the code I run has tabs, or even similar formatting. And this applies to projects in C, C++, and PHP. So back to my original point: I believe in letting programmers use their preference in formatting. If the compiler/interpreter doesn't give a hoot, then neither do I. Even if I am occasionally annoyed having to adapt to an odd style. And I believe in applying this principle even down to the file level within a project. I will personally clean up inconsistent formatting within a single file if somebody's been sloppy or pasted in code in a different format. But if half the code is one way and half is another, the only programmers having a problem with that are the ones that are too inflexible to be useful in the real 'get stuff done' world. But::: I will never tell another programmer that he's formatting his code wrong. I believe that's like telling somebody who's gay that they're living their life the wrong way. It doesn't matter. If you think it does, then you have the problem and you can take the time to fix it (referring now only to programming). Don't want to hand edit thousands of lines? No problem, you're a programmer. *Write a program*. Fix it. Don't come whining to me, and don't throw a fit to anybody else either. It's *YOUR* problem that you can't deal with it, not theirs. Now if you can't be bothered to check return values, or any other of a hundred programming method infractions, you're gonna get shit from me, and if you don't straighten out you'll be out the door before long. Tabs or spaces? Braces aligned or compacted? Spaces between keywords and ('s? Don't care. I mean, I personally care, and have a preference, but it's not important. It's just freaking whitespace. It doesn't change the program. Concentrating on the spaces between the logic is a waste of time. And honestly, so is this discussion if you can't see the truth of what I'm saying here. 
Maybe I'm missing something but how is that any different from //for ( int i = 0; i &lt; 10; i++ ) { //for ( int i = 1; i &lt; 10; i++ ) { for ( int i = 0; i &lt; 9; i++ ) { // Each block above can be safely commented out }
In PHP specifically (as well as C, C++ etc), there is no difference syntactically. Line breaks and indenting are ignored, and are not significant in regular code. So you can use whatever style you want (or the project you're working on uses). I always used to code with braces on their own lines, because that's how I was taught back when I learned C++, but nowadays I've changed my style to opening brace on the previous line, since I do more Javascript now and Javascript sort of highly encourages (although it still doesn't absolutely require) that style. Visually I preferred braces on their own lines, since the opening braces were more visible. But yeah, I feel that's falling out of favour.
 switch ($urg) { case "no": helpMe(); break; default: pleaseIAmDying(); } function veryLongArgumentList( $i, $would, $like, $to, $buy, $some, $of, $your, $ink ) { } $a = array( "key1" =&gt; "value1", "key2" =&gt; "value2" );
Wow, as I said I wouldn't enjoy working on a project with you. The last part was where they referenced more than a dozen peer reviewed studies that showed your methodology makes teams slower and introduces bugs. As in "You get stuff done, but you cost your client and yourself more doing than teams that take the time to speak the same dialect to each other." It has nothing to do with "CAN THEY ADAPT" - It has to do with "SHOULD THEY HAVE TO" - if you can't follow a coding standard, you can't code in my book. It's the same as being functionally illiterate, sure you might be useful on many projects, but I'm not going to use you as my goto guy on important stuff. It's not a matter of concentrating on these quirks, its being professional enough to avoid the need for these to ever be a quirk in the first place. Also, it's obvious you have never dealt with many of the cool modern tools we have to create self-documenting code etc. if you think that these minor quibbles are completely irrelevant. More power to you, I don't have to work with you, but I prefer to play nicer with others.
Somehow a php file got messed up where newlines were removed and all those single if lines without braces suddenly stopped working. I hate him too.
I always use the second style because it makes it easy to comment out the control if you need to while debugging. consider the following $assignments = get_assignments(); foreach ($assignments as $assign) { if ($assign-&gt;type == "quiz") { echo $assign-&gt;score; } } but now, say you want it to echo out all the assignments, no matter the type... $assignments = get_assignments(); foreach ($assignments as $assign) { //if ($assign-&gt;type == "quiz") { echo $assign-&gt;score; } } ===VS=== $assignments = get_assignments(); foreach ($assignments as $assign) { //if ($assign-&gt;type == "quiz") { echo $assign-&gt;score; //} } the difference is small, but along with being more readable, i think there are more advantages with newline style.
Not sure how to explain it better. I've got 2 databases one is Jcink another is Simple Machine Forums. I'm attempting to take the contents from the Jcink forum and move it into the SMF forum. In some cases it's a direct transfer, in other cases it takes a bit of conversion such as posts/PM's being that Jcink saves posts in raw HTML so it'd have to be converted to BBCode. Since they are 2 completely different types of forum software they have their own designs but many factors are the same, user ID's are user IDs, Post ID's are Post IDs etc, etc. It's not the first time I've done it but I've done it the long way last time and I was wondering if anyone had similar issues they've solved creatively themselves or other software.
I do use your method now, but I've always wondered how others approach this situation: How do lay out something like an `if` statement where the condition doesn't fit on one line? Example: if (!empty($this-&gt;metadata['http_status_code']) &amp;&amp; $this-&gt;metadata['http_status_code'] != 200) { $this-&gt;setstatus($this-&gt;metadata['http_status_code']); } Even if you insert a blank line after the opening brace, it still doesn't really emphasize where the block starts: if (!empty($this-&gt;metadata['http_status_code']) &amp;&amp; $this-&gt;metadata['http_status_code'] != 200) { $this-&gt;setstatus($this-&gt;metadata['http_status_code']); } Do other people indent when wrapping a line? What would you do? Or do you not worry about creating long lines?
Thanks, but I never said those were the only two. &gt; These are two different coding styles.
While, yes, technically the braces around the first IF aren't required, they do allow you to clearly see what is contained in it. You'll notice that only the lowest level of any scope that is only one line are the only items without braces in my example.
Good stuff! The bootstrap and the registry are a strong combination. I'll be watching for part2.
I'm guilty. Thanks, I will now keep this in mind.
hehe, 150 comments about something that doesn't even matter.
Usually something like this: if ( !empty($this-&gt;metadata['http_status_code']) &amp;&amp; $this-&gt;metadata['http_status_code'] != 200 ) { $this-&gt;setstatus($this-&gt;metadata['http_status_code']); } I rarely break apart the conditions onto their own lines unless there's quite a few of them or at least 3 or 4 really long named ones. In general I avoid having that many conditions to begin with too.
Why the else on it's own line? That's really odd looking.
It appears that you also find horizontal whitespace to be anathema ;) Personally, I find it easier to scan when at least keywords are given some whitespace love. Of course, that then leads to all sorts of conundrums over whitespace usage when a keyword is immediately followed by parens (eg: if, switch, etc...). Which then leads to questions as to whether function/method calls should be treated the same way as keywords...which raises more questions as what to do when arguments are omitted...and so forth. After many years of experimentation, I have found that the most important thing is readability. Mostly I think that that boils down first to consistency. Yet, even taking that as a given, I have found that it is sometimes worthwhile to apply formats that convey the structure of the code that allows for it to be read concisely and rapidly. Usually, sticking to the standard OTB will do that (especially when the code is organized into small groupings of simple procedural blocks) but occasionally, using additional vertical/horizontal whitespace can help untangle density (eg: complex expressions, many arguments, deep nesting, code made-up of many similar/nearly identical sequences of code blocks/groupings, etc...) 
&gt; I wouldn't enjoy working on a project with you. Agreed. Dealing with people who are inflexible and unwilling to learn new things is never fun. &gt; your methodology makes teams slower and introduces bugs Couldn't disagree more. Bugs come from crappy coders, not crappy style. I've had to fix bugs in way too much code over the years to believe what peer reviewed studies have to tell us about where bugs come from. The developer either knew how to code, or he didn't. He understood the consequences of his code (not his whitespace), or he didn't. The bugs come from not understanding what you're doing. And not checking return values. And not testing. And not writing "defensively", i.e. pretending that anything could go wrong and writing cases to handle and detect even the supposedly impossible cases. &gt; if you can't follow a coding standard, you can't code in my book Again, dead wrong. I know people that seriously - and I mean dead seriously cannot, will not, EVER follow somebody else's style - and are the best programmers writing the most elegant (functionality, not style) code, and they are worth their weight in gold (most are pretty hefty actually) and I will gladly deal with their idiosyncrasies. Then there are those that write super pretty code exactly to the specifications and exactly to the style guideline and it breaks the first time you put it in the field. Most people fall inbetween these two extremes, and I would agree that there is a *tendency* for bad style to follow bad code. But it's not an absolute, and if you believe that you're simply blind. &gt; It's the same as being functionally illiterate, sure you might be useful on many projects, but I'm not going to use you as my goto guy on important stuff. You're making a presumption that I cannot or wouldn't be able to code to your standard. The fact is, I can, and often have. Where the requirement was placed on me, I met it. I saw the value at that time. When I got to the point of running my own team, I at first tried to do the same as you, but later realized that the style wasn't important. I came to that realization earlier than most others would because my own style is so different from the norm, and I had to adapt to reading other formats and converting between formats, and built tools to make it trivial to do so. Although initially an experiment to avoid conflict between certain individuals whom I valued as good coders, it soon grew into a new philosophy of style if you will. To a large degree, the style ends up being determined by the developers present on the project, and sometimes changes over time. What's amazing is that the entire team's ability to be functionally *literate* actually increases because of their exposure to differing styles. While this isn't such a big thing in smaller team writing nearly all code from scratch, in others and the PHP world in particular it's even more important as there are so many libraries, templates, and other sources of code out there. Yes, a vast majority of it follows PEAR, but not all. Learning to see the code through the formatting is a very useful skill that can be very beneficial. I'll admit that when I'm having trouble following something particularly complicated I'll run it through my filter tool first, just because it saves me a little bit of time - and sometimes even points out some {}'s error that wasn't as obvious in the original format. I read better in my own style, but I can still hack something up with vi an keep it in the original style. I've even inserted ^M's on the end of lines in vi just to avoid freaking out the guy using notepad instead of msvc. Now when I publish my own personal projects, it's in my own coding format only - which is what I was alluding to earlier. And when I write or reformat code currently (as the guy in charge has the right to do) it's saved in my format. But I never meant to say I couldn't or wouldn't use another format, I just have the luxury of not having to anymore, partially because of my relaxed format rules, and partially because of my title (i.e. I'm not writing to somebody else's spec, I'm writing the spec). So my apologies if I appeared to say otherwise. &gt; It's not a matter of concentrating on these quirks, its being professional enough to avoid the need for these to ever be a quirk in the first place. I'm not concentrating on the quirks, I'm simply accepting them, and honestly for the most part fostering an environment where they are ignored because they don't matter. The value of the programmer is in his ability to generate code, not arbitrary professionalism. I would rather hire the artist that may be temperamental but gets the job done (and I don't have to fix his bugs later). I would rather have people who can work with others (even if they have to run the other guy's code through a filter before they can read it) and work together on a task without squashing their creativity and slowing them down to conform to an idiotic set of rules that don't contribute to the bottom line. Actually, I see it as more professional to understand and accept other coding styles, and even have the ability to write in them. Yes, it slows me down slightly to write in another style, but there are times when that's the right thing to do. &gt; Also, it's obvious you have never dealt with many of the cool modern tools we have to create self-documenting code Actually, I have. Again, you're making presumptions that are incorrect. I even wrote my own self-doc code back in the day (20 yrs ago on OS-9 systems). I have tweaked the input rules slightly for some of the modern tools in some cases to accept a wider range of input formats. Although I don't put the emphasis on it that some people do, I do like them. It's really critical for libraries, API's, and any code being pulled in from another source. And for larger projects with a lot of inter-relating components, especially when done in proper OOP style also. But I'm a lot more relaxed about top level routines following the format though, as long as proper overviews of what the code is for are put in. Code done right is naturally self documenting to a certain degree (i.e. opportune use of function and variable names) - and the part where it isn't is not fixed by these tools. You need proper design charts for that. It's one thing to explain all of the functions of an API, variables, returns, etc, but if you don't throw in a few additional diagrams and explanations to show how things work internally you've not really communicated how to understand and use the API - a failure I find very often in so-called self documented code. It's a tool that can be useful and time saving, but is not a substitute for actually documenting how it works and how to use it. Sometimes even just a few use examples is enough. The PHP.NET site usually does a really good job of this. A lot of self-documented code doesn't. Not the fault of the tool though. * So I appreciate and understand what you're saying, but I counter with: it's not really necessary to enforce a specific style to get good code. I know from doing so. I'm not a coding anarchist, I'm just saying that style doesn't matter as much as a lot of people think it does or should. I can do everything the same as you except the style and have a perfectly good program. With a team. One that includes guys who insist that their way (style) is better, and ones that don't care. And they don't have to agree on the style to agree to get things done. They just have to agree to overlook style and concentrate on substance. 
The problem is the definition of clearly. I can see in mine clearly what is contained inside what, and I can also see in yours clearly what is contained in what. However, that is because of the whitespace, take that away, and both our examples become a bit more unclear. I actually prefer your example, which is what most of my code looks like. I just thought that it should be shown that removing brackets because you can remove them, isn't necessarily a good thing. 
To be honest, I'm guilty a lot, too :)
Creepy nasty bugs? Can you be more specific?
It's also hard to read when you come back later and you have to think, now what exactly am I retrieving here?
No idea why you're being downvoted, this is a good point
 $sth = $pdo-&gt;query(" SELECT * FROM templates "); $my_array = $sth-&gt;fetchAll(PDO::FETCH_ASSOC); Note that if you had input, you'd want to use "prepare" and "execute" instead of "query".
Does fetchAll execute the query?
i appreciate you pointing out the difference to me. it could have really made the difference btwn me getting a job and getting laughed out, as you said. yesss i've read a few things on stack overflow. i use the w3schools.com tutorial for most things though since everything is structured in a way i can understand. it seems i should be verifying stuff with SO and tizag... after all, i'd rather not waste my time on a mistaken or outdated tutorial.
Due to JavaScript's automatic semicolon insertion. Consider a function that contains something like this: return { x: 1 }; Compared to: return { x: 1 }; The first returns an object. The second returns *undefined*. This happens because JavaScript automatically inserts a semicolon after *return* if there is nothing following it on the same line.
ugh, no kidding. i've checked my email only to see that "i" have sent three or four spam msgs to people in my contacts list :/ thanks for clearing that up for me!
In PHP it doesn't matter. [In JavaScript is absolutely matters if you are trying to return an object.](http://www.reddit.com/r/PHP/comments/lwgld/whats_the_big_deal_with_where_you_put_the_opening/c2wciiu)
Ssshhhh, you're using logic!
Saw a BUNCH of comments I wanted to reply to, but figured it warrants its own thread... This is ALL opinion based, some people are used to some methods while others are used to others, but IMHO, it's WAY easier to read and visually organize what is going on if you put brackets on their own line, and they vertically line up with their pair (your second method)... Additionally, NOT putting brackets around single line statements (like ifs, etc) can cause future errors when someone realizes they need ANOTHER statement in that if to fix a bug, forget the brackets, and introduce logical errors due to the missing brackets. For this reason I ALWAYS put brackets around single statement ifs. My boss LOVES your first method and half our code is written that way. My first job had coding standards that dictated the SECOND method, so I got used to that, but it really does make sense to use your second method from a visual grouping frame of mind... completely opinion based question, though, and you aren't doing anything "WRONG" either way.
*forever a code*
I do the same, I find it makes it easier to find when scanning, so you can just look at the first character.
many servers, lots of list management, lots of development time, and tracking delivery rates, software licensing (a lot of premium services don't just use sendmail, they use an application MTA called Power MTA by Port 25, which is really expensive). Theres a reason MailChimp costs money, it's not just as simple as mail(), and it's not just because it looks pretty. If cost is the issue, there's other providers, like http://newsberry.com/, or constant contact. Neither are free, but seriously, if you want people to actually get your emails, use something that works.
Ah, sorry. I took: &gt;These are two different To say: &gt;There are two different I feel dumb and can only blame it on my hangover.
The only difference is that this: //for ( int i = 0; i &lt; 9; i++ ) { // some cool statements } is not a valid code statement. I guess it's just about adding another bracket or removing one that's not being used.
 $reply = (doIMakeLongIfStatements()) ? "That is rediculous! One liners are awesome!" : "I totally agree with you... split those statements up!"
That line will work fine if the whitespace disappeared.
This is for templates, when you're mixing PHP and HTML together. A { gets lost in all that text.
So in your brain you must switch from 'see } look for {' to 'see { look for if or while or for or foreach' Regarding indentation, if you insist it is correct (which 99% of us do) then the { and } are superfluous (a la python)
What are the hardware and backend SMTP costs of sending an email every second? I mean, the software seems fun, but the logistics don't seem unnoticable. 
&gt;Agreed. Dealing with people who are inflexible and unwilling to learn new things is never fun. So, choosing to use the information provided that consistently, over more than 3 decades shows that following a coding standard SAVES money, time and debugging headaches means I don't want to learn new things? Something tells me the OTHER side of that coin is the one being inflexible and unwilling to learn new things. &gt;Couldn't disagree more. Bugs come from crappy coders, not crappy style. I provided links to more than a dozen non-controversial studies that back my opinion up. You provided something pulled from you ass for lack of a better term. &gt;I've had to fix bugs in way too much code over the years to believe what peer reviewed studies have to tell us about where bugs come from. And you would be better off if your co-workers followed the same style guide as well. It would save you headaches. Yet, here you are arguing against the FACTS presented for your anecdotal evidence. &gt;The developer either knew how to code, or he didn't. He understood the consequences of his code (not his whitespace), or he didn't. The bugs come from not understanding what you're doing. Yellow Flag, Moving the Goalposts, 15 Yards, repeat the down. I am saying that when working in a team or on another's code time is saved by everyone following the spec. You are arguing that this is not the case. &gt;I know people that seriously - and I mean dead seriously cannot, will not, EVER follow somebody else's style Yep, these people are called hobbyists. They might get some shining stuff done, but their code is harder to maintain, test and document. Their products are almost always going to have headaches scaling and being maintained long term. You won't find people like that working on projects that have long lifespans - you'll find people knocking out web pages and basic blogs that have that attitude, not mission critical stuff that requires proper documentation. I know people in every part of the business that are unorganized and sloppy, and while they may do brilliant things they are very rarely the best people for the long term benefit of the company. &gt;You're making a presumption that I cannot or wouldn't be able to code to your standard. I'm making the assumption (using your own words for example's sake) that you WOULD NOT BE WILLING not that you would not be able. &gt;I at first tried to do the same as you, but later realized that the style wasn't important. This tells me you have been working on small projects with small groups of collaborators. Add about 5,000 people into the mix and tell me how long you hold that feeling. &gt;Actually, I see it as more professional to understand and accept other coding styles, and even have the ability to write in them. I could care less how well you, as an individual can deal with those quirks, I care more about the new version control system that doesn't exist today but will in three years will deal with them, or how the new documentation tool will, or how the current tools do. I care about the guy that's going to have to go dig through your code a decade from now and maintain sanity - you're focused on short term gain and lack of discipline. &gt;Code done right is naturally self documenting to a certain degree Yep, but that is never in the spec when providing proper documentation is part of the spec is it. Because you can't quantify that. You can make it a contractual deliverable that proper documentation be provided, something tells me you aren't involved in that sort of thing often though. In short: Coding style doesn't matter to you, BUT it does matter a great deal to many other people in the chain. I'm gonna defer to the people that have the REAL data not a feeling on how well following a coding style saves time and headaches in the long run. 
Doesn't matter to me as long as it is readable/clean.
I usually put the &amp;&amp; or || at the start of the second line; this makes it clear that that line is following on from above.
In the Drupal coding standard guide: &gt;Control Statements (e.g. if, while, for, else, etc.) should always start a line, not end one. It bugged me at first too, but after a very short time I found it is far easier to skim than the alternative. Reddit's formatting and font choice doesn't do it justice.
This is exactly the reasoning behind it, far faster once you look at code formatted that way for an hour or so. I hate working on other projects that don't follow that now - it's so much easier to skim.
I think the indenture allows one to perfectly clearly identify what is contained in the `if`. But because of the semantic vs grammatical difference of what constitutes 'one line' vs 'a single statement' (humans prefer the former, a computer prefers the latter), it's not clear that adding another statement under the `while` will break the intended logic, without the addition of brackets. Therefore, sometimes I like to code in this style so I can keep my peers on their toes ^_^
What we need is for tabs to convert to 3 spaces.
honestly, I don't think "not serve images" is such a bad option, it just depends on what the goal of the site is, how integral the image is, etc, and those are things I can't answer. Another option would be to use multiple CDN's. I'm not saying you should, it's easy for a jackass on the internet to "what if" you to death, but the truth is I don't know anything about what you do. 
They are when someone has to edit/modify what's going on later. Everytime you save one keystroke, you create 4 lines that must be edited to add additional functionality in the future instead of 1. You're also fucked when a file becomes corrupted and the line break is removed.
Props to you two for making sure that in any innocent thread even slightly about coding style, somewhere therein will always contain a bitter argument about it.
I don't think either of us have been bitter, we both defended a position and explained our reasoning. Unless you take it as being offensive to say "I disagree with you" or "I would likely not enjoy being a co-worker with you" I really have no idea what you're complaining about. True that text doesn't display tone and maybe you are adding more vitriol than actually exists in your reading, but I wouldn't consider this remotely bitter. 
I consider a bitter argument to be quite different from merely being bitter.
It looks like the XML in the document you're loading isn't valid. You're probably loading HTML with a tag that isn't closed. You can suppress the error by placing an '@' sign before the simplexml_load_file function call. You then need to check the return type from the function before proceeding. It will return false if there was a problem.
 $xmlResult = file_get_contents($strURL); if ($xmlResult === false) { // File dosn't exist :( } try { $xml = new SimpleXMLElement($xmlResult); } catch(Exception $exception) { // XML failed to parse :( }
Thanks all for the feedback.
If you want a quick and dirty hack, you can prepend the function nam with "@", so: @simplexml_load_file(... This will disable errors on this one function only. Another quick and drity thing to do is just tell PHP to hide errors: error_reporting(0); This way no errors get shown. This is a good thing to do on production serwers provided you roll your own error tracking and reporting tool - this way you'll know the error was there, but the user wont. Just remember to handle the error in your code after simplexml_load_file fails - user vardump got the right idea.
There's a section in the SimpleXML part of the manual that's named "[Dealing with XML errors](http://no.php.net/manual/en/simplexml.examples-errors.php)". This shows you how you can use internal error reporting in SimpleXML (through libxml) instead, and then handle the error yourself.
Bastard reddit breaking my formatting, please forgive the bad display of line breaks.
Just for the record, if this is on a deployed, live app, you should have error showing turned off and error logging turned on in your php.ini or in your server config file. If you do this, there is less reason to worry about hiding this error since no errors will show to your users, and you can use exceptions in your app to manage recovering from problems or showing error messages to your users. Error output on live apps is a major security issue. In any event, @ before the line does what you asked for. Hope this helps!
Amazon SES can send something like 1 mail per second but maxes out at 500 for a default account. Not sure what the costs are after that. Might be worth a look.
Let's break this down. You're upset with me because I prefer tabs. You're calling me inflexible and unwilling to learn new things. You insist that lack of tabs fixes bugs, and people who use them can't possibly be writing mission critical code. And that they would be sloppy coders. You are very wrong. I've spent my entire life in mission critical systems programming, most of it real time. I'm currently doing 24/7/365 phone systems. It doesn't get any more mission critical than that. And I've previously worked on process control and robotics systems. The kind of projects where using somebody who understands the needs of the job rather than someone who can follow the style is critical or the project fails. And no, I've never done websites until just recently working in PHP, and most of the time I can't use people who do because they can't program. They can write a simple website in php with mysql, but they can't design and produce reliable and resiliant code. Most of the time they don't understand what the little snippets of code they've taken from examples are really doing. They're still learning to code. there are shining examples of the opposite also, I have to be careful not to make a blanket statement.... So really, the only point I see here is that if you want to manage 5k people on a project, yes, you're going to need to enforce some more stringent rules and you're going to become millitant about. Sorry. I'm sorry that that's true, and I'm sorry that your attitude towards tabs has let to this entire discussion. I have to say I've learned something from it, although I retain my belief that style is not more important than functional code. In that large of a group, you can easily get to the point where you believe what you're saying ,and what the studies say. That may make it true for you in that world, it does not make it true for everyone, and it should not mean that you take that attitude with you to the rest of the world. I'm seeing more and more of your style of militancy honestly, now that I'm dealing more with PHP coders, and it honestly saddens me. It's not necessary. And even as your group size goes up and it becomes more of a challenge to manage, it's still not necessary if you use the right tools. And your effeciency goes down. No, I'm not a believer in doing things the way they've been done just because somebody else says that's the best way. I'll try it, and I'll try other things, and I'll make up my own mind thank you very much. In some cases I've reinvented the wheel, in other cases I've invented a new way of doing things. Yes, coding style does matter to me. But what matters more to me is the quality of the code itself, not the style. You're trying to convince me that style matters. I'm trying to convince you it doesn't. We're not going to agree here. Within our different worlds we've got our belief system that works for us. Let's agree at least on a middle ground that coding styles are important, and more important for some than others. In real mission critical coding, with smaller teams, coding style can be ignored to get the job done. I don't need a study to tell me that, I've been living it. In other environments (feel free to enlighten me your experiences) it may be necessary to enforce a rigid coding style to reduce problems. Possibly I live in a more ideal world that says it shouldn't have to be that way. All the same, I have no problem fitting into your world and to your style, and so would most (though agreeably not all) of the people I've worked with. I suspect the reverse is not true. I wish you well with your endeavors, and hope you can keep an open mind when it comes to style. 
indent all of the code by 4 spaces, and it will work out just nicely.
Suppressing all errors is fine, but suppressing one is not? 
It works! cheers :)
Yeah because adding a couple of braces is so hard :/ Braces for just one line of code looks ugly IMO, I like to make my code as easy to read as possible.
*Objective* should go to Stack Overflow, i.e. ones that would have a concrete answer. *Subjective* questions like about coding style or opinions aren't allowed on SO and are better discussed here. (They're more fun anyway.)
That's for the explanation, so correct me if this is totally wrong, but since my computer wasn't configured to interpret PHP until I modified that setting (to load the PHP module) by default my Mac would give me the literal text if I opened up a php file on the internet? I think I've encountered pages that are .php on the internet but it's showed the full page not just code.
Oh wait, maybe that's why it's called server-side programmer. Derp Derp.
Take a look at [libxml_use_internal_errors()](http://php.net/manual/en/function.libxml-use-internal-errors.php), I think this is what you need.
Not in PHP... if($user-&gt;indentationStyle!=='1tbs')killUser();else$user-&gt;isAwesome=true; is still valid. Although it's something I'd definitely not want to see. Luckily my IDE, like all IDEs, have formatting rules letting me do a simple [CTRL]+[ALT]+[F].
Not exactly, since code from different sources sometimes isn't indented correctly (spaces or tabs doesn't matter), I tend to indent the code while I'm working on it. If I find an If statement that I'm unsure about the end, or any start of a code block, then I'll point my mouse to the front of it and scroll down. If the indenting is correct then I should be able to find the accompanying brace. The indenting is the key because it allows me to see the block without caring about the braces, like your Python example.
Don't hide them.. catch them.
 $user-&gt;isAwesome = $user-&gt;indentationStyle !== '1tbs' or killUser(); You can do something like this knowing that PHP, like most languages will stop checking if the first value of an OR operation is found true. That's wrong for many reasons and you shouldn't use it, but the more you know, you know.
solved. found these: http://stackoverflow.com/questions/273169/how-do-i-dynamically-invoke-a-class-method-in-php http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback 
I would say it depends on if you are getting paid by the line or not ;D
I don't think that will help, those aren't exceptions that are being thrown but `E_WARNING`'s. EDIT: Noticed you're using the OO implementation, so maybe that will work! I haven't used this extension in quite a while...
I would normally agree with this statement, but some PHP extensions don't play nice and don't give you a way to avoid warnings, and without disabling _all_ errors via php.ini, there is no other sane way to prevent these warnings. The only other method that I can think of would be to do some precursory data-verification, or to use output buffering to catch (and disregard) the emitted warning(s).
1. Do better data verification before attempting to load the XML. Perhaps a simple `strlen()` check on the return data to ensure that it has data, or possibly some other simple validation such as a quick regex or `str_pos()` to ensure that there's a `&lt;tumblr version="1.0"&gt;` tag located at the start of the data. 2. Use `@simplexml_load_file()` or `error_reporting(0)`. 3. Use `ob_start()` before the attempted load, and then use `ob_end_clean()` afterwards. This is basically like #2 and will just hide the error, however, you could also use `ob_get_contents()` to get any error(s) and log them to a file. 4. Use a better XML library that won't emit unavoidable warnings.
Sometimes you need to suppress a single error; for example, if you're calling unlink() to delete a file it will fire a warning if the file doesn't exist -- but due to race conditions you can't always ensure it'll be there before the unlink() call. 
Actually, you were most of the way there already. You just need a little bit less JS influence. Change this line: self::[ $method ](); To this: $this-&gt;$method(); // if $method is not declared static, like the OP's code sample self::$method(); // if $method was declared as static EDIT: thanks to gdebug for pointing out that it should use `$this` since `do_this()` wasn't declared as static.
Why not use http://us3.php.net/manual/en/function.call-user-func.php
Because it isn't needed in this case.
No, it is not fine. You should never do this. You should set display_errors to 'off' and then define an error_log target.
No. Disabling all errors via error_reporting is *shooting yourself in the foot*. While there is truth to what you say that sometimes error output can't be avoided, that **does not** mean you stop reporting all errors. What you *should* be doing is disabling display_errors. Think about what the real goal is here. If those warnings get thrown, it isn't really a big deal. What is a big deal is if the user sees them and they start messing up the layout. Logging these errors allows you to see they are happening without that side effect. You need your errors in case something actually *does* break.
Hey, [I'm not the one who advocated disabling all errors](http://www.reddit.com/r/PHP/comments/lxiu2/how_can_i_hide_the_error_messages_when_something/c2wefl3)! However, even with `display_errors` disabled, there is still a chance the error message could be leaked due to a bug in the underlying C code (this is more common than you would think, especially when we're talking about 3rd-party extensions like we are here). In this case, `display_errors` will do nothing for you. If your code is similar to some of mine, whereby I construct a download for the user, then *any* error output will result in broken downloads ("`Headers already sent...`"), and so in that case, you're really left with no other option but to eat the error, one way or another.
Re Pt4: No, he's not. Note the *trailing* space on the second value.
Doesn't work out-of-the-box on my 5.3.5. To my knowledge SimpleXML doesn't throw exceptions in any case, just `E_WARNING`s. This will work if you set your error handler to throw an [`ErrorException`](http://www.php.net/manual/en/class.errorexception.php).
Syntax highlighting and bracket match highlighting make up for lack of whitespace, I don't want to scroll a hundred lines to see what goes on in a function that only has 20 lines of code. I actually do try to put a blank line between functions and occasionally group variables with a blank line, but for the most part I think it is a bad thing. Also I hate this `$something . 'too much white space between concatenation' . $sucks;` that is not easier to read than this `$something.'the right amount of whitespace between concat...'.$awesome;`
But what if killUser() returns true on successful killing? 
Exactly it's not like my monitor is 400px wide, let the whole damn thing stay on one line. Typically I try to make functions/methods that take an object instead of a million arguments.
... I understand the alternatives just fine the question was does anyone know of something similar to what I described in the original post. 
Yup, what you said was perfect.
I have a script which collects all sorts of garbage, users would submit html files, images alot of the time instead of xml. My code wasn't trying to display the error just stop the script from falling over when it can't parse it.
Consistency is far easier to deal with than a few extra characters. You see that the vast majority of coders and code style guides tell you not to do it, there is a reason you are in the minority. You introduce problems in maintaining code when you do shit like that. Always think about the OTHER guy that will see your code and remember, everybody else's code sucks, and your code sucks 2 weeks after you write it.
You can save yourself a headache using [MAMP](http://www.mamp.info/) unless there is something very specific you're needing in PHP or if you're wanting to learn the ins and outs of compiling a php installation.
 $user-&gt;isAwesome = $user-&gt;indentationStyle !== '1tbs' or !killUser(); Untested, unsure but I think it should work. Once again, this is terrible code and just here for trivial purpose.
You want a Jcink to SMF converter script. There is not a generic tool to do this. There may be a tool to say 'take the data in this table/column and put it in that table/column' and the tool might automate the sql statements. But what you want is something that says 'take this data, run it through this complicated transformation process, then insert it in to that table', which would be a custom conversion script. SMF boards would be the place to ask, and it looks like you have already done that. Generic PHP help is probably not going to know this any better than SMF forums do.
Cause - Make post to see if anyone is interested in coding a better PHPlist Effect - No one talks about coding a better PHPlist
No, I want a generalized tool so I can use it for other, similar situations as well. This isn't the first time I've had to convert data from one database type to another. This is just the latest example. I did check on the status of such a converter for this exact situation over on SMF's forums because there's a need for such a tool, but that's a one-time-use thing. I work at a school where I run into these types of situations all the time and was looking to see if I was reinventing the wheel or not. I didn't ask if the question was valid or if it was the most efficient way to execute this specific task, only if anyone knew of such a tool so I don't have to reinvent the wheel. Regardless I've already started working on it. To end the these types of comments, yes I know I can write this crap by hand in SQL. But facing writing a separate SQL statement for every table in every database that presents this sort of problem for me for the rest of time, vs just designing an interface to automate those SQL statements is sort of a no-brainer. When did /r/PHP cease to be about inventive solutions and all about people trying to one up one another with brain-dead obvious "*You can already do that manually*" responses? That's not helpful or creative. 
Not sure why this was downvoted considering it's the only actual answer to my question. Thank you Warmans.
call_user_func()
MVC is a type of development architecture that separates the database (model), application logic (controller), and presentation (view) elements of a websitesite. Setting up a framework this way takes a little extra time up front, but it easily pays off in terms of organization and maintainability. There's a pretty good intro-level tutorial on MVCs in PHP [here](http://www.phpro.org/tutorials/Model-View-Controller-MVC.html).
hmm, i think i get it. so the point of this architecture is to make the website easier to organize and maintain? thank you for the tutorial link! :)
It also makes the code more portable, because everything is modular. Say you write a CMS, and then you decide you want to build a social networking site. You're going to need registration, login, session management and various other scripts for both, so you can literally just copy-paste the models and controllers from your CMS, and you just have to write new views according to the site's layout. When application logic, database queries and presentations are all crammed together into master files, you have to dig out what you need.
What you're describing is more-or-less just an MVC Framework. I would begin by not trying to build one and instead using something like Code Igniter as you probably won't have much luck building one until you know more-or-less how they work in practise. At it's most basic you could just write a front controller who's only job is to break apart URIs and route them to Controller classes (if you wanted to keep it really basic you could just use a querystring). Controller classes can either echo out results (bad idea) or load templates. You could just use an off the shelf templating system (Smarty or whatever). Similarly you could use an off the shelf ORM for your "models". PhpActiveRecord is really simple but requires PHP 5.3 &gt;. So the system would work like this: User - "Give me this page: /index.php?section=home&amp;page=about" Front Controller - "fine I will require_once Home.php from my Controller's directory, create an instance of it then call -&gt;about()" But just because you /could/ do this I wouldn't suggest you actually do.
oooh so you can copy-paste the same code for another site, which saves a lot of time. man that's useful.
Actually, it isn't a static method, so: $this-&gt;$method();
http://php.net/manual/en/ref.ldap.php
It all depends on what you're trying to accomplish. An MVC framework, or a framework of any kind might be overkill for what you're doing. If you're brand-spanking new as you say then you should focus on the basics. Take the time to study the language and libraries and get to know the capabilities. Once you understand what your tools are and how to use them then you can begin planning what to build and how to build it.
i have CI - so should i modify that code to do what i need it to do? what is the difference between a controller and a front controller? it sounds like i can just utilize CI's files instead of building my own. warmans, what would you suggest i do instead and why?
i'm doing this for someone else so i wish i had more time to understand it all, but i'm sort of on a deadline. i keep watching tutorials as i go instead of starting from the bottom up like i want to.
You're right it would, I forget the exact situation, I just remember it involved missing whitespace and those type of if statements, might of been javascript with no ending ; or something.
Yes provided you don't need to do anything really weird you would be better off using CI and this would be my suggestion. The front controller is generally the first class that gets loaded by an index.php file. It will decide how to handle the request (i.e. which controller to instantiate and which method to call on it). A Controller usually pulls some data out of the model (which really a synonym for database as far as 99% of people are concerned) and passes it to a View which is some sort of template. The reason the controller sits in the middle is that you might want to have some sort of logic affecting how things are pulled out of the model or passed to the View. note: if you DO need to do something really weird Zend would be a better option because it's easier to re-configure.
this is making a lot more sense now. you should have seen the look on my face after i read your post. now i just hope i'm understanding all this correctly lol. let me get this right: if i am to make a template/skeleton, i should create the file index.php in the views folder, and use that to create the template? 
uhh. I hate to say it but I think you might be in over your head here. Find Hello World tutorial for CI and go from there. Trying to infer how to build fairly complicated piece of software from random people's reddit comments will most probably take 10x as long as achieve 1/10th as much.
For RDN, I use uid=USERNAME,ou=DIVISION,ou=Users,o="domain.com" Try this for the group you created.
Even better... adLDAP. http://adldap.sourceforge.net/
Well then in light of the deadline, one option would be to use a framework where most of the grunt work is done for you. If you're building a simple web site then you might want to look at a CMS like Drupal. If the project is more of a web app then check out some popular frameworks. Codeigniter is a good beginner framework.
thanks, ppanther! :) hmm, let me see if i can phrase this better. using CI (which i recently discovered i could do thanks to all you awesome people), i need to create a template that is the main page of each directory that it falls within. i appreciate your taking the time to ask - i *did* end up wasting some of my time, all of my own fault. thank you for your help!
Why did you feel the need to mention you are female? Code does not discriminate based on gender. A skeleton is typically is typically a base model of code for an application or task - it contains the 'bare bones' of code, or boilerplate, that provide it's base. Usually it has places to be customised, and then extended fully to create a custom application. MVC is a design pattern for structuring the control flow of an application. Views provide the front end of the application. They retrieve data from Models, and talk to Controllers. Controllers organise how and when to present Views, and what goes into them, and what data is needed. Models abstract the data that your application has. Most times in PHP they will be abstracting tables in an Object Relational Mapper or Active Record scheme. Learning a framework will be much easier than creating one. Code Igniter, Kohana, Symphony, Cakephp, FuelPHP; many out there to choose from. A CMS (content management system) is one abstraction up from frameworks, and lets you create a simple (or even complex) site much faster. Many things that you have to implement yourself within a framework are already set up with a CMS (like a user, and news post system). Wordpress and Drupal are two very popular ones.
i will take your advice and continue using CI :) thanks!
my boyfriend told me i would probably get more responses that way :x so some parts of the skeleton are the absolute "requirements", whereas other parts of it can be customized? thanks!
For any sufficiently complex software problem, in general there isn't any categorically 'right' way to solve it. From [the article linked to as an example](http://toys.lerdorf.com/archives/55-Writing-an-OAuth-Provider-Service.html), all that's needed is a call to `$this-&gt;checkAccess()` and subsequent handling to provide access control for your API. Doesn't seem too hard.
Could you not at least provide your (presumably non-working) PDO code that you have so far?
&gt; my boyfriend told me i would probably get more responses that way :x Heh, well pragmatically speaking, I suppose he's probably right... &gt; so some parts of the skeleton are the absolute "requirements", whereas other parts of it can be customized? All depends on the system that you're currently working with. Might be absolute, or might just be recommended, or provide sensible defaults. It's not a concrete term in that way. 
I was interested, until I realised the logistics need to get the software actually running at proposed capacity. This doesn't seem like a simple web or email app.
{$membername}
Good point, I agree. Curiously, it still executes _as-is_ and [doesn't generate any errors](http://codepad.viper-7.com/SxgA5D); it seems that only static calls made from outside the class [raise `E_STRICT` messages](http://codepad.viper-7.com/gUS58W).
SAMaccountname is the correct logon name, from my experience with AD-via-LDAP-via-PHP. In my case, my AD group names themselves are predictable, so they're all I need to pull to handle role mapping: foreach((array)$entry['memberof'] as $group_item) { $addr_parts = ldap_explode_dn($group_item, 1); $group_name = ($addr_parts) ? $addr_parts[0] : NULL; if (isset($settings['role_mapping'][$group_name])) { $user_roles[] = $settings['role_mapping'][$group_name]; } } 
I'm an Active Directory consultant (and moderator of [r/activedirectory](http://www.reddit.com/r/activedirectory)) and I give you [Search Filter Syntax](http://msdn.microsoft.com/en-us/library/windows/desktop/aa746475\(v=vs.85\).aspx). I keep this website bookmarked just for those complex queries, like disabled users, or members of a group. For your code, you want this: $dn = "CN=db_writers,OU=Groups,DC=mydomain,DC=com"; $attributes = array("displayname", "l"); $filter = "(&amp;(objectClass=user)(objectCategory=Person)(memberOf:1.2.840.113556.1.4.1941:={$dn}))"; $ad = ldap_connect("dc.mydomain.com") or die("Couldn't connect to AD!"); ldap_set_option($ad, LDAP_OPT_PROTOCOL_VERSION, 3); $bd = ldap_bind($ad,"adaccount@mydomain.com","pass") or die("Couldn't bind to AD!"); $result = ldap_search($ad, $dn, $filter, $attributes); $entries = ldap_get_entries($ad, $result); for ($i=0; $i&lt;$entries["count"]; $i++) { echo $entries[$i]["displayname"] [0]."(".$entries[$i]["l"][0].")&lt;br /&gt;"; } ldap_unbind($ad); If you want to test this for a single logged-in user then you can change your filter to include the sAMAccountName for the user. You can get this through PHP's SERVER variable. //Should return 1 result for a person in that group, // 0 results if the person is not in that group $filter = "(&amp;(objectClass=user)(objectCategory=Person)(memberOf:1.2.840.113556.1.4.1941:={$dn})(sAMAccountName={$username}))"; For this part of the filter: (memberOf:1.2.840.113556.1.4.1941:={$dn}) You should also try it like this, if you're having issues: (memberOf:1.2.840.113556.1.4.1941:=({$dn})) The documentation on Microsoft's website doesn't always work like it says. Please note that this **will not** work for nested group memberships. All users have to be direct members of the group.
Why require the url ? `$_SERVER['SERVER_NAME']` would do the trick wouldn't it?
True. That would work in most cases where the server URL is also the the base URL of the current application. However, if your application resides on a sub directory you need a little more than what $_SERVER['SERVER_NAME'] can provide. Ex: www.test.com/myapplication/
Ah that makes sense. I usually set up a subdomain for that sort of thing.
Is there any way to change what happens when the form is sent instead of redirecting to a different html page? My site is only one page with jQuery to slide between divs. Can I either redirect to a certain div or pop up a notification that the form has sent which fades away after a second?
Right. It's the server (Apache) that was not configured. It doesn't matter if it was localhost or example.com, you're still going "over" the network (even if that network only consists of your ethernet/wifi card that is disconnected, you still have a local network), and so it is serverside programming. You just happen to have a full fledged webserver running on the same machine your browser is running on. Find a second computer on your home network and enter in your Mac's local IP address ( http://192.168.1.123 or some such ) and you'll end up at the same place but you'll actually have to hop computers in that network configuration. The internet is exactly the same, just more "computers" it has to hop through. But this is neither here nor there for basic PHP development, but it is something you'll have to consider later on down the road (probably years) as your applications become more complex and you have to manage resources between multiple servers.
https://gist.github.com/1335647 Please note this is untested and requires the [SwiftMailer](http://swiftmailer.org) library.
Dude, this is awesome. I'm trying to decipher what all is going on here by doing little variable dumps and such throughout the code. I've got it reading the entire group attributes using ldap_search, and dumping it cleanly to the page. So, I've found this in here: Array ( [count] =&gt; 1 [0] =&gt; Array ( [objectclass] =&gt; Array ( [count] =&gt; 2 [0] =&gt; top [1] =&gt; group ) [0] =&gt; objectclass [cn] =&gt; Array ( [count] =&gt; 1 [0] =&gt; db_writers ) [1] =&gt; cn [description] =&gt; Array ( [count] =&gt; 1 [0] =&gt; For DB Apps ) [2] =&gt; description [member] =&gt; Array ( [count] =&gt; 5 [0] =&gt; CN=User 1,CN=Users,DC=mydomain,DC=com [1] =&gt; CN=User 2,CN=Users,DC=mydomain,DC=com [2] =&gt; CN=User 3,CN=Users,DC=mydomain,DC=com [3] =&gt; CN=User 4,CN=Users,DC=mydomain,DC=com [4] =&gt; CN=User 5,CN=Users,DC=mydomain,DC=com ) So I feel like I'm getting close. It's looking through the right group. The cookie we set for the login is domain\username so I'm wondering if using your filter if I can look for that. Maybe strip the domain\ off and just look for the samaccountname in there?
Thanks for that. I'll have to take a longer look at it later, a bit busy right now. What are the reasons for using SwiftMailer rather than just letting the php do the work itself?
My filter will select the user from AD if that user is a member of the group, or all users that are members of the group. It'll return 0 records if the user is not a member of the group. You can use this count to give the user access to your website (or pages). For your example you would have to perform 2 queries against AD. One to select the group and return the member list, another to select the current user by the sAMAccountName and get the distinguishedName property. You would then use PHP to check if the current user's DN is within the member array.
You're going to want to use ajax. I'm more of a php guy so I use jquery to help with my js but it'd look something like this: js $('#contactSubmit').click(function(){ $.post('http://www.yourwebsite.com/form/processor.php', {fieldOne : $('#fieldOne').val(), fieldTwo : $('#fieldTwo').val()}, function(data){ data = $.parseJson(data); if(data.error){ //display error_message somehow } else{ //display success message } }); }); php //check if all post values are set //do your thing //if there are any errors... echo json_encode(array('error'=&gt;true, 'error_message'=&gt;'blah blah blah')); //else echo json_encode(array('error'=&gt;false)); I don't know if this is proper or anything but it's how I've been doing it and it works for me Oh, and you might want to unbind click on click and rebind it when you get the response back.
Ok, that makes sense. I'm a bit fried after working on this so long, but I'll check it out tomorrow (today) morning. Thanks again for your help so far!
Going to be rolling this into a project...looks so much easier than the last time I did it by hand.
Email is a fickle beast, SwiftMailer and other mail libraries handle all of the little nuances so you don't have to.
I just did something similar. Split into three files: contact.php (top right) contact.ajax.php (top left) contact.js (bottom left) http://jsfiddle.net/TYsN7/1/
You're tossing out an awful lot of buzzwords there. If you keep this up you'll be asking about NoSQL and transparent failover in no time. Just start fooling around with one of the popular frameworks and grind away at it until it starts making sense. If you don't get programming in general, start there first. (Hard to tell with such little information.)
you never use server uri or domain. you just start at / also this is silly.
As another female who's been doing software development for 12yrs now, I was inexplicably mildly offended.... not really sure why, but it just rubbed me the wrong way.
Like I said, I have never forgotten to add braces later when necessary and I doubt many others do except for complete newbies. I don't see what makes it "hard to maintain". Maybe the readability is a personal thing. BTW I seem to mostly use this when returning early in functions, e.g. if (x) return y;
For storing in a database, PDO with parameterized queries is your best bet as others have said (or the equivalent if you're using a framework like CodeIgniter). Failing that, `mysql_real_escape_string` all the things! For displaying UGC on a web page, `htmlentities` should cover everything. If you need to display HTML formatting, using like Markdown would be a good option, otherwise a standard HTML sanitizer.
i somewhat fail to see the purpose of what you're trying to do. And it does not seem ok for me. A constructor is not the way to call that method, a constructor should initialize the object, and after that you can use the object's methods to call them. Since you already know the name of the method, i don't get it why it is hard to write something like: $t = new x; $t-&gt;{$somefunc}();
Frameworks, object orientation and unit testing are the next big thing? or even the new big thing? The suggestion that *caching* might be the next big thing? What the.. are these not things that EVERY PROGRAMMER knows thoroughly already? Shouldn't they be minimum requirements to calling yourself a PHP developer?
I haven't tested it but the idea is there
Yes. All of the above mentioned things are used often in the most popular web apps, because php on its own can't withstand that much traffic. However, a lot of web "sites" are programmed by junior php programmers, and could survive without knowing some of those technologies. I'm anti-framework myself, although I see the appeal in it. I personally think widespread js adoption (beyond doing stupid shit like throwing alert boxes and such) is next, coupled with some amazing libraries (mootools, jquery, etc) to power them all. (Okay, I know of no app that uses alert boxes in production, but programmers who do a couple slidy animations with elements and call themselves programmers piss me off.)
Pro-tip: they're not. A huge number of developers are probably still developing apps in the same way they've been doing it for the last 10 years. Take a look at half the stuff that gets posted on here. I think the OP is right with the distinction that while this stuff isn't really new what is new is that proper OO, frameworks, testing are now EXPECTED rather than being reserved for high-end bespoke projects. Generally speaking one of the major trends seems to be to move away from PHP wherever possible.
Honestly, I know exactly what caching is but have only had to implement it on one project out of the dozens I have worked on. You only really need it on sites that get tons of visitors. Next big thing, not really.
Web Development: Non-PC computers. There is an astonishing amount of non-PC devices (smart-phones, tablets) that have excellent support for CSS 3 properties, and they have fast JavaScript engines too. More devices will come and they will have web browsers. PHP: namespaces. Just as PHP4 has been cast away as old and busted then non-namespaced code will be treated the same. Naturally very much of the PHP community (r/php included) is skeptical of its usefulness due to namespaces having nothing to do with 'PHP pages' and more to do with 'PHP frameworks'.
&gt; A huge number of PHP developers are probably still developing apps in the same way they've been doing it for the last 10 years. FTFY. No, seriously, 90% of PHP web developers still look at it as 'PHP pages' and not 'PHP frameworks' or 'PHP web applications.' There is no such thing as 'Java pages' or 'Ruby pages' or 'Python pages' the same way there are 'PHP pages.' At least, no Java/Ruby/Python web developer is taken seriously when they state they have experience with 'Ruby pages.'
Far into the future I think some sort of virtual machine will be baked into the browser so PHP, Python, Perl, C# etc will be supported. Then switching between server side/client side will become a lot more fluid. Domain specific languages will become more important. At the moment I use Doctrine that has DQL in it, but I have to write it in a string. DQL or SQL could be a mini language inside PHP, as could XML, HTML etc. http://opalang.org looks interesting. I sort of smears your app across many servers, it wouldn't take too much thought to include the client machine in that equation. Currently the coms channel between PHP and the browser is HTML and AJAX, I think this will become smarter. PHP does seem to lag behind other languages/web frameworks, it never seems to push the boundaries. But it does get to cherry pick the ideas that work. I honestly think a lot of PHP developers will simply move to using Ruby, Python or node.js. Those are more disruptive, so start ups will tend to use them, and start ups end up being big companies that require programmers.
Unfortunately I work with a developer who will not even use object-oriented code, much less MVC, Version Control, Unit Testing, Caching, A CSS pre-processor, etc. Drives me nuts... he treats it like this is *my* way of doing things. No, my way is CodeIgniter, GIT with GitHub, jQuery, LESS, PHPUnit, QUnit, etc. The *right* way is all the concepts above. Oh well, as long as my work is on a professional level, that's what matters.
I used to work for a MANAGER like that. I would have my work CRITICISED for using properly object-oriented code, design patterns, version control etc.. (this was in a fully OO language also, not PHP). Absolute nightmare.
I'm echoing the filter variable which is returning 0 results in the array. Here's what the string looks like: filter = (&amp;(objectClass=user)(objectCategory=Person)(memberOf:1.2.840.113556.1.4.1941:=CN=db_writers,OU=Groups,DC=mydomain,DC=com)(sAMAccountName=juser)) If I set it to CN=* then I get all of it. (The results above are just a snippet) 
It's like we live in an alternate universe where all measurements point to developers going these directions en masse and it being a good thing, yet the real world we work in is just the opposite. Makes me think I'm going crazy sometimes.
You'd set it up to search for the userid in the background via the username. UIDs also allow for conflicting names, but you can use the email address as the second key. 
Do you know what JSP stands for? But still, you'e right and make a valid point.
Is juser a direct member of the db_writers group? If not, then the query is working correctly by returning 0 results. Remember that you cannot perform this query with nested groups. I just tested the filter you gave and it works fine for me. Is that the correct DN for the group?
Definitely not a simple app. But a major project. I currently use it to sell email services, but like the appeal of self serve. 
Yes. JUser is a direct member of that group, which is in the Groups OU. Also, I made an adjustment to the attributes and set it to: $attributes = array("member"); and now I just get: Array ( [count] =&gt; 1 [0] =&gt; Array ( [member] =&gt; Array ( [count] =&gt; 5 [0] =&gt; CN=user name 1,CN=Users,DC=mydomain,DC=com [1] =&gt; CN=user name 2,CN=Users,DC=mydomain,DC=com [2] =&gt; CN=user name 3,CN=Users,DC=mydomain,DC=com [3] =&gt; CN=user name 4,CN=Users,DC=mydomain,DC=com [4] =&gt; CN=user name 5,CN=Users,DC=mydomain,DC=com ) [0] =&gt; member [count] =&gt; 1 [dn] =&gt; CN=db_writers,OU=Groups,DC=mydomain,DC=com ) ) This is much closer than I was last night. the CN's it's returning above are the display name. In the case of JUser it would be something like CN=Joseph User. I've fiddled with the filter and tried numerous iterations, including: * juser * mydomain\juser * joseph user to no avail. I feel like I'm on the verge of cracking this. edit: just to throw it out in case it matters, this is running on a Win2k3 server with IIS, and the AD server is 2008 R2.
Widespread js adoption is the next big thing? or even the new big thing? The suggestion that *libraries powering it all* might be the next big thing? What the.. are these not things that EVERY JAVASCRIPT PROGRAMMER knows thoroughly already? Shouldn't they be minimum requirements to calling yourself a JS developer?
Trust me. You don't know shit about caching yet. :) There's a reason even martin fowler likes this quote: http://martinfowler.com/bliki/TwoHardThings.html To most developers the idea of caching is "I'm doing a slow query, let me cache this for x minutes." This small change alone often removes roughly 80% of the code run time, which makes most developers say "sweet, good change." It comes at the expense of stale data, though. You can cache for a lower amount of time but then comes other bottlenecks with high traffic. Eventually you'll want to cache forever or until the data is updated. Enter cache invalidation and the horrors it involves. Literally none of the popular frameworks have tried tackling this problem yet, I had to create a custom framework to track the data used and handle cache invalidation. Add in the fact that there are areas where you literally cannot invalidate cached data at all (at least no one has figured out how) and you've got an area of programming that's largely unexplored in PHP. But once you figure it out you'll get full page caching with no stale data and you can handle a metric shit ton of traffic off of just one old server. Suddenly your bottleneck will be your memory bandwidth and your network interface, and those can most likely handle more than you'll ever need. 
A bit of confusion, your result is the group, it should be the user. Your question was that you wanted to give the person access to a method within a webpage (database insert) if they are within that group. If you know the person's username (sAMAccountName) and you know the group distinguishedName, then how do you verify that the person is a member of the group? - Rhetorical question, I'll give you the answer. //default, nobody has access to the DB $hasDBAccess = false; //the DN for the group. $dn = "CN=db_writers,OU=Groups,DC=mydomain,DC=com"; //a list of attributes for users within that group $attributes = array("displayname", "l"); //the username of the current user on the website $username = "juser"; //the filter to select the user only if they are a member of the group. $filter = "(&amp;(objectClass=user)(objectCategory=Person) (memberOf:1.2.840.113556.1.4.1941:={$dn})(sAMAccountName={$username}))"; //Note: depending on how AD processes LDAP queries // (right-to-left or left-to-right), it might be faster to query this way: $filter = "(&amp;(objectClass=user)(objectCategory=Person)(sAMAccountName={$username})(memberOf:1.2.840.113556.1.4.1941:={$dn}))"; //connect to the DC $ad = ldap_connect("dc.mydomain.com") or die("Couldn't connect to AD!"); //required for AD connections ldap_set_option($ad, LDAP_OPT_PROTOCOL_VERSION, 3); //You don't need a username and password for read-only connections $bd = ldap_bind($ad,"adaccount@mydomain.com","pass") or die("Couldn't bind to AD!"); //result should contain 1 user if the user is within the group, //0 users if the user is not in the group $result = ldap_search($ad, $dn, $filter, $attributes); //gets the 1 entry if the user is in the result (has access to the page) $entries = ldap_get_entries($ad, $result); //give the user access to update the database if($entries["count"] &gt; 0){ $hasDBAccess = true; } ldap_unbind($ad); //continuing... if($hasDBAccess){ //update the database }
Less PHP, more Javascript.
yeah, node.js seems like a more natural fit at the moment.
Ok, I dumped all that over a new file and modified the appropriate fields and the count is still showing 0. I'm assuming the username in the variable should be "juser". Interestingly enough. I took the filter you created for me and tested it against AD in ADUC and it found me immediately. The filter i used: (&amp;(objectClass=user)(objectCategory=Person)(memberOf:1.2.840.113556.1.4.1941:=CN=db_writers,OU=Groups,DC=mydomain,DC=com)(sAMAccountName=juser)) This is exactly what I'm trying to build, btw. A function to check if they're a member, and if so, proceed to show DB edit/update controls and such. I wonder why it's not returning a 1 when I'm clearly in the group, and the filter finds me in ADUC? I tested this out with my domain admin account credentials and get the same thing, so it's not that the account doesn't have read capability. hmm. 
Good god, you're right! I'm a farce! Edit: To continue - yes, you do have a point - knowing how to use js libraries efficiently/properly is at least a baseline for a javascript developer... the problem is, 10/10 interviewees I've seen don't bother learning how to use the library properly. They cherry-pick the animation they want, they copy and paste code, and move on to the next task.
Parallelism.
Sorry, I'm terrible with PHP so the code is awful. I cobbled it together through trial and error. It should only output one video, based on the variables but seems to loop. I've tried absolutely everything I can think of. Any suggestions are very much appreciated.
&gt; ... and start ups end up being big companies that require programmers. TIL I've been working for the wrong startups...
without spending too much time looking at it, I'd say line 13 with the while statement is causing the script to loop over multiple videos, assuming your "posts" are separate videos. A good practice would be to separate all control structures to their own line. (ie, place the if statement, then, on the next line, the while)
&gt; Generally speaking one of the major trends seems to be to move away from PHP wherever possible. As a php developer, this scares me. But then again, it happens with all languages, so if you don't adapt, I suppose you're sunk anyway.
Agreed.
I'd have to agree with this as well. I know you didn't ask for a cleanup but you had a couple different methods of writing those conditions and it was really bugging me. I tried to organize it a bit more so you can see better -&gt; [http://pastebin.com/BKEWNf2J](http://pastebin.com/BKEWNf2J)
So, if I remove the while statement it should work? if ( have_posts() ) : the_post(); like that? Sorry. I'm sure this is very basic stuff.
Why not just invalidate on write? (And queue writes, for write heavy systems). The main issue I have with caching (well, full page caching) is doing it for user-specific content. That is a pain in the ass. I think varnish has some workarounds for this but I've not really used it.
I imagine you would still have to loop through the array of videos, you just need to have a condition to output *only* Video B and not Video A, Video B, and Video C. 
Your have_posts() method is not defined AFAIK, but it presumably returns an array of posts so you'd have to pull the first element if you want the top. Or, you would have a method to pull a single, specific video. Make sense?
Exactly. Is there a way to stop the loop once it's found the video defined in the address (e.g. vidloop?meta_key=video_name&amp;meta_value=examiner)
Sure, you invalidate caches on write. But It's not as simple as simply saying it. Lets say you just wrote a news script with a basic comment feature. You then edit a news post and you write the changes to the database. You then invalidate the cached news overview page as well as the page with the comments. Easy enough. Except now you develop some more and you decide to add a RSS feature. Suddenly on an edit you now need to invalidate the news overview page, the news comments page and the rss feed. Scale this out to a full website and you're bound to screw up somewhere unless you keep track of all the data in a structured way. This is what makes cache invalidation difficult. Knowing what data is used on what pages so that when the data is updated it's invalidated in all the places which use it. The most common approach I see in the current frameworks is to do fragment caches. Where you cache a lot of small parts of the page and then fetch all of them to create a page. This works fine for most people, it does create a lot of traffic to your cache server, though, so I personally went with the approach of just tracking every piece of data in my application.
&gt; Is that not caching? Of course it's caching, it's just a very small form of caching which I personally consider bad form. &gt; I'm sure I have a lot to learn about caching, I look forward to it, but I wouldn't describe that as "not knowing shit". It's an expression... you're not supposed to take it quite that literally. Of course you know shit about caching. As soon as you know what a key-value store is you know caching. I was merely trying to say that the field of caching is largely unexplored for even very seasoned programmers and that there's lots of progress to be made. So there's no reason to scoff at the thought of caching being the next big thing. It might be very possible.
&gt;So there's no reason to scoff at the thought of caching being the next big thing. It might be very possible. Point taken. Personally, I expect that if there were large advances in caching technology they would be through some sort of bolt-on, or under-the-cover updates in frameworks, so that most programmers wouldn't have to get involved with the intricacies of them.. Just a hunch though.
Sure, what's a unique condition of *that* video compared to the others? Does it have a unique ID? If the meta_key parameter is unique and you **know** the value won't change you could essentially add this conditional inside the while: if( $_GET['meta_key'] == "rickastley" ): //code guts endif;
There's about 30 different videos, as featured on the site - the main website passes the variable via meta_key=video_name&amp;meta_value=examiner (in this case the video is called examiner). I need it to work for each video, but only show one instance rather than the two it's currently showing. It's driving me crazy :-/ If you (or anyone) can figure it out I'll get you a month of Reddit Gold as a thank you!
Try using this filter instead: (&amp;(objectClass=user)(objectCategory=Person)(|(memberOf:1.2.840.113556.1.4.1941:=CN=db_writers,OU=Groups,DC=mydomain,DC=com)(memberOf=CN=db_writers,OU=Groups,DC=mydomain,DC=com))(sAMAccountName=juser))
Is there any condition separating those two? I assume you mean there are two instances on their site of "meta_value=examiner" so, based on the condition I wrote above, it would output two videos. If that's the case you have 2 options: 1) find a unique condition of those two videos and separate them that way or 2) when you get that first video just set a flag ($flag = true;) and work from there. Here's a modified version of my first option -&gt; [http://pastebin.com/XYLxM4qF](http://pastebin.com/XYLxM4qF) EDIT: "SECOND UNIQUE CONDITION" would need to be changed out to something like *$_GET['meta_key'] == "unique_string"*
It might be very possible that it'll all be abstracted away. The largest reason it's not used very much today is because the few solutions that do exist all involve tracking data through the code so it requires effort on the programmers part. I doubt it's possible to abstract it to the point where a programmer doesn't need to worry about it. Applications just aren't generic enough to do it. That said, there are much smarter people than me, so I might be positively surprised.
Sorry, I'm not explaining myself very well. The vidloop.php page has to work for all the videos on the site. For example, these should all output a different video. But all from the same code. Does that make sense? If you look at the carousel on this page you'll see that each one references a different video using the examples above. 
I have yet to dive in CSS preprocessors. Is it widespread and I'm the only one doing css the "old notepad way" 
&gt;I doubt it's possible to abstract it to the point where a programmer doesn't need to worry about it. So do I, but I think the majority of it likely will be abstracted away to make the usage of it fairly simple.
You're right - using a CSS preprocessor should not be a "requirement" for professional level web development. However, using LESS, SASS, or Compass really help out a lot. Being able to abstract out wordy and repetitive CSS3 and IE filters, using variables, nested styles, // comments, and rudimentary "functions"... these all make it a lot easier to maintain. I would encourage it but it's not the end of the world if it's not used.
Ah, so then the condition of the video displaying is based on what *your* user clicks to see. In other words, the user on your website will essentially set the conditional variable on what video to show from tidal.ie. Let's say a user clicks a link to "View Colour Fade Video" and the link that loads on your site is this: www.yoursite.com/?view=colourfade. Change line 13 of my mod to this: if( $_GET['view'] == $your_equivalent_value_from_tidal.ie_site ): $your_equivalent_value_from_tidal.ie_site would be whatever value your query_posts() function outputs when it reads "&amp;meta_value=colourfade" from the tidal.ie site. Make sense?
You must have multiple videos that match that condition. Try adding "posts_per_page=1" to your query string.
That works in ADUC as well, no problem. I even tried changing the samaccountname to a member that's NOT in the group and it came back with no results which is a good sign! So the filters I think are all working properly. Here's all the LDAP_Search variables echoed out: $ad = Resource id #2, $dn = CN=db_writers,OU=Groups,DC=mydomain,DC=com, $filter = (&amp;(objectClass=user)(objectCategory=Person)(|(memberOf:1.2.840.113556.1.4.1941:=CN=db_writers,OU=Groups,DC=mydomain,DC=com)(memberOf=db_writers,OU=Groups,DC=mydomain,DC=com))(sAMAccountName=juser)), $attributes = Array Here's the output of the $result variable: resource(3) of type (ldap result) And the output of the $entries array: array(1) { ["count"]=&gt; int(0) } I'm not sure what these are supposed to look like, but it's like it's not populating the array. 
Virtual File Systems &amp; Site Inheritance 
node.js has it's place, but in no way replaces a fully functioning language like PHP.
Holy shit. That's it! Brilliant! Thank you so much!! Reddit Gold for you.
It's probably also worth noting that we're looking at WordPress code. posts_per_page is a parameter to [WP_Query](http://codex.wordpress.org/Class_Reference/WP_Query). Directly passing your `$_SERVER['REQUEST_URI']` definitely isn't the expected way to call `query_posts()`. In part, it's failing because `REQUEST_URI` probably looks like this: &gt; vidloop?meta_key=video_name&amp;meta_value=examiner That string gets passed down to `wp_parse_args()`, which returns some key/value pairs: - vidloop?meta_key =&gt; video_name - meta_value =&gt; examiner If you mangle the string a bit further, you get the one video you probably intended to get: &gt; vidloop?foo&amp;meta_key=video_name&amp;meta_value=examiner `$_SERVER['QUERY_STRING']` is probably what you meant to use. There may security considerations if you're letting an unfiltered query string query your posts. (I'm not sure, though.) See Andrew Nacin's [You Don't Know Query](http://www.slideshare.net/andrewnacin/you-dont-know-query-wordcamp-portland-2011) for a quick primer on WP_Query and some better ways to use it. There are a bunch of ways to accomplish all of this, including custom post types and WordPress rewrite rules.
No idea where you get this : Generally speaking one of the major trends seems to be to move away from PHP wherever possible. In the past 5years, i have not seen a drop on the demand for PHP developers, hell quite the opposite, it's actually hard to find a PHP developer. To answer the question, the new thing is to cram as many design patterns as possible in a framework, even tho you don't need them, while making application heavier on the server. (Contrary to what somebody said in an above comment, PHP is doing well on himself performance wise, better than Ruby or Python that's for sure). Welcome to PHP++
abackstrom figured it out with a missing wordpress thingy, but have Reddit Gold for all your hard work. Thank you!
No prob. Now what the hell do I do with this stuff?
This sort of thing: http://www.sproutcore.com/about/ http://nodejs.org/ Obviously HTML 5 is now making client-side logic a much more appealing prospect so increasingly PHP becomes less relevant. It'll probably always be kicking around somewhere at the back-end and arguably still very important but it's no longer "the application" but rather half of it. 
&gt; anti-framework &gt; amazing libraries (mootools, jquery, etc) What the fucking fuck?
Sorry I missed this before: $result = ldap_search($ad, $dn, $filter, $attributes); Should be $result = ldap_search($ad, "DC=mydomain,DC=com", $filter, $attributes); The second attribute is the base DN. You should set this to an OU to search in or DN of the domain. You may also be able to leave it blank. If all of your users are in a specific OU then you should set it to that OU: "OU=Employees,DC=mydomain,DC=com". Think of it like searching for a file within a folder on your computer. You can either search the entire file system or search within a parent folder. You wouldn't ask the search system to search for a file and point it at the file itself.
Agreed, i am a huge Node.js cheerleader, and i think it's got some bright future, and due to the spread of Javascript might be one of the future big players.
Web sockets instead of Comet
my guess would be that function have_posts() is returning more than one video. If you're only ever expecting it to be 1 single response, why is it done as a loop?
No worries! I think we're getting closer. I made that change and now I'm getting a bool(false) when I dump $result after the ldap_search. All our users are in the Users OU, however, changing it between just the DC values for the domain and adding the Users OU shows the same thing.
No. It's great stuff, but you'll have a hard time finding a designer who knows anything about it.
Remember that what you call the User's OU is really a container. The DN of the default user's container is "CN=Users,DC=mydomain,DC=com". You can use this in the ldap_search function like so: ldap_search($ad, "CN=Users,DC=mydomain,DC=com", $filter, $attributes);
You know, I actually agree that things are moving away from PHP in a way. This is a good thing and one of the things PHP has always been good at. Want to do caching? Use memcached. Want to search? Use Sphinx/Lucene. Need job queueing, distribution or just optimizing a specific function? Use Gearman! Of course, this is not moving away from PHP in the sense of not using PHP, rather, it's just interfacing things with PHP that do things better than PHP. I'm pretty sure this is one of the things which will keep PHP relevant for many years forward.
how is it silly?
I agree. I am working on a heavy client side site at the moment. The server side is basicly a data store, which I am using a basic MVC (Yii) for, javascript is where all the magic happens. In the process I have had to completely change how I work with JavaScript and have essentially ended up reinventing MVC on the client side; the site communicates to different domains through hidden iframes and postMessage, as a result I have controllers that pick up these messages, a model and test class for data integrity and views for each page. There was a time when all processing was done on Mainframes with client computers essentially being zombies, then the pc was invented. Over the next 10 years I expect the same will happen to servers and browsers.
Ok, that worked! Kinda. :o] So, If I use myself, it works great and it shows that I have access. If I use our web guy, it works. If I use the 3 others in the group, no dice. Very strange. After some troubleshooting, I changed my name for the account I was using for read-only access, and now they show up in the groups. It must not have the right permissions to read the group. I specifically added this user to the group permissions and gave it read access. I wonder if it needs just a bit more?
I'm not sure this is the next big thing or really something thats just getting bigger but its mobile applications. I think that market will continue to grow and PHP developers will be creating more and more web services to be consumed by smart phones. Really we should all be learning how to develop on smart phones. The desktop/laptop/notebook computer, like the TV, will be here for a while but I the future is in mobile.
Keyword: trends. PHP is still extremely popular and a very valid choice. There's just a lot more viable alternatives today (Python and Ruby, specifically) than 10 years ago. PHP will eventually dwindle in popularity, much like Perl has today, but it's going to take a lot longer. The sort of development patterns are definitely becoming more popular (and that's a great thing) and they've made their way into PHP, even if it's not as easily fitting as Ruby or Python. At least PHP doesn't suggest running your webserver in PHP like so many Ruby and Python frameworks advocate. (Although I've seen the 5.4 features and know what that's going to bring about...)
&gt; Non-PC computers. QFT. People are really getting into browsing the web on their mobile devices. Normal people. It's exciting really, a little bit of a new frontier just when web development had started to become a bit routine. Designing for mobile devices is super fun, too. You have to throw throw out most of the interface on the grounds that it *just doesn't fit on the screen*, and instead you can spend time really focusing on the important parts. &gt; PHP: namespaces. Also right on the money. Plenty of big projects are moving to namespaced code. If it's not widely considered a best practice now, it will be soon. It seems to me that the problem most PHP devs have with namespaces is the backslash character. It's pretty childish really and I'm getting tired of hearing about it. That, and a lot of people seem to be unaware that they can have "use" statements at the top of the file: if it seems unwieldy to type "new \Zend\Foo\SomeClass" every time, it's because you're doing it wrong.
Glad I could help. Hopefully you'll figure it out from here.
Yeah, and that's good. The key to PHP being performant, is to use it for what it is meant for : generating HTML. Couple months back, i had a heavy discussion on why i didn't want to see something like Symphony 2 used in my team, as much as i like the framework, if you are looking for performance, it has everything you don't want to see in a PHP application that needs to perform: too many layers, templating engine, ORM. People need to realise that PHP does suck at complex OOP technics and patterns. I am not saying no OOP, but when i see Interfaces left and right, classes with a 1 line function in it, theory and design patterns are really nice things on paper, but some people need to come back down to reality and admit that PHP suck at this, and stop blaming it for them programming in a style that doesn't suit the language that they use. It's just a fact, anybody who knows how to use a profiling tool can see the colossal overhead some of these frameworks put, sometimes for very little gain. Well, throw the rocks, i know this view on PHP is not very popular, sad when it is just the cold truth... 
Frameworks are libraries, but not all libraries are frameworks.
A gross hacky way to do it is to pass a get parameter and use it for some ghetto pagination. [keep in mind this is the ugliest thing I think I've ever written](http://pastebin.com/VjnRua47)
Put together another hacky version. Always sanitize _get... didn't really do it in this example. http://pastebin.com/A6hfctQ1 -- Access the different pages by going to gallery.php?page=0, gallery.php?page=1, etc. 
Well shit it sounds like we're two peas in a pod. I'm really not a fan of most thing that's distributed as it has too much bloat and I can quite literally measure it in my load times. It's really kind of sad that my entire application loads faster than an empty controller in something like Zend of Symphony 2.
It's not the truth though. Php is perfectly good at proper oo design these days, and interfaces and abstract classes are absolutely integral to that. Polymorphism can make projects massively more scalable and far easier to maintain, and to do polymorphism you require interfaces and/or abstract classes. Objects are definitely the way to go, and php is a perfectly capable language in this regard.
I'm always suspicious of people who are "anti-framework". I could be wrong of course, but in my experience, the people who are the most anti-framework tend to be the people who write extremely messy and very hard to maintain code. You may be an exception to this rule of course. It's something I've experienced time and time again though.
OpaLang does already utilize the client machine for processing, or are you referring to using a virtual machine in a future browser? I think a standardized VM in a browser would be amazing. I think the closest we have to that right now would be to get Google's NaCl ported across architectures and integrated directly into the major browsers. *\*drools\**
I feel your pain. I'm in a good place now where such things are highly regarded. Had to work for a year where my attitude (same as yours) was seen as the problem, and hacking something together with bits of string and bashing it over the head with a hammer until it gave the impression of a working system was seen as the correct way to do things. I feel your pain. Keep fighting the good fight.
I feel your pain. I bet you were accused of "over-complicating" things. What this means in reality of course is "I don't understand this and therefore I'm going to criticise you because it's basically over my head"
I've seen a fair few forms that will use alert boxes if you are missing fields, so that's at least one use of them in production that you might have overlooked
I am fully aware PHP can do proper oo design, problem is performance wise, it's down the shitter, at the bottom of it. And do not get me wrong, i didn't say no OOP, no Interface, no Abstract classes, just to not overuse them as having a design that relies on this too much is like signing a death warrant for any kind of performance. I did a lot of framework testing, language comparison, and performance wise, very few get close to PHP that is written with simplicity. And its always a question of using the right tool for the right job, if you are written an intranet application with only a few user, but a huge code base, using a framework like Symphony 2 makes sense, facilitate your development (not that much), comes with tools, you don't have to maintain it, etc . But if you have to write an application/website that needs to survive under huge loads/traffic, then no, none of the framework out there are fitted for the task.
I was actually pretty much told point-blank &gt;"I don't understand this and therefore I'm going to criticise you because it's basically over my head" In one way I admired the honesty, in another way that made it a million times worse. It's not like I was trying to bring in anything new and complicated, like some strange proprietary methodology. We're talking things like namespaces, proper OO structure, source control..
Fair comment. I've not done any such comparisons, so wouldn't be able to comment. I'm working on an intranet myself right now as it happens, and it's all done via Zend MVC and I'm happy with how things are panning out. If I was working on a high traffic website I guess I'd have to look into this though. I'm sure there are ways of using the ZF on high traffic sites (caching techniques etc) that wouldn't cripple the server though...
They should be but they aren't. NoSQL is looking to be the next big thing with regards to DB but has nothing to do intrinsically with PHP...
&gt;cram as many design patterns as possible in a framework, even tho you don't need them *see [Cargo Cult Programming](http://en.wikipedia.org/wiki/Cargo_cult_programming)*
But still, hardware is cheaper than developers.
&gt; Except now you develop some more and you decide to add a RSS feature. Suddenly on an edit you now need to invalidate the news overview page, the news comments page and the rss feed. Scale this out to a full website and you're bound to screw up somewhere unless you keep track of all the data in a structured way. Surely you can write an abstraction so that the data is presented, perhaps, in a single format and then processed client side? (so for instance, JSON that is used by jQuery to present a news webpage). Even still, if you were being hit 1000+ a second, you'd have, for RSS, a news page, and comments, 3 hits for 10, 20, 30 seconds instead of 1000+. I mean, hits from a cache server are cheap because they are simply churning up bytes from memory, in fact they are the cheapest thing you could possibly do, so while I guess I'm missing something, you're still essentially making all the hard work cheap.
I don't see how processing the data client side makes any difference. You'd still have to invalidate it whenever it's updated. If you're doing fragment caching this is not a problem but if you're doing full page caching you'll need to invalidate multiple areas. And no. 3 entries in a cache written to once every 10 seconds is absolutely nothing. But that wasn't really the point of it. You're still serving stale data and generally that's not acceptable for users. I might have been confusing but I'm not really talking about the performance of caching but rather the difficulty of making sure you're not serving stale data. To not serve stale data you need to know where every piece of data is being used in your application so that the pages generated can be invalidated properly and this is what's very difficult about caching (properly).
All frontend developers I know are like that.
*pssst* check out Propel's Query API 
Site inheritance? Do explain.
Also they suffer from the "Not Invented Here" syndrome.
Yes but if data is only as stale until it's updated then that's not an issue.
 &lt;?php // returns an array containing an array of of image paths and the number of pages function page($page_num) { $d = dir('/path/to/images'); while (false !== ($file = $d-&gt;read())) { $images[] = $file; } $d-&gt;close(); $paginated = array_chunk($images, 20); return array($paginated[$page_num], count($paginated)); } ?&gt;
Site A exists with a specific file structure. You want to clone Site A. You deploy the PHP engine on a new Site B and configure it to download over HTTP all the assets from Site A as needed. They get saved as local files in Site B. This could technically work in any framework with a real file system but it works best with a virtual file system where every revision of the file is a new version.
Why would you put the define inside the function? The way you have it there's no reason to make a constant
&gt;Hell, Newegg.com is still using separate .aspx pages. Those might be redirects.
sorry about that, didn't mean to offend you.
now i know what to ask my bf about tonight! :D i think that's a good way to go about it edit: asked my bf about NoSQL, looks like something facebook &amp; twitter use, although it's not exactly the best way to go about things.
... because this is just an example of how to do it, not something he should drop straight into a script. I wasn't aware that all code presented here was expected to be production ready! Happy now?
It's good practice to just not let yourself write ugly code unless someone is paying you to do it. I used to just pour out the hacky code to solve problems, but it's just a bigger problem in itself. Another point is integrity. A graphic designer would probably never design something ugly unless they were unskilled or, unfortunately, being paid to do something ridiculous on an absurd schedule. That's how I see it. I know you didn't ask though so feel free to ignore me.
To expand on this. Your news page also prints the latest 20 comments under it. Is this list cached with the news article or as a separate cached item with a separate timeout and invalidation? You probably want it separate. Someone adds a comment. Now you have to invalidate that list of 20 comments too. Each comment has a permalink. You invalidate the cache for the permalink page for the comment. Comments are nested - you walk up and down a tree invalidating anything with a reference to what was just edited. A page contains a "next article" or "previous article" link. You delete or add an article. Now you also have to invalidate the "next article" and "previous article" link on the pages before and after the page you added/deleted.
Part of the issue with what you're doing is that there is no way to seek to a point in a filesystem directory list without counting over all the files to get to that point. The easiest way to do this without changing the system you're using to get the image data is to open the directory and loop until the desired starting index is met, and then either output or collect a predetermined number of file paths. If you were to store the file metadata in an SQL database, you could use a LIMIT clause in your query. While it is arguable which would be more efficient in an unsorted search (operating systems generally aggressively cache filesystem structure and are very fast at pulling directory listings, even very large ones) a database affords more flexibility with the data you can store and how you can retrieve it. If you're getting in to the thousands of files, it would likely be to your advantage to store information about the files (name, location, etc) in a database, and then pull the image data directly from the filesystem as required.
Ugh, I hate writing in r/php because I get this beautiful code evangelist stuff nearly every time I write a comment. Helping a guy out in two minutes with some hacked together scripts and writing great quality code in my own projects are not mutually exclusive. Do I think that this guy's problem could be better solved with, say, mapping all of the files to a database? *Obviously*. But does that mean that this guy should do it? *No.* It's likely beyond the scope of this project (despite how easy it would be any developer to implement). He wants to paginate his images and I threw together a two minute script that does just that. What's the problem? Sorry if that's a bit of a rant, but I can't stand some of the attitudes around here. Php is a hacky language and not everyone is a full time developer building a full scale web app and, as such, they often don't need beautiful or scalable solutions.
I'm looking at just over one thousand files, about 1,020 to be exact.
&gt; Plenty of big projects are moving to namespaced code That right there is the crux of it, big projects. The vast majority of PHP devs aren't working on sites large enough to need namespacing. For those kinds of projects, namespaces feel like using an entire room of bookshelves to hold 8 books.
I don't disagree, but are there really that many sites using comet? Facebook and Gmail are the only ones that immediately comes to my mind.
Analytics &amp; MongoDB
javascript single page web apps like extjs, with php in front of the database EDIT: to extend that a bit, you'd want your PHP lib to excel at: * auto-building good active record models based on the database (in particular many many relationships) * some automatic validation rules, with different scenarios (create vs update) * ALSO building good *client-side* (javascript) models that have similar fields and validation rules to the server * Role Based Access Control * strong and easy JSON creation and reading from the client, in particular deeply nested models
I'm curious. Under what circumstances is mysql_real_escape_string not safe? I've never seen a case where using mysql_real_escape_string and putting your values in single quotes can be exploited. e.g. SELECT * FROM table WHERE value = " . mysql_real_escape_string($_POST['value']) . " This can obviously be exploited and should be one of the first things developers learn about security. But I can't, and have never seen a way around: SELECT * FROM table WHERE value = '" . mysql_real_escape_string($_POST['value']) . "' 
Can you provide an example?
Just checking, but you *do* have a closing bracket on the else statement, yes?
Is WHERE IN mn=1 valid syntax? I think not - that's why the query fails 100% of the time. You should try SELECT DISTINCT `mn` FROM `medl` WHERE `mn` = 1; Also, if you want to check if the query returns any data you should use mysql_num_rows() on the query handle, as mysql_query returns either query handle on success (empty query result is still success!) or false on error (syntax error) for SELECT queries.
In your “derp”, try a mysql_error(); Simple advice : **Use [PDO](http://ch.php.net/manual/en/book.pdo.php)**!
Yes, I do. :)
Thanks for the advice. :)
Will do, sir.
I'm only expecting to return that one row, if it is 1, then do something. If it is 0, then do something else.
I know. :) Thanks!
I am still having some trouble, though. I have no syntax errors, but it seems it still won't output herp if the user has 1 in mn. Should I also specify the username in any way?
Warning: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given in www\testNathan.php on line 5
Oh, I see. Now I get Array ( [mn] =&gt; 1 )
The people who have 0 still gets that they are herp...
What exactly should I read up on?
EVERYTHING, because this stuff is considered basic. Read through w3schools sql reference a couple of times. 
At what point do you get stuck? Have you looked at PHP tutorials on youtube? That's how I learned.
The only way to learn it is to do it. Try and build something that solves a problem you have in your life. It doesn't have to be a huge complicated problem - just something that requires a bit of database interaction, some forms, some sort of dashboard maybe. Do it using a well documented framework (e.g. Code Igniter) and don't expect to master the language within a week. Also - read books. Read a chapter a night before going to bed or something. Don't just rely on tutorials.
Totaly agree aside for this part: &gt; Do it using a well documented framework (e.g. Code Igniter) Dont start of with a framework. That's like learning JavaScript by using jQuery. By learning about hte basics of PHP you'll get the hang of it faster, will be able to solve more problems and know why and how parts of the framework work. Aside from that - do exactly as warans tells you - find a problem / need and work on its solution. 
**Buy a book.** Seriously. They are (for the most part) written by professionals who know exactly what they are talking about. As opposed to online blogs/tutorials, which can be good but often contain sloppy code and bad practices. You get what you pay for. If you want to learn properly, you need to spend a little.
You can do `if ( mysql_query($user) === false )` (note the triple equals) which will only be used if there is an error. But yes in this case probably getting the number of rows is more appropriate, it depends on what you're doing in the clauses.
The reason I say use a framework is that it should support best practises like OO, decent DB abstraction layer, templates, MVC etc. right out the box rather than letting the guy just stitch together a load of tutorials into some unholy mess. I agree to some extend you need to understand the basics but I personally didn't until I actually saw them applied properly in a decent framework.
I think you are incorrect. For example, I have a table, named `pages`, with rows in it, this example: $query = mysql_query('SELECT * FROM `pages` WHERE `id` = 1'); if($query === false) echo 'nope, not there'; else echo 'found something'; would display found something and this one: $query = mysql_query('SELECT * FROM `pages` WHERE `id` = -1'); // there is no record with id = -1 in the DB if($query === false) echo 'nope, not there'; else echo 'found something'; would still display found something That's because [mysql_query](http://php.net/mysql_query) returns false if the query was incorrect (syntax error) or the query handle if it went through (for SELECT queries). It the query returns an empty set mysql_query() still returns the handle, not false - that's why you need to check if the set is empty with mysql_num_rows()
&lt;?php echo "Hello World!"; ?&gt;
All jokes aside, get a book and walk through it. There's about a million of them out there. As far as "What to do next?" and "Am I doing this correctly?"... those are questions that programmers tend to consider daily. "Am I doing this correctly" can usually be answered by posting in stackoverflow (or /r/php?), although you may have to sift through some ego-driven arguments to find the right answer.
I don't think you read my post. I said that clause would only be used *if there is an error*. In practice you wouldn't need that because the query should always be well-formed, whether it returns rows or not.
http://en.wikipedia.org/wiki/Indent_style unless you are working on a team that specifies a particular indent standard, i wouldn't worry about it (as long as you are using some sort of standard). I've found it actually helps me identify who worked on the code in smaller teams. :) I tend to use 1TBS myself.
I was mostly concerned about your complaint of your code being ugly. The best way to stop writing ugly code is to keep writing it until you are only releasing nice code, I guess. To keep working at it. I really wasn't trying to be a jackass - I thought you were unhappy with the solution you wrote but were sharing it anyways. It seems like that isn't the case though so it's not a big deal. Sorry for getting on your nerves about it! I think we gave each other the wrong impressions.
In some ways though, you should create an unholy mess before finding out _why_ it's an unholy mess. Then you can go back with your new-found knowledge and improve it.
Thank you, I'll give this mindset a go.
I find a good way of seeing how much I know is seeing how well I can teach, but I don't have time (so probably not very well). Good luck though. I think of this as an interesting proposition.
Oh, indeed - but as you've said, it would be an error on the programmer side to use such a condition on anything other than test/POC code.
I self taught PHP and now I'm a lead developer at an agency. I found the best way to learn was to set mini projects and targets. This can be as simple as saying, I'll start tonight and within 3 days I want to create a guestbook (old school i know). This will help you get to know the basics of data in, data out - which is the basics of nearly every website. Just create simple projects and give yourself a few days/weeks to nail them. It'll all start clicking eventually. First start off with your standard messy code, doing multiple mysql_query() etc and then thinking, how can i make this better? Turn that in to a function, function in to a class. Best advice I can give!
I agree. Give yourself a project that you want to make work and then figure out how to do it. Having a goal always keeps me more focused. If I go after standard tutorials I usually get bored.
&gt; Dont start of with a framework. That's like learning JavaScript by using jQuery. Upvoted. As hard as I could. I think a popped an artery.
Starting out, it may help to walk through a problem by hand, and visualize how it works, then see how that works when implemented. For this example, I'd say take a list of 10 entries, and step through it. I'd use phpmyadmin to work on the query until it does what you want it to do, then translate that into PHP. Without context, something seems very wrong with what you are trying to do though. If you are looking for something on a *particular* user, this won't work. In your table if *at least one* row has mn=1, this will *always* return "You are derp." The only way this would return "You are herp." is if *no rows* had the value mn=1.
I've been wondering who watches video tutorials for programming. Apparently I found someone.
Eh... well... that's embarrassing then... Thanks for not exploding on me for misguidedly taking my frustrations out on you. I'm sorry.
You really have to be picky when looking at tutorials on youtube, since there's a lot of garbage/misinformation/bad practices out there. If going through a "Learn PHP" book doesn't work for you (like me), I'd suggest learning through a different medium. Seeing it done and hearing someone explain what was going on helped me learn the basics. After that I picked up on what to do and what not to do and best practices. It took me about a year of constantly working at it to get to a point where I could do some really cool stuff with it. I must note that a solid understanding of HTML is required before you can even think of doing PHP. I'd say half of PHP is generating HTML. EDIT: I need to reiterate that going the YouTube route must be a last resort. If you do try to learn from videos from some random person, you need to understand that you have to keep learning from different sources. One specific example is the tutorials I watched used mysql instead of mysqli and prepared statements. After you learn the basics, figure out how to do what you learned in a better way.
I work in web development, mostly PHP/mySQL/AJAX. Sometimes I need to look something up, and I get pretty annoyed when the top results are all videos. It's so much faster to scan someone's source and read a few lines that explain what they're doing, versus sitting through a video. So I've been wondering why the videos are so popular. It sounds like some coders learn better this way? Also... &gt;I'd say half of PHP is generating HTML. This used to be more true than it is. Web applications have become pretty complex. I write very little HTML anymore, compared to PHP, Javascript, CSS and various command line processes.
This actually looks pretty good for simple apps. If it's included on the same basis as SPL it could be a good way for people to implement a sensible MVC pattern without the bloat and complexity of a larger framework. Though I can't see any model base classes so maybe it still needs some external libraries to work properly with a Db.
See, if I need to figure out how to do something specific, like how a specific type of query works, looking through the docs is a lot faster than watching some video that overviews different kinds of queries. For a broad overview of a topic, videos are great, but for a specific issue, read the docs/stackoverflow.
Oh, I get it! But how would I check each user if they have mn=1 or mn=0? I've been doing some PHP for like 3-4 weeks in total, and only know some of the very, very basic stuff. I coded me a login an registration system, but it seems I'm now in some deeper waters.
CodeIgniter is probably a good framework to get started with, and since it's been around so long you with have an easier time googleing for things. However I've seen some criticism of it from a system design perspective, so if you want to learn more about MVC it might be worth looking at other PHP frameworks -- there are a whole range of them. [Kohana](http://kohanaframework.org/) is my preference; the [request flow](http://kohanaframework.org/3.1/guide/kohana/flow) docs page is a good place to start. On a note about skeletons/templates: there is some argument that php is *too powerful* for templating as it allows logic to creep into your templates if you're not disciplined. [Mustache](http://mustache.github.com) is an popular alternative templating language. Usually taking this approach means creating ViewModels (different to Models involved with database persistence) to home the logic that might normally end up in a template. Pagination is a good example of this; splitting results into pages belongs neither in the controller, nor the template.
Here's a link for [autoloading from the PHP docs](http://php.net/manual/en/language.oop5.autoload.php). The paragraph at the top pretty much sums everything up.
so i can save space by using _autoload rather than include() for everything? very nice. thanks!
there's so much to know.... i'm gonna keep working with CI and once i have a fair understanding of it, check out different frameworks. i appreciate all the info :)
send me a pm, ill guide u through it
Exactly this. When I got started I mostly just went with small projects. "Okay, I've got this page of quotes, but it's super long. How do I split it up into multiple pages?" "I've got a form up. How do I get it to send the contents of the form as an email?" Just keep working with little tiny projects, and browse other peoples' code for larger projects, until you better understand the language. Keep doing bigger and more complicated things.
While the space saving is good, it's more about maintainability. You let the autoloader(s) load classes based on their names, only when PHP actually needs them. The alternative ends up being a bit of a code-include spaghetti: A includes B and F. B includes C, D, and E. E includes F. etc etc. It only autoloads classes mind you ;)
Haha, don't worry about it. I don't mind at all. I can see how I might have come across entirely wrong.
sounds like you want sql servers dts aka SSIS/SSMS - sadly i've never seen a tool as adept except development tools like altova's suite. Current mesage -&gt; XML -&gt; XSLT -&gt; XML that new forum wants. but at the end of the day you can simply code a bunch of reads and arrays in php and run them and it would probably take less time. take a look at altova mapforce and sql server management studio - i've used the latter to make jobs that import dbase+ctree(via odbc) into daily jobs to sql which get analyzed and pumped back out to a 3rd format. i really wish there was an equal to Sql server SSMS for mysql - i'd give up sql server in a heartbeat but damn its easy to use and powerful and phpmyadmin is not even in the same realm of awesome. Alot of people have tried to make web interfaces that do similar work - some are pretty close - most aren't free.
php.net
The way I learned was getting inspired by cool stuff on the internet. I'd wonder 'How the hell is this application/website so cool?', then piece it together, bit by bit. I learned about object oriented design and coding (You can't piece things together bit by bit if you don't have good organization of code and scalable objects, so you figure that stuff out pretty fast), database schemas and operations, security, etc by finding examples of things I loved and just figuring out how to do it. As for where do you start? Well, the easiest part. Don't start a project expecting to finish it, have X number of users by Y date, or anything like that. At this stage, everything is an expendable experiment on the road to knowledge. What do you want your project/script to do? That's a useful question. I wanted a site that would hold me (or anyone) as a user, containing any kind of information that could be used as a certain range of statistical variants. So I could track money, sleep, diet, weight, etc, and compare them all or look at each one in different ways. I started that one by literally drawing the database tables, columns, and relations on a piece of paper. Then I made the model on my localhost with MySQL and started grabbing data to operate on. Then it went into graphs via Javascript. Eventually I added a way to add new things to track via a form; add what it is (How often you have sex perhaps), add a few other details (Like an icon/image to represent what you're tracking), submit, and suddenly your dashboard has a new widget. Then I added sorting, then a preference panel to only show certain widgets, change units, change colors, etc. Now I'm working on connecting my widgets to outside services. How often do you tweet? How far do your run (Run keeper)? Eventually I'd like to make more advanced comparisons of things, so I'll tackle that once I find a nice way to integrate data feeds. I'd also like to build component-like widgets which contain more logic than the current ones. Widgets that can track several things within one widget, such as what you spent your day doing. That'll require an overhaul of things, and in the process, I'll figure out some challenges about rebuilding a model of an existing project. The amount I learn from this project is absurd. Sure, it's not ideal... It's probably not production ready... But I've only been writing PHP for a year, and I'm doing fine. I get paid for it at least. Figure out what that rad project is and just chip away at it. Don't worry about where to start. Think about it: PHP is for producing HTML. You can do that. Prioritize what kind of HTML output you want from your project, and start outputting it from whatever source. It's *almost* that simple. Worry about the less simple things like security, great architecture or frameworks later when you want to go live with a project.
are you saying that the php "decides" when the classes should be loaded, then? and thanks for clearing that up for me hahah :) on a less relevant note, i'm having a bit of db issues. when i go to the website, i get this error: "PHP Error: [2] mysql_connect() [function.mysql-connect]: Access denied for user 'db_user'@'localhost' (using password: YES) Error on line 67 in /var/www/ccm/application/config/database.php Request URI: /" would you happen to know if the above error is the same as the following one: "UPLOAD_ERR_FORM_SIZE Value: 2; The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form." (taken from http://php.net/manual/en/features.file-upload.errors.php)? 
Are you looking for a meetup? Where do you live? I might be able to help, else you can PM me and ask questions if you'd like.
&gt; So I've been wondering why the videos are so popular. It sounds like some coders learn better this way? Also... Videos are best for introductions to concepts that you are alien to and when your learning a new subject from scratch, because you can just watch an learn by example. Text is better once you have a relative understanding of what's going on. Or you need quick access to information.
What seems funny to me is that PHP is written in text anyway, and with video, you can't copy-paste. A tutorial video for Dreamweaver or Zend Studio would be one thing, because there's a GUI involved. I just don't see it with PHP. But I guess there's a demand, so sure.
no, there isn't.Because comet is bulky and awkward. Web Sockets solves that, and this is why live feedback on web applications will be a big thing coming up. There are numerous reasons for a web application to execute or start a long running task, or allowing a user to execute numerous small tasks that can be queued up behind the scenes. The solutions of comet and ajax work, but they are not great. But a direct and constantly open network connection from client to server is great. Bilateral communication between client and server opens the doors to a lot more flexibility in how a web app responds to action by a user or informs the user of something happening. of course, I could also be way off, but I do honestly feel that web sockets will be a big deal once they get adopted properly.
Thank you! I pasted that into my old code and changed the URL-variable to the one I used before: &lt;?php $request_url = "http://joscha.tumblr.com/api/read?type=photo&amp;start=0&amp;num=1"; $xmlResult = file_get_contents($request_url); if ($xmlResult === false) { // File dosn't exist :( } try { $xml = new SimpleXMLElement($xmlResult); } catch(Exception $exception) { // XML failed to parse :( } $xml = simplexml_load_file($request_url); $image = $xml-&gt;posts-&gt;post-&gt;{'photo-url'}; $text = $xml-&gt;posts-&gt;post-&gt;{'photo-caption'}; echo '&lt;p&gt;&lt;img src="'; echo $image; echo '"&gt;&lt;/p&gt;'; echo $text; ?&gt; So this will either do nothing or, in case of in error, hide the error and continue with the rest of the HTML file? Thanks a lot for helping me with this, much appreciated.
Where in Toronto is offering this program???? I'm studying at OCAD doing some code art stuff... but havn't seen any code art classes doing anything like this. (BTW totally stalked my way here from the Cash Man thread)
PDO is the last PDO library you will ever need. Why do you have to restrict and reduce the functionality of the PDO extension? It's relatively well-designed already, and doesn't have a lot of cruft. There's no reason to wrap it.
preg_match_all - I can turn a hunk of text into an organized array in one pass.
&gt;I self taught PHP and now I'm a lead developer at an agency. I found the best way to learn was to set mini projects and targets. I started the exact same way and agree 100%. That said, it also helps a TON to find someone who has more experience to help you out. Mentors can (important word, *can*) be a godsend.
I'd be happy to answer any questions you may have along the way, and maybe guide you a bit, but a book will do you wonders. Anything by O'Reilly will do.
 explode simple, helpful, and appropriately named
1. You've left the closing ?&gt; at the end of the "file". This is not the recommended practice 2. You've created a PHP block just to output static text. The correct way to do it is simply: Hello World! TL;DR Tsk tsk tsk
I see you're only resizing the image display with HTML rather than resizing the image using PHP, which you might want to look into. That Earth image takes a while to download, which it really shouldn't if it's only 100x100.
What do you mean the best way to approach it? Is it yours?
what can you teach someone else?
The code will flow into the if and try but in the example above it will continue until it dies horribly later. It will still show the error, as some other people have said the real problem is your live server should not show error messages.
I've always loved this about PHP. There's no reason that everything has to be in English. We're all talking Computer. Okay, really, we're talking Language that Talks to Computer (with a bunch of layers between there) but still.. It's also a good litmus test for people... are they the type to get an error message and immediately go to seek personal help, or do they do a little googling first?
Figuring this kind of thing out would be half of your job.... try harder?
&gt;The only reason its in there is to be cute and let people know that PHP is developed by Israelis. It's not. It was introduced in Zend Engine 0.5, which was developed by Israelis. PHP is developed by The PHP Group, and was originally developed by Rasmus Lerdorf, who is a Greenland-born Dane which nowadays lives in Canada.
&gt;Parse error: syntax error, unexpected '}' in /home/content/14/7415714/html/test/index.php on line 35 Use an editor like jEdit that supports language syntax highlighting. Most of them will show you in the "gutter" (far left side of the editor) where each block of code begins and ends, so you'll be able to find the missing brace.
So as a PECL extension you would think this would have lower overhead compared to frameworks written in PHP (Cake, CodeIgniter etc.) since its close to the PHP core code right?
Yes let's kill all of the easy to fix/google error messages.
strtotime() is good. I also like get_object_vars() and debug_backtrace().
http://php.net/manual/en/function.str-rot13.php
print_r() combined with pre tags is always a winner as well.
http://framework.zend.com/manual/en/learning.quickstart.intro.html
die()!
&gt;Turn that in to a function, function in to a class. This is basically how people get the bad idea that OO programming is just a way to group a bunch of functions.
or get one for free from your local library which is how i taught myself on a crumby 900 Mhz CPU w/ 1GB RAM. You don't need much.
You might not be cut out for programming...try a taco stand. Seriously though, you need to find something you actually want to program cause you think its cool or something. Then just do it. Sure, your code is going to suck, but everyone's code sucked when they first started. No big deal, it will get less sucky the more you program.
Lol. I've only used this once because I needed a quick and dirty two-way encryption algorithm on an old install that didn't support mcrypt. Not very secure, but the data wasn't all that sensitive either. Stupid function.
Your question is too sparse and non-specific.
I'm a big fan of debug_backtrace(); A couple of my projects that I use I will override the PHP error handling (for runtime errors, if a query fails or it completely breaks then I die gracefully) and I will serialize the debug_backtrace and insert it into an 'errors' table. Then I have a nice script that lets me browse them and view the trace in a nice neat fashion. index.php $blah is undefined 113 myfile.php myError 80 Something like that, and then I have a div below it which is the raw dump of the print_r() of the entire thing if I want more details and variables! trim, ltrim and rtrim I find are really useful when used with the second argument as well. If you know you have a string like.. 'mydiv_5' instead of exploding or doing a strpos you can just do $num = intval( ltrim( 'mydiv_5', 'mydiv_' ) ); That's not the greatest example in the world but illustrates the point I'd say. Edit: typo, wrote ttrim instead of rtrim
The first example could be improved like so: $result = mysql_query("select * from dogs where name = '" . mysql_real_escape_string($name) . "'"); ...but it would still be vulnerable to a multibyte attack vector. The later would not. 
I've done things similar to this before. Definitely gives you something to look at right away. Another thing I have is a logger for all calls to my controllers. I can turn this on/off at will. Really helps if someone remote is having problems - I can see exactly what they are posting/getting - what they are calling etc... 
Is there a place listing sample projects in degrees of difficulty? I've read a couple of books and done some tinkering with PHP but think this is the best way to learn.
Yup I do the same thing. I log the exact URL they tried to go to, the pattern that the router matched, the resulting path that is trying to be executed and an execution time as well. Really helpful
This is one of those debates that will never be settled, so it's best not to even bother. It's equivalent to what brace style you use, what indentation format, or any other number of largely-inconsequential matters of personal preference. Yes, that error message is confusing, but you only need to figure it out once, and hopefully having figured it out, you will have learnt something about parser tokens.
i always use [var_dump\(\)](http://php.net/manual/en/function.var-dump.php) 
I totally understand where you are coming from, and I agree, but I really didn't know what the fuck I was doing until I started using a framework. Only then did the whole concept of OOP really start to make sense. I dabbled in PHP for 1 year + and didn't get anywhere. Soon as I learned how to work with Code Igniter, it all started to make sense.
var_dump(); (in particular a wrapper around it or with xdebug). Also love \_\_call(), \_\_get(), \_\_set(), and call_user_func_array();
With a shovel. I don't understand what is happening here.
[filter_var](http://ca.php.net/filter_var) Because it's fucking awesome.
What debate?
It's an interesting idea, but I prefer my frameworks to be a little more 'available' for tracing execution in the event that they do something wrong or unanticipated.
...what's in the email?
Click show original message on the dropdown in gmail and post your message. Possibly blacklist?
found some benchmarks here: https://github.com/eryx/labs/tree/master/php-framework-benchmark/result-20110701 (just click each image file) Seems pretty solid, almost the exact same layout as my little framework with the advantage of being written in C. Awesome.
Some people insist that the parser token for double-colon should be changed to something like T_DOUBLECOLON. Others say that it's not worth doing, because it's a minor confusion, but changing it would cause major backwards-compatibility issues. Yet others say that it should be retained because it's important to the heritage of the language. It's brought up at least once per month on internals, and is often discussed on ##php. Nothing will change, though, because it's not a big enough problem.
I should've put up my "sarcasm" sign up. :D I was just meaning that there is no real debate as the core team clearly stated that this was not gonna change, if there is a debate it's mostly in userland.
strtotime() is a little piece of magic.
`implode` 
 new StdClass;
Me too. I don't think print_r shows anything if it is null.
compact(). Does the opposite of extract(), kinda. $name = 'Kaerigan'; $age = 21; $values = compact('name', 'age'); // $values = array('name' =&gt; 'Kaerigan', 'age' =&gt; 21);
here's the manual for a lot more info (in Chinese but Chrome's translation is pretty good) http://yaf.laruence.com/manual/
It also shows type and length. [More info and example](http://marc.info/?l=php-general&amp;m=98684689426976&amp;w=2)
Yeah that's my point. It will tell me if it is null, array, object xyz, etc.
do your have your rDNS setup and your PTR record? are you spoofing emails or are they legit emails? are you sending from your home box or a hosting company is so which. http://mxtoolbox.com/ can check for black listings
I've written a drop-in tool to make the variable dumping a breeze. Couldn't develop without it anymore http://code.google.com/p/kint/
Zend is a central part of PHP. The statement still makes sense.
Hmm, haven't heard of point 1, what is the reasoning behind it?
Why aren't we talking about MicroMVC? It was the top dog in most of those benchmarks. (I'd never heard of it before, just curious...)
Maybe try /r/css
http://csseasy.com/
I'm not sure what you mean by default. I for one don't like reusing old CSS layouts because it always ends up being the same design with different RBG's. i do however have a [default *reset* file](http://meyerweb.com/eric/tools/css/reset/) that have all the standard CSS resets and stuff like a .clearfix and debugging code. 
English is widely considered to be the standard language of technology. I seem to remember reading Linus say that he never even considered writing Linux identifiers or comments in Swedish.
"learn" css 
Don't kill yourself... suicide is not the answer... just exit();
Wait, a PHP Framework written in C? I think I just blue myself.
I don't understand your point. Are you suggesting that the site is implying that it helps you learn CSS, while you're simply modifying provided layouts? If that is the case, I'll mention that I learned the majority of my CSS by taking working sites and changing values (to see what happened). Also, as the OP didn't ask for a recommended CSS learning resource, but rather where I go for my base templates, I see no problem with my answer.
Clearly, you skipped chapter one of "for dummies". :D
Because it is impossible to add white space by accident before headers are sent.
The easiest way is to use an SMTP relay (IE, use someone else to actually deliver the mail). A properly setup mail server needs to EHLO as it's hostname. The hostname needs to resolve to the IP the mail server is connecting to. Reverse DNS on said IP needs to resolve to the same domain. You need to ensure that the email itself is properly formatted. You need to setup SPF records that specify what servers are allowed to send on your domains behalf. You may be initially throttled if you are sending a large amount of mail from an IP that hasn't ever sent mail before. You need to get your IP in the feedback loop for abuse reports for larger mail recipients like AOL and Hotmail. And obviously your mail needs to not be spam. That should get you started, but I strongly recommend using an email relay.
Edit: have an upboat cuz I laughed.
eval(): it can do anything! /s
That's pretty cool! I actually like reusing the same css layouts- but I like working on functionality more than frontend.
Thanks! I will.
Thanks. This is *exactly* what I was looking for. A nice simple layout that can then be expanded.
Hence why we throw mysql extension to the dogs and use PDO.
This has already been changed to [T_DOUBLE_COLON](http://php.net/manual/en/tokens.php). Upgrade your ancient PHP install already. 
I happen to have a strong opinion on this. The opinion is that if you even consider reinventing the autoincrement functionality, you're either a moron or highly unexperienced. The provided arguments against using autoincrement only reinforced it.
upvote for the xdebug love
get_magic_quotes_runtime() Safety first! ;)
new is an operator/keyword - http://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.new StdClass is a predefined class - http://us3.php.net/manual/en/reserved.classes.php
http://foundation.zurb.com/ ^ seems good so far
Agreed. The arguments mostly amount to fixing security issues with obscurity. 
Because it's Micro. Most people require/want something more robust. Also, I've not heard of a larger site running on a microframework.
echo()
[](/)
extract() fuck yea
Looks very interesting - will have to check it out.
I... I just didn't know.
With all due respect that perhaps you deserve, so your counterpoint is namecalling, rather than a tenable point? Besides the obscurity, site attack, and security issues, which of course can be thwarted in other ways besides just this -- there are two main points I think you need to know. 1. Sometimes programmers migrate tables improperly and end up renumbering a table, breaking data integrity. Since some versions of MySQL don't have true relational data integrity constraints, it poses a danger where foreign key links become misaligned. When you encounter the horror of orders being misaligned to customers in a production environment, you'll see what I mean. 2. There's a performance impact with very large tables and autoincrement. Check out [this blog post](http://joshua.schachter.org/2007/01/autoincrement.html) that exposes another major fact about MySQL. I quote Joshua Schachter: &gt;"...Setting a column as auto_increment requires that there be a primary key placed on this column. It's not well explained in the documentation, but under InnoDB, the primary key is similar to a unique key, except that the rows in the database are stored in the sort order of the primary key -- this is why there may only be one such key. (Other database systems refer to this as a "clustered index"). This means if you are using it merely as a join identifier, but freqently do large queries based on some other column, the rows have to be fetched from all across the disk since they are not all together. As an example, in early implementations of del.icio.us, fetching all of the bookmarks for a given URL could cause tens of thousands of disk seeks even if there was an index on that column. As a datastore grows, the location of things on disk in relation to each other becomes an important consideration for scaling." 
Most of the common solutions are bellow, but you may consider using a service like Amazon Web Services Simple Email Service for the absolute simplest solution that will work. Also as someone who fights this regularly while we setup SES: with Hotmail once you're flagged you are pretty much boned. We've tried for nearly a year now to get unlisted as a spam host but because someone in the same data center we were in had a server compromised and a PHP mailer script put on it we never have been able to get unlisted, moving data centers fixed most of it, but we still get caught a lot. And we send order receipts for purchases, so that kind of sucks.
Except for the fact that Zend Engine is no longer developed by Israelis, weren't a central part of PHP back then, and is now being developed by Zend Technologies.
If you don't want sequences, just use UUID's instead. Checking if the key already exists in the DB is not a good idea, since it exposes you to race conditions, unless you use some locking mechanism; it also takes away one of the advantages of UUID's, that is being able to generate them on different machines. UUID's have many uses, and can be very advantageous in some situations; however, remember that non-integer primary key have a performance cost (which, due to how databases construct their indexes, could not be immediately apparent). You can also combine different methods: for example, use sequence primary keys for DB indexing, but also generate a memorizable non-incremental key that is exposed to the user. 
split/join make more sense then "explode" "implode"
Yes, but they're not nearly so much fun to type.
var_dump($mixed); Very useful for debugging.
I'm all for UUID, but the problem with UUID is the sheer size of the number, which is stored in 128 bits. In a sense I'm like using UUIDs, but am able to keep the number smaller by using two extra features: - a different base numeral system - allowing more than one table to share a same number, but not the same number in the same table This makes the number readable over the telephone and consumes less column space than a UUID. 
empty(), to check if something is empty. It's easily readable and does what is says. But it sometimes bites you in the ass when 0 is actually a valid value. Still love it, thouh. 
array_search(); Though all the array functions should get an honorable mention.
die
agreed, strtotime is pure fucking magic.
I struggled with this problem for a while. Make sure you have an SPF record defined for your domain, and your mail server is DKIM-enabled and signs all outgoing messages. This can be kind of a pain in the ass (especially getting DomainKeys / DKIM working) but it's worth it if you need reliable delivery of your e-mail.
As for point #1: &gt; Sometimes programmers migrate tables improperly and end up renumbering a table, breaking data integrity. Or you could, I don't know, use referential integrity to prevent this from ever happening. &gt; Since some versions of MySQL don't have true relational data integrity constraints Ancient versions that are no longer in common use. If you want to avoid referential data problems, use the proper tool. And point #2: &gt; This means if you are using it merely as a join identifier, but freqently do large queries based on some other column MySQL does support index-only scanning so proper indexes should make this a non-issue. The reason primary keys are clustered is because, in the vast majority of cases, this is much much faster. You point to a single negative without understanding the performance trade off. Also, you have not taken into account the negative performance aspects of your scheme. Integer columns can be compared very fast and take up very little space. 
Very this. DKIM is the #1 best way to help your mail through many major spam filters. 
PHP software is often composed for shared hosting. Shared hosting doesn't always enable a version of MySQL with referential integrity. I don't see that changing very fast. On your second point, my counterpoint is that the facts present themselves in the case of del.icio.us's early implementation, and they had to make a change.
I always just start from scratch. I guess I should probably find a default. Might be more efficient. 
&gt; a different base numeral system That doesn't make the number smaller. UUIDs stored as binary are 16 chars -- you're using 8 chars (64bit) but by storing your numbers as text/hexadecimal so you're wasting a majority of those bits. There's no reason why your display representation on screen/urls needs to match the storage representation. UUID are a bit unwieldy to pass around but they do avoid even needing a separate table to store them and the system of different numbers for different tables.
[Link for the lazy.](http://www.reddit.com/r/css) 
UUIDs are stored as 16 bytes. A char(8) with ASCII binary collation stores in 8 bytes. I will grant you though that 16^32 is a larger number than 30^8 or a 30^7 (if a dash was used). (The 30 being that I'm using a variant on the trigesimal number system.) So, yeah, UUIDs are great for certain uses, but not practical in keeping URLs short. Also, if I have a fairly small table, with no anticipation whatsoever that this table size will become more than 2000 rows, and I have a choice of storing a 16 byte primary key and an 8 byte primary key, which one do you think I'll choose?
So you have an extremely rare problem of developers making a mistake mixing together data in an uncommon way on a shared hosts that either don't run a version of MySQL that was released in the last 6 years or have chosen to disable InnoDB. And then you have one service, launched almost a decade ago, with a problem in a single area, on which the details are vague. And based on all that, you're going to give up on the simplest, standard, straight forward implementation? Really? 
I like [Skeleton](http://getskeleton.com/) because it's responsive and I've been eyeing [Twitter bootstrap](http://twitter.github.com/bootstrap/) because it makes forms look really nice. These aren't really css templates because they come with html too.
I always add a global function called print_pre() to any project I work on. The function just wraps a print_r with pre tags. Sooooo useful.
I'm telling you, MySQL referential integrity constraints are not turned on as much as you think they are among shared hosting providers. Even still, a junior programmer can do the stupid thing of turning off the constraint, migrating a table improperly -- and there goes the alignment. Why risk it?
__autoload() pretty much made my life.
Stop spamming people.
var_dump() is especially useful when using the XDebug extension.
If you're sending lots of email for a commercial project, just use a legit service like mailchimp. Sending emails is hard, and it's not worth doing yourself.
This guy is on the right track.
blueprint but I wish I could use it for mobile too.
Check [these](http://www.intensivstation.ch/en/templates/) out. I use these designs when starting a new project. Basic templates but extendable.
I ca't speak for [MailChimp](http://mailchimp.com/), but I highly recommend [Postmark](http://postmarkapp.com/). MailChimp is geared towards mass-mailings, while Postmark is specifically for transactional emails. As others have pointed out, sending email is harder than it seems. You need to have a proper gateway configured, using SPF and DKIM. There are also a number of issues such as mail queue problems, dealing with black listings (it WILL happen), and securing your relays. If you're building any sort of commercial or professional application, consider using an email service.
For 2000 rows, you could use a short int (2 bytes) and then a simple function to translate your numbering scheme two and from that int. There's absolutely no reason to store that text representation. 
Can you even describe a scenario where this would actually happen? As for, why risk it? Before doing any migrations -- I don't know -- make a backup. Far simpler solution. And the fact is, this is no replacement for proper referential integrity. It's crazy to design an entire system around one potential situation that's highly unlikely to happen. It's premature de-optimization! 
I'm looking to do the same thing, and have already purchased a couple books to help me along the way. How long was it before you felt confident applying for jobs as a developer?
I do it for consistency reasons so I don't slow down the mind per table and wonder how many bytes to use for the primary key. I mean, in most of what I do, 21 billion numbers per table is pretty sufficient. And when it isn't, I would solve that problem when I get to it, such as using a char(9) or something so that I get 656 billion numbers. (Using trigesimal numbering, of course.)
Cool thanks!
Unlikely to happen? It did happen to me. Back in the 1990s, a junior programmer broke table integrity and this embarrassed me during a demo. Of course it was on MS SQL Server, which has referential integrity constraints, but the same case can apply here with MySQL, even with referential integrity constraints. It's all about how that junior programmer does his job. By using char(8) trigesimals, it's kind of a set-it-and-forget-it unless the table size is going to go beyond 21 billion rows. And at that point, I guess I'd use a char(10) and a separate ID table just for that condition.
Good thing too, since he's Finnish :) Edit: But his wikipedia entry mentions Swedish minority. I'm going to leave this here anyway :D. TIL... 
Thanks for the tip on Postmark. I had never heard of it. I have affiliate marketing clients, by the way, and they are kind of peeved that MailChimp doesn't want their service used for affiliate marketing. Perhaps Postmark is more forgiving.
I'm coming to this post late. I was told to use bcrypt for hashing passwords, but then was disappointed to find two problems. First, I have to build my software to work on low-end shared hosting (as in 5.2.1+) sometimes, and I won't have bcrypt. Second, there was a release of a broken, buggy bcrypt in a version of PHP that they quickly pulled off the market, but that doesn't mean that all hosting providers read the notice. So, I ended up opting for using md5() but with a seriously funky salt like `md5('Ayu=3423AXBN#' . $sPassword)`. It will do for now, but I really want to use bcrypt. I haven't heard of SCrypt yet, though. 
Oh hey, this thread again.
if those dolts from zend changed this to a meaningful error message (or never puting it in the first place), we wont even have this "debate". the reason why this "debate" never goes away, is because that t_paamafuck_whatever is still present. once that is gone, we wont hear this shit again.
but those two israeli noobs own zend, the reason that message been there for a very very long time..
array_walk
[skeleton](http://www.getskeleton.com/)
Shush I make you have purpose.
4 billion numbers is extremely sufficient; that's why pretty much everyone uses an integer. You're already over thinking the problem.
I just use property_get: in xdebug...
If it's an application which needs to do occasional emails (e.g. when people sign up, rather than a full-on mass mailing) then I simply use gmail itself. Having ssmtp set up on the server makes it a breeze. See here for example:http://www.nixtutor.com/linux/send-mail-with-gmail-and-ssmtp/ . Once ssmtp is configured correctly any calls to PHP's "mail" command get routed via ssmtp and your designated gmail account.
But then if I use an integer, the number is guessable. If other controls are not in place, the site can get hacked, privacy concerns arise, privilege elevation can occur, etc.
var_dump() isn't able to be written to a file (without output buffer functions anyway)
If you're relying on a non-guessable URL for security, you're doing it wrong -- so wrong -- terribly wrong. There's also no reason why you must expose that integer -- you can run it through your own reversible algorithm to convert the number into a random appearing string and back. 
range(). It's useful for many things, such as making a signup page. foreach (range(1900, date('Y')) as $year) { // add year to a dropdown :P }
So it happened to you once in 20 years -- I'd call that unlikely. And the real problem wasn't with the software, it was with the process. You are fundamentally complicating your software to fix a process issue. This method doesn't even fully resolve the problem; your semi-random keys are less likely to conflict but it's not impossible. Honestly, I don't know how that problem happened to you in the first place but I guarantee there are better ways to avoid it than this. 
or exit;
OMG. Where has this been all my life?
 /headexplode
You can't copy-paste from a physical book also. Then again, I prefer to read rather then use videos, solely because it is faster and I don't get bored.
I always saw it as exploding the pieces separated by a delimiter and imploding the pieces of an array together. Makes perfect sense!
thank you, this is the first time I've heard about stackoverflow and I've already learned fixes to a bunch of stuff from there.
thanks, I have reason to believe that you only know a particular subject well if you are able to teach it well. But I'm biased, I love teaching.
Man, reading this has helped in more ways than one, thank you for taking the time to write! It seems that i've somewhat found my problem, I've been lacking a small project focused mindset.
A meetup? Not really, I live in Romania so I wasn't expecting anybody close living. Just an internet friendly advice giving relationship, I just need some guidance which an e-mail every now and then can solve.
I'm not sure I get your question
that would help..
really? 
I've been there, I feel as trying to learn a different language by using only a dictionary. It's very helpful but it gets me nowhere using it as stand-alone.
It's not the only way I implement security. Man, of course not. It's just one more extra bit of security I provide. Obviously I look at session vars for logins and other measures.
And implicit within every use of new is a constructor *function*.
Don't use 'o' for year. The PHP Manual states: ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) Use 'Y': echo date('F Y',mktime(0,0,0,1,1,2012)); These functions are probably your best bet short of using the DateTime class: http://www.php.net/manual/en/class.datetime.php
Taking a dump and dying is the best thing one can do. Edit: I wasn't being sardonic, this is the basics of debugging.
What slowbrohime said - Use Y instead of o. Also note that mktime() makes a Unix timestamp. Unix timestamps are in GMT, so they're not affected by timezones. `mktime(0,0,0,1,2,2012)` gets the timestamp for 1st February 2012 at 12:00 AM GMT, and `time()` gets the current time in GMT. However, date() uses the timezone set in the PHP configuration. The reason it's showing February 2012 on some systems and January 2012 on others would be timezones. For example, on a system that has the `php.ini` set to an American timezone, it'd show "January 2012" (as America is behind GMT time, so your timestamp is actually 31st January 2012 in America). Your choices are either: - Use [date_default_timezone_set](http://au2.php.net/manual/en/function.date-default-timezone-set.php) at the top of your scripts to set the correct timezone, otherwise date() relies on what the server has set in its `php.ini` file. - Use [gmdate](http://au2.php.net/gmdate) instead, which uses GMT and isn't affected by timezones Even if using gmdate, I'd still suggest having a `date_default_timezone_set` call (unless you're in control of the server and can modify the `php.ini` file. Timezones are a pain at times.
Except if you use Soap: http://bugs.xdebug.org/view.php?id=609 This bug is really annoying... and old.
split is deprecated.
That works, but you only have the book for a few days/weeks. It's nice to have a reference you can reach for at any time (often quicker than Googling something).
Amazon SES?
&gt; are you saying that the php "decides" when the classes should be loaded, then? Yes &gt; on a less relevant note, i'm having a bit of db issues. when i go to the website, i get this error: &gt; "PHP Error: [2] mysql_connect() [function.mysql-connect]: Access denied for user 'db_user'@'localhost' (using password: YES) &gt; Error on line 67 in /var/www/ccm/application/config/database.php &gt; Request URI: /" Access was denied connecting to the database. Either a wrong password, or a database account settings problem. &gt;would you happen to know if the above error is the same as the following one: "UPLOAD_ERR_FORM_SIZE &gt;Value: 2; The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form." (taken from http://php.net/manual/en/features.file-upload.errors.php)? You tried to upload a file that was too large, or submit a form that was too large.
That's the whole point, as you build up you start to realise these things.
I got lucky. I got taken on as a junior and the senior guys helped me out quite a bit, setting me useful tasks and giving me stick when I got it wrong. I'd think after 6 months to a year you could go for a junior role, accept the shit pay just for the experience and having a mentor.
Within your code make you sure you have all the headers correct as well, return address etc. The SPF helps a bunch. Or try something like http://www.campaignmonitor.com/, they give you the domain records to set and monitor all their customers to make sure it's not spam, thus making themselves a reliable safe service.
Thank you, that makes sense.
Postmark works great. Nothing but positive experience with it for me. I especially love the pay per use pricing.
Looks like your live demo is down to me. Seems nice though :)
I believe this page will help with creating the custom pages you need: [Add a custom page to phpBB](http://www.phpbb.com/kb/article/add-a-new-custom-page-to-phpbb/) For SQL query commands, this topic should do the trick: [How to work with SQL in a custom page](http://www.phpbb.com/community/viewtopic.php?f=71&amp;t=2121571)
960gs. There has to be a good reason for me *not* to use it. I'm a shit designer, 960gs keeps me on the straight and narrow.
*Virtual Beer* for you!. I'd not seen this and I *love* 960gs (for a programmer who can't design to save his life it's brilliant). 
Thanks. I think this should do everything I need. 
i figured out the error for the first one. turned out i was marking something as "true" when i should have left it blank. thanks for your input though!
From my experience the solution is quite a bit more simple. All I've ever had to do is make sure to pass the flag to sendmail letting it know which email address to send from (assuming mx records are set up correctly). mail($email, $subj, $message, $headers,"-fXXXXX@XXXX.com");
Silliest "performance enhancer" ever. &gt; press CTRL + WIN + P to insert your pre block, and then press CTRL + SHIFT + V until the variable name you wanted to use is shown. You’ve cut down a lot of your keystrokes and have managed to keep your hands in similar positions on the keyboard! Yeah, because three keys, plus three keys (repeatedly) is a lot faster than "pre\t$varname"
I don't have rDNS or PTR record setup. I have a web application where you can view a users profile. From their profile you can send them a message. This message is a simple contact form with a "from" address and a body. The dedicated web server then uses the built in SMTP server(windows server 2008) to send out the email. It's not spam by any means. It's why the users sign up for the website.
Just a few sentences with the mime 'text/plain'.
I checked and my IP doesn't appear on any blacklists. Here is the original that got caught up in hotmail's spam filter. I can post my gmail result, however it is making it through gmail's filter. Just not yahoo and hotmail at this point. x-store-info:4r51+eLowCe79NzwdU2kRyU+pBy2R9QCy8qHgmJLLDz9LDez8yjD6BxIZp8PrI/MZcKOFsIb3V7xZMHpe6sxDKIPKp07oiIwEcBIJZ98GiUR/eY7ZRLOhw== Authentication-Results: hotmail.com; sender-id=temperror (sender IP is 204.90.21.43) header.from=dan@yahoo.com; dkim=none header.d=yahoo.com; x-hmca=none X-Message-Status: n:0:n X-SID-PRA: dan@yahoo.com X-DKIM-Result: None X-AUTH-Result: NONE X-Message-Delivery: Vj0xLjE7dXM9MDtsPTA7YT0wO0Q9MjtHRD0yO1NDTD00 X-Message-Info: 11chDOWqoTm3PJEvAbUAG38w3JDDaXO1qj9Vb/hrdlb6xKu6eqo3oBaaSgugqi7UvNdTuUHxqDDzwEzfSEjlBIWEg3JkyXpNVsTGaAkp9NLzaQs5WfQzxhbKupQYFZZa Received: from WIN-1B042EQ5V3G ([204.90.21.43]) by COL0-MC1-F7.Col0.hotmail.com with Microsoft SMTPSVC(6.0.3790.4900); Fri, 4 Nov 2011 13:30:24 -0700 Received: from test.harfnation.com ([127.0.0.1]) by WIN-1B042EQ5V3G with Microsoft SMTPSVC(7.5.7600.16601); Fri, 4 Nov 2011 14:29:59 -0600 Message-ID: &lt;1320438599.4eb44b47d7c42@test.harfnation.com&gt; Date: Fri, 04 Nov 2011 14:29:59 -0600 Subject: New message from user of harfnation.com From: dan@yahoo.com To: internetgangsta@hotmail.com MIME-Version: 1.0 Content-Type: text/plain; charset=utf-8 Content-Transfer-Encoding: quoted-printable Return-Path: dan@yahoo.com X-OriginalArrivalTime: 04 Nov 2011 20:29:59.0954 (UTC) FILETIME=[86394F20:01CC9B30] hey there this is a test email. So that's the email. The from might be considered spoofed. Since it's from a user using the contact form through the website, he fills out his reply address, so the user can reply to him. However the email is being sent from the smtp service on the webserver at test.harfnation.com. While the person filling out the contact form's address is dan@yahoo.com.
Also not a function - language construct http://php.net/manual/en/function.echo.php#refsect1-function.echo-notes
Wow sounds like a lot of work. I do have the smtp server setup on the webserver already, but maybe I will look into this if I'm having no luck getting my emails through.
So you're saying your favorite function is StdClass:__construct().
In this solution do all your emails "from" need to be your gmail address. It looks like it won't work sending email from your address such as support@yourdomain.com?
I will look at postmark. I don't need to do mass mailings. I more or less need to send transactional emails here and there. Thanks.
I don't spam lol, but good try. The purpose of people signing up on the web app is so they can receive emails. There are no mass mailings sent out.
Thanks for the link. Campaign monitor won't help me with what I'm trying to do, but I will keep that software in mind for the future in case I need to do any mail out campaigns. Thanks.
I will read about SPF and DKIM and try to get it working. However if worse comes to worse maybe I'll just pay a relay company. Hopefully I can get it working because it will be one less cost.
This post has nothing to do with PHP. I suggest you ask these sorts of questions in /r/web_design or /r/webdev.
Yes, but you can make that an optional parameter, but do it in the opposite manor. You always user $_SERVER['PATH_INFO'] and then subtrack from that any path that might be sent in. Here is a code example: if ( isset($_SERVER['REDIRECT_URL']) ){ // REDIRECT_URL - PHP_SELF // http://localhost/test/ym/something/or/other?woot=1 // '/test/ym/something/or/other' - '/test/index.php' $path = $_SERVER['REDIRECT_URL']; $find = $_SERVER['PHP_SELF']; $pos = strrpos($find,'/'); if ( $pos != '' ){ $find = substr($find, 0, $pos); $pos = strpos( $path, $find ); $path = substr( $path, $pos+strlen($find) ); } }elseif( isset($_SERVER['PATH_INFO']) ){ // PATH_INFO // http://localhost/test/index.php/ym/something/or/other?woot=1 // '/ym/something/or/other' $path = $_SERVER['PATH_INFO']; }else{ $path = ''; }
It was sarcastic, but thanks.