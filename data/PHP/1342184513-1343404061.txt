You are a good American.
this is the story of my life too, same age as me, same experiences with perl and cgi hell. everything was coded in notepad.exe with pride. i even had a badge on my site that said "coded in notepad". i still own my first domain, its gone through many hosting providers, from perl to php to python and back to php. i lost the first 5+ years worth of code when my first host shut down without warning. long before i heard of source control or even really making good backups. i remember when php.net/&lt;function&gt; was added and how amazing it was and still is. it's been a long bumpy ride but i'm glad i've taken it. i learned PHP by taking a guestbook someone wrote for a single site and rewrote it for multiple users. i changed it to allow for styling to match the user's theme. cause we all know how guestbooks were all the rage. that code was lost when my first host shut down.
Nice. I also started using PHP around that time (1996/1997). Back then the community was small but very positive. I think that's a big part of why I stayed with it. &gt; I look code I wrote 6 months ago and I'm ashamed. Heck, I look sentences I wrote 9 hours ago and I'm ashamed! Ok, not really helping my point about the community. Sorry. ---- Edit: I am so old all the decades are running together.
PHP in 1986? ಠ_ಠ
I should be killed for the code I wrote in 2007.
Think I'd prefer it catered to group 2 &amp; 4.
What if we're ashamed of the code we're writing right now?
That's because coffee is about as non-technical as you can get, and a better analogy to /r/coffee would probably be /r/programming -- which IMO, is slightly more friendly than /r/php. Any technical forum is going to be full of pedantry, which is many times taken as rudeness or which can lead to degenerating conversations. I think this is simply an intrinsic _nature of the beast_ for technical realms, as there hasn't been 1 technical online community of any significant size that I've ever seen that can avoid that fate. Sooner or later, it _always_ comes down to who knows the technical details best, and although there are very concrete answers most of the time, very heated and emotional responses result from the discussions. I really don't think it's possible to have a highly-technical community that is also as tolerant and courteous as you would like. Not saying that it isn't an enviable goal to work towards, just that I think it's mostly futile.
Uhh, no. You realize strtotime() accepts a second parameter making it deterministic right? strtotime("-1 year", strtotime("2012-07-01")); The solutions you've came up with are a direct result of your inability to write testable code and should *not* be used. 
So, this: function deleteOldPosts($strtotime = "strtotime", $postModel = "Post") { $threshold = $strtotime("-1 year"); $oldPosts = $postModel::findAll(["timestamp" =&gt; ["&lt;" =&gt; $threshold]]); foreach ($oldPosts as $oldPost) { $oldPost-&gt;delete(); } } looks like an awful solution to me. 1. You don't need to mock/stub out standard functions like strtotime. You want to know when those are misbehaving, don't you? 2. You can't test static methods easily, so the solution is to refactor your *code*, not your *tests*. Change that static method call to a non-static call. Boom, you can now stub out the Post class and return a predetermined value without really interacting with it. Also, it's kind of weird to call some code "PHP 5.4" code simply because it uses short array syntax, although I guess technically it's correct, and that's always the best kind of correct. edit: The term "monkey patching" has no place in real-world development. Please never use this term in an interview, in patch notes, at your job, really anywhere.
Ah dude, we are kindred spirits... except I was on Chatnet working with eggdrop bots. Anyway, was nice to read that. My first domain was only $75... it was ribbitt.com (a LOT of frogs lived around us... yeah.)
He's probably talking about years of experience **after** graduating from college. Experience is more valuable than a degree in this business.
See now you sound like a seasoned professional! That other dude whining about "noobs" sounds like a little prick. Thank you, I am going to try this.
I do not have access, and yes it is turned on. I will look at PDO as right now i am using mysql_real_escape_string() to rinse my data both in and out. Thank you.
I'm fairly certain that was intended to be jovial humor among compatriots. It's ironic wit and not intended to be taken literally. You seem to have a problem with that concept.
Sorry! 1997/1996. Will edit.
&gt; /r/programming -- which IMO, is slightly more friendly than /r/php. Unless you're talking about PHP
Or post something that is tangentially related to programming - then you get the dreaded "This is not programming." comments. Sometimes I feel like the post IS programmer-interest-oriented too, and I'm not sure where the poster should have gone...
So, [@grmpyprogrammer](http://www.twitter.com/grmpyprogrammer/) has written a response to this article: http://www.littlehart.net/atthekeyboard/2012/07/13/monkey-patching-is-for-closers/ Anyone that is new to testing or wants to learn more about best practices, I would recommend you read that and several of his articles. Need to make perfectly clear that neither I nor Grump Programmer nor (I assume) meritt_zare are trying to make fun of you. The best way to learn is by showing other developers your code and receiving feedback. Some developers will provide harsh negative feedback, and some will provide incorrect feedback, but don't let that scare you off from submitting yourself to the general public.
He isn't, if you read through the rest of what he's said.
Yeah, in a post where someone defines professionalism, and someone else says "I agree with you on your definition, and exhibit it," and the guy responds "congrats, you're a professional," clearly someone else watching while mildly annoyed is just missing the point. Congratulations on getting the word irony correct, though. That's a rare gem here.
And yet, recent CS grads tend to be the most arrogant and least skilled in the field... Thank God that degree will help you understand the theory behind things, if only you could figure out that dang fizzbuzz.
I've been writing PHP code for almost six years now, and I'm always a little bit disgusted when I look back six months, which is why I'm often rewriting code from older projects when I don't have anything else to work on. Really, I understand that you can't get better at coding exponentially, but your approach to certain problems can change, even if you are using core design patterns and code style. (Hell, I was using ext/mysql six months ago... I had to go and correct all that.)
A co-worker actually wrote this, thought /r/php maybe interested ... 
Looks cool. I could see using ajax to call it and return the result on keyup.
"If you aren't ashamed of what you wrote 6 months ago, you aren't progressing as much as you should." - I couldn't agree more.
I have a BFA and have been coding PHP for more than 3 years, what does that make me?
In my opinion it's better to do this in javascript.
It's a pity PHP doesn't have a decent map function (it's got `array_map`, but it's an ugly blighter). That would make `array_column` unnecessary.
You sound like someone who has recently begun hiring, and discovered how full of shit people actually are. `:)`
Not recently. It was a few years ago. I'm only highly critical of recent grads, though. If someone got a degree and then has a few years of experience they tend to mellow out. But if they are straight out of college with a shiny new degree and no real world experience, they are a huge pain.
I disagree. I think coding is very much like an art form, there's no right or wrong way to do it, and a good coder should always be picking up new ideas and techniques. 
How does one work with such a shitty-ass language for so long? 
So how does it work? Does it look at the characters and estimate how many cycles it would take to brute? If so, then that is a smart Idea. It would work well as an open API too.
true, but this might be a step in that direction.
 zipWith (\x, y -&gt; (x, y, x + y)) [1..480] [1..640] edit: sorry, read that up wrong. A correct version anyways map (\(x, y) -&gt; (x, y, x + y)) $ liftM2 (,) [1,2] [2,4]
No that's not what I mean. Using ajax inherently offloads the work to PHP which is not necessary at all. All the work could be done entirely in Javascript on the client side without ever talking to the server and without transferring the potential password over HTTP in plaintext to the server. Doing this in Javascript is both faster and less error prone. Think about it. You'll be making an HTTP request on every keypress just to check that a text string contains an arbitrary sequence of characters based on a rule set. Javascript is more than up to the challenge of doing this.
True, its fast, but Visual Studio debug mode is excellent.
Classifying human behaviour in black and white terms is something a lot of programmers try to do, but people often aren't exactly the way you think they are. I've seen many a gifted programmer get caught up in pissing matches which one might consider degenerate behaviour. We should probably try to stay away from the condescending labels and focus on the individual behaviours. Posting things like "Will all of you noobs PLEASE post elsewhere!? I can't find the good stuff!." is pretty condescending so it's no surprise it wasn't received as well as perhaps you'd hoped. I think for the most part the community has done a decent enough job moderating itself through the voting system. I'm not sure what you're trying to get at is even a problem at this point. &gt; That means I've been an active part of this community six years or 20% of my life. I first became an active participant in /r/php in early 2010 if not 2009. I dare say that's substantially longer than most of us on both counts, and I think that should count for something. While I respect that you've been here a long time, I don't think it gives you any special license to anything. I've been involved in PHP itself in many aspects inside and outside of the project since PHP3, but that doesn't mean I'm special. &gt;by hopeseekr &gt;Let us know what you think. Who exactly is "us"?
The cookies are being set properly for me in Firefox 14, I get all of the following: * PHPSESSID * dsC * folderC * productC * legvarC * regionC * dirC * clC * imgC * legregC * treemenu1 * acopendivids * acgroupswithpersist If I choose, say, Arizona, close the tab, then go back to the site (with no query string) it automatically pulls up the Arizona map. What exactly isn't behaving as you expect it to, are you sure your browser is accepting the cookies?
issue solved :) got some ##php help on freenode IRC
&gt; "wakeup-people.com" &gt; I used to think I had it all figured out. Sounds about right.
I don't understand why people brag about using PHP for so long. If anything, that just underlines your affinity for crappy, bastardized language that should in all reality be phased out for the good of language design in general. I'll just go ahead and leave this right here as it pretty much sums up what real developers think about your cute little templating language: http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
He agree'd and ported it over to javascript also. 
Here's the logic that the code is based on - [TGP Password Strength Checker](http://www.hammerofgod.com/passwordcheck.aspx)
Yeah. You _always_ want to sanitize data going in, and as strictly as possible without messing up crucial user input. SQL injection is nasty business. I make it a practice to do as much as possible through stored procedures, partly because you can house them outside the normal structure and keep them safe, and it just makes it easier to keep track of what you're doing.
Ah. Well that makes it all better then ;)
Fair enough. I get the need for people to have boilerplate stuff, especially if they need stuff like authentication, URL routing, etc.. I can see why it'd be a hassle to set up all that kind of stuff yourself. However I do think it would provide far better flexibility to write that stuff yourself if you have the time. Otherwise I would feel "boxed in" by the framework, I think. 
Ive been programming raw PHP for over 6 years before entering the framework world with CodeIgniter and i have still left to find a real limitation. The closest i got was when trying to upload an image as text, but even then, how many times do you absolutely need that? And you can still disable the input sanitation to make it work.
Why did you choose to try CI in the first place? What benefits does it provide over simply using your (presumably vast) collection of raw PHP functions?
I was absolutely fine writing raw PHP, and i still do when im just messing around. But i had to learn to use CI for a job. I havent really used any other framework though im aware of the main differences. But, using a framework gives you a great stability, you dont have to worry every single time if you are escaping user input or you have a security hole, or whether or not you are logging the errors. I had an SQL database class a few years ago, it was really awesome (at that time) and did everything i ever needed; it would mostly parse arrays and escape and all that. An example usage would be: $where['field1'] = 'value'; $order['anotherField'] = 'desc'; Database::select('table','*',$where,$order); And it would translate to SELECT * WHERE `field1` = 'value' ORDER BY `anotherField` DESC LIMIT 0. But, as my needs evolved, i had to re adapt the class. One example i remember is the ON DUPLICATE KEY UPDATE SQL statement for INSERT, so i added it. But then i needed JOINs for another project. I used to take a lot of projects back then, mostly as a form of training myself (neither of which saw the light) as im self taught. Each one of these projects had a different set of needs. The real problem was keeping track of which Database class was the newest, so i ended up with 5 different classes, all which had unique features the others didnt. If you take a look at my old collection of raw PHP functions [here](http://pastebin.com/di0iYhWm) you can see they dont belong there (ignore the fact i was using static classes as some sort of namespaces) but each one should be on its place, be it a helper, a class method or part of a library. The biggest problem with this was keeping track of every single thing. I hated frameworks before, but if you think about it, when you use your raw PHP collection of functions, you are using your own framework. Do you really have the time to keep it up to date, secure, functional or even backwards compatible? So why not go for something which is already provided this way. Its much easier for 100 people to spot a problem, than a single person spot and fix 100 problems; that is the reason why the free software movement is still alive and strong. And if your framework of choice doesnt have the feature you need, code and make a merge request, im sure the developers of said framework will love the fact you are contributing to the project. TL;DR: Do you really have the time to keep your own collection up to date, secure, functional or even backwards compatible? (but i do suggest you to (over) read the whole comment).
Instead of whining about the surge of novice programmers, why not enjoy the fact that more of the younger generation is taking up programming? There is no rule ( that I know of) that demands only the "seasoned professionals" post here. Furthermore, there is no meter to measure what constitutes a "good" question and what does not. If you can't deal with new users, please close your browser, shut down your computer and take a good, long walk outside. 
If you want to do the community a favor then stop posting this trash. Both this and your last post seem like vain attempts to condescend to anyone guilty of no more than reaching out to the community for help. Stop blaming the less knowledgeable for trying to learn. You might even have been less of an asshole too. I don't see you replying to support threads with a link to r/PHPHelp. No, that's a job you want the mods to do for you. Maybe the mods don't want to spend every waking moment delegating threads to a different board. r/PHP is much larger than r/PHPHelp and for that reason is doomed to an influx of support questions because it has priority in search results. Do you really want to wage war against Google, half this community, and the mods? The support threads have had an integral role in growing this community thus far. You want to destroy one of the primary sources of user interaction and new users because you're tired of seeing the support grind? Not to mention you want to offload the responsibility of implementing your ill-conceived plan onto the mods. The way to do what it is you want is simple. You need concerted community-wide effort to promote r/PHPHelp until it is well-established enough and actively funneled most of the support-related traffic. Goal defined. How do we reach it? Well, your last 2 threads seem to indicate the best way to appeal to the community is to loudly and enigmatically insult them en masse. Good luck with that. 
We already interpret it in C - so why not? Python has many advantages over C which make it a good choice.
And maybe then we can interpret JavaScript with PHP running inside Python.
This is not a fork of PHP. It's a different implementation of its interpreter.
Might make forking it more accessible to others, though, since you wouldn't have to know C.
This is **not** a php interpreter in python. The CPython VM is **not** executing python code which interprets php code. The pypy translation project effectively compiles a subset of python (rpython) into a native executable binary that includes a vm. It does this with extremely complex and intelligent translation mechanisms. The pypy translator toolchain (not pypy the python interpreter) is essentially a python compiler. 
I'm no professional, but here are some reasons why I think people prefer frameworks : - They take care of the low level stuff for you in order to help make your code less prone to human errors : Easier way to validate user input, no need to worry about the safety of your database queries, you no longer need to worry about putting your session_start()s or header redirections at the top of your script, etc. The modules frameworks offer have been thoroughly tested by the community to ensure their stability. - They implement an MVC architecture and make it easy for you to separate your PHP, your HTML and your database-related code. I imagine in the entreprise world, this would allow front end devs to do their thing separatly while the back end guys do their magic in the back end. I suck at explaining things, but in your &lt;select&gt; example you said that you use a for loop to echo the &lt;option&gt; tags, so if a front end dev wants to change something in that part he would have to dig through PHP code first and this might confuse him. Of course this is just a theory, I have no clue how things are in the real world. - They promote rapid development. For example, Fuel offers a command line utility to easily generate the skeletons for your models/controllers, automatically create views in the appropriate folders, create database tables, migrations (to easily undo changes to your database in case something is screwed up), etc. Plus the above. - If you write your own code, a future developer might have a hard time understanding what it does especially if it's not well documented. By using a framework, there are better chances that the dev will already be familiar with a great deal of your work. - Some offer a lightweight ORM to make your models easier to write. For example an update query such as this (mysql_query example since it's what you guys are using) : mysql_query('UPDATE users SET username = "'.mysql_real_escape_string($something).'" WHERE id = 3'); Will become this : $user = Model::find_by_id(3); $user-&gt;username = $something; $user-&gt;save(); Of course writing raw SQL is something a PHP dev should know, this is just for making simple queries easier to perform. But then there are also disadvantages : [There are so many of them](http://xkcd.com/927/), steeper learning curve, they are slower in certain situations (I guess that's the cost of abstraction), etc. This is my amateur opinion on frameworks, correct me if I'm wrong with anything.
his reasons are that in the future we will be adding a lot of features, and we don't want to be restricted by our framework.... Anyway I can't argue with him, he is not exactly a friend, more like a friend of friend and quite senior to me, and basically its his pet project.
I see, so is he actually ordering some sort of prototype at this point, then? Can't see how any of the most popular frameworks would restrict any future implementations, but...
A framework is not going to "restrict" you or the features you want to add - if anything, it will insure that you'll be able to implement said features without having to spend ten times as long to implement and debug. TLDR: you probably should educate your "friend" or not work with him on this.
 In the CodeIgniter's interpretation of MVC, there is an overwhelming focus on ORM-like behavior. This entails query generation. Also, almost every user builds the site on to of MySQL, which does not support caching for prepared statements on RDBMS side. When you have this sort of development constraints, using prepared statements becomes counter-productive (you can never know, if it backfires). Frameworks usually focus on lowest common denominator. --- &gt; Well .. i could aways go with "because CI is horrible piece of code" and then turn this answer in flame-war thread, but in this case it would not actually address the question. Though, if you want to discuss this, you are welcome to StackOverflow's [php chat room](http://chat.stackoverflow.com/rooms/11/php). 
# Without Links: ### Languages + Basic Programming + PHP* + Javascript* + SQL* + HTML* + CSS* + One of Python, Ruby, Java, Scala, Clojure and one of C, C ### Tech + Apache* + MySQL* + Mongo or CouchDB + Linux Admin* + Development for Heroku, AWS, AppEngine or similar + Exposure to Node.js ### Knowledge + Best Pratice PHP development* + Secuity + Testing + OOP esp. MVC* + Javascript object-functional programming + CSS3, HTML5 development &amp; Mobile + Performance and Scaling + Living with Legacy* ### Development Software + Svn, Git* + Ubuntu, ssh, rsync + One of Netbeans, PHPStorm, Eclipse, nuSphere, Zend Studio, etc. + One of TextMate, gEdit, Notepad + One of vim, nano, emacs, etc. + Phpmyadmin + One of Capistrano, phing, composer, etc. ###### Open Source Libraries + Zend Framework and one of Sympony, Cake, Kohana and one of Lithum, Fuel, Silex + jQuery and Backbone.js, Underscore.js + One of Mustache, Twig, etc. + Phpdoc + PHPUnit + Phar ### Projects (to write yourself!) **In PHP** + Analytical (Pure PHP) - MVC Framework with Routing using PHP5.2 - MVC Framework with new features of PHP5.3 OR ORM framework - REST layer over RMDBS - API library for one of paypal, amazon, ebay, google, etc. + Mixed - Basic CRUD Form/Survey/Guestbook website - Blog using the above libraries - Shopping Cart/Ecommerce project using these libraries - Social Networking Site (either microblogger, group sharing, etc.) - Chat (Rooms) - File Manager - Online Build/Deployment Manager (upload &amp; deploy phars?) **In Javascritpt** - Single page application using jQuery/Backbone - HTML5 Mobile Application using Twitter Bootstrap - Node.js &amp; NoSQL db app **Meta** - Write documentation and tutorials on your own code - Write coding standards - Write designs for different applications you have seen online (how would you design facebook?) - Outline the way you work, from how you start to deploy to support projects **Research other solutions to the above problems and compare with your own. **
The best way to learn is to work on something useful to you. Learning to solve problems is much more effective than doing random tutorials. If you're emotionally invested in something, you're far less likely to drop it.
Partly true, that's why I list several suggest projects. However you cant just stare at a commandline and say, "today I will become proficient at git". You need to use good online resources (books, etc.). 
http://codeigniter.com/user_guide/libraries/email.html You setup your SMTP credentials in the config file, load the email library when you need it, setup your message and send.
[Mootools](http://www.mootools.net) and [Dojo](http://dojotoolkit.org/) are FAR superior to jQuery in just about every way.
I'm not! I swear!
Should add memcached/redis In there somewhere
Especially as newer APIs like MySQLi and PDO require it...
As a Python programmer, I have to agree. Python is wonderful, except when there isn't a library available. PHP, on the other hand, usually has it built in!
MVC and OOP are not related at all. Maybe separate programming paradigms and design architectures into two distinct categories? Otherwise, great list!
Awesome, thanks! 
Thank you, thank is what I thought but did not feel comfortable to confirm it with myself. For you - http://i.imgur.com/L5Ns2.jpg 
I would assume it would mean testing the page within the ide instead of opening up a browser window.
because everyone else says so ... =/
A guy I work with wants an IDE in the browser so that his settings are in one place, he can develop from anywhere, and code collaboration could be useful (ex: Google Docs).
and fast? a fast google docs for php? 
jQuery is great at what it does but I agree, jQueryUI is fucking useless. They can't ship. Anyone who thinks they can build an actual *application* out of it is a fucking dumbass.
It's easy to learn and understand. It has a gentle learning curve and you can get results quickly.
backquotes are rad, hidden gem!
Dont recall: did i using anything, except 'mogrify', 'find', 'cp &amp; mkdir &amp; rm' with backquotes. But mogrify and find - save me much time. 
Why the eval(), though? You could just do `$def_url = function($name, $fn) { /* ... */ };`, could you not?
Is it just me or is that an *effing lot to learn*?
yeah, it's good to know jQuery because for some ungodly reason that's what a lot of places decide to use but given the choice upon creating the app, I would choose Mootools or Dojo.
I've separated out OOP/MVC and added functional (as per "paradigms" recommendation). I've also added a licences and in-memory-dbs section. And emphasized the need to apply the knowledge to project. Any other suggestions (I will also take links)? I will likely end up using this list myself as a teaching resource, so I'm keen to take on board any ideas. 
Shouldn't Sparks just be ditched for Composer at this point?
As I've already explained, 2.1 used manual testing for everything. It's been this was forever in CI as unit testing was extremely difficult on the framework. Really EllisLab should have been putting unit tests in there for years, but between a few developers unit testing was added and thats been used going forwards. So, manual testing it was for 2.1. Now there is a massive difference between "a few features in DB forge don't work" and "this code is insecure". We haven't been employing security firms to try and break CI if that is what you are asking. As I've said, if you can find anything wrong with the implementation security-wise then I'll be very interested to know about it, but I think you're reading way too much into things and worrying more than you need to.
Sparks were around a year before Composer existed. Thanks to the popularity and quick adoption of Composer, the Sparks system will be recoded to sit on top of Composer and use their repository system and command line utility instead.
Am I not allowed to mention the women?
It can be. That is why other than extremely smart or determined folk generally take 5+ years before they qualify for lead developer positions. It is also why we make as much as we do... I'm okay with it. haha
Same here.
I've become so jaded that every time I see a feature suggestion for PHP all I can think of is how poorly people are going to use the feature then how many blog posts are going to be written about how much PHP sucks because people don't know how to use the language.
How *should* the commission be calculated? Right now its just a fixed amount of 4.95 * 2, whereas I suspect it ought to be a percentage of the trade value
%? It would be a flat fee, so I'm putting both actions together to assume a "loss of" X on the buy/sell. Seem incorrect?
I guess the tradeoff is between how long it takes to write in raw PHP vs how long it takes to figure out how to use the pre-built code in a way that makes it exactly right for my needs. I'll admit the latter would decrease with familiarity of the framework, though I still think there's bound to be limitations on getting a framework to do *exactly* what you want.
In that case I think its working. A 10% increase twice a month will result in a phenomal increase over 5 years. Remember as Einstein supposedly said... compound interest is the most powerful force in the world :-)
Exactly. I couldn't find anything that calculated reinvestments.. I don't get why.
One of the issues however is that the developers who can easily get their heads around these features, and write good APIs that use them, will just turn to Ruby, Python or JS instead of PHP. You tend to get a lot more articles on interesting stuff done in those languages, and it would be nice if PHP had some of that mentatlity too.
dont forget, if you're wanting to model real world investments, youd need to be shaving off a lump of that each year for Capital Gains Tax (or whatever the equivalent is where you're from). Also if your working capital is being moved from an investment account into a cash account, you'll probably want to round or truncate any fractional pence/cents each time. That alone could impact end balance quite a bit, especially since its being compounded.
Well, a framework has its learning curve, but once you get past the point when you dont have to check the documentation every 3 lines you write, it gets better. Dont get me wrong, i avoided frameworks for a really long time for those very 2 reasons. And as i mentioned, i still havent found a limitation due CodeIgniter. To take some stigma off frameworks, think of the craziest use for PHP that will work in raw but wont with a framework, im confident enough ill manage to make it work without modifying the core.
It is still a definitive way for clients to know if the article should be delivered. KISS (dont see my suggestion hah)
There is rarely as many as a dozen new topics in a day in this sub. Am I to understand you can't work your way through that?
Haha, what a great analogy!
Hah not gaming, that is in my spare time! Symfony is no great challenge to learn, where are you living? It is kind of a crazy idea (that my bosses have) we'll see if it works out, especially as I only speak English and am tasked with building a team regardless of language! I'll check out the symfony subreddit althought there are far less subscribers.
What I meant was that you're allowed to run your own "show" beneath his company. I'm from the Faroe Islands, however, I'm unsure as to how well I'm qualified, since I had just begun dabbling my hands in PHP last year. There will definitely be more people in this subreddit more experienced that might be interested.
Why would you post such a thing?
Ok and I will, I saw this post just before I had to go to work
Maths comes with the territory no matter where you go in programming.
Aren't the Symfony devs in france?
THIS is the RIGHT way to do a debate, not simply say: this is shit, etc. .. we would like to share these comments on our blogs to avoid additional, unnecessary debates on who is more or less good. Thank you very much for your explanations :)
re: France, I forgot to add, that I have not yet started looking there (as I assumed costs would be high there like Germany)
Yes, but APC too can store your data http://php.net/manual/ru/function.apc-store.php
While I would certainly encourage people to avoid static methods you can unit test them so long as they don't use static class variables as well (which would obviously raise issues with global scoping). There are a lot of reasons to not use them but I still find them to be the most convenient way of namespacing/autoloading simple functions (I know functions can be namespaced now but I still don't like them). On the general topic of performance these sorts of tips are not that useful. You're better off profiling your application and seeing where you're spending all your time. Recently I was optimising an app and got some significant increases by doing simple things like: 1. Building a class cache to reduce autoloader calls. 2. When results form remote services (e.g. mysql) are used ensure they are cached at the last possible opportunity. In my case I was caching raw result arrays then every time the app ran re-populating row gateways. Caching the rowset increased performance significantly. 3. Wrap remote connections in lazy load proxies. 4. If you support response caching ensure your boot process can be called out of order. E.g. you will want to boot an autoloader, memcache + other essential services then try and get a cached response and finally if no cache is available boot everything else and run the app as normal. 
Fair point. Does anyone actually use this, though?
I think the *right way* would be to have the debate in the original thread, not a totally new thread.
frapi does
The same effect can be done as of PHP5.3 with Iterators (actually since 5.0).
This doesn't seem right. I highly doubt ebay is running cron jobs every second to check the status of millions of auctions. If you need accuracy to the second, you probably don't want to be using cron jobs, but rather a daemon.
Kohana has an APC driver for their object caching too.
It actually took me a while to find this thread, I will publish the link on the old thread to notify other
we actually use APC instead of memcached memcached added too much latency (tens of ms), and our product is very sensitive to latency we've got plenty of memory on our servers though, so we're using APC
Did you try with linkedin? Here's the spanish group for Symfony http://www.linkedin.com/groups/Symfony-España-3858517 There are users groups in Madrid and Barcelona too (the two biggest cities in Spain) https://groups.google.com/forum/m/#!forum/symfony_madrid https://groups.google.com/forum/m/#!forum/symfony_barcelona
Yeah I started with reddit.com first as I want reddit-like people. Now I am onto linkedin, thanks for these group suggestions, I was only on jobs or just plain symfony.
Yes, and it will probably be integrated in the core in php6.
You can unit test them directly, but you can't mock them, which makes unit testing things that *use* them very difficult if not impossible.
If your local network has tens of ms of latency then you probably have a faulty switch that you need to replace asap. Memcached should not add that much latency.
Every time you suppress an error, it gets still written to the log file and while i cannot say anything about the performance of that (i guess the file is open anyway while the php process lives) - it sure does not help when trying to find an actual error. We have a strict "no errors / notices / warnings" policy where i work, and i like it that way. also it's very easy to not produce any such notices. So IMO it is bad code.
Again, is this just a repost? &gt; When people say that X faster than Y, some of others will use X instead of Y just because it faster. But what we get with class inheritance is more than what we get without it, and deserves to be being used. That is a perfectly reasonable argument. "Ok then fuck inheritance, right?" is not, that was my issue.
I doubt it. There are other solutions for caching and it won't leave you a choice
If you're even thinking about optimizations in language specific features, you're doing it wrong, oh so very wrong. Static vs non-static method calls? Stop it. __get vs method call? Do whatever makes the most sense. Post-increment vs pre-increment? Oh god. ' vs "? No. No. No. No. Please no. I remember reading these "tips" back when I was a beginner. It made an impression on me and made me worry about the wrong things. And most of them are probably wrong anyway. Benchmark it yourself if you're interested, and don't trust anything that doesn't include proper benchmarks. Don't forget that your production environment most of the time is not the same as your development environment. Results will vary. What should you care about? The bottlenecks. Your database, cache-setup and server setup. Don't have any indexes on your tables? Real bottleneck. But of course, if your application has to include 100 000 lines of code for each request, that is a problem. The only piece of solid advice in this and the original post is use an opcode cache like APC. It saddens me that these bullshit tips circulate in the PHP-community. 
Hey, post- and pre-increment isn't even an optimization. Many of people just have this misconception and write post-increment when actually they don't need it. In the rest I agree with you
Oh no! A project that has existed for a month and is now being put forth for it's first community review is missing a feature you want! What will you ever do?
&gt;Then you'd seriously have a run on your money, HAHAHAHA! Your code will give him a run for his money? *Your* code? Yeah right. Please stop spamming.
Please stop spamming your ridiculous PHP University crap.
Stop spamming.
Is there anything *novel* in it?
That's a fair point but AFAIK mocking only really applies to objects so if you're just using a static method in exactly the same way as you'd use a function (i.e. it has no state) mocking them doesn't make sense anyway. In the vast majority of cases I don't think they're good idea but if it's the difference between namespace foo { function bar(){ return 'baz'; } } and namespace foo { class bar { public static function baz(){ return 'whatever comes after baz'; } } } I prefer the latter because you don't need to include or load it specifically - the autoloader does it for you. 
* **Modular**: One major point of Voodoo is that it is Modular. Modules are independent, interchangeable MVC applications, isolated from each other. Modules improve maintainability by enforcing logical boundaries between components. By being Modular, Voodoo allows developers/designers to work on individual module at the same time, thus making development of program faster. New features or new sections can be implemented quickly without changing other sections. And when it's no longer needed, the module can be deleted and everything is still gravy. * Templating: Voodoo highly follows the Separation of Concerns process. Voodoo separates the logic (PHP) from the presentation (HTML) and keep your code clean, by using Mustache templating system. Developers and Designers can finally work on what they do best. * Smart Routing: Voodoo is Modular; Voodoo, therefore, has a smart way to route to the right module in your application. Routing can also be customized to change the default behavior. Voodoo routes in the following order /Module/Controller/Action/Arguments/?queryName=queryValue * Voodoo has a low learning curve and yet powerful to create robust applications. Voodoo doesn't want to re-invent the wheel, but to create a better road for the wheel to roll on. Voodoo can be easily picked up by new PHP developers, or pros tired of bloated framework. Voodoo is namespaced, modular and fun to work with. * Voodoo is slim. Most frameworks give you a plethora of classes, functions that most of the time you don't need and won't use. Voodoo follows the YAGNI (You ain't gon' need it) principle, where Voodoo only has the necessary classes to make a robust application. Everything else can be added on the fly, Voodoo is PSR-0 compliant. 
&gt; What will you ever do? Use one of the other 1000 MVC frameworks available. Its a legitimate criticism. If you include templating, the Twitter Bootstrap framework, and other libraries focused on front-end user interaction, then why not include some type of form validation as well? 
You are correct. In your second example count() gets checked after each loop. You could also write it like: for($i=0,$m=count($array);$i&lt;$m;$i++)
Unless the email/notification needs to be near-instant, an hourly cron job could easily handle it. Just check for articles that have been published in the last hour and add the emails/notifications to the send queue.
I think "This is a variable {$foo}" is better than some of the other options. It highlights the variables, and is easier to see than periods.
Of course it's a legitimate concern. I'm just annoyed at the dismissive 'Next.' statement as though this one missing feature in an early alpha is a deathblow to the entire project. No matter what your preferred framework is, it did not come to exist in a good state overnight. He should give the OP a chance to make something decent and lay out his criticisms in a less condescending way. Afterall, the OP came here asking for what we think, not trying to convince us to rewrite all of our projects on Voodoo immediately. If he thinks form/model validation is an important feature, he can say so without the 'Next.' thrown in at the end.
Here it is: https://github.com/ravisorg/Mellt
You should post a gist of the file in question. Pretty hard to debug without knowing what's running.
&gt; But what about autoload - you can choose between it and require_once, this is just the matter of your choice, but I think code without any "require"s are cleaner and more readable. No, `__autoload` is still bad because it permits only one autoload handler so if you're using some third-party library or framework that's already hooked onto it, you're going to clobber it when you attach. (Conversely, one of them may kick you out if they do their setup after you do.) [spl_register_autoload](http://php.net/manual/en/function.spl-autoload-register.php), on the other hand, is the greatest thing since sliced bread.
 for($i=0;$i&lt;100;$i++) is a canonical structure of for loop. any changes to that will imply that there is something unusual happening inside the loop to warrant this changes. This will impair readability. So whoever wrote this tutorial should stop publishing them and go learn some more. I would recommend you to start with Practice of Programming by Kernighan and Pike. They discuss stuff like this in very nice way.
It's rare that I see things that include no state. Usually static methods wind up being some collection of other static methods that eventually boil down to global access that someone hid because "global is evil." To make your 'baz' example more concrete: User::isLoggedIn(), which looks at the cookie and checks the auth. Now, run a unit test where the user is and is not logged in. Crap! It's much easier if you pass in an auth object that has ob-&gt;isLoggedIn() and you can control what `ob` is.
No, I mean you need to post *the file that is required* so we can see what's happening in that file. the require *itself* is almost certainly not the cause for slowness, what's going on in the file required probably *is*.
What about a cron job that runs every minute..too much?
Well, sorry for that that dismissive "Next". It actually has a Form Class which generates uppercase HTML, allows no easy class/id insertion and has hardcoded language strings in it......
But that's not what I'm talking about really. Clearly a user is not something that should have a static interface but something like $keywords = \Util\Seo::textToKeywords($string); does make sense because otherwise you need to do one of three things: 1. Make all objects that can have one of their properties converted into a list of keywords extend some common base class: bad. 2. Use a normal function: already discussed. A bit rubbish. 3. Pass an instance of the Seo class to each object that needs it. Possible, particularly if you're using DI containers but considering all the SEO class does is contain methods with no state - why bother? For better or worse even in object orientated software you still need functions from time to time.
This is what I use as guidelines for potential hires. If someone can speak intelligently about the things here, then they are doing well. http://dl.dropbox.com/u/1945935/PHP%20interview%20technical%20questions.odt Edit: Apparently there are 2 more pages on here that I forgot about. I don't use those and I'll remove them in a minute.
Thanks! But I got this working too! str_pad($text, 4, '0', STR_PAD_LEFT);
I don't understand why you think it can't be unit tested in exactly the same way as you'd unit test a method or function. Lets just say it looks like this: ... public static function textToKeywords($string){ $string = preg_replace('/[^A-Za-z0-9]/', ',', $string); return strtolower($string); } So it's not the greatest function in the world but it would do more-or-less what it claims to. Now write a few tests commonly covering happy paths, unhappy paths, extreme values ... $string = "Some normal-ish text with no oddness"; $this-&gt;assertEquals('some, normal, ish, text, with, no, oddness', \Util\Seo::textToKeywords($string)); ... Did it work? Yes? Great. This function is tested as well as can be expected. Now you might have some kind of integration or acceptance test to ensure that if you put... $article = $articleTable-&gt;getById($id); $this-&gt;layout()-&gt;meta_keywords = \Util\Seo::textToKeywords($article-&gt;abstract); ...in your controller it would actually output some meta keywords in the head of the document but you've already tested that given reasonabele inputs the function behaves correctly. If Seo was a class that could be instanced you'd still need to write the exact same tests.
Let's go more concrete. Building off of your example function name of textToKeywords, let's say that you're letting the user input a list of space-separated keywords into a text field and you want to update some sort of keyword-usage-counter for statistics. function updateKeywordCounter($userInput) { $keywords = \Util\Seo::textToKeywords($userInput); foreach ($keywords as $keyword) { \Util\Seo::incrementKeywordCount($keyword); } } You only allow keywords that are up to 30 characters long. textToKeywords returns NULL if it is given invalid input. How does updateKeywordCounter handle this? function testUpdateKeywordCounter() { $objectUnderText-&gt;updateKeywordCounter('superlongkeywordstringthatshouldmakethingsbreak'); } (You'd want more boilerplate to assert that it's actually doing whatever you deem logical in this case, etc.) Oops, you updated the spec and now you allow 50 character long keywords. Your test doesn't suddenly fail (necessarily). It just suddenly stops testing what you intended it to test. It'd be better if you could mock Seo like so: public function textToKeywords($string) { return NULL; } That's guaranteed to return NULL, which is what you wanted to test, and you don't have to try and hang your test on assumptions of how code-not-under-test behaves. tl;dr: Yes, you can unit test the static method. The problem is that you can't unit test USERS of the static method without also accidentally unit testing the static method again, in a place where expectations are likely to shift out of sync.
I sort of like having a question about a person's favourite design pattern but it's a bit rubbish because you shouldn't really have one - if you do you'll probably try and use it everywhere rather than selecting the one which best fits the problem. Surely "can you explain how you've used design patterns to solve a problem?" or something would be better. I also don't like the one about connecting to MySQL because the first thing most people do is abstract this up a level or use a third party system (DBAL etc.). Anyone using any of the frameworks will not have seen a raw PDO object being constructed probably in years - and good thing too! Who wants dodgy hand-rolled ORMs stinking up their system. anyway - I guess you weren't really looking for a critique on your interview questions so...
I can see your point and ALMOST agree, but I don't want to count keywords. I just want a slightly dubious function for turning text into something vaguely resembling keywords so that if some kind of re-animated AltaVista bot comes by my website it can rank me as high as possible for my keywords. If it was something more important I'd agree, but it's not really that important what the result of this function is - just that it returns something so clients that still think keywords are important don't kick up a fuss. Perhaps it's not very scientific but I'm happy enough with the compromise of not having to faff about with objects at the cost of possibly not having the most spectacular unit tests in the world.
To the best of my knowledge there is no "best" practice when it comes to this. These are all opinions. I personally find all of them equally legible and use some interchangeably. It just depends on the circumstances. This is not one of those things that is "best", just "preferred" as the OP said.
For testing/debugging purposes, sure, but a finished/live project should not use error suppressors. It is a sign of bad coding, especially if it is simple to fix. This, to me, just says lazy.
&gt; You are writting in PHP, not C, you just don't need this small optimizations. However, PHP was written with C and still uses it in the background. So optimizations for C are probably just as beneficial in PHP due to their relationship. Besides, this is still good advice even if you aren't looking at it for the performance gain. Incrementing a local variable in a method is only logical as you should increment it where it is being used. You should rarely need to increment a global variable or object property, and then only sparingly. Usually if you find you are doing this you can presume you are doing something wrong.
We interviewed this guy who gave decent answers to our questions. We gave him the fizzbuzz. 20 minutes of nothing. To do the loop through 100 numbers he made an array containing the numbers and then just kind of sat there writing and erasing, writing and erasing. He used a `while` loop and was having problems with the division. Just a complete and total bomb. I was amazed at how bad he was.
&gt;I will not store sensitive data in plain text &gt; **addresses** I've seen a few articles around the place saying customer name &amp; addresses etc should always be encrypted. There was a lot of talk about it during the breach into Sony's PS3 databases. How do programmers go about doing this? The application needs to be able to read this data back so that the user can **edit** and **view** their record, therefore the decryption keys need to be on the servers anyway. How can you hide this data from crackers?
Thank you very much for the feedback. I will make the necessary updates. 
The Form class wasn't meant to be in there. And it is totally not perfect at all. You will see it dated back 2009. But I will bring the updates on it. Thanks
So, no then?
The answer is actually YES. :)
[str_split](http://uk3.php.net/manual/en/function.str-split.php)
Thanks for the advice! But I found a solution, it's in the edit.
I'm assuming... for money?
I ask people some of the following: What is the difference between a left join and an inner join? List all the pros and cons to indexing a field in mysql What is an abstract class? An interface? Its generally very easy to tell how much a programmer knows in person, our interviews are more focused on personality and drive.
I agree with you on pretty much every form system I've seen so far in PHP. What would be nice to have is something like CF or ASP.NET that would be more extendible in PHP, but... an easy to use 'out of the box' approach for basic stuff. The ZF (1 - haven't tried v2) form stuff is extremely overly complicated to do anything decent with, and *really* shuts out anyone who is not a hardcore php dev from participating in the form design process. A tag-based system would be great, but would require deeper integration in to a framework's request stack, and the approach everyone seems to prefer these days is 'loose coupling', pretty much ensuring something that ties two subsystems together will ever become accepted in the major PHP framework world.
Well damn. I do not know why I did not post this to phpfreaks. It just flew over my head. **EDIT** That came off as sarcastic in my head. It's not sarcasm. I'm a dumbass. 
https://github.com/tlhunter/spidermonkey This project is an easy to use scraper which accepts css selectors instead of complex regex. I had high ambitions then life got in the way. It's about half done.
Some people may shoot me for this, but lack of strict variable typing. Going from numbers to strings and back is handy and saves a buttload of time. I'm aware of the downfalls, but in a rapid development environment, I prefer the upsides. 
Hard to say - I can only think of two options. 1. Application-wide encryption of database contained data. As in, all data that goes in uses a shared key that encrypts it, but decrypts on read. This is pretty stupid and doesn't really solve the problem. The problem with this is that the keys would be easily readable by an attacker. Doesn't matter if it's hardcoded in the application, or an environment variable - if the attacker has owned your database, you have to assume that the application and the system it's running on has been owned, too. It may not be that way, but you have to assume the worst. 2. Per-user encryption, based on something that is unique to the user. I would imagine this being somehow tied to their raw password pre-hashing, or using their hash as a key - whatever. Still doesn't matter. Again, you have to assume that the attacker has full insight as to how the application functions and how data is read/written. This would be potentially more annoying for an attacker than an application-wide encryption key, and potentially less secure. While protecting this information is obviously very important, it's hard to say what the best way to do that is. I won't pretend to know, myself. I just think that most options that are feasible can never really solve the problem completely.
But we have for example XCache or Eaccelerator and many people will say that they are faster and more stable (this argumentation have have a place in mail list), this products usually have an update for new version of php earlier than apc
In best practices yeah, conservatism and consistency should be in a top priority list. New ideas should go from the bottom to the top. From personal projects to large ones. And only then, when this idea became widely accepted should it be included in best practices
Not a fan of the URI structure, don't like seeing verbs used. URI should be a "thing", the "action" should come from the HTTP method (GET/PUT/POST/DELETE)
We used Memcached early on, but needed some higher-level data structures, so redis was an obvious fit. For simple K/V stuff there is little difference. When we last benchmarked the two there was about a 2-3% performance difference. We process several billion ops per month on our cluster of three machines, which we're pretty happy with.
Mote of this stuff is just snake oil, or entirely wrong. Micro-optimisations are a joke which lead to developers spending weeks fixing up stupid stuff, when they could have been doing a large-scale refactor to take care of some REAL bottlenecks. Keep some of it in mind, but don't spend months chasing a 0.0001 second boost to your application unless you have time and money to burn. In which case, call me in.
theoretically, if someone was able to get just a dump of the database, without access to the keys, it'd be much harder for them decrypt that stuff, which I think is part of the point. However, there's a lot of data that people need to actually *use* the functionality in a database for - like... searching and sorting. Finding everyone who lives at "742 Evergreen Terrace" would be extremely CPU intensive if all the addresses are encrypted. If you go with "well, index all that data in to a 'real' search system like solr", now your data is in two spots, and you've got to worry about encrypting/decrypting data in two apps. The more pragmatic (yet secure) approach would be the approach forthelose outlines below. But yes, at some point, your decryption key has to exist - in memory, in code, in an env, in an algorithm - if all your system was duplicated by someone, they can eventually figure out your keys to decrypt data. It may just be really difficult for them.
A followup that is interesting: http://news.php.net/php.internals/61341 How would *you* clean up the array/string/etc api without changing to OO? Could you do it and keep backwards compatability? Personally I'd prefer to see both OO and functional working, both with consistant parameters (I'd love to see name parameters, that would really help :)
$str-&gt;lowercase() etc etc. Been suggested a thousand times and, although would require a lot of core code to be rewritten, would be a nice change to have.
I recommend digging through the abandoned Github PHP projects to look for anything interesting, and then forking one of those. Or, better yet, pick a currently-active opensource project and contribute to that- you'll help the community ecosystem a lot more in the long run!
&gt;$str-&gt;substr(3,5) is just syntax, in itself it has almost nothing to do with OO. Thus it's designation as a "pseudo object". The point here is syntactic consistency and ease of use. 
Why is it easier to use? And consistency with what? Should we also replace **exit** with **thisProgram-&gt;exit()**? What's all this **$x = 3 + 5** nonsense? It should be **$x-&gt;set(3-&gt;add(5))** for the sake of consistency and ease of use.
I'm struggling to think of a single framework that *requires* you to build your urls in this way. In almost every system, you can specify custom rules for how urls are parsed. You're not beholden to any particular schema unless you wish to be. The essential element that the author seems to have missed entirely, is that most websites are *not* flat blogs that serve single-page entities. Most are rich, multidimensional content platforms, which condense disperate content types into a single domain. Yes, /articles is pedantic and just plain wrong - but if you want to help your users (and your SEO), /turtles/my-top-5-favorite-things-about-turtles/ is a damn good choice. (And this is easy to implement on just about every CMS.)
There are heaps of frameworks which do some form of H(hierarchical)MVC in one form or another. CakePHP has plugins, Symfony has components, I could probably list another 5 similar examples if I went and researched all the doc pages of various projects again. So yeah, *still* nothing noticeably novel.
What you *can* do with the pseduo objects is rearrange the parameter order. Make them consistant across the language. At the moment this is PHPs biggest pain (death by a thousand paper cuts, etc...) Re: replace exit with thisProgram-&gt;exit()? Would be interesting as I could extend thisProgram and override exit() as mentioned previously. Re: $x-&gt;set(3-&gt;add(5)) This would actually be something like: $x = Math::add(3, 5); which again isn't that bonkers and could be useful for all sorts of things (imagine how this would compile down - the parse tree would feel very familiar and easy to manipulate). I think the example you were after is: 3.0-&gt;is_integer(); // or maybe (3.0)-&gt;is_integer() which is also a nice thing to have (python and ruby do this) you could extend float to be, I don't know say, 'percent' which raises exception if you do a math operation that isn't between 0 to 100...
Just two I found in 1 minute of searching: [Codeigniter](http://codeigniter.com/user_guide/general/routing.html) and [Symfony](http://www.symfony-project.org/book/1_0/09-links-and-the-routing-system). The problem is not that you cannot specify custom rules for parsing, but that these rules are usually bound to the logic of the application instead of the subject matter. The configuration of the router happens in the code. To fix it you should use the content to configure the router, which is almost what a content repository based system does. PS. the author ( me :) ) was fairly specifically targetting websites which are not flat blogs, hence the mention of content repositories.
Thank you. Can you please elaborate so I can bring the necessary updates?
In C++ it wasn't a misconception. In C++ an iterator is a full-fledged object that (can be) somewhat large. Using i++ has to be able to return the original iterator, so a copy had to be made. Making a copy of a large object is somewhat expensive. Using ++i does not need to make a copy, because you cannot effectively get both the old and the new value. Is it premature optimization to worry about such things? In a lot of cases, yes. Is it something that the compiler ideally should get smarter about and optimize for you? Absolutely. Was it a misconception? No.
Those are two that you can explicitly override, and were exactly the two that I was thinking about when I posted that. Configuring the routing paths is part of setting up your application, it's essentially trivial. [Symfony](http://symfony.com/doc/current/book/routing.html), [Code Igniter](http://codeigniter.com/user_guide/general/routing.html) 
Why are you talking about C++?
&gt; What you can do with the pseduo objects is rearrange the parameter order. Make them consistant across the language. At the moment this is PHPs biggest pain The solution to that IMHO is named parameters. It solves a some other problems too. &gt; I think the example you were after is This is actually kind of fun. I think the example I was looking for is: $conditional = new ifStatement; $conditional-&gt;testExpression = function($i) { return ($i &gt; 3); }; $conditional-&gt;onTrue = function($i) { echo "$i is greater than 3"; }; $conditional-&gt;onFalse = function($i) { echo "$i is, alas, less than or equal to 3"; }; $conditional-&gt;execute(); unset($conditional); Instead of the boring old non-OO if ($i &gt; 3) echo "$i is greater than 3"; else echo "$i is, alas, less than or equal to 3";
MySQLi and no other database choices...kind of boring. 
I want to use `['aaa', 'bbb', 'ccc'][0] == 'aaa'`, can we add that to the request?
Unless someone doesn't properly indent/format the above example construction it's a perfectly readable thing.
You don't NEED to know git, but you need to know some kind of scm. A lot of big companies haven't jumped to git and use svn still. As long as you're familiar with how scm works you should be able to pick up new ones just fine. 
Because it's probably where the `i++ is slow` mantra came from. See my first comment in this thread.
These are good suggestions but as another beginner programmer who's bootstrapping a site/startup, these are still somewhat vague for a newcomer. - UML. What is it, why should one use it and how do you use it? - What's an ER diagram? How does one begin to plan out a db structure? What drives your choices? - What is unit testing? How does one set this up (generally)? - Where/how does one find (well regarded) style guides? I know a google search can turn up some answers to many of these questions, but that doesn't equal quality answers or even answers a newcomer can understand. I find that to be a problem when reading up on programming practices, theories or even tutorials (especially in printed books), that experienced programmers often gloss over or don't thoroughly cover these fundamental topics. It's only helpful to tell someone to do a certain thing if they know how to do it already, but much more helpful if they are also told *why* to do that certain thing. I enjoy reading the thoughts and opinions of experienced developers so any more light you could shed on these points would be appreciated by any newcomer who's reading this discussion. Thanks!
I haven't tried 5.4, but I would think that would work already?
ps - I have saved this suggestions list and shall reference it.
I thought so when they announced "array dereferecing", but it throws a syntax error in 5.4.4.
This makes the Fustrate sad :( It's such a simple concept, but they didn't make it work?
Built in support would be nice, but has no one created a lib to do this?
Use PDO instead. It'll at least cover some more databases.
This particular example actually isn't particularly reasonable. `map` and `filter` should be generic functions working on any iterable. And in 5.5 they probably will be.
Example I tried to use yesterday: // I have `basic`, which is a an id for a pack. I want to translate it quickly. $pack_id = 'basic'; // Taken from DB, already secured $real_name = [ 'free' =&gt; "Free pack", 'basic' =&gt; "Basic pack", 'pro' =&gt; "Advanced pack" ][$pack_id]; It'd not be used very often, and mostly for very quick code, but it would be consistent. Most other languages already support this.
This is already implemented for PHP 5.5.
If I had a nickel for every time I was asked MySQL JOIN questions in interviews &gt;_&lt; And every time I panic and confuse myself.
I understand what you're saying and I'm a pretty organized person. I'm also a user experience designer (most of the time) and agree that planning out the whole process ahead of any design or coding is a necessary step. Though my boss would prefer to just jump into design without any care for asking what's the purpose of this app/site or what's the best way to proceed. He's a visual guy and only interested in the bling, so to speak. After replying, I did get on google and look up UML. There are a few site that have explanations but they're also .. heavy. I sort of get what UML is supposed to be, but never having dealt directly with anyone who's used it, reinforcing why one should use it or how it's applicable to planning a project is still a bit foggy. I guess finding the line between verbosity to cover all the details and distilling down what's necessary for someone to "get" why they should use a tool or practice is going to vary. Thanks for the links. I wasn't expecting an answer within a few lines, it was more an esoteric question than a direct request. Also agree on novices wanting to jump in without planning, I see that a lot from my design peers as well. Jump into the shiny without first asking, "why?".
You couldn't do this without massively breaking backwards compatibility. Having string specific methods only on a string is silly in a language where types juggle so easily and so frequently. You'd wind up having to do things like: echo $number-&gt;to_string()-&gt;substr(2,4);
_see also: [autoboxing](https://wiki.php.net/rfc/autoboxing) @ wiki.php.net/rfc_
Content still must be organized, and that's where the two domains overlap.
Naw, its fine. These aren't hard and fast questions. I use them as starting points for having the conversation about them. I will usually start out with the phrase: Tell me a bit about your experience with X.... If they hit on the good points and avoid the bad points, then I feel comfortable that they are qualified. As far as MySQL goes, I really don't mention about making a connection or ORM or anything; I think you missed the heading "Expert level". If we've made it to the end of the page during the interview and they can talk about the query cache, EXPLAIN, &amp; storage engines, then they are really crackerjack devs and I really try to get them onboard. Edit: Apparently there are 2 more pages on here that I forgot about. I don't use those and I'll remove them in a minute.
I do not know what composer is... Well I just updated it to have the Database Class put in with DI. The Logger right now is in DEV mode, I am not putting it anywhere in the docs. eventually I will make it DI. The Config class was originally static, I was convinced by the php room on stackoverflow to switch it to DI. I do not know how to write tests... :-\ I just know it works. I have used it for many web applications at my office.
Composer: http://getcomposer.org/
What would that do for me?
It allows your framework to be easily installed alongside existing libraries. You get a distribution channel for new versions. Additionally, if you are able to break your framework into small independent parts (may not be the case here) you can allow users to only install the components that they need.
It's just annoying to have to split these things onto two lines $drinks=explode(' ',"Cola Milk Juice"); echo $days[1] // "Milk" would be nice to have the following, especially as all other modern languages sport this feature. echo explode(' ',"Cola Milk Juice")[1]; // "Milk"
I can understand why someone would do it, but I have yet to see a circumstance where doing it wouldn't be fairly inefficient.
Codeigniter &gt; CakePHP
"PHP the Right Way" is just another FIG (framework interoperability group) related project.
That's a clever trick, for reading files; but its not able, from what I can see, to imitate yield in a foreach loop. (foreach($items as $item) yield $item); It would get pretty hairy with $items implementing the Iterator pattern and then explicitly called from the Generator. I applaude the trick :)
Thanks for pointing it out! 
I assume that means you found it? :-P
I think that would be fantastic, assuming they kept the old global functions intact.
How did you decide that? The only thig the two projects have in common, are A) me B) the intention of making the Eco-system better. Interestingly, what would be the downside if they were connected? The two projects have no shared interests, but im curious to understand why groups of people trying to make code interoperable, or help make well focused training material, would be a bad thing at all?
This sort of shit is why PHP is the butt of so many jokes. Instead of a designed language, PHP is the result of a simple scripting language with years of "My favorite language does X, PHP should too." bolted on. The result is uh.. sub-optimal.
It's pretty common for a governing body of a language to declare a set of standards, even on that age-old debate; it's only new to the PHP world (as with most standards). FWIW, I was a die-hard tabs-only type myself until I started at my most recent company. What changed my mind is that the vast majority of people just cant seem to grok them properly for alignment, only positioning. Spaces are somewhat absolute, and people tend to get it right the first time. As far as the editor issue - you should probably get a smarter editor. ;)
Did you restart apache? (Or, in classic tech-speak: "have you tried turning it off and back on again?")
Aptana studio, netbeans, gedit, vim, notepad++, and eclipse are my editors of choice. Are they smart enough?
No, sorry, didn't realise it was still beta. If you're on twitter a lot they constantly retweet about it, they might be able to set you up :)
Well, this'll fix your vim issue, can't help you with the others off the top of my head: set tabstop=4 set shiftwidth=4 set expandtab
I did indeed, though I admit it wasn't my first action
http://kodingen.com/ is the non-beta version.
Then make Iterable a class, and have these as two provided methods. Then custom data structures could also override those methods, providing better alternatives.
Right. Even if it's not an issue on *your* ("you" being an unspecified person) particular code editor, that might not apply to everybody's editor. You shouldn't have to rely on some spiffy feature of some editors to get it to work, it should work on "stupid" editors as well, even in Notepad. Tabs work pretty much uniformly across the board for the purpose of indentation, regardless of what editor you use. 
&gt; Try without catch I think you need to proofread your comment, sir :)
Well, this blog post is bullshit, and the author doesn't really understand what he's talking about and why URLs are structured as they are. First of all, in most frameworks, you can make the URL out to be whatever you want it to be. It does not have to reveal any underlying structure at all. Secondly, the reason we have URLs like these... /articles/article-name /media/media-name /about/john-doe ... is to give a funnelling effect to our navigation. We go from some general listing, to something specific. If I deleted "john-doe" from that last one, I'd expect to get a listing of all the people in the about section, as well as maybe some small text about what the site/company/whatever is about. It divides your site in sections and sub-sections. This is not a problem with routing, this is a **good** thing.
We have four RedHat VPS servers hosted by [Redit](http://redit.com/us/index.php) (no joke). Basic LAMP stacks, all administered by us in-house. These just replaced four physical servers aged from 4 to 10 years old which were previously hosted by a co-location service.
Wonderful tool. What method is used to keep the editor asynchronous ?
As far as I know they host themselves. All four servers are running on our own C-class, I was under the impression AWS used their own IP range.
Consistency
It does.
I posted this a few times before but my idea that function calls on scalars should map to functions in a PHP reserved namespace. This would provide both a new consistent procedural API as well as reasonable, incremental, support for unicode. Basically like this: $x = "hello" echo strlen($x); // prints 5 echo $x-&gt;length; // also prints 5 echo \PHP\String\length($x); // also prints 5 Then add a new unicode string type that is entirely incompatible with the existing string type but still implements the same string methods: $x = u"Hello" // unicode string constant echo strlen($x); // Error, $x is not a string echo $x-&gt;length; // Prints 5, unicode string length echo \PHP\Unicode\length(x); // Also prints 5 A method call like `$someString-&gt;replace($find, $replacement)` would map automatically to `\PHP\String\replace($somestring, $find, $replacement)`. Unicode strings would map to `\PHP\Unicode\..` and arrays to `\PHP\Array\..` and so on. PHP could come with a default set of functions in these namespaces but regular PHP code could also define functions in there. Also, because they are just functions in a namespace, they can be called procedurally as well. This retains full backwards compatibility, procedural compatibility, and provides unicode abilities. 
I host on a linode slice with apache, MySQL, redis, php, and varnish.
An awesome library called ShareJS http://sharejs.org/
I own three servers at a colo facility and one virtual machine with rackspace. I've used an ec2 micro instance before, but I like rackspace's interface better. My applications are heavy on memory, and you get more bang for your buck owning your own hardware. 
\&gt;1.5s is recommended, so 13+ rounds. 
psr-2 can go to hell, I am not putting my open braces on the next line.
I'm on Rackspace. It's really easy to use, the prices are great, and they have great documentation for their API's.
30+ cloud servers on Rackspace. Granted they don't all run PHP.
Linode. It's just a basic linux box, running Ubuntu, which I then installed PHP, MySQL, Apache and Nginx on top. I maintain it myself, but setup is fairly straight forward, and they provide guides which you can just follow. Performance is generally excellent, and most issues tend to really be down to my sites. Over the last year I have had three outages. On two occasions the box went down twice; first for about an hour, and the second for around 20 minutes. On the third one of their DNS servers went down, and my box was one of those affected. This was also for about an hour. I'm very happy with my Linode, and would highly recommend them.
Why do you need to use SSH?
You'll need to use something like [gd](http://php.net/manual/en/book.image.php) or [ImageMagick](http://php.net/manual/en/book.imagick.php) to do this. Here is the order of operations at a very high level: * Determine image type (the functions you use do change depending on each type, if I'm not mistaken). * Determine whether or not the image is landscape or portrait. * (**Animated GIFs only:** Get the first frame.) * Proportionally shrink the image down until the *smaller* side is 160px long. Or, if the image is smaller than 160px on each size, embiggen it or pad it to get to 160px. * Crop the image on the *longer* side towards the center until it is 160px long. * Save the image somewhere, as things like this probably take up processing time/power. * Reference said image in a web browser. For PNGs, you could preserve alpha transparency, or merge it on top of a checkerboard pattern like they use in Photoshop to show that the underlying image is transparent.
the github gist, should use === in the compare at the bcrypt check. Since we are dealing with passwords the check should really be safe. I would go with 12 rounds.
Look what the error log from apache says. If the extension can not be loaded there should be an error in it. You can also create a php file which executes the phpinfo(); function. This should display all the stuff which is loaded and activated. Also make sure about what rm249 said.
I also like a variable naming convention. Just something simple with 1-3 characters to describe the variable a little so that we're not all guessing if it's an array of objects or the object itself, for instance. It also shortens variable name sizes, and means less keystroke typing.
Me either! It just makes sense to keep them on the same line as the declaration. This is what C programmers did for years, and so did Javascript programmers, so why change now? About 5 years ago, this all went haywire and everyone started doing it this way, and it doesn't help me read the section better, but worse.
One "tab" and one "space" are both 1 byte each. Using a tab to indent a line adds 1 byte, but using 4 spaces adds 4 bytes (or however many spaces you use). Multiply that by however many lines in your code, and you could cut down on file size.
Thanks for the thoughtful reply but I'm afraid the point of the article got lost somewhere. Yes you can structure URLs any way you like, but if you do it in a routing configuration then the 'you' here is the programmer, not the editor of a site (unless they are the same). Meaning the URL is coupled to the application or cms design, not the content 'design'. Editors may make a mess out of the URL structure, but then it is their mess. There is no reason why they couldn't make a well thought out content structure which is reflected in the URL. The editor is the one who should divide the site into sections and sub-sections.
2 VPS and one shared hosting for smaller projects.
Isn't this more the "standard" mechanism for generating thumbnails - I think OP simply wants to crop to the centre 160x160 pixels of each image, without scaling ?
You can't loose data, you can make a new instance mount the drive from the old one and change the keys / get your data. 
A big dedicated box from hetzner.de, running multiple VMs to segment tasks and security domains.
Was that a shared hosting? I know someone who uses GoDaddy, and he said one of the best optimizations you can do when your DB starts to get slow, is to dump and then resetup your DB. The new DB tends to be setup on a newer machine, which has less people using it.
Interesting concept. I think it was the networking connection between the web-server and the database server. Even simple queries were slow. And constantly, too. 
Unless you have ridiculously deep indenting (obviously bad) then a few bytes really doesn't matter.
dear lord no, that's what type hinting (which works with objects and arrays) and IDEs are for.
I'm also using Linode for one of my project's nightly build boxes. Really awesome interface, very fast to get started, and (sort of) elastic too. Also it's great because you can choose where the VPS is physically located. Again, would highly recommend.
Rackspace cloud all the way. Server, cdn, and load balancers. All unmanaged. 
I own a few dedicated servers with iWeb, and maintain them myself. CentOS, Nginx + Apache (Depends on the site, I have each bound to a different IP), PHP-FPM, and MySQL/PostGreSQL/MongoDB.
We use AWS. * S3 for content * Loadbalancer going to multiple EC2s * RDS mysql * DynamoDB for logging * Heavily use SQS and SNS * SES for email
Reddit uses Akamai.
A linux dedicated server hosted by OVH. I like the administration part and this way I can do more than just host websites (mumble, minecraft, git, etc). As for the environment for PHP websites it's pretty much classic : nginx/php-fpm, mysql, apc.
Our issue with owning our hardware as we do currently is that we have to drive 3 hours to fix it or pay rack spaces techs an arm and a leg if we need it fixed fast. This is why we are moving to a cloud setup. Probably aws. Maybe linode. Edit: This is to say, that if it weren't such a pain\cost to continue with our own hardware, we would. 
When did they move off of AWS?
When we move we are going to be using pretty much this. We will not be using rds though. We are going to roll our own ec2 and use Percona's mysql with xtradb. The performance gains and extra features are too good to pass up. We already use a few of their services. Cloudfront, SES, and a little bit of SNS to spam our emails and phones for critical errors. We will use a lot more of SNS after we move to monitor our servers and such. Also, a day or two ago they added super easy to set up automatic DKIM signing to SES. You have to verify the whole domain though I believe. It took me 10 minutes to set it up. In php it took me hours to make it work. 
I used to be Linode+PHP-FPM+Percona, but to be honest I'm happy enough with Apache whenever I do host PHP now.
What has hopeseekr's nationality got to do with anything?
Rackspace (dedicated). Apache, MySQL, PHP (fastcgi), memcached.
Yes just saw they added DKIM signing to SES have not set it up yet but definitely will be. I am going to check out percona because of all the amazon features mysql rds I think is quite poor. I really only like the multi zone replication in rds.
You're pretty much correct. The fully managed Cloud Sites is pricey, however Could Servers are very cheap, I host a few there for personal and a few work related. All of them are Debian Squeeze, and most of them are LEMP servers. Although I have a small personal LAMP server and I think we have some of our older clients on two different LAMP servers at work. Servers are about 10-20 a month depending on the size. All in all quite happy with Rackspace.
Dedicated hosting running Parallels Containers; containers to isolate each major service.
You can spin up your ec2s in any availability zone and run a slave there. Same exact thing. The only thing rds offers is easy configuration for what it does support. Also if you run multiple mysql servers check out Percona's cluster. It uses Galare(sp?) and is really cool, but not for every use case. 
Also if you run dedicated instances with Percona, they have repositories for amazons Linux ami. Amazons linux seems to be an optimized version of Debain. 
Only of your instance uses EBS.
Linode as well. They've been rock solid (outside of when I bungle something up).
&gt;Consider your salt when deciding too, if you use the same one all the time then it may be better using more rounds. If you use the same salt for all passwords, you've severely missed the point. 
Linode as well. Before that I was with ThePlanet which is now Softlayer. CentOS 6 on each system, standard LAMP.
I'm sorry this is off topic but, you look like a cop, not a programmer. Based on your picture I keep seeing poping up on here every week.
Not really. I guess you've never used bcrypt, as, even if 50 rounds were possible (it isn't), it would render your website unusable. Furthermore, having the same salt would undermine the security of all the passwords in your database.
You are confusing perhaps with the access keys used with the SDKs and more ? There is no way to recover your private key used to login to your instance, Amazon doesn't store them. I have mine backed up on dropbox for example.
nearlyfreespeech.net. Super simple. Super cheap.
I'm curious, did you look at AWS before choosing linode? If so, why did you decide against AWS? Edit: I suppose I'm asking the same question of anyone who looked at AWS but didn't choose it.
I think it's perfectly logical. Next line for function/class definitions, same line for control structures. The former are relatively sparser and you'd like some "breathing room" between the signature and the code, while the latter are very common and look better "compact". It's also not something they just made up by the way, this is a very common style called [K&amp;R style](http://en.wikipedia.org/wiki/Indent_style) used by the authors of C. Since PHP is very much influenced by C it makes perfect sense to adopt that style.
Dropbox ftw. Also, [TrueCrypt](http://www.truecrypt.org/) to be safe with work stuff. Just a small 20mb TrueCrypt drive with the image on my dropbox. More than large enough to hold my keys, and sensative notes and such.
I'd like to know myself. If its info you can share. We are looking to move to AWS and really have no idea what size server we will need to start with. Theres not a lot of good info out there to compare.
I can't really say what's our load, it's been a few weeks we've been out, and analytics are still computing but on an Extra Large instance (just re-checked, that's the one we're using, so 15 GB of memory, 8 EC2 Compute Units (4 virtual cores with 2 EC2 Compute Units each), 1690 GB of local instance storage), our services are running smoothly, even with several hundred users on. What's even great with Amazon AWS is that you can upgrade or downgrade your instance type at any moment with minimal service disruption. I'm sure there is scripts or applications (or even the AWS Web console, I'm not sure) that allow you to up or down your instance depending on the load you're having, that can save you some dollars.
AWS has a number of inherent problems they don't tend to make very evident. Things like: 1) The IP address of your EC2 instance can and will change at any point. * You need an Elastic IP. 2) The local storage of all but the micro instances is ephemeral. This means it can and will disappear entirely. * You need to make routine AMIs or volume backups to secure your data 3) The local storage on micro instances, while fault tolerant (unlike #2), is on EBS -- Which means it's incredibly slow and inconsistent. * Avoid disk-hits as much as possible with micros, use the lofty 640MB of memory instead.
So, I hadn't heard of iWeb so I hit their website. Based purely on their websites load speed I wouldn't use them. It seems shallow for a lack of a better word but 6 to 9 seconds to load their front page. Reddit is 4 seconds on a bad day and they have a reason to be slow. Granted, I looked into their site and its a large portion the web developers fault 56 http requests, 450kb (suprisingly only 83k of that is images) and the server doesn't even have keep alives enabled.... the actual html document is cached in varnish and still took 300ms before it even began to send data. ...eh, I won't go on, just a rant. **tl;dr** If a hosting company can't take the time to set up their public web server--which is essentially their face--correctly, why would I trust them to set up a whole network?
I guess I'll also reply with numbers. 1) Learned that the hard way. Well, the hassle way. 2) This I was not aware of. But backups = life. I'll have to look for some AWS best practices I suppose. Can the data disappear WHILE your instance is running, aside from systems crashing? 3) Being ram is always the goal, is it not? I know I aim to cache any static content possible with varnish, keep my mysql in ram as much as possible, in memory cache for php (ie xcache). Did I miss anything important? (For a normal web app)
Yeah, there are. You set up cloudwatch alarms and use autoscaling. Which is about as far as much knowledge goes. I know you have to write an actual configuration file and use the command line or API to do it though. No console support for it yet. Also, for swapping seamlessly, if you are set up for it, you could fire up the new size instance, replicate to it so your db is up to date, switch your elastic IP and take the old one down. I do not think there would be any noticable down time for the site. More work though.
Fair enough.
Logs... I had not considered logs. Someone else said they use DynamoDB for logging. I may have to look into to that. Efficiency aside basic logging would destroy your pocketbook on IO requests. So, on a normal, not-micro, EC2, should you have things like MySQL use the local storage and backup to the EBS? Or is that considered too risky?
There is one interesting thing, in second line PHP copy just a reference to $a. Real copy is made only if you try to change value of $b (in line 3). $a="Very long string"; $b=$a; // just take reference to $a $b.=" some more text"; // here comes big memory allocation 
Just start with medium and see where your bottleneck is (I/O, database, memory). A lot depends on what you're doing and if you're doing everything on the same server or using RDS, etc.
[This](https://github.com/12345j/Kidney-cms/blob/master/install.php#L6) is bad: imap_open('{imap.gmail.com:993/imap/ssl/novalidate-cert}INBOX', 'emailwritrtest@gmail.com', 'writrtest');
I'm curious what the issue is with the code. Is it security? If so, its not an email/pass that I care about, just an account to help test during install. Or was it some other issue?
Yeah, that's kind of been the plan. We have always been a single server outfit, but we were considering going with two smalls to start, one php, one mysql and then go from there.
Heh, its just been that long since I looked at Apache. Years really. Figures that they would improve.
Because you get things done in five days and maintain what you did for five years ;) That's why developers invest time in design patterns and testing.
Yeah, thats definitely part of it. And function_exists would work for that. But the other thing I found was that some times imap would be installed, but the connection would still throw an error. For example, imap_open doesn't test for a firewall or anything that would block an outgoing connection. So this was my answer. Maybe there's some function I'm not aware of that I could use? Or should I improve my [error message](https://github.com/12345j/Kidney-cms/blob/master/install.php#L49) for this?
The scale of the project obviously dictates the amount of time spent on the design pattern. In a small scale project you'd definitely run into what he calls, 'Too many Chiefs and not enough Indians'. :)
Ah, I understand now. I think it would be best to raise an error and inform the user that perhaps their IMAP installation isn't configured correctly. You could also use imap_open() with the user's email settings instead.
Yeah, using the user settings might work. I'll think about that. Thanks!
AKA [copy on write](http://en.wikipedia.org/wiki/Copy-on-write).
What I don't understand is all this talk about "time". I would bet that I could whip out a project as fast, if not faster, starting from a full-fledged Symfony install than starting from scratch. And I would be using DI and all the other wonderful design patterns that I could reasonably cram into it. If your initial design incorporates the patterns, and you aren't unnecessarily using patterns "just because", then not only will you have a 'better' (more easily maintained) product in the end, but it will take hardly any more time than otherwise. Design patterns shouldn't inherently cost more time. If used properly they should be saving time, even on small projects.
Ah yes you're right. I've confused these keys...
&gt; I've met people with the title of Junior Developer who had a great skill set, sometimes better than the senior developers in the same company. Exactly this. I'm a senior developer. The senior developers anywhere I've worked have more people skills and are willing to teach the junior developers. It's also a lot less about the specific commands and syntax you know, but it's if you know how to "program" well. It's not knowing how to use an array, it's knowing when to use an array. Senior developers also focus on the big picture. Being able to see a future application through the eyes of a user takes time and a lot of meeting with various types of clients, both good and bad. Another thing, is that they've been around long enough to not bitch and moan when something isn't perfect. Can't have the debugger you don't want? Fine, work without it. Looking at someone else's ugly code? Update it anyway. Client wants a retarded feature you know he won't use? Program it anyway. This is how I tell the difference between a new programmer and a senior guy here in this subreddit. If a guy says something has to be MVC and no other way, or he says you should fire your sysadmin if he won't install xdebug... those are people who are new to the game. 
http://servergrove.com/ is awesome. I have a VPS from a friend there and it's really solid. They actually support/help several PHP projects, like Symfony. Support is excellent. Good pricing. Hard to go wrong there.
&gt;But to me it means CS degree qualification or above. Once you have several years experience, this doesn't even matter. 
&gt; I would bet that I could whip out a project as fast, if not faster, starting from a full-fledged Symfony install than starting from scratch. How much time did you invest in getting to that point?
Heh. I was once the sole developer at a previous position. I got to pick my title. Sr. Web Developer! Huzzah!
&gt; Another thing, is that they've been around long enough to not bitch and moan when something isn't perfect. Can't have the debugger you don't want? Fine, work without it. Looking at someone else's ugly code? Update it anyway. Client wants a retarded feature you know he won't use? Program it anyway. This is how I tell the difference between a new programmer and a senior guy here in this subreddit. If a guy says something has to be MVC and no other way, or he says you should fire your sysadmin if he won't install xdebug... those are people who are new to the game. I agree completely. The other difference is that the young ones believe they can smart their way around the experience, and they generally do it by giving opinionated bloggers (and authors) more weight than they should. They'll build up a system of values (as developers) rife with assumptions that aren't questioned (but should be). Is the ability to mock these objects for unit tests worth the resulting complexity __on this project__? The inexperienced won't even think to ask that question. An experienced person knows when they don't know, and will write shit code to get it working with the expectation of re-working it later when the user gets to interact with it and bitch. The inexperienced developer will write mocks, unit tests, DI, and everything else they can get their hands on, only to blame the user when they realize how much time they wasted after the user started bitching. Experience matters.
&gt; But to me it means CS degree qualification or above. Degrees mean squat in this profession. Especially considering the most experienced developers have been programming and architecting since before getting a "CS degree" was even an option. One of the companies I applied at a few years ago asked me why I did not have a CS degree, as was a requirement stated in their job ad. Hmmmmm maybe if you subtract 20 years of experience from 2010 you'll find out why?
 git clone https://github.com/symfony/symfony-standard MyProject and then about 5 minutes of removing any unnecessary dependencies and the 'AcmeBundle' that the standard distribution comes with. At that point, I have an *excellent* starting point for any project.
The article makes a valid point, but I think it's one that all developers should learn to recognize early on and not waste cycles bringing it up again and again. The point is: there's no silver bullet. A moderately experienced programmer should intuitively grasp that there is never one universal technique that always applies to any problem. This article seems to focus again and again on proving this point, but it doesn't need proving. That said, while his criticisms of dependency injection have merit, he doesn't seem to recognize the myriad use cases where it actually does make sense. The one that comes to my mind most readily is database access. Say I have a Record class that wants to update a database. Among the myriad possible implementations, here are three examples that demonstrate a possible value for DI: // Fully encapsulates behavior. Good OO, however, difficult to test; // the function always creates a database connection function update_naive() { $db = new DatabaseClient($dbUser, $dbPass, $dbHost, $dbName); $db-&gt;query("UPDATE etc"); } // This is easier to test; the factory can be configured to return a // mock DB connection so the method can be tested as a unit // However, this requires boilerplate; we have to create and manage // a factory class, and for many classes this gets cumbersome function update_using_factory() { $db = DBFactory::getInstance(); $db-&gt;query("UPDATE etc"); } // A stub in the "style" of dependency injection; we've reduced // encapsulation by having the interface declare what it does (which // has pros and cons), but it becomes a cinch to reuse this function // in different contexts, e.g. testing with a mock db function update_using_di($db) { $db-&gt;query("UPDATE etc"); } Picture a similar scenario in the context of profiling, logging, sending signals to other services, et cetera, and the concept of using a dependency injection framework in place of creating dozens of factory classes starts to have appeal. e: it appears my word-of-the-day is "myriad"
The Senior thing is a little silly, as I've previously worked in a company that had two Senior developers. What is the point of that? Generally, the role of a Senior developer is meant to involve more responsibilities, such as helping out the Junior guys (who are generally fresh out of Uni or only a few years in). They often handle peer-review (merging features into master) and slap the younguns when they use the wrong style or forget to test a feature. I think if you are confident enough with PHP then don't be put off by a title that has "Senior" in it. They won't take you on if you don't know your stuff, and if you do sneak past their detection then you'll have a chance to hit the ground running. That only works as long as you don't break shit and get fired, but it's highly unlikely. ;)
Are you just asking about production environment?
He meant learning-wise.
Are you referring to this line of code? return crypt($password, $stored_hash) == $stored_hash; to become something like this? return crypt($password, $stored_hash) === $stored_hash;
CPU, mainly. That's not to say there aren't GPU implementations (but they're tricky). Also, if you're getting a faster server, you should also up the rounds a notch. I think you could do with 14 rounds.
Isn't this where the factory pattern stems from? Using the factory pattern, you have an easy way of instantiating an object in multiple ways without the parent class knowing how to call the dependent class. I believe I've heard that the factory pattern stems from DI in this way, yet another reason that DI can be a good thing in moderation. Not sure if I'm right or wrong in thinking this way? EDIT: Keyword, **in moderation**
They mean nothing. I've seen 3 or 4 employee shops posting for a "Senior PHP Developer" who needs to be able to install Wordpress and copy and paste some Javascript plugins, and large corporations posting for a "Junior PHP Developer" familiar with PHP, OOP patterns, has 10 years experience, a CS degree... And the other way around. Just send in your resume. If they give you a call for an interview, ask them then. There is no set or standard definition.
See, you don't want to be a "Senior PHP Developer". Hello, pigeonhole, meen your new occupant. You want to be "Senior Web Engineer" ... something a little more generic, but showing that you've got chops. Don't stay rooted in PHP. Expose yourself to Ruby, Python, and .NET. Learn what makes them tick and why one might be a better solution than another for some task at hand. THEN, you can own the title "Senior something dude", because you've been around the block and know how to attack problems with the right tool. ...even if sometimes the right tool is a double-claw hammer.
&gt;If it is, wouldn't this increment system load? The point of adaptive hashing algorithms like bcrypt is to increase load, meaning you can scale up security as hardware gets faster. &gt; Also, would there be a way of checking if a hash is 13 rounds or 15 rounds? There are multiple ways of checking if it's updated or not. You can, for instance, have a database flag, or you could parse the hash directly to check the number of rounds. A bcrypt hash looks like the following: $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi So you can parse that string and get the rounds by doing the following: $rounds = substr($hash, 4, 2); 
magic, and fairies. this is how computers work.
I would say learn JavaScript, but if you're confused about PHP then JS might give you a stroke or something.
Seriously, get this shit out of PHP. Post it to /r/learnprogramming or something.
Hence "and is open to installing things that will actually make a difference." You're preachin to the choir.
I am usually disgusted by the awful advice I read in this subreddit, but this is solid advice. +1, would read again.
I was doing a contract at one company and they left it up to us as to what job title went on the ID card. My colleague put "code monkey" on the form. Sadly the card came back imprinted "software engineer" 
The way I've always heard it described is "full stack". From the database to the front end and everything in between.
This works.
For clients and own projects: VPS, currently with RAMHost, running NGINX+uwsgi (both PHP and Python run through uwsgi). And whatever other services something would need. At work: VPSes running Apache and mod_php
Generally speaking it is better to design the code so that it is parameterized by those things which are likely to vary from environment, rather than have "dev" sections of the code which make the behaviour rather unpredictable and inconsistent. For example, if you work behind a proxy on dev but not on live then write the curl wrapper generically to handle both cases, rather than if DEV { //proxy } else { //non-proxy }. 
You should probably include a spec detailing your requirements. No one can know how that site works unless they've used it before. This kinda job would probably be charged by an hourly rate though, and more than likely wouldn't attract anything but beginners (unless you're paying handsomely.)
Out of curiosity, are you a freelancer or do you work for a company producing their website? I'm the latter and would get shit on if I laid out a page using tables.
Does Porchit have another meaning e.g. Poor shit? Like supplying cheap toilet paper (because you're poor) to your porch? If so, excellent naming!
It's actually fairly common in some frameworks such as Rails, Yii, and Kohana. http://www.geekality.net/2012/01/12/php-one-way-of-differing-between-dev-and-prod-environments-with-kohana/ I'd probably be better to store it in the .htaccess file though.
There must be better clearer way to do this. It seems like a bad hack to me that if it is not properly documented is going to cause issues. (I don't know if this is possible, never used zend server, but installing zend to the same place in all servers like c:\zend or c:\Program Files\zend would have been better)
I have tried all of them from EditPlus, Notepadd++, netbeans, sublime and eclipse.. what not.. all of them. And none of them even comes close to phpstorm. Case closed;
I think questions pertaining to the usage of CMSes are best posted in their appropriate subreddit. There's an [r/Wordpress](http://www.reddit.com/r/wordpress), and it's linked to in the sidebar to the right. I suggest you post the question there.
The idea with the rounds is to make it difficult to brute force. Bear in mind you only have to do it once per login attempt, to brute force it you have to do it thousands/millions of times, so for every millisecond you add to the hash time, it adds a much larger amount of time to the total brute forcing time. Considering the only 2 times you are legitimately likely to be hashing a password are 1) On login, and 2) when the password is changed, you should up the time to where it's the longest acceptable time for your users. Personally for me, this is over a second, but under 2. Your users are undertaking an action. Provided there's a progress dialog, they know something is happening and will likely not get bored and start keyboard mashing in that time. For you, processing is CPU bound, if someone is brute forcing it, it's entirely possible they're running it on a GPU, which may be a hell of a lot faster. Either way, if it takes over a second to compute a password hash, they're only capable of trying ~30 million combinations a year on the same hardware, which isn't many at all.
== , not = Sometimes why I prefer booleans, no =s needed
&gt; and then about 5 minutes of removing any unnecessary dependencies and the 'AcmeBundle' that the standard distribution comes with. How much time did you invest learning how to do that? Let me go ahead and make my point... you weren't born knowing how to implement Symfony. At some point you invested time (how much?) learning how the project works and how to implement it and customize it for your own needs.
[PHP: The Right Way](http://www.phptherightway.com/) is just what you're looking for!
My impression of both Joomla and to a slightly less extent MediaWiki is that they are both "antiquated" PHP programming. I would certainly encourage you to learn best practice, but I think it might frustrate you a little looking at both Jm and Mw code bases. 
I wouldnt imagine this work would need anything but beginners, i almost know howto code it myself i just want it to work correctly and not make a fool of myself if i fail. 
"Señor Bottle Washer" came back as "Software Developer". Worth a shot.
PHP the right way is a very good site, but for books one of my favorite in php is http://www.amazon.com/dp/143022925X/ PHP Objects, Patterns and Practice. I never used media wiki but joomlas code base a few years ago was a joke (hope it has gotten better!).
It's a little outdated now (covers up to PHP 5.2) but [Practical PHP Programming](http://www.tuxradar.com/practicalphp/) is my other go-to, touching on the fundamentals as well as some more advanced stuff.
Look into Symfony2/Silex frameworks as well as the composer package manager. 
&gt;most of it relating in one way or another to Joomla and Mediawiki (writing extensions, customizing the code, etc) He is asking for books, not frameworks.
He asked for "modern" PHP programming and Fabian Potencier and Co. are doing that well as anyone else. Also, fuck books; read code. There's literally no need to ever print another book about code.
bookmarked
Don't. Just templates. Look into SMARTY template engine for php.
I misunderstood. However, I'm not seeing how that has any bearing on this conversation. Your original point was that building a well-thought-out project using proper design patterns takes longer than otherwise. Yes, I have experience and so yes it might be easier for me, personally, but what does that have to do with your original point? Are you saying that the initial time investment somehow nullifies the benefits that I am arguing for? You learned how to write code in the first place. Why not learn how to make your applications more maintainable? If we are including the initial time investment in understanding how and when to use design patterns, then yes, there is a decent chunk of time to be spent. For me, it took about 6 months spent reading [this book](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124), using Symfony, and making myself sick with google searches to really feel comfortable-- and I am still always learning new things. But that investment has proven immensely beneficial for every single project that I've worked on since.
Can you expand on that, maybe even a link to an example snippet ?
Ignore his comment, it's shit.
I just meant don't mix the php and html. Use ajax to request the data from the php page and display it in the html page. Than instead of having one messy file which is doing too much work, seperate out the code into modules based on what they do. Display and load. Have display talk to load and display the data. But if that's wrong then fuck it Im a dumbass
+1 for using Twig. Template inheritance is fantastic.
I feel like I keep re-explaining this over and over, so please forgive my blatant copypasta here: That's a complete misunderstanding of the concept, and it's repeated way-too-often around here. What you're actually supposed to be doing is not mixing **business logic** and **presentation logic**, per the MVC pattern; it's *not* about PHP and HTML. For some reason, the PHP community at large has conflated these ideas. Any template engine is going to introduce logic elements for display purposes, and the language you choose to do that is irrelevant. Picking Smarty over native PHP is pointless, as you've introduced yet another layer, and a third language, into the mix. Just use native PHP, and your life will be better. The critical point, rather, is to separate your **controllers**, which handle the work of *what data needs to be displayed*, from your **views**, which handle *how to display that data*. The PHP vs HTML issue is to miss that point entirely.
Well, most of them you can disable and revert back to a native language pretty easily. Symfony 2, for instance, starts you with Twig, but it's really easy to drop back to PHP instead.
sleep() actually delays execution, as it says on the [PHP manual page](http://www.php.net/manual/en/function.sleep.php). I would wager that, since execution is delayed, the max_execution_time is not being "used up" during sleep() calls since there is no execution happening. Not the most technical answer, but easy enough to understand, methinks.
and waiting on a response from a slow network does not delay execution either?
I'm not sure the book you are looking for exists. I would recommend a couple of different sources and, put together, would bring you to the "forefront" of PHP (this won't happen overnight tho): * Read [PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) to figure out how PHP's object model works * (Already mentioned) Check out [PHP: The Right Way](http://www.phptherightway.com/) to get up to speed on all the latest best practices * (Already mentioned) Learn the Symfony2 framework and the Composer dependency manager developed by Fabien Potencier. This will not only introduce you to the best engineered tools in the community but show you what a well engineered project utilizing all of PHP's best practices looks like. * Check out Sebastian Bergmanns's [Real-World Solutions for Developing High-Quality PHP Frameworks and Applications](http://www.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications/dp/0470872497). This will give you insight into the best practices in managing a high-quality, modern PHP project.
Agreed. Online documentation, discussion boards/lists, and such really make books less attractive these days. It is far easier to fire up code examples from online sources (right out of GitHub, for instance), than to read it out of a book. Well, at least for me that's the case.
PHP only counts time spent in PHP code toward max execution time. Time spent in external/system code (for instance, SQL queries, file system operations, etc.) does not count.
I'm not senior but I notice that the difference . I.e most of senior has their own huge library , not over copying . I have created my own framework but it is not elastic like they did . Secondly , for new technology , like template engine etc , the senior has already had a solition for that , he or she already used twig etc :) Also they know how to manage the server better than me , this is about experience and following the new event . For ie the last thing I try to integreta the mongoDb to my framework I barely did it , but senior easly know how will success . senior lead , learn and adapt quickly mid level never give up try to learn and will be a senior in future [may doesnot come :)]
Bad idea. Even if you don't care about the extra requests, delays and breaking the site completely for users without JS enabled, you should probably care about crawlers not being able to pick any of your content up. Besides, it doesn't really address the problem; you're still going to need to get that data organised somehow.
Oh dear, there is always one.
The fact that some of these projects still use SVN as their main method of source control and e-mail lists for issue tracking is testimony to just how outdated and misinformed the practices of those who use them are.
... and I was showing how one might use them instead of falling back to a common antipattern. How is that not relevant?
My projects have a settings.php with the above logic which sets the parameters used elsewhere in the project. If you're using code like this at more than one point, or if there is significant duplication between the per-environment code blocks, you've likely gone astray.
What "common antipattern" are you referring to? My example: demonstrates how to use an _existing_ env var within php.ini (which can affect things that happen before PHP code is even run). Your example: demonstrates how to _create_ an env var, and access it from within PHP (long after the php.ini has been parsed). Please, I implore you to re-read my initial post again; I still think you don't grok what I've posted. If you truly understand, then please show me how I can accomplish the same thing that I demonstrate (without using .htacess).
The anti-pattern is using the hostname or other poor way of determining what environment one is in instead of environment variables. It's not the exact-same-fucking thing. It is however, relevant. Is it that difficult to understand? You must be fun at parties.
Where I come from, conversations happen by people carrying a topic between different subjects via commonalities such as mentioning "environment variable". Are environment variables not a significantly specific topic to allow such a transition? Really? If you're being consistent with your application of rules of topic specificity I can imagine that your parties would have lots of potential conversation killed: "I'm sorry, David. We were discussing *Issue #4* of *Amazing* Spiderman, Spiderman in general is off topic." And no, I don't think I'd want to participate.
It's pretty silly to assume he needs a full-stack framework just because he wants to output results from a table to a bit of html. Remember, use the right tool for the job.
You can, but personally edge cases come up often enough on their own, inventing more will just get you into trouble. Pick a value, and use it for all your users. Also: Hashing is not designed to stop someone getting in the front end. You can add other provisions for that, such as a maximum number of tries (5 in 30 minutes, reset on successful login), then lock them out for an arbitrary amount of time (10 minutes). Hashing ~~stops~~ slows people from getting the plain text passwords from your database, once they've found some exploit and dumped your users table from your DB server. Salting stops them from using rainbow tables against weak passwords. If you don't think this can happen to you, see LinkedIn for a nice, recent, high-profile instance of this happening, and moronic engineers storing unsalted passwords in a goddamn MD5 hash like it's 1995. Paid engineers. Well paid I imagine. Or perhaps not anymore. Anyhow, I digress. Considering this circumstance, if they've managed to dump your users table from the database, chances are they can access any bits of precious your login form was hiding anyway, so enforcing different hashing standards for different user types isn't gonna do much to protect your service. What hashing *does* do, is stop whoever has nicked your user table from using the login details on another site. We're creatures of habit. I have the username "ocdcodemonkey" in more than one place, and while I have different eMail addresses, most people don't. I also have different passwords. Again, most people don't, and will use amazingly foolish things for a password, like the PIN code to their bank card, or their credit card/social security number, or anything else that's easy to remember for them. Hashing passwords stops people from lifting eMails, usernames, and a passwords from your service, and using it to attack another higher profile target. Webmail accounts, online banking, eBay, World of Warcraft, anything where's there's money to be made. Ultimately, hashing passwords has very little to do with protecting your service. It's more about protecting other services your users subscribe to. Right. Ramble over, advice time: "Use a pre-built security library". Security is hard, and there are people out there who have invested a lot of time in doing things better than you will on your 20th attempt, let alone your 1st. I'm sure people with experience will be happy to offer recommendations. If you're going to ignore that, the best advice I can offer is read. Read about hacking attempts/successes. Password policies. Rainbow tables. "Random" numbers. Cookies and session security. Attack vectors. Injection attacks. Once you get started, I promise the list will grow. Read as much as you can, learn from other people's mistakes (there are always a lot of them, if you're lucky you might find a couple of mine). Then reconsider using a pre-built library.
link to your github account.
I'm not claiming to be an uber sr. dev., but here's my daily/weekly tasks: * install and manage linux servers * install and manage magento stores * manage version control * train new devs: ZendFramework, Magento, Symfony, Drupal, Wordpress . This includes assisting with module/plugin development, as well as reviewing common subjects in computer science. .. so basically, I can lead a project from conception to deployment 
I have that in my resume. Should I put one in the cover letter too?
I started with HostGator. But then I needed shell access. So I bought two servers and set them up in a datacenter and started a web hosting company.
Oh, I guess I didn't complete my thought. The replication would be so we can bring it down for backups with no interruptions or lag on the main server.
Actually, all of the presentation logic is in the view. The only thing the view gets from the controller is data. There is zero HTML in my controller. HTML belongs in the view (like I said). Maybe you misunderstood what I wrote? Epic fail... 
&gt;Spending 4 hours to fix some pure CSS when a table will do the job perfectly is stupid and wasteful. Exactly, this right here is the difference between a senior dev and a junior dev. Focus more on the big picture (getting the job done) than specific philosophies. (using a div or a table is not going to affect the end result one bit) People used tables for layouts since the world wide web was started. They still use it for tabular data. *No one but the developers* care if something is in a div vs. a table, and no browser is ever going to drop support for tables.
XML/XSLT is a well-documented standard for encapsulating and transforming data into a markup language using a markup language. I try to use the right tool for the job. PHP is not a good templating language. I prefer highly abstracted systems. And yes, you do have to think about the available talent out there when picking your languages. Most people who call themselves PHP developers are not great programmers so if you allow them to hang themselves, they will... and they'll bring your codebase down with it. PHP is fastest... but cleanest? I disagree... XML-&gt;XSLT-&gt;HTML will not allow you to write malformed documents and at their strictest settings are self-validating and will not let you output invalid elements or attributes. It also leaves you zero room for making PHP calls inline, ensuring the data passed to the view is the only data being accessed. Anyway... we can argue about it back and forth all day. This certainly isn't the first thread about templates and it won't be the last. However, if you're a PHP dev sick of using PHP and slow, buggy templating systems for outputting HTML, give XSLT a shot. It's not the easiest thing to pickup but it's powerful, quick and is a great solution in the right circumstances... 
There's absolutely *nothing* wrong with whitespace. *Please* use it! &lt;table&gt; &lt;?php foreach( $rows as $row ): ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $row['key'] ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php endforeach; ?&gt; &lt;/table&gt; 
While w3schools is by no means best practice, they do offer a decent starting point for a variety of languages. Just like with any source you should take it with a grain of salt until you have a valid reason to believe the information provided is credible. 
Caching is like ketchup. You can use it with french fries, you can use it with burgers. Hell, you can use it on lettuce if you think it taste good. Not using a templating engine does not mean you can't cache.
Why?
I don't honestly see how a paper resume can in any way be used for a technology (especially programming) related job application anymore... *sigh*
Disclaimer: none of the paragraphs I'm suggesting below are well worded, or good examples. They are here to put across the 'theme' of my points. I've written a few, and have always received at least an interview. The general way I've always written mine is to section paragraphs off to concentrate on specific bits. ## who are you, and why are you here? If the letter is a part of an application form, this can be skipped. Sounds obvious, but it just gets dumped onto HR to sift through, they will thank you for it. Plenty of candidates also send off a generic letter, and this helps to show you at least know what it's for. Even if it goes straight to the team, the person reading isn't always going to be refreshed in the job advert. When I was an intern, at a team with over 60 people, and I had to sift through the CVs and select the candidates for my replacement. I had no idea what the current job advert said, or what my boss had planned for them. If you know it's definitively going to one specific person, then use their name: 'Dear Mrs Smalpintine'. Otherwise 'Dear Sir/Madam'. Again, this also depends on the form. There is a saying with dress codes, "always be better dressed than the other guy". Some people feel awkward about being formal, don't be, it's always better than being too informal. &gt; I am a university graduate applying for a position in your global marketing finance web team as a full time programmer. I heard about this job through my university, and hope to start my career at your company. Two sentences, most. Be brief. You aren't here to repeat the job advert, you are giving them the gist, and it's an easy way of opening the letter if you don't have something better. ## what does this company do, how does it relate to you, and why do you wanna be here? You need to show you understand them, that you will fit, and that you understnad what the job involves. This requires **research** (and lots of it). Don't just repeat bits from their job advert, and don't just repeat things from the front page of their website. Show you really understand them, and hopefully know things about their company, which they don't. If you can, talk to people that work there! If they see your application, they will probably mention you are the guy who was really interested in their work. Otherwise it allows you to get more info on what they do; technical stuff you can relate to. A lot of recruits don't bother with any research, but showing it off shows that you truly comitted to the position, and that you genuinely are interested. &gt; I know you work primarily producing large-scale websites for the health sector, and so understand the high important of the work you perform. I have also worked before on large scale websites, such as FarmersDaily.net, which allows me to be versed in the technical challenges with web building sites of your size. &gt; You also take part in the monthly Tech-Texas Fridays conference downtown, for which I also am a regular participant. I understand the importance of networking, and my excellent commincation skills help me to work well with other web developers within your sector. i.e. You find out what they specifically do, and then break down the important bits, to show you understand them. Then you relate it to you, to show you just happen to be an excellent candidate. ## your skills First concentrate on those which relate to the job, and *especially* why that makes you the perfect candidate. For example: &gt; I know you already use Code Igniter, which I have 5 years experience of whilst working at DogBurger Development, as well as experience with other MVC frameworks. This will allow me to easily fit into your development team. &gt; You also open source a lot of CI plugins on GitHub, many of which I have used previously, and so already have experience with some of your code base. I have experience open sourcing my own projects, such as 'Ape Downloader', a popular CI plugin. As a result I have experience with working with several open source communities, and helping other developers with issues. &gt; You also have a range of sites built with RoR, and on top of my PHP experience, I have also used RoR for building the entertainment site AwesomeCats.com. The point here is essentially the same as the company one, but skills based. You know what the job technically requires, and relates to, so you've broken it down, and then shown how you relate to it. Why you match up. ## other skills Next you can talk about other skills, and again why they make you excellent. &gt; I received a first class degree in Computer Science at the University of Somewhere, which helps to show my dedication and hard work, which I can bring to any technical problem. It also helps me to provide a wider range of experience to bring to problems. More skills may involve projects you had to manage, good organization, communicating with customers and external developers, and so on. Again, you are saying this solely to say how right you are for the position. ## then end &gt; I hope to hear from you in regards to the job, and feel free to contact me if you require any more information. &gt; regards, Angleburt X Warrentspoon. Just suddenly stopping after the skills, is just odd. So this is an easy way of finishing. Like the intro, short, and to the point. ## tl;dr * categorize the paragraphs (intro, company, technical skills, other skills, end). * show a deep understanding of the position * be to the point, less is more (but as well worded paragraphs) * it's not really a letter, it's "why I am awesome, and perfect for your job" * relate **every** point to proving you are right for the job; because that's why you are mentioning them! Also * if a covering letter is optional, provide it (it's not really optional) * if it's not specified, provide a letter (unless they spefically say don't) * get others to proof read, proof read, proof read, and proof read That's my two cents.
Prepare more, Joomla is AWFUL, none of it makes sense you just have to roll with it. 
Because they didn't ask for them! Your cover letter is a brief introduction of yourself to the company, where you're from, brief work experience, position you're applying for, etc. You don't post code into it. Put a link to your code or your website in your resume if you want, but not in the cover letter. You can say something like "I have plenty of code samples on my github account, which can be found in my resume" or something like that if you want. That's fine.
Nope, just htaccess, seems like a much better place, or the vhosts file. 
Exactly, the cover letter is an introduction to you. So, it is highly appropriate to link to areas where they can learn more about you. Leave those areas, like code samples, out of the CV and simply say something along the lines of "If you would like to examine some of my code..."
search n replace should fix that right up. but, of course, they will never remove the short tag option from php.ini..
Don't get me wrong. I love semantic markup and do try to avoid tables for layouts. Show me a way to center variable-height/width content using CSS that doesn't involve about 1000 hacks and inconsistencies, and I'll stop using tables altogether. 
Best bit is that you'd have to have the password in plaintext to do it.* **technically* you don't but I don't have much faith in it being done in a secure fashion.
The tutorial shows the basis for the protection. You'd do the same basic setup across multiple pages. If you pay close attention on highly-secure pages, like your bank's, you'll see they pass _GET parameters with lots of seemingly random characters. It's the same basic practice.
Nicoon, I eagerly await your lesson on the same subject. Until then, you must stop the ad hominem attacks and insults. They just make you look angry and pathetic.
Btcc22 wrote: &gt; Best bit is that you'd have to have the password in plaintext to do it. What?? No, I assure you, storing passwords in plain text has nothing to do with this and is very not recommended.
`===` , not `==`
Sorry, I should have just linked to my comment history I guess. We've talked about that one already too: Ah, the old "designers can't do PHP" argument! That's a good one - but it's a straw man too. For, you see, 1) They still have to learn whatever meta-language you're using, which is usually more tricky than PHP (particularly with filters, macros, and mixins) and 2) If your designers can handle HTML but not a lick of PHP (E-specially if they can do JS!), you probably should teach them or get new designers. This stuff isn't really that hard. That argument came about a looong time ago, back when backend developers were territorial and frontend designers were relatively new on the web. It rarely holds water these days.
I just responded to the "designers can't do php" strawman below. Again, XSLT is an *ancient* way of doing things, we were doing that as a hack back in the Perl days. I'm really surprised you think that it's quick? Or legible? I didn't downvote you there, but you really should have a look at some of the more modern ways to handle it. I think we all just want to write the best code, and I can't say that's even a *good* way to do that.
I have no experience with Cake but I can certainly vouch for CodeIgniter. CI is very small print and lean. There is almost no overhead and wether you like it or not your app will get a good structure. 
Model: Business Logic View: HTML, loops and variables. Basic ifs, no more. ViewModel: Presentation logic. Controller: Glue I differentiate between HTML and Presentation logic because they are different. It's not adding an extra layer for the sake of it, it keeps complicated logic (not just business logic) out of the view. It stops my designer breaking stuff, keeps the HTML clean as hell and still keeps HTML out of the .php files. Presenters (or ViewModels) are pretty common, and are certainly very useful. Mustache very much promotes Presenters in the entire way its built. Big fan.
I definitely appreciate the value of presenters, I still disagree about "keeping HTML out of the .php files" by using a metalanguage. It's an unnecessary divide that buys you nothing. The groupthink these days is that it's good, but I think that's snowballed out of habit rather than good-planning. I do believe you need to keep HTML out of the Controller layer, of course. That "designers will break everything" is another ridiculous argument that I've already covered elsewhere in this thread.
&gt; It doesn't. Just my underlying point ;-)
If you want the most modern you should look into Yii, else I'd suggest CodeIgniter due to its vast collection of resources.
Why reinvent the wheel? He lacks proper framework experience, so this is a great opportunity to fill in that skill gap.
Agreed. And "I couldn't find the reason why the script execution was stopped"... really?!
Given your limited experience with php frameworks, I would start with codeigniter. You will get into trouble when hit email and user authentication. An can not use phpunit to write your test you will be stuck with simpleTest. Symfony2 has very powerful built in ACL and User system and better email library BUT Symfony2 Dependency Injector will hurt your brain. 
Congratulations on having re-invented the wheel.
lol, cover letter. I don't bother. I don't even apply for gigs any more. I get calls... Its kinda hilarious how upside down it is for me X_x
Would you by any chance be a UCC student? Anyway I would definitely recommend CI. Especially since its your first framework. There's a great video series about learning CI over on net.tutsplus.com. If videos aren't your thing though the official CI docs are very very good. 
Every encryption scheme sounds good till you have to expend beyond a single server. Overhead and key management is always going bring you back to plain text (not passwords obviously). 
Designers are not all stupid, I have worked with some that have fixed a few of my bugs, and some that are fine with Ruby syntax too. That's not really the point, it's that if I give somebody a HTML file I want it to be HTML, not logic. Keeping HTML out of everything except Views is of course the aim, you suggested using a Presenter is just moving this logic. If Presenters don't contain HTML, but instead contain logic related to output then that is obviously a different thing. I don't just do things out of habit, or because somebody else said it would be a good idea. I'd consider myself to be able to weight up the pros and cons of using this extra layer, and it's been a benefit in every project. Many of my projects use plain PHP, but those files are just outputting variables and loops combined with Presenters and Models in the same way I would with a templating language. So why use one? Mustache is a great way to enforce this practise, especially in a standalone system that does not have any sort of framework enforcing it. It's not the same as Twig or Dwoo, they were just suggested as alternatives to Smarty (which is just old).
This is exactly my thinking behind it. I could do the whole thing without using a framework, but since they are so commonly used nowadays I figure this would be the perfect opportunity to get a firm grasp of one.
Been reading up on Laravel this morning too, it seems to have great documentation (which will probably be a necessity seeing as this is my first proper project using a framework).
It definitely seems like CodeIgniter is the way to go for me, Cake is apparently very strict when it comes to conventions, which might prove a little too challenging for me right now.
Nope, fourth year in AIT (strangely enough, I had to reject a course offer at UCC a few years back due to the cost of living away from home). Seems like I'm going to try it out with CodeIgniter anyway, not one recommendation for CakePHP. Thanks for the tips!
I'll talk it over with my lecturers, though they haven't had any problems with it in the past (I built a web application in Grails for a project last year). If it seems to take the challenge and thought-process out of it, I can always do it without a framework. Thanks for the input though!
Cool! Discuss with them the separation of your own code and libraries / existing features you're using - or provide a list of files that are written by yourself and it should all be good :) If they say go for it, I'd recommend CodeIgniter - I use it myself (as well as CMS's and things built on it).
There's nothing that says you can't go with Symfony 1.4 which is just as good and easy on the brain.
Too much of anything is not good for the health. :P But I would do more whitespace than what was in your example. I hesitated saying anything as it was an example but cramming it all together with no spaces is a *HUGE* pet peeve of mine.
Will do, thanks for the tip.
I'm too would recommend symfony2 if you would be more experienced. At this point codeigniter is good choice, but don't stop on it.
I have done a few projects with Cake, and found it to be mostly OK. The documentation sucks though. It has a LOT of parallels to Rails ... which is what I've moved to these days after more than 10 years of PHP development. The thing is that Cake is trying to *be* Rails on PHP. If you want Rails ... do rails unless you're constrained to PHP for some reason. Personally, if I'm going to develop in PHP I'll opt for CodeIgniter. It's light and stays out of the way. If I want a mature MVC framework, Ruby On Rails is second-to-none, and I've worked with a lot of them through the years. This is not to say that RoR is without warts ... you won't find a single framework that doesn't infuriate you once in a while ... it's just a lot easier to work around the warts in Rails than in other frameworks, and there seems to be a lot fewer of them.
*Definitely (I'm an ass, I know :P) Looks like I'll be using CodeIgniter anyway, it's active community is a real big attraction and judging by the amount of people who have recommended it, it must be the best one suited to my needs!
You might consider Zend Framework as well. It has the advantage of being so flexible -- You can use bits and pieces of it without having to learn how to do everything *their* way before you can get anything done. I've been using ZF for several years, and only just now am I starting to do entire projects the "official" way.
That's good to know, though it's only a college project so I'm not expecting huge numbers or for it to even be maintained afterwards. Still though, I would like to develop it to the best of my ability so to know that it's a stable platform is a big plus.
To be a senior developer... First of all to have an excellent understanding of programming principles and good programming practices, OOP, patterns, objects, etc. Understand how a web app works, HTTP requests / response. Web servers, hosting environments, etc. Then it gets more specific to the programming language. You have to have a good grasp on the ins and outs of PHP, how it works, it's capabilities, PHP SPL, etc. Being a senior developer is more about your general programming skills than some specific PHP knowledge. Of course you need to have that too, but once you develop long enough it will come naturally regardless what language you're using. If you're ready to go a step further with PHP I highly recommend to check this site out: http://www.phptherightway.com/
One of the best lessons I have ever learned as a developer is that everything has already been done and there is no reason to reinvent the wheel. You do say that "half because I want to see if I can do it", so this is not really relevant. But if you are really lazy like me just get a copy of datingpro http://www.datingpro.com/dating/ and your done. Maybe it can give you ideas on how to create what you want. I made a few dating site using it. http://www.neumate.com/ 
CI over CakePHP absolutely.. I'd recommend kohana though: http://kohanaframework.org/
Nope. It's an introduction, not an autobiography. You wouldn't put your references in your cover letter, and you shouldn't put your code samples either. Everyone reading your resume and cover letter *knows* that you have references and work samples. If they like your resume, they will ask you for them before or after your first interview.
Ah haha, personally I have nothing against whitespaces. But I hate ugly codings. Like the &lt;?php } ?&gt; is just ugly and really doesn't explain anything without adding a comment, which means more clutter to read.
Why would you use $this inside a view? I prefer &lt;?=e()?&gt;. I've never noticed Dwoo is on SVN, I always used the [GitHub repo](https://github.com/Seldaek/Dwoo) instead. Research Mustache a little more. You'll start seeing the point if you use it, but cursory glances of these systems rarely get anyone hot.
As someone who hires engineers, I love seeing github accounts of candidates.
That wasn't what he asked. By all means, put it in your LinkedIn account, but leave it out of your resume and cover letter.
Frameworks do tend to have big footprints, but you come to appreciate that when you work on big projects. My company uses Kohana (which I *love*, after using all the others myself). I actually started development of our platform without a framework, and once the project gets to a certain size you realize that it's just silly not to use a framework. For smaller projects, I agree with you that frameworks are sometimes too heavy. That's why I switched to Kohana from CodeIgniter. Kohana isn't the lightest out there, but it's very light compared to the other guys. It's very intuitive to me, but you may find the learning curve a little steep if you don't have lots of framework experience because the documentation isn't great. If you have a smaller project (and you can't justify using a framework) but want help abstracting your data layer, look into using something like [http://www.redbeanphp.com/manual/](http://www.redbeanphp.com/manual/). It is generally accepted that frameworks are the way to go for medium and large-sized projects. The people who built the frameworks have considered many of the common issues you run into when building websites, and have already done the work for you.
Holy shit you deserve far more upvotes, that's a great post man:) Senior year of college we had a couple courses dealing with just interviewing and resumes, etc... The points you listed here are great, kudos:)
So long as he's making an informed decision. :)
Good post. Was never into the bloated frameworks for some projects but after reading this and looking at Kohana online, I may look into it at giving it a shot for some projects of mine.
This article and author are ridiculously naive. Keep in mind this is from the same author who suggested [hashing things multiple times to increase security](http://thomashunter.name/blog/per-user-password-hashing-algorithms/) until he was quickly educated about bcrypt. * PHP as a daemon process works great. Like any language, you need to be careful with memory management. * Since event loops are the current trend to solve *everything*, you can do that in PHP too. [React](https://github.com/react-php/react) is a great way if you need it. * PHP has numerous ways to store data in memory so all clients can easily access it - memcached, apc, redis to name a few.
Wow thank you that was very well done.
Re-commented from below: my biggest suggestion in regards to using Kohana is to read the documentation, but then whenever you have a question about how something works to just read the Kohana source code (or the Kohana API documentation, which is just basically the source code documentation). The code itself is very clearly written, but the narrative documentation/how to/tutorial sections are pretty week. Don't be afraid to poke around!
Literally just started getting my head around CakePHP 2 days ago, got to say although I still know very little about it I can definately see massive pros to it. Having very experienced groups of programmers having essentially written a lot of the security and main sections for you and having something that shows me how to structure correctly just makes me feel a little better in the sense that I know it's harder for me to do something stupid! On the cons I think the first time you pick one up it's a daunting task to learn and you have to change the way you code a fair bit, but it seems to only change the way you code for the better.
Using an established, widely used framework with good documentation is awesome for group projects. You don't have to spend time reinventing the wheel or figuring out how to use code by some other guy who decided to reinvent the wheel. 
&gt;**The official website is quite ugly and outdated.** The docs are okay, the user contributed notes are very useful, however the method to update docs involves SVN and hacking away at XML files, and is not exactly encouraging for most people to write docs. uhh....really?
Pros: knowing a framework can get you a job.
&gt; Kohana was actually forked from CI with the intention of being the "lightweight fork of CI" 95% sure it was forked to be a PHP5 version as CI was aimed at PHP4.
Alright... this did take me literally 5 minutes: http://jsfiddle.net/MBfHV/1/ Can you convert it to CSS and make it work the same?
Laravel. http://laravel.com
&gt; You don't have to spend time ... figuring out how to use code by some other guy who decided to reinvent the wheel. I realize there's more to it than "some other guy" when talking about a framework worked on and used by many people, but this is still exactly how I feel every time I try to learn one. 
Did you read the FAQ? This is the most frequently asked question here. Here's the supplied [link](http://www.reddit.com/r/PHP/comments/f39ff/php_frameworks_which_one_do_you_prefer_and_why/)
I vote for CakePHP, powefull, full featured API and Since I am jumping from RoR to PHP I like check the matches and differences.
Another vote for CI. I've used it to build an e-commerce platform, social networking platform for medical professionals, and at my day job we use it for our app that helps our clients optimize SEO and SEM with just about every larger search engine on the planet.
How long ago did you use it? It's gotten a lot better lately and the documentation is there though sometimes not in the most obvious places.
It will be tougher to learn but once you do development will be quicker and better organized. It's a true OOP framework. I learned the framework from scratch and built a useful app for myself in five weeks. The first two-three were pretty frustrating tho and I considered giving up multiple times. I'm building in Symfony2 now but for smallish projects where the choice was Yii or CI I'd pick Yii every time. CI was the first framework I learned however, no framework has better documentation and is easier to pick up. You could also learn MVC this way very easily.
I'd say CodeIgniter, Kohana, or Symfony 2. I use Kohana, personally, but I've used Symfony 2 as well. They are both bad ass.
That's the reason why I started my own. It's functional (three websites already implemented with it) but still not stable. However this has allowed me to base the system design on the business model and derive the rest (as far as possible). I've seen fws where the business model is derived ... from the database structure? That sounds illogical to me... 
interesting... I should probably check Kohana out at some point. I like how simple CI is and I'm kind of scared of the lack of documentation everyone talks about... Does Kohana have an ORM alla Django?
Actually I didn't. Sorry. Thanks for the link :)
This gives some interesting advice http://www.joelonsoftware.com/articles/SortingResumes.html
Star wars jokes. A little humor goes a long way, and I figure any company that doesn't like to laugh is probably a company I don't want to work for.
&gt;regards, Angleburt X Warrentspoon Holy shit. I know an Angleburt X. Warrentspoon
You don't have to be professional, but based on your post you sound immature because you need to brag to people "on the internet".
Hmm it might be usleep() before a particular PHP version on Windows that does this, unfortunately I can't remember how I encountered this.
Looks like jinja2 (python) to me.
TR goes between &lt;table&gt; and before &lt;td&gt;, as I said, the code was an example. Yes, the $rows would be the result of an mysqli_fetch_assoc()
You're the one who appears to be trolling. Time and again admins are advised to give their Apache user very limited privileges, as this is a main hacker target. See http://www.ehow.com/how_6637789_secure-apache-server.html Quit taking every little thing out of context and becoming unduly argumentative about it. It's easy to destroy; hard to create.
This is Twig (it actually has a lot from Python's jinja)
This is so true. Most job vacancies in my area ask for Zend / Symfony2 / CodeIgniter skills rather than simply knowledge of PHP. 
Depends on how big your account is, but yes. If its tiny, maybe only in the CV. In the resume it's very factual; I have a GitHub account with many active projects, including x, y and z. In the covering letter it's there to explain why your an awesome candidate.
IMO the strictness is good. Strictness means patterns, and patterns are easy to learn. It also means if you follow it, you will have *less* code to write. 
Cover letter? Have never written one since I work exclusively with recruiters. When I used to review job applicants I never received a cover letter either and honestly wouldn't have read it. I was mainly interested to see previous work and what tech they knew rather than their career ambitions. That stuff can wait for the interview when you're trying to determine if they're a culture fit.
It's been a long time since I've had to deal with this. However, as I recall there's a library you need to update in order to get PHP to talk to MSSql. I'm really digging in the dusty corners of my memory now, but I believe you need an updated version of ntwdblib.dll
I did it in javascript for fun. It updates twice a second and has 6 decimal places for effect. http://jsfiddle.net/xVgqp/1/
Use Microsofts pdo driver if you're on windows. If you're not on windows, you're in a tough spot. I think I've used the sybase (pdo?) functions with some luck. Microsoft sql is basically a continuation of sybase. I'm just speaking off the top of my head..
2000server is the ODBC connection name, I see that you change that value to 2008server... did you create the ODBC connection pointing to the new server?
Hey (fellow irish man here), I would add that I think this is the wrong question to ask. People who use Codeigniter will say they think you should do your project with Codeigniter, those who use phpcake will say use phpcake and so on... In php everyone has their favourite framework, templating lib, cms, etc.. etc... Ignore all that.... When starting a project the most important part is planning it properly. Defining first what you are tyring to do, the use cases, the UI mocks, the db modelling, the overall feel and objectives you are trying to accomplish.... (ok you probably already did that) But when coming to the end of your planning you need to make some decisions about technology. To make those decisions you firstly need to define what you need. Do you need an ORM, do you need unit testing, do you want to have a rest interface, great documentation, and so on and so on... Now CI doesnt come with an ORM, the production version of CI is hard to unit test, it doesn't have a restful interface. Now there are (some great) ways of doing all this in CI, but thats not my point. My point is you need first a plan of what you have and then what you need to complete this project, and even a plan to extend the project after its done, like scaling up and ease of modifying components. That helps you choose the technology to use.
When we look to hire developers one of the first things we ask is what frameworks they have experience with. It's not a deal killer, but it's certainly a plus if they do, so learning a framework is probably a great idea if you want to get a job doing PHP. This has also been my experience at most places I've interviewed. And for what it's worth, after doing some research my company did pick CI as their framework of choice. It's very easy to learn, quite powerful and the documentation is some of the best I've ever seen for an open source product.
&gt; I may be the dissenting voice here, but I am not a fan of templating langauges and in favor of using shorttags in my views (HTML files). This is *always* the top comment on these posts. Can we just accept that most people prefer using PHP as the templating engine?
Bad news for the 0.000001% of developers who need over 1000 classes on a single page load.
What version of PHP / web server are you running? This will decide how you set things up. Also, what operating system is all this running on? At my company, we develop some reports using PHP 5.3.5 served by Apache 2.2.20 running on an XP workstation that connects to a Windows Server 2008 platform running MSSQL 2008. We've also successfully run queries using an older version of PHP 5.1. What do you have? If you're not sure, write a little script like this and view it in a web browser: &lt;? phpinfo(); ?&gt; We're not using a string formatted dsn for the connection, nor do we have to specify the driver - we're using the precompiled extensions that come with this version of PHP and the PHP functions mssql_connect and mssql_select_db to setup our connections. EDIT: Ooops, I meant mssql_connect and mssql_select_db, sorry bout that... 
Out of interest, do you have an example of how Mustache/PHAML would improve the situation (eg displaying a select box)? Is it more than just calling some function?
Just look at the documentation to see how display logic is handled: https://github.com/bobthecow/mustache.php/ You can create view models, or presenters, that do complicated junk that would normally go in the view. Something as mundane as displaying a user avatar, which has a link to their profile and displays their username, and maybe a real name instead, etc. This could be a partial if it contains a bunch of HTML, but maybe your framework has helps to make that easy. Really, just try it. I can't sell somebody on a design pattern based on some comments on reddit.
I rarely (never) find this level of micro-optimisation useful. 
Love this write up. Touched all points that need to be conveyed and how to be brief about it. Thanks!
PHP is definitely not nice to work with when it comes to character encodings and special characters (and unicode in general). This function should do what you're looking for, it will convert any unicode characters into its corresponding html unicode entity: function htmlallentities($str){ $res = ''; $strlen = strlen($str); for($i=0; $i&lt;$strlen; $i++){ $byte = ord($str[$i]); if($byte &lt; 128){ // 1-byte char $res .= $str[$i]; }elseif($byte &lt; 192); // invalid utf8 elseif($byte &lt; 224){ // 2-byte char $res .= '&amp;#'.((63&amp;$byte)*64 + (63&amp;ord($str[++$i]))).';'; }elseif($byte &lt; 240){ // 3-byte char $res .= '&amp;#'.((15&amp;$byte)*4096 + (63&amp;ord($str[++$i]))*64 + (63&amp;ord($str[++$i]))).';'; }elseif($byte &lt; 248){ // 4-byte char $res .= '&amp;#'.((15&amp;$byte)*262144 + (63&amp;ord($str[++$i]))*4096 + (63&amp;ord($str[++$i]))*64 + (63&amp;ord($str[++$i]))).';'; } } return $res; } If this doesn't work properly, try utf8_encode and then utf8_decode on the string before passing it to the function. $str = utf8_decode(utf8_encode($str)); $fixed = htmlallentities($str); This may seem a little bizarre, but it works consistently and has handled everything I've thrown at it (Arabic, Cyrillic, Chinese, etc.) ... and it definitely beats having to write character maps or regular expressions (which would obviously only support unicode characters in your map/regex). 
Commenting for future reference 
Why are you trying to decode them? Just output them directly to the browser using echo, print, or whatever you'd usually use (you may need to add &lt;meta charset="utf-8"&gt; to the &lt;head&gt; before they display correctly). Something like this should work (put it on your server and then just put in whatever unicode symbol in the text field - they'll print out fine). http://codepad.org/MBWTgnz7
Exactly. Pluck the low-hanging fruit (cache aggressively, etc.) then throw more servers at it. It's bound to pay off better than creating complex and difficult-to-debug workarounds for some sub-optimal but straightforward code that's taking 0.001ms longer than it could.
&gt; Is there a straight forward way in which this can be done in the latest version of PHP without any extra tools required? Is it possible you're overthinking it? I am up to my elbows in oddball unicode characters on a daily basis and I don't do anything special with them at all. They just work, as long as I am telling the browser to expect utf8 with the appropriate header or meta tag. Of course, you have to use the mb_ functions instead of normal substr and strlen and the like, but if you're just receiving and displaying them, a simple htmlspecialchars() with the encoding set to utf8 does the trick safely. Can you show the simplest possible code sample that exhibits the problem you're experiencing?
&gt;Until then, you must stop the ad hominem attacks and insults. 1. Nowhere is there an ad hominem. 2. The comment is only an insult if you take it as one. &gt;They just make you look angry and pathetic. Okay, so to disagree with you and point out massive problems in your lesson plan is to be angry and pathetic. Interesting. Well, keep telling yourself that. &gt;Nicoon, I eagerly await your lesson on the same subject. The mere idea that your lessons must be correct until it has sufficiently convinced you otherwise is just inherently fallacious. I don't need to provide a separate lesson plan of my own to point out the flaws in yours. Come on. 
You don't understand the point of CSRF protection. CSRF stands for Cross-Site Request Forgeries. That means being able to send requests from an (usually authenticated) user's browser, either via a GET or a POST. For instance, you might have the following on a third-party website: &lt;img src="http://bank.com/transfer.php?account=MrEvil&amp;amount=99999" /&gt; Or you could have a form which is submitted to bank.com (e.g. via javascript or a click action. Anything which triggers a submit, really). In either case, it is a request which the user did not intend to send, but was sent via the user's browser to execute some action. CSRF protection on a login form is utterly pointless, as a request could not be forged without knowing the user's credentials. If the third-party knows the user's credentials, then all is lost anyway. Game over. It's a complete act of futility. CSRF protection belongs on pretty much every other form, but NOT ON A LOGIN FORM. 
By the way if possible add a distributed social networking protocol to your site.
The last time I checked it, it lacked documentation. I don't know if that's still the case, it's a good framework nevertheless.
AFAIK, you cannot guarantee that the receiver does not get charged. This depends solely on their service-providers pricing.
No you dont 
future reference 
Well, if you're outputting them to a HTML page you can use entities.
It would be much better if autoloading actually happened automatically. A simple configuration parameter executed in your config, such as ini_set("autoload_dir","classes"); and PHP handles everything else. Then you can create your directory structure and add namespaces to your files which match. No worrying about if your autoload function is the best one to use or if someone else has something better.
$_POST should receive them perfectly. If it doesn't, try setting a character set on the &lt;form&gt;, but I've never had a problem with it. When it comes to displaying them, make sure your character set of your document matches that of what is being sent. Don't use htmlentities to escape the content. Use htmlspecialchars instead. That will prevent it from fucking up special characters. htmlentities is only needed if your charset doesn't support the characters being sent. But if yours does, there is no need to use it. Just htmlspecialchars to prevent HTML input from being parsed.
 $info = mb_convert_encoding($info, "HTML-ENTITIES", "UTF-8"); It's pretty simple with mb_convert_encoding. Also: $info = mb_convert_encoding($info, "HTML-ENTITIES", mb_detect_encoding($string));
hjgjh768's [comment](http://www.reddit.com/r/PHP/comments/wwg2j/reading_in_special_unicode_symbols_from_post/c5h2vxp) resolved the issue. Being a test page I hadn't given any content information (I was just echoing the $_POST actually).
&gt; The thing is that Cake is trying to be Rails on PHP Actually, the developers have repeatedly told me that it's not on their irc channel. Certainly, it's taken *inspiration*; but they're completely doing their own thing now.
If you're talking about CakePHP, it uses PHPUnit.
That was around 2007.
Is GD not easy enough for people?
I am sorry ofcourse I mean Colums, I always mix these up. ROWS can be unlimited.
Yes you are absolutely right, here is my php code: http://ufcsverige.se/dalani/index5.php and here is the csv file: http://ufcsverige.se/dalani/data.csv
Delimeter FIXE the problem I am very thankful! thanks mate!
I think your math is just a little, tiny bit off.
I wasn't advocating Yii for that feature, but the concept that it handles the most mundane tasks. This can be seen throughout the entire framework workflow. But you are correct, some of the other newer/recently updated frameworks are perfectly reasonable.
I guess having a library to handle some aspects would be nice. Definitely going to check it out once I work on a project that needs image manipulation.
Hi, this library works great for cropping, resizing. I am however experiencing a minor problem. When the image is resized (downsized) you can see pixelated edges. Notice the hand and forehead in this test: http://i.imgur.com/0erJ9.jpg Is there any way this can be smoothed in the process?
No, try the imagick API instead and you will never want to go back :-) 
You should really try imagecopyresampled instead of imagecopyresized
There has already been work done to move auto autoloading functionality into SplClassLoader, here's the [RFC](https://wiki.php.net/rfc/splclassloader). 
I wonder how pre-loading the classes would affect the memory usage ?
Hmm, ok. I did already see that page and it looked exactly like the thing krues8dr was criticising - adding logic in pointless pseudo code. But no worries, I will take a deeper look into it when I get chance.
fixed by replacing **imagecopyresized()** with **imagecopyresampled()** in your code.
...and persisted until *at least* 2009-2010, because that's about when I was doing some serious Cake implementations. It was *in the talk* all over the place that Cake was essentially a Rails implementation for PHP. When I actually DID switch to Rails in late 2010, the parallels (and places where Cake fell short of Rails) were very clear to see.
I think i've finally gotten to the point where i consider myself a 5/10 or better on 1.4. Is there a good way to up to speed on 2? It just seems sooooooooooooo beta that it's not worth the effort (I mean with 1.4 i can do a lot right now- if 2.0 becomes stable i'd love to move to it). Frankly, i don't understand why there was such a push to close 1.4 beore 2.0 was production ready (with all documents, etc)
To me it seems like 2.1 will be what 2.0 should have been. First major change was moving from the *deps* file to [composer](http://getcomposer.org/), and many reworks on the form component, which is the main topic of most pull requests. It's definitely not over yet: [[Form] RFC: Integrate Zend\Filter into Form](https://github.com/symfony/symfony/issues/3973).
I'd use CI. CI was the first framework I used for PHP. It was very easy to pick up and there's pretty good resources online to help get you started.
Sublime is awesome.
Frameworks help with organization and do things that otherwise you would have to build yourself. Why reinvent the wheel?
joomla is solid. I use the top 3 cms and I can tell you that joomla's api and structure is the most comprehensible.
I don't know why you're being downvoted. Inconsistent function calls and ridiculous errors aren't why people use PHP, they will kill it.
Also I've experienced issues working with difference PHP versions and GD versions, I'm hoping this would take some of that into account.
Google for "zend 101", its what i was suggested in ##PHP when i came with the same question to them. &gt;There is also the issue of multiple environments (windows/*nix) and I would like to know how the PHP community here prefers their working environments and editors. You should include basic Linux concepts, as the majority of the servers run Linux. And when it comes to editors, vim seems to be the most popular choice, but anything with a good syntax highlighter will do. Which editor to use is a matter of personal preference, so just make a list of the most common editors and have your "students" try them out. Again, dont worry about this at this stage.
i'm totally down to learn PHP . I have osx + sublime already ;D
I have basic programming knowledge, and am also learning a good bit of SQL at work. I'd love to learn how to break into PHP.
I've been studying PHP OOP and I'd love to see some good lessons on the practical uses for this type of programming. I want to see how something comes together with OOP.
I vouch for his expertise in php, I have worked with him for years and he knows his shit.
bumping
and mglinski knows his shit. haha
I totally agree with you on the Linux. Every production environment I have worked with has been Unix derived, whether it be Mac OS X Server, Ubuntu, or a Red-Hat distro (CentOS). I have lots of experience in all of them, and have just learned VIM about 4 months ago. :)
I will recommend you osclass ( osclass.org ) which could work for you. It's very customizable. 
I'm using greengeeks.com I haven't had any issues. I am using their shared hosting option because at this time vps is overkill unless you are doing something special and require some additional software. They don't have django but they have the php mysql stack as well as ruby on rails.
Check out [PHP Mentoring](http://phpmentoring.org/). We're available at #phpmentoring on Freenode IRC.
Very interested in the newer OOP stuff as well as PHP Frameworks (preferably Kohana, Symfony or FuelPHP).
No, they're for ipv4 only.
I develop on Linux, about 6 years of experience, and I can also do database and javascript. And I like teaching. 
I'd love too! I've been meaning to learn PHP but always put it off.
I have an intern who knows html/javascript fairly well, but would benefit from some good PHP teaching. RE editors and environments, Notepad++ is free and fairly common for Windows users. And I find a lot of beginners simply FTP to their shared linux hosting vs. setting up a local development environment. Shared linux hosting + FTP is fairly cheap and universal and would be a good common ground to suggest to your students. Of course let them setup any development environment they want, but better not to get bogged down in anything too environment specific and just focus on the PHP.
Tell me how to build an app in php. I've done the basics, setup a database, connected to it, pulled data from it etc. But no one covers a full app build for the web. Sanatising inputs, prepared statements (wtf are they?), new injection proof ways of connecting to a database, speed of queries/overall application, image resizing without running out of memory/killing your server. I want to see a tutorial that shows how you over come these problems in a real world, start to finish project.
I could build it without one, I'm fairly confident of that. I would like to learn a framework before I graduate though so I figure why not learn one on this project?
[A commentor in the original article tried it.](http://blog.ircmaxell.com/2012/07/is-autoloading-good-solution.html?showComment=1342920295742#c3682209653914208288) Autoloading gains a larger performance boost than fixed declarations by using APC, however fixed declarations are still faster. Both are sped up by 80-90% simply by enabling APC. To me, the only real take-away is that you *must* run APC.
I am interested.
It's far from 'mostly useless'. Fixed loading sees an 82% speedup with APC. Autoloading sees a 91% speedup. Using autoloading, there is still much to be gained from APC.
Very interested !!
Will do. I'll probably start a base lesson for people to gauge where they are at as a PHP dev and then work from there. This would be a good way to measure where someone is.
Would you mind sending me a PM with some instant messenger / contact info? I'd enjoy a conversation with you. :)
Definitely. I'm currently becoming active in Laravel, so branching to those for lessons will not be a problem at all. Especially FuelPHP.
I do this a lot. My framework of choice is currently Laravel and I spend all day on PHP.net (though I've always done that), on the Laravel docs and API code, and the IRC to better expose myself to real-world problems being solved in the framework. Looking through code of a project based around what you need is a great way to solve problems and seeing how many people do it is the best way to go.
There literally (I mean it this time!) isn't any reason to not be using APC.
I haven't seen Laravel, looks interesting. Going to look through the documentation. Screencasts are a nice surprise. Thanks for mentioning it.
Why not just program the whole thing yourself without using a framework? That's the programmer I'd hire. 
I am in. no iOS, but should get the main teaching with WAMP right?
Webfation - amazing web hosting company. They're almost a cross between the typical LAMP web host and managing a Linode server. For some people familiar, it's a bit similar in management style as some cpanel reseller programs that some companies offer. With a single hosting account, you are assigned x bandwidth and y disk space. You can actually setup any number of domains with that one account vs the typical host where it is one hosting account per domain. The only catch it the number of sites you have must not exceed your bandwidth/diskspace allowance (these are upgradable). So this is great for situations where you're hosting lots of low bandwidth sites since you could fit about 20-30 on a single $9.50/mo plan which is amazing since typical hosts would be $4-$10 per domain. They also use a concept of "applications" where one of the benefits is in the admin being able to register a subdomain or URL that points to a different app so you could basically create a URL like staging.yourdomain.com which is a completely independent php codeset tied to that URL. Personally I like to host the client's staging site from my own company's domain so for every site I create a new subdomain named after the client and make a new php app and deploy there for staging. Beanstalkapp.com is also a great tool if you're using source control since you can push your code to your private beanstalk repo and have "deployments" setup in beanstalk that can send your code anywhere with many options on how. So when I push back to my remote master branch, it automatically ftps my changes so with no extra work at all my site is deployed to clientname.mycompany.com. 
hahahaha
hahahahahaha. parenthesis are totally needed on language constructs. so legit bro.
I met him years ago while working with a project he created: http://xtrafile.com/ We haven't had time to work on it though in the last while :( --edit-- I should note it's old school codeigniter. We are both way better than when we started working on XU 2.
I second this ! Otherwise the client (in this case the browser) does some nasty stuff and use the default charset, which is not utf8
I know exactly what you mean. A lot of my early earning (and some advanced concepts) I found easier when explained in a video. A great explanation makes all the difference and I constantly review resources until I remember them. But if it's PHP explode/implode, fukit. I have lots of experience doing database driven apps. Just recently I helped out mglinski with a pastebin clone that we will be open-sourcing (unless he had changed his mind). It is written with Redis and that was a totally new engine for me (I have worked with APC and Memcache though) To your PS: I was also just like you a few years ago. I was turned onto Codeigniter and it was the first framework and introduction into objects. Now that I've tried different frameworks and progressed, I've come to realize that there is no best framework and choosing what you like best in them over which is overall better. For instance, I love Laravel right now. I came from a CakePHP development background just before it. Even though I loved Laravel, I really enjoyed the CakePHP form helper due to it's simplicity for having multiple table handling. So what can I do about it? I can use composer and install CakePHP as a vendor and borrow the Form helper from CakePHP and write a small wrapper to make it work with Laravel. Borrowing code and ideas is one of the best ideas I've come accustom to. Projects like Composer (http://packagist.org/) is exactly what PHP was lacking. Instead of doing it all manually, I can have it all done automatically and it works better when working with GIT. I went a bit off topic, but the main idea of what I wanted to express was that going outside of your norms and learning different ways to approach problems has been valuable. I now develop differently. In a smarter, leaner way. I borrow as much of my own code as I can, and if I can't, I write it in a way that I can later on which helps keep your systems lean and makes much easier to debug.
Better to use one of the user provided functions that converts ipv6 to long... Storing a string is far more expensive data wise.
I only know C++...but I'm very interested in learning PHP!
#1 . Some one should make framework and call it Fu-kit :D #2 . Why use implode, when you can just say $new_array = $valueOne .', '. $valueTwo ?? (unless .', '. &lt;-- this is a codeigniter thing) to learn I have been making many projects jumping back and forth as I learn more, I'm just about ready go BetaLive with a funny-image-index page. but I know my models are a mess. example. I have places where I get arrays but return only [0] vs. using the commands for returning single entries from the database (I haven't learned how without looking it up so I have just been coding how I know to do it so it will work then I can tweak later) How bad is it that I do it that way ?
&gt;however there are many other features that you could add in such as: &gt; &gt;Check if the URL exists before adding it to the database I don't see how this could possibly be optional!
That's not completely true. The following short tag is what will always be 'on' from now on: &lt;?= $var ?&gt; i.e. the *echoing* short tag. The following, however, will NOT: &lt;? echo 'I might not always be available'; ?&gt;
Oh right I see. I only asked because I'm third year UCC and we did PHP in first year. Ya I tried Cake before I tried CodeIgniter and I found it to be a lot to learn. I think CI is a lot more approachable. You can use a much or as little of it in your app as you want. 
I really want to learn PHP, thanks!
Thanks. Does that need to be updated on the server that the database is on, or the one that the web services/PHP are on?
Sublime Text 2, Sequel Pro/MySQL Workbench, Git, CodeIgniter
IMHO, PSR-2 can go to hell for exactly the opposite reason: I am not *not* putting my open braces on the next line ;) However, I feel that this exact debate is a good reason to avoid PSR altogether; a standard that seems to invite endless bickering over minor stylistic choices like this isn't any sort of standard at all. We need more things like PSR-0: definitions (or at least interoperability standards) of how to do things, not how they should look.
[let me google that for you](http://www.lmgtfy.com/?q=microsoft+pdo+driver+install)
Thank you for tirelessly contributing useful and insightful material to the PHP community.
1 million rows is a fairly small database, I think in my database I have like 50 million rows with an ip address attached. Member data, logged events and such quickly add up. You may scoff and think "pff" but once you graduate out of junior league websites indexing another 300 MB of data means you slow down stuff. And quite honestly, my 50 million rows is a lot smaller than some of the database I have seen in the past.
I've always wanted to learn C++. haha
Thanks. They're all Windows machines, so that's not an issue. The new SQL server doesn't seem to have that library. The PHP one does, in 7 different places, with date modifieds ranging from 2004 to 2007. ugh. The thing I really don't understand is that on the PHP web service hosted on the same machine as the SQL, I'm able to do a simple odbc connect and everything works fine. But for this other PHP web service on a different server, I can't seem to get a successful connection to save my life. I really don't know what to do about it. :(
microsoft's pdo driver installs into php as an extension. It's not a matter of having the right php file in your code.
Oh, ok. Thanks. According to [the system requirements](http://msdn.microsoft.com/en-us/library/cc296170%28v=sql.105%29.aspx), SQL Server Native Client is required on the computer where PHP is running. It's unclear to me whether that means that I just need to install SQL on the PHP web server, or whether that means I can only connect to SQL that lives on the same machine as the PHP. I'm dealing with two different servers here, and of very different ages (the SQL server is brand new, the PHP server is ancient).
I appreciate you taking the time. Thank you.
Like your blog. Keep at it. :)
Same here. Since there are multiple ways to achieve a goal with programming, it would be nice to see what approaches of mine that, while they work, might not be the best way to approach it.
Alright, thanks a lot :) And no worries about the late response. Its at least a response!
You have two sides to this authentication coin. First you have the actual design considerations that Nicoon listed. Second you have the code that deals with account CRUD. It's at this point that I would like to mention [BrowserID](http://browserid.org) which is like OpenID but simpler and with *useful* emails instead of URI's. The alternatives of signing in with Facebook or Twitter can also be beneficial. The reason that I mention these is that they solve the forgotten password requests, registration forms, validation links, and other non-sense for you so you can focus on building your actual application.
Don't. There is nothing more annoying than clicking on a link when using a mobile device and getting redirected to somewhere other than where you want. Better to use media queries and responsive design to reformat the requested page for mobile devices.
Xenocross is pretty much spot-on - my preferred choice is to implement OpenID and use that as the backend for larger sites - depending on the size you can setup your own OpenID provider from one of many available, tested libraries.
HTML Purifier is a great tool; it's one downside is that it's slow, so you'll definitely want to apply it to input, not on output. A++ would recommend.
MAMP is good, you just cannot (or cannot easily) install other php versions other than what it comes with. What do you mean by "composer"? Is this your IDE or editor?
This is still mostly relevant: http://blog.magudia.com/2009/08/22/installing-php53-apache2-mysql5-using-macports/ The only difference is that the php ports are now called [**php53**](http://www.macports.org/ports.php?by=name&amp;substr=php53) and [**php54**](http://www.macports.org/ports.php?by=name&amp;substr=php54) edit: changed to a better (more recent) link
What exactly was giving you problems? Are you running windows? There are definitely problems with PEAR, but it's still relevant, unfortunately.
Let me guess, you installed the old version from the default channel, rather than either explicitly discovering the PHPUnit custom channel, or using autodiscovery? (pear install phpunit, rather than pear config-set auto_discover 1; pear install pear.phpunit.de/PHPUnit)
[FYI](https://github.com/composer/composer)
Why is it critical that mobile browsers not access that page? Will your server melt, or is it not possible to render it the way you want it to for some reason? I think restricting access to site resources based on UA is a bad idea. Seriously, what's your use case, and maybe we can offer some better advice. 
... And the fact that someone is required to know to do that is exactly *why* PEAR is a waste of disk space. 
This sounds like it would be super helpful. I love posts like this. There's so much that I'd never discover if not for reddit.
Just cache the results at output time. That way you can reconfigure filtering and have it affect old input as well as future input, and don't lose users' data if you mistakenly filtered something which should have been allowed.
If you're coming from ubuntu and prefer using apt-get, then I highly recommend using homebrew on OS X. Its a package manager built in ruby (which is already installed on OS X), is very easy to build formulas for, and strongly discourages the use of sudo. * Homebrew: http://mxcl.github.com/homebrew/ * PHP-related formula: https://github.com/josegonzalez/homebrew-php
I resisted using it for a while because it seemed like such a massive bohemoth of a library, until I realised its correctness makes up for its slow hugeness. So, use it. But use it sparingly, and only include it when you're actually going to use it.
While I love Composer, what problems did you have installing PHPUnit through PEAR? The instructions on the PHPUnit site are pretty short and easy to use. 
Pear became easier for me after I deployed my own pear channel. Can be tough to learn. Composer does fill the gab for project by project needs better. Given pear inspired the other package management tools it's hard to hate it. 
The problem with this, is that caches expire. If you ever have to blow away your cache for some reason, having to re-clean all your HTML is going to cause one heck of a headache till it all gets cached again. If I was that unsure, I'd store the original alongside the clean (disk space is cheap), and then I could re-generate the clean at a time of my choosing, en-masse, whenever necessary.
The slowness does sound unfortunate. But what else can you do if you want to allow HTML in a secure way? Is there a better tool?
I've honestly not researched the matter much. It's just what was used in our setup. Also if you do not have a cache like xcache do NOT use this. HTML Purifier has soooooooooo many classes each in their own file.
It's good but I prefer [htmLawed](http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/). Much smaller and faster.
No, as I described to Veonik, it just didn't install anything, but said that all were ok and installation went successful
I don't know what is pyrus and go-pear, I just installed by typing apt-get install php-pear
I've gotten used to using MAMP, which works very well for me :)
woah, nice code documentation
Isn't ubuntu in a VM a nicer way than installing services natively?, then you already have experience with it.
If you find something wrong or you have something to add then you can go to https://github.com/pear or https://github.com/pear2 (redesigned for 5.3) fork, modify and make your pull requests. This is the great thing about open source.
[Zend Gdata](http://framework.zend.com/manual/en/zend.gdata.introduction.html) is a library for working with Google APIs. Its part of the [Zend framework](http://framework.zend.com/). OP used Zend Gdata to simplify their initial development, but wanted to do the same thing without the dependency, so, they wrote this lib. Zend Gdata has nothing to do with CI, other than the fact that OP used the library in the initial package. And, of course, that CI is awesome in such a way that you can drop someone elses' libraries in with little-to-no modifications.
It's probably /usr/share/PEAR/(optional extra 'pear' here)/
What exactly went wrong? I've installed PEAR a bunch of times on OSX and Ubuntu and never had any problems. Download the phar, run it, extend your $PATH and start a new window. Based on a comment below of "I just tried typing apt-get install php-pear" well... why not [follow the instructions](http://pear.php.net/manual/en/installation.getting.php)?
Vagrant + Puppet + PHP 5.4 + MySQL = happy days. Native installations just lead to a mess, as not many people are running their production sites on OSX Server. Always make sure your local matches your production. A VM lets you do that, as you can tailor it perfectly. If you want to be lazy and run the risks of potential screwups (as I did for years, and feel silly for doing so) then just use MAMP Pro.
Thanks for your help! I appreciate your expertise. :)
The client said they don't want the about pages (and other pages) on the mobile site because the contact information is already on the footer of every page and the about page basically only has contact info on it so they say its redundant. This is my first time using only media queries to make a mobile site and I have to say I don't think ill do it again. It seems like I'm wasting my time trying to hack around with css than simply building a new one column site in a sub directory. There is no way to control the server with css media queries which I feel is debilitating. I'll try to talk the client out of doing this and create a design for the about page and make just on the off chance someone lands there somehow. Unless you have an alternative. You're inputs greatly appreciated. 
Here is a good list of books on PHP programming, I would check out the recommendations for OO in php http://stackoverflow.com/questions/90924/what-is-the-best-php-programming-book Net tuts have a good tutorial: http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/
I think that's it too. Thank you!
All I'm asking for is the right methodology. Was I supposed to guess it? Thanks for your concern though; I'm not opposed to outsourcing if necessary.
&gt; Package Manager, not Package Repository. As nice as it is to try to distinguish between the two, [they don't seem to do so themselves](https://github.com/pear).
That would be something to take up with the PEAR guys or Sebastian on the [PHPUnit Issue Tracker](https://github.com/sebastianbergmann/phpunit/). You would have got one of these two answers: A) You have discovered a valid bug, thank you for bringing it to my attention. OR B) You are doing it wrong, do this instead. Either one of those to me would be fine, but just complaining on here doesn't help. I don't mean to be rude dude, just saying.
This is my setup and I couldn't be happier.
cool story bro
They are pretty close with the current versions. In the Old days, it was PostgreSQL for ACID compliance and MySQL for Speed, but these days both are totally compliant when configured correctly and both can be fast when configured for it. Basically, it doesn't matter. I personally prefer postgresql just because I find it easier to manage things like permissions on. But it's really up to you. 
Like everything, it comes down to your requirements. PostgreSQL has the advantage in terms of a feature set plus it's fully [ACID compliant](http://en.wikipedia.org/wiki/ACID). One thing to consider is maintainability. In my experience it's much more difficult to find people who know PostgreSQL than MySQL.
Agreed, Composer is awesome. Just be constructive! :) http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php http://philsturgeon.co.uk/blog/2012/05/composer-with-codeigniter http://net.tutsplus.com/tutorials/php/easy-package-management-with-composer/ These were me being constructive. You could do something similar I'm sure! :) A quick blog linked up here explaining "Installing PHPUnit with Composer", or maybe you could go and resolve [this issue](https://github.com/sebastianbergmann/phpunit/issues/522).
I would split the the strings into arrays, then use [array_diff](http://www.php.net/manual/en/function.array-diff.php). Basically, something like this: $testArray = str_split('myhouse'); $fullArray = str_split('abce....'); $diff = array_diff($testArray, $fullArray); if (0 == count($diff)) { echo 'all characters present'; } else { echo 'missing characters: ' . implode(',', $diff); }
 $test = 'mystring'; $full = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; $result = array_reduce( array_map( function ($x) use ($full) { return in_array($x, str_split($full)); }, str_split($test) ), function ($a, $b) { return $a &amp;&amp; $b; }, true ); The anonymous function passed to array_map will only work in PHP 5.4+, otherwise you need to refer to $full as $GLOBALS['full'] instead, or declare it inside of the anonymous function.
anyone know where I can find RSS for that site?
Something else I'd like to point out - I run a small Debian VPS with only 128MB of RAM. If you want MySQL to be acid compliment (i.e. stable) you must use InnoDB instead of MyISAM. I can run MySQL pretty well in only 12MB using MyISAM. However, InnoDB uses at least 80MB of *additional* memory (just for the engine). PostgreSQL only uses 30-40MB.
Same here. You are being downvoted for liking postgres... Postgres has a harder learning curve, but it makes up for it by having more features. Postgres and Mysql perform similarly for most queries, although postgres has a much more advanced full text search engine that gives it an advantage in that area.
Thanks for the response, sorry I did not back to the thread quickly as I had a pet emergency come up. I am going to post in the centos community forums about the problem and put my configs up there as well. Reddit isn't really great for posting large text blocks like all the conf files. I will reply again (hopefully tonight) with a link to the forum post and if your still willing can have a look there.
there is also a post on /r/javascript about running php as javascript: [link](http://www.reddit.com/r/javascript/comments/x360w/phpjs_php_vm_with_javascript_run_that_php_code_in/) 
I don't mind being downvited, it's part of the game. One of the thing I like of postgres is the integrated perl to be used as procedures, and its general robustness.
Right so I (we) use Redis in 3 different ways. 1. database cache. Benchmarked it against Memcahe and it was super quick. 2. Job queue. I aimed to make something with job archiving and real time statistics that can have many workers in parallel, but with really low overheads for adding items to the queue and popping off and completing workloads. We've run almost a billion items through this system trouble free. 3. Massive nosql data store. We have a back end system that pushes data to the front end website. We store a particular subset of this data into a sharded Redis cluster (totalling about 250Gb of memory) with weighted nodes. We also push the same data into a relational database which is our fallback if Redis goes down. It gets used for some other processes too. 
Yup that is another great feature
This seems rather similar (in title and content) to Joel Spolsky's "The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)" http://www.joelonsoftware.com/articles/Unicode.html
My rule of thumb is if you are going to hire a specialist DBA use PostgreSQL. If you are going to have devs play part time amateur DBA use MySQL.
&gt;Reddit isn't really great for posting large text blocks like all the conf files That's what pastebin is for.
this seems promising - looking into it... thank you
What do you change? Because *after* I configure InnoDB it uses 80MB - before it's +100MB.
Feedback welcome, this is my second open-source project, and my most complex one (Docs via GitHub Pages, unit tests, etc). I'm sure there are problems so please let me know. As for the actual class itself, I've been using it in production for a few weeks now so most of the kinks should be worked out. Obviously I don't use all of the methods frequently though.
took me right back to first year at uni
If you have any good functions I'm missing, feel free to make an issue report or submit a pull request :)
My project is intended for a completely different purpose. Use it on any size project, with any framework or no framework, it doesn't matter. I often have to create random little scripts - forms mostly. They don't warrant a framework, not even a microframework. Too much time involved. Util.php is perfect for that use case though. 1 file, no setup, no config.
Very good work. It's rare that I see somebody releasing PHP code I like. I especially appreciate that this class can be dropped into nearly any project without having to worry about conflicts.
I think using the "and" in this context is a commonly used idiom in english... while not technically correct, it makes sense to most people.
Fuckin' a man, this is awesome! Well, at least your implementation of var_dump is (the only function I've used thus far. I'm currently building my own MVC framework to teach myself some "best practices" and good habits in PHP. This is going to come in REALLY handy.
So cool! Thanks for your hard work!
People can understand "five hundred twelve point five" just as readily, though, eh? It's still understandable to people and avoids the technical problem of "and" being in the wrong place. Putting the "and" in incorrectly is also superfluous, which means it could save space leaving the "and" off and printing the string.
This looks really cool great work. Here is something from facebook that is similar but not nearly as comprehensive [Utils](https://github.com/facebook/libphutil/blob/master/src/utils/utils.php)
oh my goodness this is magical.
If this is the case, I think get_client_ip just needs to be removed. It's more of a security risk than it is useful. If you are going to be monitoring the client's IPs, you should store both values, not just one or the other. Any function that only returns one would be a risk.
is_isset sounds silly. Think is_set might be a better alternative? Or have you already had this internal debate?
This works great for me and composer works with it as well http://getmnpp.org/
I like that the documentation doesn't show any benefit over `isset` because it's just checking a regular variable.
Been a while since I've seen a website that uses frame. They can be quite good sometimes for documentation n stuff like this.
WRT your constants, [read this article](http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time). Time measurement is anything but a constant. Otherwise, pretty cool utility. I'm not a fan of the superglobals naming, though.
So damn useful, thank you.
I love the list of words for `str_to_bool` `$yes_words = 'affirmative|all right|aye|indubitably|most assuredly|of course|okay|sure thing|y|yes|yea|yep|sure|yeah|true|t';` `$no_words = 'no|no way|nope|nah|na|noo|nooo|never|absolutely not|by no means|negative|never ever|false|f';` If I ever need to parse "most assuredly" into true, I will definitely use this.
/r/phpsnippets :D
Great work. You wrote some code that people can use every day, and it's not yet another microframework. You even included tests. Now I was wondering: what would be the benefits / drawbacks to doing a library like this as static class methods versus as functions under a namespace?
&gt; Though IDK if PHP supports variable parameters [Here's a version that supports variable parameters and variable length arrays.](https://gist.github.com/3174692) 
Validation and sanitation isn't someting you just "throw in", as you put it. It's central to the operation of your application. You should always validate and sanitize your inputs (and sometimes your outputs, too), however, how you do that depends entirely on the type of data you are expecting. For instance, if you are expecting an email form, you validate and sanitize according to that. If you expect HTML markup, you validate and sanitize according to that. If you expect a date, you validate and sanitize according to that. etc. In other words, there isn't any magical bullet which will take care of all of your input validation and sanitiation needs. You need to adapt it according to the data. 
&gt; what would be the benefits / drawbacks to doing a library like this as static class methods 1. Autoloading 2. Renaming via `use`. I could import this class as "u" if I wanted. I don't think you can do that with namespaced functions. There are no drawbacks, they're functional methods which save no state and don't even reference the base class.
That's not what he's doing here. He wants a matrix transposition. This can be achieved via: function array_cross() { $m = func_get_args(); array_unshift($m, NULL); return call_user_func_array('array_map', $m); } Though I'd name the function matrix_transpose(), and pass in a single argument instead of the API as shown in his example.
Wouldn't that result in an error, since you aren't passing a callable to array_map?
That's why we popped the NULL into our array first. Passing NULL to array map as the callback makes it build an array of arrays as we want here. I... I'm not sure why that's a feature of array_map(), but it's there.
Hmm cool, never knew about them.
Using "and" after "five hundred" is the norm in the UK. It actually sounds a little odd when Americans say "five hundred twelve" to us.
I would most likely use raphael.js to it's full potential, and then jquery/prototype for mostly JSON related functions. I'm not a big fan of reinventing code anymore. On the other hand, the more lightweight the better. And as a teacher, covering how to do it in vanilla javascript would be good initially then maybe show how to do it in the libraries alongside it.
The [filter functions](http://be.php.net/manual/en/ref.filter.php) are essential. They make it much easier both to sanitize and validate data. Just some validation examples: $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL); $accepted = fitler_input(INPUT_POST, 'accepted', FILTER_VALIDATE_BOOLEAN); $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INTEGER); And there are sanitation filters, too.
Is there someway I can be told about updates? RSS, mailing list? (edit: I know I can 'watch' on github, but I'd still have to actively go look...)
I've had a quick read through it. Will print for further inspection later. Can anyone give a shorter TL;DR on what PHP/MySQL programmers need to do to be safe? I've been programming PHP for about 13 years and never had any issues, but I assume I will run in to some at some point. I just leave my MySQL tables on the default: latin1_swedish_ci. Should I be using something else?
.. and that it'll negate the use of isset, since it'll generate a notice if the variable isn't set (it'll have to be resolved for the function call, and hence, you're reading an uninitialized value and get the E_NOTICE). is_null() will do the same as is_isset(). It also looks like [5.5 will accept functions to empty()](https://wiki.php.net/rfc/empty_isset_exprs) just for consistency (as you could write it as if (func()) anyways). 
Interesting. I apologize for generalizing, it didn't occur to me how other countries would write out numbers. Did a quick search, and indeed, just comparing the American English to British English, there is a notable difference in the placement of "and" [us Americans only use it on checks to denote cents, as in "three-hundred forty-six and 18/100" for 346.18]. I guess the only logical solution to the problem that would still make it readable is to default to one [perhaps the one listed, since it may be more common] and allow a language selector that will adjust it slightly. Thanks for correcting me. =)
Mustache: Output with escaping: {{Variable}} Output without escaping: {{{Variable}}} It makes it really hard to accidentally output some raw data.
Good job. Thou I would argue that use of functions like maybe_unserialize and functions to retrieve super globals with defaults could be dangerous. Programmer should always know where his data come from, in what format it is and how did it get there. It is much batter to receive a notice that a variable is not set or an error that object cannot be unserialized and fix it right there instead of relying on defaults. This library could probably make live easier on a small project, but I would stay away from it for anything larger then simplest apps.
Why on earth would you do that? Just use PDO, there is no need to write pointless abstractions unless you are going to make a proper ORM (which is super hard to do well).
Reading through that code made me want to rip my hair out. I typed out a response, but unfortunately OP deleted the submission before I could post it. 
http://www.reddit.com/r/PHP/comments/weaic/will_all_of_you_noobs_please_post_elsewhere_i/
Now that, that's an interesting point. I've struggled with this idea myself, and never came to a good conclusion. On the one hand, it is nice and convenient to do be able to share a view across systems. But on the other hand, if you're reusing code in such a way that you need to share templates in different layers, you probably have bigger fish to fry in your overall schema. Having gone from a full JS-based UI to a server-side generated one and/or back a few times on a few different projects, I've always found that I've had to rewrite a lot of the presentation logic anyway, so from my experience there probably aren't huge wins here. But I do see where you're coming from.
Exactly.
I've already read that article, but these constants still have limited use. I always have to open up a calculator to get these values for rough calculations in my apps, so I built them in.
You realize that open source projects are *open* source, meaning you can help make them better? I did say it wasn't perfect, and I'll be taking a lot of your suggestions and adding them ASAP
Fabien Potencier writes some really great narratives on his blog. This series on dependency injection was invaluable for me when learning about DI. http://fabien.potencier.org/article/11/what-is-dependency-injection
Also, a few things of note. maybe_serialize and maybe_unserialize are useful if you have a "metadata" system, where you are story arbitrary user settings in a one to many relationship in the database. One row for each setting. The setting could be a string, an integer, or an array. The functions internally could use maybe_serialize/maybe_unserialize. What's wrong with that? remove_accents is function I took from WordPress, as noted in the docblocks. Please feel free to tell me what the problem is and I can look into removing it (Yeah, I know it only works with English based languages and wouldn't work with Traditional Chinese for example. This library isn't for everyone). human_time_diff - I'll work on making it more accurate, but I generally show that with a tooltip on hover with the actual date. Considering after a year it only updates once a year (1 year, 2 years, 3 years, etc) being 100% accurate wasn't a priority. As for the rest of your feedback, looking into it
I'd never use frames :O
I know *why* you're using `maybe_unserialize`, I'm just saying that it's a bad name. Perhaps `unserialize_if_possible`, or `safe_unserialize` or something like that. `maybe` implies a level of uncertainty that shouldn't be present in any application. As far as remove_accents, just because you took it from another popular project doesn't make it right. And additionally, that's a license violation. You're copying code from a GPL'd project and re-licensing it as MIT. That's not good, and not legal. As far as human time diff, why not just use [DateTime::diff()](http://us.php.net/manual/en/datetime.diff.php)?
What are your thoughts on the name `unserialize_if_needed`?
Thanks.
Good: * some code is decently tested * really nice work on docs Not good: * This is a [Swiss Army Knife](http://c2.com/cgi/wiki?SwissArmyKnife) and probably everyone has built one at some point. There are 10e9 of these because no one can agree on what goes in the big grab bag of functions. Using these to build apps leads to requests loading 90% unused code and to a class-based version of spaghetti where components can't be reused without including all the swiss army knives with it. Here's a question: would *you* build/use an app using a component that had a bunch of dependencies like `util`, `my_util`, `steves_functions`? * Insufficiently namespaced: In a codebase that uses swiss army knives, "util" will probably already exist. * GPL code (from WordPress) can't be released under MIT My suggestion would be to publish these functions separately, like [php.js](https://github.com/kvz/phpjs/tree/master/functions) or in file, but not as a class. And if you've pulled these from some other codebase, include the date and a precise link back to the codebase so users can check whether or not the original has been improved.
If you name something "util", "common", "generic", etc. that in itself is a code smell. You should really find proper homes for those things instead of throwing them into some catch-all with a most unhelpful and undescriptive name such as "util".
Really? Practically every project of non-trivial size, for better or worse, already has a global identifier named "util".
The biggest danger when using forms with e-mails is if you want to include user data into the message headers. For instance "From: $name &lt;$email&gt;", that is dangerous because somebody could inject code into the headers, and use your form to send spam. The safest way to approach that would be not using any user data in the e-mail headers, but just in the body. As for the body of the email, you could strip the tags, but chances are the email client will do that automatically when it receives the message.
Already moved my human_time_diff function over to DateTime and am working on the rest of the critque. 
Not bad for just starting out, but that doesn't work at all for me. There are actually two ways to do it, not sure which you were going for: //Reject if it has a non-letter //If "^" is the first character in [], it negates the [], so that it matches everything //except the contained chars. if (preg_match('/[^a-z]/i', 'myhouse') failure; else success; //Make sure it only contains letters //Outside of [], "^" matches the start of a line/string and "$" matches the end //Change "+" (one or more) to "*" (zero or more) if the empty string is allowed if (preg_match('/^[a-z]+$/i', 'myhouse') success; else failure;
Punctuation *does* have spaces after it.
What!? By that standard, you're going to get users scared to put anything out there because they're worried about being scrutinized. Not only do you have the power of choice of use upon evaluation, open source allows for a dialog and improvement. If you want to work toward quality code, fear not what quality others may deem it. Put it out there and solicit opinions and suggestions. That's what this user has done and the changes implemented based on suggestions from this thread are happening quickly and healthy discussion is taking place. Shame on you for trying to discourage.
Yeah, just checked before submitting my comment. I never touched variable_order, but that doesn't mean much.
&gt; Shame on you for trying to discourage. I'm not trying to discourage. I'm just pointing out that saying "but it's open source" is not a valid argument for releasing garbage. I'm not saying it shouldn't be released. I'm not saying it shouldn't be worked on. I'm not saying it shouldn't gather feedback. I'm saying that don't respond to criticism with "Well, it's open source, so you can fix it". I gave lots of specific criticism. I didn't say "this is garbage, f*#$k you". But to that specific criticism, I think that the response "but it's open source" is worse than lame...
Ah, I should've checked the recent commits before commenting. Thanks.
Have only checked out your var_dump and some (harsh) criticism seems justified here, but I still want to say thanks and that it works fine as a CodeIgniter library.
I'm pretty sure that any decently sized "project" will be criticized to all hell, no matter which programming language it's written in.
The usage section under 'array_last_key' references 'array_first_key'. Great tool!
Right, and most frameworks implement the majority of these functions. If I'm writing a one off form that is being used internally in my company, I'm not going to install CodeIgniter, configure it, build a form using SOC, MVC, etc. I'm going to build a basic form in something like bootstrap with minimal validation as fast as I can. It's all about the right tool for the job. I'm building a massive web application at work right now, and that is going to be around for a while. It also uses a framework, MVC, separation of concerns, version control, documentation, unit testing, etc. All of these methods are built into the framework in appropriate places. I copy the code from util.php to those functions, but I implement them natively. util.php is great for small, quick projects, and it's also good as a central location to find a bunch of code snippets that are unit tested and known to work properly.
Yeah, var_dump is definitely one of the most useful functions there. As for the criticism, I'm working on it, checkout the recent commits :)
Thanks, fixed.
&gt; The random IDs are generated per request per login id, and then for each PHP request thereafter. You totally missed it. If I missed it, then sorry I was wrong. But I didn't see this in your code. &gt; If you have to ask, you missed the major points of the lesson. Of course it wouldn't make sense to someone who's clueless! *I'm* clueless? HAHAHAH! You're the one who doesn't even understand what CSRF is! How the hell would having a secret on a login form *prevent* CSRF attacks? **The user hasn't even logged in yet**. Seriously, explain this to me instead of waving your hands about and arguing by assertion. &gt; It doens't have to be cryptographically secure! It just has to be very hard to guess between the moment the user loads the HTML from the site and hits the Login button. O_O. Really. It doesn't have to be cryptographically secure? This doesn't protect you in *any fashion* regardless of if they logged in or not. An attacker can easily spoof a bunch of secrets and eventually one of them will go through. It's funny how you're claiming that it doesn't need to be cryptographically secure and then later you talk about how the lesson is for "mission-critical apps". So I'm guessing that cryptographically-secure secrets are *not* necessary for mission-critical apps? Wow. Seriously. &gt; I realize that. It's just a cheap way of making it longer and more difficult than it already is at guessing random chars w/n the typical 30 seconds someone takes to login to a form or go to the next page. Cheap way? But I thought this was supposed to be a "mission-critical app" and not a "run-of-the-mill" app. Which one is it? You're admitting that your approach has weaknesses and is flawed and at the same time you're claiming that it's secure. Just wow. &gt; It means that if they are able to hack your database via CSRF combined with SQL injection attacks (pretty easy, actually), and they grab ahold of the session data, they won't be able to read any of it. I said this was for mission-critical apps, not your run of the mill stuff. There is just... so much wrong here. First of all, you **shouldn't** have SQL injection attacks. How the hell does your "mission-critical app" have SQL injection flaws? Secondly *if* they were able to use CSRF and pass in arbitrary queries **then you have a far more serious problem than just CSRF**. There should be **no way** for an attacker to run arbitrary queries against your database. If they are already at that point, why the hell would they care about what's in the session? Shit, they already have access to the database. Encrypting your session buys you absolutely **nothing**. &gt; Where was the flaw pointed out, again? I've soundly critiqued every rebuff stated here. Dunning-Kruger at its height. You seriously don't see all the flaws that I and others have pointed out? You haven't rebuffed anything. You run around in circles waving your hands and then make statements that reveal that you have absolutely **no clue** about security. Worse, your "secure solutions" are full of holes and **unsafe**. You shouldn't be teaching anyone, *anything* about security. &gt; I realize that. I also realize it's really easy to say "your code is horrible and amateurish" and relatively hard to write beautiful code. I also said, "It's easier to tear down than build up." That's why I pointed that out. Not as some sort of logical fallacy. No one deliberately uses an argument as a logical fallacy. I was pointing out that your argument is fallacious. If you realize that, then you have to realize that your argument basically means *nothing*; it's as if you never mentioned it. Which means that all our criticisms are valid. Also the whole "easier to tear down than build up" is just a meaningless platitude. People build up all kinds of stuff, however a lot of that is just crap. It's easier to build up crap than something good. Just because you built something, it isn't automatically awesome. &gt; Also, why do you feel the need to create a sockpuppet to respond to my various posts across reddit? That seems cowardly, to me. Ad hominem.
It would seem like for "small, quick projects" it's going to have more YAGNI than anything, but of course what you do in your projects is your prerogative. I don't have too many problems with the functions themselves (though I don't exactly agree with your approach taken for some, that's a much more subjective argument), it's just the notion of having this bucket that you throw everything that _might_ be useful into; I say 'might' because I don't think that you could fairly call them useful unless you actually use them for that specific project, and it would seem like if you ended up using every single function then you probably no longer have a "small, quick project". Thus the YAGNI aspect that I refer to. Regardless, kudos for taking part in the ecosystem and being responsible by including unit tests.
Your code is not beautiful, which is why it gets critiqued to hell. Instead of whining and bitching about it, try and make it better. All code here doesn't get critiqued to hell, which should tell you something.
I'm not Nicoon, dumbass.
Ad hominem. Doesn't change the fact that your code is bad.
&gt; Two sockpuppets were created in this very thread. Which two? WTF are you talking about? &gt; The reaction from every commenter was outright negative. There wasn't a single positive response. Here's why: you're portraying yourself as an expert and you're ridiculously full of yourself. You regularly spam this subreddit with your PHP University crap. What makes it worse is that every time you post code here, it's universally bad with all kinds of flaws. You refuse to listen to any criticism and insist that you're always right. You present yourself as an authority but it's obvious you aren't. Worse, you're charging people for your bad advice. **This** is why you get negative responses. &gt; Everyone says one or more things is wrong, even when I show conclusive evidence they made a mistatement. You haven't disproved anything. The mentioned flaws still stand. &gt; No one has given me the slightest proof they are right (I see very little constructive criticism here... just "You're wrong, go away"). Maybe you have trouble reading. There are countless examples here of flaws in your app. Maybe you should post examples that show that your app is secure. &gt; You took my session stuff out of context. What is this I don't even. &gt; Nicoon frickin stalks me now. Wow do you have a persecution complex or something? &gt; Yeah, I'm super glad I posted this to /r/php. Your sarcasm aside, it should give you an idea that your posts are not welcome here. Please stop spamming and go away. Really. You're not doing anyone any favors. Take this as a hard lesson and learn how to code better. You're not the expert that you claim to be. 
Given that the goal is to convert whatever it is to a format that can be represented in a string, "stringify?" Or is that too confusable with the fact that JSON serialization in JS is JSON.stringify?
He's explaining CSRF to you and how it doesn't apply to login forms. You obviously don't understand.
Thanks, everyone. Your help is very much appreciated!
You're definitely right, the majority of the functions won't be used. However, I wanted to avoid having to find the files for each function I actually needed, copy them to my project, and include them. Is this the right approach? No, is this the quicker approach? Yep. I might look into making them available as separate files but with some type of Git post hook that compiles them into a single class. Or do the jQuery UI approach where you pick which functions you need and it compiles them into the class. Also, can't the same argument be made for jQuery itself? I certainly don't use anywhere need the majority of functions included with jQuery, but it's sure useful.
add_query_arg uses [`http_build_query`](http://ca3.php.net/http_build_query) behind the scenes, which urlencodes all the values, but that's it I think.
I had a guy start writing something in python. We had 400 clients, all with applications written in PHP and he thought it was a good idea to write one in python for some reason. Luckily I was checking up on him and he didn't get very far, but he was arguing about how much better python was, and how it was more efficient for what he was doing and blah blah blah.
Before, not after. I have space before or after the variable too, but not both.
I understand that, But this is the first form that I'm building by myself and I didn't realize until recently that forms can be injected with malicious code.. I need to validate my form to make sure that the user puts in all the required information: Name, a proper email address, a message, and a simple math problem for anti-spam purposes. I need to sanitize all of the input which includes the name, email, subject of message (should the user choose to give the message a subject), body of message, and anti spam check.
I haven't created any sockpuppet accounts, and I resent the accusation. Any downvotes and criticism you've got, you've earned. &gt;even more after the moderators say enough. So you ran to the mods after receiving criticism, did ya?
Upvote for beauty is in the eye of the beholder. I'm all for using the language constructs to do what they will allow(to a certain extent). My coworkers don't feel this same way. Our two ideas of what beautiful code looks like are as different as night and day. Luckily I wrote the coding standards for the company.
&gt;Two sockpuppets were created in this very thread. I only see one, namely, PointsOutBadCode. You know, the one you accused *me* of making? &gt;The reaction from every commenter was outright negative. There wasn't a single positive response. Maybe that should be a hint at the quality of your lessons, then? &gt;Everyone says one or more things is wrong, even when I show conclusive evidence they made a mistatement. You've done no such thing. &gt;No one has given me the slightest proof they are right (I see very little constructive criticism here... just "You're wrong, go away"). Then you haven't been reading the comments properly. Stop playing a victim and read what they actually say. &gt;Nicoon frickin stalks me now. I've done no such thing. You've bombarded *me* with messages, which is why I am here now. I haven't been in the same vicinity as you since 5 days ago, when you posted this crap and I responded to it. Now grow up and leave me the fuck be.
Re: jQuery, there are obvious distinctions: * everything is namespaced under a pretty much universally unique identifier. * Since much of jQuery implements the fluent interface design pattern, those methods can all work together. I.e. jQuery is less of a collection of random functions but a set of methods that can be applied to a collection of objects of a known type. In other words, most of the methods all play well together to form a cohesive API that results in a very robust library. * every method has been scrutinized by the community at large, with heated debates about whether or not methods should be included or excluded. * jQuery is moving to more of a modularized structure (similar to jQueryUI) as the complaints about "I don't want the kitchen sink" have been made for years and are finally now being heard. To be completely honest, I've often considered taking a stab at making a jQuery-like implementation in PHP. At it's heart, jQuery _queries_ a data structure, returns a collection, and then provides useful methods to act on that collection. The same could be done for PHP, though the data structure is the hard part to nail down: should it be purely for array? Seems like JSON &amp; XML would be nice to slice up too, as well as DB results of various kinds. // pseudocode... pQuery(['foo', 'bar', 'baz']) -&gt;find('foo') -&gt;remove() -&gt;end() -&gt;flatten() -&gt;echo(); // or, to borrow an example from your code pQuery($_POST) -&gt;mapDeep(function($key, $val){ return pQuery($val) -&gt;htmlentities() -&gt;linkify(); }) -&gt;var_dump(); On that note, some of your functions would probably work well with that goal. The fictional lib could also implement some basic form of userland [autoboxing](https://wiki.php.net/rfc/autoboxing), which could serve to facilitate the fluent interface, but that might be best suited for a different project altogether.
Some of them are kinda dumb, like the email regex one. While others sound fucking fantastic, (epoch difference in human readable text). If it's anything like Facebook's, I'll be a happy camper.
This thing is blasphemous. Awesome job on the VM, but as both a PHP and JS lover, I really cry for the lack of control over native code optimizations. Just thinking about simple things like while(i--) {} vs for ($i = 0; $i &lt; $l; $i++) {} Or even better examples: * !!(+val) * +new Date etc.
You totally deserve to be downvoted. Clearly the answer is Ruby.
Consistent formatting - It doesn't matter so much what standard you use, be it PSR-2, K&amp;R, OTBS, etc., just be consistent with it. Predictable behavior - Give variable and functions appropriate names and keep function behavior limited to what it says it will do. This often strays heavily into referential transparency and/or functional programming. If a function is called 'getProductList', it should do that, and only that. No echo, no writing to the DB. Keep your functions limited in their scope and good at what they do to promote reusability. Separation of concerns - Mixing your business logic with your display logic is both confusing to look at and hard to maintain. Have a clear distinction between the parts of the code that are determining what to display and how to display it. This line of thinking goes beyond just display, and can apply to almost all facets of development.
check the outgoing requests from the page as well and watch what they're responding with. there is a lot of javascript on this page which is probably injecting various things I can't see - one of them may be hitting the file again.
"Hey, Python and Ruby aren't PHP!! Those are other languages! Since they are not our brand we must downvote them even if they have merit relevant to the current discussion!"
I'm not sure that is the correct syntax for the mail function, it says: mail ($to, $subject, $body, $from, $Email) According to: http://www.php.net/manual/en/function.mail.php it should be: mail($to,$subject,$body,$headers) Where $headers is a string with a set of additional headers that you want to attach to the message (such as: content type, encoding, from, reply-to, etc...), for example: $headers = 'From: webmaster@example.com' . "\r\n" . 'Reply-To: webmaster@example.com' . "\r\n" . 'X-Mailer: PHP/' . phpversion();
Beautiful code is easy to think about. You don't wanna have to think to remember what this helper or that class was named. You wanna be able to go "Oh, I need data on a YouTube video? Lemme just load YoutubeVideoHelper.php!" So much easier to remember than GoogleDataApiExtender.php...
They have no relevance to the current discussion. See that "PHP" logo at the top of the page? Obviously the OP would like to discuss beautiful **PHP** code.
I haven't tried this or looked into it, but I think the [Symfony CSS Selectors component](http://symfony.com/doc/current/components/css_selector.html) might be what you're looking for.
Why would it be bad to learn from other languages? I write other languages too and still strive to make my code look as much like Python as possible. He asked "What does beautiful code look like", I gave the most honest answer I could think of.
Perfect! I was certain there'd be something wrong with it : p thanks again.
Try moving that alert to be inside your document.ready function. I suspect one of your js libs are removing and re-inserting a block which your script tag lives in. One alert gets executed as it's loading, and another alert gets run after the ready function fires for some reason.
Ok thanks for your help!
Here is precisely what you want: http://code.google.com/p/phpquery/ I prefer this to SimpleHTMLDOM linked below. PHPQuery is faster and uses less memory.
Only issue I had with this script was it doesn't unload and is a memory hog with the objects in memory when I used it to crawl significant numbers of items.
I'll bet. I've only really used it for minor things like looking for images in a string submitted by a user.
Look at my library - [CDom](https://github.com/amal/CDom). Maybe you'll like it :) jQuery-liky syntax, full support of CSS3 selectors and jQuery selector extensions.
Pretty nice. Sorry, I couldn't stand searching for bugs... try to run this var_dump(array("hello", "world")); 
That was just html_errors being on, it's been fixed now.
Any POST-var can of course also be submitted by anyone, simply create a form with a proper action=-url and the variables you want the user to send and then submit the form using javascript. Which is why you usually create and validate a token for each form that's supposed to be submitted - which you of course also could do for regular GETs if you really wanted to.
If you're looking for something more sophisticated than Simple DOM, XPath is super powerful and easy to use for extracting data from HTML documents (and it doesn't seem to be as widely known by PHP devs as it should be). http://www.w3schools.com/xpath/xpath_syntax.asp http://php.net/manual/en/class.domxpath.php http://php.net/manual/en/simplexmlelement.xpath.php 
I never said
&gt; don't do everyone on one-line just because you can. A minor typo but it gave me a good laugh. Also you are completely correct.
&gt;simply create a form with a proper action=-url and the variables you want the user to send and then submit the form using javascript. Which you can't do on any message board.
Hence him asking.
LOL correct, I'm just curious why you would want to do DOM parsing in a language that is not related to the DOM. Not trying to hate or make fun of, just curious. Have you ever looking into XML + XSLT / XPATH ? This also might solve your issue but I wouldn't know until you explain the purpose behind DOM parsing / querying in PHP.
I tried: $a = [1, 2, 3]; var_dump($a); Nothing happened. Checked JS console, got some errors there: 1343257610618: Real Time Enabled ignite.js:279 {"users":null} ignite.js:314 1343257613404: Opening ignite.js:282 1343257613404: Document Exists in Real Time ignite.js:285 &lt;html&gt; &lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor="white"&gt; &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.0.5&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; ignite.js:225 Uncaught SyntaxError: Unexpected token &lt; 50107bfcef167b990b000000:1 2{"users":{"1343257597":"90.211.**.***"}} ignite.js:314 &lt;html&gt; &lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor="white"&gt; &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.0.5&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; ignite.js:225 Uncaught SyntaxError: Unexpected token &lt; 50107bfcef167b990b000000:1 &lt;html&gt; &lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor="white"&gt; &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.0.5&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; ignite.js:225 Uncaught SyntaxError: Unexpected token &lt; 50107bfcef167b990b000000:1 2{"users":{"1343257597":"90.211.**.***"}} ignite.js:314 &lt;html&gt; &lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor="white"&gt; &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.0.5&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; ignite.js:225 Uncaught SyntaxError: Unexpected token &lt; 50107bfcef167b990b000000:1 2{"users":{"1343257597":"90.211.**.***"}} ignite.js:314 &lt;html&gt; &lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor="white"&gt; &lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.0.5&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; ignite.js:225 Uncaught SyntaxError: Unexpected token &lt; ignite.js:226 8{"users":{"1343257597":"90.211.**.***"}} 
That's a real shame, one of the reasons I'd use such a service is to use newer PHP versions. You should consider building PHP yourselves. It's not very difficult, and we would appreciate it :) You could even do "preview builds" based on PHP master.
I disagree, only because your first line is so vague. $form_val0, $form_val1, $form_val2 are all consistent, but give no hints as to what they might be. process_order() with 500 lines in it doesn't seem very beautiful either. A set of nested ifs 5 deep may not be a long line, but it sure isn't pretty. I'd say keep to a few rules: - Keep your code as flat as possible. If you are nested more than two conditionals in, try and consider a different way to do it, or if another function may be useful to split functionality that is not related - Name your variables thoughtfully and consistent, make it easy for someone else to get a sense of what is contained within the variable without having to following the code all the way from the request to that line - Split code when it makes sense. Try not to have any 'do everything' functions, because generally you can reuse some of the code and it would be better put inside somewhere else. This also helps unit testing tremendously etc
Ignite will have a version selector of the popular languages very soon. At the moment though this is all running on my personal box, and I don't have the resources to get a box just for ignite yet.
Also to any of you hackers, feel free to try and break this any way you can, but make sure you let me know how you broke it so I can fix it. Also please don't harm anything else on the box .-.
Ah, I see :) Heh, I run several sites from my VPS myself. They're all static, though...
That code proves that you have no idea what you are doing. I mean [line 73](http://bazaar.launchpad.net/~theodore-phpexperts/phpu-training/trunk/view/head:/more_secure_sessions/index.php#L73) has nothing to do with CSRF or session hijacking, yet your comment claims it does. Just because you think you're right doesn't mean that you are... Being less hypercritical in this case is a bad thing, because you're literally giving bad security advice. The code I've seen from you falls squarely in the realm of code that I talked about [in this post](http://blog.ircmaxell.com/2012/07/true-problem-with-php.html)
If you ever remember it would you post what you did?
I think I have it stashed in a class file somewhere. It only was a problem when I was running a script that looped a hundred items and was loading whole remote page multiple times. I think you just had to unset your class object when you loaded it. I will dig around at some point.
Instead of if ( ! class_exists( 'util' ) ) { would it be better to do if ( class_exists( 'util' ) ) { return; }
lol. sorry. lol. 
I wasnt able to get this to work: &lt;?php $done = 0; while ($done == 0){ $a = rand(1, 1000); $b = rand(1, 1000); $c = rand(1, 1000); if ((((pow($a, 2)) + (pow($b, 2))) == (pow($c, 2))) &amp;&amp; (($a + $b + $c) == 1000) &amp;&amp; ($a &lt; $b) &amp;&amp; ($b &lt; $c)){ echo "Found it! \n"; $done = 1; } } ?&gt;
It looks sloppy, but whatever. I'd at least run some validation and sanitization on the input parameters.
What kind of sanitization? striptags and what else? and I've kind of added some validation, see the edit.
?page=../../../../../etc/passwd
This could get ugly on a shared host... imagine if `$_GET['page']` was '../../../evil.php'
Considering its for a filename, there's not a lot of characters you need to allow. I use this function for a lot of stuff like this. It only allows A-Z, a-z, 0-9 and underscore: function very_safe_string( $string ) { return preg_replace("/[^A-Za-z0-9_]/" , '' , $string); } But you should probably detect bad input and notify yourself by email if you want to know when people are trying to break in.
Thanks boss! would adding a hyphen be like this? function very_safe_string( $string ) { return preg_replace("/[^A-Za-z0-9_\-]/" , '' , $string); }
Yeah that should be ok. I think you can even leave out the \ if it's the last character in the set. But the best way to check it to test it.
&gt; We don't support 5.4 yet.
Both you and the guy above are having problems with loops, I'm checking it out.
Hey Luke! Looks good, I'm glad the PHP settings I used in tehplayground have gone to good use ;-) Can I ask what kind of security beneath the surface you've gone with for segregating the rendering from the system?
`call_user_func('passthru', 'ls ./../../');` Lots of domains, I see. You should probably plug the whole where I can execute arbitrary commands on the machine though.
Sounds good! Some additional things I'd recommend would be; * Running the 'code.ignite.io' on physically separate hardware, or at least inside a chroot to separate it from the remainder of the site * If PHP is configured to use /tmp for temporary file storage (by default) make /tmp as a small ramfs mount, so infinite loop memory eaters can't eat all your disk space * Encrypt your CodeIgniter cookies and change the CI cookie name to something less obvious * Variable variables aren't *that* bad, and (sadly) can sometimes have a legitimate use
* This is planned when I have additional funding. * That'll happen when I don't have other websites running on the box. * Good idea. * They're bad for this, for instance I can get around my library just by doing $eval = 'eval'; $eval('ls');
No. Don't ever use unsanitized user input for anything like this. You could setup a whitelist, so you end up with something like this: switch($_GET['page']) { case 'about': include 'pages/about.php'; break; default: include 'pages/home.php'; } If you want to do this in a more dynamic way, look into the front controller pattern. This has been solved several times already, with both light-weight and complex solutions. I see you've already waved off a couple people trying to point out the flaw in your approach. If you want help, don't ask for it and then come up with excuses to defend against the answers. You asked if your approach was secure. It's not. 
Why are you doing this? Looks to me as if you're doing it just for the sake of it, and it doesn't do you any favours. You're needlessly adding additional scripts which adds to filesystem IO reads and execution time.
Well that's the main exploit that you need to protect against if you want this routing technique to be 'secure', like you asked. 
We're not getting mad, we're telling you it's a bad idea. 
To refer to it according to its proper name, it's called a [directory traveral attack](http://en.wikipedia.org/wiki/Directory_traversal_attack).
You asked us about the security of the technique, whether it's for practice or not has no relevance to that issue. 
But with the regex, the periods and slashes would never make it through. But yeah, I get it. I'll stop. 
Of course, yes, you can protect against it by sanitizing / filtering / validating the input; no problem with doing that. But the bare code in your OP was textbook vulnerable code. 
What an appropriate username...
Thanks for running it more then once :), I've killed the processes and now that I have a bit more time, will be doing something extra security wise.
It's been fixed, sorry about that.
There's the [X-Frame-Options](https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header) header supported by almost all browsers.
lotyrin2 was likely referring to the fact that executing foreign code on your primary server is never a good idea. You want to run it in some kind of VM (such as iron.io) so that server compromises do not occur. "Black listing" is rarely a good idea, which is why most people prefer "White listing", but that really isn't an option in this case…
Fixed.
Still no [indent lines](http://i189.photobucket.com/albums/z118/staskorz/Indent.png) or option for wrapped text to stay at the current indent level. Only minor things but they'd help my ADHD addled mind a lot! 
I have heard good things about http://www.jetbrains.com/phpstorm/ but netbeans is my IDE of choice for php. I am really impressed with all the new features they have put in for php in this release.
Just thought of this while making the morning coffee, but alas I know how to fix and it'll be done very soon.
Here's an example of the attack vector: http://www.youtube.com/watch?v=uycmHQM_h64 1. Random chars generated: http://bazaar.launchpad.net/~theodore-phpexperts/phpu-training/trunk/view/head:/more_secure_sessions/index.php#L52 2. Put on each form (and in URL parameter in links): http://bazaar.launchpad.net/~theodore-phpexperts/phpu-training/trunk/view/head:/more_secure_sessions/index.php#L121 3. Validated against a _SESSION variable here: http://bazaar.launchpad.net/~theodore-phpexperts/phpu-training/trunk/view/head:/more_secure_sessions/index.php#L36 This **will** prevent against CSRF. My main flaw was not spelling this out specifically, because I honestly thought people would fill in the blanks and include this system on every secure URL and form post.
There are programmers who use automatic line wrap?
I know perfectly well what CSRF is, and how to protect against it. You, however, *still* don't understand that adding CSRF protection to a login form does absolutely NOTHING. 
Alright try now for me please.
I really wish they would fix the phpDoc functionality so that I can suggest variable types. Although, this is only a problem when using dependency injection containers. However, PHPStorm supports this... makes Symfony2 development a whole lot easier. Edit: Not sure why I'm getting downvoted; this is a legitimate problem that [a lot of people](http://www.google.com/#hl=en&amp;sclient=psy-ab&amp;q=netbeans+phpdoc+%40var+inline&amp;oq=netbeans+phpdoc+%40var+inline&amp;gs_l=serp.3...20685.21383.0.21508.7.7.0.0.0.0.169.726.4j3.7.0...0.0...1c.U8XR4XPTxxA&amp;pbx=1&amp;bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&amp;fp=dddf8a6dafb67f55&amp;biw=1263&amp;bih=757) have been complaining about over the past couple of years. There are many instances where a function may return multiple different types of objects, and it is a good feature to be able to hint to the IDE as to what kind of object you are returning. Also to note, this functionality currently works on instance variables, but not any inline variables. I feel like it wouldn't be that difficult to add this functionality to inline variables as well.
Thanks, those are all from the great [Ace Editor](https://github.com/ajaxorg/ace/)
I can vouch for PHPStorm. Try the trial :)
There's a hole that's given me all your users data: ["username"]=&gt; string(9) "clone1018" ["email"]=&gt; string(14) "luke@axxim.net" ["ip"]=&gt; string(14) "173.245.50.245" ["registered"]=&gt; int(1334263671) ["group"]=&gt; string(4) "none" ["hash"]=&gt; string(60) "$2a$12$DIKoaqbpWwLG7[removed]" I should probably be a GGG and not paste the source for it or delete any users/saved code :P Edit: Also, whilst I can't see any practical use for it, you can 'misuse' your Safe class methods: echo $this-&gt;ignite_file_get_contents('www.google.com');
For fuck's sake yes!
Also when declaring class paremeters public/private/protected $sVariable; it doesn't add @access param automatically 
I have been using the trial of PHPStorm, but I am failing to see what the hype is all about. I for one work with Symfony and Netbeans seems to offer some very nice features when working with a Symfony project, which just makes PHPStorm seem so lacking. Maybe I'm missing something in the PHPStorm IDE? I really want to like PHPStorm, but I can't figure out why it is so popular with PHP developers. 
You can't suggest variable types?!? /** @var PDO **/ public $pdo; doesn't work in Netbeans??? Man.
Sent :)
I think a better approach to your current blacklisting method would be to simply compile PHP from a source where you have removed or edited functions. It's not much work on your end, you could quite quickly discover a way to strip parts of the interpretator source and compile it. Do you save every input to a file and then run it or how does this work? Any chance of seeing the source code?
Instance variables do work! However, let's say I'm using the Symfony2 DI container: // Get the account service from the DI container /** @var AccountService $account_service */ $account_service = $this-&gt;get('affinity.workforce.account_service'); Code completion will not be available for the $account_service object. 
Thanks :)
Thanks, couldn't have ls'd something instead though? Fixed.
Similar with &lt;?php register_tick_function('call_user_func_array', 'passthru', array("dd if=/dev/zero of=/dev/null"));
Looking through the documentation it looks like those are the only two to which you can pass the required parameters when the callback is executed, but I guess it's better safe than sorry.
&gt;No, but you can post a link which people click on, and then submits the form back to the site. Which you have to admit is a lot less of a risk, though still a risk. The number of people impacted by this would be astronomically less than those impacted by the use of REQUEST over POST.
Rename your project. The first PHP.js http://phpjs.org/ does something completely different and predates your project by a number of years.
I've missed Netbeans from time to time after diving headlong into SublimeText but your comment makes me want to install it again. I might have to take another look. 
50 shades of grey... I see what you did there.
Found one: $c = 'passthru("ls -l");'; preg_replace('/.*/e', 'eval("$0")', $c); 
I'm on the hunt to replace my beloved Zend Studio 5.5 (pre-Eclipse). Haven't tried Netbeans yet, but this post has convinced me to give it a shot. Thanks!
Darn, I wonder if this means I'll have to disable preg_replace. I'll look into it, thanks! Put in a temporary fix, added it to look into list.
Minor issue, but it breaks when using the rand() function with relatively low numbers, like this echo rand(2,150000);
Works fine for me?
Although for moronically huge[ numbers.....](http://i.imgur.com/p3177.png) 
Haha, pretty sure that's just PHP as a whole... Maybe...
Just tried almost as simple as possible to start: for ($i=0; $i&lt;=10; $i++) { echo "Hello, World!"; } I got nuttin'.
Unfortunately it still looks like crap on linux.
1. Windows 7 2. WAMP 3. Eclipse (Stupidly slow sometimes, thinking of changing soon) 4. CakePHP as a customized base w/CMS 5. PhpMyAdmin 6. Compass CSS (Streamlined and improved my cross-browser CSS no end) 7. Textpad for tiny, out of project changes 8. Tortoise SVN / Git Bash depending on which project I'm working on. 9. One f*cking monitor (for now...) I work in a web development company where there's a shitload of projects ranging from current to ancient, so I can't even settle on a particular streamlined setup. I've been working on one monitor for a while though and it's driving me nuts! Compass CSS is something that I jumped onto really late it seems, but it's done wonders for my efficiency and really helps when you get to cross-browser testing. Helps create really easy sprites too, check it out if you haven't already.
What do you need the @access param for in that case? It's right there, before the variable name. Most doc generators can pick up on that too.
I saw your other comments right after I posted that. I should probably actually read stuff before commenting about it, but that seems like it would make me the antithesis of a programmer and/or redditor.
As this example shows, blacklisting is not the solution. If you start removing useful functions because they can be abused you will end with something that hardly resembles php. As some suggested, either you roll your own compiled php or isolate the executed code in a vm/jail (or both).
[Does this drive anybody else crazy??](http://imgur.com/Kjsiv) The use statements won't abide by the initial indentation.. I was really hoping they would fix this. Does this happen for anybody else / does anybody have a solution?
in all fairness, it has nothing to do with 5.3+. the guts of this library are [pcntl_fork](http://www.php.net/manual/en/function.pcntl-fork.php) (which has been around 4.1) and [stream_socket_pair](http://www.php.net/manual/en/function.stream-socket-pair.php) (from 5.1 vintage). so, yes, this is a nice, clean implementation of a clever-ish idea and the code is clean and easy to read and beautifully coloured and i definitely gave this guy a little orange up arrow, but i don't see how this is a php 5.3+ thing.
I used to use Zend and now I use Netbeans (and have been for a couple of years). It took a little getting used to but now I think it's awesome!
Yeah - should be good. When it comes to big frameworks symfony hasn't had much competition lately. Zend knows what its problems are (performance, some difficult to test components) and ZF2 should hopefully address many of them.
So it turns out I'm dumb and $matches[0] actually DOES have the full string, I was just dumping the output into a browser which was rendering the XML tag and confusing the hell out of me. Yay for stupid!
then you don't need a book lol. PHP is very "pick up and go." The docs should be sufficient. We can help you with your specific project if you want. Are you storing the PDF's as files on the server with pointers in the MySQL db, or are you using Blob objects to store the binary directly? It should be as simple as pulling the data you need from the database, setting the headers(content-type: application/pdf) and forcing a download. Also, this function may be helpful if you experience dl issues in the future. It clears PHP's output buffer, which sometimes breaks binary data in on-page downloads. while (@ob_end_clean()); Good luck, we're better with specific questions. Sorry if this isn't what you were looking for.
I know I don't need it but I just found this behavior. if phpdoc automatically detects it, there is no problem :)
Used to run Netbeans, but it started taking ages to index all the stuff at start up, which would mean I could not easily hop into files yet. Anyone know of a good way to resolve this? Been using SublimeText2 ever since. Even though it doesn't have debugger integration, it's pretty swell. Might give PHPStorm a spin later, looks pretty good.
Forgot to mention language injections - if you have a string with XML, JavaScript, HTML (and more) it detects the language, syntax highlights it, allows code completion - and best of all, allows you to open that piece of code in a separate context specific editor with all changes being mirrored back into the original string. It's little things like this that really sold it for me.
Another good use of pcntl_fork is Brian Moon's GearmanManager - https://github.com/brianlmoon/GearmanManager/
 echo preg_replace("/a/e", 'system("ls -la")', "a");
I was just poking fun. As a matter of preference I don't like tab indentions, and Github renders them as 3 spaces so it looks funny. I also have an OCD about making sure every function/method has a properly annotated docblock regardless of visibility. But that's just me. The code actually looks very good. :-)
What I have in mind as a personal project is pretty simple really...once you know how :) Where I work we can end up working overseas and they used to supply an crappy application to do home inventory for shipments and storage. I was thinking that it would be a perfect thing to knock the rust out of my noggin with. So, I would create a database that would allow for items to be entered, dates, values, description, etc. and if it would be in storage, shipped, etc. Nothing extreme. I last did web development when Java was first coming out and everyone was saying that within five years everything would be running on it. Yes, I am that old ;) I've been goofing with an example where checkboxes are done with a post into an array, which is then displayed on the page (the array). So far, it looks waaaaaaay easier than trying to manipulate and array in C++ and then cout &lt;&lt; it. It's pretty cool how it integrates itself so neatly into the html. Essential, once I am done (well, you are never really done with software) I would try to package it with WAMP, MAMP, XAMP, and the files so that someone could work off a USB token and a webbrowser. The PDFs would be reports of the items in storage, shipment, etc. Sorry if I am all over with this but I am new to PHP and this idea is pretty ethereal at the moment.
Yes. If I'm staring at code for hours a day I want the fonts to look a tad more legible and easy on the eyes. Netbean's fugly font rendering has been an issue [since forever](http://www.bing.com/search?q=netbeans+ugly+fonts&amp;qs=n&amp;form=QBLH&amp;pq=netbeans+ugly+fonts&amp;sc=8-11&amp;sp=-1&amp;sk=). That and its indexing performance keep me from using it regularly. 
Checking for the update from within seems to not work yet.
Are the PDF's generated dynamically?
From the article: &gt; Rose also said that Digg hired individuals with very niche skills, like developers who only knew PHP and were not as useful once PHP went out of use. &gt; “We ran into these huge problems, and didn’t have generalists who could go up and down the stack,” he said, noting that it was a problem he worked to correct at Milk, his next startup, and urges young companies to think about. What happened? Did Digg rewrite in something else? My searches didn't turn up anything interesting. 
Yes. They would be generated when someone would click "create shipping report", or something like that. Then a simple loop through a select for that type would output lines, which would be a PDF. xamp has a sample page on the install the does something similar. 
i'm going to guess that the entire site was done in PHP until one of the rewrites at which point I'm going to guess most of the stuff was done in another language like python or something leaving just the front end to php if even
**It's just not trendy anymore.** In startup culture, PHP is frowned upon. All the brogrammers are using Ruby or Node.JS these days. Give it another year and there will be another language/framework/platform that's the latest craze. Take a look at [this chart of job postings](http://i.imgur.com/HViam.png). On a relative scale, Node.js is killing it, then Ruby, with PHP in a distant third. On an absolute scale, it's the opposite. **Ultimately, trendiness doesn't matter.** A talented individual can program just as effectively and produce awesome, maintainable and scalable applications regardless if they are in Perl, PHP, Python, Ruby or Node.js.
There are Business Intelligence Suites that can do that for you. Have you looked at [JasperReports](http://www.jaspersoft.com)? There is an existing Java API, and I believe 4.7 is releasing a PHP API in the next couple weeks. others worth checking out are MicroStrategy and Pentaho. I personally prefer JasperReports.
I talked to a digg employee several years back, he said most of the code was being rewritten in Python.
That was an interesting chart, thanks. I agree that trends influence architecture decisions, especially at new start-ups, but I imagine it was a huge undertaking to switch languages at a live site. So I'm wondering whether there was something specific that didn't work/scale at Digg that made them switch from PHP. And were they happy with the results? 
Interesting anecdote, and kind of sad. Good luck with your search.
Thanks. I would add that I *would* change the code base if there was good reason to, like the reddit founders changing reddit from Lisp to Python, but there is *no good reason* to. The reddit founders probably decided they wanted to switch to a framework and decided there was some good ones written in python as I don't think there is much web dev being done with Lisp. PHP is *now* an excellent language for web development, it's the perceptions that need changing.
To be clear, I absolutely love PHP and stick by it. It's an awesome language and continues to perform. I learn, use and explore all of these other languages as well. However, PHP is still my "go to" language for most projects. I used the term 'brogrammers' tounge-in-cheek to summarize my feeling about 70% of the startup "engineers" that are running around today. They don't know what the fuck they are doing most of the time, regardless of the language. I was also going to comment on Digg's ultimate failure and Kevin's utterly poor decision-making as being a brittle standpoint for criticizing PHP but didn't bother doing so :) Cheers.
There are free versions of iReport and JasperReports that do exactly what you detailed. Database management using the ETL Enterprise edition would cost money, but it doesn't sound like that would be necessary for you. Again, it's just a suggestion. BI Suites are definitely tools worth exploring, why reinvent the wheel, know what I mean? In any case, post some code, let's see what you're working with.
Loops are now fixed, it was an encoding issue.
Nothing to say about the bug, but since I've never actually met someone that indents their code like that... why? I can't come up with any legitimate reasons for a standard like that. Question is purely curiosity-driven, not hater-driven.
Indents their code like what? Two spaces before any code? At least anyone who has done any Drupal development per guidelines.
I don't think that's a very good theory. Kevin is speaking about PHP going out use in the past tense. This was at least 3-4 years ago, and at that time PHP's reputation was doing just fine. By going out of use, he's talking about Digg's slow change over to Python.
PHP was in its "trendy" stages around [2001-2004](http://www.tiobe.com/index.php/paperinfo/tpci/PHP.html). PHP was a commonly accepted and respected choice for web development from 2004-2008. PHP started really getting criticism with the rise of python and ruby in the web development world (~2008) and it has continued since then.
2008-2009 is specifically when Ruby and Python were hailed as the saviors to web development and PHP first started getting heavy criticism, to the point where it was the cool thing to bash on PHP.
FYI you can customize your entire experience in Netbeans. You can change the font and color scheme. If its the borders and buttons that bother you then its probably your window manager theme. take a look at mine http://i.imgur.com/LQscp.jpg
If you haven't used it since 6.9,it's indexing performance is much better. 
And some tools are best for a specific job than others (no, I'm not implying that PHP isn't good).
I like PHPStorm and IntelliJ, but they refuse to add remote editing support, which makes it completely useless and the same for a ton of people in the 3 year old support ticket for it :\
I mostly agree with you but anyone who can code an "enterprise-grade" php application has got to know PHP has some really horrible flaws. I actually like to ask people when I interview them what they hate in PHP because I feel like if they really know the language there should a laundry list. I also do a lot of Ruby on Rails programing and I personally feel there is less of it in Ruby.
&gt; The article made no mention about how PHP was not sufficient for their use, it just didn't meet their requirements (perceived or actual) as times changed. Yeah, but that's pretty vague. I'm very curious about how sites scale from merely large to gargantuan, and when a company opts to throw out a language while making that transition, that makes me wonder if they uncovered some big technical limitation. The article I linked to wasn't technical enough to go into something like that, so I asked here. It doesn't seem like there's an interesting story behind the switch, which I suppose is a decent enough answer to my question. 
This is exactly what I was going to post. I had it in my head before I even clicked. How funny that your comment was #1. *Tabs into EVE client* It really depends on what kind of changes you need to do to the site. Some more information about that might help. We can simply recommend community modules that will suit all your needs if it is simple. If you need something more custom then you will need a book not just a tutorial. I have been using Drupal for many years and made many sites, small to mind-bogglingly complex. Drupal is capable of much, but requires payment in blood. Sure, everything is customizable, if you learn the really complicated way that Drupal makes things really easy for you. My best advice is to get a good book and look through example code. The core modules are actually a good for reference when building your own. I found this book very good: http://www.amazon.com/Drupal-Development-Experts-Voice-Source/dp/1430228385 If you want to learn Drupal be prepared for a long and painful road. I have gone through a love and hate relation with that cruel mistress. Drupal 7 has evolved into something I am learning to live with though. Personally, I would choose CakePHP over Drupal, but it depends on who I am working with and what needs to be done. I enjoy the freedom of CakePHP but sometimes the requirements are Drupal.
I'm looking for a PHP developer right now to convert a Ruby project to PHP and I literally can't find one locally that can do high level MVC in the Philly area. Meanwhile I keep getting job offers in my email. It's crazy how few developers there are. (Philly area) I don't really think there's any problem with PHP at all. If it's good enough for Wikipedia and Facebook... Ruby on Rails just comes with a good MVC where with PHP you have to trust a developer to make the right decision. Most of the time this part of the equation isn't done right on the PHP side which is why PHP is now getting a bad rap.
Any language has a laundry list of things to hate - people just generally pick the low-hanging fruit when it comes to php. The very first thing most people are going to say is "inconsistent function naming and parameters". Not because it's the most serious problem, but because it's the most parroted. If tomorrow python was #1 everyone would be bitching about the block style.
My friend I went to school with is in the Philly area and started as a PHP dev (also knows Coldfusion). He recently got laid off and has been looking around. Not sure about his computability with Ruby though.
Thanks for explaining further. I found that blog post interesting too. I think I'll learn Python so I can compare them myself.
That's a sad story, and completely believable. Especially the 6 months turning into 2+ years.
&gt;dreaded &lt;?php } ?&gt; I like it. Most editors have visual brace matching, I don't know about matching endforeach/endif etc with their partners, mine doesn't.
Well, my editor match braces too, but I just find it ugly.
I don't know why it wasn't mentioned yet, but the code inspection is my favorite feature of PHPStorm. It tells you which variables are uninitialized unused or if an object doesn't have attributes, which I try to access.. there are many other things and also for css, html and javascript
&gt; I actually like to ask people when I interview them what they hate in PHP because I feel like if they really know the language there should a laundry list. I do the same. Unfortunately the answer has never been what I feel like the mother of all flaws is in PHP: availability and quality of code written in it.
is it better than Sublime text 2 with SublimeCodeIntel /SublimeCodeLinter ?
They used to use PHP, then they stopped. That's all it means. Retraining can be tough on those developers only using the one language. Really anybody building anything in just the one language is going to have a rough time at some point down the line. They all have strengths and weaknesses, and any large-scale site is going to find itself using all sorts of different tech. I'm currently building a site backed with an API which is going to have to handle RIDICULOUS traffic. The frontend is JavaScript, the API is PHP, the background tasks will be Python/Ruby and there's probably going to end up being a little bit of Java too. Yay Java. You can't do everything with the same tool.
I currently work in a startup incubator in the UK, where 8/10 products were built with PHP components. I have consulted for multiple startups down in London, who use PHP. I am moving to New York into another co-working startup office, where I will be porting a Rails app to PHP. PHP isn't going anywhere. We're web developers, who gives a damn about being trendy?
I have no code so far. That's why I asked for a book suggestion. I totally understand not re-inventing the wheel but the idea isn't that far along yet. I would need to get started with working in php first. 
PHP has always gotten heavy criticism, it's just that the people clamoring to criticize are now in a different camp.
You should consider making it composer compatible / submitting it to packagist.
Consider that PHP scaled just fine for Facebook. It was an architectural issue, not a language issue. Even when Facebook developed HipHop, it wasn't to get around performance problems with PHP, it's because they were scaling so massively, that the performance gain from PHP to C++ meant real savings monetarily.
PHP is still a horrible language for new users. Take the string library for instance, there is no pattern to function naming.
It's important to note that the problem was *not* PHP, it was engineers who could only program in PHP. Using several languages is healthy. Language monoculture really isn't.
I really like Netbeans. It sets up and updates easily and does 90% of what I want an IDE to do. I finally just got remote step debugging working which is a huge help. I've use Eclipse, Jetbrains, and Zend. Out of all of them Netbeans just has the right combination of stuff, and also free.
I only used Code Sniffer, but that only notifies you for violating the configured standard, it does not fix it for you. This tool sounds awesome.
That is complete anti-intellectualism, learning is what programmers do. Turning your back on hints and advantages of other technologies is exactly what is wrong with PHP today.
Except that in F1, the driver matters much less than the car. Case in point: Jenson Button, who finished 15th and 18th in 2007 and 2008 with Honda but first in 2009 with Brawn GP. :-)
I just glanced over the code, and I don't see how this framework is more "security minded" than any other framework.
Looks like an interesting package. Will be be switching the README to markdown, and setting this up as a PSR-0 component? 
Plus it is slower when you benchmark it side by side with Ruby and Python. 
Wow, that's a leap. Python, ASP, and Perl have been major players in the web game for as long as PHP.
thanks for catching that, it's updated
Found a security vulnerability already. There is no specification of encoding with the escaping in the View class. I've seen some pretty nasty XSS attacks succeed because of that mistake. And because of that, not only should you specify the character encoding when you escape, you should make sure that the encoding is specified (in header orotherwise) to prevent several well known attacks. You should also use ENT_QUOTES. and use htmlentities() instead as it escapes more characters.
16 yr veteran http://users.phpexperts.pro/tsmith I've been mentoring people every single day on #learnphp on irc.freenode.net for the last 2 weeks. I've covered everything from simple OOP to writing beautiful code to unit tests... Probably 16 different subjects ranging from beginner OOP to advanced pro stuff like continuous integration testing. I also covered numerous design patterns from the ground up (no complex OOP knowledge needed), such as the Factory and Abstract Factory patterns. What we're going to cover over the next month: 1. Interfaces and Abstract Classes 2. Inheritance 3. Design By Inheritance 3. Composition 4. Design By Contract 5. More Design Patterns: 1. Delegate Pattern 2. Command Pattern 3. Strategy Design Pattern 4. Proxy Pattern 5. Façade Pattern 6. Model View Control Pattern 5. Treating objects as arrays 6. Using Iterators 7. Creating a data abstraction layer. The reasons you should upvote and come on in is that 1. It is very hard to find all this information concisely laid out within various books at $50 each. 2. You get your questions answered on the spot. 3. Lessons are tailored around a small group and take on a more informal feel than a college setting or reading from a dead book. 4. **You learn from real world experience, many times by viewing real-world code.** 5. Why repeat the common mistakes when many of them will be pointed out to you ahead of time by someone who's already encountered and mastered them?
Also I hate your view template system. str_replace view templates are the worst. have you ever considered using, a template engine you might have heard of... PHP?
Disclaimer: I'm a security consultant. I took a lookg at your Session class. 1. Why do you use DES as the encryption mechanism? It's a poor cipher. If you want something compatible, you should try using stronger symmetric ciphers (AES, Blowfish, 3DES. etc). And if none are available, use DES and leave a warning. Hell, I'd throw an error, just like if you are using magic_quotes. 2. You should be using another cipher block mode. ECB is prone to replay attacks. Use CBC instead (MCRYPT_MODE_CBC) with an IV initialization. Make sure you do it, otherwise PHP just uses \0 (byte 0) and this mechanism will be useless. 3. Set the session cookie parameter HTTP-Only with session_set_cookie_params(). So if your application is vulnerable to a XSS attack, at least the session cookie can't be read with javascript. **Edit:** Consider also the secure parameter if you are using HTTPS. When a cookie has the Secure flag, the browser does not send the cookie if the connection isn't HTTPS. 4. In your code, you are using the _salt attribute as the key parameter for mcrypt_encrypt. You should rename for easier code review and readability. 5. I haven't read all the code, but if you are using an authentication method, make sure that the session ID gets regenerated on a successful login. Further edits: 6. I do not really understand the mechanism for your session. Why do you encrypt the data of your session on the server? It is pointless because if someone compromises the application and reads the sessions, the attacker could use the key that is used in your application (t3st!ng) to decrypt the session data.
yeah, if not here, I will in my Symfony2 integration when I release it :)
Thanks for the suggestions! 1. I've updated it away from DES now - you're not the only one to recommend it 2. I'll look at using CBC and the IV too 3. Good point - i'll update 4. Yeah, it was a holdover...doesn't make sense anymore 5. Nope, no auth mechanism in there 1a. Potentially the sessions could be stored someplace other than the server (like a DB).
As far as I can tell, it throws userland PHP errors when you access unfiltered request params. It also sets up a few different headers, yadda yadda. Seems to me that these could be easily accomplished in any framework with helpers.
I tend to agree. A few of the people in their organization are good people, but I wouldn't necessarily say they're leaders.
That would sort of bypass the security that your framework provides? And usually you want a template system worth using as the default not a jr. programming level one. (sorry but it's true).
It actually worked great. Didn't break anything in my code. I've never heard of Code Sniffer, but I know this one works.
Worry not, enygma, if a spelling mistake is the worst you've got for feedback then you're doing alright. :)
Id use this as my main text editor if only it had remote file view.