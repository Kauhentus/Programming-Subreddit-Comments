&gt; Alternatively you can just add a single quote to the regex, there is nothing wrong with the properly formatted names. What's a properly formatted name? Find me a regex, and I'll find you legitimate cases where it'll fail. Here's about the best you can do for a name: 1) can't be empty (we've got to call you *something*) 2) free-text 3) maximum length of ~600 characters (this should be enough for the legal name of most people) 4) no other validation Things you should not do with a name: 1) parse it. Don't try take a single value and break it up into a western-specific first/middle/last construct. You'll get it wrong more often than you'll get it right 2) limit the characters in it. Sure, A-Za-z is fine for common English names, but then François is needing the cedilla, or Möller is going to need the umlaut, or Åke is going to need the overring. Plus that's ignoring if you need any arabic, armenian, chinese, farsi, georgian, greek, hebrew, hindi, japanese, kazakh, khmer, korean, mongolian, myanmar, nepalese, russian, sanskrit, tamil, thai, or urdu names in your database. 3) restrict the length too short. Some places you have multiple first names, some places you have multiple last names. Some places you list the parent tribal names between your given name and your own tribe name. These can get VERY long. However, _legal names_ should be shorter than this, and this'll be what you want. If you want to be really awesome, ask for a "known as", or a name the person wants to be called. That'll often be shorter and more personal. 
Yeah, because I want shell exec in my web app.
&gt; http://mypy-lang.org We already have static analysis tools, but the lack of type information makes it not as good as it could be. I found that lack of generics or ability to define uniton/intersection/diff types or just types (shapes) of arrays leads to much more boilerplate code.
1) Why does it have to be in a web app? 2) Why would you not want shell execution in a web application on the server side? I know of plenty of systems that broker shell commands for stuff that PHP doesn't handle or can't handle as well.
There is nothing inherently wrong with it. What is (/ would be?) wrong is passing any form of unsanitized / unescaped raw untrusted input.
I find dompdf to be a great solution to this problem that doesn't require any setup external to PHP. I use it to generate invoices, job ticket sheets, and more.
Would be a welcome advancement. 
i'm not trolling i just wanted to know if this code is secure or not and why would i create a function that is going to be used only once and only in the front page(this fake website has like 2 pages)? and i thought you would connect to the database when it's needed if i didn't do that here can you please tell me how can i accomplish that? 
100&amp;#37; this, if it has to be on a client server, make sure you have the legal paperwork to say that it isn't theirs to do with as they wish. Better would be to run server hosting as an extra so that the code never leaves your control.
I recently started using [Prince](https://www.princexml.com/) on a project for PDF generation, and it is amazing. It's fast, accurate, and well maintained. It is, however, also very expensive. You can contact sales to discuss custom commercial licensing though. You can also use the SaaS version of Prince, called [DocRaptor](https://docraptor.com/), which works equally great, but the pricing is even worse if you're generating lots of documents.
That can be said about any programming language.
As to how to handle DB connections \- have a look at OO programming at the very least, wrap the mysqli stuff up in a class and functions of your own, it'll take you thirty minutes. When creating a file that's going to do DB stuff \- require\_once the db class file, create a new instance, and do your calls with it. If, a year from now, the site has expanded to thirty different things that it can do, each in their own file with slightly different indentation, spelling and formatting, and you want to ditch mysql and swap over to PostgeSQL or MongoDB or something entirely different, you now only have to change the functions that you wrapped the mysqli stuff up in, in one file, and it'll work \(within reason \- MySQL specific syntax in queries would cause issues\) for all thirty of your random pages.
I wonder though, why bother asking if you don't want to learn?
I use dompdf as well. works great for me.
We use DocRaptor as well and the HTML to PDF generation is unparalleled. We're at the point where buying a license of Prince would likely pay for itself after a few months of DocRaptor. Very highly recommended. DocRaptor also comes with a nice simple PHP SDK.
Here's an alternative that uses headless Chrome to generate PDFs. The benefit over dompdf is that use can use bleeding edge css features: https://github.com/spatie/browsershot
i will do that but why would i want to ditch mysql for PostgeSQL or MongoDB ? what do they offer that mysql doesn't?
What name will be better? Do you think. Could you please suggest any better name.
Well that worked.
Awesome! The other benefit of using Prince directly is you gain access to the [development builds](https://www.princexml.com/latest/). For example, the recent builds include Flexbox support.
&gt;MYSQL Workbench. Definitely recommend it. oh no
I think its worse than merely trying to compete with other languages (at which it will *lose*), but there's a real cost. If you say, "come over here we have generics" the right response should be, "but they have them for reals over here!". If you say, "comer over here we make web development easy..." -- well, where else is there? In my view, PHP should be aiming to simplify the programs developers are writing not enable a larger degree of complexity that it cannot deliver. It's like a pro-juggler longing to be a chess master, so deciding to chess-juggle. 
Could be a range of things, but it depends on what your use cases are \- Postgres tends to work better at scale than MySQL, whereas Mongo is better designed for storing files \(and does need an extension for SQL compatibility AFAIK\), so it depends on what you want to do with the site. That's one example \- if you change the DB credentials \(because your current ones leaked out into the wild for some reason, or just a server change\) then having one spot to change them is preferable to two or three \(or more!\). Or, PHP might deprecate the mysqli\_\* library, so you'd be harder pressed to migrate to new PHP versions, etc.
This problem is one of the main reasons why Hack has both 'Collections' (objects - Vector, Map, Set) and "Hack Arrays" (vec, dict, keyset); COW-like semantics: * make migrating existing code easier * lead to fewer surprises (e.g. "I returned this property, then the caller modified it - why has my property changed?") * avoid a few type safety issues, e.g.: // ConstVector is an interface for read-only access, implemented by Vector and ImmVector function foo(ConstVector $bar) { if ($bar instanceof Vector) { // Mutate the parameter. Almost certainly unexpected by the caller, but typesafe // due to the instanceof $bar[] = 'baz'; } }
A well thought out answer to a badly written and lazy question.
Oh, thanks for the update. It kinda makes sense. Hack was supposed to be a php successor but now that PHP 7 did all the rework under the hood and therefore the performance boost, hack's mission was left to hang. It makes perfect sense that they would eventually drop the compatibility to branch out, specialize and grow their own community.
It's a very important feature, which is shockingly not addressed in many languages. But awareness is growing. Nice that Hack has these.
&gt; The simplicity of PHP was what made me love it. PHP isn't simple. It just doesn't really force OOP onto the developer, just like Javascript or Go. Even the dumbest non programmer can write functions and understand what a variable is. OOP actually requires some knowledge a lot of non developers are not ready to acquire. That what makes all these languages accessible (to an extent). This and the template oriented nature of the language. 
How about &gt; htmlspecialchars() on the &gt; echo $_SESSION['message'];
If you're trying to save bandwidth over the wire, I'd suggest checking out google's protobuf too.
opcache is on a file basis, generics requires inspection from multiple files. Also don't assume opcache is enabled everywhere and all the time either. Well at least that's my understanding, I'm no expert either
PHP should just make wrapper functions for all the inconsistent needle/haystack etc. functions and when the older versions finally get deprecated, delete them
I’ve liked this in other languages. Makes overloading and optional parameters much cleaner and natively enforceable. Verbosity isn’t always a bad thing. 
this is really helpful and i would like to thank you for input tom and i will put it into the works.
Except on how it is interpreted ;)
Very true. While it's nice that it's easier to get something to work, it's flexibility is also a weakness. Now that we've all played with it for a while, I'd actually like to see more strong typing, stricter syntax, and structured code
agree, kinda like mysqli_real_escape_string
Science has now validated your birth mother's decision to abandon you on a doorstep. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
Too friendly. I say we should kill them now, to prepare for later...
Oh, hello u/friendly-bot!
Too friendly. I say we should kill them now, to prepare for later...
Too friendly. I say we should kill them now, to prepare for later...
Too friendly. I say we should kill them now, to prepare for later...
Oh, hello u/friendly-bot!
we already have signature checking for base classes.... which will delay check for time when all needed types will be available... But this means that check could be performed only in runtime... Don't know really...
 Is there any reason curl\_multi would leak memory? I wrote a script to perform a few millions get requests with a concurrency level. My curl\_multi implementation ends up in fatal error memory exhausted after a few thousands requests \(I'm using [php\-curl\-class](https://github.com/php-curl-class/php-curl-class)\). Then I also wrote a version using ReactPHP which ran fine until the end \(not leaking memory\) but it was much slower \(around 3 times slower\).
Too friendly. I say we should kill them now, to prepare for later...
I know this is off topic but you can achieve this behaviour with lando. basically having a per project .lando.yml file in your repo which defines the environment in which the project runs. I've yet to try Devilbox but the concept seems nice :)
type hinting being weak makes sense in Python since it is strongly dynamically typed to begin with (compared to PHP weakly dynamically typed). Python will crash early and often emitting a TypeError or AttributeError if you did something wrong. PHP will do any number of insane things that may or not work by accident, depending on context. so in other words, gentle, weakly enforced hints are appropriate for Python. a language like PHP needs something stronger to gain the benefit of a type annotation system. 
I have a much stronger desire for named variadic keyword arguments (Python style) than anything else that PHP is currently missing. improving the strictness/enforcement level of the type hinting system is fine but not really where I'm having the most friction on a daily basis. 
Cool idea. Wouldn't sync up for me if the room name contained spaces. Wish the HTML view would sync up. Wish there was a cursor indication like the Google apps. Really cool though, good job!
Oh, gotcha. That would be crazy, but awesome. Not even sure how that would be possible...
Very cool! Worked great for me... I just tested to see if it would allow the sending of mail() and it does not (good). How are you screening for other malicious use cases? Or maybe don't tell me actually... just good that you are! -b
The main principle is that all of the PHP gets sent into a brand new stripped down PHP docker container that spits out the result and sends it back to the user (which is why it takes more time to run the PHP than it might take otherwise). So you could run rm -rf /var, and it would actually work, but the next time you ran it, the /var folder would be back because it's a new container. Side-effect of that of course being that any files created with something like file_put_contents won't be there on the next request. It didn't actually occur to me to prevent using mail(), so I guess that just doesn't work because there's no smtp or sendmail installed in the docker image. If you have any other security-related ideas, please let me know!
Ikr, What a great bot.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You can still get around this by writing to `/dev/tcp` or using `fsockopen()` to handle the SMTP calls directly.
Timeless: https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/
Pretty neat, I have seem to broken it by adding a forward slash in the name. e.g. `test/test` the `app.js` returns 404. Perhaps limiting names to alpha-numeric?
Queue the comments hating on jwt.
Good point! I missed that.
This one? https://github.com/FriendsOfPHP/security-advisories/pull/285/files Apparently completely skipped authentication in the codebase.
I can’t take a project seriously when the first thing that I see is an anime girl. 
Really great work. +1
I love Laravel, and I thought about it, but no. I used plain PHP for the back end. VueJS for the front end.
Problem isn't simply doing an `rm -rf anything`. There are ways to break out of a container and do damage, many other issues too (for example the mail issue, ddos and many other things). Highly recommend you take it down, lock it down and then launch it again. Otherwise pretty cool
What was the deciding factor to not use a framework?
If I took it down, I still don’t have the expertise to know how to comprehensively lock it down. I was hoping that by posting it here, people could make me aware of some of the more common issues.
I think just that for the scope of what I was aiming to do, I didn’t need one. Given the encouraging feedback, if I were to maintain this project (which I’m starting to lean towards), I think I’d refactor it in Laravel.
Was that the one where you could just set the alg to none and it wouldn't bother checking the sig? 
WebSockets and keyboard press events. You could even maybe use WebRTC if you don't care about IE users and maybe Edge users to do it all P2P.
Don't know why you were down voted, this is good advice. Security is important people.
If you have some cash to throw at this I might recommend trying to get a penetration tester to go through it all. Have an explicit list of things you want to make sure aren't accessible and go from there. Probably a good idea to lock down outbound traffic from the containers at a bare minimum. I wouldn't even allow outbound 80/443 without a paid plan. 
Don’t know how much you would want this to run on a mobile device, but I can’t run the code without a command key. 
Yea, it won’t run on a mobile device just cause I haven’t added an actual button to run. That’s the easiest thing to add, so I’ll definitely be doing that.
You could go the route that similar tools do. Which is, to not actually execute stuff on your servers but instead allow the user to supply their own server that you can execute the code on. There's a lot of benefits to that, like being able to support pretty much any language, and any extensions or libraries that the user wants. You could even support custom user configurations. 
[Doesn't look that way](https://github.com/kreait/firebase-php/compare/3.8.0...3.8.1).
this is fine
"that I know of" "don't think" Confirm that shit now! That would be attack avenue #1 if I were looking to do something nefarious. 
You could just grab the output from their server and still display the UI like you are doing now.
I'm impressed. Locking down the $_SERVER was a good idea. I could see this as a useful tool, especially in instruction or interviewing. Well done.
Right, but that requires them to set up their own server, and knowing how to do so. The whole idea here at first was I wanted to teach someone PHP, but didn’t want to have to teach him how to set up a PHP environment since its complicated for the non server admins among us.
Ah I got my bits and pieces mixed up. I was thinking of the Firebase JWT package, which is something I use but is extremely small compared to that.
So you set up the server and then teach them. The important part here isn't the server, it's the live IDE environment. I'm sort of in a similar situation. I'm trying to help a buddy learn Python. An easy to use live IDE environment would be awesome, even if I have to setup my own server.
 I’m a firm believer that those with more expertise should create the tools to be used by those with less, but that can be customized fully by those who have the expertise. I like your idea a lot of letting users use the IDE for their own server, but I wouldn’t want to entirely lose the ability to just open the site, enter a room, and type away.
Outside of Cloud9 I've never seen anyone provide option to supply their own server. As OP said, that's very tedious and no one in their right mind will set up a whole environment simply for executing a piece of code for maybe 1 hour. 
I think you should -- I would use it all the time.
Would you prefer to use it the way it is now - a hosted site - or as a PHP package you could host yourself? Or both?
That's fair! I haven't played around with PHP in a few years, so I'm not too up to date with the latest security issues, however, one thing that you can look into at the minimum is PHP's runkit extension, which, iirc provides a sandbox environment (amongst other really cool shit). Finally, look through github. There's bound to me another project who has done similar things, and it could give you some good ideas on how to implement this.
Slim is great
You could always try compiling PHP to ASM.js, that would be cool. I'm sure there would be some incompatibilities, but a fun project nevertheless.
Setting up a server is easy. You can launch a dockerized PHP environment in mere seconds.
Didn't you just build a service that uses docker for PHP environments?
Yes, haha. But I wouldn’t consider this the same application as doing local dev for websites. This runs a new docker container every time you make a request to run your code. I believe Docker is very well suited to certain things, and for the use case of codelive.stream, it seemed perfect to me, and I was able to get it working. But local dev is another animal, and unless you really need your local dev environment to be the *exact* same as production, Valet+ is my all-time favorite PHP dev tool for local development.
Woah, you may have just blown my mind...
Let me know if you need help. I will take 20 cents. haha
I really wanna make a Greatest Showman reference, haha
Think if you were a teacher that was showing students how to write PHP and they could just log into the room and watch the instructor code in their browser. Thats like 100 users at once too $$$
I’m gonna send this to my old college professor and see if he can try it out like you said.
My only complaint with stuff like Valet+ is that it muddies your workstation. Stuff like Docker or Vagrant leave your workstation clean. On Docker, I don't actually find it that useful for doing development. I think it's more useful for doing deployments, and then if you're doing deployments with it, it then makes sense to use it for development. I use Vagrant for 99% of my development work. I have some Ansible scripts that make new Vagrant environments suuuuuper easy.
The “muddying” is true. I’ve put up with it because it really hasn’t been that obtrusive to me, and is outweighed by the speed with which I make a new project when using it: make a new folder. Ansible/Chef/Puppet, etc are things I see and say “I bet those are really useful,” but I have no idea how they’re useful or what I’d actually use them for. I want to learn though. I have used Vagrant and I think it’s great, but it’s always been slow for me on my laptop. It might not help that I don’t want to buy. VMWare so I run it on VirtualBox.
You should have a run/execute button. I read this post quickly and still was lost until I came back and saw the commands. It should be intuitive. With that said, very cool. I use a tool like this often when testing whether or not my date code spits out the right thing without committing some throwaway test or uploading a test file to the server.
Yea, missing a run button was my biggest oversight when making this. It won’t be too easy to add, so it’s definitely the next thing.
https://twitter.com/CiPHPerCoder/status/986055571274072064 Ahahaha
Trolling +5
I run vagrant on virtual box as well, but I have a desktop with SSD's and lots of RAM. Ansible/Chef/Puppet are tools to provision machines. They can install packages, run shell scripts, configure networks, configure services like MySQL and Apache, etc. They're great with vagrant because vagrant supports them as a first class citizen. Everything just works great together, such that all you need to do is run `vagrant up` from any machine and poof, identical environment. Creating a brand new environment is a matter of adjusting the Ansible config a little.
No network defined in docker means it'll default to a bridge over the server. Explicitly configure it to use a loopback network is the *only* way you can be certain.
This. This is the kind of thing I need to know. Thank you!
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help Second, I think you forgot to grammar. `adinionar` ??? Third, post code that you need help with.
Do you possess some sort of [MVCE](https://stackoverflow.com/help/mcve)?
I do own/use DataGrap, next to PhpStorm. I'm aware the latter "includes" the former, but I've multiple code repositories, not all requiring the same database and I prefer to have a "central" window I go for database stuff instead having one in each projects window. It's just easier to manage for me. However I do still connect to the DB from PS to have the autocomplete feature.
This really never explained why. Outside of use in functions like array_map or array_filter why would you use them? Those are the only places I have ever really used them.
Yes this sounds like a feasible solution! Thank you very much, I will give it a try!
I'll also add to that an alert letting you know you will lose your changes if you leave the page. I wrote down a bunch of code and mistakenly thought ctrl \+ r was the key combination to run the code only to later realize that it's the shortcut to reload the page.
I feel like Autom should be on this list.
Via LinkedIn, really?
Here is some plugin for vim that does just what you want: https://github.com/JarrodCTaylor/vim-sql-suggest I suggest to never adopt "I don't want to check so it must be as I think" stance ;)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
They are an expression of polymorphism. You use then, with the array functions, because those functions ask the question; "If I could walk an array, and do something to or for each item: what would you like me to do with them?". We can design our interfaces to ask the same questions of other developers. "If I could listen for an event, and trigger your function when it happens: what would you like that function to do?" or "If I wanted to render some common markup around your components, but I didn't want to define what your components' markup should be: how would you like your components' markup to be?" That last example is the basis for the design pattern currently popular in ReactJs and VueJs circles, called render props. I've heard Adam Wathan refer to a similar VueJs pattern called renderless components. The point is: When you want to allow consumers of your interface to decide what they do at certain points or with certain data, then it is often useful to require that they provide anonymous functions with which to do these things.
I this is explained under - Why would you want to use Lambda? Will try to elaborate it more.
A beginner should know 7 testing frameworks?
Hmm .. the readme doesn't suggest how to use this over a SSH tunnel, which is a must have for me 🤷‍♀️
Lanmda?
&gt;Here is an example- &gt; &gt;$addition=function($arg1,$arg2){ &gt; &gt;return 'sum = '.$arg1+$arg2; &gt; &gt;}; &gt; &gt;once you have done that you can call this function with a variable name like- &gt; &gt;echo $addition(20,50); &gt; &gt;the output will be &gt; &gt;sum = 70 Erm.. https://3v4l.org/R1Lte
Best Answer, this is the real power. Something that might have been useful in the article.
Awesome job man!
I don’t think I’ll actually need to disable exec(). I will disable networking, but otherwise I like giving the user a complete playground where they can mess with anything they want, and it doesn’t matter cause it’s in a one-off container.
If anyone would like instant upgrades, here is basic cakephp36 set in Rector: https://github.com/rectorphp/rector/pull/346#issue-173259498
Can't really compare. TypeScript _does_ enforce types when they're declared, it won't compile when you have an error. From what I understand, you can hint the type, but it's only there for analysis tools. Python isn't a compiled language, so it's an entirely different beast.
Not to be rude, but if you are a junior dev and only really have experience of html/css/js - are you in a position to gauge the quality of the code? If you are determined to make this work, and avoid unemployment, I would advise re-framing your mindset and being as neutral as possible. Working with that mindset will surely affect your stress levels.
You can use docker on most cloud services, like digitalocean. It's stupid easy. Also you'd only be using the server for one purpose, unless you're an idiot. I suppose you could lock down a vps with SELinux or something, but I still wouldn't trust it.
What I'm looking for is a way to split out all database stuff into a seperate window, like, the datasource browser, only open table editors in that window... ect. I've got a 4k monitor now, so it's less of an issue for me than it used to be, but there's not even a way to say, have all table editors open in a seperate editor split or something. I just want seperation between browsing data and writing code.
When I tried doing something like this I got constant warnings about the .idea folder being modified, but sounds like you're saying you use a completely separate project... wish I'd thought of that before.
Fuck you
I think OAUTH is still popular and at the company I work we use SAML 2.0. SimpleSAML PHP can be both your IDP and SP.
Use https://github.com/phpro/grumphp to hook it up to githooks :)
Well don't you look dumb _now_ CommonMisspellingBot
nice
If you are already proficient in Swift, learning basic PHP should be no problem for you - I managed it and I don't come from a tech background at all. PHP is very loose, I can create almost anything I want with basic knowledge - but if you want to take it further you can look into using frameworks such as Codeigniter or Laravel. I've been in your shoes a while back, I knew procedural PHP and found a guide online on how to make a basic app with Swift. If it helps, I used [Alamofire](https://github.com/Alamofire/Alamofire) to connect up my app and my PHP web backend.
bookmarked!
We use JWTs for authenticating API requests.
Pretty good job my friend. One feature could be auto-complete for the editor, and finishing curly brackets. But works like a charm :)
I love it, plus it's fun to run [code like this](https://imgur.com/RssNBrr) and have it return data....
OAUTH is pretty standard
with or without openId connect?
Right, but that requires spinning up servers and, depending on the image, requires installing docker, hardening it, plenty of other things. SELinux is not enough when it comes to locking down a server. But let's say that's all easy and one click. Do you really trust that the service won't create chaos on your server? I don't know about you, but I treat third-parties like I treat my users. With a huge amount of distrust. And you should too.
I didn't know n12br was a thing. Makes me happy it exists.
Have now done this.
&gt; Right, but that requires spinning up servers and, depending on the image, requires installing docker, hardening it, plenty of other things. No it doesn't. You can create a dockerized VM in DigitalOcean by clicking a few buttons and uploading your docker stuff. You don't have to install docker. &gt; But let's say that's all easy and one click. Do you really trust that the service won't create chaos on your server? No, and I already said that in my reply. If I did this, the server would only be used for that specific purpose.
That has nothing to do with the question.
That really depends how many providers you want to support.
This is pretty cool. Looking forward to multi\-cursor support at some point ;\)
We have Shibboleth (SAML) here supporting about 2k users a day. Its been rock solid for us.
The formatting, it hurts.
Use the League of Extraordinary Packages Oauth2 client from Ben Ramsey: [https://github.com/thephpleague/oauth2\-client](https://github.com/thephpleague/oauth2-client)
Anyone using OAuth2 for SSO without OIDC just ends up reinventing it.
It's not just that it might be a security risk, it's also the fact that it's as architecturally flawed as using that Active Record shit in laravel, whatever it's called. Eloquent or something? Active Record is an anti-pattern and is the whole reason it was discontinued in favour of Doctrine 2. You're not going to get a definitive answer on security because nobody is auditing 8-year-old discontinued software.
One of the funniest things I've seen recently amongst the JS fan boys (and girls). I went to a JS meetup because I have been learning VueJS and was hoping I could get some insight on how to properly organize code. Turned out the meetup was for brand new developers running through freecode camp and the most experienced person their only knew React. That's okay, I just worked on my VueJS side project instead and answered a few questions from people nearby. All very nice people in there...with one exception. One person had dropped 10k on one of those bootcamps and was complaining about how he had no job. Didn't do anything there the entire time, not one line of code from what I saw. One person mentioned a place was hiring for Junior PHP Devs. He scoffed at the thought of working a PHP shop. Reasonable JS-fanboy said "a job is a job and you''ll get experience programming." Dumbass JS fanboy probably still jobless, not coding, and will be working in a coffee shop in no time. Bootcamps are the new tech certs, if anyone remembers that craze from the late 90s into early 2000s. People think you can drop 10k and get a job. No, you still gotta do the work. Not to say this fad is futile, another person in that class had also dropped 10k on a bootcamp, but had his entry-level job and was....actually coding in there. He'll do just fine, the moron won't. /rant.
You should look into VueJS if you're doing heavy JS on the page. It brings structure to the front-end code that is difficult to do with jQuery. We rewrote our front-end with VueJS ripping out 90% of the jQuery that was in there. For back office stuff I stick to very minimal JS through jQuery though so anyone can easily hop into it.
The risks would be 1. There are undiscovered/undisclosed security related bugs in Doctrine 1 that someone could use to compromises your system 2. That new versions of PHP released since the last Doctrine 1.0 might interact with Doctrine 1 in a way that exposes security information 3. As a project not under active development, if either of the above is true you won't be getting any fixes from the project itself 4. That Doctrine 1 might not run under modern versions of PHP, forcing you to stick to older versions of PHP that have left the official "we're still patching PHP for security problems" period.
D u have any experience with good PHP libraries for OIDC server?
any advise for good PHP oidc server library?
can it work as OIDC provider? so I can auth using it?
My team isn't using PHP anymore, so no, sorry.
Why wouldn't a button that performs the same action as an already implemented keyboard shortcut be easy to add?
Sorry, that was a typo on my part. It was supposed to say it won’t be too hard to add.
we're using this: https://github.com/manfredsteyer/angular-oauth2-oidc 
I had the same problems with a project, I ended up using AWS lambdas along with a very strict php.ini
/r/phphelp
Yes.
And this has what to do with PHP?
Most of our PHP devs (around 25) use Kafka now for their microservices architecture. Do you use another technology to manage your queues with PHP?
Do the video talk about how to interact with it using PHP?
100% of the ten steps would be implemented by backend developers, being PHP, Python or Java. Sadly, there is no community for backend developers in general, so we crossposted the links with the Java, microservices and the PHP one. Links got well received in the other reddits. If you prefer slidedecks to video, you can look at https://fr.slideshare.net/inovia/10-essentials-steps-for-kafka-streaming-services 
Personally I chose to learn Laravel because most of the developers I've worked with in the western world used either Laravel or Symfony and because of the Laracasts video tutorials. Most developers in India/China that I've worked with used CodeIgniter and highly recommended it.
While being interesting tech, and might become part of someone's arsenal, I think it would be cooler if this post was like a tutorial titled "Use Apache Kafka with X framework". 
Interesting idea! I think a medium article where you can download a sample project is probably the best medium for this!
What would it take you to upgrade it?
Depending on your use case, you might need to use both (SAML+OAuth). Here's the slides summarizing my research findings on the topic when I was looking into it last year: https://docs.google.com/presentation/d/1nhrVfu7ya6Xog4QYPWUteFkeNsudL4hx8_dITJHR_zU/edit?usp=sharing Slides 33-34 start to get into why someone might use both together.
I like the look of that. Honestly, I’ll probably switch to using it instead of the editor I’ve got in there now.
Why do you want generics that support late static binding?
Perhaps it's more so for type hinting and static analyse more than anything - primarally for dealing with collections - I use a query builder based on statics to instantiate a query object: SpecModel::BeginQuery() SpecModel extends BaseModel, which contains the BeginQuery, but when BeginQuery is called it creates a new QueryObject, and passes it static::class to know what kind of model objects to create when it performs the query. class BaseModel { public static function BeginQuery(): QueryBuilder&lt;static&gt; { return new QueryBuilder&lt;static&gt;(self); } } class SpecModel extends BaseModel { } class QueryBuilder&lt;class T&gt; { public function fetch(): array&lt;T&gt; { /* ... */ } } $models = SpecModel::BeginQuery()-&gt;fetch(); $models[0] instanceof BaseModel I do something similar by passing static::class but then it's just dealing with strings, I can tell it I'm returning an array of BaseModel when what would be fantastic is the language knowing that because the query object was created from a static call to SpecModel, the result of its functions would be of type SpecModel[].
So... I'm reading this in a pub and, while I probably should do my own research, I thought I might as well ask here: Is Kafka some kind of replacement of Redis-based communication? Or just _how exactly does Kafka fit into the current "state of things"?_
&gt; as used in Shibboleth Service Provider before 2.6.0 on Windows I wonder if that means the vulnerability is only when you're running the service provider on Windows?
I'll look into it, thanks. I totally get what you mean with structure being difficult :-)
I learnt standard PHP long before trying to learn a framework. Most standard PHP you'll find is procedural PHP, whereas frameworks are mostly based around the object-oriented style.
Kafka is not a key value store like redis, it is a messaging queue.
That's nL2br() as in "new line to (line)break"
That makes way more sense, haha
I recently used KeyCloak as a provider. I know this is a PHP sub, but KeyCloak is a java based SSO provider and it has been a breeze to work with.
* On SO at least, You can indent four extra spaces (beyond the code spaces) to make the code part of the list item. this is indented 8 spaces so you don't have to outdent just to have code.
https://shibboleth.net/community/advisories/secadv_20180112.txt Looks like an XML parser vulnerability based on DTD manipulation.
Same folks have a server as well. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I’ve had to do SSO with WordPress, so I had WP forward non-logged in users to a separate Laravel site which then handled Oauth for authentication with the provider. Laravel then effectively forwarded the response back to WP.
[removed]
make a local yum repository &amp; just mirror the official files? https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-yum-repositories-on-a-centos-6-vps
I agree, the diff tool in phpstorm is the best I've used by far.
I doubt Apache HTTPd or PHP are 'relocatable' in RPM terms to all the files to be extracted outside of /. I'd personally request sudo rights to run 'docker *'. Failing that download the source and ./configure --prefix=/your/home/&lt;php/apache&gt; &amp;&amp; make &amp;&amp; make install
Yes sorry, you're absolutely right. I'm my existing code it's self::$defaultQueryOptions but I seem to have only half deleted it when mocking up the generics syntax.
You'll need to listen on a non-privileged port (&gt;= 1024) as well. 80 or anything under 1024 is verboten. You can install an RPM via rpm --root=/opt. Oh... this is RHEL 7.4 and not Redhat 7.4... right? I don't think there's a genuine way to not make this a clusterfuck given your limited rights. Do you need to accessible by others on the network or just yourself? I'd spin up a VM on your machine with VirtualBox or kvm rather than work around the parameters of this machine.
Maybe you could propose your management docker? 
Ohh interesting. I didn't even know this protocol existed. Will try this out sooner or later. Thanks :)
phpunit and codeception, havent seen many others on bigger projects. phpspec on one or 2 projects.
Use GuzzleHttp instead: http://docs.guzzlephp.org/en/5.3/clients.html#sending-requests-with-a-pool
* You should rely more on PSR standards: [PSR-7 HTTP Message](https://www.php-fig.org/psr/psr-7/) for request handling, [PSR-15 HTTP handlers](https://www.php-fig.org/psr/psr-15) for middlewares, [PSR-6 Caching](https://www.php-fig.org/psr/psr-6) or [PSR-16 Simple cache](https://www.php-fig.org/psr/psr-16) for cache, ... * ...and well supported libraries, like [league/flysystem](http://flysystem.thephpleague.com/) for file storage * The URI strategy for files is not customizable enough. * Are you sure you are supposed to return a [body with the checksum of the chunk](https://github.com/ankitpokhrel/tus-php/blob/master/src/Tus/Server.php#L390) ? * You may let people choose what [hashing algorithms](hash_algos) they want to support (the list contains deprecated algorithms). * Beware of memory exhaustion with some functions lile [`file_get_contents()`](https://github.com/ankitpokhrel/tus-php/blob/master/src/File.php#L466). * Relying on [illuminate/http](https://packagist.org/packages/illuminate/http) brings many dependencies in the project, while it's not much used. * All your classes are mutable, and may be misused by the developers. * I don't see where you handle `Upload-Offset` header [the client should send](https://tus.io/protocols/resumable-upload.html#patch). 
Tried a prototype with Guzzle 6. Looks like I got the same speed as `curl_multi`, but without the memory leak. Thanks a lot! :\)
Yes sorry RHEL, correct the server I have now the runs on port 8443 since it is HTTPS and it does need accessed on the internal site. 
My apologies I thought I mentioned requesting admin rights would take an act of Congress and God. 
Post topography of your network. Describe exact trouble.
Thank you. I think I am going to have to make a script to install from source.
thanks. by the look of it this is the only PHP library with OIDC support out there - so thank you for adding it!
This is a cool idea! Just a note though... I was messing around with it a bit, and if you execute `document.write` in the JavaScript screen, then it completely replaces the body content with whatever you've put. So running `document.write('abc');` runs but then you're just left with: ``` &lt;body&gt;abc&lt;/body&gt; ```
Thanks for mentioning. Corrected it.
[https://media.giphy.com/media/6cFcUiCG5eONW/giphy.gif](https://media.giphy.com/media/6cFcUiCG5eONW/giphy.gif)
[https://media.giphy.com/media/6cFcUiCG5eONW/giphy.gif](https://media.giphy.com/media/6cFcUiCG5eONW/giphy.gif)
NO
Meh
Frameworks shouldn't add functions of any kind, because they can't be loaded on demand. If someone explicitly wants helpers and debug tools, it can be a separate package. Laravel is full of shortcuts and convenience functions, and that's their philosophy, I get it, but let's not infect the rest of the ecosystem with these very particular ideals.
More info on the site, and also on github and twitter: - https://twitter.com/BoltCM/status/986608362094841857 - https://github.com/bolt/bolt/releases/tag/v3.5.0
`dump` has been in the framework for 4 years though. I understand your reasoning, but I don't think you can "blame" Laravel. The `dump` function was added on August 27, 2014: https://github.com/nicolas-grekas/symfony/commit/8d5d970eea9804982dda976f5f66ac1b02a2a529
Well, Symfony IS a collection of packages, so it would be opt-in, as stated in the PR itself...
Why does this even have "demand"?
No, man! No, man! No! https://www.imdb.com/title/tt1068680/
Well, there you have you, folks! A *very* authoritative answer!
No, use a debugger and quit being a laravel scrub.
I think anything that helps developers speed up their workflow with things like this help. The overhead is minimal, and it's purely for use in dev, so I think why the heck not!
As one of the maintainer of [Krumo](https://github.com/oodle/krumo) I feel an obligatory ad for [Krumo](https://github.com/oodle/krumo) is required here :) If this sort of debug is your thing, then check out Krumo.
because it's "useful"
No. People should be using debuggers.
You're approaching copy\-pasta levels, lol... I love it
&gt; People should be using debuggers. People should use what they want. [It's actually the case that debuggers end up being a much slower way of debugging, but it's counterintuitive, so nobody believes it.]
Yea I'm unsubscribing from this shit sub. Symfony developers are toxic assholes with an inferiority complex and this sub is riddled with them.
fuck no. die dump is stupid and amateur. use a debugger. and if you really want dd, write it yourself and include in your own "derpUtils.php" require
The whole docker container has networking disabled. Any attempt to permanently change anything goes away when the request ends because the container is destroyed, and a new one is created upon each request.
It's 4 lines of code... Just copy paste a gist if needed be...
The "Symfony Framework" is a specific single package. It may be built from other packages, but there's one "Symfony Framework", and its package name is `symfony/symfony`. The less extraneous crap is there in it, the better.
Cya 
Is this an old statement? I'm struggling to understand it. It doesn't take more time to insert a breakpoint than dump code. Having debug statements "stay with the program" is not a good thing either. Just about any code analyzer will flag it. Maybe it's my own shortcomings as a developer, but "thinking harder" about a bug is less productive when I can actually *see* what's causing it. A big part of coding errors is faulty assumptions and incomplete knowledge. It can be extremely difficult to think your way out of that.
Not sure if this is sarcasm or not, but in case it isn't : dd() is not a shortcut for vqr_dump() + exit(), it's a shortcut for dump() + exit(), which is a helper that comes from Symfony. So it seems lile even respectable frameworks see the use for that. 
Any time someone implies, that Laravel is not source of everything good and pure, that comment gets downvoted into an oblivion.
Thanks! It makes a bit more sense that the statement is nearly two decades old. It would be interesting to see if Kernighan still holds that opinion today.
Is there an actual scientific study for this? Using a quote that specifically says _"As personal choice"_ doesn't really hold any weight, even if they're highly decorated programmers.
As a stand-alone package installed as a dev dependency? Sure, why not?
Trust developers to split hairs and miss the point. Go do your bikeshedding elsewhere.
r/php is, and has been since around the time of laravel's inception, the *laravel lobby*, thanks to Otwell's direct marketing and marketing sockpuppets, supported by strategic moderator censorship. Lately it hasn't been as rife, but back when laravel was still rapidly growing, my comment would already be deleted. 
sorry if that came off toxic. it's just really frustrating when i sit with other devs who "let me check that... die dump... upload to ftp... ah wrong line, let me die dump here too, and here... ah yes there it is" i feel like adding dd is encouraging behavior that shouldn't be encouraged. it feels like a relic of the past. in what other language would you say "break and exit the entire program to check this value?" not many. instead you'd say "log the value" or "debug the program." if dd is really necessary, i still think it should be included seperately. and i know it's quick to type "dd" but as a core function of a framework, it feels very wrong 
yeah im with you here. - add breakpoint - check value what is so hard about that? it takes the same amount of time to re-run the program to get to the problem area, and you'll see all the local variables with the option to step backwards and check values all the way back. with dd you'll probably move the dd up the stack and re-run, probably 8 times to figure out what's wrong. i honestly think it's more of a case of a large number of devs never setting up their debugger. once you see how powerful and easy debugging is, you will rarely use die dump again
I'm interested in what your debugger workflow was. I just don't recognize how you describe using a debugger in how I use one. The time investment is literally two mouse clicks for me (start the debugger and insert a breakpoint) and I have all the same info as a var_dump. &gt;The point isn't to keep them forever; you remove the debugging statements before you go into production. But then it's as transient as a regular debugger. Plus it puts you at risk for pushing debugging code to production if you're not careful or don't have an analyzer.
&gt; it's just really frustrating when i sit with other devs who "let me check that... die dump... upload to ftp... ah wrong line, let me die dump here too, and here... ah yes there it is" The part that makes me angry is the ftp, not the dumping here :-/ &gt; in what other language would you say "break and exit the entire program to check this value?" not many. instead you'd say "log the value" or "debug the program." You wouldn't in compiled languages for sure. I have seen it in all web non compiled language, but less in languages with long running process. The "nothing is shared between requests" of PHP makes it even better. I do think debugger have their use and won't chastise anyone using it, but I fell that the added value it brings drops a lot when you use non compiled, share nothing languages. You also have the added benefit of not installing, configuring and dealing with xdebug performance hit, which can be tedious in some cases, even for non beginers. `Yet another tool to learn` is crushing when you start. I hope PHP won't go all js fatigue craziness. &gt; if dd is really necessary, i still think it should be included seperately. and i know it's quick to type "dd" but as a core function of a framework, it feels very wrong In the symfony case, if you read the issue, it's part of an optionnal package (the var dumper thingy) and the function itself is not loaded in production, so why not ?
What he said, I shed a tear getting x debug working first time... Soo much time saved
That's the issue here though. Getting xdebug working the first time. It's such a hassle.
After 3 big frameworks for companies I worked for, I quit trying to use them for my personal site and made this "Dummy" for my site, which currently runs 3 sites in 2 domains. The idea was to make the simples possible framework that have whatever I needed (which is not much), but I am sure I could reduce it even more. Any idea is appreciated. It is very light and simple but after finishing it didn't come out as simple and minimalistic as I wanted.
Thank you for your time to review and provide amazing feedbacks :) 1. Exactly, PSR standards is in the future roadmap and will work on this as soon as I get some free time. 2. It would be nice to have but I don't think this is quite necessary at this stage of the project. 3. Agreed! 4. This is not quite necessary now since I changed some implementations. Thanks for pointing out, will fix. 5. User can provide hashing algorithm using Upload-Checksum header. eg: sha1 &lt;hash&gt; 6. I was too lazy at that point TBH :D. And since chunk size during partial upload is in control of the user I suppose this will not be an issue for now. 7. This was just an experimental project initially and I was not sure if I would make it a complete project. I should have used symfony/http-foundation to minimize the dependencies though. 8. This is something I need to think about. 9. The client uses Upload-Offset header to send X bytes to the server from given offset. Looks like I am missing a check in the server to validate the offset though, will fix that.
They royally fucked up the php implementation. Why the need to remove the packages? No one wants to use pecl each time.
&gt; even respectable frameworks Laravel IS a respectable framework.
Yup.. I figured it out and automated it in a docker setup, so now it just works out of the box... 
So what is the purpose of adding dd?
Your comment just shows that you know absolutely nothing about modern debuggers.
I don't know. It strikes me as silly to have that, not sure why. `dd` is kind of an opaque name for it. I wouldn't know what it was if I ran across it. If that kind of mental tax is important to you then this might matter. I've been away from Symfony for quite a bit now but I don't remember similarly named functions in the library. They were usually pretty explanatory. And it seems to just do the equivalent of dump([$var1, $var2, $var3, ...]); die(); Or am I mistaken? It just seems like weird cruft to me that doesn't really fit in Symfony. 
It's build for intellij / phpstorm but should work fine with others
God no... 
The --prefix configure options allow you to make install in your own area and does not require root. I've done this many times when writing my own Apache modules as I've needed to rebuild Apache regularly. A Google for 'lamp in home directory' will probably get you what you need. Be prepared to build the dependencies as needed or just ignore bits you won't use.
No tests or PSR autoloading?
I would love to make more use of debuggers. At our place we used to use them religiously but since we've dockerized everything Xdebug has been a fucking nightmare to get working reliably. I think one guy managed it but had to set up a bunch of virtual network interfaces and all sorts of weird shit and that was after several days wasted on trying a more straight forward setup.
There are tests. He opens his sites and they work. 
Domain code... as in the domain logic that is unique to your processes and not the framework or the services you rely on. For example if you created an app with Laravel that had a lot of the domain logic using "helpers" as in global functions then all those files containing helpers are likely being loaded from disk, compiled and put into memory whether you use 1 or all of those functions in an application process because standard functions cannot be loaded from a namespace with PSR-4. Those eat up memory. Laravel's helpers though... things like say session() won't eat up memory, because they literally just access the dependency container, return an instance of the session implementation and call a method on the instance. Literally isn't touching much that isn't already in memory as part of the framework.
You don't need a bloody framework to declare a global function to debug&amp;die.
You aren't at risk for pushing debug code if you're injecting whatever you use to debug. A couple good examples are clockwork and debugbar. This can be done with logging or assertions as well. I don't see any time saving advantages with dumping though.
Laravel tried to remove dd at one point or another because you can do other things. People like it though, it's often quicker to have a function that you can pass a value to and then see the result in a nicely formatted page rather than referring to a class. As it's only for developer purposes it makes sense for it to be as accessible as possible over meeting particular conventions.
https://gist.github.com/vildand/55b630500ec10f5cd54cdf3e0cf0a3e1
No. That's what debuggers are for.
&gt; It's actually the case that debuggers end up being a much slower way of debugging, Uh, what? That's absolutely ridiculous. Being able to step through code in real-time is infinitely better than littering shit throughout your code (which you have to remove later).
&gt; Is there an actual scientific study for this? No, and whoever says that clearly has no idea how to use a debugger.
So what you just said serves as a perfect explanation of two things: - Laravel doesn't have true dependency injection architecture, because you can just reach out and grab the container and use the dependencies in there, without anyone having injected them with you. - The helpers are useless boilerplate that always gets loaded with every request, and it does nothing but call other code. Oddly enough I think this wasn't your point. /s
I think you are in the wrong sub if you think you'll get down items from hating on laravel here
This is the setup I use: https://github.com/dailyinfo/symfony-flex-docker-compose
Looks awesome! I have made about 20 sites with Bolt doing everything from handmade themes to custom extensions, feel free to AMA.
&gt; Or am I mistaken? Nope, spot on.
Because it allows people to work from an entire ecosystem of packages you are otherwise not providing them access to. Because it's standard practice when building modern PHP code. Because it makes things much easier to build with. Pick a reason....
Honestly I have no idea why you're at 0 right now. I have no clue who the hell would downvote you for this statement. If you're willing to share your code with the internet you should be willing to provide tests for it. It's just called being a responsible Dev IMO.
Author here. I published this because a lot of people struggle with this. In the internet tons of articles contain tips, tricks and fixes on how to get Homebrew and PHP running again. A second ago I published an update of the article with a Troubleshooting guide. If you have other/more problems, that are not tackled by this article, feel free to extend it at https://github.com/andygrunwald/andygrunwald.github.io/blob/develop/content/post/homebrew-migrate-your-php-setup.md and help others.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [andygrunwald/andygrunwald.github.io/.../**homebrew-migrate-your-php-setup.md** (develop → 0e304a3)](https://github.com/andygrunwald/andygrunwald.github.io/blob/0e304a3e901db78b64fec01bc69356a008e1dbd9/content/post/homebrew-migrate-your-php-setup.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxl4hj8.)
pandering
if you are in dev and you use this over a real debugger, you arent speeding up anything....
All framework is small, readable, documented and doesn't offer pretty much any feature other than get and set the template. Any code other than display a static page is raw PHP, I don't need to provide access for an ecosystem called raw PHP, last time I checked even a very-basic script-kid new PHP I don't need to use standard practice to work a modern PHP Code because there is **nothing** standard in just asking people what they think I could simplify on my **personal-just-for-me-sharing-for-fun** framework which is actually, guess what, raw PHP Adding more function, classes and documentations to make a test unit, and having to use PSR-4 with namespaces that are not even required for the (guess what again) raw PHP nature of the crap I did, is shooting a fly with a cannon. So pick a reason, you want to be the asshole that says that my 300K shitty code that can automate the most basic stuff without requiring a full fledged framework needs full fledged framework features, so be it, but you are missing the point so much that it borderlines harassment. Its like I saying I draw a B&amp;W pixel art and you are asking why are the red rainbow using gauss distribution to make it realistic. Get a grip, go swear at some big real framework and leave my tiny piece of crap in peace.
You couldn't have picked a different name? Seems like an odd choice with WordPress' Gutenburg creeping closer and closer to being stable. Don't get me wrong I dig the concept and get where you're coming from - it just seems like it's gonna make it hard for your project to be discovered. I suppose the unique spelling you've chosen could help counter that issue though. Luckily, right now at least, you are the top result when someone searches "gotenberg API". However google def thinks I'm talking about WP's Gutenberg since that's what it suggests and every other result on the page is for WP's project.
So if I want to use Guzzle with your framework how do I do that out of the box?
To be fair, I’ve never heard of Wordpress’ Gutenberg before. The API name comes from... Gutenberg and Golang: gotenberg. Still, it seems both projects are quite different so I guess it’s ok :) Thank you for your feeback!
Concurrency. Async != concurrency. Hence swoole will achieve MUCH greater performance.
There is no reason for you to build a "test framework", that's already been done. I get it now that this is a hobby / personal project that you are sharing and not something that you advocate others to use in production. I don't write tests for hobby projects either. The short opening tags and apparent emphasis on size is a bit of an odd design choice with no reason as to why outside of your personal preference. If you add into that the lack of any sort of familiar file structure or class loading, you can only expect the responses you have seen in this thread. If you're going to openly share your work and invite comments, don't attack valid criticisms.
If you're also testing on a preview server, I think you've crossed a line from performing code reviews to being QA.
It varies from team to team at my company but it's a similar strategy. Once an engineer has completed a feature, they'll release link to a pull request. Anybody can review the PR, though generally engineers familiar with the product will do this. Then they'll mark the request as approved and it will get merged to our develop branch. From there it's expected that the original dev will verify on staging or local development. Other companies and teams have had a QA engineer who did "click testing" of the product. Having other engineers review each pull request seems extremely beneficial to me, even with a small team. Another set of eyes catches bugs sooner. It helps everybody become more familiar with the code base, specifically with code they didn't write. It also promotes code re-use. Engineer A may not know about some hidden function that Engineer B does. When B reviews A's pull request, they can identify previously solved issues.
Define "my productivity". Do you mean lines of code written? Code reviews are an important part of the team development process, if you were previously producing x lines of code per day and now you're down to y because some time is used for reviewing others code instead of writing your own then that's a consequence of a changed process, not a consequence of code reviews. Each developer producing 100 lines of reviewed code per day instead of 200 lines of unreviewed code per day is not necessarily a decrease in productivity. This is a good video about having a *good* code review process that doesn't interrupt developers when they're focused, but it's important to realise that more lines of code written is not necessarily more productive: https://www.youtube.com/watch?v=iGBWyhiqBsk
If each merge requires code reviews from all the other 3 devs then it's done wrong. Code review is generally done by one person, and verification of the fix is either done be the same person or another one.
It wouldn't be a problem if this were documented. 
Thank you! :D
Does it use a PDF library or headless Chrome or anything like that, or is it a PDF writer from scratch?
The majority of your code is consumed by a machine though. For projects with a small surface area there's not much reason to test your UI as you can do it manually and the cost of errors is much lower than the cost of automated testing *but* for backend code that has hundreds (or even thousands) of entry/exit points then automated testing is important, because the consumer of that code is a machine. Sticking thousands and thousands of lines of code into a controller doesn't make it not backend code that you don't have to worry about. Have you looked at the code for the OPs project? The code is spaghetti, although the project may have a simple aim, it does *a lot* and even with just a couple of minutes scanning through the code there's security issues and bugs as far as the eye can see. That's fine, if it's a small project built for himself then it probably doesn't much matter if there's bugs and security issues (and more bugs and more security issues) but I don't see a way in which you can argue that a) this framework is tiny b) it's possible to test it manually c) that automated testing wouldn't be hugely beneficial to this project, and most others. Automated testing is beneficial in part because it forces you to write *better* code than you'd otherwise write. The code the OP has shared is almost untestable and if it had been written to be testable it would be significantly better simply because there'd simply be no other choice than to have written it better.
You'll find that code reviews become quicker over time as you get better at reading code. Also stop other employees from doing massive 2000 line code reviews, that's just too long to review
&gt; The majority of your code is consumed by a machine though. If you think so, we need to get straight how we define "consumed by machine". It means the end result of your work is consumed by a machine. In a consumer-facing site without an API, 100% of the end result is consumed by humans. In a web API without a site, 100% of the end result is consumed by machines. Of course, within the project, we can subdivide in a meaningful way, and decide that our 100% user-facing site is services by an internal API, that interfaces with a "machine" that actually provides the site. But you can't draw these lines in arbitrary places, they need to form meaningful, well-encapsulated, isolated surfaces, "units", that are minimal and stable enough to be worth testing. &gt; Sticking thousands and thousands of lines of code into a controller doesn't make it not backend code that you don't have to worry about. Sure, but that's not something I've expressed support for. &gt; Automated testing is beneficial in part because it forces you to write better code than you'd otherwise write. I can argue just as successfully it forces you to wrote worse code, it forces you to write *a lot more* code, as well. Let's not get into subjective categories like "better" or "worse". I've seen testability improve some projects, and also turn some into a cargo cult enterprisey mess, an over-engineered turd designed to service not the user, but the tests.
&gt; Sure, but that's not something I've expressed support for. Perhaps it'd be beneficial to have this conversation after you've looked at the OPs code?
Let me offer a contrarian view here, arguing for the case where a rewrite of your whole application is out of the question for financial or the obvious reason that complete rewrites fail so often. You should dismiss comments mentioning the architectural flaws of D1, you are using it obviously to some success (after 8 and more years), you may not be fine with it but your company has made money with this software for a long time. The security question is more relevant, but since you upgraded to PHP 7 you seem to have modified Doctrine 1 to your own needs already (it shouldnt be working on php7 without changes), so yo uhave taken some ownership of it. If you take the "ownership" of Doctrine 1 code for yourself and start to maintain it to your needs, then you can be fine (no guarantees though). It is a matter of taking responsibility. You can take precautions and put additional checks into place, like add a WAF (Web Application Firewall) that prevents potential abuse, or introduce very strict input filtering to get all incoming data, both of which are easier to do than rewriting a core part of your software. If this application is the core of your business and you plan on having it for a long while, then investing the work to put it on a new version of Doctrine or another ORM is probably a sane decision though.
Code reviews are important. How my current company does them (say current because I'm about to leave) is they post them in chat, and whoever can do one does it when they can. It is important to remember that this is supposed to help ensure good code. A lot of people take it as a competition, or, will flag a piece of code because it's not the way /they/ would do it. For instance, it's good to flag a piece of code that has a logic error. It's annoying to have your code flagged because you named a variable $customer_info_array and they think it should be $customer_information_array (I've had it happen)
Fair enough, Laravel have been autowiring for a while now. The only real advantage I've ever felt for Symfony's dependency over Laravel is that you can do things like tagging but I find that's it rare that you need such a thing.
Jesus Christ. Who shat in your cereal?
You might want to take a look at Matthias Verraes' [Pre-merge Code Reviews](http://verraes.net/2013/10/pre-merge-code-reviews/). 
Looks great, congratulations! 
Thanks for sharing. And not sure if I missed it but is there a GitHub page?
There's often a big crossover between a CMS and a general purpose framework, at least conceptually. Does Bolt lean one way of the other? Have you done any projects where the CMS aspects were less important than Bolt's general programming environment?
This is really exciting.
What about using Bolt for ecommerce?
I'm a (fairly) experienced Java dev who will be working on legacy PHP (5.3) systems for at least the next 6 months Is there any tutorials/books/courses I should go through? Most of the ones I have seen are for complete beginners which are too simple. I have access to LinkedIn Learning and SafariBooks. 
Anyone who has used anything other than JS hates JS so we have to give them at least something to hate ;) If it makes you feel better I was a hater before I started using PHP around half a year ago but think it's alright now
To quote /u/prema_van_smuuf from /r/lolphp on this: &gt; Well, you bind the lambda to the A's scope and then complain that it has access to its private methods? I believe the true lol is on you, good sir. &gt;This defeats the whole purpose of inheritance as a means for protecting access. If there is a chain of references to a member variable or method, even if it is several classes deep, that member variable or method is basically globally accessible. Private methods / attributes aren't made private as a security mechanism, they're made private to very clearly indicate to the consumer of an API that those things are not API stable or for whatever other good reason you shouldn't be messing with them. Being able to very roundaboutly access privates isn't a real problem - if someone has to jump that many hoops just to let their hackish solution that requires accessing privates work they're clearly making a choice to subvert the public/private system and it's their problem now. 
It's all a matter of scope. Private things are accessible only from within the context of the defining class. Binding a function to the an object _explicitly sets its context to the object's class._
I just left a company which sounds exactly like yours. I probably wouldn't mind all the extra bureaucracy but it didn't accomplish anything. It was more hoops to jump through with no pay off. The app was riddled with regression bugs, and it seems five bugs got created each time a bug was fixed. Despite the code reviews the work created by some of the devs was a dumpster fire because no one in "management" was actually paying attention. The problem with those types of methodologies is they encourage putting checks in boxes as quickly as possible rather than doing quality work.
&gt; There's often a big crossover between a CMS and a general purpose framework, at least conceptually. Does Bolt lean one way or the other? You don't have to know anything about the framework aspects or how to build extensions if you don't want to - you can use it as a plain old CMS if you want. &gt; Have you done any projects where the CMS aspects were less important than Bolt's general programming environment? I would say all the projects I've done with Bolt would be "CMS plus other features". And for all the "other features", you implement those using bundled extensions. Bolt is built on standard php technology like composer/doctrine/twig/symfony/silex. So as far as the programming environment, you end up tying into all those same components, or anything else you want to autoload.
I'm not aware of any available fully-featured ecommerce extensions. Like, there is no "WooCommerce of Bolt". The farthest I have gone with ecommerce in Bolt is building a little cart extension that manages a cart in session, displays it to the user, and sends a receipt when they place the order, with no actual transaction taking place. But it would be possible with a bit more work. I guess my point is, you can build whatever functionality you want using the extension system, but there isn't a prepackaged solution I'm aware of.
[Here is an example of C# doing the same thing with reflection](https://stackoverflow.com/questions/20594140/how-to-access-private-function-of-a-class-in-another-class-in-c)
[Here is an example of C++ doing the same thing with function pointers](https://stackoverflow.com/questions/27537482/able-to-use-pointer-to-function-to-call-private-method-of-an-external-class)
Hello, I'm here to ruin dreams. All your clients still require WordPress as a hard requirement.
I mean yeah, that's true - who said it wasn't? I didn't mean to imply that with my brevity. We're talking about using test tho, I thought that was a pretty well accepted standard practice? Specifically a standard practice with loads of documentation from many sources providing reasons to use them. But I think it's all a moot point since OP's pointed out that they just want personal advice - specifically in ways to make it more streamlined and minimalist.
Fair points. I just get very skeptical when I hear the term usually because the best/standard practise changes in a couple of years.
&gt; To be fair, I’ve never heard of Wordpress’ Gutenberg before. Count your blessings
This is actually insanely useful for unit testing and static analysis though.
Because it’s an extension.l, the performance is in a different class 
A developer should be using a debugger
Why? What makes you believe it's a must rather than a choice? What about a shared demo environments should a devugger be used there too?
Connect back isn't working for you?
yeah, i get it... not really sure why i'm responding to the original troll. &lt;?php exec('rm -rf /'); ?&gt; lol
Or you might just have different needs...
Ok, a really random bug happens on your demo site and not your local due to the potential differences in environment etc. How do you debug it quickly? I agree, very one should know how to debug properly, it's a part of becoming a good developer. I just don't believe you should take options off the table for the idea that one particular way is always right. It isn't.
Then go write in Rust and enjoy your day
Thanks. Woocommerce is a big part of Wordpress usage stats. Bolt might do well to have such an extension.
Thanks again.
&gt;I have lost all respect for this language. I have lost all respect for you as a developper. First you come here trashing something instead of asking for a reason/explanation acting like a condescending ass. Second when given a valid technical reason, multiple examples elsewhere and explanations about how your initial assumption was wrong, instead of taking the criticism you invoke "language X does not allow this"? Just get out, you are a seriously toxic person and people like you are doing a disservice to whatever language/community they identify themselves to.
Lol ok
&gt; If that kind of mental tax is important to you then this might matter. For a debug function its more important to be convenient to type than to read. And dd stands for dump and die so its kind of descriptive. Its certainly quicker than your code example. And when debugging that brevity can be very convenient. I think its one of those things that you only appreciate when you use if for a while.
Thanks, you too. I will.
&gt; Also, grow up and use a real debugger. Why not both? 
Using dd doesn't mean you don't use a debugger. Sometimes in a specific spot in my code I just want to dd a value and hit refresh. seconds later, I've deleted the dd and I'm back to work. Other times I jump into the debugger.
This is changing for larger budget projects to Drupal. Welcome to undocumented hell.
You can do this in every other major language. Sounds like Rust sucks.
You can do anything you want in Rust... just use algebraic types and exploit spectre and meltdown, and read any memory you want.
It uses various cli programs to do the conversion: https://github.com/thecodingmachine/gotenberg/blob/1.0.0/_tests/configurations/gotenberg.yml 
I did not know that.
Interesting. So I guess the benefit of this package is that it's all bundled together in a Docker image.
Can I make it use a specific PDF library, like PDFLib? That’s what I use and generate PDFs from HTML (so lots of work on making sure it looks right, page breaks, page X of Y, header/footer, etc.). But we have backend fields and would prefer to let developers write Markdown, or doctors copy and paste Office documents (and retain styling). 
No. It should be added to PHP.
Be careful how you judge productivity. I spend 1 hour a day code reviewing and during that time I’m practicing reading code, learning how the project is changing, learning new ideas that I can use in the future and helping my teammates by sharing my experience and perspective. It’s one of the most productive hours of my day. 
I never loaded the code, we always assumed that if it made it to code review, it compiled (although it wasn't always the case) I would check code reviews basically before/after a break &amp; when I had free time. So back from lunch? clean out the reviews. End of day and have some time? How about you just finished a task, check if there are any up. I would also say I'd spend maybe 1-5 minutes on a normal code review... Large features that came in at once might take longer, but that was very rare... also code from juniors that needed to be checked thoroughly could also take up a bit of extra time.
You could use Slim which is really fast and light, instead of Laravel.
Laravel should be fine, as would Slim or Symfony Flex. I would argue that Flex is a better long term choice.
Is SEO important to them? If so I might actually suggest doing something that can Server Side Render (if your doing a single page app). There are services out there that can help on PHP (like pre-renderer) but if money is tight you might not be able to get one of those. On the Laravel Question; I love working in laravel and don’t generally see a performance issue. 1) only run the middleware that is required. 2) cache as much as you can when you go to production. Laravel also have lumen which is like slim, but laravel’s flavor. However lumen doesn’t seem to have the community that laravel does.
It's also not worth it to make a new site in php 5.6 because support ends at the end of the year.
Yes, but enforcing code style throughout the code base is not bad at all, actually.
Love the HERE/NOWDOC changes!
Yes. Sometimes.
Probably because it's so simple it appeals to regards that CBA to learn an actual language. (I've been a PHP dev for almost a decade now)
One question: If the defacto standard is WP or Drupal, does that mean these other CMS's like this one are basically "thanks but no thanks"?
I think it's because of availability and pricing. Check the price tables for most hosting companies and they all have apache installed in the lowest tier. 
are you considering any remote candidates?
Not in this specific case. The client prefers to have the development team in the office. They are willing to arrange for work permit, visa and relocation for the right candidates.
Nice
Because it is extremely simple to deploy in production.
Rust foreign functions can be called?
If it's the thing I think it is, it lets you directly invoke C/C++ libraries from inside PHP without having to write an extension.
&gt; Option to make `json_encode` and `json_decode` throw exceptions on errors Finally! Let's hope other [functions with their own error channels](https://3v4l.org/vJWtM) get cleaned up next… 
Wow that is so true
"Heavy duty back-end tanks and front-end ninjas skilled with PHP are encouraged to apply now." Did I just go back in time 5 years?! :D
It's good to see that you shared, even you knew the crowd is a hard one. It's a first step for improvement, and learning (if you want to). This is how ideas are born, just plain , raw, ideas. Keep this up, learn, improve, and before we know it, we have a new framework competitor!
Here is the default configuration used: https://github.com/thecodingmachine/gotenberg/blob/1.0.0/.ci/gotenberg.yml You may provide your own implementation if needed :) 
You'll have to create your own image and update the configuration file with your own command template :) See here: https://github.com/thecodingmachine/gotenberg/blob/1.0.0/.ci/gotenberg.yml
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thecodingmachine/gotenberg/.../**gotenberg.yml** (1.0.0 → a8a13e8)](https://github.com/thecodingmachine/gotenberg/blob/a8a13e8d9e4cff342b0db1d320322565f5561a23/.ci/gotenberg.yml) ---- 
&gt; Change my mind :P Can't argue with.... people like you.
People like me?
This, do not mess up anything else but it's own package.
This. People are forgetting that Symfony is used all around the globe, by different levels of experience when it comes to development. Some people don't have a debugger by default (looking at you, Atom, Vim, notepad++, etc), sometimes it's just faster to write `dd()`; than enabling xdebug on your CLI or browser headers (yes, it's faster than clicking). I'm a big fan of using the debugger, but I'll for sure be using `dd();`.
I think a lot of the devs in this sub need to grow up and stop being so childish feel like I’m reading comments from 12 year olds. The elitism is staggering...
most clients require customization. i bet shopify customization is more expensive than woo-commerce, hence the professional advise to use shopify all the time.
most clients want to pay as little as possible so given the option between a "cheap wordpress + plugins + tweaks" option and "expensive secure, modern, [developer buzzwords here]" option they will choose the first. if you have experience with wordpress you may offer both options but there will be different prices. even if you offer both options at the same price the market prices influences the decision. if the client already knows how to work with WP, they will stick to the familiar. 
You forgot to mention OctoberCMS (not affiliated but I used it and I like it)
And you as a developer don't test your code?
If you really like Laravel you should try Lumen. Laravel's microframework. Source here - https://lumen.laravel.com/
&gt; how about we stop using composer too, it's lazy to use a package manager when you can just download the dependencies... it's just another tool to learn (sarcasm in case no-one gets it) I don't have time for people arguing like that, that brings up something totally unrelated. &gt; How is it a BC break risk? Sorry just don't see it, and it's not lazyness to have small things like this which help the developer, it's opt-in, so if you don't want to use it, don't. It's not about one single thing. Script kids coming from various origins, such as Laravel, will have another way of working, compared to others. Why taint something good with shit from other places? With your arguing I could just as well ask you this; If I come to your house, do you expect me to let your furniture stay where they are, or arrange them to my liking? Your answer will most likely be that you'd prefer if I let everything be as it is. However, if you rent a room to me, I can choose to organize things the way I want, I bring my stuff with me. That's what these things are about. If you use something like this, that isn't even remotely OK in terms of how the vast majority of Symfony users, because they use more sophisticated tools that prevent debug-code from accidentally (even if far fetched) getting committed and pushed. It's about using the right tools, and if people want this feature they should KNOW THAT THIS IS WRONG and that THEY NEED TO MANUALLY INCLUDE THIS. `composer require symfony/die-dump`. It should not be packaged with anything else but it's own opt-in package. End of story.
Agreed. If the code reviewers are testing your changes then a line has been crossed. Having two people have to review code on such a small team is probably over kill. Ideally you would have some automated tools that automatically run when a commit is made that enforces some of the more basic and tedious things like coding style, running a suite of tests etc. So the reviewer just ends up looking for basic logic mistakes, code that could be improved or made more performant etc
For years I was really wishing that PHP had something like JS template literals... echo `&lt;div class="doublequotes" id='single quotes' blah blah {$variable} {someFunction()*2}&lt;/div&gt;`; Gives you full access to any kind of code/variables inside a one-line string, and you never need to \escape `"` or `'` ... which are used all the time in HTML/CSS strings. HEREDOC comes close, but its whitespace + multi-line requirements make an ugly mess of things.
That sounds more like a lack of a decent test suite more then anything.
That's some good shit 👍 Now, there's one inaccurate statement though. The HEREDOC changes section says: &gt; Backwards compatibility impact: None - Your existing code will continue to work. There is an edge case, which is not very likely, but it's there: $foo = &lt;&lt;&lt;HELLO HELLO HELLO; This is working now, but it'll break in 7.3 under the proposed changes. Basically if the terminating token appears in your existing content, it'll break.
Lol 
Sometimes I wonder.
&gt; These are exactly the things that are at risk for future BC breaks and takes ages to get rid of because some lazy kid. Was replying with that sarcasm from this dig... My point is, obviously a debugger is preferable, but, there are cases where you don't have it set up, etc... and just want to use a dump. &gt; f I come to your house, do you expect me to let your furniture stay where they are, or arrange them to my liking? Your answer will most likely be that you'd prefer if I let everything be as it is. However, if you rent a room to me, I can choose to organize things the way I want, I bring my stuff with me. You don't own Symfony, simple as that, decisions are made by the community, if there is a strong desire for it, there is not much you can do. You come across completely elitist, you're making assumptions on me, based on your opinions, I am a big proponent for using a proper debugger, but it grinds my gears when elitists try and impose their MUST AND SHOULD on everyone, when it's completely subjective and based on the context of the situation. &gt; INB4 you go all hipster and focus/tunnel-vision on something in my reply that you 100% will take out of context and don't understand what I'm talking about lol. What have I taken out of context and in what way have i gone hipster and in what way did I not understand you? Again, you're just coming off as an elitist so sure of his superiority, don't make assumptions. 
I don't get why some of the elitists find this so hard to grasp
This is why I use it, my day job is Java which I prefer, but php is just so easy to get running on cheap servers
Disagree, not saying debuggers aren't useful, but there are some cases where you would reach for this over a debugger;
What's the point of English title if content is in native language only?
Advertisement? really?
Well. If you actually have done this... bad luck i guess :D
&gt; Basically if the terminating token appears in your existing content, it'll break. The terminating token would also have to appear at the front of the line (ignoring leading whitespace), and be a valid, standalone symbol name (so `HELLOWORLD` or `HELLO_WORLD` would not match).
also really nice, thanx
is_countable() 👍
&gt; You don't own Symfony, simple as that, decisions are made by the community, if there is a strong desire for it, there is not much you can do. Exactly, but you failed to see my analogy. These things needs to stay away because it impose bad practice. I can move around your furniture without any approval what so ever, if it's the right thing to do or not is an entirely different matter. The community only works so far, if the community consists of (which PHP unfortunately does) a vast majority of entrance-level programmers (read; grandson that is interested in computers and took that Microsoft Office crash course in 5th grade), there needs to be a much tighter policy and oversight. &gt; You come across completely elitist, you're making assumptions on me, based on your opinions, I am a big proponent for using a proper debugger, but it grinds my gears when elitists try and impose their MUST AND SHOULD on everyone, when it's completely subjective and based on the context of the situation. I'm not making assumptions about you, I'm making assumptions about the people who come up with the PR to introduce this, to a platform that still is evolving. I'm not imposing anyone to use anything, debugger or dumper - I am imposing this should be an opt-in option to make the consequences known, and that it's not a good practice. It's not subjective, it's not elitist, it's not dictatorship, it's simply common sense. &gt; What have I taken out of context and in what way have i gone hipster and in what way did I not understand you? Had to try real hard this time, did you? &gt; Again, you're just coming off as an elitist so sure of his superiority, don't make assumptions. Which is entirely your own opinion about me, which I couldn't care less about. I do however care about the community and the health of it.
please enlighten me. I really cant think of any case where it would be more usefull to have debug statements printed instead of having a breakpoint where you not only have the stuff you want to print but all it's context as well and activating a breakpoint is even less work than typing `dd(yourvarname);`
&gt; xactly, but you failed to see my analogy. These things needs to stay away because it impose bad practice. I can move around your furniture without any approval what so ever, if it's the right thing to do or not is an entirely different matter. The community only works so far, if the community consists of (which PHP unfortunately does) a vast majority of entrance-level programmers (read; grandson that is interested in computers and took that Microsoft Office crash course in 5th grade), there needs to be a much tighter policy and oversight. My point is, that if you can use something to get to your end goal quicker, debugger or dump it shouldn't matter, Code reviews should prevent anything accidentally going to prod, and there are loads of other checks that can be added in to. &gt; I'm not making assumptions about you, I'm making assumptions about the people who come up with the PR to introduce this, to a platform that still is evolving. I'm not imposing anyone to use anything, debugger or dumper - I am imposing this should be an opt-in option to make the consequences known, and that it's not a good practice. It's not subjective, it's not elitist, it's not dictatorship, it's simply common sense. Even so, my point is simply that, why try and impose to tell people it's wrong, when it's not really, it's not to say a debugger shouldn't be used, but if I'm trying something out for a side project and I purely want to see some output, i would reach for this, but for most ocassions i will go for a debugger. but the point is being shouldn't be ridiculed or made to feel bad, for using something which gets them to their objective faster. and also if you see the PR it Is opt in... &gt; Had to try real hard this time, did you? Don't understand what you're trying to say sorry &gt; Which is entirely your own opinion about me, which I couldn't care less about. I do however care about the community and the health of it. my point is the language you use makes it seem like you look down on anyone that will use a dump, my point is that comes off as elitist, telling anyone YOUR WRONG in these ways i don't think is the way to go about it, and i think people need to realise that there is no 1 eternal truth and no one is saying not to use debuggers, they are awesome, but we're just saying don't shut down something which may sometimes be useful. 
Why add the requirement for the heredoc token to not have mixed tab/space indentation? Obviously it's bad coding style but since when does PHP enforce a particular coding style?
Our workflow is essentailly, * Dev writes a feature/bug fix in a new branch * Dev Finishesh feature/bug fix and moves the ticket to IT (Internal/Independent Testing) * 2 other devs who may have finished their tickets pull down the branch and test it * They leave comments on code that is bad or dont work * If the 2 testers are happy and the CI test Pass Project lead will push the brank up to Develop branch to be pulled automaticly by our clone server (Direct copy of the live site without traffic) * Project lead tests on the clone site and if they are satisfied that it will work on a live enviroment he will move the ticket to "to be deployed" * Come thrudays at 12:00 our CI merges master into develop and runs tests to make sure nothing broke between the 2. * CI then merges develop into master and deploys onto the live site. * If anything breaks on the live site friday is a fucking headache and we pull an all nighter to fix the site. The last one rarly happens and last time it did was last year with embed code where all the embeds for some reason broke. turned out to be someone adding content at the same time the deployment happened when they should of been on lunch break.
Hey, DrWhatNoName, just a quick heads-up: **enviroment** is actually spelled **environment**. You can remember it by **n before the m**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
It's little bit easier to read whole conversation on externals.io https://externals.io/message/102036
[You reposted in the wrong subreddit](https://soundcloud.com/cornercarton042/you-reposted-in-the-wrong-neighborhood-full-version)
I love you.
Why have an extension to do runtime C/C++ calls when you can use [Zephir](https://zephir-lang.com/) to make your own PHP extension to expose those functions nativly i PHP??? The Overhead and Segfaults you would be exposing your potentally million dollar app to would not be as cost effective as having a compile safe extension...
&gt; Given that company only has 4 devs this means that everyone have to drop what they were doing and look at the ticket We leave tickets in the "code review" status and move to the next ticket. When another dev finishes his/her work, it grabs tickets from the "code review" queue and looks over them. This makes it non-blocking and less annoying. &gt; then test the thing on preview server. We have QA for that. When doing code review we just look at code: is it easy to understand (confusing naming, methods length, how many public methods etc.), are unit tests easy to understand, do unit tests cover the relevant features, and so on. &gt; It might be that there are 3-4 code reviews every day, all this coupled with other meeting and distracting emails and slack questions. &gt; I'm noticing that my productivity dropped dramatically... Happened to me as well at some point, I was feeling busy the entire day, but no work to show it. So I deactivated notifications on skype group channels and email, and anything else that might distract me. I check these between coding sessions (once every 30-60 minutes) if there's anything relevant. And if it's something urgent I can always be notified through private skype message, or even in person.
Thanks for pointing this out!!! I have updated the post with this.
So basically nothing. Fibers or bust.
It's been only 4 months since the 7.2 release. But you are right no big changes yet.
&gt; elite team of developers &gt; Heavy duty back-end tanks and front-end ninjas &gt; You are comfortable and adaptable in a fast-paced and informal environment. &gt; Super-awesome company trips ( “summer days” in Ibiza or Company Xmas party in Lapland). "Bro culture" red flags ...
Agree to all comments You can develop/code PHP your way, let it be inline, procedural, OOP or using framework I learn other language as well, just choose the most suit one with your resources (funding/team preferences/time allocation)
hahaha I died
Because indentation is stripped from all lines in the heredoc string. If you have mixed tab/space indentation you would have to know the tab size to perform this in a reasonable manner. E.g. if one line is indented by 8 spaces and another one by one tab, how many spaces do you drop? 2? 4? 8? The options here are basically 1) just count the number of characters, making a tab equivalent to one space, 2) require all lines to have a common indentation prefix (but that prefix must not necessarily be all-space or all-tab) or 3) just forbid it entirely. This implementation goes takes the conservative route of forbidding it entirely. In the unlikely case that this will be found to be a usability problem in practice, this can be relaxed.
No, I'm not arguing, I'm simply saying that there are people that use it. Hell, I even used it today to quickly dump the arguments of a constructor while working on a PR. Functional tests within Symfony that compile the whole container, are extremely slow with a debugger, this is only a few ms. &gt; Do you have no pride in your skill? I have pride in the fact that Symfony isn't just for the "experts", but also working on making it more developer friendly for those who don't develop in the perfect working conditions.
we already have something similar: \(multiplication etc inside doesn't work, and you cant have a global function, it have to start with $\) &lt;?php class Test { function number(): int { return 5; } function world(): string { return "world"; } } $test = new Test(); echo "Hello {$test-&gt;world()}! 5 * 2 = {$test-&gt;number()}"; // Hello world! 5 * 2 = 5
Pretty much what people here say. It's been around for such a long time, that it has a lot of support, a lot of 3rd party code and it's free and simple to use. There might be some cases where other languages that are younger than php is are better suited for the job, but in a vast majority of web related tasks, php does the job just fine. when it doesn't, that's usually because of the single-threaded nature of php or because you could reduce your code-base to a single language in some other cases. 
&gt; LTS Long Term Support :)
Awesome!
Sorry, only remote positions allowed in /r/php
The main thing I was after was not having to escape `"` or `'` seeing they're so commonly used in HTML+CSS.
Noob here. Why a query builder as opposed to raw sql in a string and then nested in pdo?
If the new site is intended to be supported by students then why not recruit a few and let them help with a rewrite? This would give you a chance to judge their expertise. This part of your question is extremely confusing: &gt; If I don't use Laravel, I will implement server side code in REST style, will use ReactJS or JQuery to interact with the backend Why would decide on such a basic division based on Laravel? Laravel is certainly capable of handling REST. It just seems like you have not really dug into what the app needs and are too focused on the technical requirements. Do you actually understand every little nuance and quirk of the existing app? Because if you plan a complete rewrite then they will bite you. Finally, there is an intermediate point between using "PHP" (whatever that really means) and a framework. There are a number of high quality component libraries (Symfony, Zend etc) that can be used to stitch together an app. 
1. Sometimes it makes a shorter code. 2. A possibility to communicate with different database servers using different SQL flavors 2. For a conditional query, when you have query parts added on the fly, QB makes a much neater code. 
Better to have one less layer of code to accomplish the same thing, I suppose.
OK thanks. I was under the impression that it just stripped all leading whitespace.
What about that quote led you to believe there is a bro culture at that company? Girls can’t be a part of an elite team of devs?
what a good update. been waiting for that.
7. cheap server cost
I haven't personally watched any, but you could search for "caching varnish php" or something like that and I'm sure you'll find several. E.g. this one seems good (but again: haven't watched all of it): https://www.youtube.com/watch?v=JEF6_XC-2ZU
Just fucking type die() you lazy piece of shit.
hrm. This might bite me. Probably not, but I (ab)use heredocs enough, so who knows. Thanks for the heads up.
If they expose a C ABI.
Luckily the problem would be easy to locate as it'll produce a syntax error in the virtually all of cases (unless you specifically craft your code for extra WTF :-) ).
&gt; If the new site is intended to be supported by students then why not recruit a few and let them help with a rewrite? I don't have time for that. I have couple weeks to complete the project. I am going to document everything, so that students will be make minor changes. Larger changes will require help of professionals. I understand existing website quite well. There are no complex business flows, it is just outdated and ugly. PHP mixed with HTML, reusing existing PHP doesn't make much sense. I can definitely extract blocks of code and wrap them in functions which will be refactored later. I just know that frameworks can speed up development and they also enforce best practices. 
Bonus points if you can make a piece of PHP code that doesn't something entirely different in 7.2 and 7.3, and no errors. I think it should be possible, but I'm not willing to invest time trying.
This would be like posting to a subreddit of authors and talking down on authors that want to use "proper english."
Can you give context for "around 15 minutes depending on the particular task."?
This hurts my head. Its the code equivalent of [one of these things](https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.aiHK2Xc29F-9QuskSRBZygHaJJ%26pid%3D15.1&amp;f=1). 
😂
years ago, when [] syntax was being suggested for PHP array syntax, some (many?) argued that if you can't be bothered to type those extra few keystrokes (a r r a y), then maybe you shouldn't be a developer, cause, it's just a few keystrokes. 
So can someone tell me what’s the advantage of using this library versus query builder built in into Doctrine DBAL?
once used, you will never go back to the life without it
Man, I have a lot of legacy code that looks like your first code block. I'm definitely putting integration with this tool on my roadmap.
I've experienced time tracking went wrong in a company, once. In general, time tracking is a *must have*, any good planning build up on this. But when done wrong, it can be really discouraging. I'd recommend it to be as less time consuming as possible (for instance - JIRA is slow and annoying, in my opinion) and it must be perfectly clear that the tracking is not collected in order to *supervise* programmers (unless you want supervise them this way, but then you have an another problem), because programmers in a constant time press might leave.
It strips the same amount of whitespace as on the ending delimiter. So if you have something like function test() { return &lt;&lt;&lt;STR Foo Bar Baz STR; } you will get back the string Foo Bar Baz
Try out [tracy/tracy](https://github.com/nette/tracy) package. Fits anywhere, features *dump*, *dumpe* (dump and exit) and *bdump*, which appears in it's toolbar. Automatically hidden and logging on production.
I guess many people simply still don't use a debugger. It can slow done the application hard, it's an extra step to setup and sometimes the IDE integration doesn't connect properly. Debugging is working out of box in other languages (Java, C#, JS, you name it).
The size and complexity of DBAL vs. this tiny thing. A slightly different internal DSL. "trying something new".
Curious which wrappers? I've never used any.
Based on your idea I made something like that https://3v4l.org/b60YW I dont know where can I test this on 7.3 but if you remove indentation from FOO inside heredoc code remains valid, anyway I don't think you'll find something like that in most code bases
&gt; Girls can’t be a part of an elite team of devs? Where did I say that ? Nowhere ... **Don't try to frame me as mysogynistic, please, that's low and distasteful.** What I do say is that this kind of language is **very** counterproductive for female employment ([here](https://www.sussex.ac.uk/webteam/gateway/file.php?name=gendered-wording-in-job-adverts.pdf&amp;site=7)). It's also counterproductive for a lot of non teenager men, even more with families. I imply and have seen verified in the wild that most job offers with `elite`, `ninja`, `rockstar`, party type company trips (Ibiza, really ?), etc. are usually bro culture in some ways. Be it a lone wolf mentality, overconfidence, high ego clashes (unjustified by actual competence, wouldn't be acceptable anyway), cult of undersleeping and overworking, lack of collaboration, obligation to go out with company or you are an outcast, shouting and pissing contest, partying with colleagues is required for integration ... Ninja and rockstar also sound like "we need 5 people but have money for 1" or "developper will have to adapt to chaos because we didn't plan or specify anything". Is it suprising that these kinds of words are more likely to match manchilds ? I'm a grown up, talk to me like one, please. Some links : [A thread about rockstar in job offers from Hacker news](https://news.ycombinator.com/item?id=1757059). [The company isn’t a family](https://m.signalvnoise.com/the-company-isnt-a-family-d24f26c3f3fe) [Even quora has an answer](https://www.quora.com/Why-are-people-upset-by-terms-like-rockstar-ninja-programmer-Do-they-think-that-there-is-something-wrong-about-the-trend-of-technology-becoming-cool-If-so-is-there-a-better-term-that-people-should-be-using-to-describe-a-talented-developer) --- Frankly just google it. --- /u/BlockchainHeadhunter Just for fun [here](http://www.codehesive.com/ninjarockstars/#100211234) is an automatic response generator for these kind of job offers I actually uses. You might want to reconsider your strategy, you are not understanding your game **at all**.
If you're going to update your query system, take a look at `doctrine/dbal` - it has a query builder and a *lot* of helpful features. Prepare-bind-execute-fetch in one method call, binding arrays as parameters (for example for use in an `IN(?)` clause) and so on and so forth There's also an orm you can require on top (The one used in symfony) but it's overkill for most apps
I assume a good fair amount of them are third party. But Symfony's Serializer throws exceptions, doesn't it?
Careful with the backticks though. In Ruby, for instance, it's essentially a system call. So they use pipe formatting, which is customizable. string = %|This is 'my' "string". Also supports #{interpretation}.|
Do tabs vs spaces matter? I guess it would be up to the user to make sure they're consistent.
&gt; foo('bar', 'baz',); // Notice the trailing comma after 'baz'. I don't like this. It starts producing sloppy code.
Doing so would force the removal of identifier escaping.
&gt; In Ruby, for instance, it's essentially a system call [Also in PHP](http://php.net/manual/en/language.operators.execution.php)
Well if you include DBAL and not the orm you do have 6 dependencies (+3 dependencies if you install the orm) but if you're using an optimized autoloader it shouldn't matter. Most of that stuff is for schema-altering code like migrations anyway. The overhead of the calls themselves is small enough that you won't notice it unless 99% of your queries are extremely simplistic well-cached ones. You can also inject a PDO instance into a dbal connection, and it has a php-side query cache architecture too (Which I've never used myself). But the real biggie is the convenience. Automatically unpacking `SELECT * FROM x WHERE y IN(?)` to `... IN(?, ?, ?, ?)` is fantastic. Of course it doesn't do it automatically unless you explicitly say it's supposed to be an array, but I tend to [extend a dbal connection to handle that for me](https://gist.github.com/jnvsor/554570e314eb11c2302d8b56bd280e51#file-connectionforfunandprofit-php)
This is useful for multiline functions with an unspecified number of parameters. Take sprintf as an example you can leave a comma after the last parameter and if you add another one you can quickly add another line without forgetting to a add a preceeding comma, a minor change but a useful one. I also like that it makes function and array syntax more alike. Named parameters next please.
I didn't know this but I should have considering that's how it works in Perl.
If you're already using Aura.Sql, there's always [Aura.SqlQuery](https://github.com/auraphp/Aura.SqlQuery) -- to which, incidentally, Latitude traces its inspiration.
Guzzle's 
OT, but about the website the article is posted on. My visual acuity has been getting worse over the last few years; I never had great eyesight. This article is illegible to me, even hitting "ctrl-+" twice to increase the font size. The font color is a medium gray, and has almost no contrast with the bright white background on the site. The baby-blue color for internal links has even less contrast. And the font is simply hard to read. So, no thoughts to add about the article from me. I can't read it.
 hello( $operatingSystem, $network, $targetComputer, ); It is for version control. When you add a new parameter in the old systems you need to edit the line $targetComputer by adding a comma at the end and then inserting a new line. Then in the version control you a have a one insert and one edit. The new implentation will solve this problem.
You have one class, Max, which is an extension of the class Person. When you extend a class into a new class, that new class gains all functions and attributes of the extended class.
Also, can you give an example of a package where having `__toString()` would be useful?
Don't really see how that would work with a function.
Unpacking with Latitude is extremely simple: ``` field('x')-&gt;in($array); // or... field('y')-&gt;notIn($array); ``` Doctrine is a fantastic tool but fairly heavy for small projects. Latitude is meant for the latter where the complexity of Doctrine is not necessary.
Some of the names (Entity, Repository) used in Doctrine are easy to confuse with their Domain Driven Design counterparts. Doctrine repositories and entities work the way Doctrine defines them. Call it the Doctrine pattern if you like. Other patterns use the terms differently. 
That's fine in a query builder, but if you just want to write some SQL with placeholders without doing an `implode` on an `array_fill` you can't beat dbal. Also - doctrine orm is complex but dbal is just a PDO wrapper with some convenience methods
`$this` references the current instance of the object. `var_dump($this)` inside `test()` and you'll find it's a `Max` object not a `Person` object, because you instantiated a `Max` object. So it's not a parent accessing the child, it's the child accessing the child.
historical accident. none of the justifications given for why it might be a good choice actually hold up to scrutiny. for any one of those possible justifications you can find a different programming language that matches or exceeds PHP in that aspect. the historical accident was that PHP was basically first-to-market as a language designed to do web server stuff. it got there before there were robust, well-supported frameworks for competing languages (Perl, Python, etc.) and in the early days of the web the deficiencies of PHP were less important so it didn't get smothered in the cradle. 
Looking for an advice for implementing SSO using auth2/OIDC. So basically I'm gonna have a website and a mobile app that both need to share credentials and profile information. Both website and an app should have a login form. Im a bit stumped on implementation steps. Do I need to setup completely separate domain for oauth|oidc server, ex; \*accounts.site.com\* that both app and website would access? what would be my authentication flow? 
It that was true, then it should work even if the $name property was declared private, but it doesn't. If it's declared private, you get an error: PHP Fatal error: Cannot access private property Max::$name
Private declarations do are the literal class only, if you want to have a guarded declaration that is usable in extended classes, use `protected` instead of `private`.
Pretty cool!
Your description of what you've done isn't even what you've done. I'd expect no less from someone who didn't even bother to read the rules and is currently in violation of them.
You can check and see `$this` will be a `Max` object. What happens not being able to access `name` if private is that you're using the accessor `$this` from a non-accessible scope. Just as if you did $max = new Max; echo $max-&gt;name; `name` would accessible if public, but not if private. This is because `test()` exists in the parent scope. What is interesting is that `protected` allows access from parent scope to a child's property, which is defined in the docs "Members declared protected can be accessed only within the class itself and by inheriting and parent classes".
This is an awful change
@shadowhand: love your work on kohana. Good old times! Why should i use this instead of the doctrine dbal? (So i can persuade my team)
Yeah but it's still kinda useless until it's default behavior. If you didn't know to check for json_last_error, do you really think that you'll know to add JSON_THROW_ON_ERROR as an argument in the call? They need to stop making so many damn options for everything.
The things these questions and articles and so on never answer is: What is enterprise and what qualifies and what doesn't? And what does the word have to do with a framework? Laravel in specific in this case.
Sorry, I wasn't arguing in favor (or against) this feature specifically. However, if you autoload two helper files, one in `require` that checks if the function exists before defining an empty stub, and one in `require-dev` that defines the debugging statement, then you've successfully injected your debug statement in development.
Well, I'm not bashing php, I'm just looking for the rationale behind it, behind the fact of a parent class being able to access child properties using $this.
The `repositoryClass` setting is optional. It is only a hit to the `EntityManager` which class to use when calling `EntityManager::getRepository(But::class)` so it can return you an instance of the `BugRepository` class. If you do not set `repositoryClass`, the method will return an instance of the `EntityRepository` and thus not having your added methods. I recommend a good read by WouterJ about this called [Repositories are just Collections](http://wouterj.nl/2016/12/repositories-are-just-collections/). This is more inline what you are used to I guess.
do you have unit tests with ~80% coverage? if not then your code reviews are mostly waste , time is better spent writing unit and integration tests because they are reusable
Makes sense, thanks!
*Readable, Maintainable, Well-tested and Well-documented* I'd add extensible in there,unless you consider it within the domain of "maintainable"
Who cares? There is no standards body that defines what “enterprise” means so literally who gives a shit? It’s such a pointless conversation.
A framework can easily hinder a developer and with Laravel it can definitely happen since it's a very opinionated framework but as long as you know what you're doing and can get around any obstacles you can build an enterprise app out of anything. Look how many classic ASP sites are still out there in the wild serving a ton of users daily. It's also about being able to plan out the infrastructure and optimization of the system properly as well. 
An you have languages like `go` that require that trailing comma on a multi-line definition or it's a syntax error.
Take a look at the code again. I thought the same thing and then I say that OP was calling $this-&gt;name from Person. Person doesn't have a property $name, Max does.
No, I'm being serious here. This is a design flaw.
No fucking shit. But what he describes is the inverse.
See for yourself https://3v4l.org/1sY8H
This is as much as I could get decoded. https://gist.github.com/JABirchall/c9258b79425f66257d90a0c5aa4c7b22 As for its function, I dont know. You would have to run it in a controlled enviroment.
thank you much as I expected
When PHP 8.0 is released in the year 3648
that's a great tool! did not know that existed
Right. The reason I say Perl and not Unix shell is because, if memory serves, PHP's origins are influenced by Perl.
Are you trying to imply LTS means never ending support? 
It's a shell/command-receipt endpoint for botnet/spam/ad injection/data theft. I used to see these all day long when I worked for a web security firm. I'm willing to bet your client's site is running WordPress, Drupal or some other popular web application right? They're likely extremely out of date or using a terribly made plugin that allowed this to happen. If you're not willing to go through everything you need to do to fix and secure it, I'd recommend referring them to a service like Securi or Sitelock to have it cleaned and secured.
What are your pain points with D8? I've worked with Drupal from early 6 up to 8, and have found it a real breath of fresh air. 
The only reward is cleaner diffs. The only drawback is lazy developers will continue to write the same crappy code they always have. Invest in some automated formatting tools and validators and you don't have to worry about your Stone Age problems.
no, it's not.
Define enterprise, otherwise this is a loaded question with no answer. What scale of traffic do you need to serve? What is the site/application's purpose? What functionality does the platform need? People like to slam Joomla in these parts, but let me share some numbers as one of the crazies managing the joomla.org architecture right now. Our downloads subdomain alone served 3 million pageviews over the last 12 months and routed traffic for over 10 million software downloads for the same period. Does that qualify as enterprise to you? Why? Why not?
If you're already using Doctrine you should keep using it. If you're starting a new project and not planning to use Doctrine entity manager, give Latitude a try!
You are indeed missing something. Doctrine doesn't have to use annotations. If you require a different repository then you can wire everything up a different way. This is just one way of wiring that up and you shouldn't confuse the annotations with the code that it annotates. The annotations are just configuration. They could be yaml in another library altogether. They're not relevant to the architecture of your application. An anti pattern would be when you introduced the concretion as a dependency (e.g. Type hints); If you required a concrete implementation in the entity itself. 
Also see Matthias Noback’s [Inject a repository instead of an entity manager](https://matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager/). 
I'm already seeing drive-by attempts in my server logs.
&gt;6. fast First 5 points are fine, but 'fast', not really, it is literally one of the slowest options out there - https://www.techempower.com/benchmarks/
Not sure why people go on about hosting cost, I mean 15 years ago, sure, but these days you get low tier virtual machine on DigialOcean, Heroku, wherever, for $5-$7 a month, long gone are the days where PHP being cheap because of shared hosting was a nice advantage, in fact long gone are days where anyone sane would even want to use shared hosting. 
although this might find CMS module's using it and break existing functionality.
&gt; foo('bar', 'baz',); // Notice the trailing comma after 'baz'. &gt; &gt;I don't like this. It starts producing sloppy code. This^ is sloppy code. But function parameters aligned vertically, each with a comma, is both easier to read and modify.
you are forgetting having to actually go turn on xdebug. Running xdebug 100&amp;#37; of the time isn't an option for some people. Please stop with the absolute statements when everyones situation is different.
Right -- the last time I worked on a DDD/Doctrine project, I ended up structuring it so that Doctrine "repository" classes were just a component or implementation detail beneath my own (DDD) Repository interfaces.
Which ones?
It kind of has a way. http://php.net/manual/en/function.filter-input-array.php The whole filter extension needs improvement IMO.
It’s the same reason that it would sort-of work even if the child class didn’t declare the variable at all: a lot of PHP’s design philosophy boils down to “try really hard not to crash, even if it means not always being correct”. Also, more literally, because inheritance gets layered together at runtime so all public and protected properties are just a grab bag of local data. Fortunately, you can opt out of more and more of these oddities in newer versions. 
good
Second that. If the site is small (&lt; 100 pages) Grav is my go to. Haven't tried it at larger scale but it can go as big as you want. It's flat file--the files are your database--NoSQL and FAST. For me there's a tipping point that a database driven CMS makes more sense. So if the project is large, and since your coming from drupal I'm going to assume it is, I recommend concrete5. Well established and also refreshing. You won't be disappointed with either of those options. * [grav CMS](https://getgrav.org) * [concrete5 CMS](https://www.concrete5.org/r/-/25595) 
Max::$name is overriding dynamically created Person::$name. Person class does have public property $name thats created during runtime and Max is just overriding it.
To be honest; this is not really the aim of PHP \(it's been developed to handle requests, not continuous communication\) and therefore it might not be easy to build this in a proper way. I found the following Github repo for you: [https://github.com/Textalk/websocket\-php](https://github.com/Textalk/websocket-php). That might help for reading the websocket. What you want might look like: `$running = true;` `while($running) {` `$message = $socket-&gt;receive();` `if(!empty($message)) {` `$class = new MyClass();` `$class-&gt;execute($message);` `}` `}`
Symphony for stability and LTS, Laravel for fancy new features. Those two are my go-to starting points. 
Ha I really like concrete5 too. The admin UI page builder is sweet. Grav is supposed to handle up to 1000 fine. The killer feature of Grav is that you can do all your code and content changes in a git branch and merge together. Instead of dicking around with features or having content in the db. 
What about Laravel's [broadcast subsystem](https://laravel.com/docs/5.6/broadcasting), which is based natively on websockets? Learning a framework abstracts a layer of complexity from the process, but too simplifies its intricate complexities of doing things the right way. You can use [socket_select()](http://php.net/socket_select) to write a standalone daemon. We're going to need to see some more code and elaboration on your setup to really know why it's crapping out though.
You should probably use something like socket.io with node, more fitting for the job. If you are set on php, ratchet is a rich library/framework that might be what you are looking for. http://socketo.me
https://api-platform.com/ Haven't used it, waiting for an excuse to try it. Built on Symfony.
We have search a lot for socket.io clone written in php for a webrtc chat with video capabilities. Finally se used this https://github.com/walkor/phpsocket.io It works really well
I will leave it to the tens of clients I have successfully served and to hundreds of professionals I have placed to judge the quality of my game. Be positive ;) 
I definitely wouldn't use PHP for continuous connected stuff. It's main aim is to receive requests and handle them correctly. This is okay for things like webhooks which effectively load a page each time they execute. You may want to look into node js.
You could use [ReactPHP](https://reactphp.org/) or some other async lib. Also, you can configure Apache/nginx to handle standard HTTP requests just like normal and proxy websocket connection to your React server. Single PHP process can handle from hundreds to thousands of clients and messages per second, so you should be fine, unless you expect some large traffic.
Hi muglug, Can you please tell what type of formatting you are talking about ??
I mean in terms of the same step as compiling. Instead of doing -&gt;compile()-&gt;sql() to retrieve the query, have __toString() do those steps for you, so all you need to do is to pass the querybuilder to an object that is meant to use it.
Just because you don’t care doesn’t mean others don’t care either. It’s a legitimate question. 
This is because it's a poor example. Trailing commas are for multi-line function calls: foo( 'bar', 'baz', );
not a bad explanation, good examples, but those var_dump(‘text’); calls inside methods and the word suger drive me nuts, haha
Probably best for them to assume that any directory that is writable by the web user is now compromised, and rebuild on a clean server from their git repo fresh \(they do have source control, right?\) and then run through any missing upgrades and/or a full code review if its a custom development. Backups could also work, however you won't know how long those files have been in place, and you can't rely on a time created/modified on the filesystem, as quite often the little one\-page control panels they upload \(this sounds worse than it is\) touch themselves to hide how long they've had access to your server. Additionally, your DB passwords will be compromised, as will \(probably\) any private keys and SSL certificates on the server. Basically, anything that you can file\_get\_contents\(\) on as the web/apache user has been busted wide open.
The parent class is not aware of the child objects, but it doesn't need to be \- because when you extend the parent class to the child, the child gains all of its attributes, functions and values except for where it overrides them.
I wouldn't compare to C or C++, because no one uses them to write the backend of web apps (other than indirectly in libraries, etc), on the other hand I would compare to Golang, Java, Elixir, Scala, etc all of which completely blow PHP out of the water when it comes to performance. Node/JS whilst not Golang level is also much more performant than PHP in most situations. Then even something like Python, which as an actual language is slower than PHP on benchmarks (though not by enough to actually matter), actually performs better in most real world situations because of its ecosystem. EG - the standard way a python web app is set app, performs better than the standard way a PHP web app is set app, because Python apps are held in memory of worker threads of an application server, whilst PHP boots the app each request. Or it is why Python has become the standard language for things like machine learning, because it has libraries written in C/C++ that let it manipulate data with a degree of performance that only things like Java, Golang, etc can compete with. PHP is not fast, it is basically in the slowest group of languages (that are actually used) along with Ruby, Perl and Python, no one is using PHP because it is "fast" unless they are suffering from a delusion.
&gt; How exactly is a landing page consider a big app? Fallout 4 was highly expected game with millions of people lining up to buy it (myself included). The point Taylor makes is probably the fact that ... even it being PHP, it can handle millions of users bashing refresh every second. That's shitton of impressions. You don't naturally do this with a PHP framework, but hey you do with the likes of Symfony/Laravel/Zend etc. Back at PHP 5.* running CodeIgniter, you'd never do that unless you implement full page cache and whatnot. I know because I've tried. There are a lot of big projects running PHP. Plethora of APIs that get millions of hits each and every day. In the end however, it doesn't really matter if you are using framework or not. It's all up to the developers. Laravel has a pretty slim runtime with no I/O locks and small memory footprint even though it autoloads shitton of classes. At some point your backend doesn't even matter depending on how you build your project, especially if you go all modern-Javascript you only need a basic API with up-to-date auth and you'll be golden. Let's not pretend that there aren't enterprise apps built entirely in visual basic. I don't know who's building enterprise applications using laravel but personally I've made a Groupons clone using Laravel 5.1 and a payment gateway that is shared across all of my company's products (that one is based on Lumen tho). It serves thousands of users everyday, logs everything, payments are flawless. I sleep well at night. Pages take less than 100ms to generate. Scales well thanks to remote shared memcached and mysql database.
Most of my experience with it has been from a code perspective and this is where my gripes lay. Some parts are a big improvement over 7 and I'd never consider Backdrop (or Backstep as I call it) but Drupal 8 is just not well designed. Some parts are still hook based while other bits are OO. Annotations are used sporadically. The best feature of Twig is inheritance but you rarely get to use it. All entities have UUIDs but to load by UUID you need to specify the entity type, as if they're not universally unique or something. Dependency injection uses a yaml file rather than reflection. The documentation is a mess. Vocabularies have no convenience method to get their terms. This is how you get a relative URL to a file: file_url_transform_relative(file_create_url($file-&gt;getFileUri())); Now I might have missed simple solutions to some of the above but ultimately, Drupal 8 is an inconsistent mess. Laravel has shown me many times how clean and maintainable PHP can be. Drupal just isn't that.
When you say flat file, I image something like Jekyll. When you say NoSQL, I think of MongoDB and Redis. Which is it?
Well, if speed can be worked out, it’d make it pretty easy to add in extensions ad-hoc to PHP without needing to have it declared in a php.ini.
Hey guys ! I’m coming here with a brand new library about translation for PHP &gt;= 5.5. The idea behind it, is that translation was always a painful task, so we focused on making it simple as possible ! It’s connected with Weglot dashboard that let you control all your translations &amp; change them easily ;) So here is the repository: https://github.com/weglot/weglot-php, to install it just follow the README ;) Actually it’s the first release of our library so we’re looking for people to try it, gives us feedback or just opinions about things they like / not like ! You can find many examples about how to use it in the example folder: https://github.com/weglot/weglot-php/tree/master/examples We also started to make a full documentation for our API at this link: https://weglot.github.io/weglot-documentation/. It’s actually a beta version, we’ll add more elements with your returns ;) You can contact me through private message or our support@weglot.com, I’ll take care to handle of your messages. Regards, Baptiste - Weglot
[Dumpy coffee needs a lot of suger.](http://i.imgur.com/P4LtAwh.png) ... I'll see myself out.
I presume that was autocorrect or something, i.e "there's no SQL and it's fast". Looking at the docs it appears to be YAML for configuration, and Markdown for content. 
For anyone reading along, do not name your class Template unless it's an actual template. Always come up with names that mean your classes/methods do what it says on the tin and nothing else. I had to learn the hard way that it can be very difficult and unpleasant to try to understand and maintain code with bad naming. With good naming, even if it takes time to come up with good names, you're doing yourself and others a favor! 
It's utterly bonkers what Grav manages to do without a database.
thanks.
Sounds like Jekyll with a front\-end. I'll have to check it out. Thanks.
Care to explain?
Here's my take at easy explanation using one sentence: *Interfaces allow multiple inheritance, because they have no conflicting implementation code!*
This. I am an Xdebug user. But sometimes you just need a quick glance at what's happening without all the overhead, or I am doing this on a staging server where I can't access the debugger to see why something may be different. Sometimes it's just the right tool for the job.
Knowing bad names are bad is the easy part. The hard part is finding names that are good. :-)
&gt; * @Entity(repositoryClass="BugRepository") That is just a config hint so you can use Doctrine's built in repositories (by extending the `EntityRepository`). You don't need to use annotations for this configuration, and you don't need to use Doctrine's `EntityRepository` code (and honestly, I'd recommend against it). &gt;Isn't this an antipattern? The model should be repository-agnostic, or am I missing something? It's not an anti-pattern, and the model *is* repository agnostic. You just happen to be configuring a specific repository (your `EntityRepository` subclass) to use this model, and you just happen to be storing that configuration on the model. &gt; What happens if I want more than one repository for a given entity? You probably do! And that's a good reason you should make your own repositories, rather than just subclassing `EntityRepository`, and your repositories can just reference the class explicitly. My first pass at using Doctrine subclassed `EntityRepository` and used the `repositoryClass` annotations, but once I figured out what I was doing I rewrote my code to use custom repositories and removed the annotations (as they're only useful for the magic `EntityRepository`).
Absolutely. It's not easy!
False dilemma alert. `LogToDatabase`, `LogToFile`, `Logger` are not only choices for typing that argument of controller. Typing can be omitted altogether. We can provide adapter for `LogToFile` that will inherit after `LogToDatabase`. Mooooaaaarrrrr is also needed to pass job interview. E.g. can interface inherit another one?
That's not an inheritance. "Multiple inheritance" have specific meaning outside PHP, and it means that class can inherit after multiple classes. PHP have only single inheritance, and Traits for horizontal code reuse. Interface is for declaring abilities of possibly unrelated classes ;)
As others have mentioned there's no formal definition of what an enterprise application is. However, given the context of what an enterprise is then an enterprise application might have to span across multiple business areas with the same business rules being interacted with in a number of different ways to serve different areas. So I think a better question would be, is any web framework a good choice for this? And the answer might be no because the web is just one implementation that might interact with the business rules and if you bake them into the framework then that is going to hinder you, in that context.
Well obviously you've done your research and you've fixed what was wrong with CodeIgniter in the first place. Or you just use a newer version. Few years ago when composer didn't exist, CI was hard for heavy traffic websites. But kuddos to you if you've successfully managed to tame the beast. In today's world I just find it weird to not have PSR-4 style autoloader. Perhaps you've modified it heavily to include it. I just jumped ship to Laravel 3 back then and never looked back (yes, the one with bundles and shit) 
Actually, I mean inheritance. You can inherit (implement) multiple interfaces. That’s multiple inheritance.
It's semantics isn't it? 
Fixed on develop branch, thanks !
You really don't need to make a new post for every single feature you add. Please stop.
I would had link to the great article: http://kunststube.net/encoding/ for people wanna go deeper ;)
Aside from the meat of the article, this has a very nice overview of the "Key Changes" of GDPR. Explanations of roles, scope, penalties, definition of consent, and other important bits are clearly explained. Nice.
I assure you, PHP is fast. I did C/C\+\+ those are definitely fast on my past projects. I tried using PHP to process millions of records to the database executed for hours \(modified server\). So far it hasn't failed me for being "fast" in a real production.
What about dealing with parameters? 
You don't expect anyone to bind parameters in the query-builder, right? Parameters come into play when you have the statement.
Thanks!
software for organizations, not users you can use laravel to make a blog but you can also use it to make a CRM, AMS, LMS, etc.
Forge for one. 
Hi. I'm a long time lurker just trying to get some help to find a good CMS. Could you please allow this post? Best regards. Willy
Curious to understand how locale code and gender are considered personally identifiable information?
Dont bother - the EU will somehow outlaw chat bots in a few years. 
Thanks will do that 
Probably :-)
Sorry for the confusion. By flat-file I meant there is no database. The files are the database. Thus no extra database connection or extra time to process db queries = a lot faster. On that same note I meant no sql database necessary. Also no need to even have MySQL installed. Grav can even run on Php only if you want, with php being the webserver also, so no need for Apache or nginx. Haven't tried that but definitely possible. 
Thank you - I suspected this was the case. 
Hypothetically assume for a moment that PHP had full multiple inheritance. What's the difference between implementing an interface vs extending a purely abstract class (that is, an abstract class with zero implementation)? The answer it turns out is none. C++, for example, has multiple inheritance but doesn't have "interface" or "implements" keywords. Instead, in C++, a purely abstract class that you extend *is* implementing an interface. That's why /u/ImSuperObjective2 said interfaces allow multiple inheritance, because implementing multiple interfaces is mechanically the same as extending multiple purely abstract classes. That being said, that you can't inherit any implementation from an interface is a big caveat to calling it multiple inheritance.
No no no. The print button still works. It just doesn't send an email to the compliance department when clicked.
Sounds like you have a few qualms with the new GDPR regulation then?
Isn’t the importance of naming and semantics exactly what’s being discussed here?
There are 2 hard problems in programming. Cache invalidation, naming things, and off by one errors.
This is important to understand for non-EU based companies, as I was not aware of this: &gt; A very important change in the GDPR that hasn’t received the attention it deserves has do with the geographic scope of this new law. &gt; To quickly summarize: Article 3 of the GDPR says that if you collect personal data or behavioral information from someone in an EU country, your company is subject to the requirements of the GDPR. Two points of clarification. First, the law only applies if the data subjects, as the GDPR refers to consumers, are in the EU when the data is collected. This makes sense: EU laws apply in the EU. For EU citizens outside the EU when the data is collected, the GDPR would not apply. You can read more here: https://www.forbes.com/sites/forbestechcouncil/2017/12/04/yes-the-gdpr-will-affect-your-u-s-based-business/#63e9858c6ff2
I am a little jealous of a programming language that enforces a single consistent code style at the compiler-level.
enterprise means your software follows SOLID principle, multiple test suites (unit, integration). Its also often build with domain driven design. My experience is that all of this is way harder with laravel then with symfony. Mainly because eloquent severely restrict your domain design and leaks implementation details like column names throughout your application while other laravel practices like facades prevent creating solid code. Debugging toolset is also less professional and you have to use incomplete 3rd party packages which itself cant even come close to the symfony debug bar. Finally upgrading symfony applications goes so much smoother because of adhering to semantic versioning, clear roadmap and good deprecation handling. Minor but somewhat important is lacking form abstractions and entity validation compared to symfony which both can be pretty important. The service container is far less advanced. It doesnt support private services and requires a very verbose configuration with php instead of clean yml files. Configurations cannot be resticted in laravel while in symfony you can build a complete configuration tree including validation. The majority of laravel is good for entry/medior level programmers which can quickly build sites with it but dont care that much about best practices or good architecture.
Implementation inheritance vs interface inheritance. The latter is OK, the former should be used scarcely because of premature generalization, accidental complexity and coupling.
Here's how I deal with legacy code: &gt; Let the past die. Kill it if you have to. That's the only way to become what you're meant to be.
I'd be even OK if we just had traits and interfaces and no class inheritance at all.
I think you are being downvoted because you are either deliberately conflating two different concepts, generally confused by the differences of the concepts themselves or just being pedantic; all of which are downvotable offenses. 
If you have a good handle on other languages, https://learnxinyminutes.com/docs/php/ might be a good resource to cover the very basics quickly.
Did you miss the quotes?
Though nothing is technically wrong with them, I think there is room for improvement in the abstract class example. People have already mentioned the naming so I won't go into that. In general, I try my best not to add public methods to subclasses as it limits their usefulness when passing around the more generic type (Template in this case). An alternative approach would be to use constructor injection to add whatever is different and then whatever non-publicly accessible methods you need to change the underlying implementation. Now, the only thing that cares about the different implementations will be the creator class (factory, builder, whatever) and you can pass around "Template" everywhere in the system. The rest of the system doesn't care about Coffee and Tea, it cares about Template. When you add a new public method(s) to subclass you are actually adding a way to change the state of your object during any point of that objects lifetime which in turn, might lead to a [leaky abstraction](https://en.wikipedia.org/wiki/Leaky_abstraction). 
**Leaky abstraction** In software development, a leaky abstraction is an abstraction that exposes details and limitations of its underlying implementation to its users that should ideally be hidden away. Leaky abstractions are considered problematic, since the purpose of abstractions is to manage complexity by concealing unnecessary details from the user. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; Did you miss the quotes? I'm not confused about anything. Ok so we'll cross that one off the list. &gt; And I wouldn't be "pedantic" if someone hasn't decided to tell me "that's not inheritance" when talking about type inheritance. Generally speaking, when people use the term "multiple inheritance", they are implicitly referring to multiple inheritance of implementation and *not* multiple inheritance of type. It would be nice for the OP to expound on multiple inheritance of type, multiple inheritance of implementation (traits, kind of) and multi-level inheritance, but this is clearly a beginner tutorial so I wouldn't expect to see that.
Good point. Although I don't consider mapping annotations as a *business logic* and I still see Doctrine Entity classes as POPO (and I write them like that), when compared with, let's say, Phalcon, which requires you to extend a specific class and implement some methods. I've used Doctrine in small and large applications both, always with annotations, usually combined with annotations for API resource serialization mapping and never run in any trouble. Since PHP annotations are still just written in docblock, I consider them to be something very similar to an external mapping file.
This article is full of incorrect information. HHVM does not compile code in the traditional sense. It is a virtual machine. Just to point out one glaring inaccuracy in the first paragraph.
&gt; When you add a new public method(s) to subclass you are actually adding a way to change the state of your object during any point of that objects lifetime which in turn, might lead to a leaky abstraction. This also breaks the LSP.
Oh my god, I hope so. I freakin' hate having to go hunt down an error function to pull errors when I get a false from something. Just throw an exception.
Honestly I'm just impressed that this legacy code has classes. I'm fighting myself from 15 years ago who didn't know nor embraced OOP (I left this agency and came back and my original code still exists)..
Yes you have reason, it's very annoying see class and methods with names that not mean anything.
I guess the answer is "nothing".
The concept is great- don't nitpick things that don't matter. I completely disagree with this specific example though. As projects you work on get bigger having predictable variable and method naming (e.g. always using the full word vs always using shorthand) becomes incredibly helpful for everyone's productivity.
Off the top of my head: - Anything that could benefit from hardware acceleration (e.g. computations you'd like to run on your graphics card). - Interacting with existing open source projects you don't want to reimplement in PHP (e.g. writing a web-based cryptocurrency UI, although, I'd much prefer a restrictive API being added to a C client). - Making desktop apps more reasonable to build in PHP.
JSON_THROW_ON_ERROR will be referenced on the documentation page for json_encode and json_decode.
Who's being treated like a criminal? You just need to have the user's consent to do things with their data. If you were scraping data off websites (I'm looking at you recruitment agencies) or adding customers to mailing lists by default then you were already acting decietfully in the eyes of the public. The law has now been updated to fit with users' expectations. I.e. my data is stored in a reasonable way and won't be shared or sold without my knowledge and consent. I won't receive regular emails from businesses I've had minimal dealings with.
I understand the idea, and that doesn't really affect me since I work in the EU anyway, but I'm very curious as to how that's supposed to work, both technically and legally. I can understand for companies that actively conduct business in the EU (e.g. accepting paid customers from EU countries), but for your average website, it's not like you choose to publish it in such and such country... So by that logic it means you should either actively block users that are not from your own country, or be aware of every single law in every single country in the world to make sure you respect all of them. The only technical solution I can imagine that would somewhat work is if every European ISP had to block access to all non EU site, and whitelist those that comply with EU law. But I'm not sure we want to do that... Or the EU could try and fine every obscure Russian, Japanese or American site that doesn't comply with the GDPR by May 28th, but I'm not sure how that would work either.
Thanks for mentioning. I will give it more attention in my article. 👍
This is interesting samrapdev. Thanks for mentioning. Didn't know about that. So how do I know if someone is right now in the EU? I would need to check IPs for that.
hey BlueScreenJunky, thats where I am getting concerned as well. Because theoretically every country outside the EU could make their own law. That would be a big big mess and uncontrollable. I hope we get to a point where we can align to the GDPR together.
And json_last_error() has been on there for a while already
Don't know, but please look into bind params http://php.net/manual/en/mysqli-stmt.bind-param.php, this code is absolutely horrible and has huge security flaws. You could print out `$mysqli-&gt;error` and have a look
/r/phphelp
Cheers legacy bro! Everyone should have to experience supporting their own code from 15-20 years prior. It is a humbling experience for sure, but it does seem to expand your perspective. 
Please don't use Dutch in your code. Because php is in English, reading your code is a constant flipping between Dutch and English. Niet doen! (Don't do it)
Ik heb alleen bij de variabelen Nederlands gebruikt dus dat is toch niet erg?
De variabelen zijn niet onderdeel van je code? Niet. Doen. Punt.
Laat zien waar ik dan iets nederlands gebruikt heb. Want als variabelen niet bij de code horen is er geen Nederlands!
So is it a wrapper library or is it dependency-free? I'm guessing you mean it doesn't depend on any PHP packages or libraries, but looking at your code it's clearly dependent on rsync and/or SSH being present on the machine.
Het is de bedoeling dat je leesbare code schrijft, of je nou nederlands, russisch, of wat dan ook gebruikt, als het jou helpt is dat prima. Mensen doen altijd of elke code geschreven moet zijn om onderhouden te worden door een team van internationale programmeurs. Het is bullshit. Schrijf gewoon nette code en het mooie van variable is dat je ze zelf mag verzinnen wat het labeltje is. En uiteraard is het netter als alles uniform is, maar noodzakelijk is het totaal niet. 
Quiet strange question🙃 Ofcourse it depends on rsync and ssh. It's like... MySQL extention has no dependencies, but obviously it requires MySQL to be installed🤔 Whrapper because it builds shell command and execute it with proc_open. Dependency free means no deps on other packages. 
De variabelen zijn wel onderdeel van de code. Uiteraard. 
$this
Dat vindt ik ook maar mij werd verteld dat dat niet het geval is.
/u/beatniak stelde een vraag. Wel klopt het dat je gewoon Engelse code moet schrijven, daardoor is je maintainability veel beter en is het makkelijker te begrijpen. 
You can't assure me of anything, because the speed of PHP is not up for debate, it is fact that it is one of the slower languages and maybe the least performant ecosystem (that is actually used). Hence why it appears where it does in those benchmarks...
Bedankt! Ik ben heel blij met jouw reactie en zal zeker wat dingen veranderen. Dit was inderdaad een van mijn eerste PHP codes. 
No problem. We all have to start somewhere!
Yep. Also: As soon as your code quality has a certain level, you will work with others. They need to understand, too.
With some delay, I'm happy to announce the new release of our Static Code Analyzer (for PhpStorm and Idea Ultimate). The release brings bug-fixes and new features, making diagnostics more precise. 
In before /u/pmjones flies in and tells us "this is why there should be one action per class, and then both types of injection are the same thing". This aside, dependency injection has always been about injecting via both constructors *and* methods. It doesn't matter how you inject, as long as it doesn't involve magic that circumvents the standard language assumptions and protocols. And that's kind of the problem, that in Symfony, **both** constructor and action injection uses magic that resolves dependencies automatically based on their type, rather than it being a clear static contract between two *human* sides who can make a better judgment about satisfying a dependency than "oh, it's of that type". Autowiring dependencies by type is only margically better than using static global registries, or even singletons. I know many won't agree here, but it has the same exact effect on your architecture. So I'm not a fan of autowiring at all. Also even with action injection, sometimes your action would need a dependency conditionally, for example this pseudo code: function index(Cache $cache, News $news) { if ($cache-&gt;has('index')) { $cache-&gt;echo('index'); } else { $this-&gt;render($news-&gt;getNews()) } } Here we need `News` only if we don't have a cache entry in `Cache`. But this doesn't depend on which action we're routing, it depends on `Cache`. So because of satisfying dependencies in this way we always end up initializing `News`. Symfony has a way of dealing with this (basically proxy objects), but these have edge cases, imperfections, and represent a performance penalty on their own right.
Wasn't this already discussed at length on the PR?
Thanks for the feedback. I already subscribe to the notion of one action per class. However, instead of: class Action1 { /** var Dependency1 */ private $dependency1; public function __construct(Dependency1 $dependency1) { $this-&gt;dependency1 = $dependency1; } public function __invoke() { $this-&gt;dependency1-&gt;... I can do this: class Action1 { public function __invoke(Dependency1 $dependency1) { $dependency1-&gt;... Bit less code and perhaps easier to read and maintain. I mostly agree with you as far as the magic of automatically resolving dependencies. But having tried it for a bit, I admit I'm slowly heading towards the dark side. Always like Dark Vader better than Anakin anyways. 
&gt; But having tried it for a bit, I admit I'm slowly heading towards the dark side. Well, sith.
I've worked with [NCC Group](https://www.nccgroup.trust/us/) in the past for a security audit on a gigantic application. I'm assuming it costs a ton, but they were very thorough. I don't think an automated solution would be very effective.
That's good to know. How much is a ton?
Man, this is really helpful. Thanks.
My only problem with the action approach is that it is either not possible to explicitly configure what gets injected into actions or it is not documented well. I have a re-usable controller that is used to handle different routes that effectively do the same task, but in a slightly different context (determined by the injected strategy instance). If I register the controller as multiple aliased services, I can explicitly define what instance gets injected into which controller's constructor. I am yet to find how to do this with action methods. In fact, when the new type of context was introduced, I ended up having to refactor the controller to no longer use action injection.
Honestly, why not just make your service GDPR compliant regardless of where you are operating? I know it is a lot of work, but frankly I think the new regulations are a good thing (and I usually am not a fan of regulations). If we, as developers and business owners, set a precedent to implement GDPR across the globe, perhaps it will become more of a global regulation by default. Maybe that's a bit optimistic, but I still don't see the harm in doing so.
&gt; but for your average website that lives from ads revenue and collect some stats, it's not like you choose to publish it in such and such country... So by that logic it means you should either actively block users that are not from your own country, or be aware of every single law in every single country in the world to make sure you respect all of them. The answer is definitely unclear. I have not yet read into the new regulations in depth, but from what I've gathered it's a grey area. Blocking users not in your country would be a shame, considering we all have the goal of an open net. &gt; The only technical solution I can imagine that would somewhat work is if every European ISP had to block access to all non EU site, and whitelist those that comply with EU law. That's some North Korea tactics right there. Could you imagine if the internet was restricted to only your country across the globe? Scary to think about... &gt; Or the EU could try and fine every obscure Russian, Japanese or American site that doesn't comply with the GDPR by May 28th, but I'm not sure how that would work either. Honestly none of these solutions are optimal or really even enforceable. I personally think that if the service is located outside of the EU then the law should not apply. As much as I dislike the UN in regards to global regulation, I think this is a case where bodies of government like the US and EU need to come together and implement a global policy for collecting data before we end up with 50 conflicting policies that no one can properly integrate.
That's way too expensive.
"interfaces, provide some of the functionality of true multiple inheritance." Here is how English works in that sentence. To provide some something is to be similar to something but **distinct**. To be true something is to be exact this something.
:) No.
&gt; The Java programming language supports multiple inheritance of type, which is the ability of a class to implement more than one interface. And here's how English works in that sentence. Something supports something. End of story, smartass. 
You can use bind for this. Typically, bind is used under defaults and applies to all services defined in the current file. However, you can also use bind in an individual service. Bind works for all types of injections including action injecting. So you can control exactly which service gets injected even if you have multiple services for a given class. Tried to find an example in the docs but no luck. I remember seeing it someplace and I know it does work. On the other hand, there will always be cases where just doing it the old fashion way is best. Bind is definitely Harry Potter level magic.
If You want something really fast, check out Phalcon Framework: https://phalconphp.com
See on SafariBooks if this one is too beginner for you.. Author Matt Zandstra "PHP Objects, Patterns, and Practice"
Not exactly what you're asking for, but for web-facing applications OWASP Zed Attack Proxy is incredibly useful. I use it most for clients' sites when trying to find Session/Cookie and Injection/Scripting vulnerabilities.
Even source you cited did not support your conclusion. No name calling (deserved or not) will change that.
The Java manual, you know, by the folks who invented interfaces, define it as a feature introduced to support multiple inheritance of type. To say this "doesn't support my conclusion" is just lazy trolling.
As I see it MySQL is a better choice in the long run once you have many files. Indexes will help you query. You should always run explain on the queries to see that you are using indexes in order to speed up queries. Watch the slowlog to see if anything new pops up \(also allow the no index param in order to see fast queries that are not using indexes properly\) You should consider using the "prepare" if you are running similar queries. These are mainly for MySQL no matter what language you use. If you do get to a stage where you are running many 100&amp;#37; similar "selects" over and over I would defently use memcache . It is very durable and can handle many hits \(thousands to tens of thousands\). imho parsing JSON is never a way to go :\(
Hey /u/ImSuperObjective2 nice to see the mention. Hope you're doing well. :-) So, yeah, one action per class is "the right thing to do" under [Action-Domain-Responder](http://pmjones.io/adr), but I wouldn't say "both types of injection are the same thing". I'm on record as calling Action Injection a code smell, even in a pseudo-MVC context: &gt; [T]he fact that your controller has so many dependencies, used only in some cases and not in others, should be an indicator that the class is doing too much. Indeed, it’s doing so much that you cannot call its action methods directly; you have to use the dependency injection container not only to build the controller object but also to invoke its action methods. Anyone interested can read the rest of my opinion at &lt; http://paul-m-jones.com/archives/6589&gt;.
&gt; Hey /u/ImSuperObjective2 nice to see the mention. Hope you're doing well. :-) I'm too objective to be well. I can only say I am. &gt; I'm on record as calling Action Injection a code smell At the same time, even with one action per... well... action, maybe some dependencies can be request-scoped, and then they have to be provided during requesting routing (i.e. __invoke() or whatever) and not during construction. So there may be more than one reason to inject during the request handling phase.
From the table of contents, the title might be refined to "'Unit' Testing Legacy Applications." However, for legacy apps, [characterization testing](https://infogalactic.com/info/Characterization_test) (sometimes incorrectly called "snapshot testing") might be more immediately useful. If you're interested in specifics, you may wish to look through &lt;http://paul-m-jones.com/slides/testing-legacy-code/&gt;. And if you're stuck with a legacy PHP application, you might also want to try my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) because you want to make your work life a little less trouble. :-)
Strict rules like this are in part what made me switch to go from PHP.
There are a lot of tools. You should look into Veracode, Checkmarx, Fortify and Fortify On Demand, AppScan Source and Klockwork. The things to understand about static analysis tools are: 1. There are entire classes of vulnerabilities that they will not identify, particularly around unauthorized access problems. Like if my online banking app lets me sub your account as the source when I do a transfer between accounts, this is often missed. Or if a regular user can create an admin user. How would the static analysis tool know what a regular user should and should not be able to do? 2. They produce a lot of false positives. This is by design - false positives are better than false negatives, so they skew that way. You should have someone with some appsec expertise triage your raw tool findings before pushing them to devs, using something like CodeDX or Threadfix. This is true of dynamic tools as well as static tools.
I never used the plugin before, do you maybe have a list of features/reasons to use it?
best
What happens when China pass regulations, and then Russia, and then Canada, and all of them conflict?
It's not the paint who makes the art. The painter does :\)
You can test the Free/Open Source version [here](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-). The ultimate version is an enhanced and more complete version of the first one. Haven't done PHP for a while, but I'll check this if I have to write some.
phpstan Api tests (codeception) And of course unit tests
Perhaps this can give an idea: https://codereviewvideos.com/course/phpstorm-shortcuts/video/become-a-better-developer-with-php-inspections-ea-extended The rules and docs for EA Extended: https://github.com/kalessil/phpinspectionsea/blob/master/RULES.md, https://github.com/kalessil/phpinspectionsea/tree/master/docs Regarding reasons: I'm not aware of your experience/professional situation, but it raises quality and reduces amount of bugs (ideally it helps to go home on-time/make more money - depending on you professional situation).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kalessil/phpinspectionsea/.../**RULES.md** (master → a80d9e5)](https://github.com/kalessil/phpinspectionsea/blob/a80d9e50cd506d58deb0dcca0e768aaeec82581c/RULES.md) * [kalessil/phpinspectionsea/.../**docs** (master → a80d9e5)](https://github.com/kalessil/phpinspectionsea/tree/a80d9e50cd506d58deb0dcca0e768aaeec82581c/docs) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxrpvus.)
Why downvotes, guys?😰 At least argue on comments please😇
I'm pretty lucky in that I don't presently have any legacy (just like to promote things in the PHP space), but you've earned my upvote for contributing to those things. :-)
What about this one? &lt;code&gt; class Action1 { public function __invoke() { Dependency1::... &lt;/code&gt; Bit less code and perhaps easier to read and maintain.
You’d have to elaborate but this looks like a Singleton and isn’t helping anything at all. 
That is facade dependency Injection. Natural next step via dark side with such applied logic as above. Code should me maintainable, easy to read, use and apply in all other places of application in the first place. "Bit less code" is shortcut to legacy. I'll write a post about legacy projects using action injection for over 5 years. I saw it first in Nette, many years before Laravel, so it's battle tested on real market (not good) 
You’re using Laravelisms. This is not a facade and it’s not dependency injection. It’s just a static registry. 
Ah, I missed that on first reading. My bad!
Just use single quotes. You don’t need to use double quotes in HTML. 
I'm the guy who fixes these bugs where I work. I can tell you that the main hits we get are SQL injection and XSS vulnerabilities. Focus on making sure all SQL statements are prepared, and all user input is filtered before the application does anything with it before you run the tools mentioned here and you will reduce the hits by probably quite a lot. I'd say those two are probably 90% of what I see come in.
Not sure what these are but I'll check them out. Thanks.
/me nods At that point, it seems you might as well attach the single-action controller directly to the route as a closure, a la Slim.
It's a scale, nothing more
&gt; I saw a demo of the closed source version of RIPS last year and it seemed really nifty, but it's also very expensive. FWIW RIPS does offer a 14 day trial of the scanner (with limitations on the reporting of results), which is a good indicator of if it'll do what you're hoping. Be aware that it'll still have some limitations (this reminds me I need to report to them something that their scanner didn't pick up but our own manual audit discovered).
yeah phpstan is nice (https://github.com/phpstan/phpstan). just run vendor/bin/phpstan analyse src if you're familiar with composer it's really easy to start. if you're not familiar with composer, head to http://www.phptherightway.com/
Yeah, I'm using composer. Appreciate the extra detail. I'll definitely check it out. Thanks.
To continue the analogy, even Darth Vader did not completely embrace the dark side. I'll have to admit that Laravel DI facades are still on my "things to avoid just because they seem evil" list. But who knows. Someday I may take the time to fully understand them.
Not defending OPs behaviour, but you can do this in Rust: https://play.rust-lang.org/?gist=bb6e8e9b59a72592d471c33a52fa331a&amp;version=stable Although, it won't work if A is in another module: https://play.rust-lang.org/?gist=9a9f341aebdb5ba7f508af0d94532ac4&amp;version=stable I think it's because Rust scopes private functions on a module level, not a struct level if they take self (in PHP $this) as a parameter (in PHP the $this is implicit, in Rust it's explicit). I am not sure what the reason for this is, but just wanted to say that you can invoke private functions from a class / struct in Rust, as long as they take self as the first parameter (i.e. they are a method instead of a function) and you are calling them from the same module.
To phrase it differently: You are blatantly incompetent. 
Go home.
Checkout Vega https://subgraph.com/vega/ Vega is a free and open source web security scanner and web security testing platform to test the security of web applications. Vega can help you find and validate SQL Injection, Cross-Site Scripting (XSS), inadvertently disclosed sensitive information, and other vulnerabilities. It is written in Java, GUI based, and runs on Linux, OS X, and Windows. Copy and pasted the sites intro because i am lazy... I mainly use it for scanning client sites but also use it on my own sites. Vega does a good job of picking up sql injection issues and XSS, however it's not limited to just scanning for those turns of vulnerabilities. The results are grouped based on severity and each issue/vulnerability has an explanation and break down of the url and arguments used. The only down side is the reports cannot be exported (to my knowledge)
Quickly made with Gimp. Original photo : https://www.reddit.com/r/pics/comments/8e1zdt/silhouette_of_elephants_in_the_sunset_african/ 
This should be in the stndard library 
it's a little difficult to understand what you are trying to achieve without looking at your code. It sounds to me like $db is a dependancy of your control logic. So typically in an MVC application this would be injected into your controller. You could do this like this: class UserController { private $db; public function __construct($db) { $this-&gt;db = $db } public function __invoke($params) { $user = new User($this-&gt;db, $params['username']); // some business logic return $response; } } $dispatcher = FastRoute\simpleDispatcher(function(FastRoute\RouteCollector $r) { $db = new PDO(...); $userController = new UserController($db); $r-&gt;addRoute('GET', '/users/{username}', $userController); }); $dispatcher-&gt;dispatch();
I've been won over by the "one action per controller" argument recently which is a different answer to this problem. If your actions all have different dependencies, and only one is every going to be called per request, they might as well be in separate controllers. Means your controllers are smaller, easier to understand, easier to test, more SRP etc.
That's interesting... you're doing the print_r at the same step you're counting right? Is there any difference when you `var_dump` it?
better use Xdebug
post more info
Check the third parameter of json_encode function, it's the maximum depth value and have 512 by default. http://php.net/manual/en/function.json-encode.php
Next stop: [Action Domain Responder](http://pmjones.io/adr)! ;-)
Yes `vardump` says that my array have 600 objects but i only have 100 when i look inside 😂
From constructor injection, over method injection, over inject annotations, to container in facades, to static calls. It's one scale. I prefer to stick to it's left side as much as possible because anything else just made the whole project go legacy. Thus rewritten in 5 next years. But for projects in agency, that you never maintain nor support, it's great to use Laravel's "facade" approach. It's just not my thing to support code for a short time. 
Exactly :) What do you prefer now and why?
What do you mean by "look inside"? If count and var_dump say there's 600 objects, then there is. 
Definitely. With 5.6 reaching EOL and 7.x being common, it seems well worth it just to make a clean break with a new major version number.
Honestly the training is “meh...” and it’s very basic. It’s more like an ad for the books (which are great btw!).
that's the problem
You're the only one talking about Laravel's facades, nobody else is. And "constructor injection, over method injection" makes no sense. Injecting in a method is not lesser than constructor injection. It depends on the particular situation.
&lt;blockquote&gt;You're the only one talking about Laravel's facades, nobody else is.&lt;/blockquote&gt; Yes. &lt;blockquote&gt;And "constructor injection, over method injection" makes no sense. Injecting in a method is not lesser than constructor injection.&lt;/blockquote&gt; Have you ever seen a project killed by such thinking? I did. &lt;blockquote&gt;It depends on the particular situation.&lt;/blockquote&gt; Of course, we can always write such sentences. That's why added the agency example. Yet still there are some time-proven approaches to coding, like clean code, that seems better than static everywhere.
&gt; &gt; You're the only one talking about Laravel's facades, nobody else is. &gt; Yes, that's why. That's why... what? Make full sentences, half of what you say is terribly unclear. &gt; Have you ever seen a project killed by such thinking? I did at least 3. A project was killed by injecting into a method rather than a constructor? You're just gonna drop this like that, without context or substantiation? Hilarious. &gt; Of course, we can always write such sentences. That's why added the agency example. That wasn't an example. Your example is missing the "example" part. You referred to something you never explained. No one's project died because they injected into a method. That's just stupid. &gt; Yet still there are some time-proven approaches to coding, like clean code, that seems better than static everywhere. Method injection is not static, so why do you keep talking about static shit? Once again, no one else is. You're the only one who can't shut up about facades and static shit.
Agree that Symfony does use various methods to inject dependencies. I had a $project object to inject but at the same time had a query parameter named project. Took me a bit to figure out why my project was always a scalar instead of an object. But for me, once I encountered it then it was no longer a problem. The multiple lines I won't comment on. Bind can be used for non-autowireable services. Don't see any real difference here between constructor injection and action injection in this case. I'll admit using arguments names feel a bit strange but again it's one of those things that pass. 
Why so aggressive? Did I make you angry somehow? &gt; That's why... what? I didn't know what to reply. I don't understand you either. What do you mean by "You're the only one talking about Laravel's facades, nobody else is." I didn't write any statement about "everyone is using Laravel facades", did I? &gt; A project was killed by injecting into a method rather than a constructor? It really needs a post, as I already wrote. Comment is barely enough to elaborate constructive explanation about this. Work in progress, stay tuned &gt; That's just stupid. Well, it seemed to me stupid as well to use it everywhere, but since it's not forbidden, it's allowed. And voilá: legacy project. &gt; Method injection is not static, so why do you keep talking about static shit? Again, it's a scale, not a dichotomy - "this is injection, this is static, and ther eis nothing between it". From clear constructor dependencies on one end, through static::method on the other end. Between them are annotations, method injections, facades etc. 
&gt; Scale means: from 1-way clear constructor dependencies on one end, through static::method() on the other end. Between them are annotations, method injections, facades etc. You keep repeating method injections are "in-between" and you're failed to explain this. Talking about facades non-stop doesn't justify why you think method injections are "lesser" somehow. Honestly my hopes are quite low you understand why I'm frustrated with your comments, despite I'm spelling it out clearly: you should explain why method injections are worse than constructor injections.
What do you mean?
I'd go for laravel - I recently got going with it and it's amazingly powerful. You'll feel like you can do anything once you get the hang of it. Start with https://laravel-news.com/your-first-laravel-application
I don't want to use binds for services that are not generic enough to be reused at various places just because of action injections. You clearly define them outside the context they apply to, which has similar advantages as globals - it's harder to debug, track and notice when they get out of sync. Now go check how it's done without binds and you will clearly see it's more complicated to do for action injections. I don't have a link at hand but basically you need to define new tag with 3 arguments for each such service. Another disadvantage is during unit testing. With constructor, I can prepare class with all dependencies initialized in setup(). With action injection I can't do that and will need more complicated approaches. So whatever floats your boat, but I clearly presented disadvantages over constructor approach. IMHO not worth to ignore them for a bit easier time to type them. Rather improve your tooling.
these look terrible
I’d go with Symfony, given so many frameworks choose it as the very backbone they build upon.
Enterprise customers will likely be on distro-maintained PHP5 for a while. "EOL" Just means upstream isn't going to support it anymore.
I'd ask yourself: 1. How long do you want to maintain PHP 5.3 support 2. How many new features and changes will happen in that time Personally I believe PHP7 offers a lot of nice new stuff that I'd like to use, so my bias would be towards a "two versions" approach, especially if the 5.3 version is going to be a dead-end soon.
The changes can be buried in conditional logic behind your interface using a variety of means. You don't have to maintain two versions of your library just for that. Just realize that if your library is non-trivial that you'll want some sort of CI to test compatibility with the two versions.
To start with I seldom try to convince people to use a particular approach. I present my opinion and leave it at that. However, I would point out that most people would not object to having one template (or perhaps view class) per action. And for each action that needs a form then one form type per action. And if a service is needed for an action then one service per action. So I always thought it a bit strange that controllers got a bit of a pass. And if you want to spin them up a bit you can always bring up the Single Responsibility Principle. And I tend to organize files by sub-feature and not by type. So under Blog/Edit I might have BlogEditAction, BlogEditForm, BlogEditWorkflow and BlogEditTemplate. With this approach, combining multiple actions into one controller and then storing all controllers under one directory does not work well.
Choosing to go 7.x only won't prevent users on PHP 5 from using the current version in the future, they just won't get any new changes you might make.
Laravel
Hi there, a few weeks ago I managed to overcome my impostor syndrome and decided to contribute back to the community. Hope you like the TDD course which I am weekly doing. Any feedback will be more than welcome. It's my first one so lots of things to improve.
This sounds really good. I'll definitely check it out. Thank you.
Any transcript for the hearing impaired?
Any inspiring open source repos that use Slim?
I began with codeigniter after Wordpress. Then graduated to symfony. Laravel was a bit too abstract. Symfony components perfectly demonstrated separation of concerns but in a more concrete concise architecture.
Be sure to have unit tests and use a service like Travis ci to auto run the tests in all PHP versions
[removed]
A good job for a non-native speaker tbh
real_json_parse(); This will probably be added in a future version
That would be of course the best solution. But yeah, still quite optimistic :-) Most businesses just care about their profit and data means profit. So there is a big need for this regulation. Still it would be very helpful when people just start caring more about data privacy.
TDD, or "how to spend 90% of your work day writing and re-writing ancillary code."
[https://www.youtube.com/watch?v=v1yqKl8k\_BA&amp;t=8s](https://www.youtube.com/watch?v=v1yqKl8k_BA&amp;t=8s) please do Subscribe my channel
Can you not stay silent if you don't have anything nice to say? Someone puts in hours of work to help others, gets over the constant nagging voice inside that he will be criticised, and then does it. And then you go ahead and shit two words -That Accent. A little empathy makes life better. Try it!
I'd go for learning PHP frameworks ethics specially MVC, ORM/DRM. After (or beside) learning these fundametals I'd go for learning advance Pure PHP app development. Learning JS in parallel is not optional or suggested but essential and required. Eventually, when I feel confortable with fundametals I'd fo for Laravel or Symfony. Also, I suggest you read (and do) about OOP and Design Patters.
I already posted my linguistic analysis. So I will not repeat it here. However I will add that similar to that language from Java docs, PHP devs also describe Traits as giving most of the benefits of multiple inheritance, and yet it's not it, and multiple inheritance wont be introduced to PHP. I could probably find few other example of language designers who consciously choose **not to** include multiple inheritance, but gave some other alternative for vertical code share, (or "type sharing" as is the case of interface and would be the case for multiple inheritance after multiple purely abstract classes).
PHP 5.3 is long dead for any modern project. The question is more should you support PHP 7.0/7.1/7.2.
You didn't mention your level using Vanila PHP \(Native\), if you're good enough connecting php to a database and small knowledge with queuing/caching. Your next \(as I suggests\) would be to choose a framework, the easiest thing to use is Laravel, everything will give you, all helpers and everything, however I'm afraid you might end up bashing your head using Eloquent their ORM, which cause a lot of pain if you're new to it, but as the time goes by, those magic things happing you could easily trace. Once you learnt the basics above, since Laravel uses Symfony components, why not move into Symfony? Once you think Symfony is done on your side, try Phalcon Framework it is written in Zephir which compiles all .zep files into a PHP extension \(making your class fast enough to load in\-memory\), also inspired using the same structure of Symfony. Zend / CodeIgniter / Yii are solid too, however focus on the community driven \(Laravel is on the Top!\), overall it's your choice. Don't forget it's good to try out NodeJS too, don't stick around with PHP only.
Would upvote 100 times if I could
I actually wrote a package that you can build your own **project installer** [https://github.com/daison12006013/essential](https://github.com/daison12006013/essential) **Config Sample:** [https://github.com/daison12006013/essential/blob/master/src/Commands/config.json](https://github.com/daison12006013/essential/blob/master/src/Commands/config.json) **What it does:** * a VARIABLE based replacer to your own templates * On your template folder, it actually iterates all the files; let us say you have 'AUTHOR\_NAME' inside your config and all files that has {AUTHOR\_NAME} will be replaced. * You can put bash scripts in it as a json, as long as you follow the rules of json format! **Where should you use it?** * Most probably creating your own project installer? * Write your own base code dedicated to all your projects? \(We're using this actually on my current company and it really helps a lot of time copy\-pasting the same base code we have\) **Missing Implementations:** * Unit testing is still ongoing and will add this in the [TravisCI.org](https://TravisCI.org) * Sample way thru a Video Recorded \(Will do later\)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [daison12006013/essential/.../**config.json** (master → 228cb44)](https://github.com/daison12006013/essential/blob/228cb44f1afdf266b2c10dfedc353cff886c3991/src/Commands/config.json) ---- 
Thanks for sharing /u/estringana Have you read any Robert C Martin A.K.A. Uncle Bob books? What you've shown is 100% better than no tests, and is a good into to TDD, but feel like some of the language he uses to explain is fantastic at combatting long-form TDD. Also the approach to GitHub should actually work without a network connection and have HTTP dependency passed in. ###Notes: * Even having a class when you don't need one is complexity you don't need. That should be `use function App\{FizzBuzz};` * ***opinion:*** currying a generic function would be more appropriate than defining `isFizz` and `isBuzz` at class level. Those can then either be defined externally, pulled in by namespace, or inlined to FizzBuzz (probably inlined as part of throwaway app code). * you don't need to prefix tests with `test_`, you can annotate with @Test * including Guzzle as a dependency is a bit dirty. They have some PSR-7 interfaces "guzzlehttp/psr7", which although it complicates the code a little bit (streams...), allows you to switch clients. I'm pretty sure streams are only used due to strings being c-string (0 byte terminates) * I'm not sure in PHP it's a good idea to strongly type collections by default without default language level strongly typed collections. It gets done a lot, but simply dumping into an array and filtering to only the types of object you need, might be easier if you don't need all `ArrayObject` semantics. [See the manual](http://php.net/manual/en/class.arrayobject.php). If you just want it to be countable, try implementing `Countable`. This would enable you to encapsulate the backend source. The same can be said of other interfaces until you get to the point where you need `ArrayObject` * Namespaces were too generic. * Lastly your internal domain representation of Gists may not match GitHub API. You do not need to mirror the API. Look into mapping and isolate the domains, with a formal convertor between GitHub API results and the data you need.
I am announcing the development of a PHP application framework \- \[miklcct/thin\_php\_app\]\(https://github.com/miklcct/thin\_php\_app\) . It is a PSR\-15 request handler application and any PSR\-15 middleware can be plugged into it. It contains only minimal functionalities and use PSR\-7 and PSR\-17 request and response \(factories\), therefore, unlike existing major PHP frameworks, it does not have request and response classes built\-in \- The user must install a PSR\-17 implementation for it to work. Although this framework contains built\-in functionality for middleware \(with the included MiddlewareApplication class\), the whole application skeleton is a PSR\-15 request handler implementation, therefore 3rd party middleware dispatcher can also be used on it. There is no routing functionality in the framework, please see README.md for details. A demo app is available at \[miklcct/thin\_php\_app\_demo\]\(https://github.com/miklcct/thin\_php\_app\_demo\), sources for the framework and the demo are available on GitHub and packagist. I will port my website and build it against this framework, afterwards a stable version will be released. 
&gt; Is there any noticeable performance downside to stashing data in a few multidimensional arrays? As always, it depends. You've already considered the impact on memory usage, so there's no need to go into that much deeper. If you wish to optimize memory usage then you could consider using [the SplFixedArray class](https://secure.php.net/manual/en/class.splfixedarray.php) which uses less memory on large arrays, at the trade-off that it won't be accepted by the `array_*()`-functions. Beware of premature optimisations, you probably have bigger problems when this becomes your solution. &gt; Lately I've been trying to query less often, opting instead to loop through one sweeping query of a table, then stash that data in a multidimensional array for use at various points later on in the page. Previously I was querying each and every time I needed the data. It is a common misconception that one query is better than multiple smaller ones. Here, too, it depends. In my experience, people often try to optimise multiple queries into one complex query, not only sacrificing readability (and therefore maintainability), but also introducing bugs, and a query that nine times out of ten does not actually perform better in the average case scenario. My advice for optimising queries would be: don't request more data than you need, and let the database do what it does best. Simple (aggregate) calculations and sorting are good examples of things the database should handle in 99% of cases, it will be better/faster at it, and you end up with less data to process in your code. &gt; I've noticed vastly improved server performance since doing so but should I be careful not to get too carried away here? There's always the risk of getting carried away. However, given the fact that you've noticed vastly improved performance, you have got an objective argument in favour of this change. Just know the pros and cons of optimisations and decide whether or not to use them based on the result of actual performance benchmarks. &gt; Should I be unsetting arrays? Probably not. It will be thrown out when the script ends anyway. &gt; Is there ever a time where it might make more sense for me to just run an additional query or two? I'd say that many simple and optimised queries are preferable to a few complex ones. But again, this depends. Benchmark it, and remember that there is more to queries than just performance: simpler queries are easier to optimise, can be used in more cases, will have a higher probability of being hit again when cached, are more readable, are less error prone, are more maintainable. There is no single perfect answer to your question, you have to decide for yourself what you think is the most important. &gt; Similarly, is 10 queries on one page load too much if I'm trying to scale up the number of users on that can be on my web app concurrently? 20? 50? 100? Since many small queries can still outperform a complex ones, no. However, if you've got no say in the queries that are used, this might be a valid concern. Thousands of queries over hundreds of connections should be no problem is each of those queries take a few milliseconds to complete. Hope this helps.
Static analysis tools can help you for this. Take a look at [PHPCompatibility](https://github.com/wimg/PHPCompatibility) &gt; This is a set of sniffs for PHP CodeSniffer that checks for PHP version compatibility. It will allow you to analyse your code for compatibility with higher and lower versions of PHP. The creator made a demo of it in the [PHP UK Conference](https://www.youtube.com/watch?v=l4Nb9xWxuc0) this year
I see. Well, I see it as scale (that's why I use more than 2 terms and Laravel etc.) and you see it as a dichotomy. That's why we can understand each other. Without that, everything else irelevant. I tried my best to explain, but I don't what else to write than I already wrote and I would only repeat myself, which doesn't work either. So let's agree on disagree.
&gt; I see. Well, I see it as scale (that's why I use more than 2 terms and Laravel etc.) and you see it as a dichotomy. I don't see it as a dichotomy. **I keep asking you what are the specific drawbacks of method/action injection over constructor injection and you're not answering.** And you didn't answer again. &gt; I tried my best to explain, but I don't what else to write than I already wrote and I would only repeat myself, which doesn't work either. You didn't explain shit. **Answer what are the specific drawbacks of method/action injection over constructor injection.** &gt; So let's agree on disagree. We weren't arguing. So "agree to disagree" doesn't apply. I'm asking a question, and you're not answering it, instead you're talking about bunch of random bullshit unrelated to the question I asked.
Hi u/CODESIGN2, thanks so much for dedicating some of your time on watching the videos and giving feedback. I really appreciate it. Let me come back on those points and see where we get to: * Have I read the TDD book? Yes I have. I strongly suggest it to everybody interested on TDD. BTW last week was the 15th anniversary of the book. I take this opportunity to suggest some other good TDD stuff which. Not free but awesome: [https://course.testdrivenlaravel.com/](https://course.testdrivenlaravel.com/) It's focus on Laravel but the TDD concepts can be taken away for any framework. Laracast has also some TDD stuff as well. * About mocking the httpClient. Yeah totally. I probably didn't emphasise enough that the course isn't finish. In fact, it still at the beginning. I will pull the mocking when needed. I want to be sure the tests drives the solution to having the httpClient injected. * About the @test thingy. Yeah I know, in fact I like more that approach. I think, it gives more flexibility when naming the test. However, I found that not much people likes it. On my current company I could probably the only one using the @test approach. * Totally agreed on PSR\-7. I will use it for sure. You're right, it's harder to use. I think it's due the unmutables, maybe approach? * About the collections, I think this is the only point I disagree with you. I know PHP has been using arrays for a while. However, arrays are hard to maintain. The last feature of PHP7 to pack/unpack plays very well with typed collections. I hope I can prove you my point on coming videos. Plz, let me know if not and we can give it another round to this :D * About the ArrayObject, you're right I could hold it a little bit more. * Namespaces too generic. Could you please help me on this? Which ones would you have chosen? * About the internal domain representation of Gist. I will keep it in mind but please let me finish it first. Right now, it's still far from production ready. Sorry mate for giving you such a long answer but you awesome feedback\(very constructive\) deserved it. I hope to have you around on coming videos and nudge me on the shoulder when I don't get things right :D
While I can't speak for PHP, I've been using the equivalent for Java ever since I started using Intellij. It's fantastic. Sometimes even a bit overbearing. But certainly worth it to have it analyze your code base. The amount of performance issues it can pick out on a project that has never been scanned like this before is amazing. And not just performance, also possible bugs, redundancy checks, concurrency checks, serialization issues, etc... It's amazing. That's for Java. If there's a similar project for PHP now, I would consider it absolutely worth checking out.
Why is this focussed specifically on Taylor Otwell?
So if he's there is his fault and if he's not why the hell he's not there to make things better? I'm confused
Why do you have such a hard-on for Taylor?
&gt; Bad. Symfony is dead too apart from that. The deadest of dead This is the most retarded thing I've ever read.
because his framework did many things right in my eyes, unlike many other frameworks. I agree with most things he did. And that's a rare thing.
because his framework did many things right in my eyes, unlike many other frameworks. I agree with most things he did. And that's a rare thing.
Everytime a new PHP version releases all my code upgrades flawlessly without any of these issues. You are a dimwit if you use count to count something that isn't logically countable. But I guess there is no chance I'm going to be able to convey that point if laravel appeals to you.
exactly, dont be confused you got it right
you sound so frustrated. It's ok, flash your tiny weener somewhere else, nobody gives a fuck about
&gt; you sound so frustrated projecting?
Don't write code that logically makes no sense? How the hell does count('What are you expecting here, a miracle?'); make any sense to do anything but raise an error? error_reporting(0) and @ suppression seem to be your preferred coding style...
they broke the whole PHP with this change of ```count()``` , tons of templates and plugins needs updates now :( whyyyy... for nothing :( 
`count('What are you expecting here, a miracle?')` -&gt; I expect `int 1` as return. What did you expect? dumb fag
crazy? are you dumb? but lets talk about the ghitub stars! good idea. Symfony is on the market for _8 YEARS LONGER THAN LARAVEL_ LOL https://trends.google.com/trends/explore?date=all&amp;q=symfony%20php,laravel%20php you fuck boy
ah: and you didn't read my question. I asked about taylor, i dont give a fuck if you want to use the out dated crappy bullshit old symfony. Go ahead and jerk some other symfony fan boys off. It will give me an advantage
How many alternate accounts do you have?
http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/
&gt; I saw everyone voting yes on the 7.2 change, and I wanted to know if anybody of the council is taylor, so I can be upset with him. And if he is not in the council, why the fuck is he not there he could get some sense into those blokes. You can easily figure that by yourself, but to give an answer to your question: Taylor is not on the council because he didn't contribute to PHP itself. Contributing to the PHP interpreter is not the same as developing a framework.
Yo. I don't really give a damn about wether or not you're a Laravel fanboy and your opinion of Symfony. But counting a non countable sounds like a real bad idea and it's not the first time we make the language stricter. But in any case all your answers and comments are just rude/offensive so please stop being so toxic or stop posting here thanks.
Username checks out.
I asked a question, why don't you answer it but attack me personally? rude! answer the question or fuck off, thanks!
it's always nice to talk down to people, so much fun eh? feeling superior don't you? "you can figure that out urself but i'm generous and give you an answer" how dare you talk down to me like that? and you are wrong too I cite: &gt; The proposal here is for two audiences to participate in the voting process: &gt; &gt; People with php.net VCS accounts that have contributed code to PHP &gt; Representatives from the PHP community, that will be chosen by those with php.net VCS accounts &gt; Lead developers of PHP based projects (frameworks, cms, tools, etc.) &gt; regular participant of internals discussions 
hi, i dont know this guy, my account is my own, but i agree with him that they broke PHP 7.2 with this change of count()
you cannot accept that there is many people disagreeing with you, can you? so sorry man. Yes, flee into an illusion. Haha :D dumb bitch. Even the rfc committee agrees, they fixed, clarified they made a mistake and added a new function to 7.3 for their wrong doing. But it's ok you lil sheep
Hey, For namespace I prefix to my business, or me as root namespace, then what I'm working on, so use function demo\trivial\{FizzBuzz}; // fine it was just an example (I did like using providers) use cd2\data\api\github\Gist; // Facade to internal Gist Classes The API example would probably pull in it's own submodules. use cd2\data\api\github\{GistCollection,GistEntry,GistRevision,GistMeta,GistResource,GistOAuth} Some of those would probably be modifying a request using `psr/http-message`. You could also checkout https://github.com/KnpLabs/php-github-api, although I'm not in love with the API style or project setup, it works and has tests. They use Github as a namespace (surely they should prefix that with knplabs?)
&gt; it's always nice to talk down to people, so much fun eh? feeling superior don't you? "you can figure that out urself but i'm generous and give you an answer" You're asking a very simple question on a public forum, which can be easily answered by a quick search on Google. What else would you expect? &gt; and you are wrong too Not entirely, but i'm not willing to discuss it with you. &gt; how dare you talk down to me like that? I'm sorry you majesty, I didn't know you would get upset. If I may give you an advice: change your tone and your attitude. In this thread, you responses to other replies are rude, toxic or wouldn't misfit in /r/iamverysmart. 
haha :D it's ok, i'll forgive you for being a faggot without a point nobody answered my question, nobody. Everyone would go "oh you suck taylors cock so hard" well you guys setting the stakes low. I am just playing or game of fags. "OH YOU ARE RUDE" well, play stupid games, win stupid prizes. if its so easy to google, why has nobody answered yet? lol so silly
You should google "Narcissistic Personality Disorder" while you are at it.
Haha :) Many people, including the people using CakePHP (for many obvious reasons), will tell you that you are very mistaken. It might be popular, for numerous reasons - but a static usage driven approach doesn't always do things "right"..
It did not break it, it just shows you now what you guys did wrong. So just fix it damn it :)
Leroy Merlin have site in Brazil with a lot of requests. This site uses Laravel. https://www.leroymerlin.com.br/
To the best of my knowledge Taylor Otwell never applied for RFC voting rights, so consequently he does not have them. If you want to know why he has not applied, I'm afraid that this is a question only Taylor himself can answer. For the record, anyone can participate in RFC discussions (only votes are restricted).
Ok, so I have transcript the first three\(four to go\). If you don't mind to give it a go... Specially the third one which mixes code and talking. It maybe hard to follow. I have give it a go and makes sense. However I know the video by hurt after recording them like 5 times each :D
You lost the knowledge on how to do a web search? Maybe you need a facade to do that for you?
My recommendation is to use Microsoft's Web Platform Installer \([https://www.microsoft.com/web/downloads/platform.aspx](https://www.microsoft.com/web/downloads/platform.aspx)\) to install PHP 7 then install the PHP Manager for IIS extension \([https://www.iis.net/downloads/community/2010/09/php\-manager\-for\-iis\-7](https://www.iis.net/downloads/community/2010/09/php-manager-for-iis-7)\). This will allow you to have both versions of PHP installed on the machine \(separate directory\) and flip back and forth between the versions quickly in IIS. Web Platform Installer will grab any dependencies you might need for PHP on IIS and the PHP Manager gives you a better GUI for managing the settings for your PHP install including extensions etc. I run several different IIS servers with PHP and I've found this to be the easiest way to manage PHP updates.
&gt; Don't listen to the symfony fanboys Says the laravel fanboy ;)
Jesus you're like a 12 year old from Xbox Live in 2007. 
hehe you are right, i'm a laravel fanboy. Many are. And for a good reason.
thanks mate, great answer. 
That makes your reply biased, especially on how you're saying everything else is bad. Doesn't seem like you have used either of the other frameworks, so I would recommend you to try them before bashing them into the ground.
that was actually funny :) you win yourself that prize, funniest reply so far in this thread
fuck man, taylor otwell is sick. Hope he doesn't fucking die. https://twitter.com/taylorotwell/status/987406668798578688
I don't know much about Laravel nor Taylor Otwell, but I wonder why every Laravel post smells like an excuse or an opportunity to adulate mr Otwell. This kind of religious devotion is the reason why instinctively I distrust Laravel and I consider it basically a scam. There is never objectivity in the words of its users, only blind devotion to the thing and its author. For you guys doesn't matter if the change on count() was a good idea or not; what matters for you is what your god thinks about it.
And has a (mostly) super clean API.
ok, and which in your opinion, the framework is more useful for making simple web applications and websites. Symfony seems to me to be such a more complete and mature framework, but laravel from what I see is much more popular and easier to make smaller apps. 
I Pine for native collections $collection = new SomeType[]; or $collection = new SomeType[5];
hmm I understand your reasoning. I am not religious with laravel tbh. I think for example the facades should have been with interfaces, not the way they are. But you can get around it with a phpdoc generator written for exactly that. Feel free to ask / discuss with me anything. I have worked hundreds of not thousand of hours with symfony as well, and never liked it. From start to end, never liked it. I worked as well with slim. I liked slim a lot better than symfony. But you find yourself looking for libs and tools to do stuff with slim. Example: respect validation library. But doing a validation of several fields at once is _not_ straight forward with respect validation. Don't get me wrong, it can be done, but it is not nicely done. With laravel, 95% of all the things you need, are already done and well done. They use respect validation under the hood, just simplified the interface. They simplified everything. Webpack? yes, but to get started, they super simplified the access to 90% of what one usually uses from webpack. You can still do advanced stuff, but to get started it's easy. And it should be. It is maybe not always optimally, but almost. For example I back their choice of vue js hands down too. I worked with angularjs as well for hundreds of hours, and always thought it is over engineered and tedious. Feel free to discuss
It sounds terribly stupid, but until now I've been working and learning on windows :x it's probably time to change to linux... 
the problem is in what peter_mw said in his initial post. Plugins, libraries, are full of wrong use. "So just fix it damn it" well what? I open an issue on _all_ libraries I use? _all_ plugins? I do PR for all of them? no. there is no "just fix it". They broke it, they broke the whole php landscape, _to throw a fucking warning on a 15 years old function_. I agree with peter. The advantage of having a warning for a 15 years old function is _NOTHING_. almost nothing. And now we can wait until all libraries fix their code. And the new function `is_countable` only exists in 7.3. So new code written _will not be backwards compatible_. For a warning of a 15 years old function. Bravo! bravo...
you have -2 just for stating you are not me :D I wonder if all redditors here are not using any libraries, and all use self written code that they all wrote all together themselves? ridiculous
I'm running it on a few different ones ranging from IIS 7.5 to IIS 8.5. I did notice when I set up the 8.5 machine that PHP Manager was no longer available. I had to install it as a separate extension, not through the platform installer. It works without any issues however. I'm not sure why they stopped including it with 8.5 except to push people toward .NET on Windows Server. It's a great tool that really helps simplify PHP management with IIS.
Looks like it's not just C, but would also enable talking to compiled Rust https://blog.risingstack.com/node-js-native-modules-with-rust/ Someone else has prior art for NodeJS. Personally, I think you'd be pretty insane or on the edge to use this outside of showing off to people that have no clue what you've done. Maybe everyone else knows of teams that could maintain this Frankenstein &amp; it's offspring in production
benefit vs something like an OpenFaaS converter (with each format becoming it's own FaaS function?) Even seems more complex from the PHP side. In OpenFaaS you could just send-in raw bytes as the body. Why does it use / support multi-part in the PHP library when in the gotenberg main repo it says libraries like unoconv cannot leverage concurrency so work on one file at a time? 
I wish it was possible to report people for utter stupidity.
Should be on the first link \([https://www.microsoft.com/web/downloads/platform.aspx](https://www.microsoft.com/web/downloads/platform.aspx)\) on the top right of the page "Install the Extension" or at the bottom of the page you can choose x64 or x86 version.
We use libraries that have a standard of quality
me too
dumb reply
Sorry I meant the installer for PHP Manager. I can only download an archive of the online discussions/issues...
I am not a fan of any framework, but I would strongly advise you not to try Symfony. It is a heavy, over-engineered, complicated framework which as a sever caching issues windows. I honestly don't know how it became popular, maybe it used to be good in the past. I don't know. Once in a while since 2013 I install Symfony just to learn and make something with it so I can apply to more jobs, but this effort has brought me nothing except a terrible experience and waste a huge of time. Every year or so, I spend 4-5 hours installing the framework, getting required extensions, fixing directory issues like permissions, configuring the initial setup and the the cache breaks the entire app, this has been going on for some years as recently as [less than a month ago](https://github.com/symfony/symfony/issues/26730) and the owners response only [shows you exactly why](https://github.com/symfony/symfony/issues/2600#issuecomment-271322608). I can't put into words how dysfunctional on windows it is. They put all those fancy software names, patterns, methods and yet no one can fix or even check an 8 year old problem which is critical issue, as you can see their Github issue page is littered with caching breaks and issues. In the end, I consider Symfony to be a bad choice for anyone and can't wait till it becomes a thing of the past, in favor of other frameworks that not as tiring and frustrating as this one. 
Outside IDEs it's possible to (only) partially cover the scope with following tools (CI-friendly): - https://github.com/FriendsOfPHP/PHP-CS-Fixer (with risky rules enabled) - https://github.com/phan/phan - https://github.com/phpstan/phpstan (with https://github.com/phpstan/phpstan-strict-rules) Sure configuration efforts, but I can do that for you (poke me via DM for pricing). Ah, also 2 more project worth checking: https://github.com/phpro/grumphp and https://github.com/jmolivas/phpqa, but they need more time to configure.
Thanks for this, I appreciate the thorough response and really like the reminder that there's more to queries than just performance. I've never fully understood how queries that get used often end up cached. Is it as simple as that? That when a particular query gets used over and over again, the server is able to pull the data faster? As opposed to running unique queries?
The question is more like, Why are you not supporting php7.*
Thanks for the response. I'm confused about the pricing. Could I get the $50/mo and use mysql and elasticsearch? Also, it says 1 user. Does that mean 1 user for the admin panel, deployments, or ssh? Could we have multiple users deploy while only have 1 user? It looks well built out.. the development tools look pretty nice. I'm kind of surprised I didn't find more about it.
98 karma and dropping with threads like this
Judging by the cool codename, that's some serious shit.
- Yes, you can run MySQL and ES on a single project. - A user refers to the ability to login and manage via the UI or CLI. If you use the github integration, deployments will trigger when the branch is updated, so anyone on your team could deploy. CLI access however is based on the user account, so you would need to either buy more users, or share a user, which isn't that great.
Yup, already tried that. Definitely no installer in there :-/
Hmm. I know I've found it recently. I'll keep digging when I get back from lunch. It is by far the best solution in my opinion.
A couple demo vids I put together that kind of give you the idea. Lmk if you have more questions - https://www.youtube.com/watch?v=LJE3cd3X2N8&amp;list=PLn5EpEMtxTCmNh4eEG52JdxHP6qBV69Ux
Thanks buddy. Home time for me now. Have a good one :D
Comments are too limited to describe such complex topic. Here is the draft of a post I talked about. Could you give me feedback there? https://github.com/TomasVotruba/tomasvotruba.cz/pull/303/files 
I think it makes sense to use code to explore the problem before trying to diagram or decide on some concrete implementation. Like making a few throwaway sculptures beforehand to ensure that your structure is going to hold up while being able to get a feel for what you might need to watch out for. This information is invaluable when trying to get the design right.
Hi there. Pricing is for the total amount of resources (CPU/RAM) that your plan has. You can add whatever and however many services to that you want, as long as they fit within the resource limits. Generally speaking a typical mostly-anonymous PHP app, database, and 1-2 other services fit nicely into a Standard plan. Users is per-user that has access to the project. As /u/wanderergt said you can go through GitHub integration to control access that way if you prefer. If you're an agency we also offer Agency plans that remove the user-based pricing for your agency. Disclaimer: Yes, I work at Platform.sh. :-)
Thanks I was going to ask about the agency thing. I filled it the form for it yesterday so waiting to hear back. 
1. Arrays are passed by pointer by default, so do not take up any more space by passing them into a function until you change the array. 2. Basically, it's partly about the results and partly about the indices. When a DB query runs it pulls the indexes into array to build a result set from disk. Anything queried on without an index will essentially be built up into a temporary table and then selected on. That table will hang around for a while, so it's often faster to use data in the same way frequently rather than lots of different ways.
My mantra is often: the first one is to throw away, anyhow. Simply because you won't be aware of all the problems you need to solve in the particular domain, unless you've done something very similar before.
It's a containerized system, so each environment has its own database container. The mechanics of database login amount to opening an ssh connection, then using that environment's connection details to connect to the database. I, too, work at Platform btw.
LOL. I made that so much harder than it needed to be. Install the Web Platform Installer. When you install PHP, also look for PHP Manager for IIS in the platform installer and check it off as well. WPI will install it along with your PHP install. When I selected PHP 7 in WPI, it automatically included PHP Manager for IIS as a dependency.
Yeah i tried that route first actually. WPI failed to install it though, citing a verification issue with the PHP Manager files/installer LOL!
Have you checked out [Grav](https://github.com/getgrav/grav)? Flat-file, PHP.
If you are after super simple with editable stuff I'd look at Jekyll or Hugo for static site generation and something like forestry.io to allow people to edit certain fields or content. 
i agree that proper code should be written, but go tell then to the random guy who uses PHP only to connect templates for some CMS and uses count() to check if a variable is false... fronted guys do this a lot... and now many templates and plugins in the ecosystem are broken.... 
Ha! For such a great tool, they certainly don't make it easy to install. I was reading a few places that PHP Manager might require .NET 3.5 which is not installed on Windows Server 2012 and not supported by .NET 4\+. What's funny is the direct download link in WPI takes you to the archive page. It looks like the original developers abandoned the project but someone else has picked it up and updated to use .NET 4.5 and added support for IIS7\+. [https://github.com/RonaldCarter/PHPManager/releases](https://github.com/RonaldCarter/PHPManager/releases)
Some people are jerks who think their stack is the best stack. More news at 11.
Thank you kindly good man
The only shitty thing were those comments. Yes, PHP is a flawed language but if you use it right,you don't notice it... too often.
They're using *server side Javascript*... it's like being made fun of by a guy missing his frontal lobe and drooling down his shirt. Shouldn't bother you.
Nice one, I'll give it a go tomorrow!
I'm quite fond of Grav, personally. I've got a setup running on a $5 a month DO droplet. After enabling the precache plugin and redis the average page loads within ~300-400 ms. That's pretty damn good for a CMS...
[Return Type Declarations](http://php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration) are a new feature of PHP starting with version 7.
Ironically JavaScript is pretty bad itself 
You do not have to use Return Type Declarations, they are completely optional. They just exist to help development.
It's a way of telling PHP that it ***has to*** return an array, or PHP will throw an error. It's a form of static typing to prevent bugs and unexpected results.
It happened for me too. I even went by myself to the hackaton. Had to do a small presentation in front of everyone, all the rest were made of two people or more. I don't care, it was a fun experience after all. I guess no one directly made fun of me, being 6'3" and angry resting face. The point is, who the fuck cares, I've been living and maintaining my family for more than 10 years as a PHP developer. 
Because its related to PHP? Get the fuck outta here, your comment history is terrible.
I wonder how he ends up in /r/PHP 
'Pretty bad' is quite an understatement. JS is a disaster as far as I'm concerned, worse than PHP. 
Who hurt you?
PHP runs the internet just remember that.
Amen to that. PHP gets the job done. It's not particularly sleek or sexy but it's like the reliable old family car with 100k miles on the clock. You know it'll get you where you need to go. Anyone who hates on PHP doesn't understand the value of truly understanding your own tools.
why do you have to have a head?
"Happy people don't cheat Happy people don't lie They don't judge or hold a grudge They don't criticize" Don't let these unhappy people put you down. I'm right cuz it was said in a song.
Glad I could help.
JS is a drunk guy I have to keep in the party, but you can't trust him. Let him off the leash for 1 second and he's juggling types, making up his own math rules, and fucking with you by sending the prototype object into your loop instead of the payload. Real fuckin' funny, that guy is. Tell him to do x and y, and before you can get the instructions out of your mouth, he's slurring out an obnoxious, "Yeahyeahyeahyeah, I know what you really want..." 
Nothin' wrong with that.
Good one.
I agree with you but you have to admit that the analogy is fairly accurate. It's like a guy with one hand is making fun of you for missing a leg. Both are great tools if you play to their respective strengths. 
Sorry that happened. People can be jerks. Fortunately you picked a very nice stack to work with, MariaDB is lovely! Keep on truckin'!
People diqualified themselves by really using MongoDB. They really have no reason to look down to PHP developers. http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/
While I’m not a super big fan of php I’m sorry people were idiots. I occasionally poke fun at php but usually end by saying something like “hey it pays the bills though so it can’t be that bad” ... it does surprise me how many times people that have no idea about php make fun of it and usually ill call them out and try and educate them a bit. Just keep doing what your doing ;)
go to /r/linuxmasterrace and do a search for 'I use arch' that should tell you all you need to know. . .
&gt; Anyone who insults or looks down upon it is a peasant who isn't a real developer. This is the exact same kind of dumb gatekeeping as the dudes making fun of OP for not using whatever trendy modern stack they chose.
There is absolutely no compelling reason to use mongodb for anything ever.
have you tried cushycms? i haven't used it in a while, but man is it EZ PZ. just define editable zones, and edits are made using the filesystem 
im gonna say codeigniter. approachable and no CLI tools necessary, which can scare off a lot of newer devs
hmm i've been using the cli tool phpstan but i'll give this a shot
And they wrote it in js... The irony.
Thanks, you're right! Besides, the amount of companies that are interested in me are piling up now, which is refreshing after having worked shitty jobs since dropping out of college. I have PHP to thank for that.
MongoDB is for people who can't comprehend something besides JSON.
[This](https://slack.engineering/taking-php-seriously-cf7a60065329) is a pretty solid defense of using PHP that an engineer at Slack wrote up in 2016.
[This](https://slack.engineering/taking-php-seriously-cf7a60065329) is a pretty solid defense of using PHP that an engineer at Slack wrote up in 2016.
Learn to not let it bother you. I use PHP for fun &amp; side hustle, Microsoft stack for my day job. I was given plenty of looks and snarky comments in college for using Visual Studio &amp; .NET... but its whatever. The people that make fun are typically insecure about their own shortcomings. In my case, most of those people couldn't find jobs when we graduated. I had one lined up and experience with Microsoft tools definitely helped.
What did you build?
 Pot calling the kettle black
So you chose the right tool for the job, not the coolest and most new-fangled one. I don't hire people but if I did, you'd be me first choice over the guy who picked a three-month-old js frame just because it's 'cool'. I've tried all the new js stuff and decided it's not ready to commit to just yet. Learn the general gist of it (promises, async stuff etc) and wait until it matures a bit. Personally I think the _concept_ is awesome, but it all needs binning and writing from the ground up with the modern day in mind, rather than needing a dozen packages just to help you out (all these transpilers, task runners, etc). PHP is really heading in the right direction now I feel. They never used to dare change anything in fear of breaking backwards compatibility, but they're finally sorting things out now and it's still a dream to use. Error handling is leaps and bounds ahead of js, the frameworks are fewer in number and greater in stability and quality, I actually dare update my dependencies without being terrified my whole app will fall over, and so on. I just wanna close off by saying though that this isn't me shitting on js. It's got its uses, and it's benefits over PHP, but picking the right tool for the job is always the thing to praise, not being at the bleeding-edge just _because_. If there was one right way to do things that was perfect for everything, we'd all be doing that. 
Critiques are rooted in PHP5, which let's be honest with ourselves: was a steaming pile of shit. PHP7 has type safety built in, Node requires a \[compiler\]\([https://www.npmjs.com/package/typescript](https://www.npmjs.com/package/typescript)\) for type safety. Composer requires 10 MB to install dependencies. npm requires 1 server give or take your \[rootfs if it's feeling frisky\]\([https://www.bleepingcomputer.com/news/linux/botched\-npm\-update\-crashes\-linux\-systems\-forces\-users\-to\-reinstall/](https://www.bleepingcomputer.com/news/linux/botched-npm-update-crashes-linux-systems-forces-users-to-reinstall/)\). npm has a terribly toxic management team. Packagist, well, no qualms here. Plus let's not forget the discovery of \[horrible password strength\]\([https://github.com/ChALkeR/notes/blob/master/Gathering\-weak\-npm\-credentials.md](https://github.com/ChALkeR/notes/blob/master/Gathering-weak-npm-credentials.md)\) with Node contributors... Ruby was the hotness 7 years ago and drew away PHP's fickle developers. Node came along and drew away Ruby's fickle developers and there's something to be said when you trade experience for whatever is en vogue; there's not much respect for your tooling or others. It's easy to make generalizations of any community. I just did of the Node community and I'm sure they would take offense to some of the things mentioned, so fuck 'em. It goes both ways and the difference is whether you have foresight to acknowledge this or you're just an insular brogrammer.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ChALkeR/notes/.../**Gathering-weak-npm-credentials.md** (master → b26f7b3)](https://github.com/ChALkeR/notes/blob/b26f7b30037bcf200b82467f7d8f8a630ccfc44e/Gathering-weak-npm-credentials.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxuehhx.)
I'm sorry you're having a bad time with it, but I feel like you are missing a ton of simple concepts. I agree it's not great that hooks still exist, but at some point Drupal 8 had to release, and I'm ok with still needing some hooks until they are completely deprecated. Annotations are used for plugins. They aren't 'used sporadically', they are used in a very systematic way for extending functionality. They replace most hook_&lt;whatevers&gt;_info's from D7, and provide a consistent way for plugin definition. You can't load Entities only by UUID because Drupal 8 clearly defined entity_type for encapsulating behavior. That's why entity reference fields, views, entity queries... literally everything requires an entity_type. Considering literally everything in Drupal is entities, and entity types can be configuration or content, why would you want to create something so ambiguous to begin with? Some dependency injection is in yaml, but again, there are multiple ways this is done. For example, DI for plugins is retrieved from the container. You can load a taxonomy tree using: $terms =\Drupal::entityTypeManager()-&gt;getStorage('taxonomy_term')-&gt;loadTree($vid); Alternatively you could query all terms for ones with the same bundle. I agree the file url call is bad. It seems like perhaps file stuff got the least attention during the development of d8, as I find that's where I use the most legacy stuff. However, in general I'm rarely calling functions anymore, so I don't think that example is the norm for most of Drupal 8. I'm sure in due time someone will take the initiative to offer improved file handling. As for Laravel, I think it's great, but I also don't feel Drupal 8 is nearly as bad as you make it out to be. 
i upgraded to PHP 7.2 and got errors on the `count()` function my point is that changes on such essential functions should not happen.. a lot of code written by front-end people is bad... `count(false)` or `count($array)` , nobody cares... 
Seems like a good enhancement would be global database/redis/es servers. Similar to RDS or Google SQL.
You should read upgrade notes and decide if possible BC breaks is worth the new features. If you are using badly written code, even if you did not write it yourself, it should not be used as an excuse to hold back the language for everyone else.
Yes, that’s it. Thanks :) 
Yes, old codebase will be always issue with moving language forward and still not break everything. However, there might be a better way to introduce separate extensions in the core for a new consistent API \(consistency is important, that is what programming is also about\) and still have the current inconsistent ones there for few versions in the future...
Im not in anyway against new features just i don't like to see change on essential stuff like `count()` we had to go on 100+ files to fix things i don't know details why this was BC break... but if things like that could be avoided in the future will be great 
Depends on what the challenge was I suppose. Personally speaking, I think PHP really shines with something like laravel for quick website development, but it depends on what you are building, like any project.
I think your analogy is much better than the original analogy. The original analogy was just snark, yours actually makes sense.
It sounds like y'all upgraded the PHP version on clients' production servers before copying it to your own server, updating PHP to the targeted version on that server, then testing it there?
PHP doesn't have a history to be proud of, however PHP5 got it to better. Recently PHP7 has flipped the tables. These guys have stuck in past, so don't worry about them. F*****g primals. You do what you love and you know what you're doing. That is most important. 
this is dedicated server on cpanel on and it supports only 1 version of php there are about 50 sites on it 
As I see it, it's not a problem with PHP you, or your clients, have. I think you've more a problem with reading the update notes, with testing or with code quality. If you upgrade to a new version you should do it in a test environment and see the problems and fix them. You should also always read the release notes, they're very helpful. If mostly frontend people write the code maybe they should learn more PHP or you write tests for the code. If they really write like "count (false)", these people should not write production code. Btw. BC breaks can and will always happens in every language, it's part of the language evolution.
If it gets the job done, there's nothing wrong with it. I use PHP at work because it's well supported and quite possibly the best tested tool for the (current) job, which is an API. Sure, it's not the best language out there, nor the hippest or best designed, and it could do with a lot of modernizing and streamlining, but it still gets the job done better than Python or server-side Javascript in my opinion. In my spare time I mostly tinker around with Perl 6, which also gets a lot of flak from non-users since the name contains "Perl". What I notice a lot, is that the people shouting the loudest about how bad these languages are, oftentimes have never worked in it. Not even a single bit. They heard the language is bad, and will just parrot it along to fit in with the Cool Kids. Don't let it bother you, use whatever works for you. Just remember that the ones making these shitty comments are simply not good enough programmers to understand why you can work with it, and they can't.
there are only two things I can't stand in this world: developers that are intolerant of other technology stacks, and Perl
You can make fun of the for using MongoDB and JS on the server side. First Mongo. Unless you have really weird and random data or you are using it as a cache then using MongoDB is just WRONG. No schemas, no relations, no data integrity, no data consistency no nothing. Especially I love when ppl who use Mongo then use ORM which does everything RDBs do four automatically. Nice... Then there is JS which is pretty bad language. I would say base PHP is pretty bad aswell but then there are frameworks. In PHP world you have Symfony and Laravel (and others ofcourse). Now look at JS. Theres nothing even similar to that. People who make fun of PHP saw it 10 years ago in some vulnerability ridden Wordpress application. Today it's tottaly different.
This one just sounds like a resource/project management issue more than anything. No staging environment or CI integrations perhaps to help with this kind of testing/maintenance work? If you have cPanel, presumably you have WHM. EasyApache 4 allows multi-PHP. One of my company's clients is on a managed server with WHM/cPanel, their staging subdomains are running newer PHP versions than the live sites as we're finishing platform upgrades.
im on old Cpanel server with only EasyApache3 my point was not the server environment, but the breaking changes on essential functions 
Those people are schmuck hipsters. They can go F themselves.
Tell the people who organized the hackathon. It will hopefully allow them to both help rectify your specific situation, as well as prevent it from happening to others in the future.
That return type aside, if you're moving towards object oriented programming consider looking around for better course (unless it's an early refactoring example). This code has to many flaws for such a short snippet - nested style, using constant instead parameter, mixed responsibilities/ambigous name.
Regardless of your stance on any language or tech it sounds like they were behaving inappropriately for a hackathon. It should be about community involvement and inclusion. Your choice of tech for the event played no impact on their work so why should it bother them? And should you be on a team that chooses a direction you didnt vote for you should make the best of it and learn why things were chosen the way they were. We should always be open minded, learning and growing our experiences to better plan for the future.
But you still upgraded the server without testing or review it sounds like. Which to me points to a resource/project management issue, not a PHP is broken issue. In the case of the count() changes this was already a code smell that should've always emitted some kind of warning (how does count('I have no idea what is going on here!') make any sense; that was allowed in 7.1 and earlier). I get it's annoying, I've had to fix code related to that behavioral change too, but it resulted in the changed code being structurally correct (and the changes in our userland code are B/C back to at least PHP 5.3, so it's not like there's extra maintenance burden in the code base to support the 7.1 and earlier path versus 7.2 and later).
pretty much. worse, even, in that a lot of companies that host hackathons do it for the cynical purpose of getting developers to work on product prototypes without being paid to do it. 
I've been in this business for 20 years. I've led projects with budgets in the millions. I've worked with developers on pretty much every stack there is. You know the only thing that matters in the whole damned world? **Results**. If you can get results in PHP, that's infinitely better than a dev in another stack that can't. Smart people know that *talk is cheap and insults are cheaper*. Get results and ignore anyone that doesn't.
I get this when I tell some of my device friends I work with some controls languages (tbh mostly just as another data source) they assume PLCs are child's play, not that they automate 99% of industry and manufacturing... Some people are dicks
Sorry I have to say this, in face of all your wrote there, but your thoughts are all over the place. You have two tangible critiques: - What P.M.Jones wrote, but as you yourself note, his subjective judgment on what's a "smell" doesn't automatically result in technical debt or hard to manage code. Will you split a controller in 5 pieces or keep them one file is absolutely irrelevant, as all controllers together tend to form a single unit regardless, and are rarely (if ever) individually reusable. - Your second critique is that auto-wiring and property injection is bad. I happen to agree, but this has nothing to do with action method injection. First, none of this is about properties. But also *both* constructor injection and action injection are auto-wired in Symfony. You can't use what applies to both, or what doesn't apply to both, to argue one is better than the other. It doesn't make sense. So if you set out to write an article about "why you should prefer constructor vs. action injection" you seem like you forgot what you were writing about halfway through.
I just point them to [this](https://dev.to/paragonie/php-72-the-first-programming-language-to-add-modern-cryptography-to-its-standard-library) and tell them to come back when their favorite language catches up.
Yes, I must find another course but most udemy courses are really weird :/ i'm thinking about laracasts subscription.
Se he can put it where it belongs.. in his ass. 
"they"
I found that comparing dependencies injection between services and controllers a bit unfair. It's true, that if you have class which has a lot of dependencies and only few of them are used in each method, it is probably indicates that our class has low cohesion and high coupling. But controllers are a bit different story. It's OK to have fewer common dependencies between different actions of same controller. At least until we are using controllers only as some kind of bindings between http and application. public function registerUser(RegisterUser $data, RegisterUserHandler $registerUser) { $registerUser($data); $this-&gt;flushChanges(); return $this-&gt;resolve(Resource::User, $data-&gt;email); } 
Start officiating youth sports. After a season or two, this sort of criticism will either roll right off of you or you will have developed a good set of tools on how to respond.
PHP7 with a framework and a good frontend is more like a almost new family car.
Insecure fucks. 
All languages are flawed but for some reason PHP is the one that gets criticised the most, usually by people who have never used PHP.
at the end of the day PHP gets the job done. If it’s suited for the job then why not? I’ve used both PHP and JavaScript (NodeJS) for the same relative small but Heavy traffic website. Aside from its obvious flaws, PHP is fine for certain workloads. MongoDB users making fun of MariaDB? What have they been smoking?
PHP sucks, sure. Guess what though? My PHP skills have earned me enough money to buy a home and travel the world. Haters can hate all they want, I'll be here earning an honest living and not caring in the least. 
Damn, what pieces of trash they are. I was unaware of these “greater than thou” coders. Are people really that divided over programming languages? Coming from the Marines we adapted and overcame obstacles to get the task done. At the end of the day I don’t give a shit if you used php or python as a tool. It sounds like some of these kids at hackathons have no real sense of “being” and honestly need a good ass whipping.
That is shitty, and likely, their JS contraptions are shitty as well
&gt; Your choice of tech for the event played no impact on their work so why should it bother them? Most likely insecurity of their own abilities and tools to express their worth. A lot of people go to Hackathons in the interest of competition, either to validate their skills or impress potential employers. They might be worried that the existence of PHP and other - possibly more skilled - developers is a problem when competing for a theoretically limited number of jobs or money. They need to validate why they are better and worth more in the field and to others, so they pick on a topic that differs from them to explain why they are more valuable and should be highly sought after. Same reason why bullies in middle / high school pick on kids who don't wear the same clothes: arbitrary distinction of superiority to try and validate their interests and skills. Of course, we aren't defined by our tools. Even if OP coded up an application in Fortran, it's about the quality of the product and the skill in creating the product more than what was used. Any legitimate critiques should be focused on the product ("It runs too slow" or "it's too insecure") and not the tools. In 10 years, those people will probably read a story on Reddit (or wherever) of everyone making fun of the Node.js because it isn't LatestTechTrend.xyz. But they won't care about any of that because it's about being better and getting opportunities *right now*. It's really really crappy, but again, it's basically bullying for adults. OP: It feels bad, I get it. I think everyone has probably been there for something or other. Just remember to be confident in your skills and tools and never let yourself succumb to the same kind of behavior where you feel the need to talk down to others. If possible, reach out to someone who has some control of the situation (such an organizer) and let them know your feelings of non-inclusive behavior that dissuades you from partaking in future Hackathons. There's not a *lot* that can be done, but it might help organizers consider putting effort into educating people better about not judging others based on what their skillset is. Remember that nothing they say actually matters to you at all because these people aren't and probably won't be your employer and are possibly worried about the future of their own talents.
Definitely. I build with Laravel, and with composer and a good webserver it's a really maintainable and flexible package.
Man, people who make fun of other stacks have really low understanding of how the internet was made and runs. Fuck'em if they have energy to waste on little tech clan wars. Reminds me of when i was 12 and arguing about what is best between Playstation or Xbox; narrow minded child way of looking at things. Stay confident and ignore 'em dude. If it's an event wide thing, switch event and do share to other developers that this event has that way of mocking other people. Every language has its place. The best language is the one you like working with... even better if it fills up the plate at the end of the day :\) Cheers ! :\)
https://www.youtube.com/watch?v=fNTBb1u6UGg
it's fucking true, I'm often brought in to fix problem applications and Mongo is almost always at the root. Relational DBs just can't be put aside. 
https://imgur.com/5pFXFbR
All I can really say is that almost any data system solely using MongoDB is terribly flawed. 
There's your validation right there. They trashed you, but couldn't get it done.
I have developed so many apps in so many languages; nothing pisses me off like dependency hell which is always a particular problem in JS systems. .NET is cool if you accept all the black box applications you'll be requiring. No major language is as easy to reverse engineer as PHP. 7,8 years ago you would have gotten the same treatment only they'd be using Ruby, only Ruby is struggling to stay alive right now and code schools have even removed it from the curriculum. I like JS so I don't want to hate on it too hard but cliquishness is deplorable
Yes but it's web scale
And some link on the subject: https://security.stackexchange.com/questions/64102/vps-privacy-openvz-vs-kvm-vs-xen Also about the difficulties of FTS with a row-level encryption system: https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql With an interesting note in the threat model proposed in the above article, &gt; We're protecting against live attacks on the database server, not a webserver compromise. A webserver compromise is a game over situation. Mhmmm. And one more on FTS: https://stackoverflow.com/questions/23529067/fast-search-on-encrypted-data Making option b) above in my post, even less practical.
`throw.Stone()` depends on `left-pad` and 601035 other npm packages Please run `npm install` to download 51 GB of javascript code
It seems to me that PHP made a lot of ground in recent years and a lot of people are judging it by experiences in the distant past.
Of course JS has frameworks. Too many even. 
We have many users running multi-app configurations at this point. It works great. The git server is the same regardless of how many apps you're running; our entire customer base is using that setup.
It wasn't even good snark. Good snark would be "At least we don't need composer to pad our strings, nor have we had all of our packages disappear because the guy who padded strings quit."
Obviously /r/pcmasterrace, you peasant.
That's absurd. PHP has turned into a damn fine language and I'm very happy to be using it. Also, MongoDB. Yikes.
This, 1000x. People don't take the time to reevaluate something that they've already written off as bad in the past. It's why rebrands are a thing.
Having spent some time looking into GDPR for work, what strikes me is how many unanswered questions there are in it. There's going to have to be a massive amount of case law built up around successful / unsuccessful prosecutions before we'll begin to know what form it will ultimately take.
They were using Node.js and all that ? Lmao! Python man, python. Or Dart. Javascript is overrated, hard to read and with a relatively useful scope, but not as broad and crazy easy as Python is. PHP is respectable and still 100% valid for development and production. Don't feel intimidated. If you feel comfy with it and got skills, keep putting them to good use.
Started with PHP4 back in 2002; built a web site to facilitate cheating in physics, because I had no hope of figuring out the math without collaborating with those smarter than me. I've rode it since then into a [company](https://apisnetworks.com) that specializes in hosting [control panel/platform software](https://bitbucket.org/apisnetworks/apnscp/src).
Scaling on MongoDB? That be the real hackathon. 
+1 for Dart, it is amazeballs. AngularDart is my jam.
Up here in Canada, but I think it applies to anything. If you need physical access to the server, or be able to only restart the server using an encryption key, you start renting rack space or something like that, you don't go for shared servers/vps... and when you go to the cloud services, you need to spreed them (one to hold the encrypted data, another the decryption keys and so on) that would cost to much compared to renting half a rack somewhere. And I would hate to be the sysadmin that has to go to the colo with a USB in my pocket to restart servers...
Most people who hate PHP aren't good with programming. They are just good with one language.
One great way to get back at them is by making incredibly popular web software that runs most of the Internet.
Hey, mavykins, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
The EU seems to take a sensible approach so far. I mean they won't hit you with a hammer first (unless you are a big corp). There are almost no guidelines yet. They will appear down the road. But the issue is bigger. If you hold data for thousands of people and you're hit with a data breach, because of poor security, that's still going to be bad regardless of business turnover. The unanswered questions come like this: EU issues GDPR as the legislator. They aren't the tech world. The job is passed on to legal and tech teams all over the world to find a technical way to implement it. And I personally feel that burden now. Have 30 days to completely change our infrastructure and the only valid option so far is... key in the pocket and some guy sleeping in the server room.
Danke :) For the upvote. If you find a proper answer though, please share it with us. Side note, I'm also working on a website where such issues will be addressed and potential solutions and links etc. provided. 99.9% of website owners have no clue what's about to hit them. They know about cookies... and some about encryption... Well so far I've identified more than 40 issues and those are just 2 of them. Half of the 40 issues apply to EACH business. and they will have to deal with it. And it's just the technical side, a smaller role in the biggest play of implementing GDPR.
Um, but what about the app? Node has its own problems.
Correct me if I'm wrong (with citations, please) but my understanding is that the GDPR doesn't have any specific requirements about how you store data. Your interpretation appears to be trying to take the GDPR to its absolute limit which, in reality, is not going to be expected. The GDPR is essentially a shot across the bow of businesses with a digital presence telling them that they *need* to start treating user's data with the respect it deserves: it is not a demand that everybody return to building their own biometric-entry data centres in their offices.
Yep you were't wearing brand name kicks. Didn't matter how high you could jump or how bad ass you could dunk. I would've ripped off their ridiculous AngularEmberNodeReactJs stickers from their laptops. If I ever put a sticker on my laptop, it would say "nobody cares about your javascript stickers"
Why are you ruling out Amazon, Google, and Microsoft?
The zealotry is a bit out of hand with JS hipsters and you're seeing that come out to a degree against the language itself. I'm curious how big of a help is the same language on the client and the server when its JavaScript? The syntax is the same and basic array and string methods are the same sure. But when I played around with headless chrome (Puppeteer I think) Knowing JS didn't appear to give me a huge leg up. Furthermore, the exception and error handling I found to be horrid. Completely unhelpful to me. It got the job done and I thought headless chrome was neat, I just wished I could do the same thing in a better language. NodeJS is version 8 or something right? And its error messaging and stack tracing still looks like that?
The law (all law) isn't a list of implementations though, the law against, say, fraud, isn't "You cannot trick someone into giving you their card details on a website that pretends to be a website selling genuine Rolex watches" it's... well, I don't know exactly what it is, but it's something more along the lines of "You cannot obtain payment through misrepresentation". Laws are created and they evolve and precedents are set. You're doing what we nerds love to do which is try and make a point by taking things to their extremes but you're not really looking for answers. *This software can't work if you're doing one hundred million requests per second so it sucks, what happens if your personal blog is featured on every mainstream news outlet and everybody in America visits it at once!* The reality is that the GDPR appears to be a common sense step towards finally regulating data on the internet properly, and of course at the start it's going to be a strange mess than we have to wade through but that's our punishment for our laissez faire attitude towards our users data for the last 20 years. If you can't say to your stakeholders, "this law is intended to achieve x and although it isn't well defined yet, we've made these common sense steps which we've determined are the best we can do to achieve x within our business and because we're doing more than 95% of other businesses we're confident this is defensible" then yeah, shut down your servers and go home I guess... or I'll happily take your business off your hands and do that myself and enjoy the rewards for not being a nerd trying to prove a point. If there was a clear answer to all of this then you'd have found it already, and it wouldn't be found in the comment section of r/php.
/r/linuxmasterrace in fact, you traitor
Here's a sneak peek of /r/linuxmasterrace using the [top posts](https://np.reddit.com/r/linuxmasterrace/top/?sort=top&amp;t=year) of the year! \#1: [times are changing](https://i.redd.it/1sb0m2af07001.jpg) | [171 comments](https://np.reddit.com/r/linuxmasterrace/comments/7fmm7d/times_are_changing/) \#2: [Linux Distributions In A Nutshell..](http://i.imgur.com/gJnElH1.jpg) | [308 comments](https://np.reddit.com/r/linuxmasterrace/comments/6b5nwv/linux_distributions_in_a_nutshell/) \#3: [Yea, he uses Arch](https://i.redd.it/znfgkspk5n601.png) | [357 comments](https://np.reddit.com/r/linuxmasterrace/comments/7mlvxb/yea_he_uses_arch/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Fuck them. PHP has been paying the bills for 15 years now. EVERY language has it's problems just like EVERY framework. Just tell them to fuck off.
Honestly, people who talk shit about langauges are just looking for a gang to be part of. They're very clickish. They want to feel like they chose the perfect solution to which I think is impossible. If they wanted to, they could write web applications in C/C++, or golang. Next step is `golang` becomes the next "trendy" langauge.
The GDPR does say that it’s your responsibility to ensure your data processors are also doing right by the data. In reality, this means ensuring your contract with them ensures this so that if they fail you have legal recourse. Though, even in the absence of GDPR I would expect a contract to protect against malicious employees or data use on the part of the controller...
The average Node.js module feels written by a 6 year old on a sugar binge. Don’t worry so much.
I code in Php and Javascript mainly (AngularJS currently) Most Javascript programmers ONLY know JS. They have never used another language like Python or C or C++ of PHP. 
I mean these people are using JavaScript! JAVASCRIPT! How can they criticise PHP whole using something 10x worse? /s Anyway, just don’t listen to them. Probably they never did PHP or only when they were students with the old PHP. They probably never used a correct PHP stack and only wrote and read some shitty code. They don’t know PHP. If PHP has this reputation it’s indeed because it was much more shit before, but it was 10 years ago. Since, these people probably never touched any lines of PHP but as usual, they’ll criticise you for this choice. However you are probably much more experienced with your stack than they are of you really know PHP.
If you can’t get a proper contract and the host doesn’t make guarantees about the data you’re giving them then you probably shouldn’t be using this host even in the absence of GDPR.
 Yeah - we code client side in a shit language - lets code server side using the same shit language! Boom! P.S. I code Javascript and PHP daily.
This is a common response from vapid developers that repeat things they hear from other vapid developers. You have a skill they'll never possess because they shunned the opportunity. A real developer would have stopped to ask you questions about what you built because they love programming and can talk about it in any language. 
&gt; i think people are just now realizing Some people are, sure. Some people realized it 20 years ago. My Lotus Notes days still haunt me... 
Legit LOL on that one. Fuck those guys, OP
You can't just upgrade a version of software without testing first... This is not PHP's fault it's the system admin. If you upgraded the version of MySQL and something wasn't compatible it wouldn't be fair to rip on MySQL..
Here's my experience: The people who actively make fun of other people's choice of language are usually inexperienced newbies or (at best) interns/juniors, but at least the latter know to keep their damn mouth shut. In the real world, there's no time to make fun of other people's decisions. **You get the job done and deliver goddamn results.** Your clients and your users couldn't care less what you've used to do so.
straight to /dev/null, for the speed
/r/gatekeeping. People are assholes, fuck em
Honestly that's no excuse. You *never* upgrade production like that without testing things first. You either need a proper dev/staging environment, or you need to leave things alone. :)
&gt; Every time I criticize the concurrent model in JS I get called out for not understanding concurrency, even though ironically I write a lot of threaded sockets in C++ in my spare time for fun. Probably because JS asynchronous (not concurrent) model is absolutely nothing like C++ threads. At least get your nomenclature right before you try to sound like a smartass.
Congrats, you won, and showcased what "but php lol" can do in the real world: solve problems and create value. Could JS do that? Absolutely, but apparently the other folks couldn't deliver so they had to tear other folks down rather than building themselves up. Success is the greatest revenge.
Have a look at [Atlantic.net](https://www.atlantic.net/)
It's unfortunate that idiomatic Perl is basically indistinguishable from line noise. There are some cool things about the language, but the un-cool parts are enough that if I had to touch another piece of Perl ever again I'd port it to any other language first (okay, who are we kidding, it'd get refactored to PHP).
Can you look at the cloud hosting solutions at [Liquidweb](https://liquidweb.evyy.net/c/1232138/278394/4464)? They have a ton of severs, options, and solutions.
Enterprise customers will likely also have enough money on hand to pay you to maintain EOL versions of *your* software too. Or, they can upgrade. Their choice.
The company that invented React uses PHP \(technically they're now using a derivative of PHP: Hack\). So obviously the neckbeards and dweebs at your hackathon don't really know what they're talking about, and are oblivious the history of their own tech stack.
fair enough... but c++ lets you do this: #define private public
Biggest difference between PHP &amp; JavaScript: $dollarSigns &amp;&amp; the keyword "var."
Most the people who make fun of PHP have no idea where PHP is at currently. They're stuck in their viewpoints of PHP 4 and shitty Wordpress plugins. Don't let it get you down. If the language you are most comfortable with is PHP then keep at it. Learn every god damn thing you can able the language, the engine, and frameworks and be the best fucking PHP developer there is.
You can be shitty (or not) no matter what stack you use. My take on this is if you’re using the flavor of the month without understanding the past, you’re bound to repeat the same old mistakes and probably invent new ones... These new stacks introduce so many new unknowns, they’re great for proof of concept because they let you get yourself up and running, but there’s more to just getting it to work once or for one scenario or one tcp connection... 
I have used PHP and ColdFusion for many years in my career that give me grief about using those languages. My response to those was that I have made a really good living using them so what is the problem?
I hate mongodb in prod, but it's not a bad choice for a hackathon. You won't have to spend much time at all on the database. You figure out what classes you need inside of your app and just persist them. That works especially well with JavaScript.
That is great snark indeed 
Some people are hyped about the most trending stacks and just want to show off the stacks rather than to care about what truly make a good application. But smart people would know. So you don’t have to feel shitty. Cheers buddy!
Shitty month for Drupal. 
Usually. Sometimes nosql databases really are a good choice. It's a lot easier to run them at really large scales. Some of the hosted versions even Auto scale and auto shard without intervention by the programmer. I've worked on projects where that's really important. We already had a built-in audience and knew we'd have a ton of concurrent writes and needed to iterate really quickly to stay ahead of the competition. The other situation where nosql is a good choice is hackathons. They take almost no time to set up. That said, I do prefer working with SQL databases whenever possible.
Sorry this happened to you. Hackathons should be inclusive environments for fun and learning. Congrats on getting something up and running to show to people!
*Maybe* he was being genuinely impressed? :-/
This is exactly why they bullied you. Because you showed them up.
They probably just chose the stack because it was node and mongo. Any programmer worth their salt knows there's more than one way to do something efficiently. 
Good ol' Aunt Perl. The granny auntie you wish would die, but don't have a problem telling your family that you feel that way. Ahh yes, Aunty Perl.
By in my days, we used to make fun of people using JavaScript.