i've just decided to count that as one line as long as theres only one line in the closure. I understand the controversy, i thought allowing that made things more fun. maybe im retarded!
This is just a minor setback, really. PHP will inch along slowly with new improvements, and there will definitely be security releases that continue. It's not going anywhere -- perhaps not for an entire century, even. That's my opinion.
thanks =)
If you wanted the code to evaluate that the characters were divisible by three, you should have specified in your rules. &gt; Print a comma separated list of all the letters (a-z) that have an ascii value divisible by 3. Nothing in there says "by evaluating whether each character from a-z is divisible by three". And anyway, evaluating each character from a-z, would just be inefficient code. There are always more than one way to solve a problem, especially if the problem is open ended as you provided. tl:dr; If you wanted people to evaluate each character as divisible by three, you should have said so in your rules.
&gt; Of course it should, I don't want to rewrite all my applications when a new version of the language comes out. Why would you? Turns out, there are plenty of channels for determining if a release is appropriate for your stack. This isn't limited to the php interpreter. So no, of course it shouldn't.
nothing in the rules say you can look up the ascii for each letter and just echo them. so you would have accepted: echo 'c,f,i,l,o,r,u,x';
nothing in the rules say you can look up the ascii for each letter and just echo them. so you would have accepted: echo 'c,f,i,l,o,r,u,x';
I would not have written the rules so poorly and open ended as you have. But, yes, as your rules are written, this is perfectly valid.
yeah it takes some common sense to realize its a programming challenge.
Post 2012 sky-net will include PHP and become self aware, it will be used to track down, collect, and dispose of the human survivors.
Good news :) That has been implemented in SVN trunk (PHP 5.4), see the [function array dereferencing RFC](https://wiki.php.net/rfc/functionarraydereferencing)
who cares? 2012 is the end of the world isn't it?
I vote for the SplArray with methods like: foldl, foldr, map, filter, splitAt, all, any, zip, zipWith... I assume you know where I'm going at :) Edit: And short hand notation for lambdas.
What?
I like a lot of the suggestions already mentioned in those links: ___ ~~**Chaining / dereferencing:**~~ ~~echo something_that_returns_array()[4];~~ ~~*This is VERY handy considering you as of now you currently have to assign a temp var to use it in this way*~~ Seems this is already going to be added in a [later PHP build](https://wiki.php.net/rfc/functionarraydereferencing) :) ___ **Creating faster arrays/objects would be nice:** Arrays: $dataA = array(1, 2, 3, 4, 'taco' =&gt; 'squirrel'); $dataA = [1, 2, 3, 4, 'taco' =&gt; 'squirrel']; Objects: $dataB = (object)array(1, 2, 3, 4, 'taco' =&gt; 'squirrel'); $dataB = (object)[1, 2, 3, 4, 'taco' =&gt; 'squirrel']; ___ **Casting to a specific object/class:** $obj = (object TacoSquirrel)['id' =&gt; 15]; ___ **An Application variable scope:** //if the application hasn't already started, we will start it now. //if it has already started, we will simply just make the data available. application_start('app_name', onAppStartFunc); function onAppStartFunc($appName){ $_APP["users"] = something_that_returns_user_array(); } print_r( $_APP["users"] ); //prints array *A new type of session scope that is shared by the entire application, and not just a single user. It would allow complex data structures that are commonly shared between a group or multiple people to be generated only once and stored like sessions. I had done some Coldfusion programming in the past and this was a nice feature, probably the only feature PHP didn't kick it's ass in...*
PHP doesn't need to go anywhere. It's fine as it is. Maybe add more stuff to the std lib.
Then what alternative do you suggest that still maintains a single database connection for the life of the request? Or do you think *every* function that has to interface with the DB should make it's own connection?
Yet, you neglect to provide a better alternative for the issue he seeks to resolve.
Sure, but they're far better than the disorganized and unmaintainable mess that the `global` keyword gives you.
I think the big argument for singletons over global variables is that they don't fill up the global namespace and they allow for lazy allocation and initialization.. in a lot of languages, global variables will always consume resources. I agree about not coding complexity for the sake of complexity though. :)
this is incorrect; PHP 6 development has halted.
&gt; It's not going anywhere -- perhaps not for an entire century, even. Please no...
I'd like a way to add functions to existing objects, eg: $a_mysqli_result_object = $Connection-&gt;query("SELECT * FROM table"); return $a_mysqli_result_object-&gt;SomeFunctionIveAddedToMysqliResultObject(); Another thing I'd like is C# style getters/setters
Check the [TODO on the PHP wiki](https://wiki.php.net/todo).
I would hope that making available 64-bit binaries with threading support for Windows is in PHP's (and Apache's) future.
http://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms Edit: I'm a bit befuddled. OP asked for efficient ways of sorting, and I linked to a list of comparison showing different sorting algorithms together with best, worst, and average scenarios. Yet I get downvoted. Am I missing something here?
Just give me a standard naming convention for the base functions...
I guess specifying the second parameter for rsort may make it a bit faster as it doesn't have to figure out every time. Here is the flag you would want to use if it is all numeric rsort($arr, SORT_NUMERIC); Alternatively you could write your own algorithm but make sure its worth the time.
There has been [talk of an SplArray](http://markmail.org/message/2qork7y23ccqs7ns), although I'm unsure what features it may include but the idea looks simpler and more like [this class](https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Collections/Collection.php). 
I'd guess given that example it's probably your best bet, although I suspect the question you are asking isn't the problem you are trying to solve... There are more efficient sorting algorithms out there, however as a general rule the efficiency improvements come with more items in the array. If you are really only sorting 3 items, then most algorithms will probably be quite similar. Further, php's built in sort uses the quicksort algorithm which is quite good, and any other algorithm you might want to use would have to be written in PHP or as a PHP extension. The former would be slower than the native quicksort implementation in C and the latter would obviously be more work. Just for fun I tested sorting 3 variables with the built in sort (quicksort) vs a bubblesort written in PHP, and the native quicksort was about twice as fast. Hmmm, let me revise as my PHP seems to have warmed up. These seem pretty consistent for me to run now: First: 0.0014510154724121 Second: 0.0040581226348877 Third: 0.0015199184417725 Fourth: 0.0012209415435791 First = rsort Second = Bubblesort in PHP Third = rsort with SORT_NUMERIC Fourth = ghetto if/else statements It seems the fastest method is to not use any sort... Note that my #4 implementation is not complete, but I suspect would still be faster with a complete implementation. [https://gist.github.com/963099](https://gist.github.com/963099)
I'll start with a bit of backstory regarding PHP 5.3, in relation to PHP 6.0. Prior to the release of PHP 5.3, PHP 6 was seen as a soon-to-be-released major revision, which was supposed to break a lot of code in favour of pushing several important features to the standard PHP stack. Among those features were namespacing, improved garbage collection, [massively improved security](http://www.hardened-php.net/suhosin/), closures, unicode support, proper 64-bit support, late static binding, and PHAR packaging. These features were all bundled together in one massive "feature dump", that was supposed to come together in a way that broke a lot of existing code, but functioned very well in the scope of a new major version. Instead, and in my opinion somewhat unfortunately, it was discovered that many of these features could be implemented in the 5.x major version without too much kludging. Not all of them, though, so we'd be losing out on very important functionality. The reason that this functionality was "backported" to 5.3, instead of in a new major version, was that PHP 6 really was going to break a lot of code. Many people wanted namespacing, improved garbage collection, etc, but didn't want to deal with the fallout of the other big changes. This is, as I say, unfortunate, because unicode support and others are integral to a modern programming language. The result of this is that the features that were left back are unlikely to be available for wide use for much longer than should be. Many web hosting companies will not want to update to a version of PHP that breaks an assload of code, and comes with only features that a minority of users will want to make use of. An example of the sort of functionality that we're missing out on is 64-bit integers. Currently, 64-bit integers are impossible in PHP without using "BigNum" functionality scrapped together from unbundled extensions. They're not something that everyone will use, or even a majority of people will use, but when you do need to use them, you're stuck either doing the aformentioned kludging with APMath extensions, or simply not getting the work done. Similarly with Unicode. There are ways to deal with Unicode in PHP, but it's much more work than is necessary. It would be vastly superior to have native Unicode support. **Looking forward** (skip here if you only want to know the future), [PHP 5.4 will be potentially implementing](https://wiki.php.net/todo/php54) things such as scalar type hinting, but also doing a bunch of major back-end cleanup. So, in 5.4, you might not see much in the way of "new, cool functionality", but what you'll get is a more stable, faster PHP engine. Also, we're finally doing away with fucking Magic Quotes. Yes! As for PHP 6, I think I covered all of what was left back, but to sum it up in terms of what we're going to get when it is finally released: Native Unicode support, 64-bit integers, improved foreach syntax (foreach($foo as $bar =&gt; list($x, y)) {}), improved OO, and I think we're switching from bison to [lemon](http://www.hwaci.com/sw/lemon/lemon.html) for parser generation. **tl;dr: Quite a lot is coming, but we'll only see the big stuff if we suck it up and take a hit in terms of rewriting existing code.** *Addendum:* I've been informed that there is no longer, in realistic terms, a "PHP 6". There is only "future PHP", which is really the trunk of the PHP SVN repo (5.3.99-dev). While there will of course technically be a 5.4, and even a 6.0, there is no roadmap to what will be in those versions. This is both a good and a bad thing. The good thing is that we'll get support of the mentioned PHP 6 things as soon as they're feasible in the engine, and the bad thing is that we don't know when or if that will happen.
if you're only ever going to compare three (or any fixed amount of) numbers, don't use a general algorith. simply use a http://en.wikipedia.org/wiki/Sorting_network
You are correct sir. Did it with 1,000 iterations. rsort($array) = 0.001579 seconds rsort($array, SORT_NUMERIC) = 0.000818 seconds About twice as fast. And my php bubblesort was at 0.0037 seconds 
**Proper lexical scoping reusing the var keyword:** var $hello = 'Hi'; var $world = 'World' function test() { var $hello = 'Hello'; echo $hello.' '.$world; for (var $i = 0; $i &lt; 5; $i++) { echo $i; } } test(); // Prints "Hello World01234" **Static type (hint) declarations** var FooClass $foo; $foo = new BarClass(); // Error if BarClass not subclass of FooClass var integer $number; $number = '5'; // $number contains integer value 5. $number = 'Bad'; // Error $number = 5.5; // Error class test { public integer $blah; } **Usable scalar type hints on functions** function test(integer $test) { echo $test; } test('5'); // ok test(5.5); // Error test('Blah'); // Error **Arbitrary precision arithmetic** **Basic operator overloading** I propose using an implementation using magic methods similar to how it's done in Python. 
The PHP6 way of implementing unicode is doomed to failure: they're updating every single library that touches PHP and strings to do unicode and that's a painful, slow, and buggy process. It doesn't lend itself to any sort of progressive development; it's all or nothing. Instead, I'd propose a new object-oriented non-mutable unicode string type (like C#, Java, etc). This string type would have methods for all the operations anyone would want to do with strings and those methods would be all unicode aware. The old functions would stick around and be deprecated over time. In the end, we'd have both unicode strings and a better string API. 
rsort($arr, SORT_NUMERIC); rsort is basically sort() which is an implementation of [quicksort](http://en.wikipedia.org/wiki/Quicksort)
I'm still waiting for JS and PHP to marry and have offspring.
I don't have any problems with any kind of semantics. * some == any * every == all * findAll == filter * etc But I do want my foldl (reduce) and foldr (reduceRight), zips, init, head, tail, last, etc.
I'd like to see short syntax for arrays get a second vote. Its proposal currently resides in the declined list.
Can you please elaborate on this? As far as I recall to have read, PHP6, in the sense of what it previously was meant to be, has halted. Not scrapped, I feel quite sure that we'll see a PHP6 (or perhaps they'll skip directly to 7 to completely leave all the misconceptions about PHP6 behind - who knows :)) The day where a bunch of devs from the php.internals list wrote about the "cancellation" of PHP6 a bunch of commits was moved to the PHP5.4 branch instead. At that time, I recall a quite elaborate post which dove into the difficulties they were experiencing implementing native unicode support without a huge performance impact. I also believe, that some of the important developers focusing on implementing the unicode support has moved on which left the native unicode support crippled and unable to plan for. So, instead of delaying the other planned features for PHP6 unnecessarily, they were moved into PHP5.4 which now seems to be what they're focusing on. Though still with native unicode support on the roadmap but no clear picture of how and when. My point is, blatantly stating that PHP6 development has halted is a bit rough. It's more like they revised their release strategy according to their situation. This is absolutely in favor of us, as developers using PHP and for the foreseeable future for the development of PHP. I feel that the development is going steady forward and it's still very much an active project although how the next major revision of the language is to be handled and what we can expect is a bit unclear :)
Dependency injection.
Nice one - thanks :)
I subscribe to the php.internals list but it's one of many mailing lists I subscribe to. It can be quite hard to keep track on it. I was merely stating that a public roadmap (which might change often) would be good idea just for having a certain place where everyone who wishes to know what's going on, can have a look :) The LLVM support was new to me. Thank you for the hint.
This one needs to be at the top :)
He points the OP to a link that provides a better alternative &gt;Break the static dependency using manual or Guice dependency injection. 
* Traits * Short syntax for array/object $arr = [1, 2, 3, 'blah' =&gt; 4]; $obj = {'key': 'value'}; * Array access shorthand echo getArray()[5]; * scalar hint type function (int $var) { ... } * Named parameters 
like Python did
this needs to be downvoted to hell
My wish is: "Break backwards compatibility already, so we can have a modern language". But I guess, my wish won't come true... :(
On some level, every developer wishes for this. It'd be great to have all of these handy-dandy additions to the language. However, they come at a cost, which is in code rewrites. Consider this: Facebook makes heavy use of a modified version of PHP. They also have a gigantic userbase that would benefit from their application having better unicode support (if they haven't already patched it in). In order to make use of the functionality that would come with a "break-it-all" major revision of PHP, Facebook would have to rewrite their custom engine. For them this would be a massive undertaking. Their other option is to have their fork drift away from the normal PHP engine, which is the more likely and present case. The problem with this, though, is that as their fork becomes more independent, they contribute less to the standard PHP project. Pragmatically, we can't go around breaking old code on a whim, no matter how much we want new toys.
Actually, it has indeed halted. That is, until someone decides to work on unicode support, or, PHP 6 is decoupled from unicode support (i.e., currently 6=unicode, which is why we have 5.4 now).
I'm in the process of converting to PDO but it's not exactly the easiest thing to use or learn. I wish it were more like cfquery which is very easy.
I'll happily elaborate =). I've been lurking internals for several years, and this is my understanding of what's going on.. but I'll happily stand corrected. PHP 6, as in: the PHP version that was refactored to be fully unicode enabled is currently shelved. It has moved to a branch, but I think you'll find that the most recent commits there are from a while ago. Currently the trunk is set to version 5.3.99, but it will probably become 5.4. It's totally likely that there will be a PHP version 6 one day, but I feel it will be in a different form, and not picked up from what was originally intended to be PHP 6. I do think halted would be the appropriate word here, but development of PHP itself definitely not of course. There are just no current plans for a version 6.
Sorry, but I don't buy it. We could have a 5.x branch for many years to maintain backwards compatibility and *still* move forward with a 6.x branch. And I don't care for *additions*. Just make the language *consistent* and truly oo. "Just clean up the house." I'm not asking for more.
I have a class that starts up the database object then I have functions for generic queries. The table name is set in the constructor. Function calls look like: SELECT: function select_join($fields, $conditions, $sort); SELECT JOIN: function select_join($table, $joinField1, $joinField2, $fields, $conditions, $sort); And so on. Then I extend off of that object when I make new objects to access my database. It really should use PDO statements but I'm still learning it. It's not the easiest thing to figure out. Really I have all of my generic, heavily used SQL methods in a class that can be easily extended and does things like hold the last query executed and last result. Why is this bad? I should be using Zend is not a correct response.
I'm building query strings using inputs from a function then passing those to MySQL after I've validated data. This is a generic class for commonly used MySQL functions and allows me do things like history in the class. I'm not making shit from "scratch", I'm making a common used query class. Jesus. It will be wrapped PDO soon enough once I figure out why it takes twice as long to do EVERYTHING in PDO.
I was going to propose the short syntax for arrays as well. It's quite annoying having array() everywhere when your functions accept an array of options.
Log it, return false or an empty array so the script doesn't fail on error. If you're using PDO you can throw exceptions and work with those. If you're sending the user to a page from your controller classes you're doing it very wrong.
I moved the RFC to "under discussion" and have a good feeling that it'll be approved this time around. Also, fwiw, I [reversed](http://markmail.org/message/jpevzyk7ltpbakql) my vote. :)
We *could*, but we'll never get a 6.x branch with what we want unless someone does the work. PHP is a community-driven open-source project. There are two ways that work gets done on PHP: 1. A company has a vested interest in seeing the work does, and contributes man-power or funding to drive the process. 2. Someone with the knowledge, expertise and community clout to effect the change does the work on their own free time.
This is the PDO class I wrote last night, based on the pro-singleton comments: http://pastebin.com/Ewd7Au6y
Hahahha. Yeeeeesssssss. Actually, if a server-side Javascript platform was just as powerful as PHP, just as "fast" (of sorts), had some jQuery-like features like chaining and selectors, ran under Apache, had an easy C or C++ extension library so you could extend it even with marginal C or C++ skills, and was supported on most cPanel web hosting platforms -- then I probably would be thinking about leaving PHP. I mean, think about using Javascript on the server as well as the client browser. That would be cool. BTW, people, please don't be sending me your server-side Javascript links. Unless the server does all that I say (above), it isn't worth looking at yet.
Forgive me but couldn't you just use [MySQLi_Result::fetch_object](http://se2.php.net/manual/en/mysqli-result.fetch-object.php)?
No forgiveness necessary - I was having trouble thinking of an example on the spot so went with that one. What I mean is being able to add functionality to any object that is already built in to the language, such as what is possible in Javascript, I just happened to be working with a mysqli_result at the time I read this post
I know how this works, but it's a shame that the php community doesn't manage to move forward. Don't get me wrong: I love php, it's been paying my bills for more than 10 years now, and I like it for what I can do with it, but I also hate it for what it *allows* me (or other developers who write code I'd have to debug) to do with it. The movement away from php is getting stronger every year, and I *do* understand the reasons. But it's a pity, because the core is fast and tested on many platforms, it would only need a few cosmetic changes to make it fit for the future...
Me too.
Oh, I see. That would indeed be useful, but I think it would have to be used in moderation.
A rule of thumb for the development of any software is to never restrict what the software *can* do, unless a **competent user** is likely to unwittingly subject themselves to instability or insecurity as a result of being able to do something. Doing exactly what you would propose is how we ended up with Magic Quotes. It was an attempt to automatically secure poor code, but ended up creating another level of insecurity in that incompetent programmers relied too heavily on the "magic" of that system.
I wish I could do if ($a == (1 || 2)) {...} Also, wish I could overload a child method's parameters to be different from it's parent's: class A { public function meth($name, $text){} } class B extends A { public function meth($name, $text, $blah){} } edit: meant to use `||` and not just `|`
Cool. 
This is a nice base but you may still want to extend this and set up some functions for commonly used queries. Code looks really clean. I want to do the same thing once I wrap my head around PDO. Still in MySQL world right now and it's so much escaping and verifying.
What is the Unicode support (theoretically) going to look like?
The only things you're really going to run into are things like file paths, encryption routines, php module's that are os specific (like the win32 api module for php). For paths, always use forward slashes. /www/site/public/common/etc. They will still work on windows, altho you may have issues determining which drive / is. Forward slashes also avoid escaping issues c:\new folder is going to be interpreted with a \n (new line) in the middle of the string. Just avoid backslashes like the plague. To my best knowledge, Windows and Linux vary differently in the encryption methods that come with the OS and certain services like MySQL for example can't perform the same routines under a Windows environment that you can in Linux. PHP modules are the other thing, but the generic/basic modules like GD2 and what-not are already available on everything anyways. All-in-all, developing on Windows shouldn't be any more difficult for ya. I used to go back and forth from a Windows Laptop to an Ubuntu Desktop and I had no complaints.
 class Number { ... I think I'll just stop there.
So basically pass your database object in instead of extend off? I thought extending an object then creating it gave me a unique object. If that's the case doesn't passing another object kinda go against OO design? I can see this being needed in stuff like PHP since you can't extend multiple objects. Still, why would you pass in a database connector object to all of your database classes when you can just extend and get all of the benefits of scope?
Never do that. Eventually you'll need GROUP BY, and subqueries, and more complicated joins (LEFT JOIN, inequality joins, joining to a subquery), and your entire scheme will just fall apart. Or you'll dig yourself in deeper and try to add parameters and functions to deal with all those. Just write SQL, it's what it was made for.
| no regular expressions Why?
That's what the database objects are for. How I extend things: SQL Object | Base Queries | | Table Obj Table Obj If I need to add special queries I do it in the table object otherwise I call my generic functions. Really all this does is give me multiple database objects and prevent me from having to write stuff like selects over and over.
With just 3 items, you're best off with a couple nested if statements.
Funny you say this. I was just thinking about how OO PHP sometimes feels like someone 'glued' a really crappy version of Java to the side of a good functional language. 
I have heard people say this before, but would you consider it a bad security practice even if the command being executed has no external input?
Nope it's May 21st, 2011.
A PHP version of the JDOM API. It's clean and predictable, and easier to use than DOM. The heuristification in SimpleXML is painful to debug because you can never tell when it's doing you a favor. 
They did it with Python.
Here is how ive done it since php 5 in my personal toy framework. I have two classes, one db_link and one db_handler (there are actually different db_handlers for every db type). The db_handler contains a static variable that contains all acitve links. When you create a db_handler you can choose to use the pool or make a unique one. You can use the db_link by itself but its just a structured wrapper around php functions. So you end up with something like a singleton, because usually all instances of db_handler share the same db_link, but it can still break the form if you need to. If that makes sense to you and your interested i can always drop you the files involved with some explination of what is going on. Most people at the places ive worked that have used it have liked it. Also runs off a config to make setting db credentials easier.
Number one for me would be named function arguments. function do_something($a, $b) { } ... do_something(b: 5, a: 13); It would make dealing with those long argument lists, where many of them are optional, so much easier.
Extending a class isn't really a good way of fulfilling a dependency on it. It sounds like a bit of an abuse of 'extends' to me. Using multiple inheritance to fulfil dependencies would be a maintenance nightmare. Everything would be a subclass of everything else and you'd essentially be back in procedural programming except with every function call prefixed by '$this-&gt;'. This is the aspect of OO design that the link I posted goes on about: &gt; The root problem with global state is that it is globally accessible. In an ideal world, an object should be able to interact only with other objects which were directly passed into it (through a constructor, or method call). &gt; In other words, if I instantiate two objects A and B, and I never pass a reference from A to B, then neither A nor B can get hold of the other or modify the other’s state. This is a very desirable property of code. If I don’t tell you about something, then it is not yours to interact with! Notice how this not the case with global variables or with Singletons. It's about separation of concerns. Managing creation of and access to a database connection is one task. Generating SQL is another. The former doesn't belong anywhere in the same class hierarchy as the latter. I hope I'm not coming across as a sanctimonious arsehole by the way. 
The syntax for the first case is valid, it just doesn't do what you want it to (since this is using bitwise operators). I'm not sure how'd you even implement the syntax for the logic you're looking for as both the bitwise and comparison "OR" cases are out of the question. You could always use in_array() for your use case: if (in_array($a, array(1,2))) { ... }
it's not as nice, but this does work as you want it to, with minimal extra code (and some overhead): list($var, $var2) = returner(); function returner() { return array("value 1", "value2"); } 
There is, actually. It's just weird and... pretty stupid. Array functions are named differently than, say, string functions, but they all follow a pattern amongst themselves. That is, array functions have one naming convention, and string functions have a different naming convention. I really wish they'd use *one* naming convention, though. They could even just alias the old versions and deprecate them later.
PHP has a stdlib? Alternative comment: builtins aren't a stdlib, and neither is PEAR.
I read that and thought, "Zing!" Not sure why.
As much as I'd like some nicer shorthand, my experience with the sort of code people actually write with that type of thing makes me worry a bit. People seem to be very, very keen to cram as much stuff on one line as possible, and it can lead to some unreadable code. I sometimes see up to six nested ternary operations on one line. Then one day there's an error on that line. A method call on a non-object. The only way to figure out which operation caused it is to refactor the whole thing into the 20 lines of code it should have been all along, which takes a while. And now just because I've added a null pointer check that should have been there from the start I've got my fingerprints on somebody's horrible code because I've done such a hefty refactor. And next time it breaks I'm guilty until proven innocent. All because one of my colleagues is in love with writing this sort of 'concise' code. tl;dr ranting about work but actually do like the idea
Sounds like you need to move to dedicated hosting or a VPS of some kind, or at least out of your comfort zone. Apache isn't de facto anymore. Shared hosting is never going to get anything besides PHP and, in a couple rare cases, Ruby on Rails. Of course, your RoR apps all run on a different port... Also, I'm not sure what you'd need selectors for in a server-side language...
Na I'm actually interested in what you have to say about this. I agree that SQL should never be in the database connector object. I extend off of the connector and write my SQL in a new class. I also like extend because of protected. I learned how to code for the web using Java so everything being extended off of everything isn't weird for me. In Java you extend off of everything and end the end usually end up with something very similar to a struct only it can run methods as well.
If you're using PHP5, this is super simple. The foreach loop does not have a counter, but in PHP5, a variable can be created, assigned as an integer, and increased automagically: $tacos = array('carne asada', 'chicken', 'beef'); foreach($tacos as $taco){ $i++; echo $i; } And now I'm hungry.
Rasmus [mentioned](http://markmail.org/message/fksv4kwtowgdxhxl) the idea recently although it wasn't about unicode. I'm unicode illiterate so can't add helpful feedback here, but am hopeful intelligent people will take on the cause.
Yup, that's what I'm using right now, and it looks clean enough, but was just nitpicking for what I would love to be able to use. And yes, I meant to use `||` instead of `|`
How would that work?
Umm.... class B extends A { public function meth($name, $text, $blah) { return parent::meth($name, $text); } } works fine for me. What am I missing?
The hack I use is the params array: function do_something(array $params) { if (!isset($params['a']) || !isset($params['b'])) { throw new InvalidArgumentException("Missing required arguments"); } }
For the record I don't want any of these in PHP: * "Proper lexical scoping" is handled by both "global" and "use" * PHP is more duck typing for me, so I want to step away from static hinting * I can use functions for extremely complex math instead of sacrificing overall computation time * Operator overloading would make an already tedious chore of debugging dynamically-linked code worse
Whenever you need to sort an array in PHP, simply open up the documentation page titled [Sorting Arrays](http://us3.php.net/manual/en/array.sorting.php) and it'll help you choose which PHP sorting function to use.
I believe there is a __cast() magic method
Mmm to be honest the reason I've gone on about this so much is that I've recently ran into some nasty problems resulting from some design mistakes. Singletons were one of those mistakes. Or at least I now consider them a mistake. Another was a really overpowered god class that's become about three classes now that its individual functions have been separated. If the way you're working isn't causing you the same problems then there's probably not much point worrying anyway. A big part of the argument against singletons is from people who like unit-testing because static dependencies fuck unit tests up. If you're not doing unit tests then it's not such a big deal. I definitely think that the only reason to extend your database connection class should be to define a slightly different or more feature-rich database connection class, but I'm not exactly an authority on the subject so really I don't know why I've been pressing the issue come to think of it!
Not to send the wrong message to everyone proposing great ideas, but is this really the best way to improve PHP as a language and platform? It's well established that the language and API are huge, sprawling, and there are some "gotchas" and "throwbacks" I personally would like to see a more conservative growth of the language. P.S - I love PHP!
I agree that changes required to make current PHP strings and arrays act like objects and is probably a lot of effort. However, we already have ArrayObject which is an array-like PHP object and I'm suggesting something much like that for strings. The only engine changes would be in handling unicode string constants in the PHP source code.
Symbols (aka non-mutable strings)
This is a fairly dramatic viewpoint, but I would love to see a totally separate branch, scrapping all existing backwards compatible nonsense, that implements the best of these new features we want, standardizes function naming/parameter order, and moves the language forward. I hate seeing the "not backwards compatible" excuses for nicer, new features. At some point, we need to move forward. That said, here's my list of features I'd love to see (in no certain order): 1. Traits/Mixins OR multiple inheritance (I know, everyone loves to hate on multiple inheritance) 2. Shorthand array syntax (not as keen on the object syntax people propose) 3. function array dereferencing 4. C# style getters/setters 5. finally support 6. Polymorphism 7. Operator overloading 8. scalar types as objects, arrays as objects ($string-&gt;toUpperCase(), etc) 
True; I was wondering if the OP was wanting the prototype functionality so that they are able to change the behaviour of the object at runtime.
Oops. Thanks. :)
You want Ruby without having to learn new syntax too! ;P
&gt; but I would love to see a totally separate branch, scrapping all existing backwards compatible nonsense I used to be that way, until I got stuck with CentOS and Redhat general supported rpms and realized it won't even matter what route PHP devs take now. PHP 5.1 still seems to be the in thing, and PHP5.3 seems to be ultra high-tech in the distro world still. Mysqlnd, mcrypt, etc? Nope. Help me I am in hell. Maybe it would benefit PHP to fork at this point, as long as PHP5.3 is quickly depreciated to give OS maintainers a little incentive to pick up the pace.
PHP doesn't have proper lexical scoping and neither "global" or "use" cover it all. `global $somevar` is just a shortcut for `$somevar = &amp;$GLOBALS['somevar']` and *use* is only relevant for closures. This is one of the simplest features to implement in the PHP engine: it requires only changes to the PHP compiler and reuses an existing keyword. It would solve problems and wouldn't introduce any new ones. As for the math, I agree, but that's where type-hinting would be a great benefit. You can hint that you want float, int, or decimal and get the performance and behavior that you expect. For decimal math, having it embedded directly into the language would lead to much greater performance. It's difficult to imagine how many PHP programs in existence calculate money incorrectly because they're using floats. The ability to type hint in general would reduce a lot of type related bugs. It would also allow developers to catch some classes of bugs a lot sooner. And, of course, it would be completely optional so it wouldn't interfere with duck typing. 
Likely there's just one or two people in this entire world who'd agree with me, but I'd suggest fixing COM and DOTNET classes.
Good counterpoints, sir. You've convinced me that `var` could solve problems without introducing new ones. I'm still on the fence with type hinting though. And I'm a Java guy!
I'm following it for months now. It's bike-shedding mostly. The real problem is, PHP has matured. To really improve it it will have to rejuvenate itself, and very likely cause a lot of drama. There are a lot of possible ways to improve it, but most of them are just not relevant. Unicode support? Why? Just use UTF-8, read from DB, use the multibyte extension, use GNU gettext, and write romanized code. (Developers can live without unicode variable names after all. And string literals aren't a problem with mb.) Scalar type hinting. It'd be nice. IDEs could use it, but the DocBlock support is ubiquitous already. Although, it'll be there eventually, but it doesn't really matter. You should do proper input sanitation/filtering anyway, and there's filter_* for that. Frameworks will give you OO interface for it. And you should test your APIs anyway. (So, either with strict or weak type checking you have to implement error handling anyway. And inside a framework with protected and private functions you don't need run-time checks.) Traits. Traits are long overdue. Frameworks will use them. It'll be great. But nothing fundamental will change. Most people still won't have a clue about how to write good code, what's the point of OOP, how MVC translates to web apps, and so on. What else is on that list, let's see. Better error messages. Well. It's also long overdue, but competent developers should be able to "google it". And there will be a lot of devs who will still be clueless when they will encounter one of the new, improved errors. The same goes for other language (syntax) goodies. Real function chaining is already a decade late. Array notation should be enhanced to support [1, 2, 3, "this"]. (Same as Python and JavaScript.) Short tags should be configurable per include. Named function parameters would be a fucking godsend. But, it won't make PHP the [new cool language](http://www.reddit.com/r/scala), that can do crazy-good OOP, functional programming, message passing ([actors](http://www.slideshare.net/jboner/akka-talk-at-geneva-jug-scala-api)) and comes with the kitchen sink at the same time. Performance improvements are always welcome, and a few php hacker indeed does incredible job, however, without real [application servers](https://github.com/indeyets/appserver-in-php) ~200 milliseconds are spent booting web frameworks and loading classes from APC. I might sound a *bit* cynical, but it's more or less because the general state of IT, the World and *maybe* my personal life :]
And there will be cake.
Pretty much exactly. The the only part of PHP that I really love is the ease of deployment and generally low memory usage.
I know what you mean! This is major reason I'm running Ubuntu on my servers.
The faster you get off cPanel, the faster you'll find what you're looking for. Node.js does [C++ native extensions](https://www.cloudkick.com/blog/2010/aug/23/writing-nodejs-native-extensions/), you can use it to access [mySQL](http://www.giantflyingsaucer.com/blog/?p=2596), so all-in-all, you could just replace PHP with it. And with WebWorkers (multi-threaded JavaScript) you can use event-driven request-handling and go [web scale](http://www.youtube.com/watch?v=5GpOfwbFRcs&amp;playnext=1&amp;list=PL1FB3417C560AC0B7). Oh, and it also does [jQuery](http://stackoverflow.com/questions/1801160/can-i-use-jquery-with-node-js). I don't know how or why, but it *does*.
`(bool) $obj;`
It's not harder. They're already maintaining a security updates only branch. They could do the same while going wild with PHP6/7. But being older probably means more conservative core developers, so that could be a factor :)
Fails strict. edit: Here's an example error text: ErrorException [ Strict ]: Declaration of Model_Book::edit() should be compatible with that of Model_Article::edit()
Someone should start a "This week of tl;dr in PHP" blog (and post it every week to r/PHP, of course), like the ["A week of Symfony"](http://symfony.com/blog/category/a-week-of-symfony).
The IDE is fairly old and many people complain in their forums that the company is lacking in updates and communications with their customers.
I know he asked for editor in general, but Sublime isn't an IDE.
 class test { public $func; } $obj = new test; $obj-&gt;func = function($param1, $param2) {echo $param1 . $param2;}; $obj-&gt;func('asdf', 'weryt'); Agreed. You'd expect it to work as is, but it doesn't.
If you're performance focussed, doing it in nested ternaries gives you the most compile-time dodging, the fewest branches, the highest branch prediction and the smallest cache footprint. Invoking library sorts is a bad idea; those things cost more to invoke, before they even start working, than you should be spending in finishing. $arr = ($a &gt; $b)? ( ($b &gt; $c)? (array($a,$b,$c) : ( ($a&gt;$c)? (array($a,$c,$b) ) : (array($c,$a,$b)) ) ) : ( ($a &gt; $c)? (array($b,$a,$c)) : ( ($b&gt;$c) ? (array($b,$c,$a) : array($c,$b,$a) ) ); Off the top of my keyboard, untested.
For this, the correct answer is "none."
Or five nested ternaries. Why would you go to all that extra work?
alot of things, depends what your application does, what it outputs, how complex it is.
Because we're a bunch of nerds and like to talk shop ;) &gt;Another was a really overpowered god class that's become about three classes now that its individual functions have been separated. I'm glad I'm not the only one who's done this.
We both have a point.. round #2 doesnt allow ternary. Nested ternary would be stretching things, imo
firstly, i didnt post the code, and secondly a stack of connection objects can improve the use of your connections. easier to use throughout your object code. again, this all depends on the complexities of your code. and fast, write a timer object and see how fast, i use a connection stack in some projects and were talking .02 seconds to process an entire page reading ALOT of data from the database. negligable. also makes it easier to monitor your connections, in your connection object you can monitor reconnections, latency, and lots of other stuff. you can say its taking to long and open a second connection, and so on. not to mention, you can have objects that a children of the connection object, and layout your code to connect to different dbases, oracle, mysql, postgres, mssql and so on.
Back in the old [`mysql_connect()`](http://us2.php.net/manual/en/function.mysql-connect.php) days, it "opens or reuses a connection to a MySQL server". But mysqli doesn't mention anything of the sort. I think only someone who's made or at least dug through the source can answer if there's any special built-in handling of a repeat connection.
The fwrite is failing because fopen is returning false. The example given is checking that a filename doesn't exist but it doesn't test if it's also writeable. Most likely what is happening is since you are just specifying a filename with out a full path it is trying to create it in a folder that is not writeable by the user (that is the user that your webserver is running under). You should check w/ your sysadmins for the best way to get something setup that's writeable by the webserver in your enviornment. It might even be they have file writting disabled for php scripts, so it's worth checking. 
Being a Java guy would make someone on the fence about type declarations! It might look like a step in the wrong direction to be adding types to PHP. But I think a balance is in order: Java could certainly use some more dynamic and type-inference features and PHP could use a few more type safety features. 
&gt; I would love to see a totally separate branch, scrapping all existing backwards compatible nonsense I don't think that's really necessary. None of the features you describe would need it. If we moved to scalar types as objects then that API could have a standardized naming/parameter order. The language could continue to evolve and those old crusty parts just deprecated. Would you really care about the parameter order of in_array() of you're using $array-&gt;contains() ? There's a few things I'd like to see changed that more fundamental to backwards compatibility, such as fixing the problems with string and integer comparisons. In that case, I think we just need a version marker in the file to indicate you want certain behaviors. For example, you could put a version number after the PHP open tag like this: &lt;?php 5.2; This would indicate you want old 5.2 behavior for this file. Perhaps tied to namespaces instead; so you could block off old libraries. Multiple versions of PHP is a bad idea -- we really don't want to go through the whole PHP4/PHP5 mess again. 
Yes, but this works just fine: error_reporting(E_ALL | E_STRICT); class A { public function meth($name, $text){} } class B extends A { public function meth($name, $text, $blah = null){} } 
I understand youreoriginal complaint about explicitness, but in this case the extra syntax is actually hindering potential uses. I hope that list() is also under consideration for this. I suspect this sort of idiom would get a lot more use without the additional syntax: [$x, $y] = somefunction(); 
May 21st? That's this month! Better drink my own piss...
As jtreminio said, gives a 'strict' error when number of parameters of child method don't match parent's prototype. And as wvenable said, if the extra parameter default is `null`, it doesn't count. Basically, not what you and I expect. Where this problem behavior started is unknown, but I'd call this a bug... even if it seems to try to passively enforce some sort of useful coding standard...
Probably won't affect your example but I set my error level to -1
If you do that, you're just accepting whatever new error constants come along in the future without knowing what they are! But no, it wouldn't affect the example. 
I wish I could double upvote the array access shorthand suggestion
* the ability to make truly asynchronous calls * threads
There's certainly a lesson in how many replies here involve the relative efficiencies of solutions which are way overcooked for the problem.
Lol great post, you stole all of my thunder
I'm on a very different side here. Take for example the oci8 api: You have 2 ways of making your function calls (e.g. ociexecute and oci_execute), it should be restricted (over the whole of php) to one consistent way. Otherwise you'll end up, in many cases where a lot of people work on the same code, with a clusterfuck of styles in the same codebase.
You can currently do threading with [pcntl_fork](http://php.net/manual/en/function.pcntl-fork.php).
can't up boat enough Short array syntax for Zend Framework would be sweet
those syntax short cuts are from python, so they are pretty well tested as an idea. They do make things much easier to read.
This is a neat request that I have wondered about in the past: if ($a == (1 || 2)) {...} but I generally use in_array: if( in_array(array(1,2), $a) ) if we had short array syntax ( $a = [1,2] ) then you could do: if( in_array([1,2], $a) ) and if in_array was mapped to a new function called 'in' everything starts to look pretty nice: if ( in($a, [1,2]) ) or something like that
 // empty class }
This set of issues caught up with the implementation, and is why the previous iteration of PHP6 was scrapped a while back. The current trunk is an evolution of 5.3, and not the complete string overhaul that was promised earlier. A better, native way of handling strings in an UTF-context would still be appreciated, though.
Can't upvote this enough. I would love some application scope. I've heard of some workaround with memcache but never really looked into it.
In addition to the array access dereferencing which has been implemented, I'd really like to finally see the slice operator (as in python). It would simplify quite a few function calls: $a = array(1, 2, 3, 4); $a[2:3] =&gt; array(3) $a[1:3] =&gt; array(2,3) $a[-2:] =&gt; array(3,4) $a[:3] =&gt; array(1,2,3) 
erm... tjdick is suggesting exec not eval.
sorry but this is patently untrue. using exec is not bad practice. and unless you backup your claim with relevant links this is inherently misleading. Whilst it can be used to do bad things if you do not escape your cmd arguments it is not bad. same could be said with using user input unescaped. That said the same exec commands won't always work between different types of servers for numerous reasons and not just non-nix systems. However you are correct when you talk about installing the ImageMagick module. It is easy when using default methods, but there are some methods fron the binary that are not available through the module.
no. he is wrong. exec is not bad security practice. people who don't know how to properly escape param arguments is bad security.
You're doing God's work, son.
"array access shorthand" is called "Array dereferencing", and is planned to be released with either 5.4 or 6. I hope it gets in there quick because it's pretty awesome. http://schlueters.de/blog/archives/138-Features-in-PHP-trunk-Array-dereferencing.html
better COM support, more work on making it a cross platform stand alone language (ex. [PHP-GTK](http://gtk.php.net/)
I also prefer -1, because I _want_ to accept "new error constants that come along in the future without knowing what they are" ;) Oh, and it's shorter.
This works, with even shorter syntax: function in() { $args = func_get_args(); if (count($args) &lt; 2) { throw new InvalidArgumentException('Invalid number of arguments to in(); expected at least 2'); } $needle = array_shift($args); return in_array($needle, $args); } Usage: if (in($a, 1,2,3,4,5)) { ... } 
Agreed.
i don't even know where to start sheesh, i can barely understand the directions
I tried to make them as clear as possible. what do you have issues with? Ill try to help.
Well that was certainly a bit longer than the last one. array_slice(array_filter(array_combine(range(100,999),array_map(function($n){return $n*$n;},range(100,999))),function($n){return $n==strrev($n);}),-1,1,true); Not made any effort at code golf here; just going for fastest answer :P
nice, yours is shorter than mine. can you delete it though and msg me it? This way people cant see you answer? 163 bytes
I don't understand the last direction. If `square` must always be the largest palindrome that can be created from squaring a 3 digit number, won't it always be 698896?
Imagine you've got code that works but hasn't been worked on for years; Perhaps you don't even work for that company anymore. Zend adds a new error constant, something like E_STRICT, that now triggers a bunch of errors for commonly used coding patterns. So now your perfectly working code breaks for no other reason except for that constant! Unfortunately, the common use of (-1) for the error constants really prevents Zend from using the set_error_reporting() more effectively. They can't add any new constants unless they want them activated by default in a huge number of projects. That is unfortunate. &gt; Oh, and it's shorter. Aren't you the same guy who originally voted to keep the longer `array()` syntax because it's more explicit? :) 
Don't forget the good ol' array_merge (stolen from jQuery's way of doing things): function something($params) { $params = array_merge($params, array( 'a' =&gt; 'default_for_a', 'b' =&gt; 'default_for_b', )); } That way you get the option of leaving out parameters if you want, and you don't have to check that all required params have been specifies.
yes, thats correct, and the key will be its square root
Ugh... so it was solved and we can't see the solution? WTF
what was the answer?
There is a quickest prize and a shortest prize. You still have a day to come up with a shorter solution.
http://www.reddit.com/r/PHP/comments/h86pa/one_liner_challenge_3/c1tbzz3
well... that's what a sorting network ends up as, when you implement it. my point was just that, if you're to sort a fixed amount of numbers, provably no algorithm is faster than a sorting network.
Serve an application with nothing but `index.php` in your web directory. Given a web root of `/var/www/html`, you can place all your class files in `/var/www/includes` and let `index.php` act as a front controller. `X-Sendfile`/`X-Accel-Redirect` can be used to serve up files through this sparse web root.
Some time savers were added in PHP 5.3, so knowledge of them may not have spread yet. **Compact ternary** $foo = $bar ? $bar : 'red'; // PHP 5.2 $foo = $bar ?: 'red'; // PHP 5.3 **__DIR__ magic constant** $dirname = dirname( __FILE__ ); // PHP 5.2 $dirname = __DIR__; // PHP 5.3
Sweet, good tip thanks.
How do you want it formatted? Like function a(){return array( blah blah);} ?
 $f=get_defined_functions();foreach($f[user]as$v){$$v=$v;} Now we don't need to have a $var containing a string with each function name for it to be accessible within Heredoc. function add ($int) { return $int + 1; } $string = &lt;&lt;&lt; heredoc plain text and now a function: {$add(1)} heredoc; 
no echo join(',', array_filter(range('a', 'z'), function($a) {return ord($a)%3==0;})); was the winner for the last one. accept this one you dont need an echo.
&gt; well... that's what a sorting network ends up as, when you implement it. No, it isn't. The sorting network still performs the sort, is the problem. That's wasted work: it's faster and easier, when there are only six possible outcomes, to have the outcomes prefabricated at compile time and filled in with values, than to allocate incrementally. Benchmark it. When you see how much faster one is than the other, you'll realize that "ends up as" isn't actually what's going on here at all. Machines don't care if something is equivalent in your understanding; taking different steps to achieve the same goal still earns radically different performance measurements. &gt; my point was just that, if you're to sort a fixed amount of numbers, provably no algorithm is faster than a sorting network. That point is not correct. I already gave a code example that's significantly faster both in theory and in hardware practice. Too much CS leaves people unable to interpret the information in front of their faces. Faith is a real problem for people coming out of current CS schools. They look at something better and say "yeah but my point is that this other thing should be the fastest." Except it clearly isn't. Incidentally, what you're actually trying to talk about are comparator networks, not sorting networks. They are meaningfully different in a way that, if you understood them, you wouldn't have gotten backwards here. But be sure to downvote someone for suggesting something that you claim is equivalent to what you suggested.
&gt;Toggle Comments Why change source when you can just add a flag. Here is a copy of my [Console Object Class](http://pastebin.com/BcYTPdwe) intergrates with Firebug, only shows when you need it. Help yourself. **Example**: $sql = "SELECT * FROM foo"; Console::debug($sql, 'mysql query'); $query = mysqli_query($sql); By default debug does not show up in firebug, if &amp;debug=1 is appended to the url all of my debug statements show up in firebug as [DEBUG] mysql query: SELECT * FROM foo Wanna see something neat, send it an Exception and watch the auto-formatting goodness. **EDIT: added example**
Ok..I'm not really sure what you mean but I'll PM you my two answers (not sure if one of them is allowed) ..
This is also a good security practice. If you don't want to faff about with the x-sendfile stuff, however, you can always place your static files in the `html` directory as well
Toggle comments are meant to quickly change a line of code to another line of code. It also works in a ton of other languages. And it also works where Firebug doesn't exists, such as the command line or when running as a cron task. Perhaps you should just mention the ability to integrate Firebug debugging instead of questioning the method I suggested, there is obviously reason for both depending on the circumstances...
I've seen many people do: $mtime = explode(' ', microtime()); $actual_mtime = $mtime[0] + $mtime[1]; But in PHP 5, you can actually do: $actual_mtime = microtime(true); 
123 bytes biiiiiiiiiiitches
Fair enough.
I've seen some ridiculously huge functions for sorting a multi-dimensional array by a particular key's value. Take the following array for example... $employees = array( array( 'Name' =&gt; 'Scruffy', 'Role' =&gt; 'Janitor' 'Salary' =&gt; '16000' ), array( 'Name' =&gt; 'Professor', 'Role' =&gt; 'CEO' 'Salary' =&gt; '120000' ), array( 'Name' =&gt; 'Bender', 'Role' =&gt; 'Cook' 'Salary' =&gt; '1000' ), array( 'Name' =&gt; 'Fry', 'Role' =&gt; 'Courier' 'Salary' =&gt; '33000' ) ) Here's a nice, simple way to sort it (maintaining indices, even) by 'Salary': $tmp = Array(); foreach($employees as &amp;$ma) $tmp[] = &amp;$ma-&gt;Salary; array_multisort($tmp, $employees); **edit:** PHP v5+ only. (Sorry &lt; 5 folks!)
And it works? I think I can only get down to 133 bytes.
Oh. So there's only one element in the array then?
&gt; Using Functions in Heredoc sections via Variable Functions I totally didn't know you could do that. Does that work in double-quoted strings too?
Wow, I never thought the comments here would be worse than the ones on php.net... these are all just horrible. 
Did you [get inspiration from anywhere](http://firephp.org/)? &gt; Console.debug($sql, 'mysql query'); What syntax is that? You have it between 2 PHP snippets, but it's JS object syntax... 
Still, it's worth mentioning, Firebug is BY FAR the best front-side debugger I've EVER found for JS. I really need to look into using it more for PHP..
I always use the magic __autoload() function paired with an array of class names to file locations for projects with large numbers of classes. It not only loads classes only as they are demanded for the request, but cleans up all of the requires that might be lying around in your code otherwise. The result is clean code and far less memory/cpu usage Now if only this was valid for HipHop
Oh, ?: is awesome. I've always hated expanding that.
Is that all you have to contribute? How about posting a code snippet instead of pointless whining...
your right my bad (I have been writing Java all day). Should be: Console::debug($sql, 'mysql query'); 
This would be pretty damn handy for certain things although I could see the global scope getting pretty huge if there were a lot of user defined functions included.. still, easier than my method!
The way I do toggle comments (nice name for it btw) which I was told by a redditor a while back: /**/ this_is_code(); /**/ and then: /** this_is_commented_code(); /**/ I find it much more intuitive.
I think I just got it down to 100 bytes. Try to beat that.
Using anonymous functions is even better, no need to first iterate through the array : usort($employees, function($a, $b) { if($a['salary'] == $b['salary']) { return 0; } return ($a['salary'] &lt; $b['salary'])? -1 : 1; });
Did you know you can print text to stdout without the quotes?: &gt; eval('echo a;');
Yeah, I figured it out by accident one day and made a video a while later. I haven't seen anyone else use this style of commenting. If you use my method, you save a single character.. //* this_is_code(); /**/ and then: /* this_is_commented_code(); /**/ ..optimized! lulz :P
Join some open source projects.
HipHop makes me all starry-eye'd. I'm not a huge fan of FB but that bit of code is great.
Yep
You can also use [FirePHP](http://www.firephp.org/) for some pretty awesome integration with Firebug. Edit: I see you're just calling the FirePHP stuff from there. Hah
Just an FYI that the reverse throws an error: $foo = $bar ?: 'red'; // works $foo = $bar ? 'red' :; // does not work, plus it looks weird
Compact Ternary? Sweet Jesus I just had an orgasm.
Yes, my contribution is a warning to all who read this thread. Have long have you been coding? One, two years? I've noticed over the past several years that those who put value into "shortcuts", "secrets", or otherwise clever uses of a language are typically very infantile in their programming knowledge, and seem to derive some sort of weird pleasure from producing code that anyone other than them would never understand. Take it or leave it, but I'd quickly reprimand, then fire if caught using them a 2nd time, anyone on my team using these "shortcuts" or "secrets". The only ones that I consider _ok_ are the ternary uses, since those are a standard usage of the language. And here's proof: [guy has no clue what he's writing or why it works the way that it does, but for fucks' sake it's a "shortcut"](http://www.reddit.com/r/PHP/comments/h88bl/php_shortcuts_secrets_you_cant_live_without/c1tcnkq)! 
Did you know that you don't know how PHP works? &gt; echo a; That's the same thing, but without `eval()`. And both produce the following: &gt; Notice: Use of undefined constant a - assumed 'a' in &lt;file&gt; Thanks and good day. EDIT: If that was actually a joke post, I &lt;3 you :D
Can anyone (hiii?) confirm that? I'm down to 111 bytes - just sent via PM.
I am a neat freak: /**/ this_is_code(); /**/ Looks nicer: /*/ this_is_commented_code(); /**/
Evaluation of assignment returns the assigned value, e.g. `echo ($b = "a");` echoes `a`. This is why code like this works: while (($buffer = fgets($handle, 4096)) !== false) { echo $buffer; } Saves you from having to do this: $buffer = fgets($handle, 4096); while ( $buffer !== false) { echo $buffer; $buffer = fgets($handle, 4096); }
I think both yours and my methods are neater looking than da404lewzer's. But I still think 'mine' is more obvious as to what it does.
You'd be a shitty boss then because ustanik was clearly making a joke.
It doesn't define all the functions in the global scope, it simple creates several $vars containing strings with each function that is defined. So if I define the following function: function add ($int_one, $int_two) { return $int_one + $int_two; } The snippet above would create a variable titled 'add' ($add) containing the string 'add'. Heredoc requires this to work - Last time I used it :-)
Tentative answer sent.
i mean it's probably just me since other people are able to figure it out. i just can't imagine writing something without if or ternary or what not. 
That is correct. That is really the hardest part of this I think.
The way I understand it is that you should be able to paste this piece of code into var_export and get the following output: array ( 836 =&gt; 698896, )
I'm curious to see how everyone has done this. I currently can't conceive of a way to do it in either 111 or 123 bytes. I guess hiii is busy right now. Maybe he is getting a lot of responses on this or is actually working.
I think that is the point of these challenges: to make you think outside of your normal thought process. By placing these restrictions, you are required to dig deeper into the language and see alternate solutions to the problem.
I don't know. I've seen a lot of stupid shit on /r/PHP. It's not usually well received when you point it out either.
lol really? his joke is on par with the "serious" replies here...
Whoa. Please for the love of future maintenance coders, don't run this in global scope! =)
Yeah, definitely makes sense to have static media served directly, preferably by a different domain name and using a web server that doesn't have the overhead of PHP. Keeping **uploaded files** out of the web dir can greatly improve your security, though, depending on your server config.
[I'll just leave this here](http://bios.weddingbee.com/pics/41540/dont-feed-the-troll.jpg)
 array_merge($a, $b); is the same thing as $b + $a; or at least I think so, I haven't done too many tests. In a lot of "MVC" frameworks, when you want to send data to the "view", in the tutorials it often looks like this: $this-&gt;render('some_view', array('posts' =&gt; $posts, 'user' =&gt; $user)); This can be shortened with one of my favorite functions: $this-&gt;render('some_view', compact('posts', 'user')); This one I don't use very often, but it can still be useful: $object = (object) array('name' =&gt; 'Bob'); echo $object-&gt;name; // outputs "Bob"
[`spl_autoload_register()`](http://php.net/manual/en/function.spl-autoload-register.php) is safer, as it can be called multiple times, e.g. if you have multiple frameworks in play. (There can be only one `__autoload()` defined.)
It's far more constructive to reply to specific comments and point out why things are bad practices, than make blanket statements about all the replies to this question. As it is, you've said you would fire someone for using `microtime(true)` rather than `$mtime = explode(' ', microtime()); $actual_mtime = $mtime[0] + $mtime[1];`, which isn't helping you or anybody else.
I have a feeling I missed a rule, but I'm around 100 bytes.
Yeah, I would like to see them as well. And I guess it would be nice to see other people's (confirmed) byte count as well, like in [codegolf](http://www.codegolf.com/). For what it's worth, I've just resubmitted my attempt - I misread what it was supposed to do. 
Does that mean you are sub 100?
Yes. I don't know if I can optimize it any further though, so I'll keep it a secret for now :-)
Not exactly, say you have array(1,2) + array(3,4) you get array(1,2) but say you have array('1'=&gt;1,'2'=&gt;2) + array('3'=&gt;3,'4'=&gt;4) you get array ( '1' =&gt; 1, '2' =&gt; '2', '3' =&gt; '3', '4'=&gt;'4') whereas with array merge the keys will get lost in this case, and you'll have array ( '0' =&gt; 1, '1' =&gt; '2', '2' =&gt; '3', '3'=&gt;'4') 
Nice tip on the compact function! BTW - array_merge is slightly different than the + operator in that array_merge will re-key the resulting array if it uses numerical keys (+ doesn't do this). Ie: $err = array( -1 =&gt; "error -1", 0 =&gt; "error 0", ); $more_err = array( 99 = "error 99", ); print_r( array_merge($err, $more_err) ); ===================== Array ( [0] =&gt; error -1 [1] =&gt; error 0 [2] =&gt; error 99 ) 
A general solution is more helpful. It's unfortunate he picked 3 numbers, which derailed his own inquiry.
My argument is that it's for simple debugging, it probably won't stay in the code for very long anyways :)
I'm sure that I'll have a "d'oh!" moment if someone beats it though. But then he/she is just a better programmer I guess :-) In any case, I'll post my solution after the competition ends. Hope you guys do the same. Or maybe Hiii can post all submitted (correct) solutions after the end of the contest? And since I don't live in the US: The end of the competition is 1200 EST, so 1600 GMT (London time) or 1700 in mainland Europe. 
&gt; But be sure to downvote someone I didn't :) &gt; what you're actually trying to talk about are comparator networks, not sorting networks. I stand corrected.
I've been steadily programming in PHP for real clients for 10+ years, which is long enough for me to have learned some shortcuts in the language. I haven't posted much to Reddit and only started this post to better get to know the Reddit PHP community. So because of that, you figure I have no experience? Yeah right, sounds to me like you have a slight [cognitive bias](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) because even $n++ is technically a shortcut. All I asked for was people's favorite features if you will, so either swim or get the fuck from out the pool...
When a vast majority are bad practices, I'll not waste my time pointing out each one. And your example is neither a shortcut nor a secret (it's a different use of a function), so IMO is doesn't fit the criteria of the spirit of this thread and thus is outside my criticisms. Also, I have no want to visit this thread every 5m to chime in as the _bad practices guy_.
Guess I should learn to read... Thanks.
Alright, you challenged me again. I just PMed one with 94 bytes. Do I still have further to go? Also, are you counting the closing semicolon?
what's an troll?
I like that it can register to throw exceptions..
[*twitch*](http://i.imgur.com/j2Cp1.gif)
Hey thanks for the kind words! -Jason (author of "Easy PHP Websites with the Zend Framework")
I disagree. Example: PHP's manual refers to "short open tags" as a shortcut, and everyone knows it's a feature of PHP. &gt;**Note:** &gt; &gt;This directive also affects the shorthand &lt;?=, which is identical to &lt;? echo. Use of this *shortcut* requires short_open_tag to be on. [Link: [php.ini directives - short_open_tag](http://www.php.net/manual/en/ini.core.php#ini.short-open-tag)] Whether or not to use it, or whether it comes on by default is another discussion. Force yourself out. Everyone else is having fun. What are you in third grade?
Got down to 92 (with semicolon) and PM'ed.
A challenger arrives.
Are people answering in the format of : function x() {some stuff; return $a;} or just with the code snippet that crunches the numbers and defines $a: some stuff; $a = whatever; ???
I'm at 92 (with semicolon) as well. I thought I was at 92 **without** semicolon, so I thought I had to come up with something new... but I misinterpreted my editor. So we're even I guess... unless.... ;-)
well... 86 here.
Odd that you'll admit your error about their name, but not your error about their being the right tool for the job.
yes, ive already learned about a new function because of it =)
exactly
just the code
Seriously? I guess I am going to have to completely rethink my approach. I am pretty certain I have exhausted my current one.
Type casting always seemed like a dark art, http://php.net/manual/en/language.types.type-juggling.php#language.types.typecasting Ilike using echo __LINE__; for debugging to see where I am.
Appreciate the code snippet! Could just be my server, but this seems to actually be slower (510 - 1100 microseconds) than my iterative sorter (120 - 230 microseconds) Any thoughts?
what php version and error_reporting?
apparantly my code was incorrect ;)
Not as much as you'd think, one easy and handy usage of type casting is to quickly sanitize numeric data for insertion into a database.. $UserID = (int)$_GET["id"]; //This will be, worst-case, zero. $query = "SELECT * FROM users WHERE uID = $UserID LIMIT 1"; 
Firefox Quick Search shortcut for PHP manual with keyword "php". Best. Thing. Ever.
Something I like to do in my own projects is using the class names as paths to themselves - a practice I keep seeing more and more. So given a class named **Http_Request**, the __autoload function will try to load it in **Http/Request.php**. Simple, but very clean and useful. 
reduce(lambda x, y:x if x[0] &gt; y[0] else y,filter(lambda x: True if reduce(lambda x, y: x and y, map(lambda b: b[0] == b[1],zip(list(str(x[1])),list(str(x[1])[::-1])))) else False, zip(range(0,999),map(lambda x:x**2,range(0,999))))) ^python functional 
Yeah, and I think my code didn't come through correctly at first - something with the markdown I guess? It ate my '*' and made hiii's PHP crash. I'm sure my code works though, and it's at 91 bytes like stackus.
I still use sprintf for sanitisation. $sql = 'SELECT * FROM users WHERE uID = %d LIMIT 1'; $query = sprintf($sql,$_GET["id"]);
ah yes it ate my '*' aswell, the reason why it probably failed. Posted it on codepad however codepad runs 5.2.x so no closures. 
Ah does this mean you're really at 86 bytes?? Damn. I can do a foreach and dump the answer and die in **85 bytes** though - but I guess that doesn't count ;-)
that's because that isn't it 'in reverse'. `?:` is a new operator in 5.3
That works too, just showing a simple use of type casting.
Completely agreed. I'd rather see the current built-in library be slowly re-organized into something a bit more sane and manageable.
My favorite version of "Swapping two variables without a temp var:" $x^=$y^=$x^=$y;
When outputting data in HTML context i find the [alternate syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) much more intuitive: &lt;div id="container"&gt; &lt;? foreach($guests as $person): ?&gt; &lt;span class="name"&gt;&lt;?=$person-&gt;name?&gt;&gt;&lt;/span&gt; &lt;span class="phone"&gt;&lt;?=$person-&gt;phone?&gt;&lt;/span&gt; &lt;? endforeach ?&gt; &lt;/div&gt; This has the added benefit of making the HTML more editable for someone not well versed in PHP. *edit: syntax error*
I usually spring for what is more readable, which I think a closure is. If you're truly concerned with performance, you'll probably be putting Varnish or a similar proxy server in front of your application server anyway. At the end of the day, it usually doesn't make a big difference.
Use this one: [codepad.viper-7.com](http://codepad.viper-7.com/); it has 5.3. Impressive work getting it down to 91 guys! My attempt based on my initial code only condenses to 122.
&gt; No ifs/fors/**foreach**s/dos/whiles/ternary operators. :P
 &gt; $UserID = (int)$_GET["id"]; //This will be, worst-case, zero. it could be negative ;-)
Yeah, I know. I'm down to 90 now (if I don't count the semicolon), no clue yet where the other two bytes will come from... (nowhere? :P)
I did not know that one yet (and will find out how it actually works sometime :-p) but it seems to only work well if both variables are integers?
Shameless plug http://stackoverflow.com/questions/61401/hidden-features-of-php/1024914#1024914
Looks good! I'll give it a whirl if you're looking for testers.
Actually I just started pre-k. I'm loving all the kool-aid!! But, your argument is pretty obtuse. I'm pretty sure that "everyone knows" is some sort of fallacy, but I'm not that pedantic about it. Perhaps I should have clarified, my point is that good code shouldn't need or use hacks. Syntactic sugar -- e.g. your short-tag example -- I typically don't mind, and may even advocate, but some of the things in this thread are simply hacks, which are rarely a good idea. Of course, at times [hacks](http://en.wikipedia.org/wiki/Fast_inverse_square_root) can be very [beneficial if not required](http://en.wikipedia.org/wiki/Duff's_device), but it's purely circumstantial. All it boils down to, is if there's any chance at all that I (or anyone else, for that matter) is going to need to either review or maintain your code, please don't try to be too [clever](http://stackoverflow.com/questions/1103299/help-me-understand-this-brian-kernighan-quote). Pretty much everything else can be found on php.net already. I apologize though, I didn't mean to be so crass, but I [follow PHP](http://news.php.net/group.php?group=php.internals) pretty closely, and so [news](http://www.reddit.com/r/PHP/comments/g8097/what_blog_do_you_read/c1loduz) of these _[secret features and shortcuts](https://wiki.php.net/rfc)_ is typically anything but. And stay off my lawn!
That's pretty nice. `&lt;? } ?&gt;` is pretty lacking in context unless you have a comment, and quite ugly. I'll be using that syntax for HTML from now on.
The problem at hand isn't about which algorithm is the most efficient. The comparison of algorithms and their efficiencies don't really help much since I am already fully aware (and I'm sure most of the posters here are also) of what's available and their respective efficiencies. As some have mentioned, the most efficient way of solving the original problem is to use ternary operators to force the selection of 1 of 6 possible outcome.
Sent you a mail message. Be warned. It's on a crappy free server at the moment, so you might get MySQL errors and/or get logged out every once and a while. The MySQL errors will most likely be "Query interrupted" because the host restarts MySQL every half hour or so (apparently, they say this maintains performance).
So, what's the problem then, if not a question of time complexity?
Being able to do 500,000 iterations with rsort in 1 second with this example leads me to believe that anything other than writing it in the clearest most easily maintained manner is nothing but a bunch of dick-waving unless you are Google or Facebook. I even expanded the example to sorting 7 numbers, and still got 350,000 sorts a second. I can imagine that giant nest of ternaries with 7 items, and I shudder. EDIT: My testing was done without SORT_NUMERIC, so it would be even faster with that in mind.
Two years ago, lead developers from nearly a dozen popular PHP projects got together and whipped up a spec for this: [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal). There are several implementations, but one of the more-active forks is [Symfony2's ClassLoader component](https://github.com/symfony/ClassLoader). Note: this is quite independent from the framework itself, as are most of its "components".
Crazy shit haha :D
Bitwise is voodoo in my book!
While I like the inherent simplicity that offers, the level of input the user has into the behavior of the code makes me slightly uncomfortable. There's also the likely need for a file_exists call, and man do I hate the wall time associated with that function. This is assuming ultimate asshole users though, and the simplicity your method offers is likely excellent for certain applications.
He's a troll, he's a sad sad troll. This post was one of the best posts /r/php has had in a while, don't let k3n bother you.
Only one closure is allowed?
I just remembered. PHP 5.4 is supposed to include APC. Currently APC is in PEAR.
~~You are allowed more than one closure but each closure can only have one statement inside of them.~~ edit: Actually I guess you are only allowed one closure. All my solutions have thus far included only a single closure so I hadn't given it too much though.
You're telling the server to serve "/test.php" which (I haven't tested) but I'm almost positive is going to serve you domain.com/test.php. Try removing the slash before test.php, and let me know if that works for ya - 
I really like this idea. Are there open source PHP projects? I wasn't aware. I'll look, though.
I have some code sitting on Github that does the same thing too, although mine adds the already defined stuff as well, so you can use `strlen` etc. https://github.com/ZaneA/Misc-Hacks/blob/master/phphacks/interpcall.php A couple of other interesting hacks in there too if anyone is interested :)
I prefer the `&lt;? } ?&gt;` because IDE's tend to match the opening brace then.
Hey hiii, I just wanted to make sure that you were taking the subsequent PMs into consideration for the shortest version. You currently have me listed with my first submission value of 133, but I had other entries of 100, 94, and one that may break the rules at 88.
I really have to advocate against your last suggestion. It destroys your ability to find usages in an IDE 
Damn it. I can rework a small portion of my current solution and it only saves me a character (bringing it down to 90). I am wracking my brain trying to see a different path that may reward me with a sub 90 character solution.
Gotta be careful with this though... Lots of web hosts disable that.
Make use of code snippets. Most modern editors / ides allow you to setup shortcuts for snippets. E.g. vd (tab) will expand to var_debug....etc. Other than that use a framework. Nothing will save you as much time as using a framework. As far as which to choose there has been a lot of discussion as to which php frameworks you should consider and why. I personally love kohana. Once you make your decision stick to your framework until you outgrow it or find a need to change. Nothing wastes more time than the endless banter of x is better than y. 95% of that is personal preference.
That sounds very insecure to me. I hope your debug() function also detects whether you are on a development machine or a live webserver.
I always use the compact ternary where possible. It just shucks that our project was scoped to 5.1.6 :(
You should look for a mentor who is willing to offer an apprenticeship. Not only will you be receiving 1-on-1 training, but it's a great way to get involved in new projects. It's what I did and it was the best decision I've ever made.
I don't use an IDE, notepad2 is all I need. Which part exactly breaks usage, using variable functions, or using heredocs? Just want to explain to others and myself... (Sorry, on mobile)
That's horrible, unreadable.
&gt; apparently, they say this maintains performance Restarting mysql every half hour or so will negate the benefits of its caching features (if they are using it), so this doesn't make sense!
I can't really see the issue. If you were to change the scope in the loop from userscope to globalscope that would only result in a $var for each function ever defined reachable from global scope.
Don't do it for $10/hr, that's just ridiculous. $75/hr for the app you know they want is the absolute minimum I'd charge.
If I'm writing one off shell scripts that don't demand more than a page of code then vi is fine for me. Other wise I demand an IDE. Delving into that whole debat is off topic here though. Specificallly I was complaining about variabe functions and the maintainability issues they introduce. Say you want to refactor, what do you do? A blind string search for what your looking for, seed through the matches that are actually relevant and and manually stich in a signature change, hoping you arrowed through all the instances? (Or do you say fuck it and just declare globals?)
Array_multisort changed my life
but requiring more cpu and memory to execute; best not to create a function for the interpreter when one that fits the purpose already exists in the compiled libraries
 usort($employees, function($a, $b) { return $a['salary'] - $b['salary']; });
no unlimited closures are allowed, but only one statement per closure.
Lots is an exaggeration, dude. By far. I code night and day for several clients, on all kinds of hosting plans, so I know this first-hand from the trenches. Pretty much most hosting is cPanel/CentOS, Redhat-based, Fedora-based, or Ubuntu-based. All those hosting plans by default enable PHP short tags. It's only the freaks who don't.
Things like this stop your code being readable. Please be careful where you use these and comment your code. 
Submitted an 89 byte one; visualq got there first though, so if 89 ends up being the shortest then I'll nominate myself for second place :-)
Just file a bug report with your IDE
Technology behind technology , 
True, I had clients on about 20 different hosts last year and all of them had short tags enabled. Having said that, if you are writing downloadable application, you should probably avoid short tags just in case.
good job :) Doubt it can be made smaller if you follow the rules.. 
Quick question from a total noob, why would you use this vs. time()? Or, since this seems faster, why ever use time()?
time() returns an integer with seconds, microtime() returns (as the name suggests) a double with microseconds as well.
You don't need a closing PHP tag in an all PHP document. e.g. This is a complete PHP file, no need for ?&gt; &lt;?php echo "hi"; Why is this useful? If you're planning on sending headers at all, a space or newline etc at the end of a PHP file after a ?&gt; will cause output to the browser, breaking any headers you planned to send. 
oh, ok, sorry I misread the description. Thanks a lot! Quick follow up, why might someone need microseconds?
Wordpress uses them, lots of hosts support Wordpress.
Care to enlighten?
&gt; Once you make your decision stick to your framework until you outgrow it or find a need to change. Not quite true. I'd say stick to it for a while until you are truly comfortable with it then start looking into other options. No sense in being a one trick pony. Plus you may find you prefer it, I started with CakePHP, touched on Kohana and RoR and now I'm on Li3 (where applicable) and loving every second of it.
You just solved a bug for me. Thanks!
Maybe we should work together ;-) ...I think that would be cheating though :-P
So your tmp array is holding a reference to something in one of the inner arrays? I would never have thought of that.
nm - I figured it out and [blogged about it](http://voloreport.com/documenting-your-php-code-on-ubuntu-linux).
Taken from CodeIgniter (I think): if ((bool)@ini_get('short_open_tag') === false) eval("?&gt;".preg_replace("/;*\s*\?&gt;/", "; ?&gt;", str_replace("&lt;?=", "&lt;?php echo ", $code_with_short_tags)));
That's the answer they gave me when I inquired about the number of "Query interrupted" and "Connection lost" errors my site was receiving. Basically, they said that because there are 50000 sites accessing the same MySQL database, they have to restart it every now and again.
Just remove the slash from the php file like this: Options +FollowSymlinks RewriteEngine on RewriteRule ^test$ test.php [L] The way you currently have it, you're telling the server to look for the file domain.com/test.php instead of domain.com/workingfolder/test.php
Can I point out dennispedrie is referring to short tags (`&lt;?, &lt;?=` over `&lt;?php, &lt;?php echo`) - alternative syntax isn't an optional feature (and can be used as `&lt;?php foreach (array() =&gt; $value): ?&gt;`).
I've been using this method for performance lately. echo 'some var: ',$myvar; Rather then my previous habit of echo "some var: $myvar";
So far there's not too much to test, however a few comments on the design. * Top Navigation - Make whole button clickable (currently only text is) * Home - "Video Introduction" header is missing margin-top * Contact Us - Button does not function. * "Contact the developer" = "Contact the Developer" (Nobody wants to contact the developer; Just change it to We"; * "Homepage" = "Home" * Screenshots = change text links to thumbnails
&gt;Just wondering what are some of the ways you guys recommend setting up the ability to search a group of keywords together(20-200) against a massive data set(500,000). Thanks for any help :). There's not too much you can do if you're going for speed. Indexing the columns, removing joins, moving the query in a stored procedure may help. You could try creating a DB view. Short of that, if you're still experiencing performance issues WITH THE QUERY, I would look at using Solr. 
Hi, sorry, I should have made it more clear. The brochure site isn't the actual project. It's just a brochure website that attempts to give a description of the application. I can provide you with a login to the actual application if you want? Although your feedback on the brochure website is spot-on. I plan on re-doing parts of that site and tying up the loose ends on it once I'm finished college.
Try knowfree.net - They have many books, you can find on ZF also.
Total noob here, do you mind explaining to me why would that be insecure? I'm trying to learn more about php. 
To calculate the execution time of the page. At the very least you need tenths of second precision for that.
Agreed. it takes just a few moments for anyone to create a POST, GET, COOKIE request to a website--from the application's point of view, what does it matter? Any data coming from the user is not trustworthy. I use REQUEST exclusively because I could care less how user input is sent to the server.
The results of applying the SHA1 function in PHP will be different than the results returned by the MySQL SHA1 function. Is that your problem?
You can send me credentials--I only have 15mins to look at it.
PHP Version? Do you have benchmarks to back that up? I used to do that until I realized that in most uses cases it was slower due to the way PHP handles funcition calls and treats echo and print somewhat like regular functions.
Also, there is too much spacing above the site logo. The background image gradient does not look good. Install Firebug/Page Speed in Firefox and fix all the HTML/optimization issues (don't worry about minifying the code). All the textual content on your site is wrong. You are looking at things from your perspective as a developer; it should be written/presented from the point of view of the end user, which, I imagine would be a coordinator at some non-profit.
Glad to be of help :D
well ... anyone could add ?debug=1 to a URL and see the SQL being issued behind the scenes in this instance, or in other instances other debug information which is not meant to be public. You might say "oh, but you'd need to know to put debug=1 in the URL", but I wouldn't be surprised if automated tools such as skipfish actually include that exact check. Going back several years I've actually done exactly the same thing with the same variable name (although I DID have the "am I in a dev environment?" check in there), so I'm fairly sure other people would have done too. TL;DR security through obscurity is not secure, and debug messages should be kept private
 $result = \LINQ::From($employees)-&gt;OrderBy(function($i){ return $i['Salary']; });
I Use my own simple framework which fits best my needs. (Basic MVC, and the admin panel). For some code snippets, i've created a website http://online-php.com/ ( http://online-php.com/snippets/ ) You can also add snippets there (They pass manual moderation)
That's ridiculous 
This is just awful.
[Provigil](http://en.wikipedia.org/wiki/Provigil) works a charm, if you can get it. (You don't need sleep)
That didn't work.
Turns out I've been off by one character each time I submit. I was confusing column with characters in my IDE. Highlighting the string showed me I had a 89 character solution this morning. I've resubmitted one which is a duplicate of the one I submitted last night but I had thought it was 90 characters.
I consider exec bad practice in general. Unless you know EXACTLY what system your code will be running on and under what conditions ALWAYS its not a good idea. An who of us knows that? There is almost always a better way of doing something without dropping down the command line level. Exec as a whole should be avoided except on extremely rare occasions. With that said there will always be occasions where you have to. And as buggedcom mentioned above it should always be treated with caution and escaped.
http://github.com/languages/PHP
I agree with timdorr. 
I've seen a lot of deployment methods, each with its own set of problems. This is the most curious solution yet.
I have actually been waiting for something like this for quite a while. Great idea, great concept, can't wait till you release the sauce ;)
brb, gathering ftp creditentials...
What features makes this an IDE and not an editor? 
also good job, (did the same thing) Now lets wait for Hiii to validate and update the list
Very nice :)
Thank you. Keep in touch, Hope to release it in 2-3 weeks.
It's a "development environment", a place where you can work on your project. Maybe the question is "What is the difference between editor and IDE"... Maybe the editor is the editor itself, and the IDE is some kind of wrapper for it... I guess you'll find better answer.
Taken from CodeIgniter.
Oh! this is so cool, I met a famous php developer and author :D! Great book. I didn't even know how to use zf.sh before the book, not to mention unit testing didn't even sound like something real humans could do
I've wrote the application because sometimes I cannot access my FTP account directly from my PC (blocked ports). Gathering private data is really not the purpose of the site... [as i said](http://www.reddit.com/r/PHP/comments/h8v7o/crosspost_from_rwebdevonline_php_ide_ive_created/c1thww9) I will release the source soon, so more "skeptic" developers would use it too.
Firefox has this thing called quick searches - not sure it's the official denomination, but that's how I call it. Create a regular bookmark to whatever site you want, then edit it to reflect the following: * URL: http://ca3.php.net/manual-lookup.php?pattern=%s (or whatever mirror you want, even docs.php.net) * Keyword: php From there, whenever you type "php &lt;string&gt;" in your address bar, you'll be taken to the manual page for that entry. Works in Chrome, too!
&gt;Maybe the question is "What is the difference between editor and IDE" (from wikipedia) An IDE normally consists of: * a source code editor * a compiler and/or an interpreter * build automation tools * a debugger ---- What you have looks interesting, but it's an editor, not an IDE. 
I look forward to you releasing the source so I can give this a try. No way in hell am I (or any other sensible developer) going to enter my FTP credentials into a site I've never heard of. :)
I prefer the "no documentation" methodology of documentation.
Yeah, I guess you're right, but still, I'll keep it "ide" :) 
in '98, nobody knew what is "google" :)
netbeans.... Used to code in gedit, but netbeans makes debug so much faster, as you catch most of the bonehead moves before you even save the file.
Use a framework
what? I wouldn't trust Google with all my FTP login details either, for what it's worth.
It seems like what PHP really needs is for some short-circuit operators that would return the last value, as in JavaScript and some other languages: &gt; 1 || 5 1 &gt; 0 || 5 5 &gt; 1 &amp;&amp; 5 5 &gt; 0 &amp;&amp; 5 0 I really wish that `and` and `or` would act this way, since they really aren't used at all that I've ever seen; the only place I ever see `or` is for `or die;`, in which case changing it to return the last-value wouldn't affect the result. This would also solve the problems with the short-cut ternaries...
Well done, sir :-) I'm looking forward to seeing everyone's solutions. After the winners have been announced we should see if we can combine any techniques to come up with something shorter.
I added password protection and got a login prompt. So, the htaccess file is being read. Now, I removed it and I'm back to my original problem. RewriteRule ^menu$ menu.php Not working.
Tried adding that. Still not working.
Apparently you can do as many as you want. In fact my first solution had 2 of them. There is just no way you could get the shortest solution with 2 closures. You have 16 bytes of overhead for `function`, a space, two parentheses, a variable, two braces, and a semicolon.
Hahahaha. Yeah, I know, right?
mind = blown
Good indenting makes brace highlighting redundant.
Can't speak for most people but sitting at 90 characters (turns out it was 89 all along) and seeing people post they found 89 character solutions drove me mad. Poor hiii got multiple messages from me. At one point I thought I found a solution that was 85 characters long, only it didn't pass the var_export(...) test. I ended up not getting any work done last night so tonight will be a long night since I have to play catchup. I'm also eagerly waiting to see the final solutions. Want to see what tricks people used I hadn't thought of.
Try it with Google, too. And IMDB. And TPB. And Dictionary stuff. And Maps! And YouTube. And Wikipedia, Ubuntu Packages, Google Images, etc etc. It fucking rocks. Wrote an article about it a while ago: http://fusi0n.org/productivity/firefox-quick-searches-with-smart-keywords Images are broken (and I don't give a fuck), but the theory is there.
what.
I had to use Coldfusion for 2 years and after messing with it I would really like to see an Application Scope built in to PHP. I have emulated the behavior in PHP via serialization to files, but I believe it would be a billion times faster if actually compiled in and could be stored in memory. I honestly don't think it would be too hard to make this happen for reals. Like sessions, the application scope would have a name. The script would be responsible for ensuring the application is started just like sessions. PHP would be responsible for managing the application data and doing cleanup. The application scope basically just allows you to share data between everyone on a particular server. It is pretty much like sessions except you can generate common data once and have it available to everyone. Some of the issues that would come up is locking. Because the data is shared amongst everyone, any script could change the data in the middle of some other script reading the data causing a race condition. Data read/write locks would need to be implemented. This would have to be implemented to prevent race conditions which cause problems and ultimately data corruption.
I have this on one server: Options +FollowSymlinks RewriteEngine on RewriteBase /clayburn RewriteRule ^test$ test.php It works fine. The server I need it to work on, I copied as: Options +FollowSymlinks RewriteEngine on RewriteBase /store RewriteRule ^menu$ menu.php This one doesn't work. I get a 404. I can navigate directly to /store/menu.php and it works. So, what's going on? It seems like I'm doing it right, but something on the server is fucking with it. There is no root .htaccess for the domain. So, can't be interference there. We do have WordPress installed in /blog subfolder. It's hosted on GoDaddy whereas the other one (working server) is hosted on Rackspace.
No PHP version specified in rules. I'm running a custom version of PHP built from source where built-in function x() returns array(836 =&gt; 698896). Do I win?
Whenever troubleshooting mod_rewrite you want to set your RewriteLog and RewriteLogLevel to 3 and it should give you a good idea what's going on from looking at the logs. 
I wish I could figure out how to lose one more character like you guys, but I am stuck at 90 if I wish to pass the var_export test. And I was only able to get down to 86 without passing. So there seems to be a one character optimization that you all have figured out that I haven't. It's driving me a little crazy. Hopefully he will post them in 32 minutes and I can finally have my aha moment.
Hear hear. I'll just post mine in 30 mins anyway since I'm not at 89 and I can't think of a way to get there. 
Check into [phpDocumentor](http://www.phpdoc.org/). It's a way to auto-document via formatting your comments a specific way. I hear IDE's can parse it for inteli-sense stuff too. /** * example of basic @param usage * @param bool $baz * @return mixed */ function function1($baz) { if ($baz) { $a = 5; } else { $a = array(1,4); } return $a; } Here's a better example: [Sample #3 on manual.phpdoc.org](http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_sample2.pkg.html)
Thanks for giving us the answer. Too often people figure out a solution and then disappear... 
Are you guys including a final semi-colon in your counts?
I am. So I have 90 including the semicolon.
da404lewzer, have you every played around with memcache? Sounds like you can take what you're currently using for Application Scope and use Memcache as a top layer and then use disk as a backup if your memory gets flushed/lost. Edit: My wish list, * C# style of setters\getters. * $Class-&gt;method()[3]; (on it's way) * and type hinting for variable types.
Ok, so here are mine. My best - 90 bytes (or 91 if you count semicolon): array($y=end(array_filter(range(1,999),function($x){return$x*$x==strrev($x*$x);}))=&gt;$y*$y) and my most desperate "let's try from another angle" attempt (102 bytes): array($a=array_reduce(range(0,999),function($y,$x){return max($y,$x*($x*$x==strrev($x*$x)));})=&gt;$a*$a) And a 83-bytes rulebreaking one (incorrect &amp; not submitted): foreach(range(999,0)as$x){if(strrev($x*$x)==$x*$x){print_r(array($x=&gt;$x*$x));die;}} So yeah - great fun! Now I'll have to get some work done :-)
OK Since times up. Here is my 89 character solution. array($p=end(array_filter(range(1,999),function($v){return strrev($v*=$v)==$v;}))=&gt;$p*$p) It is exactly the same save for one minor optimization you didn't make and that was the guts of the closure.
Here is my 90 byte var_export compatible solution: array($a=end(array_filter(range(0,999),function($b){return $b==strrev($b*=$b);}))=&gt;$a*$a); And here is my 86 byte var_export incompatible solution: $a[$b=end(array_filter(range(0,999),function($c){return $c==strrev($c*=$c);}))]=$b*$b; After seeing akie's solutions, I see that I could have removed one byte from each one by removing the space after return. I learned something new there. Edit: Fixed some references on the second solution.
Personally I think it has a lot to do with my dev environment. When I started out I would code in notepad and upload files via ftp to the server to run - you can imagine how painstaking that process was. Over time I got into IDEs and local php servers. Currently I use two monitors, my IDE on one monitor and the other showing the output of the script I am building, as well as error log tailing and other auxiliary windows (winamp, php.net, etc). A lot of people advocate the use of frameworks, but I am not one of those people. Over time you'll find you won't need to be dumping/echoing variables all the time either since you'll have a lot more understanding about what is going on. hope this helps!
Ah, f* that ;-) How could I miss that?? Tss. Congrats though! I really don't think there's a shorter one than this. 
Combining our techniques, you can get to 88 (apparently I was at 89 and you guys aren't counting the semicolon): array($a=end(array_filter(range(0,999),function($b){return$b==strrev($b*=$b);}))=&gt;$a*$a)
Yeap, damn it 88. Is that the one you submitted to hiii? This does cause a strict error to pop up for me but it continues to work.
Named parameters, from python.
No, I submitted the second one from [here](http://www.reddit.com/r/PHP/comments/h86pa/one_liner_challenge_3/c1tisjw). It got down to 86 with the optimization that both stackus and I used in the closure.
Hmmm - I don't even understand how that comparison works? How can the $b before the '==' be squared as well? Because it's a reference or something?
I get the *Only variables should be passed by reference* error it seems no matter which version I try. I think it is due to using **end** on a non variable array.
Because we use `$b*=$b` which is evaluated first. This sets `$b` to this new value before the comparison takes place.
I appreciate the suggestion and will look more into memcache, but this thread is intended to be about theoretical improvements, not real-world solutions. I really really want this functionality built-in :) I too would like to see getters and setters. How would you propose it's syntax? class something{ private m_favColor = "blue"; public favColor = { get(){ return m_favColor; } set(value){ m_favColor = value; } }; } Type hinting would be really nice too..
The function needs to return the result before the comparison can be made so the arg list is evaluated before the comparison is evaluated.
Using max() instead of end() makes the error message go away and the solution remains the same.
Just negate the condition.
Ah, nice. And ofcourse I'm always more than happy to teach someone some new bad habits ;-)
If there's an active php users group in your area, join and attend meetings. A broader group (like one on all web technologies) is also a good opportunity to network.
He posted the solutions. It looks like alexbarrett was on the right track to the shortest solution of 88 bytes including the semicolon. array_slice(array_filter(range(0,999),function(&amp;$a){return$a==strrev($a*=$a);}),-1,1,1); I never even considered passing the value as a reference to the array_filter closure. It is brilliant. And so is using a negative value for the array_slice function.
Ok well that makes sense. I think for now I'm done with the number 836 though ;-)
Not sure, but something along the lines of this for PHP: $integer_from_0_to_5 = int { get { return $this?:0; } set($value) { if($value&gt;=0&amp;&amp;$value&lt;=5) $this = $value; } };
Congratulations on your solution. You could have come in at 88 bytes and won both prizes if you had reordered and removed the space like the other 89s. array_slice(array_filter(range(0,999),function(&amp;$a)return$a==strrev($a*=$a);}),-1,1,1); Your passing the value as a reference is brilliant. I tried so hard to kill 2 birds with that one stone, but you did it.
OMG yes that would be freaking awesome. //so easy to read and understand! getUserList(GroupID:50, Max:10); //and order wouldn't matter anymore getUserList(Max:10, GroupID:50); This would make passing arguments as an array easier too! Perhaps a shortcut could be created to call_user_func_array().. $argArray = array("Max" =&gt; 10, "GroupID" =&gt; 50); getUserList({$argArray}); //perhaps {}'s designate to use array as args... 
Yeap his compacts down to 88 (with semicolon) with you rearrange to get rid of the space. Way to go winners!
FirePHP, Vim, XDebug, etc. Also working on a local dev machine instead of ftp'ing a file after every save.
I would add the class path loading from Python, as opposed to the PHP way where you pretty much write your own class loader.
Yep, obvious when you see other peoples' solutions! Pushing the comparison up against the return would probably never have occurred to me, even if I had the arguments the other way around. I will definitely remember that trick if I'm ever golfing in PHP again. Thanks for a great challenge everyone.
Hey, lets not get into the argument about how to echo the fastest. We all know the best way is to only have a single echo per request.
Use normal IDE. NetBeans, for example.
Django's templating stuff is nice: forloop.counter, ifchanged, divisibleby, etc. Plus that whole automatic admin thing...
Although we're getting offtopic and discussing purely for academic and entertainment purposes, I'll continue and expand the trend. Firstly, watch the Zend vs PHP lingo as it's the PHP project that determines everything, including if new error constants are added. The Zend Engine exists, sure, but watch out for 'religious' wars! Production code that is left to show all errors probably has other issues, and is in need of maintenance regardless. And you're referring to new error constants that won't be included within E_ALL, and one that kills old code... E_DEPRECATED is the only example that comes to mind (as a new constant), and it's part of E_ALL, and E_STRICT will be. Summary: I haven't bought your argument (yet?). &gt; Aren't you the same guy who originally voted to keep the longer array() syntax because it's more explicit? :) Well played, sir. :) 
Removing the error suppression operator and adding Ruby-style object instance access sigil. eg: $this-&gt;getPosts(); $this-&gt;password = $password; Becomes: @getUserName(); @password = $password;
Our code is so similar it's not even funny. I think this is an indication that our code might be the inevitably most compact code :-)
I know the feeling. I started out at 130 bytes; then got down to ~110 or so. People saying they had &lt; 100 byte solutions just made me stare at my screen in disbelief :-D
The only problem I see is the usage of $this if the variable was a member of an object and you need to reference the containing object. As-is, it would be inconsistent with the usage of a function. My solution would be to create a new $self variable that always self-references the variable being setup and is only usable in the scope of getters/setters. This still allows you to call *$this-&gt;someFunction();* or *$this-&gt;someProperty = true;* //$this doesn't matter out here, we're not in a class! $integer_from_0_to_5 = int { get { return $this?:0; } set($value) { if($value&gt;=0&amp;&amp;$value&lt;=5) $this = $value; } }; //But, inside a class: class ImportantClass{ //$this points to our current ImportantClass instance function grabSomething(){ if ($this-&gt;integer_from_0_to_5 == 3) ... } //Problem: //$this doesn't point to the ImportantClass instance $integer_from_0_to_5 = int { get { return $this?:0; } set($value) { if($value&gt;=0&amp;&amp;$value&lt;=5) $this = $value; } }; //Solution: //$self could be used to refer to the variable being setup via get/set $integer_from_0_to_5 = int { get { return $self?:0; } set($value) { if($value&gt;=0&amp;&amp;$value&lt;=5) $self = $value; } }; } 
That would be pretty awesome, Try/Catch should be used nowadays anyways considering how slow the suppression operator is... @ would be a great way to ref the current object instance.
I can't wait until I am comfortable enough with PHP to participate in this type of a discussion!
did you not get my submission? It's 88 bytes $b[$a=end(array_filter(range(1,999),function($a){return$a*$a==strrev($a*$a);}))]=$a*$a;
Neither can we :)
I don't think that's a concern here, as the $this in reference would be our scalar's $this. We don't want it to access an outside $this nor do we want outside access to our $this without using get\set. And with PHP's scoping this would be fine. It would work more like anonymous functions, as they don't have access to surround variables unless we use 'use'. E.g.: Class Something { public $var = 'Something'; public function __construct() { $function = function() { echo $this-&gt;var; }; $function(); } } Will return a "Fatal error: Using $this when not in object context in" Using $this think it would just make it more uniformed.
Thanks hiii for making a fun codegolf challenge. A few suggestions or helpful hints for future codegolfs. For the golfers be sure you're counting characters not just looking at the column indicator in your IDE. Second, it'd be helpful to have it clear if we should be counting the final semicolon or not. Both of these should help the easily crazy among us, such as myself, know if they are sitting on a good solution or not. Finally, letting us know how you are evaluating the answer such as "Putting it into var_export()", "Putting echo in front of it", ... would help us validate our answers before submitting. I know I'm guilty of spamming you with multiple worthless messages that could have been saved if I validated before sending the message. Thanks again and hope you had fun running it and will do one again! Congrats to the winners too! Now I can get back to work.
this doesnt do what is stated in the rules. it must return an array. the return value of your code is the square.
thanks for the suggestions. if i come up with another challenge ill post it =)
I suppose I took it to mean that an array must be created. a print_r of $b indeed returns what is asked, but if this code itself is printed, yes it merely returns the square. Oh well, had a good time exploring and figuring things out. Look forward to the next challenge.
It's not about being a skeptic. It's about not being an idiot. It's just a Bad Idea(tm) to hand over FTP login and password.
next time i will be more specific with the wording, sorry about that.
I'm going to give you the benefit of the doubt and assume you did this because you genuinely don't recognize what a terrible idea it is and how ignorant someone has to be to go along with it. I'm going to do that so I don't have to assume you're a malicious asshole. But that still doesn't change the fact that this is a really bad idea.
Yeah, I suppose you're right. Still seems hokey for some reason...
Off the top of my head: * List comprehensions and a better distinction between lists and hashmaps/dictionaries. * Tuples * Kill the $ * Destroy braces, use indentation instead. * Using something like . instead of -&gt; * Named parameters. * Strings, etc, as objects * Module based importing * Killing off all the stupid old stuff like register globals and magic quotes. * Proper overloading (ala C#)
Definitely a short-hand notation for defining arrays with square brackets would be amazing. Something like $a = [$one, 'two', [3, $four]]; is way cleaner than $a = array($one, 'two', array(3, $four)); We already have the square bracket notation for working with array offsets, so I think this would be fairly simple thing to add. And although my use case is fairly useful, it would be even more useful (and concise!) whenever defining arrays inline; for example, when passing an array into a function.
The @ thing is awesome. I wish python had that instead of self.
proper overloading (gods how I miss this) ability to specify variable type (seriously, why can't we?)
[This](https://wiki.php.net/rfc/shortsyntaxforarrays) is actually on the [TODO items for discussion](https://wiki.php.net/todo/php54) list for PHP 5.4. Object literals a-la JavaScript would be nice too. 
FWIW, [jEdit](http://www.jedit.org) has an FTP plugin that will do this, and it's what I tend to use. I don't think you're a malicious asshole, and I think you've come up with a *great* interface here. I would *love* to be able to do this through my browser without needing jEdit (or some other editor) installed locally, as I'd be able to make edits from remote sites without needing to install anything. However, as I'm sure you've noticed, nobody's going to trust you. What you're going to need to do is sell/license this package so that people can run it on their own servers. Set up a demo, set a price, and go for it!!
also, $foo = $bar ? true : false; dunno if that's been around, but shows both actions
That's horrible. It probably takes several minutes to re-read the database files if there are seriously thousands on there. Rebooting just means more downtime all together.
With cross pollination of ideas like this, does anyone think a new generic syntax will emerge across several popular languages? Or is there so much invested, and such a desire for uniqueness, that this is not a realistic possibility? I guess that's why node.js is so intriguing.
Django is not a language, you seriously cannot compare it to PHP.
Mostly things from C#.. LINQ.. C# style get/set accessor blocks.. Proper inheritance/overriding model..
If PHP implemented all of that, it would just become Python.
A better shortcut for echoing variables to a page without requiring the short tags. It gets really fugly using echos or tons of &lt;?php ?&gt;.
Was thinking the same thing. I'll keep my scalars and braces thank you (or alternative syntax). One thing I'd like changed though would be consistency for default classes\functions\values. $\_GLOBAL instead of $GLOBALS, strtoupper and str_replace. Either all str_\* or str\*...
Probably not, there are too many underlaying differences between machine architectures, etc. As soon as we merge everything into the ultimate machine, someone will build a new better machine that has new features and isn't 100% compatible with the other in both directions. Keeping things like compiling and binarys out of the convo, I think an all encompassing syntax could theorhetically be developed, but the main problem would be trying to get everyone to adopt it. Every language would have to change pretty drastically and a lot of people's code would break. I think a one-for-all language would be better, but they have those.. and not everyone agrees that's how it should be done.. hell my boss still codes in COBOL!!!!!! GAHH!!!1!one!! As far as things like Node.js, they simply sits on top of JavaScript and tweak it. For example, I wish JS was class-based instead of prototype-based and supported extending classes. While frameworks like ExtJS can give it the perceived functionality, it's really cloth over your eyes. The feature outside of that framework doesn't really exist. Not to mention, it does it really really slow. The same could be said with things like CakePHP.
&gt; considering how slow the suppression operator is... This is one of those die-hard myths about PHP. The error suppression operator is not slow. What is slow is the triggering of the error itself. If your function runs without errors most of the time, sticking an @ in front of it won't make it slow. If your function always produces an error, on the other hand, it will be slow whether or not you have an @ in front of it. [Reference](http://seanmonstar.com/post/909029460/php-error-suppression-performance) Having said that, most of us already know that we should avoid using error suppression if at all possible.
What are your thoughts on using a templating system like Smarty? Only asking because I have used it on a lot of projects, and have also rolled my own. My only real argument for why to use Smarty is because it "compiles" to php code, so it's arguably fast on subsequent runs..
It's just hard to ignore what I've read so many times before.. have any proof that @ doesn't slow stuff down? Like benchmarks or anything? I would love to know... I did a quick Google search and found nothing :(
Yep.
What actual value does having braces add? All it does is make people have stupid arguments about bracing styles and ignoring the real goal, which is readable, indented programming. And what about what I just said suggested we wouldn't have scalars?
For me $ = scalar. Should've put dollared scalars in front, sorry. Anyways, as for the braces it's a preference. Otherwise I'd just work more with Python.
Well, if I'd said Python, no doubt someone (you?) would have jumped in to point out that those functions are Django's own template tags and not built into Python. Also, I wasn't "comparing" it to PHP, more answering the question about features from one language (or for the pedantic, framework) that I'd like in PHP.
Python list comprehensions.
No. Somehow I had somehow changed the string length and it was truncating my passwords. Of course when you enter the full password, the hash wasn't matching the stored hash for the truncated password so it refused to log anyone in. All taken care of now.
&gt; tons of &lt;?php ?&gt; That's what &lt;?= is for. Also - template engines are the way to go.
autoload?
I'd like to have everything be an object, as in ruby, with the appropriate methods, and being able to use them when declaring variables stuff like this would be nice: $foo = array(5,2,11).sort(); or even better: $sorted_list = "banana,orange,apple".explode(',').sort();
SciPy
&gt;without requiring the short tags
for functions that take quite a few parameters, I kind of implement this by just having an `$args` array as an argument, then going by the key/values. you can still use array_merge if you want to have some kind of defaults. 
what's wrong with PHP's inheritance / overriding model?
The difference between framework features and language features is that framework features can 99% of the time be implemented in a PHP framework while language features 99% of the time can't. If you want an automatic admin thing then simply add it to a framework. Having such specialized things in a language would just bloat it. (for instance CodeIgniter has automatic scaffolding)
I'd flip it around and make global vars accessible in functions without the global keyword and add block lexical vars like "my" in Perl.
I usually dont do this but this is getting to be a bit much: http://www.reddit.com/r/phphelp
From python, array slicing: $a = array(1,2,3,4,5); $b = $a[0:-2]; Which is possible in PHP, but php arrays aren't classes with methods, they're really just pointers. From C/Java, strict parameter typing for primitive types: function some_method(int $count, string $name, bool $flag, array $extra) { return null; } I know that you can do use Classes and arrays, but I want full on parameter types even for primitives if I want it instead of doing checking in the function. This way we can avoid having to throw or fail safely and also do better static code analysis.
&gt; Firstly, watch the Zend vs PHP lingo as it's the PHP project that determines everything, including if new error constants are added. Interesting. I consider PHP to be a "product" of Zend -- as in they're the primary developers. Sort of like how Oracle is to MySQL, etc. I suppose that's not fair to the volunteers. &gt; Production code that is left to show all errors probably has other issues, and is in need of maintenance regardless. set_error_level() has nothing to do with displaying errors, it's about what errors are generated. How those errors are handled is a different issue entirely. Totally new errors that didn't exist before wouldn't show to my end users but my app still wouldn't work. &gt; E_DEPRECATED is the only example that comes to mind (as a new constant), and it's part of E_ALL, and E_STRICT will be. Summary: I haven't bought your argument (yet?). E_STRICT is a good example since adding it to existing older code would cause a lot of new "errors" on code that previously worked fine. The point is, all those developers who were using set_error_level(-1) could not have imagined the future existence of E_STRICT and the consequences to their code. &gt; we're getting offtopic and discussing purely for academic and entertainment purposes Absolutely. I enjoy a good conversation about PHP; I've been writing (big) software in it since the PHP3 days so I've formed some strong opinions on how I think it should work and what are good coding styles. I've even changed my mind a few times. I'm currently working on code that makes good use of PHP5.3 features as well as maintaining older code. 
I agree in some cases. But if it's just a case of coming across a usage of a language feature that you didn't know about, it's a good opportunity to learn, and it's not the original coder's fault that he happened to use a legitimate feature that's right for the task that you didn't know existed. But yeah on the other hand there's nothing worse than having to work with someone who likes to shoehorn random cool tricks into places they don't belong just to show off or entertain themselves.
If you document your code, you're just making it easier for someone who doesn't know what they're doing to make changes and blame it on you.
If you press the / key twice, you can leave a short message explaining your reasoning. Not enough people seem to know about that one.
Troll answer: Non-existence, from NebuScript.
JDOM. It's easy to use and complete, and doesn't do "favors" the way SimpleXML does, which makes it predictable and debuggable.
Autoload is what I consider writing your own class loader. Every project uses a different autoloader, which makes it hard to integrate work between different projects with different loaders.
// i thought slashes looked good here...
but as long as the project has a structure it doesn't matter, you just adjust the pattern and it's good to go. Its not exactly "holy fuck i need to figure this all out again" sort of stuff
I thought this was something they were going to add to PHP 6 one of these years...
From Ruby: - static class initialization (as it is, initial values for class variables must be literals unless you explicitly call an initializer method) - blocks/closures; PHP has anonymous functions that can import variables, which it mis-labels as closures (they do not actually operate in the same scope they were defined in) - symbols would be kind of nice, not completely necessary though - everything is an object - default value of null (nil) for undefined variables, as opposed to using isset() everywhere or the shut-up operator (@) - cleaner core library - gem; this is how PEAR should've been done - distinction between arrays and hashes (hell, a proper array implementation at all... in PHP, _everything_ is a hash) - nice array/hash literal syntax (brackets for arrays, braces for hashes) - duck typing (contrary to popular belief, PHP does _not_ have duck typing) - 0, "", array() should not evaluate to false; I can understand 0 being a remnant from C, but strings and arrays, really? that's what length functions and comparators are for - . instead of -&gt;, and as such, string concatenation with + - operator overloading, at least for + and - - no dollar signs - optional semi-colons and braces - mixins (I know, Traits are on the way) Hmm, basically everything. I actually can't think of one thing PHP does better than Ruby, aside from performance on strictly procedural code. EDIT: Okay, I thought of one thing. I like PHP's namespaces better than Ruby's lack thereof. Though you can basically get the same effect with Modules in Ruby, having to wrap everything in a Module structure kind of sucks. It also makes lazy-loading dependencies impossible, but Ruby's monkey-patching system doesn't facilitate lazy-loading anyway. EDIT 2: Apparently Ruby has [autoload](http://www.rubyinside.com/ruby-techniques-revealed-autoload-1652.html)ing support, it's just not a good idea to use it if you are going to be re-opening existing classes.
But that's precisely what short tags were intended for...
There are several alternatives to PHPdoc which if you investigate you might find better for you.
yep. /**[tab] above your function will auto generate the comment block for you. You can also ask it to run PHPdoc on an entire existing project and then you can hover over class names and function calls and it will interpret the PHPdoc for you to give you documentation on the fly.
Hell yeah, I'm not a fan of autoloading at all. If I want everything from a library or just a few pieces, one include. I definitely miss the python module structure.
Common sense
Dereferencing for constructors, ie make this possible: new Whatever()-&gt;DoSomething(); 
It's not THAT hard to implement, just pass in arrays. I'm actually torn on this. In some instances I like it, in others I don't. I like PHP where you can set up a function to accept a hash which all the parameters, or you make it where they have to be in a certain order. Mainly because of my C++ background I tend to do a hybrid. My framework is full of stuff like html_element($tag, $class, $id, $options)
This is a good place to start. The best is to get a VM running with linux, apt-get (or build from source if you're up for a challenge and really want to get to know) the stack, and go to town.
But Zend does not house the primary development of PHP (maybe they did when PHP 3 was first being developed, but not today), and it's a much different relationship than Oracle-&gt;MySQL. Zend is not a BDFL or "decision maker" or roadmap generator, although some Zend people do happen to speak up on the lists. Just have a look at the commit logs and you'll see. In fact, many volunteers also contribute to the Zend Engine. Now assuming you mean error_reporting(), and semantics aside (show vs display vs generated) we're comparing E_ALL | E_STRICT versus -1, and nothing else. Anyone that decides to put E_ALL | E_STRICT clearly wants all errors to be emitted, including strict errors, so -1 works here. Anyway, I think we were miscommunicating but hopefully found the same page now. **Edit**: I don't intend to degrade PHP contributions made by Zend, but am simply trying to clarify the current landscape.
From Java: 1. Constructor dereferencing: new Foo()-&gt;bar(). There's no reason why this can't exist, it's just a simple lexer rule! 1. Full function/method return dereferencing. This should be possible: foo()()()()()()()() - not that it's a good idea, it just shows a much more flexible parser. 1. Sub classes (and static subclasses) : class Foo { class Bar { } } 1. Static initializer blocks that are executed *when classes get loaded* and *exactly one time*: class Foo { static { //do stuff } } 1. Immutable members, aka the "final" keyword. 1. Scalar types (strings, objects) as static members 1. Java-style enums 1. Method overloading 1. **Strings as objects!**
Roadhouse! #1 is hopefully going be added to PHP 6! Yay! Finally! #2 is cool for functions that return functions.. #3 is cool, not entirely sure what I'd use it for right away, what would you use it for? (PHP supports functions in functions and I haven't really needed that or seen people using it...) #4, 5, 6, 7, 8 would all be tiz-ight! #9 everything should probably be an object by now..
I'd really like to see Java style conditionals, i.e. the only values allowed in conditionals are booleans, no ints, strings, arrays, etc. if your expression doesn't evaluate to a boolean, an error should be thrown, so crazy stuff like if ( strlen( $s ) ){ } etc allowed and I'd like to so able to create singletons like so class MyClass { private static instance = new MyClass(); private MyClass(){} } basically, if PHP moves towards JAVA i'd be happy (definitely don't want any of this ugly foo()()(), just code properly! and stop using shortcuts - who's suppose to understand that kinda code reading it?)
Loops can be prefaced with shorthand if statements: if(isset($possiblyArray) &amp;&amp; is_array($possiblyArray)) foreach(possiblyArray as $k =&gt; $v) { /* STUFF! */ }
try to set and add a 403 document (just a blank page will do)
Seconding this. Function overloading is desperately missing. We can specify variable type with Type Hinting, look it up. It's as simple as function yadda(SomeClassName foo, SomeOtherclassName bar). Stupidly doesn't work for builtin primitive types, though...
PHP isn't a fully object-oriented language, though, and likely won't ever be. There's a lot of syntactic sugar with objects, but your examples aren't really taking advantage, because: $sorted_list = sort(explode(',',"banana,orange,apple")) is really the same thing just written differently.
Try writing a function in a superclass that accesses member variables in the subclass. Ain't gonna happen without weird workarounds. 
Dereferencing for *fucking everything*, so I can go: something-&gt;getFoo()-&gt;dothis() or any other combination I want of functions and things performed on the objects they return.
LINQ from .net
&gt; Just have a look at the commit logs and you'll see. I stand corrected. I tend to stay away from any of the internals stuff -- too depressing! &gt; and semantics aside (show vs display vs generated) we're comparing E_ALL | E_STRICT versus -1, and nothing else. Correct. &gt; Anyone that decides to put E_ALL | E_STRICT clearly wants all errors to be emitted, including strict errors, so -1 works here. Of course. But someone using (-1) now might, as an example, then get E_EXTRASTRICT which will be defined in PHP 5.5. And, of course, their code won't be E_EXTRASTRICT compatible because that constant didn't even exist when they wrote that code. 
1. Range access shorthand (like $foo[5:-3] or $foo[$start:$end]) 2. JIT compilation, cached similarly to APC. Hopefully not as horribly buggy as Java's HotSpot. 3. Real closures. 4. Read-only object properties. The only way to do this now is to use __get, which can get messy and is less efficient. 5. foo()()[8]()-&gt;foo() 6. "undefined" value, a la JavaScript. 7. Ability to add *real* methods to objects after instantiation. It should be as simple as assigning an anonymous function as a property of the object. I understand that properties and methods are not the same thing internally, but I think this should at least be possible in cases where the property name doesn't conflict with an existing method name. 8. A new native scalar type, easily convertible to/from other number types, that supports super-huge numbers of arbitrary precision. bcmath currently provides this, but it has extra overhead that could be avoided by a more language-native implementation, and it has the downside that you can't reliably pass the values in and out of normal number-handling functions.
Only issue I have is inheritance when doing static functions of classes. class parent { static function woot(){ echo 'foo'; } static function echo(){ self::woot(); } } class child extends parent { static function woot(){ echo 'bar'; } } What do you think you get when you run child::echo()? yup, foo... not bar
That works. This doesn't: `something-&gt;getFoo()[5]-&gt;dothis()`. 
Care to provide an example? Because I see no reason why that doesn't work in PHP. 
just do it properly through method overwriting ... ps - why should a superclass be aware of stuff in subclasses? if you need that your class structure is most likely incorrect class Superclass { private $x = 'super'; protected printValue(){ echo $this-&gt;getValue(); } protected getValue(){ return $this-&gt;x; } } class Subclass extends Superclass { private $x = 'sub'; protected getValue(){ return $this-&gt;x; } } echo new Superclass()-&gt;printValue(); // super echo new Subclass()-&gt;printValue(); // sub
E_STRICT is a good example. By using E_STRICT today, a developer is saying "I want all strict errors to show up in my code, both today and in the future. This includes strict errors that I don't know about today." And regardless of 'E_ALL | E_STRICT' or '-1', the code may "break", or at least emit unexpected errors in the future. So while I understand your point, '-1' is common enough that PHP won't do anything crazy to cause a ruckus, like add E_MORE_FATAL_ERRORS. But it could, I suppose. Summary: So while valid, I don't think your argument is strong enough to stop me mildly soliciting '-1' usage. :)
A superclass may need to be aware of things inside of a subclass when I wish to provide a function to all classes that deals with data or functions specific to the class. Mix ins or multiple inheritance would make this less necessary for me, but when writing a big ORM having this sort of functionality would be really nice.
pointers from C...kiddin...;D
&gt; We don't want it to access an outside $this nor do we want outside access to our $this without using get\set. Your getter/setter would have limited use if it couldn't access any of the members or methods of it's class. Reusing $this makes it pretty limited. 
ok, so what;s wrong with that example I gave, ie use method to access the data rather than directly accessing through a private/protected field (which is not possible)?
What does having a dollar sign have to do with scalar variables? And yeah, my OP was more of a subtle dig about how it should be Python :)
you guys both know what you're talking about, don't fight, you probably have a lot in common, so be friends.
Whilst increasing the likelihood of them being forced to re-employ you for maintenance.
Doxygen for me. Cross-compatible with C (which I also work in), and pretty much compatible with phpDocumentor.
lol, aww, why not??
It's the primitive types I want it for. The ability to specify primitive types for variables would keep us from having to run something like is_numeric($foo) every time we pull in data.
it would speed shit up, wouldn't it? lol
I'd also love to see Python's awesome [inline string manipulation](http://docs.python.org/tutorial/introduction.html#strings). `word[-2:]` blew my mind.
replace `self::woot();` with `static::woot();` and it'll work, but [it's a 5.3 feature](http://php.net/manual/en/language.oop5.late-static-bindings.php). They made it a new keyword to keep from breaking existing functionality.
I would _love_ to see something like $\_APP or $\_STORAGE or something that works like sessions but is global to all sessions.
Python as easily deployable as PHP? Sounds good to me. Although: &gt; Destroy braces, use indentation instead Fuck that, I like brace notation. If I don't want to indent something I should be allowed, dammit.
I wrote a quick benchmark script: http://pastebin.com/A7nQYa7s On my computer, with PHP 5.3 and 100,000 iterations, I get: No errors: 0.036s No errors, using @: 0.107s Errors, suppressed using @: 0.200s Errors, using a proper error handler: 0.256s It seems that using @ adds a tiny bit of overhead even when no errors are being suppressed, around 0.0000007 seconds per iteration in my case. The overhead increases if an error is actually being suppressed, but it's still faster than actually handling the error. So I wouldn't say that @ is dog-slow. Sure, it adds a fraction of a microsecond if you use it where you don't need it. But if you use it where you're actually expecting an error, @ is faster than messing with error handlers. Of course, just because it's fast, doesn't mean that we should all go ahead and use it everywhere. But there are a few places in PHP where @ might come in handy. For example, some functions return `false` on failure AND also trigger a warning, which is just stupid. Until these functions are converted to produce proper exceptions, it's OK to suppress the error and use the return value to decide what to do.
\#4 would indeed be awesome, although you can pretty much accomplish it now by just calling a static Init function right after the class declaration. Since you should never be loading the class definition more than once, it should only ever be called once. \#9 Yes, and arrays as well.
You could always write them in JSON $array = json_decode(' {"menu": { "id": "file", "value": "File", "popup": { "menuitem": [ {"value": "New", "onclick": "CreateNewDoc()"}, {"value": "Open", "onclick": "OpenDoc()"}, {"value": "Close", "onclick": "CloseDoc()"} ] } }} ',TRUE); print_r($array);
Cool stuff. And I agree it shouldn't be over used :D
Lots of the stuff people want (type hinting, various shorthands) have existed in the form of patches for **years**, but there's so much drama about what direction PHP *should* be going in, that a lot of them have never made it to production. I'd just like to see the PHPDEV team get shit done. Also, fatal error handling/catchable fatal errors.
That would be amazing. How did you find one?
Or if multiple sessions could be initiated bound to separate variables... Why does $_SESSION have to handle the session data? Why can't I start two sessions, one unique to the user, one named "global_app", and define an alternate variable (like $_APP) for the other session to bind to? I wish I could do this: //create a normal user session and bind it to $_SESSION session_start(); //normal way (as not to break old scripts) // ...or... session_start($_SESSION); //explicitly defined way //create another session and name it "global_app" and bind it to $_APP session_start($_APP, "global_app"); Then, I could have two sessions, one that holds user data, the other that hold global data. It would just require session_start accepting a byRef argument for binding and a string argument for naming the session. To easily determine the name of the generated name (in the first examples) we could have session_start return a type string that holds the name of the session.
[Yes](http://pastebin.com/xqRckwyk)
A bunch of stuff from ruby - mixins, classes are objects, eigenclasses, callbacks I've actually made some good progress so far: [github.com/shuber/phuby](https://github.com/shuber/phuby)
FRIENDS? How, then, can I continue to be a cave dweller in my D&amp;D sessions against a hard AI?
LINQ4PHP (http://github.com/halfnelson/LINQ4PHP) Docs (http://halfnelson.github.com/LINQ4PHP/index.html)
I had to look up for D&amp;D and hard AI,...and Im still not sure what a hard AI is, sir
Preprocessor macros from C and its children. The use case would be in the deployment of code, where command arguments can be injected depending on user preference. Currently, you could look at $_ENV or use ini_get(), but that code is always evaluated at run time. It would be cool if you can do those evals at compile time and not waste clock cycles on environment-sniffing code. This would give an immediate speed boost to most frameworks, and make the language more stable, IMHO.
Why did you leave the line numbers in?
Yes, but that's hacky to begin with, uses syntax unlike the rest of PHP, and will slow performance. A native implementation would be far superior.
Based on?
#7 !!!!
Thats the thing, the setter\getter isn't for a class, it is for the variable itself. PHP already has setter\getter for classes. We don't want outside direct access to our variable's internal workings nor do we want to use outside dependencies without directly declaring them internally.
wow... I did not know that. How the hell did I miss that. Been using my own crazy system for a while now. Need to rewrite that crap...
This must be answered.
You make a good point. I guess it's really just a stylistic thing. Using (-1) just seems a little hackish to me so I avoid it. 
I'm honestly not sure what you're getting at. Exactly what purpose would this getter and setters be useful for if they couldn't access the internals of the containing class? 
I agree with most of that except: &gt; * Destroy braces, use indentation instead. &gt; * Using something like . instead of -&gt; I like braces, and I use indentation to format the code nicely. Also I quite like the . operator for concatenating strings together, it doesn't get confused by trying to do addition on it. Wouldn't the parser get confused if you got rid of the -&gt; and started using the . as the method call? I suppose they could change the concat operator to a comma or other symbol. 
Clean*er* but still bad.
LINQ4PHP (http://github.com/halfnelson/LINQ4PHP) Examples (http://halfnelson.github.com/LINQ4PHP) Id like Extension methods. Wouldn't be too hard, and every framework seems to have its own hack to achieve the same thing.
from above LINQ4PHP (http://github.com/halfnelson/LINQ4PHP) and examples/doc (http://halfnelson.github.com/LINQ4PHP)
Twig? (http://www.twig-project.org/)
-1 for ambiguity.
Even more so over HTTP and not HTTPS.
I spent a good deal of time making a PHP extension to do something like this. The idea was that I could put the same massive XML config file on every server, and using an environment variable or hostname of the server, you would have a custom configuration available in read-only memory. It was parsed at MINIT and then (based on the config) it would define all your constants, create super globals, etc. I never got it to a point where I felt it was "production ready" so it has remained unfinished. There is a very similar extension called [Pwee](http://pwee.sourceforge.net/) which has some of the same features but is called on RINIT instead of MINIT. 
Guess.
Are you for serious?
It's cleaner, but that doesn't mean it's good.
Well, congrats on wasting your time, I guess.
It will work in 5.4 :)
I tried this out on your advice. 'apt-get install doxygen' on Ubuntu Linux. I thought that parts of it were interesting in the layout, but I preferred phpdoc a little more. I almost wish I had the time or mental capacity to build my own, using pieces I like from doxygen and phpdoc, and taking it even further. 
Kohana has a nice error handler, although there are very rare cases after that where xdebug is necessary because something may appear in the logs and you don't know why it's occurring. I use stackoverflow.com, reddit.com, and forums.devnetwork.net for asking questions. 
structs
Yeah it would be pretty great if PHP was Python. Take the solution I did - switch to Python. 
 &gt; Fuck that, I like brace notation. If I don't want to indent something I should be allowed, dammit. If you don't want to indent your code then you shouldn't be allowed to write it in the first place.
Smarty is pretty much overkill since it reimplements what PHP gives you for free.
 tasksel lamp ?
well don't be surprised if it isn't.. Seen it before on phpgolf.org, things that appeared to be at their smallest turned could be reduced just a few more bytes.. pretty impressive...
I submitted a solution of the same kind but 85 bytes :P wasn't accepted either..
That's not really "prefacing" just ignoring the brackets. You can also do `if($doloop) foreach($items as $item) echo $item;` This is, generally, not recommended because it can lead to harder to read and understand code. Right off the bad, if I am quickly scanning a file for a loop I know is going wrong, it's harder to find "foreach" in the middle of the line as opposed to the start of a line.
No, it was fun making it look more organized and presentable. We said it's prettier, not that it works.
Looking at the solutions, alexbarett could have done a 88 byte: array_slice(array_filter(range(0,999),function(&amp;$n){return$n==strrev($n*=$n);}),-1,1,1); Impressive solution
could remove the space between return and $c, 85 bytes
-1 for ambiguity
You might as well call these "code that should never be written in one line anyway" challenges.
Well for instance, which looks cleaner: or function moo() { echo $this-&gt;blah . "hi"; } or function moo() { echo $this-&gt;blah . "hi"; } or function moo() { echo $this-&gt;blah . "hi"; } or def moo(self): print self.blah + "hi"
I agree on all three counts! It's just a little bit easier to read than using unserialize()
Don't like the first and second coding styles at all. I prefer the #3 style. That looks cleanest to me as you've got a whole blank line above the echo part which is definitely more readable. The Zend Framework also uses that style. Though I can see that #4 would be okay, it's a bit more compact. But how does it handle different IDE's with different tab spacing etc?
If you're using Eclipse as an IDE just type /** and hit return before your function an it will add a PHPdoc block for your function automagically, just add a nice friendly description. Also giving your variables, functions and methods consistently descriptive names almost provides it's own documentation assuming your code is readable!
I wasn't aware that you could push variables up against the return statement like that, until I saw the rest of the entries! Never mind, I will know for next time.
So I take it Vim is still cool then. How many of you use it? Be honest now. 
Thanks! but this seems a *lot* more verbose than LINQ.. The beauty of linq is that it's so easy to read and write I think.. this seems less so..
+1 - Very cool indeed!
Yup, find it awesome. Love that I can keep and throw away features at will (I'm not a huge fan of the project plugin, eschewing it in favour of a combination of NERDTree &amp; CMD+T, and I've always found tags to be kinda slow &amp; klunky, preferring VIM's inbuilt autocomplete stuff). You do have to take a leap of faith with it when learning though, there's a week or so pissing around and forcing yourself to use the home-row instead of arrows, and lots of googling and fiddling to make everything just right - so it's definitely not for everyone, but well worth it for those who do.
Netbeans. Yeah not really an editor. But seriously, give it a couple of weeks. You will love the features like project history (diff), the auto-complete, ability to ctrl-click on any class name and open the source file, navigating long files by methods and classes, xdebug. I used to hate IDEs until I realized the advantages of stuff being integrated. That said I don't need to use every feature, I usually don't bother with the git plugin and use command line instead.
&amp;#3232;\_&amp;#3232; Editing live is really the wrong way to go about deployment. There is a lot of risk that you might lose some code or fuck up the live site. You should set up a **local development enviroment**, either localhost or on a virtual machine. Why? It's fast, you will be running on a beefy computer not some small VPS or shared server. It's easier to use whatever tools you want. For example you can search all the files with a file browser and find that function you were looking for. Use repositories (git or mercurial) to manage your code. Then when you've tested (I mean unit testing) your work you can deploy to a staging site, which should be on the same server as the live website, but a different domain. For this you can log into the server and pull &amp; checkout the code, or just check it out locally and rsync it across. You can have three branches (develop, stage and master) in your repository which represent localhost, staging and live sites respectively. http://nvie.com/posts/a-successful-git-branching-model/ It's a bit of learning to get used to unit tests and source control, but it gives you much, much better control over deployment and testing so your site(s) will end up a lot more robust. At the very least do it locally then ftp the changes across. Editing files on the fly on a remote site is something I'll only bother doing if something needs an immediate fix. Seriously, it's just slack not to use version control. But hey, I am guilty of doing version control this a few years back, now I just know better and feel more comfortable with the tools. It also helps to use a framework which can build your database based off the models (e.g. symfony or silverstripe) you define. Otherwise you might need some kind of schema migrations going on. **tl;dr** Use a local development environment, do commits to source control and run unit tests before deployment.
Could be wrong but isn't netbeans 7 coming with it? http://netbeans.org/community/releases/70/ HTML5 editing, not sure if that is an umbrella term and includes CSS3 or if they actually mean just HTML5 markup. I downloaded the latest one 3 weeks ago and it gave me 6.9 for php. I guess it is released now.
Super cool. I've been using stock VIM with the occasional move to Eclipse when I can't keep the files organized in my head. Looking forward to increased productivity. esc :X Enter encryption key:esc esc :x
As long as it's consistent it's ok, but the recommendation is to follow PEP8, which defines the python coding style (4 spaces). Thing about #1 is you can always add a space yourself. function moo() { echo $this-&gt;blah . "hi"; } I find you do get used to looking at things are compacted together a bit more, and if you don't like it you can increase line spacing on your IDE. This is some fairly typical PHP code I've written: https://github.com/radiosilence/core/blob/master/core/storage/pdo.php The two editors I use, Sublime Text and vim, can be configured to do 4 spaces for a tab. For instance, in your .vimrc: set smartindent set tabstop=4 set shiftwidth=4 set expandtab 
I'm using NetBeans 7 and it's complaining about CSS3 properties like border-radius and background-size. But it's not complaining about CSS3 selectors like :nth-child(even) or :nth-child(odd).
I've been using it for the past year for minor edits (config files, minor edit, etc). However, with the latest release of Netbean 7.0, on the day of the release I couldn't get the Python plugin to work, so I decided to give a try on the post I saw on /r/python on how to turn VIM as a modern IDE for python : http://sontek.net/turning-vim-into-a-modern-python-ide I have now been using VIM full time for the past 3 days and all I can say : my productivity has risen to a point never seen before. I will take the time this morning at work to test this guy's config.
I use it every day in a professional environment. In fact, it is tied with jedit for most popular text editor in my office.
+1 for trying.
Very cool, yes. Switching from Netbeans 6.7 and never looked back. Pathogen + NERDtree + CommandT + SessionMan + Align + GUndo + EasyMotion Being able to git the .vim folders and clone on any server I need to SSH into and have the exact same set up just makes it even sweeter.
I appreciate the advice, but you made a fairly large assumption that because I'm editing files over SFTP that they must be production files! We have a development environment (as well as stage, preview and production) and use Subversion for version control and deployment. We just happen to skip a local environment on individual workstations in favor of a centralized environment (local server inside the building).
In C# Accessors are available for variables if you so wish. These allow you to put limits and other actions on your variable itself. Example in C#: public int Between0and10 { get { return _b; } set { _b = value&gt;0&amp;&amp;value&lt;10?value:0; } } Now if I try to set Between0and10 to say 11, it will make it 0 instead. This way later I can just check to see if my value is 0 or not, if not then I know it's a valid value without having to do additional checks. If you wanted class\method access on the variable you'd do that on top of the variable in the class itself, not intertwining the inner workings of the variable with outside access.
 if(isset($possiblyArray) &amp;&amp; is_array($possiblyArray)) foreach(possiblyArray as $k =&gt; $v) { /* STUFF! */ }
I'd recommend those plugins : [NERDTree](http://www.vim.org/scripts/script.php?script_id=1658) [CommandT](http://www.vim.org/scripts/script.php?script_id=3025 CommandT) As a theme, i personnaly like Torte (that comes with it), and Solarized: [Solarized](http://www.vim.org/scripts/script.php?script_id=3520) If you want, here is my vimrc configuration : [My _vimrc](http://pastebin.com/nSFjYJav) It is set to use Solarized with Consolas, has the configuration for NERDTree (line 12, change the path where you want NERDTree to point at) If you have any questions, don't hesitate, Vim is awesome and it's nice to see others wanting to try it.
I use it. I also use an IDE as well (and pretty much only because I find debugging with xdebug in vim to be a hassle) but I use vim (Macvim, specifically... [this version named "janus".](https://github.com/carlhuda/janus)) every day.
Yeah, that was stupid in retrospect. For some reason, web development feels different to me than application development and I always associated open source with the latter. Aside from frameworks, I really hadn't considered PHP in that way.
you're right. I have run into this before and forgot what a pain it is.
Haskell, functional :) last (filter (\(_,b) -&gt; show b == reverse (show b)) (map (\a -&gt; (a,a*a)) [1..999]))
For #4, you could just put your code in the same file that defines your class (or put a call at the bottom) to run some code when your class gets included. 
Sessions would be entirely wrong for this. The problem you have with a global data area is locking; you can turn your perfectly fast "share nothing" web app into a terribly slow mess very easily this way. Or end up with semantics that don't make much sense. You might think a global data area is just an easy addition, but in reality it's far more complicated, and you're better off just designing something specific to your own needs yourself. 
Turns out: [it isn't!](http://www.reddit.com/r/PHP/comments/h86pa/one_liner_challenge_3/c1tizcu) I'm not all that surprised to be honest. I'll have to step up my game for the next one; maybe get some practice in on phpgolf.org :-)
Hopefully they're using my updated [phpcomplete.vim](http://www.vim.org/scripts/script.php?script_id=3171) See also [http://spf13.com/project/piv](http://spf13.com/project/piv)
I had a moment earlier where I wasn't really paying attention to what I was doing.... $coupons = [ { "code":"FREE30", "expires":"2011-12-31", "status":"active" }, ..... wait... crap. this isn't JavaScript. I really like JSON and want to use it everywhere, apparently. And yes, I know you can parse JSON files in PHP, but I'd love to be able to define things like that natively. It's just so much cleaner... In this instance, I was just setting up a quick bit of data for testing (real codes go in the DB).
I hear ya, JS has spoiled me too.. I would love to have JSON style array/object syntax in PHP!
The only way to emulate the exact same behavior is to have a static method and then a call to the static method after the class definition, which is hacky and ugly. When I write PHP, there's exactly one file that's procedural and everything else is OOP and mixing the two indiscriminately, as this would require, isn't something I ever want to do.
Egro, it was pointless because what you've done has helped no one in any way. Hence the -8 score.
One technique I've played with is to modify my autoloader to look for a static method called `__initialize()` and then call that method automatically after loading the class. Then there is no need to manually call the static method in your class files. 
i use it as i do all my development over ssh. i don't use any of the fancy plugins and most of the time there's nothing in my ~/.vimrc. i also prefer to jump back into the command line to achieve most things rather than staying in vim land. been using vim for about 4.5 years now.
Honestly, I don't see why people want to be able to add methods after instantiation. If you've got inheritance and, soon I hope, traits then what's the obsession with changing your methods at run-time? It seems like a recipe for hard to maintain spaghetti code. 
I don't think it's ever a good idea to do that kind of magic in the class loader - most languages make you jump through a ton of hoops to be able to do that (as well as having one that works out of the box) - because it's a good idea to conform to a standard loading practice. If you're reliant on your autoloader's specific functionality for your code to work, then you've lost code portability because you can't necessarily guarantee that your autoloader is the only one in use or the autoloading order. You also lose a bit of flexibility in terms of using your autoloader to load external libraries (but you can hack around that). My point is that while your solution obviously works, it's not ideal and there isn't any ideal replacement for static initializer blocks in PHP.
I guess that is okay. I've seen some bad practice in my time, so assumed the worst. Have you tried samba (windows) shares? I used to develop on a virtual machine and that is how I would get around this problem, since the VM was on a different IP to my computer. That way yuo can treat them as local files and simply hit ctrl+s to save.
I still hold that always including your braces is better $a = 1; if ($variousConditions) $a++; $a++; In cases like this you can end up confusing more junior programmers, especially if you start indenting: $a = 1; if ($variousConditions) $a++; $a++; Not so bad, but... $a = 1; if ($variousConditions) $a++; $a++; ...suddenly indentation doesn't conform to what the program actually does.
&gt; If you're reliant on your autoloader's specific functionality for your code to work, then you've lost code portability because you can't necessarily guarantee that your autoloader is the only one in use or the autoloading order. I can guarantee that my autoloader is the only one in use. It's also fully PSR0 compliant. Even in the presence of multiple autoloaders, they should not be loading my code and I should not be loading their code -- that's just good practice. &gt; You also lose a bit of flexibility in terms of using your autoloader to load external libraries (but you can hack around that). Unless they also define methods called __initialize(), there is no conflict. Adding an extra layer involving an interface defining the initialize method would make conflicts even less likely. &gt; My point is that while your solution obviously works, it's not ideal and there isn't any ideal replacement for static initializer blocks in PHP. I tend to bend PHP to my will rather than bend to PHP's will. I have a standard base class for all my projects that implements automatic getters and setters, contant access through objects, and a whole bunch of other stuff. I also implement global functions for obviously missing functionality. I'm not as concerned with PHP adding things that programmers can easily add themselves. 
hmm nice
This!
rough rsort/ternary speed comparison: http://www.ideone.com/Js79t . Difference is consistently less than 35% &amp; ~0.5s per million calls. Anything less than 1000% difference shouldnt be a consideration, I would imagine that testing *exactly the same code* across machines, even within the same request, will differ by more than 100%. Speed comparisons rarely involve statistical testing for significance. To illustrate the point, http://www.ideone.com/SsJbc . A 7% difference, even though the operations are the same. In other words, rsort and several ternary operations of this kind are of such comparable speed as to be indistinguishable. 
I like how the linked code works really nicely as an image manipulation function reference. Totally know what you mean about irrationally hating working with images. There's just something about it that feels incredibly error-prone. Thinking about it now, I bet I wouldn't feel this way if PHP's image manipulation API was a little nicer. I mean, 'imagepng()'? Sure, from the name you can tell it probably does something with PNG images, but why not 'outputpng()'?
I've used SFTP via ExpanDrive (previously known as SFTPDrive) to accomplish the same thing over a local connection, but SFTP isn't always available. But that is definitely a viable alternative if the text editor or IDE itself doesn't have the capability built in. I've also seen people use WinSCP which will automatically upload files when they are saved (even if they are saved by external editors). I'd like to be able to use the same editor (with S/FTP support) to work on projects regardless of where they are deployed and what my access to that machine might be. Mostly this is because of freelance projects on crappy shared hosting, which is rare, not my day job where I have full SSH access, etc. And the last requirement is just personal preference: I already have enough windows and tabs open from everything else, so if I can eliminate another explorer or SFTP client window, I will!
I totally agree, the GD library is a little messy. I think the order of operations using the GD library is the most confusing part, especially when you need to pass the image variables as parameters in other functions.
No offense, but can we stop promoting old PHP4 classes?
I'm a big fan of PHPThumb. It is super easy to use and resizes / compresses on the fly really well.
Flourish is/has a good library for doing this kind of stuff in an OOP way.
looks like you could use some pointers!!! pointers for PHP!!! Yaaaaay!!! (sorry I was being retarded)
Yes, discussion. Doesn't mean we'll get it -- it was rejected the last time it came up :(
I think that example is a common problem among image libraries, because PIL's version: im.save(fp, 'PNG') ...is almost as bad. Almost. If you use it inside Django, the first argument will probably be an HttpResponse object, not a file pointer. So long as it has a .write(), it'll work there.
I haven't written a PHP class in years. What makes this a PHP4 class? Lack of a namespace?
&gt; So, why has this been deprecated? So, there are three things going on here. First, `strtoupper` takes input and produces output. Passing it a reference is nonsensical, as it's just producing a copy of the input anyway. PHP strings are copy-on-write, so no memory is being "wasted" here. Second and most importantly, passing PHP variables to *built-in* functions by reference has proven pretty dangerous. The [Month of PHP Security](http://www.php-security.org/2010/06/10/winners-of-the-month-of-php-security/index.html) effort uncovered *dozens* of cases where PHP built-ins that already take variables by reference could cause security problems due to poorly designed userland code. You *are* using the latest PHP point release, right? Finally, this same principle also applies to userland code. If the function you're calling isn't expecting a reference, you may well cause bad behavior and introduce bugs by giving it one. Given this problem, they decided to deprecate the ability to pass variables by reference *to functions that aren't expecting references* a few versions ago. Like, in 5.0 or 5.1. So, maybe five-ish years ago, give or take. It's dangerous. Don't do it. If you want *your* functions to accept references, indicate so in the signature: function foo($bar, &amp;$baz) { ... } Here, `$baz` will always be a reference to the second argument passed to the function, no need to prefix the ampersand on the calling side.
Learning Vim almost feels like learning a superpower if you're a programmer. Not only because it makes your editing super efficient, but also because that efficiency is suddenly available almost everywhere php lives, by default. The downside is that you can never again watch someone coding outside of Vim without shaking your head in pity.
&gt; What makes this a PHP4 class? var $image;
And for those of you that would prefer an IDE, but still want the basic vim editing - netbeans + jVi is a great combination which I have been making use of the past 6 months or so. Highly recommended.
No constructor, using var, no public/private/protected.
Here is a link: http://flourishlib.com/fImage
[Imagick](http://php.net/manual/en/imagick.examples-1.php) &gt; GD . Btw, resizing Transparent PNGs is quite the task with GD, while it's a 1-liner with Imagick
Ya, i've been meaning to learn a little about imagick. Just glazing over the manual I noticed you can give 0 as a dimension argument and it automatically retains aspect ratio :D im sold
the problem is C#'s lambda syntax x =&gt; x+1 is much shorter than php's closure syntax of function(x) { return x+1; } So really what we want is the shortened lambda syntax. Apart from that the implementations are very similar (all methods from IEnumerable). It is a bit of a shame.
Godaddy might have register_globals on. Double check it's off. 
what does print_r($_POST); give you? (as in, if you add: print_r($_POST); this to the top of your code and submit, what does it display?)
That doesn't affect the $_POST array. It just allows you to use the global keyword instead.
[WideImage](http://wideimage.sourceforge.net/). It works wonders and it is easily extendable.
While I won't be using VIM for now, thanks for introducing me with Solarized. I've jumped ship from Twilight to the light version of this and it looks awesome.
All your file and directory permissions correct?
Try adding: ` ini_set('display_errors', 1);`
Your blog isn't working anymore!
so true
it gives me "Array ( )" so I put in print_r($_POST['submitted']); after that and I get nothing back... I tried this already unfortunately.
if you're on a lamp box check your apache access logs and verify it's a post coming in and not a get request. a common location is /var/logs/apache2/access_log or /var/logs/httpd/access_log edit: duh godaddy hosting, sorry brainfart, you more than likely don't have access to these logs. :/
Unnecessary comment: Array() is the empty array. $_POST['submitted'] can't be anything if the $_POST array itself is empty.
Just a random guess, maybe you have a rogue header("Location:...") somewhere in your includes/functions.php. Try using the chrome developer tools or FireBug in Firefox to track your HTTP request/responses. But it is still curious that it works on another box. Perhaps the code redirects to a page that doesn't exist and GoDaddy redirects back to domain.com/index.php?
Have you tried it on a different server? i.e. Tried it locally and on your web server? mod_security may sometimes block POST requests. EDIT: I just tried your code, I get a _POST array. So doesn't look like your code is the problem, but rather your server.
Try it on another host. If your code works, open a ticket with GoDaddy.
Yep, Zend Studio uses this to give a quick example - same with the inbuilt PHP functions.
hey, i had a similar problem on Godaddy as well, it was the post data from a ckeditor field was coming up blank. could you make sure to update this thread if its a server issue?
Make sure you have a underscore in the post variable. $_POST not $POST
&gt; Lack of a namespace? namespaces weren't introduced until 5.3.
Wow, I'm impressed. That's a really really really decent library! I'm keeping it just in case I ever have to do anything more sophisticated than just creating a thumbnail. Thanks!
Hit F5. Does it warn you about sendin the form data again? Check the headers (about:net-internal in Chrome, LiveHTTPHeaders in Firefox) - there's a high chance that you're beeing redirected (might by apache (miss)configuration redirecting you automaticaly from http://example.com/page to http://example.com/page/) Check the $_REQUEST array. Check for [raw post data](http://php.net/manual/en/reserved.variables.httprawpostdata.php): file_get_contents('php://input'); 
How so?
Check your form submit function is pointing to the right script on the right server. 
The server might be redirecting you if you're linking to a directory and the URL doesn't end with a slash. E.g. http://domain.com/my/directory ----&gt; http://domain.com/my/directory/ As a result, your post data is lost. 
Stop using GD and start using ImageMagick and you'll be much happier.
&gt; I've since given up on using Mercurial and still don't know if I use hg pull or something else. Because it sure as hell didn't work when another developer tried to pull a change after I pushed it. I'm by no means an expert at Mercurial, because I just started using it myself... but I do know that you need to perform two steps to get changes... hg commit hg push to send changes upstream hg pull hg update to have those changes reflected in the other repository. If you were only doing hg push/hg pull, then you were only moving changesets, not actually updating your repositories.
Oh, it's working now. Perhaps we had a dodgy connection at work. All good again and nice intro. Cheers!
The lambda syntax definitely helps a lot, but also C# has the LINQ query-style syntax: (from x in Adapter.Objects where x.StartDate &gt; DateTime.Now select x).ToList(); for example. It's just much more like a query.. and I like it. Not that PHP querying is difficult or impossible the way it is, it's just LINQ feels so nice to use.. (to me). But yeah, stick the lambda syntax on the list, that is awesome too. (Most of the things I like about C# are down to the syntax to be honest, it's just such a damn *easy* language to work in.)
also, error_reporting(E_ALL | E_STRICT); 
Your max post size in pho.ini may be set to zero, although I don't know why someone (godaddy) would ever do that.
He did in the referenced code.
Try not using php shorthand. So "&lt;?php" rather than "&lt;?" I gave a guy some code I wrote the other day, and the same thing happened. Eventually he figured out it was because he had some setting in his php.ini that didn't allow shorthand. He replaced all &lt;? with &lt;?php and it worked fine. Dunno why, that was just the fix.
Try calling: for ( instance in CKEDITOR.instances ){ CKEDITOR.instances[instance].updateElement(); } in your onsubmit for the form.
Another suggestion would be to check out [Imagine](https://github.com/avalanche123/Imagine), a library that supports several different backends for the grunt work.
I'm pretty comfortable with passing objects around by reference but interested to see your comments surrounding security. If I'm honest, I pretty much expected this to be the reason for it being deprecated. However, I do believe that I should be given the option to pass by reference should I choose to, maybe by specifying an explicit command to state that I understand the possible consequences. Ruby, for example, will allow such behaviour by appending an ! on the end of the function.
You are odd tbh
Yes, good to see that, but honestly what was the point of the question? Before you say " no such thing as a dumb qn" I have a million of these every day. I google em and 999,999 I find like this guy, the other one I chat to real ppl about, and come here if all else fails.
A good way to test for this is to put this at the beginning of the first file: echo "A"; ob_end_flush(); //in case output buffering is on This will step on any headers your code may be sending.
I'm a fan of Eclipse PDT. Gives you yellow squiggles for warnings (declared a class member variable but it's never touched) and red squiggles for parsing errors (forgot a semi-colon?). Plus it integrates directly with Zend Debugger and XDebug with a nice debug view to inspect scope variables and watch the runtime stack. Code completion and quickly viewing code declarations are great, as well as object browsers available through keyboard shortcuts to bounce around code quickly. Plus the integrated Team plugin makes working with SVN/Git repo's a breeze.
godaddy hosting sucks.... I've had many strange php issues working on client sites w/ godaddy hosting.... Check file permissions...
I double checked my code and put in the code above, still didn't work. I didn't step on any headers.
I tried both above and re-submitted the form, no errors.
I tried what you suggested and there is no raw post data, not even in $_REQUEST.
He's also telling you to check client-side, to make sure that the client browser is sending the data to the server. Now if you don't see your data in the outgoing headers then something is either wrong with your browser or your form.
Have you tried running it with firebug?
try putting this at the beginning: var_dump($_POST); exit;
Ah yes. Good old phpdoc. Be careful when relying on it though. If you need an example look at Magento's phpdoc.
Why not just do it in js? Do you have to save the images? Also, dynamic how? How many images?
this must be what's happening. when I alter a form I made from: &lt;form method="post" action="&lt;?php echo ROOT.NAV."testform"; ?&gt;"&gt; (this doesn't work) to &lt;form method="post" action="&lt;?php echo $_SERVER['PHP_SELF']"; ?&gt;"&gt; (this does work, except without the navbar, header, footer, etc.) Do you know how to stop this redirecting?
Add the slash to the end of the URL.
get a better host. I'm on linode right now, it's pretty decent. http://www.linode.com/
thank you all very much for your responses so far. I updated the OP. I'm half-way there.
Try a simple page, just a form nothing more - and see if it goes through. If it does, something else is wrong with your code - please provide link. If it dosn't - host is messed up.
the default for php 5.3 switched shortcodes to off, I ran into the same problem when I upgraded. As a dev who uses php as a template engine I really liked shortcodes but I've stopped using them so I don't have to worry if they're on or off.
tried it Warning: main(http://www.example.org/testform/.php): failed to open stream: HTTP request failed! HTTP/1.1 404 Not Found in /home/content/a/f/r/example/html/index.php on line 7 Warning: main(): Failed opening 'http://www.example.org/testform/.php' for inclusion (include_path='.:/usr/local/lib/php') in /home/content/a/f/r/example/html/index.php on line 7 
I did this in what I'm calling [Part 2](http://phpmysqlrage.tumblr.com/post/5451392627/why-no-workie-post-part-2).
it's more like http://www.example.org/index.php?nav=gosomewhere and then it redirects if I alter it by adding a slash at the end, it still re-directs.
Hey! I've had this EXACT same issue with GoDaddy before! I realized that the server I was attempting to upload my work to was a Windows server. I have no idea what setting they have that cleaned out ALL `$_POST` information, but moving to a Linux server immediately fixed the issue.
I was referring to the form's action method. If your script is called http://www.example.org/testform/index.php and you're linking to http://www.example.org/testform, then you need to add a slash at the end of that URL. From this: &lt;form method="post" action="http://www.example.org/testform"&gt; To this: &lt;form method="post" action="http://www.example.org/testform/"&gt; I have no idea why you're trying to include() a file which doesn't exist.
Don't post to a directory, if you have index.php inside that directory, use that as the form action(the url to post to the form to)
yes, I made it all in LAMP before uploading it. GoDaddy re-directs, and I've updated the op.
If that's what your URL looks like, then it most definitely does not think it is a directory, and will also therefore not direct you anywhere because of it. I just checked the URL which you pasted in your submission text, and there's no redirection taking place. Your problem is something else. By the way, if you are submitting to the same page, you don't need to specify an URL. Just leave the "action" attribute blank.
I did add the slash in the action method. I didn't alter any includes or requires. I wouldn't know why anyone would alter that either. It must be from the index.php file. &lt;?php include("scripts/header.php"); //include("scripts/navbar.php"); //include("scripts/chipin.php"); $nav = isset($_GET['nav']) ? ROOT.$_GET['nav'].".php" : "home.php"; include($nav); include("scripts/footer.php"); ?&gt; so it puts the slash in that. so, I'll alter it.
From my original response: &gt;The server might be redirecting you *if you're linking to a **directory** and the URL doesn't end with a slash.* Your URL doesn't link to a directory. The problem (and the fix) does not apply.
well, I thought I'd give it a shot anyway. Thank you for the effort kind sir or ma'am.
By the way, do know that your code is subject to the [directory traversal exploit](http://en.wikipedia.org/wiki/Directory_traversal).
Indeed. It is better than no discussion though, yes? :-)
Wait... Is "ROOT" your URL? Does it equal "http://www.aypcghana.org/"? If so, that's your problem. You're opening a HTTP connection to the server, downloading the markup, not invoking the scripts. 
No, I've never heard of that until you posted it. Thank you for the information. It's my first *real* scripting and I'm doing it for a charity organization. I am planning a re-design. I'm going to try to do it like this &lt;form action="verify.php" method="post"&gt; and then have the form verify it with regex's, and insert it in the mysql database, or if the data is faulty it'll send errors back to "submit.php". This will be a lot neater than just sticking everything into "includes/functions.php", which I normally wouldn't do but I'm being rushed. This has turned out to be more complicated than I originally intended. add: did protect against SQL Injection
&gt;and then have the form verify it with regex's Use [PHP filters](http://php.net/filter) instead. &gt;and insert it in the mysql database Remember to protect it against SQL injection. You might want to look in to prepared statements which are actually immune to SQL injection. Also, read through these: http://en.wikipedia.org/wiki/Category:Web_security_exploits &gt;if the data is faulty it'll send errors back to "submit.php" Well, if you're redirecting them back to the submit script, then you're going to have to: 1. store the errors in a session on the script that your form is targeting. 2. redirect them back to submit.php using header("Location: ...."); 3. Read the session and display the errors on the submit.php page. 4. Destroy the session. 
As I've said - please inspect your headers - the one you get from the server AFTER submiting the form and look for a line that says "Location: " - the server might be redirecting you via 302 or 301 header and the POST data gets lost. Common scenario is submiting a form to http://example.com/page and beeing redirected to http://example.com/page/ (note the slash at the end).
He's invoking the script remotely using include() via HTTP. That's why it never runs; He's only including the output produced by the script. 
Phew! Had me there for a minute.
Stop downing the best suggestion! Whether you find an existing framework or establish your own, it will absolutely increase your productivity. In fact, the only thing that will speed it up anymore is actually becoming more familiar with the language.
Yes, he could have Googled the answer and probably got an answer. However, what is wrong with creating a discussion about the subject? Asking questions on reddit isn't always about getting an answer! If it were, this site wouldn't have a reason to exist because there are clearly easier and quicker ways to get the answers you need.
Thanks for the tip. I installed this on WAMP (Apache 2.2.17, PHP 5.3.5) and it works well enough. [Check this comment](http://jerodmoore.com/?p=11#comment-2). It saved me from a headache getting things running. Be sure to call it like: $image = new Imagick(realpath("some.jpg")); and not just $image = new Imagick("some.jpg"); Otherwise, Apache is known to crash the request silently and reset the connection. Finally, if you are not compiling, be sure to check phpinfo() for which compiler was used for PHP (mine is VC6 TS) and get the corresponding version of the [Imagick wrapper](http://www.sk89q.com/2010/03/vc6-windows-binaries-for-imagick-2-3-0/). 
Oh. My. Eyes!!!! Seriously?! If I ever found that in a project I was working on and the guy still sat next to me, I would conspire to have him *gone* within the month. However, I am impressed you know this, but not incredibly because I seriously doubt you discovered it.
Yup, I used it to power a "Friends of a Park" site that I made several years ago. I've long since stopped maintaining it, but they kept it up to date, and to current date it's running just fine. Honestly, though, I didn't find it very extensible, compared to some of the more popular alternatives, like Drupal. Drupal gives you the exact same auto-navigation, layout engine, and rich text editing capabilities (with the Wysiwyg module), but it tends to be extensible out to much more if needed, which is pretty handy. All things considered, though, if you're looking for something that handles a really basic layout and page management structure, C(MS)^2 is pretty decent for it.
Hehe, while this would be a simple solution I want to make sure that the photos don't go offline! I have seen "This photo has been removed" before on Imgur.
I recommend creating the rowId first. I deal with this subject a lot. If you can't create a row, what's the point of uploading the image ?
I would create the listing first, but it doesn't show up on the site until it's published. All photos belong to a listing.
&gt; can have a script that looks through the temp folder for folders that have times longer than a day ago and remove them. You could also use filectime to see when it was created, microtime filename might be a bit dodgy incase two are created at the same time, edge case I know but it could happen.
Do you need AJAX for this? Personally I would only use AJAX if it offers huge benefits over a normal form. All the time you're spending worrying about 'cutting edge' AJAX/HTML5 stuff you could be spending on developing the product and making it better for in ways your client will appreciate.
Agreed. For the first step in item creation, have a short form where they input one required field. That form creates the row and then you edit it and add images.
This is a field of constant learning (otherwise you're doing it wrong). I would say that the best way to ensure you're always learning is to challenge yourself. If he has the time to spare on getting this to work, he should pursue it. Next time he will have this mastered.
Yeah, I'm not the originator. And why not, if I left a comment what's the harm? I think it's kinda nice.
This is the way I'm doing it lately. Create an empty, hidden from view row with creation date and let user edit this new row instead of doing an "add new" form. This way you know the ID beforehand and it's easier to create one form instead of two. Add a cron job that deletes all the empty records created &gt; 24h ago to keep the DB clean.
I hate working with images about as much as I do with dealing with time.
+1, I've used Imagine a couple of times, and it's just lovely.
You'd be surprised how easy sessions actually are. http://php.net/manual/en/function.session-start.php Gotcha: Make sure you always do session_start(), or you won't be able to access $_SESSION
Been looking into it. I think sessions make sense. I just need to figure out the logistics now. My concern is that if they're using Javascript to update values, what's the best way to update my session variables too? Or would I even need to? Example: You've added 5 of Type A to your cart. The Javascript updates the cart display. But then you want to know more about Type A, so you click to go to its details page. PHP didn't get that 5. So, I'd have to run a PHP script on each change of form data?
I think the easiest thing to do would be XML requests for getting and setting session variables. Don't let JS display any info it didn't retrieve via one of those XML requests (because if it's not in the session variables, it could be wrong data)
I have no idea how to do XML requests. Sounds complicated. Do you (or someone else here) have time to set something up for me by tomorrow afternoon? I could pay $200. 
It's really not that complicated, it's just using javascript to do an http request to whatever php file. I wouldn't trust myself to help you yet, but I'm sure someone on reddit would be willing to.
So, have a PHP file that writes XML that the Javascript calls (sending variables if necessary) and reads?
Nope... in essence whenever you're updating the cart you do an "[XML HTTP Request](http://www.jibbering.com/2002/4/httprequest.html)" to a PHP file that will either SET session variables, and/or GET session variables. If the user is adding things to their cart, you'd do xmlhttprequest("updatecart.php", $itemname, $itemnumber); (the same as doing updatecart.php?itemname=towels&amp;itemnumber=0) or whatever in JavaScript, and updatecart.php would update the session variables and respond with the updated cart info, which your JavaScript would then update the HTML with.
Also, [jQuery makes doing this about as simple as it can possibly be](http://api.jquery.com/jQuery.post/). Further, I would suggest using JSON instead of XML as it is a format more easily generated/parsed by PHP and JavaScript. PHP script returns this from `json_encode()`: `{"key":"some_value"}` In jQuery it's as simple as this: $.post('script.php', { post_key: post_value }, function(response) { alert(response.key); // alerts 'some_value' }, 'json'); `{ post_key: post_value }` is POST data you are sending to `script.php`. If you send `application/json` headers from your script jQuery will parse it as JSON or you can use the `dataType` parameter to tell jQuery how to parse it (in this case as JSON).
Thanks. I think I'll go to lunch and hope someone takes me up on the $200 offer when I get back. If not, I'll have to try and figure this out myself.
Have you looked into using jQuery for your JS framework. It makes ajax requests like this really really simple. And I wouldn't do XML requests... you're making things too complicated. Just use standard ajax pushing with POST. You can then feed into the session variable using the content from the $_POST. Reply back then with a JSON object json_encode($obj). There are some security concerns, namely watching where this session update is coming from, but for learning purposes you don't have to worry about that.
It's really simple, I'll help you for free if need be. Just give it a try and then post back with what you wrote. I'm only willing to help people that first try to help themselves.
You have to save the values inside php basically. You could do it with cookies and javascript, but that's not a good solution. You can use a technique called ajax which would combine both javascript and php, but would most likely be a step too far for you right now. Just strip out the javascript if possible and use the direct php route. 
It's not simple for someone who doesn't know what a session is. What they are talking about here is basically Ajax. It's how I would probably do it given your circumstances, but because you're obviously somewhat new to all of this, you'd be learning so much at once that you'd end up creating a massive mess and getting lost in it all. As I said to you previously, if it's possible to strip out the javascript and go pure php, go that way. Trust me.
Magento has all of that built-in .. Magento is a big/heavy system, so consider it carefully
I've always done: ` /* this_is_commented_code(); //*/ `
Thanks! Probably not, but in the future I plan on adding a txt file in there with video info- link, title, duration, description, and author. For now I see it as a way of stopping people from streaming it from the site.. but that might not even be a concern as it tracks/limits the number of hits on download.php anyways.
I can do it for you today for $200, providing you're just talking about the session bit. PM me if you like.
I tried it on [this video](http://www.youtube.com/watch?v=e5Iey0wDqBE), but it didn't give the option for 1080p.
Ah, I don't have 1080p available yet- give me a few minutes to finish the timestamp/duration thing I'm working on and I'll get that in there :) EDIT: Added! :D
Just wondering, how do you get the original FLV for the videos? Did you scrape the page source code for "fmt_url_map" or whatever? That's the only way I know of :p Some more info into the technology behind this would be interesting to know :)
Yep! I made a little bash program originally, if you want to see how I did it in bash: https://github.com/slowbro/ytget/
It offers me 360p+ versions when the video is only 240p. It lists audio formats in the dropdown when I selected video.
Nicely done my friend, testing it out right now
Yeah, I broke someting while trying to get 1080p working (see above)- Should be back to normal momentarily! EDIT: All fixed up! :)
Thankyou!
Incredible, it doesn't use a java applet. [applause]
Boooo java! Never!
Check out the header() function
ODB's right: if (selected_link){ header("Location: selected_link"); exit(); } If you aren't using output buffering, just make sure you don't send any HTML before the call to header() or it won't work. 
I entered http://www.youtube.com/watch?v=pc0mxOXbWIU and it just span around not doing anything? EDIT: Oh it didn't like http:// edit2: &gt; Permanent Failure :( &gt; Your request has unfortunately failed- most likely a download issue from YouTube. &gt; Try again in a couple minutes, sorry about that! 
Very cool! One question about the audio-only bit rate: why 152kbps, instead of the usual 160kbps or 192kbps?
Thanks! I was going based on [this chart](http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs) - the highest bitrate I can grab is 152kbps (except for quality 45, which is a very rare find).
Pretty nifty! One thing is I wasn't able to download a video from a Youtube user's page. Also, do you plan on releasing the source code?
Thanks! Your best bet for now is to right click the video and select "copy video URL"- then paste that into the box. I have no plans to release the source *yet*- after I clean up the code and get it working 100% I most likely will.
Sometimes it takes a while for the it to load the youtube page (which is the spinny thing- it's loading video types available, duration, etc) Try it again for me one more time- I fixed a couple bugs and it should work good now.
Would you do an API?
Advanced feature doesn't seem to be working. When I enter start and end time it just redirects me to main page again.
What are you looking for in an API? I might be able to!
Well, to do it simply, you can use the php native function... wait for it... [mail](http://php.net/manual/en/function.mail.php). I'm not sure about HTML emails and special formatting, but there's a blurb on that page that points to [pear mail](http://pear.php.net/package/Mail_Mime).
I got another Permanent Failure, maybe it doesn't like that song. I'll try another. Ya, for whatever reason it didn't like that first song I linked. I tried again with http://www.youtube.com/watch?v=5aoaynVf0Z4 and it seems to be working fine. Yup, worked great :)
Sorry, logic fail- all fixed.
well first let me report a bug link i tried : http://www.youtube.com/watch?v=ZEv_8QUEgNg&amp;hd=1 bug : Parse error: syntax error, unexpected $end in /var/www/gettu.be/index.php on line 671 After the 12 seconds of being waiting for it to be downloaded. i would like to have feed the application several links and have it converted to the youtube flv link so i can download it you are converting to avi, but i wouldnt need it. 
Yeah, I was gonna say- even my bash script doesn't seem to like that. Probably CeeLo disabled embedding, or something weird. I'll try to see what's going on, glad another link worked though! EDIT: Ah, I found the problem. I guess YouTube is trying to verify my age (lol), I'll try to find a way around that.
f5 real quick; that was me breaking everything fixing another bug. As for the API- I'm not sure how soon I can get one up. If you run Linux, try my program [ytget](https://github.com/slowbro/ytget/)- use it with the -n switch for no-encode. I'll try to get a robust API up soon!
just to check, you're aware that by &lt;?= he means doing &lt;?=$variabletodisplay?&gt; and not &lt;? echo $variabletodisplay; ?&gt; right?
I've been using [PHPMailer](http://phpmailer.worxware.com/index.php?pg=examplebmail) for years. There are other libraries out there, but I never felt the need to switch.
check out the "onChange()" javascript function, and apply it to the select.
PHP's mail function will let you send emails. You can send HTML emails with it but it's quite tricky. There's some pointers on PHP.net's mail function page. If you're happy with using objects in PHP PHPMailer is really good and makes sending HTML emails a lot easier.
Very good point. I created http://wap4.org and quite a few videos have been downloaded more than 100 times but because converter does not eat up all bandwidth yet, I have ignored this issue... You have little HTML problem in IE7 and IE8 with green check marks: This is how it looks like in IE7: http://imgur.com/9XAmX and IE8: http://imgur.com/JKxnL Haters gonna hate but I think the best way to fix it is to use: &lt;table&gt; &lt;tr&gt; &lt;td&gt;link, type, format&lt;/td&gt;&lt;td&gt;input fields&lt;/td&gt;&lt;td&gt;checkmarks&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
I have my own "Youtube" converter and only option would be to make people pay for api because ffmpeg eats much server resources and it would not be wise to make public API...
Yes. Those are called short tags, which are disabled on a lot of servers and completely breaks code, reducing portability and reuse.
[Pear::Mail](http://pear.php.net/package/Mail) is the easiest way.
Might be a bit overkill but have you tried [SwiftMailer](http://swiftmailer.org/)? It has plenty of [documentation](http://swiftmailer.org/docs/introduction).
I've used Flourish to replace a cluster-fuck of code that built the mail message body. They did everything manually but incorrectly. Try to do a rich text e-mail, with plain text fallback and multiple file attachments with mail(), it's a huge pain in the ass. http://flourishlib.com/docs/fEmail
Just be sure you whitelist this action.
aha I understand now, yeah it would be nice if was something you could rely on 
There's also PHPDoctor: http://peej.github.com/phpdoctor/
mail("email@domain.com","subject","message body","headers info"); EDIT: fix'd
please tell me the site isn't hosted by GoDaddy.
Pretty sure you can just send some HTML string in the message body parameter and it'll come out HTML formatted at the other end.
When you say it is "quite tricky", what that actually means is that putting HTML emails together is an entirely new level. PHP's mail function provides the absolute basic and raw interface into email functionality. Constructing HTML or other multi-part emails requires understanding how emails are constructed and using the mail function to construct them. That in itself is not a PHP problem. However, use a decent PHP library (lots listed here) and you can use someone else's expertise in constructing HTML emails.
still got audio options in the drop box after selecting video
-get youtube vids -quality selecter -HERPADERP
Wrong. It's receiver, title, text, headers.
No releases since Jan 2010? That's unfortunate. edit: [new location](https://github.com/swiftmailer/swiftmailer), see below
No releases since Nov 2009? That's unfortunate.
I think that's because it's more or less "finished" and thus very stable. Symfony 2 uses it as well, I believe.
What browser? They should be greyed out. If I completely remove them it breaks in Chrome and IE.
Ugh, IE always ruins all the fun. I may fix that later, thanks the for tips :P And I like your site!
very, cool especially without the java applet. However, as the site is now, it takes a *really* long time to download and process. You're probably using one server? But, I think your bash script is going to be more useful for me since I already have/don't mind using other tools. Thanks! 
Yeah- someone added ~10 copies of the video "Nyan cat 10 hours" to the queue while I slept (lol), those are gone now and we're back on track. With just the one server and no one doing stuff like that it only takes about 3-5 minutes per video. Thanks for the kind words :D
It would probably have to be heavily rate limited. Even niceing it to the lowest level doesn't help, lol. I'm not sure if/when it will be a feature.
I don't mean to degrade the project, but the appearance is a little odd. The old and new stuff is mixed thus confusing, and the [outdated] [site](http://swiftmailer.org/) isn't clear about the new [swiftmailer github](https://github.com/swiftmailer/swiftmailer) location. It appears it's moved there, but without releases. Anyway, good to know it's active. Edit: ~clarified info re: dev situation
How could ANYONE forget that?
Sorry, I didn't know. That is indeed sad. I guess Fabien Potencier has his hands full with Symfony 2 for the moment.
It's okay to downvote the above... I was having a "I wish more Open Source projects were active" moment. ;)
I had to do this, seemed to work out fine. I had it handle a lot of the processing through ajax, so the browser window just displayed a div with further info after the server was done doing what it's gotta do.
Who are you hosted with? I just want to make sure I never recommend them to anyone on accident.
It's a free host. 000webhost.
That's interesting. That's a very decent amount of webspace/bandwidth. I wonder if they are profitable by their other options they sell there. Do you get a lot of spam e-mails from them?
Same here. All I had to do for netbeans was install xdebug on the server, set up a tunnel between local and remote machines and click debug. Spent a day trying to setup phpstorm with remote xdebug but no luck.
http://www.php.net/~derick/meeting-notes.html#named-parameters
In general, I think it goes: String functions (haystack, needle) Array functions (needle, haystack)
No good reason, it was just bad planing. Unfortunately it isn't an easy fix without breaking everything.
The whole strip_tags vs stripslashes is a popular beef too. When you have so many people developing a language these things are bound to happen.
Welcome to PHP. Looks like you're starting to get the hang of it.
&gt; Any reason for this, that I'm missing out on? PHP is a thin wrapper around a whole bunch of C libraries. In a lot of cases, the naming convention comes from the underlying library. For example, the mysql functions are exact mirrors of the mysql C library. Same for the GD graphics library. In other cases, it's just different systems designed by different people.
Intellisense and experience help.
I wouldn't handle it. For any project I prefer to avoid external dependencies. My applications would have the framework files and any 3rd party libraries within it's structure. I've been through far too many nightmares of handling external dependencies, and have found it's much wiser for everything your app needs to be within it's structure. Disk space is cheap, who cares if you have multiple copies of jquery ui or something? And it could be a pain to keep it all up to date, but as a general rule once I start developing an application I don't want anything to be updated. Unless there's a security glitch in a 3rd party framework I want it to be a static version that will not require testing to see if an update broke the app.
to make a more precise ranking algorithm you should consider using MySQL cases in your order by clause. I'll try and grab you an example but it's very late/early here, EDIT: this thread more or less explains what I mean: http://www.sitepoint.com/forums/mysql-182/mysql-order-relevance-366485.html
I use Zend_Search_Lucene, it's a php port of Lucene search. Way better than any mysql search I've seen, and allows plenty of flexibility in how your search works. Also it's easy to integrate into other systems - cakephp, opencart or your own web app - thanks to the modularity of zend framework.
When you say "elegant", referring to Ruby, do you mean less "magical"?
Exactly. Less "magical" but more "snappy".
It's because many of these functions are based on functions from other languages, and generally adopted the same parameter ordering.
In many cases, but not all. preg_* are string functions, basically, and they're (pattern, text), whereas the str_replace(/etc.) are (text, pattern)
svn:externals or git submodules. The stuff is always in the project when it's deployed. Just cause I think it's important to say it. The stuff is always in the project when it's deployed. stuff, project, deployed. deployed. dep.... 
Yeah, everyone agrees: this stuff sucks. They did make object oriented versions of a lot of the library, but I think String stuff is untouched...
I'm using MySQL full text search. It doesn't handle words &lt;3 letters or very common words. If the full text search doesn't return anything I then fall back to a LIKE query, which is fine for the small volume of traffic and content my sites have.
I'd like to see a ground-up redesign in, say, PHP7. Make it more object-oriented, fix the inconsistencies, etc. And then set up aliases to the old functions so as not to break backwards-compatibility.
I outsource it all to [ElasticSearch](http://www.elasticsearch.org/), a Java-based, Lucene-driven, schemaless JSON-grokking document database/search engine. Because it's all HTTP and JSON based, it's super-easy to integrate with PHP. Because it's schemaless, you can basically throw arbitrary but consistently structured JSON documents at it and not need to worry about building all the indexes yourself. Unfortunately because it is Java-based, you'll need a dedicated machine or VPS to run it. If you're on shared hosting, you're out of luck.
for the lazy: $headers = 'MIME-Version: 1.0' . "\r\n"; $headers .= 'Content-type: text/html; charset=utf-8' . "\r\n"; $headers .= 'From: '.$_POST['name'].'&lt;'.$_POST['email'].'&gt;'. "\r\n"; mail('"your name" &lt;your@email&gt;','email title',$_POST['message'],$headers);
I'll wait to even see PHP6 become real...
Great advice - I've only had to use it marginally a few times, but good to know there are better alternatives.
My god, yes. I want nothing more than to be able to catch OOM errors.
You can always change this if you control the MySQL server. For my apps I disable all stop words and let 3 letters or higher work (I think 4 letters is the default).
Since no one mentioned it yet the query you have is also very slow. You should always avoid putting a wildcard on the left if you can.
Yip 4 is the default, and yeah I change it to 3 as well.
also keep in mind that header doesn't halt the script. Hence the exit in the example. The exit is important.
Sphinx or Lucene - any other way to handle searching is an ugly hack. Even the MySQL fulltext search is slow and featureless.
ob_clear() before you send any header info.
explode ($needle, $haystack) always get me.
The more I think about it in these terms the more I start to think that this was a good decision by the people behind the language as it allows people already familiar with those libraries to get straight to work. And for that matter, I've always thought it was arrogant the way the likes of Ruby throw out 40 years of familiarity with C-like syntax 'just because'. PHP is the Slackware of programming languages now that I think about it. Vanilla everything and not as shiny as the competitors.
look at fulltext searching http://dev.mysql.com/doc/refman/5.0/en/fulltext-search.html this is only available on a innodb table, not a myisam table. You might want to develop your own class to do fulltext searches as you can reuse it on any table, on any database you connect to. (you may need to tweak sql statements on different dbases) there are other limitations to mysql fulltext as well, hence building a class that can use AND/OR/NOT on your space, + and - between keywords. first look for words in "" quotes, then split on a space, then run your statements recursivley on the keywords + no+ and -. You can then build whatever functionality you need after that.
Thread saved, I'm in the same boat.
Upvote. Been using NetBeans for a few years now and function naming/param ordering became non-issue for me.
This actually sounds pretty damn interesting... I'll look into it and try put something together. After checking the link though, it says "Full-text indexes can be used only with MyISAM tables"... which is fine because most of what I'm going to use it for does not rely on transactions... Thank you very much =D Do you know of any existing classes that already use this? If not, I'll definitely post whatever I come up with...
my mistake, sorry i got the tables back to front. im using innodb tables, so hence created a class to do the searches in a fulltext sense. I did find some examples of functions when i created my class, but i have my own library that i built, so i built a class to interact with my library.
hahaha no worries =) just the fact you suggested it has saved me what I thought were gonna be hooouurrsss of work =P I've got it to work using just a very bare-bones query. Now I'm trying to get it so you can get pretty search URL's for sharing (ie, foo.com/search/heat+transfer+equation). Any chance you could share your implementation?
why post responses if you genuinely have no clue as to the correct answer?
Yeah. This is the only thing I hate about NB.
~drool~
header() just sends the header. The browser will go to the new page but the original php script will finish executing. This can be bad if the rest of the script has any side effects such as session variables or file/db updating. So unless you want this behaviour then it is best to get used to adding an exit statement after the location header call. Best of luck
Having used PHP for over a decade, C for years, Java, and more recently Ruby, Python I completely disagree with you. Inconsistency is a pain. I take your point about those who've worked with the C libs underlying the PHP functionalities, but how many of those people are doing what you suggest and using PHP after having used the C libs? Versus people who've come from nowhere and learnt PHP as their first language? Versus people learning PHP for work, having come from another language altogether. It's a bad design decision.
Smart Auto quotes are one thing. This feature is anything but smart. Despite an hour of looking... A couple of us couldn't find the off switch either.
If you want to change from double to single quotes (or vice versa), select the whole string (including both quote characters) and hit the quote character you want to use.
google: how to socialize with the unsociable
Agreed, but I think that's because it's both a string and an array function, so you tend to go for the string version ($haystack, $needle) first. I do personally, since in other languages the string is the object being operated on (e.g. Python's `','.join(list)`)
Ok, that's a good response I guess. But you do keep it in the library folder (library/css, library/js) within the project?
Great point, I failed to notice that myself! Upvote for you, Sir.
Python's ','.join() is a wart too -- it makes logical sense (I understand why it was done), but visually it's just wrong...
No, keep all js/css/images in the "public" folder. I think external dependencies are a nightmare as well. For example, you symbolically link the Zend Framework on your local workstation and symbolically link it on your server. You run the risk of the ZF version producing a mis match. Please read [here](http://framework.zend.com/manual/en/project-structure.project.html) for the ZF suggested project directory structure.
Have you ever come across a geographic search module for this? i.e. do you know of a port of *Local Lucene* to PHP? I've been looking for one for years, especially one that integrates multi-faceted searches. Edit: I guess what I am after is Solr (Lucene with multi-faceted search) with Local Lucene (Lucene with geographic search capabilities). I'm not even sure if that is available as a java implementation, let alone a PHP port, but it is worth me putting the idea out there, perhaps.
Awesome! It works! Doesn't work on the html code, but that's ok the problem occurs in the PHP.
Please don't call this clean I would hate for a newcomer to PHP to think this is in anyway a good example of PHP and follow it.
I use http://sphinxsearch.com/ A lot of features, can be integrated as mysql engine.. Can act as mysql server(understands mysq protocol) etc etc.. It's the best.. ;-)
I took direction from reddit and use [IndexTank](http://www.indextank.com/). Works with PHP pretty well, does autocomplete js for you, sorts however you want, relevance, age, a combo of both, etc. Even lets me do filtering!
ok, thanks a lot for the answer, pretty much what I was looking for. I'm currently being trained by a developer who keeps all his libraries apart and then merges the project with them using a software whose name I don't recall right now.
which one would you consider a better alternative? swiftmailer or phpmailer?
now with PHP5.3 and being able to overload pre-built functions using namespaces, someone should write up a library that aligns every function into a standard variable order and style.
As do I. Lucene is awesome.
He did have the answer.
Seeming as nobody else has actually given an answer yet... Tools.. Options.. Editor ..Code Completion.. Uncheck "Insert Closing Brackets Automatically"
I've been developing in PHP for almost 10 years and i coudln't tell you the order of teh arguments in `strpos()`. I google it every time. PHP is just badly designed.
i started doing this for strings, then i realized it breaks down because PHP doesn't support operator overloading, so you can't do e.g. $string = new String("Hello"); $string .= new String(" World")
I've been skipping over the TDD part. Made things too complicated for me.
that's because of how objects are assigned with the new keyword. try using a factory method instead, like String::factory(' World'); edit: my suggestion also wasn't making it completely OOP, but like making sure everything was a equal style and param order.
i love indextank. definitely recommend.
my point was that you can't use normal string concatenation operators like .= on string objects because the result will be a normal string and not a string object
It's somewhat problematic to test the domain, because a request header can be spoofed for the referer variable. If you are really concerned about it, you can make the password change a two part process, sending out a confirm email, or at least a notification email that the password was changed.
Require the user to enter their existing password as part of the password change process.
Orange, just out of curiosity how would you go about a 1 step process? i have a similar issue exception i'm generating a 1 time hash that i don't want anyone to link to externally. currently i check referrer but like you said, it can be spoofed.
Hmm... I see. That might work. Thank you!
This is called [CSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery), Cross-Site Request Forgery. There are a two simple things you do to prevent this scenario. * Respect the HTTP specification - know the difference between a GET and POST request. * Require a unique secret token to be sent along with every POST submission. This is done by generating a secret string as a hidden form field: &lt;input type="hidden" value="&lt;?= .. secret .. ?&gt;"&gt; This token is saved with the user's session - when the user submits the form, the token is sent along, and must match the one saved with the session. For this specific scenario, you'll also want to request the old password before allowing the user to change it.
Hey, this is brilliant! I knew there had to be some kind of standard solution for this. Excellent. Thank you! :D
Bingo. A lot of frameworks these days have built in CSRF helpers for form generators, but if not here's one you can incorporate into any form quite easily. https://www.owasp.org/index.php/PHP_CSRF_Guard
In the above example, the single best solution would be SSL. It's not foolproof, but it represents the highest bar to this sort of Man-in-the-Middle or CSRF attack. You could also create tokens based on hidden fields and/or cookies to increase the level of difficulty for the attacker. Set the token as a cookie onsubmit of the password form via javascript, then test for the cookie before completing the password change. Recaptcha wouldn't hurt either.
I know filiped already basically explained it but heres a link that I found very helpful that explains the problem and how to fix it using PHP. http://www.serversidemagazine.com/php/php-security-measures-against-csrf-attacks/ Hope it helps.
You may want to do what I did to avoid forgetting some form somewhere. Assuming you are including a base file to check for permissions, add in there a check so that if $\_POST is not empty, it _must_ contain the secret token. If it isn't there, abort and report somewhere (but do not immediately assume it's an error or a hacker.) Also, in my database class, no writes are allowed unless it is a POST (unless explicitly requested by the caller function, for cases such as updating a 'last seen' field.)
The "token" is typically called a nonce. Google that and php and you should be on the right track.
That's good to know. Thank you!
Cheers, i was just thinking about the hidden form and such.
TIL, thanks!
one simple/hack way for small sites is to union multiple queries together and add a "score" column. then show results by score. you'll want to break apart the search string so you can AND, and OR queries, scored differently of course. you can remove suffixes from words; like trim off the 'ed', 'es', 's', etc... select 1 as score, * from cms where page_title like '%$search%' union select 2 as score, * from cms where article_title like '%$search%' union select 3 as score, * from cms where article_body like '%$search%' order by score
It sounds like you want NFS. You want to set up an NFS share on your storage server and then connect to (mount) it from the web server. You can then access the files on the storage server exactly as if they were on the web server. Nothing to do with php is needed beyond accessing the local file system. That's not to say that you can't do it with php, but it will be slower, harder, more complicated and a pain in the ass.
I agree, and I don't like it at all either.
Except you could still perform the same kind of request forgery if you create a form with the old password field.
I'm glad I wasn't too far off. It seemed to be the most sensible way of doing it. Mind you, I was still not certain if I found the right terms and technology. Of course, if there is another more preferred way of doing it I'd like to know. Your description is very relieving; I definitely want to use the network connection made by the servers to transfer files. I'll just have to get it up and running and see how transferring files work. 
They have to get to the page first, which is usually behind an authenticated page.
What exactly is your motivation for trying to define your form through the ini file? I've experimented with it a time or two before but and found it quite easy to get something simple working. I started hating myself for the choice because of two things: * Adding more advanced logic to the form was way easier to do had I just defined the form as a standard class to begin with. * Other people on the project were not familiar with this, in my world uncommon, way of handling forms. Not that it's complex or anything but it deviated from the rest of our codebase and thus raised a few eyebrows :) I, personally, is quite fond of Zend_Form. Sure, the whole decorator pattern does require some work if you're not familiar with the concept to begin with - but hey, just get to it :) I find it a very flexible solution which lets me define my forms in a programmatical way and makes for easy abstraction of logic and presentation. The validation works just as I want it to and is easily extendible - we've done an integration with ExtJS so that we can define our forms' structure and validation rules in PHP and be used in ExtJS if the user is using our JS-based frontend. I'm getting to far away from the subject. I apologize. My point is that I would like to urge you to considder what you expect to benefit by defining your forms in INI files and generating them through Zend_Config. Perhaps you, like I did, will experience that it was a bad choice in the long run. For any suggestions on where to read about it, I really don't know. I recall there being a decent introduction in the ZF Reference Guide and after a few attempts on Google I found this which also seems to do a good introduction: http://www.vayanis.com/2008/03/17/using-zend_form-with-zend_config/ 
I'd recommend double cookie authentication. Use a token stored in the cookie which is verifiable, and include that as a hidden field. This also works for AJAXy type things.
he also said &gt;For this specific scenario, you'll also want to request the old password before allowing the user to change it. So... if person B already has the password.. then you cant save person A 
What you want is a reverse http proxy. You absolutely do not want to use nfs. Edit: I'm on my phone, will explain fully later if no on else does.
Easiest way to do this is to not allow users to change their passwords. If you use a form token, you just scrape it before submitting the form, thats easy as hell. I've wrote several bots which this is a common hurdle to overcome.
There is a "[similar_text](http://www.php.net/manual/en/function.similar-text.php)" function that might be what you need. 
i was using chrome
thanks a lot for your answer. I might have been somehow misled into believing that this was the "easy and smart" approach to Zend_Form. I'm actually pretty new to PHP frameworks so I'm trying to figure things out. I will however do some further reading on the matter so that at least I have some first hand experience on it. I have some rather complex CRUD project right now, so I want to do it as DRY as possible to prevent myself from going nuts. 
There are 4 fuzzy matching functions: - soundex: a simple comparison of basic pronunciation - metaphone: a little more thorough comparison of pronunciation with some understanding of phonetics - levenshtein: calulates similarity based on how many add/delete/change operations are required to change on word into another. - similar_text: returns the number of unique characters in both strings So, the first two operate by comparing the pronunciation of words. They would be best at matching up words that are spelled like they sound, even if incorrect. Soundex is likely to be faster than metaphone, but metaphone is likely to be more accurate. The latter two compare similarities in letters. These might be a bit faster and might be a better option if you're looking more for typos than misspellings. You might just play with them and see for your use case which appears to be most accurate. Keep in mind though that they're all fairly slow. Also, mysql natively supports SOUNDEX in queries which may be an option if you're trying to match against a database (though again, it's slow, so it's probably best to store a soundex key of values in the table and match against a php computed soundex value). 
this.
no, he didn't. the reason is that the core function names are named as such is because they match the names of their counterparts in underlying C libs. i think it was a poor decision in PHP's history, but that doesn't make his answer correct. ninja edit: the top-voted [comment](http://www.reddit.com/r/PHP/comments/hc881/consistency_in_php/c1u9oqu) explains this as well.
I know you've solved the original problem but in the future you'll find very valuable information simply by Googling "owasp cheat sheet". That site has various guides on how to secure your sites against SQL injection, XSS, CSRF, and more.
He did answer the question, because it wasn't about "core" functions, but about general inconsistency. And there are LOST of inconsistencies, and they exist for a lot of differnt reasons, and that means he is correct: bad, or I'd say lack of, planning as the both the cause of inconsistency, and the reason PHP is so popular.
In this particular example you are probably looking for the SQL keyword like: SELECT * FROM table WHERE restaurant LIKE '%McDonalds%';
Randomly generate it each time and discard it. Nonce means "Number used ONCE, so it seems pretty hard to get to that number if it is only valid the one time. 
It could be, were you using an API or just trying to hijack the forms / intercept the data?
I contacted them and they sent me this link: http://blogs.jetbrains.com/webide/2011/03/configure-php-debugging-in-phpstorm-2-0/ I setup an ssh tunnel and i'm happily debugging in phpstorm now.