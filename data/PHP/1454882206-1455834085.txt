&gt; but there's a number of issues which make it unlikely we'll actually see them in PHP I may be a bit out of the loop on this one but... what issues? Technical or ideological? Cause if it's the latter then that's extremely disheartening. I prefer your RFC to nothing but it still seems more like a band-aid solution, the old proposed named parameters syntax actually looks less complex to me.
If we all thought like that we would never progress as a society or as an industry.
There are two things that, more than anything else, improved my abilities as a developer. Showing other people my code and have them criticize it and looking at other peoples code and learn from it.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on [Freenode IRC](http://webchat.freenode.net/?channels=%23%23php) ([nickserv registration required](https://freenode.net/faq.shtml#nicksetup)).
/r/PHP is not a support subreddit. 
Join the slack channel, its fun reading all the drama some days!
Naw, dont be sorry.. i never really thought about being a perfectionist that way. That leap of faith and to embrace the "possible" oncoming criticisms is the hardest thing (in my mind) to deal with.... but it makes sense that it will eventually make me better.
The OP is even doing that in comments! And if they're using OS X or Windows 10, typing such characters should be easy.
I don't understand how having the verifier (in the last section) prevents timing attacks. Wouldn't it make it easier to determine which records are valid, since `hash_equals` is only run when the user record exists? Edit: and wouldn't it be just as effective to do `hash_equals($selector, $user['selector'])`? I am just not grasping what the point of the verifier is, since both values are exposed publicly.
[Well you told him](http://i.imgur.com/xgz9nkR.gif)
Try giving Lumen a try if you want to stay in the laravel world. 
I like that answer, i don't think you should reinvent the wheel but you could try to figure out if you can make that wheel spin like a motherfucker. But i think you should nitpick abit aswell :)
I've used a technique similar to this for one-click email links. I wanted my users to be able to one-click accept/deny certain things. The process would be as follows: 1. Event that requires user approval occurs within the application 2. PHP arrays containing "accept" and "decline" decision data for that user/action are generated 3. Both arrays are encoded as JSON strings 4. Both JSON strings are encrypted 5. Both encrypted data blobs are base64 encoded 6. Both base64-encoded strings are included in links in the email After a user clicks, the whole process would occur in reverse.
How exactly is this data encrypted? Pre-emptively: https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide
What are the ins and outs of this number? What's it all about? Is it in case of memory leaks, to start afresh after every 100 requests with a clean slate? 
These SEO posts get irritating.
The actual encryption happens using PHP's mcrypt library. I used the example on the [mcrypt_encrypt](https://secure.php.net/manual/en/function.mcrypt-encrypt.php) page as a starting point and changed the configuration until I found what was suitable. I'm using the `MCRYPT_RIJNDAEL_128` cipher and `ECB` mode (the latter part admittedly I do not understand so well). I realize that using `mcrypt` in the actual application code is probably far from ideal, but this is not a mission critical component at all. I just needed something that was a bit better than `base64_encode`.
[This is everything you need to know about ECB mode](https://blog.filippo.io/the-ecb-penguin/).
Hah. Well shit. I noticed this "chunking" when I was encrypting different values for different event/user id values. Guess that part makes sense now. I definitely did not get the "this is really secure" sense when using it for this purpose. On the bright side, each pair of links can only be used once, so I guess the risk of a replay attack is low. Either way, I will look at the stuff you linked to more closely and switch to a safer library.
Those are neither good questions nor good answers. Source: was preparing for an interview (as the interviewer) whole weekend.
Don't be thay silly. The entire intention for this post is not to help people with interviews but only to snatch a bit of traffic from google. Consider it as a randomly generated text. 
Sorry, I mistyped, I meant to say ECB. I found a common listing-page where I'm quite sure the encrypted urls only differ due to ID-numbers *also* present on the listing page. So basically I find the 8-byte-block that changes, assume it encodes a suffix like "d=123456"... The bad (?) news is that it's almost easier just to fix the code (at least, make it *incrementally* better)... Although I'm certain somebody would complain that all their bookmarks stopped working, so that's something to check first.
&gt; Scrapbook provides more variety when talking to the cache server: e.g. conditionally setting data (cas, replace, add, ...) - I needed some of these at one point, so that's mostly why I started developing it Can you be a bit more specific, what does this mean, conditionally setting data? Since this triggered you to create another project of which the end result turned out to be mostly a copypaste of stash(in my eyes), the curiosity is killing me :3
You're right. I feel a little bit stupid for not having tried that first üòÄ Added it to the blogpost.
&gt; But he bashed the shit out it (In a nice way) because based on the explanation of the code didn't match the standard way of doing it and there was no better way of doing it. Do you know how often people say my idea is stupid. All the time. Do you know how often they end up doing my idea after their idea failed horribly? All the time. I literally had ##php on freenode all gang up on me and say my idea of having a mock server to assert if there if a HTTP request actually worked was retarded. I wrote a crappy version that did the basic stuff, but then I discovered robohydra and other projects other there doing this. I also had an open source project that I was using to build my crap version refuse my idea (for me) to modify their project to allow doing something to be easier. Basically saying that was stupid. They implemented it about a year later. Just because people bash something doesn't mean they're right, it doesn't mean they're wrong. It just means they didn't like it. Sometimes you do stupid stuff, some times you do smart stuff. No one is perfect.
Why isn't the diff tool smart enough to just highlight the comma and not the whole line? 
[removed]
Then the encryption gets broken and you need to change the key...
Stash (like PSR-6) basically supports get/set/delete/flush. You could fetch a value &amp; depending on what it looks like (or exists) may want to alter it and save again. When dealing with a lot of concurrent requests, by the time you store your new value, it may already have changed since what you had read. I needed safe atomic writes: with CAS, that value isn‚Äôt stored if it has changed in the meantime. Similar for add/replace/increment/decrement. *Stash also lets you ‚Äúlock‚Äù a cache item. It‚Äôs meant for stampede protection, but could maybe also be used for above (not sure, haven‚Äôt tried)* Saying it‚Äôs a copy-paste of Stash if a but unfair IMO :) Both implement PSR-6 and both are about cache so obviously have similar features. Architecturally, they‚Äôre very different though: Stash is higher-level (pool/item) and a more ‚Äúnative‚Äù PSR-6 implementation. Scrapbook is lower-level (although it also comes with a PSR-6 interface for compatibility)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'l try that out, thank you!
Separate your interface from your class file. The interface isn't supposed to be a "road map" for a single file, but a "road map" for future files. For example, if I wanted to make a Bitly class I could inherit the same interface making the classes interoperable in implementations. Keep up the good work :)
Does that mean the verifier changes every time?
Plus arguably more importantly is that your VCS history is also line-based, so doing this leads to less digging when you're trying to figure out what you were once thinking 
Then it's a problem with the diff. I think it's sad when we change our grammar or code style depending on some tool.
With the trailing comma it's also easier to add new items to the array. So it's beneficial for both Git diffs and the developer.
Yes, it's unique per URL.
Idiotic comments on HN . there is nothing cool about PHP programming. It's cheap, it has tons of libraries for almost anything, that why people use it. You can run production websites on $1 hosting . Try to do that with NodeJS /s That's why it is so successful , really. People talk about PaaS like it was just invented but hosting providers + apache servers pre configured to run PHP were/are a PaaS. If people had to setup Apache themselves on a server , PHP wouldn't be that popular . 
Why is it still half-baked after all this time?
I used Lumen. I always feel like I'm developing in Laravel and it makes me sad when I rely on a feature and be greeted by a `Class not found` error. Realistically, Lumen appeared long after we started developing on Klein. :)
Per URL or per request? If it is per URL, what's the difference to an N+M bytes long identifier without the additional hash? Wouldn't guessing be just as hard?
* Women find it irresistible * It's very popular, which means there is a lot of free help out there and plenty of examples to study. I think it's a great choice for a first time web developer.
This is great! I think this would be great and would hope to see this integrated into core as well!
&gt; I have heared that PHP 7 is twice as fast Bullshit. &gt; Is there a possibility to try it out for free anywhere? Yes. http://localhost/ is a perfect hosting service to toy with PHP. &gt; If i am going to use a raspberry pi, should i use apache or nginx? Nginx I'd say as it's less resource-consuming. 
It's both beneficial and unfortunate that this is implemented as a PHP extension. Beneficial for efficiency, but unfortunate for anyone that is using HHVM (or PHP 5.6) and cannot use these structures. For those of us that aren't using PHP7, including HHVM, there is [equip/structure](https://github.com/equip/structure).
Well, i got a really nice looking girlfriend when i was teaching a PHP programming class. #1 point is definetly true. 
&gt; And regarding the part of non paid core team, I wonder what is the role of Zend then. AFAIK, They DO have one programmer on staff who's job is to work core. Other than that, they have a bunch of software, services, training courses. It's my understanding they focus more on promoting enterprise adoption of PHP.
That question is best answered by the ERRATA file in random_compat: https://github.com/paragonie/random_compat/blob/master/ERRATA.md
I think a lot of people confuse 'cool' with 'efficient'. Do 'cool' on your own time, but be _efficient_ on company time. I've often found that the 'cool' technologies wind up taking 10x longer to get to the goal line.
bro u can do that in ruby on rails n get VC by end of the week /2008
Fairly common in SQL: select a.column_1 ,a.column_2 ,a.column_3 from table as a Makes it easy to comment out or add statements.
Coding is exploration. Exploration can end anywhere. What you're experiencing is what every programmer hits when they put code online. Even the "best" of us don't escape feedback and criticism. I've had numerous pieces of epic (to me) code dissected, rewritten, refactored, built on and made a lot better. At times all that remains is the kernel of my original intent. I just have to suspend my ego and click Ye Old Merge button regularly ;). Also, remembering to say a heartfelt Thank You! The main thing is to turn random people bashing your code into an advantage. You're getting free feedback to integrate into your future coding endeavours. It's not always the nicest feedback, or the most polite, but most feedback within reason is an input to your self-improvement function. Definitely read halfercode's comment too. Good luck on the nicotine front!
OK thank you. Unfortunately, I still don't understand the difference between a two part identifier as opposed to one longer one which should be just as hard to guess. Or is this about the time it takes to calculate `hash_equals()`? Will check out "side-channels", thanks for your patience :) **EDIT** I think I got it: it takes the longer time for the response _even if the tried URL is actually wrong_
This could be said about most dynamic languages.
For your information, last NetBeans IDE version is 8.0.2 https://netbeans.org/downloads/8.0.2/
Thanks, I thought a lot about what to call it. Even though it's kind of a redundant project. As for the underscores, it's how we format our code at work and so I sort of got used to it. It's hard to change once you have 20,000 PHP files written that way. It is the cause of occasional debates but ultimately we have money to make and I'd rather debate architecture than formatting rules. 
&gt; PHP very fast compare to the other languages like .net or java etc.. As someone that writes both C# and PHP, C# is much faster at processing. If they are talking about faster at getting something working, its a wash really and depends on your environment.
pagodabox offer free tier on their platform, they also support PHP 7
Heroku has a free tier and provides PHP 7 now. Read more at [this *punny* URL](https://devcenter.heroku.com/changelog-items/777).
Obviously the coolest thing is the [random electric shocks](https://cube-drone.com/comics/c/ingeniuty-of-sorts).
PHP is intrinsically sweet and is gold all by itself, but once I tried it, that's when the magic happened. After checking to ensure that I could write a "Hello, World!" program, I walked from my trailer to Wal-mart with my copy of "PHP: The Definitive Guide" and was immediately approached by women. The women knew from the awesome book I had that I, like the book, am a mysterious coder who knows how to make some magic happen with my fingers. The women that approached me wanted to know if I would be their boyfriend and/or teach them the mysteries that I know. I told them no, because frankly a man who knows PHP shouldn't settle for the first thing that comes to him.
Thank you! I did not know this :)
It is indeed. I haven't finished deprecating destrukt. The only API change between the two is that `withData` is now called `withValues`. And union/intersection functionality was removed. Everything else should be the same.
Oh, nice! And how much time passed, between the beginning of your studies, until you got your first job? How many hours you had to study per day? I know this is a hobby and I will do it mostly for fun, but I'm looking for realistic info about how good can I become (I have between 1 and 4 hours daily of free time. Sometimes is less, but the weekends are practicly open). 
&gt; Also very important is that this library does not create any unnecessary inheritance dependencies between datastructures. pffft. Next you'll be saying that DirectoryIterator shouldn't have extended SplFileInfo .... 
have an upvote.
Wow, this is trending on GitHub o_O
OP: Please, oh please make your priority queue such that elements can get their priority increased (bubble up) after insertion. If I'm ever reaching for a priority queue, it's with the requirement that I can bump things up in priority. As an example, see Dijkstra's algorithm or A*. Best-first search is a needed building block to higher order algorithms.
Thanks ;)
The `!isset($string_selector)` branch will be taken at most once, because once defined, that variable will always exist with a non-null value. What you likely wanted to do is just check `if (!isset($string_hash[substr($key,0,11)])) {` and drop the `$string_selector` variable altogether.
It might help to see the original Perl code for comparison. Instead of using `while (list($key, $value) = each($ao_hash))`, it would be more efficient to use `foreach ($ao_hash as $key =&gt; $value)`. By the way, are you using PHP 7? It will have better performance.
The reason is likely that `Hashable` associates the hashing and equality test with the object, rather than with the hashtable. This means that you cannot have two different maps operating on the same object type, but using two different notions of equality (at least not without going through extra effort). I think that in *practice* having `Hashable` is usually simpler and more useful, rather than specifying callbacks in the map constructor.
That depends. Are you using something 'cool' for the sake of being cool, or are you using it because it's better for what you're building? For example, Rust is a great alternative to C++ and, once learned, one can produce a Rust application faster or at the same speed that one could produce a C++ application of the same quality (in many cases--Rust is still lacking in a few areas, like UI building). But if you try and build a web backend in Rust, of course it's going to take 10-times longer than if you try to do it in PHP. Rust isn't designed to compete with PHP--it's designed to compete with C++. Many people try to do the latter. Which is fine if you're doing it for learning/experimentation/fun. But not so much if you're doing it on company time.
I use Elasticsearch myself but that doesn't mean that a non-PHP focused comparison belongs here any more than a general comparison of pretty much any two pieces of software that are tangentially related to PHP. If you were comparing PHP APIs for Elasticsearch and Solr, sure.
[phpversions.info](http://phpversions.info/) is the place to go to find hosts with specific versions. Some of them might offer free tiers.
Why don't you simply enable Hack mode for specific files that wan't to make use of Hack's data structures?
*sniff* That was beautiful
It seems to work well for Python! Being able to make dictionaries of objects is handy.
 I plan for it to be multi-tenant, however there doesn't seem to be much in-depth information on it. You will have to think about how you want to support the multi-tenancy. Fastest way is to scope database rows to a main key (ex: account_id ). This will allow you to query for records belonging to an account, creating a multi-tenancy app with 1 database ( which you will be able to shard later on based on that key ). ex: table account(id, domain, name, ...); table users(id, account_id, name, ...); table images(id, account_id, ...); You can also support multi-tenancy by creating a separate database for each user. Database maintenance will be much harder but sharding / support specific users differently will be possible. On the code side, you could use subdomains to know which account to load. $account = $pdo-&gt;query('SELECT * FROM accounts WHERE domain =?', [$domain]); For PHP code, pick a framework ( like Laravel or Symphony ) and take a look at composer, PHPUnit, and Phinx. - Maintain your database using migrations ( either in Laravel or Phinx or maybe even Doctrine ). - Write unit tests (PHPUnit) and integration tests ( Webdriver / Selenium ).
I also forgot: Setup your environment using Vagrant / Docker. This will greatly help you emulate your production environment. Something like docker compose will let you boot up a full "production-like" environment within a virtualbox vm ( or some other backend of your choice ). You will then be able to easily test subdomains or a specific PHP version.
Not everybody is on reddit. Not every blog article which could be interesting is submitted here. So whats your point dude?
I do not know the answer to that, no.
The only advise I can give you is; A project is not a product. I'm sure there will be a technical challenge involved in building your SaaS and if this challenge is non-trivial (i.e. not easy to copy by competitors without significant invest), all the better. But please keep in mind that a SaaS is a business and that you're going to charge people money. To turn a project (a technical solution to some problem) into a product is a major effort. So, keep it simple and work in iterations. Launch with the simplest possible thing that works and take it from there. Hope this helps... 
I use [papertrail](https://papertrailapp.com/) to collect logs from all my systems (via rsyslog sending to a remote destination). [Loggly](https://www.loggly.com/) is another option.
PHP does not make a copy in memory unless it needs to; PHP does copy on write. 
&gt; I'm a bit unsure about not having Map and Set as interfaces... having a map/set backed by a B-tree is useful for other reasons Absolutely, but that's deeper into "theoretical considerations" territory. It's basically down to: *is there a common enough use case to warrant an implementation*? I don't think there is. You can still sort `Map` and `Set` in O(n log n). We could do some internal magic with modcount to determine a "dirty" state so that multiple calls doesn't actually sort multiple times. &gt; Regarding linked lists... with a backing vector that has associated prev/next u32 offsets But why? A vector already has prev/next using pos-1, pos+1. If you linked many smaller vectors together you might be able to do something clever for insert and remove but I don't believe there would be enough benefit to make it worthwhile. &gt; A structure which is not present here, but I've come to appreciate a lot recently, is the BitSet Three structures I considered but decided to leave out: BitSet, Matrix, and Heap. :) &gt; Explicit Iterators (instead just make the structures Traversable) It's a lot easier to work with, but I don't think I implemented them very well. `reset`, `key`, `next`, etc don't do anything. I think I would need to keep an internal position for that to work, rather than per-iterator position. --- Thanks for your feedback u/nikic
An important characteristic of maintainable code is to be *predictable*. If the hash function is internal to the table, how could you predict which keys would be considered equal? You would have to trace to see where the table was created or defined. If the hash function is internal to the object, then the hash table is predictable. The object has internal knowledge of itself, and is the only member that should be able to determine equality.
Wow. That sounds pretty narcissistic. You know better than literally everyone here? Seriously?
Availability could come later on if projects like these become part of the core, or a default extension.
I had to pick a primary image (for preview etc) but didn't want to use the benchmarks. Word cloud seemed like a reasonable idea. 
That's the goal though. Everything interesting regarding PHP will hopefully end up here.
This already is copy on write in PHP 5.
Do you have any test data you can share? Perhaps obfuscate it first if need be.
May I see the input files please? In the code there's nothing obvious why it should take that long.
I've used PHP, Python, and Javascript for larger projects in my career, as well as some other languages here and there. In my opinion, PHP is the Mario of web dev languages. It's a little more verbose than some other, more expressive languages, but it's more formal declarations can end up being a boon during maintenance. Its community is pretty large and vibrant, and some people are eager to help newcomers out; but that also means there's a lot of outdated information and misinformation as well as novice experts who think that because they've been using Laravel for a month they know everything about PHP and software development in general. The core language team has done a pretty good job of deprecating bad features out of the language while not breaking backwards compatibility over the years. It's pretty cool to see how much PHP has changed in the past decade from version 4 to 7. However, the core language team seems like a pretty unwelcoming, staunch good ol' boys club. So, overall, I would say that PHP isn't particularly "cool." It's not hip, but it's not outdated. It's not perfect, but it's pretty good at what it does. Some people do some pretty cool things with it, but the language itself is just pretty alright.
[removed]
Crap, I hate that thing! The most maddening part is that he's got some excellent and valid points. But the other 80% of the article is just "it didn't do things they way I wanted / the way this other language does it, so it must be trash." But people love to quote it more than the Bible itself.
Hmm. Tennis ball can? 
I've used Zend_Pdf from ZF1, but using a shell command such as gs is much faster.
Well sure, if performance is your primary concern, then you wouldn't want to use anything non-native.
Thanks for answering. This is one of the many things the API is lacking unfortunately..
Um... do you know him? Am I missing something? I'm hearing a lot of disdain. Sounds like he's just keen to innovate. Nothing wrong with that. Sometimes innovation goes wrong, but when it goes right its great.
you should probably look at these threads. https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd#.dhbq79htf https://www.reddit.com/r/PHP/comments/44qsco/efficient_data_structures_for_php_7/
Nginx is a good all around webserver. Not just for static content. Most of us that use it do so because apache has been a behemoth in terms of memory usage and cpu peaks.
Just use XHProf or Tideways to easily visualise the trace data that xdebug creates. You can order by longest exclusive execution time or memory/CPU usage.
If you need to read the file line by line, I would recommend you to use ```fgets``` or ```fgetcsv``` and iterate through line using it instead of reading the whole file and explode it into large array // Load file contents $file_contents = str_replace("\t","|",file_get_contents($_FILES['file']['tmp_name'])); $file_array = explode("\n",$file_contents); code above can be turned into something like $file = fopen($_FILES['file']['tmp_name'], 'r'); while (($data = fgetcsv($file, 0, "\t")) !== false) { //do something with $data } fclose($file); 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I like it, or a can of Pringles hehe..
PHPStorm also has a really nice xdebug profile dump file reader. I think it's under the tools menu. Nice alternative to Webgrind if you already use Storm. 
&gt; Concretely, I recently have fallen in love with DDD &amp; CQRS + event sourcing but I've been having a hard time actually coding my app's domain model in that style I've been working on a growing DDD/CQRS system (the classic "2.0 rewrite") at work for several months now, and I ended up deciding that event-*sourcing* was just a bridge too far. It's like the difference between "our code needs to be more functional" versus "our code needs to be written in Haskell". 
A well made, efficient java server app serving up Json can be super duper fast. It's nothing like clunky java desktop apps if that's what you're thinking of. 
For running it on the Pi, here's another suggestion, try Caddy (https://caddyserver.com/). It's lightweight and they have a build for LinuxARM. It's super easy to set it up with php-fpm (https://blog.jixee.me/how-to-setup-the-caddy-web-server-with-php-fpm/)...and then you'll have yourself a solid little web server.
You could have criticized the message without resorting to ad hominem attacks attacking the messengers (calling her a "radical feminist" etc).
Ad hominem is when you say someone's wrong *because* of who they are/what they believe. I'm saying she's wrong, and she follows an unpleasant ideology. Not that she's wrong because she follows an unpleasant ideology. The ideology reflects poorly on her motives in doing what she does.
I use PHPStorm but personally I find Webgrind much clearer and easier to use.
Whether or not the ideology itself is "unpleasant" etc is really what the debate is about, you are begging the question (another kind of fallacy) by dismissing it with the different value judgments you attach to it ("radical", "unpleasant"). Calling her a radical feminist while dismissing her point of view most definitely is an ad hominem, but I didn't expect you to accept that and can live with failing to have convinced you.
My pleasure, PHP 7 is awesome. :) The API was designed with the user in mind, even with the classes being final.. similar to how we wrap classes around arrays. The include files should give a good overview of the current API: https://github.com/php-ds/ds/tree/master/php/include 
Hmm, these are all mutable reference types, right? What about when you want an immutable version? You could add an immutable version of each type and make the mutable version extend it, if you wanted.
I'm willing to give it a shot. I'm no data structure guru, so it'll be a good "common user" test for you. ;)
Correct. Have the mutable extend the immutable... eh? Immutability is a performance breaker. I would definitely separate them out entirely, eg. `ImmutableSequence` and `Sequence`. Later iterations might include immutable collections but for now they're all mutable. Except for `Pair`.
You might find this of interest: [Why objects (usually) use less memory than arrays in PHP](https://gist.github.com/nikic/5015323)
I develop on OS X, but will be deploying to Linux at some point. I use ST3 for development. 
Would that return a mutable or immutable set? I think you hit the nail on the head with "conversions between each other". Something like `$immutable_union = ($mutable_set-&gt;immutable()) | $immutable_set;` 
If you have XCode installed you should be able to build it very easily. There will be easy install options later on, stable releases etc.
I'm going to take a stab at building a homebrew formula for this. 
Would somebody be able to give a tl;dr or an eli5 to the effect of: How this extension would affect a high level php dev?
We need some tuples...
They literally all support attributes. If you can't be bothered to read the docs why should anyone trust your library. Also, I feel like library spam is the new blog spam.
&gt; I could not find a good library that supported XML attributes [...] There are lots of results on Google asking for a library that parses attributes, but no good solutions Uhh... [What?](http://lmgtfy.com/?q=php+xml+attributes&amp;l=1) To be more explicit, you probably want: * [DOMElement::getAttribute](http://php.net/manual/en/domelement.getattribute.php) * [SimpleXMLElement::attributes](http://php.net/manual/en/simplexmlelement.attributes.php) Now, finding an XML library that *doesn't* support attributes, *that's* a challenge...
The proposed structures have one big weakness that ArrayObject and the SPL structures also have: they're pass-by-handle-copy (which I'll call "pass-by-reference" from here on, and yes I realize object handles are not like PHP &amp; $references ;) ), they're standard objects semantics-wise. This means that as you pass those around, they're very prone to "action from distance" bugs when one component modifies data that also is held (by handle) by another component. PHP "arrays" are suitable for basic data structures due to their automatic pass-by-value (with copy-on-write for collections) nature, and none of those libraries replicate that, including this one. Java is trying to move away from pass-by-reference for basic data structures, check out the efforts to introduce atomic pass-by-copy value types in Java 10. Swift also encourages their "structs" (which have copy-on-write collections like PHP BTW) for basic intra-app messaging and DTO: https://developer.apple.com/swift/blog/?id=10 And here we are, introducing to PHP what was good 15 years ago in Java, and what stopped being good for Apple few years ago. I think we need to seriously think about value types (think: Hack's shapes, for example, but those are not fleshed out enough) and then introduce such structures on top of that base. If we're so eager to slap another SPL look-alike in core, then this will completely shut down any effort to have proper value types when the core is ready to implement it, as we'll have too much legacy burden (from SPL and this library). I can already see the conversations in internals "but we already have this" "but it's not pass-by-value" "well who cares, just *clone* it" "cloning is not deep" "well write yourself a deep cloner" "well this is very slow, takes RAM as it's not copy-on-write, and requires explicit effort by the programmer and most won't bother to clone" "well yes but too bad, because we have SPL and now Rudy's structures, and we're not adding a third one, because legacy blah blah blah". Thoughts?
[removed]
Its easy and fast. Most reliable to build webpages. Read out more at:http://blog.templatetoaster.com/code-first-php-web-page/
http://www.phptherightway.com
wow
If you don't need to learn it, why'd you take the course?
I think that's a good point. PHP does have pretty good documentation.
All I see is a 14 day free trial? :(
&gt; All accounts start with a 14-day free New Relic Pro trial. &gt; After your Pro trial ends, you'll automatically move to our Lite plan. It's free, no credit card required.  http://newrelic.com/application-monitoring/pricing
All very true, and I agree with /u/Firehed about a `struct` type, and value objects. I think that projects like this one would be more creative if we had those structures to work with. Generics is another "next level" thing that a lot of people want. I think it's simply that no one has implemented them yet. There has been discussion though. This library and the SPL can both be complemented by immutable and by-value structures. They can co-exist.
For me, it was one of those things that I didn't realize how useful it was until I started using it. Admittedly, a significant portion of the value is derived from compilation and static analysis, which e.g. Hack has to a limited extent but very much is not a core component of PHP. Hence my preference for trying to have mutations on `let` variables be a compile-time error rather than runtime. It's a bit more approachable now especially with /u/nikic's AST library, but at some point you basically just build a subset of Hack's tooling that works on (and probably in) native PHP. I've gone pretty far in the weeds with this stuff before, and while the end result is undoubtedly helpful and better than nothing, it's still no comparison to the output of a compiler (never mind something like Haskell) What would be really nifty is something that's `php -l` on steroids, but that's really just a different interface to the same thing.
&gt; Would that return a mutable or immutable set? That would be the problem.
When stealing content, the least you should do (besides changing the text itself a bit) is change the URLs of the repos being cloned in the tutorial. [Original here](http://www.sitepoint.com/laravel-with-bugsnag-the-last-error-monitor-youll-need/).
I have a feeling that you're logging too many garbage. If error logs are used on purpose, it's most reliable and useful diagnostic tool.
PHP7, HHVM, Building testable... maintainable code, Unit Testing, A lot of really solid Frameworks, Exceptions, Building scalable code, CI/CD, Microframeworks, Command Line Tools, SECURITY, Easy to pick up but hard to master ... 
Array map is probably faster and it's actually more readable than foreach, so good thing there. And I used to think sprintf is dumb but it actually makes the code more maintainable for localization. So good on you. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I also see a lot of guides titled "Ultimate" for this kind of purpose, which is why I assumed it was fit. While Symfony has a great deal of features and concepts, I believe that sticking to only a small set of them can be enough (simple yet powerful). So these articles might introduce "basics", but once you know them you should be able to do everything. Out of curiosity, what would you expect from an "Ultimate Guide"?
Wasn't the alleged rewrite of WordPress into node.js an April fools joke last year?
Alright. It still won't work on primitives. A map of strings to objects is one of the most common types I've seen.
Not necessarily. The way the data is stored is up to you. A single database with your application scoped to a specific set of records will result in multi-tenancy. Using something like a front-router that loads a specific account for a given subdomain and subsequently only allow access to records associated to that account ( account != user ) will support multi-tenancy. What you are describing is closer to a multi-instance scenario. References: https://en.wikipedia.org/wiki/Multitenancy https://msdn.microsoft.com/en-us/library/aa479086.aspx
&gt; Bullshit. Go find how a return statement in a finally block behaves in php from the documentation alone... "Using a return statement inside a finally block will override any other return statement or thrown exception from the try block and all defined catch blocks. " http://php.net/manual/en/language.exceptions.php#114207 Sure, it's a comment on the documentation, but it's still documented on the exceptions page. Granted, in this case that might be worth moving up into the copy of the documentation rather than the comments, but that'd be a great case for a bug report.
Please block this user, look at his history. He's just spamming "Hire X developers" everywhere.
It supports procedural, functional, and object-oriented programming. You could even mix-and-match styles if needed. Sure, it might not do them all 100% perfectly, but it does them well enough to get things done.
Well, now you're splitting hairs. I got that information from php.net itself. Where on the page it is doesn't defeat that fact. Granted, as /u/rap2h as noted, it's worthy of being in the body, but then this is the joy of community submissions, you can highlight it to the right people so it can be fixed, rather than bitching about it on reddit. ¬Ø\\\_(„ÉÑ)_/¬Ø
&gt;I got that information from php.net itself. Where on the page it is doesn't defeat that fact. It defeats the fact that the "documentation is of high quality"....
https://paragonie.com/blog You might not like what he says or how he goes about doing it, but lets be honest, if you're doing any security in PHP, it's essential reading (especially if you're doing crypto).
There is no single source of truth, if you want to keep up to date, get a good feed reader (I use feedly) and add the content you're interested in. here's is an extract on my PHP feed, there is some good quality but also low quality stuff, but it's a healthy balance, it's a bit focused on Symfony though, discard the things you don't like. &lt;outline text="PHP" title="PHP"&gt; &lt;outline type="rss" text="Rob Allen's DevNotes" title="Rob Allen's DevNotes" xmlUrl="http://akrabat.com/feed/" htmlUrl="https://akrabat.com"/&gt; &lt;outline type="rss" text="Paul M. Jones" title="Paul M. Jones" xmlUrl="http://paul-m-jones.com/feed" htmlUrl="http://paul-m-jones.com"/&gt; &lt;outline type="rss" text="Fabien Potencier" title="Fabien Potencier" xmlUrl="http://feeds.fabien.potencier.org/aidedecamp" htmlUrl="http://fabien.potencier.org/"/&gt; &lt;outline type="rss" text="Zend Developer Zone (DevZone) - Advancing the art of PHP" title="Zend Developer Zone (DevZone) - Advancing the art of PHP" xmlUrl="http://feeds.feedburner.com/ZendDeveloperZone" htmlUrl="http://devzone.zend.com/"/&gt; &lt;outline type="rss" text="Julien Pauli PHP's life" title="Julien Pauli PHP's life" xmlUrl="http://jpauli.github.io//feed/atom.xml" htmlUrl="http://jpauli.github.io//"/&gt; &lt;outline type="rss" text="Seven PHP :: 7PHP" title="Seven PHP :: 7PHP" xmlUrl="http://7php.com/feed/" htmlUrl="http://7php.com"/&gt; &lt;outline type="rss" text="Dev Metal" title="Dev Metal" xmlUrl="http://www.dev-metal.com/feed/" htmlUrl="https://www.dev-metal.com"/&gt; &lt;outline type="rss" text="Loosely Coupled" title="Loosely Coupled" xmlUrl="http://feeds.feedburner.com/looselycoupled-podcast" htmlUrl="http://looselycoupled.info"/&gt; &lt;outline type="rss" text="php|architect - The site for PHP professionals" title="php|architect - The site for PHP professionals" xmlUrl="http://feeds.feedburner.com/phpa" htmlUrl="https://www.phparch.com"/&gt; &lt;outline type="rss" text="Wez Furlong" title="Wez Furlong" xmlUrl="http://feeds.feedburner.com/EvilAsInDr" htmlUrl="http://wezfurlong.org/"/&gt; &lt;outline type="rss" text="Planet PHP" title="Planet PHP" xmlUrl="http://planet-php.net/rdf/" htmlUrl="http://planet-php.net"/&gt; &lt;outline type="rss" text="PHP Developer Blog" title="PHP Developer Blog" xmlUrl="http://phpdev.ro/feed" htmlUrl="https://andrei.gabreanu.com"/&gt; &lt;outline type="rss" text="Left on the Web" title="Left on the Web" xmlUrl="http://www.leftontheweb.com/rss" htmlUrl="http://www.leftontheweb.com/"/&gt; &lt;outline type="rss" text="PhpStorm Blog" title="PhpStorm Blog" xmlUrl="http://blog.jetbrains.com/phpstorm/feed/" htmlUrl="http://blog.jetbrains.com/phpstorm"/&gt; &lt;outline type="rss" text="ircmaxell's blog" title="ircmaxell's blog" xmlUrl="http://blog.ircmaxell.com/feeds/posts/default" htmlUrl="http://blog.ircmaxell.com/"/&gt; &lt;outline type="rss" text="Rasmus' Toys Page" title="Rasmus' Toys Page" xmlUrl="http://toys.lerdorf.com/feeds/index.rss2" htmlUrl="https://toys.lerdorf.com/"/&gt; &lt;outline type="rss" text="Derick Rethans" title="Derick Rethans" xmlUrl="http://derickrethans.nl/feed.xml" htmlUrl="http://derickrethans.nl/archive.html"/&gt; &lt;outline type="rss" text="BrandonSavage.net" title="BrandonSavage.net" xmlUrl="http://www.brandonsavage.net/feed/" htmlUrl="http://www.brandonsavage.net"/&gt; &lt;outline type="rss" text="PHP Magazine" title="PHP Magazine" xmlUrl="http://www.phpmagazine.net/atom.xml"/&gt; &lt;outline type="rss" text="Blog" title="Blog" xmlUrl="http://www.drupalcommerce.org/blog/rss.xml" htmlUrl="https://drupalcommerce.org/blog"/&gt; &lt;outline type="rss" text="thePHP.cc News" title="thePHP.cc News" xmlUrl="https://thephp.cc/news/atom" htmlUrl="https://thephp.cc/news"/&gt; &lt;outline type="rss" text="nikic's blog" title="nikic's blog" xmlUrl="http://nikic.github.io/rss.xml" htmlUrl="http://nikic.github.com/"/&gt; &lt;outline type="rss" text="Web Mozarts" title="Web Mozarts" xmlUrl="http://webmozarts.com/feed/" htmlUrl="https://webmozart.io/"/&gt; &lt;outline type="rss" text="Josh Holmes" title="Josh Holmes" xmlUrl="http://rss.joshholmes.com/joshholmes" htmlUrl="http://www.joshholmes.com/blog"/&gt; &lt;outline type="rss" text="http://www.phpdeveloper.org/feed" title="http://www.phpdeveloper.org/feed" xmlUrl="http://www.phpmagazine.net/index.xml"/&gt; &lt;outline type="rss" text="@TheKeyboard" title="@TheKeyboard" xmlUrl="http://www.littlehart.net/atthekeyboard/feed/" htmlUrl="https://littlehart.net/atthekeyboard/"/&gt; &lt;outline type="rss" text="phly, boy, phly" title="phly, boy, phly" xmlUrl="http://weierophinney.net/matthew/feeds/index.rss2" htmlUrl="https://mwop.net/blog"/&gt; &lt;outline type="rss" text="PHP.net news &amp;amp; announcements" title="PHP.net news &amp;amp; announcements" xmlUrl="http://www.php.net/feed.atom"/&gt; &lt;outline type="rss" text="eZ Blog" title="eZ Blog" xmlUrl="http://ez.no/rss/feed/blog" htmlUrl="http://ez.no/"/&gt; &lt;outline type="rss" text="PHP Weekly Archive Feed" title="PHP Weekly Archive Feed" xmlUrl="http://www.phpweekly.com/rss.xml" htmlUrl="http://us4.campaign-archive.com/feed?u=135396dd31790e834e8629b45&amp;amp;id=af4af98573"/&gt; &lt;outline type="rss" text="Symfony Blog" title="Symfony Blog" xmlUrl="http://feeds.feedburner.com/symfony/blog" htmlUrl="http://symfony.com/blog/"/&gt; &lt;/outline&gt;
"That code looks fine" - Said no developer ever.
the curation of the blogs included here. it's badly maintained, and getting on the list is not based on the blog's content, but it's about who writes the articles.
I'm not sure why you keep going back to logical fallacies. That seems, as you say, entirely vapid. It's not a real argument. You just seem to be looking for ways to dismiss what I've said without considering it. You feel free to continue to stick your fingers in your ears. All it does is show that you're the unreasonable one here.
Probably nothing. Google changed the way they measure these trends.
&gt; I'm not sure why you keep going back to logical fallacies. I repeated myself because you said I hadn't pointed out what is wrong with your tone. I should have known that was an exercise in futility. &gt;That seems, as you say, entirely vapid. It's not a real argument. You just seem to be looking for ways to dismiss what I've said without considering it. In this very sentence you are doing what you accuse your interlocutor of without the slightest hint of irony. The criticisms of your logical fallacies are simply "not real". Ok then. No way to reason with that. &gt; You feel free to continue to stick your fingers in your ears. All it does is show that you're the unreasonable one here. I'm not the one ignoring what my interlocutor says, claiming it was not said, then criticizing the repetition thereof. I'm not sure what you think you've said that I've ignored (you don't offer any defense of your logical fallacies, you simply dismiss the criticism thereof out of hand) but it strikes me as more of a tit-for-tat criticism. In any case I'm not in any sort of contest over who is being unreasonable and I'm not going to get my ego involved in a futile discussion. You clearly don't agree with me and I'm not going to waste more of our time repeating myself.
Why not just use [hashids](http://hashids.org/)?
Did you read the blog post? There was an entire section dedicated to why you shouldn't use hashids. 
Adding to the already excellent selection below, [SitePoint's PHP section](http://sitepoint.com/php) might be to your liking.
&gt; There is no single source of truth Exactly. I'll add your given streams to my newsblur account. Thanks for this!
Yup, definitely give 7 a try
We use the proxy module. I think it would be possible using php-fpm too. If not, you could always proxy back to NGINX for the same result. I've extracted the relevant bits from our own configuration in the link below: https://gist.github.com/diolemo/1fcbc382d60b6df3c4f3 The main configuration to look at: http://nginx.org/en/docs/http/ngx_http_core_module.html#recursive_error_pages http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page This can be used for other stuff too, not just 404. 
Hashids are for obfuscation, not security. I guess I just don't understand why anybody would want to include sensitive information in a URL. If I can break into your resource simply by knowing a URL, your security is naive. The article jumps around quite a bit too: Want to know how to encrypt URL parameters? DON'T DO IT! But here's how to do it insecurely, and here's how you can do it securely. So, in conclusion...there is no conclusion.
For help with PHP stuff, you should post to /r/phphelp
You folks realise you can expand the table of contents to see more than what's in the sample chapter, right? It's possibly not the best sample chapter, but the planned sections seem to indicate that this will be geared to developers relatively new to Laravel + Lumen, building a sample application using parts of the framework (and Fractal). Might also be worth noting that the book is in a bundle, along with /u/philsturgeon's book. In my own experience, Phil is good about only bundling with other books that won't be auto-refund. If you're worried about the quality of this book, perhaps check back in a month to see if it's still bundled... :)
`Hashable` and `spl_object_hash` only come into play if the key is an object, otherwise it's a basic scalar hash.
Keeping in mind the intended audience of course would be helpful.
I agree, I need to provide a better sample. I wouldn't have known that without user's posts here, so thank you! I did reach out to Phil through LeanPub's bundling feature and approached him through LeanPub's interface. I wouldn't go so far as to say he gave a stamp of approval, but I am honored that he did this for an unknown first-time writer. I did try to reach a broader PHP audience with this book, because I am standardizing APIs around Lumen and introducing it to folks that know PHP really well, but not the specifics of Lumen. The documentation might be enough for that audience, and then those that want a little more guidance tend to go for books or videos.
In this case, $field is an associative array, meaning that instead of mapping integers to values like a normal array, it maps arbitrary key objects to values. This is the same data structure as a map in Java or a dict in Python. Associative arrays are declared as such: $field = array( "name" =&gt; "Joe Smith", "age" =&gt; 19, "city" =&gt; "Newark" ); The values on the left are keys while those on the right are values. When you want to iterate through one of these, you use a foreach loop like you posted. In simple English, it's saying that for every entry into this `$field` array, I'm going to be calling the key `$field_name` and the value `$field_obj`.
I misspoke... I've updated my post to indicate I meant a library that parses XML in to array **and** handles attributes.
I just updated the sample to include a sample from a deeper chapter. Hit me up if you want to get a free copy and provide me a review. Hope that helps, thanks for the feedback!
Noted! I hope that is not the case, but at least I can say I gave it a shot :)
Yeah, this works great! If you want a simple hash array like you would get by decoding json, ....instead of a complicated object.... this does the deal. Good work. 
Recently I needed to do grouped SUMs in ES. I had to use aggregations and it was major PITA. ES returns god knows why both hits and buckets. In buckets are aggragated results consisting of SUMs and keys. Rest of the fields are in hits only which are not aggragated. Also, not every row in bucket has corresponding key in hits. I had to resort to ugly custom PHP function which pairs bucket results with hits.
This demo might help: https://3v4l.org/aeLCR Basically, this translates to: "For each entry in `$field`, let the `$field_name` variable hold the value of the key, and the `$field_obj` variable hold the actual value." This means that you have both the value, and its position (numeric or otherwise) inside the iterable structure (e.g. array, associative array, generator, collection, etc.) available to you in your loop.
Yeah, a Laravel/Spark combination will give you a great headstart on a SaaS app. Only issue is there has been *a lot* of background work on Spark recently (including a rewrite and new features) and none of it has been made public yet. So you'd probably best wait for the final release.
([^\s]*).*?from ([^\]]*).*?AS(\d+).*?as_path: (\d+) (\d+) (\d+).*?next_hop: (.*) https://regex101.com/r/rE0gT2/1
Probably quite a useful article for folks that aren't yet familiar with the disadvantages of running your development stack on OS X (unless your production stack is on OS X I guess...) - however I must stress it would be better for folks to use something like Vagrant / Docker to run a virtualised environment that matches your production environment.
Yeah. This little interaction here just gave you a sale. I bought a "beginner" PHP book from someone with apparently a lot of clout from Leanpub and it was the biggest piece of shit I've ever read. I'm not a grammar nazi, but after the first 15 blatant mistakes, I vowed never again. $15 is a fuck load of money to me. But I completely support your attitude 100%
You can get your own virtual server from about $1/month, and run whatever you like on it: http://serverbear.com/compare?Sort=Monthly+Cost&amp;Order=asc&amp;Server+Type=VPS&amp;Monthly+Cost=-&amp;HDD=-&amp;RAM=-&amp;Virtualization= $5/month will get you something decent from... * [Digital Ocean](https://www.digitalocean.com/?refcode=c622e06d041c) * [Vultr](http://www.vultr.com/?ref=6827162) * [Ramnode](https://clientarea.ramnode.com/aff.php?aff=1425) Your Pi would be fine for local usage/testing though, or a virtual machine. Just go with Nginx, it's faster and lighter on resources, and all the big sites are using it these days. You only "need" Apache, if you "need" one of it's specialty modules (very unlikely), or you really need .htaccess support for .htaccess files that have already been written (and you don't want to write the equivalent nginx config).
Send me a coupon please! I'll do every exercise in the book and put them up publicly, and will write a full review of my experience. I'm quite familiar with PHP, but not much so with Laravel or Lumen.
Why would you use AMPPS instead of Homebrew?
Well write a RFC, why do you expect others to do that if you're not even doing it? implement the concurrency primitives and submit a pull request.
ah, that translation is what I was looking for!
its mandatory for the degree. They throw everything at you for accreditation reasons.
`switch` `break`s are there for a reason. Sometimes you want multiple cases to do the same thing, and if we didn't have `break`, you'll just end up violating DRY (Don't Repeat Yourself) with your proposed examples. A crude example: switch ($num) { case '1': case '2': case '3': case '5': case '8': case '13': case '21': case '34': echo 'Is a Fibonacci number between 1 and 50!'; break; default: echo 'Not a Fibonacci number between 1 and 50.'; } A not-so-crude example (or maybe crude, depending on your opinion of Eddie Izzard): switch ($airline_food) { case 'tea': case 'cake': $picket_sign = "Little Red Cookbook"; break; case 'death': $Hitler-&gt;set('meal_type', 'vegetarian'); $Hitler-&gt;set('drink_type', 'wine'); $Hitler-&gt;set('attr', 'Nazi shithead'); break; default: $choice = 'death'; } `break` has its place. Don't be so quick to dismiss it.
Do you mean the `cases`? I'm not familiar with Swift.
Does Lumen support [versioning](http://restler3.luracast.com/examples/_011_versioning/readme.html)? Like in Restler? And does it have an explorer? Like in [Restler](http://restler3.luracast.com/examples/_008_documentation/readme.html)? And build in multi-format and access-control and rate-limiting?
Braces, but with break statements would be a nice syntax. The third suggestion is evil, implicit declarations make everyone cry at some point. If you're more concerned about making your code look 'beautiful' than you are about making sure someone can interpret it, well, stop pls. Its okay to have an if comparison on one line, but PHP isn't a 'tab dependent' language like Python. 
Two things distinguish switch/case from if/elseif/else: one is the use of "break" to allow code to run in multiple cases, and the other is that with switch/case, you don't need to write out a full "$foo == " (or ===) equality condition for each case statement. I don't really consider the second difference a big deal - if it weren't for the cascading feature which necessitates the explicit use of "break", I don't think there'd be any real reason for me to use switch/case at all. Now I know you're not proposing to remove the original syntax. I'm just saying that any additional syntaxes (syntaxa?) that don't allow for the use of the cascading feature that one uses switch/case over if/elseif/else to get in the first place, I wouldn't really see the point in the alternative syntaxes - I'd just use if/elseif/else in that case, to maximize readability. 
Nice comment. Really helpful. Could you just explain your statement?
It gets the job done
Y'know some people say this community is "toxic" and "horrible". I can't think why!
I agree that switch statements are kind of weird/confusing, but their syntax is a fairly standard feature of any language that shares syntax heritage (is that a term?) with C.
hmm but isn't that a place for some OR logic? eg case (1 || 2 ||4)
[removed]
php doc, some guys comment: "is_int() operates in signed fashion, not unsigned, and is limited to the word size of the environment php is running in"
This isn't a PHP issue. The problem is 9999999999999999999 is greater than the maximum value that can be stored as an signed int: 2^31 - 1 = 2,147,483,647. When PHP encounters such a large number, it stores it as a float instead: var_dump(9999999999999999999); # float(1.0E+19) This behaviour is described in the docs: http://php.net/manual/en/language.types.integer.php [Edit] It's also larger than a 64bit signed int: 2^63 -1 = 9,223,372,036,854,775,807
 9999999999999999999 &gt; PHP_INT_MAX Integers greater than PHP_INT_MAX (9223372036854775807 on a 64-bit box) are stored as floats. is_int(PHP_INT_MAX) = true is_int(PHP_INT_MAX + 1) = false is_float(PHP_INT_MAX + 1) = true
What is the actual difference to Doctrine? This just replaces the ORM layer from Doctrine if I understood this correctly, right?
I've read this several times and I don't understand the 'it feels "off"' and "seems too verbose". Maybe I'm just used to regular switch syntax. &gt;How would I get an RFC for this? https://wiki.php.net/rfc/howto 
Why would you use either instead of Vagrant?
Still waiting for yaml plugin fix
What could possibly go wrong?!
&gt; That's already valid syntax switch ($foo) { case (1) { foo(); } } Not quite valid, missing case separator ```:```.
Hi /u/k42b3 , I really love the basic ideas behind this framework, starting from RAML and building around the documentation. Thanks for all your hard work. However, I'm finding it hard to adapt and understand how to use PSX. I'm not sure if it's simply me being incompetent and should be understanding obvious things or because the documentation is not ready. Is there any forum or support channel where problems users are having might get written up? Do you know if the framework is being used in production?
Some languages have build-in support for arbitrary size ints. Andrea had an RFC for PHP: https://wiki.php.net/rfc/bigint Given PHP's focus on easy of use over performance, it seems like a thing that PHP should support.
Why in the world are you asking this in /r/PHP?
This is spam advertising a commercial product. 
Don't listen to him, a ton of /r/php users use php storm and this is news worthy of a post. Thanks. 
Is there a query builder that's built specifically for spitting out raw SQL? Doesn't deal with the database at all.
Given your example, why bother with a `switch` at all? Just use an `if/else` checking against `in_array()`. $array_of_planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'); if ($choice == 'Pluto') { echo "Used to be a planet :'("; } else if (in_array($choice, $array_of_planets)) { echo 'Is a planet!'; } else { echo "Ain't one of our planets"; } Bonus: this method now has the benefit of you being able to define `$array_of_planets` *once* in your code so you DRY all the time every time you want to access one of the planets, which is one of the known disadvantages of a `switch` statement as you have to explicitly define each `case`. edit: fixed array syntax, I'm getting JavaScript syntax all up in my PHP.
It's free to students.
Tabs are whitespace. They're eaten by HTML, just like spaces and newlines. If you want to create a separation between your label and your input element, use CSS to style them.
While CSS is really what you want for this. `&amp;nbsp;` is a "non-breaking space" and doesn't get "eaten" by your browser. You could use a few of them to create the space between label and the input element. See also https://stackoverflow.com/questions/1571648/html-tab-space-instead-of-multiple-non-breaking-spaces-nbsp/1571693#1571693
I wanted to say "RTFM", but your explanation is much friendlier. Have an upvote GG.
For sure. If alignment is important then CSS is necessary, and a grid framework would probably be ideal. But if I need to create a little space between inline elements, I do sometimes just throw a few nbsps in there. I get the feeling OP is trying to take "the next step", so something as simple as `&lt;label style="width: 50px"&gt;` (adjusting the number of pixels appropriately) would probably work. Getting into lots of best practices might not be helpful.
Because Vagrant is slow, particularly with shared folders enabled. Normally the slowdown isn't enough to care (300ms vs 30ms for loading a page? annoying, but I'll deal), but if I'm debugging a slow SQL query, there's a huge difference between seeing it take 80 seconds in Vagrant, or taking 2 seconds on Homebrew's apps.
glad to see they fixed the clipboard bug finally... fuck that was annoying.
How? Where? I don't see anything highlighted. Edit: Wow, so "changing the text color" is a Chrome only feature nowadays? Great.
Thats a not an integer any more I believe its a big int
This: class Post extends AbstractEntity { /** * Configure entity */ public function configure() { $table = new Table('post'); $table-&gt;addColumn('id', Type::INTEGER) -&gt;setAutoincrement(true) -&gt;setLength(10); $table-&gt;addColumn('title', Type::STRING); $table-&gt;addColumn('content', Type::TEXT); $table-&gt;addColumn('date', Type::DATETIME) -&gt;setDefault(new \DateTime()); $table-&gt;setPrimaryKey(['id']); //set entity table $this-&gt;setTable($table); } } Feels wrong. Like not the syntax the class naming. First of all, maybe I am miss understanding something, and feel free to tell me. it should go: Migration -&gt; Model -&gt; Entity. as In we create a migration to create a new table, we create a model for that table and then we create an entity that extends the model. You are extending an entity (abstract) and creating a table (??) The way I understand it is: Migrations create the tables, Models know of the relation ships, table fields and do the "find or create" and the scopes (laravel) where as entities, least the way we use them, are classes that do the joins and the wheres and the get/set jazz (we use active record so no need for getters and setters)
What was the problem you were having, out of curiosity? (I've run into some weirdness with the clipboard, but only sporadic)
Clear cache in file menu
No FreeBSD :(
So what you want is a statement that is, in most other languages, called a match statement. In Rust, for example: let x = 5; match x { 1 =&gt; println!("one"), 2 =&gt; println!("two"),j 3 =&gt; println!("three"), 4 =&gt; println!("four"), 5 =&gt; println!("five"), _ =&gt; println!("something else"), }
`.innerText` has *never* worked in Firefox, `.textContent` has always been the correct way but [didn't work in old IE versions](http://caniuse.com/#search=textcontent), of course. Source: Ten year old JS table sorting code that had do feature sniffing... e: [According to this article](http://perfectionkills.com/the-poor-misunderstood-innerText/) (scroll down), it's been added to FF 45.
&gt; Have suggestions on a better subreddit? 
needless bikeshedding
I really need to write a postmortem for that RFC some day.
GMP is a better choice for integers, it's faster. You'd only want to use BCMath when you have to do floating-point operations in some unusual base.
The problem with `.innerText` is that, if you're used to `.innerHTML`, you'd expect `.innerText` to work. Yet while the former works everywhere, the latter doesn't.
Basically i could not paste anything from the clipboard, it was "stuck". No matter how many times I re-copied something, it wouldn't update the clipboard in PHPStorm. Outside PHPStorm clipboard worked fine
I can't personally blame you for this mistake, it's bitten me before, too :)
Submit a PR :) https://github.com/philsturgeon/phpversions.info/blob/master/_data/operating_systems.yml
To hopefully provide some *constructive* feedback to expand on /u/drgomesp's comment: I really prefer that my entities are fully independent from the ORM and having to extend the ORM's entity class makes that impossible. I would want something like this: class ElectionResult { /* business/domain logic */ } A repository interface: interface ElectionResultRepository { /** * @param int $id * @return ElectionResult|null */ public function findById($id) } And an implementation that returns a implementation-specific subclass of `ElectionResult` that doesn't break the [Liskov Substitution Principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle). class BlastElectionResultRepository implements ElectionResultRepository { public function findById($id) { return $this-&gt;mapper-&gt;find($id); } } I *do* see that you have an `EntityInterface` and `EntityTrait`, which is a good first step, but the interface has still has 20ish methods, including __get, __set, __isset, and __call, which almost invalidates using an interface in the first place. I'd much, *much* prefer a lean interface where the entity just has to pass it's data to a configured mapper class. Something like this, for example: interface EntityInterface { /** * @return array */ public function getDataForMapper(); /** * @return array */ public function getRelationsForMapper(); } That being said, if you think it's something that might be feasible, I may be able to throw together something for a pull request under a different interface, maybe `PlainEntityInterface` or something similar. Regardless, I hope this feedback is valuable!
If you're using VirtualBox, and using the native shared folders then that's the cause. Using NFS will make the difference much, much less noticable than that. Also, if you are willing to pay, VMWare Fusion offers far greater performance all round than both VirtualBox shared folders and NFS. Admittedly, it is a little cumbersome having to stop and start the VMs, and that process isn't exactly lightning fast... and they do take up quite a chunk of RAM - especially if you're working in a multi-VM environment... Personally; I'd recommend using a VMWare Fusion + Docker + Docker Machine combination for a high-performance, low-hassle development stack, if you can get some images set up for the projects you work on.
Well, /r/phphelp would be a little closer, since the sidebar specifically says not to ask for help in /r/PHP. However, I don't think that is an appropriate place either. Maybe r/webdev? /r/webmarketing?
&gt; Because Vagrant is slow, particularly with shared folders enabled. That's not Vagrant, it's your virtualizer: http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines If you're on OSX/Linux, you can enable NFS. If you're on Windows, use Samba. A better solution is to use vmware or parallels for performant VMs. Unless you're on Windows, then use Virtualbox with default folder sharing if you require symlink support.
For the notification, could also do a twilio SMS and voice call if you don't want / need pagerduty type service. Use do escalations and schedules in nagios to manage who gets any alerts. 
Aside from the fact that this question seems off topic for both this sub and stack overflow. I would lean towards using HTTP. This allows you to offload it to another server later if load becomes an issue. Also it might be worth looking into oboejs.
hmm so the folders are supposed to get deleted, maybe somethings wrong w/ my vagrant box or permissions because deleting the folders aren't happening. The php files are though.
I actually used extensively events for one of my projects and I had to completely stop using it as the memory would go crazy high when you scale it too much. 1 event per second for 10 mins. The problem is that each instance you send contains an actual copy of the whole class and when your data structure is complex; Forget about it. Mind you, it was on php5.6. php7 could provide different results.
[removed]
You could try Scoutapp. Their server monitoring scripts are made using Ruby and you can make your own. So you could have it read from log files, an API response, run a command on the server etc. Costs $15/month/server the client is installed on. After ~10 servers it drops to $10/month/server. Also has StatsD integration. Stores data for weeks and you can change the level viewed from between live, 30 minutes, hour, past 5 hours, 12 hours, day, week, month. Dashboards where you can throw stats around and put multiple into a single graph. Lots and lots of very easy to use options.
This belongs in the "dumb" bucket - lets change core language syntax and break every system written over the last 20 years. If you want a new command, suggest a new command. Or use a different language. Just my 2c.
phphosting4free might...
[removed]
At the very least it should cover the basic use-case where an emitter dispatches an event (optionally with associated data), the event manager cycles through all registered observers and calls them one by one. It doesn't need to be overly complicated, we just need to prevent the status quo of every package having to decide between Symfony's event component, the League's event component, or something else entirely. Psr/Event should be a thing.
Nice, just submitted my company to this.
Are there any know ways to bypass this? I mean to check if the float is actually an integer (or a whole number, since that is actually what I would like to check)
[removed]
So floats have the same problem at some end, what are the limits to floats? (if anyone knows)
I just tried to make a small example here. https://github.com/qckanemoto/symfony-raydi-sample
The problem is this statement: is_numeric($value) &amp;&amp; floor($value) == $value &amp;&amp; $value != 0 which evaluates to true &amp;&amp; 1.0E+18 == 999999999999999999.999999999999999999 &amp;&amp; 999999999999999999.999999999999999999 != 0 true &amp;&amp; true == true &amp;&amp; true which is obviously true The reason for this is the way PHP type-casts booleans: http://php.net/manual/en/language.types.boolean.php Strict comparisons might get the behaviour you want: http://php.net/manual/en/language.operators.comparison.php
I see, then how would we check if `1.0E+18` is a integer or an float? Since, `is_float(1.0E+18)` returns `true` and `is_integer(1.0E+18)` returns `false`. But after all, it is actually a float (`999999999999999999.999999999999999999`)
I'm struggling to understand what you're trying to do. Maybe you just need [gettype()](http://php.net/manual/en/function.gettype.php)?
Actually it would make more sense to call my function for `isWholeNumber`. Since I want to know if the input is a whole number or a decimal. And since `1.0E+18` (`999999999999999999.999999999999999999`) is a decimal I want it to return `false`. While `1.0E+44` (`99999999999999999999999999999999999999999999`) is a whole number, then it should return `true`
What is wrong the SimpleXML?
Also, give it more memory in the PhpStorm64.exe.vmoptions file. I run it with at least 2GB. There's a million discussions out there about tuning the JVM for various Java-based IDEs.
If by whole number you mean a non-negative integer, then this is more complicated than it should be. I made the following function: function isWholeNumber($var) { return ctype_digit($var) &amp;&amp; is_int(intval($var)) &amp;&amp; $var &gt;= 0; } which works in the following cases: var_dump(isWholeNumber("999999999999999999")); # true var_dump(isWholeNumber("999999999999999999.99")); # false var_dump(isWholeNumber(999999999999999999)); # true var_dump(isWholeNumber(999999999999999999.99)); # false But breaks down in cases where you pass a float that is integral: var_dump(isWholeNumber(4.5 * 2)); # false, but we want true Eventually I came up with this: function isWholeNumber($var) { return filter_var($var, FILTER_VALIDATE_INT) &amp;&amp; $var &gt;= 0; } which works in all of the cases: var_dump(isWholeNumber("999999999999999999")); # true var_dump(isWholeNumber("999999999999999999.99")); # false var_dump(isWholeNumber(999999999999999999)); # true var_dump(isWholeNumber(999999999999999999.99)); # false var_dump(isWholeNumber(4.5 * 2)); # true
Have you looked at the BCMath and GMP libraries to see if they can do what you need?
&gt; function isWholeNumber($var) { &gt; return filter_var($var, FILTER_VALIDATE_INT) &amp;&amp; $var &gt;= 0; &gt; } Fails on extremely high numbers. isWholeNumber(10000000000000000000) // bool(false) Source: http://sandbox.onlinephpfunctions.com/code/b7d7599235d56b624f177fb09f4753d8c0049151
I will give GMP a try, thanks.
I'd humbly suggest my own site, PHPDeveloper.org (http://phpdeveloper.org) as a site to help keep up with PHP related stuff. It's all manual and I write up summaries of each item, not just parse the feed and reblog it.
Coincidentally, I have been using this library the past week. I actually like alot of the ideas the author has for working with xml. The code I'm writing with the library it's more concise than what I typically get with simplexml. Taking a look behind the curtain, I'm not as keen on the source code. I've only ducked in to the source code a few times through my ide to look at method implementations. It's kind of a mess. Post of it has to do with trying to provide two interfaces, fluidxml and FluidXml, only one is necessary. Also a lot of method parameters are variadic in nature with functionality_get_args implementation, so editor autocompletion and hinting isn't always helpful. All in all of say give the library a try next time you need to deal with xml.
Why prefix all attributes with @? If the array key is not '@' then it's an attribute. I would like it more if it would have support for PHP 5.5 :)
You should only really be using events and listeners between boundary contexts. For example, if you have a UserModule, ShippingModule, and ProductModule. After a product has been ordered you trigger a ProductEvent and listen for it in the ShippingModule. This promotes less dependencies. You do not need to use events/listeners within the same context. Within a UserModule if you want to create a role for a user after enrolling you do not need an event and listener. You can just call the RoleService directly from the UserService.
It's not because of typecasting. PHP will not cast 1.0E+18 or 999999999999999999.999999999999999999 as true in that statement. Actually they're both 1.0E+18. If your statement would be true code like var_dump(7 == 8.1) would output true. You should never (ever) rely on php floating point numbers comparsion strict or not. edit: typo
&gt; This promotes less dependencies. It really doesn't......the dependencies are still there, they're just way harder to reason about because your application architecture is now invisible. In particular, it becomes really hard to either check, or know what to do, when you expect something to be listening for events and it isn't actually listening properly or able to process the information. &gt; After a product has been ordered you trigger a ProductEvent and listen for it in the ShippingModule. This would be much better handled with a persistent queue/messaging system. When a product has been ordered, a ProductEvent is put into the queue and the ShippingModule can listen to that queue. The benefit from doing is as an actual queue rather than just events inside an application is that: i) If there are any errors in processing, you can retry the processing or put the message into an error state. You can then monitor the queue for errors. ii) As the processing is broken into separate processes, it makes your application way faster and more resilient. i.e. the processing of the response to the customer would be complete as soon as the ProductEvent is generated and stored, rather than having to wait around for the ShippingModule to complete. And if there is a temporary outage in the ShippingModule, that doesn't affect people's ability to make purchases. iii) It makes it way easier to maintain your application. If for example you wanted to change the front-end to use Zend rather than Symfony, you could do that, but leave the background ShippingModule as a Symfony based app for the time being. Having all of the processing be inside a single app means that everything would need to be re-written at once. Events can be useful....but using them as a substitute for architecture does not make for a quality application. 
Xpath is really powerful stuff... But for some reason I find it pretty cumbersome and basically no fun to use. Fluidxml might be better but at this point I'm avoiding xml at all reasonable cost. 
PHP does convert everything into a true/false equivalent when doing comparisons. Maybe that's not called type casting, but I was trying to keep my explanation simple. 1.0E+18 is true because any number != 0 is true. Let's step though it. $value = 999999999999999999.999999999999999999; We start with: is_numeric($value) &amp;&amp; floor($value); var_dump(is_numeric($value)); # bool(true) We now have true &amp;&amp; floor($value); var_dump(floor($value)); # float(1.0E+18) We now have true &amp;&amp; 1.0E+18 var_dump(true &amp;&amp; 1.0E+18); # bool(true) The &amp;&amp; operator will only produce true when both sides are true (or equivalent). Therefore 1.0E+18 is equivalent to true. We can prove this: var_dump(1.0E+18 == true); # bool(true) So my point was, OP is getting true because his function always evaluates to true.
Based on his [previous thread](https://www.reddit.com/r/PHP/comments/452c7q/why_does_is_integer_return_false_on/) I think he must be working with very large numbers, and for some reason these numbers must have the property of being non-negative integers, and PHP's behaviour of converting ints &gt; PHP_INT_MAX to floats is throwing him off. After a bit of manipulation he can't tell if the number if he has is still a whole number. In Python for example you can do float.is_integer() to check if the value is integral.
confused as to why this didn't come up during the coding process
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not to say this library may not be useful for someone, but there is another way about it. Carbon has a CarbonInterval class that can easily parse intervals. http://carbon.nesbot.com/docs/#api-interval
There isn't another step to convert it to seconds. You would do $carbonInterval-&gt;seconds to access the seconds in the interval. Just wanted to make that clarification.
[removed]
[removed]
Do you know of a good introduction/tutorial to Nagios? I haven't looked at it lately, but when I have in the past it seemed a little overwhelming...
So what? XML is perfectly fine.
I completely removed the code, but I can give you an idea. Imagine an aggregator of data. There's an AggregatorBundle which has for task to fetch the data from various sources and then transform it and format it for purpose of the aggregation. Now, there's several events that can be derived from that task flow. OnConnection, OnDataFetched, OnDataFormatted, OnDataStored, OnAggregationEnd now let's say this specific source has 1000 different datas. The script runs quite fast. So imagine, those 3 onEventData{..} continuously spawning. Now because you have different sources, the class which start this flow of events is abstract and takes in consideration several different type of sources meaning the internals are minimal but complex. Inside your listeners, let's say you give as argument the controller which calls the script itself. The controller itself contains an instance of the Doctrine EntityManager which itself has a "shitload" of metadata for your database scheme. In my opinion, the logic was good, simply spawning some events in different points of the workflow to signal things happening and listeners call the main controller which itself has the entityManager meaning the whole controller has most of the "control" functions while leaving the aggregator do its single job; Aggregating. It's no profiling data, but it gives a rough a idea. Also, as @Danack mentioned. Your whole architecture is now hidden. Debugging becomes a mess. Instead of having actual proper architecture meaning an actual service/class handling some key task flow "events". You simply spawn events. I may have sounded a little rough. But using events should be done with proper care and should never replace proper architecture where you have much more control of the memory/cpu/instantiation of objects. Don't get me wrong I still use some events, but personally for me, the downside is higher than the upside. Events make sense in javascript or in java where you have actual user interaction. In this backend code, having events is strongly debatable. As a final word, it's like having someone constantly click the right mouse button and in JS theres a popup after each right click. Imagine that for 10 mins. 
Thanks mate. That's much appreciated. I will check this out... 
This doesn't really answer your question and I have no idea whether you have a choice in the database being used but I thought I would post this link here. Its worth a read. http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/
Nah, I just hadn't had my coffee yet.
This page has a handy one-line summary of some of our more useful blog posts. Obviously the emphasis on this page is simplicity and brevity, so you'll have to read the attached blog post to get a detailed explanation and more background into the problems, but this page should be a great starting point for secure PHP development self-help.
Actually I just looked at it in the oxford dictionary; and I'm quite surprised to find that the two words, according to the dictionary, are 'sometimes synonymous', though I have never used them that way, and every time I've seen them used that way, awkwardness and ambiguity ensue. Anyway, my bad - too little caffiene, too little nicotine. I should avoid posting at that hour. Cheers
If there is a problem with database, most likely it persists on the other page as well. If you have the same brillliant code there, then it become endless.
Read the rest of the sentence, perhaps? &gt; *the structure of the SQL query cannot be changed by an attacker* (unless, of course, you have PDO::ATTR_EMULATE_PREPARES enabled. It is not about abstract terminology but about particular vulnerability.
what the hell are you talking about
Ok, especially for you, "An endless redirect is one of the possible outcomes of this stupid code". Satisfied? &gt; Are you talking about a runtime error? How do you think? Ever worked with PDO? Have an idea how this code would behave?
The full sentence and full parenthetical statement reads: &gt; No matter what is passed into the `$_GET` variables here, the structure of the SQL query cannot be changed by an attacker (unless, of course, you have `PDO::ATTR_EMULATE_PREPARES` enabled, which means you're not truly using prepared statements). The argument given is thus: * Prepared statements send the query and the parameters in separate packets. * Emulated prepared statements don't do they; they just escape and concatenate. * If someone finds a technique to [bypass the escaping](http://stackoverflow.com/a/12118602/2224584), they can still alter the query string with emulated prepared statements. * Even if they find such a technique, *actual* prepared statements will remain immune. Out of scope of this discussion: other vulnerabilities in the RDBMS, including hypothetical memory corruption bugs in the handling of prepared statements.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Sorry, but my comment actually made sense in the context.
o, rly?
It is not that personal. It is rather massive, as there are a lot of people around telling you "use PDO" but not a single one understands a primitive 2-line code snippet. 
Out of curiosity, what you got against PDO? 
Me?
Well, yes, there is a reason behind your argument. In the form of such a premature precaution it makes sense. I just don't like the way the emulation mode gets demonized. 
You really should not see my upcoming post about Weierstrass curves, then. :D
I take back what I said. After running through how the proposed schema would actually work, you're absolutely right. RDB seems like a better (and certainly easier) solution. Thanks for forcing out some critical thinking!
Your welcome :) PostgreSQL is a really good DBMS and well supported in PHP land, if you haven't used it before you should definitely try it out!
[**@sasaprolic**](https://twitter.com/sasaprolic/) &gt; [2015-11-25 13:12 UTC](https://twitter.com/sasaprolic/status/669503837212942336) &gt; @mathiasverraes It seems like you think replaying 1000 events is totally for free. replaying lots of events takes lot of time. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
league/glide (http://glide.thephpleague.com) also provides this functionality as well as many other on the fly modifications to images such as colorisation, watermarking and effects such as blurring and sharpening.
Thank you for your reply, that's actually quite helpful, with this we can conclude that preloading all classes in one file for every request is going to be slower than autoloading only the classes used (each class being stored in its own file). However I'm wondering if the same is true when we first preload all classes, and share it between requests (using [FastCGI](http://phpfastcgi.github.io/) for example).
Glad someone will get more downvotes than me :D
Not really, I have to do some formatting then (plain DESC won't help me here)...
Good luck in your search.
&gt; https://github.com/nategood/commando Thx, opinion about this one? :)
No offence either. I am just curious, if you have some design in your mind which nobody knows but you, why you're asking elsewhere whether some tool will be good for it? If it's about just a general purpose CLI package, I am of no help either. `php code.php` is all the CLI package I am using. 
You can try to use my ODM package https://github.com/wolfy-j/lodm which i originally integrated it into Laravel, but i think it will work well for Lumen as well. It provides model inheritance, composition, aggregation and atomic operations for MongoDB. Can be used separatelly from any framework as well.
Don't actually do this.
I really appreciate it. One other nice thing to add, if you're feeling it, is a [Disjoint Set](https://en.wikipedia.org/wiki/Disjoint-set_data_structure). Useful for building MSTs. It's not too hard to roll one up as needed, but would fit in nicely with the rest of your structures. Edit: Here's a native PHP implementation: https://github.com/mcordingley/Structures/blob/master/src/DisjointSet.php
Developers are not users
They are if you're writing a library that they use.
Why would you want to force a 'user' to do this?
I don't ask "why?" I only ask "how?" Besides, in situations like this, the answer to "why?" is almost always "for the lulz".
Guys, I am really sorry for being p[r]icky, but I can't help it :) $stmt = $pdo-&gt;prepare('SELECT * FROM blog_posts WHERE YEAR(created) = ? AND MONTH(created) = ?'); if ($stmt-&gt;execute([$_GET['year'], $_GET['month']])) { $posts = $stmt-&gt;fetchAll(\PDO::FETCH_ASSOC); } if (empty($posts)) { // Obviously, you should not have the same code on /blog/ // so as to avoid an endless redirect. header("Location: /blog/"); exit; } should be really this: $stmt = $pdo-&gt;prepare('SELECT * FROM blog_posts WHERE YEAR(created) = ? AND MONTH(created) = ?'); $stmt-&gt;execute([$_GET['year'], $_GET['month']]); $posts = $stmt-&gt;fetchAll(\PDO::FETCH_ASSOC); 1. You don't have to check for the execute() result manually. A query have to throw an Exception on error, and if it happens, it won't be executed further anyway. 2. Therefore, no need to check $posts for existence with empty() - it will be always set by this point. 3. Honestly, whole redirect business is really off the track. The less code you write, the easier it for the reader to comprehend. Why not to leave only the relevant part? If you want to make it a complete statement - make it UPDATE. But a comment on redirect distracts from the main point.
In my experience the bottlenecks are usually autoloading, database connection and remote calls. When I profile my applications autoloading is always in the top 5 most expensive exclusive function calls.
really help full info
[Better way][1] to enforce strict typing. [1]: https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx
A troll explicitly admitting that it's a troll is the saddest thing in the internet.
That's sarcastic but you are right. Strict types should be enforced by default. I understand the decision that was taken and I just don't agree with that.
[removed]
Yes autoloading is typically in the top 10% of my profiles
Clever. Wouldn't it be easier to check if $x is_int()?. Thats how you'd do it with PHP5
That was irony: there are many strongly-typed languages out there, and yet somebody somewhere wants PHP to become strongly typed. What's the point? ‚Äî PHP's flexibility with type juggling and *optional* type enforcement is what makes it different and by and large relevant today. Should js also enforce strong types? ;)
Compiles to plain js. Exactly the same, by the way, can be done with php. Like, TypHPscript. [edit] this apparently exists: http://cretz.github.io/pratphall/ &gt; This is basically for static typing enthusiasts that use PHP
Redirect code has been RM'd entirely. You're right, it's a distraction. However, $posts is still only populated if `execute()` returns `true`. &gt; A query have to throw an Exception on error, and if it happens, it won't be executed further anyway. [That's not always the case.](https://secure.php.net/manual/en/pdo.error-handling.php)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Agree with your second point. For first point, look into DDD (Domain Driven Design). I guess it depends on your architecture, if you want to build a modular system what I said is a good approach.
Stop it!
TypeScript offers compile-time type checking. As someone that works with it on a daily basis I can tell you, it's not as exciting as it sounds.
Thank you. But how should I maintain state of logged in user? I mean, should I save fb token for user and check every time in secured routes? 
Those could be seconds between X and now. If you regenerate the page do those numbers increment? Like for example if I take your 2483800 if the timer started 28 days, 17 hours, 56 minutes and 40 seconds ago. &amp;nbsp; Wild guess though
&gt; PHP 7 enforces strictness on a per-file basis. So even though you're using them, if someone writes another script that calls it like this, it will work: What the fuck? That's how strict types work? What were they thinking? That's absurd! Why even have the feature if we still need boilerplate to ensure people don't enter "cheerios" into a function that needs a number? WHAT THE FUCK PHP DEVS? It's always one step forward two steps back with this language! phpsadness? lolphp? More like PHPFuckingEverything!
Maybe read the discussions that led to this compromise and attempt to understand why things are the way things are instead of just getting outraged over it?
Nah I'll pass. Thanks for the code though, I'll be using it for sure.
You clearly didn't read the whole thing did you? He goes on to explain the issues they had with that approach.
&gt; PHP's flexibility with type juggling and optional type enforcement is what makes it different Don't worry, it's still going to be optional. Even within a 'strict' file you don't have to use it, and can cast things blindly to int: &lt;?php declare(strict_types=1); function foo($foo) { $value = (int)$foo; bar($value); } function bar(int $bar) { echo "value is: $bar \n"; } foo("5"); foo("5 bananas"); The actual value of doing this in production code is left as an exercise for the reader to work out. 
Return the result from PDO as an array, then map it, filter it (do what you need to do), before json_encoding it... /u/colshrapnel code is fine for the stated intent, if there is more to state, state it by editing the original post at the top, otherwise it becomes hard to follow what you are looking for...
I'm going to look on the bright side here! I get frustrated enough with fellow professionals. Dealing with rank amateurs will help me learn patience. Maybe. On the other hand, the other php files I've spot checked look clean. Maybe the hackers got in, saw they were hacking a bunch of really nice people and were so inspired they decided to go out and get real jobs after messing one thing up! That's definitely probably what happened. Thanks for the help! I really do find all this fascinating. 
Its type flexibility is one of its strong points, when used correctly. Respect it or not, it's a language that is used by a huge number of developers. If people are *still* laughing at it, that's on them.
[removed]
Is there a standard setting to activate some kind of safe mode for php and lock down some of this stuff? I can totally appreciate it the need for an eval in an interpreted, dynamic language but my friends definitely don't need that in their website. (And thanks for the help.) This is really one of those things where the conversation went like "I didn't write the code, haven't been to the website, haven't looked at php code in maybe 10 years, don't know anything at all about wordpress, don't really understand forward-facing security risks to websites and am flying to mexico monday at 4am. I can't possibly be the right person to fix this..." "Oh I am huh? Sure..." So I appreciate help from all of you. There are a bunch of disabled sailors out there who thank you too. 
You might be able to disable `eval()` using [an INI setting](http://php.net/manual/en/ini.core.php#ini.disable-functions), but I haven't tried it before. In terms of fixing a hacked site, sometimes the safest approach is to render everything down to *data* (e.g. blog posts) and then reimport it into a fresh, trusted installation.
Yea, you might still wanna try something like `grep -ri 'base64' .` or similar commands to just have grep do a deeper check. Edit: and also see if u can find files that were added or modified around the same time as the original hack. Edit Edit: And also, make sure you update your host box. Give it a good reboot. Make sure there are not back doors or reverse shells listening after the reboot.
preg_replace with `/e` is basically `eval` - it's a somewhat common way to get around eval itself being disabled. The `/e` modifier was [deprecated in 5.5 and removed in 7.0](http://php.net/manual/en/function.preg-replace.php), so upgrading to a newer version will at least help. `HTTP_SBCEM` is a mystery to me, but check the nginx/apache configs to see if it's being injected as an environment variable by the webserver. Normally you may see HTTP headers added in `$_SERVER` (e.g. X-Forwarded-For would be available in `$_SERVER['HTTP_X_FORWARDED_FOR']`). In the environment... is weird.
Yeah I know. Where did I not do that?
&gt; e (PREG_REPLACE_EVAL) Warning &gt;This feature was DEPRECATED in PHP 5.5.0, and REMOVED as of PHP 7.0.0. &gt;If this deprecated modifier is set, () does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes (\) and NULL chars will be escaped by backslashes in substituted backreferences. Worst feature ever.
kind of a hack but just a thought (on phone so I can't test it): `strpos(gmp_strval(gmp_init($number)), '.') === false` gmp handles arbitrarily large numbers. or for that matter maybe var_export will work instead of gmp..
Braces are allowed in switch statements after "case" and work fine. I use them sometimes for large blocks.
This answer of yours arised suspicions against your easydb thing, so I went to see. `*FACEPALM*`. Your bunch of self-proclaimed security experts definitely needs to hire at least one programmer.
Nuke the vm from orbit.
That doesn't sound right. You ought to be able to bubble it up. You should have most of the machinery in place already with your internal functions to manipulate the heap. Simply put, while the node has a parent and that parent's priority is lower than the node's new priority, swap their places. Your heap integrity is preserved throughout the whole process. Here are a couple of heap structures for you to look into: - [Fibonacci Heap](https://en.wikipedia.org/wiki/Fibonacci_heap) - has the best performance, but is complicated to implement. - [Pairing Heap](https://en.wikipedia.org/wiki/Pairing_heap) - Has slightly worse performance than the Fibonacci one, but is considerably easier to implement.
Thanks, using the wayback machine was a great idea. Dreamhost only mentions CGI in 2000, but in 2001 they're advertising PHP and MySQL.
So you'd have to find an occurrence in O(log n), update its priority, and sift up until the heap properties are corrected? I wonder if a Heap data structure itself would be useful... would be easy to wrap around the internals. 
I think the author might be happier with Java 
Minor recommendation, having worked with Wordpress sites that are constantly under attack: Make sure the user name, their main one, isn't super obvious, I know its obvious to us but your clients have had this site a while by the sounds of it, so if it's"admin" and the like, make sure to change to something st least a little offbeat like "WP_sitenameanagram" or something. Also as said below, nuke it, rebuild it from a back up but make sure to check the back up first for any signs of this code, you don't want to go through that trouble then realise you've actually gone back to a better time for the bad guy...
You only need one other file to contain something like this to offer a back door to someone. Sometimes it can be just a few bytes, and be easy to miss.
What version of PHP were you using?
You will love that?
I bought my first paid-for hosting account in 2002 for a PHP site I was making, and by then PHP/MySQL was already standard in the hosting industry.
for securing source code
I update README file, hope it clarifies more for you. https://github.com/ray-di/Ray.Di#constructor-bindings
/r/lolphp is full treasures. It's hard to pick one. 
Yup, that's the general consensus for your hacked php servers...
you're looking for [obfuscation](https://www.google.com/#safe=off&amp;q=php+obfuscator).
Get a new copy of wordpress and diff the whole thing with your install. Whatever shows up as different you can look into. The wp_admin and wp_includes dir you can replace easily without having to worry about it. All the site stuff is under wp_content. A good diffing gui is beyond compare. That should get you clean code but the db and system files will have to be checked as well.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
PHP got more popular over time, so more and more hosts added support for it. I'm not sure you could point to a specific time it became standard.
Sorry, turns out it's RES. In case you don't know what that is, it's a browser plugin I use called Reddit Enhancement Suite, that I can recommend for any Reddit user. The three-backtick syntax is in your Gist. RES helpfully took your Gist and made your post look like a text post, I can expand it as if you'd posted a text post instead of a link. Apparently RES doesn't take the three-backtick syntax into account. I only realized your post wasn't a text post when I came back to look at it upon reading your comment.
Run clamav on the server. It detects these kind of injection attacks and helps guide the cleanup. You still need to patch to ensure a reinfection does not occur.
&gt;You might be able to disable `eval()` using [an INI setting](http://php.net/manual/en/ini.core.php#ini.disable-functions), but I haven't tried it before. I do this on all my installs, as well as disabling the functions that open remote resources from urls
I have just encountered this on a Joomla install. what happened was a "hacker" found a older un updated plugin in wordpress/joomla/ect and used that to get access to the server. In my particular case they set up a php mailer and started spamming. they modified random php files to retain access. after 10 hours of cleanup and still more to go I opted to reinstalled the cms, reapplied the theme, and reconnected to the database after changing all passwords. only then did it stop the attack.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Here's a writeup of how to do it and some functions to disable. Keep in mind that there may be functionality breaks if you disable something that one of your libraries uses so made sure to test in a lab: https://xsserver.eu/clients/knowledgebase.php?action=displayarticle&amp;id=25 To disable remote files you need to set allow_url_fopen to 0. If you rely on any external APIs this will break that, and it *may* break composer. 
&gt;The importance of keeping Wordpress (and other major out-of-the-box solutions) can't be understated. I think *updated* was meant to be in that sentence.
another smarty
Why not just use haml or jade?
Which is important for security. All other PHP templating engines seem to just blindly `htmlspecialchars()` everything, which isn't safe in all contexts. It also produces pretty-printed HTML.
&gt; But. I've done both and maintaining the former is a nightmare. Every time you need an ad-hoc feature like the odd attribute a framework uses or the latest Chrome nightly supports, if your template engine doesn't support it, you can't use it. And you know, that sucks a lot in practice. If the template engine has no way to accommodate new syntax it doesn't support, that doesn't sound like a good template engine. &gt; Not to mention how limiting it is to funnel everything through the same template engine. Because you can't supply an HTML snippet from a CMS or any other source Sure you can, if you're sure it's safe. &gt; I realize you've just launched an engine which fully understands the DOM it renders No I haven't. Latte is not my own creation.
Twig defaults to HTML escaping, but can do all of them; http://twig.sensiolabs.org/doc/filters/escape.html#escape If it really is accurately context aware, that's a pretty great feature, but the idea of context specific escaping is not missing from other libraries.
I didn't make this, by the way.
But the thing is Twig isn't context-aware, it doesn't know anything of the structure of the HTML document. It does indeed have some context-specific escaping mechanisms, sure, but they have to be invoked explicitly. So it's no better than plain PHP templating here.
If you tried Latte, you can try Nette it's framework from same author. :)
Latte = Slang for erected penis in German.
It's not amazing I've seen better!
[Caff√® latte](https://en.wikipedia.org/wiki/Latte) is surely what was meant.
&gt; If an engine has a way of accommodating syntax it doesn't support, while also being aware of its security context, pray tell how this Nostradamus engine works. &gt; Here's a specific task. Let's say Chrome adds support for a new "changeDeviceOrientation" event, and you can do this: &gt; &lt;body blink-changeorientation="alert('I am JavaScript')"&gt; &gt; How would your idea of a perfect engine remain safe and accomodate this syntax, if it doesn't know about this attribute out of the box, and it doesn't know the browser runs the contents as JavaScript? Allow the programmer to specify custom tags or attributes as necessary. &gt; How about conditional comments? Does Latte "accomodate unknown syntax" and remain safe... or does it just plough through it seeing a plain comment? Er, it's just a comment, so I would assume Latte just removes it or repeats it verbatim. I don't think a template engine can really be expected to deal with browsers weirdly interpreting comments.
You really want /r/phphelp. I'd start by checking your php error log. It should tell you more about their error and what line it was on
thanks will try on /r/PHPhelp 
Every time i see something like this it's always a WordPress exploit. WP has a huge install base so there are constant attempts to break into it. This makes it imperative that if you are using WP you need to keep it updated. Thousands of bots are out there constantly scanning for unpatched installs to inject backdoors to your server. Keep WP and all essential plugins auto updated and remove everything that isn't being used. I'd also make any non essential files read only and if you can, pull it out of the webroot.
It's very Angular-esque.
It was looking for context-aware escaping that made me post this here. It seems to be the only engine supporting it. Though I don't know how foolproof it is, I didn't write it.
Ok see, I get it. Someone insulted PHP and you feel like it's a personal attack. But let's look at it from the perspective of someone who needs a programming language to work in a consistent way. Take a look at the following gist: https://gist.github.com/anonymous/11bffb392b506c301d74#file-why-php-L9 See line #9? Take a real long look at it, meditate on it, feel it. I created this class. On line 9, since I declared strict types, and since I hinted `int` for `$id`, then logically anyone who consumes this class MUST enter an `int`, right? Otherwise, we have code that is unpredictable. Bugs that are hard to track, inconsistent/weird type juggling, cats and dogs getting married, you know the drill. But let's try this your way. In PHP 7.1, let's introduce the following: delcare( strict_interfaces = false ); This new feature will allow anyone consuming an Interface to not implement all of its methods. Even if the resulting class is not declared abstract! And if you have any issue with it, just write your own language! How's that?
Well written wrappers usually use Guzzle, for example: https://github.com/EclipseGc/acquia-sdk-php-cloud-api https://github.com/aws/aws-sdk-php
I've got money that says it's some shared server they don't have access to.
good stuff
Why not Twig? I thought we loved Twig? EDIT: Nevermind, just found out HAML targets Twig. Everyday something new, sigh...
I just set up the Phabricator workboard in minutes and it's similar enough to JIRA Agile that it makes me feel comfortable. Just add three columns to your project, ToDo, InProgress, Done, and get to work. :-)
An interesting debate in the Go community : tldr; most go devs are actually against a package manager : https://www.reddit.com/r/golang/comments/45fd22/so_you_want_to_write_a_go_package_manager/ I used PHP for 10 years before Composer. We had PEAR but it was a nightmare to use. I can't believe some people actually are against a package manager. "But manage yours deps manually !" , what the hell ? Do you think Composer is useless ? 
Oh Christ no. Why? DO VMs are cheaper than shared hosting. 
HAML is from like, 2010, or whatever.
&gt; Allow the programmer to specify custom tags or attributes as necessary. That's not the definition of "syntax it doesn't know" is it? &gt; Er, it's just a comment, so I would assume Latte just removes it or repeats it verbatim. I don't think a template engine can really be expected to deal with browsers weirdly interpreting comments. So "er, it's just a comment" and let our IE users be phished by XSS attacks in conditional comments. Good to see you speak frankly about this. I see you're *very* serious about safety. What browsers see in a piece of code, is what ends up affecting the user. If your template engine ignores conditional comments, it means it produces broken and potentially insecure output for IE browsers. While ironically the engine that's contextually unaware, behaves predictably in all cases. Every quirk, every oddity of every browser is potentially a point where a "contextually sensitive" engine can trip up and do the wrong thing without you even knowing. Also try to have the "programmer specify" those quirks in the Latte config and parser, for every browser, every platform, every framework, every library, every single day a new version of one of those browsers and frameworks is pushed out. Just a fair warning: it's a full-time job.
How much more amazing do you need than string_replace?
Right. The theory is great behind this. Question is... how many times you need CSS or JS escaping in well-written code? Here's my every app: 1. CSS escaping: 0 times. All CSS is static, in external files, any dynamic features use JS. 2. JS escaping: exactly 1 time (all JSON injected in one point in the page as an object, then pieces of it distributed in JS on the client side, PHP is not involved). 3. HTML escaping: everything else. So is Latte solving a real problem that programmers have, or just solving a problem for the messy programmers, that habitually generate inline CSS programmatically, and scatter JSON snippets all over their pages? In that vein, if Latte is helping messy programmers have a more secure mess, is Latte provoking organized coders, who already have secure code, just... to be more messy? Things to ponder. Engineers need to know not just what makes them feel fuzzy inside, but also how human psychology reacts to the changes they introduce. Counter-intuitive effects like these: https://en.wikipedia.org/wiki/Risk_compensation#Peltzman_effect When I see a project like Latte I see something that requires a lot of effort to maintain and eventually the author gets exhausted replicating PHP and browser behavior in his walled garden and tries something else. Look how Angular 1.x ended up. And while it takes a lot of effort, as I noted above, the value is entirely illusory, because a clean template actually does HTML escape the entire time, except for a very single JSON dump. Additionally Latte is blind to many browser-specific constructs like conditional comments in JS and HTML, which can be a potential weak point where attackers can try to plant XSS code and phish, say, IE users, even if the "generic user" is not affected.
&gt; You might be able to disable eval() using an INI setting, but I haven't tried it before. You cannot; ```eval``` is a language construct and not a function, you cannot disable language constructs with configuration alone. It can be disabled by an [extension](https://github.com/krakjoe/uneval) ... Solve the root problem, don't tackle one of the symptoms ;)
I wouldn't bet on it.
Looks like an injected script. It's malware.
It's all the fault of phpbb :) That set off a huge wave of demand for PHP.
It might not be just permissions, it might be user/group ownership as well. Regardless, yes, this is something that needs to be handled server-side, and if it really is down to user/group ownership, then it can only be solved by the sysadmin. Have you tried using the FTP credentials to SSH in? You might not have been told it works, but it might.
[(‚åê‚ñ†_‚ñ†)](https://gist.github.com/assertchris/2f9ed946aa2bf8e08b2d)
But this misses the point/goal of the entire series, doesn't it?
I'm not actually being serious. I'm never serious past 9pm...
From the way you asking, it should be Laravel. By the way, if salary is the only criteria, consider stock trading or bank robbery. 
Damn, no, salary's the last criteria. I work with Laravel, and I really enjoy it!
It seems I didn't really get what you asking. What is it then? Why there are different kinds of pizza and why can't you all choose one and stick to it? 
I hope the same people that wrote the example with htmlspecialchars camelcased did not write the source code for this template... 
Why should I use this over Plates?
Try blackfire.io, you can run it from the CLI and make it run as many times as you want. It will give you so much detail on the PHP execution and your bottlenecks. Also allows you to do comparisons on different profiles so you can see which methods are most efficent
Syntax is one thing, but the power of Latte is under the hood. - templates inheritance - blocks composition logic - custom macros support - caching options - ng-like filters - smart defaults It's actually very nice framework. Try it out with Tracy Debugger (https://github.com/nette/tracy). 
Can't you use the splat operator for that? $mysqli-&gt;bind_param(...$array);
Excuse me, are you john cena?
&gt; See line #9? Take a real long look at it, meditate on it, feel it. I created this class. On line 9, since I declared strict types, and since I hinted int for $id, then logically anyone who consumes this class MUST enter an int, right? Otherwise, we have code that is unpredictable. Bugs that are hard to track, inconsistent/weird type juggling, cats and dogs getting married, you know the drill. An `int` type hint specifies that the method will *receive* an integer. It does not specify that this integer cannot be the result of an implicit type conversion. This is an important distinction to make, and one you will find in nearly all languages supporting type annotations. Which type conversions are allowed implicitly however differs a lot between languages. Some languages are very loose, e.g. C although being statically typed, is very lenient about type conversions. Pretty much all conversions between booleans, characters, differently sized and signed integers, as well as floating point numbers are implicit and silent. Other languages have more limitations, e.g. by only allowing widening conversions. A few rare ones are very strict, I think Go allows virtually no conversions on non-constant operands. Strict typing mode in PHP controls how lenient parameter type conversions are in *your* code. Strict mode, apart from integer to float widening, requires identical types. Weak mode allows some additional conversions. Going with the analogue of C, this is similar to building your code with `-Wall -Wextra -pedentic`. If you do this, you will get warnings for a number of suspicious type conversions (likely float to integer conversions, and casts between different signedness at least). Note that here again, similar to how it works in PHP, you control the allowed type conversions for *your own code*. You have no influence over the code that will eventually link against your library. That code may well choose to use a lower diagnostic level. I won't even start on all the practical considerations of library interoperability here, because, quite clearly, after considering this for the span of a whole 30 seconds and writing an angry comment on Reddit, you have fully understood all the complex tradeoffs involved in the decision to a much higher degree than all the few dozen people who participated in the discussion and design of this feature taken together.
&gt; The difference? yes, different syntax, a bit of different functionality. In the end if what's the actual point to get actually really know all of them? Knowing ONE of them, perfectly, it will get you through what you need. I don't think this is true. One framework doesn't suit all situations. Want to build some enormous web app? Consider Laravel. Need a simple but high performance API? Then try Slim.
RFC: https://wiki.php.net/rfc/list_keys
I was a bit interested and slightly bored so here's a shot at an easier API: function mysqli_stmt_bind_params(mysqli_stmt $stmt, $arg0, ...$rest) { $types = ''; $args = array_merge([$arg0], $rest); foreach ($args as $arg =&gt; $value) { switch (gettype($arg)) { case 'string': $types .= 's'; break; case 'int': case 'integer': $types .= 'i'; break; case 'float': case 'double': $types .= 'd'; break; default: return false; } } return mysqli_stmt_bind_param($stmt, $types, ...$args); } mysqli_stmt_bind_params($mysqli_stmt, ...$params); It builds up the type string for you. The biggest shortcoming I can see is that `mysqli_error()` won't be set when a parameter is not of type `int`, `float` or `string`. I don't have MySQL set up to see if it can be set from user-land, but I suspect it cannot. If this was added internally then this issue could hopefully be resolved.
Cripes, it passed!
&gt; Pick an advanced one and stick with that framework This kind of thinking is exactly what's wrong with the development community. You don't pick "just one" framework, just in the same way you don't build a house with "just one" set of tools. You pick the right tool for the job you're doing. Be smart about the tools you pick, and take pride in your work. In a lot of projects, Laravel is the right choice. In others, Lumen might be more appropriate. Hell, in some cases, even Wordpress might be the right decision. *There is no one-size-fits-all solution to development, and to think that there is means that your problem solving capabilities are inferior*.
Look in the app/logs directory in the project root.
tldr? why was so many people against this? seems like there was only 1 vote in it.
Definitely gonna check this out tomorrow, though i would love to see some examples of what it actually does - that description is way too vague. Also, wtf is going on with that title, OP? This isn't twitter. I would probably resubmit a better link with a proper title, or crosspost (with a better title) in /r/phpstorm. You're probably not going to get a lot of upvotes with this horrid one.
&gt; The use-case given was an associative array passed into a constructor that had to have the actual data being passed extracted from the array via keys. It was a bad example to use in the lede which I failed to replace with something else. &gt; This seems very opaque and cumbersome for anyone coding against that API. They have to assemble an un-enforceable associative array with kvps for the values that should be passed directly into the constructor as individual parameters. That constructor should be accepting 4 parameters, not 1 assoc array parameter containing four kvps. &gt; This also doesn't allow strict typing of those parameters, and would therefore require you to manually type-check all the values that are in the associative array which is even more code. You also introduce documentation problems and add the possibility of lots more unit tests to ensure the values are checked properly. All of these would be solved by the proposal under future scope. The example in the lede should have been moved there.
&gt; Sure, you can type hint the array, but you still have no idea what the array contains, and no way to enforce it without extra code for validation. I think you missed what /u/allsecretsknown was talking about: the proposal under Future Scope. If that were to be passed, then you could indeed verify what the array contained.
So now we have a sloppy syntax with the problems of before :+1:
It disable functions as expected but 'eval' like /u/krakjoe said, it is a language construct (not a function, like 'for', 'if', etc.) hence it cannot be disabled.
Except duck typing isn't a "bad practice". Of course, the current "let's turn PHP into Java" cartel preaching "best practices" would never admit that.
It is not the role of the programming language to "teach" good or bad practices, it is the role of the developer to learn the proper way to design APIs that can be used in a straight-forward manner. You can create return and parameter objects already, so this doesn't prevent good developers from doing things the "right" way since they're following those principles anyways.
Ah, Yii2. The framework that I learned after cakephp, and simply don't want to change from to the big names of today (laravel, symfony etc). It just does things the way I prefer and would do myself! 
Switching to XHTML wouldn't have solved them because you could never force everyone to migrate. And XHTML was too verbose, anyway. I'd rather write `&lt;input type=text name=username disabled&gt;` than `&lt;input type="text" name="username" disabled="disabled" /&gt;`.
How is hash/array destructuring bad? Like everything else in any language, there are good use cases and bad use cases. EDIT: anyway, I understand your point of view, and I think they are valid, but I don't think it's the only valid point of view in assessing this RFC.
&gt; Instead of `$a = $b`, we have `list($b_key =&gt; $a) = $b` Er, the fair comparison would be between $foo = $bar["foo"]; and list("foo" =&gt; $foo) = $bar; Note that only one part has moved (the key).
[removed]
* Reduces Code readability in order to save line count (this is a *Bad Thing*) * If the paramater order of the array changes this will cause a bug, whereas being manually assigned by name will not.
Shitty attitude aside, I actually agree with you. Laravel is not the best fit for enterprise-level applications. Symfony Framework or Zend Framework are still probably the best bets to use in those cases. Laravel is a good choice for small to mid-level applications, but it's slowly getting better and may be able to compete with the big boys later on down the road. It's still a young framework and needs improvement, but it's nothing to scoff at.
So, PDO doesn't exist then.
&gt; Second, there is a slight possibility for a disaster. If some value, that have to be compared to a string, will have int type, and thus bound as int by this magic, the comparison results will be unpredictable. Can you provide an example of this?
I'm not sure what your point is as this isn't supported in PDO either. PDO is also a high level abstraction and doesn't always do what you think it does. For example, PDO can emulate bound parameters using string-escaping depending on how it's configured. That's not what you want a low level library like mysqli to do. 
&gt; I'm not sure what your point is as this isn't supported in PDO either. Well, you mistook the whole question then. It is not about a *placeholder* that can be used to bind an array. It's only about an API function that can bind all the parameters in the form of array. Just like `pg_query_param()` or `PDOStatement::execute()` do. 
i am a very experienced programmer, that is not the point. you also have to sell your code to customers, and believe it or not, customers dont't give a fuck about requirements to their server or something similar. you can not deny, that this would be a great improvement to the std API.
It won't, as it ignores the fact that the query takes some amount of time as well.
I'd call it "php for people who don't understand php but have to use it"
You don't have to throw exceptions with mysqli manually. just make it throw automatically using `mysqli_report()` function. Also, I believe that this referencing magic is not required with splat operator anymore. 
Can confirm this. Also the query will not use the index on column `name` and will do a full table scan because of the casting to float before comparison. Also it can happen on the other way around select * from users where id = '1a'; will return the row with id=1 because '1a' is converted to float value 1, but this doesn't seem to be such a big issue though. Unless the code has some information about the table structure, it is always safer to have the variables bound as string.
[removed]
&gt; If the paramater order of the array changes this will cause a bug, whereas being manually assigned by name / key will not. Will it? Surely the new behaviour *prevents* such bugs? Now that they're keyed it shouldn't matter what order they're in?
Thanks, I think this is the first good example I've seen for this RFC :)
Since most answers / comments were related to "regular" PHP applications (handle one single request and kill it), I've updated the question to give more context about PHP FastCGI applications (they are kept alive between request and thus can share loaded classes).
Hi Juris, Thanks for your feedback, really appreciate it. I will seriously consider this. Honestly, now my only concern is about the number of visitors. I'm sure a lot of users will find it really useful. But for some reasons the number of visitors is relatively low, though it's growing slowly :)
Hi, I've recently launched http://bearframework.com/, and I'll love some feedback. What frameworks do you use and what you like about them?
Check this https://3v4l.org/gIJAN :) "Catchable fatal error: Argument 1 passed to bla() must be an instance of int, int given in /in/OIa57 on line 4" Or this https://3v4l.org/MmoYt "Fatal error: Uncaught TypeError: Argument 1 passed to foo() must be an instance of boolean, boolean given, called in /in/MmoYt on line 6 and defined in /in/MmoYt:3" Helpful messages FTW :) .
Are you using CloudLinux? You can limit all sites CPU, RAM, I/O, etc usage, and it will produce graphs about it. They're not pretty though, but you can access the raw data and make your own pretty graphs.
Thanks for your reply, do you maybe have an advice what should I build upon that for something more advanced for personal practice? 
That's because boolean is not a type when it comes to scalar type-hints. So it thinks boolean is the name of a class. It will work if you use "bool". The messages need some consistency.
a few thoughts: * a 114 lines long constructor is an alarm signal. * a framework born in 2016 should be psr compliant * configuration such as pathes should be done in a config file in a config dir, not in public/index.php * the log requires you to hand which filename is supposed to be used at every write call - which means whatever part of the application uses logging needs to know the files. It also doesn't support error level, and thus no way to set how much you want to log in different environments * I saw several methods defined without the accessibility set. Don't do that. there is more things that should be improved. for example the weird import of the app instance to your local scope. but i really don't feel like going through everything.
Why not?!
just like how silex looks like slim, or slim looks like silex, or lumen looks like silex, or silex looks like lumen.
Mentions md5. Doesn't tell you never to use it. Should be titled "Least secure password encryption methods for PHP".
sadly not, were running all centos distributions 
Terrible site full of out of date practices. Fortunately all the mysql examples are broken for PHP 7 as they appear to be using the now removed mysql_* functions. The authentication examples are terrible as they all use plain text passwords. This is inexcusable in the era of the password hashing functions.
[removed]
&gt; If the paramater order of the array changes this will cause a bug Where did you get that idea? list() is, with the exception of certain edge cases, equivalent to regular assignment from an array index. The purpose of the RFC was to add a variant of list() which uses explicit keys, so you're *not* dependent on order. And even regular list() doesn't use the order of elements, it goes by index.
Yes, Java's type system is much better :p
Good lord. I know someone who might have something to say on this topic. paging /u/sarciszewski 
Well, arrays also have the function-like syntax with array(). I'd like to add a short list syntax like that for arrays, so this: list($a, $b) = array($b, $a); can become this: [$a, $b] = [$b, $a]; Making it share the short array syntax with arrays would make it more obvious what it does, I think. In other languages, pattern matching constructs resemble what they match against.
Something like that would have been a better example to include, yeah. It's what this feature is mainly useful for. Argument bags are a distraction because they'd be dealt with properly by supporting list() in parameter lists - which isn't what this RFC does. I don't think people here haven't read the RFC, it just doesn't present its case well, and that's my fault. Anyway, it's particularly useful in foreach: &lt;?php foreach ($rows as list("userId" =&gt; $userId, "name" =&gt; $name)): ?&gt; &lt;li&gt;&lt;a href="/users/&lt;?=$userId?&gt;"&gt;&lt;?=escape($name)?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt;
It just works. 
I think the opposite, when looking at the example above. Personal preferences on that particular point. Much like unbalanced brackets, my eye capillary pop when seeing an un-closed tag.
I've never used CI but I've just quickly looked at their documenation, https://ellislab.com/codeigniter/user-guide/general/views.html Pass `true` as the 3rd argument to `view()`, this will return the view as a string, allowing your first example to work. header('Content-Type: application/pdf'); header('Content-Disposition: inline; filename="file.pdf"'); $html = $this-&gt;load-&gt;view('templates/pdf/header', $data, true); $pdf = $this-&gt;pdf-&gt;load(); $pdf-&gt;WriteHTML($html); $pdf-&gt;Output();
Hmm, I will agree that implicitly closed tags are one of HTML's worst features :)
I want the developer to think more about their app rather than the framework. So instead of "new BearFramework\Response\HTML()" he should write "new App\Response\HTML()" without bothering with the "using" keyword. In my comment above I've mentioned how I wanted Bear Framework to be you app core (like a default PHP library), rather than just another framework.
Thank you for your review. 1. It's not. It's a lot more basic. I wanted the framework to be much more like PHP itself (simple), rather than a fully PSR compliant framework. 2. True 3. True. There are improvements that could be made for v1.0
Oh I see, you're just trying to do this: function bind($statement, $types, $object) { $params = Array($statement); $params[] = join('', $this-&gt;paramTypes); foreach (get_object_vars($object) as &amp;$value) $params[] =&amp; $value; return call_user_func_array('mysqli_stmt_bind_param', $params) } "Implemented in the core" is what PDO is. If you want low-level access to the MySQL API then you use mysqli_. It doesn't make sense to use a low-level API and then complain that it's low-level. 
You are right, I did mistake the question. Some of the other answers here pointed me in the wrong direction. This is really sort of trivial. PDO is a high-level API and mysqli is a low-level API. It doesn't make sense to implement something like this in a low-level API. If you can do it yourself then it's not low-level. 
Thank you :)
Here is another way to put it: why should we use it?
Heavy user of Yii 1 and 2 here. While very useful, the whole effort they have on the frontend just seems wrong to me.
I'm going to start a new project in a few days, I know this isn't quite to v1 yet however I will consider trying it out. I for one welcome another alternative, the more there are the better the competition gets!
Just started using the front end part of it now (I usually work with AngularJS, which uses the back and kinda like an restful api), and I'm currently enjoying the way Yii does it. My current application doesn't uses really complex stuff on the UI, so the available widgets suffices my needs. But I can see why you made that point. 
NewRelic with each virtualhost tagged as a different app (which can be done in cPanel's virtual host template for new sites).
The accessibility he refers to is likely [visibility](http://php.net/manual/en/language.oop5.visibility.php) where you define "who" is allowed to access properties and methods on your objects.
Yes, it will be hard to replace, just like replacing PHP. Thank you.
A few packages I find myself using over and over: * [vlucas/phpdotenv](https://github.com/vlucas/phpdotenv) - Environment variable configuration * [doctrine/cache](https://github.com/doctrine/cache) - Caching covering plenty of storage engines * [filp/whoops](https://github.com/filp/whoops) - Bright and shiny error reporting in development. 
Your framework, whether you like it or not, is a 3rd party library in another person's app. It's not a core PHP library. That's why it needs a unique top level Namespace, to separate it from other libraries and the app the user is creating. How, exactly, are you envisioning people using this framework? Are you thinking people will edit Bear files directly because that's not good. For instance, how are you expecting people to extend the functionality of App\Response\HTML? Do you want them to edit App\Response\HTML.php itself because that would be bad.
Maybe /r/devops It doesn't cost anything to leave.
&gt; Security is the most important aspect above all else. My recommendation would be to [start here](https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide) when you go anywhere *near* cryptography (e.g. user and/or token-based API authentication). &gt; However, I'm still considering pdo because I don't know how the two compare security-wise (speed/weight is only secondary concern). Considering that Doctrine uses PDO under the hood, I think it's probably OK. Haven't audited it yet. If you decide to go with PDO, make sure you: * Specify your charset in the PDO DSN string * Turn off `PDO::ATTR_EMULATE_PREPARES` * Never concatenate user input with the query string if you can help it (and use a whitelist filter when you can't help it)
This doesn't store passwords.
*It's not a wand, it's a wizard.* There is no "secure" or "insecure" libraries. There is only user, who have an idea or don't have an idea what are they doing. 
&gt; You can look at Bear Framework more like a core PHP library than a framework. Some poor maintainer is going to loooooove this in a few years.
Thanks for the tips
Maybe secure isn't the right word, but there is definitely a difference in trying to build your own encryption for passwords (even if you use a salt and SHA512) vs using a library that has been vetted/proven by the community.
Well it is not recommended to use short tags, you cant be sure they are universally enabled on webhosts and it's not a good practice anyway. But yeah, I wouldnt use Plates either. For me its Twig, Blade or Nette templating language. Edit: Deleted last post, I guess I misunderstood that Plate uses PHP as templating language too.
Thank you.
exactly that. having to manage your own server.
&gt; [Allows] to create a reflection instance without loading classes into the memory. Is this the sole benefit of this library? I'm not sure I understand the benefit of your library compared to just using PHP's reflection. From what I understand you're parsing PHP code at runtime in PHP - which should be *really* slow, right? Do you have benchmarks comparing PHP's reflection vs yours? Seems like a cool experiment though! :)
Nowhere does it say that short tags are a bad practice. Also on all webhosts you can set your own php flags to turn them on, and they are on by default 99% of the time.
PHP's API is IMO the best of the languages surveyed. The fact that if you choose `PASSWORD_DEFAULT`, and implement the upgrade routine you easily get secure by default practices is a big win IMO. And you don't even need to implement the upgrade routine for new users to get the best default (if it changes), as new generation of hashes will use the new default, but older hashes will still work with `password_verify` despite the change in default.
I used Smarty for the longest time, but ultimately switched to twig for the performance boost. Yes, smarty is way behind and almost a dead project. But there's always a possibility that threads like this might light the fire under their asses and get 3.2 made. 
Doesn't matter. Just a bunch "extra-secure" libs thrown together won't make your code secure. You can't buy security that cheap. You either know what are you doing already and thus don't have to ask silly questions and rely on an advise from a random passer-by, or you shouldn't have illusions about the final security. 
I just heard about length extension attacks the other day. I kinda get it but it doesn't really seem like that feasible an attack to me.
I use Smarty; mostly for legacy reasons (as in, legacy code and lazy programmer who sees no great need to change). 
They're great in scenarios like this: * You can upload an arbitrary file. If an MD5 hash of the file is already found, it skips the security checks. If it's not found, it sends the file off to VirusTotal. * Use a LEA to create two files: one benign, one malicious. * Upload the benign file, it passes. * Upload the malicious file, it skips validation and is trusted implicitly.
Right. A few secure components (the AES block cipher, a CSPRNG) can still be stitched together insecurely (ECB mode, chosen-ciphertext attacks, chosen-plaintext attacks, IV/nonce reuse with CBC/CTR mode, etc.).
I am genuinely curious why SHA512 with rounds is not on the list. Can you provide any more insight there?
I don't disagree with what you're saying. An application is only as strong as it's weakest function. However, I'm implementing some common patterns (like a user login) and I'd like to use already existing code/libraries that are better than something I could build from scratch. 
I see. I'm not tied down to doctrine, though as I said I'm more concerned about security than building the lightest application possible. 
I usually just roll PDO, that way I know there's no one to blame but me in the case that something really bad goes wrong.
Because sha512 is intended to be a quickly computed hash function and it's very easily solved in parallel on commodity GPU hardware.
It is better not to return $this from methods unless you have strong reasons to do so, such as creating a DSL like in query builders. There is a blogpost about it with more elaborate explanation here http://ocramius.github.io/blog/fluent-interfaces-are-evil/
I'll defer to [Aaron Toponce](https://pthree.org/2014/12/26/sha512crypt-versus-bcrypt/). &gt; So, the reason to use bcrypt isn't because "it's slow". The reason to use bcrypt is because "it's ineffective on GPUs". The same argument against PBKDF2 is relevant against SHA512Crypt.
&gt; method='pbkdf2:sha1', I'd advise against PBKDF2 if you can help it, which you almost certainly can.
I really wouldn't call these typed arrays, it only works if you have a function which takes one "argument" which is the typed "array" or the "array" _must_ be the last parameter because you can't have other arguments after the variadic. Even if you go with ocramius's approach you have this cruft everywhere you want to be defensive. Suffice it to say, I'd fail the code review
That's what I was thinking. I ran phpbb and know many others that did too. We initially used it as a blog because it was way more capable than the Perl CGI blog software we were using before.
I also first used it in 2002.
You don't. You authenticate against Google, Facebook, Twitter, Microsoft, or whoever the fuck else. Many people will see that "create an account" page and fuck right off to another website. Nobody wants to create a profile, nobody wants to create another account with another password to remember. People who are security conscious enough to know that using the same password for everything is stupid but don't want to resort to something like Lastpass will be lazy enough to walk away from your site. Use the tools that other people made for you, are proven to work, are known to largely be secure, and have stood the test of time - Not Invented Here syndrome is huge and annoying.
Thanks for the article. I will still have to respectfully disagree though. I don't want to go into a full essay style reply to the linked article, but there are a few points I believe are just plain wrong there. First off, the notion that you can't "contract" the signature of a method. As of PHP 7 you can declare a return type of "self" that is enforced by the language. Could someone still return a different instance than the object being called? Yeah. Okay, so the argument here is that the object is actively trying to fool the developer trying to implement it. Then the readability argument is presented. I happen to like the look of object chaining. Even the obfuscated example the author provided. I guess the part that really got me was the notion that it's better to return a void because then you can change the return type later. Here's where I would 100% agree with the original article's notion that a command method shouldn't be returning things that should be handled by a query method. Set the value, then get the value. Don't try and do both. I used to make that mistake way back when, and have felt the burn. I'm not trying to argue for the one true way to do stuff, but as someone who rarely set up object chaining in the past, and now does it all the time I have to say that I definitely prefer chaining. When using an object setup this way, I can chain my commands or not as the situation dictates.
&gt;ineffective in GPUs Don't underestimate just how cheaply you can spin up an AWS GPU instance and run hashcat. You want this.
I personally refuse to use any service that *requires* me to authenticate with another service, and I'm far from the only one. You need to realize that by doing this, you are __forcing your users to contract with a third party__ (handing over authentication data to them as well), and usually not one that has their best interests at heart. The only reasonable implementation for this was Persona, and that has been killed off. So no, OAuth/OpenID login is *not* a replacement for creating an account. It's an addition at best.
&gt;True, but that's irrelevant to what's being discussed. I disagree, it's exactly what's being discussed. There are perfectly good authentication schemes out there handled by others and are proven secure. Personally, I think that nobody should ever roll their own authentication unless they have a team of security experts to properly test it and verify that it's correct. If you must host your own, use a library that can be trusted. Use a third party whenever possible.
&gt; Okay, and how do those systems handle your passwords? LM Hash of course! I mean, you don't need secure passwords when it's not web-facing, right? /s
https://www.grc.com/sqrl/sqrl.htm
I guess I'm fine with trusting Google, Facebook, and Microsoft - the three people I've integrated with in the past.
OH Shivers. Have we moved? I'm still using Smarty, I have very little complain about. Last time I saw a comparison between Smarty with Twig, Smarty was faster. Anyone got any data on this? 
&gt;Security is the most important aspect above all else. Don't use PHP. Don't use anything that hasn't been stable for at least 20 years. If you think I'm being extreme, well, that's what people that really prioritize security actually do. There's a reason so many banks still run the financial processing on COBOL, and only recently have they been moving to intentionally outdated but known-secure (or at least insecure, but with all security issues well-documented) version of Java or something else. &gt;I want to build it as light as possible as more libraries and frameworks increase the attack surface. Another reason to dodge PHP or high-level languages in general; the run-time introduces a whole lot of potential attack surface. &gt;The first component I need is a lightweight router to handle URLs. The second component I need is a user registration/login. Lastly I want to use doctrine for my orm. However, I'm still considering pdo because I don't know how the two compare security-wise (speed/weight is only secondary concern). I don't think security is really your main concern at all if you're not at all scared of introducing a whole bunch of foreign code without extensive reviews. You just want something that doesn't have a vulnerability: that's true for everybody. Just say you want some decent code - that's fine. If you're not willing to shell out to hire a real security auditor to come advise you and test your solutions out for issues then you aren't actually in a security-first situation.
SQRL uses scrypt (one of the recommended password hashing algorithms in the above article) and Ed25519 (currently the most secure digital signature algorithm to see wide usage). We haven't audited its usage but a description of the protocol seems sound. Scrypt seeds an Ed25519 keypair, where your public key is your identity.
You need to understand that you are building a site *for your users*, not for yourself. Who you trust isn't really relevant, it's about who your users trust.
Yeah, that's a great point too.
Ellis Labs is the old version...go to http://www.codeigniter.com 
In the Python example, add `import hmac` :)
`-&gt;` is an operator. It's used on an object to reference properties and call methods (functions). I suggest reading through [the PHP manual sections on classes &amp; objects](http://php.net/oop5).
Maybe we'll get a proper successor to the [arrayof RFC](http://wiki.php.net/rfc/arrayof) some day.
[removed]
And if they don't update there would be quite a few other security concerns too. In fact you can assume they are not too big on security.
Nope. It's the file contents that would have the hash collision. Also, this is how AV signatures are bypassed. Find a MD5 collision with a popular program that can't possibly be malicious, and if the AV flags it as a PUP, users complain until it gets whitelisted.
I wrote this today to solve a common annoyance. I can't for the life of me figure out how to spin up `phpunit` and pass along all the environment variables via the `system()` command. Any thoughts? I could work around it with `pcntl_exec()` but it's not available everywhere and has issues with STDIN/STDOUT/etc.
Thanks, that makes more sense! This bit should be in the readme :)
I know C, however for web (yeah I know you can integrate C into .Net Web Projects) I'm much more comfortable with C# and .Net. Just as you said about relying on PHP and all of its source, I'll still be relying on the .Net and MVC Binaries. I do know some Java and a little about JSP, however I'm confident enough to build a secure webapp with it. 
You're right, but perhaps for the wrong reason. If the goal is simply to prevent more than 100 queries from being run per second, then adding the query execution time to the 10ms sleep time would still satisfy the goal. However, if several requests came in concurrently, then the 10ms sleep times would all be run concurrently, as opposed to sequentially. Still, the statistical likelihood of this happening would likely be so low you could argue the crude approach provides pretty decent bang-for-the-buck in terms of dev time needed to reach a desired result. I only point all this out because this is the internet and we're meant to argue :P Also, speaking from personal real-world on-the-job experience as a consumer of API's with rate limits, I've used the sleep approach to limit the request speed of my own API calls, so the solution can work in practice.
there are ecommerce systems and cms, that still use smarty. other than that, i don't think there is a future for smarty. on the server side, you use laravel blade, twig, mustache, etc., or you just don't have templates anymore with json api microservices with spa's in the frontend, that have their own templating engine.
not sure, why i would want to use this.
Yeah, we can set up an alias in the morning.
I didn't downvote you because I think that your are actually somewhat right, for the particular usecase your comments are addressed to. It's true that if you install framework, or CMS that uses password_hash on a old version of PHP that hypothetically has an old default that this means you aren't secure. And you are right that if you don't implement the upgrade routine even if you update your version of PHP that this means that users who signed up when there was a bad default will be "perpetually stuck with a hash from a weak algorithm". The issue with this line of reasoning is that all of these scenarios involve security negligence to a level that implies that in the absence of the PHP API they wouldn't have upgraded their password hashing strategy anyway, making it a moot point, and not negating the benefit for those of us that DO in fact take security seriously, and DO in fact upgrade our PHP versions, and DO in fact implement the password re-hashing routine. You don't design systems for those who regardless of the API you provide won't do the right thing anyway.
Well, it's one of those things that if you don't know, you're probably not experiencing the problem. I maintain around 20 php projects on a regular basis, and each have a local phpunit install in the vendor/ directory. This little script basically allows me to run phpunit from any directory in the project. The way I usually work is that I have a split terminal, vim on one side, and a command-line on the other. On that second one I tend to jump around in the project and run phpunit a lot. This saves me from having to know where I am in the path and having to `cd` back into the root of the project.
Well, right now this script would unfortunately just find itself, as it also installs a 'phpunit' script. In my case I don't actually have a global phpunit, so it works out. 
write a simple php access to that file and use the same configuration as your production environment to run it to check whether your code have the access permission.
&gt;threads like this might light the fire under their asses and get 3.2 made The issue comes when you ask the question "is it worth it?". Twig overtook long ago and is well known for being faster, better documented, easier to work with and way better maintained. From the point of view of the Smarty guys, they can't compete. Twig's backed by Sensio. Smarty relies on adverts plastered all over their (very dated and ugly as hell) website. You've got to wonder if it'd ever be worth the time and effort to actually continue working on Smarty. It's a dinosaur compared to pretty much every active template system out there.
Sorry, may be I didn't make myself clear. Should have been illustrated the opposite: mysql&gt; select * from users where name ='0'; Empty set (0.00 sec) When both operands are strings, then no casting is ever involved and thus results are correct. Is it what you were asking? if not, please let me know, I am eager to make it clear. 
"Better" is the goal for v1.0.
Thank you for your comment. I think I can fix this (remove the App namespace) and still make it easy to write by dropping "use" and "vendor".
I don't understand how this is different from just installing PHPUnit globally via `composer require global phpunit/phpunit`? It has the same effect.
i won't consider anything associated with PHP to be "low-level". if you ever wrote C or C++ code, you will agree. if i want low-level access to anything, i would have used C anyway.
The workboards have recently been updated so the official documentation is probably a bit behind. Best thing to do is to just start using it. It's fairly user friendly.
glibc's sha crypt is comparable to PBKDF2 and as such suffers from the same problems: It's not optimized to be GPU or memory hard, and as such it's far too easily accelerated on GPUs and ASICs, especially in its default settings of 5000 rounds. The "use a fast, optimized hash function lots of times in a row" construction is only designed to be hard on CPUs, which stopped being an important threat ca. ten years ago, when GPGPU became possible. And now that ASICs are cropping up, GPU-hard algorithms like bcrypt/scrypt might not suffice any longer either, hence the development of Argon and related algorithms for the PHC.
You make a lot of assumptions here. The whole point of the Command is that it makes no assumptions.
What you are describing has nothing to do with Command/Query segregation. 
&gt; Which is precisely the sort of service that Paragon Initiative Enterprises offers, by the way. ‡≤†_‡≤†
I support a platform that has been on V2 seemingly forever. Not sure if they will ever change. I can't imagine what V1 must be like.
extract of the incident reports: One report was about a male attendee offering 2 separate female attendees a private sampling of relaxation techniques in his room. And when the women refused the man did not continue or push. When the incidences was brought to the man as being inappropriate he apologized and said he meant well, and he would not do it again. A second report was made about a man in the pool area, long after the conference had ended for the day, who approached the girlfriend of an attendee and flirtatiously claimed that she could do better than her current boyfriend. We recommended that the man retire to his room and get some rest for the next day, which he did. Nothing further was said, and no additional actions were taken. There was a third incident reported which took place before the conference actually started, but was reported after the conference ended. A male offered to take a female shopping some distance away from the venue. Allegedly, while they were shopping the man touched the woman in an inappropriate manner. Because of the lateness of the report there were no further actions. In a fourth report, allegedly a woman was swimming with a group, long after the conference had ended for the day, and one of the men in the group touched her in an inappropriate manner. The following morning this was brought to our attention as a 3rd party story by someone who was not present. We spoke with the man, who remained in his room except for meals over the remainder of the conference. And finally in a fifth incident, also reported by a woman, stated that a man in the pool area was over-aggressively tugging on the straps of her swimsuit. The apologetic man was warned and promised to refrain from such activities in the future. The woman said this was an acceptable outcome.
I did try Gogs and like it, but trying to get Go set up on the KVM proved to be a pain in the butt. Plus, I'm more comfortable having everything integrated like GitLab, Phabricator, Atlasssian stack, etc... are. Having to maintain multiple pieces just became too much for me. :/
This is not a support subreddit. The post which you expect us to read is longer than the sidebar which you couldn't be bothered to read.
&gt; True, it was handled properly. But the problem is it got reported. That means there are people who would report every little thing out there. And when the blaming starts it just boils down to whoever has more twitter followers. What's the alternative, though? People feeling unsafe ‚Äî and possibly leaving the community altogether, or not coming to events ‚Äî because they don't feel comfortable making a report? I'd rather people felt empowered to report things if they're on the fence, and then trusting that the person or people who deal with them act appropriately (particularly in terms of not making a mountain out of a molehill), as it sounds like happened in this case. Edited to add: a private report to the organisers is totally different from publicly tweeting. In this case, it was private, handled privately, and was all OK. I think that's fine, and should be encouraged. The dongle case was mostly problematic because of how it turned into a public slanging match with bandwagoning. That's what you don't want.
I got the answer I needed but I X-posted in the relevant sub. Thanks for moderating.
&gt; who approached [an attendee] and flirtatiously claimed that she could do better than her current boyfriend. I don't know man, that's pretty fucking terrible there. He did something so bad that it required reporting: &gt; We recommended that the man retire to his room and get some rest for the next day, which he did. Talking about mountains and molehills... this just stinks. The CoC should also include not even smiling at someone of the opposite sex.
https://3v4l.org/p8ZD9 The first 22 characters after `$2a$10$` are a salt.
Tech conferences are not a place to pick up chicks
I refuse to let my argument slip into "maybe" and "contet matters". Either the context is in the report or it doesn't matter. "Feeling uncomfortable" is a personal thing, if an otherwise ok action makes somebody feel uncomfortable, it's their problem. E.g. if I say I'm a really devoted vegan and you eating a burger in front of me makes me feel uncomfortable it's my problem and not yours.
What were the reasons for decline? You even voted against that yourself... Also, if generics were added couldn't arrays have generics too? I know they're not objects but it would make sense IMO.
We requested he go to his room to prevent him from getting his ass kicked. The boyfriend was not happy.
The pattern may make no assumptions but any implementation will exist in a context which has assumptions. Just because I can move the exception handling outside the Command doesn't mean that it will make my programming life easier.
&gt; And why did they make him apologize? For what? What if he didn't? The report is ambiguous but it reads to me as he apologized *to the people who confronted him about the reports*, probably of his own volition. It seems unlikely that the man was forced to apologize to the women. &gt; A guy asked, got a refusal and went his merry way without bothering anyone. He certainly made two people feel uncomfortable enough that they felt it necessary to report so yes, he was bothering someone. Just because he responded in a way we hope any other person would doesn't remove justification for the reports. Not everyone will report when they have been made to feel this way because it's embarrassing and humiliating. Direct, sexual propositioning of strangers is inappropriate but is unfortunately something that many have women deal with - this type of behavior is one of the factors which drives women out of STEM fields.
&gt; chicks that is demeaning to women in tech and you must be a sexist to hold such views where women are compared to weak and fluffy animals. /s
No tests. Written for 5.6. Reading through some of your source made me wonder why you did certain things...
uncomfortable != harassment ... I feel uncomfortable in rooms with lot of people, so any conference is uncomfortable for me. Should I report everyone at the conference? Should I stop going to conferences? 
There's a nice list of the changes here: https://github.com/tpunt/PHP7-Reference I've also written a book which covers similar material with real-world examples: [PHP 7 Upgrade Guide](https://leanpub.com/php7) If these resources aren't exactly what you're looking for, might I suggest creating a Github project to compile your resources instead of a Reddit post? It'll make it easier for others to view and submit changes.
Gosh I wish people here gave me the benefit of the doubt instead of assuming I'm an idiot. Anyway, installing it globally means that you have two composer autoloaders active when your tests are running. This can cause for some serious conflicts due to versions of packages being incompatible. You also end up loading classes from both your global install and local. At least for me it caused a number of problems. This avoids that issue completely. And its not a unique idea either. Packages such as Grunt from npm have both a main package and a grunt-cli package intended for a global install.
You are wrong in this case. We chose the talks (regardless of gender) and were happy it happened to be a very diverse selection. The talks give at the event were top notch. It is nice to see more women submitting talks.
It's a nice idea with the git project, I don't think I'll be good at updating it there though :)
&gt; It's ironic for you to talk about "non-biased speaker selection" and "gender diversity" in one paragraph. In today's world those two things practically stand in opposition well, that's an interesting assertion.
@/u/dracony I think /u/jindrap is showing that, because of the CoC, the event in question must therefore have been construed as harassment for the event organisers to be able to act on it in-line with the CoC. Relevant quotes: &gt; providing a harassment-free conference experience and &gt; any problems of this nature at the event please contact [...] If it was not considered harassment, then no action should have been taken because the CoC doesn't support that.
This. Thank you.
Either you choose talks based on the speaker's rhetoric skills and the topic-audience match, or you choose them based on speakers' bodily attributes like sex/gender, skin color, sexuality. The latter is what diversity proponents are doing.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
yeah but ALSO the first things, though, if they're doing it right. 
Should've let him do it! Someone messes with my girl at a conference I'll be whooping his ass so hard his git repos will revert. I'm for real.
&gt; I don't think there should be "extending" or "modifying". There should be only "using" and hooks can help this. The BearFramework's API is not going to be useful in every situation. To make it as flexible as you say it is, you should make it easy to extend the functionality of the framework. &gt; Take for example the Memcached library (php.net/manual/en/class.memcached.php). It's API is complete (set, get, delete, ..) and if you want more (serialize for instance), you create objects/functions that use what's already defined. You can extend core php classes. For instance, the very useful [Carbon](https://github.com/briannesbitt/Carbon) library extends the core PHP DateTime class. Even your example Memcached can be extended, [and has been by many people](https://github.com/search?q=php+%22extends+Memcached%22&amp;type=Code&amp;utf8=%E2%9C%93). Arguments about composition vs. inheritance aside, there are cases where it is best to extend an existing class, and your namespacing makes that difficult.
So to clarify: setting the rounds parameter to a higer value does not add as much protection against GPU attacks as much as the algorithm differences in bcrypt does?
Yep, that's the takeaway.
In the short example code, yes. Under the hood things are very different.
PHP is a C programmer's idea for a web scripting language. It started out as just a bunch of C tools and evolved into a language. Most of the standard library is just a thin wrapper around existing open source libraries and the C standard lib. This should look awfully familiar: https://dev.mysql.com/doc/refman/5.7/en/c-api-function-overview.html 
But, he commented **every line**, surely it's production ready now?
OP already posted this [two weeks ago](https://www.reddit.com/r/PHP/comments/448747/ornithopterio_extremely_fast_easytouse_hackable/). His reaction to feedback was more or less [pissing on the people](http://imgur.com/qdFyf3q) who took their spare time to look at OPs code. The second reaction was to edit history and remove all his comments and - apparently - try posting this again (at least with some criticism addressed). While this is an improvement it might have been more honest to openly address criticism.
If you felt it was escalating to that, you should've removed the person who was threatening an assault. That sort of person has no business being at a conference in the first place. Not exactly cultivating a safe environment if you're allowing actual physical assault to take place. Better to punish those who are jokingly insulting.
doesn't smarty's website tell you enough? :D that's like early 00's stuff right there.
yeah but it's meant to be _as well as_ your competence. And also I bet you wouldn't be that offended.
Conferences have served as a place for people to hit on each other as long as they have existed. Just as camps, tours, cruises, schools, workplaces, bars, gyms, festivals and any other gathering of people taking longer than 30 minutes.
So women, people of colour, and gay people should generally assume that their accomplishments aren't due to how well they do what they do, but rather that some diversity coordinator decided they liked their genitals, skin, or sexual preference? And yes I would be offended. I'm already offended that my penis, pale skin, and assumed sexual preferences are being counted against me. No matter how competent I am, these factors out of my control mean that I don't have the same standing as those who are discriminated toward.
ok, heres an alternative. Download vmplayer from VMWare (free virtual machine player), then look for a PHP7 pre-made virtual machine (sometimes called an appliance) you can use for testing. Or load a ubuntu appliance and just install php7 on it. You could have one virtual machine running php5 and another running php7 and compare speeds. Or you could create 2 docker containers in the same virtual machine and run php5 in one and php7 in the other. Final suggestiion is look for a version of XAMPP or MAMP with php7 to install on your windows or mac maxhine. 
Your example could easily be either completely harmless or harassment depending on the conversation and the circumstances. What's the point? I guess for me it's that context matters, and not necessarily just one person's context of the situation.
Er, that's the opposite of what I said. 
And I'm sure they'll use your comment as an example of why these codes of conduct are absolutely necessary. Because, being people who lack any semblance of subtlety, they assume that any sort of flirtation is going to be aggressive, unsolicited, and persistent after rebuffing. I know of several people in this community who have started romantic relationships at a conference. Hell, I recall one protracted sexual relationship between two very well-known community leaders that started at a conference. And I'd not hold that against them, because they're great people who just happened to be mutually interested in each other. To paraphrase Stephen Fry to this end, &gt;It‚Äôs the strangest thing about this [ideology] - it is obsessed with sex, absolutely obsessed. Now, they will say we, with our permissive society and rude jokes, are obsessed. No. We have a healthy attitude. We like it, it‚Äôs fun, it‚Äôs jolly; because it‚Äôs a primary impulse it can be dangerous and dark and difficult. It‚Äôs a bit like food in that respect, only even more exciting. The only people who are obsessed with food are anorexics and the morbidly obese, and that in erotic terms is [feminism] in a nutshell. It's pretty funny actually, that a criticism originally of the Catholic Church works so well toward third-wave feminism too.
My argument was that rather than people going "oh he's Indian AND gay, we'll have him" which is what OP here was saying they're going "Oh, he's a great programmer with great things to say - _and_ he's Indian and gay, which is also great" I'm not saying that's good or doesn't have it's own problems - of course it does - but it's not the same as picking people only because of certain non-tech-related traits[1], so the argument about not picking the "best" people doesn't make that much sense. [1] of course the argument here is that we subconsciously do that anyway and the organisers only pick people like themselves.
People in this community don't do context and subtlety.
Wow, what a reasoned and well-thought-out argument there.
It's horrifying how these have been phrased, really. Awkward mistakes and simple misunderstandings have been characterized through prejudiced wording to make each of these men (and it's only men being reported, of course) look like perverted scum. The first incident was certainly inappropriate if the details are accurate - though how the remainder are framed calls that into question - but they're simply awkward flirting that could've been dealt with simply by saying "No, that's inappropriate", instead of turning it into an incident reported to the conference organizers. The second incident was clearly just a joke taken very poorly, and handled even more poorly. Simple flirting resulted in the man being told to leave because the boyfriend of this woman was likely to beat the shit out of him. Physical assault's alright, but ill-considered flirting is an "incident". The third incident has a woman who chose to leave the conference grounds with a man on what seemed like an impromptu "date". Being "touched in an inappropriate manner" is left to the reader's imagination, and I'm guessing we're supposed to imagine he fondled her aggressively, as opposed to him having put his arm around her, or hugged her, or any other sort of innocent affection now deemed "inappropriate". The fourth incident also uses "touched her in an inappropriate manner" in this way. It sounds like some busybody decided to pounce on innocent or playful affection, ultimately resulting in this man being shamed into hiding for the rest of the conference. The last incident should've ended right there by the woman telling the man to stop. But no, it had to be turned into an incident, so that the man could be shamed. Here's an idea - if you're that sensitive to being touched, maybe don't play with other adults in the pool. Or shall we all just swim laps with eyes strictly averted?
yay. Another framework.
&gt;Oh, he's a great programmer with great things to say - and he's Indian and gay, which is also great Why do the organizers care about his ethnic background and sexuality? What do they have to do with him being a good speaker? Does he have to be from India to qualify, or is it simply that he has brown skin that makes him more worthy? Does he have to talk with a gay affectation? Is he going to be sticking his dick in another dude while he speaks to prove how gay he is? You've yet to clarify how being brown, gay, or a woman makes anyone more desirable to have speak at conferences, other than that you're racist, sexist, and way too focused on sexuality.
If you have a fixed version of phpunit, yes. I work on several projects, each with different version of phpunit in their composer.json. Some using 3.7, some using 5. Instead of calling `./vendor/bin/phpunit`, I can just call `phpunit`and it'll call the correct file
no he's a sexist white privileged pig who should be shunned, quick alert the SJW's /sarcasm ... 
you're joking right? ;P
I do! Why do you think we shouldn't? 
How about a link?
Again, as always, a CoC is unenforceable. These incidents have nothing to do with a CoC and trying to make it so is incredibly disingenuous.
https://stackoverflow.com/questions/21429765/sending-mail-via-pear-mail
If you're using composer the [phpmailer](https://packagist.org/packages/phpmailer/phpmailer) project looks like a good bet.
It needs to be "built with performance in mind".
&gt; Thanks for the explanation. I was assuming the type hint would only accept arrays that had been declared as a type (i.e. it would accept `int[] $arr` and refuse `array(1,2,3)`. I'm not sure I understand. &gt; Follow-up question: what's the status on the Generics RFC? Is anyone interested in writing the patch? It might be a nice proposal, but the problem is in implementing it. I don't remember anyone working on that. Also, I seem to remember the RFC not being very detailed, but things may have changed since.
Is there a reason you aren't using Composer? It's almost a necessity nowadays for modern PHP development.
Sorry, I misinterpreted. Did you stopped using it?
Mandrill is very good
Even if you're not using composer, phpmailer is still a good bet. It is simple to setup and requires just one include/require, new class, and setup vars to use to smtp auth. OP if you need an example of this, PM me and I'll send you the example I provide to my hosting customers. Last I looked there were tons of examples out there for phpmailer and smtp with /out authentication. 
I'd bet a lot of people who develop PHP are still stuck in enterprise hell. I took a full time job at a university that was bragging they used Git and stuff during my interview, but when I started, I couldn't use composer or ANY libraries written by other people. I had to write the code myself. So I basically cloned a bunch of open source libraries for my first project, got it done super fast, and quit.
i never used it to begin with. But I assumed it was in the "dead framework" pile.
What do you mean by "some contents" - are the emails getting through with only some of the data? Are there any errors in the logs?
[Swiftmailer](http://swiftmailer.org/docs/sending.html) is a pretty good library.
Only some of the data - no errors! Hooray! You have an event inquiry. Here are the details: Name: Nombre Phone: Email: noahla@live.com PhoneNumber: Best Way to Reach Them: Event Type: Date Requested: Attendees: Overnight Guests: Meals Included: Additional Info: yeah That's an example email -- with everything filled out!
Unless it's not in the code you posted - you'll need grab the form values form `$_POST`: $name = $_POST['name']; $phone = $_POST['phone']; etc.
I see. From what I know it's not very popular, but I for one don't see it as dead. Each update since 2.0 has been improving the framework nicely (the plugins community is active too), and I consider it as good as the other big names available today. I highly recommend it.
You need to implement the PSR standards - with out them this is just a mess IMO
Really .... 
Not really sure why it won't work as I did that -- sorry very new with PHP - but experienced with CSS HTML.. Thank you.. Here's the code $name = $_POST['name']; $phone = $_POST['phone']; $email_address = $_POST['email']; $attendees =$_POST['attendees']; $phone =$_Post['phone']; $reach = $_Post['reach']; $event = $_Post['event']; $date = $_Post['date']; $attendees = $_Post['attendees']; $overnight = $_Post['overnight']; $meals = $_Post['meals']; $message = $_POST['message']; $to = 'noahlauzier@live.com'; $email_subject = "Wahnee Events Inquiry"; $email_body = "Hooray! You have an event inquiry.\n\n"."Here are the details:\n\nName: $name \n\nPhone: $phone \n\nEmail: $email_address \n\nPhoneNumber: $phone \n\nBest Way to Reach Them: $reach \n\nEvent Type: $event \n\nDate Requested: $date \n\nAttendees: $attendees \n\nOvernight Guests: $overnight \n\nMeals Included: $meals \n\nAdditional Info: $message"; $headers = "From: inquiry@wahneeevents.com\n"; $headers .= "Reply-To: $email_address"; mail($to,$email_subject,$email_body,$headers); return true; ?&gt;
I think, after looking at this and looking at how you took criticism Ill stick with Laravel. I feel this is a "throw away" framework and not a serious framework. It doesn't seem to comply to any PSR standard, doesn't come with an ORM or templating engine. I feel like it would be more work then its worth to get up and working.
&gt;Adding "bells and whistles for more street cred" is probably a bad idea. Hundreds of config/readme files don't exactly make your project structure more clear. This is kind of a joke. I'm really just trawling for services that can add value (if only minimal) to a PHP project.
I'd love to but I use my real name for my github. TRUST me the lib is pretty useless.
Its artisanal and object-oriented.
An excellent choice. Works with native `mail()` and most SMTP configurations.
For real. If someone came up to my wife in the pool and said she could do better, she'd probably roll her eyes and tell the guy to get bent, not start bawling and file a formal report. I'd find it fucking funny and not feel the need to physically threaten the incompetent flirter. What is wrong with people these days?
I've had gay men hit on me. (Women too, but women tend to be less forward than men. YMMV.) It's not a big deal. You just say, "Hey, I'm flattered but no thanks" or "I'm straight, but thanks for the complements." It's what humans do‚Äîwe flirt. Sometimes guys (and gals) go over the top with it or are *too* forward, like what happened in OP's blog post. But most people are remarkably normal, and if you tell them you're not interested they'll leave you alone. It's why in elementary school they have the three step method: 1. Ask them to stop. (Polite but assertive.) 2. Remove yourself from the area. (If it's particularly aggressive, go straight to step 3.) 3. Report it to an authority figure. Super simple and works great, because step 1 allows for a little misunderstanding (cultural differences, being too forward, etc.) which is what a lot of these incidents at tech events sound like.
Both my wife and I would politely rebuff them. That's usually enough because people who flirt usually aren't rapists, they're just letting you know they're interested. If you turn them down, they'll usually cut their losses and move on. If they're persistent, "fuck off, creep" works almost every time. Gender really has nothing to do with it; claiming that the situation is somehow different for a woman is infantilizing and strips women of their agency. 
Why do we need diversity? By that, I mean -- yes, diversity is nice, but why should it be our focus? Shouldn't code quality he the priority? As long as you're not actively discriminating against people, just choose the best developers or the most interesting speakers and don't worry about whether they fuck dudes or ladies or have a different level of melanin from you. Denying people for being too white or straight, or even promoting people because of their gender, color or sexual preference, means you're more interested in looking good than providing a good convention. These arbitrary traits should be incidental. 
Sorry I haven't had a chance to read through the blog posts, but on the topic of design patters for framework independent code, I typically find myself using a lot if static methods or static factory methods. Sometimes this bites me in the arse and I'll need to refactor to use a class that can be instantiated, but more often than not it provides a really simple way to add functionality to existing code. No need to instantiate anything, just include the appropriate file and call the static methods to your heart's content. An abstract class with static attributes also seems to work pretty well for storing runtime configurations. 
I use sendgrid. it's not too bad.
Cause some dinosaurs still have trouble understanding that a person likes working with PHP and prefer to preach that other languages like java, python, go, c#, ruby, rust, perl, nodeJS are way beter because of 'facts'
mail() uses the OS's MTA (mail transfer agent), which in CentOS is Postfix, you can configure the MTA to relay messages to a paid relay-service, this way you can use php's native mail() and prevent being blacklisted. Relay-services are pretty cheap and they'll make sure your mails go through fine. If you want to use your own IPs to relay mails you're in for the tedious task of whitelisting your subnets, that's a full-time job. In my opinion mail() is the defacto- and preferred-way to send emails in php, even third-party libraries, eg Swiftmailer, have the option to use mail(), http://swiftmailer.org/docs/sending.html#transport-types
I will certainly give it a shot, thanks! To be completely honest, I did land on that site, but I immediately and erroneously assumed it was out of date based on the website.
Ow fuck off. Ugly guy flirts with girl, girl takes offence. Someone posts it on Reddit. Click bait bollocks.
Ah - try changing your form tag to: &lt;form name="sentMessage" id="contactForm" method="post" novalidate&gt; 
PSR2 CS, dependency injectable, 100% code coverage, make it PHP7-only, name it after a vegetable or something. To elaborate on my name it after a vegetable suggestion... there's Cucumber (testing for java i guess), Spock (unit testing), Laravel (Framework), Pimple (dependency injection), etc... These names have nothing to do with anything - they're just randomly chosen names. So make your name randomly chosen. My suggestion: Spinach. Just cause.
&gt; Its anal oriented
thats what the COC wants, who cares about code. its all about making sure women feel good and that gays are welcome and that ariabs are not racially profiled. (These are examples) its lets about the code quality. I don't care that you don't like me because I am a white man. What I care about is: Is this code right? I am so sick of this SJW bullshit that creeps in every where. No one cares that you are a women. No one cares that you are white. But now you make us care? Why? Why should we? Im not grabbing your ass so stop crying. I am asking you about how you wrote that algorithm, and if I find you attractive I might ask you for coffee. Its not rape. its not groping. its a fucking community.
&gt; PSR2 CS:GO, dependency inversion container service injectable, 120% code coverage, make it PHP6-only, name it after a **fruit** or something. My suggestion: tomato
Yeah, the website could use some work. The documentation organization is a little sub-par for these days but the project is backed by Sensio, so it's a good long term bet.
Configuration hell, as requested: https://github.com/bradchesney79/2015DebianJessieWebserverProject/blob/master/scripts/system-mail.sh Seriously though, use a service.
If a person feels "unsafe" with the most basic of human interactions they should stay at home, the world shouldn't change so they can leave the house. Our societies have never ever been safer and nerd culture is easily one of the safest cultures in our society. How safe and sanitised is enough? If women are avoiding STEM for fear of being flirted with (hint: they aren't) I suspect it probably has more to do with who's doing the flirting rather than the flirting in and of itself. I suspect it wasn't Ryan Gosling lookalikes who were involved in these incidents. Geek/nerd culture is being over run by sycophants.
I converted my email to SendGrid this year. It has been flawless for me.
Using [the League as an example](https://github.com/thephpleague/commonmark), you're missing [scrutinizer](https://scrutinizer-ci.com/). And create a [Gitter chat room](https://gitter.im/) for it.
... the PHP is minified?
Might as well just minify + obfuscate the code, hire a replacement and hand it off to them. Depending on what 'the code' is for, I would personally just start fresh. The current code, no matter the situation, is likely to be garbage.
That sounds like a great opportunity for a rewrite
The first place that I start with understanding code without comments and without any real formatting is to start going through, file by file, and formatting the darn thing. If the variable names are junk, try to fill in meaningful names where you can. After going through the whole mess, you'll have a general sense of where what things are. With a general clue of what goes where, do another pass through the code and start doing really low level refactorings. Layer on tests as early as you can. Start to segregate classes and other building blocks into their own files. Work on things in a bottom-up fashion, so you're doing heavier changes to code that doesn't have any dependencies, then to the code that depends upon that, and on up.
One could as easily say it's horrifying how you have rephrased these, really. Especially given that the blog post was a first hand account and yours is second hand conjecture. The wording seem to indicate that these men were involved in awkward mistakes and simple misunderstandings, and for the most part a simple apology was the resolution. That sounds pretty civil. Here's an idea, don't touch people unless you are absolutely sure they are ok with it. That seems not only pretty obvious but is not an imposition on anyone. 
Oh man! The downvotes here make no sense! You are right! It's a totally false dichotomy! It's like people are so worked up about this that they refuse to see when they are talking shite even if they might be right.
I didn't know the project was backed by Sensio. Cheers for that tidbit.
I would run wget -m http://example.com.
Each and every one of these didn't end at an apology. Every one of these men was subjected to being pulled aside and shamed by the conference organizers. Every one of them is now being used as an example of "ugly" behaviour. One of these men was clearly so seriously upset by this that he felt he couldn't attend the rest of the conference. *That* is what we should be taking away from this. You overblow minor awkwardness into a formal complaint, and suddenly everyone's afraid that they are going to be shamed and told to leave the conference. &gt;Here's an idea, don't touch people unless you are absolutely sure they are ok with it. I don't think you realize how stupid this sounds. You never know that someone is "absolutely ok with it". Are you suggesting that we should all go around expressly stating when people are welcome to touch us? Should I be going up to people at conferences and saying "You're welcome to touch me. :)"? Being touched is not a traumatizing event. If someone touches you and you don't like it, tell them not to.
I am not convinced by your arguments. I have implemented password hashing, and upgrade routines a few times over the course of my career. And I am telling you now, that it is easier to get right with the new PHP API than it was before. Without a doubt. I never said anything about "magic compatibility", those are your words, I described the functionality that `password_hash`, `PASSWORD_DEFAULT`, `password_verify` and `password_needs_rehash` provide. My specific statement was that if you use them it will be "secure by default". This comment should be taken to mean at the time of implementation, and can not be read as meaning secure for all time, that is just silly. Of course people need to upgrade their PHP version when security releases are made, and you aren't making a convincing argument by saying the defaults "don't take care of migration.". How would that be possible? And how is the situation different from the case that someone does update their wordpress, Joomla, Drupal installation? I specifically said "you don't even need to implement the upgrade routine for **new users to get the best default**". This is literally true, and if you choose to misread it, or lack reading comprehension that is your problem. I never said, "even if you don't upgrade your PHP to the latest security release, you will nonetheless continue to get security by default". It's just a strawman argument, not based on anything I said. "defaults still aren't going to help you because they don't take care of migration." You are quite clearly ignorant. How could you possibly expect an API provided by PHP to automatically upgrade password hashes that could be stored in a variety of storage devices? Saying that it doesn't do this isn't a valid criticism of my point that the API's make it easier to implement the upgrade yourself, which you would know if you actually had implemented an upgrade routine using both methods (something with I have actually done multiple times, both using the new APIs and using hand rolled usage of bcrypt, and the historical transition from sha1). 
Hadn't considered that, thanks. I use a VM per project so haven't encountered this problem, puts it into perspective.
No one assumed you were an idiot, I just asked a question. The concept did not make sense to me, someone who uses a VM per project, and generally keeps phpunit up to date in all those projects despite the isolation. /u/mheap explained why, though, and I now understand. I'd suggest you put this into the README for clarification.
&gt; Here's an idea, don't touch people unless you are absolutely sure they are ok with it. I'll be sure to get them to fill out a waiver before any touching can occur. Jesus fucking christ...
 wget --mirror --no-parent --recursive --random-wait -R gif,jpg,pdf,css,js -H http://example.com
I'm an active user of Yii framework. It's a fairly active project on Github. One thing I noticed is that Yii contributors and maintainers spend more time adding features, fixing bugs, helping users and discussing improvements rather than marketing the framework heavily. There are small community events that take place to meet and discuss Yii. So definitely not dead. 
If your phpunit.xml(.dist) is located in the root directory of the project (which is usually but not always), then something like PATH=./vendor/bin:$PATH will work out. It will fall back to the system phpunit.
Oh man, that is an awful lot of inference and conclusion from a three word sentence.
No, what I'm saying is that there's no real way to know whether it's strictly appropriate to touch someone, but that touching someone doesn't harm them. So while you shouldn't go around touching people unsolicited, it shouldn't be considered such a big deal if you accidentally misinterpret someone's body language to think it's appropriate in a given context and decide to do so. It's completely appropriate to rub someone's arm if they're needing to be consoled. It's appropriate to offer someone a hug if you're close with them. It's appropriate to put your arm around someone affectionately, if they don't object. Not every bloody unspoken social rule needs to be written down and violations punished with public shaming. Why are we even fucking humouring complaints about "inappropriate touching" that aren't clearly sexual or aggressive? It's ridiculous and a waste of time.
PS2, 100% CS (or other source engine game) Dependent. Intravenously injectable, 0% code coverage. PHP4 only, named after a scavenger animal. Suggested name: Jungle Crow. 
Is it free for open sourced projects? If not its not hipstery enough.
So I would ask: what level of discomfort should we be asked to deal with? I ask because the work discomfort is vague. The answer is probably context related, as the level of acceptable discomfort in a professional setting like a software conference may be different than in other contexts. So how to we determine this discomfort level? Do we use the standards of the least or most sensitive people? Do we use the median or mode, or a standard deviation? Does the inconvenience of not providing discomfort factor into our determination? If someone asked not to share air with others, that would very difficult for others to deal with. If someone asked not to have physical pain inflicted on them, that would be very easy for others to deal with. 
Make the current version be 4.0.0-dev and don't release it until the version 5.0 is finished on your local git, then name it 5.0.0-dev
Cool package, thanks for sharing! For simple haystack/needle confusion an easy way to remember is: String functions are (haystack, needle) and array functions are (needle, haystack). Most IDE's are rather helpful too :)
betting there are no tests for the code then. one approch would be to start by writting tests on the parts that you can. this will help you get a basic picture on it and refactor the bull shit while you're at it.
Why is `symfony/console` not "usable outside of Symfony"?
[The three-step elementary school method described here](https://www.reddit.com/r/PHP/comments/462aya/no_conference_group_or_event_is_immune_to_the/d0275i1) would be sufficient IMO.
It works, and does so rather well. Need more be said?
I'm not 100% sure if this applies to bcrypt, but some hashing algorithms are ~~memory heavy~~ memory hard rather than computationally heavy, so spinning up GPU instances does not solve that issue.
What was the overreaction you're implying? Acknowledging that a conversation took place? Someone said "not interested" and the other party stopped. Talk about a non-event. 
I feel like instead of passing my string or array to a `HClass` It should be something like: contains(string, string) and it should then do its thing.
I don't see how the women in the cases listed didn't follow the steps you linked to: 1. Ask them to stop. (Polite but assertive.) 2. Remove yourself from the area. (If it's particularly aggressive, go straight to step 3.) 3. Report it to an authority figure. Above you said we should not deal with discomfort individually without running to authority figures. This list indicates that it is a prescribed action. Is this three-step method still appropriate for adults at a conference?
&gt; But the problem is it got reported The article doesn't even say who reported the event, and to me the tone implies it was a third-party observer. I expect this was not stated for privacy reasons. If you're suggesting that acknowledging things may make people uncomfortable is a bad thing, as you seem to be doing, well... I disagree. Someone said "that's inappropriate" and the behavior stopped. That is the best possible outcome, given that something happened in the first place - the only better situation would have been it not happening at all. I get where you're coming from, and there are definitely people that like to create drama which itself can negatively impact others. That should not be tolerated nor praised. But that's not what happened here. It's neither fair nor reasonable to extrapolate that it will always blow up into a shitstorm from one or two incidents. 
bcrypt is not memory hard whatsoever. GPU instances is exactly the type of problem scrypt and then Argon2 were invented to solve.
Ok thanks. I did say I wasn't 100% sure about that.
&gt; The first incident was certainly inappropriate if the details are accurate Totally depends on the context. The phrasing, tone, timing, delivery, demeanor, and setting can mean the difference between obviously joking, or sincerely creepy. Two buzzed dudes sitting near a couple of buzzed girls at a bar and jokingly saying something relevant to a conversation they might be having like "Hey, I got a couple relaxation techniques up in my room if you're game!" for a group laugh with an obviously joking and *passing* tone is fine. Being by yourself and walking up to two women waiting silently at an elevator and saying "Hey, you ladies want to come to my room for some relaxation?" and being sincere about it is creep level 9000. In fact, being phrased as a question that requires an answer vs a statement you can just laugh off can make all the difference.
If it was a third party observer it is even worse tbh. How can a third party decide what is appropriate between two other people?
&gt; Being touched is not a traumatizing event We lack details in these reports. Touch a woman's breasts or ass without her permission, and that's inappropriate (especially if you're a stranger). Gently touch her back as you move past so as to indicate you're behind her if you read she might be about to step back into you or the space is really tight, is totally appropriate. If you're holding the door for a woman and you touch her back to guide her in, then there are some ground rules: 1. It has to be short. Comfort level and contact length are *sharply* inversely proportional. 2. The pressure has to be very light. Again, a sharply inverse relationship between comfort and force. 3. It cannot be bare skin. If they're wearing a tank top, touch the fabric ONLY. 4. It cannot be too low. Upper part of the small of the back is the limit. Lower part of the small of the back (aka an inch away from the top of their ass), totally inappropriate 5. No "drifting" - your hand leaves their back at the point it made contact. Don't caress their back as you move your hand away... At any rate, without details, we can't really make accurate judgements as to whether these incident reports are justified. Though I will say this about the fourth one: &gt; The following morning this was brought to our attention as a 3rd party story by someone who was not present A 3rd party who was not even present has precisely ZERO FUCKING BUSINESS reporting anything of the sort, and shame on the event organizers for even bothering to follow up on it. "Hi, I'd like to report an incident I didn't witness". Yeah ok.
you can use ```.gitattributes``` file to prevent the test or other development file for being included in the downloaded archive
It is not clear from the blog post if any of the women did not ask the person to stop. Perhaps some did not. I assume that those who did not were not only uncomfortable being touched, but also uncomfortable in asking politely but assertively the person to stop. I think you are proposing that it is ok for anyone to touch anyone else at a conference. And if you are uncomfortable being touched, then ask politely but assertively for the person to stop. Is that your position? This seems to become an issue of how you and I deal with these uncomfortable and meek people. What if they are from a culture or family tradition that is uncomfortable with both touching and confrontation? Is there anyone who can go to Step 2 in your proposed scheme without doing Step 1? And why do you place the freedom to touch other people over the requirement that people politely but assertively ask person after being touched uninvited to stop? And does Step 2 mean that if someone does not stop touching people uninvited, but it not in your judgement particularly aggressive, that they must leave that area of the conference without reporting it to an authority?
It seem to solve peoples irrational hatred of the inconsistent params order in some php functions. I don't get it. I'm with you. The IDE remembers that shit not me. Who cares what order its in
if it's minified, just use an pretty-printer https://github.com/phpfmt/fmt
It was a little rough to work through. I couldn't tell if I've just inexperienced or maybe it was written as well as it could have been. 
I like using Blade, but I really, REALLY miss Smarty's template caching and ability to selectively not cache certain parts of the page. I'm not talking about *compiling* the template syntax into PHP and caching that, I'm talking about actual rendered output caching with caching groups that can be selectively invalidated.
You have swagger docs anywhere?
This sounds sketchy. Minified? No comments? Sounds like you're working with intentionally obfuscated code. Disgruntled former employee? Your employer didn't pay the last person and only has obfuscated source?
No idea what you're trying to ask here. You gave us a form, but no backend code.
Definitely use the word "modern"
Side note: Always compare hex strings with `===`, never `==`. [Or weird stuff happens.](https://www.reddit.com/r/PHP/comments/357zlx/what_great_advantages_does_python_have_over_php/cr3an9l)
&gt;Every one of these men was subjected to being pulled aside and shamed by the conference organizers. As opposed to what? "I know he grabbed your chest but we don't want to say anything and make him feel uncomfortable about it."
Code of Conduct
This is amazing. Just read the whole thing. Someone please make a sublime package to automatically apply this!
If you use Mandrill, it exposes an SMTP server to you, so you can use swiftmailer too and just point it to Mandrill. I prefer this approach because then you can easily switch email vendors if you ever needed to for some reason.
Obligatory "MD5 is totally deprecated and whatever you're doing, you're probably doing it wrong" comment.
Haystack/Needle is some of what this library does. It also uses the same method names for the same things regardless of whether one is dealing with a string or an array. This library started out as an exploration of looking for string and array functions that do the same thing in PHP but are called different things if they do those things to strings or arrays. So, `in_array($needle, $haystack)` for arrays does the same thing as `strstr($haystack, $needle)` for strings; why not use the same method? This library also attempts to treat the arrays and strings as immutable, which has the nice side effect of allowing map, reduce, and filter methods to be pipelined. The only time the arrays and strings are allowed to be mutable is during the `walk` method since PHP's `array_walk` is mutable by design.
You are correct about the order of haystack vs needle. Remembering that tidbit helped me earn my Zend PHP cert. :) However, there are times when this is not the case, like when a needle is a callback (ex. array_map &amp; array_filter).
WUT? php -r "echo md5('');" d41d8cd98f00b204e9800998ecf8427e what I am doing wrong?
Not irrational hatred. Maybe unfitting hatred, but definitely not irrational. 
Well, so far I was able to find only one case where mysql treats string and non-string value differently, http://bugs.mysql.com/bug.php?id=79690 Oddly enough, it's a problem with treating an *incorrect* value - so, I would rather call this issue as undefined behavior. Wonder is there is a closer to real life issue.
They still have that as a requirement to get the certificate? I mean come on how does memorising parameter order make one a good programmer?! That's what the IDE is for. One should be disqualified for not using an IDE in the first place since it slows one's development down significantly.
Setting up DKIM and SPF isn't that hard and seems to be sufficient to not be treated as spam (unless the content itself is shoddy of course)
I just use CURL and gmail.
`hash_equals()`.
What problem are you trying to solve? If you're trying to [store passwords](https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016), MD5 is not the right tool for the job.
I've not really been concocting anything. These vague summaries of incidents that are being provided to justify why we need additional, prejudiced restrictions on social behaviour sound like complete overreactions to everyday awkwardness. The way these things are described, either someone blew an undesired advance (or their having interpreted it as an advance) way out of proportion, or the conference organizers are hushing up some serious legally-actionable misconduct and then talking about it online. I tend to want to give reasonable people like Adam the benefit of the doubt on that. They're simply stuck in a shitty political position, whether they truly believe it's right or not, that every offense must be prosecuted as a matter of social justice. To do otherwise would mean a potential boycott of their conference, and their jobs lost, as "enablers of harassment."
... and you cannot name one nor define what's so "terrible" with md5 in non-security context. Why I am not surprised? Superstitions is the main source of knowledge for a regular PHP user. 
&gt; A 3rd party who was not even present has precisely ZERO FUCKING BUSINESS reporting anything of the sort, and shame on the event organizers for even bothering to follow up on it. It's possible that someone confided in a friend or colleague, and that person told the conference organizers. Just because you didn't witness it directly doesn't mean you would automatically rule out the possibility of it happening, especially if it was reported by someone close to you.
thumbs up for phpmailer. you don't need to use composer though!
I'm not condoning the threat of assault, but some sort of verbal reaction can't be a total surprise. Let's be real. The dude was flirting while knowing full well there was a boyfriend. Yeah let's kick out the boyfriend so the harmless flirter can do more harmless flirting.
Use BLAKE2b. On modern hardware, BLAKE2b is faster than MD5 and more secure than SHA256.
PSR-4 is on the way. What's your favourite ORM and template engine? My plan is to add the popular ones as addons, so you don't have to be limited.
PSR-4 is on the way.
Yep. PSR-4 is on the way.
I looked at Yii. I reckon its one of those frameworks that if you've never used it before it is horrible. But if you are used to it it seems like the only way. I remember seeing all these examples of how easy things can be with Yii. It looked really cool. I eventually decided not to use it because I don't like things that generate code for me.
[Coveralls](https://coveralls.io).
OP didn't say what the context was--it's possible it's merely a mishap with lost backups--but my "nightmare scenario" would be that the client ripped it off from somewhere else or had a bad employer/contractor relationship in the past. 
Thank you for the suggestion, but I am afraid that as long as there will be no native implementation in PHP, this algorithm won't attract much attention.
If you really had to do this, you'd run the code through a non-destructive beautifier, then execute while stepping through the code with a debugger and writing notes as you go. It would end up taking a very long time, but it's doable.
Thanks for your feedback. You won't believe it, but I actually like simple solutions, so I thought about it again. As you have seen, my first idea was similar (the `getConfig($code)` interface), but I still see a major problem with that: Where and how do you specify or document, which configuration values you expect to be present? If your answer is "nowhere", you need to search the code when writing an implementation and it's easy to forget adding a new configuration value to the array when it is introduced. If the answer is somewhere outside the code or in a comment, it's still not guaranteed that this documentation is in sync with the current implementations. Having it explicitly in the code, prevents these issues. However, I see the point that having multiple classes just for configuration values might be overhead and complicates things. It simplifies the test setup a bit, but not so much that it's really necessary. So what if we get back to one `Config` interface: interface Config { public function isActive(); public function getServerName(); public function isLog(); ... } You can implement this as a value object that you pass all the necessary configuration on instantiation (yes, the constructor will be huge). This is very similar to the array in your suggestion, but it's explicit about what values it must contain. It's not even necessary to have different implementations per framework. And it still should be simple to understand how to use it, don't you think?
This looks like an awesome starting point but seems to be trying to compare itself to puphpet when it's not close to having the number of options. I'm not fully versed in docker, is it even possible to specify such a huge amount of information (e.g setting apache vhosts, setting up synced drives, that sort of thing)?
1. /r/phphelp 2. Curl has nothing to do here, you have to use http://php.net/manual/en/features.file-upload.php
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
oh. well maybe they aren't then. I'm just frustrated.
OK: poster: "This will mean we will get bad speakers, because we will pick 'traits' over 'talent'" me: "not necessarily, because you still pick 'talent' first" That is my point; that is what I was responding to; that is repeatedly what I have said.
The dockerfile for PHP has some measures to avoid this particular issue, whether you boot the environment natively or through vagrant. Are these issues you describe happening on a phpdocker.io generated environment specifically? Things to watch out are console operations (eg symfony console, artisan etc) done in and out of the containers against files (eg file caches) generated from FPM. It seems to work well on all scenarios I've tried, but there will be cases I haven't foreseen.
SwiftMail is the way to go, that is used by most of the big guns frameworks out there, so has wide support and development, and all the features.
Congratulations for the effort, however i'm afraid I can't use your package, because if everyone starts using their own library to solve this it's going to be a mess. All I can do is wait until PHP gets something like nikic's scalar objects.
Thank you so much!
&gt; The problem is you cant echo MD5 since its not a string. That is wrong. The return value of [md5()](http://php.net/md5) is a string and can be echoed. string md5 ( string $str [, bool $raw_output = false ] ) The type (string) left of the function name (md5) is the type returned by the function. If you use raw_output you can simply use [bin2hex()](http://php.net/bin2hex) to get a string. $hash = md5("", true) echo bin2hex($hash); 
Is it just me or does he only check if the SHA256SUMS.sign file is generated by debian and does not verify that that signature is valid for the SHA256SUMS file itself and thus not verifying any of the files you use.
We actually had things like this in the Programming 2 Course at my university - you would get strange things like this and have to draw the expression tree and determine the output. You can stack the dollar signs - so you could do $a = "b"; $b = "c"; $c = "d"; $d = "e"; $e = "Hello World"; print $$$$$a; Which is equivalent to print ${${${${$a}}}}; I only had to use variable variables once in production code when writing a classloader :)
It should be in 7.1
Oh that's possible now?! Okay. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
LOL https://github.com/olscore/ornithopter.io/blob/master/application/libraries/crawler.php#L229
Equating `in_array()` and `strstr()` is a particularly bad example, they're not intended to do the same thing at all: even your own code doesn't use `strstr()` for the `contains()` method. It's great to see you seeing a problem and trying to make it work, so good luck with the evolution of the library. I can see it needing big changes before being really useful.
Yeah. Supported on everything except IE 8 &amp; 9. 
I agree - puphpet does have way too many options in a lot of cases, but it's handy (and no harm) to have them there. I guess the biggest one for me would be the option to configure apache with your vhost record(s), enable ssl, that sort of thing. A bonus would be things like choosing to run one or more php versions using php-fpm.
I get that you're frustrated and from your other comments in this thread I get why. You, like me, have some social anxiety issues going on, and that makes it hard enough already to strike up conversations and flirtation with the gender of your attraction, without also having to be afraid that they'll go and make a complaint about you. Much of your socializing is done in the programming community, and the kind of woman who attracts you is the kind of woman you'd meet at conferences. You would walk away from the entire ordeal, but then you'd be coping with the monster that is loneliness. Does that sound to be about the measure of it? Because if I'm right, just...say that. It's okay to say "I like the women in my field and I'm attracted to those with whom I could talk shop, but with these new rules I'm afraid of doing so." See what comes of it. I mean I could be wrong about all of the above, but the point is that I'd *really* like it if you wouldn't project some adversarial archetype onto me, because as I said above, "we or they", "this or that", "he versus she" is extremely reductive logic. I'm not on anyone's "side" here; I've had just as many feminists angry at me as any other "group", because I stand up for principles, not labels.
Then list 4378438 amazing dependencies.
No, thank you :) It's taken far too long for someone to put something like this together!
If this is a client, you have two options: charge A LOT and follow the good advice others gave in how to fix the mess or start from scratch. If this is the company you work for, you also have two options: explain to your boss that it will take a long time and a lot of money to update or write it from scratch. Personally, if it was a client I'd run (not walk) away because you're in for a lot of pain. Good luck!
The 3rd report is a bit, what? So guy meets gal, guy asks gal to do some event, on said event he flirts(?), gal is not interested, gal reports guy at tech event for being harassing?
We don't need gender diversity like stated in the article. When selecting speakers for events like these, only competence, eloquence and other professional criteria should be considered - whether the speaker is gay or straight, is male or female, is black or white or whatever does not matter in any way. So: You'll have mainly male speakers? No discrimination of women here, when they're the most competent around. You'll have many female speakers? Also no discriminiation of men, when they're just more competent? *"gender diversity"* (favoring one gender to even up the gender distribution) the and *"non-biased speaker selection"* are almost always contradictory. The "ugly" things presented in this article are worded very vague, so it is hard to say if it really was inappropriate or not - especially when wording it like *"touched in an inappropriate manner"* - for example in the third incident, the man just could have hugged the woman - or patted her on her back; but with wording it that way it is open for speculation. Most (if not all of these incidents) can be solved by just saying "no" and telling them to go away - there was no violence, no sexual harassment; so for me they just sound like misunderstandings and maybe attempts of flirting gone wrong. I'll get downvoted to oblivion for that, but: This "gender diversity" **is** used for discrimination against men, when "evening up" the gender distribution - and the CoC **will be** abused in a similiar manner.
After writing the above, I pushed up a change to use `strpos()` rather than `strstr()`. You are correct that they aren't exactly the same thing. However, PHP does not have an "in_string" function, so what gets used?
auuww my eeeyyeeeess
https://github.com/php-ds might do what you need. They certainly have sets: https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd#578a I've not used it myself, but it got a pretty good reception here on /r/php last week: https://www.reddit.com/r/PHP/comments/44qsco/efficient_data_structures_for_php_7/
&gt;To the straight men here who don't see the problem, imagine it was a man doing this to you. Imagine a man who you'd just met grabbed your arse at a public event, or was tugging at your swim shorts. The former is a police report, the latter is "Stop fucking doing that right now." It doesn't require special rules to be put in place, and really, that's not what these incidents are likely to be. You assume that the complaints talked about here are based on actual, serious incidents. But they're not likely to be. We've been forced to speculate and imagine the worst cases, because these reports are completely vague and use loaded language like "touched inappropriately".
Sorry, I didn't read your full post.
Although most of the Americans I have met are awesome, this is why I've decided to keep my career out of that country. It's just not *normal* any more.
This is exactly what I was looking for. Thank you.
I'd rather have a function or method return the same type no matter what (in this case, a `$key`). There are some cases in this library that contain multiple return types, I plan to clean those up so that when support for PHP 5.x drops, I can start enforcing return types. How would a boolean false return type be used? `if (!$obj-&gt;locate($thing))` would do the same thing if what was returned was `false` or if `$thing` was found at `$obj[0]`. If you were to use `if ($obj-&gt;locate($thing))`, and `$thing` was found at `$obj[0]`, you'd get a false boolean `false`. A workaround is to have `if (false === $obj-&gt;locate($thing))` so why not have `if (-1 === $obj-&gt;locate($thing))` or `if ($obj-&gt;locate($thing) &gt;= 0)`? Also, we're asking for a location, not an if-it's-located, so I think a key position is an appropriate return type.
&gt;The number of service config dotfiles littering project roots these days is getting crazy. thatsTheJoke.jpg
YES.
Not sure we're liking the trend of posting a new PhpStorm link for every single dot version released. Most of the mods like PhpStorm, but this is now encroaching on spam territory.
What are you using to write you shell scripts? MSWord? Even VIM can be configured to provide PHP parameter hints. Even for the 0% of the time you try to write code without a text editor, I don't think this library solves anything as its naming complexity is at a level where you would still need to refer to the library documentation in order to get things done.
In that case, I'd rather do a: $a = new HArray([-1 =&gt; "foobar"]); if ($a-&gt;contains("foobar") { // true return $a-&gt;locate("foobar"); // -1 } Or have `locate()` throw an exception in a future version since the expectation is for a returned `$key`.
&gt; However, there are times when this is not the case, like when a needle is a callback (ex. array_map &amp; array_filter) can you give an example? genuinely curious 
That would be nice. Thanks for pointing it out, I didn't know of such a thing. https://github.com/nikic/scalar_objects
`array_filter` is a fun one. The first param is the array, the second is the callback. The callback, when dealing with both the `$key` and the `$value`, takes them in the order of `$value` then `$key`. When I found this, I shook my head and muttered, "Oh, PHP...." Then I contacted the core dev who wrote it to get some clarification. It was an interesting discovery and exchange, so I wrote about it: http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity/
interesting...thanks for sharing!
Which aspect of security are you most concerned about? The areas I would focus on are using some form of prepared statements (via whatever DBAL), and view escaping in your template layer. I have used both symfony router and aura router pretty heavily and I think they are both pretty good. I like aura particularly since I each component is *mostly* isolated from external dependencies. https://github.com/auraphp/Aura.Router/blob/3.x/composer.json
Well that's just my opinion. In order to be as productive as possible one should use the best tools available. Why would one refuse to do so? Because of the price maybe, but PHP IDEs are easily affordable. For me an IDE is a toolbox. Of course I can drive in the screws with my bare hands but I will not be as fast (productive) as using a screw driver (code hinting, auto completion) - and also the construct might be unstable without further checking (type checking, syntax checking, etc.). Of course that's personal preference, and people who refuse to use an IDE (for whatever reason) can use this library and other ones!
"Made with less-than-three"
Sorry, I missed the USERMOD group id assignment. Ive been using this now for a few hours and its working great. Well done and thank you! I do have one question though, why does the vagrant VM not forward calls on port 80 to the docker ports? Im using the ip 192.168.33.35 to calll the site, if I put :1033 (the port I defined in the Docker setup) it works, but would expect it to also work without the port definition. 
name it web developer and let it be extremely inefficient...
amazing is copyrighted by apple
I think you need to think about throwing away and starting over with your framework or even better yet, use and existing one out there
If you want something low-level, you can easily do SMTP via telnet with cURL. Just connect directly to the mail server and send the SMTP commands/data. Nothing other than cURL required.
Why did you vote against [short closures RFC](https://wiki.php.net/rfc/short_closures)?
Not to you, obviously, because you've yet to grasp fundamental OOP concepts or architect a project let alone contribute to a maintainable project of scale.
It's been available for a while but I didn't see a post on this subreddit. One of my applications is dependent on imagick and now I can make the switch!
Whatever Framework you use, do not use PHP 5.3. This version is obsolete since August 2014 so better use 5.6 or maybe even php 7. 
 Symfony 3.0 requires 5.5.9, 2.8 requires 5.3.9, which I can do, but would require a lot of work so I guess it's not an option :/
Here's my abbreviated migration guide: 1. spin up a VM running PHP 7 2. run your app on it 3. let PHP tell you what's wrong
why not upgrade to 7
Nikic said: "I won't have the time to propose this for inclusion in PHP 7. Adding this to core would require quite a lot of work and feature freeze is not far away." Source: https://github.com/nikic/scalar_objects/issues/20
 Because I can't and the hosting department has no plans on doing so.
Then I would suggest rolling something very light weight or at least pushing them to upgrade to at least 5.4 ...
Why not use Laravel 5.0? According to the docs it requires 5.4.
Powered-by is to be taken with a pinch of salt. Easy enough to change and or remove completely.
Then put forward an argument for it, hell 5.x only has a few years left before it will become completely redundant. I can understand if you have some legacy apps, but all in all, I would try harder to get them to upgrade because a) you are missing out on so so much, b) 7 is a million times better, and it's more efficient as far as I know.
There are a few on [packagist](https://packagist.org/search/?q=name%20case) you can try, but none will be perfect.
IDEs have some neat bells and whistles. Refactoring features, in particular. But what they bring to the table is convenience for things you don't do very often. It's more or less the equivalent of workflow micro-optimization. Rather than optimizing the things you do 99% of the time, they go for the 1%. You haven't experienced true productivity until you're multiple years of daily use into vim (or emacs, but those folks are dead to me). Optimize for the 99% and dust off your IDE for that 1% once in a blue moon. Anyway, use whatever floats your boat obviously.
 Well, apparently upgrading to 5.4.16 isn't working. The website dies on me and I think it would only change an apache configuration, not my CLI, so composer whined quite a lot when I tried cloning 5.0. Sucks.
&gt; Hate situations when you have to explain to client that his app i mess internaly... How do you handle API? How do you map your data to http resources? How do you handle api versioning?
There are a lot of projects that already fill these roles, Slim, Silex, Lumen ... etc
I would personally use Slim v2 ... but that's my preference
It reminds me when Google PageSpeed would recommend things not even Google would do on their websites.
I knew this would come up. That doesn't answer my question though.
[removed]
[removed]
very informative for Amazon s3
I think a few people have touched on this. Right now you really don't need to create a "new" framework. But you can use all your favourite tools and roll you own "stack". My favourite stack today is, Silex, Redbean, MySql, Smarty, GetUIKit (css), Analog (for logging messages to files, email etc). 
I don't fully understand the question, but is this what you're looking for?: $your_files = glob( 'target_folder/*.{bmp,ico,jpg,png,gif}', GLOB_BRACE ); foreach( $your_files as $your_file ) { echo 'Your file: ' . $yourfile . '.'; }
lovely... implicit stuff. Thanks for clearing it up
thank you
All X headers are to be seen basically as bogus values because not standardized.
Active record as orm because you don't like annotations? That doesn't even make sense.
I love it when Google flags my website on PageSpeed Insights because their CSS files aren't cachable.
I know right. Like omg. Lets not make sense .... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg.... Like omg..... like omg idiocy aside: I think defining table structure, relationships and other information about your table and or related tables and relationships between said tables via annotation (cough doctrine) is the dumbest thing ever. Comment blocks, dock blocks, annotations, what ever you want to call them are for descriptions about said class, not about table definitions. Thats what migrations are for. Doctrine uses entities: [OMG like OMG docs... Like omg](http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html) to define the table structure, relationships and so on. No. Use Models which have statements like: `ModelName::first()-&gt;relatedTable()-&gt;all()` for example.
I would never re-write the wheel. I would use the spokes and the peices of wood that make up the frame of the wheel to make my own implementation of the wheel. Never EVER EVER EVER EVER EVER EVER EVER E......V.....E......R.... re-write Routing, DI, HTTP or any of that. Use already written, tested and validated components, then build abstractions on top of that.
They do yes. I was busy ranting away like a lunitic. Didn't even realize what I was saying till I was like "didn't you mean models for relationships you fool .... " regardless AR is what I know from ruby and doctrine is what I know from work and I much prefer what I know from ruby.
Aside from all the glaring issues, (no tests, no package manger, 5.6, etc), do you have any benchmarks to support your main claim that it is "extremely fast"? I'd like to see how this stacks up to other frameworks, especially ones that work on PHP7. That being said, I would never think about using a framework in 2016 that doesn't have tests, so if your goal is to get people involved with this, that should be the thing you're focusing on. 
&gt; I would NOT use CakePHP 2.x, unless this is a very simple web app. The design philosophy of non-modularity due to hard interdependencies and a log of under the hood magic becomes a headache in the long run. I'd generally disagree on this. CakePHP, at the end of the day, is just an opinionated MVC framework. You can make it require the hard dependencies (by putting your code directly into models/views) or you can keep things separated (with your own src directory and namespaces), just like any other framework. We have a large CakePHP 2 app. The magic that cake does is useful once you understand it, and you can bypass it and ignore it if you know what you're doing. There's nothing stopping you from using CakePHP for large projects at all.
I have never heard of a data mapper orm .... what is it?
&gt; Quite a hefty assumption there, don't you think? No. It's in evidence of your lack of depth of understanding.
Is this open sourced?
It will be, once it's tidy enough for other people to jump in.
I understand perfectly why PHPMailer's structure is bad practice. But you're avoiding my point: **it works**. **edit:** On top of that, it's super easy to dive into and use, especially for someone like OP.
Totally agree.
Yeah go for it. I totally dig having my own stack, the key for me was making sure everything I had worked super simply. 
By "native function", you mean something built-in to PHP like `file_get_contents`? Perhaps some sample-code? Unfortunately the deeper you go, the more likely you are to need a "full-fledged profiler".
If you stay on the 5.x branch the most you will get is depreciation notices, such as mysql_* functions. Moving onto 7.x could break certain things though.
Yeah Silex has been great. When I have wanted to do something a big better Silex supports it. I don't use the Silex Service Provider I still access it via global static. eg R::getOne("user'); I assume that is what you mean?
The #1 problem is not the code, but the requirements that you do-or-don't need to fulfill. What are the top-three strengths you want to prioritize? 
I would recommend slim then... cause you can literally replace everything except FastRoute iirc.... 
[screenshot](http://i.imgur.com/nU3YbbO.png) I just created a project and add a couple columns. Simple and all I wanted.
i don't want to use slim. I want to use components to roll my own.
I honestly believe they don't care about "stacks", and I think we are all tired of another micro framework! Hate to sound so negative, but pretty much every day you see a new MVC framework on this thread and pretty much everyone says, it is not better than X. Somebody help me out here. But what do we like seeing here? 
I don't really plan on a micro framework as thats boring. Micro frameworks are useless. Im going for a full fledged framework.
&gt;I've not really been concocting anything. You're labeling situations you have absolutely no knowledge about.
Whatever it is, you'll definitely want to test all your assumptions at the door before building too much. I haven't tried APD or with `file_get_contents()`, but I know that Runkit cannot redefine native non-functions like `require_once()`. (I was trying to analyze the dynamic-include-insanity of an old codebase, and eventually ended up writing a script to analyze xdebug traces instead.) 
It should just work unless you are using a code obfuscator like zend guard or ioncube. Apparently those of us who are, are fresh out of luck
It appears to work, although as a drop-in solution dealing with ADP may not be ideal. I was able to get this to work as well, which holds a little more promise, but requires PHP 5.3 and setting a namespace. namespace profiler; function file_get_contents( $url ) { $time_start = microtime(true); $file = \file_get_contents( $url ); $time_elapsed = (microtime(true) - $time_start); echo('Size : ' . mb_strlen($file) . ' Elapsed : ' . round($time_elapsed * 1000) .'ms'); return $file; } file_get_contents('https://google.com');
You might really like Blackfire (blackfire.io). Does all you want and it's really easy to setup (literally 5 min). The free one should be enough if I'm understanding what you want to achieve.
Oh you think I want to build laravel. Kinky. lets get retarded. No I dont want to build laravel. Active record is something I am very familiar with and i am not going to build a "framework" with tools I am not familiar with at all. that would turn into another Bear framework. I do want to build it abstract enough such that you could switch out AR for Doc
Doctrine is an example of the [Data Mapper Pattern](https://en.wikipedia.org/wiki/Data_mapper_pattern) (though I'm not a fan of it for non-enterprise uses). To sum it up, it typically consists of three components: 1. A domain entity class that does not know or care about the ORM, or any ORM 2. A Repository *interface* that loads and saves entities 3. A repository implementation that maps the entity to one or more database rows, NoSQL queries, external API calls, whatever One of the big advantages is that you can decorate the repository interface with things like caching, event handling, etc without having to change the underlying code, and change the persistence method without having to screw with any of the other code. 
This might be something fun to build on its own. thanks for the info.
Just make a `profiled_fgc()` call that wraps it and does your timing. Don't overcomplicate it. You should be using a curl wrapping library for external calls anyways, which should make this significantly less messy. 
Why? I'm quite happy with angular
Nice have been waiting for the APCu and Imagick. APCu increased the speed significantly with PHP5.4 that I used before. I wonder if there is still gains in 7.0
rewrite..if not, just leave the company..i have been in the same situation before..i propose the idea and they rejected it..so i left the company..after i left..2 more programmer left..they doomed
`EveItemDetails::details('https://public-crest.eveonline.com/types/32772/');` If this is specific to the eve crest why are you forcing the developer to type out the full domain path? Rather than having the option to change the base domain and what not if say it changes or there's a new test server eg.: &amp;nbsp; $itemDetails = new EveItemDetails(); $itemDetails-&gt;setPath('http://new-public-crest.eveonline.com'); $itemDetails-&gt;getDetails(32772);
You are probably running this on Windows, which has a maximum rand() value of 32767, which means every 32768 tries will repeat the entire deterministic pattern of rand(). And to answer your question, rand() is certainly not "random" in any cryptographical or even useful sense. http://php.net/manual/en/function.rand.php
Also relevant: http://paul-m-jones.com/archives/6203
So you are trying to recreate JSON web tokens... 
You mean something else than [GnuPG](http://php.net/manual/en/book.gnupg.php) ?
Well.. not using a profiler is gonna be a pita and tells you probably the wrong story. however, as you clearly stated you want to do this and already found a solution, maybe this library is interesting for you (although it is meant for testing) https://github.com/php-mock/php-mock
But isn't that exactly the point? The autoloader handles 80% of that, and opcode caches do the rest. It sounds like you're describing a design problem, not a lack of functionality. 
&gt; when I send a GET (CRUD - read) request to the server, I didn't want to have a crazy long URI Why not? Are users typing this URL themselves? If your application calls the URL, why should you care about a long URL? :)
Huh?
Yes you do. You probably don't want to create migrations on a production server. Sqlite is great but if you're building an application that uses mysql in production you're probably better off using that in development as well. Instead of installing software on your local machine you might want to look into vagrant to create a virtual environment. 
lol I have no idea where _that_ came from. I just agreed with you, then you said "no you don't!" and then I apologised, and then I don't know. I'm not on anyone's side either particularly, which is what I've been finding perplexing in this. I thought I was questioning someone's logic, but then it turns out I was obsessed with people's sexuality?
too old PHP version. besides no longer maintained Laravel 4.*. why don't you choose Codeigniter 3.* ?
EDIT: I missed the forest for the trees, the main issue is what /u/mythix_dnb pointed out. What I point out below would still be a problem for `array_map`, though. ---- `htmlspecialchars` [can take multiple parameters](http://php.net/htmlspecialchars): string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = true ]]] ) `array_walk`(`_recursive`) [passes multiple parameters to the callback](http://php.net/array_walk): &gt; Typically, **callback** takes on two parameters. The array parameter's value being the first, and the key/index second. Spot the problem. ---- A similar problem exists in JS if you use `parseInt` with `Array.prototype.map`. Optional arguments, dynamic typing and functional programming don't play all that nicely together. In functional languages like Haskell, functions have a fixed number of arguments and are strongly typed, which avoids this issue.
&gt; You are probably running this on Windows, which has a maximum rand() value of 32767, which means every 32768 tries will repeat the entire deterministic pattern of rand(). He's specifying a min/max, so getrandmax's limit doesn't apply: &gt;php -r "var_dump(PHP_OS);" string(5) "WINNT" &gt;php -r "var_dump(getrandmax());" int(32767) &gt;php -r "var_dump(rand(1,160000));" int(50030) Edit: I've just been informed, and double checked, that this will still generate only 32,767 unique values, as per what /u/allsecretsknown seems to actually be implying. TL;DR: range isn't limited to 32767, but number of unique values with rand() is...
Recently, Google announced they would be penalising sites in search results that had popups and full screen ads. Around the same time, Google Adsense added full-screen ads as an option.
It's like if WWF depended on SeaWorld to make money... Oops, they do
&gt; There is absolutely no reason to use rand() in PHP. Devilish suggestion, but why not mark it as deprecated then?
Be aware that you can't get perfect output, language isn't that predictable. You can make a reasonable guess, though.
Benchmarks from 2011?
I have heard something about http://phptravels.com but I have never used it myself, also they use Codeigniter as their framework. I think it is time for you to leave the safe area of Joomla &amp; Wordpress with this project. If you are looking for something similar but different I don't think you will be able to find it easy &amp; "CMS like". You will need to adapt and make your own frontend and backend.
They didn't change it to an outdated version? They clearly did it _before_ they released a new version, but either way it makes no difference.
yes, i have found it from google but don't know if it is one of the best or not. As much as i am afraid of leaving wordpress/joomla, i think i should do it now as this project will be a mess if done with any of the 2
that's a good images of reality given.
Cloudways also has the similar managed provisions as Laravel Forge but starting at $5/month, and OpenShift has a free tier for small experiments. There are plenty of other choices to choose from besides Heroku, and all of these are language independent. Am I reading the article wrong?
That was agreeing? Well yeesh. Poe's Law and stuff, kinda hard to tell when the vehicle for agreeing is bereft of tone. Yes, I was replying to other stuff you said in the thread here. Particularly the bit about your social anxiety. I mean, I'm sorry I guess for trying to engage you in a conversation beyond three word sentences?
&gt; I recently read the complete blogpost of Eevee, PHP: The fractal of bad design which is old but still so painfully true I can't ignore it anymore. If you honestly think that this article is valid and true, then you didn't really know PHP at all. &gt; I have researched the internet for answers and the only compelling alternative is to use some kind of CI-service like Codeship. [...] While Codeship may provide automated testing and git push deploy it does NOT provide server provisioning and you will still have to setup a webserver, database and configure it. You missed a service that, imho, is better than Laravel Forge and is FOSS: https://puphpet.com
I'd just use laravel.
never use external uncontrollable source for randomness if you are doing anything more serious (or related to cryptography)
It's not clear in your question if you discarded query string as an option. You could pass your filters like list?filter=bla&amp;....
One reason *can* be that people disagree with philosophies on which a framework is built. That having been said, there are many things about Symfony (the framework, not the components) that I dislike strongly, but I still use it because it works.
And their wheel has a flat tire...and no security.
I'm guessing they made a custom framework for a job and decide to edit it and publish it for the hell of it. I mean you spend a lot of time making a framework specifically for you, maybe someone else out there might like it. For me, I'll use one that's already made. Except CSS frameworks. I hate CSS frameworks. 
Looking to do something that's not readily covered in one of the frameworks, looking for something lighter weight, looking to improve their skills, not wanting to rely on a 3rd party for updates/support.... There are many reasons other than ego.
So is making something useful for your users because you had time to actually get something done.
Did you create your own CSS framework or do you just start from scratch for each project?
I encourage **everyone** to write their own framework if they have the time. It is an incredibly valuable experience, teaching you a lot about existing frameworks, structural decisions and problems. But at the same time, I discourage **everyone** from using their own framework - as long as you have no very special need for using your own one, one of the popular ones will be most likely more appropriate. Any future developers (working on your system) (even yourself) will thank you. TL;DR: writing your own framework and writing a small test app with that? Heck yeah! Writing your own framework for use in production? Only in very rare cases!
Good point
All of the best songs have been written already. Why dont performers focus on the classics instead? Same goes for books. Jesus theres a lot of books, why do they keep publishing them? And what about those new tv shows? We already have trailer park boys, what else do we need? /s
It used to be that every web dev had to write their own blog platform at least once... I think now it's frameworks instead :)
&gt; In my experience with puphpet I believe they offer too many options which are not necessarily useful on a dev env, like in-depth configuration of nginx or apache, or deployment to cloud etc. They're great at what they do however, but phpdocker.io is trying to focus on dev envs with sane defaults, and nothing more. you are completly missing the point of it, you copy your online environment on a VM. Your dev environment should be the same as your prod environment
PHP 7 does: [random_bytes()](http://php.net/random_bytes) and [random_int()](http://php.net/random_int) generate cryptographically secure values, and /u/sarciszewski has written [a library that backports them to PHP 5](https://github.com/paragonie/random_compat). RandomLib is also an excellent option, of course.
NIH syndrome
1) if external source goes down / changes their API / starts to charge for their services, you are fucked 2) its much easier to attack your server's connections to another server (mitm attack) than attack your own server's internal random generator 3) you really can't ever know if external server is even trying to be random or if they are just giving you pre-determined values
Kinda like cryptography. Feel free to write your own crypto for fun and learning, but **NEVER** use it.
Popular frameworks started out as dumb pet projects.
Back then, when I began to write mine, we used ZF2. It was HEAVY as hell, using a crazy amount of memory and performing way too slow for our needs. Since we didn't have enough time to rewrite all our code for another framework, I created a light-weight framework, using the same classes and method names as ZF (but with my own algorithms) so there was little/no need to refactor our code, and only with the things we were using. It was much faster, and used way less memory. Nowadays, I'm sure Symfony and such are way better, but this custom framework I made saved our asses back then.
If nobody tried writing their own framework, all we'd probably be using till now is CodeIgniter or something older. We'd also still be riding horses and carriages if the same thinking is applied at a greater scale.
Has anyone made a list of router libraries + their features? I'm researching them atm and it would be a nice way to help choose. (May make my own list once I'm done...)
Phpseclib library
Thanks!
Sometimes a framework just doesn't fit in to what you need it to do. The company i work for will be rolling out a new system built on top of composer and will be "glueing" everything together. This is simply because our use case is a bit unique and will need flexibility. 
Good point.
Who said those are exclusive things? Outside of work hours you can do whatever you want.
There is a difference between a security breach and a poorly designed router or DIC.
Use POST. Your future self will thank you.
If Laravel works for you then that is great.
Not a direct answer to question, but nowadays you can write your own framework without even writing it all. Throw composer.json, include ready made components for routing, caching, logging and everything else you need. Symfony provides lot of good and stable components. PSR helps a lot, too - makes gluing components together a breeze. So you end up with your own framework, with architecture you like and using open source the same time.
Go ahead, but pls refrain yourself from promoting it on reddit and where not--refusing to accept negative reponse, fool around all you want but accept death
If no one made new frameworks, we'd only have the first one ever made.
I have to hit the road soon so I can't go into much detail myself, but [this](https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2009/july/if-youre-typing-the-letters-a-e-s-into-your-code-youre-doing-it-wrong/) is a pretty good primer on common encryption mistakes. You can jump to the authentication bit by searching for "It's "Silverhawks," jackass." but if you don't read from the beginning you're going to have *no* idea what's going on.
Can we deprecate Laravel yet?
`mbstring.func_overload` utterly confusing if enabled. Incompatible with most libraries relying e.g. the lengths etc.
Couldnt agree more. My main beef with CSS frameworks is a lot of developers take a look at the creative direction provided and make it fit the framework, rather then the other way around.
Yeah, an article that code is based on is what I used as a foundation for the code. As far as not using a profiler, we do use one. I needed to streamline our process of looking specifically for slow external calls though as that is our #4 support problem when dealing with CMSes like wordpress and it's plugins in a potentially shared environment. With a code snippet logging 24x7 we can keep tabs on any issue. It really only makes sense to run a full fledged profiler like new relic for larger sites 24x7.
&gt; 1) if external source goes down / changes their API / starts to charge for their services, you are fucked http://arstechnica.com/security/2015/05/crypto-flaws-in-blockchain-android-app-sent-bitcoins-to-the-wrong-address/
If I remember correctly, the original proposal that Joe is talking about was targeting PHP 5.6, not PHP 7.0.
&gt; Nice have been waiting for the APCu and Imagick. Did `pecl install imagick` not work for you? Or what was the problem with installing it?
You can have a request body with a GET, however some REST clients won't handle this well, so it depends on who you're writing the API for. Elastic does this https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html
This: &lt;?php function entry(int $one, int $two) { assert($one &lt; $two); /* ... */ } ?&gt; Produces these opcodes: krakjoe@fiji:/usr/src/php-src$ phpdbg -p* -rr assert.php function name: (null) L1-6 {main}() /usr/src/php-src/assert.php - 0x7fbc93e8bd90 + 1 ops L6 #0 RETURN 1 function name: entry L2-6 entry() /usr/src/php-src/assert.php - 0x7fbc93e8bbe0 + 9 ops L2 #0 RECV 1 $one L2 #1 RECV 2 $two L3 #2 ASSERT_CHECK J8 L3 #3 INIT_FCALL 128 "assert" L3 #4 IS_SMALLER $one $two ~0 L3 #5 SEND_VAL ~0 1 L3 #6 SEND_VAL "assert($one &lt; $tw"+ 2 L3 #7 DO_ICALL L6 #8 RETURN null [Script ended normally] So that even though the result of the assertion is available inline, we *completely stupidly* generate the opcodes to send parameters to, and call an internal function so that it can retain backwards compatibility with the old version of assert(). I tried to argue the case that this is pretty terrible, but it fell on deaf ears, and by that time I was pretty tired of the whole thing ... What we have now is a million miles better than before ... but still not what I wanted ... and nothing like ideal ...
For me the main reasons are: - The most popular frameworks (like Symfony, ZF, Laravel) are too heavy and extremely slow. - If you write a business webapp you have to maintain the code for about 5-10 years. No framework has such a LTS. - Breaking changes makes migration impossible. Then your company has to become a maintainer of the legacy framework code. Thats very bad! 
Actually this looks kinda nice. I may use it for something. &gt; ATLAS IS A WORK IN PROGRESS. FOR ENTERTAINMENT PURPOSES ONLY. DO NOT USE IN PRODUCTION. BREAKING CHANGES ARE GUARANTEED. Oh pish no one got anywhere great in life listening to warnings!
&gt; All of it, Please. Even the XML Manipulation functions? =O
Use ist for yourself. Not for customers :D e: To clarify myself a little. If you are going to use your framework that you wrote over the weekend in one of *your* apps, more power to you. The only person you're responsible for is yourself. Looking at Laravel, CacePHP, etc. there are a lot of people around which will look for potential bugs, suggest improvements, ... . If your framework and a popular framework have both security bugs, in which one would you find the bugs much faster? The code only you and maybe a couple of your buddies are working on, or a framework with thounsand of testers behind it? If you are an expert in your area and actually know what you are doing, no one is stopping you from rewriting a router, caches, databaselayer or any other larger module (as it won't tie your hands on *how* to handle those things). And even than, you wouldn't write reimplement your own crypto-lib unless you are some kind of math wizard who can implement something that will somehow beat bcrypt. But in the end you'll make your experiments on your customers money if you *don't* know what you're doing. I mean no one is stopping you from writing your own stuff, releasing it into the wild and hoping that it will be the next hot product. It's even encouraged. But you will have to live with the limitations your code base offers. (And please don't let me get started on the number of unit tests, all of this popular frameworks have)
You can find lots of good resources on PDO(PHP Data Objects) or if you want a more OO approach an ORM(Object-relational Mapping) would work well for storing data in SQL servers.
I see that it's not ideal. But i guess it's not gonna affect performance more than type checks, or am I wrong? https://3v4l.org/Rn7oB There's a chance it will be better in the future ;)
http://previews.123rf.com/images/jgroup/jgroup1005/jgroup100502132/7060199-Illustration-showing-the-evolution-of-the-wheel-starting-from-a-stone-wheel-and-ending-with-a-steel--Stock-Illustration.jpg
It has no value. It's just for fun haha
You are my savior, thank you!
[removed]