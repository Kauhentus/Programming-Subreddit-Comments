That's it! Filter to convert %20 to . ? (still a noob) or have my original scraper be a little less discriminate? {$addr = $_SERVER['SERVER_NAME'];$result = implode(" ", array_slice(explode(".", $addr), 0, -2 ));return $result;}
I have no idea why basename is in there, it was suggested by the poster above. PHP is like French to me - I can read the back of a cereal box, but I don't get all the words.
Just do some processing. Also, probably a good idea to make sure the entries are alphanum only. $parts = explode(' ', $_POST['loc']); $addr = 'http://'; foreach($parts as &amp;$part) $addr .= ereg_replace("[^A-Za-z0-9]", "", $part ).'.'; $addr .= 'willkillusall.com'; header('Location: '.$addr); Something like that. 
Ops my bad - that's the JS part: document.location=document.getElementById('loc') + '.willkillusall.com' should be document.location='http://' + document.getElementById('loc').value + '.willkillusall.com'
basename() is there so it will only take the base(first) part of the string. If someone types in "subdomain.and.something.more" he would not get redirected to subdomain.and.something.more.willkillusall.com but to subdomain.willkillusall.com And yes, I forgot a http:// (still sleepy ;p) header('Location: http://'.basename($_POST['loc']).'.willkillusall.com');
Better than Magento?
So you're submitting via GET and wanting the form to redirect to domain correct? May I ask why not just use POST? It would probably be easier. It the form a single text field? If so, you could try this for post on indexnew.php: &lt;form action="redirect.php" method="post"&gt; &lt;input type="text" name="topic" id="topic" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; For redirect.php: &lt;?php $topic = trim($_POST['topic']); $sub = str_replace(' ', '.', $topic); $subdomain = $sub . '.willkillusall.com'; header("Location: http://$subdomain"); ?&gt; No warranties! EDIT: this does work i tested it. I had to change the header location to " instead of '
I'm not picking up what you are putting down This is what's working so far in form &lt;form action="redirect.php" method="post"&gt; I didn't use the javascript onsubmit. It worked without it. in redirect.php &lt;?php header('Location: http://'.basename($_POST['loc']).'.willkillusall.com'); ?&gt; This pair worked great if you only input one single word! I just needed a filter, but yours wasn't happy. I tried yours - the one without basename and it threw up an error. I tried the example you gave me just above and it freaked out at line 3 
What was this doing? It worked fine without it too
not quite. it returns "%24subdomain" for some reason. I'm working on one in another comment below this one. form: &lt;form action="redirect.php" method="post"&gt; redirect.php: &lt;?php header('Location: http://'.basename($_POST['loc']).'.willkillusall.com'); ?&gt; the problem is it works only when you put in one word, or use periods instead of spaces. I need to change %20 to . but I don't have the chops! Try it out here if you want http://willkillusall.com/indexnew.php 
this one is the most workingest!
Try it again, I may have forgotten a few semicolons... Yeah, works for me on my local sever 
It should've worked how about this? &lt;?php $location = str_replace(' ', '.', $_POST['loc']); header('Location: http://'.basename($location).'.willkillusall.com'); ?&gt; ??
I almost feel like I'm using the term fork wrong in this case the more I go over and list out all of the changes I plan on making. I don't think the core will be recognizable when I'm done with it. My partner is a designer and will be working with me too to improve the way it handles templating and implements CSS as well. In the end I want it to be fairly unique and easy to code with. 
Thank you, and good luck with yours! I almost feel like I'm using the term fork wrong here. It's more using it as a basis to start from so I don't have to plan out an entire architecture then it is as an honest fork of the base. 
Just to confirm: does this go in redirect.php or replace {$addr = $_SERVER['SERVER_NAME'];$result = implode(" ", array_slice(explode(".", $addr), 0, -2 ));return $result;} on index.php ?
http://willkillusall.com/indexnew2.php I moved exactly what you have in this parent post it to redirect2.php and referenced it in the form, i tried it in the index.php but it gave me an error: "i already rewrote the head uuuuhhhn" 
I've forgot the .value part, so it wasn't passing the input field value but a reference to the input field to the document.location, thus resulting in "[object%20HTMLInputElement].willkillusall.com"
I tested it like this index.html &lt;!doctype html&gt; &lt;html&gt; &lt;body&gt; &lt;form action="redirect.php" method="post"&gt; &lt;input type="text" name="loc" id="loc" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; redirect.php &lt;?php $parts = explode(' ', $_POST['loc']); $addr = 'http://'; foreach($parts as &amp;$part) $addr .= ereg_replace("[^A-Za-z0-9]", "", $part ).'.'; $addr .= 'willkillusall.com'; header('Location: '.$addr); And it worked fine.
Here, this works perfect if you're posting to indenew.php from indexnew.php. &lt;?php if ($_POST) { $topic = trim($_POST['topic']); $sub = str_replace(' ', '.', $topic); $subdomain = $sub . '.willkillusall.com'; header("Location: http://$subdomain"); } else { ?&gt; &lt;form action="indexnew.php" method="post"&gt; &lt;input type="text" name="topic" id="topic" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; &lt;?php } ?&gt;
Sorry, it's not going to work because I have {$addr = $_SERVER['SERVER_NAME'];$result = implode(" ", array_slice(explode(".", $addr), 0, -2 ));return $result;} That populates the body of the news article. I get an error - Cannot modify header information - headers already sent by blah blah blah See for yourself http://willkillusall.com/indexnew3.php
tanks! I'll give it a shot. EDIT: It works perfectly! Thanks a bunch, [you should stop killing people](http://alex.willkillusall.com/) [Here it is with the form on it.](http://alex.willkillusall.com/indexnew.php) Thanks again!
We solved it below. index.html &lt;!doctype html&gt; &lt;html&gt; &lt;body&gt; &lt;form action="redirect.php" method="post"&gt; &lt;input type="text" name="loc" id="loc" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; redirect.php &lt;?php $parts = explode(' ', $_POST['loc']); $addr = 'http://'; foreach($parts as &amp;$part) $addr .= ereg_replace("[^A-Za-z0-9]", "", $part ).'.'; $addr .= 'willkillusall.com'; header('Location: '.$addr); ?&gt; Thanks for your help all the same!
Ok then use the one I edited above for the two different files. it absolutely works I promise :) It is as follows. For indexnew.php: &lt;form action="redirect.php" method="post"&gt; &lt;input type="text" name="topic" id="topic" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; For redirect.php: &lt;?php $topic = trim($_POST['topic']); $sub = str_replace(' ', '.', $topic); $subdomain = $sub . '.willkillusall.com'; header("Location: http://$subdomain"); ?&gt;
Magento, while being a very solid implementation, is a nightmare to setup and maintain. Also it is a resources hog and just the wrong way to go if you want a simple e-commerce site.
Thanks for your help! It was solved above.
Yes, Magento is certainly not simple and is quite the slug though my experience is that very few people doing any kind of serious selling online want something simple. Additionally, Magento's security history far exceeds OSC, Opencart, Xcart etc.
I would be absolutely interested in helping out once you open up the repo on Github. I would offer to help now but I don't want to steal a spot of your second commiter since I can't guarantee I will be able to spend as much time on it as someone else may, but it seems like a great project to get some solid Open Source experience with and I love hacking away on PHP. I haven't personally used OpenCart yet but it's only a matter of time before I will need to... Make sure you keep /r/PHP up to date with your progress of your fork :) Also, if you don't mind, would you share your Github name so I/we can see when you make the repo public? (you can PM if you prefer) Thanks, and good luck!
No problem. Glad you found a solution!
Had thought of doing this myself. I run a small store selling OpenCart mods, I could add a few things to your list of why a fork could benefit OpenCart. Good luck gaining traction.
I am mr-smor on github, thank you for the kind words and I'll be sure to try and keep updates coming. I started a blog to write about my time doing this since this is pretty new to me over at https://daringcart.org
Doh! I tried github.com/user/mr-smor earlier and got a 404.. silly me.. github.com/mr-smor works fine :) I have followed you and will keep an eye on the blog too. Cheers!
I get really tired of that /r/PHP downvotes people for disagreement. What you said is not worth downvotes.
Yeah, but cookie stealing is entirely possible
The one thing I like about Magento is the administration look&amp;feel. It is just solid. Other than that I've ended hating it.
I haven't taken the certification test yet, only the practice test at the end of the course, but I passed that. 
Cool. I did one with symfony / Doctrine. Front: http://cart.jgallant.com Admin: http://cart.jgallant.com/cartadmin
A cart with symfony / doctrine is a great idea. It looks like you have a good start. Is the code available for download?
Yeah, I get that "Why do mom and dad have to fight?" feeling, every time I read through these silly disputes. Just keep on doing whatever works for you or your organization.
Thanks for the sentiment.
Thanks. The project is open source, and available for download: http://www.symfony-project.org/plugins/sfCartPlugin https://github.com/jongallant/sfCartPlugin 
Well this is a different issue. When a team has a coding methodology they like, you use it, whether you like it or not. Style changes are something you consider with a new project, not mid stream. 
There's a redirect method for 301 or 302 redirects. Check the HTML docs for the object model on that. Alternatively, you can scan the index.php for the method.
Don't lie. You're forking it because the lead developer is a proven dick who has no respect for other developers or users. ;)
I'm currently changing opencart for a company I work for. Its become my 9-5 job. Here are my suggestions: True OO design wish getters and setters. A single pricing object where a price can be changed from different factors. I needed to have the price adjust from the customer group and the quantity bought. It required many changes where I had to make it use my own pricing object.
I'm neck deep into OpenCart because my company is launching a client site in it and we just can't let it be as it is. All of the features above are ones that we need. And there are still other's that our client needs such as aging inventory tracking and better sales information. As well as data export modules to work with their in store POS. I will add the getters and setters as well as pricing objects and more options to modify pricing. 
It wasn't a factor in my goals, just a large cause in my wanting to fork it. It boggles my mind how he responds to people on his forums, lol.
I've tried setting the charset of the table to UTF8 &amp; the collation, as well as telling the DB driver to use UTF8. No go.
Try putting header('content-type: text/html; charset=UTF-8'); also, when connecting to mysql, use "set names utf8"
Does it return the same error for every row or just a particular row in the DB? 
Did both. Nothing. Another weird issue is that the data is different every time. Example: 'cityName' =&gt; string 'os AngelesCAUS379262134.05223 -118.243680Ð������ ÇC \ÇC @���13644Rosem' (length=76) run 2 'cityName' =&gt; string 'os AngelesCAUS379262134.05223 -118.243680�Cruisex¼ 4¼ @���13644Rosem' (length=76) run 3 'cityName' =&gt; string 'os AngelesCAUS379262134.05223 -118.243680y���*2 å \å @���13644Rosem' (length=76) Using latest Zend
Every row.
I would answer Sheep's question... 
I believe setting the charset of the table to UTF8 does not update existing data to UTF8. That might be your problem there.
Also you may go browse through the open issues in Zend's bug tracker. http://framework.zend.com/issues/browse/ZF#selectedTab=com.atlassian.jira.plugin.system.project%3Aissues-panel http://framework.zend.com/issues/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+ZF+AND+resolution+%3D+Unresolved+AND+component+%3D+Zend_Db+ORDER+BY+priority+DESC&amp;mode=hide
OK, so what parts are you stuck on? I don't get if you are asking for help to do it yourself, or asking for bids to have somebody else build it. If it's the former, you are probably right, looking at contact us type examples on the internet, understanding one and then modifying it to suit your variations is probably a good direction to head in.
You're going to need to give us more information. What do you have so far? To me it just sounds like you're asking us to do it for you? 
You need this tool for your project managers? Are you a PHP developer? This task (from what little detail you described) does not sound too difficult. Please provide more detail, perhaps even snippets of code that aren't working.
First off, I'm no PHP wiz; so if someone contradicts me with facts and points out my fallacies, you probably should listen to them. I am working on a simple form similar to the one you describe: with fields and a way of tracking each one. I made use of arrays: think of that first line as an array, with keys for each field. That way when they either add a line item or submit, all the information can be retained and passed into the building of a new form line or the email. 
If you're talking specifically about the mechanics of sending emails, I would suggest that you avoid php's mail() function and start by using [phpmailer](http://sourceforge.net/projects/phpmailer/) or a similar external library. It will make sending mail - particularly mail with attachments - much easier on you.
You'll need to provide some more information - Zend Framework version, PHP version, PHP environment (windows?), Zend_DB with Mysqli or Pdo_Mysql?
Yeah I'm doing the data export as well. I would give you what I have but its so specific to the company with base, case, half case, and 10 case pricing.
Yeah I'm doing the data export as well. I would give you what I have but its so specific to the company with base, case, half case, and 10 case pricing.
On security: I can understand if you're having some issues knowing what you need to research. I would highly recommend that you go over [this page](http://hashphp.org/) which details and outlines many different aspects of web development. 
If you have the code, and want to share, for going to an Excel file with the specifics stripped out that would be a nice starting place for me. The way I'm seeing it is to make it in two parts. One is an admin side page where you pick what data you want exported and the second is the actual file creation and population based on that form.
Magento was one of the ones I looked at hard before going with OpenCart and it's size was a large issue. Our client needed so many very specific functions that changing the code to work in the way needed wasn't realistic. OpenCart won just because it's very simplistic. Magento is a nice powerful one if you can roll with what it has. I don't know much about it's security though.
[You didn't ask properly.](/http://www.reddit.com/tb/j916c)
The worst words ever in the world of programming: "Seems like it would be simple" 
He did say it was MySQLi, but yeah, without much else.... not much we can help with
That seems like it would kind of suck to write in php... I'm kind of a php noob myself but I suppose it's a good thought exercise... Not really 'best practices' I suppose in terms of reusability, but it's fairly simple index.php &lt;?php $password = 'yourpassword'; session_start(); ?&gt; &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;MusicThing&lt;/title&gt; &lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;?php if(isSet($_POST['password'])){ if(strcmp($_POST['password'], $password) == 0) $_SESSION['authenticated'] = true; } if($_SESSION['authenticated']){ ?&gt; &lt;body onload="get_state_interval()"&gt;\n &lt;div id="nav"&gt;'\n &lt;span onclick="api(play)"&gt;play&lt;/span&gt;\n &lt;span onclick="api(pause)"&gt;pause&lt;/span&gt;\n &lt;span onclick="api(next)"&gt;next&lt;/span&gt;\n &lt;span onclick="api(previous)"&gt;previous&lt;/span&gt;\n &lt;span id='state'&gt;&lt;/span&gt;\n &lt;span id='message'&gt;&lt;/span&gt;\n\n &lt;/div&gt; &lt;?php get_file_list('files.xml'); } else{ echo '&lt;body&gt;'; echo '&lt;form name="input" action="'.$_SERVER['REQUEST_URI'].'" method="post"&gt;'; echo '&lt;input type="text" name="password" /&gt;'; echo '&lt;input type="submit" value="Submit" /&gt;&lt;/form&gt;'; } echo '&lt;/body&gt;'; echo '&lt;/html&gt;'; function get_file_list($file){ $xml = simplexml_load_file("$file"); foreach ($xml-&gt;children() as $file){ echo '&lt;div class="file" onclick="play_song/'.$file-&gt;id.'"&gt;\n'; echo $file-&gt;title.' by '.$file-&gt;artist.' from '.$file-&gt;album.' at '.$file-&gt;length; echo '&lt;/div&gt;\n'; } } main.js function api(action){ xmlhttp=new XMLHttpRequest(); xmlhttp.onreadystatechange=function() { if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { document.getElementById("message").innerHTML=xmlhttp.responseText; } } xmlhttp.open("GET","api.php?action="+action); xmlhttp.send(); } function get_state_interval(){ while(1==1) t=setTimeout("get_state()",3000); } function get_state(){ xmlhttp=new XMLHttpRequest(); xmlhttp.onreadystatechange=function() { if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { document.getElementById("state").innerHTML=xmlhttp.responseText; } } xmlhttp.open("GET","get_state.php"); xmlhttp.send(); } api.php &lt;?php if($_SESSION['authenticated']){ $getval = $_GET['action']; $pieces = explode("/",$getval); $action = $pieces[0]; switch($action){ case 'play': echo play(); break; case 'play_song': echo play_song(); break; case 'pause': echo pause(); break; case 'next': echo next(); break; case 'previous': echo previous(); break; default: echo 'Error: Action not found' } } else echo 'Error: Unauthorized acess' function play() function play_song() function pause() function next() function previous() get_state.php &lt;?php //get state of the player IE: "Currently playing song X by so and so" echo $state; files.xml(formatting) &lt;files&gt; &lt;file&gt; &lt;title&gt;&lt;/title&gt; &lt;artist&gt;&lt;/artist&gt; &lt;album&gt;&lt;/album&gt; &lt;length&gt;&lt;/length&gt; &lt;id&gt;&lt;/id&gt; &lt;/file&gt; &lt;/files&gt; You'll need a script to generate that xml from your file list, and I haven't the slightest idea of how I would interact with speakers though php so the action functions and reporting state are up to you. Probably better to just write it in Java or something...
ok! I recognize the name sfCart. I remember you posting on /php/ a while back. I just downloaded the code. It took me about 5 minutes to read the readme, review the schema, and realize it's pretty lightweight. :) Are you planning for a Symfony2 version?
Sounds like you need two servers, one for web serving and the other for video encoding. With two servers, you can queue up tons of work on the encoding server without having to worry about the web server bogging down.
Export was easy. Just put everything in an array then do implode(',',$array) and then you have a CSV. I was talking about all the code for the pricing. To store the prices I made another table with each price group as a column. Its not very normalized, I know but it makes things a while lot easier especially with CSV imports. 
I know you'd like to make one yourself, so ignore this if you like, but you might find [Andromeda](http://www.turnstyle.com/andromeda) interesting.
Not quite what I meant - he said he tried it with PHP's mysqli_ functions, but with Zend, is he using Zend_Db_Adapter_Mysqli or Zend_Db_Adapter_Pdo_Mysql?
Wow, thanks for the the in depth response! I really appreciate the effort. I'll pick it apart and see what you did. As for writing it in java, I'm less comfortable with java than I am with php, but I suppose I should learn. Ideally I could do this with Python, but I'm not sure if I could get it running on apache.
Awesome, thanks for the tip, I'll check it out. But of course I ultimately want to write one my self.
use xdebug or zend debugger to trace the call to Zend_Db. It uses PDO or MySQLi internally (depending on what driver you select) so if you go deep enough, you can inspect what's actually being returned from the DB driver and see if the error's there or in Zend_Db.
As a CSV yes it is. Sadly my client's have taught me to avoid handing them CSVs because of the terrible way Excel forces cell formatting on them, such as dropping leading zeros. Listen Excel, if there's a 0 in front I want it there! So yeah, I try to hand them Excel files.
I hate companies that start off gathering a community around a open source product only to flip it to a commercial one in a few years turning their back on the open source community... Either be open source, or be Closed Source I dont care which, BUT DO NOT BE BOTH. they can not coexist Screw Magento, 
Well, that's one half of the issue, for sure. I would even suggest a cloud system like Rackspace Cloud or Amazon EC2 that would allow you to ramp it up to a faster CPU during heavier load times, and knock it back down to a cheaper solution when it's not. That doesn't answer what in my opinion is the harder part of the question -- *how* to queue them up in PHP. It's a challenge I've thought about many different times, and never had a good answer for, so if anyone has any suggestions, I would also like to hear them.
Y'know, I wrote up something quick and dirty recently that can generate pls files... I suppose it wouldn't be too difficult to add some code that would execute a player application and pass it the file to load... I'll have to look into it. Via some google-fu: [http://httpq.sourceforge.net](http://httpq.sourceforge.net) - Apparently, this lets you control Winamp via php.. Could be useful to you.
I have an encoding cluster of 58 machines I use for encoding. I use 2 x quad core xeons. For this CPU, you can encode 4 files at the same time, which I found to be the quickest. I mark each file with the encoding server ID, then a cron on each box queries the mysql for files that were sent its way. It checks if it has any open encode slots, if so, it copies the file to itself, marks it as encoding in the DB, and starts the job. Available encode slots are checked with a mysql query, that asks for # of files marked as converting for that particular server. You can also implement a load check with your free slot check, to make sure the server isn't going crazy.
Yeah. I'm thinking of doing the imports as excel files just because of the problems that can arise. 
Speaking of imports: The client I have right now has a 12,000 item inventory, and they wanted to make a system on line that let people browse through it (now they want a store to sell them through). So they handed me a bunch of excel files that were exports from their in store POS systems. I said no problem, converted them to CSV using OpenOffice and built my import routine. Then I wrote the instructions on how to update the files themselves. The manager, who is pretty tech savy, saw that their POS has an export as CSV and so he used it thinking he could save himself a step. It broke everything. I have never been so glad to have done the right thing and split up the data into multiple tables. It turned out that the POS exported the same report with different formatting depending on if you wanted a CSV or excel file. *face palm*
I work with Magento (lead back-end dev for a very popular international brand) on a daily basis and while it has its quirks, it kicks the ass of every other e-commerce system I've dealt with. For implementing features for medium to large sites, I'd say it's tops. This is the reason I'm very interested in these other open source projects -- I want to get a good idea of how they're implementing extensibility both in building features and templating. Honestly, if I weren't as busy as I am, I would fork the base of Magento (sans cart) and use it as a development platform for other types of web-based software. It's that good, as far as I'm concerned.
To be fair he's not complaining about the quality of Magento, just who runs/owns it. All of these comments are really making me want to take a closer look at the code though.
I love these because I write paranoid evaluator code. I was once laughed at for writing: if($var == ''){} instead of: if($var){} And they called me crazy. I'm glad that I was taught that unless $var is a boolean don't evaluate with such functions.
Fair enough.
Really? I would: 1. have a DB with list of files to procces, what to do with them etc. 2. have one cron job look over the list, pick one, and mark it as "in progress" 3. encode the selected file, once done move the result into another folder (once done, no "save the result to another folder") 4. another cron checks the "done" folder and marks the file as "done" in DB, calling other scripts to do whatever it needs to do with them (upload to CDN, activate DB records etc.)
This is a good article, people should be reading this one for sure. Too many php programmers rely on error suppression and lower error reporting which is the wrong way to deal with non-fatal problems in code.
All of you are crazy! Use `===` !
Sorry, sorry, been drinking tonight. My best bugs are: if($var = $var2){} It's always true! :'(
Every good PHP dev should know regular expressions: * [Possessive quantifiers](http://www.regular-expressions.info/possessive.html) * [Atomic lookaround](http://www.regular-expressions.info/lookaround.html) * [Regex conditionals](http://www.regular-expressions.info/conditional.html) You also might be able to find some obscure features/bugs [here](http://phpsadness.com/)
This is well suited for Gearman, I just wrote [a simple introduction to Gearman](http://e-mats.org/2011/08/a-gentle-introduction-to-gearman-and-its-concepts/) and how everything is connected a couple of days ago. If you have any questions feel free to ask away. One of the tasks we've implemented is exactly video encoding; we create a job with the video source id, the width we want, the codec and the bitrate and throw it over at the gearman server. A gearman worker on one of the encoding servers picks it up as soon as it is available and goes to work doing the actual encoding. When finished it'll call a small service in the application telling it that the work is done.
A good fit would be to use a message queue which is suited for exactly that. Your frontend tells the queue server that it has some work it'd like to be performed, and then the message queue hands it over to an available client as soon as possible. The frontend code can live happily ever after and deliver a proper response to the client, while the grunt work is performed in the background by available "workers" (message queue clients performing actual work based on the messages received). See [Gearman](http://gearman.org/), [ZeroMQ](http://www.zeromq.org/), [RabbitMQ](http://www.rabbitmq.com/) or Amazon's own [SMS](http://aws.amazon.com/sqs/) for examples.
I was originally planning a symfony2 version, but I don't know if I ever will end up doing that. Lightweight was the main idea, since every other cart system I had tried are bloated beyond belief. Not the best cart out there, but it surely is a great way from a someone who has symfony experience to develop their own cart solution building on the base I already made up for them.
I think you're right that that's what s/he's saying, but it won't work because you still need infinite time to be able to wait for the longest-running programs to halt.
Thank you! This is exactly what I needed! This is why I love reddit :)
After reading this I realized how simple this would actually be. But since I have started down the path to message queuing, I am going to see it through. That way I can just plug in other tasks as the need arises. Good call though.
This project is in its infancy and is still "proof-of-concept". As such there is no budget for things like cloud services at this time. Definitely something to think about in the future though. 
Yes, but the video server would get bogged down, I need something that is more controllable than just throwing more hardware. "Work smarter, not harder" as the saying goes :)
Yeah, I don't have anywhere near that kind of setup :)
I use beanstalkd together with Pheanstalk (PHP library). You got enough examples on the libraries page to get started.
No it did not. The only way I know how to prevent it is to use [PHPMD](http://phpmd.org/) as a pre-commit hook to detect its usage and reject the commit...
No. There are times when using error suppression is legitimate, but those times are few and far between. Mostly it is used to get around runtime errors that you can handle but wind up sending output regardless.
Streams is a good example. Say you want to open a URL through file_get_contents(), but the address doesn't resolve, or winds up being a 404 for whatever reason. You can handle the error, it is non-fatal. However, you can't stop the error output. In a proper production environment errors should be redirected to a log file, but it can still fill up your logs with unwanted error output.
I think this is the only place I ever use it: @unlink('somefile.txt'); If a file you're trying to delete doesn't exist, generally you don't want that to trigger an error. 
If you define your own error handler with set_error_handler() it will receive all errors regardless of whether the statement is prefixed with an '@' symbol. You have to specifically handle that case by checking the result of error_reporting() in your handler if you want '@' to function normally. I highly recommend defining your own error handler in any project. My preferred method is to convert all errors into exceptions: function errorToExceptionHandler($errNo, $errStr, $errFile, $errLine, $errContext) { if (error_reporting() == 0) return; throw new ErrorException($errStr, 0, $errNo, $errFile, $errLine); } set_error_handler('errorToExceptionHandler');
That's not safe either due to race conditions: the file could be deleted by another process between the check that it exists and the unlink.
Thats not true, in fact I am neither. I know my programing skills are just average and I look into everything and will try anything which may make me a better programer. 
 Look at it this way: over the years you built a bunch of libraries, that you know how to use and what they can do. You probably added some PDO classes (or use some already available), maybe even a TDD system. That's great. Great if you are the only one working for the project. And the only one who will ever work on that project. But, what if the project grows beyond what you or the client initially estimated? What if you need another 2-3 coders to help developing it? These guys would start from scratch, would have to spend time understanding the way you built the project and your custom classes. The way you organized your scripts. That's time consuming, and expensive. Even more so, one day you stop working for the project. Who would be able to pick up where you left off? Also, you are the only one developing your custom libraries. Consider that a popular framework is used by thousands of developers. These means more bugs fixed, quickly and properly. And new features added, features you might not even realize you could implement (in my case, it was symfony's sfForms :D ). Using a popular framework, fully documented and with a large user base, would make all these issues go away. If you develop a small site (a few pages, maybe a login), using a framework is probably an overkill. But, if you develop a medium-large project, using a framework will speed up the development and also be much more cost effective if the project ever picks up speed and starts growing. 
http://php.net/manual/en/function.simplexml-load-string.php
have a look at this: [http://rssphp.net/](http://rssphp.net/)
i think http://tits.willkillusall.com would be much more appropriate.
ooooooo! this is a new way to look at random sleazy images. and there is always a cool story to go with it as well!!!
whoopsie.
Try something like: $titles = array(); $rss = file_get_contents($url); $rssXml = new DOMDocument(); $rssXml-&gt;loadXML($rss); $items = $rssXml-&gt;getElementsByTagName('item'); foreach($items as $item) { $tags = $item-&gt;getElementsByTagName('title'); $titles[] = $tags-&gt;item(0)-&gt;textContent; } ?&gt; Highly untested code, hope it works.
this worked perfectly, thank you so much dude. I was using file_get_contents, but couldn't figure out how to move on from there.
or magpie, or simplepie :D 
Not Magpie. It hasn't been updated in nearly *6 years*. SimplePie was updated [just last month](https://github.com/simplepie/simplepie).
Be careful when moving this script around on different web hosts. Some web hosts will not allow fetching URL content with file_get_contents().
That's not going to handle errors in RSS at all. It'll probably work, but as soon as you run into any issues with their site being down or something malformed coming through (and DailyKos is user-generated, so that could very likely happen), you'll end up with busted code. I would use an actual library like [SimplePie](https://github.com/simplepie/simplepie), which is...well...simple :)
yeah I had run into that problem on one host that I was using, which leads to the question is there anything one can use if your host is not allowing file_get_contents() ?
imho, SimplePie's handling of multifeeds leaves much to be desired. but for just one feed, i agree.
well, the general principle can be used with 2 machines... or 200.
This sounds almost like a homework problem, but I'll provide some tips on where to start if you can provide a screenshot of the row data in the database. I'm a bit confused as to the structure of your tables.
[Looks like](https://github.com/simplepie/simplepie/blob/039a8c3e22e4843c7bc1b4244cf32fe68371ee01/SimplePie/Parser.php) it uses [XML Parser](http://www.php.net/manual/en/book.xml.php), or tries [XMLReader](http://www.php.net/manual/en/book.xmlreader.php) instead if that fails. Also [looks like](https://github.com/simplepie/simplepie/blob/039a8c3e22e4843c7bc1b4244cf32fe68371ee01/SimplePie/File.php) it tries [curl](http://www.php.net/manual/en/book.curl.php) to connect, and falls back to [fsockopen](http://www.php.net/manual/en/function.fsockopen.php) techniques if curl isn't installed. Without trying it out myself or digging any deeper, it looks decent on the surface, and seems to have a couple of bonus features (header management, local cache, etc).
That makes no sense. The company I'm with has a similar size catalog and the new Open Cart can be slow as shit. They took out the category cache. 
Most hosts do allow you to use the [cURL extension](http://php.net/curl), which works perfectly, although with a little more setup headache. Just do some searching on pulling files in using cURL.
Some [Ldap](http://www.php.net/manual/en/function.ldap-errno.php) functions as well. No sense in logging an error just because client's username or password contains a typo while binding.
If needed, you can still use [`error_get_last()`](http://www.php.net/manual/en/function.error-get-last.php) afterward if `unlink()` returns false.
 "DATE('time_start') = CURDATE()" would probably be best, but a query like this is going to do a full table scan anyway, because it has to perform DATE('time_start') on every single row. This query can't be indexed. You might get better performance using something like: "time_start BETWEEN TIMESTAMP(CURDATE()) AND TIMESTAMP(CURDATE(), '23:59:59')" ... IF the column is indexed. Otherwise, it's probably only marginally faster, since it only has to do the function once, not once for every row.
You might feel a bit silly, but `'time_start'` is not a valid date string. You should remove those single quotes around the field name... unless those were meant to be back-ticks?
I removed the ticks and it pulls one entry now but not multiple. Still a bit curious. 
In the pastie below is an example of pulling a file with cURL. Save you some searching ha. Remember to check stackoverflow.com if you have any more questions, it's very likely that someone has already asked it there. [ http://pastie.org/2327891 ](http://pastie.org/2327891) 
I tried the BETWEEN method you mention and it pulls one entry but not multiple. Even though there are definitely multiple entries for today. 
Agreed, I hate the handling too. Personally, I want to introduce a separate SimplePie\_Feed class and have the SimplePie class simply manage it, which would let us do parallel cURL requests and handle errors better. The other maintainers didn't agree though. Out of interest, any specific improvements you'd like?
Nevermind I'm a tard. I was using fetch assoc instead of array. Derp. Thanks!
I'd have updated it sooner, but I've been extremely busy with exams. We're working on getting 1.2.1 released soon, since there are a few bugs in 1.2
Hey, no worries. Again, 6 weeks beats 6 years ;)
Their inventory system isn't part of OpenCart. It's a completely separate system that I made just for it. 
 var_dump();
yeah, I hear ya. If you change your mind about the symfony2 version, I'd be interested in collaborating with you. A couple of features that top my list are product variables, product types, and authorize.net functionality. cheers :)
Nope. Not allowed, see PHP Constitution Article 5
simplexml really rocks i've built enterprise applications (b2b) and i've yet to encounter and game killing bugs. only issue is that you have to cast everything or you get an object back. ie (string)$res['whatever'] returns a string but $res['whatever'] returns a simplexml object
Bah. I totally copy-pasted his mistake into my answer, too. Yeah... DATE(time_start), or DATE(\`time_start\`), not DATE('time_start').
Run your query by hand and see what it gets back. How are you pulling the rows? while ($row = mysql_fetch($result)) { print_r($row); }
Yes.
How long ago was the rss spec updated? Ok, I stick with simple pie myself.
The RSS spec isn't the issue. It's how far PHP itself has come and modern development practices. Magpie's still built for PHP 4. 
..which you should be using anyway. fetch_assoc is not appreciably slower, and it's more readable.
...which would fail since mysql_fetch() isn't a function of the mysql library. perhaps you want mysql_fetch_assoc() or an associated function?
&gt; should I write a php script that writes an xml file? I personally wouldn't go the XML route... SQLite would be great for this. If you're not familiar with it, it gives you the power of SQL without having to run a seperate database server. I suggest using PDO as an interface which allows you access to prepared statements which pretty much eliminates SQL Injection attacks. This is one of the better sites that has easy to understand and good examples: http://henryranch.net/software/ease-into-sqlite-3-with-php-and-pdo/ &gt; How would I ensure security There's a lot of issues with storing passwords as plain text. Generally the recommendations are to hash and salt the passwords, not to use md5, and to use bcrypt. &gt; ...if I were to add functionality like deleting files etc? If you're going to be using any user input ($_GET or $_POST) to work with the file system make sure you protect yourself from directory traversal attacks. Cheap security could be made by limiting their input to A-Z and 0-9... allowing periods and slashes wouldn't be so wise.
I suggest you Symfony, you can use release 1.4 or 2 (new). MCV pattern helps you to manage your application. Also ORM, build and validate forms, ect.
EVERY FUCKING WEEK
I think CodeIgniter has the lowest learning curve, if that helps. 
Really? I did a search before I posted and everyone kept saying "I'm a novice." Maybe you should point me to a really good listing and I can ask the mods to make it sticky.
I saw several posts on r/php about frameworks You've got Zend (I've got 2 years of experience with it) , it has a Gdata integration. Symfony ( i've used 1.0 / 1.4 and haven't used 2 ) , I'm sure it will have a plugin for a calendar too I'm seeing that you are mentioning workflows (My app will track releases of software (including a calendar which shows when releases happened). The app will also host a quick sign off application which will require all major releases to be signed off by managers from various teams) I recall that i saw an integration for zend that allowed you to configure the steps for workflows (via ini or xml ) 
Did you read the post- of just blindly respond to the title? 1&gt; notice I said I'm not a novice and was looking for others' experience. 2&gt; notice I already did google it and mentioned some of the frameworks I had worked with. So instead of giving a RTFM style answer- why don't you tell me- what was the framework you worked with in the past that you liked the most
You might want to post your projects on github. I understand about keeping projects quiet to the outside world, but to do that with open source seems a bit weird, no? Saying that, I'm interested in both the php cms and c++ project. I'm also in the same boat re working full time...
I think Kohana is really solid. I just started with it, and, despite the learning curve, it's actually a really solid framework. The learning curve is mostly figuring out how their routing/folder structure works, but, once you get that, you're in like Flint. I'd say check it out.
Depending on what you're trying to do and how long you have to do it, I recommend Codeigniter. Yes, many will diss it, however, it's a fast framework, not too much extra bullshit, plenty of solid documentation, a big community and a lot of 3rd party libraries have been developed to pick up some of the shortfalls (e.g. orm lib, auth lib etc). It's definitely one of the frameworks that you can get going in quickly which for me made it a win. If I were to do a 'big' web app I would choose Zend or Fuel PHP, however the learning curve is higher. From the sound of what you're trying to do CI would work well and would give you a nice gentle introduction to a solid MVC framework.
If they're open source, post the links to their sources!
If you let people contribute, they will likely do that. If you don't let them contribute, they will likely fork instead. 
I like CakePHP. It has really simple principles, most of which are to help you reduce the amount of code you write. It's also nicely explained in the documentation - [The Book](http://book.cakephp.org/). I hang out in their IRC channel, and a *hell* of a lot of questions can be answered by just pointing people to the right "page" in it. Also, did you *really* manage to miss [this post](http://www.reddit.com/r/PHP/comments/j4ezv/api_development_what_frameworks_to_use_tips/) just a bit down the page?
Don't let it bother you. Whenever you ask for help of any kind of programming help [this guy](http://bnbgaming.files.wordpress.com/2010/10/comic_book_guy.jpg) will always reply. People like that contribute nothing and only increase the noise to signal ratio for google searches. I love googling a quick question and wading through 30 responses that say nothing more than "RFTM" or "let me google that for you" Fucking non-contributing zeros. That said, I use code-igniter for lightweight, cakephp for robust. If you want any more info, READ THE FUCKING MANUAL :P
I agree with you up to a point, but seriously, this question is asked every damn week. http://www.reddit.com/r/PHP/comments/j4ezv/api_development_what_frameworks_to_use_tips/ http://www.reddit.com/r/PHP/comments/j3uq2/is_using_a_framework_really_decrease_development/ http://www.reddit.com/r/PHP/comments/j1bb3/suggestions_for_how_to_tackle_a_new_project/ http://www.reddit.com/r/PHP/comments/j0h1d/looking_to_mess_around_with_a_simple_lightweight/ http://www.reddit.com/r/PHP/comments/ista4/good_php_framework_for_making_a_web_app/ http://www.reddit.com/r/PHP/comments/iprrb/php_framework_laravel_what_do_you_guys_think_of_it/ http://www.reddit.com/r/PHP/comments/ilv9w/im_a_little_confused_with_mvc/ These are just the few I found by manually going back a few pages, I didn't even bother searching for it. If you expect someone to take the time to help you then the least you could do is read through the list of topics and do a search: http://www.reddit.com/r/PHP/search?q=framework&amp;restrict_sr=on So yeah. Every. Fucking. Week.
Zend Framework or Symfony. Learn those. Pick on to start, and learn it. Eventually, play around with the other and see what it offers. Also, explore using Doctrine as well. People are going to suggest others, but honestly, don't bother. Zend and Symfony are the heavy weights. CakePHP has a lot of drive behind it as well, but still, I'd go with one of the above two. Symfony just released version 2, and Zend is building version 2 as well. Don't go with CodeIgniter. It's low learning curve is it's biggest, and only, real feature. And if you are a good PHP developer, you'll hit CI's ceiling rather quickly (and then be stuck trying to learn a framework that won't take you places). If you learn Zend or Symfony, you'll at least learn things that you can use if using other frameworks. Personally, after a couple years using Zend, I'm looking forward to exploring Symfony 2 for a bit with a new project.
Wow. Do you study logical fallacies or did you just bump into so many of them by accident? What the fuck does it being the internet have to do with anything? How is "It's the internet" a valid argumentation for any point of view? But lets ignore that shit. Here's why it's such a loss of life quality when the signal to noise ratio of Reddit becomes shit: I have a finite amount of time in my life, I have a money to make, people to socialize with, news to absorb, places to be, things to do and all that. Reddit is a large part of my news to absorb so when the news is distilled with the same question every single week containing the same answers (and yes, they do, there's *always* people giving the same damn answers) The signal to noise ratio of a news site is hugely important and when something becomes a significant noise factor then it's important to try and reduce it, there's no one here being mean to the OP so I don't see any problem at all. (granted, I'm being mean to you but your holier than thou attitude is grating) So your white knighting aside, did you even bother to read any part of Reddiqute other than the part which proved your point? &gt; Reddiquette is an informal expression of reddit's community values, written by the reddit community itself. It's not meant to be a list of commandments, but really more of a collection of guidelines. (In other words, be flexible!) It's in highlighted by a box. I know it's hard to miss. The point is that the search results aren't filled with useless responses, (did you even bother to read them or was it easier to just assume they'd be useless?) they're full of this subject being covered time and time again, with brilliant responses covering almost every aspect of PHP frameworks. Please try to get off your high ground and learn to argument with actual logic, it behoves a programmer to do so. /being a dick
http://www.thefreedictionary.com/behoves So should I just assume that you are incapable of using sane logical argumentation? I must say that's slightly disappointing. You shouldn't put up with some little punk like me being all mean to you and using all that nasty logic against you. If you want I can give you my address so that you can come punch me as well, I'm sure that would make you even more right.
Are you fucking kidding me? That's the Thesaurus section... Thesaurus as in synonyms, which apparently includes an alternative region spelling. I went ahead and took a screenshot of the relevant section: http://gyazo.com/ff7e955b778ce16a5b60aebe79a69faf.png The example is highlighted in blue, I know it's hard to see. Seriously, I haven't ever seen anyone fail this much and this often, and I even deal with children on some of the projects I work on. They can't argue worth shit but you have them beat by several miles, it's actually very impressive. Now, are you going to actually use logic to argue your original position or are you going to try ad hominem attacks to make yourself feel better?
So Archaic means "forbidden from being used" or just "no longer used, but it still means this". Obviously you knew what it meant enough to think you could correct it. (Or did you go all wiki warrior on me?) I'm still waiting for some salient arguments from you that don't boil down to "I think this so you should as well". I'll even allow you to do it in Elizabethan English if you want, I'll still understand you and will argue back with logic.
This is why all companies need code standards/best practices per language
Check out http://qualityassuranceinphpprojects.com/pages/tools.html
thanks, will do.
pretty neat, but do you know of anything like a roundup of some of these or a case study/use case thingy?
try a jquery carousel . [link](http://plugins.jquery.com/plugin-tags/carousel)
Use a carousel that pulls its images from an unordered list, and generate the unordered list's items with a foreach() loop calling the database? That seems painless. The nivo slider would support such an endeavor. edit: If you need more specific instructions, feel free to ask!
Do they need to be in a specific order?
If the only connection between the sound system and the server is an audio cable, you will need a push/pull mechanism of some sort. It's possible you could leverage node.js to get instantaneous push/pull. Otherwise, you could push events into a database, then consume them with a cron script that manipulates the sounds system accordingly. The cron script route would have some latency.
I'm too tired to fully absorb either the security review or the script, but even in my very tired state, I noticed several security problems myself that had been pointed out in my book on PHP5 CMS development. I think the author of the script could have done a bit more research.
Maybe people just can't stand you being correct. SNR is important, I hate people that don't care about it; they only care about getting *their* question answered.
have you tried http://api.themoviedb.org/2.1/
&gt; I'm already running 'php -l' on every file That just checks for syntax correctness, meaning you'd see the same errors there as if you'd run it... but without the advantage of running it and seeing what *runtime* errors pop up. You might want to spend the ten seconds in Google looking for PHP static analysis tools. For example, [this post on StackOverflow is rather comprehensive](http://stackoverflow.com/questions/378959/is-there-a-static-code-analyzer-like-lint-for-php-files), even if it is a few years old.
That is strange. Are you working somewhere you have php command line? Try php -l quilt.class.php. I get "no syntax errors." Which implies that it's maybe in the file above it; are you including a file before you include this one?
Is there some sort of white space before the php opening, or at the end of the file? Does it work locally and just not when you upload it? What php version(s)?
I get the same error in the command line. I think my problem is some sort of text encoding one... I just pulled the file from my server again, and it had been removed of all line breaks, so everything past the first comment was commented out. I've got no clue how to fix this... my text editor is Notepad++, and I'm encoding in UTF-8. The weird thing is, if I make changes and commit them to SVN, it gets put on the server with no problem...
Check this file, and any file that you are including this one in, to make sure there is no white space after the close php tag ("?&gt;"). Or better yet, omit it entirely. It is not required, and accidentally including any space after can result in errors. Additionally, check the editor you are using to make sure it doesn't screw up text files by munging the line breaks or byte order marker (read: WordPad).
No My local version has no errors v5.2.17
See my reply to feigndad, there's something weird going on with the line breaks between my editor (Notepad++) and the server. Any idea how to make it not eat the line breaks?
&gt; my text editor is Notepad++ Under 'Edit' menu, choose the 'EOL Conversion' option for your server OS. Though PHP usually wouldn't care, unlike Apache for its config files or some other applications. Edit: &gt; it had been removed of all line breaks, so everything past the first comment was commented out Yeah, that's something PHP would actually care about, and in fact this is the exact reason for the error.
I'm willing to bet you have windows line breaks eg ^M characters. It's a pita to remove them. 
If you see the line breaks are missing is probably because the subversion server is running in *nix and you are developing in Windows? I believe you can set the properto eol-style to "native" to fix this (only for text files). For example: svn propedit svn:eol-style somefile.txt And just add "native". I believe that is the only way to fix the file portability issues. For more info check [here](http://svnbook.red-bean.com/en/1.5/svn.advanced.props.file-portability.html#svn.advanced.props.special.eol-style). Ninja edit: You will have to commit the file and then check it out again, of course when you commit, fix the line breaks issues before :)
Are you loading this file through an include ( I guess you'd have to be. ) I think you have some bad syntax before its being loaded and it finally hits an error when it loads the file.
[dos2unix](/http://linuxcommand.org/man_pages/dos2unix1.html) if you have access to a command line -- and cygwin if you don't already :)
dos2unix filename.php ?
Aha! That did it! For some reason the EOL conversion was set to Mac.... Thanks a bunch, have an upboat :)
codeigniter is trash, grow up.
&gt;start with a framework or stick to classic PHP &gt;classic PHP what am I reading here. &gt;Coldfusion Here is your first mistake. &gt;Codeigniter Here is your second. You are getting a masters in SE. I think you can handle a framework.
Check out Geany: http://www.geany.org/ it seems to have less EOL problems due to its Linux roots.
Not illegal. That info's in the server logs anyway. You might craft your privacy statement such that it says "we keep some non-identifying information blah blah blah for records." Just open up a log file "$fh=fopen( "foo.bar.log", "a")" and append to it whatever you want "fwrite( $fh, $SERVER[blah]."\n");fclose( $fh );" 
Sorry, I am an absolute Idiot. Can you explain that a bit more thoroughly. Would I need MYSQL connectivity? 
find a place for your log file where you can write to it. Perhaps /tmp/visitors.log include this: $fh = fopen( '/tmp/visitors.log', 'a'); if ( $fh ) { fwrite( $fh, "some thing to log\n" ); fclose( $fh ); } you might need http://www.php.net/fopen and http://www.php.net/fwrite and http://www.php.net/fclose That's pretty much all there is to logging infoez. 
Alright, thank you very much. THe part that confuses me is the: { fwrite( $fh, "**some thing to log**\n" );
the fwrite() function takes a file handle, which you got with the $fh=fopen(blah,"a") line. Then it takes a string of something to write. Optionally, you can include a 3rd parameter of the length of the line to write. I like to include a timestamp, I usually use epoch times. I'd have something like fwrite( $fh, time().",".$_SERVER['REMOTE_ADDR'].",".$_SERVER['HTTP_USER_AGENT']."\n" ); You asked about specific things. Just throw them into a string somehow, whether you concatenate them with . or use a sprintf construction, whatever. fwrite won't append the new line character, that's what the \n is for. (I guess you could use \r\n if you were reading it on windows).
Note: Check Google Analytics or Piwik if you want more info about your web users.
Okay, I am starting to fully understand this, (sorry, all my knowledge is form the 'PHP for dummies' I am one). So how would I integrate the: fwrite( $fh, time().",".$SERVER['REMOTE_ADDR'].",".$SERVER['HTTP_USER_AGENT']."\n" ); Into my existing document and also have it write to the log file?
You don't even need to do that. Just get a [log parser](http://awstats.sourceforge.net/) of some kind. If you want to log something, use [syslog](http://php.net/syslog). Your method is bad because it doesn't take file locking in to account *at all*. Never write to files without obtaining a [file lock](http://php.net/flock) first.
You shouldn't. This is all terrible advice. Use a [system logger](http://php.net/syslog).
I'm checking it out right now thanks. 
That is to difficult to comply with my current knowledge on the topic. Like I said, I am a beginner :D. I think I might stick with reading my php for dummies book and getting a grasp on php. 
It has been about 30-60 seconds between opening the page and you replying. Seriously. You haven't even had time to experiment with it.
I didn't say I would not experiment. I am saying that I will try to wrap my head around this. Where I am its Night so my eyes feel dry and I need some sleep. It was a fast answer I know, but here is my edit answer: After a quick skim through, that looks like something I have never come in contact with before. I am tired, I will investigate and try this stuff out tomorrow when I can actually think straight. Thank you for the response!
To explain, Notepad++ uses `CR` for the EOL format for Mac setting, but PHP on \*nix platforms expects at least `LF` while parsing the file, which is why using Windows format (`CR+LF`) on \*nix should usually work fine. This Notepad++ feature [might be out of date](http://en.wikipedia.org/wiki/Newline#Representations). If you know anyone in your team using a Mac, be sure to give them a stern look of disaproval for not checking that the file has the correct line-ending format before uploading to the server.
`syslog` won't be useful unless you already have it configured to specially handle PHP log events. For users who don't know their way around syslog configuration, this won't be of any help. feigndad used the `a` switch in his/her example for the fopen mode. [From the manual on fwrite](http://php.net/manual/en/function.fwrite.php)... &gt; If handle was [fopen()ed](http://www.php.net/manual/en/function.fopen.php) in append mode, fwrite()s are atomic (unless the size of string exceeds the filesystem's block size, on some platforms, and as long as the file is on a local filesystem). That is, there is no need to flock() a resource before calling fwrite(); all of the data will be written without interruption. But ultimately, at the time of my comment, OP mentions nothing of server environment, so we're all taking a little too much liberty to guess how to resolve OP's predicament. Though "this information should already be logged in the server logs" would be the most likely solution.
You've moved into JavaScript, and I'm a bit new to it. Are you getting specific errors or just blank screens?
use fopen and fwrite.
haha did you only read the headline and not the actual question?
What specifically are you doing? You might want to look into google analytics. They'll give you this information and much more, as well as giving you a usable interface to view it.
im lazy like that sometimes....
This or record the data to a database so that you can play with it as you will.
Piwik is like Google analytics except you have control over the data. OP seems kind of new to it, which is why i just recommended anylitcs.
Right. But I would venture to guess that at his level, playing with a db handler, running queries and such would serve him better than plugging Piwik in. That's not to say that he should give it a go, but I'm one to encourage newbs to take the kinds of steps that will help them understand what they're doing and grow rather than just haphazardly implementing a means to an end. That's why I put the db option out there. 
Using syslog calls is good advice, if I wanted to walk him through the syslog configuration and where to send the log messages. It sounded, however, that this was refusing to feed hamburger helper to a starving man because it wasn't filet mignon. Appending to a file is atomic and he shouldn't have any locking issues. A fopen() call doesn't cover log rotation and it doesn't cover "what happens when my file is too large for the file system." 
after your file handle is established and the variables are set up. In your example, any time after the fopen() call (you might do something else and want to store the output of some other function, in which case after that.)
check /var/log/apache2/access.log (i assume)
Thanks for the advice. Haha ColdFusion is what my work uses, first job out of college, what can I say. and the other mistake is using Codeigniter? So you would prefer?...
A note for the future: I generally like to avoid using //-style comments in my code, in favour of /**/ style, because of issues like these.
phpDesigner.
I'm really not interested in an IDE. I'm aware that several IDEs can automatically create docblocks, but I was hoping for a utility that will run over all of my code at once and just add in the necessary docblocks.
Which framework would you suggest?
Even IDEs, without a LOT of code analysis (and a good deal of guessing), will get docblocks wrong. PHPStorm is adding functionality in their next release for automatic generation. It also supports semi-automatic. When you add "/**&lt;enter&gt;" at the top of a function, it populates a block automatically with all of the information that it can determine. Frequently it leaves out type hinting, though, because... that's a lot to try and figure out.
See example two of file_put_contents() http://php.net/manual/en/function.file-put-contents.php &lt;?php $file = 'people.txt'; // The new person to add to the file $person = "John Smith\n"; // Write the contents to the file, // using the FILE_APPEND flag to append the content to the end of the file // and the LOCK_EX flag to prevent anyone else writing to the file at the same time file_put_contents($file, $person, FILE_APPEND | LOCK_EX); ?&gt; Oh, also if you have a decent host, just log in to your control panel and check the statistics. (Most hosts who use a standard system like cPanel will provide AWStats)
RTFM
The only thing such a tool would be able to do is provide the argument list, something your IDE can already provide. There's not a universal and reliable way to determine the argument *types* or the function's return value, no less actually document the purpose and intent of the method. You'd have to add these manually. In other words, your time would be better spent either doing the documentation yourself, or skipping it... or switching to a different IDE if yours doesn't give you function signature hints.
What if the site is on a shared hosting? How can he make use of the saved logs?
What's the solution?
What's the solution?
I realize your script is written in PHP, but your question really has nothing to do with PHP _at all_ (and thus probably why you aren't getting any replies). You could maybe try and find a video or video conversion subreddit that might be knowledgeable about these things.
Some IDE's also have some decent static analysis; I know that Zend Studio will point out unused vars, assignment-in-condition, differing returns in methods, etc. It won't give you the larger, big-picture stuff but it's a beneficial tool to have while writing code.
no one I've met seems to care one way or the other. What do employers near you ask for? Proof of experience or qualifications?
Why so many question marks? I wanted to get the certification, but from my experience it gives no direct financial or recruitment benefit.
The only benefit I've seen from being a ZCE is that you get special treatment at ZendCon. A PHP certification has absolutely no bearing on my hiring process.
What about the security are you looking to improve?
it definitely better than not having it. Also when you are compared with someone who does not have a ZCE you stand a better chance.
The only thing you gain from having it is the comfort of knowing you gave zend money. I've never encountered an employer who takes it seriously.
I downvoted for the question marks
My current employer required all programmers to become ZCE. Half of them were utterly incompetent before and after certification. Dropped the ZCE requirement, and the programmers. However, most programmers will probably learn some things about PHP you didn't know by doing the study, so it's not entirely useless.
Better chance of what? Recognizing the person doing the comparing is clueless?
My current list is: * Change default file and folder permissions, some of which are 0777. * Improve 'clean' function which is nothing but a mySQL escaper but is used to "sanitize" all incoming data. Anyone running mod_security will catch most other things, but better safe then sorry. * Add index.html files to all directories that don't have an index file. * Add .htaccess options to all directories that shouldn't allow direct access to redirect users out. * Add a form token to all front end submissions. * Return errors on tampered data submissions instead of handling them silently, a good example is on an add to cart button change the product id to some text and submit it. The store will say 'Success: You have added to your shopping cart!' but nothing will actually add to your cart. Though this may be just an AJAX issue with the way it checks what is being returned. That's my current list. But I'm always looking for more.
Expanding on this a little bit, I would take the test more seriously if Zend themselves took it more seriously. It doesn't stay up to date with the iterations of PHP. Worse yet, there's the ZFCE test as well and that covers version 1.5. That's *ancient*, back from when Zend_Form was first introduced.
I disagree: Give me a GitHub (or similar) account and I'll determine who has the better chance. iBuildings is the only PHP company I know of that requires ZCE, but it isn't even necessary for getting hired, you only need it in the first few months of being hired -- I'm fairly certain it has something to do with company marketing, "All of our engineers are ZCE's!"
It's better than nothing, but less than real experience. The Zend benefits &amp; access to other ZCEs is definitely worth something, but it's not going to land you a job on it's own. I had a free voucher to take mine so it was worth it, but I wouldn't have paid much more. And it's more a test of how well you decipher poorly-worded puzzles than anything. I heard 5.3+ has gotten better, but a blank sheet of paper would have been an improvement for the 5.0 exam. 
I think your question mark key is stuck...
same. Questionmarks are no pack animals
I actually do have that, in this case. The project I'm documenting is a library I maintain for a SOAP service, where the majority of the library is autogenerated using the SOAP WSDL.
very true. i'll take your advice into consideration :)
Take the smaller of the two tables and wrap it in a lookup function
The query that you are already running gets you both pieces of information that you say you want... What are you wanting to do with the second DB?
Is tableA and tableB in the same database? If it is, you only need to do one database connection. Your join in the query connects the two tables.
lol, i'm going to borrow that if you don't mind.
tableA and tableB are in separate databases. that's the trouble i'm running into. i can't find any documentation on doing an inner join when you are using two different connection scripts.
sorry my post wasn't clear. tableB on database2 has fields that i want to join with tableA on database1. 
Can't he reference both databases in one query even if his connection string only connects to one of them? I do queries all the time that reference two databases... "Select somefield from sometable where someotherfield in (select someotherfield from anotherdatabase.dbo.someothertable)" I think I've done this with PDO too (although I'm doing it on an MS SQL database)
the only problem is that both tables are pretty huge. 
If both databases are on the same server/cluster and a single username has proper rights to both.
Merge them outside of the [main] foreach() first. Run a foreach on each database, but instead of outputting the data, store it in an array. Do that for both databases that you have one array with both queries' data. Then run a foreach on the cumulative array.
There is no such thing. It cannot be done as a "join", PDO doesn't possess that capability. This is a function of an RDBMS, not a database connection object.
The solution is to simply swap values in the array you have. You loop from 0 to floor(count(array)/2) so you don't swap the middle with itself and swap with the length-1-index. So you swap first and last, second and next to last etc. Some people will loop through it all and end up reversing the array twice thus doing nothing. Some people also will not do the floor which leaves one extra iteration but I don't usually discount for that but its a good indicator if they do.
As stated elsewhere already, you can do this pretty much exactly as your query lays out ... if the databases are on the same server, and you have a single username which grants you access to both tables. Just reference them as &lt;dbname&gt;.&lt;tablename&gt; in the query. If they are on separate machines, or you don't have a username which grants you access to both, you'll need to do this in code by building arrays. If the tables are too large, you'll have to do a lot of queries to retrieve the matching data from each database. (pseudocode) while ($db1_row) { query_db2($db1_row['id']); } So, for each row in the first DB, you'll have to query the second DB using the first row's ID in the WHERE clause.
I'd first ask myself why you're consuming so much memory.
Parsing large HTML files, DOM stuff, nested foreaches. AFAIK that always needs a bit of power.
There are always ways of limiting the amount of memory that will take (for example, parsing only of partial html/xml documents instead of the full tree, etc)... That will likely be easier to fix than scaling out to S3 (with the full client-server architecture it would require)...
Does it grow linearly over time? If so, it sounds like you're not cleaning up after processing each page, or you're trying to save a bunch of history in memory or something. If it's terribly memory inefficient code, going to EC2 just means that you'll spend all that time setting it up, and then eventually hit a memory limit there.
If the databases are on the same server with the username/password having access to both, why can't you do: Select database1.table1.fields, database2.table2.fields from database1 INNER JOIN database2 USING(field_id) WHERE &lt;my conditions&gt;
You could always write a function to get both, then return them as a two-member array. Then if you did `foreach (get_both($db1, $db2, $sql) as $both) {` You could access $both as an array with the two results.
I seriously doubt that you'd need to setup a cloud processing system for parsing webpages. The fact that you're using up 300 meg of memory really makes me think that you've fallen into a common gotcha that PHP usually protects people from. One of the reasons that I love PHP is that it's fantastically easy to use and setup. That's also a drawback, because a lot of people that are able to get into PHP don't really understand all the intricacies of compilers, memory management, or algorithm speed. You've probably got something like this, right? foreach($webpages as $page) { ... do stuff ... } Well, that's actually your first problem. Memory management in PHP... isn't. Most of us never encounter problems with running out of memory in our PHP scripts and webpages because they only run for milliseconds at a time, and then when the script exits all the memory it allocated is freed along with it. Think about that - while scripts are running, no memory is de-allocated. So every time you do this: $page = $webpages[$i]; You're using up *more* memory, never getting rid of the old memory you were using before. That's not too bad when you have 1 or 10 or even 100 elements in your array, but if you've got 1000+ elements, and you're nesting loops, pretty soon you're allocating memory for 1,000,000,000 variables. And that's only with 3 nested loops, you could very well have bigger arrays or more loops. So what's the solution? **Tell php that it doesn't need that memory any more.** foreach($webpages as $page) { ... do stuff ... unset($page); } Every time you finish the loop, the memory you set aside for that $page instance is freed. The second thing you should take a look at is how much work your script is doing. Can you off load the work to some other scripts? Can you separate them so that a given script only processes one item and then dies? You can take advantage of low-level optimizations if your scripts are running for less time. Honestly though, my guess is that you're not really dealing with "big data", so some simple optimizations should make it possible to keep using your own server. I've built systems that run on my laptop that are capable of processing billions arrays in billions of iterations. I've also built long-running daemon scripts that never have a memory problem and that all comes from understanding how php handles memory and optimization.
If you have administrative access to either SQL Server you can link the two together. Open SQL Server Management Studio, navigate to Server Objects-&gt;Linked Servers and [follow the instructions](http://msdn.microsoft.com/en-us/library/ff772782.aspx#SSMSProcedure). From there you can do queries like: SELECT foo, bar FROM localTable L INNER JOIN OPENQUERY(LinkedServerName, "SELECT foo, bar FROM LinkedTable") R ON L.foo = R.foo Do keep in mind the performance isn't going to be that great. 
As someone who processes large documents and rarely uses more than 16mb of ram, I'd start profiling first. 
PHP uses copy on write techniques, so `$page = $webpages[$i]` likely will use the same amount of memory either way. (of course that is a general statement and there are cases it's wrong, but so was yours). And your unset example is just wrong, due to the copy-on write nature of variables. Try it. Benchmark memory usage with and without that line. It'll be exactly the same... And with PHP, memory is often de-allocated. In &lt;=5.2, there is a simple refcount based memory management. 5.3 introduced a full blown garbage collector.
&gt;Try it. Benchmark memory usage with and without that line. It'll be exactly the same... I did, and it wasn't. I came up with this from real world use. Basically, I had a system processing craptons of data, and for some inexplicable reason it always ran out of memory about half way through. I added the unset line at the end of the loop, and it worked perfectly, and I was even able to handle bigger datasets than before. 
Tried using XMLReader instead of DOMDocument?
I just read your solution and I hope that this page isn't used a lot and doesn't have a lot of rows. If your first query has 1000 rows, it's going to be calling the second query 1000 times for every page load. This can very quickly take down a server if there is a lot of data and/or the page is frequently used. There might be a better way to do it using temp tables or depending on your situation, replicating the table from one database to the other.
Did you not mention foreach by reference for some reason? foreach($webpages as &amp;$page){ ... do stuff .... } unset($page); Then it's not a matter of cleaning up, you ~~~don't use any extra memory at any stage~~~ use way more memory. Edit: per comment below
It seems like the issue is the foreach itself, which will require everything to be loaded into $webpages right from the start. The way to solve this is to pull a few pieces of the page out at a time- while($line = getNextLine()). *Yes, I know there is a stream_get_line and a fgets function, but I've found them to be very unreliable.*
Wow, guys please don't regard this as true. As ircmaxell has stated, PHP does have memory management in form of a reference count. The reference count just means how many variables are currently pointing to value in memory. When PHP notices that no more variables are pointing there, it will remove that address from memory for you. To go by example from the above post, when you do this statement: $page = $webpages[$i]; You're actually not really using up any more memory at all. Right now $page and $webpages[$i] point to the exact same place in memory. Why? Because PHP knows that they are equivalent right now so there is no need to copy that variable to another place and then point the new variable to it. The next time you go around the loop and set `$page` to be the next `$webpage[i+1]` it just simply points to the new variable in memory. As ircmaxwell also said, PHP uses copy-on-write techniques, meaning that PHP will not copy the variable (like stated above) unless you do something to it with the variable that it was copied into, because now they are actually different and it matters. Likewise, even if you did copy the variable, and alter it so it used more memory, as soon as you go and assign `$page` in the next loop, the last one will drop its refcount to 0 and it will be removed from memory. 
There was a lightning talk in Budapest about how [they](http://www.slideshare.net/jclouds/big-data-in-real-life-a-study-on-s3-multipart-uploads) do it with Java (if my memory serves), sadly I can't find their slides for that talk, but it's certainly doable.
Using Code Igniter is part of your problem. Never use a large framework when doing Cron Jobs as you need them to be as efficient as humanly possible. I use CI all day and i have to say it has a fairly decent sized footprint in comparison to using raw straightup PHP which is blazingly fast.
You took the words right out of my mouth. doing this is good practice when doing iterations as it is almost equivalent to doing a for loop on the record set. much more efficient use of memory and iterations.
gearman. rackspace cloud.
you mention load work to other scripts.. how is it done correctly? i just do //stuff include("Other.php"); //stuff but thats just for readibility, it doesnt actually improve anything 
Like I explained in my other comment, you need to set the eol-style in svn and if you can enable the hook to check the eol-style is present, this is helpful when people use different platforms.
&gt; Right now $page and $webpages[$i] point to the exact same place in memory. No, they don't. They're not pointers. $page and $webpages[$i] are two entirely separate variables in two entirely separate areas of memory that both happen to share the same type (reference) and the *value of their type* is the same. I don't mean to sound rude, but you really shouldn't give memory advice if you can easily confuse references and pointers. Now, if you do this: for($i =0; $i &lt; $whatever; $i++) { $var = $array[$i] } $var doesn't actually get recreated every single iteration of the loop, simply because php's scoping rules are about as intelligently designed as the duck-billed platypus, which means that you can **and probably do** leak references with loops. Say $array[$i] is some MASSIVE object, you'd expect all references to vanish after the execution of the loop, but they don't and the garbage won't get "collected" because all variables in PHP escape local, lexical scopes. Reference counting, conservative garbage collectors do not work well in a language isn't lexically scoped. This is the largest reason why PHP's memory management is so atrocious.
&gt; Never use a large framework when doing Cron Jobs as you need them to be as efficient as humanly possible. If you needed them to be as efficient as possible, why did you choose PHP?
In a certain-to-be-downvoted piece of advice: when php scripts start to leak outside their memory allocation, CPU usage, whatever, it's time to rewrite them in something else. PHP has never been designed for, nor intended to be used for, long-running computationally expensive tasks. Python or Java would be a much better choice, especially considering the wealth of open source, reliable tools for parsing web pages that exist in both languages.
Since my code does pretty much what you guessed, I tried your unset($page) but this makes almost no difference in terms of execution time or memory consumption. At the most the execution time is 1 sec better (4 sec instead of 5) and memory is always around 170MB.
&gt; PHP's use statement can only alias names of individual namespaces/classes. There is no way to mass-import a namespace: Good, this is terrible practice in every language that supports it and wanting to import an entire namespace is never, ever a good idea. Whether it's "import java.io.\*" or "use std" importing an entire namespace is one of the few things in programming that is absolutely, 100% incorrect to do. The fact that PHP is an interpreted language so namespace resolution has to happen at runtime means that importing an entire namespace is *even worse* of an idea, especially considering that PHP imports compile what they import (unlike, say, java where import is entirely syntactical sugar that gets erased at compile-time)! Nothing says "I don't know what I'm doing" like bitching about not being able to load some unknown, out-of-your-control quantity of classes at runtime! &gt; Because aliases are verbose and sometimes tedious to maintain, Learn to use an IDE that maintains them for you or don't use features that imply an intelligent editor. I'll go ahead and launch Eclipse right now and never fucking worry about use statements. &gt; it would be nice to avoid manually repeating them in every file. Unfortunately scoping of aliases makes it impossible. There is no way to reuse common alias declarations. That's why you don't use them; duh. Aliases should be the CLASS NAME ONLY. When you import class Foo\Bar\Baz as SomethingElseEntirely, you're not only being a moron, you're making sure that whoever has to maintain your code in the future knows you're moron. Just import Foo\Bar\Baz as Baz and leave it at that. Your future self and any other developers will thank you. Just because a feature exists doesn't mean it's a good idea to use it. &gt;As a result, whenever an unqualified name is used in a file, you need to ensure that it is present in the file's list of aliases. Errors caused by a missing alias won't be reported until the code is run. Or maybe if you used an editor smarter than notepad.exe, it would warn you as you're writing the code. Strange, I know, to imagine that programmers created tools to make programmers' lives easier. Stranger even is that people are too daft and/or stubborn to use them. &gt; To use an API that needs to reference a namespace or a class (such as Reflection or assertInstanceOf/expectedException in PHPUnit) you have to use a string containing a fully-qualified name. Such APIs are unable to respect caller's current namespace or aliases. Right, because aliases are local syntax sugar, that's all. When you write this: use Foo\Bar; Bar b = new Bar(); the compiler is going to see (in bytecode, of course): Foo\Bar b = new Foo\Bar(); Using an import alias doesn't rename the class, it makes it easier for you to refer to the class by its name token. Obviously it doesn't do string replacement. If anything, the addition of namespaces should drum up support for having an implicit static object attached to every class, like Java does (e.g. Foo\Bar::class is an instance of class Class that describes class Foo\Bar), so that you don't have to refer to classes as strings. Expecting imports to do string replacement in your source is pretty damn retarded, though. &gt; To use an API that needs to reference a namespace or a class (such as Reflection or assertInstanceOf/expectedException in PHPUnit) you have to use a string containing a fully-qualified name. Such APIs are unable to respect caller's current namespace or aliases. When has it ever been a good idea to name your entities after built in keywords? Jesus. &gt; The code above doesn't work, because PHP treats GUI and GUI\Widgets as two independent namespaces. Sub-namespaces can't simply use classes of their “parent” namespaces. Namespace declarations can't even be nested. That's because they are. Having sub namespaces implicitly import things from their parent namespace breaks defensive coding patterns, encapsulation, security restrictions (if PHP were to ever add a security level for "namespace private") and common sense. Really, has this guy used namespaces before, in any language? &gt; Name lookup is quirky and inconsistent That's why there are use statements. That's why good tools write them for you. About half of this article's points can be effectively boiled down to "I don't know how to use an IDE." &gt; Because of this limitation one can't pick most convenient namespace when defining classes. e.g. one may want to use project's top namespace for all files (for consistent, searchable names in all files) or use most-often used namespace to reduce amount of names that need to be aliased/fully-qualified. "one may want to use project's top namespace for all files (for consistent, searchable names in all files) or use most-often used namespace to reduce amount of names that need to be aliased/fully-qualified." or they can have an understanding of what namespaces are for and use tools to search their code that are more sophisticated than grep. Add another tick to the "learn to use good tools" column! &gt; Unfortunately it has become a convention in PHP to map directory structure directly to namespaces. Sounds like a damn good decision to me. &gt; Sometimes even CamelCasing is replaced with namespaces (e.g. FooController becomes Controller\Foo) Assuming that the Controller\ namespace had more than one controller, this is another damn good decision. Which makes more sense, what the author is advocating for here (\FooController, \BarController) or (\Controller\Foo, \Controller\Bar)? When you're writing code, would you rather (let your editor) write a use statement or write FooController all over the place where Foo could work? &gt; and even exceptions get their own namespace (e.g. Framework\Component\Form\Exception\UnexpectedTypeException). Once again, if there's &gt;1 class in that namespace, a damn good decision. &gt; Namespaced constants and functions are risky, because they will usually work in unit tests (which happen to all classes and that state is not isolated between tests), but may fail in production when only one narrow code path is executed and the relevant file isn't autoloaded in time. Who cares? Namespaces are largely an OOP construct and trying to force procedural constructs into them sounds like a pretty bad idea to me. Even if you do insist on using namespaced functions and constants, this isn't unexpected or even bad behavior. **AUTOLOADING LOADS CLASSES** per its definition! Why would you expect any other behavior? Did you RTFM? &gt; Until such improvements are made, I will avoid use of namespaces in my code and I urge framework and library authors to use short one-level namespaces for their public classes. It's a good thing I don't have to read your code then. I wonder how atrocious it is; your article implies that it's better that I don't have to. --- Look, I'm all for calling PHP out where PHP needs to be called out. Namespaces aren't the best implementation ever (I wouldn't have allowed use-as statements, I'd have used a saner operator, I'd have namespaced the stdlib and had everything in \ raise depracated errors), but this article isn't so much "PHP's namespaces are broken" so much as "I don't understand namespaces and/or know how to use them correctly."
Could you elaborate on "I wouldn't have allowed use statements" ? (By the way, I didn't write this article)
I came in here primarily to bitch about his autoload "problems", but I agree with pretty much everything you said. Autoloading \Foo\CONST may not work, but \Foo\Bar::CONST does because, as you said, autoloading is for *classes*... This is a horrible article.
You get MVC. That is an amazing step up from spaghetti code. Code is then separated into routes and I/O logic, database logic and other heavy lifting, and page templates. It saves you time in the long run. As much as I dislike Zend Framework because I prefer Kohana, I must admit that it is the most popular PHP MVC framework. Second to it would probably be Kohana, CakePHP, CodeIgniter, and Symfony all at probably the same number of users I'd bet.
There *has* recently been discussion on php-internals about allowing autoloading for other constructs (such as functions, constants, etc), but complaining that it doesn't work at the moment is a clear misunderstanding of autoloading.
&gt; No way to avoid repeating aliases Consider that if aliases were carried across files, what would happen if you included a file with an alias of the same name as one in your file? You'd have to start using unique naming (prefixes/suffixes), which is the problem namespaces avoid.
Even if you don't use an IDE (myself, for example), it's really not that hard to remember to declare your classes in a `use` statement. I can't say I've ever forgotten to alias/import a class.
thanks for your response. i guess what i'm asking is that let's say an entire e-commerce website is built on top of the Zend framework. would it be insane to believe that you can just hire an engineer who is proficient in the Zend framework (without knowing any further details about the source code) and be able to just 'get' the code and be able to take control of it i.e continue further development, make improvements, etc?
Thanks for saving me from having to write this comment. It was going to take ages.
Article author here. * By aliases I mean `use \Foo\Bar\Baz`, so that you can refer to just `Baz` later in the code. I don't mean renaming the class to something else entirely and I agree that's crazy – no need to beat strawman here. The core of the problem is you need the `use` statement to use even non-renamed unqualified class name. * There are differing opinions on `import *`. I agree it is risky when you import 3rd party namespace, but OTOH I'd like to have it for my project's own sub-namespaces, which I know and control, and for rapid prototyping (so I don't have to faff with the aliases before I know which classes exactly I'll need). * I don't like the "Java Way" of dealing with verbosity and boilerplate by making smarter code-generating IDEs. I'd rather make language need less repetition. * I know autoload is for classes. Loading of functions and constants is not as convenient and reliable as classes in current state of things (yes, I did RTFM and got Zend certification thankyouverymuch), and it would be nice to have functionality for this, no matter how you call it. My point is that if you do "Hurray! Let's abandon ugly 5.2 ways, and do everything New Way!" there's a gotcha waiting there. * Search in parent namespaces happens in C++ for example. Of all C++ craziness, that one doesn't strike me as anti-common-sense. Child-&gt;Parent access seems reasonable to me, as that's where you'll have base classes and interfaces (within a project). You don't have to use sub-namespace (IMHO you shouldn't) for things that are supposed to be truly separate. * I believe exceptions should be in the same namespace as code that they belong to, but that might be a matter of taste. Same namespace avoids extra `use` statements (which my non-fancy editor does not add). I'm basing this on my experience with converting two projects to PHP namespaces and starting new one from scratch with namespaces. I did RTFM, I've looked how established projects use namespaces, so I think I've got at least basic idea how PHP namespaces work. I'm describing real issues I've ran into. &gt; When has it ever been a good idea to name your entities after built in keywords? I've ran into this with `PHPTAL_Namespace_TAL`/`PHPTAL_Namespace_METAL`/`PHPTAL_Namespace_I18n`, etc. which are quite logical in the code (they process nodes in certain XML *namespaces*). 
Completely global aliases would be pointless indeed. The example code I've given wasn't very good. What I've meant is that it may be helpful to somehow include a common set of aliases you know will work for the current file, rather than aliases carried across all files all the time (in my project I have dozen classes that I know are unique, and I use them often, and I'd like to avoid putting almost same `use` statements in every file) 
That's one of the biggest benefits of using an existing framework. I'm currently stuck with a massive codebase that a PHP guy decided he'd write from scratch (calling it HMVC, but has absolutely no database abstraction whatsoever) so it's literally 20x harder to figure out how and why certain patterns are/were used. When in doubt, use an existing MVC framework. On any Rails application I can generally immediately jump in and start adding features. ESPECIALLY when there are both RSpec and Cucumber tests.
so it's plausible that you can hire an engineer who claims to be "proficient in the Zend framework" and immediately expect him to be able to improve the code, add features, etc without screwing up the system?
Depending on how much of the framework and patterns you use of it. I've seen some HORRIFIC code out there that claims to use framework XYZ but follows none of the patterns and uses none of its library and thus took me way longer. But yes, if you follow the guidelines they should immediately be able to jump in.
Zend Framework, imho, is a component library first. I've been using it since 2006. It's also a very powerful and flexible framework, though. However, the "ZF" (prescribed) way to build an application only really includes the controller and view setup. Front controller with single point of entry, the way the controllers are setup, and how the views are wired into it. From there, things can go off in all kinds of directions, depending on the developers experience. Beginners tend to clutter up the controllers. Or neglect taking advantage of action helpers and view helpers. There's no Zend_Model component. That's by design. A quick way to get something together for database driven apps is to use Zend_Db_Table and extend those classes. A "proper" way is to use an ORM (sometimes). Understanding OOP in the context of PHP5 is important. DI can be very heavy, since there's a tear down for every request. I tend to have a service layer that glues business logic and ACL ontop of the model, and have all that initialized in the bootstrap. Sort of "thin controller, fat model". The view scripts in ZF are written in PHP. That's good and bad. It's fast, but allows you to do things that weren't meant to be done in the view layer. Beginner to intermediate developers that don't fully grasp the architecture tend to do things like break encapsulation, use lots of singletons and pass around objects not intended for that layer (why is the bootstrap configuration all the sudden in the view? heh) So all in all, without any further instructions, what you can only really expect from someone using Zend Framework, I'd say, is that they're using the front controller, have a bootstrap that setups up a few resources, and the business logic is at least in the controllers/action, with the display logic being contained in the view scripts. hopefully they use layouts, too. Everything else should be explicitly mentioned, or you'll want to interview the develop on how they plan on handling DB interactions, whether there will be a separate ORM (external to ZF), service layer, how access control works (hopefully Zend_Auth, and Zend_ACL), and whatever else you may deem important to know. It is possible, after all, to take a top-down procedural PHP spaghetti code script, and shove it into the controllers, and move some display logic into the view script. That said, however, someone claiming to be proficient in ZF will probably not do that. They'll hopefully grasp more than just where to "plug in the code". But ultimately, that's something you may want to be explicit about and just ask. Also, if you're thinking about outsourcing work for offsite development, you'll definitely want to lay out in writing what the business requirements are, including any technical requirements you may have. You may prefer jQuery, and they'll end up using Dojo or whatever. Strong project management skills and at least a high level understanding of the technology and expected architecture of the deliverable can make the difference between a successful offsite project, and a potential disaster. Good luck!
so let's say something is layed out clearly in a functional specifications document and then built on the Zend framework and LAMP stack by the outsourcing firm. can i reasonably expect a PHP developer to be able to take over the system after they've completed development? this is coming from someone who only understands like 60% of what you just said. i appreciate the response though.
Following on from this line of thinking, to correctly understand what MVC is supposed to be, think of the original graphical user interface type of application -- for example a Word Processor desktop application. The Model encapsulates the set of possible document attributes: paragraphs, sentences, pictures, text formats, flow boxes and so forth. The Views are the windows onto those attributes. They have window resizers and scroll bars and zoom levels, and can be set to draft mode, or layout mode or print preview mode. The controller represents the things that can be done to the document -- menu bars selections, format controls, typing, clicking, dialog boxes etc. All three parts of the application have visual representations in the interface, but their responsibilities can be almost completely separated. How does that translate to web applications? Well for one thing not very well. But with some effort you can make it work by analogy: Models are the way that you think about and manipulate your data. Business logic is certainly a Model level concern, as is the database schema, because it represents your model of the world. Views relate to different ways that data can be presented ... so you might have the same information in different parts of a site -- different views, same model. Templating and styling are view level concerns. Controllers represent actions that move you around (navigation) or that change data (post requests). Edit forms involve aspects of all three components -- a way of structuring the data, such as a list of labelled controls (model), a way of presenting the data, typically fields on a page (view) and a tool for changing the data, the ability to manipulate the fields and then commit the results with a submit button, or some other more AJAXy tool (controller). You can think of web applications as a light version of MVC -- they use some variants of the same concepts, but in a sort of boiled down way where a lot of the bulk of especially the controller has been automatically handled by the browser, such that all that's really left is routing and request handling. If you wanted to be strict about it the creation of buttons and navigation items would also be a controller level concern (not view), because those items are not about displaying the model, but about controlling it. However in this watered down version of MVC that people have adopted for web applications, the view layer is often taken to include all HTML rendering, in which case there really isn't anything else left for the controller to do, except routing.
Have you ever tried to use eclipse with PHP? It has never generated more code than what I write.
Nobody ever said they were pointers. But the fact remains that PHP internally uses copy-on-write, so they are "pointing" to the same ZVAL. Check out this post about the internals: [Parameters, Arrays and ZVals](http://devzone.zend.com/node/view/id/1023). PHP does not have lexical scoping, that's correct. But it does use dynamic scoping. There are only two types of scope in PHP, global and function. Global variables are collected when their refcount is reduced to 0 (and you leave a scope to trigger the collector), when you manually unset the variable, or when a few conditions occur. So when you leave a function, PHP knows enough to clean up any variables that were defined with that scope that still have a refcount of 0 (aka, were not returned or accessed by reference). You say memory management is atrocious. Yet I've written some very large, long-running PHP applications and have never had memory issues (and I never took explicit steps as you say are necessary). Have you used modern versions of PHP? The situation you describe is what happened in PHP &lt;= 4.4... Since 5.0, memory has been decently managed. And now that 5.3 has a circular reference GC mechanism, it's actually managed fairly well.
So your entire argument OTOH is that a bloaty editor should make up for the syntactic idiosyncrasies and some conjectures about the authors code quality?
If you try something like this, you are correct that PHP won't free the memory right away: $array = array(); for ($i = 0; $i &lt; 10000; $i++) { $array[] = str_repeat('1', 100); } $start = memory_get_usage(); foreach ($a as $b) {} $end = memory_get_usage(); If you notice, on my system (32 bit compile), the difference is 136 bytes. But if I increase the size of a single value (change the 100 to 200 in the str_repeat), it's still 136 bytes. In fact, for any string value, it's still 136 bytes. So it can't be *copying the data* as you suggest, since otherwise you'd expect the memory difference to be directly proportional to the size of an array element. Now, if we wrap that in a function, the memory overhead drops to 88 bytes. The difference comes if we modify that variable (hence triggering the copy-on-write mechanism): $start = memory_get_usage(); foreach ($array as $a) { $a .= 1; } $end = memory_get_usage(); Now, the overhead jumped to sizeof($a) + 183. So for a 1 byte string, the total overhead is 184 bytes after the loop. For a 1000 byte string, it's 1184, etc. But if we wrap that in a function call $start = memory_get_usage(); test($array); $end = memory_get_usage(); function test($array) { foreach ($array as $a) { $a .= 1; } } All of a sudden, our memory difference is back down to 88 bytes no matter the value size of the array. How is that possible? Well, it's due to the refcount collector running when leaving the function scope, and the fact of copy-on-write. Try it yourself. You are clearly mistaken...
I've tried Eclipse with Java, and I did not like it. It is a fair point that Eclipse may alleviate the problem. However, there's still vim, emacs, TextMate and bunch of other editors with more or less religious following that work well enough with PHP, but don't generate code at the level required by namespaces. 
This is a much less efficient way of doing iteration. That's because of how PHP handles refcounting. If you're taking `$webpages` in as an argument to a function as not being a reference, this loop will actually use more memory because of the reference. That's because PHP can only change the reference flag from 0 to 1 if the refcount is 1. If you pass it in as an argument not by reference, the refcount will be &gt; 1. Therefore, when you loop with the reference, it'll require a full copy of the array to happen prior to the iteration. function test($array) { echo memory_get_usage() . "\n"; foreach ($array as &amp;$a) { $a .= 1; } echo memory_get_usage() . "\n"; } Adding the `&amp;` operator there, literally doubles the peak memory requirements of the program (11351160 bytes before hand, 22376832 bytes after, with a 10,000 element array). Where as if we remove that one character, peak memory usage stays down to 11352216 (1184 bytes overhead for the copied `$a` variable). References have some limited use cases. But **never** use them to try to limit memory usage... It's bad practice, and won't likely work as you intend.
Well yes. PHP namespaces are a hack. They have been when they were introduced despite the [community outcry](http://www.reddit.com/r/programming/comments/8999a/best_april_fools_day_joke_so_far_php_chooses_the/). And two years later they're still as awful (surprise!), only that some of that is starting to show now that [PHP 5.3 installations grow beyond 10%](http://w3techs.com/technologies/details/pl-php/5/all). &gt; You can't import a namespace use FooLibrary\*; // Not in PHP There is a very simple explanation for that. The PHP runtime itself knows very little about namespaces. To the surprise of many, the Zend VM does not internally manage a structure for namespaces (except a cache list iirc). And all "namespaced" identifiers just exist within the global lookup tables. The backslash is just intermixed into identifiers. And because you have no real grouping of identifiers, it's imposible to alias \* multiple classes at once. PHP still doesn't know that some belong together (and it couldn't autoload them even if it knew). They only share a prefix unbeknownst to the core. &gt; Popular PHP projects overuse sub-namespaces Directorytis. And let's be blunt here: why wouldn't they? Grouping framework classes into namespaces univocally to directories is very conventient. For framework authors. That it doesn't necessarily benefit the API or developers isn't of concern to most, nor that it misses the raison d'être of namespaces - to avoid actual identifier conflicts. It's incredibly hard for OOP wankers to understand, but namespaces in PHP are not conceptually related to that. Again, it's not an ZendVM internally supported concept, just syntax. Name conflict avoidance could be achieved otherwise. But for mimicking Java many coders use the new syntax excessively. I'm convinced it's frequently used as [syntax sans purpose](http://en.wikipedia.org/wiki/Cargo_cult_programming).
In that case, I'd take a look at other places that you're using large amounts of data and see if you can optimize any of those. Since I think you mentioned that this uses CodeIgniter, remember that also has it's own memory footprint, and if you could separate the processing script from the framework (unless it *really* needs CI) you might be able to make some improvements. Of course, it's hard to diagnose things like this w/o seeing lots of code. You might also want to ask over on stackoverflow.com.
In a nutshell, I'd say yes, but it's something that cannot be guaranteed. Ideally, yes. If the outsourcing firm does PHP, and generally uses Zend Framework, and their developers are skilled in it and "do it the right way", and whoever takes over the project for maintenance after completion is also proficient with ZF, then it is an absolutely reasonable expectation. I've been involved in projects that used outside resources and it can go either way. However, if you let a third party lowest-bidder sweatshop bang out an app in isolation they may hand you a functional app that *might* be a maintenance nightmare. That all really depends on whoever you're outsourcing this to. It is quite common for a third party to slap something together quickly because they just want it done and get paid. I don't know what your budget allows, but my recommendation is that you should have someone (with project management skills) from your side that is constantly involved. Set up milestones with expected deliverables (weekly, or bi-weekly iterations). Have them use version control (svn, git, whatever). Deliverables should include source code. And if at all possible, have a developer (that you retain or whatever) review each milestone for warning signs. Generally speaking, development of a new app is only a small cost. Maintaining and enhancing it can be the real money sink. So even if it's more cost effective to outsource this thing, you're doing yourself a favor by paying a developer (ideally the one who'll end up maintaining it) 2-3 hours to take a look at what is being put together.
Go with what you're most comfortable with. If you have a framework that you've used in the past that worked well and you like it, go a head. If you're confident with starting from scratch do that. A new project really isn't the best time to start playing around with framework as each is different and each has a learning curve to get use to before you can best implement it
if you don't mind me asking, where are you based? 
Raleigh, NC
i assume you're already employed as a developer? 
&gt; Search in parent namespaces happens in C++ for example. There is one important reason why `import *` doesn't exist and parent namespace searching doesn't exist in PHP -- unlike with C++ and Java, PHP code doesn't know the names of all the classes in the project. It loads them when they're accessed in the code; there isn't a compilation step to bring them all together. Any sort of *search* has hugely negative consequences for performance and would break a lot of existing code. PHP would have to go out an attempt to load every class it is searching for and that isn't cheap. I don't disagree with your points; I'm just not sure it's even possible to implement the things that you want. It's a mistake to assume that if it can be done a pre-compiled language like Java, it can be done in PHP.
An editor that manages import/use statements does not have to be bloaty. Most IDEs aren't. PHP's legacy is idiosyncrasies all the way down, so I really can't imagine how horrible it has to be to write PHP without a smart editor. Hell, just being required to remember the function names and parameter order from stdlib functions would be enough to drive me away from PHP. I really cannot imagine how people do it.
I meant "use-as statements." Thanks for catching that!
Yes, I'm employed. I'm a software engineering manager.
&gt; There are differing opinions on import *. I agree it is risky when you import 3rd party namespace, but OTOH I'd like to have it for my project's own sub-namespaces, which I know and control, and for rapid prototyping (so I don't have to faff with the aliases before I know which classes exactly I'll need). Other than "I don't use an IDE" is there any justification for wildcard imports? I don't think there is. I don't think refusal to use good tools is a good argument for or against any language features. &gt; I don't like the "Java Way" of dealing with verbosity and boilerplate by making smarter code-generating IDEs. I'd rather make language need less repetition. If you wanted to write code in a language that didn't require boilerplate, wasn't verbose and didn't require syntactical repetition, why the *hell* did you choose PHP? &gt; I know autoload is for classes. Loading of functions and constants is not as convenient and reliable as classes in current state of things (yes, I did RTFM and got Zend certification thankyouverymuch), and it would be nice to have functionality for this, no matter how you call it. My point is that if you do "Hurray! Let's abandon ugly 5.2 ways, and do everything New Way!" there's a gotcha waiting there. It probably would be nice to have autoloading for functions and constants. The fact is, it's never existed, might not ever exist and the fact that it doesn't exist is NOT a criticism of PHP's namespaces! Hell, in any project large enough to actually benefit from namespacing (basically anything at all), why are you using functions and constants? Some aversion to writing classes? &gt; I believe exceptions should be in the same namespace as code that they belong to, but that might be a matter of taste. Same namespace avoids extra use statements (which my non-fancy editor does not add). This is entirely a matter of taste and a high-level architectural construct. Like I said, if the \...\Exception\ namespace has several members, it's right to namespace them. And if it's right in one place in the project (say you have a parser that needs 8 exceptions), then it's probably right everywhere in the project for consistency's sake. Hell, just knowing that you probably will need an Exception sub-namespace at some point down the road is probably a good enough reason to do that everywhere. If you want to bitch about PHP idioms, this is a really silly one to choose. &gt; Search in parent namespaces happens in C++ for example. Of all C++ craziness, that one doesn't strike me as anti-common-sense. Child-&gt;Parent access seems reasonable to me, as that's where you'll have base classes and interfaces (within a project). You don't have to use sub-namespace (IMHO you shouldn't) for things that are supposed to be truly separate. This is actually pretty terrible behavior on C++'s part. Allowing child-&gt;parent accesses to namespace-protected members implies that all child-&gt;parent namespaces imply a child-&gt;parent relationship and not simply an organizational relationship (which is to say, barely any at all). Allowing child unmitigated access to its parent namespace's members brings up a lot of questions about sibling namespaces, parents of parents, etc. It's a lot easier and more intuitive to just have every namespace be a namespace! Furthermore, PHP doesn't exactly have lexical scoping rules, even in the parser, so having the ability for "Foo f = new Foo()" to potentially refer to two things that have to be decided at parse-time is outside the realm of what could ever be considered to be idiomatic php. &gt; I'm describing real issues I've ran into. All of your issues are solved simply by learning to use Eclipse, NetBeans, PHPStorm, Komodo, etc. etc. etc. I really do not understand why the PHP community is so anti-IDE (compared to any other language community I've been experience to). Would you expect a surgeon to use a hand-saw instead of a motorized saw when he does an amputation? Would you expect a mechanic to use a hand-jack rather than a power lift? We're in an industry where we largely use our craft to make tools that make people's lives easier, yet people refuse to use tools to make their own lives easier? I don't get it. Hell, it's not even like the learning curve on IDEs is high; you can be just as productive as you are now without an IDE inside an IDE, just by not using any of the features! And, as you learn the features, your productivity goes up. Imagine that! &gt; I've ran into this with PHPTAL_Namespace_TAL/PHPTAL_Namespace_METAL/PHPTAL_Namespace_I18n, etc. which are quite logical in the code (they process nodes in certain XML namespaces). This is still really colossally stupid naming. XML namespaces are usually referred to, for this among other reasons, "xmlns." Just because whoever wrote that code apparently didn't know that does not make that naming scheme representative of any problems with anything. Don't use reserved keywords when you name things. Period. And when you name something PHPTAL\Namespace, you've just named a namespace "Namespace" and that's wrong. Period.
&gt; I've tried Eclipse with Java, and I did not like it. Why? &gt; It is a fair point that Eclipse may alleviate the problem. However, there's still vim, emacs, TextMate and bunch of other editors with more or less religious following that work well enough with PHP, but don't generate code at the level required by namespaces. If emacs and vim don't generate use statements, it's because the php module support for it isn't there yet. Eclipse didn't support it over night, either. And TextMate is a non-intelligent editor. It's not really suitable for serious programming, IMO, unless you really like doing things that the PC is better suited to do.
No, you don't have to stick with a framework. It seems like everyone and their grandma are using and releasing their own framework these days, but frameworks are a tool, and tools have appropriate and inappriopriate applications. Frameworks often give you overhead and complexity you don't need, so there aren't just positives to consider. Go with what works best for you and the project. What you should stick with is the basic ideas implemented in frameworks though, like seperation of code and presentation. If you're new to frameworks, it also makes sense to learn by doing. Look at how frameworks are made and make your own.
I really am not sure why you can't use a framework and OOPHP. Frameworks like Zend are entirely OO.
&gt; ther than "I don't use an IDE" is there any justification for wildcard imports? Dislike of boilerplate. I think not having to use an IDE is an argument good enough, but as you're already IDE user, clearly you won't agree with me. Other than namespaces, I find PHP concise enough and usable with a "not-so-smart" editor. &gt; autoloading for functions and constants […] doesn't exist is NOT a criticism of PHP's namespaces! Strictly speaking it is not, but it is an issue I ran into when I changed "class-namespaced" constants to truly namespaced constants. &gt; Allowing child unmitigated access to its parent namespace's members brings up a lot of questions about sibling namespaces, parents of parents, etc. True, it does. It may be a matter of preference of simplicity (they're separate. period.) or utility (there is an implied relationship you can take advantage of). Since I find PHP's way of separation tedious to manage, I lean towards solutions that lower it. &gt; And, as you learn the features, your productivity goes up. Imagine that! Well indeed. There's bunch of features, shortcuts and tricks I've learned in my current editor and I'm highly productive in it. It's not merely matter of learning the basics of another editor, it's a matter of becoming a power user and adapting your way of working to the IDE, so cost of switching is high. I'm not sure if namespaces are worth switching for. &gt; This is still really colossally stupid naming. XML namespaces are usually referred to, for this among other reasons, "xmlns." XML namespaces are namespaces. See title of http://www.w3.org/TR/xml-names/. `xmlns` is name of namespace-binding attribute. It's closely related, but it's not the same thing. Sure, there are many ways to call namespace-related classes, but I don't agree that calling XML namespace a `namespace` is "colosally stupid". Disallowi
1. create functional wrapper library in language of your choosing (regardless of if language already supports the paradigms implemented _\*cough\* [array_map](http://us.php.net/manual/en/function.array-map.php) \*cough\*_) 2. pick an obtuse global identifier that makes no effort to adequately describe what the library does 2. ????? 3. _PROFIT!!_
Autocomplete of stdlib functions is more popular, as it's much easier to implement: tokenisation + lookup in a fixed list. Creation of use statements requires parsing of entire project and include paths + db of available classes + code generation. (it's clearly possible, but it ups the difficulty significantly, narrowing list of editors that can handle this). 
It sounds like you want to outsource your development, but hope that by requiring the outsourced party to use ZF you can rest easy knowing that they will produce code that will be easy to use and modify. Let me cut to the chase: **just by virtue of requiring ZF you are not going to guarantee any amount of code quality or reuse**. Bad coders can write bad code using any number of frameworks and tools. _Proper_ ZF code will more than likely be easier to maintain/improve, provided that the maintainers _know how to use ZF_.
I use VIM as my primary editor, and i don't see a problem. If you use vim or emacs or TextMate, and complain about that sort of stuff, you are using the wrong tool. Look into PHPStorm or other IDE, that's what they are for.
I agree with your above points but at least this wrapper is implemented with a consistent parameter ordering which is one of my biggest pet peeves when coding in PHP.
Just wanted to add that I'm the creator and I'll be on here for any questions/feedback :)
Certainly slick-looking! I'm a fan of the minimalist approach - looking forward to trying it out someday soon.
You'll need to be more specific. You need to play a video on a webpage? You need to just have a video start up from your computer? Does whoever is watching this video need to be on the webpage you wanted it to play on at 3pm...? If you need the video to just start at 3pm, you're probably looking for an answer in Javascript. If you want the video to only show up at/after 3pm you can check the time with PHP and decide whether or not to display the video to the user. You can also play around with a cron job and php to come up with some sort of solution. Again, I don't know what you're trying to accomplish. 
I tried to install this, but the requirement of the sub-domain is a no go for me. I'm not going to nuke my /var/www/ folder just to try this software out. Either try using the $_SERVER['PHP_SELF'] variable to make this work properly, or make a demo site people can mess with :)
Thanks!
Working on setting up an auto-resetting demo site soon. Been meaning to add instructions for DotCloud as well, which would let you install a free test site to try it out. In the meantime, there are some screenshots here: https://github.com/jbroadway/elefant/wiki/Screenshots I use virtual hosts for everything incl. on my workstation so it's easy to try new things and have multiple projects on the go.
"Elefant re-imagines the way MVC should be done in PHP" Apparently by not implementing it. Nor any other recognizable form of object oriented design. Never mind any basic best practices. Code like this makes me cry. I'm all for people writing their own framework as a learning experience, but completely ignoring a few decades of programming is a bit much. There's nothing redeeming about this code. It's crap. If this were a private hobby project I would be milder, but you are actively encouraging people to use this stuff and making claims that are patently false. Shit like this is what gives PHP a bad name.
Thank you. I could never muster the patience to write such a clear and detailed response.
&gt; XML namespaces are namespaces. See title of http://www.w3.org/TR/xml-names/. xmlns is name of namespace-binding attribute. It's closely related, but it's not the same thing. Which is why I said "usually referred to" not "is." &gt; Sure, there are many ways to call namespace-related classes, but I don't agree that calling XML namespace a namespace is "colosally stupid". When there's a convention in place already ("xmlns"), a commonly used abbreviation ("ns"), commonly used schemes that don't need any explicit name ("PHPTAL:il8n") and a thousand other less common options, choosing to use a language keyword to name something is definitely not a good decision.
Exactly how? Yes I avoid certain conventions like wrapping everything in classes and extending a core Controller class, but this is on purpose, and does not make my code crap. The rationale is to make implementing controllers more PHP-like and to eliminate boilerplate. That doesn't mean I'm using no "recognizable form of object oriented design" which is simply untrue. My framework plays on PHP's strengths as a simple language, and avoids adding tons of extra layers on top of solving what is actually a very simple problem. Adding all that boilerplate doesn't hurt quite as much in other languages like Ruby, but in PHP and especially in frameworks like Symfony and Zend, it ends up being incredibly verbose. Elefant allows for very concise programming in a natural PHP style, keeps apps well-organized, and loses nothing for it. Elefant still supports XSS and SQL injection prevention and other security measures, and all the conventions of MVC just in a different way than you're used to seeing them.
For fucks sake, can we *please* stop crying about parameter ordering already? We got it, the ordering isn't consistent, get over it.
&gt;but don't generate code at the level required by namespaces. There's your problem right there. You're just allergic to typing. Namespaces don't require code generation. Period. You just want shortcuts.
First issue I have Installation points to the http root directory - so links to 'Next' point to /localhost/install/ - results in 404 as I have the files in /localhost/elephant/ 
I'm afraid you have to install it to a site root. Just a design choice I made to keep relative path resolving out of the core.
&gt;This is entirely a matter of taste and a high-level architectural construct. Like I said, if the ...\Exception\ namespace has several members, it's right to namespace them. And if it's right in one place in the project (say you have a parser that needs 8 exceptions), then it's probably right everywhere in the project for consistency's sake. Hell, just knowing that you probably will need an Exception sub-namespace at some point down the road is probably a good enough reason to do that everywhere. If you want to bitch about PHP idioms, this is a really silly one to choose. Exceptions are intrinsically linked to the code that generates them. I honestly can find no argument for breaking them out into a separate namespace, with the only exception of them being shared between several namespaces.
That makes it a non-starter for me - I've got too much running on my WAMP setup to dedicate the root to your software. I suspect I'm not the only one that's going to be in this position. How would someone go about running multiple instances?
Most frameworks are OO i know that. What i meant with question was should i write my own classes,methods etx. or use a framework.
I use virtualhosts for everything myself. I just setup separate aliases in /etc/hosts like this: 127.0.0.1 www.testsite.lo Then I use this in Apache: NameVirtualHost www.testsite.lo &lt;VirtualHost www.testsite.lo&gt; DocumentRoot /Users/me/Sites/testsite ServerName www.testsite.lo &lt;/VirtualHost&gt; I use .lo to represent local sites :)
Sadly, I agree 100%. Global variables, bad naming conventions, tons of functions (especially for things that I might want to override), little or no error checking (notices up the wazoo), odd logic, etc. There's even `eval` in there (wrapped by writing a cache file with the code, and then `require`ing it)... There doesn't really doesn't appear to be any OOP code here that I can see. Mostly just procedural code wrapped in functions and classes...
&gt; this is on purpose, and does not make my code crap this is because you are thinking that you are smarter than others. and it makes your code crap. &gt; a natural PHP style because of noobs like you, PHP has bad reputation. Read books and follow good practices.
Uses GLOBALS? Burn it!
And no autoloader.
Thanks for the specifics. I made each of those choices deliberately, but perhaps they merit some explanation. &gt; Global variables, bad naming conventions Everything uses global variables, and I'm particularly terse with my naming. A global $db for a PDO object is just fine by me. Use a namespace and there's no harm done. I define exactly 8 global variables, 7 of which are objects (mostly singletons) and one is the parsed data structure from my INI config file. &gt; Tons of functions Not really, but I actually define a handful of functions because they're so much nicer to type than first importing a global singleton into the current namespace before using it, or working with a PDO object. It saves me so much typing and the code is even cleaner than the OOP equivalent. Contrary to what OOP proponents say, there's nothing wrong with functions. PHP is a collection of thousands of functions, and aside from certain inconsistencies in parameter ordering, that's not a bad thing. It's also not a bad thing here either. And why define more classes than I need? I already have a Controller, Model, Template, Form, Cache, Page, and I18n. That's more than enough for MVC. &gt; Notices up the wazoo There are no warnings and only one notice (although it occurs a few times), which is for unquoted associative array references in compiled templates. Hardly a critical issue for a beta. &gt; Odd logic Certainly. I've programmed in PHP for 12 years now, and in many other languages over that time too. I've seen the evolution of the language, and I've cherry-picked what I feel are the best elements here that play on its strengths. I'm one of the ones who feels PHP shouldn't strive to become the next Java. I like brevity. I think CoffeeScript's "-&gt;" is a win over "function" for defining functions, and "public function" is a net loss. So are unnecessary classes for the sake of being OOP. Which is better to me, "global $db; $db-&gt;execute()" or "db_execute()"? The shorter one :) &gt; Eval I compile my templates to PHP. So do many template engines. Should I implement a full-blown interpreter in PHP space instead? There's no harm in rendering a template to PHP and then requiring it, and there are huge benefits in speed. So yes, some if this is definitely unconventional, but it's not crap.
Um, yes there is: https://github.com/jbroadway/elefant/blob/master/lib/Functions.php And it works just fine with namespaces and other libraries: https://github.com/jbroadway/elefant/wiki/Autoloading-and-namespaces https://github.com/jbroadway/elefant/wiki/Elefant-with-other-frameworks 
No it doesn't use $GLOBALS if that's what you mean. It uses global variables to instantiate a handful of objects.
Doesn't matter. It's crap.
Oh, I see it now. As an autoloader is not something the developer would ever be calling, I didn't expect it to be included in a function collection.
Oh OK I gotcha. I guess it all depends on much time you have or at least how much you are willing to devote to the project. The nice thing about frameworks is that they take care of a lot of the small time consuming code writing. The learning curve of a framework would most likely be negligible in terms of time savings and code reuse. Most of the main stream frameworks have great documentation and you can get started relatively quickly. Since this is a larger scale project and most likely has some kind of deadline, I would say go with a framework, even though you might not be deeply familiar with it. Doing so will save you some trouble down the road in terms of security and code maintenance. Three good ones to at least look at are CodeIgniter Kohana and Zend. 
Can take a look at [phunk](https://github.com/nick-jones/phunk)
Added a page to the wiki to help with this: https://github.com/jbroadway/elefant/wiki/Setting-up-a-Virtualhost-for-your-site Will add Linux instructions later...
Well, I'm making a music video, for that I need 14 iPads playing a movie I created in After Effects. The only problem is that they need to be in perfect sync for it to work. As I can't find any app for that, I was thinking about creating a website with 14 pages with HTML5 video's that can start playing at a certain time so they would be in perfect sync.
&gt; mostly singletons If you can't see the flaw right here, perhaps you should stop and go read some books on proper design and writing maintainable code (I'd recommend Code Complete 2 to start with). &gt; A global $db for a PDO object is just fine by me. Again, just because you think it's fine doesn't make it good. Remember, we are not discussing a one-off application here, but a full blown framework that others may use. It makes sense to squabble about things like this, since they will impact real users. &gt; Contrary to what OOP proponents say, there's nothing wrong with functions. I agree with you, there's nothing wrong with functions. For some things (mostly utilities). But anything that does any significant amount of work is better off as a class. As an object, it can be polymorphic, which creates easier to maintain code and allows for greater flexibility. But as functions, you're kind of stuck. &gt; There are no warnings and only one notice There are more than 1 of either. Just browsing the code I can see that. You may not have hit them in your sample code, which is ok. But if you're not hitting them in your unit tests, that's not a very good sign... &gt; Certainly. I wasn't referring to that. I was referring to [this](https://github.com/jbroadway/elefant/blob/master/lib/Template.php#L209) (magic strings, no comments, random function calls). It was not obvious what it was doing without looking at it for more than a second, and that qualifies as odd logic to me. &gt; I think CoffeeScript's "-&gt;" is a win over "function" for defining functions, and "public function" is a net loss. I'd argue with you 100% there. Typing is the fastest thing that I do when I program. Why would I want to try to make that faster? I think before I type. That's the slowest part of what I do. So I'd much rather see clean, easy to understand logic than to make something easier to type... &gt; There's no harm in rendering a template to PHP and then requiring it No harm you say? There is a **major** security impact there. It can be done right, but it is not trivial, and I would highly suggest not trying unless you absolutely need to. There are better solutions out there than compiling down to PHP and caching the template. If you want to compile, leave all user input out of it, and just do a static transformation. But the way you're doing it is actually half parsing and half filling. Not maintainable, and not secure. 
Btw, I added a virtualhost setup page to the wiki just now: https://github.com/jbroadway/elefant/wiki/Setting-up-a-Virtualhost-for-your-site Linux setup is similar (just diff paths). Hope that helps!
Please don't take this the wrong way, you've clearly put in a lot of work on this and I don't want to dissuade you, but I'm finding the "minimalist" label a little hard to chew. It feels like there's a lot of cruft here. I do like that your controllers are just included files instead of objects. That's the pattern I follow in my own framework, and I agree with what you said elsewhere in the thread about it being more in tune with PHP's strengths. PHP was built to be a hypertext pre-processor; pages are always going to be singular actions fired linearly, it feels silly to shoehorn that into an object. However, there's still a few other forced conventions in here that you may want to consider re-evaulating: - I would suggest leaving the instantiation of I18n, Page and Template objects up to the developer. They may not want to use these, which makes their loading unnecessary. - I'm confused, is an "app" just anything under the first directory level? So `domain/appname`? Is every subdirectory standalone with no shared resources? Do people really build sites like this? - Globals are, in general, a bad idea. Typically if you're accessing a value as a global, you're probably doing something wrong. - The database connection should only be opened if and when the database needs to be polled, and that may not be necessary on every page. I don't even automatically load my Database class; if I need it, the autoloader will fetch it. - Consider moving your autoloader into its own class. [Example.](https://github.com/ChiperSoft/phPit/blob/overhaul/objects/Autoloader.php) - Why do `/css`, `/layouts`, and `/install` require full read/write/execute permissions for their entire contents? What are you doing in those folders? - Your Template class... confuses me. You've built some kind of hybrid between native PHP rendered page content, and parsed templating content ala Smarty. It's kinda scary, to be honest. Either go full PHP, or go full parsed, don't try to mishmash both. I am a little surprised so many commenters in here are finding the concept of virtualhosts so foreign. Every site I work on has its own vhost.
&gt; Mostly singletons One single database object is not bad design. Nor is one template renderer that I know I'll be using for my layouts, or one front controller. And naming them $db, $controller, and $tpl is a choice I made. But it doesn't lead to unmaintainable code to have a global object and reference it as needed. &gt; As an object, it can be polymorphic, which creates easier to maintain code and allows for greater flexibility. But as functions, you're kind of stuck. If you want OOP access to the database, there's a Model class you can extend. These are utility functions for direct SQL access. Both have their places, but for the times when I need to make direct SQL queries, I'd rather a small set of utility functions than accessing PDO directly. &gt; (magic strings, no comments, random function calls) Granted, more commenting could be used there, but documentation is coming along quickly and there is documentation on how template strings work already here: https://github.com/jbroadway/elefant/wiki/Templates &gt; Typing is the fastest thing that I do when I program. Sure, but my wrists are the first thing that'll wear out. Brevity == longevity for me. &gt; Notice a problem there? I do... That's not user input. That's a reference to the variable name found in the template itself. If {{name}} is in the template, then $val will contain the string "$data-&gt;name" not the value of $data-&gt;name. I'm not filling it with anything that's not in the template to begin with. The method that initializes the template parsing (parse_template()) doesn't even get passed the $data that's passed to render(), so it's not possible for it to be filling any values. There's no security problem there.
This is what JOIN statements were made for. Is there a particular reason why you can't write a JOIN statement?
Thanks for the comments. Truth is, this started as a web framework (as opposed to a general-purpose one :), and ended up becoming a full CMS. So some things like i18n were added for the CMS. It seemed that every time I started with a framework I needed most of a CMS anyway, so I built the core apps on it for that, while trying to keep it general enough for custom apps that they can still do things their own way. &gt; I'm confused, is an "app" just anything under the first directory level? So domain/appname? Is every subdirectory standalone with no shared resources? Do people really build sites like this? No, every subdir of apps is a separate app within a single installation :) &gt; The database connection should only be opened if and when the database needs to be polled, and that may not be necessary on every page. I don't even automatically load my Database class; if I need it, the autoloader will fetch it. This was a trade-off of it becoming a full CMS... &gt; Consider moving your autoloader into its own class. Example. I may move it to a lib/Loader.php, probably wouldn't hurt. It's only a single function, so I figured no harm. &gt; Why do /css, /layouts, and /install require full read/write/execute permissions for their entire contents? What are you doing in those folders? The CMS has a Designer app for editing CSS and layouts, and a Files app for the /files folder. /install can be erased after installation, or it writes an install/installed file to note it being run already. I could have offered more fine-grained permission setting, but it was easier to tell people to run one line instead of a handful of them. I know designers who are quite afraid of the CLI... ;) &gt; Your Template class... confuses me. You've built some kind of hybrid between native PHP rendered page content, and parsed templating content ala Smarty. It's kinda scary, to be honest. Either go full PHP, or go full parsed, don't try to mishmash both. It parses to PHP and runs that. It just checks the file's mtime to re-compile automatically, but it's compiling 100% to PHP. I do intend to clean up and standardize how it parses the contents of {{var}} tags though.
&gt;this is because you are thinking that you are smarter than others. I... &gt;because of noobs like you -.-
Meant to ask, you mentioned a framework of your own that uses the same pattern for controllers. I wouldn't mind taking a look :)
Look into [FFMPEG](http://www.ffmpeg.org/). You can post process the video file on the server side after you get it from Youtube.
https://github.com/ChiperSoft/phPit/ The master branch is version 1. I'm in the process of changing large portions of the framework to fit with better practices, and to make it more friendly for a minimalist release that has a much smaller footprint. All those changes are in the "overhaul" branch which will be version 2.
Cool, will check it out. Thanks!
hmm, yea i didn't think about doing that. i'll poke around with it :)
I don't agree that this is the best solution to your problem, but in my experience, always go for your own idea, it'll work out best. I'd start by reading up on cron. It will allow you to execute scripts at a certain time: http://www.unixgeeks.org/security/newbie/unix/cron-1.html
If you haven't created at least a mid-sized project without a framework, I recommend that you embark on this project writing everything from the ground up. In my experience, I had tried to jump into projects with frameworks as such as CodeIgniter but felt lost and unsure of how things would look once the application began to grow. This led to most of my time being spent thinking "Oh what if I try this with my controllers or what if I do that with my models" instead of actually programming the application. MVC is a great pattern but unless you know how you want to proceed with it and how to use your framework, you'll find that it will be teeth and nails trying to get your projects on their legs. You have to write crappy good in order to get better, its inevitable. The situation you're currently in is very similar to what I was in a few months ago. I was given an internship project, a very large project, but they had low expectations. They wanted me to build the project from scratch, reinventing the wheel (a combination of wanting me to learn and my supervisor was a bit of a old fashion PHP programmer). A month or two went by, I had a code-base but always felt unhappy with what I had written and would resort to extensive re-writes. What happened over the course of about five months and several major re-writes, I had developed my own framework and own libraries, primitive they were, but something is better than nothing. It came apparent that my programming had naturally fallen into a MVC type architecture, probably because I had worked with MVC frameworks before, but it wasn't until I started from scratch did I truly start to get what was going on. There is nothing wrong with using frameworks, but if you have the time and resources I highly recommend writing some, if not all of the code-base yourself (glue.php is a good midpoint). If you have the time and resources, go into student mode. Download your favorite framework, navigation to the entry point (usually index.php) and start tracing its execution. Whenever the script creates a class or calls a function, tab out and find its declaration and understanding what is going on. After you've gained a great understanding of how a framework works you should start to grasp the big picture, specifically how you can apply the framework to meet your project needs. After that, start coding! Write some smaller iterations of your project, your project involves users and posts how about writing a simple blog. After you've rolled out the blog, think how could you improve it? How can I move code and create libraries do that my controllers aren't so cluttered? Through all this advice, the only way you'll get the project going is if you start coding. Like I said before, you're going to write crappy code before you know how to write good code. Don't take too much time thinking of how you can change A into B etc, you'll learn much better from actually trying instead. &gt; Should controllers extend a 'main' controller? * if so, what should this 'main' controller do? Does it have its own model? * Check out HMVC http://en.wikipedia.org/wiki/Presentation-abstraction-control, at the top of the tree you have the bear essentials for page function and as you move further down each task becomes more specific. For example, you could have your base controller &lt;- public/private controller &lt;- page controller resulting in a hierarchy for authentication purposes. Models usually represent a table or a tightly coupled group of tables. For example, you could have a User model which worries about the user and user_group table. &gt; What do I do with my classes? I want to use my PDO wrapper in this project, and it's not really a 'model'. Try creating a database class which provides the basic interface with the database and has methods like connect(), query(), and disconnect(). For now, you should hand write most of your queries but you could create a base model class that provides a simple CRUD interface with the database class. Your controllers can be responsible for loading classes, usually your application will need a database class so have the base controller create a new Database object for use in the rest of controllers. In MVC classes can thought of as Helpers, Libraries, Extensions, etc, they there to provide core functionality. Models, Views, and Controllers are responsible for handling user input (clicking links), fetching data (using models), and feeding the data to the appropriate view(html). Hope this helps you out some!
Wow. Is it just me, or is the way that works out totally counter-intuitive? Cheers for the excellent description.
I'm guessing you complain about how blocks are defined in python as well. There are a lot of things wrong with php, but the inconsistent parameter ordering is *really* low on the list compared to other issues.
&gt;Ultra-fast compiled templates The moment it mentioned this, I knew it wasn't something I'd use. When are people going to get it through their heads that inventing meta-languages for templating is just pissing in to the wind? * It does not make it easier for designers to do anything * It does not make it easier for the developer to do anything * It forces you to have to learn new constructs needlessly increasing the learning curve for no good reason. * PHP is already capable of templating without you reinventing the wheel. * You wind up increasing processing time for views for no good reason. To be clear here. Template renderers aren't bad, but inventing a new template language just to try to be cool is.
&gt; inventing a new template language just to try to be cool is. Granted "ultra-fast" is a bit of hyperbole (but read any framework page and there's enough of that to make your stomach turn). However, I made a new {{var}} -&gt; PHP compiler for several reasons, none of which include being cool. I hate making parsers, to be honest. However, after evaluating the other template languages I felt that they were lacking a few things I wanted. Specifically: * PHP as a template language is too verbose. I want to type less. * {% endforeach %} is too verbose. Let me type {% end %}. They both basically render down to "}" anyway. * I want to dynamically include handlers from apps in my framework like this: {! app/handler?param=value !} * I want to mark text as translatable like this: {"some text"} Other template engines didn't satisfy the above, so I made Yet Another Template Engine. Designers in Elefant have all of 5 tags they need to know anyway and it's all just HTML from there. I wanted something that as a developer I'd be happy using, since we use them way more than designers do.
Also a fan of the minimalist way, and agree that brevity is a great thing. I also love that you've put a lot of emphasis on performance, and I might even try and get you some Nginx benchmarks (as I use it for development and production). Looking forward to trying it out. *Edit: It IS very speedy indeed :D*
Functions.php nothing more to say.
Look through all the popular frameworks. If you find one that you are comfortable with, then use it to develop the site. If you dove into it and find that the learning curve is too steep, you can always revert back to standard oo development. When I was looking for a framework, I found a few that were too bland for my tastes and a few that required a steep learning curve or forced too much convention. Finally settled on one that fits me perfect. 
Wow, this actually helps A LOT. Believe it or not I've been stuck in an inferiority complex rut for quite a while. This has helped me move beyond it. I would upvote this to the sky if I had the power to. You not only answered all my questions but inspired me to finish many of my projects this evening. Thank you.
OK. Have you tried using [VLC](http://www.videolan.org/vlc/) for what it is basically named for? haha. If you can connect all of the iPads to the same network and connect them to the stream that VLC is outputting, they will all receive the signal in real time and thus play in sync. 
Just as an update: Your comments here actually sparked an internal meeting we had. We have made some plans to further improve our documentation. So far, we actually get a lot of comments telling us our documentation is a great selling feature! But of course, it all depends on who you ask and is also relative to what you're used to from other software. There's also room for improvement. We plan to separate our documentation as follows: 1) Merchant guides (basic instructions, using the admin, etc.) 2) Developer guides (a lot of what you see already in the docs. Walk through's, code examples, etc.) 3) Reference (API, classes, etc.) &lt;-- I think this might be what you're after mostly. 4) FAQ / Knowledge Base (for short questions that don't fit elsewhere) This should effectively cover our bases, and organize things better. Right now, the first 3 are all mixed together in a big index (and the 3rd is lacking), which can confuse non-technical merchants, and dilute things for developer's. And of course, if you need very specific answers, our Forums or a Support Ticket is the way to go. You can only cover so much in docs. Cheers
For the people reading: don't downvote him for explaining himself even if you think he may be wrong. Everyone has their point of view and it should be our job to be critical, but not to the point where we don't consider what he's saying. For jbroadway: * php short tags or ASP tags are respectively PHP_INI_ALL and PHP_INI_PERDIR settable, and easy to enable via .htaccess globally within the context of the application, making them available even in situations where they are off by default. * I understand wanting to use a form of alternate block syntax, but removing the relationship between the opening statement (foreach) and the closing statement (endforeach) neuters half of its usefulness which is clear readability and an easy to understand pairing. * helper functions or methods are a better approach than custom parsers and are not appreciably more complex. They are also immediately recognizable constructs to experienced php programmers as well as being fairly easy to learn for designers. * Gettext exists for translatable text fragments using the [_()](http://php.net/_) function which is not significantly more verbose. PHP satisfies all your requirements without breaking a sweat. I won't get in to object composition and the design of the project itself as other people here are already covering that. I realize these may seem like fairly harsh criticisms on my part, and the part of others, but I feel that being straight up with you is the best way to try to help you.
Awesome! Let me know how it goes. Been meaning to get more nginx info up myself as well :)
Go easy on the guy. Just because he isn't seeing this the same way other people do does not instantly make him stupid, or a "noob". He's handling the critical comments here quite well. Even though I don't agree with the approach he took in his project, his willingness to discuss it without being outright dismissive goes a long way. If you want to start making superiority statements I'm sure there are other people here who could not only go toe to toe with you, but make you look like the noob.
Maybe this bit o' knowledge would help only on future projects, but... You can `extend` the PDO class if you want to. Edit: same with Mysqli and Mysqli_STMT classes. But, extending Mysqli_Result fails miserably.
"I've tried using frameworks and failed because I dislike how they work." When I read this statement my first thought is that you did not take the time to learn the frameworks. If I am wrong, which frameworks and what were their shortcomings? I have experience with Symfony (1.4 and 2) and CodeIgniter and have loved my experience with both.
Why is the implementation of `map` required when `array_map` already exists? (would be a great thing to rename in a future version of PHP mind you)
Why do you say "*should* you"? Every case is different, and any random framework is not a "must have". That's not how the market of frameworks works. Do you feel you're not accomplishing anything at the moment, or are stuck somewhere in your own code? Perhaps you don't need a framework if the solution is just a simple cleanup of your own code or an extra function or class. Also, there are several posts on r/reddit comparing frameworks. Just search for those to get some ideas.
Iggyhopper, you can just look at his code to see that he is noob. And he don't want to follow good practices just because he thinks that these practices aren't good enough for his project. Or you want to say that his code are beautiful?
Try, lol. &gt; He's handling the critical comments here quite well. How? Well? "Yes, I use global variables but it is not bad I think" - and it is well? LOL
Minimalist and Elephant - doesn't looks like synonyms :) And Elefant instead of Elephant looks like idea of Symfony instead of Symphony :)
because PHP is plenty efficient. Also it's more about the user being efficient with their time constraints and the language which they are using. But if you are going to build a cronjob, use as less resources as possible which means to the bones with php.
&gt; That's the pattern I follow in my own framework It's not a pattern, it's dirty way to violate OOP principles.
LOL, you found each other. https://github.com/ChiperSoft/phPit/blob/master/controllers/admin.php - code logic with HTML code, what can be more noobish?
&gt; One single database object is not bad design. It is bad design. Read this guide: http://misko.hevery.com/code-reviewers-guide/ This book will help you to understand, where is your mistakes: http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098
There isn't really a point. You mostly just sit around parroting other people. It's likely you don't even understand your own arguments. Every single one of your comments disparages him but doesn't do anything to help him. This is the sort of thing you see from people attempting to brown nose their way up in a community - but it's backfiring.
Sucks that your hard work is being torn apart so mercilessly but there is some genuine good advice being thrown around too. &gt; One single database object is not bad design. It is, I promise you. What happens when some application reaches the point where it needs to connect to two different database servers? The whole design will need rethinking. More than one database server is not an uncommon need.
I gave him links to good book and to good blog of professional programmer. And he doesn't asks if his code good or not, he don't want to adopt any criticism.
Linking a book and a blog doesn't mean you have any idea about what you personally are talking about. I haven't seen anything here to showcase your "expertise" on any of the subjects being discussed.
I have, don't worry. I'm not a kid already to spend my time to show you "that I'm cool really" :) My links to good book are much more useful for him, than your comments.
Both the admin and the login controllers are there to serve as placeholders so that developers can see how the User object is worked with, and is able to log in to the site before they have a full page structure created. Dividing these two controllers into separate files is unnecessary, they are just going to be replaced anyway. The index controller illustrates how View and Controller separation is handled in the framework. That said, there is a very clear separation point in both files where business logic ends and presentation code begins. It is the mixing if the two that is to be frowned upon.
So I assume you have not started this project yet considering you aren't specifying your frameworks etc, not many people with that skill set would be interested unless there is something show already.
It just illustrates level of your code, nothing more. Also, if would you know what does mean "code reuse" and "polymorphism", you will create normal objects for controllers. And guys, 5.2 version of PHP isn't more supported, use 5.3 and namespaces. Namespaces is great thing, especially in autoloading. Read this: http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1
Hey I've been playing with some Nginx benchmarks on a default install (performance seems to be comparable to yours if not slightly faster by a second or two) but I'm having trouble interpreting what setup you're benching against on your current Performance page and would like to be calling the same URL. ie. "The test calls the default `admin/page` handler on a default installation using SQLite as the database", is this just referring to the home page URL after Elefant has been set up (as the command-line would suggest)? or perhaps /admin? Cheers.
Let me fix that for you, in case people actually take you seriously (for some reason): Global variables, when used improperly, can be bad. There are benefits to globals, and there are ways to work around the testing problem with them. If you have a legitimate use for them, use them. I suppose you wouldn't agree with me there though, would you.
I had the misfortune of reading all your posts in this thread. Please for the love of FSM, go back to playing Counterstrike or whatever it is you kids do now. You are not adding anything of value.
Try? There's not much point in trying, you've already decided that no matter what your opinion is correct. It's like arguing with someone who has their fingers in their ears. I **am** curious to know if you're aware of any of the benefits of global variables and/or singletons. I'm curious mostly because I haven't seen many blogs or books recently who do a good job providing a pro/con breakdown of the approaches, and from what I can see that's the only place you get your information...other people.
Submission title? 
Named and built for! Sure it's a stable enough standalone video player, but oh boy, once you start messing with the network side of it, you open a HUGE can of whoopass! I think the OP was meaning 14 seperate vids, synced. This is surprisingly easy in VLC.
Global variables is evil, don't use them. About singletons: http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/ I'm always ready to get new knowledges and my opinion isn't always correct, but this cases is just... passed level :)
Unlike some of the more informed posters in this thread I'm no guru, but I've installed, evaluated and used a good number of the PHP/MySQL CMSs and frameworks out there and yours is the only one that requires me to set up virtual hosts and mess with my httpd configuration. As far as I can make out this is a 'design choice' for your convenience which is fine until it becomes an inconvenience for your users. Alarm bells are ringing for me - if there's a hurdle to even getting it up and running for evaluation purposes, what other hurdles exist that I'm too stupid to figure out? I'm going to have to assume lots.
I am reminded of a saying: you can't teach people who don't want to learn... Sorry for sounding so rough, but the entire library is full of either bad practices or anti-patterns (and yes, singletons have absolutely no use except for lazyness. They introduce tight coupling and limit future flexibility). I think writing your own framework is a very import step, as it gives you insight into proper design and other issues you will face in the future... but that doesn't mean you should tout it to be a great work. Revisit it in a few years and hopefully you will see at least some of your mistakes... Oh and on the documentation bit, comments are not documentation, and documentation are not comments. Documentation should show how to use code, where comments should show why code was implemented the way it was (they should not describe how, the code itself does that)...
This is damn good advice, and a great link. Fuck knows why it was at -1 when I saw it.
CI has one DB object if I'm not mistaken but you can still connect to multiple DBs? Could be out of my depth here ...
People implementing their own frameworks when there are many out there that will do the job better makes me a sad panda. Other than for a learning exercise I really don't see the point. This reminds me of attempting to improve PHP performance by deleting comments and avoiding foreach loops. People implementing frameworks with global variables, mixed HTML and PHP and reinventing controllers as bloody great big files that mirror the kind of crap you get from wonderful projects like osCommerce serve only to harm others views of PHP programmers. Please at least read though the source code of a few other MVC frameworks and get some idea of what the MVC pattern is before attempting a framework.
Wow, just woke up and found the # of comments had doubled! Give me a little time to digest them all folks :) I really do appreciate honest feedback, and will read through everything here. We may not agree 100% in the end, and I know I chose certain trade-offs in terms of classic design vs practice in order to make my controllers work a certain way, but I'll evaluate everything here openly and honestly as fast as I can. Cheers :)
It was just a quick benchmark of requests to / on a default OS X Apache/PHP setup (MacBook Pro from 2010 I believe...), although the default template has changed a bit since then too.
First, thanks for the rational perspective on here :) Regarding templates vs PHP, it comes down to personal preference. Since the templates compile to PHP anyway, there's no real speed difference, and you can use PHP in them if you prefer (maybe I should state that somewhere...). The only limitation is that by default I filter template variables with htmlspecialchars() so a shorter wrapper function around that would probably be desired.
Nope, each call to the `DB()` function will generate a brand new instance. [See the source code](https://bitbucket.org/ellislab/codeigniter-reactor/src/521076012037/system/database/DB.php#cl-25)...
Pretty easy with CI: $DB1 = $this-&gt;load-&gt;database('group_one', TRUE); $DB2 = $this-&gt;load-&gt;database('group_two', TRUE); 
It wasn't clear if one was allowed to use a temp variable that isn't an array. Here is my solution but it seems kinda bulky/ugly. I don't know if this can be condensed any further or made simpler. If anyone would like to comment on this, please do. $j = count($array); for ($i=0; $i &lt; floor(count($array)/2); $i++) { $j--; $tmp = $array[$i]; $array[$i] = $array[$j]; $array[$j] = $tmp; } Thanks!
Sure, the database code would need changing, but that's not that monumental of a change, and it can be done without breaking b/c in the API. But in that creating a potential bottleneck down the road on very large sites, you are right. I've added an issue and tagged it for addressing in 1.2 since I'm in bug fix and cleanup mode for 1.0 now. Thanks for the feature suggestion ;)
It's definitely counter-intuitive at first glance. But once you figure out why it's done, it's actually quite intuitive. It's side-effect of the copy-on-write semantics (that normally saves tons of memory). Like most things, don't try to save memory unless you need to. Let PHP manage it for you (it's pretty good at it, despite what others may tell you). And above all, [don't prematurely optimize](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html)
I've seen code outsourced that uses a framework, if the developers aren't very proficient but hungry for work (ie will work for cheap) or on a tight deadline, they will find a way to work around the framework. Like putting all their code in the view template... You should still plan to do code reviews and testing on your own.
&gt; I'd argue with you 100% there. Typing is the fastest thing that I do when I program. Why would I want to try to make that faster? I think before I type. That's the slowest part of what I do. So I'd much rather see clean, easy to understand logic than to make something easier to type... The rest of the internet population disagrees with you. Things like "LOL", "WRT", "RTFM" didn't come into being because shortening your typing is inconsequential. &gt; One single database object is not bad design. Nor is one template renderer that I know I'll be using for my layouts, or one front controller. And naming them $db, $controller, and $tpl is a choice I made. But it doesn't lead to unmaintainable code to have a global object and reference it as needed. I agree with you, with one caveat. These singletons should not be keeping state of any kind. The 2nd you try to scale horizontally, that state is going to bite you. 
If I'm not mistaken, newmanoz is the guy who once declared me a troll and then announced that he was going to out troll me. Apparently, he's such a badass at everything that not even the trolls can get him to keep posting...
&gt; Ultra-fast compiled templates Is kinda mutually exclusive with "minimalist".
Yep you have to use at least one temporary variable to do the swap. This is a much better case than reproducing the entire array and using double the memory as opposed to 1/length that by using a temp var. The only thing that I can see, which is a very common thing people do in PHP is to NOT use functions in the conditional for the for loop. Every iteration of the for loop you are running two functions, `floor()` and `count()` You could do something like this (although there are many variances) $j = count($array); for ($i=0, $len=floor($j/2); $i &lt; $len; $i++) { $j--; $tmp = $array[$i]; $array[$i] = $array[$j]; $array[$j] = $tmp; } Little things like that are things that I typically look for when I ask somebody to do the problem. You can also solve the problem without the use of `$j` by subtracting (`$i`+1) from the length! 
Sounds like a great plan, if you guys would like any help, you can contact me any time :) Not sure how much help I can offer but I've already made some requests in the forums and docs this week and last!
the tables are on two different databases. i would love to use a join, but im not sure of the syntax
&gt; 5.2 version of PHP isn't more supported Oh believe me, I would LOVE to upgrade to 5.3. Late static binding would make a lot things in this framework much cleaner, but this framework is used on many of the sites I create for my employer, and they only have 5.2 running on our servers. Convincing him to upgrade has been an uphill battle.
it's not! then again, neither is reduce (by the same argument with array_reduce). i just thought they would be fun to implement :)
You should really stop using the word "noob". It's very disrespectful and quite insulting, even to someone who genuinely is new.
i think i'd agree with (2), but who really cares about (1)? if you don't like it, then just don't use it. according to the title of the article, i'd lean toward "bonkers," but that doesn't mean there isn't something of interest to _someone_ therein.
Except in C
Not sure why you got downvoted. I kind of agree with this. There are a lot of things that you can optimize at the Design/Architecture phase, but knowing what to optimize generally takes a bit of experience and intuition. General rules like reducing the number of and complexity of queries and minimizing object creation are always true. Other things tend to be very situational. With PHP, we are also mostly dealing with a web-based user experience, so a lot of optimization really has nothing to do with PHP and more to do with producing well-formed markup with cachable js/css files, reducing the number of clicks, and giving proper user response. As an anecdotal story, a Journeyman programmer recently decided to "optimize" our Smarty class by turning it into a Singleton. Presumably this would save resources somehow because we'd only be creating one instance of Smarty. I argued that due to the state-less nature of HTTP (all objects are dump between requests), and that fact that we usually only create one instance of Smarty anyways when our Presentation layer runs, this would produce negligible results at the cost of increasing code complexity. It was pushed to production anyway, and the result was: no discernible difference in server response time, and several bugs.
He asked for feedback, so I gave it. If you don't like it, **downvote**. I never made any claims as to the fitness or usefulness of the project; on the contrary, I was mocking it for following the path of all of the other _trendy_ projects of the past several years who must all believe that jQuery's success is based solely on it's usage of `$` and it's novel "chaining" (FFS it's known as a [fluent interface](http://en.wikipedia.org/wiki/Fluent_interface) and has been around for eons). Come up with something original (and not trendy) that hasn't already been done _ad nauseam_.
Based on the feedback here, I've made several changes already: * Moved autoloader function to its own file lib/Autoloader.php * Fixed all notices on E_STRICT * Added an issue to add db replication support in 1.2 * Several documentation updates/clarifications (e.g., that you can use straight PHP for templates or {{var}} style) So thanks to everyone who posted (harshly or otherwise).
Spot on. Keep writing this stuff.
&gt; If you don't like it, downvote. that's not really what [downvoting is for](http://www.reddit.com/help/reddiquette)
Thank you very much. If you have any topics you want me to write on, please drop me a line (me [at] ircmaxell [dot] com). Coming up with interesting topics to write on is the hardest part of all of this. 
I think basic OO concepts would be a good thing to touch on if you haven't already. It is often very unintuitive to the novice, and easy to get wrong. Many of them tend to see classes/objects as just a way to namespace functions that would otherwise be in the global scope. Another thing I often see novices doing is using regex to parse HTML, which is often prone to error. Many seem to think DOMDocument is something magical that they can't learn or understand. Just a few ideas anyway.
&gt; importing an entire namespace is one of the few things in programming that is absolutely, 100% incorrect to do. PHP started as a much more Perl-like language, and in Perl scripts this is done all the time. &gt; Learn to use an IDE What are you, a Java programmer? &gt; That's why you don't use them; duh. [snip] Just because a feature exists doesn't mean it's a good idea to use it. This completely obliterates one of the benefits of namespaces: the ability to have two classes named Baz from two different namespaces in the current namespace. &gt; Or maybe if you used an editor smarter than notepad.exe, it would warn you as you're writing the code. Again, not everyone codes faster with an IDE. People who learned to program in languages that aren't C# and Java generally can program faster in an editor like vi or emacs. &gt; If anything, the addition of namespaces should drum up support for having an implicit static object attached to every class, like Java does I think I threw up in my mouth a little. &gt; Having sub namespaces implicitly import things from their parent namespace breaks defensive coding patterns, encapsulation, security restrictions (if PHP were to ever add a security level for "namespace private") and common sense. A sub namespace is PART OF THE PARENT NAMESPACE, YOU DOLT. It should have access to everything defined in its parent. This is how namespacing in almost every language works. &gt; About half of this article's points can be effectively boiled down to "I don't know how to use an IDE." If you NEED an IDE to write in a language, that language is flawed. &gt; tools to search their code that are more sophisticated than grep. If you know how to properly use grep, there is no more sophisticated tool. &gt; Assuming that the Controller\ namespace had more than one controller, this is another damn good decision... No, that doesn't even make sense. The proper namespacing would be Foo\Controller &gt; Namespaces are largely an OOP construct and trying to force procedural constructs into them sounds like a pretty bad idea to me. Namespaces are a code organization construct before an OOP construct, and have nothing directly to do with OOP. Namespaced functions and constructs from a code organization standpoint just make sense. Most PHP programmers can't understand this, however, because they're used to false-namespacing their functions in static classes, because up until recently PHP didn't have proper namespacing. &gt; It's a good thing I don't have to read your code then. I wonder how atrocious it is; your article implies that it's better that I don't have to. Ad hominems are great, bro. PHP is moving in a direction that half of the programmers of PHP like, which is towards Java and C# and more enterprisey languages and away from its roots in C and Perl. From my experience, the better and more productive programmers are not the ones that PHP is currently catering to, and they are moving towards more cohesive languages or jumping ship to **actual** enterprise languages, which provide more benefits than just code cruft. The quality and "bleeding-edge-ness" of the current arena of PHP frameworks is dwindling, and soon the only people left writing PHP will be WordPress coders and those that aren't quite smart enough to realize that other languages offer more advantages.
Very well-written, says twice as much as my rebuttal to the top post in this thread in about half as much text. 
Yeah, because that's how reddit _really_ works.
Two options that I can think of. You could write a simple paginated front end for the db. If you only want the information accessible to logged in users, though, I seem to remember google offering to crawl logged in pages by giving them a username and password. I realize this may not be as helpful as it could be, but your post left a lot of questions open and there was no link. 
Create a page for each video, which can be done dynamically using some mod_rewrite magic. This would let you have URLs like "/some/path/to/a-random-video-1234" which Apache could translate to "/video_info.php?videoId=1234". Then create some other page(s) to list the videos. Google would find that list of videos and index every single one.
This is the best solution. Google can't search your database, so you need to present all the data in a format it understands - web pages. Basically you make a sitemap, pointing to all the things you want Google to index.
generate a sitemap for the data
You should to stop trying tell me what I "should" do.
Thanks for not [creating a trendy library out of it](http://www.reddit.com/r/PHP/comments/jdm01/double_underscorephp_eg_maparray1_2_3_functionn/)!
&gt; PHP started as a much more Perl-like language, and in Perl scripts this is done all the time. "Happens all the time in Perl scripts" is not evidence that something is a good idea. Do you have any actual reasons why importing an entire namespace is a good idea? It's pretty well obvious why it's a bad idea. &gt; What are you, a Java programmer? I'm a programmer. I can write good software in a pile of different languages and different paradigms. An IDE is no less useful in PHP than it is in Java and it's just as useful in a language like Haskell or anything else. The only community that I've ever seen that seems so dead set on refusing to use good tools in the PHP community. And I'm not talking about the people that use emacs or vim, but the people that use mostly-stupid editors like Notepad++ or TextMate to write PHP. I do like the way you ask me if I'm a java programmer like it's a bad thing. Java programmers, on average, get paid a fair bit more than PHP programmers [[1](http://theunixgeek.blogspot.com/2008/06/programming-salaries.html)], [[2](http://www.indeed.com/salary?q1=java&amp;l1=)] [[2.5](http://www.indeed.com/salary?q1=php&amp;l1=)]. &gt; This completely obliterates one of the benefits of namespaces: the ability to have two classes named Baz from two different namespaces in the current namespace. Right, and you can call them Foo\Baz and Bar\Baz or Com\MyCompany\Bar\Baz and Baz or anything else. Referring to a class as anything other than its name is pretty fucking retarded. &gt; Again, not everyone codes faster with an IDE. People who learned to program in languages that aren't C# and Java generally can program faster in an editor like vi or emacs. The language you cut your teeth on should not have any importance to your competency; if it does, you haven't learned enough. Whether you started with an OOP langauge, a procedural language, a functional language, whatever, you have to learn all of that shit sooner or later anyway. Sure, you might be more familiar with vim and emacs, but you can probably coerce emacs and vim to write your import statements for you. Hell, it wouldn't be that hard to write a piece of lisp that does that for Emacs and I'd expect that vim has some scripting capability that would make it just as easy, if it's not already done. Once again, I'm not talking about people that use emacs or vim. Emacs and vim are smart editors - and in a lot of ways, smarter most IDEs will ever be able to be - and getting them to have the necessary features to write namespaced php code shouldn't be difficult. I'm talking about people that use stupid editors that don't offer much in the way of making developers' lives easier. Whether you choose to use vi, emacs, Eclipse, Komodo, or anything else... there's still no reason to not use an intelligent programming editor. &gt; I think I threw up in my mouth a little. Why? Because it's something Java did first? Is it worse having to refer to static entities (pre-defined classes, particularly, but also functions, methods, etc.) as strings and not being able to make **any guarantees** about the compile-time correctness of your reflective code? Can you perhaps give me some real criticism instead of this immature shit? Maybe if you actually elucidated your arguments, it'd be easier to take you seriously. &gt; A sub namespace is PART OF THE PARENT NAMESPACE, YOU DOLT. It should have access to everything defined in its parent. This is how namespacing in almost every language works. I don't think I said anything that contradicted this. Maybe you should go back and read what I wrote again, because I was mentioning *implicitly importing* everything from a parent namespace into the child namespace *which is what the article suggested*. If you define Foo\Gui\Style as a class and Foo\Gui\Bar\ as a namespace, classes in Foo\Gui\Bar should **not** be able to refer to Style classes without a use statement! &gt; If you NEED an IDE to write in a language, that language is flawed. Once again, your reading comprehension skills seem to be lacking because that's not at all what I said. If you read the article, it lists some inconveniences the author has with using namespaces. Note that the inconveniences are just that, inconveniences that could be solved with an IDE. Does that fact that it's more convenient and easier to write PHP with Eclipse than notepad.exe make PHP a broken language? No. It means that an IDE is a useful tool. &gt; If you know how to properly use grep, there is no more sophisticated tool. Explain to me how to do the following things with grep: 1. Trace a variable to the point that it was declared, even if it was declared out of scope and passed as an argument to the current scope. 1. Retrieve a type hierarchy for a class / interface / object. 1. Open the class file for a particular object, given only the object. Just because you don't know what an IDE does (apparently) does not give you license to make unsubstantiated and false statements like you have here. &gt; No, that doesn't even make sense. The proper namespacing would be Foo\Controller If a module *Mod* is made up of components *Controllers*, *Models* and *Views*, then this namespacing hierachy is perfeclty fine: Mod\ \Controller\ \Foo \Bar \Model\ \Foo \Bar \View\ \Foo \Bar If you don't like it and prefer another schema, that's perfectly fine, but that doesn't make the above schema any less valid. Get over yourself. &gt; Namespaces are a code organization construct before an OOP construct, and have nothing directly to do with OOP. Namespaced functions and constructs from a code organization standpoint just make sense. Most PHP programmers can't understand this, however, because they're used to false-namespacing their functions in static classes, because up until recently PHP didn't have proper namespacing. I should have said "Namespaces in PHP are largely an OOP construct." I figured since we were in r/php talking about PHP's namespaces that the context for that would be apparent. I probably should not have assumed that people have reading comprehension skills, sorry.
This from someone who just told me I "should" be wrapping all my single action page controllers in objects for the sake of polymorphism... code reuse, on something that by its very nature shouldn't be getting reused. If you can't take it, don't give it. You're being downvoted because you're being a dick. I was informing you why.
Create a frontend. MYSQL databases are not ment to be used as a frontend, this is why you PHP.
Y U NO Y COMBINATOR?
You don't see the sweet irony of a name colliding with the name-collision-avoidance feature?
next time!
I'm pretty sure he means metadata stored in a database that describes the video.
No worries, I'll chuck up my results later :) *Edit: done*
Ah, carry on then! :D
someone naive enough to think that using php for functional programming is a good idea is naive enough to love reddiquette, emirite?
It sounds like you need to hire someone.
It's a standard Controller -&gt; View setup (Model for the DB access). What you call pagelets are normally referred to as partials and they normally work in a similar way to views but without including the layout html. All views, standard or partials should map to a controller method which provides data setup. Finally format switching is often handled by reading the suffix and switching the view. So in your page controller you have a method called test eg: public function test() { //Do Setup here } if you access your app like so: http://yourapp.local/test the app should use the standard test.html If you try: http://yourapp.local/test.xml The app should load the test.xml template - same data different view. There's plenty of PHP frameworks that handle a lot of this, try reading up on MVC, the Model View Controller design pattern.
I am familiar with the MVC Architectural concept. It's not really a Design Pattern though. I was looking more for something that I could implement directly, like [this](http://java.sun.com/blueprints/corej2eepatterns/Patterns/FrontController.html). I'm also aware that plenty of frameworks support this type of functionality. Unfortunately, refactoring into a new framework is going to be more than a weekend project, so I won't be able to do that. 
Nice, Clear, Informative...you are doing it wrong, you need to have an opinion guaranteed to annoy as large a group as possible spread across 36 pages all rammed with enough flash adverts to make my i5-2500K cry!.
I dare you to cross-post this to /r/programming
I would like to keep my testicles; no thanks!
If it's not seeing past the ?, use $_SERVER['QUERY_STRING'] instead of $myabsoluteurl. :)
Sorry, but this is plain ridiculous. The reason of Underscore.js it's because Javascript was missing some common functionalities for arrays, objects and such. So it brought these functionalities in to help developer create their app faster. Now for PHP, everything is already here. To me Underscore.php doesn't bring anything new. Just plain stupid. Stop the bullshit... let's get to coding instead of bringing JS problem to PHP... we already got stuff to fix... - Maximus Prime
Why can't you use $ _ REQUEST or $ _ GET? like: if (isset($_GET['catid'])) { ... Anywho, I'm guessing its something to do with joomla, you left out an echo and had an AND instead of &amp;&amp;: &lt;?php $myabsoluteurl= JURI::current(); //JURI::current() syntax to pull current url in joomla. $canonical = strstr($myabsoluteurl, 'articles', true); if($canonical == true) { echo '&lt;link rel="canonical" href="'. $myabsoluteurl .'"/&gt;'; // echos canonical link } else { echo '&lt;link href="'.$myabsoluteurl.'"/&gt;'; } $myabsoluteurl=JURI::current(); $canonical = strstr($myabsoluteurl, 'articles', true); $nocanonical = strstr($myabsoluteurl, '?catid', true); if ($canonical &amp;&amp; !$nocanonical) { echo '&lt;link rel="canonical" href="'. $myabsoluteurl .'"/&gt;'; // echos canonical link } else { echo '&lt;link href="'.$myabsoluteurl.'"/&gt;'; } ?&gt;
One of the things I like most about PHP is how easy it is to deploy.
I agree, another thing worth mentioning is the community.
Since this involves joomla, you'll want to post to [r/joomla](http://reddit.com/r/joomla) subreddit. The answer to your question seems to hinge entirely on the return value of several joomla class methods, so you should seek help closer to the source. I mean hell, `JURI::current()` could be a command to delete /var for all I know.
Juri::current (); is just the syntax for pulling the url of the page you are on. The rest is pure php.
I will try this out. Thanks.
What does `$myabsoluteurl` set to at line 4 in any given request?
&gt; Either you like both or you don’t like either, there is no claim you can make about PHP that can’t be made about C as well, and vice versa. I like C and tend to shy away from php, and my biggest reason is that C is a very strict "do what I say" language. If what you typed out is vague or mal-formed, then you will be hit with compiler errors. There is little room for the compiler reinterpreting your mistakes into a running-but-incorrect program. This was not so in my brief encounter with php. If I typed out a long variable name wrong, I wouldn't get an error. Any variables not mentioned before default with the value null. And since php is such a helpful language, null becomes the empty string in a string context. So when I go to run my new php page, I get a nice big empty space where the result of my function should be. This sort of thing bugs me. Not because my function didn't work, but because I might have more bugs that *aren't* causing my code to break. Not yet anyway. This is the kind of thing that scares me about php. It might not matter right now that some misspelled variable name is interpreted as null, but 1 year later in production some new condition might be hit that causes it to matter.
The article is good, BUT… --- I can't stand "single quotes are faster" myth is metioned even in passing. PHP's tokenizer is a finite state machine ([giant autogenerated lookup table](http://gcov.php.net/PHP_5_3/lcov_html/var/php_gcov/PHP_5_3/Zend/zend_language_parser.c.gcov.php)). It's `O(n)` depending on the length of input, and there is no difference in computational complexity of any token (double-quoted strings are just as hard to parse as numbers, keywords and punctuation). Everytime anybody alludes to the "searching for dolar signs and backslashes" thing, please hit them in the head, because that's naive misunderstanding of how parsing works (it's like saying rockets must be filled with crackers so the astronauts can eat the cheese moon is made of).
I'd second [belbn's response](http://www.reddit.com/r/PHP/comments/jf24t/question_searching_url_for_catid/c2bkcdz). But even still, you could be facing the problem of string functions returning 0 (if `articles` is at the front of the query string) or false (if `articles` is missing or otherwise on any error). You'll also want to account for case sensitivity too. A more simple check is: $myabsoluteurl = $_SERVER['QUERY_STRING']; // should change variable name to fit context if (stripos('articles', $myabsoluteurl) !== false) { echo '&lt;link rel="canonical" href="'. $myabsoluteurl .'"/&gt;'; // echos canonical link } else { echo '&lt;link href="'.$myabsoluteurl.'"/&gt;'; } Note, you forgot the `echo` there on line 9, so that too will cause problems.
This is how Joomla pulls in the current url for that page. It is essentially the same as $_SERVER["REQUEST_URI"];
I mean, what is the actual value returned by `Juri::current ();` in this case when you browse to `http://yoursite.com/page.php?articles=x`? A simple `var_dump($myabsoluteurl);` after that line would answer that. It might _intend_ to return `$_SERVER["REQUEST_URI"]` according to documentation, but that doesn't necessarily mean it returned that value in your case.
Despite being called "I like PHP" and giving examples in support of that statement, this article has some decent examples for why there are many people who dislike, or even intensely hate, PHP. &gt; I don’t even bother writing tests for most of the PHP I write Now, he does mention immediately afterward that he'd be better on this for mission critical projects, but quality is important at all levels. I'm being damnably hypocritical here, since my current part-time pet project is currently in a state of disrepair owing to the fact that everything I've written so far is either meant to be run once or as a proof of concept/learning experience, but the authors wording feels a bit ambiguous. If he said he doesn't test toy projects, that's one thing, but he instead says he's more thorough on mission critical projects, leaving open a whole range of non-trivial but non-mission-critical project which are seemingly written without any sort of unit testing, relying solely on the browser for feedback. This is the sort of thing that leads to brittle code that others don't want to maintain. &gt; I happily mix up presentation and logic all the time. Mixing presentation and logic just makes the code look sloppy and harder to read, IMHO. It's harder to keep track of what's going on in the code when there are lots of `echo "&lt;tag&gt;";` lines littered all over the place. The author says that this is "just how PHP is meant to work", and while I think that's true, I don't agree with his interpretation. PHP is great when you can supply data to a template and have small PHP sections within the template to do simple loops or populate predefined sections, but doing it the other way around feels harder to read. I think "mixing presentation and logic" should be a lot closer to "PHP inside HTML" than "HTML inside PHP", if that makes sense. &gt; I ssh to my server and modify the files live. I don't even know what to say to this one. Is he talking about live, production servers here? Does this not seem dangerous to anyone else? Saying that you can quickly use git to rollback to something that works isn't an excuse for not testing your code before deploying it to actual users. These sorts of things all contribute to the feeling of some other developers that PHP isn't exactly great. I've heard it said many times, but many developers, that PHP itself isn't a bad language, but that the sorts of developers it attracts leads to a lot of lower quality code which is harder to maintain than it needs to be. Other developers don't want to work with PHP not because they don't like coding in it, but that there's a higher than average chance of being tasked with maintaining a moral-shattering mess. Now, before I get downvoted to hell here (since we are in /r/PHP and I just spent a chunk of time bashing a pro-PHP article), I'd like to point out that I like PHP, and the personal project I mentioned above is an attempt to help mainly myself, but also others, to become better with it. I just think this guy is epitomizing a lot of the negative opinions others have of "the average PHP programmer".
hey thanks for the heads up on the missing echo. Not sure how that slipped by. Thanks for the code too. Is there there a way to add another item in that stripos? For example is this code correct? if (stripos('articles', $myabsoluteurl) !== false) &amp;&amp; (stripos('?catid', $myabsoluteurl) == false){ echo.....
This line jumped out at me for another reason. In being absolute, it makes itself wrong. The first thing I thought of upon reading that sentence was "well, C is faster for one". It's nitpicky, which is why I didn't put it in my other comment, but it really irked me that he chose to be so absolute about a subjective statement.
Sounds like you need to both the composite and decorator patterns, or a hybrid mix of both.
Have you looked at [SimpleXML](http://www.php.net/simplexml)? This kind of work can quite easily be accomplished with it. Read in the XML file and iterate through the properties.
&gt; if (stripos('articles', $myabsoluteurl) !== false) &amp;&amp; (stripos('?catid', $myabsoluteurl) == false){ Three problems with that one... 1. Misplaced parenthesis 2. Including the `?` character in the second stripos check. 3. Doesn't account for `"catid"` appearing in the middle or end of `$myabsoluteurl`. A fix would be... if ((stripos('articles', $myabsoluteurl) !== false) &amp;&amp; (stripos('catid', $myabsoluteurl) === false)) {} This assumes though that if `"catid"` appears anywhere in the query string, that `rel="canonical"` won't be printed. Hopefully that makes sense...? A few bugs might be based on misinterpreting type comparisons. For a handy chart, see: http://php.net/manual/en/types.comparisons.php
One question? Does 3 = tell the code to look through the full string?
Checking the chart link I gave, 0 == false. Meaning, if `'catid'` was at position 0 in the `$myabsoluteurl`, your comparison would deceive you when `stripos('catid', $myabsoluteurl) == false` evaluated to `true` if it's at the front of the query string. `stripos` gives back the starting position of the string being searched for if found. In other words, searching for "A" in string "AB" returns 0. Position index of the original haystack string starts from 0. Searching for "C" in string "AB" returns `false`. Here's the link to `stripos` manual page for more details: http://www.php.net/manual/en/function.stripos.php Hopefully that all makes sense. I'm not really a good teacher.
Good points, however, having a few things in common C doesn't mean it's "exactly like C."
I don't get the problem with modifying live files, everyone has. I SSH in to my server, load up a file in Notepad++ and make quick modifications that I test on the fly, something doesn't work or turn out as I had intended, ctrl-z. Did I fuck up horribly and the system crashed while I was editing a file? that's why I have backups. People read this sort of thing and automatically assume they are editing live files on something as large as Facebook and that's rarely the case. I'm not going to bother myself with running a test instance of every edit and I doubt I'm alone on that. Every single one of you is guilty of editing files on the fly, admit it.
I'm a fan of PHP. But to be honest, [this is the impression I got](http://i.imgur.com/5lCX9.png) from this blogpost.
There's a lot of knee jerk reactions that I've seen from people in this subreddit that aren't nearly as serious as people make them out to be. Project scope is a HUGE factor and, lets face it, the vast majority of PHP developers aren't working on large projects where so many best practices are critical. Most of us work on little sites handling a couple thousand hits a week, max. I think the author of the article is the same, and he knows it. Yesterday I was chastised here for having business logic and presentation code in the same file -- not mixed, just *in the same file* -- on code shorter than 100 lines (including HTML). People need to chill the fuck out.
Thank you. I just read through the manual, but I can't seem to apply very well. I am very new to PHP coding, and I will need some customized help.
I stopped reading at "PHP is like C". What???
You are correct. But it doesn't particularly hurt small projects to use practices that benefit large projects (source control, documentation, namespaces, unittesting).
I'm not a serious programmer (I just do it for fun sometimes) but from my experience &gt;I spend a decent amount of that time looking up docs on Google. And PHP absolutely shines in this area. It’s not just that looking up a function name will give you its API documentation as a first hit, but you can literally type what you need in English (e.g “most recent file in PHP”) and it’s very likely that you will find how to do it in just a few clicks is true for all the languages I've played around in due to the sheer amount of questions that have been asked on forums around the net.
I agree; almost any language that isn't compiled is susceptible to an entire class of errors at runtime that you don't get with compiled languages. However, PHP will trigger an error (of level E_NOTICE) if you mistype a variable name you just need to make sure your error level is high enough. It is possible to make PHP pretty safe (for an interpreted language) with the right settings. 
No. It makes me hate PHP *every time I touch PHP code*
Author must be trolling, right? Right? *Right?* **RIGHT!?**
Completely agree, not everything is a study in programming methods and semantics. The amount of stuff I do that falls in the category of ad-hock one time or small time use far outweighs the code that goes up in front of a large crowd. Some times the benefits of '*it just works*' code far outweighs fully object oriented MVC'd tricked out dog and pony show code. When writing a script to rotate an image for instance, I'm not going to blow that out into a 900 line work of coding art and people that argue for it for the sake of being correct can go to hell.
Then you missed the entire point.
majority of frameworks are OOP. No matter what you will be creating a framework of some sort, why not start out with a well written one such as symfony v2 ?
Of course not, best practices are best practices for a reason. But every rule has it's exception and every one has those situations where best practices means using a sledge hammer where a normal hammer would suffice. In the end I consider it personal preference, people know their own environment and are uniquely keen on knowing when to exercise what practices and what will work best in their own instance. I know I'm not the only one who is annoyed by MrProgrammerJedi86 who scoffs at every single line piece of code for not following strict programming standards and using the very latest in programming techniques. Kind of like how everyone in /r/programming thinks that if your project, regardless of what it does or is intended to do, doesn't use JSON you've failed.
Something like this: $xmlobj = simplexml_load_file("file.xml"); $fh = fopen("file.csv", "r"); while (($row = fgetcsv($fh, 0, ",")) !== false) { if ((string)$xml-&gt;Station == $row[0]) { $xml-&gt;Station-&gt;addChild("Latitude", $row[1]); $xml-&gt;Station-&gt;addChild("Longitude", $row[2]); } } print_r($xml); [Edit]: formatting
&gt; I know it sounds silly considering how primitive and old the language is Old?? PHP - 1995 Python - 1991 Perl - 1987
Why would you make your example more complicated than it needs to be? $db = new DatabaseMysql; $db2 = new DatabaseMysqli; Provides a more direct approach, but if you must, $db = function($type) { return function($type) use($type) { //do stuff here. } }
Getting closer! Thank you. Would I need to loop through the (string)$xml-&gt;Station array? Or does ((string)$xml-&gt;Station == $row[0]) check the $row[0] data against the whole (string)$xml-&gt;Station array?
Author of Java TestNG really hits the point here. I'm sure "academic" audience doesn't get it.
HN has decent thread about this article - http://news.ycombinator.com/item?id=2869215
To be honest, most people who know multiple languages typically don't enjoy php. Some recognize that it does get the job done though.
At the moment php can't even do f()[0] let alone f()().
You didn't turn on error reporting. Doing something with an undefined variable would result in a warning with the correct error reporting turned on. So you made a noob error and judge PHP based on that? I wonder how these leet programmers would react if I tried C, stumbled on some basic configuration and dismissed it because of that? Also, PHP is hardly the only weakly typed language there is, and I'm guessing it's for a reason. Weak typing isn't a bug. It's a bit tricky to get your head around it at first, but when you do understand it and know how to use it, it can be very helpful. If you absolutely need your function to handle NULL differently from an empty string (which isn't necessary in many contexts), there are easy ways to do that.
Exactly. That would be a serious, productive criticism of PHP, since these settings aren't obvious to beginners and don't always default to the safest value.
So true. I get the benefits of the MVC pattern, but it seems like it has become the actual solution instead of one implementation of the solution. "Seperate presentation and logic" is the solution. As long as you do that, you're on the right track. Using MVC is one way of doing it, not *the* way. I get the impression from many programming purists that they're too invested in specific solutions and tools.
Indeed. Many of my small projects look like that — a block of seperate PHP on top of the html. It actually accomplishes the seperation of code and presentation, without introducing unnecessary complication of MVC, routing, etc, and it's still easily understandable and maintainable for others.
If that would be possible in PHP, this should be possible as well: (new DOMDocument)-&gt;load(...);
Ever heard of the saying ["One in a million is next tuesday"](http://blogs.msdn.com/b/larryosterman/archive/2004/03/30/104165.aspx)?
That's a syntax problem though, not a fundamental limitation.
I'm just guessing as I'm not familiar with PHP internals, but could be something related to the refcounting GC scheme PHP uses rather than just syntax. It's not easy to get refcounting on temporary objects correctly, especially when nested arrays or complex objects are involved. Tried to implement one for my own programming language once. At first you think you don't need to increment/decrement the refcounts each time you push or pop objects on/off the stack, but you eventually end up doing just that in your VM implementation. Which is not a terribly efficient way, so you get back to not inc/decing by sacrificing some functional candies in your language. Now I don't know how PHP works but something suggests the f()[] problem is related to refcounting.
It's not parsing that's difficult, it's how the opcodes get generated. See [this article](http://blog.golemon.com/2006/06/how-long-is-piece-of-string.html) which describes how PHP does it (the lack of a multiple-pass parser requires bigger opcode structures). So while you are correct that the parser will not see anything different, but the generated opcodes (and hence runtime) are quite different. But I do agree, don't worry about it. The difference is in the range of microseconds in the vast majority of cases... And therefore classifies as nothing more than a micro-optimization...
What was this point, beyond the author making a silly blog post? 
don't forget about "i want it to be like facebook"
Yes. Actually in my experience most commonly used PHP libraries (PEAR, Smarty, ADODB) actually suffer from extreme lack of documentation. Compared to Java, .NET, or STDLIB, it's not even close.
why wouldn't you just do: $db = ($type === 'mysql') ? new DatabaseMysql : new DatabaseMysqli; 
It just feels old, I guess.
I'm so glad that others think this. I don't see where people get on their high horse about frameworks and MVC like it is the only way to do PHP programming. I'm sorry, but I'm willing to bet my simple htaccess routing to a file which queries what I need and loads the session, etc, then outputs that to a template file is probably so much faster and easier to understand than some framework that must load hundreds of files and helpers as well as a template system to do pretty much the same thing. Mine works perfectly fine with millions of page views a day. I don't understand what all this fuss is about. I think those are the same people that have SSH open when their friends come over and run a few ifconfigs to make them look like they are super smart and nerdy with computers.
That depends on your definition of _at the moment_. To be accurate, it [works great in 5.4](http://www.php.net/releases/NEWS_5_4_0_alpha1.txt) _at the moment_.
It's been implemented in [5.4](https://wiki.php.net/rfc/functionarraydereferencing).
I wish people like you were more vocal in this subreddit. I've seen some really neat ideas posted here that get burned to the ground by the MVC purists.
Ironically, the same discussion thread regarding function array dereferencing (as previously [discussed in this thread](http://www.reddit.com/r/PHP/comments/jfexc/why_not_selfinvoking_functions/c2bo2h2)), also [speaks to this](http://markmail.org/message/o7a64mynyqjljuqn), and it appears that the newer magic method `__invoke()` was either wholly or in part influenced by this desired functionality. They also demonstrate how to achieve what you're trying to do by using existing language constructs (static methods, for example).
Great news, didn't know about it. Thanks.
I really don't see the need for perfect MVC in PHP. I do iOS development as well and MVC makes perfect sense there, but it isn't required or the perfect solution for PHP/web applications.
I think there used to be a very small difference in earlier versions of PHP, but evidently the newest version of the PHP interpreter is very efficient that second-guessing what you mean. [Proof@phpbench.com](http://phpbench.com/) 
Why generate JavaScript code using PHP?
Why not?
Well, for starters, you're creating dependencies between the service layer and the presentation layer. For obvious reasons, I think these two should be separated as much as possible. Also, if users are in the habit of extending the functionality of Google Maps, then you're potentially creating problems for them. Your turn. Justify its use. 
Say you have a database of store locations that you want to add to a google map. What would your approach be?
JSON would probably be the best method of delivering that data to the browser, seeing as it is implementation-agnostic and extremely lightweight.
Seems like rebuilding the wheel. There's already an OAuth PECL library that does the hard parts for you and works perfectly. We use it for multiple hundreds of thousands of interactions per day with Twitter, Google, LinkedIn, and others...
Checkout my [youtube library for CodeIgniter](https://github.com/jimdoescode/CodeIgniter-YouTube-API-Library) In particular I wrote a separate library file to handle the oauth portion with google. The oauth_helper.php file that is where I do all my signing etc. Even though the library is written for CI it really doesn't use very much of the framework (I think only loading the helper which you can do with an include) you could remove that stuff and it would work stand alone.
For simple maps it would definitely be semi-trivial to write a php script that returns JSON (which is essentially javascript code) and pass that to a map. For dynamic maps with many options/variables it will be a lot more time consuming. I decided that muddling the presentation/logic layers was ok if the time it takes to write google maps was greatly reduced.
&gt;For dynamic maps with many options/variables it will be a lot more time consuming. I don't see how it'd be any more time consuming to just edit the javascript directly rather than going through PHP to do the exact same thing.
Personally I haven't found any practical use for `__invoke` yet, but plenty of places where array dereferencing and constructor dereferencing (just made that word up) would come handy.
Well, thats easy to explain. The PHP code i wrote generates about 35 lines ( probably 5 times as many characters ) of javascript code. It also geocodes a location for you, which would be another couple lines of javascript. A simple call: $marker1-&gt;setIcon( 'http://galengrover.com/projects/PHP-Google-Maps/examples/_images/bullseye_marker.png' ); Adds seven lines of javascript code.
If you're concerned with development time, then surely one of the Google Maps plugins for jQuery would be a more preferable route to take compared to your PHP script. 
You asked about time consumption. I showed you. Im just using php to write javascript instead of jquery/js to write javascript. If someone prefers to use a jquery plugin, then by all means. I just prefer this method.
Well, I find your method to be bad practice, sorry.
and i support your right to hate my project!
I don't hate your project, I just think it's bad practice, that's all. 
Why aren't you using OAuth2? It's much easier to use and IIRC some Google apps no longer work with OAuth1.
You cannot do this, you would need to do something like: (:one, :two, :three) Which obviously sucks for dynamic numbers of values, you best option is to not use prepared queries (holy security flaw batman!). Instead, use [PDO::Quote](http://www.php.net/manual/en/pdo.quote.php). In your case, assuming $sourcevar is not created from an array you'll want to do something like: $parts = explode(",", $sourcevar); foreach ($parts as &amp;$part) { $part = $db-&gt;quote(trim($part)); } $sql = "SELECT * FROM table WHERE COLUMN IN (" .implode(",", $parts). ")";
I have a function in my db library that handles in queries, but you could try something like this: $sourcevar = '1,7,2'; $vars = explode(",", $sourcevar); $sql = 'SELECT * FROM table WHERE COLUMN in('; for($i = 0; $i &lt; count($vars); $i++) $sql .= ':column_'.$i.','; // remove the extra comma at end $sql = substr($sql, 0, -1); $sql .= ')'; $data = $db-&gt;prepare($sql); for($i = 0; $i &lt; count($vars); $i++) $data-&gt;bindValue(':column_'.$i, $var[$i]); Obviously, make sure that count($vars) is greater than 0. Sorry, it's quick and dirty and not tested. 
citation please.
C was made with a specific goal in mind and is very good at that goal. PHP was made with a specific goal in mind and is very good at that goal. tada, his point is reasonable, it just takes pulling off your fanboi hat to see it.
The values are dynamic so there could be more or less
I will try this. It actually is coming from an array. I just simplified it for the example.
As a developer without much JavaScript experience, can you explain this implementation a little further? Exploring this particular example might be the most useful to me since I feel like I understand what details exist while the synopsis is fairly rudimentary. Do you mean that you would use JS to call some other script (still PHP?) that would fetch the locations from the database and then return them in JSON to be then looped through and added to the map?
I just rewrote a quick implementation of oAuth2 and that will work perfectly for now. It's a little irritating to have to refresh the access token but it's a lot less frustration to implement that than to try and debug my HMAC-SHA1 signature. Thanks!
it always baffles me how people don't grasp the concept of JSON. I am sorry but Nicoon is absolutely right. Using php to do the geocoding adds pointless load to your server. Google Maps has had a client geocoder since v2 iirc. Your project is a nice exercise but you really have to ask yourself: if you have php that generates javascript which in turn talks to a javascript api - are you doing something wrong?
[JSON](http://en.wikipedia.org/wiki/JSON) is a lightweight data format derived from JavaScript (and therefore also directly translatable into JS), however it is language-independent (so there exists parsers in all the major languages). What you would do is create an object holding the data that you wish to transfer to the client-side and then pass it through the [json_encode](http://php.net/manual/en/function.json-encode.php) function which would turn it into a JSON string. You then call this script using an [AJAX](http://en.wikipedia.org/wiki/Ajax_%28programming%29) request and load the data into JavaScript. jQuery would make this a breeze for you.
I've actually been looking for exactly this kind of library for the past few weeks. THANK YOU! Does this support Bing's system for doing large bulk address geocoding? We've been looking for a good solution for handling a LOT of addresses (like, 50k) and Bing's bulk services seems to have the best limits.
Obviously this is an opinion gathered from my personal observations, and not a rigorously proven scientific statement. However since I've been a part of the php community (and others) for about 8 years now I think I'm qualified to make some informed observations.
 $numbers = array(1,7,2); $placeholders = implode(',', array_fill(0, count($numbers), '?'); $sql = "SELECT * FROM Table WHERE Column IN ($placeholders)"; ... ...
Why do people down vote questions?
of course, because otherwise you would be wrong, and you being correct is part of the given, not part of the proof.
I'll be damned if today I didn't think to myself "I wonder if there is a PHP Geokit available.." Excellent job. Well done.
Right now, no. This is meant to really provide a common interface to several online geocoders. So you can use Google, Bing, etc, without worrying about the format of the data that is returned. Every response is normalized to a common format. Feel free to check the source out and modify as you'd like.
Thanks! This is the exact reason I wrote this. I wanted something similar to Geokit but for PHP and nothing existed. I figured someone else must feel the same.
Came in to see the project, left learning more about json. This is why I love reddit. 
Right. I guess I knew all of that already, but I meant what would the script be that your AJAX was calling? Wouldn't that be PHP? I'm not suggesting that doing the entire thing in PHP is right -- though the wrapper helps me to get my head around it a bit since PHP is what I know -- but at some point you're querying the database with *something else* (this could just as easily be python or whatever script you prefer) and then json_encode (or equivalent) to return to the ajax handler function, right? I'm just curious here because the way that you said it made me feel like maybe there was some shorter simpler way of doing it that I wasn't aware of. Some magical JSON wand that would query for me and handle the result object natively. Even still, I'm sure someone has done this. Or maybe that *is* what you were talking about! If so, that's what I was wondering more about. :)
&gt;I meant what would the script be that your AJAX was calling? Wouldn't that be PHP? If that's what you're running on the server-side, then yes, of course. Again, JSON is just a data format used to transfer data from the server to the client. &gt;the way that you said it made me feel like maybe there was some shorter simpler way of doing it that I wasn't aware of. What are you talking about? You enter whatever data you want into the json_encode function and it spits back a JSON string. It doesn't get any more simpler than that. &gt;Some magical JSON wand that would query for me and handle the result object natively. JSON is not a database query tool. If you want to query your database, use PDO or mysqli (assuming you're using mysql). And what do you mean, handling the result object natively? The data need to get to the browser in order for you to actually do something meaningful with it. 
Good stuff
Not sure what makes you think i dont understand JSON, but anyways... Google's geocoding api was made to be consumed by any language, not just javascript. Not sure why you think otherwise (check some of googles examples which uses php for geocoding). Also, by using PHP for geocoding, i can tell immediately if it succeeds/fails and can take appropriate actions (in PHP, since that is the language im using)
Clean code, no fluff or weird dependencies. Very nice.
Aww, too bad I already had to build my own. Upvotes for you, great job.
Can you briefly describe what it does? I love geo stuff!
I think Nicoon was hinting that you can just assemble the data required in php, then pass it to javascript using JSON. It's much cleaner than generating code. Using the geocoder in php is of course a valid task when you are collecting lat/lng info for a set of records. The geocoder output should be cached in any case as physical addresses tend to be static. Using the geocoder in javascript will also yield whether or not the request succeeded and you can take action in the frontend where it matters - saving a roundtrip your server. You are essentially building static javascript that talks uses the google maps api. I don't hate your effort to build something in php 5.3 but this is just another of those php projects that ignores common sense, appears easy to use, encourages less educated people to use in their projects and then creates nightmares in terms of performance and maintainance. Please flag the whole thing as educational or something
yep, good point. You'd need to loop through every $xml-&gt;Station. It's quite inefficient really, checking every XML item against every CSV row.
I have had this discussion so often. For some reason many people don't seem to grasp that there is only one thing one has to understand about json: there is nothing to understand! Disclaimer: the text and charts on json.org are overcomplicpating it an bit imho.
In a nutshell, it's a library that abstracts away the APIs of serveral geocoding services. You can setup authentication keys at the top level and just make a call to geocode(). Results can come from any of the services you've configured (built in failover) and are normalized into a common result set format/object. There's also some geo-related helper methods to calculate distances, headings, and endpoints from multiple input formats.
So I can send an address and it will return lat / long values, for example? I'll check this out for sure and try and integrate it with CodeIgniter.
Have you considered using an actual MVC framework? There are people who have spent years designing, building, and optimizing these things, and it seems silly to not take advantage of that.
&gt;I think Nicoon was hinting that you can just assemble the data required in php, then pass it to javascript using JSON. He wasn't hinting; this is what he said. And i agreed with him. For simple maps its trivial to use this method. More complex maps is where my project would become useful. &gt;The geocoder output should be cached in any case as physical addresses tend to be static. This is why i added a caching geocoder =) Essentially this is just a bunch of classes that write google maps a lot faster than if you hand coded the javascript. I do a lot of google map coding so this is useful for me.
I am unable to do this as I am working within a non-MVC framework (WordPress). Many of the plugins I build for WordPress are one-off web apps inside of the WordPress platform, and I am trying to implement an MVC approach for these plugins.
There's a lot of debate about the "right" way to do MVC but when hairs start splitting, as they always do, the argument is pretty useless. For what it's worth, I would say your approach follows the MVC pattern more or less. The most important thing here is [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). MVC is just one way to get there but honestly, employ whatever design you want. The important thing here is to reduce dependencies and make your code easier to manage. 
From the horse's mouth: [PHP 5.3.7RC5 Released for Testing](http://news.php.net/php.internals/54507)
&gt; Are there any Design or Architectural Patterns that could solve this problem? Don't hit problems with the _Design Patterns_ stick; instead, learn them and know them, and once you have gained that knowledge it should become clear to you which to use and when.
Have you encountered a rate limit error with google's api? Im wondering if i should add a rate limiter to my geocoder. I havent run into the error though and i do a lot of geocoding.
I don't even understand what you are saying. Don't hit problems with my "Design Pattern" stick... but then learn them and know them? Is that some sort of zen koan? How exactly do you "learn them and know them" without trying them out? If you're trying to tell me not to blindly use Design Patterns everywhere just because I can, I'm aware of that already. Thanks. :-) Also, I'm here not so I can just blindly copy and paste a solution into my code-base. I already have an idea how to solve this problem (I've actually solved a similar problem a few years ago for a different company) but I was curious if there were any better solutions that other people might have found over time, because you know... that's kind of what Design Patterns are. This seems like a problem that might be fairly common, so rather than pretending I'm a master elite hacker that can shit out perfect bug-less code, I chose to come here and ask if anyone has run into a similar problem and found an optimized solution for it. If you don't know, then please say you don't know. Pretending to be Yoda and telling me how *not* to solve my problem isn't really helping.
well then, perhaps you should edit your original statement to reflect that it's your opinion and not a stated fact.
Please don't fall into the "right way to MVC" cult. It's a small pattern from Gang of Four that nobody here even understands correctly.
&gt; I am unable to do this as I am working within a non-MVC framework (WordPress). HTTP itself is model view controller. Many WP plugins are MVC. WordPress is not a framework. &gt; and I am trying to implement an MVC approach for these plugins. Stop being so religious. You're just chasing phrases because you think you're supposed to. http://catb.org/jargon/html/C/cargo-cult-programming.html
I see no reason to. It's obviously an opinion-oriented statement. I mean, it was pretty obvious to you, wasn't it?
Well, there are two fundimental ways of viewing MVC. As a pattern, it is important to implement correctly, and is also not easy to do (or at least nobody has done it "correctly" as I have seen in the web world). But as a separation of concerns principle, it's another story all together. It's about separating presentation from business logic from user interaction logic. As long as you have done that, you have done the MVC **principle** correctly. And there is a difference that's worth noting. If you say you implement the *pattern*, then you should implement the exact pattern specified in UML. To do otherwise degrades the meaning of patterns in general...
this looks pretty nice. thanks
I don't care about following it strictly per say, it's more that I want to ensure I'm not doing it wrong or badly. I'm trying to find the optimal solution.
First off, of course you're not hear to copy/paste; design patterns are, by definition, impossible to copy/paste. Secondly, I know quite a bit about design patterns, which includes when and how to use them, but thanks for insinuating otherwise. My point is, it's bad to look at a problem and say "I bet there's a design pattern for this, I'm going to go find it!" You can cram any design pattern into any problem, and thus the reason for my analogy to the "design patterns stick". One shouldn't go around looking for things to hit with the design pattern stick. If you _knew_ design patterns then you wouldn't be here asking noob questions such as this.
&gt; If you knew design patterns then you wouldn't be here asking noob questions such as this. Okay, I'll play the noob. What Design Pattern applies here?
&gt; HTTP itself is model view controller. Incorrect. Please try to break down HTTP into the M, V, C components. Where is the model? Or even the controller for that matter. &gt; Many WP plugins are MVC Incorrect. Well this depends on your definition of "many" as well as "mvc". Many WP plugins, I'd even say the majority of them, are poorly designed. &gt; WordPress is not a framework WordPress is a CMS AND a framework. It provides the tools to extend it far beyond it's original purpose. It includes a router, hooks, filters and many classes required for building web applications (JSON/HTTP/Database). It's not a "pure" framework, but it is still a framework. &gt; Stop being so religious. You're just chasing phrases because you think you're supposed to. Again, incorrect. I am aware that MVC isn't a perfect approach for my scenario. I am using it as a base set of concepts to organize my code. I needed somewhere to start, and MVC made sense. I wanted something that was easily to maintain and clearly laid out, and MVC provides me with the foundation for doing this.
Exactly. WordPress provides a large codebase of tools, a prebuilt admin interface and a basic CMS implementation. It's actually a quite powerful framework that is more highlevel than something like CodeIgnitor. I'd say it's more akin to Django.
Thanks for pointing out the difference.
Can you tell me what arrangement I should use for the furniture in my house? Totally depends on your situation, and only you can make that call. That's my whole point, there's not going to be any magical answers here on reddit. 
I consider Wordpress, like Drupal, to be essentially a framework with CMS written on top.
ah yes, the tried and true "everyone knows what I'm talkin' aboot, so I can be misleadin'!". No. Honesty. Gets it.
&gt; Incorrect. Please try to break down HTTP into the M, V, C components. It actually spells it out right in the RFC. The model is the webserver, the controller is the protocol, and the view is the browser. It's pretty obvious if you think about it. &gt; &gt; Many WP plugins are MVC &gt; Incorrect. What? You honestly think you can just broad-handedly say that no plugin author has attempted to structure their work this way? What are you, Dwight from The Office? &gt; Well this depends on your definition of "many" as well as "mvc". I don't define either of those; neither do you. One comes from the English language, and the other comes from a book called Design Patterns. &gt; Many WP plugins, I'd even say the majority of them, are poorly designed. I would tend to agree with this. I would go further, and say that the vast bulk of people attempting to structure their work around a design pattern in a book they haven't read are cargo cult programmers who don't know what they're doing. You appear to be taking the position that if something is MVC it isn't bad. The reason I take this interpretation is that your explanation of why I'm wrong to say that many WP plugins are MVC - something I said because I can name them, not because I'm throwing around the word "incorrect" on grounds of my imagination - is that you say they're actually mostly badly designed. The only way this isn't a non-sequitur is if you think something can't be badly designed if it's MVC. Have I misunderstood you? Because frankly, I want to have misunderstood you - that interpretation would be jaw-droppingly naive, and I'd be happier if there was a different way to read that text that I just haven't caught. &gt; WordPress is a CMS AND a framework. It's a CMS, yes. I'm curious what you think a framework is. Would you humor me in defining it? &gt; It's not a "pure" framework Yeah, I'd also like to know what a pure framework is now too. Do you think any piece of software which can be used to build other new things or which has a plugin system is a framework? I mean, Photoshop can take plugins and has a scripting language with filesystem access and a webserver. Are we now claiming that Photoshop is a web framework? &gt; &gt; Stop being so religious. You're just chasing phrases because you think you're supposed to. &gt; Again, incorrect. I am amused that I claim you're just chasing phrases because you're supposed to, that you then tell me that's incorrect, but don't actually take the time to prove it wrong. &gt; I needed somewhere to start, and MVC made sense. Yes, this is exactly what I claimed. You're just saying MVC makes sense. You're not saying why. &gt; I wanted something that was easily to maintain and clearly laid out, and MVC provides me with the foundation for doing this. Whuh? How does MVC get you something that is "easily to maintain" ? How does MVC get you something that is "clearly laid out" ? This is pure, undiluted, high-octane cargo cult programming. That you cannot see it is hilarious.
Ah, ok. You're a troll. Got it.
&gt; Wordpress is very much a framework. If you don't think it is, I suggest you go looking for sites built off of Wordpress which are not blog sites. It provides more API than code. So, Photoshop is a web framework too, because it has a scripting language, a built in webserver and can make things that aren't photoshop? I think you're abusing the word framework because you don't know what it actually means.
&gt; I don't care about following it strictly per say Please don't abuse Latin phrases that you cannot spell and do not know what mean. That isn't what "per se" is for. &gt; it's more that I want to ensure I'm not doing it wrong or badly. Yes, "I need to make everything in MVC so it isn't wrong or bad" is exactly the cult I'm talking about. It's the exact same stupid thing that five years ago was SOA/service oriented architecture, ten years ago was OOP/OOD/object oriented programming/design, fifteen years ago was 3TA/tiered architecture, twenty years ago was modular waterfall, and so on. Five years out it's likely to be NoSQL/key-value webscale database. It's a phrase that amateurs throw around because they think if they just invoke the magic terms, then bad things won't happen and they won't be wrong. There is no actual benefit here. All you're doing is naming a thing and then ascribing beneficial qualities to it that aren't really there. That's what makes it religious. It's magical thinking. &gt; I'm trying to find the optimal solution. Uh huh. "I'm using MVC to find the optimal solution." But you aren't being religious at all.
You **don't** know do you? The entire point of Design Patterns is that they are *generalized* solutions for problems which occur frequently enough that programmer eventually got together and documented these solutions. They are specifically *designed* so that they can be adapted to a variety of different problem domains without having to know about the specifics of each code-base. To use your furniture example: yes every house is necessarily unique, *but* every house also has preset patterns. For example, how do you watch TV comfortably with multiple people? Answer: the Couch and Coffee-Table pattern. How do you have a place to cook, store, and prepare food without going out of your way? Answer: the Kitchen Refridgerator-Stove-Cabinets pattern followed by the Dining-Table-and-Chair-close to the Kitchen pattern. You also have lots and lots of conventions or mini-patterns that tend to work out well in the long run: e.g. doors knobs should always on the right hand side, doors always swing to the inside, light switches should always be about elbow-height and located near the entrance to the space, etc. Your house may have individual quirks, but chances are that it'll follow some if not most of these common patterns. Architects and Civil Engineers don't build houses to be complete unique most of the time. If you ask me, for example, how to keep your books and video games within easy access in the living room, I can tell you to get a book shelf and an entertainment center without having to ask you exactly how much your books weigh or what games you have. The fact that you can't seem to generalize Design Patterns suggests, to me, that you don't actually understand them. Maybe you've read about them in some book, but I find it hard to believe that you've used them much in practice.
Thanks, you're making my point for me. &gt; The entire point of Design Patterns is that they are **generalized** solutions for problems which occur frequently enough that programmer eventually got together and documented these solutions. Specifically, they're not a "one size fits all". What works for me may or may not work for you. If you're not experienced enough to know which patterns you should use then you should spend more time learning the patterns and less time asking random users on the internet to do your work for you. Patterns are implemented on the architectural level, and since you're asking for help on an architectural level than that only suggests that you're not adequately equipped to work on an architectural level.
&gt; Well, there are two fundimental ways of viewing MVC. Yeah. The one that comes from the book, or the wrong one someone learned from blogs, proggit or Apple documentation. &gt; As a pattern, it is important to implement correctly, and is also not easy to do (or at least nobody has done it "correctly" as I have seen in the web world). It is ... trivial to implement. Absolutely trivial. The reason everyone gets it wrong on the web is that none of them have read the book and none of them understand what they're trying to make. If you think it's difficult, you haven't read Gang of Four. In PHP, it's five simple lines of code; the same general scale is true in almost every other web-focussed language. In Python, it's a one-liner. &gt; But as a separation of concerns principle, it's another story all together. There is no separation of concerns in MVC. This is the same religious magic that comes from the three-tiered architecture mindset. "Put everything in its proper box and problems will vanish!" What you're trying to discuss has nothing to do with the pattern in the book. &gt; It's about separating presentation from business logic from user interaction logic. What? No it isn't. Presentation and user interaction logic both live in the view. In many cases, business logic is there too - one trivial common case is form validation. You're just waving your hands around. &gt; As long as you have done that, you have done the MVC principle correctly. Bullshit. Not only does this not hold up to even a trivial inspection, but it has absolutely nothing to do with the pattern in the book. &gt; If you say you implement the pattern, then you should implement the exact pattern specified in UML. UML cannot represent MVC. It's clear that you have never read the book. What I cannot understand is why you're trying to make the case for taking the name from a book of patterns and using it to mean something other than what's in that book of patterns. At that point, the phrase is just the cereal box in which whatever speaker is talking finds the toy prize they actually want to talk about, and the next person to talk about this will try to turn MVC into database staging. &gt; To do otherwise degrades the meaning of patterns in general... He says, having levied an argument which makes absolutely no sense in the context of the book that defined these terms, which he obviously hasn't actually read. Please get off the soapbox.
Well, you're welcome to consider them that, but it's not correct. I mean, I could consider you to be the lost city of Atlantis, but that doesn't mean you'll suddenly have a water-logged library.
Of course I am! When someone points out that you're being a dishonest asshat, they're automatically a troll. The alternative is that they may have a point. Since that's not possible, seeing as how this is you we're talking about, and seeing as how the other person used sarcasm, they must be a troll! Of course, none of that changes your dishonesty, but whatev's man, no one but a troll would ever call you on it, everyone knows that.
I've never hit the limit, but the library does check if the limit is hit.
Yes. It will return a lot more than just lat/lng. Check the [GeoHelperLocation](https://github.com/synewaves/geo_helper/blob/master/lib/mappable.php#L452) class.
Wikipedia definition of framework: &gt;a software framework is an abstraction in which software providing generic functionality can be selectively changed by user code, thus providing application specific software. It is a collection of software libraries providing a defined application programming interface (API). http://en.wikipedia.org/wiki/Software_framework It goes on to list 4 things that distinguish frameworks from regular libraries. Drupal and Wordpress satisfy all 4 conditions. So do you care to explain your rationale? Just because they are marketed as CMS solutions doesn't mean they can't be used effectively as frameworks. Wordpress and especially Drupal provide a lot of generic functionality that you can be employed to build any kind of site.
&gt; Specifically, they're not a "one size fits all". No one said that. Design Patterns are tools. Sometimes you need a screw driver, and sometimes you need a hammer. I'm not asking to take hammers and screw-driver to everything I run into. I'm asking if anyone has found a good tool to take care of a single problem. &gt; What works for me may or may not work for you. Wrong. That's exactly what Design Patterns do. If I need represent and store business objects into a Database (or even a file), I can use a [DAO](http://java.sun.com/blueprints/corej2eepatterns/Patterns/DataAccessObject.html) Pattern regardless of whether I'm writing a Point of Sales App for a Car Dealership or if I'm writing a CRM for an Insurance Company. If I need to loop through a list of things, I can use an Iterator, without knowing if I'm iterating through user accounts or if I'm going through an inventory. That's the **whole point** of Design Patterns. &gt; Patterns are implemented on the architectural level, and since you're asking for help on an architectural level than that only suggests that you're not adequately equipped to work on an architectural level. This is a Catch-22 and beyond stupid. You're basically suggesting that it's a sign of weakness to ask for pointers. How else do you learn? Why do programmers go to User Groups if *not* to ask for pointers and bounce ideas off of each other? Why even have this sub-reddit? If asking questions bother you, then why the fuck are you even here? And lest you be confused (okay anymore than you already are), I am *not* asking for anyone to design this thing for me. I am explaining what is (to me) a rather simple and common problem and seeing if anyone might have come up with a better solution than what I already have in mind.
Since you evidently know it all, why bother to even ask here on reddit? \*yawn\* you bore me. You'll learn some day... I can only lead you to water, I can't make you drink. 
I was pretty clear about it being an opinion based statement when asked about it, I'd say I was being honest. You're just getting rabid for no real reason. If it's any consolation, you did successfully draw me in.
&gt; What? You honestly think you can just broad-handedly say that no plugin author has attempted to structure their work this way? What are you, Dwight from The Office? Did I say that **no** plugin author has attempted to structure their work this way? I don't see that anywhere in my previous message. I was disagreeing with you stating that **many** plugins implemented MVC. I'm sure there are plugins out there implementing a variety of patterns and principles. &gt; You appear to be taking the position that if something is MVC it isn't bad. You misunderstand me. Regardless of your approach, paradigms, languages, patterns, and principles, you can still write bad code. I could create a perfect MVC program dividing everything up clearly, but still write a terrible application. I believe that if you implement an app following some of the guidelines of MVC "properly" you can layout your application more clearly. I am **not** saying this is the only way to layout your application clearly, merely one of the ways. &gt; The reason I take this interpretation is that your explanation of why I'm wrong to say that many WP plugins are MVC - something I said because I can name them, not because I'm throwing around the word "incorrect" on grounds of my imagination - is that you say they're actually mostly badly designed. Again, I was unclear. A plugin can implement MVC and be poorly programmed, and I've seen several that are. There are plugins that don't implement MVC and are designed great though. &gt; The only way this isn't a non-sequitur is if you think something can't be badly designed if it's MVC. As stated above, this is not what I think. &gt; Have I misunderstood you? Because frankly, I want to have misunderstood you - that interpretation would be jaw-droppingly naive, and I'd be happier if there was a different way to read that text that I just haven't caught. Yes, you misunderstood me. Possibly because I was unclear. Possibly because you have misconceptions about me. Possibly a combination of both factors. &gt; It's a CMS, yes. I'm curious what you think a framework is. Would you humor me in defining it? Hmm, this does it: &gt; From my perspective, a framework does several things: &gt; * it makes it easier to work with complex technologies &gt; * it ties together a bunch of discrete objects/components into something more useful &gt; * it forces the team (or just me) to implement code in a way that promotes consistent coding, fewer bugs, and more flexible applications everyone can easily test and debug the code, even code that they didn't write WordPress makes it super simple to setup new types of objects, shopping carts, and anything else you might want to do with a website. It takes "complex" technologies like databases, authentication, templating, etc. and wraps it up into easy to use classes and functions. WordPress "ties" together admin interfaces, templating, routing, JSON responses, AJAX, RSS integration, user authentication, and a variety of other tools into a single application. WordPress enforces the last point to a degree, though not as strong as it could. It does have a debug mode and recommends that plugin developers make sure there are no notices in this mode. Plugin developers have to create a file/folder structure following a loose description in a central location. It encourages the use of actions and hooks and other coding practices, and encourages plugin developers to include hooks and filters making their application more flexible. &gt; Yeah, I'd also like to know what a pure framework is now too. I'd say a pure framework provides the tools but not the implementation, such as CodeIgnitor or Symfony. Frameworks like Django contain an optional admin interface, and frameworks like WordPress provide an implementation on top of a framework (The entire admin/front-end templating system). &gt; Do you think any piece of software which can be used to build other new things or which has a plugin system is a framework? Not necessarily. WordPress can easily be turned into any type of web application. Something like Photoshop cannot easily be turned into something it is not for instance. WordPress can not only be used in many situations, it is encouraged. WordPress with the release of 3.0 is meant to be more of a foundation for developers, allowing them to build E-Commerce sites and not just blogs for instance. &gt; I am amused that I claim you're just chasing phrases because you're supposed to, that you then tell me that's incorrect, but don't actually take the time to prove it wrong. What the hell do you mean, chasing phrases? Maybe the wording of my post could use improvement but I assumed most *competent* people on this subreddit would understand afting reading my post. I'm not so much asking if my approach followed MVC to the letter, but more asking if my methodology was "good" or if I could improve the flow to make it better. You're tearing about my post for no reason, and I don't think you really know what you're talking about. I have no doubt you're intelligent and know lots about programming, but you have veered way off topic and are picking apart miniscule details like if WordPress is or isn't a framework by your definition. &gt; Yes, this is exactly what I claimed. You're just saying MVC makes sense. You're not saying why. MVC made sense because I had an understanding of the concept and I already had experience implementing it (partially) in the past. It made sense because I knew it and so the time I'd have to spend reshaping my application and changing how I wrote plugins was minimal. If I learned a better method in the future I could change what I did. Programmers don't start off knowing the best solution, and the best solution at the time may not remain the best solution. &gt; Whuh? &gt; How does MVC get you something that is "easily to maintain" ? &gt; How does MVC get you something that is "clearly laid out" ? &gt; This is pure, undiluted, high-octane cargo cult programming. That you cannot see it is hilarious. I believe it is you who are throwing words around now. Before, I had something like Products.php which handled the saving, the rendering, the view, etc. It was just a huge mess. Now I have several files, nicely laid out like: ProductsController.php ProductsModel.php ProductsListBuilder.php I know that ProductsModel.php handles retrieving and formatting objects from the database, saving, validating, etc. I can also abstract this file so I don't have to re-use so much code all over the place. This is clearly laid out (to me) at least. Before, it was not so clearly laid out and I had a lot of code repition but now I follow better OOP and I follow better OOP because I was separating concerns according to what I had learned reading up about the MVC pattern. 
&gt; Since you evidently know it all, why bother to even ask here on reddit? You seem to have a problem with reading. I'm here because I know I'm probably not the smartest programmer here. I came up with a solution that worked but I'd like to see if there's a better one. I'm asking on the off-chance that someone may say *"Oh yeah, I read an article about that. It's called the ContextHelperCompositeWhatchamacallitFactory, and it solves that exact problem. Here's the link"*. &gt; *yawn* you bore me. You'll learn some day... I can only lead you to water, I can't make you drink. You're a pissant and a fucktard. Good day to you, sir.
&gt; Wikipedia definition Ah, got it. &gt; So do you care to explain your rationale? Oh, just what the words have meant for the last 30 years. *shrugs* You could read SICP, I guess. I'm not going to argue with Wikipedia. If you're ready to learn engineering terms from the faceless masses, and argue with the CS classics, then this is going to end up "screw the intelligentsia, it's a matter of popular conviction," and I'm going to walk away annoyed while you feel more set in your ways due to "winning" a dogmatic conflict. It's not worth the time.
&gt; You're a pissant and a fucktard. Good day to you, sir. Let those true colors shine! Make your momma proud! What a mature individual you are.
So... were you going to explain your problems with Wikipedia's definition which might help me gain some insight into why I'm wrong or did you just want to continue being a smug douchebag?
I calls it like I sees it.
For got sake dude ಠ_ಠ. &gt; Please don't abuse Latin phrases that you cannot spell and do not know what mean. That isn't what "per se" is for. Thank you for correcting me, I had no idea. See what I did there? I admitted I was wrong. No, I'm not saying you've been wrong in this thread. I'm saying that I made a mistake, you corrected that mistake, and I've learned from it. I will now use "per se" properly from now on (I hope). People make mistakes. You don't have to insult them or tear them apart, you correct them. It's after repeated misuse that you give up on that. &gt; Yes, "I need to make everything in MVC so it isn't wrong or bad" is exactly the cult I'm talking about. Not what I think at all. My code has been wrong/badly written/organized in the past. I am trying to fix this. In my research, I found a pattern called MVC that has a lot of information on the Internet. It seemed like it would fix *some* of my problems. I don't think it's the *only* way to fix these problems, merely the best solution *I* personally have found so far. &gt; Uh huh. "I'm using MVC to find the optimal solution." &gt; But you aren't being religious at all. I said "I'm trying to find the optimal solution.". If MVC is not the right tool for this, then I won't use it. But I don't know if it's the right tool or not. I've done *a lot* of research, but as I'm sure you are aware, the Internet contains a plethora of incorrect information. When you cross-check your information and find more information backing up, you normally assume the information is correct (Which I did), although the possibility exists that both sources of information are incorrect. How are we supposed to know unless somebody gives us useful information proving otherwise that we can verify? You've done nothing except say MVC is not the right approach, you have yet to tell us a better approach.
WordPress in it's basic configuration is a blog. Photoshop in it's basic configuration is a photo manipulation tool. WordPress provides the foundation, tools and intent to allow you to turn it into an E-Commerce website. Good luck finding an implementation of Photoshop as a video manipulation tool. Photoshop provides the mentioned tools to assist you in the task it was designed for. WordPress provides tools to give you the flexibility to make it do whatever you want.
It's starting to sound like you are some kind of purist. I was taught *some* of what I know from my computer science education, and a lot of what they taught me has proved to be incorrect. How are we supposed to discern the difference between was is proper and what is not with millions of sources of incorrect information. We're not going to know the best way or the right way to do everything right away. It's something you gain with experience. Or you know, when something decides to be helpful and explain it instead of telling you you're wrong and that's that. 
A few things to keep in mind: PHP is not a fully OOP language. This means you're going to have to do some setup to get a user to the controller. The thing to realize about MVC, is you expose ways for users to classify things as either a model, view, or controller, but ultimately the most your approach is doing, is executing some method inside a class you've specified as a controller. This is considered the [front controller pattern](http://en.wikipedia.org/wiki/Front_Controller_pattern) As you'll see from that link, you're right on the money. My only critique is it looks like each page would require a whole new class to run, which can get obnoxious especially when doing CRUD stuff, where it should all logically be in the same class. I think your best bet, is to find some other way to handle the presentation method. I think you're on the right track with wanting to handle it rather then just ignoring it, but I think it can be done better. For example: You have an ajax request with a graceful fallback in case they've disabled javascript. you need to query the exact same data, and deal with the same GET parameters, but in your example that would require two functions with pretty much identical code. Maybe the right answer is have a View Factory method which finds what the presentation layer is, and loads a different view based on that. Then your controller code is identical through out, and you can create a different view based on different display needs
Perhaps you could link to the part of SICP that explains how they are not frameworks? It is available in full online and all. I looked in the index and it doesn't seem to have the term framework listed. Since you're so fussy about all this you'd think you'd be interested in actually providing information of substance to people. 
The saddest part is that I'm trying to give you what you later say you want, but you aren't reading through the rage glasses well enough to see it. Cut out the bold for emphasis please. It's annoying. If you want to emphasize something, emphasize it with proof, not assertions in asterisks. &gt; &gt; &gt; &gt; Many WP plugins are MVC &gt; &gt; &gt; Incorrect. &gt; &gt; You honestly think you can just broad-handedly say that no plugin author has attempted to structure their work this way? &gt; Did I say that no plugin author has attempted to structure their work this way? Yes. You did. Cut out the childish semantic games, please, and stop removing context and acting incredulous to pretend you didn't do what you did. &gt; &gt; You appear to be taking the position that if something is MVC it isn't bad. &gt; You misunderstand me. It's unfortunate that, in answering whether I misunderstood you, you ignored every step in why I believed that, and completely failed to show how my interpretation did not still hold. Helpfully, you also failed to quote the steps, thereby pretending they weren't there. If you do not believe that to be MVC prevents bad code, then why did you bring up that most plugins were poorly designed as your only reason to support your claim that I was incorrect when I said there were many WP MVC plugins? &gt; I believe that if you implement an app following some of the guidelines of MVC "properly" you can layout your application more clearly. I would like you to explain this belief. It is important, if you want to emphasize proper usage, that you actually refer to the design pattern from the book, as you yourself opined needed to not be watered down. The reason I point this out is that what you're saying MVC does does not actually align with my understanding of the book text, which leads me to the belief that you've never actually read the book, and that you're just saying proper in quotes to take a position of correctness without any actual underlying basis. In short, I don't think you know what you're talking about, and your curious choice of phrasing about "proper" and not wanting to water the book down put you in the position that your claims are actually falsifiable. Now, given that you didn't actually address any of the questions you were asked last time, but just went off asking your own questions peppered with insults, as if this was a monologue, I don't actually expect you to address what's said to you here either - largely because you cannot do so without admitting you're wrong, and I believe you cannot admit you're wrong. But, just to line the tin: In what way does "proper MVC," your own phrase, and by your own admonition drawn from the book, actually lead to clearer or more maintainable applications? I'm calling your bluff. You asked me to explain my position, and when I did, you just ignored it, because you cannot admit that you're wrong. Now, I want you to explain your position. However, I expect that you will not. &gt; A plugin can implement MVC and be poorly programmed, and I've seen several that are. This seems directly contrary to your earlier claim that I was incorrect when I said that many WordPress MVC plugins exist. You appear to be suggesting that you had prior knowledge of the things you earlier claimed there were not, in fact, many of. Am I correct in believing that next you will pretend you don't know what many means, and will try to cast me as having claimed a majority, which I never did? This is... kind of ridiculous. Are you one of those people who will just dig themselves ever-deeper instead of admitting a mistake? &gt; Possibly because you have misconceptions about me. It's bizarre that, when I said I didn't want the interpretation I had and was looking for others, you try to cast this as me having misconceptions about you. The attempt to victimize yourself is not making your position for you, sir. Please stop trying to turn this into villainy. It's also amusing that you felt the need to respond "you misunderstood me" five separate times to a single question which itself presupposes that it is wrong, ostensibly to make it look like there are many errors when in fact there are zero. *I knew I was misunderstanding you. It says it right there in the text. Stop trying to invent five errors, and stop trying to turn the fictional errors into personal attacks.* &gt; Hmm, this does it: &gt; &gt; From my perspective, a framework does several things: &gt; &gt; * it makes it easier to work with complex technologies &gt; &gt; * it ties together a bunch of discrete objects/components into something more useful &gt; &gt; * it forces the team (or just me) to implement code in a way that promotes consistent coding, fewer bugs, and more flexible applications everyone can easily test and debug the code, even code that they didn't write By this logic, a printed paper document that has requirements about naming conventions is a framework. A manual is a framework. An operating system with a shared clipboard is a framework. The help desk technician in the IT department is a framework. The Eclipse programmer's editor with the formatting standards plugin turned on is apparently now a framework, as is the third party HTTP API for PayPal. Batch files, bash scripts, Python, and the book Design Patterns are all now frameworks. This "definition" is not only too broad to have a meaning, but also is in direct contrast to the real definition, which with respect it's actually pretty apparent that you do not know. &gt; WordPress makes it super simple to setup new types of objects, shopping carts, and anything else you might want to do with a website. It takes "complex" technologies like databases, authentication, templating, etc. and wraps it up into easy to use classes and functions. So PHP is a framework? &gt; WordPress "ties" together admin interfaces, templating, routing, JSON responses, AJAX, RSS integration, user authentication, and a variety of other tools into a single application. That's because it's an application. Le cough. &gt; I'd say a pure framework provides the tools but not the implementation, such as CodeIgnitor or Symfony. Frameworks like Django contain an optional admin interface, and frameworks like WordPress provide an implementation on top of a framework (The entire admin/front-end templating system). It's like listening to someone talk about the various kinds of atheism. &gt; &gt; Do you think any piece of software which can be used to build other new things or which has a plugin system is a framework? &gt; Not necessarily. WordPress can easily be turned into any type of web application. Something like Photoshop cannot easily be turned into something it is not for instance. Photoshop's built in scripting language is actually quite expressive, and is turing complete; it has an extension API, and third parties have made MySQL drivers for it. There is absolutely nothing stopping you from using Photoshop as a web backend, other than that it's a stupid thing to do. It can do literally everything that PHP and Python can do, just much less conveniently, and much less well. So, I ask you again: is Photoshop a web framework, in your eyes? &gt; WordPress with the release of 3.0 is meant to be more of a foundation for developers Yeah, yeah, that's what they said about 1.0 and 2.0 too. Talking points aren't really interesting in an engineering discussion. &gt; WordPress can not only be used in many situations, it is encouraged. Who *cares*? You can say this about PHP too. Engineering terms are not defined in terms of what a given community has emphasized. Something isn't a framework because people told you to be creative with it. That's just silly. &gt; WordPress with the release of 3.0 is meant to be more of a foundation for developers, allowing them to build E-Commerce sites and not just blogs for instance. WordPress has zero value for eCommerce which isn't inherited from the parent language. Drink less kool-aid. eCommerce is about accepting payments, managing stock, et cetera. All WordPress is is a blog that's talked you into thinking it's a golden hammer. If you would seriously use WordPress for eCommerce, then I think we've come to the point where your skill level is pretty apparent, and where I no longer have to worry about your "definitions," in contrast to what the word really means, that are so wildly encompassing that they become absolutely useless in meaningful discussion. &gt; What the hell do you mean, chasing phrases? I don't think I'm able to explain this to you at your current level of savvy. The reason for this is your "WordPress for eCommerce" bit. There's way too much magic thinking going on here. (continued because it's too long)
&gt; I assumed most competent people on this subreddit would understand afting reading my post. The luxury of assuming that everyone who disagrees with you merely doesn't understand you is a luxury of the ego: it allows you to feel correct, but in those cases where you have something to learn, you don't. Would you rather feel correct or learn? &gt; I'm not so much asking if my approach followed MVC to the letter As I've already said, I don't believe you've read the book in question; this constant insistence on "following MVC to the letter" doesn't really make sense in context. What I'm saying is that you don't actually know what the phrase means at all. I don't mean you're near missing it. I mean you're out in the baseball diamond's left field, and we're all playing hockey. In a different city. But yes, just put italics around the word competent. Clearly, it's better to assume someone is terrible when you aren't addressing the clear logic they're presenting and openly admit you don't understand the things they're saying. It's unfortunate that you retreat to this sort of thing. It means that the next time someone tries to chip through your golden hammer shell, they're also unlikely to succeed. &gt; You're tearing about my post for no reason Pretty big gulf between "a reason I don't understand" and "no reason." &gt; but more asking if my methodology was "good" or if I could improve the flow to make it better. Your methodology is not good. Your current reaction is emotional self defense to prevent yourself from having to realize that. "How dare he question The Word?" He dares. &gt; and I don't think you really know what you're talking about Well, let's exchange code and find out. Where's yours? One example library of mine is at http://scutil.com/ ; if you don't speak the languages in there, I can give you others. Notably, some of my code is in WordPress, but hey, maybe I don't know what I'm talking about, right? :D Let's see some of your work, if you want to play competency games while ignoring the specific questions you're being asked. &gt; I have no doubt you're intelligent and know lots about programming, but you have veered way off topic and are picking apart miniscule details like if WordPress is or isn't a framework by your definition. Looool. Yeah, that's a miniscule detail. :D This is a little bit like when NoSQL people benchmark a durable on-disk foreign keyed SQL database against an in-ram non-keyed database then say "it's a miniscule detail that I'm adding keys to one but not the other, and that a power failure will kill one but not the other." The hubris of assuming that anything you don't understand is unimportant will cost you a lot, in the long run. &gt; MVC made sense because I had an understanding of the concept For several posts now I've been trying to get you to display this. &gt; and I already had experience implementing it (partially) in the past. And now we get down to the truth: "I did it this way because I've done it this way before." If you had just said that, instead of trying to make it be about a bunch of fake correctness topics you don't half-understand, then there would have been no issue. But instead you pretended that MVC gave you correctness, and cleanliness, and maintainability, and that it was important to stick to what the book says, when what the book says doesn't get anywhere near what you're saying, and when called on that, and asked to explain your position, you pull a Michelle Bachmann and accuse the other side of being clueless for asking you to explain your own error. It's just ugly. &gt; It made sense because I knew it and so the time I'd have to spend reshaping my application and changing how I wrote plugins was minimal. Okay. That's reasonable. It's just not even close to what you were saying before. Before, you were doing a bunch of bullshit peacocking about engineering quality issues which aren't actually real. Issues you've raised without being asked to, been asked to explain, and are avoiding, while calling the other guy clueless. Come on, dude. &gt; If I learned a better method in the future I could change what I did. I was going to teach you one, but you acted the ass, refused to explain your own position, and called me clueless. &gt; Programmers don't start off knowing the best solution And programmers who are told they're doing something stupid and throw a tantrum never learn them, either. &gt; &gt; Whuh? How does MVC get you something that is "easily to maintain" ? How does MVC get you something that is "clearly laid out" ? This is pure, undiluted, high-octane cargo cult programming. That you cannot see it is hilarious. &gt; I believe it is you who are throwing words around now. Translation: I ask you to explain a bunch of your own phrases, and instead of answering, you just make some bullshit accusation and ignore your own text. &gt; Before, I had something like Products.php which handled the saving, the rendering, the view, etc. It was just a huge mess. Oh, you're like the Agile/XP/Scrumm cultists. "Before, I had no design at all. Now I have exactly one. That means that this design is always great, because the alternative is chaos." And this is why you're being told you have a Golden Hammer problem. Remember Maslow's Law of the Instrument: "it is tempting, if the only tool you have is a hammer, to view every problem as a nail." And this is what you're canonizing for MVC, but you're so busy proving you're correct that you're missing the learning experience that just a minute ago you paid lip service to wishing you could get. That's the problem with amateurs. They never understand that criticism is something to be thanked over, instead of defended against. (Once they make that critical leap, they quickly cease to be amateurs; it is in many ways tautological.) Your pride is the only thing preventing you from growing, kid. &gt; This is clearly laid out (to me) at least. Yes. You have a golden hammer. Nobody said you didn't. It's just that you're so busy proving your hammer is a real hammer that you're forgetting the nature of the criticism. Having a golden hammer is great, when your problem actually is a nail. What you described has no reason to be MVC; it's just that you are spending too much time praying at the church of MVC to learn anything else. Same reason you want to make an eCommerce site in WordPress, without apparently having noticed that WordPress doesn't actually provide anything an eCommerce system needs other than themes and a user system. But hey, at least you can feel correct while preventing yourself from growing in the way you say you wished you could. Le sigh. Have fun with that, chops. If you are open to calming down, apologizing and asking like a normal guy, I'll still help, but honestly, we both know you're too busy justifying the abuse you imagine you received to get assistance.
Ahahaha. Thanks though :)
First of all I have to go to work for 5 hours so I'll reread this and respond later. Second of all, one of us doesn't understand MVC and I'll assume it's me something I've only recently begun to look into. I've never heard of the book "Gang of Four" but will read it tonight after work so that I can see your side of the argument better. All my information about MVC was obtained online, and it looks like that information wasn't entirely correct/accurate. Never heard of the book you mentioned before this thread though, so thanks for the mention. Also, this post is me admitting that I'm probably misinformed. :)
Pro tip: if you want someone to explain themselves, it helps to not call them a smug douchebag.
Pro tip: if you want to call someone wrong, it helps to provide reasons why. Otherwise I have no choice but to assume you're full of shit; especially since you've been dodging the explanation for 3 replies now.
Yeah, it turns out ctrl+f isn't as good as reading the book. I'm not gonna read it for you, and I'm not really encouraged to help by someone who speaks to me in this tone. Flies with honey; flies with vinegar. Feel free to interpret as me hiding from an error if you want; I don't really care if you believe me.
&gt; Thank you for correcting me, I had no idea. See what I did there? I admitted I was wrong. Yes. Pity you won't do it where it matters, and that you must take such an ugly tone while pretending to apologize. &gt; You don't have to insult them I haven't. &gt; In my research, I found a pattern called MVC that has a lot of information on the Internet. And now we come back to the thing you earlier said I was wrong about as an admission: you're one of those people who learned it from proggit, blogs and Apple, and you have no idea what it means. Christ. And after all that time you spent talking about being pure, proper, correct, and not allowing the true meaning to be watered down. &gt; I said "I'm trying to find the optimal solution." And apparently with no irony. It's sort of amazing. &gt; If MVC is not the right tool for this, then I won't use it. You don't have the skillset to make this determination, so paying this lip service is meaningless. &gt; How are we supposed to know unless somebody gives us useful information Mostly by reading. It doesn't matter: I tried to give you useful information, and look what you did. &gt; you have yet to tell us a better approach. I asked you to justify your approach, because maybe you had a good reason that just wasn't apparent in the amount of data given. You immediately threw a self-indulgent tantrum. Of fucking course I didn't. &gt; It's starting to sound like you are some kind of purist. It's starting to sound like you are some kind of clueless. &gt; We're not going to know the best way or the right way to do everything right away. The way you react to being criticized, you're *never* going to know the right way to do things. &gt; Or you know, when something decides to be helpful and explain it Stop biting the hand that feeds you, and you'll be amazed how less hungry you are.
&gt; Good luck finding an implementation of Photoshop as a video manipulation tool. I don't know whether it'd be funnier to point to Premiere, to the video stuff that's been in Photoshop for the last five years, or the various community projects that had added animated GIF support to Photoshop 3 back in the 80s. My point was simpler: you can (shouldn't, but can) use Photoshop to make an eCommerce site driven by MySQL. Does it qualify as a web framework? It fits your stated criteria. &gt; WordPress provides tools to give you the flexibility to make it do whatever you want. I'm not sure why you believe WordPress supports extensions better than does Photoshop. 
&gt; I've never heard of the book "Gang of Four" I should not have called it that; that's it's community slang title, because it has four authors as well as by reference to the Chinese political event. The proper title of the book is *Design Patterns*, and it's by Gamma, Helm, Vlissides and Johnson. &gt; All my information about MVC was obtained online, and it looks like that information wasn't entirely correct/accurate. Have a change of pants ready when you read the book. You're going to learn a lot about just how clueless programming blogs and proggit actually are.
&gt; Otherwise I have no choice but to assume you're full of shit Actually, you have another choice: you could ask in a less ugly way. (shrugs) Your choice is made, whether or not you understand that there were other options than to behave much worse than that about which you are complaining. I had already walked away before you started asking, and I had explained that the reason was because you were going to do this. &gt; especially since you've been dodging the explanation for 3 replies now. "You're going to get ugly, so there's no point." You proceed to get ugly. Yeah... I'm dodging it, not just seeing your poor behavior coming and not wasting the time. Really.
WP's idea of an API is a group of related functions with hard-coded things in them that may or may not be in a class that you could extend and modify as needed. Additionally, you can't change the data relationship models and it has no helpers to design or work with new data models were you to create them (in straight SQL but why would you do that?). No matter what you do, if you go through WP and its methods, a given thing will be a post that has one author, has one status, has many comments, etc. So, no, WP is not a framework.
WP provides *nothing of the sort* for turning your website into an e-commerce site. Plugins do that. Plugins built from scratch using their own SQL and their own tables to develop data models that do not and will not ever exist in WP. They're two separate entities connected via a little UI code. That hardly makes WP a framework.
What is it going to take for you to answer my question cause I'm really curious now. I'm not one of those people that can't admit when wrong but you've got to give me something to work with. All I can gather is that there is some CS academic wisdom that has some key differences from Wikipedia's definition and I just don't think that is true. In fact, I just consulted with two friends with CS degrees from two different top ranking schools and they are also curious. To your point though, I was ready to have a mature debate with you (see my first response where I give the Wiki definition) but all you wanted to do was insult my intelligence with some nebulous reference to CS intelligentsia... sorry that I could not think of a more perfect way to describe that and your initial response about Atlantis than to say you were being a smug douche.
You could be even more clear by editing the initial post. But of course you won't do that, it wouldn't afford the opportunity to describe someone as rabid, and we can't be havin' that now can we!
this is how ive done it in teh past... $sourcevar = '1,7,2'; $sourcevars = explode( ',', $sourcevar ); // get a string like $sourcevar but with ? instead $sql = sprintf( 'SELECT * FROM table WHERE COLUMN in(%s)', implode( ',', array_fill( 0, count( $sourcevars ), '?' ) ) ), $data = $db-&gt;prepare($sql); //loop throgh and bind all variables for( $i=1; $i&lt;= count( $sourcevars ); $i++ ) $data-&gt;bindValue( $i, $sourcevars[$i] ); } 
\+1. MVC is a bit of a buzzword. In particular, when it's applied to the web, the categories of M, V, and C don't make much sense so they just get assigned to something at random (the responsibilities of each vary significantly between frameworks). Do something that works. Terminology like MVC only adds ambiguity.
&gt; I was ready to have a mature debate with you (see my first response where I give the Wiki definition) but all you wanted to do was insult my intelligence (sigh) Just can't stop, can you? &gt; What is it going to take for you to answer my question &gt; sorry that I could not think of a more perfect way to describe that and your initial response about Atlantis than to say you were being a smug douche. Apparently something that is beyond you. Funny how I even named the book, yet you're all angry about something you said just yesterday in a far less useful way. &gt; &gt; I'd be happy to discuss it with you but like I said, it is a very complicated and dense topic. If you're really interested in learning I can recommend some great books... Smells like hypocrisy from here. When someone tells you that what you need to do to get what you want is to stop insulting and making personal attacks, and you respond with more insults and personal attacks, you make it clear that you just wanted to look like you wanted to give them a chance, and you're really just angling to say "see, you never had a point all along." Maybe one of your two academic friends will be curious enough to figure it out, instead of waiting on you to ham-hand your way through not getting what you want. Have a nice day. 
Stop feeding the troll. Realize he has nothing to offer. He is a smug, hypocritical, neckbeard. It isn't worth feeding his tiny ego by giving him the attention, he thinks he deserves and silently craves.
Wow seriously dude? You pulled a comment where I was discussing racial issues in the United States and are comparing it to me asking you to explain what constitutes a software framework in your mind? I don't even know how to respond to that. There is really something wrong with you if you think those two topics are in any way comparable in terms of scope or complexity. Trust me if I thought I could explain my point about racial perspective in less than 5,000 words to that fellow I would have, especially if he called me smug. How is "I'd be happy to discuss it with you" and what you're doing in any way the same? The only similarity between our little debate here and that comment is that we both recommended books in lieu of typing our own response. The difference is I named a book directly about the specific topic we were discussing, which happens to be so complex and not to mention somewhat subjective that there are hundreds of thousands of studies and books written on it. Meanwhile you recommended 'SICP,' using an acronym not even the full title or mentioning authors. Your objective was obviously to try and show off that you're a CS major or something along those lines because you know about a textbook from the mid 1980s. The implication being that you are more qualified than me and that I'm so ignorant (because I'm not a CS 'engineer' - lol) I wouldn't even understand your explanation. How is that not smug? If you need a book to explain what constitutes a framework then yeah I'd say you're wrong. What you did is the equivalent of someone asking me why volcanoes erupt and me telling them to pick up a book on physics or something. Do you really not see why your "Helpful" suggestion to read SICP is absurd? Anyway, I looked through the index and the table of contents of that book and I couldn't find one mention of frameworks. If you can tell me a specific chapter to read I'd love to learn why I'm wrong. But I'm not going to read an entire textbook on computer science just to find out what may or may not be wrong with Wikipedia's definition of a software framework. So here we sit, you still haven't explained why I'm wrong. I'm beginning to think you're trolling me. I'm trying to be polite, but if you want me to apologize for calling you a douche bag, that's not going to happen my friend. 
is it bad that I want to use this CMS simply because it has elefant in the name?
Dammit did I get trolled hard? I was beginning to think so but had little interest in going through his comment history. edit: curiosity got to best of me. it turns out, yes he is possibly one of the greatest trolls ever though maybe not intentionally. in fact he has some fans: http://www.reddit.com/user/StoneCypherIsACunt
&gt; You pulled a comment where I was discussing racial issues in the United States and are comparing it to me asking you to explain what constitutes a software framework in your mind? No. I'm pointing out that I said "it's in this book" and you shat your pants, but the other day, you said "I could give you some books." &gt; There is really something wrong with you if you think those two topics are in any way comparable I don't. I never said I did. Work on your reading skills. &gt; meanwhile you recommended 'SICP,' using an acronym not even the full title. Knowing that in either case the person listening would have to google it or check it on Amazon, if they wanted it at all, both of which result in the correct answer. You know, since basically everyone calls it SICP. &gt; Your objective was obviously to try and show off that you're a CS major Which I am not. &gt; because you know about a textbook from the mid 1980s. It's sort of startling that someone in Proggit wouldn't. It's on proggit twice a week. &gt; If you need a book to explain what constitutes a framework then yeah I'd say you're wrong. 1) I don't 2) I'm not 3) That isn't legitimate logic. &gt; What you did is the equivalent of someone asking me why volcanoes erupt and me telling them to pick up a book on physics or something No, it isn't. It's me laughing at some kid who can't decide whether he wants to ask for an explanation or tell someone they're wrong while insulting them the entire way, then complaining about the insults he imagined out of text he apparently didn't understand, and acting appalled that he isn't getting his way. &gt; Do you really not see why your "Helpful" suggestion to read SICP is absurd? You seem to be a little confused. What would be absurd would be telling someone to read the sound of the color yellow. Absurd means "a sentence that has no sensible interpretation," not "a sentence some angry guy disagrees with." &gt; Anyway, I looked through the index and the table of contents of that book and I couldn't find one mention of frameworks. That's nice. The words "evolution" and "natural selection" do not occur in the ToC, appendices, index or glossary of The Origin of Species. But yeah, that's a good way to check. &gt; If you can tell me a specific chapter to read I'd love to learn why I'm wrong. I believe I was already pretty clear with you that because of your behavior, you will not receive assistance from me. It's not clear to me why you keep asking for things inbetween insults. The answer is just as no as it was the last several times you asked. &gt; But I'm not going to read an entire textbook on computer science Obviously. &gt; So here we sit, you still haven't explained why I'm wrong. Mmm hmm. &gt; I'm beginning to think you're trolling me. I have been quite clear that you won't get help, and you keep insulting me, complaining falsely that you've been insulted, and asking for more help. And somehow, in your mind, this is you getting trolled. &gt; but if you want me to apologize for calling you a douche bag Not really. You asked me for help. I answered. Granted, I gave you not the answer you wanted, which is why you kept asking, and granted, it seems likely you will do it again. Go ahead and believe whatever you want. I'm not interested in whatever "another chance" you're about to tell yourself is why you're asking for help again from someone who keeps saying no. The answer is no, guy.
&gt;That's nice. The words "evolution" and "natural selection" do not occur in the ToC, appendices, index or glossary of The Origin of Species. Lol ok congrats on a solid troll. You had me going but you got greedy didn't you? Now you've gone and blown your cover. 
preselected base baseline predefined initial
thanks, he is apparently quite the master troll I've discovered. I've got to give credit where credit is due at least he is good at it.
&gt; Now you've gone and blown your cover. That's nice. Have fun telling yourself whatever you'd like.
I mean maybe I'm wrong. It's just that... the full name of the book is "The Origin of Species (by Natural Selection)" and one of the first chapters is then also titled Natural Selection... just fyi. Surely you could've done a quick Google search before you typed out that gem.
[Here's a published list of PHP keywords](http://php.net/manual/en/reserved.keywords.php). If you encounter any not listed here, please, for the benefit of the community and all that is holly, file a bug report to update the documentation or update it yourself if you have the ability. Also, 'app' is not taken.
Well I haven't read the book *yet*, but I do have a copy of it downloaded and "Head First Design Patterns" by O'Reilly sitting on my desk, and I've read the summary of [Design Patterns from Wikipedia](http://en.wikipedia.org/wiki/Design_Patterns), read an article about [MVC on Coding Horror](http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html), and read about [ten popular design patterns implemented in PHP](http://www.ibm.com/developerworks/library/os-php-designptrns/). First of all, I'd like to say I doubt very much that MVC is either what I thought it was or the solution to the problem I am facing. Second of all, I'd like to thank you for pointing me to the Design Patterns book as well as design patterns themselves. I had read about two of the basic patterns, the [singleton and the factory on the PHP manual](http://php.net/manual/en/language.oop5.patterns.php), and never thought much of it. Now I see how much design patterns have to offer. Although I still believe you went about correcting me in a poor fashion, and others have called you a troll for it, you did give me very valuable information that a lot of programmers probably aren't aware of. The Head First Design Patterns book I have was given to me from my employee, but a colleague there told me not to bother with design patterns and they were a waste of time. I should have immediately read the book after reading his code which was atrocious but that is beside the point. Third, you stated the following: &gt; Please don't fall into the "right way to MVC" cult. It's a small pattern from Gang of Four that nobody here even understands correctly. I could be wrong here, but the information I have found suggests that MVC is an [architectural pattern](http://en.wikipedia.org/wiki/Architectural_pattern) while the Gang of Four patterns are called [design patterns](http://en.wikipedia.org/wiki/Design_pattern_(computer_science)). Fourth, I didn't even know what proggit was. I had to Google it (Fail on my part). I actually only read the news related stuff on [/r/php](http://www.reddit.com/r/php) and [/r/programming](http://www.reddit.com/r/programming). I do however read a lot of programming blogs, and they are not "clueless", but it seems many programmers don't know about design patterns and some other concepts (or at least, they do not reference them). However, programming blogs contain a wealth of information about other topics which are very important as well (such as security). ------- Back to your original posts above, a few points of note: &gt; The saddest part is that I'm trying to give you what you later say you want, but you aren't reading through the rage glasses well enough to see it. I did get at least some of what you were trying to say, but you really didn't make it easy. Some more links and info would have been nice instead of ripping up the posts themselves. Something like this: Hey Rogue_Coder, The information you have about MVC is mostly incorrect. MVC is not the solution to your problem, you should instead look into design patterns by gang of four. Once you've read that you will be more equipped to solve this problem correctly. You did *eventually* get your point across but you could have made it easier on everyone :) &gt; Yes. You did. Cut out the childish semantic games, please, and stop removing context and acting incredulous to pretend you didn't do what you did. You said that many plugins implement MVC. Well I don't think very many web apps at all implement MVC correctly after reading more indepth material on it in the short time that I've had, but regardless, many is defined as "The majority of people" ([source](http://www.merriam-webster.com/dictionary/many?show=2&amp;t=1313196142)). &gt; In short, I don't think you know what you're talking about Apparently you were correct &gt; This "definition" is not only too broad to have a meaning, but also is in direct contrast to the real definition, which with respect it's actually pretty apparent that you do not know. I believe the book Design Patterns defines a framework but I haven't read it quite yet. I do however think the definition I used was complete shit and that WordPress isn't a framework as pointed out by you and others. I'm not sure what to call it, but I already knew that WordPress was too poorly designed to be a framework (Their code really is a mess). I'm not sure what to call it exactly, but that is not important. Also, WordPress is a web application. That is what I'll call it (To save you the trouble of explaining this to me :P) &gt; Photoshop's built in scripting language is actually quite expressive, and is turing complete; it has an extension API, and third parties have made MySQL drivers for it. There is absolutely nothing stopping you from using Photoshop as a web backend, other than that it's a stupid thing to do. I had no idea about this :| (Learned lots today) &gt; If you would seriously use WordPress for eCommerce, then I think we've come to the point where your skill level is pretty apparent, and where I no longer have to worry about your "definitions," in contrast to what the word really means, that are so wildly encompassing that they become absolutely useless in meaningful discussion. I've used WordPress for sites where E-Commerce played a minor role (For example, a company site that had many pages but only one area where people could pay to register for a course). I believe this is an alright use for WordPress, but I agree that WordPress doesn't provide tools to make E-Commerce sites. It provides a plugin API that allows you to do what you want, whether you should or not. Very different. I was wrong again. Also, I believe E-Commerce is the incorrect terminology here. I would never use WordPress for a full fledged shopping cart/online store. That is what Open Cart and Magento are for. &gt; As I've already said, I don't believe you've read the book in question; From the table of contents, Wikipedia, and Google I don't think the Design Patterns book from Gang of Four really discusses MVC, merely the design patterns utilized by MVC. Again, I could very well be wrong as I have yet to read the book. &gt; Yeah, that's a miniscule detail. :D Yeah, I'm an idiot. WordPress != Framework. I *knew* that too. I am using the word "framework" wrong. I'll stop. &gt; &gt; MVC made sense because I had an understanding of the concept &gt; For several posts now I've been trying to get you to display this. Ok, Ok. I had no idea what MVC was. Now I have a bit of an idea. &gt; &gt; If I learned a better method in the future I could change what I did. &gt; I was going to teach you one, but you acted the ass, refused to explain your own position, and called me clueless. Please feel free to teach me a better method (If you're not referring directly to learning design patterns). &gt; Oh, you're like the Agile/XP/Scrumm cultists. "Before, I had no design at all. Now I have exactly one. That means that this design is always great, because the alternative is chaos." This stems from the fact that I didn't know what design patterns were. &gt; And this is why you're being told you have a Golden Hammer problem. Remember Maslow's Law of the Instrument: "it is tempting, if the only tool you have is a hammer, to view every problem as a nail." I understand that now that I know what design patterns are and that there are many. &gt; Same reason you want to make an eCommerce site in WordPress, without apparently having noticed that WordPress doesn't actually provide anything an eCommerce system needs other than themes and a user system Like I explained above, I believe I was using my own definition of E-Commerce. I use it for minor tasks that involve taking payments, not full blown online stores. &gt; Have fun with that, chops. If you are open to calming down, apologizing and asking like a normal guy, I'll still help, but honestly, we both know you're too busy justifying the abuse you imagine you received to get assistance. I calmed down (5 hours at work helped). I also did lots of research while on the bus there and back, so I at least know what a design pattern is, some of the common design patterns, their benefits, etc. I have lots to learn though. Again, thanks for the help. :)
Along those same lines, I would add "preset".
Came here to say this. Working on code by a condescending prick who moved on to never return is one thing, but it's rare and the personality of the former author is no longer a factor anyway. Working WITH condescending pricks, however, is a minefield nightmare and can throw huge calamities into an otherwise good project or startup or you name it. Certainly moreso than newbie developers who don't always have the right approach or whatever, but at least have the presence of mind to get along with others and learn and adapt as they go. This is teamwork management 101 and "at the end of the day" the code only contributes so much to the larger picture of success or failure. EDIT: Holy thread resurrection, batman! This convo got freshly linked and I didn't notice that it all took place nearly a month ago.
What's wrong with Mode\DefaultMode? 
Check out Symfony2: http://www.symfony.com
fuel has both an auth package &amp; rest controllers....am i missing something here? also if you dont like the auth package you can just replace it with any other php class you find.
seems redundant having mode twice
whose :)
I think you'd do well taking your own advice on that one. Do you talk to people like this in real life? "That's wrong. I can't tell you why, but read this book that doesn't directly discuss it. Also you should be nicer to people." Big hit with the ladies, right?
CakePHP is a great framework (although rather "heavy"), and it has built-in REST support. Not sure about OAuth or CURL though, although I imagine it wouldn't be hard to add it in yourself.
I read this as "preselected_base_baseline_predefined_initial" and chuckled. Fucking hard.
Sure is sockpuppet in here.
Well, this is how Java does it. The alternative would be to keep a Mode class one level up, then keep subclasses of that under the Mode namespace. 
Wtf is with the downvoting? Is this a bunch of fuelphp fundies? 
I'm a fan of CI, but it is in no way a 5.3 framework.
He said it was complicated, not impossible.
I wasn't implying otherwise; just an informational footnote.
CouchDB is not a performance database.
TROLL . seriously, if you're not going to bring any intelligence to the forum, why say anything at all ? 
I have been using Symfony 2 and I find it refreshing coming from Symfony 1/Zend. Please give it a try.
I'm pretty sure CakePHP's not a 5.3 framework, just like CI isn't one.
check out [fuel php](http://fuelphp.com/)
then maybe lithium, which is 5.3, looks promising and developed by some of the ex cake guys
What particular advantage is a framework making use of 5.3 going to give you, in your use case, over one that's not?
I like Kohana 3.
Symfony2 won't give you REST right out of the box, but you can specify your routes in a RESTful-like configuration. Furthermore you will have to manually check the 'Accept' header in each action (and manually set the 'Content-type' in the Response object, eg: application/json, application/xml).
Reverse psychology!!
this is interesting
You can rig REST requests to routes in Lithium Router::connect('/{:controller}/{:id:[0-9]+}', array('http:method' =&gt; 'PUT', 'action' =&gt; 'edit')); There's an Auth base class in Lithium that you can build off of. This makes it easier to tightly integrate your authentication scheme without having to bend to the framework's convention. Also Lithium is designed to play nice with any external PHP classes - so if you find an authentication package you like elsewhere, just drop it in.
Plus it has a great documentation, so it easy to start.
Symfony 2 is pretty sweet
I'm the most dedicated sock puppet ever. Steady comments for over 2 years all for this
My apologies - I didn't realise that 5.3 was a requirement - just rather, the OP wanted a framework that works on 5.3.
I recognise that name, I think she maintains the MongoDB extension for PHP.
What the hell? A downvote? It fucking isn't. Mongo and Redis are. Couch keeps versioned data for fuck sake.
Not everyone has the ability to install a PECL extension. [The one on PEAR](http://pear.php.net/package/HTTP_OAuth) works just fine.
this is untrue, you can and should use prepared queries
You say this, but with no example... Using PDO::quote() is just as safe, it's the same mechanism used when using the emulated mysql prepared statements. How do I know this? Well, I've read the source.
i supplied an example yesterday [http://www.reddit.com/r/PHP/comments/jg1y3/help_with_pdo_statement/c2c0r1g](http://www.reddit.com/r/PHP/comments/jg1y3/help_with_pdo_statement/c2c0r1g) from [http://php.net/manual/en/pdo.quote.php](http://php.net/manual/en/pdo.quote.php) &gt;PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver. &gt; &gt;If you are using this function to build SQL statements, you are strongly recommended to use PDO::prepare() to prepare SQL statements with bound parameters instead of using PDO::quote() to interpolate user input into an SQL statement. Prepared statements with bound parameters are not only more portable, more convenient, immune to SQL injection, but are often much faster to execute than interpolated queries, as both the server and client side can cache a compiled form of the query. &gt; &gt;Not all PDO drivers implement this method (notably PDO_ODBC). Consider using prepared statements instead. 
yea, we all know who SC is , and he knows who I am
Thanks, now I feel famous :)
With it being as difficult and unintuitive as it is, it's a wonder anyone writes PHP extensions.
When you write the code and import the class, you won't ever see the full namespace hierarchy, so the redundancy isn't a big deal. 
Because it's an example to illustrate a piece of syntactical sugar that's missing and not a real life complaint? Jesus.
Because of the way php namespaces work though, I tend to alias the parent namespace instead of the class so it will be instanced like: use vendor\app\modes; $a = new modes\Name();
Can you elaborate more on your reasoning?
&gt; Well I haven't read the book yet But you're still going to argue about it! &gt; I do have a copy of it downloaded and "Head First Design Patterns" Terrible book. &gt; I've read the summary of Design Patterns from Wikipedia This is something you're supposed to be embarrassed of. You might as well be reading Grimm's fairy tales. It's written by people like you, who have never read any of the material and are faithfully regurgitating sixth-hand chinese telephone wrong they scraped from blogs. Case in point: you're still arguing nonsense. &gt; read an article about MVC on Coding Horror This ... is a surprisingly reasonable resource. I was entirely prepared to mock this for being utter shit garbage like the other two, but much to my surprise, on looking, it actually isn't. He's still sort of over-valuing it, in the way that Object Pascal children in 1985 behaved when they first discovered the magic of OOP, and ascribing to it all sorts of silly importance that isn't actually there. But he's at least got the character right. &gt; you did give me very valuable information that a lot of programmers probably aren't aware of. What you're going to discover is that if you ever stop moaning about how you're treated, the angry people are where all the wisdom is. We're angry because you lot of novices who have fuck all clue what you're talking about have confused being more common with being correct, and have started ignoring what people with vast experience beyond your own can tell you. You *earn* the tone, kid. Stop complaining about it. It's false thanks you're giving if you feel the need to whine throughout. &gt; The Head First Design Patterns book I have was given to me from my employee Oh, jesus, you're a manager? No wonder. They're trying to get your head out of your ass too. Unlike me, they know that if they talk to you in the way that you desperately need to be talked to in order to shed your delusions of rudimentary competency, you'll fire them. &gt; but a colleague there told me not to bother with design patterns and they were a waste of time That's called a "mammoth." That's someone who declines to allow any tool they do not know to have any value, because otherwise they'd have to face how far behind the curve they are. They are a lodestone, and unless you manage to shake them out of their complacency, it will not be long before you can't get anything but big-iron COBOL out of them. Your managerial duty was to prevent them from ever having gotten there. You are on the verge of watching that staff member's skillset vanish. For reference, design patterns are from the 1980s. This is a *big* gap. It is, of course, possible that you misunderstood. If he or she was telling you that that particular book was garbage, they're correct. Whoever gave it to you also doesn't know what they're talking about: turning to O'Reilly for a regurgitation of a classic work is retarded. That person is part of the Cult Of Publisher, and if a classic work is released next, they will turn to O'Reilly for the dumbed-down pablum version. They are less of a problem than the mammoth: they're trying, and all you have to do in their case is buy them the copies of the more difficult material and encourage them to step up to the challenge. &gt; Fourth, I didn't even know what proggit was. I had to Google it (Fail on my part). I actually only read the news related stuff on /r/php and /r/programming. /r/programming is proggit. (picardpalm) &gt; I do however read a lot of programming blogs Have you already forgotten where I accused you of this as an insult, and where I keep tubthumping that this is where you're getting most of your garbage information? I mean jesus, dude, it's like you're not even listening. &gt; and they are not "clueless" He says, after admitting he had no clue about this topic he'd learned about from programming blogs for years. Yes, Jean-Claude, they fucking are. Even mine. &gt; it seems many programmers don't know about design patterns and some other concepts (or at least, they do not reference them). You yourself, for example. And I bet you have a programming blog, which is why you can't cope with the idea that writing a blog doesn't actually mean that you know what you're doing. &gt; programming blogs contain a wealth of information about other topics which are very important as well (such as security). Dear god. Security is the *last* thing you shouldn't get from a professional. I mean you've basically just laid bare that you have absolutely no basic judgement skills. You're learning security from *blogs* ? Please tell me who you work for - at least in private - so that I can make sure I'm not using your products. This is *terrifying*. &gt; I did get at least some of what you were trying to say Obviously you didn't. You're still making the exact same mistakes, and defending them as rationaled. &gt; You did eventually get your point across but you could have made it easier on everyone :) No, I didn't. You're just paying lip service to getting it, so that you can feel good. Nothing has changed. The reason I was mean was to get through this weird permissive shell of sanctimony you have, where you just tell yourself "oh I get it now," and carry on making the exact same mistake while trying to shame the person you're pretending to thank. &gt; I believe the book Design Patterns defines a framework but I haven't read it quite yet. You are officially retarded. What I have come to understand is that you have absolutely no ability to cope with the idea that there is something you do not know, or that there is some topic on which you are unready to argue. You are telling someone they are wrong about a book you haven't even fucking read. What is wrong with you? &gt; Although I still believe you went about correcting me in a poor fashion You wouldn't have listened otherwise. Oh wait, you still aren't. &gt; I could be wrong here, but the information I have found suggests that MVC is an architectural pattern while the Gang of Four patterns are called design patterns You ... really should read the book before correcting other people on what it contains. This is sort of embarrassing to watch. Part of the problem with prattling on about things you don't actually understand, like design patterns, is that you keep leaning on specious distinctions that don't mean anything. Architectural patterns are just design patterns about architectural topics. Christ crutchless. There's a point at which, when you're talking out of the left side of your face about apologizing for arguing and correcting people about things you know nothing about, you're supposed to actually stop arguing and correcting people about what you know nothing about. Has it not occurred to you that I might be angry at you for a reason? Drop the fucking pretenses already. You didn't even make it to page 14 before deciding you knew better again. (continued - too long)
&gt; I already knew that WordPress was too poorly designed to be a framework Oh horseshit. Earlier you said it was a framework, and now you're saying you already knew it was too poorly designed to be, as if one of the criteria is quality. Why? Because you can't be wrong. Even your own claims you now already knew were wrong, on preposterous grounds. No wonder your staff are buying you books. You're fucking clueless, and you're too unable to face your own ignorance or errors to come to terms with them and do anything about it. They must be desperate. A manager like you can sink a healthy ship in a matter of months. &gt; Also, I believe E-Commerce is the incorrect terminology here. Translation: "I've been googling the phrase I used, and found out that it doesn't mean what I thought it meant, so now I'm going to pretend to have an opinion that is meaningfully contrary to my own, because that way I don't just have to admit that I have no fucking idea what I'm talking about. Please fetch me a Powerpoint license and a raspberry coolata; I have to prove my worth." &gt; From the table of contents, Wikipedia, and Google I don't think the Design Patterns book from Gang of Four really discusses MVC This should come as a shock to you, but *****that is not valid research, you nebulous, pompous ass*****. It's page fucking fourteen. Stop fucking arguing about books you haven't read. It's like you have absolutely no sense of shame in being caught talking about things you know *nothing* about. You're still trying to argue about what frameworks are, after having admitted your last two "definitions" are bullshit, and not having offered a third. Why? Because you don't know what the fuck they are, but there is no stop on your map marked "I don't actually know." &gt; I understand that now that I know what design patterns are No. You don't. You haven't read any of the requisite books. You're just pretending to have knowledge to feel smart. &gt; Like I explained above, I believe I was using my own definition of E-Commerce. You don't have a definition of e-commerce! That's a ridiculous conceit. If you say e-commerce and think it means something other than what it really means, that isn't you having a different definition of the word, you over-important buffoon. That's you being wrong. Like usual. &gt; I also did lots of research while on the bus there and back No you didn't. You fucked around on Google and Wikipedia, and yet again you got the answer wrong. The book even says MVC in the fucking table of contents, and you're sitting here like "it's not in the book's index, therefore it isn't in the book." I mean, just how stupid do you have to be to continue, without shame, to argue about what's in a book you've never read? At what point do you begin to admit that you don't know what you're talking about? &gt; Please feel free to teach me a better method (If you're not referring directly to learning design patterns) In my opinion, you cannot be taught. &gt; I calmed down (5 hours at work helped). Not enough to get your head out of your ego, which in turn is still stuck in your ass. &gt; I at least know what a design pattern is No. You don't. I just looked at Wikipedia; it's got it wrong. If you attempt to define it, which I'm sure you will, since you appear to think that your personal errors somehow constitute a valid definition, you will get it wrong. &gt; Again, thanks for the help. :) It's amazing to me how someone like you can fail to understand everything that was said to them, continue to make the exact same mistakes they just apologized for, and walk away feeling like they learned something. What a learning opportunity you missed out on, without even realizing it.
Well a lot of the time, there will be a lot of classes used from the same namespace. For example if I had a form builder namespace. namespace vendor\app\ui; use vendor\app\form; function Login() { $form = new form\Form($url, "login"); $form-&gt;add(new form\TextInput("Username", "username")); $form-&gt;add(new form\PasswordInput("Password", "password")); $form-&gt;add(new form\SubmitInput("Login")); return $form-&gt;make(); } vs namespace vendor\app\ui; use vendor\app\form\Form; use vendor\app\form\TextInput use vendor\app\form\PassworInput use vendor\app\form\SubmitInput function Login() { $form = new Form($url, "login"); $form-&gt;add(new TextInput("Username", "username")); $form-&gt;add(new PasswordInput("Password", "password")); $form-&gt;add(new SubmitInput("Login")); return $form-&gt;make(); } I would much rather type the first one for a few reasons. * It makes managing aliases easier * It cleary shows what namespace those classes are from make the code more readable * It also lowers the chance of there being conflicts with classes named the same thing in third party libraries. * Requires shorter fully qualified names as I no longer need to add prefixes like the above DefaultMode example.
Just to complement: Authentication package: http://fuelphp.com/docs/packages/auth/intro.html Rest server controller: http://fuelphp.com/docs/general/controllers/rest.html Mongo DB Abstraction: http://fuelphp.com/docs/classes/mongo/introduction.html
Assuming you didn't have to write or manage your own list of use statements, would your thinking be the same? I ask because a lot of IDEs support organizing use statements for you. In the case where you'd want to use SubmitLogin, you'd just write "new Sub&lt;autocomplete hotkey&gt;" and select the right class in the right namespace, it'd show up as "new SubmitLogin(...)" and automatically insert the alias for you. Furthermore, the ones that support this will also clean up the list for you so that it removes unused use statements for you. My personal opinion is that the second example is the right way to do it - I can read the code without having to visually parse the worst namespace separator of any language ("\") and either way I have to (sometimes) refer back to the alias list to attach context to things. Whether it's form\SubmitInput or just SubmitInput, either I'm aware of the context of the project enough that I don't need to figure out the whole namespace hierarchy or I'm not. It just seems to me like your list of reasons can be broken down like this: * It makes managing aliases easier -&gt; if you use an IDE (like I do and I think everyone should, or at least something as smart as vi/emacs - and they're both smart enough to manage imports for you, even if you have to modify a script from, say, java to do it for you) * It cleary shows what namespace those classes are from make the code more readable -&gt; it only shows a piece of the namespace hierarchy either way. If you need to know what namespace things are from, either example is going to require you to refer back to the use statements list. * It also lowers the chance of there being conflicts with classes named the same thing in third party libraries. -&gt; This might be a problem in specific cases, but I've never run into it and I write java full time at work and I've had class files with as many as 80 imports before. This is extremely unlikely and I don't think it warrants being planned for, especially considering that the only cases where there would be a collision would be either extremely generic or extremely specific functionality (e.g. new Form() or new IndexSearcher()) and I can't imagine why you'd have either duplicated in your project. And, even if it was a problem, you can do what you're doing only when it's necessary! * Requires shorter fully qualified names as I no longer need to add prefixes like the above DefaultMode example. -&gt; I'm not sure I understand you here. Also, in your example, you wind up writing the child-most namespace unnecessarily for every class you use! The way namespaces in PHP are implemented is a pretty direct copy of how Java packages work and like in Java, I feel like the only way they don't get in your way is by using an IDE. I wouldn't use namespaces in a PHP project if I wasn't using an IDE.
&gt; if you use an IDE (like I do and I think everyone should, or at least something as smart as vi/emacs - and they're both smart enough to manage imports for you, even if you have to modify a script from, say, java to do it for you) I do use an ide (nusphere phped 6.1), but it doesn't yet support auto aliasing, and I have yet to find a php/html/css/javascript ide that I like better. &gt; it only shows a piece of the namespace hierarchy either way. If you need to know what namespace things are from, either example is going to require you to refer back to the use statements list. Again, the way I've been using namesapces I may have modes\Base, and modules\Base. Rather then modes\BaseMode and modules\BaseModule. the namespace before the class name in my case indicates to me what class Base I am using. &gt; This might be a problem in specific cases, but I've never run into it and I write java full time at work and I've had class files with as many as 80 imports before. php is not java, remember that there is a lot of 5.2 libraries that do not use namespaces at all so the chances of class conflict are much greater then java (Note I havn't programmed in java in over 10 years I am basing this off C# in that everything has to be in a namespace). Also These languages come packed with a huge base library that has a lot more functionality then phps base library and lowers the necessity to use third party libraries/frameworks. &gt; I'm not sure I understand you here. I mean the full name of the class so namespace + class name. Llike vendor\app\modes\Base vs vendor\app\modes\BaseMode. one is shorter, I'd rather use the shorter one since no information is lost by removing the redundant Mode at the end of the class name.
Yeah, there's a few of them on reddit alright.
I'm in favor of making the cthulhu() function a permanent fixture of the language.
&gt; But you're still going to argue about it! My point wasn't too argue, my post was about saying you're right and trying to clarify a few things. &gt; Terrible book. I read online to read that first to get the *basic* understanding and than proceed *immediately* to reading the actual Design Patterns book. Also, *why* is it a terrible book? &gt; This is something you're supposed to be embarrassed of. You might as well be reading Grimm's fairy tales. It's written by people like you, who have never read any of the material and are faithfully regurgitating sixth-hand chinese telephone wrong they scraped from blogs. Case in point: you're still arguing nonsense. It looked like a summary of the book taken from the author's website but whatever, I'll just read the damn book :) &gt; This ... is a surprisingly reasonable resource. I was entirely prepared to mock this for being utter shit garbage like the other two, but much to my surprise, on looking, it actually isn't. &gt; He's still sort of over-valuing it, in the way that Object Pascal children in 1985 behaved when they first discovered the magic of OOP, and ascribing to it all sorts of silly importance that isn't actually there. The guy who writes on coding horror seems like a very smart programmer, but glad you found it to be reasonable resource. &gt; What you're going to discover is that if you ever stop moaning about how you're treated, the angry people are where all the wisdom is. A lot of angry people are just idiots with some point to make. Only some of the angry people are smart people with a good reason to be angry. &gt; Oh, jesus, you're a manager? No wonder. They're trying to get your head out of your ass too. Unlike me, they know that if they talk to you in the way that you desperately need to be talked to in order to shed your delusions of rudimentary competency, you'll fire them. Oh god no, mistype. Sorry, I meant a colleague at my *employer*. The so called senior programmers at my *former* employer are at a lower level than me though, to give you an idea. I was hired on as a junior programmer, but these guys had code littered with globals, user input put right into SQL and very buggy code. I did learn about version control from those guys though. &gt; Your managerial duty was to prevent them from ever having gotten there. You are on the verge of watching that staff member's skillset vanish. As I said above, that was a huge mistype, I am no manager. &gt; It is, of course, possible that you misunderstood. If he or she was telling you that that particular book was garbage, they're correct. Whoever gave it to you also doesn't know what they're talking about: turning to O'Reilly for a regurgitation of a classic work is retarded. That person is part of the Cult Of Publisher, and if a classic work is released next, they will turn to O'Reilly for the dumbed-down pablum version. They are less of a problem than the mammoth: they're trying, and all you have to do in their case is buy them the copies of the more difficult material and encourage them to step up to the challenge. I'll take your word for it and just start reading Design Patterns from the original Gang of Four. Care to elaborate on what makes the book terrible besides the fact that it appears geared towards really really new programmers with no attention span? &gt; /r/programming is proggit. (picardpalm) I was saying that I didn't know what it was until I Googled it. I then new it was referring to /r/programming and made a second comment saying that I only read the news on /r/programming (Now knowing that it was you were referring too). Sorry for not being clear &gt; &gt; I do however read a lot of programming blogs &gt; Have you already forgotten where I accused you of this as an insult, and where I keep tubthumping that this is where you're getting most of your garbage information? &gt; I mean jesus, dude, it's like you're not even listening. I *am* listening, and I recall that distinctly. Where am I supposed to find good information about programming if not for blogs and forums/stack-exchange? Books you say? Have you read any software engineering/programming/PHP books lately? They suck. I've read a lot of shitty ones, but I've never even heard of some of the good ones like "Design Patterns". I need to get information *somewhere*. No resource is 100% good. Forums have their idiots and misinformed users. Books can be written by terrible programmers/misinformed authors. Courses can be taught by people who haven't actually programmed in 20 years. &gt; He says, after admitting he had no clue about this topic he'd learned about from programming blogs for years. &gt; Yes, Jean-Claude, they fucking are. Even mine. If you're referring to MVC, it does appear a lot of the info is incorrect, but I haven't had a serious interest in it for that long. &gt; You yourself, for example. And I bet you have a programming blog, which is why you can't cope with the idea that writing a blog doesn't actually mean that you know what you're doing. I do have a blog, but it's mainly WordPress stuff which I'm qualified to discuss. Also a bit about setting up LAMP servers and a bit of HTML/CSS/JS stuff. No *serious* programming talk since I am fully aware that my knowledge about the "theory" side of programming is seriously lacking. I but theory in quotes because I'm not sure what term to use here. I have a lot of experience actually building systems, but not enough knowledge about designing systems, software architecture, etc. I've realized that (Not just now, but a little while ago) and I started actively trying to learn more, and I am still trying to learn more. I am well aware that I don't know what I'm doing when it comes to that stuff. &gt; Dear god. &gt; Security is the last thing you shouldn't get from a professional. I mean you've basically just laid bare that you have absolutely no basic judgement skills. You're learning security from blogs ? &gt; Please tell me who you work for - at least in private - so that I can make sure I'm not using your products. This is terrifying. I read about security *tips* from a *huge* number of sources, and wherever somebody says *not* to do something, I research it further and if it seems valid I make sure I avoid doing it. The security blogs I read are often written by well recognized security professionals and I take what they say with a grain of salt. I don't mean to be insulting, but what world do you live in? Have you not heard of the HB Gary &amp; Sony failures *this* year? These systems were built by *teams* of security *professionals* and contained basic mistakes not even I would make. Far too many programmers lack proper knowledge when it comes to security. I didn't *learn* security from blogs, but I keep up-to-date with security and security practices from a number of blogs as well as my own experimentation. Learn from other's mistakes. Now to go a step further. My former employer is a relatively large web development firm with a lot of big name clients. They do a bunch of E-Commerce sites for hundred thousand dollar plus jobs. They have hired a team of senior E-Commerce experts. I work for my own company mostly for small companies with a business partner. I have become involved with at least two of the clients from my previous employers after alerting the company that the credit card data they are collecting on their site is transferred in plain text and accessible to the public. Hell, one of those two clients had some error where the credit card data was on Google! I fixed both sites some what by implementing SSL and properly implementing a payment processor so CC data wasn't being kept locally. I'm not a security expert, but I definitely know security and a lot better than most programmers. Beyond that, I'm constantly learning more about security. Also, how does one become a security professional? By getting Security+ certified? By taking a computer security course? I've done both, and the course was a joke. $19,000 for 8 months and we learned the basics of SQL injection, port scanning, XSS, etc. Nothing fancy. Please don't insult me. I may not be an expert, but I'm not an idiot. &gt; Obviously you didn't. You're still making the exact same mistakes, and defending them as rationaled. What mistakes am I still making? &gt; You are officially retarded. You are officially a troll. I have re-read all of your posts and you spend all of your time telling people that they *are* wrong with no explanation of *why* they are wrong and you fail to tell people what the *right* way/definition/method/etc is. You write this off as saying you are just an experienced programmer who is frustrated but the only piece of useful advice I've received is to read Design Patterns. The rest of your posts are insults. You can't say you're wrong *because I say so*. That is reserved for children and religion. &gt; Has it not occurred to you that I might be angry at you for a reason? Drop the fucking pretenses already. Please calm down. I do want your advice. I absolutely will listen and shut the fuck up if you comment without replying specially to what I have said. Explain some of the things I got wrong. Don't tell me I got them wrong and leave it at that. Explain it, so that your post can be useful to a lot of people. You have managed to put down every source of information out there except for your word and the book called "Design Patterns". **Please explain where you expect people to get their information if not from any of Wikipedia/Forums/Blogs/Books/People.** (continued - too long)
&gt; &gt; I already knew that WordPress was too poorly designed to be a framework &gt; Oh horseshit. Earlier you said it was a framework, and now you're saying you already knew it was too poorly designed to be, as if one of the criteria is quality. &gt; Why? Because you can't be wrong. Even your own claims you now already knew were wrong, on preposterous grounds. &gt; No wonder your staff are buying you books. You're fucking clueless, and you're too unable to face your own ignorance or errors to come to terms with them and do anything about it. &gt; They must be desperate. A manager like you can sink a healthy ship in a matter of months. I'm not a manager, but the company I worked at previously had a worse manager than I could ever be. She didn't know how to use a computer. No word of a lie. The company was poorly run but they continue to work on big name projects for hundred thousand dollar plus jobs. I did know WordPress was poorly designed as I work with it a lot of have experienced many frustrations. I've also read about a lot of it's problems. I did consider it a framework which was wrong. If I thought about it I'd probably have been able to realize I was wrong, but I somehow got it into my head that WP was a framework and I stuck with that. &gt; &gt; Also, I believe E-Commerce is the incorrect terminology here. &gt; Translation: "I've been googling the phrase I used, and found out that it doesn't mean what I thought it meant, so now I'm going to pretend to have an opinion that is meaningfully contrary to my own, because that way I don't just have to admit that I have no fucking idea what I'm talking about. Please fetch me a Powerpoint license and a raspberry coolata; I have to prove my worth." Definition: &gt; Electronic commerce, commonly known as e-commerce or eCommerce, or e-business consists of the buying and selling of products or services over electronic systems such as the Internet and other computer networks The sites I build do sell services, but that isn't their *primary* focus, so they aren't E-Commerce websites, but merely have an E-Commerce component to them. I was using the terminology correctly, but I just didn't explain myself well enougn and in enough detail. &gt; Because you don't know what the fuck they are, but there is no stop on your map marked "I don't actually know." Every definition I've found *online* is apparently incorrect by your definitions, so I'll just see what the Design Patterns book defines it as. Also, words can have multiple meanings. Many people define WordPress and such as a framework, so it's possible that the word "framework" will change it's definition. Because languages evolve you know. And the majority of people right now are using the term incorrectly. &gt; No. You don't. You haven't read any of the requisite books. You're just pretending to have knowledge to feel smart. I know what a design pattern *is*, but I don't know the actual design patterns, how to use them, how to apply them, or whatever. But before if you said design pattern I wouldn't even know what you meant. Now I do. I mean for the term "design pattern" itself, and not the actual design patterns. &gt; In my opinion, you cannot be taught. In your opinion I doubt you think any programmer can be taught. Any before you tell me I'm not listening again, how about I sum up what you've said to me? That way you know I at least read it and understood: * I do not know what design patterns, architectural patterns, frameworks, or MVC are. I will not know what they are until I read "Design Patterns" by Gang of Four. Until I've read that specific book I should not argue about shit I know nothing about (Or I only know incorrect info about). Gotcha. * Programming blogs are a useless source of misinformation that I should avoid like the plague * I'm apparently an idiot, moron and retarded * Design patterns are important * I should only learn about this stuff from some unspecified place so that I can learn it correctly * You're very angry Think I got it. That honestly wasn't sarcasm (Except for #3 and #5). I *will* read Design Patterns and would really appreciate it if you feel like replying with more information (but not if you just feel like telling me I'm still an idiot, I'm not listening to you, etc. I know this already. You've told me. Several times.) 
&gt; Also, why is it a terrible book? Because the text inside is poorly written and frequently incorrect in ways that suggest the author himself never read the real thing. This is about a different book, but it gives the general gist. http://www.seebs.net/c/c_tcn3e.html &gt; The guy who writes on coding horror seems like a very smart programmer Atwood is fair to middling. Spolsky wears clown shoes to work, and I bet you believe every word that drips from his mouth. &gt; Care to elaborate on what makes the book terrible besides the fact that it appears geared towards really really new programmers with no attention span? It's an also-ran that misses the point, is full of mistakes, and largely exists to imitate a book its own author cannot but barely understand if indeed he read it at all. &gt; Where am I supposed to find good information about programming if not for blogs and forums/stack-exchange? Books you say? Have you read any software engineering/programming/PHP books lately? Yes, except for the last. Language specific books are virtually always terrible, and with only very rare exceptions should be avoided like two plagues, one of which has the plague. (Dewhurst's C++ book is one such case; Celko and Karwin's SQL books another; there's a decent argument for SICP, and if you want to say Knuth is MIX specific, then Knuth; otherwise it's a barren empty desert full of vipers and wrong.) Good software engineering books come along once or twice a year. You just have to know someone who knows what's good. &gt; I've read a lot of shitty ones, but I've never even heard of some of the good ones like "Design Patterns". And herein comes your lightbulb. What kinds of books are you looking for? &gt; I do have a blog, but it's mainly WordPress stuff which I'm qualified to discuss. He says, having just recently called it a framework he'd run to for eCommerce applications. &gt; No serious programming talk since I am fully aware that my knowledge about the "theory" side of programming is seriously lacking. I but theory in quotes because I'm not sure what term to use here. I have a lot of experience actually building systems, but not enough knowledge about designing systems, software architecture, etc. I've realized that (Not just now, but a little while ago) and I started actively trying to learn more, and I am still trying to learn more. I am well aware that I don't know what I'm doing when it comes to that stuff. Ok. Start with Design Patterns. Then tackle Refactoring by Fowler. Move on to CLRS. After that, read The Mythical Man-Month. Follow with Enterprise Integration Patterns. Then read Personal Software Process. Then read The Structure and Interpretation of Computer Programs. Next, The Practice of Programming. Next, read all three books of The Art of Computer Programming. If you can't finish 2, that's okay. If you can't finish 3, that's expected - most people can't. The purpose of that series is to give you structure, repair, algorithm, planning, architecture, accountability, design, craft, and finally, elegance. If you make it down that river, you'll have arms and legs. &gt; I read about security tips from a huge number of sources, Security is no country for people who aren't cryptographers. That's a forest that I won't play in - and I didn't stop at reading just Schneier. You too should decline to enter badbear forest. &gt; I don't mean to be insulting, but what world do you live in? I work in the security industry, amusingly. &gt; Have you not heard of the HB Gary &amp; Sony failures this year? Yes. And that's why I don't think you should be taking advice from just any asshole who call themselves a professional. &gt; These systems were built by teams of security professionals It's funny how you and I look at the same facts without dispute and yet come away with such very different interpretations. You might want to look into what Sony actually got wrong. I know, it seems impossible that that large, that well funded a team could simply deliver a complete fucking botch job. Look into the details. Have a change of pants ready. The other thing I don't think you realize is that Sony and HB Gary are not the exceptions to the rule. Almost everyone whose security blog I've ever read is just laughably incompetant. And look, I'm not in that part of the company. I write server software. I'm not pretending to be a cryptographer. My point, though, is that a lot of people are. Sturgeon's Law applies in full force to security advice, just like it does to everything else, even after you've filtered to people at big companies who should know better in large highly visible well paid roles. "90% of everything is crap." The stakes, for security, are much, *much* higher. For programming, whatever, if it's interesting, read it. For security, put your crap filter on the notch between neurotic and paranoid. Then pay someone whose academic background is two PhDs in math. &gt; They have hired a team of senior E-Commerce experts So did Sony. So did HB Gary. There are no shortage of other examples. Banks with billion dollar accounts leave people's personal data on USB sticks at diners, dude. Take off the rose colored glasses. Almost nobody is as diligent as they should be. Statistically speaking, your personal information is currently sitting unprotected in several unrelated restaurants nationwide by *accident*. &gt; I'm not a security expert, but I definitely know security and a lot better than most programmers. You have a real problem with self evaluation. &gt; Also, how does one become a security professional? I don't know. I'm not one of them, and the math they do is so complicated that I can't even begin to follow it. I played Netflix and am currently playing Heritage for fun. Math does not usually scare me. &gt; You have managed to put down every source of information out there except for your word and the book called "Design Patterns". Well, quit offering crap. You mentioned wikipedia, one terrible also-ran book, an Atwood post I said was good that you're now conveniently forgetting, and handwaved about some blogs you didn't name. (shrugs) So I said one out of the three concrete things you named was good, plus another thing that was named before you spoke up. Fully half of the actually named resources were called okay. Melodrama much? &gt; You are officially a troll. You know. I got here, and I almost deleted this entire response. But I wanted you to see what your inability to stop throwing around insults in the middle of your pretend apologies almost cost you. And I want you to understand what it's cost you moving forward, because I was prepared to give you a hell of a lot of help. &gt; I have re-read all of your posts and you spend all of your time telling people that they are wrong with no explanation of why they are wrong and you fail to tell people what the right way/definition/method/etc is. Then you only read a couple of days back. &gt; Please calm down. I do want your advice. Man. All those apologies and thankses were self-serving fakes. What a fraud. Find one emotional excuse, based on yet another bullshit shallow search, and turn on a dime. None of the thankses or apologies you made were in any way genuine. And, of course, later: "and would really appreciate it if you feel like replying with more information" &gt; I absolutely will listen and shut the fuck up It doesn't matter now. &gt; Explain some of the things I got wrong. (continues)
 I already had, but I've explained another couple more. What you don't seem to understand is that while you spent all that time pretending to say "I'm sorry" and "thank you" to make yourself feel like a good guy, then turned on a dime, and started making aggressive demands, throwing around insults, and bolding challeges, that you lost the thing you were pretending to want. Even downvotes. You just can't keep yourself from taking swings, even when it costs you the thing you pretend to thank for, pretend to apologize about, and pretend to want more from, while at the same time saying you don't want advice or answers. What a prat. &gt; I'm not a manager, but the company I worked at previously had a worse manager than I could ever be. And I bet she always insisted she understood things the second someone pointed out just one rudimentary error. &gt; Every definition I've found online is apparently incorrect by your definitions It's funny: you keep calling things "your definition," then when they're wrong, you admit they're things you just googled up. And now you're frustrated that you aren't being treated as a knowledgeable expert. I mean seriously, guy. &gt; Many people define WordPress and such as a framework And now we just hand-wave at an imaginary group of people who you suggest must certainly agree with the error you made and don't understand, because fictional groups of supporters somehow make your wrong less wrong. Funny how you keep admitting your error *then* insisting it wasn't an error. Almost like you want to pretend to yourself you can admit an error, but in the end, you really can't. &gt; Because languages evolve you know. And the majority of people right now are using the term incorrectly. And here we have a fake linguist pretending that language evolution has something to do with the number of people making an error with regards to a well defined engineering term, because they are fundamentally unable to say "I was wrong" and leave it at that. &gt; I know what a design pattern is No. You don't. &gt; I don't know the actual design patterns, how to use them, how to apply them, or whatever. I know what a car is! I just don't know what it looks like, what it's for, what size it is, how to use it, when to use it, or whether it's a real thing. Le cough. If you knew what a pattern was, the rest of those would be self-answering. &gt; But before if you said design pattern I wouldn't even know what you meant. You still don't. Pretending won't change this. &gt; In your opinion I doubt you think any programmer can be taught. It's about one in three, in my opinion. But feel free to make up fake beliefs for me, if they make your fantasy villain more evil for you. &gt; how about I sum up what you've said to me It's not clear, given that my position is that you haven't understood what was said to you, why you would think I'd want your summation of text you haven't understood. You couldn't even count the number of acceptable references correctly. &gt; Design patterns are important I actually said almost the exact opposite of this, for example. They aren't, really. This was the purpose of dusting off the Object Pascal and OOP fantasy golden hammer example. The one you insisted you understood, but here have exactly wrong. &gt; I should only learn about this stuff from some unspecified place so that I can learn it correctly Wrong again. I specified the place. You even mentioned it yourself. You're just making up complaints to pad out a hilariously ineffective list. Indeed, the first one isn't even a complaint. &gt; You're very angry So, your list of complaints is something you agree with, that blogs are dumb, two wrong things and an insult. Yes, blogs are dumb, and yes, the thing you agree with is sort-of correct. Nice job, there. 40% is a lot better than last time. &gt; Think I got it. I bet you do. You actually missed most of the important stuff in the rush to find an excuse to feel angry after apologizing, saying you had calmed down, and thanking me. Dummy. &gt; That honestly wasn't sarcasm I know. Like I have been saying all along, you have no capacity for admitting your own limitations. Of *course* you think you got it. &gt; and would really appreciate it if you feel like replying with more information This from the guy who earlier said &gt; Please calm down. I do want your advice. and &gt; You are officially a troll. I mean. Come on, man. Really? Are you actually this self unaware? Just like how you said I said you were an idiot, then said you were being sarcastic, then said it again? This whole insult, apologize, insult, or the thank, insult, or the apologize, retract, or the admit, then re-argue thing? It's not gonna get you very far, guy. I hope that advice above - giving you the books you keep saying you so desperately need, which I'm certain you'll pretend isn't there - is enough to get you out of your hole. Your behavior has guaranteed you won't get any more help. Enough of the fake apologies.
Once you get the basics, it gets easier, can spin out quick extensions in an afternoon (like plug a C library). And there is a tool that ships with pecl to build skeletons, makes everything easier. 
Alrighty. I read your reply and I found it extremely informative. I'd like to thank you in particular for this: &gt; Ok. &gt; Start with Design Patterns. Then tackle Refactoring by Fowler. Move on to CLRS. After that, read The Mythical Man-Month. Follow with Enterprise Integration Patterns. Then read Personal Software Process. Then read The Structure and Interpretation of Computer Programs. Next, The Practice of Programming. Next, read all three books of The Art of Computer Programming. If you can't finish 2, that's okay. If you can't finish 3, that's expected - most people can't. &gt; The purpose of that series is to give you structure, repair, algorithm, planning, architecture, accountability, design, craft, and finally, elegance. I will do this, thanks. &gt; &gt; Also, why is it a terrible book? &gt; Because the text inside is poorly written and frequently incorrect in ways that suggest the author himself never read the real thing. This is about a different book, but it gives the general gist. Thanks, I've put it back on the shelf. &gt; Atwood is fair to middling. Spolsky wears clown shoes to work, and I bet you believe every word that drips from his mouth. Good to know about Atwood, I've read some of Spolsky's posts but didn't much care for most of them (I liked a few). &gt; It's an also-ran that misses the point, is full of mistakes, and largely exists to imitate a book its own author cannot but barely understand if indeed he read it at all. Now I know. &gt; Yes, except for the last. Language specific books are virtually always terrible, and with only very rare exceptions should be avoided like two plagues, one of which has the plague. (Dewhurst's C++ book is one such case; Celko and Karwin's SQL books another; there's a decent argument for SICP, and if you want to say Knuth is MIX specific, then Knuth; otherwise it's a barren empty desert full of vipers and wrong.) Alright, I'll read SICP and look into books by Kunth. I'll continue avoiding language specific books. &gt; Good software engineering books come along once or twice a year. You just have to know someone who knows what's good. I'll try to narrow down my list of books to investigate to software engineering books and see if I can find book lists then includes the ones you previously mentioned. Might be an indicator that other books on the list aren't complete crap. &gt; And herein comes your lightbulb. &gt; What kinds of books are you looking for? Everything a competent computer programmer/software engineer should read. &gt; &gt; I do have a blog, but it's mainly WordPress stuff which I'm qualified to discuss. &gt; He says, having just recently called it a framework he'd run to for eCommerce applications. Touché, sir. I've written specifically about how to do certain things within WordPress, just low level actual code stuff. Like "If you need to do XYZ here is one way of doing it". &gt; Security is no country for people who aren't cryptographers. That's a forest that I won't play in - and I didn't stop at reading just Schneier. You too should decline to enter badbear forest. Alright, you're talking about security at a different level than I am. I mean security and how it relates to day-to-day programming. All programmers have a responsiblity to make sure their application isn't vulnerable to the so called classic attacks (For web apps, this involves escaping SQL, protectinge against XSS, etc). This doesn't require a security professional. It's just part of a programmers job. Correct me if I'm wrong. &gt; You might want to look into what Sony actually got wrong. I know, it seems impossible that that large, that well funded a team could simply deliver a complete fucking botch job. &gt; Look into the details. Have a change of pants ready. Alright, I'll investigate the details. &gt; Almost everyone whose security blog I've ever read is just laughably incompetant. The number of blogs that give code examples open to SQL injection are proof of this. &gt; You have a real problem with self evaluation. This is probably true. &gt; Well, quit offering crap. Ok. Any chance you know of some good online sources/blogs I should be reading? If so, please link to them. &gt; I got here, and I almost deleted this entire response. Super glad you didn't. I was getting tired of being called an idiot though. Defense mechanism. &gt; Then you only read a couple of days back. I meant the comments on this specific post. &gt; None of the thankses or apologies you made were in any way genuine. Many of the thanks were genuine, but I have (had?) my ego getting in the way and genuinely thought I knew a lot more than I did. I also thought Wikipedia was a great source of information for this stuff. Please realize that when you think something for years it is hard to overcome. I *am* working on it. &gt; You just can't keep yourself from taking swings Correct. I am trying. &gt; pretend to want more I really do want to learn more, I just have a hard time overcoming the misconceptions I hold. &gt; And now you're frustrated that you aren't being treated as a knowledgeable expert. I'm not a knowledgeable expert, though I thought I was... &gt; And now we just hand-wave at an imaginary group of people who you suggest must certainly agree with the error you made and don't understand, because fictional groups of supporters somehow make your wrong less wrong. A few people commented on my post and commented on their own confirming what I incorrectly stated. Either way, we were all just wrong. &gt; And here we have a fake linguist pretending that language evolution has something to do with the number of people making an error with regards to a well defined engineering term, because they are fundamentally unable to say "I was wrong" and leave it at that. I was wrong. WordPress != Framework. Me != Expert. Mind == Blown. &gt; &gt; I know what a design pattern is &gt; No. You don't. Alright. Hopefully I will once i've read that book a few times &gt; It's about one in three, in my opinion. You're probably underestimating it now that I think about it. I thought I was very open minded but looking back I see how much I was resisting and making up stupid shit and just failing. Argh. &gt; I actually said almost the exact opposite of this I actually didn't get this from what you said, but probably because I was reading with my defensive/rage glasses on. &gt; you have no capacity for admitting your own limitations I admitted *some* of my limitations but was resisting admitting the rest. It's a defense mechanism or something. &gt; I hope that advice above - giving you the books you keep saying you so desperately need, which I'm certain you'll pretend isn't there I definitely didn't ignore that and really appreciate you taking the time to list some good resources for me. &gt; Your behavior has guaranteed you won't get any more help. :( Hopefully I can change this for the future.
The fact that a tool has to exist to generate boilerplate should be evidence that the interface is broken :\
It is, but it's old, and frankly i don't see anyone taking the initiative to improve it (they did rewrite the Zend Engine when PHP5 came out, but was not made friendly enough in my opinion, but i don't see them going through that again...)
&gt; I do use an ide (nusphere phped 6.1), but it doesn't yet support auto aliasing, and I have yet to find a php/html/css/javascript ide that I like better. When it does support use statement management, are you going to continue your current scheme? &gt; Again, the way I've been using namesapces I may have modes\Base, and modules\Base. Rather then modes\BaseMode and modules\BaseModule. the namespace before the class name in my case indicates to me what class Base I am using. I think the standard expectation is that classes will be referred to as their short name, rather than their fully qualified or partially qualified name, so having class BaseMode in namespace modes and BaseModule in namespace module is fairly intuitive behavior. I've not seen another language where this isn't idiomatic behavior. When you're actually typing them out, too, modes\Base is both longer and harder to write (due to that terrible \) than BaseMode. &gt; php is not java, remember that there is a lot of 5.2 libraries that do not use namespaces at all so the chances of class conflict are much greater then java As long as you stay within your namespace (e.g. com\foo\bar), there's not going to be much likelihood that there's a naming collision whether the global namespace is polluted or not. I don't see how this makes it any more or less likely that there's a naming collision in any particular source file (when you use things from other namespaces). Can you elaborate? &gt; Also These languages come packed with a huge base library that has a lot more functionality then phps base library and lowers the necessity to use third party libraries/frameworks. I'm not sure I agree. I've seen a lot of PHP projects that have one or two 3rd party dependencies. I've never seen a java project with only one or two. [This](http://i.imgur.com/8U4wm.png) is a tiny side project of mine and is pretty indicative of the java ecosystem (to be fair, this is a flattened and complete dependency tree). Are there even any dependency resolution tools that people use for PHP? &gt; I mean the full name of the class so namespace + class name. Llike vendor\app\modes\Base vs vendor\app\modes\BaseMode. one is shorter, I'd rather use the shorter one since no information is lost by removing the redundant Mode at the end of the class name. Information is lost if you follow common parlance and only import the class's short name into the local context, though. And I think it's a fair expectation for whomever is using your code to do that. At the end of the day, though, it is just a matter of taste.
They're going to have to sooner or later, though, or abandon the idea of ever natively supporting Unicode. I'm not sure there's a way to add that support without basically rewriting the entire thing from start to finish, from parser to runtime.
Yeah, reason why they dropped PHP6 is integrating UTF8 was just a bigger task than they anticipated. But id doubt we'll see UTF-8 natively since the opinion right now is more around "use the extensions to 'support' utf-8".
From what I've heard, it was more a matter of mismanagement (adding il8n and l10n at the same time) and some bad initial decisions (UTF-16) than it was simply the size of the undertaking ([source, pdf](http://zmievski.org/files/talks/phpcomcon-2011/what-happened-to-unicode-and-php-6.pdf)). Either way, I hope they eventually do get around to adding it, because PHP is going to be a second class language when they do and as the rest of the world gets to have a larger and larger online presence, the lack of unicode support might very well be a factor that drives people away from the language.
Yeah, they was that (who in his right mind though UTF16 was a good idea). As for PHP, i'm not to worried, it's the C of web languages, it will around for a long time (5 years ago people were saying : Ruby (or Python) will be the next mainstream web language, well its not)
C has survived because it's the best at what it does. I hate that people call PHP that because it's not the best at what it does any more and the only reason it's still so prevalent is because of its past success. I feel like the PHP developers need to start adding modern language features that people want and need, like unicode support, to catch up to Ruby and Python.
&gt; I'm not sure I agree. I've seen a lot of PHP projects that have one or two 3rd party dependencies. I've never seen a java project with only one or two. This is a tiny side project of mine and is pretty indicative of the java ecosystem (to be fair, this is a flattened and complete dependency tree). Are there even any dependency resolution tools that people use for PHP? I'm going based on C#, I really don't know anything about Java's base library, but for the most part in my C# projects I only require 1 or 2 third party references. &gt; I think the standard expectation is that classes will be referred to as their short name, rather than their fully qualified or partially qualified name, so having class BaseMode in namespace modes and BaseModule in namespace module is fairly intuitive behavior. I've not seen another language where this isn't idiomatic behavior. When you're actually typing them out, too, modes\Base is both longer and harder to write (due to that terrible ) than BaseMode. In C# I would do it that way because I can do... using System.IO; ...and have access to all classes in that namespace, but in php, you can't do that, you have to specifically alias all classes individually. This is why I think it makes more sense to do it the way I am doing it. Just because its done a certain way in one language, doesn't mean its the right way to do it in another. Also PHP namespaces can contain functions which forces you to include the alias. use vendor\app\io; $lines = io\read_all_lines($file); You cannot alias functions so you have to use io\read_all_lines($file); I see no reason not to keep this behavior consistent with classes as well. Either way, your right, ultimately it comes down to taste.
&gt; In C# I would do it that way because I can do... &gt;...and have access to all classes in that namespace, but in php, you can't do that, you have to specifically alias all classes individually. It's like that for good reason, because PHP can't load classes without compiling them. Even in languages that support wildcard imports, they're generally a bad idea because they encourage / increase the likelihood of naming collisions. I'm actually glad they didn't add them to the language. I feel like object-oriented packages/namespaces require good tools to use and I wouldn't use them if I didn't have tools that hid them from me. &gt; Also PHP namespaces can contain functions which forces you to include the alias. I can't think of a good reason to write a function in a PHP project any more. Maybe I've just moved too far into the OOP camp, but I can't see any benefits to procedural code in PHP any more.
I have a bunch of helper functions for dealing with strings, arrays, io among others. Before php 5.3 I would stick them in classes with a private constructor and make them static. Now though it makes more sense to just stick them in a namespace.
I am just making the analogy to C for the "standard" part. I agree with you on the language feature, but one thing that lots of developers that complain about PHP or predict its death is that 95% of the user base doesn't give a sh*t about language features: it gets the job done and it performs well enough (and if you do it right, it performs awesome), and in the end that's what will make PHP stay. (Doesn't mean that we should stop asking for such features, just that we do not represent the majority...)
theres no real difference, but if you don't use a virtual hosts directive on your local dev server then you might have to change the mod_rewrite base before uploading it to the server.
Well, one thing I like about using a virtual host is I can set it to the live domain name and change my hosts file to make that domain point locally. This allows me to verify urls are correct etc... To me it just feels better to replicate the live site as much as possible. 
There's an argument to be made about letting the 95% of the user base that doesn't give a shit about anything speak for the PHP community. I mean, it's not like PHP developers get a ton of respect outside the PHP community... Eh, I'm way too tired to make that argument, though.
My biggest problem when not using virtual hosts locally is that I like to set up pretty URLs using rewrites (in nginx but that's irrelevant). So my links therefore look like "/home/" and "/contact-us/" (for example). The problem with doing this, is that now any stylesheets need to be referenced as "/css/style.css" (note the leading slash) otherwise they won't be loaded, because the browser would instead look up "/home/css/style.css" which would be an invalid path. If I don't use virtual hosts I now have the problem of having my stylesheets being loaded from "http://127.0.0.1/css/style.css" instead of "http://127.0.0.1/~site1/css/style.css" as they should. It's a pain in the ass but I can't think of an elegant way around it, so I usually just set up a virtual host and then add `127.0.0.1 dev.sitename.com` to /etc/hosts and be done with it. I could also resort to updating the links while developing, but that quickly becomes a pain, especially if I forget to change them back when pushing a site live.. To be fair, it would probably only take a few minutes to write a script to set up (and even tear down) a virtual host on my local machine.. but instead I spend those minutes ranting about it on Reddit :) So yes there are benefits depending on the style/layout of your website, but if that isn't the case then the only thing I can think of is (considering this is /r/PHP) PHP scripts that make use of the hostname, but you can always fake your way around that.
What I have been doing that has been working amazingly for me is this: - First I setup a small linux box running sshd and put this thing somewhere where I don't have to hear the fans (basement). - SSH into it, setup php/mysql/apache/samba and configure your router to point this box to your outside IP. - Get a [free dns and domain](http://www.changeip.com/) (mine is dd.h1x.com) setup the domain so that it accepts a wildcard sub-domain, so I you can do whatever.dd.h1x.com and have it still work. - Now configure apache [like so](http://pastie.org/private/vaovgisofcn2tkudtybia) - Setup a samba share to the /home/yourname/web_accessible/ so you can edit files from what ever machine you want to on your local network. Each folder under the web_accessible folder corresponds to the sub-domain of the host. so mysite.dd.h1x.com would be /home/evan/web_accessible/mysite/public_html/ This makes it super easy to manage lots of different development projects and since you can connect to the server from outside its easy to show the client changes right from your dev machine. I'm sure there are probably security risks and what not of having a box open to the outside, but I like to live on the edge. This is especially useful if you'r using a framework like Kohana that uses the front controller pattern. Your rewrites will just work.
Suggestions for a relatively inexpensive desktop that would suffice as a linux server?
Easy solution (at least for me). 1) Set up a wildcard domain pointing to localhost. e.g.: *.dev.crackanape.int. A 127.0.0.1 2) Set up Apache's mod_vhost_alias Presto, you have a folder on your hard drive in which each subfolder is its own site with a top-level domain usable locally. Say you have your mod_vhost_alias pointing to ~/Sites/dev. Then you just make a folder called ~/Sites/dev/test1 and it will be accessible at http://test1.dev.crackanape.int. No other configuration necessary; you have as many sites as you have folders, and you can make new ones in literally five seconds.
I've been doing this for a few years now and it's really the best solution.
Here's how I do it: In Apache, turn on mod_vhost_alias. Add this to your configuration, replacing /Library/WebServer/Documents/ with the location you store all your sites (not an individual site's directory): &lt;VirtualHost *:80&gt; ServerName dev ServerAlias *.dev VirtualDocumentRoot /Library/WebServer/Documents/%1 &lt;/VirtualHost&gt; Edit your hosts file (/etc/hosts or C:\Windows\System32\drivers\etc\hosts) to add the following, replacing "project" with the name of the root directory where you store your site: 127.0.0.1 project.dev When you're done, you should end up with the ability to go to http://project.dev/ in your browser and be in /Library/WebServer/Documents/project/ (or whatever your root directory is). As you add sites, just add then to the hosts file. You can add more than one site on the same line. Here's what mine looks like: 127.0.0.1 localhost hive.dev ire.dev billfold.dev All I had to do to set it up was edit the hosts file to add the domain and create the directory. Easy peasy.
Anything made after 1995. Seriously. I use dual Pentium III 800mhz for a commercial dev server.
Couldn't you use the html base tag? Then you should be able to load your css/js using relative paths. That is what I typically do when using nice urls. 
I use mamp at home. So far i have not had any problems porting the code over to a producton server. Urls stay the same.
If you have time, and want to save space, money and energy, you can install Apache on a Pogoplug (costs about £50): http://lifehacker.com/5637092/turn-a-pogoplug-into-a-fully+featured-linux-web-server The easiest option though is to get a cheap netbook through eBay and put (K)Ubuntu on there. Phillip.
I use virtual hosts on my development machine. In addition to making resource urls easier to code, there is one other huge advantage for me. Sometimes I will run large reports, queries, or tests in the browser. When I was using localhost as the address, it would prevent me from making any other requests while waiting. Now I can work on something else at the same time.
This is awesome. The only thing is that Windows doesn't allow wildcards in the hosts file so you're stuck with either creating a new entry for every project or somehow setting up a dns server locally.
Same with OS X and I believe Linux. But it's not a lot of heavy lifting to add a site, at least.
buy some new minipc or something like that. it may cost few bucks, but it will return it in electricity bills sooner or later ..
For example, add this to your .htaccess RewriteEngine on RewriteBase /project/ 
That or he could be rewriting CSS paths the same way he does his pages. I do this through mod_rewrite on apache for all my sites (css,js,images). /css/(*.) etc gets redirected to wherever I need them to be (generally /templates/css/ or similar depending on the CMS or application)
I'll do it... "There is no one answer. You have to evaluate the different frameworks to see which one meets your needs." There.. done.
And it should be PHP based. Done and done.
I don't think its possible as people have different tastes. For instance zend is the only one for me and I hate code ignitor and kohana. Whereas others have the opositte view. Basically the answer is try them and use what you like.
Strongly disagree. It's so hard to figure out which framework to use. I've been doing webdev a number of years in Ruby, Java, and now PHP... I know MVC quite well and there are just so. many. frameworks. The one we use at work is not open source and I have been working on a personal project and now I want to port it to a framework... but which one? God knows. (perhaps FuelPHP)
I for one would tremendously benefit from a document that did something like that. How is a dummy app structured? What are the conventions of the framework? What kind of apps tend to come from which kind of frameworks? Bullet points of checklists as a handy comparison chart... Development progress (stagnant? stable? frequent &amp; ongoing?)... etc..
I was kidding because this is the PHP reddit so my point would be redundant.
downvoted. some people will participate in the post by linking to other posts, and others will simply ignore it. do what you will.
ah. consider my post a reply to the top level one.
I'm using fuel now basically because a smart engineer told me about it and it seemed more advanced than other frameworks so i jumped on board. Kinda cool to be part of v1 also, its a small but helpful community. But yeah I agree that theres no 1 best framework out there they're all different. I would like to point out thought that after 3 years of 'freecoding' a framework is soooo much better. 
thanks for the input..
Wouldn't this still have the same effect if I forgot to remove the base tag when deploying though? I only have a very basic knowledge of the base tag though so correct me if I'm wrong :)
This would still have the same problem though wouldn't it? If my HTML is referencing `/css/style.css` then with a virtualhost it would access `http://site1.com/css/style.css` but without it would still become `http://127.0.0.1/css/style.css` *instead of* `http://127.0.0.1/~site1/css/style.css` as it should be.
[Lithium](http://lithify.me/) My two cents.
http://www.phpframeworks.com/
nice, i hadn't seen this before.
Or slightly less outdated: * http://phpkode.com/projects/category/php-development-framework/ * http://matrix.include-once.org/framework/ * http://superdit.com/2009/07/22/big-list-of-php-framework/ * http://webification.com/best-lightweight-php-frameworks-2010 Though an actually useful API comparison is nowhere near in sight. (Feature lists and OOP wanking turn out to be pointless.) 
As I mentioned above, as long as you control at least one domain out on the net, you can add a wildcard entry pointing to localhost (or to your static LAN IP if you like to test on multiple machines at your workspace). No need for a local DNS server or for proliferating hosts file entries. 
Been messing around with Symfony2 (released last week) and it is fucking awesome so far. www.symfony.com
&gt; Good software engineering books come along once or twice a year. You just have to know someone who knows what's good. This type of absurd logic is what you're feeding into by talking to this nutjob. Accept that he has his own delusional dialect and belief system. He wants attention (as you can see, he is happy to reply while saying he doesn't want to) and you give it to him. Downvote his posts, ignore his rants, move on.
This is how EVERYONE evaluates production software. Frameworks, templating engines, scripting languages, databases, source control, etc. It's really a shame we don't have a handy chart for PHP Frameworks. haven't tried Fuel. Want to. Use Kohana3 by choice with Doctrine2. The answer "there is no one answer" is by people who don't even bother to do a site in multiple frameworks. I know I will forever avoid: Cake and CI and Akelos and Symphony. 
I don't know enough about PHP frameworks to give a thorough overview of all of them. I have used Symfony 2 for a couple of weeks. It has a strong system of MVC. It is somewhat DB agnostic but works with Doctrine quite well. It has a system of bundles that supply the twig based templates (view), Namespaced OO php methods (controllers), and any "model" that may or may not be supplied. Both the strength and weakness of Symfony2 is the structure. The structure enforces writing reusable code (as bundles) but can be a pain to setup. The configuration may be done with xml, yaml or php. Symfony2 is heavily dependent on PHP 5.3+ and PEAR libraries. This framework is quite young and the documentation isn't complete and there may not be many guides or bundles yet. For a python programmer, the Symfony2 framework reminds me of Pylons 1.0. 
I know this is way late, but do you ever get to one of the PHP meetups in Raleigh? Just wondering if we've met before. There's one coming up at ncsu campus this week I think.
I'd be interested in hearing why you would avoid those frameworks you listed.
Upvote and move on :)
The point would be "hey, if you're new and want X, use Y. If you want Z, use F." And so on.
Why? I haven't looked at it yet but what do you like so much about it?
IBM: http://cakebaker.42dh.com/2007/10/11/comparison-of-three-php-frameworks/ I don't go trolling the internet for other people's stories about frameworks...I just go ahead and take a saturday to try them. I attempted to build a non-trivial site in my list of "shunned" frameworks. It's important to understand my viewpoint as a developer. I work with monkeys...some very smart and talented people as well, but mostly monkeys and or people with completely different skillsets. Simple, fast, collaboration is king. I'm not sure how many companies you've worked at where you can take a 40 hour week for research and development, but I'm going to guess 0. So early good impressions matter as well. CI is to Kohana, what Fedora is to Centos. When's the last time you saw Fedora integrate something from Centos? Yea. CI is so far behind Kohana, they integrate improvements from it. Kohana separates concerns in a much more aggressive and forward-thinking manner. I don't see myself ever using CI professionally (nobody I've ever interviewed with, uses CI and maybe 2 people I've interviewed have used it). Like most frameworks, it just gets hacked up till it barely can be recognized. Symphony is just plain too complex for what it offers. Why don't you have your own opinion? Probably because you're worried it will be difficult. Rightly so. Ask the hundreds of people who agree that it's overly complex and a pain in the ass to configure AND maintain those configurations. As an aside, I believe Blizzard runs their site using Symphony, given their reliance on XSLTs for the Armory and some job postings I've seen for them. XPath is said to be a widely-adopted open standard recommended by the W3C, because the W3C says it...not because it's true. In reality, you almost never want to be anywhere near XSLT and XPaths. The curve for learning XPaths is non-trivial. Much like CSS you can get by with someone who has a little knowledge (duhr, what's a selector), but it will generally cost you in the long run. Doctrine is amazing and I have taken that, happily. It's the good part of Symphony. Stay away from Propel. Who the hell needs a build tool (phing) for an ORM? Sheesh. All frameworks need to be able to use an ORM without much effort. Speaking of that, Cake has a number of crappy classes, including Models. Cake has gone through a lot of changes, but I find it's no better than Kohana and inconsistent in conventions. Quit supporting php4. I was around for php/FI. You don't support that, and you shouldn't be supporting php4. You've had 6 years to rethink and retool. A framework should be on the curve. In Kohana, everything is pluggable and relatively DUMB. This is an improvement over Kohana2 (which I wouldn't use). The routing system in Kohana is superior (although it's limited in some respects...like wildcarding doesn't work the way I want)...the plugin system is superior, I toss the ORM and Auth and Validation bits and rolled my own and everything still seems properly organized. I'm not changing MY site structure if I don't have to and my standalone plugin functionality from other projects...plug in as expected. No additional scaffolding necessary in Kohana. With Cake, you have to modify bits all over AND know it well enough to do that. It's not pulling teeth, just pulling hair. I don't need that. Akelos heavily integrates the ORM into their built-in tools. I'm sorry, but I don't want to use that ORM. So I have a bunch of useless tools. Awesome. What's left of the framework is a primitive version of CI. I just don't understand this thinking. A lot of frameworks were started with some codebase. The existing codebase/workflow/methodology/approach leads people (and their projects) to keep things tightly integrated, with the expectation that their implementation will be the best or improved to be equivalent. This is yet another example that this prediction cannot hold true. Akelos isn't extremely hard to modify with "plugins' because there's not much there to begin with so that's something. I don't see myself ever choosing it.
I spent months doing then and realised it was a complete waste of time. In the end I didn't use a framework.
How about using PHP and coding everything yourself.
How about wasting a ton of time. 99% of websites are best made in a framework. That is if you understand how they help you.
I usually set up my base tag to have a dynamic href, typically a setting in my bootstrap php file that hold some config constants. So when a site launches, I just change the value. Works pretty well for me so far.
This was 4 years ago...
Actually, MVC is not a small pattern from Gang of Four (See [Design Patterns](http://www.amazon.com/exec/obidos/ISBN=0201633612/portlandpatternrA/)). Design Patterns does make reference to Model-View-Controller, but even they acknowledge that MVC is a triad of classes used in Smalltalk-80. MVC was first described by a man named [Trygve Reenskaug](http://en.wikipedia.org/wiki/Trygve_Reenskaug), while working on the [Smalltalk programming language](http://en.wikipedia.org/wiki/Smalltalk) at [Xerox PARC](http://en.wikipedia.org/wiki/Xerox_PARC) (Reference: [MVC - XEROX PARC 1978-79](http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html)). &gt; I made the first implementation and wrote the original MVC note at Xerox PARC in 1978. The note defines four terms; Model, View, Controller and Editor . The Editor is an ephemeral component that the View creates on demand as an interface between the View and the input devices such as mouse and keyboard. The actual original implementation (in Smalltalk) is described in a very influential paper titled ["Applications Programming in Smalltalk-80: How to use Model–View–Controller"](http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html). Further evidence is the fact that the book Design Patterns was published in November 10, 1994 ([source](http://www.amazon.com/exec/obidos/ISBN=0201633612/portlandpatternrA/#productDetails)), but the original essay "Applications Programming in Smalltalk-80: How to use Model–View–Controller" was published in 1987 (later updated in 1992).
It might still help to have a guide explaining the difficulty, usage, customization, and setup time for most frameworks so people don't have to spend six weeks (if they're new to frameworks) trying to find one. Beyond that, I think the major reason for this guide is so people stop asking what framework to use.
I'm honestly a little bored of how you keep dusting off things you found on the web and holding them up as if they were things you knew. You didn't know this until the Atwood article you googled yesterday. I know because this is not, in fact, correct, as well as that this is not what you were saying yesterday, and also this is cut and pasted from the article you found yesterday. I'm getting angry. I told you yesterday that I didn't want to hear from you anymore because you kept pretending to have knowledge that you don't actually have, as a form of social positioning. You apologized at length, and said you hoped you could change that for the future. I almost fell for it. Here you are doing it again, less than twelve hours later. I don't know if your goal is to karma whore, or if you have an emotional need to feel knowledgeable in a discussion you just said completely opposite things about yesterday, or what. That you will not stop pretending, however, is what's guaranteeing you that the thing you keep saying you want you will not receive.
Actually I missed the reference to Smalltalk in Atwood's article, and instead got the reference from the book you've been telling me to read this entire time. After that, I did some more research so I could share the information with others. Anyways, I don't really care what you think. Bye.
&gt; After that, I did some more research so I could share the information with others. That's that same lie you apologized for telling yesterday, where you do a little googling, call it research, and then ignore that the data you're tubthumping is - again - wrong. &gt; Anyways, I don't really care what you think. Bye. Twelve hours ago: &gt; &gt; Your behavior has guaranteed you won't get any more help. &gt; :( Hopefully I can change this for the future. Can? Yes. Will? Obviously not.
Roll your own. Done.
To be useful it would need to be much more than a simple reddit post; it would need to be a 'living document' in that it would necessitate constant updates and revisions. These frameworks roll out new versions sometimes monthly, and so this would not be a trivial task. Do we want to be purely objective, merely giving facts and letting the reader draw their own conclusions? If so, then something akin to the table at [phpframeworks.com](http://www.phpframeworks.com/), or the table at [wikipedia](http://en.wikipedia.org/wiki/Comparison_of_Web_application_frameworks#PHP_2) would be appropriate. However, if we were to go the route of actually giving advice and advocating certain frameworks, moderation would be required to limit bias and prejudice; it's one thing to say "Foo is the best because of x, y, and z", but it's quite another to say that "Bar sucks because it doesn't even have x, y, and z". Also, who is even qualified to make such subjective opinions? While a good idea, I'm not sure that reddit has the resources or setup to handle this task appropriately.
Interesting that out of all of the PHP programmers out there, of which I am pretty sure that most are men, that the most prominent [PHP-extension](http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X) tutorials are [from women](http://devzone.zend.com/article/1021)?
Oh, is that your blog?
I'm just quoting Stefan Priebsch : "To this day i haven't found any PHP MVC framework that is good" . (Said at Confoo Montreal in April during a presentation on MVC). And a very much agree with him, tried pretty much all of them, there are differences between them, ones that i would say "sure it gets the job done" (Fuel, Kohona) and some i would say "stay away from it" (CI, Zend). Always keep in mind that 99% of those framework add an overhead that is considerable to your application, for features you don't need (yes i'm thinking Symfony). My advice is, go with the simplest of all, it will fulfil your needs most of the times. Hell, if you feel like it, build your own, putting together a quick MVC framework is doable in a week end (it will be simple but will work, as long as you follow good practices). And it's a great opportunity to learn.
There are several issues with creating some sort of standing answer. Calling these web application frameworks MVC is flawed at best and dangerous at worst. When I spent a great deal of time reviewing PHP frameworks, I started to realize I simply wanted less of a system to do things without my input and more of a set of libraries that would help me ease the burden of heavy lifting. Codeigniter and Kohana seem to be locked in a three way war with Yii, which seems to be the best "on Rails" system out there. It makes CRUD stupid simple, but when you don't write the code yourself, the CRUD has cruft, and becomes more difficult to maintain unless you understand exactly what is going on behind the scenes. Lithium, Fat-Free, and Flourish all fit my needs more: tools I could add to my own code without losing a sense of maintainability. Each of them has their own strengths (Lithium is pure 5.3, Flourish is open source, FatFree's router is awesome) and weaknesses (Lithium has little community, Flourish is coded by a single person, FatFree is GPL). I *really* wanted to use Zend, but the dependency layering is so bad that any small program ends up adding giant libs that are barely useful for anything else. Symfony, especially given the breaking out of several libraries (including Microframework Silex) has been of particular interest to me, but I haven't taken the time to check it out in detail. Every person is going to have their own particular wants and needs with how much, or how little, they want their framework to do. I'm a huge fan of frameworks adding to my arsenal, not firing the guns for me.
Your opinion of Symphony may not apply to Symphony2. It is very different.
| How about wasting a ton of time. 99% of hacked websites are made in a framework. That is if you understand how they help you. FTFY
I like this guy.
I came here to recommend expression engine
While Drupal does have this ability, I do not recommend it based on personal experience and headaches. I do, however, recommend TomatoCMS as it does have this ability and is built using Zend Framework.
You've spelled Kohana 3 wrong ;)
I would highly recommend Drupal, especially version 7. It has everything you are looking for. I can understand @tortuga's frustration with previous versions, but it has gotten MUCH nicer. There are tons of third-party modules that integrate perfectly and play nice with each other (unlike Joomla, which is a total disaster). Definitely check it out!
I have heard that drupal can be hard for non-savi users. I have an editor that produces most of our content. He can do very basic html and that's about it. Is it going to be intuitive for someone like him? How easy is it to write new custom content or plugins for Drupal? How easy is it to upgrade? I find Joomla upgrades to be easy, but most plug-ins take months before they can be used with the newest version. This is really frustrating from a security standpoint.
I've been doing web dev since 2003 -- drupal's setup/UI frustrated me so much I gave up on it before I could get it fully operational. I'd avoid it if you have anyone not tech savvy using it
I've used MODX for multiple sites with success. You can read the documentation on how to do it; it's relatively straight forward. Unfortunately, I haven't seen a forum implementation for MODX though. Would love to see that!
I've recently played with drupal 7 for the first time, and first impressions were good. Basically you would have to be the guy that sets everything up, once that's done some html/wysiwyg knowledge is sufficient to keep the site up to date. Custom content is standard, you can make up any combination of fields, this seems to work very nicely. Custom plugins is a bit more work, the learning curve for drupal is a bit steep but it does give a lot in return. This being said, i still haven't used drupal yet for any projects yet. But once I have a more typical cms project I think I will.
It seems that not many people know that they keep around every version ever released... PHP 1.0? You got it...
Nope, my code is all 5+ only :&gt;
I definitely recommend Drupal 7.
Yeah, I tried to figure out Drupal myself once, I just ended up getting way too pissed off.
WordPress with multisite mode on?
&gt; function __construct() Nope…
Compiled PHP 1. None of my code works, but at least it's a better designed PHP info page http://cl.ly/9Iiw
I use MODx a lot. It hasn't got a forum yet, but a plugin called Discuss is currently in development by the core MODx developers. It can't come soon enough! You can integrate Vanilla 2 with single sign on though. 
EE is pretty powerful and well tested, and I've never had a client that wasn't really happy to use it. I do get post-project calls about how to do stuff in EE after the site is built, but relatively few. It's a great CMS, really. The only downside is the cost. It's not free, last I checked.
Yes.
Since PHP 2.0 required register_globals, any non trivial code that is compatible with it likely has a security hole. 
Kohana dev here. We used to have more form support then we do now, but found it to be more limiting then it was helpful, and also broke MVC(you were creating views from inside a controller, but supposed to load and validate those views in your model?) I'll check out Symfony though, this is the great part about not picking a specific framework to endorse, everyone has great ideas and not every framework has every great idea.
SilverStripe. Built on Sapphire framework which incorporates parts of ZF. Multiple sites management is a plugin, likewise forum. PHP is kept out of the template, there is a really nice new version they are working on to release later this year as well. I would not recommend MODx or Wordpress for what you want.
I know I'll be voted down for this but [typo3](http://typo3.org) has amazing support for running multiple sites off the one cms, has had this functionality for many years in fact. Drupal multisite support really seems like a dirty hack.
As a non C/C++ developer, I must admit that PHP 1.0.8 is the first piece of code that I am actually able to follow and understand.
register_globals is not insecure. Developers create the holes, not register_globals.
Another question: Can anyone here compile PHP 1 or PHP 2? :)
Building and maintaining a Drupal site are two completely different things. Building a Drupal site definitely has a learning curve and isn't recommended for people who aren't developers, or at least tech-savvy and have the patience to learn. Once it's set up, though, maintaining it is as easy as clicking on "Add Content", choosing what you want to add, and filling out the form. Drupal takes care of the rest. It can't get any easier, really... Once the site is set up, I'd argue that Drupal is the EASIEST for non-technical users to maintain content day to day. All your content is managed centrally with consistent UI that all follows the same rules. No digging around in different areas of the control panel to find the management interface for each section of the site like in Joomla (what a nightmare it is to train users). 
In a word? No.
How is EE on SEO? My biggest complaint with Joomla is all of the duplicate content from the multiple url paths it creates.
I honestly don't know. I normally ignore SEO entirely as it's not typically required for my clients. I've done a lot of intranets on public servers (I know, doesn't make much sense) using EE as well, where SEO was obviously a requirement to not exist. Intranets have kind of been a big thing for me, as I did a few right, and apparently every company needs some silly CMS based intranet these days so word of mouth worked wonders.
This his true, but his point is still valid.
I was like that the first time I tried, then I stuck it out and figured it out. Now I'm more pissed off than ever now that I've seen the code architecture.
DOMDocument definitely has the best support. SimpleXML is going to be a lot simpler and faster to implement.
If you end with Drupal 6, install the RootCandy admin theme, admin menu module and one of the common editors via the WYSIWYG API. That takes care of the major UI complaints missing from core.
When did you give up? There have been a lot of improvements in the last few years, especially on the UI side, Drupal 7 takes this to a new level, too.
I tried once 3yrs ago and once within the last yr. In general, I'm not a huge fan of CMSes, but Drupal is by far the worst i've had to work with.
There are a few EE plugins that are great for seo, I think this is one of the best places to get anything EE related [devote-ee](http://devot-ee.com/search/results/search&amp;keywords=seo&amp;channel=addons&amp;addon_version_support=ee2/). These guys [vectormediagroup.](http://www.vectormediagroup.com/landing_pages/unit_3_col/929/?gclid=CNnekdfN0qoCFRl0gwod0gn40g) specialize in EE SEO services and I've heard good things about them. The multi site manager for EE is quite nice, adds a couple of extra UI elements to the admin and it's easy to navigate to different sites, also easy to use each site's content in each other (site_id=&lt;your list of site ids&gt;). I love EE, it always feels costly but when you evaluate what you get and how easy it is to throw sites together + all the plugins/modules and extensions that for the most part have good support it's really my 1st choice. 
This question always makes me think the problem is a lack of research on the person posting the question. The only way you're going to know if a CMS suits your needs is to gain some experience with it. CMS systems and frameworks are like farts - *everyone likes their own brand*. Few people are actually objective when discussing them.
Yes, but it didn't like my Python code.
True, and it was a quick response, but at least it caused the insertion of "*likely*" ... and someone has to defend the honor of register_globals ;-) 
The base tag works fine here (Chrome 14 on Windows and Chrome 13 on Fedora). I confidently expect it works fine on chromium as well - are you trying to change TLD with the base tag? You might be running afoul of some XSS protection.
So basically it's a down vote if one isn't pro Drupal or wot?
5.2+ for me.. very soon 5.3 but I'm holding off just a little longer ^_^
I just had my first play with the SAX xml parser. Takes a bit more effort but is nice and fast and handles large files. I've always liked SimpleXML for simplicity.
don't get why you've been down voted? EE is fine, like all things in life, you get what you pay for. If you want something easy to install, easy to use and fairly quick EE is fine. We also use wordpress, but it's hard for clients to understand why we're giving them a blog when they've asked for a CMS.
Pretty awesome that they keep these archives around, but nah, I abuse anonymous functions FAR too much :)
Selective quoting - it makes sense if you look at the rest of the line it was taken from :)
I installed fire-bird, as in the old name of firefox, over 3.5. weird things happened(all in VM)
SimpleXML for me. But DOMDocument isn't hard to use, so I don't think you can lose either way :)
Conversely, I spent years NOT using a framework and under no circumstances will I do that again.
I would recommend SimpleXML
SimpleXML is easier to read XML quickly but I find the library of DOMDocument more consistent, flexible and powerful. Therefore I use the later to write XML. It is a bit more verbose but you can write little shortcut methods to help you
I agree, and form handling is one of the most time consuming portions of building large sites.
there's actually a [ton](http://kohana-modules.com/modules/bmidget/kohana-formo) of [community](http://kohana-modules.com/modules/Zeelot/kohana-yform) [form](http://kohana-modules.com/modules/samsoir/morf) [modules](http://kohana-modules.com/modules/Azuka/Kohana-ORMForm) [available](http://kohana-modules.com/modules/mintbridge/jellyform) for kohana. so you may want to look into those before messing with symphony and trying to integrate it proper
kohana modules include docs as a part of the source code, so when you install a module you can view the docs using the official provided userguide module. you can also view them online with github by reading the .md files(markdown) in the guide/ folder. but userguide formats it in a way that makes more sense and provides some real nice documentation. I [took a screenshot](http://i.imgur.com/i9IL6.jpg) of the formo documentation from my local install.
Not really, I actually used a library of functions and classes I had built over the years instead. This is my "framework". It's far more important to understand the principles of frameworks than to actually use one. Learning about MVC and OOP is crucial.
we provide [online docs](http://kohanaframework.org/3.2/guide/) for kohana itself, it's up to module devs to provide online docs for their modules. 
We've met twice. Once at the NC jQuery &amp; JavaScript Camp in Feb 2010, and once later, when Rebecca did a web-related presentation in Durham. We've even maintained the same software the same **c**ompany, but at diffe**r**ent ti**m**es. ;-)
Nice, I love it. Have you heard of [GetSimple](http://www.get-simple.info)? I've only briefly looked over Elefant, but they seem quite similar.
Why is this the first thing the article says?: Well ok, not really. But you should not be securing hashes against rainbow tables anymore, you need to secure them against brute forcing. As this article has quite a few numbers that are interesting, a suggestion like this really bothers me. edit: wtf did I say?
... and that's why you limit the number of attempts / second(s). You make it so someone with screaming hardware can't brute force you and still has to take years.
Why does it bother you? By definition securing against brute force attacks will secure against a rainbow table as well (the same principles are applied, but there are additional ones for brute forces). Think of rainbow tables as a subset of brute forcing. So if you protect against the super set, you automatically get the subset. Don't target the subset specifically, otherwise you may miss the bigger picture...
Tell that to Lifehacker. If an attacker gets your database (which happens far more often than we like to admit), you still need to make it hard for them to crack the passwords contained within... Don't forget, a scary number of users re-use the same password (or two) over a large number of sites. So protecting them by making hard-to-brute-force password hashes will actually help keep their information safe even if you have a vulnerability...
By not including a salt, you are reducing the entropy of the system. Whereas I agree if you increase the number of bits in the hash, you are increasing the amount of data that would be required for brute forcing the system, that does not mean that a dictionary attack could not be used anyway. With that being said, a md5 would be just as susceptible to a dictionary attack as sha512 would be (assuming there is no salt).
Who said anything about not including a salt? I didn't say not to include a salt, but *just* including a salt is not good enough anymore... That was my point. Look at the 3 password hash mechanisms that I suggested (bcrypt, pbkdf2 and phpass), they all use salts. Using a salt is very good. Only using a salt is very bad. That was the point I was making...
At the start of your article you suggest people should not worry about rainbow tables, and you should use a bigger hash. This is imo misleading, as you do need to worry about dictionary attacks! Also, I like the math computations. Showing us that old hash functions just aren't cutting it with modern technology. The crypto's knew it was coming, it was just a question of how long could we keep the hashes secure. It's not all that hard to just get a db dump, as a hacker :)
ah, true. In that instance, long day... brain not working, not thinking completely.
I think some people in r/php feel like pre-built solutions such as word press and EE are bad no matter how you look at them. Php purists? I don't mind down votes, but I agree it doesn't fairly reflect how useful these solutions are for certain clients.
I like Zend Framework's form handling. I use their Dojo and Dijit part a lot as well.
&gt;Well ok, not really. I stopped reading there- nice linkbait!
It is very diverse. You can leave it as is and not do that, there are also multiple ways of implementing it allowing for a flow that works well with a project. 
This relates to PHP how? Oh, that's right, it doesn't. I recommend /r/netsec.
I think this is a very valid topic for PHP given the fact that most people get security wrong when building sites using PHP.
It's arguable that most people using PHP are also not good with women, but we don't need dating tips here. If the article had a PHP-spin to it, perhaps. But the only correlation to PHP is the mention of a few functions at the end, no more than one could gleam from php.net.
SimpleXML loses its shit if the document isnt formatted correctly, DOMDocument leave a bit of wiggle room as its more geared toward web html.
That's a pretty bad *reductio ad absurdum* argument. In order to build a secure system in php, you need to have some idea of how security works. To that end, I don't see what the big deal is. It isn't like he's flooding /r/php with abstract irrelevant articles. It's just one article that targets a specific issue. In other words, if it bothers you that much just downvote it and move on. Don't sit here and whine about someone offering to do something useful for free.
&gt;Presently, there are about 3 algorithms for PHP that will provide adequate defense against brute forcing. BCrypt (called Blowfish in PHP's docs), PBKDF2 and PHPASS's internal function (in order from strongest to weakest). It's worth noting that projects such as Drupal, PHPBB and Wordpress have all implemented either PHPASS or a derivative thereof. All of the algorithms accept a "work factor" which controls how much CPU time the algorithm takes. By artificially slowing down the hash, brute forcing is made significantly harder (but not impossible). 
Great, I'll start submitting dating sites immediately. I wholly expect you to simply downvote and move on.
Oh, I see, it's like this... $isPhp = stripos(file_get_contents('http://blog.ircmaxell.com/2011/08/rainbow-table-is-dead.html'), 'php') !== false;
[readfile or X-Sendfile](http://www.jasny.net/articles/how-i-php-x-sendfile/) (search "php send file")
This worked perfectly. Thank you very much.
Heads up: I don't know how this subreddit feels about self promotion, but this is my own blog article. I only ask that if you do upvote or downvote, please do so based on its merits. Thanks!
Go with tastur's approach (x-sendfile). Sappro's approach will cause problems with the Acrobat Reader plugin under certain circumstances because this simple PHP code doesn't support byte-serving. If the PDF is indexed appropriately, Reader will try to request only the pages around where the user is viewing in order to speed up display. This request will fail and it will either be really slow or not work at all when the user tries to flip through the entire document. Of course, if your PDF doesn't happen to be indexed for byte-serving, then it will be really slow anyway and you won't notice the difference. If your PDF documents are very small then probably none of this matters.
He just went ahead with the code that someone else wrote for him.
Well, if you submitted an article about how to conceptually solve a problem that programmers of dating sites are likely to run into, and recommended some open-source PHP solutions that have already done all the hard work, I'd upvote it, just like this article.
[ingenious](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html)!
DOMDocument hands down.
I'd imagine [readfile](http://www.php.net/manual/en/function.readfile.php) or [fpassthru](http://www.php.net/manual/en/function.fpassthru.php) would be better options. 
i like that article, what specifically do you disagree with? my style is different than his but the principles seem sound...
didn't mention that you should use a separate salt for each stored password, and store it somewhere associated with the user it means that the entire attack has to be run against each individual password, and a single crack run won't reveal every password so assume that if the cracker has dumped your password hashes, she also likely has the salt as well
That's not the point of a salt. Even if it's stored elsewhere, they can still get it. You need to assume an attacker has your code and all data.
The blog post makes a great point, but it only really applies to websites that use good security practices (and unfortunately, many do not). Rainbow tables were used in many of the high profile hacks of the last few months, most notably the HBGary fiasco. Rainbow tables won't be dead as long as large websites refuse to perform basic security measures like salting their password hashes.
&gt; (you were creating views from inside a controller, but supposed to load and validate those views in your model?) That's one of the things I like the most about Symfony 2, and it's one of the things that took me the longest to "get". In S2, your model layer is _not_ your ORM classes (Entities). Your entities make up a portion of your model layer. Your forms are another portion of your model layer. When you think about it, conceptually, forms are objects; they have properties, validations, etc.; they need to be rendered and re-rendered. In S2, you create a form class that describes all of the properties and validations of a form. Then, in your view, you tell the form how to render itself. This fixes the biggest issue with the form implementation of CodeIgniter, the last framework I used thoroughly. **tl;dr** In S2, no form logic in your controllers, no html in your form class.
For writing out large amounts of XML (50MB+), I prefer XMLWriter. It's nearly as fast as just building a string, but it will handle escaping and closing tags for you.
90% of the time, what you need to do can be done faster with a regex than any of the above.
He never said that the point of a salt included storing elsewhere from the hash.
I've had many times where creating a rainbow table was for more viable for me than running a brute force, personally.
Have you tried Cake's? Overall looking at this tutorial really validated my choice in cake.
Overall, this was good for showing what it can do... and validating my choice that I like cake better. Still trying to find a php 5.3 framework that I can get running and seems worth putting effort into learning...