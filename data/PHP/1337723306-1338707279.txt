Kirk never told Scotty how long to take, only that it needed to be done in less time than Scotty estimated. Of course, Scotty was smart and always told Kirk it would take longer than he knew it would so when he would finish ahead of schedule, he'd look like the hero.
I'd recommend storing the PDF file on the filesystem and keeping the metadata in the DB. I use a system like this where I give each file an auto-increment ID, so then I just have a directory with file1, file2, etc. Storing this kind of data as a blob in the DB, at least in MySQL, doesn't seem the most efficient. Although perhaps a NoSQL-style key/value DB could be good for this.
&gt; expert sexchange I still LMAO over that domain. You almost have to think they picked it on purpose because of the buzz it would generate.
as stated above, it looks as if it should be two separate operators: - == for comparison - ( - ) for negation the string 'something' is cast as an int due to the negation operator, any string should evaluate to 1 (aka true), negate operator then makes the casted int -1 finally the comparison operator compares the left side to the right side. leaving us with: if($v == -1) &gt;Like that, I think it always just returns true. Even if it were a number (for instance, $something), its still a comparison. if the left side doesn't evaluate to -$something, it will return false
&gt; Here's a golden rule: use exceptions for what their name says: exceptional situations. I always thought this was worthless advice. Okay, so what then qualifies as an 'exceptional' situation?
I believe you may have misunderstood. Who do you think would enforce such a thing anyways? Only people submitting code to projects deciding to adhere to the standard would need their submitters to follow it. Hence, the member frameworks.
I agree with everyone who says store files on the filesystem. After all, a filesystem is nothing but a database that's heavily optimized for storing blobs. It's also wise to come up with a nesting directory structure so you don't end up with a large number of files in a single, flat directory. That can get unwieldily very fast. Another benefit is you can partition data across disks by playing with mount points as needed. Bonus points if you write a nice tool that can adjust the depth of your filestore at will.
Files to FS, data to DB. But you might also want to checkout Amazon S3, and Google's Storage for Developers as your files storage.
Good read, and great point. Your methods should inflect what you're doing with the object. There is something to be said, though, that people, and even some code, *expect* getters and setters. An example of the latter is the Symfony2 Form component. However, "everyone already does it this way" is a pretty weak argument.
(For convenience, and because I'm not sure I can get markdown to display exactly what I want, I've put the code snippets in a [Pastebin snippet](http://pastebin.ca/2152500) as well.) If you use all spaces then your code will line up exactly the same in every editor. For a contrived and not syntactically valid example, if you've got a conditional with several long conditions that you've broken up onto lines: (Using `T` to represent tabs, `S` to represent spaces.) `A`: if ($outer) { SSSSif ($condition1 &amp;&amp; SSSSSSSS$condition2 &amp;&amp; SSSSSSSS$condition3 SSSSSSSS) } If you indent and align with only tabs instead (indenting each condition by one tab), each user could potentially have a different tabstop/tab size set, and you may end up anywhere between: `B`: if ($outer) { Tif ($condition1 &amp;&amp; TT$condition2 &amp;&amp; TT$condition3 TT) } (Tabstop of 1) And: `C`: if ($outer) { T if ($condition1 &amp;&amp; T T $condition2 T T $condition3 T T ) } (Tabstop of 7) By using spaces you ensure your code is always lined up exactly as you wrote it. So spaces are the obvious choice, right? Well, the other side (tab-users) argue many things, the three that come to mind being: Tabs separate display and markup in a sense (the theory behind using HTML and CSS). By using tabs, you allow the user who is editing the code more control over how to display it without changing the file itself. If I prefer a 3-space tab I can set my editor to display it that way. If you prefer a 7-space tab, you can set your editor to display it that way. At the end of the day, we still have the same file and we're both happy. But what about that alignment issue? Well, that's where you get people suggesting using "tabs for indentation, spaces for alignment". What they mean is you tab in as far as you want to indent, and then align everything past there with spaces. For example: `D`: if ($outer) { T if ($condition1 &amp;&amp; T SSSS$condition2 &amp;&amp; T SSSS$condition3 T SSSS) } No matter what size you set the tabs to, the conditionals will always line up. Even if we wanted a tabstop of 10 for some reason: `E`: if ($outer) { T if ($condition1 &amp;&amp; T SSSS$condition2 &amp;&amp; T SSSS$condition3 T SSSS) } Finally, depending on your editor, a set of four spaces may be treated as four separate characters, whereas a tab is always only treated as one. This can come into play more than you think. Say you're writing some code and your editor auto-indents the next line, but you were planning on typing the closing brace for the outer conditional. You end up somewhere like this: (Where C is the cursor) `F`: if ($outer) { SSSSif ($condition1 &amp;&amp; SSSSSSSS$condition2 &amp;&amp; SSSSSSSS$condition3 SSSSSSSS) SSSSSSSSC You want to get back a couple of indentation levels. If you're using a GUI, you could click back to where you want to go... But they you may end up with 8 spaces sitting on that line after your brace. (Invisible characters littered throughout messing up your code... makes the nitpicky among us cringe. Of course, the same issue could arise with tabs, however...). Or you can start hitting backspace... An entire eight times to get back to the beginning of the line. With tabs it would take one or two. Sound minor? It is until you have to mash the backspace button half a dozen times every time you want to close a block. Personally? I prefer the "tabs for indentation, spaces for alignment" philosophy. Code looks just as good as using entirely spaces, and I have the option to use whatever tabstop I like. I like 3. (Guess how many projects indent by three spaces.) Lots of people use a good chunk of their monitor to program in... I tend to use 80 column terminals. Something indented four times (Namespace to Class, Class to Method and we're halfway there on every line already...) I waste 5% less of my screen's width by using 3 instead of 4. To be honest, I think it's largely just justification for something else, though. We're programmers... We're used to doing what we want. That's our entire job... Making other things do what we want. We tend to be 'raised' on the idea that the end product is all that matters and we detest anyone forcing *any* decision on us like that. Especially one as minor as what some see as a display issue.
yep. broad outer try catch block, many, spl exceptions [[http://www.php.net/manual/en/spl.exceptions.php]] that bubble up (to your bootstrap for example), or some arbitrarily high level. 
@see http://www.php.net/manual/en/spl.exceptions.php . Look at each exception type, complete with use case definitions. Friggin schweet.
thats almost as good as my shrinks name, Dr. Butcher, the rapist.
 require "libraries/browserid/Verifier.php"; $assertion = trim($_POST["assertion"]); try { $verifier = new Verifier('www.site.com'); $response = $verifier-&gt;verify($assertion); $verified_email = strtolower(trim($response[email])); $verified_expires = $response[expires]/1000; if ($response[status] == "okay" &amp;&amp; $response[email] &amp;&amp; $response[audience] == "www.site.com" //&amp;&amp; $response[issuer] == "browserid.org" &amp;&amp; $verified_expires &gt; time() ) { //good } } catch (Exception $e) { // Something went wrong //print $e; die("Error".' [&lt;a href="login.html" style="text-decoration:none;color:rgb(0, 0, 221);font-weight:bold;"&gt;try again&lt;/a&gt;]'); }
Nice when you need to quick test a bit of code. Or to see how PHP behaves with some kind of code.
If you've ever messed with ruby or python, you've probably used their interactive shell. They are really helpful for debugging and hacking away at stuff. With some version of PHP after 5.3.0 (I dont recall which exactly), you could enable interactive shell support. You can get to this by running: php -a However, PHP was not designed with this kind of a support in mind. The main issue is if you generate any fatal errors, you're done. The PHP process exits and you have to start over. When entering regular interactive mode, you can't specify a bootstrap file, so you have to type out your require, then start going at it again. It wasn't that helpful. Not only can you specify a bootstrap file right off the bat, but this phpsh dealio somehow handles fatal errors magically, and, I'm guessing, saves the state of your script pre-error, allowing you to continue on your merry way. Pretty dang awesome, but maybe not all that useful ;) 
Do you have any notes or resources on where to start when implementing a nested file structure when storing files accessed via PHP ?
Will this play nicely with FuelPHP?
I would say storing them in a database. Make sure largest PDF isn't larger than your allowed datatype size, and use gzipinflate/deflate when pulling them in and out of the database. 
HTML5 / WebGL. Make some 3D games or applications for the web. Or move to the mobile market. Learn OpenGL for Android &amp; Iphone. 3D is fun, but you better brush up on Matrix math.
Then you're trying to align a continued line with spaces against an indented line with tabs that could be anywhere from 2-8 characters wide.
People should just turn on smart tabs in their editor. Editing and navigating freedom of tabs, writes spaces to the file, every thing aligns perfectly. At this stage, I don't care whether they had picked spaces OR tabs - I'm glad that they picked one. Hopefuly the PSR-* can be like PEP8 from the Python world and bring in standardised code.
Yes - and it was Zend's coding standard before this also.
Suck it up and conform. Ask any Python developer worth their salt what PEP8 has done for their ecosystem. EVERYTHING is written in the same style.
I did use Slick2D and I have done some android apps. What I found was that it wasn't worth the time. it's not much money you can make unless your thing goes viral. which, let's be honest, is not that likely! 
What about objective C? Theres tons of work in it, if you were 'there' I could give you a 5k side gig tomorrow...
I picked up Laravel a few weeks ago from a post here on Reddit, and I love it. It really is super clean and makes a lot of sense. It's still got a lot of room to grow, but I don't mind filling in the blanks for now.
Hey, maybe I need to clarify that a bit. "wvenable" already commented on the primary case: validations. Lots of people tend to raise exceptions when they actually plan for them. So they already "expect" that a failre will arise - then it isn't unexpected! I've also seen code where exceptions are raised just to break out of a loop in a helper method. You may also think of them more as a "disaster recovery" (of course not always, but I hope you get the point). Maybe I need to clarify that in my post!
flash, flex, action script. Make some fancy front end stuff or an online game. or HTML5 Canvas and widgetty things.
Hey, maybe I can make some additions to "wvenable"s comment below. 1) This really depends on your use case and in what environment you are in. I didn't elaborate this in my post since its not really in the scope. If you are in a development environment, you may want to log to screen or firebug and show a detailed stack trace. In production, you may want to render a 404 page and log to a file or send something to a notification webservice by a third party provider. This is often handled by the framework you are using and often these provide detailed instructions on how to log or handle this kind of errors. 2) Think of it that way: most of your code won't need to throw something. It is often small parts that can go wrong (which often depend on external sources, like connecting to a database or webservice). So just catch the parts that can go wrong and handle them approperiately. If you put everything in a big block you may miss detailed error information or loose the ability to react correctly. For example, in your application you a) contact a database and b) display your twitter feed in a sidebar. If a throws, it's critical. If b throws it may be not (just display something like "couldnt load twitter feed"). Here you can also see that the strategy on how to handle each exception depends strongly on your use case. 3) I don't know exactly what you mean by that, but of course you can write something like a ExceptionHandling class that is called in the catch block and handles logging, notification and other stuff based on your environment. Did I understand you correctly? You can also ping me directly on twitter or per mail if you have any further questions!
You would run your php file like mentioned in this article. http://support.modwest.com/content/5/125/en/can-i-run-a-php-script-on-cron.html It is affected by your PHP timeout, so if you're on a shared host like mentioned, this might not be a possible solution to overcome the limitation.
As you said the focus isn't really towards the corporate side of things. There are already several tools available to do code reviews that tie into ticketing software, VC, wikis, etc. Maybe in the future this could develop into that, but right now it's more geared towards small snippets and getting a real quick peer review. When I get the API finished my plan is to develop some IDE plugins so you can create reviews from within the IDE instead of having to visit the site. Something like that should improve workflow a little. Also private reviews are planned but aren't implemented. Those would most likely be a paid feature though. 
That's a very good suggestion. But the issue with that, is that it would be a an organizational and support mess, trying to pull codes of individual strategies into the main core library. What I think would be better organizationally is to make something like http://jqueryui.com/download where one can choose which strategies they want them bundled and have it prepared into a single zipped package.
I'm not that familiar with FuelPHP, but technically it should. Someone needs to make a plugin for it though, or you can also use Opauth as a standard PHP library by instantiating an Opauth object that handles authentication.
Sorry about the poor half-baked documentation. The docs still need a lot of catch ups. In the mean time, if you need any help, feel free to leave a comment here. I'll try to help.
Thanks for the suggestions, enigmamonkey. Let me try to make a bundled download since we have only 3 strategies so far. :) However, moving forward with Opauth, it would most likely not have a single bundled package as there can potentially be hundreds of strategies given enough adoption and even duplicate strategies for the same providers, eg. Google OAuth 1 and Google OAuth 2 (or even multiple implementations by diff authors of Google OAuth 2). That makes not only tough to decide which strategies should be bundled with the core (and having to "disqualify" those which are not cut for it), also it would make the bundle unnecessarily huge and bloated. It would be better if users can pick and choose what they want to keep things light. A webpage like http://jqueryui.com/download will keep it user-friendly. Yup, currently the strategies are installed in directories residing in Strategy/. For example you would place Facebook strategy in Strategy/Facebook. Thanks for the feedback. Really appreciate your inputs. :)
Which is just great if you don't need to actually get anything done. &gt; readline history, tab completion, quick access to documentation
Well yes. They are pushing spl_autoload to replace the magic function. What you can do instead of this wrapping magic is just register your own autoload function.
flash is dead.
Excellent explanation. Also to address your issue of never having found a good source for learning regex, I've always found http://www.regular-expressions.info/ to be fantastic for learning. I would never have understood lookarounds without it.
I like this too, I'll test it on our setup in the morning and update my post! Thanks! Edit: I see what you were doing here... I still have to re-add all the callbacks I have from the array, so not really going to save myself much. 
Im not sure what you mean.
I don't think that matters. If PSR-0 and PSR-1 are massive benefits to the community then good, I think everyone is planning on following them and thats great for the PHP community. If you don't like PSR-2 then simply don't use it. If you have your own style guide then crack on with that, this simply puts out a good default for people to look to when they are starting up. For a while people were referencing the Zend guide as "the one true style guide" which is weird, having a standard voted on by the community seems more "democratic", even if not everyone is happy about it.
What about Haskell? A nice and easy language? And write something "web-related" with it. Like a web interface for server mangement. With inbuilt server (would blow out all the "php-perl whatever" server managers) I guess as someone which knows what developers want, you know what to write :))
C#, C++, maybe look into computer vision (my thesis is based on this and its quite interesting), XNA, Unity, ASP.NET. Just a few suggestions.
We have a common package format: PSR-0, and that means you can share files via Composer or PEAR2. What is the problem?
That is a best practise from the PHP4 days. Things moved on.
That would be a fairly flat structure, but still an awful lot of directories to handle, which may be okay of you have millions of files. (26+10)^2 = *up to* 1296 directories.
 // no save needed, data saved automatically So when is it saved?
Wow thank you. this is a great idea. I currently have scanned PDF files get attached to records and are stored in a flat folder. This will help out greatly.
I've been trying to figure out SPL for a long time. That first link is kick-ass. Thanks much.
I tried Laravel a bit last week, went through a bunch of tutorials and ultimately went back to CI. I couldn't get my head around Eloquent ORM, maybe it's because I've never working with any ORM before.
I'll stick with [php.activerecord](http://www.phpactiverecord.org/), thanks.
Eloquent can't be run standalone.
Maybe you should start by reading this post: http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern As for the quality of the code, it has: - global state everywhere - tight coupling caused by static calls - complicated computations in constructor - violations of LoD - public methods with up to 5 parameters - hard-coded values .. the bottom line: this is not how one should write code in 2012
The point of using setters is so that you can do validation/sanitizing. Calling a method changeName instead of setName is merely a matter of semantics. Either way, you should validate the input. The other advantage to setters is that they can return the current instance, allowing them to be chained. I would have written the changeName method as follows: public function setName($name) { $name = preg_replace('/[^a-z]/i', (string) $name); if (empty($name)) { throw new InvalidArgumentException('Invalid name given'); } $this-&gt;name = $name; return $this; } 
So .. as an answer you posted link to a site, where you can get downvoted by saying, that global variables are bad.
autoloader, PSR0, etc?
Yeah that was one thing I was worried about. Saving should always be explicit.
Note that I have very little experience with nginx (and its mostly with passenger, not php-fpm) Cant you "unset" the fastcgi_param on the other domain? Something like: fastcgi_param PHP_VALUE "auto_prepend_file=";
This guy makes me feel better about PHP. I always enjoy reading his posts, and via his work on CodeIgniter he's helped me make a lot of money. 
there is an extra (undocumented) update method for bulk field updates. this thing needs a good documentation.
Not judging you but, what can't you figure out about connecting to MySQL ?
this is an orm, not framework. it has only 5 classes. any framework can autoload these with its own autoloading way.
You, sir, are the reason why no one takes PHP developers seriously. Unless you have early onset Alzheimer's you should be able to remember the basics. For shame...
The things you do that qualify you as a fraud, are the same things programmers have been doing since the days of punch cards. There's a reason why modern day IDEs include auto complete, inline documentation of functions, built in help, and thousands of other bells and whistles. It's because there's no way for a single person to remember every aspect of a modern day programming language.
Read the post again. I actually agree that there should be a board that actually has the final say. The point was to open the rest of the process so the community has more than just cursory input into what becomes standard and not...
Well .. currently the process is only open "on paper". Do really want the php standards to be made by people, who have been making all the horrible php frameworks?
Sounds like you're suffering from the [Google effect](https://en.wikipedia.org/wiki/Google_effect). Your brain isn't particularly bothered about remembering that information because it knows it doesn't need to.
I have second-guessed myself so many times on explode() vs implode() that I'm no longer capable of knowing which one is which without code hints or some other assistance. Confusing the two has become an annoying habit I'll probably never break.
To be fair, they're so fucking inconsistent there's no reason to not double check from time to time.
Do the same search for any programming language and you will find similar results. Guess what? The internet is quite a big place.
I'd like to add [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/) if you're allowed to drop binaries onto the server.
“Never memorize something that you can look up.” ― Albert Einstein
Try join(): http://php.net/manual/en/function.join.php
I think it depends a lot. You can have a good head/experience for programming, and you can know lots of quirks in a given language and have a good bit of expertise in it, but still need the occasional reminder even for basic syntax. I think we should distinguish between just copying and pasting code like a script kiddie (not understanding what's going on, just the end result) - and just needing to remember the names, parameters, syntax etc which aren't really the *important things* in a programmer's mind when he or she takes on a new task.
Look, I don't think you're a bad developer. I don't think you're a good developer. I don't even know you. You can't remember everything, nor can I. For instance, I still have to search the docs for the proper use of the PDO library because I haven't used it much. That said, once you've used certain language constructs a number of times you should be able to remember them. I'm sure you remember many of them, probably even many more than you think you do. My issue with your post has nothing to do with your perceptions of your own abilities as a PHP developer. Everyone has their own areas of weakness. My issue is that your admission is cannon fodder for all of the PHP detractors out there who complain (and complain loudly) that PHP is a terrible language and that the PHP developer base is full of people who don't know what they're doing.
You'd only pass for a fraud if you modify someone else's source and sell it. If you're developing a source for client coming up with basic program flow, rough ideas etc on your own and only looking up for syntax, api docs, specific help then you're not fraud. I use SO all the time, I even have a bookmarklet saved for quick SO search. I've seen people suffering from such thoughts even after they've spent countless days and nights with the language. I'd say if you can come up with a final product that satisfies your client, then you're not a fraud. You know, you should be proud that you've the ability to develop and put everything together, placing them carefully to correspond with program's flow, making everything work. PHP and web 2.0 is so easy that sometimes people doubt themselves but they shouldn't because there are countless people who can add an anchor element to an HTML page and then there are countless people who can't, we work for the later. Not only freelance programmers but people from almost every profession doubt their abilities at some point. It's fine and healthy but don't get paranoid, stop doubting and keep yourself busy by exploring what's new. You mentioned Tizag which provides some very basic stuff and you really shouldn't be looking at Tizag after 5 years. Use an IDE like Netbeans because auto complete feature would really help you. Also look into OOP if you haven't already, work with MVC, learn a decent framework like Yii, practice with some good ORM like doctrine or Redbeans, try some front-end frameworks like Twitter Bootstrap or easy Framework, keep in touch with webdev blogs etc. May I know how much you make every month on an average?
I used to love NetBeans, but for some reason after a period of time it always becomes unstable. I'm not sure if it's Windows, the JVM, the application, a plugin, or what. If I could get NetBeans to not crap out on me it would be my favorite as well.
I understood your post, but I disagree with you. The PHP community already has a lot of sway over the course of the language, and I think the language has suffered as a result of that.
What makes it better than Doctrine?
Lol! I've been doing PHP dev for 10+ years. I'm CONSTANTLY looking up default values for functions... (like substr()... can never remember what the eff that function is called) You are not alone!
Move your caret (\^) outside of the brackets in your first preg_match. You're telling preg_match to first match against NOT having A-Za-z0-9 (rather than starting at the beginning of the string, as your second preg_match does), then you're inverting that result with '!'.
Your first if condition basically translates to if(username does not has a character other than A-Za-z0-9)
Because you're expecting the wrong thing. The query says "return true if the string contains any non-alphanumeric characters." If it does contain non-alphanumerics, then it's not a username... that's why you have to reverse the condition by adding the logical not. As a side note, you'd probably be better off using filter_var($email, FILTER_VALIDATE_EMAIL) http://us.php.net/filter_var It's much more accurate about catching valid email formats than the various regexes floating around.
PSR-2 is a fucking joke and it discredits the entire group.
This... foreach ($user['friend'] as $fid) { $friend=$adb-&gt;load('user', $fid); echo 'Friend Name: ' . $friend['name'] . "&lt;br /&gt;\n"; } ...is just bad. What if I want to print the names of the 500 friends a user has? Since there's no documentation, I'll assume this is a case of the N+1 problem.
I passed the ZCE exam last month, for which I had to learn a lot of function names, and parameters by heart. I'm still looking things up every day.
I'm doing the same and while PSR-1/2 is different then what I was doing, I'll likely voluntarily follow it in all my code unless a specific project dictates otherwise. IDE support is nice, although I use Sublime so I have minimal IDE-integration.
Sure... but why does it matter? It does the same thing either way. You could use "/\^[A-z0-9]+$/". That means "Every character from the beginning of the string to the end of the string must be A-z or 0-9"
I partially agree. I for example always end up looking for the variables accepted by date() when it's something beyond "Y-m-d H:i:s" but : Use an IDE, as soon as you start typing the name of the function it will appear a list with all the options + list with all the parameters. IDEs make your work easier and faster, if you don't use one, you should give one good reason to (you're faster/more productive without it). I think the main problem here is that PHP is mostly used for "simple websites", like a small blog, some photo gallery and a comment section (and I know because I did a few of those websites when I was younger). And I could tell you, I just "made them work". I didn't think of maintaining the sites or what will happen over the time (modification, scalability,...), you could directly handle the mysql connection and don't make a proper MVC at all. Then, you have on the other hand CMS or more complex applications (I just made a full application for a gym/sports club), with those kind of applications ... you HAVE TO use some design patterns, some abstract layers, unit testing, ... if not ... you will be crazy in a few months
As psientist said, this is an absolutely incorrect correction. A correction would be ""/\^[A-z0-9]+$/" as I gave above, which tests every character in the string, not just the first.
try learning German through the Google effect... it ain't easy being a gangster
To be honest, you need to get out of contract work. No one who needs the same ol' boring contact form or CRUD app as everyone else bothers hiring development staff because it's usually a one-off with limited maintenance, and they know they can find a contractor to get it done. You're currently stuck in this hell. The complement to that is that rarely do full-time developers at a corporation do nothing but contact forms and CRUD apps, as they need to specialize in whatever field the company is in, which is why the company hired full-time devs in the first place. If you want to expand your skills, go get a job at a company. And get hired to a position where you're near the bottom of the ladder; you'll have opportunity to learn from your superiors and grow.
What's your budget?
I really like the jigsaw analogy. I was reading on /r/programming awhile back on a post from a hiring manager talking about an interview he'd just done with a very experienced developer. When the hiring manager asked "What's your favorite language?" He came back with something to the affect of "Bash because it's the glue that lets you connect all the different pieces of an application together." That concept applies extremely well to web development in general when you think of all the data sources, devices, and services a typical web app needs to integrate with anymore and I think that really is what you're being paid execute.
Holy crap, did I write this? (Looks around suspiciously).... I've been thinking I'm a newb for these reasons for 5 years. :)
hmm heck, why not? I've heard a lot about it and Scala, maybe I should jump into it! thanks! 
I have already built my own MVC with a set of Facebook, Twitter, AWS and MySQL library. it's starting to get big so might publish it as open source sometime soon! 
Yeah, I've been using Notepad++ for the past 5 years. I've finally moved to PHPStorm, and I'm glad I did. PHP adding namespaces was kind of the tipping point for me to finally use a real IDE.
Don't feel bad... I just found out 3 months ago you could add arrays together... and I've been doing this for 15 years! $a = array( 'a' =&gt; 1, 'b' =&gt; 2 ); $b = array( 'c' =&gt; 3 ); $c = $a + $b; print_r( $c ); /* Output Array ( [a] =&gt; 1 [b] =&gt; 2 [c] =&gt; 3 ) */ $a = array( 'a', 'b' ); $b = array( 'c' ); $c = $a + $b; print_r( $c ); /* Output - Addition is done by unique keys and $a and $b share numeric keys so in this case it did not work: Array ( [0] =&gt; a [1] =&gt; b ) */ 
while I have not looked into A LOT of algorithms, I suggest the following: SIFT (Lowe 1999), SURF (Bay et al. 2004 i believe), HOG (Dalal and Triggs 2005), and the famous Viola+Jones (2003) Face Detection framework. I found HOG to be mighty interesting, mostly due to how it extracts information from images to detect stuff such as motorbikes, human figures etc. Kinda blew my mind. I should say that they might look intimidating at first but if you stick to it you'll find them rather trivial. Also, have a look at OpenCV. Version 2.4 has just been released, lots of updates, although it still lacks documentation in some areas. Its written in C++ so if you do not have any experience with that look into EmguCV or OpenCVSharp. Theyre basically C# wrappers, and if you know Java, you pretty much know C#, very little syntax which separates the two.
Usually you only have to write the function to connect to MySQL once in your entire application. Of course you're not going to remember it. In some frameworks you don't even have to do it once because it's done in via an ORM or some other abstraction layer.
You've made me feel better a lot better about myself, thank you.
Free would be nice.
I need to look up mysql functions when I need them because I usually use a framework or CMS that abstracts that away from me having to look at it. I still have to look up functions all the time. It's better to look something up, than to not bother and roll your own code that does the same thing.
Maybe you suffer from the impostor syndrome. It can be a bitch.
ah come on... why do you insist on kicking me in the nuts? XD
I think i remember that with "explode" I can divide a string ... like... well like I am exploding it ;) one.part -&gt; explode('.', 'one.part'); -&gt; BAAAAM many parts ;)
--Abraham Lincoln
Job security comes from knowing how to learn a task. If you can't do that, do the next best thing. Know where to find out how to do it. Through repetition you will learn the things you look up eventually.
Completely stupid standard.
Well put!
Explode turns a string into an array. It takes a whole and turns it into many fragments. Just like when something implodes. You have a building. And it explodes. Now you just have a bunch of bricks. You had the whole, and now you have the pieces. Implode is just the opposite.
If you're still connecting to mysql manually, you're a fraud. Use a framework that abstracts that shit.
This came out worse than I wanted it to be. I too am a fraud, I often browse the documentation because I forget the order of arguments, what $_SERVER element I need to use, stuff like that. I just never had a problem remembering the PDO mysql connection string.
Nice, and you didn't have the urge to write 7 classes full of method chains to emulate what PHP already supports. Looks like you might be interested in my [validation class](https://gist.github.com/2771633).
Your not a fraud, your a hacker, you know how to figure shit out with some documentation, just like most everyone else. 
&gt; If the definition of an 'exceptional' situation in a program is when you can't continue for any reason, in my experience, that's not all that exceptional -- it happen rather frequently! If it *occurred* rather frequently, your program would fail all the time. Exceptional situations don't happen frequently. More likely you meant that your code is littered with tests or situations, that if failed, your code cannot continue. That's different. The examples I provided work here: a parameter value is wrong or you cannot connect to the database. Your code can (and maybe even should) have lots of `throw` statements that, under ordinary operation of your program, never get executed. The adjective 'exceptional' is the right definition; it seems like you are being especially difficult. Exceptional means uncommon, aberrant, anomalous. Are you really having trouble figuring out when to and when not to use exceptions? 
Many things can be going wrong - file doesn't exist - incorrect permissions - youre on php 4.1 (ha) - you have an error on the page elsewhere that is causing the issue
You *are* a fraud, but not my looking up $_SERVER, we all do that; but for still using mysql_ functions.
writing date/time code is the worst.
Looks handy. One minor nitpick: Are you sure you want to be iterating by reference on line 31? It seems like the only effect this would have would be to make array parameters still refer to the original array (not be copy on write). E.g. $array = ['cat', 'dog']; $obj = new JSObject([ 'a' =&gt; $array, ]); $obj-&gt;a[0] = 'dog'; print_r($array); // ['dog', 'dog']
Makes sense.
Over-confidence is how bugs are formed. 
&gt; Imagine a desktop application with a save operation. If the save fails, you don't want the entire application to crash. So what does this have to do with PHP and exceptions? It's not like we're dealing with memory that's not garbage collected; worst-case scenario is we will see a Fatal Error or a bunch of unhandled error message in the web browser or on the command line. My php script is not going to "crash" if I do `mysql_query()` with no database present -- I'm just going to get an error. Is that what you mean by crash? To get an unwanted error message? Whether I throw an exception or have an `if ( ! file_save(...) ) {...}` I still have to have error handling code. I don't understand the relevance here, what that specifically has to do with exceptions, or understanding what an 'exceptional' situation in program execution is. The 'recovering' you talk about happens where you *catch* the exception, so if someone wasn't clear about throwing and catching exceptions, they would come away confused about what happens where. The disaster recovery doesn't happen where you *throw* the exception, but rather where you *catch* it. You or I may understand this, but if you're talking to an audience who doesn't already know this, they might be confused, because they think you are writing 'recovery' code at the same point where you throw the exception. But you don't -- you write the 'recovery', or error-handling code, at a different place, the place where you catch it. If you're writing for people who don't already understand exceptions, this is why you have to be very precise and have good explanations. They might come away confused if you tell them that throwing exceptions is error recovery, when the throwing of exceptions is not actually the recovery part of the code.
It's a minor tweak that saves some memory. And being a reference to the original array looks like it has a flexibility advantage as well.
there are many ways to do it, but i tend to always use array_merge because i can trust the output, unless i need to keep the indexes since it re-indexes the both arrays.
~27 years of speaking the english language and i still use spell check, just sayin.
* File does exist for sure. * Maybe, but not likely. * I'm on 5.3.2. * Possibly, but I wouldn't think so.
Nope, sorry.
I've been programming for 10 years now. I look up stuff more now then ever before. No programmer can be expected to remember the style of names used, and the usage, of every API. That includes ones you've used. There is just too much for you to be able to pull out of thin out. I'd also argue that PHP's API is partly to blame; it's a lot less written then most standard libraries. This is partly because so much has been bolted on, but also because of inconsistencies in the naming schemes, and how you solve problems. It also didn't start with a clean, well thought out module system on day one, which makes replacing sections more difficult. I have a harder time guessing PHP's API then any other language.
&gt; It's rare that you write a program and it "just works". But eventually it does work. It might take minutes or hours or days of debugging but eventually the software you write works correctly. It's done. Now remove all your error handling code. Remove all your `throw` statements. Your program should still work. If it doesn't, then exceptions were probably used improperly as part of the logic for the program. &gt; I think we're of the same mind here, because you say that code can and should have lots of throw statements, meaning your code is dealing with a lot of exceptional situations! Absolutely. Lots and lots of conditions that, in a properly working program, should never occur. &gt; I think the only reason it's used is because it shares the root of the word 'exception'. They're called Exceptions because they're for exceptional conditions. That's the reason they're named that. &gt; I expect parameter values to be wrong in my code I think the problem is with who (or what) the terminology relates to. Your algorithm, the functional part of your code that does the work, does not expect the parameter values to be wrong. If it did expect them, those values wouldn't be "wrong". The wrong parameters are exceptional *to the code*. &gt; I think you could come up with a better way to describe the types of situations in which one should throw an exception. I think perhaps *you* could come up with a better way to describe the types of situations in which one should throw an exception. 
Knowledge of facts is fairly irrelevant if you can just look stuff up - in that respect your brain is just a cache...creative intelligence and understanding of concept is what makes a great programmer.
&gt; So what does this have to do with PHP and exceptions? Exceptions are not unique to PHP. &gt; My php script is not going to "crash" if I do mysql_query() with no database present -- I'm just going to get an error. That is crashing (for a PHP script). I'd argue any unhandled error that terminates the program is a crash. &gt; they think you are writing 'recovery' code at the same point where you throw the exception. I'm not sure what kind of programmer could ever get so twisted that they would think that. Have you heard of this happening in real life? &gt; They might come away confused if you tell them that throwing exceptions is error recovery Luckily, I would never say that. 
Nothing. Check the edit, too.
Hahaha, awesome edit. That just made my day :)
-- Ron "Bravery" Sagan
Explode blows it apart, implode collapses it in on itself. 
I occasionally have to look up the css property and value for making text italic. DON'T LOOK AT ME, I'M A MONSTER!
I don't know about the basic mysql connection stuff, but I open up php.net/date at least 2-3 times a day and I've been programming in PHP since 2001.
Forget that mysql stuff. Use AdoDB for PHP. It will change your life.
This post has made me feel sooo much better. I always thought of myself the same way and reading all of this helps!
I would say this is fairly typical. If a prospective employer asked me to write a programming test without any access to the internet, or at least some documentation, I would tell them they are out of their tree. The ability to write code without any external assistance is not a useful trait in the internet age, but unfortunately some employers don't seem to understand that.
 Indeed. I've been programming for over a decade, and unless I use something (say, a function, or a specific data structure) on a regular basis, I'm going to forget the specifics. The important thing is that you understand the core concepts of any given technology. How certain things are done, how to solve (and how NOT to solve) certain problems, how different technologies work together, etc. I felt the same as you a few years back, and one way I overcame these feelings was to start learning new technologies so that I'm always picking up something new, and integrating it into the knowledge base known as my brain for solving future problems. For example, here are some things I spent evenings and weekends learning in the last few years: - Drupal - jQuery - Amazon Web Services - Cassandra - nginx - node.js Some of those things (like AWS) are big, and potential game changers. Others are not so big. But the end result is that I became a better programmer by way of learning new technologies and new (and better) ways to solve certain kinds of problems. Anyway, that's just a sample list. Start playing around with different technologies and frameworks, and I'm sure you'll find your own set of things you're good at. Good luck! 
You know, the description fits me, too. Still, I wouldn't say I'm a fraud. I provide a great service to my workplace and provide them with benefits that are beyond what they pay me. Furthermore, because I have a wide exposure to different technologies, I get shifted around to different things from time to time and I'm always capable of producing something useful. Being a problem solver isn't quite the same things as being a programmer, but it might be your job title because they don't always have one that fits everyone just right.
Try rails.
But then 8 !== D~~ :(
I used to be the same... Here is trick: **string functions:** `$haystack, $needle` **array functions:** `$needle, $haystack`
Ive been programming PHP for 10, and im surprise that [this](http://php.net/manual/en/function.date.php) and [this](http://ca3.php.net/manual/en/function.strpos.php) dont show up on chromes most visited sites list.
This is why education systems suck, its all memorization of facts instead of thinking.
Vi isn't the only editor available. If you don't likeit, but don't use any others, the problem is with you. I didn't suggest vi was the only option, either.
Because if you align with spaces while using tabs, when you change your tab size, the spaces remain the same size. Try to align spaces to a tab, and then change the tab width, and you'll see.
Except, PSR-2 was based on popularity.
Nobody is suggesting that you shouldn't use a style guide. I just don't think it takes a committee and hundreds of man hours to make that decision. Incidentally, you're being the guy who chooses to read what he wants to, instead of what is being said.
In fairness, though I used SQL joins a lot I feel like I never TRULY understood them until I read [this](http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html).
bob from milw
That's the number one criticism I hear about PHP. It's not your fault: it's the language's fault.
I can't count the number of times I've opened a new tab to search Google for "PHP date". I've got most of it memorized but I still find myself checking anyway just to be sure.
Dude, nobody remembers all of that shit. The docs are there so you don't have to waste brain space on it. Especially in a language as haphazardly defined as PHP.
&gt;CSS I want a reliable framework for this. Seriously, why does it have to be co complicated? And you know what's the worse part is? There's no error report.
Core PHP developers are the ones that held back the short array syntax despite overwhelming support for it by the community. These things cut both ways. A few cooks are no better than many cooks. Many of the poor decisions in the design of PHP were likely caused by having too few people having a say in the result. 
&gt;How do you deal with CSS, layouts, etc... when writing CMS? The CSS is completely separate from the CMS system. A CMS only concerns itself with *content*. You design a template as you would any other site, then you inject the content into it. &gt;Just recently I found out that there exist CSS framework I hope you aren't using the grid system.
Case in point; function names. Okay, so we name the core functions in *camelCase*, except *WhenWeDont*. And if the next word in the name starts with the last letter of the previous word then *we_are_sure_everyone_will_understand* if we do it that way. See? Makes perfect sense!
What are some simple hacks or ways to look up function names? Besides hopping over to google, any tools or editors that have this sort of thing implemented?
Good luck my good sir! May JS bring you as much joy as it has me. 
Chrome's inspector usually comes in handy to see how an element is being styled.
I moved to Germany, and before that to Italy... and I swear to god the German language is the most challenging thing I've had to learn so far... and I blame the Google effect a little ;) The good thing: not so long ago I read [an article about benefits of learning a second language](http://www.wired.com/wiredscience/2012/05/the-benefits-of-being-bilingual/), it seems that it makes your brain work differently and keeps you focused on the problem at hand. True story.
http://www.youtube.com/watch?v=7S5qXET179I Should help with the explanation of HOG. It's a presentation from one of the authors.
I'm a software developer in my spare time and web as my profession, I have used many languages and I've never found a framework as poorly designed as PHPs
Remembering variable names is indicative of a good memory, not a good programmer. All the programmers I know google stuff all the time. Especially true for PHP where variable names and parameter ordering are about as consistent as dice throws.
If you're in the UK there are 3 main suppliers of this data. CAP, Experion and another I forget. I've worked with CAP and they supply a lot more than just make and model. They send out a CD each month with updates or you can download from their web service. The data is expensive and I think priced depending on your estimated number of users. 
I remember reading somewhere that date() is the most looked up function in PHP online manual.
split() is deprecated whereas join() is not. I prefer to stick to implode/explode for consistency. Really guys, don't you know the difference between exploding and imploding? Exploding: &lt;----some \*BANG\* words------&gt; Imploding: \*BANG -----&gt;some,words&lt;------ BANG\*
No: The OP apparently wants to prepend the __autoload function to the list of autoloaders, instead of appending it. The last boolean parameter of spl_autoload_register allows to do that, but only since php 5.3.0. Older versions of php don't have that parameter and the function will fail if you add that 3rd parameter. If you want to prepend an autoloader in php 5.x &lt; 5.3 you probably need to use the OP's snippet.
I don't know the $_SERVER variables by heart (I could name 'REQUEST_URI' and a couple more off the top of my head). I don't think that matters, the main thing is that you know what $_SERVER is, and what is to be found in there. Always keep the documentation handy, that's *good*, not bad.
Like I'll remember that when I sober up tomorrow. Pshw.
I made some progress but having issues getting the data properly.
That's interesting and frustrating at the same time. At least the PHP devs addressed the issue.
In theory, it should start your PHP script that would run in an infinite loop to start accepting and manipulating connections.
It is important to remember that people are not paying you (as a contractor) "to program," usually. They are paying you to develop. Just because you have google open in another window does not mean you're "a fraud." It means that you haven't committed to memory every aspect of your language. One of differences, in the US, between an independent contractor and an employee is that the employer can dictate to the employee how the work will be completed. An IC must be internally responsible for how the work is done. That means that if your client wants you to be able to code that shit in your head and yell out fully optimized PHP, then fuck them, they should have used an employee who can jump through that hoop. They're paying you for the time and expertise you have in developing something and delivering on that something. How you go about developing and delivering is your business.
You should use a better IDE, a good IDE can offer you an auto complete list and show you the parameters needed.
&gt; I still have to look up stupid shit like $_SERVER variable names I don't care how you do it or how long it takes you (well... within reason). What does the result look like? Is it maintainable? Do you document your code (both using comments in the code and separate documents explaining the more complicated parts of the workflow)? Will the next person to work on the project hate you or love you?
No person knows every function, class, variable of a programming language. And any person that claims they do is just talking out of their ass. We write documentations for a reason. No one can expect a human being to memorize everything. Even more so when your dealing with multiple languages (Python, Ruby, PHP, C++, Java), No one can memorize all that. I've been developing applications for around 6 years now, I still have to look at PHP's documentation for even small things such as date(). You're not a fraud, your the same as all of us. It takes a true programmer to admit he doesn't know everything. After all, being a developer is all about learning new ways of doing things from others.
Feels like jQuery Validator. Nice :)
According to the code it does not only generate a query for each insert in the array it actually executes the data. It's also nice to see that you escape the values but not the keys. If the user can somehow set the key you got a nice security issue at hand. Ofcourse the idea of an array ORM is always nice but I'd introduce a save function or something. 
Got it working now. Cheers! I was all confused about it yesterday and trying to do things in a silly way related to WordPress. I rethought my process today and finally got it going.
I said use tabs for indenting and spaces for alignment further to the right. The only time this would fail is if you are aligning to the right of lines which are indented differently.
**Fuck your thinking**. We need a standardized measurement system to show how useful the little fucks are to society. We don't need them **learning**. ^/s
Good point. I was thinking about the last time I did this inside a select and it was needed.
The "Snippets" plugin in gEdit. It's broken in Debian Squeeze, but works in Ubuntu.
This. PHP is an esoteric, inconsistent beast, and literally no one knows everything. I told my students when I was teaching that the important thing is not to know everything, but to know where to find everything. I have been coding in various languages for over 25 years, PHP for almost 9. I still have to look up the order of parameters in needle-haystack functions sometimes. It's the nature of the thing.
Programming is 90% Google, 10% typing.
Most important tool for a Unix programmer has to be "man".
Yeah... this is what I do as well. I'm not a huge fan of the functionality, I was just surprised when I found out about adding arrays. 
I feel I must apologize. I got caught up in my ideas and I was too flamey. Thank you for taking the time to help people understand exceptions :)
shepherding the coder that much is not good i think. users setting field names, why? if you use $user-&gt;update(array('name'=&gt;'Blah', 'email'=&gt;'Blah')); it generates 1 query.
There are plenty of things wrong with grid systems. For one, you are hardcoding the layout into the markup. This creates two notable problems: * Layout changes in future iterations of the website requires a rewrite of the markup.* * You cannot restructure the layout to accomodate for responsive designs.* \* You can, if you remove the rules for the grid system, but that completely defeats its purpose. The markup *should* only concern itself with supporting content, and should be kept design-agnostic. If you insist on using grids, then at least use a LESS mixin so it is kept in the stylesheet.
Your site is down. edit: Great it's back up.
and don't forget to put order by after group by =)
sudo a2enmod rewrite
Says who? Have you ever heard of version control? It's very likely a development environment resides on the developer's computer instead of a remote server. Even if the development environment is located directly on the web server, there are plenty of more efficient ways than editing directly with vi.
It really depends on the specific htaccess file. They can be notoriously fickle. There are changes that broke rewrite rules from one dot-dot version of Apache to the next. So basically, not enough info to answer in detail. But yes, there are a lot of things that can affect htaccess files. First thing, check your server error log to see if it's something obvious like a missing Apache module.
something better here for whom interested: https://github.com/mstdokumaci/arraydb/tree/master/doc
Just because you code in PHP does not mean you shouldn't have a proper deployment process that involves version control, staging environments and testing. If you're editing on a live server then you're most definitely doing it wrong.
In the words of Eisenstein: "Why remember something that you can look up in under 60 seconds?"
there are quite a few questions where you need to know parameter order, for example
Thanks mate, it is indeed very joyful. All this callbacks, anon functions and so on, are scary at first but then very exciting, all this FP stuff.
&gt; Is there a server setting or something similar that would affect htaccess files? Thanks! Yes.
works4me
simplicity and coding less.
In the Apache configuration file (httpd.conf), change "AllowOverride None" to "AllowOverride All".
What if the new server is not running Apache.
Then .htaccess isn't going to do much.
It is inconsistent, which is a part of bad design, but you will find inconsistencies in every programming language.
As someone who infrequently does some db management, I'm curious, could you elaborate?
.htaccess can be emulated (well) by microsoft servers. I don't know details, but I've used it with no issues
I assume the same can be done with nginx.
Hahaha. Don't worry about it. PHP isn't predictable, sometimes function names have underscores and sometimes they don't. Many of the $_SERVER element names are not predictable either. I am in the same position as you, and I still look stuff up. You wouldn't be surviving if you were total crap. 
There have been a few good talks/articles about it but my google-fu is failing me right now. But I can point you to [this article](http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html) which covers references in detail. Objects already have reference semantics (a pointer to the object is passed around). Arrays and strings are copy-on-write (a pointer is passed around until the value is changed). References in PHP are symbol table aliases and aren't like pointers in C. In fact, they can have the opposite effect: if you make a reference to a string or array, PHP may have to make a copy of that value. There are very few situations in PHP that using a reference will result in less memory being used. 
Here, here. I've moved up the ranks from developer through lead and currently manage a dev team. I have helped to build a top 25 (Comscore) site from nothing, have built my own MVC frameworks, and can discuss the theory behind most design patterns with the best of 'em. I am currently reading a beginner's tutorial for Laravel line-by-line and getting a lot out of it. I've basically got no short term memory, and have to look nearly everything up as I need it.
What if I told you that the rest of us too.
[Previously discussed here](http://www.reddit.com/r/programming/comments/nnorw/coding_horror_a_visual_explanation_of_sql_joins/c3ainj6)
I used to hate coding Javascript, but spend some time learning jQuery and backbone and it becomes a surprisingly joyful experience. Not only that, but because there are so few people who actually get those technologies (as opposed to just using jQuery as a dependency for lightbox plugins) that knowing them makes you invaluable. 
But the connections would close every max_execution_time and have to be reopened.
From my experience playing programmer, any project name or technology that starts with the word "Simple" is the exact opposite. Don't start with SOAP.
SoapClient is "good enough" in most cases. I had to use it to interact with a third party soap service for a project. Just be prepared for it to take longer than expected.
Thanks for explaining this!
Well, I removed the reference. Does make me wonder if foreach ($array as &amp;$ref) $ref = $newval; or foreach ($array as $key =&gt; $val) $array[$key] = $newval; uses more memory.
SOAP **client**: If the server is well written (by no means a given!) then writing a client is fast and simple. For that, just read the PHP's native [SoapClient](http://php.net/manual/en/class.soapclient.php) class. SOAP **server**: If you can in any way avoid writing a SOAP server, do so. Its hard, complicated and documentation is sparse and attrocious. I will be very happy if someone could prove me wrong by providing a link to a wonderful SOAP server documentation. When I had to write my own SOAP server (the project just finished this month actually), I used NuSOAP (because native SOAP server can't generate WSDL). I used [this website](http://www.scottnichol.com/nusoapprogwsdl.htm) (it has several pages about it).
It's a good question. Partially my lack of understanding of the native soap client at the time, partially a learning endeavour on my own. Hopefully it helps someone here learn something about it... putting this together at the time helped me a great deal. There is also some stuff I removed that is integral to the system which factored in. That said, you are correct, the native soap client does work just fine. 
&gt; I believe that was some of the reasoning. But you and effectively every single PHP developer loves the short array syntax; I don't think it would be incorrect to say they got that one wrong. I would. There are a lot of people who were involved in the conversation (me included) who still think they got it wrong. The reason is because it looks like JSON, but it's far from it. ["foo" =&gt; "bar", "bar" =&gt; "baz] I would have much rather had a fully JSON compliant structure (for objects as well) than the *yet another syntax* we have now... So no, not every single developer loves the syntax. And the votes and discussion very effectively reflected that.
&gt; The patch was written. I was pointing out one of possibly dozens of reasons why the core devs might have rejected the idea. I'm not trying to argue over each point. &gt; But you and effectively every single PHP developer loves the short array That's clearly [not the case](https://wiki.php.net/rfc/shortsyntaxforarrays). Although I went ahead and read through the mailing list, and in my opinion the people voting against the syntax had some silly arguments. &gt; I don't think it would be incorrect to say they got that one wrong. They did get it wrong by not depreciating the old syntax, with a planned removal with v6.0. Or by not going the full 9 yards, and allowing syntax like $foo[-1], or $foo[1...3]. &gt; The array() syntax was universally criticized and there has been nothing but praise for the short array syntax. This argument is ridiculous. You completely missed the point. The criticism won't come from array() vs. [], it will come from having *two* different syntaxes that accomplish the same thing. Ultimately this discussion isn't about the array short syntax. You brought it up as one example of the community getting what they want, and I'm playing off that example. It's my opinion that getting the community *too* involved in the decision making process is an example of design by committee, which is an [anti pattern](http://en.wikipedia.org/wiki/Anti-pattern#Social_Interaction), and may explain why it took nearly a **decade** to finally get the syntax. You are right. The short syntax is great. And had the community not been involved we could have had the short syntax much, much sooner.
Looks interesting. However, the lack of identifier escaping and methods beyond basic syntax limits its usefulness. Simplicity is a wonderful thing. I wrote a rather similar library, based on CodeIgniter's Active Record class: https://github.com/aviat4ion/Query It's quite a bit more code, but functionality is increased, and it helps to iron out syntax differences between databases. 
[No, it's not](http://en.wikipedia.org/wiki/Software_feature).
Yes, but those 10k lines likely fill in only about 5 or 10 abstractions. I don't need to understand the 10k lines of code, I just need to understand the abstraction. As long as the abstractions are good, I shouldn't care *how* your library works. I should only care about how I interact with it. So the lines of code in the library is irrelevant. What is relevant is how it's abstracted, and how easy the public API is to work with. So, no, it doesn't matter if you can read it in one sitting, because you shouldn't ever have to in order to use it...
&gt; I went ahead and read through the mailing list, and in my opinion the people voting against the syntax had some silly arguments. The point is that around 40 people commented and voted on it. The PHP community has hundreds of thousands of developers and the majority of them love the syntax. In the end, 40 people is a drop in the bucket. &gt; They did get it wrong by not depreciating the old syntax, with a planned removal with v6.0. Or by not going the full 9 yards, and allowing syntax like $foo[-1], or $foo[1...3]. There's no reason why they can't add more syntax in the future. I'd say *not* going the full 9 yards is probably a good thing unless it will cause backwards compatibility issues in the future. &gt; The criticism won't come from array() vs. [], it will come from having two different syntaxes that accomplish the same thing. I don't think that criticism will ever come. And if it does, who cares? If you're going to reject every feature because someone somewhere might complain about it than nothing will ever be done. &gt; You brought it up as one example of the community getting what they want, and I'm playing off that example. Yes, but you're just making stuff up! Imaginary criticism that doesn't exist. You actually *like* this feature. You are going out of your way to be difficult. &gt; You are right. The short syntax is great. And had the community not been involved we could have had the short syntax much, much sooner. How do you have this so backwards?!? The short array syntax was rejected! Only through intense public community involvement was the issue re-opened, the vote re-taken, and short array syntax added to PHP 5.4. If the community was allowed to be more involved from the start, we could have that feature much much sooner! If the community wasn't involved at all, we would never have the feature. 
Given two pieces of software that perform the same function I will choose the one I understand more or is easier to absorb.
How the hell do you not know this?!
The problem with benchmarking on a virtual server, is you have no idea what is going on with the physical server. Your Small Orange shared could well be the only instance on that server, while the one on MediaTemple could be one of several, all doing high CPU tasks. Since you have 0 control over which guests are running along side yours, that benchmark is really only good for that specific virtual server, as opposed to all the virtual servers at those providers. 
Uhm... Symfony is more than a hundred thousand lines of code. I don't pretend to understand most of it-- I haven't even had the chance to look at most of it! And yet... I have a pretty strong understanding of *how* to use it.
Thanks I'm taking a look. I'll comment on Github / watched your repo
No this would require you rewrite your queries using the chainable syntax. Instead of writing mysql_query("SELECT * FROM `foo` WHERE x = ".$somebadstring) You would write: pquery('foo')-&gt;where(array('x' =&gt; $somebadstring))
I always wonder if it's text-* or font-*, even now.
Also this is not an Object Relational Mapping it's a query building and execution helper library. It doesn't attempt to map fields to classes, etc. or look at schema, or type conversion
&gt; Can you give me an example? The static variables $resolvers and other operators are there for extending plugins. You could write a plugin that added the foo() chainable method by inserting 'foo' =&gt; array($plugin, 'resolveFoo') for example It is a matter of application design, not examples. If you are gonna force people to extend you code by directly accessing class's static variables, this will create tight coupling on the level that would be equal to use of global variables. &gt; They are declared by the function, not the passer. This is typically okay if you understand how references work and enclose that behavior in a class. In this case it's for building a stack of SQL text and query parameters. Within the class you do not need to pass around variables by reference, that why objects have local variables. &gt; Prepared statements are the preffered way to pass/bind arbitrary data. It's poor memory performance to stringify all your SQL data. So why would you library prepare the calls that comes from `columns()` ? &gt; In the same way that conditions support operators I am fixing that. The new calling form has this style: (..) And this would let me implement `SELECT * FROM t1 CROSS JOIN t2;` how exactly ? &gt; Right now MySQL, SQLite, and postgres are the targets. Other SQL statements can easily be implemented as a plugin for that vendor. I am working on the doc for that. In postgres there is ` .. LIMIT x OFFSET y;` construction. &gt; Just do this: `pquery('table')-&gt;where(array('my_key' =&gt; null))` You cannot compare to `NULL` by writing `some_column = NULL` .. thats not how it works. You have to write `foo IS NULL` or `foo IS NOT NULL`.
Not sure what you're looking to prove here, as this would only "test" a single CPU thread. Some hosts have fewer but faster CPU cores available, while others have more but slower cores. This wouldn't be an indication of how load is actually handled across multiple threads. Just for fun, I ran this against my development server: &gt;Sun Fire X4170 M2 (2xIntel X5670 CPU, 144GB RAM): 5.7900440692902 seconds
&gt; So why would you library prepare the calls that comes from columns() ? I use the built-in query() method in case it's been overriden
You don't need to understand whole code , if interface which you need to implement is clear.
&gt; SELECT * FROM t1 CROSS JOIN t2 pquery('t1')-&gt;join('CROSS', 't2') pquery('t1')-&gt;join('RIGHT', 't2', 'column') The first argument for join() is becoming an optional join operator
Only if the value is a number, you will be trying to feed DB a string, because thats how parameters from `PDOStatement::execute()` are passed.
 * Linode: 7.61s 
&gt; You cannot compare to NULL by writing some_column = NULL .. thats not how it works. You have to write foo IS NULL or foo IS NOT NULL. You could write: pquery('table')-&gt;where(array(array($x), "IS NULL")) Although soon you should be able to write: pquery('table')-&gt;where(array($x), 'IS NULL') Supports AND, OR, etc. operators too: pquery('table')-&gt;where('OR', array(array($x), 'IS NULL'), array('order_id' =&gt; $order_id) ) 
Also has 1,300+ forks and 4,500+ watches on Github - a lot of developers reading that code and QAing it before you get it.
There's absolutely something to be said for a simple, concise library. But saying that a 500 line lib is better than a 10k line one, because you can read it all in one sitting is a bit of a stretch...
Hi, no need to apologize! I like to discuss topic like this and always look forward to constructive discussions! I've added a short paragraph in the post to maybe clarify it a bit!
My preference would be leftJoin(), rightJoin(), crossJoin() method to magic parameters on the join method. 
Thanks
SOAP is atrocious, over designed crap. What does that say about the project's authors?
That isn't exactly realistic, my friend. One of the two libraries, namely the larger, more complex library, will have more features than the other, simpler library. If I need those features, I will use the more complex library. If not, then yes I will opt for the simpler library. This is not me bashing on your library. I am just arguing the point that complexity is not a bad thing, it just needs to be abstracted away from sight with clean interfaces.
I know! For example, why is it `font-weight` for bold and `font-style` for italics, but `text-decoration` for underlines?
&gt; Yes, but you're just making stuff up! Imaginary criticism that doesn't exist. What?! Do you have your head stuck in the sand? Much of the [criticism leveled towards PHP](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/) deals with redundant and inconsistent syntax. Do I really need to [dig](http://blog.communistpancake.com/2011/01/5-reasons-not-to-use-php/) up [examples](http://nova-fusion.com/2011/06/12/the-inconsistencies-of-php/) of [criticism](http://webonastick.com/php.html) for you? Check the mailing list if you want to see criticism specific to the short array syntax. Feel free to continue the argument, but it's silly to use the short syntax as an example of community involvement done right, because it's too soon to say if having two different array syntaxes is really a benefit to the language. You're declaring the syntax a success before anyone has really had a chance to use it. The core devs may have been correct in rejecting it. It's too soon to say. I think if you're going to argue for more community involvement, you're going to need an example that's actually been around for a while.
&gt; and don't get me started on remembering "was it explode or implode?" That's an easy one: explode takes one thing (a string) and explodes it in to many things (array elements), like if a bomb would explode you would get many pieces everywhere. 
Complexity and size are only trivially related. For example, which would you say is more complex: a 600 line package (with 6 classes with 5 methods) a 500 line class (with 5 methods) a 400 line method The single method is the smallest. But it's also likely the most complicated by far (CRAP index, NPATH, Cyclomatic Complexity, etc). 
ST works in Linux beautifully. 
It got 6.2811050415039 seconds on my devbox and 7.7556309700012 seconds on a production server that's typically handling at least 5,000+ Drupal page builds per hour. Edit: Dev box is an Intel Quadcore i7, the production machine is a Dual Xeon Quadcore under constant heavy load.
Took 6.3365120887756 seconds AMD Phenom(tm) II X6 1055T Processor (6 x 2.8GHz) Took 50.233277082443 seconds on my Macbook Air :(
Desktop (I5 @ 3.3ghz Windows 7 and WAMP): &gt;Took 19.676670789719 seconds 
Heads: 9999847 Tails: 10000153 Percent heads: 49.999235 Percent tails: 50.000765 Took 13.225407123566 seconds Centos VM on Mac Book Pro 
RackSpace cloud with a live Magento: Heads: 9998207 Tails: 10001793 Percent heads: 49.991035 Percent tails: 50.008965 Took 10.792346954346 seconds Personal RackSpace Cloud (512mb): Heads: 9999478 Tails: 10000522 Percent heads: 49.99739 Percent tails: 50.00261 Took 14.227813959122 seconds
So what's the good alternative?
NO. It's totally not.
16.571600914001 s. Old PC: AMD Athlon 64 Dual Core 5000+ @ 2.60 GHz Windows 7 Ultimate WAMP
&gt; The first two languages it will support are Javascript and Clojure I'm all for javascript. 
Because most PHP scripts out there in the wild are engineered badly and they have been assigned to work on one of these badly engineered scripts.
To avoid 500 errors I try to wrap module dependent rules inside .htaccess inside &lt;IfModule&gt; tags.
First of all, programmers always like to say "X sucks, use Y instead." Also, yes, PHP is so easy to use that people can write code without really knowing what they are doing. The reality is that PHP is an excellent server side language for small to medium websites and apps.
Try to avoid it if you can it's over complicated
So the question doesn't actually pertain to EXIF data per se, but rather printing out the content of (nested) arrays? Is that correct?
I'm guessing you haven't worked with EXIF data before. I also see from your comment history that you are one of these programmers who cop a condescending attitude.
Relevant: http://stopsoap.com/
So you accuse me of having a condescending attitude, then you're the one who goes around verbally attacking people. Good job. Now go troll elsewhere. FAQ is over there, by the way ------&gt; I suggest you read it.
Keep telling yourself that. I've wasted enough time on you. Fact of the matter is, I tried to help you and you responded by verbally insulting me in all sorts of ways, which was completely uncalled for. So yeah, see ya.
Running the other way. And never looking back.
Why is this getting upvoted? It doesn't help the OP at all. Just because you don't understand SOAP doesn't mean you should sit around and make it harder for those who want to understand it.
Take your time and try to be as exhaustive as possible. Time and dates are moving target and it is rather hard to get it right.
nothing wrong at all having php.net open all the time - guess what php isn't perfect and the comments (versions especially) are priceless. if all languages/extensions/etc had the same setup as php (hello visual studio) - life would be way easier. mysql - i do the same thing - who can keep up with the all the latest greatest and deal with bugs that migrate through versions without the awesome feedback systems tied to the documentation. The only thing that makes you a bad person is giving up or saying something is not possible - that is 100% lame - Remember the song "Where there's a whip there's a way?". my biggest beef with php is lack of 64bit (please), a compiler (please), and unicode (christ please!!!). 64bit is most important as i find that when resources are scarse (IOPS) - i could do alot with php. Plus i use windows since it's easier to manage with esxi (hardware/backups/vss) than with unix. mind you i made the choice 7 years ago but those apps written in php 5.0 still run to this day. Good luck firing up some vb6 app and having it run 100% these days. love php - hate the progress since 5.0 (64bit,unicode,compiling) - windows support. I will admit node.js makes alot more sense the more i look at it - it will be interesting to see where the next microsoft lightswitch (silverlight based) will go once they move to html5/js (Great app btw awesome RAD,finally supports ODATA). I think it's a positive to not memorize everything as change happens so fast these days. Looking back over 5.0 -&gt; present - there have been alot of cool new features that a memorizer might not have ever bothered to look for better ways.
I got about 10 seconds flat on average. I used this [source](http://pastie.org/3964405) to benchmark (my own optimization based on your code). May I recommend trying hashing calculations or blowfish related functions to test CPU usage? It will be much more accurate at stress testing the CPU. 
Beyond type validation most SQL dialects have what's known as "check constraints" which are used to further maintain data integrity by imposing rules on data that can be inserted/updated. So if you really wanted to flesh out your table proxy form generator class then you would also read and parse the check constraints. That would probably be quite an undertaking though. 
cPanel has .htaccess enabled by default. Additionally cPanel's default installation has most "useful" modules enabled out the gate (mod_rewrite, mod_index, etc) If you are having issues, then you need to look at the error logs and find out why (you might need the hosting providers assistance with that as the files aren't accessible to you). Hope that helps. Good luck.
Symfony2 does a great job at this, you can import all the mappings, then generate the class entities, then even have it generate the views/controllers for you php app/console doctrine:mapping:import AcmeBlogBundle annotation php app/console doctrine:generate:entities AcmeBlogBundle php app/console generate:doctrine:crud - [Symfony2 Generate Entities](http://symfony.com/doc/current/cookbook/doctrine/reverse_engineering.html) - [Symfony2 Generate CRUD](http://symfony.com/doc/current/bundles/SensioGeneratorBundle/commands/generate_doctrine_crud.html)
Use REST and return json.
Any modern PHP framework will do automatic form generation from models, as well as validation on the fields, either automatically or straight-forwardly with 90% of the work done for you. There's a reason some people consider them awesome.
perhaps you should share the .htaccess file so people can look at it.
Yes. Are there paths in it? Maybe one of them has changed?
&gt; Your basic form validation really just boils down to three things. it absolutely does not.
way to separate logic, good luck handing the system over one day.
Excelent answer, all I can (irrelevantly) add is that as negation and addition operators cast to INT, same goes for negation symbol "!", furthermore, you can (theoretically, albeit not recommended) cast variables like so: $var = +"2312"; // to integer $var = +"-123"; // same $var = !!"1"; // to bool Interesting use for this is google closure compiler for javascript replaces `true` to "!0" to save two symbols.
Maybe it's just me, but rarely do most of my form validation requirements fall in to something so simple. For most types of forms I'm having to determine if the values provided are valid or within valid ranges when compared with other values provided or with other business logic rules. I guess there's still some value in using this as a first level filter - is "foo" a valid email format? Yes... then do more checking (are they from an allowed domain for this type of request, etc?). I rarely see this level of validating discussed in 'best practices' discussions though, so I'm not sure how other people handle these multiple levels/types of validation.
Wait, what? Where did I say I was editing on the live server? I said dev server. We have a sandbox, where development occurs. We have test, staging, and production. Everything lives in git, get's code reviewed in gerrit, and gets pushed up via jenkins. I develop on sandbox, which is remote, and I connect to it over ssh, startup tmux, and develop there. Do not assume that development on a server means development on production.
&gt; Says who? Have you ever heard of version control? Yes. We use git, along with gerrit to handle code reviews, and jenkins to actually push to test, staging and production. &gt; It's very likely a development environment resides on the developer's computer instead of a remote server. Yes, for basic, single person development setups, that *might* work. But then, that has many drawbacks as well. While developing locally is nice, it's limiting. Not to mention our setup relies on more than just a DB, a web server, and PHP. &gt; Even if the development environment is located directly on the web server, there are plenty of more efficient ways than editing directly with vi. vi isn't the only option. I never suggested it was.
The author seems to think getters, and specifically setters, defeat the purposes of encapsulation, which I personally think is pretty ridiculous, and quite frankly flat out wrong. Renaming your setters doesn't suddenly stop making them setters. They're just setters with a different name. Setters are to classes what bouncers are to night clubs. In the same way bouncers keep the club cool by deciding who can get in based on a number of criteria such as dress code, demand, and the number of hot ladies in your group, setters are free to deny your value for any number of reasons. *That* is one of the core principles of encapsulation.
&gt; I feel like you're trying to be clever here as indentation is also a sort of alignment That's what I said. &gt; Thus spaces are used for indentation and spaces for alignment. Did you mean what you just said? I think you mean, tabs are used to indent, and spaces are used to align the =. Still, now you have to enter a space in for every space between $user and =. Rather than just hit tab once. Granted, you could repeat that so you don't actually have to type in all those spaces, but then you can also jump around spaces as well. I mean, the way you are describing this, the *only* benefit tabs have now is in terms of being able to set the tab width to be whatever you want it to be. However, the problem is, if a tab is used between $user and = true, it screws everything up. So, you have to force a tabs on the left, spaces to the right approach. That's rarely what happens in practice. However, this is aptly named tabs for indentation, spaces for alignment. Anyways, my assertion was never that tabs were bad (though I prefer spaces). Rather, that suggesting that tabs are easier when editing isn't an issue with spaces as much as it's a failure in the editor that you are using. Good editors, like vi (not only vi, for some reason, people seem to think I'm only arguing for vi and spaces here), don't have this issue.
So then the only benefit for tabs in that scenario is you can set the tab width to be whatever you want, assuming that everyone remember to only use tabs on for indentation.
Neat, I didn't know that one. foreach (array(1, "1") as $var) { var_dump($var); var_dump(!$var); var_dump(!!$var); } * int(1) * bool(false) * bool(true) * string(1) "1" * bool(false) * bool(true)
Why separate it w/ weird characters that will need to be split during runtime instead of using arrays directly?
&gt; Did you mean what you just said? I think you mean, tabs are used to indent, and spaces are used to align the =. You are correct, I did mean that. &gt; However, the problem is, if a tab is used between $user and = true, it screws everything up. But why would you do that? Tabs aren't meant for that purpose, spaces are. If people cannot figure out how to use a tab for indentation and spaces for alignment then they are stupid and shouldn't be working as a programmer anyway, I shudder to think what other kind of basic shit they'd get lost over. &gt; Anyways, my assertion was never that tabs were bad (though I prefer spaces). Rather, that suggesting that tabs are easier when editing isn't an issue with spaces as much as it's a failure in the editor that you are using. I just reread the thread the discussion thread and that's definitely not what we've been discussing, maybe you have it confused with one of the other discussion threads? I certainly don't disagree with the fact that spaces makes editing a file any more difficult as even ancient editors handle that case. But this discussion thread is explicitly about whether or not tabs for indentation and spaces for alignment even actually works. 
As I said, albeit neat it's not recommended as (bolean) $var; is more readable than !!$var;
I think it would be difficult to automate any but the most basic validations (e.g. existence of a value) with the method you describe. However, if that is the kind of validation automation you're looking for, then yes I think it can be done.
People care about tabs vs. spaces wayy too much. Someone in #phpc the other day compared using spaces in PSR-2 to banning gay marriage... lol
I don't get this. Why is this a link to tumblr?
Partially it's a matter of principle. To me, using spaces for indentation just smells bad — the space has a specific purpose and so does the tab. Using the space for the purpose of the tab, and worse still, having to use a bunch of them, seems *wrong*. It's like when you watch someone creating a document in Microsoft Word and they hit the space bar 40 times to center the title, and then go to the next line and hit the space bar 30 more times to center the subtitle, and then hit enter 25 times to make a page break. It may look okay to someone who's not thinking about what's going on, but the results are inevitably sloppy and imprecise, and this is because it's fundamentally the *wrong* way to do it. I also hate when you are editing in some editors (you don't always get to choose your editor; ssh into a client production box with minimal packages installed) and have to backspace over all the spaces to unindent, worse still you have to count them as you do it if the block you're lining up with isn't nearby. I hate how no matter how high-minded people's policies and intentions are, when you are dealing with code from any group of more than one space-indenter, there's always sections where something is indented 7 instead of 8 spaces. Basically I like code to be neat and orderly, because that creates the least amount of distraction so I can focus on the meaning of the code, and I find that spaces are the mortal enemy of that.
Every one does shit like this. The question is when you look it up do you understand what you're reading or are you just copying and pasting the code. 
show a sentence or two that summarizes the story? 
&gt; Should I abandon this approach for a more traditional, prettier one? IMO for a site like this, the only design goals you should have are those related to user experience, and not necessarily aesthetics. People that go here want news, not prettiness. &gt; no annoying social networking junk I'm assuming you wrote this before adding that little widget at the top right.
Thanks for the feedback. Regarding the little widget at the top, I made it small and transparent. I guess "annoying" is subjective :)
Apologies, I interpreted "no" to mean 0% social networking junk.
Now what about a test to see what would happen if several users did this at the same time?
Me too... i feel like a total fraud... but I've been doing this for 17+ years. First with Perl, then later with PHP. I've got a file of "functions" called utils.php which I have been using since around 2000. I'm so high up in the programming chain now where I work I see these 18year old kids come in and they're able to program circles around me. But good to be the boss
Hmm, wouldn't changing those settings put me on all kinds of blacklists?
No.
Alrighty. I'm back from trying like 7 different things and punching many walls. Do you think if I were to put the code into a different file and use and include, do you think that would fix anything?
Just figured that out, and it worked! Now I feel bad for the guy who just got a week of email updates in 5 minutes...
It doesn't need to be pretty so much as it needs to be readable. I find this site to be annoying to navigate simply because everything is black. The only real differentiating factor is font size which for me anyways isn't that differentiating.
http://php.net/array_sum
Damn, beat me by a whooping 5 seconds.
I'm totally sure I understand what you mean by that. Using an include is basically like copy/pasting code from one file to another (at runtime), so it shouldn't theoretically make a difference. It might be good to turn error_reporting back on fix those issues first before trying to tackle the issue at hand. I would imagine that a lot of stuff is happening implicitly that you aren't expecting, which makes debugging this issue that much more difficult.
No. Please see my reply below with code sample.
For my pet Framework, Cake, you specify all this in an easy to follow step-by-step process on the command line, called baking. http://book.cakephp.org/2.0/en/console-and-shells/code-generation-with-bake.html The first line will be automatically generated when you ask Cake to generate views from models. The second line will be generated when cake asks you what kind of validation you'd like for the `first_name` column. The code generated by these procedures is all customisable after the fact as well, as you are likely to want to do.
It should be noted that you can't use an integer starting with zero. PHP treats it as an octal and will convert it, so 01216 becomes 654. Not sure if that's the issue, but if might be causing your code to reference the wrong array key.
I feel the same pretty often. Everything I do feels like cobbled together junk that just happens to work. Whenever I have to make a new application, I just go back to my previous application, copy it, and change it to fit the new need.
Since I set up our website 4 years ago - maybe its time to update it? - I have pretty much forgotten CSS. Any time I have to meddle with it, I have to look up stuff. I really prefer doing the development side of things rather than the design side of things.
Here is part of a loop above which created the array in question: $customer_preorder_totals[$datanew][] = (int)$data[21]; I've converted it to an integer by adding the (int), but it's still not totaling. [http://mail.dswdist.com/Data/inventory_sss.php](http://mail.dswdist.com/Data/inventory_sss.php)
Put quotes around your key and that will get around it. $data['01216'] instead of $data[01216];
This is the problem. When I added a 't_' to the front of the array number, it works fine. I need to figure out this now. Thanks. I think I can manage.
That was the problem, the 01216 was populated via a variable. So I couldn't encase it with '' but would this have worked? $customer_preorder_totals["$datanew"][] = (int)$data[21]; $datanew is the customer account number and in this case 01216 
It makes perfect sense, once you've learned language x, you've learned the logic behind a significant number of the languages out there (aside from the specific syntax). Relearning your basics over and over is no fun, that's why you want to branch out and try new things! I agree with krues8dr, although server administration is... 'spooky' (best way I could put it) it can be an extremely marketable skill since the internet is such an integral part to life, and more specifically our jobs. *Disclaimer: 'man' is the extent of my knowledge when it comes to server administration.*
Thank you.
exactly how I feel. learning more languages is not going to do much for me. any ideas where to start with server administration? I'd love to take a look at that! 
TIL array_sum.. ;)
You could benefit from using bulk inserts. INSERT (...columns...) VALUES (...values...), (...values...), (...values...); Grouping 100 or maybe even 1000 into a single statement will have an immediate impact on performance. The number you can group together will depend on the size of the data you're sending to the server. There is a setting that limits the maximum size of a request. You also might benefit from using a different column than TEXT for everything. Consider a column that has a fixed width like CHAR(nnn) if the data fits, or a numeric column if the data is going to be numeric. As for the deleting of the table and recreating it. Is that absolutely necessary? Why not use a column to flag older content, or to mark new content that isn't ready to be used until your operation is complete?
Great questions! I'm going to tackle this on Monday, I hope you don't mind if I get back to you then. This code was written for me, I didn't code it. Here is a sample of the data in one of the files I'm processing. http://imgur.com/xeIa1
It depends on a lot of other factors. Speed of the drives, speed of the server, your table type, database activity, network congestion, server load... the list goes on. Make sure you're using something that supports row level locking. [MyISAM does not lock at the row level](http://dev.mysql.com/doc/refman/5.1/en/myisam-storage-engine.html). It locks at the table level. This means that every time a change gets made to a table, the entire table becomes unavailable (requests have to wait) until the write is complete. This makes MyISAM a horrible choice for anything that gets written to often. If you're not sure what engine is being used, check it with "SHOW CREATE TABLE yourtablenamehere". It can be changed via [ALTER TABLE](http://dev.mysql.com/doc/refman/5.1/en/alter-table.html), or during a [CREATE TABLE](http://dev.mysql.com/doc/refman/5.1/en/create-table.html) by altering the [engine](http://dev.mysql.com/doc/refman/5.1/en/storage-engines.html) parameter. In a nutshell, if you're not using [InnoDB](http://dev.mysql.com/doc/refman/5.1/en/innodb-storage-engine.html), you should switch your table now. I'd also consider switching your code to either [PDO](http://php.net/pdo) or [Mysqli](http://php.net/mysqli). Use prepared statements, and execute your queries as [unbuffered queries](http://php.net/manual/en/mysqlinfo.concepts.buffering.php). In addition, a DROP TABLE operation is expensive. If the table does not need to be recreated (the schema hasn't changed), don't recreate it. Consider using [TRUNCATE](http://dev.mysql.com/doc/refman/5.0/en/truncate-table.html) instead of DROP, which is much faster.
Don't use PHP is my suggestion. Just call MySQL directly with a 'LOAD DATA INFILE' command. If the data isn't in a suitable format, use PHP to pre-process the file and do the above with the result. There are numerous other ways you could speed things up within the realm of PHP but the reality is it's smarter to not bring PHP into the picture when it isn't necessary.
Absolutely, you could much more appropriate column types for all of those. Most appear to be integer columns in fact. You should also be able to bulk up to 500 or maybe 1000 which at 15k row means only 15 round trips to the DB. Network transmission and/or the time it takes the DB server to parse each statement matters, so this is huge. You'll see a big difference in speed by applying both of these suggestions.
By the way, unless you're using a hashing system that stores the options elsewhere, you probably *need* to have those kinds of prefixes on all of your hashes. That's because, in order to check an inputted password against a hash, you need to hash the password the same way as last time. That means your hashing library needs to know the algorithm, parameters, and salt that were used to generate the previous hash. All of that information should be present in the crypt-formatted hash string. It's safe to store that string as-is, since that information isn't considered secret.
Looks nice but the gratuitous use of static methods is a huge turn off.
This, for the love of God. You should leave your own dear mother outside for the hyenas and killer bees before you put anything from $_GET or $_POST in a SQL command.
As soon as I saw: if ( isset($_GET['edit']) ) { I cringed.... OP: Beyond the obvious injection issues, your code is pretty basic. I wouldn't worry about it. Just keep learning. And always, ALWAYS sanitize your $_GET statements. NEVER, EVER EVER do what you did above. I know it comes across as cocky, but honestly you WILL get hacked. We say this because it's either happened to us, or someone we know. It WILL happen, it's just a matter of when.
One issue I come across time and again with less-experienced developers* is their tendency to avoid writing many functions/methods. If your code has several levels of if/do/for statements, think about refactoring out the code into separate methods. Simplify each method! Make it easy enough that a layman can come in and follow along! If you write the code and come back in a day and it takes you a bit to read through it and figure out what you were doing - it's too complex - refactor! Methods and functions are your friends. Make as many as you want. * Note: Don't mean this as an insult! I'll be the first to admit I'm a shitty developer, but we all have to start somewhere!
In short - yes.
Please forgive my ignorance, but compromised in what way? Also, I connected with the guy that had the passwords. He changed it via ftp, so all is well for now. I didn't realize that I didn't need to be in the db. I plan on trying out MySQL workbench to dig around a bit to see if I can learn something without breaking it. Thanks for the info! 
The old mysql library is deprecated one way or another too. PDO or mysqli is the way to go! OP: at the very least, throw some mysql_real_escape_string()'s around those variables in your SQL. [This is just asking for a "Bobby Tables"-style hack.](http://xkcd.com/327/)
We're too busy coding and making money.
The blogs of Fabian Potencier (Symfony creator) and Sebastian Bergman's (PHPunit creator) are usually really good. Edit: also under PHP in my RSS reader: ircmaxell, phpied, phpmaster. 
Who are the 10+ on github?
&gt; This means that every time a change gets made to a table, the entire table becomes unavailable (requests have to wait) until the write is complete. MyISAM supports concurrent and delayed inserts. You shouldn't need to worry about table level locking if the only writes you do are INSERTs. [More information](http://databobjr.blogspot.com/2010/10/mysql-speepup-insert-into-myisam-table.html)
I hope you're sanitizing your GETs.
I actually quite like this. I've had an idea like this for a while now: separate news articles for a larger subject. The functionality is there and is apparent. If you're looking for design critique, head on over to [/r/web_design](/r/web_design).
implode/explode were never a problem but my kryptonite is substr() . And thank god i'm not the only one that looks up a 1000 times a single thing on php.net and never remmember it. And like a dude down the comments said ... if it's not Y-m-d H:i:s .... -&gt;php.net this sh*
I would add [Anthony Ferrara](http://blog.ircmaxell.com/) to the list.
phpdeveloper.org is just a glorified rss aggregator. Both nettuts+ and php|architect are completely useless, unless you are a newbie who's just starting. And about 95% of content from Zend DevZone is about ZF, which is useless for general public too ... so .. You are saying that there are php related blogs on github, or did you misread the topic ?
I can agree on phpdeveloper - but sometimes there are good links to articles. php|archi im following because im a subscriber, and I really love the magazine :) Not really blogs on github, but projects which Im following and doing some work on, and learning what other does, but dedicated bloggers not really.
Some of them are - Guilherme Blanco - Josh Lockhart - some friends and co workers
I'm amazed that some people, especially employed programmers, can find the time or motivation to blog. With the projects and deadlines on my plate my day is fully saturated. And when I get home from work the last thing I want to do is talk or think or especially *write* about programming.
Most content ob Planet PHP seems good: http://planet-php.net/ It aggregates blog posts from several well-known PHP blogs.
I'd like to think I write some interesting PHP articles - http://leftnode.com and http://leftnode.com/category/php But I write about other software development as well. I love writing and always trying to do more of it.
I follow Rasmus, Wez Furlong and Chris Shiflett. [PHPMaster.com](http://www.phpmaster.com) updates three times a week which I think is nice, but a great majority of the articles don't appeal to me.
He's not asking for tutorials. There is more to programming than results. 
I know others already warned you about SQL injection risks, but you also need to watch out for XSS when displaying data from the database.
I enjoy Phil Sturgeon in addition to most of the entries on here. 
Or we do both.
Well, finding time to write quick comments vs finding time to fact-check, write, and proofread entire articles is different. To me anyway.
I have a newborn in the house, and want to say "impossibru"
That is the Algorithm ("2a" or "blowfish/bcrypt"), and the work factor ("08" *the default in that class*). The work factor must be a two-character number with leading zeros. '$2a$' . str_pad($work_factor, 2, '0', STR_PAD_LEFT) . '$' Personally, I would increase that to 10-12 if this is for passwords.
Sorry, I think there is a misunderstanding between us. We are using the phrase editing live on a server, a live server, and production server interchangeably. The original comment was: &gt; When using a text editor to work live on the server So, I just assumed the discussion was around working live on a server, not necessarily working live on a production server. From there, I thought people were suggesting that live == production, which is not the case. Sorry for the confusion. Regardless, &gt; Why not? After all, that's where the development environment lives? Not sure how that implies a production server.
That's an interesting approach to keeping everyones hands off what should be private members. I was actually going to add to stay away from static calls and to use getters and setters.
This thread has a curious pattern of downvotes.
The other factor is that each query that updates\inserts to a table has to rebuild in the indexes. (assuming you arent in a transaction of course) That means 15 index rebuilds rather than 15,000. I'd bet this is 80% of the time spent. Also, consider using delayed inserts so that you don't interrupt whatever is using this table while you update it.
I have a toddler, a newborn on the way, am self-employed with multiple personal projects &amp; I still find time to write out findings.
I am not wise to the ways of parenting quite yet. Bravo. 
Server admin - learn to automate things with puppet or chef. Mobile development - it's still programming, but the languages and constraints may be enough of a challenge to get you going again. Testing - rethink your next project by going totally test-driven and 100% test coverage. But looking over your responses, it seems you may need to go further. It doesn't actually sound like you need to do much more in terms of coding/development. Your skills are fine for probably 80-90% of the tasks out there. You need to find different tasks, and you may need to 'go deep' in to a particular industry/vertical to learn what problems they face there, and use your development skills there. Basically, you're finding work coming to you - you need to go out to the work. Digging deeper in to particular companies or industries, you may be amazed at how inefficiently they run and how much value you can provide. But... in the end, much of it will be the "same stuff" as you're doing now, but you may see it in a whole new way after spending time in one industry. Maybe not. You could give it all up and go be a sheepherder in Ireland for a while, and see if that gets you excited again about something. 
It is possible. We had our daughter 19 months ago, and when I look back it surprises me what I've actually accomplished in those small time frames where I could work on side projects. You just have to cut all the other stuff away - I haven't seen more than a few movies in that whole time and almost no TV. That said, it's really frustrating to be limited by the little time you have.
He was just being a smartass, I agree with you completely.
I've started cutting back TV. Granted, it was only a couple shows or a movie in the evenings, but it's hard actually. TV is the one thing you can do while patting a baby's back or holding him/her and a bottle. I've got a lot of IDEAS and I can structure and think about my projects, but that is a tease mostly.
Different positions are going to have different requirements. For some companies, "entry level" means at least two years of experience, familiarity with OOP, MVC, subversion control, at least one mainstream back-end framework, and possibly some front end tech (understanding how AJAX calls work is pretty important, at this point). Other companies will be willing to train you practically from scratch, assuming you at least understand the basics. Interviews are a great way to learn just how much you don't know; of course, if there's too much you don't know, you do run the risk of embarrassing yourself. If you're looking for an exercise, build an MVC based CMS and work in at least one AJAX feature (maybe the registration form). If you can handle that, you can probably find an entry-level job somewhere.
I guess it all depends. I can see programmers thinking of blogging as an extension of their resume. It shows that they have knowledge (or at least the ability to research a topic and come up with a solution). It also gives prospective employers / clients something to look at that has your name on it. In this way I look at it as an investment into my career and as such something that I should find the time for where possible (even though my blog is lacking seriously).
Do not panic too much if you never find one. Any imperative language tutorial (C++, javascript, ruby, python etc) will give you the foundation in programming that you need. The principles of imperative-style programming languages are all the same. Once you know what a for...next loop is, you know when to apply it, and it only takes a few seconds to look up the syntax for it in your chosen language. It's more important to learn PHP-specfic security issues, but to understand those you will first need to learn to code. What we definitely do not need is more insecure websites that fall over and disgorge passwords when you ring the doorbell. I suppose you could learn php quicker with a dedicated PHP site, but that's not realyl the hard part. The hard part is sussing out how to convert from human into computereese, and as I have said, any imperative language is fine for that. edit: By way of example, if you had to get a computer to sort a list of 1,000 items, chances are the program to do it will be recognisable to any programmer of any commony used imperative language, no matter which of those it was written in. Although in real life you'd use the built-in sort function.
The validation should be occurring *outside* it hits the setter. private $name; public function setName( $name ) { $this-&gt;name; return $this; } public function getName() { return $this-&gt;name; } **EDIT** change before the getter/setter to outside the getter/setter
We had someone apply who sounded great in the interview. We had him do fizzbuzz. 20 minutes and nothing. He didn't know what a for loop was. His solution for going through 100 numbers was to use an array and loop through that. He was having problems dividing numbers. Don't be that guy. You're wasting everyone's time.
&gt; 16,689 comment karma
Of course not! Although, after rereading it I can see how it would seem that way.
This is the sad state with PHP - in the hiring runs I've done being "good enough to apply for a job in PHP" seems to mean "capable of bashing my head against a keyboard and saving the result"
how great are you as a solo programmer? show us stuff you have done (preferably the source not just some wp site). you probably don't lack confidence, but instead are over confident. if you have the skills, previous work experience is not that important. the necesssary company processes can be learned in a few weeks (like using version control with a team, working on code not written by you, handling code reviews, deadlines, boss yelling at you, etc etc..). besides, a few people i know who have years of experience have outdated skillsets and lacks passion. trust me, if you have the skills and passion you will be found by the right people.
&gt; I've googled, and visited stackexchange, didn't find the answer. Don't understand how you did not get this answered on stack exchange. What did you *actually* ask? I assume it was the Stack Overflow subsite?
Cargo cult!
&gt;You should know how to configure your own server For a software guy I wouldn't say this is a requirement as much as a nicety. You have an I.T. staff and sys admin to do this. It helps to be Linux/Windows/Mac comfortable so that if a platform is required at a shop it doesn't completely destroy your workflow, but I certainly wouldn't pass over a candidate because he didn't know how to set up and maintain a server.
When I'm hiring, i'm looking for: minimum of 2-3 general MVC PHP frameworks that you have worked with, use of version control (svn, git, etc), basic-to-advanced knowledge of the javascript syntax and understanding of anonymous functions, basic knowledge of the PHP 5.2-5.3 object model, some sort of database and experience with sql injection. Proficiency with HTML/CSS and some common js framework (jquery, dojo, prototype, etc) and a moderate amount of linux usage, mostly so setting up your server environment is not a foreign concept. If you are at this point, you are totally employable, even if not a mid to senior, you are definitely within junior territory. Also make sure that you have any of your personal projects hosted on some free version control site like github, or bitbucket or even a personal version control. Also lastly I'm only interested in you if I see code written from scratch building a service Saas or CMS or utilities of some kind, think automation.
What I would say is "May jQuery bring you as much joy as tears JS brought me" :)
As a programmer you can download any number of pre-made L/WAMP setups. Why waste your time learning how to do it from scratch when you have things to code? We praise when people make use of frameworks instead of reinventing the wheel, but scorn when someone forgoes learning something not entirely necessary to program? Why? Why are your development, staging, and testing servers different from production (minus permissions, and task-specific software/settings)? Why are you responsible for them at not the I.T. department? The whole point of the I.T. department is to manage them (and the other servers, networking, etc). That's all fine and cherry that you *always* configure your own dev servers. I disagree that it is a requirement for a software developer. Unless by "configure" we're talking something like "I did `apt-get install php5`". Again I have to say, I am not saying that someone who does know the information is no more valuable than someone who doesn't. I am saying that I [disagree that it is a requirement](http://www.reddit.com/r/PHP/comments/u6gem/how_would_i_know_if_im_finally_ready_to_work_as_a/c4sstqv).
I assumed we were approaching this from an entry level point of view considering this guy has never programmed professionally. 
Of course. However determining web dev chops can be a tricky process when interviewing, sometimes you have to rely on their ability to talk the talk and find out what they currently work on and the most challenging tasks they have worked on. The key to this is having other programers listen in on the conversation and determine the legitimacy of their explanations. 
Sure, but that's not any less true if they list experience with server setup and maintenance on their resume.
Writing your own class that handles the XML parsing, server transfer, and automatic generation of the SOAP calls. That is how I handled getting around the limitations and oddities of the SOAP service at work and SoapClient in PHP. Around 100 lines of code to handle all of it.
It doesn't seem like CakePHP is all that necessary, in that example. It's probably good to know a framework, but for a basic blogging engine, there's really no reason you should need one.
I didn't "ask" I read others questions and answers. Being somewhat new, I couldn't apply the "fix" for their answers to mine to make it work properly. If you read the other replies here, you'll see it had to do with this $data[01234].... You can't start a string with zero, odd reason, but once I changed it to $data[t_01234] it worked fine. The t_ just told me it was a temporary change.
Understanding the way PHP interacts with your web server and the OS is immensely helpful in debugging, and in general, helps you write better software. It is never a "waste of time". It is absolutely a requirement for any developer I hire. There are of course fundamentals of programming that are more important (since they are a prerequisite of doing *anything*), but the importance of learning as much as you can about the environment as a whole should not be understated. If you're uploading code via FTP to a shared hosting in environment, then knowing about the underlying system probably wont have too big of an impact. But when you are working on large, high performance applications you really need a solid understanding of how they run. Is there load balancing? If so, you probably need to take that into account in your code. Is there database replication going on? If so, that is going to influence the way you write and execute your queries. Saying "that's IT's job, not mine" is not a useful approach. You don't need to understand things with the same level of detail as a sysadmin, but knowing enough to work with your syadmins, speak their language, and know what tools are available (and how to ask for them) is going to make you more efficient and lead to better code. If you want to be a successful programmer, learn everything you can about the systems you're working on.
I disagree. Writing native PHP extentions means that you are more than likely a fairly experienced user of C, which many web developers are not. That's like saying a senior linux sysadmin should be able to write kernel modules. I think not. I think the part about OOD (Object Oriented Design) Patterns is what makes a senior dev stand out from the rest. Once you have a strong grasp on the OOD part, you can tear apart almost any modern framework and make it your B****.
why does everything return a YTaudio? is there something i missed where everyone wants to chain methods that have little relation to eachother? it doesn't seem like good practice to me
This thread helped me feel more confident that I could be employed as a developer. I have two years of experience doing mostly design and front end development. Can set up a VPS in my sleep at this point. Good feeling to be going into my job search with. Thanks everyone!
Maybe we disagree in what "setting up" and "maintaining" a server is. I don't consider what you listed as server setup and maintenance. &gt;...hand them a laptop and have them setup a local development environment... Download WAMP/LAMP &gt;If I ask them to send me their public key so I can give them access to version control... Google to conquer ignorance. (I mean, fuck, I have tons of experience and still Google this because I do it so rarely.) If that's what you had in mind, or find it acceptable, then we are in agreement. Everyone, even a junior, *should* be able to do those things.
It's cool. Maybe you could implement a way to optionally include a data type for bindParam. Something like INSERT INTO products (id) VALUES ($id[isInteger]) To get $query-&gt;bindParam(":id", $id, PDO::PARAM_INT); 
Why does it do this: catch(PDOException $e) { die($e-&gt;getMessage()); } If it didn't include the try/catch block the script would still terminate and there would even be a nice stack trace. 
Don't use bindParam() unless you know the exact situation the code is going to be used in. bindValue() is nearly identical except that it doesn't bind by reference. Binding by reference can cause unintended side effects if you're not careful.
I currently see Symphony2 as the next step in php development. They are moving towards a very modular installation process using php [composer](https://github.com/composer/composer) and this makes installing packages really nice and simple, similar to how ruby lets you install gems / python with pip / easy_install. This should become a defacto standard for new php applications and frameworks.
If you're creating a chain of filters to narrow a set (like in a database QuerySet wrapper), that makes a lot of sense - but chaining objects instead of just using a simple list of configuration options is inefficient, and *much* harder to automate. This is a misuse of that pattern. To wit: if($_GET['use_hd']) { $yt-&gt;hd(); } if($_GET['use_loop']) { $yt-&gt;loop(); } // ... repeat a million times. Versus: $yt = YTAudio::create(array( 'hd' =&gt; $_GET['use_hd'], 'loop' =&gt; $_GET['use_loop'], // ... )); When using this pattern, you have to ask yourself: "Am I returning a distinctly transformed sub-set of the previous object" (Yay!) versus "Am I modifying the original object directly" (Boo!). Frameworks like jQuery muddle the two effectively, but shouldn't be taken as a pristine example.
As everyone uses a different exception, I decided a very basic catch which people can replace...
Haven't seen this mentioned anywhere, but there's something missing from all the points mentioned. Yes... it's good to know all these things. Yes... I'd expect someone with a 'senior' title to have many of these skills. However... there's no mention of communication skills. The biggest thing that kills projects isn't lack of framework knowledge, or not understanding PSR0, or knowing NoSQL, or caching issues or SQL performance. The biggest thing that kills project is lack of communication: * not telling your teammates something important * not documenting your code properly for others * not making a site usable for others (communicating intent through design) * not telling the client/manager/suits when something will be delayed and why (and offering well-thought out options) Some of these may stem from lack of technical knowledge, but imo, a 'sr-level' developer should have the maturity and experience from multiple projects to be able to communicate properly to everyone involved. Locking yourself in to IRC and telling everyone to RTFM, or 'read the code - it's self documenting!' are not, imo, signs of a senior developer in any language. 
Laravel is my favorite framework right now. But deep down I wish I was a symfony2 guru and drove a nicer car.
Although I've never used/seen this method before - it makes perfect sense when you look into the process *switch* performs &gt;The switch statement is similar to a series of IF statements on the same expression. In many occasions, you may want to compare the same variable (or expression) with many different values, and execute a different piece of code depending on which value it equals to. This is exactly what the switch statement is for. 
But PHP documentation doesn't describes the special behaviour of setting true/false in `switch()`. I always used a switch checking only values, but never expressions.
&gt;Am I the only one that didn't know this? Yes. You test 'true' against the case '!$this-&gt;attributes['IS_DEFINED']', which evaluates to true if the value is false. In other words, if true equals true, then the code for that particular case will run. It's standard switch-case behaviour. 
Hm, thank you. As I'd been working with Zend at work I believe I was kind of following its pattern. Specifically the way it does SELECT statements, where it alters the main object. -&gt;select()-&gt;where()-&gt;limit() etc. The way you've described above *does* make things simpler. I'm wondering if for version 2 I should make a breaking change to the constructor. However, would it be best to use *both* patterns? To have such a flexible constructor **and** be able to chain modification functions?
Switch true seems silly, and not the point of a switch, use and if statement to evaluate expressions.
all zen cart code seem silly
&gt;I've always used switch's as a way to check for mulitple values, never to evaluate different expressions. That's what switches do, as do if-statements. Take the following example: if (LEFT_SIDE == RIGHT_SIDE) If LEFT_SIDE is indeed equal to RIGHT_SIDE, then the expression is interpreted as: if (true) If it is true, then the code following it will execute. The same is true with switch-case: switch (LEFT_SIDE) { case RIGHT_SIDE: break; }
Well with method chaining to build a query, you are more so creating a funnel down to a single result. Each method makes your call a little more specific. Now, it may not return a distinct object at each step of the way, which IMO isn't a full, super clean OO approach, but not everything is really conducive to OO anyways. I believe it works so well for queries because it makes them read just like a SQL statement would. Without all the trouble of writing SQL statements. I'd side with the thought that the paradigm doesn't apply as well to this application and to not support that route. But that's me. 
I see your point. But on the otherhand, I don't see a good reason NOT to allow chaining. I mean, you wouldn't want to -&gt;hd() to return a whole other object would you with that one minor change and then just discard the original? Except for that rare case when you WOULD. But then maybe I should just make a -&gt;clone() ?
You don't have to know Symfony2 to drive a nice car. S2 isn't difficult at all, it simply uses some design patterns that have traditionally been found in PHP frameworks. That said, it is not for everyone. I'm a Kohana-based developer and will be taking a thorough look at Laravel this week. I have held off until now because I do not trust frameworks that have mostly been developed by a very small group of people.
The point of a switch is to replace a series of if-else statements. Using a switch like this is perfectly reasonable.
The reason is that you don't need it, and it doesn't make sense. $yt-&gt;hd(); Is just as valid as: $yt = $yt-&gt;hd() Which is what your pattern does. The difference is that if the latter needs to return false for some reason, your chain will break; the former will not.
K, I am not surprised now, that's not the way stack exchange works :-) Anyone can post questions on stack - even new users. In general *most* simple questions of this nature are answered within 10 minutes and don't require a threadnaught of 5 posts to answer :) They've got a lot more php folk than on here. If you're happy here, carry on, of course.
You're talking about the MVVM (Model/View/ViewModel) pattern where the controller handles really very little more than routing and injection objects.
Well, if you step back and think a little bit harder, you're really just using the switch statement for the same thing. You're checking if multiple possible values match the value inserted in the switch statement. The value in this case just happens to be the boolean true, and the values you're checking it against just happen to be booleans. I imagine this same sort of thing would work in JavaScript. EDIT: This same sort of thing **does** work in JavaScript.
Please avoid using link shortening services.
Well I think it's important. Especially when someone registers a username with an invalid email, and he will never get the "confirm email to activate your account" email. Now that username will never be activated/used and will always shown as taken. 
What if they typed in a valid address they don't own, maybe a typo? What if the network drops the email? What if it gets caught in a spam trap? You can solve all these problems by having the account expire and become available for another registration attempt. If you really want to check email addresses, you need something that looks like this: http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html
I've made changes to allow for both styles. https://github.com/navarr/ytaudio/commit/4625b653a0aee371788ac13ec850ed080ec61dbc
I've posted there a total of 5 times I believe, and 2 of them were closed as "being similar" to another post, but the other post didn't answer my question too, so I was turned away. Thanks for the nudge though, I'll go back there monday with my next problem and see how they handle it. :)
Hi, The error you are encountering is a parse error, there are lots of issues with your code for example I can see: if ($emailaddress = true || $password = true ){ Which is going to assign values to variables rather than check them (which is what you want). I think you are missing the closing brace from the nullException class declaration but you really need to look at the other issues also.
It's not special behaviour. A variable is interchangeable with its value just about anywhere, $foo = true; switch($foo) {.... // is equivalent to switch(true) {... `true` and `false` are also values (of type boolean), just like `"yadda"` (string) and `123` (int). You could also do $foo = 'yadda'; $bar = 'xizzy'; switch ("xizzy") { case $foo: echo "It was foo!"; break; case $bar: // &lt;-- triggers echo "It was bar!"; break; default: echo "None of the variables contained 'xizzy'."; break; } Note though that switch uses loose comparison: switch('some string') { case true: // &lt;-- this will trigger Happy coding!
&gt;Both have some nice improvements over Koahana (2.xx) hmm not sure if typo but Kohana 3.xx also has some nice improvements over Kohana 2.xx
Try/catch only catches runtime errors, not incorrect syntax (e.g., parse errors). 
For an entry level position, you need to know how to solve problems with PHP--quickly and effectively. What that means is * a working knowledge of PHP * a conceptual idea of how it's related technologies (apache, etc.) work * and a very strong ability to find (via research, critical thinking, etc.) solutions to problems quickly. If you can do that, you will go far. Also, [don't just limit yourself to working as a PHP programmer or even a programmer](http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/). **You are a problem solver.** Get *familiar* with other technologies (programming languages, etc.), too.
I guess it depends on your usage case. I just take my laptop about with me, it's fairly small and runs what I need just fine. I also define 'on the move' as on public transport and out and about - i.e. away from any other computers at all. Obviously a laptop wins here. I also keep almost all of my code in a private git repo on my personal server, plus a copy of my vim setup on there. If I'm ever without my laptop I can just ssh in and get working! How are you getting on using your virtualbox image on different operating systems?
Sounds to me like bad design. That's what OOP and private methods are for.
I have had "senior developers" ask me to help setup phpmyadmin, so I always the the title "Senior" with a grain of salt. But for me you can't be "senior" and only know PHP. You have to have an in-depth knowledge of the full stack in an http request and have experience with mutliple languages and ways to respond to that request.
$null_test == is_null($emailaddress) || is_null($password); ^ == is testing. If you want a boolean of the OR it should be something more like: $null_test = (is_null($emailaddress) || is_null($password));
haha no not a typo. I looked at Kohana 3.xx as well, but it was also such a change from 2.xx that I was hesitant to switch any current projects over. I'm leaning towards FuelPHP or Laravel for my next project. Symfony2 also looks very impressive, but it also has a much steeper learning curve. 
Try removing the closing ?&gt; tag at the end of that file.
While in imperative land that will hold mostly true.
Your first try { block is never closed. /* VERIFIES IF FORMS ARE FILLED */ try {
 $yt = new YTAudio(); $yt-&gt;setHd( $_GET['use_hd'] ) -&gt;setLoop( $_GET['use_loop'] ) -&gt;create(); This seems a better way to chain, imo.
I'm still a Yii man.
Um? Doing the first base YouTube and then A/V would probably be cool, but all the variables are protected, the static method is only for being able to chain immediately after construction, and its chock full of getters/setters. ie: I don't know what you'e suggesting as an improvement here.
You have pretty much perfectly described the Model/View/ViewModel (MVVM) pattern. You mentioned that you were using Kohana. I would definitely suggest checking out [Kostache](https://github.com/zombor/KOstache). It's an implementation of the MVVM pattern using Mustache as the templating engine written as a Kohana module. I started using it about a year ago and absolutely fell in love with the clean separation between presentation logic and the actual markup.
You are correct. OP is missing a closing curly bracket somewhere in those try/catch blocks around line 30. I'm not exactly sure what the placement of the missing bracket should be. It doesn't make too much sense to me to throw and then immediately catch your own exceptions. In any case, my best guess is that the missing bracket should be placed after the first catch block. OP: following a coding style convention (PSR-1, the proposed standard for the Framework Interoperability Group for example) would have made this error very simple for you to see. If you're interested, here is the [PSR-1 specification](https://github.com/pmjones/fig-standards/blob/psr-1-style-guide/proposed/PSR-2-advanced.md) and a customizable [PHP-based tool](http://cs.sensiolabs.org/) that will detect and fix coding standards violations for you.
Are you trying to write an email/password harvester for a phishing site? 
What would lead you to believe this?
I haven't used Laravel to actually build anything with, but I have looked at it quite a bit since reading Taylor's original post here on reddit. While it may have its flaws (just like any other framework) I've always wanted to give him a ton of credit for the overall product. The framework itself is fairly well done, the website, the documentation, the forums etc etc are all nicely polished for being a one man project. I think it's great he has gotten recognition and hope to see good things come out of laravel in the future.
Probably this: echo "\t" . '&lt;li&gt;&lt;a href="' . URL_ROOT . 'onlinebanking/" title="Online Banking"&gt;Online Banking&lt;/a&gt;&lt;/li&gt;' . "\n\n"; 
laptop + vagrant + virtualbox i also test on a linode.
There purpose is for limiting access to how other classes can access the class members. Both security and plugability ( not sure if that's the correct way to explain it ), if you changed something internal to the class involving those members, then how other classes access those members would not change but still receive the changes you made in the class itself.
You thought that before you thought he could be making a front-end for a local bank, perhaps?
Point is there is no reason to assume he's trying to phish something based on the code supplied.
"mysteries" made me laugh.
The point is, you shouldn't be chaining in the first place.
I'm working on a tournament system for a hobby that I could use some help with...
This is a real project I would like to see built, but don't have the time to build. I would also use this: A haiku checker! Currently there are only two sites online which help with checking Haikus, but both suck. The first is [Haiku With Teeth](http://www.haikuwithteeth.com/), but that only checks a single line. Checking a whole Haiku is difficult. The other is [Haiku Checker](http://haikuchecker.com/), but that has three text boxes for each line. A single text input would be much nicer. Both also require you to submit to check, which sucks. A realtime haiku generator would be much more awesome. To allow it to be checked in real-time, it would make sense to do this part in JS instead of PHP. What you can do with PHP, is allow people to submit haikus, and then list them on the site. Whilst I'm writing mine, new Haikus could randomly scroll by underneath. Submitted haikus could also offer a pretty url, and appear on their own page, displayed to look pretty. There is plenty of room for expansion, such as offering share buttons, logging in using their Google Account (so they can have an account of their haikus), and more. Again, if this existed, I would use it.
Thumbs up to writing your own twitter. I firmly believe that a twitter clone is (and with good reason should be ) the new hello world in any web language. Even if it will never be released.
Well this wouldn't be useful anyway... If you had for your first page `reset.css`, `layout.css` and then for your contact page you needed all three, you wouldn't make two full files of: sheet1.css -reset.css -layout.css sheet2.css -reset.css -layout.css -contact.css What would be the point of doing that? You're requiring the users browser to download the SAME css twice because it isn't cached, only to add the functionality of contact.css.. Am I not understanding what you want to do correctly? 
does this mean twitter.com is that easy to code? or that it really displays what a web dev language can do?
Make a social network!
Sweet, you can [fix all of SimplePie's issues](https://github.com/simplepie/simplepie/issues) for me! :D On a serious note, find an open source project that you've used and like, and see if it has any bugs you can look at fixing (or even helping with). It'll help you out using the project, since you'll get an understanding of the internals, and you'll be able to help yourself if you need to use the library in the future. As an open source developer, I'm getting increasingly less time to work on my projects, so receiving patches makes my day. This is true for a lot of projects that don't have someone working on them full time. tl;dr: work on open source, SimplePie sucks so help fix it
[There is](https://cmusphinx.svn.sourceforge.net/svnroot/cmusphinx/trunk/cmudict/cmudict.0.7a) (and [here](https://github.com/danclien/haikuchecker/blob/master/lib/tasks/seed.rake) it's being parsed into words), so hop to it! I had started this project myself. But to do it right would take at least a couple of days, days I don't have.
So I'm going to go make Twitter in Qbasic then... Ninja edit: missed "web" in "web language". Lol
Same thing as not on the move - Chrome and ssh.
Learn JS or Python.
learn haskell
I really like it and in some cases it feels really natural to use it. Think of how most DB-Layers build querys $query-&gt;select()-&gt;from('foo')-&gt;where(id = ?', $id); It makes for a very clean structure and most of the times, just by looking at the code you know what it does. For another abstract example, compare this: makeSquare(40, 'red', true, 'blue'); // ok, you get the idea of what it does, but it's not obvious makeSquare() -&gt;setSize(40) -&gt;setFillColor('red') -&gt;roundEdges(true) -&gt;setBorderColor('blue') -&gt;draw(); And with the IDEs auto-completion building objects is quite easy and you don't have to remember a cryptic method-definition.
2nd harkit link in a row, what's better about this than other yaml libraries?
Your PHP snippets are intentionally verbose and bloated. Please try again when you have an actual argument.
 &lt;li class="&lt;?php // May be you will create a partial here ? if ( $count % 2 == 1 ) { echo 'odd'; } else { echo 'even'; } ?&gt;"&gt; can easily be shortened by writing: &lt;li class="&lt;?php echo ($count%2==1) ? 'odd' : 'even';?&gt;"&gt;
Or using &lt;?= which are enabled by default now IIRC. But Jinja2/Twig/Django style templating is still nicer and cleaner in my opinion.
SO if flooded with lots of stupid questions these days.
Tell us about skill sets.
&gt; such as the inability to convert a string to an integer and you had to add an integer value to the string so it can be recognized as an integer. You should really be doing this somewhere else, like a template tag. Python is strongly typed, remember.
I've been using Yii for 2 years, and I like it. But I think it's starting to stagnate and Yii 2 doesn't look like it'll be a massive improvement from what I've seen. Mostly looks like syntax tweaking and bolting on minor features. Don't get me wrong, it's a solid, quality framework with a good community - but I worry it's not taking advantage of enough new PHP features (from 5.3+/5.4+) to see the benefit of the rewrite. I'm still excited about what it'll contain, but I don't think it'll be a huge shift. And also, I really don't want to go through the process of having a community split over v1 and v2 - it was the exact reason I didn't use Kohana when v3 came out, the support for v3 wasn't there as it was for v2.
How does the speed compare to [Symfony/Yaml](https://github.com/symfony/symfony/tree/master/src/Symfony/Component/Yaml) ?
I've been coding php for about a year and a half now. I've had a few jobs I've done for people. The first was a store wanting to sell their jewelry online, so I made a kind of cms where they could add, delete items, and when they hit the buy button it sen't them to her paypal with the item information. The other was for a marriage site that was using wordpress, so I made a few scripts that made a type of certificate that they could send to their friends to announce they were getting married. They both worked out fine.
Excellent advice.
Explore Wordpress. Learn to create plugins. Create some open source plugins. They don't need to be entirely unique or very useful. Create something basic, then keep adding to it. When you're proud of it, publish it on wordpress.org. See what people have to tell about your plugin.
Make a forum.
"I'm looking for something to do" "Do my work :D"
A sourcemap is a new format/protocol for describing the relationship between compiled javascript and the code that generated it. The link i provided [http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) explains how it works. Essentially, it encodes the positions of symbols in both files and therefore allows for debugging of the compiled javascript as if it hadnt been compiled at all. Currently, it seems that there is only one compiler (google's closure) that implements the Sourcemaps v3 protocol, i am asking if there is a php version out in the wild.
I was referring to the sentence itself, not the tool. It makes no sense. Asking for a PHP implementation of a sourcemap generator would have been fully sufficient. Pulling JavaScript and devtools into it only confuses the issue. The sentence sounds like you want an extension for Chrome developed in PHP.
well i apologise. What i mean to say: I would like a javascript sourcemap generator written in php :)
yea, i only came here after google fu failed me. I may go ahead and write it myself, i just couldnt be bothered implementing Base64 VLQ.
Or you could do it the best way: installing a VM. http://jtreminio.com/2012/04/setting-up-an-ubuntu-vm-step-by-step/
http://projecteuler.net
Not necessarily. I would argue that a simple module system could easily replicate most of the twitter functionality. Now, building twitter to scale the way it is would be very difficult - but building your own personal twitter just to test your skills shouldn't be very hard at all. Not to mention every "page" in twitter is really a hash-bang meaning it's all essentially on one page. You could technically use backbone + underscore to create some simple templates for each section, and tie the routes to trigger different views. Again - building twitter is very hard: Building a clone that mimics basic functionality? Easy.
Make a forum service.
[I've posted this before](http://www.reddit.com/r/PHP/comments/psk4h/whats_the_most_wtfterrible_piece_of_code_youve/c3s2xhu) but I think switch on booleans might be slightly more readable in certain edge cases. &lt;?php switch(true) { case $user-&gt;isUnverified(): // prompt for verification break; case $user-&gt;isTeacher(): case $user-&gt;isAssitant(): // Show cool stuff break; case $user-&gt;isGroundsKeeper(): case $user-&gt;isJanitor(): case $user-&gt;isCustodian(): // user does something else break; case $user-&gt;isStudent(): // Throw unauthorized break; default: // show cool stuff here } if ($user-&gt;isUnverified()) { // prompt for verification } else if ($user-&gt;isTeacher() || $user-&gt;isAssitant()) { // show cool stuff } else if ($user-&gt;isGroundsKeep() || $user-&gt;isJanitor() || $user-&gt;isCustodian()) { // user do something else } else if ($user-&gt;isStudent()) { // Throw unauthorized } else { // Show cool stuff here } Maybe slightly easier to read with switch statements.
I'm currently in uni doing a cs degree, while I can't speak to the usefulness of a degree in the long run I have made so many new friends and had an amazing time in my first year. I had a chance to work as an intern and turned it down in order to go to uni. In hindsight I feel like I made the right choice. 
Yep, you're gonna want to make sure you escape the HTML or else you are vulnerable to malicious scripts, which it appears someone has already taken advantage of on your site (I wouldn't call it malicious, though).
I'll answer this from the perspective of an American developer. I went to the University of Texas @ Dallas between 2003-2004 for 1.5 semesters before dropping out. Even with discounted tuition from grants, I was still taking out too much money to attend (mine was ~$2,000/semester only for tuition) and I hate debt. Since dropping out I've worked as a waiter, apartment groundskeeper, shipping department guy, help desk, and finally developer. Once I got my foot in the door as a developer, it's been good times since. I've been asked exactly twice in interviews about my school, and only one was bothered by my lack of traditional education. That particular job turned me down, but it appears I dodged a bullet as it did not last much longer before closing down. I'm lacking in in-depth knowledge of algorithms (Big-O Notation, etc), computer science theory, I don't know how a processor works, and quite a bit more. After speaking with acquaintances that did graduate from college, it also appears I am lacking in $50,000+ in school debt. They are starting as junior - mid level developers, while I am already at a senior-level position. Would it be nice to know all that stuff? Of course. In my years of developing, has not knowing it hindered my career? Not in the least. If I had to do it all over again, I would not have gone to that 1.5 semesters of college and instead have dove in earlier. Have fun, and good luck.
I wasn't planning to get a house at 18, but having it in the bank for down road would be nice :) Although I love PHP, I do still think I could go on to do another area of Software Engineering (I specifically love working on mobile environments), which is one of the big reasons I love the idea of getting a degree. I do plan to work over my time at university (I actually have a personal project right now that will either make a little money, or be a good portfolio piece), but if you don't mind me asking, could you give me any recommendations about getting/completing freelance work?
I do like the idea University, and I am very much looking forward to it, there's no doubt in that! I do agree that not going could limit the amount of jobs I could apply to, but I guess this was part of my main question. I do have a project that I'm working on right now that might be able to make some money (it's a bit large-scale though, it might sink or float, with no real middle ground), and I do have a couple of projects that I'll be making open source (in fact, I believe they're what got me my University offers, which were very low!). However, even with all that experience, I'm still unsure where/how to get freelance work, do you have any tips you could share with me?
You will get more favorable responses when looking for a job if you have a degree. However, any good company will look at your code examples over if you have a degree or not. You have to ask yourself if you would be happy working for a company where you must have a degree. Those companies are usually more rigid and you may find yourself working with people whose code is horrible but got a job there because they have degree. 
I'm in America, but in my case I'm not sure college has helped me a bunch. I did get exposed to many different languages but other than C# I don't use any of those learned languages much. I ended up choosing to get married and enter the job market rather than finish out college. I think the degree is only going to be a help in corporate environments. I honestly don't think my degree will do any better than my online resume, which consists of my open sourced code, my blog, and sites I run. Those show the work that I do and not just that I sat in class for 4 years and have no real world experience. This is PHP though, and I bet the same holds true for other languages. If you think you want to get a corporate job many of those types of places want some sort of degree, but I think for smaller shops or places that do a lot of PHP work, experience is much greater than any degree. 
I'm looking forward to trying Laravel soon enough. One thing I like about it, from looking at the docs, is a lack of bloat in simple situations. Frameworks like Symfony2 are great for big applications, but it just seems like too much for the more simple things, like a personal blog. One reason I always liked CodeIgniter was that it's sort of an in-between ground between plain PHP and having a the means to start on something small and scale up if need be.
I have a laptop that I dual-boot Ubuntu and W7. My development stuff is primarily done in Ubuntu, and the overall setup is basically the same as it is on a desktop, with a few tweaks to make better use of screen landscape and conserve battery power. Version control is fantastic if you have internet connectivity where you're going. I usually do. So, I make heavy use of git, and it's basically a habit to commit my stuff whenever I'm getting up from my chair.
Depends on your goals in life. Everything I learned about PHP is from experience. Everything else about computer science, including algorithms, design patterns, software development cycles, and anything tangentially related to programming came from the computer science degree. At the time, nobody in the United States took you seriously without a degree, but times have changed. I immigrated to New Zealand in 2010, and would not have been able to do so without a computer science degree (they awarded extra points for it). YMMV!
A house right now might be good. Sucks when you bought one 5 years ago though..
Will it help? Probably.. There are no guarantees in life. Some companies require a degree to even get your foot in the door, and others care more about your accomplishments and skill than your educational background. The question is, which of those companies do you think you'd prefer to work for?
Thank you, I was actually really troubled by the difference, because afaik (as far as I knew) they were just the same. Thanks again.
The extra characters are there because $_a is private. There is another set of characters used when the field is protected (I think \\0*\\0), and no extra characters when the field is public. PHP uses this system (apparently) to determine field visibility when serializing an object. Your problem is mostly bad design on your part. You shouldn't expect any private/protected properties to be exported by casting to array. Just make $_a public, and your problem is solved. 
Think of this, the first PHP job you will get no matter what route you take will be a junior dev, ie the bottom of the development ladder. When it comes to junior/senior roles it's really experience that dictates your level. Here's my experience: Got my first PHP gig at 17, was considered an intermediate around 22 and I'm 24 now and in a full senior role, getting paid way more than anyone who's my age who just left uni with a programming degree, why? Because they have 0 experience in a commercial environment and are now starting at the bottom rung of the ladder, not going to university has basically allowed me to get a 4+ year head start with none of the debt. Don't be fooled into thinking that free lancing will give any valuable experience either, when you're working on your own you have no-one to sanity-check, no-one to check what you're doing is even right, your first PHP gig is often your most important I find, working under a good senior dev where you can learn is key. I've been on the other side of the interview desk and looked at the work of people who've left uni at roughly the same age as me who were poor PHP devs making rookie mistakes (not escaping inputs, unable to grasp the difference of classes/ids in CSS etc). This was because they haven't been in that crucial junior role where you have an experienced person over your shoulder pointing out your mistakes - this is what makes a good developer and certainly got me to the level I am at now (I have a tendency of changing jobs once I become the top guy there) . If you were saying you were hoping for a career in python/java, then I would say go for it, lots of the concepts you learn there can be applied to those languages, but for PHP it's really only the experience that counts as web development is a much bigger, less-refined development world. Granted, you wouldn't be able to get a job in a large company as early without a degree, and of course I hear university is shits and giggles.
It's not a work related site, just a hobby.... But yeah, I didn't expect you to really do it, but it couldn't hurt to try. And there was always the chance that someone would have said, "So-and-so software already does that." 
A high-up firm like Google will ask for a degree, because it gives some indication that you know how to *think*. A web-shop will ask for work-experience, a resume, because it gives a good indication that you're proficient in programming language *x*.
I use a Dropbox folder as my workspace, test with WampServer (which operates out of the Dropbox folder), and write code in both Notepad++ and NetBeans. If need be, I can modify a PHP file on my phone which is as on-the-go as it gets, but I typically carry my laptop with me.
A very large number can be answered with "here's the link to the manual page on that".
Go take a few community college classes on C or just programming basics (data structures, programming paradigms, etc) and just start working. As you already have a vested interest, and are self-teaching already, school is going to be a massive waste of your money. I know, I was you and I went to school and will be paying these loans off for the next 15 years*. Now, later in life, as I look to hire people for the PHP engineering team I run, I throw the education section out the window. I can't begin to tell you how many people with a Masters degree in CS (**6 years of CS education!**) *can not* whiteboard their way through [FizzBuzz](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html). \* Some of my best friends I made in College, and it can be extremely useful for networking if you really go for that. But I imagine if you took 4 years to network well in jobs or freelancing, you could achieve similar results, quite honestly.
Symfony 1.4 for a framework; Drupal for CMS; Wordpress if you're needing a blog but then you might as well just setup a custom domain with Tumblr or Blogger.
If you have the opportunity to go to university, go. That piece of paper opens doors faster than anything else.
I have more in depth knowledge about Symfony 1.4 than Symfony 2 but Symfony 2 seems to open a lot more files and directories to the web root than Symfony 1.4
Which doesn't matter one iota when using any cache engine.
I agree that that's reasonable. In fact, that was the first thing that I did. I'm still combing through their code, but as of now, I've found a number of their queries and where they process the input, but no escapes. I've also noticed that the slashes are showing up in non-database driven places (again, no slashes on the current live site), which leads me to believe that it's a server issue rather than a code issue.
Magic quotes are off on the current (live) server. I'm really hoping that once I get a copy of the php.ini file from the current site that it fixes the problems.
Usually, it's because they can't handle the pressure of constantly being expected to produce. Or they get bored.
This question gets asked on here at least twice a week - perhaps try the "Search" button ?
You're on crack.
* Why is the automation server in NodeJS versus using something established such as [Chef](http://www.opscode.com/chef/), [Puppet](http://puppetlabs.com/puppet/what-is-puppet/) or [Fabric](http://docs.fabfile.org/en/1.4.2/index.html) ? * Custom file loading mechanism? Inherit from a parent site? Again why not simply using svn:external, git subtrees or submodules, or mercurial sub repos? * Versioning upon save? Does it actively monitor the filesystem or something? I'd simply set up an automated macro in your chosen IDE to do the same thing. * Another MVC Framework? Need I list the 20+ very respectable PHP MVC frameworks? Building new things is definitely an interesting approach but I have to ask why you wouldn't just write-up a useful guide using any of the above existing, open-source and widely-utilized solutions? Overall seems like a strong case of [NIH](http://en.wikipedia.org/wiki/Not_invented_here) 
&gt;If they're used with the SQL, it's recommended to do a quick rewrite and properly use ~~mysql_real_escape_string()~~ prepared statements 
&gt; A NodeJS powered server which provides a control panel to manage php-fpm, nginx, and MySQL as well as automatically create new websites from a web interface. Why would you go for another language when you have a php backend? I have a php control panel to manage things, it's called phpMyAdmin and I integrate it with any additional tools I need. I know there must be some secret sauce as to why NodeJS, that I'm missing. 
&gt;&gt; Apart from the weird WebDAV stuff, &gt; This allows one to use any third party desktop editor that supports WebDAV to edit files So I get that part. &gt; When used together publishing is done via a WebDAV server that is hosted by the framework itself. Why the framework needs to "publish" using WebDAV is....well strange. 
The general idea was to quickly extract a few properties of a collection of objects "A" as an array of values (no further reference was needed), to pass it as a parameter under those properties-names as arrays keys. Overwriting the recibing object's method to accept the collection of object, rather than an array, resulted quicker and better practice after all. Thank you for the elaborated response. 
One does not simply quickly rewrite something into prepared statements.
You don't mix PHP and HTML in my example &gt; but can you imagine putting all of your HTML markup in heredocs or something? No, please read and understand my solution before making that assumption.
I use it already, I'm annoyed that no one other framework or developers can see the advantage. Maybe we're ahead of the curve and MVVM will be the "thing" in a few years time.
All university does is to learn you to how to think of a problem correctly.
I'm self-taught, having study business management, marketing and the like but ended up finding webdev more fun :) It's true that I sometimes feel I miss some basic knowledge in CS and sometimes feels really dumb when I see some amazing architectures and concepts. Now thanks to the internet I just learn and read all I can to fill that. And I see a lot of bad code from CS literate colleagues :) So I will say it will depends on your goal. I surely will never be a NASA engineer and it was never in my plan.
But all things aren't equal. Going to school means missing out on 4 years of real world experience and real world pay. If someone wants to know about the core fundamentals of CS, I'd suggest reading SICP and checking out some (free) MIT courses in your spare time.
Instead of using an `if` statement like that to return true or false you can just return like this: return $queryDeleteUser &amp;&amp; $queryDeleteUsersObjects &amp;&amp; $queryDeleteUsersRoom; That expression will evaluate to exactly the same thing as your if/else conditional. Also, be careful when using variables inside of SQL queries. Never trust data from the client (user), you might be open to [SQL Injections](http://en.wikipedia.org/wiki/SQL_injection)! Finally, like /u/iknowifail said, the valued reqturend by `$this-&gt;db-&gt;query(...)` will be stored in the variables, not executed again. 
Basic knowledge of the difference between variables and functions/methods also helps :-) I'd get that down before diving into xdebug (but then, I have no experience with the latter).
nice, i'll look into xdebug. thanks for the reply!
College will give you an amazing opportunity to network and connect with others. Maybe it's with your peers and/or professors, but mainly what I mean is you can get internships and jobs that aren't available to non-students. That way you can come out with the degree AND some work experience at the end of it Plus you can minor in something like math, IT, art, or whatever else you think might be relevant to your future career
wow
Who is your target audience with this product?
Consider going to university in another EU country -- this can save you a lot of costs (the UK is notoriously expensive from a Dutch point of view, though of course, not so much as the US). Though of course, you might feel guilty for profiting of taxpayers in another country, so you might afterwards consider getting a job in that country as well.
How many times do we have to ask that questions?
If I'm currently on a 3.0 server, what does that mean for me when you EOL the 3.0 DV's?
While I'm sure most tutorials are just a google search away, I believe what you are looking for is some really indepth stuff that goes beyond simply introducing the concept. For cases like this, I would advice that you go to github to see what kind of projects that people have been working on(these projects generally tend to be fully fleshed out examples). You can then use/modify these projects to learn from/implement in your project Remember to always respect the license of the projects and if you find bugs or can make improvements, please do give back to the community! Here is a relevant project I found for your particular query: https://github.com/chetanvarshney/User-Management-Plugin-for-Cakephp-2.x
Thank you! I remember seeing this framework posted awhile ago, but I forgot to bookmark. 
I have a git setup on a VPS and I sync most of my work from the office computer to the home desktop as well as laptop on the go from that VPS. Its the easiest, most hassle free setup imo
I did google and if you look at the page that you sent me to it's not very relevant to what I'm trying to do. I've already followed the authentication tutorials on the cakephp website.
We still use PMA to manage MySQL. The NodeJS tool is for making new sites. This process involves making http server configs, creating MySQL database and username for the site, and populating PHP config files with the relevant information. The next logical step was to automatically restart the http server after the new configs are made.
A lot of what these folks said. Plus a senior level dev knows how to architect, plan, deal with hiccups, interact with people outside the organization, manage and things like that. A senior level guy/gal has also had his/her ass kicked before by some nasty bug or outage and can continue to roll with the punches. However, in many regards it just depends on the organization as to what a senior level engineer is. *edit: gender nuetral
i have gotten this far but the trouble comes when the string is broken into 3 lines instead of 2. i can't figure out how to recombine the text and break it into two lines with less spacing in between the characters
College/University is mainly about experience imo. Sure, having that piece of paper can mean the difference when it comes to getting a job, and for many jobs it is an absolute necessity to have that diploma. But the experience of being in college. The diversity, the ideas, the people you get exposed to can change your life more than just being able to get a job.
https://www.owasp.org/index.php/Authentication_Cheat_Sheet https://www.owasp.org/index.php/Guide_to_Authentication
Think of the automatic versioning more as an infinite server-side undo. As a developer I've found that my undo trail is too valuable to lose every time I close my editor. The logical grouping of changes provided by traditional VCS commits, as Digitalis mentioned, is the "push". A traditional development model on emergence looks like this: Live server \_Staging server (inherits live) \_developer A sandbox (inherits staging) \_developer A's experimental feature branch (inherits dev a sandbox) |_developer B sandbox (inherits staging) "Commits" happen when you select a subset of the differences between your site and your inheriting site and *push* them upstream. There is no way to attach commentary to this action yet but there should be.
I found this example online. TRUNCATE TABLE inventory_ssd; SET AUTOCOMMIT=0; LOAD DATA INFILE 'inventory_ssd.csv' INTO TABLE inventory_ssd FIELDS TERMINATED BY ','; COMMIT; Just changing the filename and table name should accomplish what I'm after, correct?
Experienced developers who want to spend less time being sysadmins. New developers who want to get started without having to first find+install local tools and then get a working development environment configured. I think small web development teams/companies stand the most to gain from using Emergence. We use it at http://jarv.us because it lets us continually amass all our group's best practices into a collection of "skeleton" sites that any of our developers can start their projects from and continually pull updates from. Training new developers also becomes far simpler when it doesn't matter what kind of computer they have or what's installed on it. They can spawn new sites and edit them entirely within a web browser. Hit full-screen and you quickly forget about coda
Check out out emergence: http://www.reddit.com/r/PHP/comments/u9ve9/i_think_its_about_time_i_introduced_rphp_to/ I have a copy of emergence installed on my Mac, and I just create sites that inherit any sites I want to work on when I'm on the go. It replicates the server environment for me and tracks the changes I make so I can push them back online later.
... Why would you need access to the command line?
I was wondering how other programmers write search engines in PHP that are linked up to MySQL. I've seen 100's of alternatives but they all require some sort of framework or access to a linux command line (or similair) in order to be installed. 
[Here](http://www.reddit.com/r/PHP/comments/uahy1/search_engines/c4tp62b)
The simplest way is having a table in MySQL with MyISAM and using a FULLTEXT index.
&gt; Although I love PHP, I do still think I could go on to do another area of Software Engineering (I specifically love working on mobile environments), which is one of the big reasons I love the idea of getting a degree. You don't need a degree to program anything. PHP can still be useful for developing mobile apps, because if there's a back end involved, you have to write it in something. Also, mobile platforms are relying increasingly on Javascript and HTML5, so a lot of the skills are transferable. For right now, Java or Objective C are more associated with mobile development, but I can see that shifting in the next five years.
It depends on what you're searching, really. There are various comparisons you can make to determine _relevance_. For example, if the searched items have _tags_, you can compare the tags to the searched query and increase relevance for each match. Or increase relevance for every time the title or description of the item match the query. If the title of the page contains the query, increase relevance by 2. If the description of the page contains the query, increase relevance by 1. etc. None of it requires command line. There are many different ways to determine relevance, sorting order, etc. to make it a "good" search engine. It's just up to how you think it should sort.
I'm kidding, of course. Test for basic SQL injection, HTML XSS embedding in input fields, non-filtered output, etc. OWASP is an excellent resource for this kind of thing: https://www.owasp.org/index.php/PHP_Top_5
I might be a bit confused on what your doing with spacing. Are you just trying to get it to fit correctly with letter spacing? Isn't this the function of wrap and font size? To help troubleshoot, post your entire code to pastebin if possible. To help yourself troubleshoot, section off each part of the process. Each method sectioned off from the "main" function might look like: * AdjustFont(int) * AdjustSize() * AddLineBreak() * RemoveLineBreak() * SanitizeInput() By doing the above, you'll be able to exit out of the code at different intervals or even throw exceptions when a condition is not met.
Made me laugh, even though you're being downvoted by users. 
That's ok, It was worth it. I've been doing PHP longer than they've been wiping their own asses, like as not. :)
Doing something for a long time doesn't mean you are doing it well. Upvote for you anyway.
Excellent point. I am, however, doing it well. ;) Upvote for you as well. I like it when people call me on my bullshit. 
Can't believe nobody has mentioned SQLMap yet. Do ya'll really not test against standard pentest toolsets? http://sqlmap.sourceforge.net/ Edit adding: It's very useful to download a copy of backtrack Linux, learn the tools available there, and run scheduled attacks against whatever you're building. 
It's still not something I would recommend a beginner getting too hung up on. It's more important that they're sanitizing user input, to minimize the risk of the users table becoming visible in the first place. 
Writing a good search engine is a pretty rough task. If you need more than basic keyword matching, you might take a look at integrating google's custom search into your app.
Wait, so doing it for a long time means I'm doing it poorly by default? Or is it the confidence in my abilities and strong standing career-wise that make me terrible at what I do? The approval of strangers is slipping! Nooooooooo!
While we are on the subject of security, your own insecurity is pretty blatent.
Hee hee. You're trolling me. Kind of tickles.
Well, you could try pissing off Anonymous.
Visit 4chan.org, post the url and ask them to help you test for vulnerabilities. Edit, in case it needs to be said: Don't do this.
You realize that if you went into work instead of school you would be a non graduate with zero experience right?
Ask the user to provide the information. I am so sick of every site (even google) assuming I live 250 miles from where I actually live.
I fell in love with Twig even though I'm not a huge fan of Symfony 2
How about something like: function wrap($fontSize, $angle, $fontFace, $string, $width){ $ret = Array(); $i = 0; $arr = explode(' ', $string); foreach ( $arr as $word ){ $teststring = (!isset($ret[$i])?"":$ret[$i]).' '.$word; $testbox = imagettfbbox($fontSize, $angle, $fontFace, $teststring); if ( $testbox[2] &gt; $width ){ $ret[$i].=(!isset($ret[$i])?"":"\n"); $ret[++$i] = $word; } else { $ret[$i].=(!isset($ret[$i])?"":' ').$word; } } return implode($ret); } ? Granted, I don't have a way to test this at the moment, but it should work. Or not. I'm tired.
yes? you apply for a junior position and work your way up (possibly show off some of your hobby work to get a foot in the door).
I saw your message right as I was setting the php.ini file to be recursive, which fixed my problems. Thanks anyway!
That can be done with prepared statements as well. Simply generate the same query you usually do but replace the variables with placeholders. I don't really how that can be done better without prepared statements.
It's a matter of separation of concerns. I'm a PHP developer, but can do HTML/CSS/JS. I am *not* a frontend developer that focuses on HTML/CSS/JS. There's people in our group that are *much* better at it than I am, so they get those tickets assigned to them. They should not have to know *any* PHP to be able to do their magic, which is where a good template abstraction comes in. They learn only a few, select commands and then they can do whatever they need.
I want a template parser that falls between the strictness of Mustache, and the power of Twig. I love Mustache, but sometimes I really need to send some information from the current template state to my ViewModel. I like Twig, but a ton of the functions it has don't really belong in a template!
 $query = "INSERT INTO a (a,b) VALUES "; $ra = array(); foreach($sets as $set) { $ra[] = "(".e($set['a']).",".e($set['b']).")"; } $query .= implode(",",$ra); You do this PROPERLY with prepared statements, how, without creating a mess of variable variables or associated arrays and messtonne of function calls?
&gt;I seriously hope nobody still adheres to the old "but PHP is a template language" school of thought. I do. There's nothing wrong with using a templating engine which loads PHP templates (like Zend_View, PHP Savant et al).
This is exactly how I feel.
This is the reason I absolutely love Mustache, because it's a language-agnostic template engine that can be used across many different platforms!
As a co-organizer I feel completely unbiased when I say everyone should buy a ticket and come!
I love Twig! Mostly because going deep into the code to change an element's class is a lot of work. :P
PDO: $query = "INSERT INTO a (a,b) VALUES (?,?)"; $query .= str_repeat(", (?,?)",count($sets) - 1); $stmt = $dbh-&gt;prepare($query); $param = 1; foreach($sets as $set) { $stmt-&gt;bindParam($param++, $set['a']); $stmt-&gt;bindParam($param++, $set['b']); } $stmt-&gt;execute(); MySQLi: $query = "INSERT INTO a (a,b) VALUES (?,?)"; $query .= str_repeat(", (?,?)",count($sets) - 1); $stmt = $db-&gt;prepare($query); foreach ($sets as $set) { $stmt-&gt;bind_param("ss", $set['a'], $set['b']); } $stmt-&gt;execute(); Doesn't really differ that much from your code, but this one uses prepared statements. By the way, without the alias for mysql_real_escape_string your statement looks a lot uglier as well: $query = "INSERT INTO a (a,b) VALUES "; $ra = array(); foreach($sets as $set) { $ra[] = "(".mysql_real_escape_string($set['a']).",".mysql_real_escape_string($set['b']).")"; } $query .= implode(",",$ra); 
I use Twig to prevent the frontend people to mess with my MVC, it's that simple.
TIL about vagrant. Looks great thank you.
I do plenty of freelance work and have 3 frontend guys I interact with on a semi-regular schedule. Two of them hadn't used Mustache before I introduced it to them, the other had used it via node.js and was already well versed in it. I follow the MVVM pattern, where the template is strictly logic-free, This simplifies the templates greatly, where all you end up having are very simply loops and TRUE/FALSE checks. MVVM is a bit more work for the developer, in that the loops or logic that is template-related that you would traditionally find in templates is now found within PHP files. I find that I am more aware of how to keep my code much cleaner thanks to this pattern, and my controllers are extremely thin, being little more than router and object instantiators.
[This link](http://mediatemple.net/support/dv4-migration/) should help explain the entire move. We'll be sending out notifications about when the service will be EOLd and it will be your decision to move your content or allow us to move it. We strongly suggest that you make the move to our new (dv) 4.0 if you have any large server customizations. If you don't make the move yourself, then we will move you to our new bigger and better (dv) 4.0. 
&gt;I follow the MVVM pattern, where the template is strictly logic-free, This simplifies the templates greatly, where all you end up having are very simply loops and TRUE/FALSE checks. I'm sorry, but didn't you just say that you have loops and if-statements in the template, or did I misinterpret you? That's presentational logic, at least according to my book. Also, that's pretty much how you'd be using templates with the traditional template engine approach (see Zend_View, PHP Savant etc.). Business logic go into the code, while you have a few loops, if-statements and echoes in the template to handle the presentational logic. My idea was to separate the logic from the HTML template completely, and instead handle that inside of the view model, by using DOMDocument or similar to manipulate the markup in order to inject data and/or loop sections. However, like said, this might be a pain in the ass and not at all feasible, which is why I wanted your input on it. 
Hah, yea I probably should of. Thanks for the responses guys.
Yeah, and the same thing with the traditional approach: &lt;ul&gt; &lt;?php foreach ($foo as $bar): ?&gt; &lt;li&gt;&lt;?= $bar ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt;
Simplest? Sign up for PCI DSS compliance testing (google it) and they will scan your site and find new vulnerabilities in it every 3 months. Thorough, up to date and costs about £100 a year. I suppose you might find a straight forward scanning service online that has nothing to do with pci compliance. 
Post a link to it on a Chinese social networking site.
Have you tried without the local? Just LOAD DATA INFILE?
I attended last year and I feel that it was an extremely valuable experience. I consider myself to be an intermediate developer. Unfortunately I cant attend this year. 
I think you can assume most users have JS turned on; if they don't it's their own problem. If you wish to do this purely server side use a geo ip database, [Max Mind](http://www.maxmind.com/app/ip-location) has a nice pecl extension, from there its pretty straight forward.
oh no, not the ping of death!
Lol, as true as that is, the higher ranking members do have some skills.
* Twig doesn't get you anything that PHP templates won't give you natively - if anything, you lose a lot of functionality. * The old "designers don't have to learn a language" trope is outdated, boring, and just plain **wrong** - as they still have to learn Twig. If anything, learning a few bits of PHP will help them in scenarios where Twig isn't available - e.g., Wordpress, Joomla, Magento, and every other major piece of software on the market. * It's also not a separation of concerns to have to add an entire layer just to do something your existing language does natively - Twig itself is not HTML, making this a straw man argument. For those of you in the audience who have had to suffer through Jinja in Python, you know what I'm talking about - it's like carrying water in a sieve. You could, but it's painful, difficult, and in the end, hopelessly futile.
they can also delete the entire template and every other file on the system and set themselves on fire.... If the issue is not trusting your frontend dev.
Why are you hiring people you dont trust? What if you go with using twig and they jsut delete everything instead?
I am sad that I can't go, but we're (Engine Yard) sending Gwoo and Davey Shafik along :)
As a backend dev, you rarely have the luxury of hiring the frontend devs you work with.
You can run into reverse hashing which is a problem with sites that offer hashing. Make sure anything you do in a login system is salted.
&gt; Twig doesn't get you anything that PHP templates won't give you natively - if anything, you lose a lot of functionality. That's part of the point. Templating languages only expose the functionality of PHP which markup editors will actually need, and you do it in a way that doesn't force them to use PHP's often clumsy syntax. You expose just as much as you need, in a controlled way, so the opportunity for your frontend devs to create nasty PHP bugs is all but eliminated. &gt; The old "designers don't have to learn a language" trope is outdated, boring, and just plain wrong. Templating languages are rarely full-fledged languages. I would call them merely syntaxes of PHP (Twig) or of HTML (HAML). They are lean by design, specifically targeted to pare down the monstrous functional domain of PHP into bite-sized chunks, and their symbol tables, keyword domains and documentation all reflect that leanness. Additionally, templating languages all largely look the same. Consquently, asking a frontend dev familiar with [Liquid](http://liquidmarkup.org/) to learn Twig is trivial, but if you ask that same dev to learn PHP and find the bits and pieces of PHP that pertain to templating, you are wasting his time. &gt; It's also not a separation of concerns to have to add an entire layer just to do something your existing language does natively - Twig itself is not HTML, making this a straw man argument. This is precisely the situation that the concept of separation of concerns was developed to counteract! Using PHP for templating is anti-separation of concerns. For example, the documentation for [include](http://us3.php.net/manual/en/function.include.php), a basic part of any templating language, is grouped with the same keywords used in functional programming (return) and procedural programming (goto, continue, break). How in the world is that "separation of concerns", when you have to ask any would-be frontend dev to dig through these sections of the manual he has no use for, just to find the basic command to include external markup?
This is true, but it does seem like a much better choice than those options - which is not to say we will necessarily see a flood of websites switching over to it...
I'll be there, looking forward to it!
We've used Twig for templating, and we love it. Things to love (a lot of these apply to most other similar templating languages out there): * Beautiful syntax - Not only is writing Twig (or any other similar templating language, really) much easier than writing embedded PHP, but I just think it looks gorgeous. It's clean, readable, and elegantly free from needless cruft. * Template inheritance - This is a feature you won't find in some of the more basic templating languages. The ability to create a generalized layout, then inherit those layouts while only defining the blocks of code you want to replace in the parent layout, is extremely powerful. * Extensibility - As a PHP dev, this was awesome. You can define brand new Twig functions, even keywords and syntax. We would get questions from our frontend devs asking, "Hey, what's the best way to take your dynamic content and do X with it?" I would spend 10 minutes writing a custom Twig function, add it to our custom TwigExtension class, and boom. Anytime they needed to perform that complex transformation to some piece of our data, they would simply call my custom function, right in the template. * Support - Not only is Twig well-structured, psr-0 and 5.3 compliant, and featured in the main Packagist repository, but there are even template caching systems and a [PHP extension](http://twig.sensiolabs.org/doc/intro.html#installing-the-c-extension) that severely mitigate any performance concerns. Twig comes highly recommended in my book. It made writing markup *fun* again.
Although PHP's documentation provides a nice illustration of the reason why I think Twig and other designed templating languages are superior to PHP's outmoded templating functionality, it is by no means the reason itself. I actually think PHP's documentation is pretty decent. It could be organized better, but for what I need to do it gets the job done. Rather, my point is actually that PHP is ill-suited to modern templating. Decent documentation naturally follows the design of the language, and although PHP may have originally been created as a templating language, it has long outgrown that narrow definition, which is why those 10 "basic" PHP commands are scattered throughout the documentation. When you have to teach new frontend devs those 10 PHP commands, where would you send them?
That's a bit like saying "Go through your own code and fix any bugs and logical flaws you find." Sure, you might fix a *few* bugs, but unit testing frameworks exist for a reason.
I prefer to an empty array. The majority of my time is spent using smarty, which has some nice functionality for foreach loops allowing this: {foreach $array as $something} &lt;!-- do something to $something --&gt; {foreachelse} $array is an empty array. {/foreach} Also with the code you gave, an empty array would have the same effect since an empty evaluates as false.
I prefer sticking to a single return value type. So if the method returns an array on when there are children, it should still return an array when there are no children. Here's a contrived example to express my point: $values = $this-&gt;getAllChildren(); if (count($values) &gt; 0) { // Do something } That code would trigger an error if getAllChildren() returns something other than an array. While I'm sure you would add some code like "if (!$value) ...", that will work for both false and an empty array, so why not go ahead and return an array to ensure no other code acting on $values fails.
What are some good pentest for web security in Backtrack?
Yea you are right an empty array will evaluate to false, upon closer inspection I don't see any true benefit of returning false. Thanks for your response.
I suppose a lot has to do with the type of jobs you need your programmers for. There are some flaws with self-taught too. Usually, when they are hired, they lack methodology and are bad to write documentation. Not very good at TDD neither... I am self-taught too, so maybe it's easier for me to fix these flaws rather than others.
Aw, I would love to come, sucks being poor and 17 :P Good luck with the event guys!
Empty array! Those PHP methods that return a mystery type depending on circumstances really bug me. It's nice to know at least what type a method's going to return.
Array, they don't blow up arbitrarily, and if the function normally returns an array, many times the client code can "do the right thing" with no extra code.
Throw some apostraphes and quotation marks in your input fields. All of them. Even fields not meant for them. Like age. Try different values for _all_ GET and POST data. Even data that the user isn't supposed to be able to change. If the age is a drop down for year=1990&amp;m=1&amp;day=1, try year="d'&amp;month="%'&amp;d='$var" and see what happens. Put &lt;some sort of HTML&gt; in all of your GET parameters. Namely, the ones that are output _anywhere_ in the document. I say do it for all of your parameters so that you don't forget that one is output. somefile.php?parameter=&lt;script&gt;alert('test');&lt;/script&gt; is a good test bit of HTML. Data sent by mod_rewrite _still counts as a GET parameter_. Test it too. /your/link/&lt;script&gt;/etc. If you have a file upload system, upload a PHP file and see if you can execute it. If you can, you done goofed.
No its local VM's and no I did not build MySQL from source.
[Burp Suite](http://portswigger.net/burp/)
Are you kidding me? [CakePHP has a built in auth component](http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html)!
Don't make me create an account for reading this.
Doesn't Github have their own markdown that you can use in a library?
It isn't better. I have yet to see a convincing argument, and the reason is simple, any templating system is just a subset of PHP, hence PHP &gt; any templating system. Also, my main problem with them is that they are an engineering turd, adding useless complexity to your code while adding nothing. I dream of a day where more developers realize they over engineer 90% of the time.
@itsmegoddamnit Thank you. Yes I agree your code looks better. But sometimes there can be nested conditions happening. So I just want to point it can go long. But my point is not just the code. Its also about inheritance and stuffs that I love in it.
Yeah. I'm afraid they've blocked direct links now, too. Just the thing they needed to do to make it fall into obscurity and be forgotten. If their plan is to demote their magazine, they sure own the recipe. 
Yes I agree with @haywire &lt;?= is enabled by default from PHP 5.4 . But there are lots of good features in Jinja2/Twig/Django . We will understand once we do some examples itself.
Sure! . May be its all about taste how the code looks. What about inheritance and placing the codes any where which will render properly in the layout? How do you bring that ?
I don't know about testing, but one thing you should do is install [this](http://www.hardened-php.net/suhosin/), and disable eval. I've seen first hand websites (not built by me) get hacked, and then fall down, because the attacker injected code that used 'eval' but I had it locked out. You also need to isolate your website from the rest of your server as possible. With Apache you can run it under it's own user, separate from the other sites. File and user permissions allow you to ensure it can *only* mess up that one website. Making your site's php files read only for that user, also helps. A common attack is to open a backdoor, so the attacker can run arbitrary scripts in the future. This is typically done by editing your PHP files. I suppose the lesson to learn is not to think about one layer of security, instead think of multiple layers, as one of them will have holes.
Yes I agree you may not be able to use the same function in the language. But sometimes we may want that to happen it at the user end . How can we expose PHP for templating a layout if its like blogger or something similar ? May be you use xml or some other markup.
Looks like I might actually be able to make it to this one!
Or on 4chan saying its unhackable
Any designer worth their salt will be able to put their design into a WP theme, why pay 2 people to implement a design where one could do it without having to know the intricacies of PHP?
i'm working with someone on it. i'll update the post right now. thanks
Apparently the ioncube algorithm is pretty simple, and there's decrypters out there on the market... Never messed around with them though, not sure.
I really avoid returning mixed data types so I'd return an empty array instead of false.
You make a good point. I've been using Python recently to write basic scripts and prototypes, and I'm really liking it. Maybe I've just been using PHP for too long and need to try something new :) I still think, though, that you can like and use languages for parts of their functionality, and while I love PHP's C-like structure and simple inheritance model, I absolutely hate writing HTML templates with it. To each his own, right? :)
Scattered documentation on PHP functions useful for templating is not my reason for liking templating languages. See [my reply](http://www.reddit.com/r/PHP/comments/uatm1/symfony2_to_twig_or_not_to_twig/c4tx8xa) for the multiple reasons why I choose templating languages over embedded PHP. I feel like this argument is still going to come down to a fundamental disagreement between us. I value the separation of presentation logic from application logic and prefer using a syntax and language more suited to that purpose, even if that separation is largely aesthetic and the templating language is just a wrapper for more complex PHP functionality. On the other hand, you prefer simplicity in your solution, limiting the number of technologies you have to deal with and using PHP's wide-ranging versatility to your advantage. It's all about which benefits we care more about, based on the projects we work on and the people we work with.
I'd just like to reiterate: &gt;This web server is designed for developmental purposes only, and should not be used in production. Also, this is v5.4 only - it's a nice feature but I wont be using it. Rails has had this for a while also.
also - empty($array) is faster than !count($array)
Symfony 2.0 is buggy. 2.1 should be released in August they are redoing the forms and a bunch of other things.
Do you want to hack on my project? Ive made an android app which can query a web service running on a server and get information on it like uptime, load,, disk space etc... Quite a useful wee app for checking on your remote virtualised/dedicated servers whilst on the go. Ill send you a link if you are interested. Im not really a PHP guy (More a Java guy) so it could benefit from a look over :) - BSD licence.
Just note that a lot of big projects have guidelines on how things should be submitted - don't be upset if it takes you a few tries to get your patch approved.
I'm not sure what you mean by "inheritance" or "placing the codes any where". We're talking view files here, which are totally separated from any actual business logic (e.g. inheritance).
Appending strings into queries like that without sanitizing them isnt safe. You should use parameters and prepared statements instead, to prevent injection attacks.
ah. in this example it's another function that's calling this method. the $userid is coming through escaped via codeigniter's built in escape function. does this still leave a hole? thanks for your time
thanks man! is this something I can use in codeigniter too? also, do I need to use prepared statements even if, like in my case, the concatenated string is a "safe" variable mysql_escape_string'd in from a different function? or is this something that should be reserved for more only functions that are directly accessed using input from the user? thanks again
I think part of the reason Twig looks so nice is that Symfony2's view layer in PHP is so verbose (compared with 1.x): These are equivalent: Symfony 1.x: &lt;a href="&lt;?php echo url_for('@homepage', true) ?&gt;"&gt;Home&lt;/a&gt; Symfony2: &lt;a href="&lt;?php echo $view['router']-&gt;generate('_homepage', array(), true) ?&gt;"&gt;Home&lt;/a&gt; Twig: &lt;a href="{{ url('_homepage') }}"&gt;Home&lt;/a&gt; The Symfony 1.x way, to me, is the most semantic and is still reasonably concise. Personally, I'd rather just stick to PHP, especially since 99% of the time, I'm the one doing the frontend development in addition to the nuts and bolts, but I find Symfony2's PHP templating to be cumbersome.
I'm sure it isn't true everywhere - but in my case I've had a few (quite competent) friends who've had to go back to school because their company wouldn't promote them any further (one was trying to move up to a managerial role) until they had SOME kind of degree. I've also been in the pharmaceutical industry and it's quite true there as well. I think newer companies as well as companies with younger CEO's/presidents are more likely to overlook degree's and their importance (or lack thereof). 
It doesn't even seem to support htaccess, and instead makes you recreate all your rules through a router file.
Generally I avoid all fanboys of all things. I also avoid haters of all things.
fair enough. in fact, i'm also getting a "degree" right now (you need a certificate to start your own business here). sometimes you have to. but you need to outweigh the pros and contras in every specific situation. tbh I still don't think you need a degree in many PHP / "webdev" (RoR, node, ...) shops, but YMMV.
You should contribute to a project you use every day. This is the easiest way to keep your motivation :)
Can you please send me the link, too? Here's my CV: http://users.phpexperts.pro/tsmith/
You *should* do routing through a PHP based router anyways. Just the direction of all traffic to your front controller should be done by mod_rewrite. If you don't do it this way you are giving up a lot of flexibility and make migrating to another webserver rather hard.
It's not far from the truth really. It seems that lately everyone has such extreme opinions on everything that there's no point in debate anymore. While these people circlejerk about x vs y is the "right way" to do something, I'll just finish my work and go home. I don't know if I'm just bored with it, or web dev in general but it's annoying me more and more every time I see a thread. It just descends into idiotic pedantry every thread.
That's true, and that is how my sites are set up. I just don't like the thought of having multiple routing files that all basically do the same thing - send all non-static content to the main index file.
Well we *are* in the PHP subreddit.
Best thing since sliced vadge. 
Sublime Text 2 in Linux/Windows/Mac
This is what I was looking for. Thanks!
You should check out JetBrains PhpStorm. Been using it for the last two years. Came from Netbeans after leaving ZendStudio before that.
I think the buy dialog pops up ever 20 or so saves
aptana?
Maybe not exactly what you're looking for but: Vim + Eclipse = eclim (http://eclim.org/). I've never been more productive. Being Vim, it's a bit of a learning curve, but it's a fully featured IDE with tab completion etc. from a headless Eclipse. I currently run it in a tty and it's lightning fast. After a few binding you'll literally fly through your code base.
In my experience designers don't really want to edit .php files or straight code. They only make some of these mistakes because they are trying to create some functionality without asking and are doing so inside of a php template, assuming they know what each function is going to do. Also, from my experience they prefer the template languages, so I'm going to give them whatever makes them the happiest and most productive.
Bit of a coincidence - I started using it today. For the last 2 years, I've used only Netbeans, and before that Zend Studio - so I'm used to big IDE's and all the features that come with them. At first, Sublime seems a bit too simple - but it's a ruse. I installed Package Control, got a few of the plug-ins (Sidebar, CodeIntel, Linter, Bracket Match, AdvancedNewFile etc) and I like it *a lot*. The short-cuts for jumping to files (CTRL+P on Windows) is lighting quick and things like CTRL+R for quick jump to definitions is awesome. The instant-preview as well when hovering through files in the jump-to-file is brilliant too. I'm not 100% committed to jumping ship from Netbeans yet, as I want to get my hands used to the shortcuts (and seeing if there's anything missing that I haven't spotted yet), but it's very, very good. 
While that may be a good argument, it still has nothing to do with what I'm asking about.
I've been running Netbeans through its paces for the last few weeks. Been a long time user of jEdit for my PHP needs. Initially Netbeans was just about unuseable, as I was able to type faster than it could display what I typed. I'm not THAT fast a typist. Then I went through and turned off all the auto complete stuff that was popping up all the time. For a huge increase in speed disable the "Mark Occurences" feature under the Editor prefs. Most of the stuff I want Netbeans to complete for me I was able to map to key commands. Like telling the auto complete to try to do it's thing ONLY when I type Ctrl-Space. I would always encourage looking at all possible tool options to see what best fits what you're doing. With that being said, before tossing Netbeans into the trash heap you might want to tweak some of the preferences a bit. It might be a faster editor than you think. I've briefly tried out both Sublime and PHPStorm. Though I don't think either is an especially good fit for me, they definitely need to be looked at.
PhpStorm. Used Netbeans for a while after I switched from OS X and Coda to Linux. Haven't looked back. It's amazing. Fast even for an app that uses JVM.
Came into this thread without expecting much. Leaving happy to be wrong! Will definitely be checking this out as soon as I get home
I was using eclipse until it stopped working. It was causing me more problems than solutions. I switched to netbeans and worked fine until recently that it force closes sometimes and other dont want to start ( some bug at loading modules... ) i think it has something to do with chrome since it usually at the same time chrome also fails.... now im trying sublime since my coworker convince me, im missing some features but i think i should swimm deeper i to the plugins
So... Google Voice?
The advice I give every time this comes up. Most often people contribute to open-source to fix something they want fixed.
+1. I especially like proper search, in comparison to Eclipse anyway. And incremental expression selection with ctrl+w. You'd have to use it for yourself to see how useful it is. 
I guess my problem is that too much interests me! Sorry if the question annoyed you but I more so wanted to find out what would be useful to contribute to for other people rather that what interests me. 
This comment is probably the best one (after Phils ofc) I wouldn't have thought of contributing to something I use every day and would more be inclined to contribute towards something new. But you're right, something I use everyday would definitely increase the motivation to contribute to. 
Guess I didn't really notice. I tried Netbeans after using Aptana for a while, and it didn't really take.
hey please send me the link, this is probably the most interesting project I've heard of. 
Actually it is to force communication. When you have a new dev project, usually everything works fine, people communicate and it gets deployed without problems. Then come change requests, maintenance, etc. It is the moment when someone at the frontend thinks: "I know a bit of PHP I'll do this myself!". Aaaaand you're screwed. No matter how many time I tell them "Come see me, we'll figure together what to do" they don't. With the templating language, I get them to see me because the logic behind the view is handle by the templating engine and they don't want to touch that.
I'm looking to contribute to something that would help the entire PHP community, but at the same time I'm looking for something that will change (at least temporarily) how I think about PHP. My skillset is as follows: 5 years of PHP, 1 year of CodeIgniter, 2 years of working for a web development company, Linux experience etc. etc. I wouldn't consider myself an "expert" at PHP, but I've yet to hit a problem I can't solve. I love challenges so anything thats a challenge is going to interest me. Other skills I don't count as real skills: html, css, bash
I hope so, I don't have many issues since my work station is built. Although, I do notice delays when I'm working on UI (juggling Netbeans, Photoshop, Illustrator, Chrome)
PHP Frameworks are... meh.. I dunno, there seems to be a new one popping up every day and I don't feel inclined to contribute to any of them. (except maybe codeignitor) 
Java is not slow. Java can be incredibly fast. It's had, what, 15 years of optimisation built into it. Some programs in Java are slow.
It's the end of my work day so everything annoys me ;). Seriously though the drupal community is awesome. 
it is but seems to do a quicker job at autocomplete than netbeans
If you'd like something specific to cake, it's actually incredibly simple: Follow all 5 of the tutorials listed [here](http://book.cakephp.org/2.0/en/tutorials-and-examples.html), in order. Whatever you do, don't follow a tutorial telling you to use simple `mysql_query()` calls and has little to no mention of security. First, you want to know how to use mysqli or PDO, for an updated method of connecting to MySQL with PHP. Secondly, you want to know how to design database tables, and learn at least some about what normalization means. Then you'll want to learn about ACL, and the different schemes and guises it falls into. Just keep on reading until you have a decent idea. Lastly, by now you'll probably already have a decent idea on how to design and code one.
If you're a programmer on a linux platform, learn VIM. I know you said "I want an _actual IDE_" but VIM is easily the most full featured piece of software i've ever used in my life. Learn to love it! It can support whatever feature is to you what makes an IDE. I personally loath code completion, but it can support that quite easily! The fact that you put emacs and VI on the same line as nano and pico just demonstrates you don't yet grok the power that is VI
You're probably right with the price of RAM these days. When I come anywhere close to maxing out 8gigs even once, I'll buy an extra 8gb.
Saw the source control, downloading the trial. That's what I currently love about NetBeans is the mercurial support.
This. * 1 million, yes vim is hard and it doesn't seem that useful at first, but once you get over the initial curve you'll find yourself never wanting to use anything else.
Another strong supporter of PhpStorm here. I've moved from IDE to IDE (Eclipse -&gt; Aptana -&gt; Eclipse -&gt; Netbeans for 1 week -&gt; Eclipse -&gt; PhpStorm). But now I've been with PhpStorm for over a year and don't plan to change anytime soon.
There are at least 5 or 6 which are well established and are going to be around a long time. If you opt to help a newer one, though, you'll have much more of a chance to write new and exciting code that really makes an impact. So it's a bit of a trade off. All of the established ones have a bug tracker that's just yearning for your attention!
Php storm is awesome. Gettttttttit.
Sublime is pretty for editing text but it's still missing a lot of things including a nice debugger. Phpstorm's debugger is pretty awesome and fast.
and VIM mode!
If you want a real IDE SublimeText will probably not be what you are looking for. If you are used to Netbeans you should definitely try PHPStorm. Very similar but faster and more capable.
Any chance of links to these 5-6 established new ones? Sorry to be a pain in the ass! :P
You're the only person I haven't replied to yet and I just wanted to let you know I'm not ignoring your suggestion at all, in fact I think it's taking so long to get back to as I'd like to contribute to this.. and that's unusual cause I'm pretty anti all these thousands of CMS's.. I haven't had a lot of time to go through your CMS's features yet but from what I've skimmed I've liked!
Not new, well established. Yii, CakePHP, Symfony, CodeIgniter, Zend Framework, Laravel, FuelPHP
Check out [http://codeception.com/](codeception). Simplifies a lot of the interactions with Selenium server. If you have a spare linux box, set up selenium server with xvfb (have a look for a tutorial on google if you need) and you can automate the entire thing quite easily. I've integrated the above with Bamboo (Atlassian's CI suite)
You should be able to limit the amount of RAM that netbeans uses. The best linux IDEs are in java. Them's the breaks. I hit a wall on my machine also, Firefox + netbeans + VM running Win 7 can sometimes be painful. Most of the time I'm OK if I clear my FF session (and drop it's memory back to ~250 vs 1.X Gigs
Should also mention - codeception is compatible with a bunch of other test tools so you dont have to solely rely on selenium :)
I would've laid that difference on Sublime as well, but I think the comment would just attract a shitload of downvotes for no good reason.
[Contribute](http://www.reddit.com/r/PHP/comments/l5hmq/interested_in_contributing_to_the_php_project_but/) to the PHP Documentation.
Have you tried KDevelop? I'm very fond of it and it's lighter counterpart, Kate. (When looking at Kate, be sure to check the plugins area of its preferences)
This is apparently a Sun JRE/JDK bug under gnome - reportedly using the free java fixes the problem.
That sounds more like it, 2-3 times a day I could live with, but I'm an OCD Ctrl-S hitter.
@hellier: Just do this. From what it sounds like, it's a user so presumably they have login to your site. Setup a timezone option on the user profile as a way to see your site in the timezone of their choosing.
Coda 2 for OSX and PhpStorm when I need a debugger.
There's a nifty GVoice API that you can use to send and receive SMSs; I've used it to cobble together a ~5 line monitoring system.
cause they never promised any before, right? :)
upvoted others, and will also throw in my hat with phpstorm. it's java, but... it's not eclipse-based, nor netbeans based. these guys put a lot of work in to optimizing their jvm-based editors, and they've got a ton - intellij, pycharm, rubymine, phpstorm, webstorm and more. they've got a lot of commercial incentive to make their products as fast as possible, and it shows. so again, yes... it's java, but commercial java from a company that gets it, vs eclipse. Eclipse has its place, but the jetbrains team may rock your php world - give it a shot.
Join us in #phpc on Freenode.
I'm using Netbeans now and I do like it a lot, but it does piss me off that it's so memory intensive. At times it begins to eat up so much memory that it slows to a crawl and I need to restart it, but I'm otherwise happt with it. Before Netbeans I used to use Komodo, it's an excellent IDE and I highly recommend it. I'm not sure if there is a Lunix version but it runs on Mac and Windows so it's possible they support Lunix too. I can't remember why I switched to Netbeans though, but it was a pretty good reason. There was another one I used to use way back in the dark days when I was a Lunix user. It was a QT+ based app but I can't for the life of me remember what it was called. I think the name of it started with Q.
There is also a free version called Komodo Edit which isn't as fully featured, but still great. When I used to use Komodo I think the only reason I used Komodo over Komodo Edit was SVN support.
+1 for both KDevelop and Kate.
If you have any questions about how to do something, feel free to IM me via [your favorite client](http://www.charlesstover.com/contact/). Fair warning, usually "some applications you'd like to work on" when you are first learning are language are far out of your actual scope. Generally. Not always. But people start learning server-side languages for large projects, like anything that requires a database for example. It may be a while before you can start _safely_ (bug and exploit free) producing those.
I tried it but the trial is only 30 days and I could not justify 112€ on a one-year-only-upgrade license. Seems ok though.
Exactly. Having a designer who can only do twig templates is an idiotic idea and as much use as an ashtray on a motorbike.
We use the [facebook-php-webdriver](https://github.com/facebook/php-webdriver) this maps to the [JsonWireProtocol](http://code.google.com/p/selenium/wiki/JsonWireProtocol) I learned by just reading the wire protocol, some of our ajax pages took a little while to figure out how to poll for various DOM elements. But 2 minutes of google foo sorted that out. &gt; The hard way by the documentation I didn't find it remotely hard. They've made it super simple. Read the [how to](https://github.com/facebook/php-webdriver#getting-started), it's like, three commands to get it running. I love how simple they have made it! I use the [css selector](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element) 90% of the time, and the [anchor contents](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element) selector the other 10%. Firefox will do :last-of-type (so to get the total row of a balance sheet - "table.balance-sheet tr:last-of-type td.total" is super easy) Also, don't be afraid of adding classes and IDs into your web app to make the css selectors easier to write. My only real problem is trying to add some meta data to the HTML IDs and Classes to note that they are used for jQuery, css and selenium or some mixture of all three. I'm always worried that some other dev is going to remove an 'unused' ID which is actually used in a selenium test :/ not sure how to comment the HTML without making it a mess.
The freenode irc server has a lot of great channels where you will find willing and friendly people to bounce ideas off of.
Sounds interesting, I'd be interested to have a link as well, love that kind of stuff.
Using the free java also slows it down a whole load.
Portable Data Objects. Repeat after me: Portable Data Objects. Portable Data Objects. Portable Data Objects. Well done. Named placeholders.. what, you mean prepared statements? Also, you have not even bothered to touch some of the nice things like late instantiation etc. tl;dr please don't spam /r/php with mediocre articles that paraphrase php.net's docs and are in some places just wrong.
Here is a good starting place: http://th.php.net/manual/en/book.imap.php 
[Symfony](http://symfony.com/) by very far
Re-read what I said, I said a designer should never touch code... twig included.
Twig provides template inheritance while vanilla PHP does not.
Well I don't know how much my projects outside my office work is "professional" as for the most part it doesn't generate any money. Also, for me to pay 112€ it needs to bring a lot more than what say, Netbeans &amp; Notepad++, do. And, above all, it's one year upgrade only.
http://netbeans.org/community/releases/72/ Performance Project scanning now on background, not blocking editor features and navigation Improved project scanning speed Improved performance on remote Filesystems PHP Support for PHP 5.4 PHP editing: Fix Uses action, annotations support, editing of Neon and Apache Config files and more Support for Symfony2, Doctrine2 and ApiGen frameworks FTP remote synchronization Support for running PHP projects on Hudson sounds great but I had problems using Netbans BETAs so I will just wait for release
url_for requires a global function to be introduced, which is why it was likely removed. Rails doesn't have this issue since its helpers are local mixins. Instead of the global function url_for, it could be bound to a variable as an anonymous function $url_for (This could clash with view variables). It could also be accessible through a class instance $this-&gt;url_for() -- now look how much more verbose it got. I prefer just using Twig.
Keep an an eye on nebeans 7.2. I have downloaded the [beta release](http://dlc.sun.com.edgesuite.net/netbeans/7.2/beta/) and seen huge improvement over 7.1. It does not stuck during startup as indexing is done at background. I have loaded Symfony2 project with over 4000 files and auto-complete doesn't lag that much. It even pops up a dialog when completion takes more than 2 second saying to review and submit log about it. Also checkout its new [features](http://wiki.netbeans.org/NetBeans_72_NewAndNoteworthy#PHP).
This is actually the one I've been looking into the most, do you have any reasons as to why it's better than most other frameworks?
Thanks! I posted the code that I think might work. I'm new to PHP so I don't know if it's correct. Feedback is more than welcome.
Awesome, I've updated the gist with those and also a readme with some examples :)
Yeah, it's been my experience also that OpenJDK causes more problems than it solves.
Yay! Let me know if you want help/inspiration when configuring it. It wouldn't be nearly as useful without my .vimrc 
You can always try the ATOM feed: https://mail.google.com/mail/feed/atom/unread/
Thanks for your reply. If I do go with Atom, I'd most likely use [this](http://www.phpbuilder.com/columns/ian_gilfillan20060103.php3) guide. However, it's getting late, so I'll attempt this in the morning if I can. It just seems like the method I posted in the comments would work too... I'd need to give my code a try first, though.
Awesome, nice tip on the incremental selection
I've been using Komodo Edit for a couple years now. My boss wants to buy me the full version, but at 200+ dollars I'm not sure it's worth it... Also, edit has some weird glitches. When I have a remote location open and hit save, often it freezes up and never unfreezes. Does it on my 'buntu and on a Mac (one of the big ones too, 16GB RAM, 30 inch screen, etc) Other than that, not too bad. I'm considering looking into VIM, but I like my mouse... Right now I use a combination of SublimeText2 and Komodo Edit. (Also, still on 6, On 11.x Ubuntu, the current version of 7 is missing "styles" as in icons on the top bar, and file and folder icons in the sidebar. No idea why)
Please keep updating this, I think this is a very interesting post and I'd love to see your final product.
A mentor would be nice, but I would suggest not relying on one teacher, unless that teacher is a known "master". I would use all resources that the internet offers... The internet will be your mentor now, just as it was mine.
It pops up once after the first 5 saves and again after every ~100 saves if I'm not mistaken. But seriously: $60 for a piece of software I use every day? That's a deal.
Absolutely! I'd love a copy of it. And thanks. I've not had time to play around with it yet, but it's loaded up in a tab and I'm going to install it soon.
Just a small suggestion to make this a bit more elegant. Change: function checkMail($domain, $username, $password) { if ($domain = NULL) { //if domain is not user-specified... $domain = "{gmail.com:993 /ssl /readonly} [INBOX]"; //default to SSL gmail, read-only as a safeguard } else { //if user specifies a domain... $domain = "{$domain:933 /ssl /readonly} [INBOX]"; //force SSL to user-specified domain read-only as a safeguard } to this: function checkMail($domain="gmail.com", $username, $password) { $domain = "{$domain:933 /ssl /readonly} [INBOX]"; //force SSL to user-specified domain read-only as a safeguard Also, in your code fragment the condition should really be is_null($domain). You could also do $domain === NULL, but you're doing an assignment. ($domain = NULL), which will wipe whatever the user passed in and then evaluate to false, ($domain = NULL evaluates to NULL which is FALSE). It'll then throw a warning/notice when you try to use the null variable in a string concatenation in the else block.
And what a curve it is. The whole time you'll be cursing.. and then all of a sudden you'll find that you want to delete a few lines of text.. and you'll know exactly what to do. And then you'll start with the glorious plugins!
Gosh, I wish people would stop posting links to their shitty blog posts already. &gt;tl;dr please don't spam /r/php with mediocre articles that paraphrase php.net's docs and are in some places just wrong. Agreed. This happens way too often. 
WordPress is a disaster of a code to read, but it would be more beneficial to you to use it for your project. It is a common requirement from employers who hire web developers to mod WordPress as opposed to inventing their own CMS any time they want something changed and losing all of their content. That is, it's cheaper for employers to hire someone to extend WordPress than do custom CMS work. If it's for a personal project solely, creating a CMS would offer the most extensibility for you. It may be a good long-run result, but I'd still recommend start with and learning a bit about WordPress just for the experience.
- /index.php - /classes - /routes - /views - /css - /js - /images - /.htaccess Classes are all organized in PSR-0 format within the /classes folder. The htaccess redirects all requests for files that don't exist (excluding the contents of /classes, /views and /routes) to index.php, which first imports my autoloader and then initializes my routing engine. All incoming urls are parsed and their respective route file is executed, which either acts as the controller or (in the case of APIs) loads a controller class.
Ohyoubetcha! :) Hope it rocks for you. I've had some mixed results on my CodeIgniter apps (just won't recognize certain breakpoints in a few custom libs), but for Wordpress, Joomla, Magento, this one custom framework I work on... it's picked up all the right entry points, and has been fairly painless. Getting xdebug configured correctly, and then adding the proper bookmarklets to my browser - that took longer than figuring out phpStorm. I think I spent about 2 hours before I finally nailed all the parts.
The regex: \^[a-zA-Z](\w+){5,23}$ Should suit your needs, unless I missed something, which does happen. Edit: initial carat didn't come through.
public/ --css/ --images/ --js/ system/ --config.php --lib/ ----lib-1/ ----lib-2/ --views/ --controllers/ --models/ --tests/ --helpers/ index.php .htaccess
I would change the regular expression to #\^[a-z][a-zA-Z0-9]{5,23}$# The ^ character says that the regular expression matching must start at the beginning, and the $ makes it match all the way to the end. The {1} you have in your original is not necessary since it is assumed a pattern is only repeated once if you're not using special characters after it. The correct syntax for matching a pattern between x and y times is {x,y}. 
\w will match underscores as well
I'll add that the first character match should include A-Z to make it case insensitive
You are correct in that Twig's templating functionality is actually provided as a [Symfony component](http://api.symfony.com/2.0/Symfony/Component/Templating/PhpEngine.html), so you could theoretically create purely PHP templates that are still extensible. I wouldn't call this "vanilla PHP", though, as your code now depends on a chunk of Symfony. Once you've decided you want to use inheritance in your templates, why not then go ahead and adopt a syntax like Twig which is specifically designed to work with extensible templates? It seems that using tailored Twig keywords to define blocks is a lot more comfortable than opening arbitrary blocks of PHP and calling specific Symfony methods to mark their beginnings and ends.
ah thanks good catch
Is there a way to find these channels or is it just something you stumble upon? I only know #php, #web and #javascript. Also, why is #php locked? How do you get invites to that room? I never was an IRC guy but I hear there are some really great rooms for web dev.
Ah, gotcha... but the original question I posed was Twig vs. the PHP view layer within the context of Symfony2, not Twig vs. Vanilla PHP.
Excellent point. [a-zA-z0-9] is better there, then.
Debugging support is what separates the noobs from the pros. Automated testing, design patterns, and years of experience separate the pros from the experts.
/links/ for CSS /scripts/ for JS and some PHP /classes/ for OOP /functions/ for include-able, extensible functions /includes/ for code snippets that are included across multiple pages /images/ for images etc.
[Link to PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md)
Me too. Really great idea. Conditionals for viewing and updating a database, and, of course the wonderful on error resume Used that one a lot ;)
Cool beans. [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) looks like the way to go then. Thank you!
I get you name your files this way so you when you have two or 3 tabs open with &lt;APPLICATION_NAME&gt;.php you know which one is which. however that really feels like an IDE or editor's problem to solve. Sublime text for example if it sees two files of the same name open, will display the different folder of each file, so you know which one you are editing at a quick glance. other IDE's do this as well.
Very clean, thank you for sharing!
CakePHP !!
Somehow many pdf libraries for php manage to do this - those are 100kb php files ~_~ edit: after re-reading I've noticed that 100kb was a too low estimate.. I looked at the mpdf.php and it is 1.1mb ;)
- /m (models) - /v (views) - /c (controllers) - /lib (php libraries) - /js (javascript) - /js/vendor/ (thirty party javascript libraries) - /css (stylesheets) - /img (images) - /conf (configuration files) - /index.php - /router.php For most of my applications, that's it. If I'm hosting from my VPS, I'll move the PHP related folders up to ../application, but a lot of my clients use shared hosts, where that's often not an option, in which case I use .htaccess to restrict direct access to those folders.
I do. As a PHP dev working with classes and inheritance, it's a real mind-fuck to have to radically switch contexts when going from PHP files to HTML. One second I'm thinking about functions and classes, loops and conditionals, the next I have to throw all of that away to edit this basic markup file, with perhaps some PHP echo statements. Templating languages allow me to think about markup files abstractly, as I do with my PHP files. Twig helps to ease the pain of that context switch, in addition to all the other benefits it provides.
Wow, you're right. This thread really got hijacked. I would say, if you're the only dev working on the project, or it's only backend devs, and you all feel more comfortable with Symfony2 PHP templates, go for it. 
Can you be more specific?
Personally, I like the least amount of characters contests. It challenges you to think of a totally different approach to solve a problem than you usually do. I think that choosing a winner based on upvotes isn't really a good idea: that way people who submit their post early have a much higher chance of winning than those who post a solution later, even if that solution is much better. Requiring an entrance fee can be nice for some contests, but don't do it for every contest, and make the fee pretty low. Perhaps you could also allow people to enter such contest for free, and if the best solution is from someone who entered without fee only give him (or her) a small part of the prize, and give the rest to the best "paid" solution. That way everyone can still join, even if they can't or won't pay the fee. 
god point on the late entries with teh voting method. We coudl always have everyone send me the links and i can post them at the end, so everyone has a fair chance, but that owudl require everyone to look at a lot of code, probably not feasible 
I remember the first time I ever started looking at address bars and I would see something like index.php?page=x or index.php?page=y A little bit later, I started messing around with PHP and before ever hearing about include/require, I would always assume that the entire content was situated in the same file, under If statements. So, I tried to write a "portal" which makes spaghetti code look beautiful in comparison.
I think that's a good idea! When there are many submits you could perhaps suggest a few elegant solutions, such that people who don't like to read much code can choose to only read those.
I was just about to say the same thing. Sure, you can use .htaccess to exclude it, but it still just seems like a bad idea and not the right way to do things. I used to do that, but I'm since started moving all of my classes, functions, and other components to a folder outside of the public HTML path.
What about templates (the actual HTML pages)?
/lib/ - kernel, config, classes /maint/ - cron, gearman, maintenance cli scripts /dev/ - scripts and config files for dev environment /templates/ - template files for different themes and web/email etc /views/ - PHP scripts and site folder structure /webroot/ - Web accessible files mostly just css, images, js, etc and an single index.php that gets called for all URLs I love having things one level up that are not web accessible so it's never available to the world in the event that someone screws up webserver configs and allows it.
A view will just be chunks of html with no context or information, and a class file called by apache will result in a blank page. Considering that 1) the htaccess would have to break and 2) the requester would have to know the filenames, I don't see where a risk comes in.
Frameworks are not required for all projects. If you can code an app in a single file, then by all means make it happen. However, it becomes impractical to do so once the project size gets larger. Frameworks are great because they force you to be a better programmer by semantics and file organization. It also helps you separate your program logic, database logic and presentation. My suggestion is pick a single framework and master it. I made the mistake of not doing this and wasting a lot of time floating about frameworks and not getting anywhere. My recommendation is Symfony 2 or Laravel is another good one. Good luck! :-)
The problem with most project folder structures I've found is that they're too short-sighted. They're focused on the single-app use case which doesn't scale well as the codebase grows. So I break it down like this: conf - global configuration settings go here apps app1 conf - app-specific configurations handlers - aka controllers lib - helper libraries models - models go here views - views go here app2 conf handlers lib models views lib - core framework libraries vendor - 3rd party libraries This allows you to group your models, views, controllers, etc. into discreet apps that can easily be shared, but also helps avoid having a giant folder with dozens of views or models as your site grows. It helps me at least to think of a site as a collection of apps, instead of one big one.
I tried Symfony 2 but it was a pain to get set up. I set up a Turnkey VM with Smyfony on it but [following](http://www.ens.ro/2012/03/22/symfony2-jobeet-day-1-starting-up-the-project/) this tutorial I hit a road block once I got to the console commands.
Is that a public or custom framework?
I structure mine similarly (kind of how I manage my python code too). One thing I do that many in the MVC world don't like is that most of my controllers use a intermediary library to communicate with my models. Not sure where I picked it up or if it is a good habit at all, just how my thinking tends to go. 
Custom code.
Root directory. Generally, if two pages share a template, I just put them in the same PHP file. If a page gets its own template, might as well put the template in the PHP file anyway.
Coda 2 is just at the first release mark. I'd recommend it - you just might have to wait a short time for them to work out the first round of bugs. Are you on Snow Leopard? Coda 2 seems to be more stable on Lion. If you buy Coda 2 from the Mac App store, you can set it to use iCloud to sync your sites between computers. I'm not aware of any other editors that let you do that.
Thanks for the link!
I'd suggest regular mundane tasks but with restrictions. Some examples: add two numbers without using the + symbol, traverse a tree structure without recursion, etc.
Have you actually tested this? I'm gonna assume no. It's likely including multiple files is slower due to hard drive seek/access times unless there's some in-memory caching going on by PHP/the server.
Wow. That's some beautiful code. I've tested it and it isn't coming back—but I know that's an error on my part. Include references will be better once I have my hosting set up this afternoon (in maybe about 5 hours?) then I'll have to wait for the DNS to update. Since it seems like the code that you posted is what you use, I trust that it works. Let me get back to this thread when I get to actually test it out.
That's pretty much the usual, provided you're not using a framework that pretty much already do it for you. The only change I would make is the location of your CSS, JS and image files. /assets /js /i style.css Now, you don't have to do any "../" if you reference any images in your stylesheets. 
Yes you make a header and a footer and then you include/require them.
lol take a look at [his site](http://users.phpexperts.pro/) too. For 14 years experience, you haven't learned a lot, phpexperts_pro.
Why not use an existing php packaging system instead of a new one? http://getcomposer.org/
thx. yeah. I pulled that out of a live function (allows users to email in photos which are processed and added to their profiles) and popped it into a standalone php file to test it before I posted... so I know it works as long as the server is setup right. if it still doesn't work for you try turning on error_reporting(E_ALL); and you may be able to get some useful info.
* public * controllers * models * views * sql * lib * uploads * cache * config Depends on the project I'm doing. Sometimes, folders are unnecessary, like cache if no file-based caching or sql if no database. Structure inside the lib and models folder are based on namespaces as directories. 
Agreed, CI is definitely a better starter framework. Have heard good things about Laravel as well, but haven't tried it out.
My projects usually have a structure similar to this: / (root folder) - includes/ - Things that aren't content (classes, libraries) go here - static/ - Javascripts and stylesheets go here - templates/ - Templates (Twig is best :3) go here - cache/ - Derp. It's a cache. JSON files, mostly. Anything that provides content (logins or pages) goes here. It's a horrible, horrible method, but it works.
Stay away from regex/LOC contests. make things fun by challenging people to solve bigger problems better than the way they are currently solved (maybe in teams)? Examples of that: - Calculate X in a shorter time period than the current world record? - Make a better reddit search - Create a DB layer class that can execute CRUD commands faster than anyone else? etc.
Jeffery Way on nettuts does a CI from scratch tutorial that is [pretty good](http://net.tutsplus.com/articles/news/codeigniter-from-scratch-day-1/). I am making an app in CI right now and I found that helpful. 
&gt; MVVM will be the "thing" in a few years time. I agree. With the adoption of HTML 5 and rich UI's, MVVM is a better tool. 
I remember seeing that but I didn't know if was up to date. I found one on phpacademy that I'm going through. I'll check there's out once I get through this intro guide.
Lion. I've been hitting the code hard lately and Coda 2 has held strong. 
The only thing that I have seen that is not up to date on nettuts is when is adding CI to classes. There is tutsplus too that has a lot of great tuts. Its $20 a month for a membership but its well worth it. I have found that you tend to pay attention more when you are paying for it. But don't take my word for it. Happy cakeday.
I’m having trouble connecting to my Virtual Machine via SSH. I’m getting a Network Timeout, any ideas on where this could have gone wrong, I’m using the 12.04 Server Edition
Cool, I'll check this out later.
[This too](http://thinkvitamin.com/category/code/php/)
I created the [one-file php framework](https://github.com/thorie7912/One-File-PHP-Framework)
I used Komodo Edit for several years. It's multi-platform (so you don't have to change if you move computers), has good support for a variety of languages, and is reasonably well updated. Then, I turned on vi keybindings. Oh boy, was that painful. But in a few weeks I was more productive than previously. Eventually I moved all the way to vim and haven't looked back. It's everywhere, it's incredibly extensible, *everything* has syntax definitions for it, you can use it while SSHed in to a remote machine, etc. Also, it's free, and always will be. Any piece of software older than me that's still in active use deserves a look, imo. Now, you probably don't want to start there (I certainly didn't!). But you might want to keep vim in mind as a possible end and choose an editor that has vi emulation in some form.
I remember programming virtual battlebots in pascal way back in the day. Would be great if we made a turn based battlebot arena, where each coder use an API to battle it out. Of course with ajax, flash, or other asynchronous graphical representation of the bot.
I could I guess, but I dont want to just use wordpress. I am trying to learn PHP, and this project is one I want to do since I already have a html site. I am willing to go through the work to learn this as I want to do more php. 
Thanks for the heads up. Ill give it a whirl. Wordpress might work, but Im just trying to learn and this is a fairly straightforward project that I know will take some time but will benefit a site that is already existing that i have that I can keep better track of and learn php as well.
And remove all unnecessary whitespace. ...For speed!
Would you expect anyone bearing a name like that to actually be an expert and professional? I sure wouldn't! It sounds like a name that a 12-year old would pick. The code kind of reflects that too.
developing a game in 24h? the one to get the best game done first wins? XD it could be a remake of some old nintendo game!
Try connecting with `ssh -vvv &lt;servername&gt;` and that'll give you as much information as you need!
Although I like the idea of coding a game in 24 hrs, I feel as though that would be an easy competition to cheat at (have most everything finished/have basic ai already coded). 
You have the form action to "input". For a form to work you need to have something handling the form. For this you need a script (php) to receive the POST data from your form. There are several easy to find tutorials for this. Also, you should practice on a local server, not online. Look up XAMPP, it is easy for beginners. 
Then you can pick the game. Make it weird and unusual. You will have that type of thing regardless of contest type. A part of being a good developer is to also program for the future. OOP BABY! 
You're getting a 404 because there's no such file as 'input'. You should probably start reading some tutorials/books to get the basics down. :)
I basicly have an asset folder with subfolders for js php scripts header/footer files and so on like include(asset/js/scriptname.js)
Well... look at that... http://www.reddit.com/r/programming/comments/udxkj/xpost_from_php_10_reasons_to_use_php/ - this is ugly -.-
Building modules for PyroCMS is a great way to help improve the eco-system around the product, but anyone can help out with the core: https://github.com/pyrocms/pyrocms/issues Getting those pull requests reviewed and tested, issues checked and turned into fixes, etc all help out a lot. In fact most of the PyroCMS team are ex-community contributors who were promoted through the ranks who ended up in paid positions. Some of them have shares now :)
Good, that is a decent reason to get involved. I just know a lot of folks who offer to help fix issues because they feel they should, rather than having any real motivation. If you're looking to improve as a coder any of those projects will help you, as we handle all pull requests with feedback, style suggestions, optimisations, etc and the community get involved with feedback too. I think of it as crowd-sourcing your learning experience :D
Are you working on the same project I am? No, seriously - I've been tasked with maintaining an online shop where the whole frontend is in one file. Want more fun stuff? There are no functions in it. It's all based on a SHIT-TONE of IFs and CASEs
I saw an interesting code golf the other day, where the requirement was least number of *unique* characters. So `$a='aaa';` would be 5 characters. That would let people get pretty creative with variable names and functions.
At a recent job, there was a guy who did stuff like this. I was doing other stuff and didn't get into PHP there so I didn't have to deal with his stuff but his team members were thoroughly disgusted when he left and they had to support what he had worked on. He was a vi enthusiast explained to people that through "clever use of the tool" they would be able to navigate the massive file. The guy who inherited the code was almost in tears as he struggled to understand it. The original dev would get mad and yell at him any time he turned on line number display or even mentioned line numbers and instead insisted that people should understand the "feel" of the code. 
There are a lot of examples in other replies but little explanation. /myproject root project folder /raw working files such as uncompressed images and documentation. this will be subdivided with folders for each major release. /some.domain.com this folder will be published to the server. /public this folder is publicly available. /js javascript files /css /images /protected stuff in this folder can only be accessed via the index script /components business logic, framework overrides and helpers this folder is often subdivided. /config /controllers /data script(s) to recreate the DB table structure and lookup data. /models model data and data access. /views index.php all access to protected is from here. 
i used to mod over at codewalkers.com, which was the "go to" place for php contests before the website was sold and became littered with advertisements. some of the old contest code is still [archived](http://www.codewalkers.com/c/b/Contest-Code/). they also appear to still have active forums on [older contests](http://forums.codewalkers.com/older-contests-88/) and [current](http://forums.codewalkers.com/current-contest-87/), which could give you some more ideas. most of the prizes codewalkers gave out were books, which i believe were from publishers sponsoring the site.
I believe the i at the end is to ignore the case.
&gt; I read an article not too long ago about a developer who was amazing at designing all the dependencies for an application. Do you have a link to this?
It's not locked, just open only to registered users.
Using wordpress wouldn't really be a very efficient or effective way of learning PHP well.
I use XAMPP for Mac, I prefer it more than what comes with OSX or trying to use all of those build tools for OSX to get it up and going. What I do for development is add vhosts for different domains, and add .dev domains in the host file, so I could be working on site12354.com for someone, but the local site I work on is site12354.dev. It works fabulously.
The point is not everyone *needs* to learn PHP to put up a basic site, and for some people their site goals are over their heads.
Just save the information in database or cookies for as long as you want.
You can do that with Symfony without too much trouble, there's nice auth modules and whatnot that can link to other tables/models.
out of curiosity: what are you using / how are you learning Symfony? I'm in the process of learning it and building something with it and while a lot of the documentation is great, some of the holes in it have cost me *tons* of time :-\
 index.php /config /classes /ress/css /ress/js /ress/img /ress/ajax
I was making the same point when the "Open Standards – The Better Way" post was first submitted to reddit. Even though FIG is a self serving entity, they are, at this time, the closet thing the PHP community has to a standards committee, and one way or another we're all going to end up adopting their standards. Not only because the community *needs* a better standards group, but also because most of us are using the frameworks from the committee members. For that reason I fully support the work FIG is doing. I do however still disagree with the "Open Standards" author. I think the best thing FIG can do is remained quasi-closed, and only take suggestions from the community. Having too many people involved tends to slow down progress, and creates Frankenstein standards because everyone wants to get what they feel is important to them. No matter how esoteric their needs might be.
There are various FLOSS you can use to get you started if you want to go down that route.
Why reinvent the wheel? Git the code for reddit and port it to php- if you are able to improve the weighting algorithm you can always share it back!
It should be noted that these are practically Symfony2 coding standards. I think they are really just self serving mainly, sure they'res some good stuff in there but there's also some bad. Also you'll note this is for interoperable code, so if you're not writing a framework/plugin for the millions and have control of your VPS environment then you're pretty much free to ignore some of these guidelines for your own projects. Mixing Allman and K&amp;R brace styles throughout. Ugh! Stick with Allman. Have to use spaces? Ugh! If I have to undo something, that's 4 times as many hits on the backspace key! Tabs for indentation, spaces for alignment is the way to go. Soft line widths of 120 chars? Ugh. If my team has 21,22,23,24" wide screen monitors (very common these days) that's practically half the screen unused. Sometimes it's nice for the line to keep going so it's readable than splitting it up over multiple lines. Again if you're writing a plugin or whatever for Symfony you may as well follow their guide for projects so it's consistent and interoperable, but if you're doing your own project then make your own style guide and cherry pick the good stuff and things that makes sense. 
Everything I've ever written has been on a 13" macbook. If you're thinking of making a switch, go for it! People are incredibly adaptable.
Without extra screens? I want to believe.
I have the 15" with the high-res display and find it's enough to be productive. Not as nice as a desktop, but I spent about a week on-site with a client and found that I was pretty damned productive. I half expected to order an external display to the client's office on my first day, but never felt the need.
Ah. yep I missed that
Along with many other things, Alix already [ported the reddit algorithm](https://github.com/alixaxel/phunction/blob/master/phunction/Math.php#L514) to PHP in his [phunction framework](https://github.com/alixaxel/phunction/blob/master/phunction/Math.php). While you are there, also take a look at some of the string filtering and UTF-8 stuff for the actual comment text. If only he would add comments, then the world would know what wonders lie hidden in there...
I also code with dual 22" displays at work (plus my 15" MBP). When I work on the road I full screen my dev apps (Coda2, Browser, Tower) and go to work. I find I'll even work better this way as I focus on the task at hand with no distractions (jabber, irc, twitter, email). At full screen mode there's *enough* real estate to code on and switching spaces to test isn't as detrimental to productivity (not seeing them both on screen at the same time) as I thought it would be. If anything, I visualize my code better. 
I wrote code on my laptop for about four years until I switched over to the current firm I work for (my previous firm was a very small startup where we all used our own laptops). I had a 17" gateway and honestly, I kind of miss the portability of it.
The best article I have seen on the subject: http://www.evanmiller.org/how-not-to-sort-by-average-rating.html
Wow.. thank you ... I guess I just found out what I'm doing this weekend ;)
In addition to Wilson scores, look into Bayesian ranking.
And now I'm actively developing using .dev domains! You know I'm going to tell others about this simple yet very useful solution, right? I'm using XAMPP too!
Yeah I took a minute to read more about [Edwin Bidwell Wilson](http://en.wikipedia.org/wiki/Wilson_score_interval#Wilson_score_interval) Like I said in another comment, it's not about starting a project but rather learning to be a better programmer.
Currently working on a search for over 300k items (itll be 500k by monday) where the search needs to consider a half dozen factors to narrow down the results. The keyword search alone needs to be able to distinguish randomly formatted skus from keywords, and the priority of how far into the FULLTEXT it finds each keyword and weight those results, sortable by various conditions while still maintaining certain relevance. Some fuckhead before my time at this company just installed a few random plugins, which independently accomplish certain things, yet dont even come close to the filtering needed. I was given 2 weeks (2 weeks ago) and various other tasks. Woke up last night and found 10 emails from the client, asking for more options and well the chest pain is probably acid reflux. I wish i knew the end goal before i started, i was told "make search work" and clean up the template. Turns out, the ex-dev deleted/modified a lot of core files. Sorry im no help, i thought this was a venting thread.
Why not hand code it? Traverse the string and dump the results in a $results string. When it reaches a markdown character (lets say asterisk), build up a $temp string until it reaches a line break (wrap in LI tags - now a list item, maybe put it in an array [for sake of classing first/last or odd/even] and check next line. no asterisk? implode the array wrapped in UL tags) or if you reach another asterisk (wrap in STRONG tags, now bold text), and dump to your $results variable. Do the same thing for open close brackets or parenthesis (like reddit style). I built a cool parser for a marked up string-based framework. It worked so well, i made a ton of money but dont really have the time anymore to give it attention. But i love shit like this, why use someone elses overly complex parser script when you can hand code it in a dozen lines of code.
Check out emergence, it gives you a standard folder structure and completely removes the hassle of file management from web development: http://emr.ge/screenshots
Emergence provides a web-based IDE for PHP &amp; friends built with ACE and ExtJS: http://emr.ge Do fun things like edit your editor in your editor
Another thing: Am i wrong for not caching results given the (up to) 6 possible factors -- one of them being end-user defined keyword(s)? The moral dilemma comes from having to write a few other creative SQL statements to create custom sorting options on the front-end that also have to be created with each page load. It's a magento site, so clearly I'm counting my microseconds. edit: the query mentioned above is being done in [local]/Mage/Catalog/Model/Resource/Product/Collection.php for those who are interested. the latter is a custom module dumped into a sidebar block
Joining data sets from across multiple tables along a key is Mysql's job.
I'm not sure with Zend, but in most frameworks you have a directory which represents the www items (css, js, images), another directory that contains your custom code (typically called an application), and then the core framework libraries. Out of the box they usually come all lumped together in a single folder. But in an ideal installation the core framework is stored outside of the document root, and the app is installed off to the side (either in document root or some folder other than the core library). Then index.php and your various config files and routers are told where to find everything. It's a little convoluted to set up, but on the other hand, when you have to update core, your app(s) remain untouched.
Don't put it in the Zend folder, you should always leave it as it comes for the reasons you mentioned. Create a new library folder called MyLibrary (change the name, obviously) and put it in there, following the same directory structure as Zend. e.g. in MyLibrary/Captcha, with the class renamed to MyLibrary_Captcha_MyCaptcha Then just instruct your users to add your library's "namespace" to the autoloader, by adding this line to their application.ini: autoloaderNamespaces[] = "MyLibrary_"
You might be able to get a better answer in /r/mysql. Give me a minute and I'll see if I can get something though. Also, If you give a sample of the structure it would be helpful. Edit: Here's my attempt. SELECT * FROM products INNER JOIN categories ON products.id = categories.id INNER JOIN vehicles ON products.id = vehicles.id INNER JOIN flat_data ON products.id = flat_data.id INNER JOIN fulltext ON products.id = fulltext.id JOIN years ON vehicles.entity = years.entity JOIN models ON vehicle.entity = models.entity JOIN variation ON vehicles.entity = variation.entity WHERE categories.cat_id = 'category_id' AND years.id = 'year id' AND models.id ='model id' AND variation.id ='variation id' AND flat_data.price &lt; 100 AND flat_data.price &gt; 0 AND fulltext.data LIKE '%keyword%' Edit 2: You might have to adjust the joins and the SELECT.
People always say don't reinvent the wheel, but being self taught, that's how I learn. 
Truth is, im using zend but i think in mysql, so once i get the structure of my query i can convert it with little to no error. Thanks JokersSmile. Now if i can just figure how to make it select just one result if keyword matches the sku column. ( i may just use my existing workaround to pre-query and skip this query if sku is matched, we'll see )
Good programmers always assume someone else will eventually look at their code. That someone else may take over the project completely. That someone else may not have a 24" monitor, or may prefer writing code from the console. I've read more than a few interviews with top engineers, and there's still a lot of vi/emacs guys out there. You may not always have access to a big monitor either. I don't know about you, but when I travel I use a small laptop and tablet, and I do end up having to fix bugs from the road. Even when I'm home my IDE uses a lot of the vertical space for various other windows. So it's not like I get the full 24" inches for pure code. I personally feel it's arrogant to think, "Well, I have a big monitor, so I'm going to write lines of code 300 characters long.. Surely no one else will ever have to work on my code! " Countless times people have written code for personal use, which eventually grew into a robust library or app, and then submitted the work to one of the large frameworks. The submit logs for Zend Framework are filled with stories like that. You want to guess what happened next? The developers had to reformat their code for the framework they were submitting to. Wouldn't it have been easier to use an established standard from the start? Wouldn't it be easier on your team's newest engineering if your team was already using an established standard? And since you brought it up, Symfony2 uses the Pear standard, which predates Symfony2 by about 5 years. Your statement about following the Symfony2 standard reminds me of the kids asking why The Beatles keep copying songs from Glee. Like FIG, they use that standard because *that's the standard*.. The location of the current brace was chosen because PHP devs have already been using that standard for a decade. 
I've not used IF() in MySQL before, but would there be a way to sort it so that the products.sku='keyword' column would be first and if it exists, LIMIT 1? ORDER BY products.sku='keyword', secondary-order LIMIT IF (products.sku = 'keyword', 1, whatever-the-value-for-no-limit-is) I assume the order value would be 1 if the keyword matches (thus putting it at the top and all others at the bottom). And then the limit would be 1 if the keyword matches, and unlimited if it doesn't.
thanks for that link :)
I'm not saying you're right or wrong, but if you're bragging that you have 22-24in wide screen monitors and don't have a capable editor that can "emulate" tabs when you're using spaces you're doing something wrong ;)
For storage have a look at 'Redis' - in particular look at the 'sorted set' data type. Redis is easy and fun and blazingly fast I use predis as the php library for it
Same here!
I try to follow this structure for most of my projects i.e. I'm not using a framework. css js img classes index.php when I'm using a framework, I try to follow their structure and keep css/js/img inside assets folder which is placed at root level.
Reminds me of &gt;**Geeks** stay up all night disassembling the world so that they can put it back together with new features. &gt;They **tinker** and fix things that aren't broken. From [the oatmeal](http://theoatmeal.com/comics/tesla)
Many of those terms in the WHERE clause could be moved to the relevant ON clauses, just to keep the related terms together and aid readability if nothing else. It may also help optimisation, though I can't say for sure.
Well the "fulltext" table only has the storeid, productid, and text column which contains several bits of flattened data like product name/desc/applications .. so in terms of a search, its not like its opening up a table full of redundant info. either way, it wont be used unless a search is done. the rest of the query is where most collections are derived. thanks for the link, ive never used EXPLAIN in a statement, could be very useful today.
ah i think thats the right solution. im excited to try this out!
Yii is great. I've been using it for about a year now. Great code segmentation with their deeply rooted MVC design. I love its heavy use of AR. Everything is super clean. Not only is it clean, it runs really fast and upgrading core is as simple as changing a single symlink and done you are! It has a pretty big community and it's popularity is growing over time. I suggest you invest some time in it and try to get a feel for it. It took me a few weeks to get comfortable with it, but I haven't looked back since.
I haven't seen that one before. That's fucking brilliant. Thank you. 
Pick a framework. Since you said you are not a good php programmer, my advice would either be, go for CodeIgniter or Laravel. **Important: once chosen, stick to it.**
.... right. 
the main problem is "LIKE '%keyword%'" - it can't use an index so it will scan every returned row.
math
Why didn't I think of that?!
Then give them UPDATE rights on the specific tables they need.
See my comment below - phpmyadmin is simply too complex for what I need, no matter how limited the user's functionality.
https://blogs.oracle.com/netbeansphp/entry/formatting_tabs_and_indents
Sorry for the messiness, but I threw in a bunch of echos just so I could figure out why it was breaking.
Comments have no effect on the execution of the code. Something else is going on here.
See if you like [Xataface](http://xataface.com/) . We used it and it works very well.
It's a bit of an opinion - but I wouldn't let anyone who couldn't use phpmyadmin enter raw data into my database.
http://amix.dk/blog/post/19588 has a pretty good explanation, although it's not PHP/MySQL
Well i made it work. It does everything i needed it to. The trick was to use coalesce(): SELECT coalesce( ( SELECT entity_id FROM catalog_product_flat_1 WHERE sku = 'roller' ), p.entity_id) as entity FROM catalog_product_index_eav p JOIN elite_mapping v ON p.entity_id = v.entity_id JOIN catalog_category_product_index c ON p.entity_id = c.product_id JOIN catalog_product_flat_1 f ON p.entity_id = f.entity_id JOIN catalogsearch_fulltext t ON p.entity_id = t.product_id WHERE (f.sku = 'roller') OR ( v.model_id = '37' AND v.year_id = '100' AND c.category_id = '152' AND t.data_index LIKE '%roller%' ) GROUP BY entity (This particular query was built with php conditions, so it doesnt contain all the factors i built in, yet... still gotta inject price, brand, and sub category values into the request string -- tomorrow)
Yeah, I can't seem to get it to load my external library. I created a directory called SpamCaptcher in the library folder of my application. Under SpamCaptcher there is a Captcha directory and Service directory with the appropriate files in there. When I try to instantiate a Zend_Form_Element_Captcha with a service of type SpamCaptcher_Service_SpamCaptcher I get the following exception message: Plugin by name 'SpamCaptcher' was not found in the registry; used paths: Zend_Captcha_: Zend/Captcha/ This leads me to believe that I have not loaded the library correctly. Any thoughts?
I second this. It might be caused by an invisible character either in or after the comment.
Absolutely. Here it is: &lt;?php require_once 'SpamCaptcher/Captcha/SpamCaptcher.php'; class Default_Form_SpamCaptcher extends Zend_Form { public function init() { $accountID = 'YOUR PUBLIC KEY HERE'; $privatekey = 'YOUR PRIVATE KEY HERE'; $args = array ( 'accountID' =&gt; $accountID, 'privateKey' =&gt; $privatekey ); $spamcaptcher = new SpamCaptcher_Captcha_SpamCaptcher($args); $captcha = new Zend_Form_Element_Captcha('captcha', array( 'captcha' =&gt; 'SpamCaptcher', 'captchaOptions' =&gt; array('captcha' =&gt; 'SpamCaptcher', 'service' =&gt; $spamcaptcher), 'ignore' =&gt; true ) ); $this-&gt;addElement($captcha); $this-&gt;addElement('text', 'data', array('label' =&gt; 'Some data')); $this-&gt;addElement('submit', 'submit', array('label' =&gt; 'Submit')); } } ?&gt;
Thanks, try this: $captcha = new Zend_Form_Element_Captcha('captcha', array( 'captcha' =&gt; new SpamCaptcher_Captcha_SpamCaptcher, 'captchaOptions' =&gt; array('captcha' =&gt; 'SpamCaptcher', 'service' =&gt; $spamcaptcher), 'ignore' =&gt; true ) ); (I've never done much with Zend Form CAPTCHAs, but that should work. Let me know if it doesn't!) 
no data export, but here's my table editor. http://lazymofo.wdschools.com/
Hey that did the trick ... and I am pretty embarrassed I didn't try that! Thank you so much! I would like to add your name to the Thank You section of the README file if that is okay with you. I will use your reddit name unless you want me to use a different one. Also, as you can tell I am no Zend developer. If I haven't bothered you too much do you mind if I ask you other questions as I stumble along the way? Again, big thanks!
This is exactly what I thought.
[here](http://imgur.com/iIRHq)'s a screenshot of notepad++ with line endings visible. What's the difference between CR and CRLF?
Didn't someone just ask this yesterday?
This gets posted in every discussion on sorting: [http://evanmiller.org/how-not-to-sort-by-average-rating.html](http://evanmiller.org/how-not-to-sort-by-average-rating.html)
Mildly related story time! I ran into an even weirder version of this a couple years ago. I was getting a segmentation fault (never a good sign in PHP). It turned out that by changing the number of characters in one of my comments, I could (reproducibly) make the segfault either occur or not occur. To verify that I wasn't going insane, I ran this by several different coworkers, who were all as mystified as myself. Best of luck with solving this issue!
You both were correct, thanks! I changed newlines to CRLFs and it fixed it.
I had the same problem, but the other way around. I had to add a comment on its own line to get my code to work. Everything is set up fine in a pretty simple little script, but I had to add a single line that says //For some reason this comment needs to exist for the script to work 
Ouch, that really hurts. Not looking for work, not charging. I'm offering to help. And as far as this 'girls' (I'm actually a dude, but whatever) HTML/CSS skills... Its a wordpress theme, your talking about the wrong person. Thanks for the comment though.
Not a problem, shoot me an email we'll exchange some contact info.