I work for a shop where have major architectural pieces are still on older versions of PHP. We’ve been approached several times about purchasing failed( out of budget ) apps developed on node, serverless etc. Point being, large percentages of internet apps use PHP. Overall quality comes down to developers and attention to detail. Not a specific language. They should be ashamed for their behavior.
Not necessarily. They may be running the old version of php because they don't have a lot of money and some of their apps do need PHP5. In those cases though they're probably more interested in backported security fixes since their app is probably already doing whatever thing it was designed for and won't expand it's scope for the remainder of its life.
sed s/mysql\_/mysqli\_/ /path/* (or something of that nature). You'll probably need to also 'sed s/.../.../' some other deprecated functions and parameter call, but it's a quick bandaid if that is your bloody wound. There are many other deprecated function commands/parameter-adjustments that will be required, but of that is the only deprecated extension to worry about, it's fairly quick and painless, depending ons the consistency of the code structure.
Just make a note of them and smile from the top. Mean has a place but so does lamp and lnmp. If you threw php into a docker container connected to RDS and connected it to codepipeline, AND YOU CAN DEMO IT. I would be asking for your resume.
Stop feeling bad and get back to work
Like majority of the internet. The proof is in the pudding.
Hells Yes! Because you mastered it and accepted its flaws and then work around it.
Very well balanced take. Great read. 
Is Mongo really good for concurrent writes? I limit my usage of Mongo to serving as a glorified cache for data that is (a) poorly structured (b) non-critical and (c) pre-processed in a batch. Almost like a materialized view. We've tried using it in other roles but the cost/benefit just wasn't there; especially after factoring in all the troubleshooting and support overhead.
Nodejs devs hardly have any place mocking PHP 
And not one of them feels complete. 
&gt;PHP sucks, sure. Everything sucks. Nothing is perfect. The goal is to make something suck a little less. PHP has been doing an excellent job of that. And, honestly, I think the mix of people in the broader PHP community make it a more ecumenical (and successful) language than many of the bizarrely opinionated sub-cultures that spring up around other languages and frameworks. 
Not really. Mongodb is just for highly concurrent reads, and you could get the same performance from a SQL database with denormalized data.
Unfortunately no. Look at the last comment on the post. It is by the same user.
FWIW I upvoted you to counter-balance it. Be lets be honest "here" is most subs on reddit.
Did you accomplish the goal of the hackathon? Then %*%**# the people who just talk smack to talk smack. Who cares what language you use if the goal is accomplished. Use binary and tell them to 01001011 01101001 01110011 01110011 00100000 01111001 01101111 01110101 01110010 00100000 01100001 01110011 01110011
As a self taught guy, I've come to realise programmers can be condescending ass hats. There are 100s of ways to skin a cat. Don't let it get to you. 
[https://twitter.com/theFurgas/status/964079985903448064?s=19](Relevant tweet). 
&gt; Not necessarily. I was replying to a comment about enterprise Linux, not commenting on all shops that haven't upgraded to PHP 7.2-latest.
Yeah but running WordPress... Not the greatest argument.
Please don't let the jerks get you down ... it's not about what you use \- it's about HOW you use it, what problems you solve with it and if you enjoy writing it. Even though I like Node.js/React/Redux nowdays, PHP is still where I first got into web apps \- people who hate on PHP \(I find\) have rarely used it beyond a few files on a server.
If it's not the JavaScript developers, it's the Ruby ones. Although I suspect it's probably the same people. They all jumped off the RoR bandwagon when it crashed a few years ago and jumped into the node+mongo one.
Was it a hackathon for 16 year olds ?
I don't think being a "real developer" is defined by using PHP. You seem to have an elitist attitude, which makes you just as annoying as the js guys making fun of OP. Programming languages are just tools. Pick the right tool, use it, and leave the emotions out of it.
&gt;So we've recently began doing code reviews and I find this incredibly distracting and counter-productive. You don't find you learn anything at all from reading others code, and never have anything productive to improve it? &gt; Every dev once in a while submits pull request that at least 2 people have to review. Given that company only has 4 devs this means that everyone have to drop what they were doing and look at the ticket ... why? Let a PR sit for a while - if every PR must be closed ASAP you have an organizational issue. &gt; then test the thing on preview server. Seems like you need tests. An important part of any PR I've done on what I'd call a well managed project requires some consideration for testing - often that's as simple as requiring that some unit tests for any added feature be implemented, or a test that fails before a fix and passes after be added to prevent regressions on bug fixes. This is automatically tied into the PR system so all tests are run against any potential merge and all those tests must pass. &gt;How do you handle... code reviews|pull requests at your organization? Usually they get handled either within the day for small/trivial stuff, but more often they'll sit open a couple days and gather input from relevant people and relevant fixes/optimizations/clean-up/documentation/tests are added.
Hackathons are full of hipsters using the latest hipster stuff. So yeah, probably. No worries though, you're not missing much.
Perl was still a thing way back when I started, but honestly I've never had to touch Perl in my whole career. Lucky I guess?
There are plenty of node frameworks too. You guys are bashing shit that you don't even understand. Nice.
In my opinion people hate on php for no other reason than the fact that other people have told them it's bad. If you look at php nowadays, the community is growing again and there are endless used for it. Just ignore them and you do you.
I disagree. I would just use an ORM with postgres. Super easy to setup, tons of power, and it reflects real world stuff. You still have to model your data with Mongo, and I'm willing to bet you'd be using an ORM/ODM to do so anyway.
PHP 5.5 is WAY past EOL. IMO, it's a good thing that it isn't included anymore.
Were you just in Dallas?
LOL. This is my biggest gripe with JavaScript development. A tiny app can easily be 500mb+ from dependencies. Ridiculous. 
ExpressJS, Hapi.js, Socket.io, Meteor
Of all the hackathons I've been to, they have been accepting and very helpful to newer developers. Seeing this post was quite a surprise to me. I hope that my experience is more common than OP's.
Absolutely. There are so many benefits.
For cost, if you take care of the servers, you can get some older dual cpu 56xx for very cheap, and they not that bad compared to the new ones (especially when you compare 600$ to 12000$ for a new one). As for the ping, it depends on what you need, but CDN take care of the static data, and if you need some dynamic data, just rent some cloud compute here and there, and put your low latency stuff there, while you keep the user data in your main colo. Unless you move allot of data, it's faster then encrypting/decryption stuff. For example, we run about 30 dual X5670 cpu servers in a datacenter, use akamai for CDN to get static data fast everywhere (even cached JSON data for autocomplete and so on) and if we needed some compute, we got some 10 linode servers scattered around the world for like 20$ / month that link back to the main colo. (our app is process intensive/low bandwidth, admin panel type of thing)
&gt; PHP is a flawed language As opposed to javascript, which is flawless.
Just ignore them, i have been participating in hackathons for about a year now, only using PHP and a little bit of python and the arbitrary HTML, CSS, Js. And of the 12 I've participated in I've won 10, but that doesn't matter, hackathons are great events to learn from, so go out there and learn!
[removed]
Also running Facebook... not the best argument. (still my favorite though)
If you look at other languages, you will miss PHP's F5-based development. On the other hand, for a hackathon, I may prefer going with redis instead of a relational db.
Hahaha this is actually hilarious. A PHP programmer feels bad about (admitting to) using PHP in public. Brilliant. Realistically I don't expect you to draw any conclusions from this incident, since that would require some form of cognition on your part. But thanks for this post, I've had a good chuckle.
Ok, this are the comments that make me mad. PHP has flaws. it was really bad before 7 \(ok, 5.6\), but you think python is perfect? do you think java has no issues? do you think nodejs can't be improved? \(fuck, I wrote nodejs and 600\+ modules automatically installed\) do you think goLand, the rising star, has nothing imperfect? Even C and C\+\+ after decades have some flaws so, yes, php has flaws but stop the bashing thinking everything else is better. because maybe many languages are \(ok, they are\) but not by a big margin \(to all of them at least, I'm thinking of you, scala, my love\-hate...\)
Unfortunately, the internet now is just youtube and fb.
Hre in Italy tomorrow will be holyday WOULD BE lol
I can write nodejs, crystal, rust, c#, go, ... And yeah, PHP is in many ways shit. But damn, PHP is still my favorite language.
I'm thinking you're overthinking it. Getting your web-app GDPR compliant isn't that hard, it is more about software implementation details and information flow then how and where your web-app is hosted. For hosting find a cloud-/vps provider that is GDPR compliant, you will find a special contract that will state that you store customer data and that it needs to be protected in terms of GDPR compliance (most of the time it really is just something like logs must be deleted within XX hours, not everyone get access to the database and so on...). You cannot setup Vault, HW-Firewalls and so on just for a small company website having a contact form or something like that - that would be overkill and is not enforced by GDPR. Some things on top of my head to get GDPR compliant: - encrypt sensible data which is stored in any way (very sensible, like payment details - which already should be encrypted) - don't store unnecessary data (if you don't need the data to fulfill your contract with the customer - don't store it) - if you do store unnecessary data (for something like customer-relation things), tell them that you store it for this behalf and make it optional (like newsletter stuff and so on) - **always** give them the option to remove their data (as long as there is no other laws relevant to your business you need to comply to, i.e. traveling or to fulfill a yet unfulfilled contract with the customer) - mention all 3rd party services that store or work with customer data and why it's important for you to do so (in your privacy policy and reference your policy everywhere, where the customer enters personal data) - setup a plan for when the dooms-day comes where your security was breached and data is stolen, you need to notify your customers asap with all steps necessary to protect them from fraud - setup an e-mail account for everything related to things like GDPR compliance - documentation (in case of an investigation) over who will access/process data for what purpose and - so on ... **tl;dr;** - **just store the bare minimum of customer data** to fulfill your contract and comply to other laws related to your business and give them the right to be forgotten - describe **what data will be stored** for which purpose and mention **3rd parties** in your **policies** (which should be referenced to everywhere, where the customer enters his/her personal data) - have **everything documented** very well and a firefighting **plan in case of data breach**
Among how many languages?
Depending on what library you use to connect to your database it differs but it's mostly the same. Execute a query retrieving the value you want. If it does not exist the retrieve function of the library you use should fail and be false so you can check it in an if statement. Have you tried /r/phpHelp ?
I will post something there, thanks.
The entire "PHP IS SHIT LOL" meme movement is made by people who mostly don't know anything about PHP. My daily job is in PHP and we do a lot of consulting so we see a lot of random projects - and things, sadly, most of the time are just horrible and just double down on the entire meme thing. However, using modern tools like Laravel, composer, latest version of PHP - you can clearly make your PHP as good, if not better than RoR/.NET/whatever the python framework is. Laravel is basically .NET, package management is easy, there are a million different testing frameworks etc. And on top of that, PHP is not nearly as slow as Ruby or Python, and you don't have to deal with the entire Microsoft/Windows stack as you do if you're using .NET. Each language has their own quirks - there is no silver bullet - even Haskell which I adore tends to get really ugly when you have to actually deal with real world stuff. I love how code in Ruby looks, think python is amazing, C# is probably the best language out there as MS has been making huge strides with it across the board but I've coded enough to know all of them have their upsides and downsides. I'm simply above the entire "language x is shit" thing because I've seen enough projects to know that 99.99% fault falls into "problem is between chair and computer" category instead of the former one.
No, there is no way. Why would anyone want it, anyway?
I'm creating a form for a project I'm doing for school. I want to see if the user data exist in the database, if not then it will give an error message until they give a valid piece of data.
Just find someone who‘s turning
Every language has its flaws
FYI, an empty result is not a failure.
You should have made fun of them using MongoDB
The fact you have 30 days to implement it is far from the EU's fault... legislation passed in April 2016 and was much discussed before then
Today was the final class and the project is due later this week, but we didn't learn anything about this...
I agree that nobody should be a jerk when it comes to building things. After all, the most important thing is that you *built* something, not *how*. However, I also suggest you take a look at this: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ It's an old article now and several of his criticisms have most likely been patched; but the "roots" are certainly still there.
So did I get it right that you have a project involving a database interaction from a PHP script, but never learned how to query a database from a PHP script?
I know how to query a database from a PHP script, I just can't test is a PHP variable exist in the database
That is true. I meant fail more in the vein of testing for certain data in the database.
This is what I tried doing, it works because the first data in the table is 1234, but when I try another number, it doesn't work. Maybe I have to loop through the column data? If so, how would I do that? $variable = 1234; $test = queryDatabase("SELECT CourseNumber FROM courses"); $row = mysqli_fetch_assoc($test); if ($variable != $row['CourseNumber']) { echo "Class DNE"; } else { echo "Congrats you figured out the problem"; }
At a Hackathon there should be no place for language elitism or for one over\-zealous fan of one language to make someone else feel shitty for their choice of technology. I refer to these nasty people as Language Nazis and they need to be stomped out of communities like the cancer they are. In the words of Winston Churchill "Keep buggering on."
Up the scale to a few months. "Single day" is as useful as "todo app (hyper optimized for smallest LoC)" for assessing professional techniques.
My advice would be to look at what a database is. You're probably confusing it with a permanent variable system. Your select selects all rows in your table. But with your fetch you only retrieve the first row from that result. And since you haven't specified any ordering of the resultset it can be in any order. So of course the first record you retrieve can be different from your "1234" record. You have two options. Check in your select for the row you want by us a where clause on the "CourseNumber" field. That way you force the correct record to be selected. (This is the most efficient one usually) Or you can get all records and retrieve them all until it matches the one you want. (This has some uses but usually isn't scalable.)
&gt; People disqualified themselves by really using MongoDB I wouldn't go that far. MongoDB and its various other NoSQL cousins have their place in the database ecosystem, but as with every new(ish) tech, lots of people jump to it "because it's cool" and use it for things its not designed for and dismiss old, proven tech even when its actually a good/better choice in that project. &gt; BTW: http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/ That's a fairly old article though and there have been a lot of effort to address these things, you can even have [different storage engines or distributions](https://www.percona.com/software/mongo-database/percona-server-for-mongodb). I don't know much about MongoDB and never used it extensively, but since PHP and MySQL get a lot of hate for their old baggage which are no longer true, we shouldn't do just the same for other tech - the same applies there as well. But I do agree that the NodeJS community is still fairly aggressive in their "our stack is the only way to go and nobody else is cool"-attitude, but I experienced similar things with PHP vs. Perl back in the old days when PHP got traction (yes, I'm old ;) and it's unfortunately very religious in tech all the time.
I would suggest to start with a modern framework, my preference goes to Symfony, but Zend Framework and Laravel are good contenders too. Symfony has very simple components, and a very good documentation. Laravel might not be the good choice because it hides lots of its magic behind facades, whereas Symfony allows you more easily to dig into its core (for the story, Lavarel uses a huge part of Symfony hiding it behind its own concepts, that's why my advice goes to Symfony, which doesn't carry this useless extra layer atop). Please, Laravel defenders and Symfony haters, don't argue or downvote this: my point is educational only (and you know that what I said upper is tru) so for any other consideration, go away, don't bother to answer. I recommend those 3 frameworks but no other for two reasons: the first being I don't know all the frameworks out there, and the second being that there's a lot not-so-modern, or weird, or magical frameworks that would confuse you more than help you learn. You may also search for PHP-FIG, which attempts to bring standard APIs within the PHP world, there are pieces of well documented modern APIs that emerge from them, along with reference implementations (most framework uses some of them as of now). Look on packagist too, there are so much nice packages you can learn from, although not all are what we could call modern, still there's lot to learn from them.
Lol, dude relax a little bit, now both JS and PHP has made progress, both are pretty cool now with PHP7/Laravel, JS/Node/ES6+. Don't comment based on anger. As for MongoDB, I can't comment on that but it was created for a reason. In general, THEY ARE TOOLS, nothing more lol. A true developer must know how to adapt.
Just a tip but if you have dynamic input into a query you might want to think about using prepared statements to protect against sql injections.
I think PHP5 had OOP but I never used it. So yeah.
[removed]
Oh snap I completely forgot about that. How do you do dependency management these days? I think I simply copied PHP files into my project folder and included them. Thanks for the recommendations. I'll take a look. 
People who ridicule other's work do that because they are insecure themselves. You should't feel shitty, but you should feel sorry for them. Other than that, it's not even true. And even if it was, they are still acting childish and out of insecurity for themselves. If you were *really* doing something weird, like using prototype js or something, someone should probably talk to and show better alternatives, give examples, help you out. But this ridiculing is just childish and should be ignored, just like in kindergarten.
In almost any programming language the step between not using OO and using OO is a huge leap in logic and your own ability. A lot of OO and classical concepts can be used in differing languages so learning about them should be something you strife to irregardless of wanting to learn "modern" php.
That's good to know. But is there a port of is-odd? I don't think I can do without that, you know. Also, does composer have emojis on the CLI? No tool is complete without emojis in the CLI! 😩😩😩😩 (Thanks. Good to know that there is now a package manager and that there's some stability in the PHP tooling world)
Correct.
I think I have a good grasp on OOP as a Java developer. I'm not really concerned by that but I am more curious about the progress the language itself made, the progress the tooling made, frameworks, development processes that were all garbage since the dark, dark times of PHP 4 and PHP 5.0. 
Please, god, help us all.
Please explain why you think PHP is a flawed language?
&gt;What frameworks are used if you even use frameworks at all? Is this Zen thingy still used? Laravel and Symfony are the biggest PHP frameworks these days. &gt;How do you create modern and interactive websites with PHP? We use mantis for bug tracking at work and this stuff can die in a fire for all I care. I assume the old one script per page way of doing PHP is pretty outdated. This is kind of a broad question. Yes, the "one script per page" pattern has been dead for a long time, and MVC is what replaced it. That being said, an alternate standard for "modern and interactive websites" that's becoming increasingly popular is having a decoupled frontend that interacts with your PHP application via an API, rather than having PHP handle generating your pages. 
Firstly I invite **you** to get your naming right, Javascript's model is a [concurrency model](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop) based on an event loop. I didn't say [parallel model](https://en.wikipedia.org/wiki/Parallel_programming_model), which you don't seem to know about and which is related to concurrency. Secondly, that's a piss poor attempt at discrediting me considering you don't know what asynchronous sockets are and how they can be combined with threads. Someone who knows about them and about concurrency vs parallelism would've understood that I was referring to asynchronous sockets. It's funny you called me a smartass when you're actually going completely out of your way acting like one. 
There's no God in NPM land!
Author fails to show how using per class (constructor based) DI will lead to less dependencies them per method DI. Author also fails to show how per method DI somehow makes it harder to deal with too many dependencies. Dependencies count stays the same. Cost of improving design stays the same, thus per method DI is no worse then per class DI. There is also argument that per method DI makes running method impossible without DI. True. But at the same time Author fails to note that per class DI also result in the same issue. DI is simply required at a different moment. (Method call time vs object creation time). DI is still needed, thus per method DI is no worse then per class DI. If there are flaws to per method DI compared to per class DI, this article fails to show them.
Honestly? I refuse to ever work on anything related to npm/Node. Badly designed ecosystem and just out right wrong tool for the job. Except for libuv \(which I love\) I have nothing nice to say about any of it.
&gt;Also running Facebook Part of, they have a lot of languages in the stack, even Python.
Just to add, Symfony is very heavily influenced by the Java C# ecosystem (particularly Java Spring) where as Laravel is more heavily influenced by the Ruby On Rails/ rapid development ecosystem. As a Symfony developer I am maybe slightly biased but I'd suggest that if your background is Java/.Net you will be more comfortable with Symfony.
I'd just say that it fits with the way I think. I don't particularly like PHP myself, I prefer Python, because it "fits my brain": if PHP fits yours, then there's no shame in that - a lot of venerable software is written in it. The best tool for the job is often the one you feel most comfortable with, the one you know best. If someone else is doing the job, then let them use what they prefer, but when you're doing it, you decide.
to be blunt, you are suffering this issue because you are using outdated technology and practices.
&gt;What frameworks are used if you even use frameworks at all? Besides the big ones already mentioned I'd recommend [Slim](https://www.slimframework.com) as a modern and good-for-learning microframework. It's maybe not as overwhelming if you want to look into its source code to learn how it works. &gt;How do you host PHP? Apache with the PHP plugin? The modern approach would be using PHP-FPM with NGINX or Apache. If you're using Docker you could use a container like [this](https://hub.docker.com/r/richarvey/nginx-php-fpm) to get started.
yes your points are completely valid. the thing is that sooner or later we need to upgrade , the code will inevitably break breaking changes like `count()` are not expected when migrating from 7.1 to 7.2
It depends what you're trying to do. Node is well suited for realtime apps even if it's quirky and weird. If you're trying to build a logic heavy website however, Node isn't a great choice. You can do it but you're better off choosing PHP or Python with a good framework. 
&gt; a lot of code written by front-end people is bad... count(false) or count($array) , nobody cares... Maybe that is what PHP seeks to fix with this change and maybe we should embrace that instead of calling it to be "fixed" when in fact, it _has_ been fixed. You should've tested it in an isolated environment first. The fault is yours.
Seems fine to me. Lua does the same thing. JS wasn't designed to handle business logic.
This comment is very good, thanks. It provides a quick overview and I guess it will be useful to other readers too. I'm fully aware of the above and more, in fact I'm heavily preparing for GDPR as I am also an entrepreneur, dev and will be DPO soon for at least one company I own. There is more than this, of course. The issue was availability of GDPR-compliant VPS hosts. But I guess there should be some and more will appear later. &gt; You cannot setup Vault, HW-Firewalls and so on just for a small company website having a contact form or something like that - that would be overkill and is not enforced by GDPR. I'm dealing with small to medium companies usually that get to have such needs. Including my own.
We seem to have vastly different definitions of real time programming. Real time means you cannot use anything but malloc\+free with your own custom memory management. Neither PHP or Javascript is meant for this task.
Will check it out. Thanks!
&gt; Everyone ended up using Node.js/React/Redux JS devs? I think I found your problem. I know it sucks but try not to let it affect you. Dunning-Kruger effect is rife in the tech industry. The ones who act like that and talk the most shit usually turn out to be incompetent. 
Not sure what it has to do with memory allocation; in web terms realtime apps are those where the client and server communicate continuously instead of the classic 'client asks, server responds' way. Think messenger apps. Both the client and server can send data to each other whenever they like, they don't adhere to any particular communication order. 
webpack dev server offers far better DX than hit-F5-and-wait. When if your backend is PHP.
What's wrong with php?
There's nothing wrong with php
Older versions are sort of a mess. But newer stuff is fine. There are a few things missing from the language but they will come with time.
I don't like PHP. By historical reasons our codebase is the majority in php, but still. I wouldn't choose PHP in a hackaton where you can choose any technology. This being said, in a hackaton you shouldn't give a single f about that and the idea is to make a proof of concept fast for an interesting idea, so the idea and how it works out is the most important (or that is my view at least)
What kind of stuff is missing? I never really thought it should have all the bells and whistles that python or java has simply because it's dominantly a web facing language 
&gt; What are good tools to learn modern PHP if you are a software developer? It really depends on the context. For debugging: xdebug; For profiling: xhprof; As IDE: Sublime Text, PHPStorm; For ORM: Doctrine; For Framework: Symfony; Have smaller project or wont use MVC pattern? Symfony Components; For package management: Composer; For tests: PHPUnit, DbUnit; For security: OWASP (2017 Top 10 report: https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf) (It's not a tool as in a script or a package, but it's a resource to research and guidance) There are many other tools that you'd really have to specify what you expect to accomplish to then I could name some tools. &gt; What frameworks are used if you even use frameworks at all? Is this Zen thingy still used? IMO, Symfony is the better approach. Not because preference, I came from CodeIgniter, Silex, ZF1 and ZF2, and still the way things work with Symfony just make my life super easy. &gt; How do you host PHP? Apache with the PHP plugin? Apache with PHP-FPM or as module. Some suggest to use nginx due its better performance. I honestly never payed attention to these, it's the DevOps job. While I do know how to configure both, I'm far away to understand which one is better, therefore, I leave it for who understand. &gt; How do you create modern and interactive websites with PHP? We use mantis for bug tracking at work and this stuff can die in a fire for all I care. I assume the old one script per page way of doing PHP is pretty outdate Not sure how Mantis is related with moder/interactive websites. For issue tracking, I use Redmine, Trello or Bitbucket's Issue Tracking, really depends on the client/project/level of complexity. About modern and interactive websites, learning about web services would kind of fulfill the server-side of the thing. The rest I think it's really about using MVVM or client-side frameworks such as Vue.js, React, Angular, etc. I personally see that you can't provide interactivity with PHP, it's a server-side script language, it's job is to provide data to the front-end. I've used PHP to make internal scripts too, that's where, to me, Symfony Components shone the brightest. We have some applications which are run by the crontab and the Console components made our lives way easier. As long as you keep yourself from learning PHP 5, you'll be fine. Also, you already know by your background but, avoid keeping yourself in a single language and learn the concept of data structures, code complexity and general subjects that would serve you as fundamental to any language. This will make it extremely easy to just migrate from language to language, after all, a language is also a tool.
I've used php for years, and have recently moved over to python, and might do a javascript back end in the near future. As much as I am not fond of php, there is nothing wrong with using a tool you are comfortable with, especially in a hackathon, where being able to make it quickly is important. Also, assuming you need to relate and display data, php is likely a tool I would reach for myself. If the system needs to be asynchronous, php may not be the best option. But it sounds like this isn't the case. Shame on these developers for being pricks.
Typescript, you mean that language that has more than 2500 open issues on gitlab despite is young age and more than a release a month with breaking changes every now and then ? Do you mean that language which is built on top of a broken thing (javascript), trying to fix the mess of its parent? 
We work by the principle that we are not lawyers and therefor not qualified to advise on it. If our Clients ask us what they need to be doing we tell them they should go and ask their lawyers and then we will carry out any work they are advised of. The daft thing is, everyone is coming back with completely different requirements. It's clear nobody really understands what it means and everyone is just making it up as they go along. There seems to be a quiet consensus in the industry that none of this is actually going to be enforced anyway.
Hey, WArslett, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
+1 for "layers of shit"
Every language is flawed
&gt; There seems to be a quiet consensus in the industry that none of this is actually going to be enforced anyway. That's not the point... if you do any B2B with EU clients, those clients are likely to avoid using your services until you can provide them with evidence that you are actively seeking to implement GDPR principles, as to use your services otherwise makes them liable as well. Businesses, including the ones I work for, are hiring lawyers and analystis to try and become as close to GDPR compliant as possible, given the lack of official guidance, to give our B2B clients confidence that they're not going to get wrecked if they hire us.
&gt; In the last week we had many broken client websites because the change of count() . You screwed up. Don't upgrade without testing, especially to a version with known breaking changes. This has nothing to do with PHP. &gt; but i just want to see PHP as a stable ecosystem Wants a stable ecosystem; blindly upgrades the PHP runtime without testing. Do you see the problem here? The reason to upgrade is because things have *changed*; this time one of the changes burned you, so now you're asking for nothing to change. In which case, why upgrade?
That’s bang on. PHP was started 23 years ago in 1995 and in 1997 PHP3 resembles what we now know as PHP. It was started as a quick way to integrate code into HTML without using Perl or C based CGI apps. Because of this, it’s structure was not as well thought out as others. Because it was so easy to understand, bad programmers with bad coding styles promoted bad habits, and the language at its basic stage let you do it. It didn’t check types. Globals were registered from GET/POST. It had 5 ways to do an if statement. As with all toolkit’s you have the option to break compatibility or evolve. PHP being so widely used has had to balance it. It took years to depreciate register globals and it was havoc across the net when they did. PHP applications have had lifecycles that have outlived any prediction, which has made evolution of certain practices slower. Since that time the language evolved. It grew up. People can make fun of you all they want, but if you’re winning the race, nobody cares what shoes you use to cross the finish line.
This. 100x. Same situation here. Making fun of PHP and using javascript is like making fun of orange and eating tangerine.
&gt; breaking changes like count() are not expected when migrating from 7.1 to 7.2 Why not? It was [in the official docs on migrating to 7.2](http://php.net/manual/en/migration72.incompatible.php#migration72.incompatible.warn-on-non-countable-types). If you read it, you should have known to expect it. If you didn't read it... ...well, why not? Isn't that your job (or the job of someone else on your team)?
Mongodb has changed a lot in the last two and a half years. It's now the most used document store available, which considering its age is quite impressive. I work in a company that has been using MongoDB and MySQL for four years in tandem and we've had far more problems with MySQL replication than MongoDB, corrupted logs, half transferred binlogs. I agree that MongoDB isn't the magic bullet fix that many use it as, as relational data should still go into MySQL, but there are lots of use cases where MongoDB just provides the extra flexibility that MySQL just can't do.
We were in a similar situation when we started doing code reviews. The first point to highlight is that **it does get better**. Getting more efficient with code reviews must be coupled with other efficiencies in your process so that time during code reviews is not wasted on stuff that should just be a matter of practice: * Gather detailed requirements - code review is **NOT** for reconsidering or clarifying requirements. * Test driven development and Continuous Integration - code review is **NOT** for identifying bugs. Code review is not an effective and entirely unreliable way of identifying bugs. A developer cannot be expected to know whether your code will or won't run correctly just by looking at it. Write tests for everything from the beginning and use CI to run your tests on every change so your reviewers only need to see the green tick on the pull request. * Have some upfront design discussions - Code review is **NOT** for discussing fundamental design decisions after they've already been implemented. A common misconception in software is that Agile advocated no upfront design, when in actual fact it advocates "just enough" upfront design. Fundamental design decisions such as what frameworks/ libraries you are going to use, what design patterns you use for a particular complicated problem should be discussed before hand. The best way to do this is with pair programming. Try spending the first hour of a big task with another developer sat by your side and talk about what you are doing and how you are going to do it. * Agree on code style (or just agree to use PSR-2) and put processes in place to enforce it - code review is **NOT** for discussing code style. When we first started I found myself pulling my hair our at endless conversations about whether or not to use underscores or camel case. Agree a standard, then use a tool like code sniffer to enforce it. You can integrate it with your CI so that your builds don't pass if there is a violation. If you don't care enough about code style to do this then fine but in that case it shouldn't be coming up in code review So what *is* code review for? * **Primarily** it's for asking questions - Why/ how did the developer do something that isn't clear to you? What information do you need as a developer that might be maintaining it? If so would it be worth adding a comment with that information for clarity * Identifying missing test cases - your reviewer might identify a scenario that you missed * Naming things - a famous quote in software "There are only two hard things in Computer Science: cache invalidation and naming things." It is worth naming symbols in your program appropriately in a way that makes sense to everyone and it's not difficult to change a name if your reviewer suggests an alternative * Minor design decisions - As I've already said, any big decisions that mean rewriting your PR should have been discussed first but there will occasionally be discussions around how responsibilities could be rearranged or how you split up your code. These sort of changes are not complicated to implement One last point to summaries. If you find yourself going back and forth over a code review more than once, just get up out of your chair and go and sit down with your reviewer and get it sorted. Sounds obvious but it will keep things moving.
code reviews are not about finding bugs. That's what tests are for
Neither does PHP, so what? 
Next Hackathon I join I'll use WordPress just to blow their minds off their skulls
Sure, but the default experience is already perfect for a hackathon. Like, if you just want to set up a basic API. "Can you add another field?" "Sure, it's done, just refresh."
Vulnerability: Cross Site Scripting Description: CKEditor, a third-party JavaScript library included in Drupal core, has fixed a cross-site scripting (XSS) vulnerability. The vulnerability stemmed from the fact that it was possible to execute XSS inside CKEditor when using the image2 plugin (which Drupal 8 core also uses). 
In your opinion what is the best stack now
I die a little inside every time I see this sort of thing. Especially coming from a PHP dev. PHP and JS share a lot in that they started as hacky messes and grew in to awesome technologies thanks to their ubiquity, ease of use, and amazing communities. I challenge you to take this same good humor mindset and laser focus it on promoting positivity and inspiration. As indicated by this post, sometimes these little jokes can just floor new developers or, worse, send the message that it's ok to bash great, open-source, technologies (save it for Oracle). Also, with experience, I've learned that dissing langs, libs, and frameworks can really bite you when you realize later that you had no idea what you were talking about. I think it's a little simplistic to dismiss one of today's most important technologies as just "server side javascript." and imply that it's just garbage; there's a little more to it than that. https://www.youtube.com/watch?v=ztspvPYybIY Not trying to lecture :) Just encouraging you to be a leader that promotes positivity and encourages people to learn instead of following the same old cliche of negativity and apathy.
I love to work with both worlds and all I can say is: fuck those hipsters. I bet they don't know any other tools and that is their problem.
Very low bar to entry so lots of noobs use it. 
I don't think that's really a problem of the language.
&gt; there have been a lot of effort to address these things, you can even have different storage engines or distributions TBF, I'd trust a datastore that has no history of losing data or lying over a datastore that no longer does (or promises to).
I've been saying Enterprise customers (i.e. paying) consistently in this thread. You keep trying to weasel in a counterargument about Enterprise users. Please stop moving the goal posts.
I don't think you understand what "enterprise" means. 
I don't think you understand what a compound noun is.
That doesn't really make sense. But just because someone is an enterprise customer doesn't mean they have large amounts of money at their disposal. That _may_ be the case depending on the shop but like I was saying that community college IT department is still an enterprise user but they're unlikely to "have enough money on hand to pay you to maintain EOL versions." Some people are basically just maintaining.
Awesome! Glad it worked out for you.
Or MediaWiki (with Wikipedia being the biggest user)... Seriously, PHP is used in a ton of sites.
Some nouns are multiple words. `Enterprise Customer` is a subset of `Enterprise User`. When people talk about enterprise customers, they don't mean *all people who use Enterprise Linux*. They're literally talking about customers who use Enterprise Linux.
http://andrewbaxter.net/quicksort.php
I completely agree. II you pay attention to it, have smaller team, code reviews, it works. I try to explain where such approach may lead when you leave the company and junior will see such code. How do you keep overuse of this in service layer?
well kind of delving into semantics at this point but I was the one who brought up enterprise users actually and I was just talking about Linux admins who work in enterprise settings and not necessarily "Enterprise Customers."
Fair enough. The point I was trying to make is that one shouldn't judge a technology based on old data while complaining that others do the same with PHP. If you allow PHP to mature (and it did at lot in recent years) and acknowledge its progress, one can do it with something like MongoDB as well. As /u/tie_salter mentioned in her/his comment as well, it's not that traditional/mature datastores like MySQL never had issues, e.g. table corruption can happen with MySQL as well and was not even that uncommon with earlier versions &amp; MyISAM storage engine. I'd trust current MySQL a lot more than the MySQL 3.something back in those days I started using it - so I'd take a 3 year old blog post with a grain of salt. 
You'll notice you will get more done with your stack then 5 of them will get done with theirs. Plus, your solution will be about three times faster than theirs right from the get go.
&gt; Author fails to show how using per class (constructor based) DI will lead to less dependencies them per method DI. Author also fails to show how per method DI somehow makes it harder to deal with too many dependencies. Dependencies count stays the same. Cost of improving design stays the same, thus per method DI is no worse then per class DI. I agree with you. The post is not about comparing dependency count between method/ctor DI. &gt; There is also argument that per method DI makes running method impossible without DI. I'm not sure that I included this information, that is not relevant to the topic. What exact part of the article mentions this? It should be rephrased. --- How did you understand final statement of the post in the end? 
&gt; well kind of delving into semantics at this point Word have meaning. &gt; But the take home point is just that it's possible to work within an "enterprise" setting but still be pretty strapped for cash. And my point is a callous one: Upgrade, or pay the price of not upgrading. Here, paying could mean paying another developer to backport patches, or accepting the risk and eventually getting their servers hacked. You might not be making demands of open source projects to provide support for EOL versions of PHP, but in my experience, most enterprise users do. To them, my attitude is simple: Money talks.
On top of that, EasyApache4 supports multiple PHP versions. If you can't get access to that, you can pay $11/mo to get CloudLinux and use LVE + alt-php which allows each account to select their own PHP version ranging from 4.4 -&gt; Latest (7.2 at the time of this post.)
Even bad php devs tend to know basic js _and_ SQL.
If that's what they need to do to get those benchmarks then it's a great design.
Wow. This woke me up better than coffee could today. LOL
&gt; Bringing up non-paying customers downstream was a valid, but irrelevant, point. No it was part of the original point. The original post basically just had a section where he asked generally if it was worth it, someone said "everyone will be on PHP7 soon" to which I replied that enterprise customers could be on PHP5 for a while. TBH that "community college IT department" was basically what I was thinking of actually. The larger organizations that are flush with cash typically can make demands of their vendors/upstream developers or have the money to pay someone. If the OP supports that community college's software and they stop supporting PHP5 then they just simply stop getting updates. They aren't _owed_ the updates but they'd probably be better off with them and the OP seems willing to do it. &gt; And my point is a callous one: Upgrade, or pay the price of not upgrading. Considering neither of us are the OP and in all likelihood neither of us are his users either our opinions don't really matter beyond giving the OP information. &gt; You might not be making demands of open source projects to provide support for EOL versions of PHP, but in my experience, most enterprise users do. It kind of depends on the person. In my experience, "enterprise" means basically any group of IT workers in a non-governmental organization. Even then a lot of public sector departments are still structured like their private sector counterparts. Some of those people are going to have more money than others. I get that it's frustrating to have people be demanding but again the OP is willing to do the work and those same people are in pretty demanding positions as well. They're often paid way below industry average and have superiors who either don't understand/care what they need or have superiors that understand but simply can't afford to do more for their IT department themselves. I'm thinking of places like West Virgina here where the poverty is similar to some parts of eastern europe post-collapse.
You can't seem to admit that this was your fault. You blindly upgraded production from 7.1 to 7.2, **you** broke client's sites, not PHP. If you had read upgrade notes you would have seen this pointed out very clearly in the `Backward incompatible changes` section [here](http://php.net/manual/en/migration72.incompatible.php#migration72.incompatible.warn-on-non-countable-types). I could understand a solo-dev being caught off guard by this. But not someone who claims to be responsible for "about 50 sites."
In the beginning it was 100% PHP...irrelevant now I know but it made me feel better teaching myself to code back in 2005 knowing that facebook was using it too
3 day old troll account
&gt; people would laugh if a front-ender used grunt and bootstrap What do they use now? Webpack and ... which CSS framework is better than bootstrap?
Same can be said for sqlite. If you've set up a lamp stack before then the same can also be said of SQL. Who goes into a hackathon with a bare system that needs a dev environment set up from scratch? If I wound up on a team that chose node it only takes a few seconds to find an environment on cloud9 that has node and mongo and mysql
It sucks, but f*ck 'em. Use the tool that makes sense for the job. Every one in a while someone gives me shit for still using PHP. I feel bad for a minute or two then wipe my tears with all the money I make with it. Paying clients (or users) don't care about the technology. They care about the results, value, maintainability, etc. Choose the best tool for the job and do good work. The rest will sort itself out.
I know what's the order for you. You wrote it down like ten times. You never ever explained why is that the order for you, you wrote an entire post and even in that post you failed to explain why is that the order for you. In particular constructor vs. method/action. I guess you just believe things, strongly, that you can't explain. 
A lot of people in tech are the shittiest people I've ever met. PHP has built multi-billion dollar companies. It really doesn't need to be defended at this point. Some people are just elitist shitheads - don't pay them any mind.
Call me is fashioned, but the thought of having the majority of your web app powered by client side JS scares the accessible daylights out of me. My projects have all conformed to the basic Web principles of graceful degradation. Just using the JS-powered dropdown component in CSS bootstrap is making me uncomfortable.
There are hordes of dbs out there that support schema-less storage as well. Even some of the relational ones (like postgres) support it with a column type for arbitrary data blobs. 
I mostly agree, however many of us still have to offer support for it so long as there are a sizable number of people using it.
Codist bastards.
Agreed. The people who have usually been most vocal to me about their hatred for PHP has been Javascript developers. They clearly do not realize that JS is a bigger clusterF&amp;$k than PHP is.
It's not that deep fam.
&gt; What are good tools to learn modern PHP if you are a software developer? PHPStorm comes to mind. Not cheap but it has a good code analyzer that saves you plenty of trouble down the line. &gt; What frameworks are used if you even use frameworks at all? Is this Zen thingy still used? My advice is to learn PHP without using Frameworks. It takes a good programmer a few days to write a few basic components ... Routing, Dependency Injection ( simply use Pimple ), ... After that you realize that you do not need frameworks at all anymore. It reduces your risk level as you only consume what you need. Your "framework" is not public so you are not constantly updating because of bugs found in public frameworks, let lone the other issues. And you can reuse code for years and years ago. I have 10 year code that needs a few tweaks to match the new standards and so easy to reuse. On the other hand people who relied on frameworks 10 years ago, need to totally rewrite there code as frameworks jumped major versions and totally changed. Standardized frameworks are plenty good for big companies who want a documented framework without spending the money to write there own and document it. Companies who have no problem trowing more servers at the problem as its a cheap cost for them. But for individuals or small companies, those same frameworks a lot of performance and mental overhead. You need to learn PHP + the framework. You need to deal with their bugs and be able to debug their code. And they tend to grow exponentially ... https://www.techempower.com/benchmarks/ Perfect example... Search on PHP and see PHP-Raw vs ... some popular projects php-raw7 34,595 php-php5-raw 33,545 symfony 4,679 laravel 2,860 Trust me when i say plenty of people will disagree with me on this. But large frameworks EAT performance for breakfast because the way PHP works and how it needs to bootstrap those frameworks on each request. Learn the basics of PHP, learn the edge cases in PHP and before you know it you write exactly what you need for each project and maximize your performance ( and knowledge ). Not what others write for a "generalized" framework that includes the kitchen and sink and where your more learning the framework and not the PHP language. Learn whatever framework and be stuck relearning another framework if you ever want to switch. Learn PHP and forever reuse your components with just a few tweaks. Something about fish ... "Give a man a fish, and you feed him for a day. Teach a man to fish, and you feed him for a lifetime.". &gt; How do you host PHP? Apache with the PHP plugin? PHP-FPM + Ngenix PHP-CLI + Swoole
Lots of PHP hate is still relevant. There is so much that would cause big BC breaks if fixed. 
&gt; It seems to me that PHP made a lot of ground in recent years such as? 
&gt; People can make fun of you all they want, but if you’re winning the race, nobody cares what shoes you use to cross the finish line. Except the ones that have to maintain the codebase
Yes. Have you used it? Despite the issues you’ve listed, it’s miles ahead of plain JS in terms of being not awful. I wouldn’t use anything else for front end work at this point (since code ending up as JS is a requirement), and it is objectively better than PHP in some areas for backend work. Of course it’s also objectively worse in other areas, and there’s a huge amount of personal preference in the mix too. 
look all those business and server related things are in different aspect i want to point that breaking changes of old and very widely used function like `count()` should not happen and should be avoided if possible 
setting up the schema in a sql database takes time. It takes 0 effort in mongo for a hackathon quality db. 
Oh. Shit. Those libs exist.
sharting you say?
what is outdated count(false) ? the server env doesn't matter because you cant avoid the the update of PHP for too long 
I mean, the starter app for Angular is almost 300mb. And it's the most simple of apps. Installing one package on npm can easily install 1000 other ones. I guess all JS developers are 'js plugin configurators'.
It's like the only time you can't immediately say "....mongo???" is in a hackathon, it's damned near built for that and why it got so popular (ease of use). That article is from 3 years ago, too, mongo isn't actually as bad anymore (still not great)
Programmers sometimes lack those social skills. Used to work in PHP, transitioning from JS to Python now and think I might eventually settle into some flavor of C. Truth be told I sometimes miss PHP, the documentation is great, but more importantly code in whatever you like and gets the job done. 
&gt; the thing is that sooner or later we need to upgrade , the code will inevitably break You don't need to upgrade a client's code, no. Or the PHP under it. Tell the client either they pay for upgrades, or they'll be on PHP7.1 until it EOLs on 2019-12-01 at which time you stop promising things will work. If you don't have a setup with the capacity for running distinct versions of PHP for different clients, then your setup probably needs a lot of work. Any given client's systems should be entirely distinct from the others as a secuirty mechanism anyway.
I was talking to someone one time who refused to use PHP because he tried it years ago on like PHP 5.2 i think it was and didn't like it. But to this day he refuses to even try PHP 7, even though i try telling him that a lot of his complaints about old PHP had actually been taken care of in the newer versions.
PHP7 is pretty good. Has all the major features you would expect from a mixed paradigm (but mostly OOP) language. There's still a lot of leftover badness from the past but all things considered modern PHP is decent. Symfony is a great web framework that implements a mildly opinionated but highly flexible version of the web-adapted MVC pattern. It uses DoctrineORM for the database/model layer and imo this is a great choice. Learning this MVC design pattern and how to put together a modular, loosely coupled application on the backend is 100% necessary for modern web development. Symfony is a very good way to learn this coding paradigm. Composer (made by the same developers as the Symfony framework) has become the de facto standard package manager for PHP and does a lot of things right (and a few things wrong imo, but nothing seriously wrong). Hosting PHP web apps is still very easy. mod_php for Apache is a very straightforward way to do it. 
Honestly, PHP is still objectively horrible is a language, but I can do great things with it, thanks largely in part to the massive community surrounding it with a plethora of open source libraries for just about any task. I think it's a bold face lie to claim that PHP is in anyway a well designed language, even today. Or perhaps it's naivety. Is it better than it was even a few years ago? Yes, by leaps and bounds, but it still suffers some of the worst inconsistencies of any language I've ever seen or worked with. It's right up there with Javascript. But like I opened with, PHP is a horrible language that allows me to do great things. It's a poor craftsman that blames shoddy tools.
What's bad about it anyways, compared to others? Its what I was taught for web development along with JavaScript 
fuck em if they cant take a joke
Do you start from scratch with PHP or use something like laravel?
You must be incredibly naive.
I mean, not really. Facebook ended up writing HHVM, which while is _based_ on PHP, is arguably _not_ PHP. PHP will run (usually) on HHVM, but the HHVM language Hack, which Facebook uses, will not run on PHP.
The thing that matters is what you build and your experience doing it. You like PHP, so PHP was the right tool. Even in work outside of hackathons, no one cares what your stack looks like at the end of the day, they care about what you ship. 
I completely agree. PHP is designed for rending HTML pages and JS is designed for manipulating HTML pages. Today, JS is run server side and the whole backend of web applications are written in PHP. It was never meant for this. I also am a professional PHP dev and the language really is great for what it's used for now. It gets the job done, and it's *fine* if you know what you're doing. But it's also not the best tool for the job and it's very easy to make some real garbage in PHP. That's why people look down on it.
&gt; Wants a stable ecosystem; blindly upgrades the PHP runtime without testing. Its my mistake not to test all sites, but the blind thing also is the acceptance of the change of `count()` without thinking of the consequences 
You are welcome =) Also, if you have a little bit time, feel free to share first experience feedback (https://github.com/kalessil/phpinspectionsea) - the fresh look is always welcome.
You were using the function incorrectly because a bug was allowing you to do so. There is no logical reason to use `count()` to test whether a variable evaluates to true. You upgraded your server without properly reading release notes to verify nothing about the new version would cause problems with your applications. You upgraded your server without even testing your apps How is any of this not your fault?
Buddy, I feel you. I won hackatons with Java/Php with the rest with ruby etc. In the end, just remember it’s your ability to deliver decent and faster with your skills that make a man, not the programming language.
- http://www.phptherightway.com/ (free) - Modern PHP written by Josh Lockhart, the guy who create Slim framework: https://www.amazon.com/Modern-PHP-Features-Good-Practices/dp/1491905018
&gt; It also has type safety built in No. PHP has a modicum of type safety. It only extends to user-land function parameters. The only sensible usage of typing is with `strict_types`, which only applies on a per file basis. You can not type local variables. Scalar parameters to built in functions are not type checked, even with `strict_types`. This is not type safe. It is safe-ish at best. 
Forge, Envoyer, Spark
That irony though.
node.js/mongodb developers should be the last of people to be a programming snobs... (IMHO) 
yes i upgraded and messed up, but my point is that... php should be stable language and not change the count() function which is 15 years old next time they will change the $_SERVER array or something else... i dont want the language to become like nodejs , i want it to be predictable like it is for the past years , change of count() for 7.1-&gt;7.2 is not predictable 
That's the kind of catch-22 problem. A general framework + a CMS. I think there have been a couple of attempts to add a CMS module to Laravel/Symfony type frameworks, but I'm not sure how active the development on those type of modules is these days. There's also CMS's built on top of these frameworks that might give you close to what you're looking for. OctoberCMS and PyroCMS are built on top of Laravel so they give you all of the goodies a full fledged MVC framework gives ya. Good luck.
 - PHPNG engine makes it twice as fast - the addition of an exception engine - addition of a spaceship operator - addition of a null coalescing operator - Proper typing and typehints - Anonymous classes - A number of syntactical cleanups streamlining code
Wordpress and the API does all this. Did you know that?
Don't forget the 'hipsters'. I don't mind people using PHP, bash, C, JS or anything else.
You realize that the only part that changed was that it generates an warning, right? This would only be causing your applications a problem if you are displaying warnings and errors, which your PHP ini should not be configured to do in production. The functionality is the same. Change doesn't happen for the sake of change. They're not going to make `$_SERVER` immutable as that would require everyone to use an HTTP Request abstraction library. This change was voted into place in 2016. Your clients had ~18 months prior to today to update their code. Your workflow and server administration practices are highly suspect here, as is your business ethic and capability as a developer.
I admit, it is with some level of glee that I anticipate ImSuperObjective2 showing up, given that title. ;-)
Imagemagick binary 
This. WP will do these things and then you can build your app on top. I would recommend a theme like Divi for quick and easy scaling to mobile. 
This is difficult to answer without better understanding what you mean and need in terms of "advanced web applications", "interact in various politics questions", and "custom functionality". "Interact in various politics questions"... What sort of interactions? Maybe a forum with a polling module fits the bill. Maybe just a polling application would actually fit your needs. Something like vBulletin \($$\) offers forums, static pages, polling, and an API to build custom functionality. Most forum software \-\- paid and free \-\- I've come across usually have some sort of API ecosystem. "Custom Functionality"... Drupal and Wordpress both offer APIs to build upon. If a module doesn't already exist for your use case, you can roll your own. Again, most CMS systems I've come across lately have an API ecosystem in place for finding or building custom functionality. "Advanced web applications"... That could have many different meanings. What do you consider advanced with respect to what you are trying to build? Do you need something with a modern front\-end design and lots of UI widgets to use? Something that is super secure and fault tolerant? Do you need easy dependency injection to swap out data sources over time? Don't necessarily need the details of what you want to do and build, but a better idea of what might be of use to help you "jump straight to the application logic" might yield better suggestions.
[Graphviz](https://www.graphviz.org/)?
Bad code comes from people programming, not the language itself. If you enjoy PHP, by all means, keep hacking PHP!
You can try recently released PliKli CMS based on old Pligg: https://www.plikli.com/download-plikli/ It has blogging + link sharing + commenting + voting. Pligg had a lot of problems which have been fixed in this CMS.
best practices age good.... but at the end they will show you 100 errors that you need to fix anyway 
Except you know... Being built for developers with modern standards. But thanks anyway!
Not at all, it was not an issue because /u/tsammons has their shit together and could explain why even if someone did manage to exploit it they have an army of measures to make it useless.
OctoberCMS comes to mind.
Thanks. I've seen OctoberCMS before, but looking at PyroCMS seems like a cool option and kind of the mix I'm looking for. It does seem - after a short read - that you are not limited at all by PyroCMS and could just simply use it like Laravel if you needed. Which seems comforting to not get stuck within the rules and walls of the CMS.
Have you used OctoberCMS for a catalog kind of site? Like listing out types of entities and filtering them?
For reference, see below. It was a misunderstanding of trying to find low hanging fruit where there is none to be found. &gt; Full exposure of the filesystem is intended with the demo component. The filesystem is a synthetic one specific to that account constructed from overlayfs; all system users to that account are unable to login through any PAM service (ssh, su) through a PAM min uid requirement of &gt;= 500. Every user &gt;= 500 is a virtualized user that requires a special login notation to access (user@domain) and goes through a chroot treatment. &gt; You can break out of a jail if the file descriptor isn't tossed out and somehow that descriptor is exposed to the underlying program. All services that jail also change the rtd within the root, which blocks arbitrary traversal via ../../../... Another technique is to fchdir the fd, but again that too is tossed out for every service except IMAP/POP3, which relies on Dovecot. Dovecot lacks the ability to launch any process so in theory you could bust out of the jail if there were a bug in Dovecot that allowed remote code execution, but historically I would deem Dovecot's codebase historically clean. &gt; Any processes executed within the panel as that uid ([pman_run](https://bitbucket.org/apisnetworks/apnscp/src/6bf86f56efb39e1cb7e8e6d51d3d56410c8478af/lib/modules/pman.php?at=master&amp;fileviewer=file-view-default#L-225:300)) is wrapped with a su that again tosses out the file descriptor and dies with the subrequest. Most of the panel functions runs as a non-privileged user using a [backend broker](https://bitbucket.org/apisnetworks/apnscp/src/6bf86f56efb39e1cb7e8e6d51d3d56410c8478af/lib/datastream.php?at=master&amp;fileviewer=file-view-default) to request privilege execution. Certain low-level filesystem modules have an additional [assertion](https://bitbucket.org/apisnetworks/apnscp/src/6bf86f56efb39e1cb7e8e6d51d3d56410c8478af/lib/modules/file.php?at=master&amp;fileviewer=file-view-default#L-353:419) to ensure that the resolved path (realpath) is anchored to the account root. &gt; There is a possibility for something to go awry in the file module that I have overlooked that could allow arbitrary filesystem traversal. I would be intrigued if you came across one such attack through any file_* API method that works off a backend call ($this-&gt;query()). annnd about accessing /etc in the synthetic filesystem, in which the primary account user bypasses DAC checks: &gt; passwd hasn't contained hashes since the early 90s when shadow was implemented to limit unprivileged access to credentials. &gt; An overflow would have to exist either in the service level, such as sshd, before PAM auth routines take over and I mean early on - [before system-auth](https://github.com/apisnetworks/apnscp-playbooks/blob/master/roles/system/pam/templates/sshd) stack. Once jailed, the descriptor is thrown away and, barring a catastrophic kernel bug, can't be unbroken. Speaking of, earlier with Dovecot - the fd is saved for the auth subprocess; once a user's login/password are validated in "auth", a separate imap or pop3 process spins up and that's given the same fd treatment. &gt; Let's play the angle that you're logged into terminal in your synthetic filesystem. /runme is suid root. What happens? Not much. A cool thing about the [filesystem layout](http://updates.apisnetworks.com/2010/08/introducing-apollo-our-next-generation-platform/) is "copy-up". Each account is comprised of at least 2 layers, account data that is r/w and one or more r/o service layers that contain essential binaries/libraries. Some [files](https://bitbucket.org/apisnetworks/apnscp/src/6bf86f56efb39e1cb7e8e6d51d3d56410c8478af/config/synchronizer.skiplist.dist?at=master&amp;fileviewer=file-view-default) are never replicated into the synthetic filesystem because of unintended credential leakage (shadow, passwd) or mechanisms are different (pam.d/*). &gt; The moment a hardlinked file in the r/o layer is modified it gets duplicated to the r/w layer, then modified in that layer. You could at most wreck your account's filesystem but nowhere else. &gt; Drifting back to the software side, can the synthetic filesystem and actual filesystem drift? No. There's a separate yum [transaction hook](https://github.com/apisnetworks/apnscp-playbooks/blob/master/roles/system/yum/files/apnscp.action.j2) that [updates these files](https://bitbucket.org/apisnetworks/apnscp/src/6bf86f56efb39e1cb7e8e6d51d3d56410c8478af/lib/CLI/Yum/?at=master). As long as yum-cron is present and properly configured and RedHat doesn't become Ubuntu, then any suid issues should remain academic postulations. TL;DR, certainly put some care into its design over the years. If there were ever an exploit to be leveraged it's somewhere in the file module.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apisnetworks/apnscp-playbooks/.../**sshd** (master → aeb26ea)](https://github.com/apisnetworks/apnscp-playbooks/blob/aeb26ea9129cce0cbc0370868b51d2b3e5e02c2a/roles/system/pam/templates/sshd) * [apisnetworks/apnscp-playbooks/.../**apnscp.action.j2** (master → aeb26ea)](https://github.com/apisnetworks/apnscp-playbooks/blob/aeb26ea9129cce0cbc0370868b51d2b3e5e02c2a/roles/system/yum/files/apnscp.action.j2) ---- 
I have used it to be a webstore, which has databases filled with products which get called in and are filterable. It has a really good Ajax API built into it so you can do all sorts of clever queries to databases with Ease
"Modern standards"... Go on, tell us all about the benchmarks and blog articles that helped you come to your understanding of tech.
Yeah, imagine that, your code will need to be updated before a later change makes `count()` throw an error instead of log a warning. This changes nothing. You’ve long since run out of arguments and will apparently never admit to your own faults or failures, so I’m going to stop replying now, good day. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I've also edited the original comment so it doesn't come up again. It's my bad, I should have done so sooner.
Why would you need Angular for a simple web app, though?! Angular is def. not for "simple web apps" :o
Do tell
Do I even code lol. I'm going to share this one with the wife
How do you incorporate it into your project? When I've looked, i don't see them on packagist so I'm just wondering how someone better at development chooses to add the overhead.
as a developer who has been landed with legacy projects where someone has tried to build an enterprise application on top of wordpress because they weren't really qualified to do the job and Wordpress had the lowest skill threshold... Please stop it. Wordpress is not a software platform.
Yeah I actually feel like composer is much easier and better compared to npm. When I use npm it always comes out with a random error and you have to Google for 20min just to realize you need another package to install the other one. I use Slim3 really nice framework then just add my ORM ext.
What kind of projects have you been using it for? 
Thank you for your reply. I will definitely apply a lot of your suggestions. It seems strange to me that Drupal 8 took five years to build and yet it was still unfinished \(with regard to hooks and the *legacy stuff* at the very least\). Since the release, there have been a number of rather large changes like moving almost everything into the new web directory and the use of Composer. While they are certainly improvements, they're quite drastic for minor versions. I'd counter your argument about UUIDs with, why would you give something a universal address but not make it universally addressable? You can already address any entity if you know its type and key. I feel people wanted something cool and hip, which explains the nullified Twig, unnecessary annotations and somewhat wonky Composer implementation.
Thank you! I will definitely check this out!
With modern standards I was referring to software actually following the developments of PHP 7 and unlike WordPress writing code suited for PHP 5.
Thank you! I'll check OctoberCMS out as a candidate! 
Most of the good libraries are js client libraries. I would go with one of them and then passing it through one of the many html-to-pdf or html-to-png services and attaching the result.
I only used it once. It was a pretty simple ecommerce site tbh
I still use jpgraph extensively, it just works and is sufficient if you need no bells or whistles. For the most part it's just easier and quicker to use my already existing templates and styles rather than jumping in and out of PHP/JS. My latest project used jqplot which I've found to be a pretty damn good upgrade in line chart terms. Zooming, labels and overlay features are great. My applications are mostly manufacturing kpi's, factory dashboards, process data reporting, energy reporting etc in industrial settings.
If WordPress brings the functionality you need, why would you care? Keep your own code separated, and use all the stuff you want. You can use PHP 7 functionality in you own code, and just update WordPress whenever they bring new stuff. My advice would be to choose a CMS that is well maintained. WordPress or Drupal come to mind.
Drupal! :)
It just uses the gd library built into php. You simply download all the jpgraph class files and bung them into a location on your webserver. Calling the relevant chart type classes and passing data to them is very easy and well documented. The most common method of integrating a chart into your page is to display the created chart php script as an html img element. I mostly always pass the data for the chart via a $_SESSION array. This can get a bit awkward inside any frameworks.
Without going into _too_ much detail, which could be nearly endless, PHP is the epitome of "wrong" which just happens to be useful enough to overlook it. PHP 7 introduced half baked type safety, is only really useful with `scrict_types` enabled, which must be enabled on a file by file basis. While this type system is leagues better than the former absence of any kind of sensible typing, it's still half baked. Local variables cannot be typed. Neither can class properties. Scalar parameters to built in functions? Coerced at best, even with `strict_types` enabled, which is the _exact_ reason you would enable `strict_types` to begin with - to prevent type coercion. At worst, the built in might accept or return `[mixed]`, depending on what is passed in. Of course, this is all introduced to address the mess that was/is PHP's wildly lose type system that coerces nonsense to even more ridiculous nonsense. 99% of the time you won't notice this coercion mess, but not because it's not happening. You don't notice it because PHP will always fail forward. These messes which could have been prevented during development eventually show up as bugs in production code when something is coerced to something else that you didn't anticipate. The result is that every time you use a variable, you have to be very thoughtful of the expected type, content of that variable, and what PHP may turn that content into. And this is only touching on PHP's typing system which developers have been raving about being overhauled in PHP7. There's also the PHP Core team's complete rejection of anything useful until it's years too late. Language level annotations have been proposed several times and rejected. Named parameters as well. Why? Simply that the Core team doesn't see the usefulness of such features prevalent in PHP's competitors. If we start _really_ digging into PHP though, you start to find specific non-sensical behavior that fuels places like /r/lolphp. Unexpected behavior designed to chug along at all costs rather than return an error. For example, `json_decode()`, which: &gt; Returns the value encoded in json in appropriate PHP type. Values true, false and null are returned as TRUE, FALSE and NULL respectively. `NULL` is returned if the json cannot be decoded or if the encoded data is deeper than the recursion limit. So, without explicitly checking `json_last_error()`, you will never know if your call to `json_decode()` executed successfully, or encountered an error, as `NULL` can signify both a successful execution and a failure state. Oh, and when you _do_ check the failure state, there's `json_last_error()` and `json_last_error_msg()` depending whether you want a numeric code or an actual message. Know what would solve this entire mess? Throw an exception, a core language feature _designed_ for just this purpose, in the event of an error! Or, how about [this gem](https://www.reddit.com/r/lolphp/comments/8ecd0c/nullfoo_null_no_notice_no_warning/?st=jgdzwrpa&amp;sh=1e48723e) posted to /r/lolphp just the other day which is wrong for at least 3 different consecutive reasons.
Give me some time to respond, champ.
OP probably means charts, not actual graphs.
What I am saying is the "getting started" app for Angular (newest one) is almost 300mb with all its dependencies. And by simple I meant the functionality of it, not the tech stack behind it.
would love to get a reddit wiki page here of php cms's and frameworks!
This discussion should enlighten you on why there are so few projects like this. OctoberCMS is good but not that well maintained IMO, I tried using it but it forces you to put in dev time to make it work. Bottom line, CMS users don't care about good code, unfortunately, that's why WP-based "backends" exist with the worst code you'll ever see.
Opinions on whether it's reasonable to cater to clients that can't run JS aside, having a decoupled frontend doesn't have to mean being completely reliant on clientside JS. All of the modern frontend frameworks support serverside rendering, meaning it's possible to use them to deliver rendered HTML on the initial request, while keeping all (or, at least, most) of the advantages of an SPA.
Oh please! WordPress was one of the first major PHP projects that passed all the tests for PHP7 compatibility without issues. There has been no version of WP with compat issues with the latest PHP since WP 1.5
It depends on what you're trying to build, not everyone needs an enterprise level application. Anyone who needs a site "quickly" isn't going to be getting an enterprise level solution. And if you need a CMS and a framework that can build a site quickly, you'll be hard pressed to find a better, more developer friendly, system than wordpress. Child themes and Plugins let you build whatever you want on wordpress, and even if you only want to use wordpress as a back-end you can build a front end using something like react-js or vue or angular and build your own plugin to handle all the custom API calls you need. Get all the strength of a powerful, client-side, user interface with all the power of wordpress's cms and admin functions. There are countless ways to build out wordpress sites for countless possible situations. Does it mean its the right way for everything? of course not, but it is a hell of a lot better than you give it credit for being.
I respectfully disagree that WordPress follows modern standards. It's horrible to work with as a developer. It's a shame it is the first introduction of PHP for many developers out there. 
I've been developing for WordPress for years. It's not what anyone would call an example of good architecture. It's just not. Saying else is just ridiculous. 
Agreed!
I hear so many bad things about Drupal from colleagues, so I've never actually even considered it. I heard Drupal 8 was built on top of Symfony? 
wordpress works perfectly fine on PHP7, they support older versions of PHP, but that doesn't mean you have to use them. You can run wordpress on PHP7 and build your application out as a plugin for wordpress using PHP7. Honestly, wordpress does everything you ask for in the opening, it would take you 2 minutes to google creation of a plugin and add_shortcode to create a custom shortcode to drop on a page for your plugin to execute whatever it wants and you could be up and running actually developing your application after that. It literally does everything you've listed you want it to do.
crap. I done goofed up. carry on, nothing to see here :)
Why would I couple my code to a CMS that I do not align with, rather not finding one I personally align with. As the thread displays, there seems to be tons of good alternatives for developers built on top of Laravel or Symfony.
I've been using and developing for WordPress for years. As mentioned elsewhere in the thread it's not an alternative due to my requirement of actually working with something that's forefront of what's going on in the PHP world. As the thread displays, there seems to be tons of good alternatives building on top of Laravel and Symfony.
&gt; Unlike old owners, our vision is not to make money /me visits download link: &gt; Your browser is blocking some features of this website. Please follow the instructions at http://support.heateor.com/browser-blocking-social-features/ to unblock these. Aaaaaaaand it's gone
&gt; See, this is the issue right here. I want to write code in the language that's actually running. Writing some code in some weird language that gets compiled down into some other interpreted language seems like building layers of shit on top of one another Well then why aren't you writing PHP opcodes? Matter of fact, you better break out your Assembler then. It's languages all the way down, champ.
No, Drupal use some components of Symfony, same as Laravel. And Yes Drupal is shit and if you've limited free time and never touched Drupal 8, it's a big no for me. 
Drupal 8 is still a huge load of spaghetti code, it just uses some Symfony components. If you've got limited time and are new to Drupal then stay far far away from it, you'd be faster coding everything from scratch than learning the 'Drupal way'.
Awful documentation. A constantly breaking public API.
I don't understand why did you exclude fw like laravel or symfony. If you know PHP laravel is simple, symfony need a little more time. So if I was you I'll go for Laravel + a CRUD/Admin generator. CTRL+F in that list: https://github.com/chiraggude/awesome-laravel for 'admin', 'generator' or 'CRUD'. &gt; "static" pages, blog posts and custom functionality - Static page is simple in every FW - Create a blog it's a simple CRUD so with a generator you'll do that in 5min - Custom functionality: depend of what we're talking about, but if its simple It'll be more simple do that in an FW than a CMS like WP, Drupal, etc.
&gt; Why would I couple my code to a CMS that I do not align with, rather not finding one I personally align with Because your personal alignment should have nothing to do with the project aside from "do I understand the framework/platform enough to competently build with it". To put it another way, just because you have a negative opinion about a framework/platform doesn't mean you should instantly rule it out based on that opinion alone. The real question you should be asking is... "which platform meets all or most of my client's needs". Those needs being technical, functional, ease of use, long term support and cost. You should also keep in mind, you would be using WP as a framework and not re-writing it directly. So who cares if it's PHP5 as long as it offers the functionality and technical performance your client requires. If you are really hung-up about the WP code base you could you could even go so far as to use WP as a back-end/API and pull the data into a custom PHP7 site. Like anything else, WP is a tool...how you use it (efficiently or not) is up to you.
I don't want to be too much of a bitch, but I have a feeling this project is kinda riddled with security holes based only on experience without downloading the project. Can you prove me wrong and tell me the project at least uses prepared statements?
As someone who has to use D8 for work, I would not recommend it.
[Yii2](https://github.com/charlesportwoodii/CiiMS) Not a bad starting point for MVC CMS with api
*/me just now sees this and chuckles.* Nice work cleaning it up. Tempted to merge your changes upstream, but I'm still not completely convinced the EdpSuperluminal approach in general is even worth the performance gains. It's such a silly micro optimization, I'm surprised it even works at all! Hence why I abandoned it as a functional prototype and never cleaned it up or tested it.
*/me just now sees this and chuckles.* Nice work cleaning it up. Tempted to merge your changes upstream, but I'm still not completely convinced the EdpSuperluminal approach in general is even worth the performance gains. It's such a silly micro optimization, I'm surprised it even works at all! Hence why I abandoned it as a functional prototype and never cleaned it up or tested it.
This is sad. I looked at Drupal and Wordpress a few years ago and concluded that Drupal was the superior platform. I've been doing the same again recently and Drupal is not even in the conversation. I had worked with Symfony before Drupal decided to migrate and while I thought the Symfony codebase was great - the usability and complex configuration (aka YAML files everywhere) was more than I wanted to deal with before I wrote my first line of code.
What are you rambling about? I do not like WordPress' architecture nor do I like its API. Your logic is flawed. That's like saying it does not really matter what kind of car you have, as long as it drives you from A to B and you know how to handle it. It's technically true that you'll still arrive to point B using the cheap char, but the ride from A to B would be vastly superior using an expensive one.
Thanks! Someone else suggested it to, so I've written it down on my list.
Not sure about the latest versions, but TYPO3 locks you in and you wont be comfortable with it if you're trying to follow modern standards. Check it out, but I think there is too much of coding "typo" instead of just OOP code you are used to. I am using Kunstmaan Bundles CMS for Symfony. Those are some basic CMS features written like a regular Symfony app -- using the container, event dispatcher, doctrine, forms, etc, so you can override whatever process you like. Then, you can build the rest of your site without any constraints. Im using it for three years now and I feel comfortable extending it with any advanced logic the business comes up with, so its a strong recommendation from me. There are some downsides, like some BC breaks during updates for example, not all of the code is recent and there is some technical debt. The maintainers are open for PRs so I started contributing my fixes to improve the things I was missing. The development is happening in a moderate pace, so you can always expect some progress. 
gotcha, its less that you don't like wordpress, more that you just want to play with something new, that's a feeling I understand.
&gt; It's technically true that you'll still arrive to point B using the cheap char, but the ride from A to B would be vastly superior using an expensive one. This is insane logic. You're basically setting fire to money because of some very successful marketing.
I gotta be honest, I work at MongoDB and no one should be made to feel bad regardless of the technology stack they select. Anyone who does should re-read the code of conduct.
&gt; is Drupal even supporting upgrade from 7 to 8 or 8 to 9? For sure, you can "upgrade" even from Drupal 6 to Drupal 8, and even from whatever source to Drupal 8 since there is a fantastic Migrate API. Drupal 6 to 8 and Drupal 7 to 8 is supported right now. Drupal 8 to a future Drupal 9 will be the most easy thing, as the first release of Drupal 9 will be as if it was a 8.x upgrade.
I'm confused. I thought derivatives of AGPL code must be distributed with the same license. How is PliKli distributing a fork of Pligg under a CC-BY license. Is PliKli's development repository available anywhere?
&gt; developer friendly These words do not describe WordPress.
Ive had no problems introducing modern architectures, composer, namespacing/autoloading, etc in my suite of wordpress plugins. Sure the rest of the base lags a little bit, price you pay when you have to support a vast amount of environments, but you shouldnt be touching that code anyways. Always extend through plugins. If your plugins don't feel modern, that's on you bub.
Laravel originally used a good number of Symfony components. Taylor (Otwell, the original author) has gradually factored most of them out in favour of in-house solutions.
👋 I work on the Node.js project as part of the Community Committee. Just wanted to say: never be ashamed of the tools you use. There is no "one true tool" in development and programming. _Every_ tool has benefits, weaknesses, and trade-offs, some of which can be technical, and some of which can be personal. In an environment like a hackathon, those differences should be acknowledged and welcomed rather than shamed or put down. Really sorry that you had a bad experience with some seemingly toxic people ☹️
&gt; you would likely be using WP as a framework Except WordPress is *not* a framework. It's a barebones blogging engine. &gt; WP is no different. It's a tool...how you use it (efficiently or not) is up to you. WP people have this idea that WP is some kind of golden hammer, and every problem is a nail. It is not. It is a CMS with very few features. It is not a software platform from which to build complicated applications.
I like OctoberCMS. I have never used it for a project with your use case but I feel like it could be a good mix between framework/CMS that you are looking for.
Just because it doesn't break on PHP7 is not the same as utilizing PHP7.
sure they do, wordpress has some of the best documentation out there and their functions are consistent. Want to add a shortcode in your plugin? guess what, google "wordpress add_shortcode" and it comes up with wordpress's documentation for its add_shortcode function. You want to find an example of how to do something, there are millions of wordpress installs on the web, and chances are there is someone out there who has wanted to do something like what you want to do before and you can find an answer for it on stackoverflow. You want to override, literally anything, you can do that. You downloaded a plugin that has 90% of the functionality you need? You can scan the plugin's code, find the places you need to modify logic and depending on how open the plugin is you can either just hook those locations with your own plugin, or outright replace them if they aren't friendly, without changing a line of the plugin's code. Most free programs, even with paid alternatives, still have very well documented and formatted code allowing extension easily through add_action and add_filter. There is damn near a free plugin for everything for wordpress, and if you need a paid plugin to do the work, its a fraction of the price of a similar plugin for some other systems like Magento. Getting a plugin up and running in wordpress takes 30 seconds. Debugging a plugin is as easy as debugging any stand-alone php. You don't need 4 hours of boilerplate code to find out it doesn't work (looking at you again Magento...). You can make a theme or you can chose not to have a theme at all. You don't even have to use wordpress's front end, you can make your own in react-js, angular, vue, whatever you want and just make AJAX calls to the back end to get content or whatever you need. Wordpress is extremely developer friendly. As a developer that has been tasked with taking over client sites made in anything you can think of, wordpress is one of the most developer friendly CMS systems out there. You need a shopping cart? Add the free Woocommerce plugin and poof, you have a full fledged shopping cart, that's as extensible as wordpress itself. Want to add support for some obscure payment gateway? You can do that in your own plugin that doesn't need to touch woocommerce or wordpress code.
If you take a look at HHVM/Hack it has a bunch of functionality that is missing in PHP. Individual use cases are different for everyone. A big one that comes to mind is Generics. I ran into a use case a few months ago where Generics would have been the a really good solution that wasn't available.
1. Something not carrying 14 years of legacy code for b/c reasons. 2. Something that's not a giant bag of globals. I'm not a WP-hater, and their backwards compatibility is at the same time their greatest strength and biggest weakness. Drupal suffers from the over-reliance on globals also. If a project needs additional features after its initial deployment, there's a good chance things get clobbered.
So older versions are a mess. I won't even try to defend them. PHP5.6+ is pretty good. PHP7+ is even better. There are a few tools that the language is missing that would be helpful. 
I agree 100%. I am writing Laravel apps because I don't need a CMS, but if I need a CMS I would not hesitate to fire up a Wordpress install.
There be dragons. Do your research if you walk down the Typo 3 path, especially TypoScript. You might consider looking at EZPublish. They went through a major rewrite in recent years, building everything on Symfony. It has some pretty neat ideas baked in.
Totally, Laravel is a lot of fun, a little crazy at times, but a lot of fun to work with.
I would recommend Processwire. Although it is little known compared to big one's like WP, Drupal etc it's capabilities ,flexibility and ease of use and develop blew my mind. Multilanguage, which is a pain most of the times, was a breeze with it. https://processwire.com/
Are you sure you need CMS? If you want to use symfony you can just use API Platform (look it up). It's based on Symfony and makes it easy to use and build APIs. And on "frontend" side just use what you like. I looked at many CMS, but not many suited my need, so had to create my own. I wouldn't say that it's that code is perfect, far from it, but it's modular and small, built on top of SlimPHP (for APIs) + VueJS (for interface).
What you just said is true with pretty much every CMS. The difference is, some of them have been updated within the last 12 years.
Give [ProcessWire](https://processwire.com/) a try. There is no default content type (like blog posts and pages in WP). You have pages, templates and fields. You create the needed fields (text, file, date, relation etc), you create a template, assign fields to the template, create a page and choose a template for the page, now you have your custom content type. All of this can be done through the admin interface. There is nothing on the frontend, that is left to you.
damn, you're right, [look at that, no updates for the last 12 years...](https://wordpress.org/news/category/releases/) /sarcasm Wordpress updates fairly frequently. Getting new features and security patches all the time. But, you know, don't let something like reality ruin your narrative.
&gt; "Barebones blogging engine" is just a term you pulled from your ass, there is no such thing as a "blogging engine." Uh, WordPress was built for the purpose of managing a blog. That's what it does. That is the only features it has out of the box. &gt; When you really think about it, what is a framework? Symfony, Laravel, Zend...these are frameworks. &gt; WordPress can literally do anything you want it to do with the right amount of customization. Well, that would just be writing PHP. The fact that you started with WordPress and then wrote code that is only 3% related to WordPress doesn't mean anything.
I'm going to respectfully disagree with the others in this thread. I don't think the reason it's hard is because of bad documentation, I think it's hard because Drupal forces a certain way of doing things, e.g. renderable arrays, the form API, theme vs. module hooks, etc. IME, there are simply more framework-specific concepts a developer must learn to pick up Drupal in order to be a productive developer. I think the contributing community actually has wonderful documentation and examples, it's just thick to jump in. Drupal 7 is a delight to develop in if done the right way, and I've heard Drupal 8 is much more object oriented.
I've worked with WP about 5 times. I hate it every time. I've had the same experience with Drupal. Therefore i don't work either anymore. Life is too short to force yourself to work with product you do not enjoy working with, even if they fit the requirements. As long as you aren't giving bad advice to the client theres no harm, other than to your revenue from turning away projects or subbing them out (which is what I do when they come up). This seems even more important in this case, cause it sounds like a personal project.
The architecture hasn't changed since it was created. It doesn't take advantage of anything PHP has had to offer since the early days of PHP5. For example, it's still using piss-poor methods of SQL sanitation and view rendering, which break all the damn time leading to SQL injection and XSS vulnerabilities. WordPress is probably the most hacked piece of software on the planet.
&gt; WordPress has a hell of a lot more features than blog management out of the box... Sorry, but it does not. Try a real CMS sometime and you will see the difference.
In my experience I agree very much. Tdd is has been invaluable for projects with very specific inputs and outputs and helps define edge cases but even still it seems that my tests always become a burden in anything that isn't functioning as a library. I know it's useful but doing it right for a significant project is so hard I feel like an ass for the teams I've tried to sell the idea to.
&gt; What frameworks are used **if you even use frameworks at all**? Not really, i answer the OP his questions. Unfortunately being anti-frameworks is a sour point among framework fanboys. Reddit has long been a place where its not the answers that matter but more of a reaffirm people there opinion contest. If your option differs, you get down-voted. /r/php .. .say nothing negative against frameworks or you get down-voted. /r/programming ... say something positive about PHP and get down-voted. /r/... Its very normal here ( and in other spots ). Some people simply do not like different opinions that conflict with there's. So they jump on the down-vote button as fast as possible. And i stand by my opinion that the OP is better learning how to actually program his own frameworks and actually know how everything works before going to frameworks that stick people into specific framework markets. This is the **PHP** reddit forum, NOT the frameworks reddit forum. People seem to get confused easily.
Also selectors are amazing. Find all movies with template movie and field name starting with avengers: $movies = $pages-&gt;find("template=movie, name^=avengers"); https://processwire.com/api/selectors/
Processwire. 
The thing I'm always confused about is trying to decide on a stack when you're learning. Over the summer I plan on leading me and a few others in a web programming project for a community, but all of us have little experience with web programming. I'm not sure whether to use a mean or lamp stack, although in the mean case I definitely plan on switching mongo out with mysql
I used to think like that too. Why do people hate on WP when it can do everything, many big sites use it, has lots of plugins/themes, lots of contributors etc. But then I tried processwire and it changed my mind. It has a smaller community and not many contributors and very few plugins (and no themes), but it's much more pleasant to work with. What I like most about it is that I can create fields and templates (custom post types) in the admin area, for WP you need a plugin for that (like with most things). To everyone who only uses WP I suggest you look at other CMS and even frameworks.
So not an answer to my question, just some preferences. Thanks.
Or maybe he's interested in a product following long established best practices regarding package management, autoloading, style guides and interoperability guidelines for DI, Request/Response and such? I get the whole "it gets the job done" mindset but it's still a whole bunch of code smells and technical debt.
The why is in the post :) just read it more carefully
What is your goal in this process, the point of encrypting the images? Knowing that would get you a lot better advice. My default position is that there's probably no reason to unencrypt via the front end when your PHP that's serving the key to your JS (or authenticating it) can do that instead - unless you have a very specific reason. I don't know of any libraries for image scrambling off the top of my head, but it's likely that you'd accomplish such a feat by wrapping functions of the [GD library.](http://php.net/manual/en/book.image.php)
Django.
Seems like an answer to me to the question you asked about better architectural patterns. Both WP and Drupal allow any extension to modify all render output as they see fit. That's difficult to manage in changing or large sites. I see your comment got some downvotes, it wasn't me fwiw.
Build one
I have a foot in both camps. The heart of the application is a singleton accessed through a static constructor that is configured as part of the bootstrap process, at creation it's the responsibility of that singleton to assume control of certain request-wide functions such as session handling by loading helper classes which it stores as private members. Session handling, for example, is done by loading a session helper which exposes something like the Symfony AttributeBagInterface. After that, any other time a component wants to access session related information, it goes through that interface. Other places, such as my internal command classes, require a fair bit of contextual information available to them, and they get their own specialised Context class which provides just that information. If as part of its operation it needs to fiddle around with session information, I might assign it a session property that is a proxy object for the session read from my main singleton, that object may enforce additional rules, such as extra namespacing. It may not be "proper" but I find a combination of the "Application" god object, which is basically just a global service locator, and domain-specific context objects to be the most effective way of structuring my code. I would almost certainly go about this differently if PHP typically had a single entry point without starting from a fresh state each time, but for those frameworks that do handle such mechanisms, they seem to be far from mission-critical ready.
&gt; Same reason why windows has more viruses and malware written for it than Linux or Apple. You're correct that it's for the same reason, but that reason isn't popularity. It's because WordPress and Windows are both insecure architectures by default.
I've already read your article, and provided feedback to it. As I said, there's no "why" there. It has a short history of injection practices talking about all kinds of irrelevant stuff like the merits of autowiring, injection annotations and property injection. **It does not ever speak specifically why action injection is worse than constructor injection.** You said it's too hard for you to explain in a comment. Now I see it's too hard for you to explain in an article as well. You can't explain it, that's the bottom line.
It's actually sad because I can't think of a more versatile platform (drupal8) that is based on a testable, common symfony codebase. For my job, I use Drupal 8 and to be honest, I don't have any major problems working with it. It is still rather new and for larger projects your composer.json will have at least 1 patch reference in it. I wouldn't know what else to use for larger projects. October CMS is my favourite platform as it is bliss to develop on top of, but it just doesn't come close to Drupals versatility and feature set and 3rd party extensions. If you hate the uncached page rendering slowness, a really nice way to get around Drupals cumbersome rendering system (my main issue with D8) is to simply use Drupal as a service backend for a decoupled JavaScript frontend built with angular or react etc. This is good for sites that don't need a customisable frontend UI for the site administrators. I won't even go into detail about how bad WordPress is. I think the user friendliness of the backend aspect is overrated. It's not a strong point anymore. The plugin ecosystem is like looking through a spare parts bin of old car parts and nothing seems to work out for you. So you customise the plugin but then there is no nice way to contribute your code back let alone there being a maintainer on the plugin project because it was last updated 7 years ago.
The pro-wordpress posts here have been interesting. Someone wrote: "Ive had no problems introducing modern architectures, composer, namespacing/autoloading, etc in my suite of wordpress plugins." One of WP's big selling points to many folks is the plethora of ready-to-run themes and plugins. *Most* of those were not written to be dealt with using "modern" tools (some will have instructions on where to FTP your files, etc). If you're going to be working in an environment where you're autoloading and using composer and such... you're already forgoing *some* of the advantages of the WP ecosystem (not all, but some). And, depending on who else might have to work with your system later, if it doesn't follow the "wordpress way" they've come to expect, there may be some support issues later. If you're already looking at composer-based development, you *can* use WP - sure. But, all things being equal, you may find it easier to build more maintainable (both for you and for others who may take it over) stuff with another toolset. 
Or take a look at the TYPO3 Fork neos. The base seems to be the same but in some functions they are diffrent. Neos is created from an old TYPO3 Core developer who dont liked some ideas of TYPO3.
I agree with you here on the basis of being new to Drupal. Otherwise if one is to be working in an agency that primarily uses Drupal, once you have educated yourself Drupal can be a fantastic way to build almost anything. I found Drupal 7 to be the most time consuming and frustrating way to build. Drupal 8 is luxurious as it has all of Drupal 7 strengths bit now I can quickly generate fields, modules, routes, services using Drupal console (just like symfony console) and you can override features of 3rd party modules without touching their code or using any hooks. Config management is awesome and it's about time that configuration can be version controlled, tracked and analysed. I love it.
I'm not OP but I'd say it's not much about browsers that do not support JS, but how accessible the JS component is. And by accessible I mean screen readers and other assistive technologies. Most do work with Javascript, but the component must follow some guidelines and take extra care to comply with them. Keep in mind that some users may be color blind, visually impaired, completely blind or maybe lack motor skills to operate a pointer device. Just test the component. It's very likely that they are accessible. Depending on who your client is, like the government, you're bound to make your content accessible.
Windows isn't any less secure than any other operating system. Linux, Windows, OSX all have fairly similar degrees of security at this point, the weak point being the user. That's why so much malware depends upon, or coerces the user, to elevate permissions. The limited malware that exists on OSX does the same thing. OSX and Linux aren't more secure than windows inherently, if anything you could say Windows might be more secure because its security is constantly being stress tested. There is just very limited selection of virus/malware that affect systems other than windows. Now that OSX is starting to close the gap in market share with windows, its becoming a more popular target and people are taking advantage of that. MacDefender scamware in 2011, 500k macs infected with a single malware in 2012 2017 malware bytes found "fruitfly" malware that had be undetected for years. and OSX runs on top of a variant of BSD which is a unix-like OS similar to Linux. Many command-line programs for linux can be compiled directly on OSX and vice versa. The only reason these don't exist for Linux is Market Share. Once apple's Market Share made it worthwhile, it started getting pwned. Look at the pwn2own competitions, the apple computers tend to get pwned on day 1 or 2, while windows pc's take until Flash is installed. But, like I said before, don't let reality ruin your narrative. Wordpress core is secure, even if it doesn't use PDO for database. And even if it did use PDO for database it is still open for exploitation by poorly written plugins. Nothing is perfectly foolproof, and wordpress is stress tested by being targeted in massive scale.
Still based on php4 style code. No way you can call that modern. Wordpress is prehistoric by modern web standards. 
I'm not OP but I'd say it's not much about browsers that do not support JS, but how accessible the JS components and the SPA are. And by accessible I mean by screen readers and other assistive technologies. Many UI frameworks do work with Javascript, but they must follow some guidelines and take extra care to comply with assistive technologies. Keep in mind that some users may be color blind, visually impaired, completely blind or maybe lack motor skills to operate a pointer device or to realize that content has changed without the browser reloading. Just test the application and fix what doesn't work. Depending on who your client is, like the government, you're bound to make your content accessible.
Well I've developed something like this a few years ago with WordPress, I realise you have said you don't think it fits because of your development preferences Now as the main problem with that project was not technical , but political. You see when politicians are cited in a negative fashion on a popular website , they will flex their influences against the owner of that website
I'm doing a a "reader" to upload and read comics/manga or others books at image format. I'd like to encrypt them to avoid other readers to steal the pages. So the pages have to be rendered as encrypted and decrypted only in my app's front end. that's why I need to have a way to decrypt it in JS. I took a look at the GD Library and that could do it well to encrypt, with the imagecopy functions I think I could do it, but I'd like to do it with a seed, and have no idea to integrate a seed in the process.
At work we use Laravel for all new projects. CakePHP was used before that, so I have some legacy to maintain in that framework. Having a framework just makes my job so much easier in the long-term, that I have no reason to start from scratch.
Who cares if the core supports 5.2 you can write bleeding edge code on top of it if you’re creative 
Well, unfortunately if you send the details to your front end to decrypt it, you're giving that information to scrapers too. At the end of it all, you can't stop people from taking your content if you want your content to be publically available. If you want to make it harder though, there are less computationally expensive methods than encryption. Simple rate-limiting of image requests on the server side (like using Apache's mod_cband to restrict simultaneous connections and connection request times) would probably do more to help you. [If you're dead set on image scrambling, maybe take ideas from this old stack overflow question?](https://stackoverflow.com/questions/21488788/scrambling-an-image)
Hey, UnusualBear, just a quick heads-up: **publically** is actually spelled **publicly**. You can remember it by **ends with –cly**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
But [MongoDB is web scale](https://youtu.be/b2F-DItXtZs) .
delete
I use pchart for server side. I guess client side with wkhtmltopdf would work, but it seems like a pain.
How about Google Image Charts? Deprecated (they want you to use the JS library now) but it still works. https://developers.google.com/chart/image/
Client side + wkhtmltopdf is what I've done. Worth it to use all the awesome js libraries.
Linux and Windows are very similar to how their user systems operate, both Linux and Windows can have super users, windows calls them administrator users. But to perform any task, you have to elevate your permissions, in linux its through using "sudo" and then your own password then it verifies the user is in the in the sudoers allowed list and runs the action. In windows, (this is by default, you can disable this functionality by disabling UAC, but no one has recommended you do that since windows Vista) every action is performed as a local user, when an administrator user action is required, it elevates the permissions and asks you to put in your password to elevate. All 3 major OS's (OSX, Linux and Windows) function this way, admin user runs with lowest privileges, and then escalates when required. The only difference is with windows you can turn this off. Wordpress has an amazing developer API, which shows you don't actually use it if you think it has a shitty one. Themes are just plugins centered around displaying your page, you don't have to put logic in themes, you can have just the templates in themes and it'll work perfectly fine. People embed logic in themes to enhance their theme's usability, but all of that logic could be offloaded to a plugin as well. You also don't even have to use wordpress's default templating system, if you want to use Twig, use Twig and use API calls or direct database reads/writes to get content. Or you could use wordpress's templates and build a small template that does exactly what you want it to, or you could find a template and child theme it so you can extend it while not breaking it for future updates. Or you can use a template and extend it with a plugin. Literally anything is possible in wordpress. Its very obvious you don't really know what you're talking about, and have little to no experience of import because almost everything you say is wrong. You should stop parroting what other people who don't use the systems say about it and listen to the people who actually use it. Sure your opinions were valid 12 years ago, but wordpress has changed a LOT in 12 years, even if you don't think it has.
Do you actually need a CMS (which generally includes page authoring/publishing tools), or do you just need a framework that also has a barebones application already fleshed out for you? You might want to check out [UserFrosting](https://www.userfrosting.com), our "framework++", which is built with Slim, Twig, and Laravel's Eloquent but has all of the typical user registration/login/management features already fully implemented. Join us in our [chat](https://chat.userfrosting.com) if you want to discuss your project's requirements further!
Drupal is a pain in the ass, but I'll fight anyone who thinks you can get more functionality out of the box from a CMS. If you can learn the drupal ism's and deal with a bit of insanity in your life Drupal is actually a really flexible cms with a real huge amount with just some configuration.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [composer/installers/.../**WordPressInstaller.php** (master → 5d15e4e)](https://github.com/composer/installers/blob/5d15e4e9aab1da3a622678bdaaa4f7d57d150923/src/Composer/Installers/WordPressInstaller.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxwyeag.)
Giant monolithic framework, BC breaking minor changes, no LTS. Documentation is ok-ish problem is there has to be so much of it for a giant framework that you'll never ever truly master. All in all if you know how to use drupal it's the most power cms platform out of the box and you can easily build out an entier moderately complex frame work in only a few hours. However you pay for that with a steep steep learning curve because drupal is very unique, and maintenance can be a bitch with security updates because they only support 2 minor versions back, and frankly semantic versioning doesn't mean crap in the community. Also most devs really hate that the majority of data modeling should be done from the GUI and then exported into code. It's an odd workflow which breaks down as soon as you have 3-4 devs on a project. Drupal certainly has it's pro's and if you invest some time in it, it's a very very powerful tool. It's not however appropriate for anything mission critical and don't believe a lick of the 'enterprise' garbage they sell.
The Migrate API is really great :) I just moved an ancient huge Plone site to Drupal 8. The migration worked flawlessly :)
If you think contexts and dependency injection are mutually exclusive, you probably are so used to auto-wiring, you basically think that's dependency injection. So maybe ironically you have more to learn about dependency injection.
Excellent. Love xdebug with phpstorm. 
&gt; maintenance can be a bitch with security updates because they only support 2 minor versions back this is misleading. Drupal supports the all version 7.x and all version 8.x of their CMS, which i believe you'll find quite standard (if not generous) with most software projects. Drupal 6 was released in 2008 and there has been **very significant** changes to the underlying systems after each subsequent major version was released. Keeping security up to date in a CMS that was released 10 years ago is rather unfair to ask an open source project to do. &gt;Also most devs really hate that the majority of data modeling should be done from the GUI and then exported into code. It's an odd workflow which breaks down as soon as you have 3-4 devs on a project. This is no longer a problem in v8, as with the addition of configuration management, those entities and fields are easily exported to code and versioned. &gt;It's not however appropriate for anything mission critical and don't believe a lick of the 'enterprise' garbage they sell. It's been used to power many enterprise sites, whether you believe it or not.
&gt; The same thing that makes any legacy monstrosities so hard (phrasing). There is a huge mass of existing code (plugins) that was written without current best practices and now Drupal can't break them. Just like WordPress, Magento, or other project that has been around the block for a while. This is entirely inaccurate. While WordPress does guarantee that their code will maintain backwards compatibility, Drupal has never made this promise, in fact they have broken their backwards compatibility on the last 2 major releases (d7 &amp; d8). There are certainly some major pain points when it comes to Drupal (upgrading old versions being the classic one), but being beholden to ancient code is not one of them. Many of your problems with drupal still are in place (the database joins can be a pain point if you don't use an ORM), but the Drupal team certainly has addressed some of the issues you brought up.
Drupal. Give it a try. It has all the functionality you mentioned out of the box. Just one note, if you're in hurry, you'd better pick Drupal 7. Its mature module base is better than Drupal 8. And in case you need a customization in code\(a quick change in core\(not recommended at all!\), or module development\), its much easier to do so &amp; a great rich document/sample base accompanies it. The only drawback for using Drupal7, is that you have to upgrade it ASAP. But if you have a very limited time, Its best choice IMO.
Do you think [CSS-Tricks](www.css-tricks.com) was built by someone who 1. Isn’t really qualified to do the job, and 2. Because they have the lowest skill threshold? I wasn’t aware that all web apps or web sites written in Flask, Django, Laravel, Node, Rails app, etc were written by the most qualified, most highly skilled programmers that exist? Are you saying that using Wordpress automatically makes the programmer the lowest skill threshold? Or Are you saying that it is impossible to use Wordpress and be considered a skilled programmer? Or are you saying that everyone else who uses Wordpress is coding is automatically unqualified and therefore going to automatically make some poor programmer in the future cry (from having to deal with legacy code)? I don’t get your example? You mention one project, put together by someone you consider unqualified to get the project done, except that the project continued to exist long enough for you to be hired to work on it. And your argument is just unhelpful. What do you think the developers and users of the websites that power most of the web - what do they think Wordpress is? If it’s not a platform? What the hell is it then? More than likely, the way you learned to code, by the people who gave you tutorials and who you follow, listen to and admire, it is more than likely that these teachers are using Wordpress to teach, educate and inform you! The OP has a hard-on against Wordpress for some ignorant, biased and technically incorrect reasons or perhaps definition for “modern standards”. I addressed that. But your comment just perpetuates bullshit reasoning (which is your opinion of a previous coder hired to work on a project you now think was coded poorly) based on apparently one project that you worked on and absolutely no solution to their question. 
&gt; i upgraded to PHP 7.2 and got errors on the `count()` function No you didn't. You got warnings, about bugs in your code. If those warnings broke something it's because you're treating warnings as errors (terrible idea in a prod environment). The 31 people who unanimously voted in favor of this change didn't do so on a whim, they considered the cost/benefit of treating broken code (yours) as valid against the lightweight penalty of raising a non-fatal warning. I didn't vote on that one, but I would have voted for it as well.
Cakephp is nice if you don't mind putting in a bit of work..
I do a lot of this at work, and honestly using composer and other modern practices for development doesn't mean you forgoe the WordPress way. In fact, to make your stuff work you still need to integrate it into the WordPress ecosystem the same way as you would otherwise, you just get the benefits of a modern development workflow with it. I would second roots.io heartily as well though, I use it and Sage as the basis for anything new I do in WordPress. 
I would do something similar. Most of those libraries spit out SVGs, so I would run on the server using node.js then save SVG as another image type
I think compiling from one interpreted language to another interpreted one is considerably different than an actual single interpreter running to actually execute code. I can write in plenty of languages but PHP is still often the right tool for the job, whether it’s writing a simple web service or a full blown app backend. 
Nothing you just said is correct.
But when the data is definitely relational, it's worth it, and it's not _that_ time consuming, especially if using something like Laravel's migration and seeding classes.
Check out [UserFrosting](https://www.userfrosting.com) - we're specifically geared towards helping devs like you get up to date with modern PHP!
- What is the difference between passing `UserId` instead of the original `User` before `Context` entered the picture? - Wouldn't the solution in that scenario be to pass the result of `getSettings()` instead? - If `settings` still needs to fetch more data to provide User/Profile/Settings wouldn't that also mean any other parts of the application that need something along that same chain will fetch that data twice, or will increased memory usage be necessary to prevent multiple round trips to the database (which then incurs additional costs for managing freshness of the data in long running processes)? It feels like the overall complexity of the application hasn't changed/improved, all this really did was revert back to how things were before the introduction of Session / Context for passing process state?
Drupal 8 is better suited for a modern JS frontend enabled, or web service generating site. And composer driven development. D7 is great for simlpier boilerplate sites.
I don't really know about licensing but PliKli will soon be on github.
Lua has integers now as well. Also, lua used to use doubles so it's not too bad (no idea if JS uses doubles as well). 
And if they still ran on HP/UX would that be reason to use that operating system as well?
CSS tricks is NOT an enterprise application it is a blog i.e. the sort of thing Wordpress was designed for.
&gt; Composer (made by the same developers as the Symfony framework) I think that's not true. Composer and packagist are developed by Jordi Boggiano, who also made Monolog, but as far as I know he's never worked at Sensio Labs.
I'm thinking Laravel and Symfony (specially Laravel) are "Ready to go" enough. They have abstracted away lots of procedures. These frameworks are well structed to make advance applications as you said. Of course some CMSs might be more straightforward but they also may implemented an architecture bothering you. So I would suggest do such advance stuffs using Frameworks standaloney. But if you insist on using a CMS as your base code skeleton I would recommend you comparing their workflow and mechanisms make them ready to work by yourself.
So this is practically a SoloLearn ad with some basic facts about PHP.
Seconded! 
If you've never seen Migrate for Drupal 7, do take a look. I guess Porter appears to take an api-ish centric view of import data. Migrate Sources may be anything -- a file, web call, DB, etc. Obviously, Porter is platform agnostic, while the Migtrate framework is tied to Drupal but can be wired for any source/dest systems supported by the Drupal platform. I'm curious why Porter doesn't appear to have any pre/post data fetching methods for the "import lifecycle"; I find this typical when moving data between systems regularly. Eg: https://www.drupal.org/node/1132582 Anyways reading the porter v4 docs was fun. Should I be outside of Drupal I will look to it. 2 other notes: don't look at the D8 Migrate Core Initiative, it's less stellar. And 2 you note import tasks must be sychronous in porter 4x, async in 5x. For either case look at source data partitioning as a means to speedup ingestion,D7 example (boo not in D8): https://www.deeson.co.uk/labs/multi-processing-part-2-how-make-migrate-move Migrate D7 docs home: https://www.drupal.org/migrate 
Want to second this. The codebase may not be what you're used to (from the perspective of modern frameworks), and there is a learning curve; but it puts the focus on application logic. Their LTS and backwards compatibility are second to none.
Agreed on both fronts. It comes down to this: do you need ACL, a shit ton of turnkey functionality, a bunch of tools right now or can you just develop an API and figure out the rest as you need? Drupal is beast but it does so much and honestly doesn't have the worst learning curve if you take things one problem at a time.
Lots of answers already, but [kirby](https://getkirby.com) might just be what you're looking for. It's a very lightweight text based CMS (so it's very fast and super easy to deploy).. I have found it to be terrific with a huge plugin ecosystem (of very high quality) and a great community. You have to build stuff yourself, but it provides what I find to be just enough help to make it easy without saddling you with a lot of overhead.
At least add a phrase in your headline, that this is just an ad for your company.
That is not commenting on the architecture, but the behaviour both of code and of coders. Architecturally WP is quite dull in PHP land. It's a 3-tier monolith with plugins. It doesn't really follow many patterns cleanly. I don't know that I'd call the hooks event driven. They do look like early events from C projects I've worked on, but yeah the rest is either too detailed to matter on an architectural level or undeliberate. From a digital architect perspective the monolith keeps things simple for now, and whilst anything with plugins can be tricky, they have ways to monitor what is happening when and to stop plugins from performing filters or actions. Downvotes are the bread and butter of reddit, IDC about votes either way. I do enjoy a spirited discussion as long as it's not about aether or other made up things.
We are building an application on Craft right now, basically leaning on craft for some site request features but more so leaning on its yii2 module development. Top notch!!
What you are teaching with your course is a shitty PHP from 1990-x. 
&gt; You simply download all the jpgraph class files and bung them into a location on your webserver. erm... you mean with composer right?
Years ago I did something with highcharts. It's quite a good graphing lib, and they have a cloud service that can export a dataset to PNG, pdf, or whatever you want. It's not for everyone as using a 3rd party is not always an option, but might be a solution to some.
&gt; Indeed, it’s doing so much that you cannot call its action methods directly; you have to use the dependency injection container not only to build the controller object but also to invoke its action methods." 
KirbyCMS might be a good choice, it's flat file, no database required.
Depends entirely on the use case. Drupal still has shitloads of functionality that you would be downright irresponsible to code yourself. It's a steep learning curve but I actually think the spaghetti code has improved a lot in D8
&gt; A constantly breaking public API How so? I agree with the documentation bit
I've used successfully Sonata CMS aka The Symfony CMS. https://sonata-project.org It's good to build quickly a nice standard backend.
You could write small static analysis tool (this is much simpler that it sounds) which could check how dependencies are used across controllers. Also it's good idea to enforce some boundaries between application parts (also via static analysis). I also had experience of writing some kind of code styleguides but static analysis works better enforcing people to read it.
&gt;I guess Porter appears to take an api-ish centric view of import data. Not at all, and I'm not sure where you got the idea that Porter is just for APIs. To quote the docs: &gt;we hope the PHP community will rally around Porter's abstractions and become the de facto framework for publishing online services, APIs, web scrapers and data dumps. Porter is just an abstraction. [Connectors](https://github.com/Porter-connectors) can be written for [local files](https://github.com/Porter-connectors/FileConnector), [HTTP](https://travis-ci.org/Porter-connectors/HttpConnector), databases or whatever, too. 
Awful on Ubuntu. Like CTRL+F works only if you do a sacrifice, otherwise it is unfocusable. Sometimes the same happens with double shift and CRTL+SHIFT+F does not work at all from time to time. Rolling back, this situation sucks. Tried everything...restoring defaults, restore vmoptions. Nothing works. They are event ignoring report in youtrack. Good job!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [nahidulhasan/laravel-docker-k8s/.../**secret.yml** (master → d0b6ec5)](https://github.com/nahidulhasan/laravel-docker-k8s/blob/d0b6ec5f9a3eff07da28b9f3f2078d9a24795f16/deploy/app/secret.yml) ---- 
There is https://packagist.org/packages/jpgraph/jpgraph 
Correct, however most websites/apps store the database on the same server. You can apply encryption on the database, files and folders OR at drive level. Encrypting the whole drive/partition is a simple way to secure your data against physical risks /computer or hard drive theft etc. As to the reason why you need encryption, if you store ANY personal data such as names or email (or even IP address) then yes you need the whole thing encrypted. Having your own secured server in-house is a great way to keep things under control and secured (but with obvious disadvantages, of course). You don't need to encrypt your code, obviously - but rather have the measures in place to prevent alteration of code and upload of malicious code, that's a different thing altogether, of course.
ok. I'll bite. Tell the lead developer to start considering security before doing anything else: - this is not a proper way of hashing passwords function generateHash($plainText, $salt = null){ if ($salt === null) { $salt = substr(md5(uniqid(rand(), true)), 0, SALT_LENGTH); } else { $salt = substr($salt, 0, SALT_LENGTH); } return $salt . sha1($salt . $plainText); } - this is not a proper way of preventing SQL injection return addslashes(strip_tags($var, $allowable_tags)); And that's just from a quick 5 minute look into the register user file.
- PHP 7.2 is the latest PHP version, PHP 5 is outdated, don't use it for new stuff. - We use Composer for dependancy management, equivalentto NuGET and Maven in the .NET/Java world. - Top-dog frameworks in order of popularity: Laravel (latest version 6.5), Symfony (lastest version 4), Zend Framework (latest is v3) - Apache Module, or via PHP FPM behind an NGINX proxy (allows multiple php versions on same server, this is what Laravel Forge does) - You can build modern SPA-type sites by using PHP for the API and whatever frontend framework for the actual client side (VueJS, Angular, React, whatever), other than that, all major frameworks usually route all requests through a front controller (so all request actually go to index.php, and is parsed and sent to the correct place within the application), the old index.php, about.php, admin.php style of building sites is mostly dead. 
Why is this downvoted? Backpack seems like a flexible CMS solution.
It does!
Thanks!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The examples are quite contrived. This is common when people talk about Context, because they already have the cultural/mental predisposition to talk about Contexts as if they're a global registry of things you pass to everyone. That's clearly not the point of Context, as its own name suggests, it's for contextual aggregation of items used together in a specific context. It's not to contain everything, and it's not to be given to everything. I have medium-sized apps with 30-40 distinct context-like objects and none of them have one thing above what is needed in a given... context.
You're not far away from relying only on contexts for your app (the context can contain link to the relevant services in your app that your "god object" holds). In my apps the service layer is a tree of services (sometimes 2-3 trees, but typically one), and if you pass the root service, you're essentially passing all services. Concrete control to each service's features is controlled via authentication tokens, which is the same exact mechanism used to expose services over HTTP and other protocols. Isn't it interesting how REST advocates would tell us how important it is to have *all services* be accessibly from one starting URL, while the exact same thing is being called a "code smell" and a "bad practice" for internal services? Well, my internal and external services are the same, and I don't like implementing things twice. 
&gt; Great, thanks for avoiding the meat of my comment that describes what a framework is and how WordPress fits the definition. Symfony, Laravel and Zend are indeed also frameworks. A framework does not do anything when build from scratch. Shows a Hello World maybe. Wordpress on the other hand is a working blogging platform out of the box.
You could always render an html or svg chart to a png using something like chrome headless or wkhtmltoimage
I've been migrating a Drupal 7 site to a Drupal 8 site, and it seems like every minor change 8.3-&gt;8.4-&gt;8.5 breaks something. And every time there's a new minor version I hear "okay, this is the stable one"
Thought i was going crazy for a while now! Thanks a bunch, applied and noticed performance boost straight away
I'd recommend eZ Platform (eZ Pubish). It's architecture is heavily based on Symfony, even the file structure is the same as the default symfony app. It's legendary on content (multi language and multi site), and you can write custom app functionality just as you would in a standalone Symfony app. I find it fun to work with because I feel my code is not specific to the CMS but rather, to Symfony and its toolchain (doctrine, twig, etc.). The downside of eZ is that it can be hard to grasp some new concepts like e.g. siteaccess, location/content objects, view types of content etc. But the doc is quite easily read. If you consider using eZ I'd suggest installing (composer install) Netgen Admin UI on top of eZ Platform, because its superior to the new standard admin UI that is not very user friendly at this moment. But that might change over time.
Password hashing will be changed. Since it has to support old versions as well, we'll be changing hash for the users logging in. For absolutely new websites, they'll have newer hashing by default. That data is getting cleaned with mysqli_real_escape_string() before going into database. There are escape() and sanitize() methods to clean up all the data before putting it in the database.
&gt; If you are using Mozilla Firefox browser and it has Tracking Protection feature enabled, you may have issues in getting content loaded from Social Media websites, such as – Facebook, Twitter etc. These features include Social Share Counts, Social Avatars, Social Comments and Social Login. Really not selling me on the idea of disabling **TRACKING PROTECTION** so I can use their stuff.
They should probably fix that... lol
It is supported, but mostly not one click. If you have custom fields etc. it can require some configuration for the migrations to work. All in all Drupal and Wordpress have hugely different target audiences, smaller websites run beautifully on WordPress but when you have more custom work or your own business logic I find Drupal to more flexible in realising what the client wants.
I've been dealing with this issue for well over a year now. I switched to greyscale fonts a few months ago, and it's useable now, but still not great. There have been some improvements in recent releases of the jetbrains JDK, but it still isn't fixed. At this point, I'm not holding my breath that a proper fix will arrive any time soon.
Except row-based encryption comes with its own issues, such as the impossibility of proper performing fulltext search. Otherwise it would have been quite useful.
No, simply download the library from the jpgraph website. It does not need installed as a package. https://jpgraph.net/download/download.php?p=18 Just download the tar.gz and un-compress it into a folder somewhere on your webserver (I use /usr/local/share/jpgraph) Be aware, there was an issue with PHP7 compatibility that I ran into, cannot remember exactly but it involved editing a PHP file somewhere (I googled it!) 
Haters gonna hate. I am making more money with PHP than the guys around me that are shitting on the language an d favoring node or other. Thanks PHP without you i won't have car, home, etc. Haters gonna hate. 
You're right. This whole thing will be done in this week then (PDO + password hash). Before promoting any further, I'll ask the lead developer to fix this. He is aware of these issues but he is avoiding it right now because of a lot of core modifications. I'll also help him in this whole revamp. Thanks a lot for your points.
you should *not* be doing that lol
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Interesting, thanks for this! I'm assuming it affects all of their IDEs. My main fonts are Operator Mono, Fira Code, and Inconsolata. I believe it mentioned it's in the JRE so would this be a JetBrain's bug to fix or an Oracle one? 
&gt; It is supported, but mostly not one click. Just on this. My local Linux group migrated from Drupal to WordPress because a lot of their modules didn't work from 6 to 7, and it was a lot of effort to maintain. I'm still waiting for some examples of &gt;5 year Drupal projects that have stuck with it through a few upgrade cycles.
Well, this *was* written partly in response to [a very frustrating exchange on an open source project](https://github.com/friendica/friendica/issues/4442) wherein someone in a position of authority/influence on one of the projects they federate with (and therefore cannot break backwards compatibility with) defended their use of RSA-PKCS#1 v1.5 because they couldn't grasp the concept that "PKCS#1 v2 is OAEP not PKCS#1 v1.5" and refused to listen. There's probably a lot of code that uses RSA encryption, [Minds](https://motherboard.vice.com/en_us/article/pga9xz/that-social-network-app-backed-by-anonymous-uses-weak-encryption) does. Friendica does. Diaspora does. RSA-based cryptosystems are strangely common in "hacktivist" projects created circa 2010-2015. A lot of the newer ones use NaCl/libsodium.
tools - composer - xdebug - testing (unit, api, codeception) frameworks - symfony - laravel - codeigniter - zend hosting - EZ mode, FTP to apache with php installed - better mode, containerized deployments - docker modern websites - you might be looking for a cms. otherwise any modern framework will get you creating pages and querying databases pretty quickly - instead of mantis, i see a lot of jira and github issues - instead of script per page, nowadays we often route traffic to a single entrypoint and then use routing to instantiate controllers and methods. check out the routing in any modern framework
Perhaps https://github.com/symfony/polyfill can provide something useful. But making a 7.1+ rewrite seems to be the best option in the long run. 
Ive also observed a lot of /r/iamverysmart level attitude from really smart in the software industry that could be explained by other insecurities. Maybe it’s not always about fear of competition or insecurity about one’s own skills, it could also be that this is an area of opportunity to assert one’s superiority to compensate for insecurities in other aspects of life
¯\\_(ツ)_/¯^¯\\_(ツ)_/¯
I have retrieved these for you _ _ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
One of the developers said they can fix it on the IDE level by using other graphics libs, but it’s a big task to do so.
This is why doing development in general on osx sucks. Please people for crying out loud, move to a usable operating system like linux. If you write code for a living, stick with the platform which best suites the needs of your code, not your personal aesthetic. Linux too can look sexy, just look at /r/unixporn/
What you talking about youfuckingmongo? Elaborate?
For this very reason, I used vmware workstation for mac, and installed ubuntu w/ 8gb of ram and used phpstorm on that :) and since mac these days uses ssd, it was pretty darn fast, plus it's fun to fool people into thinking i'm running linux on a mac, which I also ran natively for a period of time.
Lol just actually read your whole post. With regards to emailing a chart, I gave up trying to attach a chart due to fussy clients, firewalls etc. I ended up simply embedding an img tag in the email body looking at the chart png (png image created with jpgraph) url on the server. This is coupled with a hyperlink to download the png chart, the download script then deletes the chart.
Third this year. Before that it was 2016.
&gt; Style and Approach &gt; I find things line up more nicely when you put the opening brace on the next line, for a method with a typed return and an argument list that spreads across multiple lines To me it seems this is because even methods with just a few type hinted arguments span over multiple lines here? Which personally I'm not a fan of. I _hate_ lines longer ~100 and I do value vertical space. Almost more. It makes more sense to me to always break on a fixed algorithm. Easier for humans and machines (which currently is 120 for me 🤷‍♀️ I wish it were 80, but it's not practical). Besides that: wow, the whole eco-system created looks impressive on a first glance. Not sure I'll see the time to try it though.
"Why wouldn't you use Drupal. It's a proven solution, everyone uses it, stop reinventing the wheel" they said. And of course, I didn't listen.
It's literally the first line of the article: &gt; Yes, of course once again—literally it’s the third time in last 30 days.
WordPress content is more strictly defined, making updates more easy. With Drupal you can create completely custom content types just by clicking around the CMS a bit. This makes migrating between major versions harder, the times I've done it though the migrations have worked wonderfully. Basically you have to define a mapping between the old content structure and the new; after that the import is a process which just needs time to run. I've done this years ago; between 6/7. I believe they put some more effort in migrating 7 to 8 and have promised even better support for upgrading 8 to future 9 releases although I do realize that's an easy promise to make if 9 doesn't exist yet. Examples I can't give you; the clients I've worked for mostly chose to rebuild websites instead of upgrading. The clean slate gave them the chance to make big changes. Both content management systems have their purpose. WordPress out of the box offers a much better user experience than Drupal ever will, but some sites just are too complex to do with WordPress, and that's where Drupal comes in.
And yes ... the article answered that :) Which is my point exactly ... because - well - Drupal has had so many flaws (not exactly in the last week, but ... throughout history) ... who in the realm of security is taking them seriously any more?
These objects are useful in "main partition" - infrastructure around application: routing (trees), composition, main layout data for markup format (when plugged-in properly). The point is to keep context objects away from domain code, because it's forcing unnecessary work when delivery channel changes. For example to import records from file you may need to create user objects with given id only to get the same id back within domain layer.
you can set the anti-aliasing in the ide properties file, as the blog author does the JVM options in his previous blog post. Don't see why he doesn't just do it there to be consistent. but whatever.
I respectfully disagree and would say Drupal gives you a UI to make those changes whereas WP doesn't. Thing is that WP pretty much accepts that for those more complex areas you'll be directly querying the db or using a f-tonne of plugins, so they can offer seamless upgrades no matter how "advanced" your features. There are some WP plugins that complicate that process, but it's more or less turn-key and after years of making bespoke systems, using frameworks etc, eventually it became clearer that I had happier people when I was using WP than when they needed bespoke features (people are cheap even if their revenue is going up by 30% and you remain &lt; 10% of costs)
Looks very cool! I'll check it out!
Is there any particular reason Drupal 7 doesn't use auto\-updates on core systems, with an Admin option to disable? 
Their target market is an enterprise end user who doesn't run updates in production the way an autoupdate system would have to work would be my first response (essentially they're the ones who do the patch, commit, deploy through CI type stuff).
that makes 100&amp;#37; sense. I'm just dwelling on this one client who bitches and moans about any money they have to pay work wise, and they are not the kind of entity that should be using Drupal \-\- for exactly the reason you say. 
I consider this requirement inherently flawed. A "web application" (buzzword for feature-rich websites) is about domain-specific content edited, maintained and presented in a specialised way. A CMS is about generic content presented edited and maintained in a unified workflow and presented in arbitrary but mostly generic way. For example for editing sports data a classical CMS would be a really bad choice because sportsdata is highly relational and an editor should have all related entities visible in a constrained graph. And he will need to edit many different data structures in one go, not one entity at a time. Imo the only domain where generic editing is adequate is news/blogs.
&gt; How do you host PHP? Apache with the PHP plugin? State of the art is php-fpm with either Apache &gt;= 2.4 and mpm-event or nginx &gt;= 1.8.
It would be a lot more bearable if there was a phpdoc standard for specifying the keys. Then at least it would be right there above the method/function and IDEs could parse it.
Totally agree, unfortunately it's probably too late for most of us PHP developers. Codebases all around the world are full of untyped multidimensional arrays. If you consider the kind of argument that receives named options like ['auth' =&gt; 'x'], then it's hard to find a library that's free from this problem.
If only inner classes were a thing. Or even classes that could be autoloaded smartly without dedicating a file for them.
&gt; They're not going to make $_SERVER immutable as that would require everyone to use an HTTP Request abstraction library. Imo this would still be a good choice for a new major version such as PHP 8.
Another week, another critical security vulerability in Drupal.
Are you using an auto loader? I’ve found Composer + PSR name spaces work quite well, so much that I’m not too offended by having 1 file per class, even small ones. I have mixed feelings about inner classes but I do agree they come in handy.
damnn that's a great idea. just looked around and looks like it's been in the pipes for *6 years* https://github.com/phpDocumentor/phpDocumentor2/issues/650
yeah, i agree it's pretty widespread. i just wonder if others agree that it's worse than using classes / structs, i sure prefer classes
I can't agree on your "one query can be worse than multiple" argument. A "select 1" is always faster then 10x "select 1" in a normal php use case. I can agree that it may not matter, is impractical, is executed wrong or is simply the wrong idea. I completely agree that overly complex sql are problematic and dangerous. Weird nested selects usually indicate that you should fix the data, especially if it is regularly used. Also your description of copy on write is wrong/misleading. This should fix it: https://stackoverflow.com/questions/628938/what-is-copy-on-write
The pros of arrays as params is that it's concise and easy to read so it's not 100&amp;#37; bad. But yeah, if they could implement an Interface or something so that the IDE can provide some good autocompletion, that would be great. This or maybe named parameters ?
You're repeating again and again that you don't like changes on functions you call "essential". But you never seems to questioning if you or others may used it wrong in the past. Yes they fixed a bug that was there for ages, but it was a bug. Complaining about the fix of a bug is actually bad. Youou should more complaining about the code who was written bad or about testing the upgrading before it goes live. I hope they'll never close a shortcut or path in your living area, that you used for ages and is therefore essential for you, even it was never an official one. Life and programming languages is about constant changes. And repeating the same wrong statement doesn't make it right.
He is probably talking about the mysql query cache. Which simply does cache the result set and rerutns it if the same (literally) query is executed again. This feature can be highly problematic and is removed in feature versions of mysql. So I would rely on it too much. (https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/)
If phpdoc had support for that, or docblock only enums and for specifying function signatures, I'd like writing code in PHP so much more. But they seem to be dedicated to coyping JavaDoc and JavaDoc doesn't have those because Java has enums and specifying function signatures (via interfaces, ugh) built into the language, thus giving no reason to duplicate this information into the docblocks.
http://www.phptherightway.com/#dependency_management
I don't like it very much either, but I will admit I am guilty of it sometimes. In my defence, I document all the expected keys and what they do in the PHPDocs of the method. Doesn't help with autocomplete, but it's better than nothing. I just read another comment mentioning creating a class for it. I'll have to look into that because I like that idea, too.
Are these security patches really that much of an annoyance? I think if my site was hacked if be more annoyed. Why do people see these patches as a bad thing? It's not hard to patch.
I've heard this answer many-times, but never see a real implemenation. Do you have something like that? Could you share link to Github? Sniff would be awesome, I'd add it to the post
&gt; Neither should be a trouble for Symfony controllers though, as those are supposed to be tied to actual routes, and redirection and/or reuse of controller action should happen by Symfony helpers. Agreed. That was exactly how this code smeall got into code base. "It should be used only in controllers and it should stay that way forever". But then senior left, junio came, saw this pattern and casked himself: "why should this awesome feature stop at controllers? let's use it everywhere to save unused dependency injection and too long constructors". And that's what I wrote about and how it went wrong to legcy application, even when initial intentions were good. Btw, do you use this feature in your applicatoin?
Yep, that's what value objects are for: https://github.com/Symplify/Symplify/commit/90ade14ce6c04474b119fccb81b0c0e7dd5707ac#diff-bbe0dc3024bd73862598d89924d3f8fe
All projects have security flaws, you'd be a fool to think that anything as complex as Drupal would be created without any security issues.
that's what happens when you include a WSYWIG editor in core. 
Surprised nobody's mentioend it yet, but: I wish PHP had gone with having named parameters / kwargs / whatever you want to call them. function bleh($x, $y) {...} bleh(x =&gt; 10, y =&gt; 20);
If issues like broken links, missing documentation or other things that prevent you from performing the task are present: Report it. Its a situation where you can lose and lose. If test is broken, the manager may not want to admit it ( be careful if that manager has a frail ego ). If you fix the and deliver the project ( at your time and expense ). What is there stopping the manager from sending that same broken test to other developers? And the manager can simply assume it took you so long to deliver the content because your not good at your job... When you just fixed all his mess! So no matter what you do. Report it... As a employees who is getting tested, you expected to get working tests. And if they are broken as part of the test, you needs to be clearly informed about it. I am betting that the manager simply has had these tests for a long time laying around, resources got shifted, configurations got changed ( and broke the tests ) and he keeps reusing the same test without testing it himself. The "Kobayashi Maru" is a test where people know its unwinnable ( unless you cheat :-) ). Hint ... did other people need to do that test? Hint hint ...
Joke on the if they were using nopejs
Specific examples tho? I've not had that experience
&gt;programmers in charge of escaping
So... up to anything in PHP land?
ooOooo that's nice! that would be very cool to see in php
i don't agree that they should of went with that *instead* but optionally would be interesting
Hey, lune-lute-skimp, just a quick heads-up: **should of** is actually spelled **should have**. You can remember it by **should have sounds like should of, but it just isn't right**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
yeah i usually make classes for my arguments that aren't 1D arrays. i mean, i think we all do it occasionally, but if it's more then like 3 keys and not properly documented, objects seem a lot more sane
ok fine, bot
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yes, I understand what you're saying. You don't seem to understand that I'm saying you're wrong. The count change didn't break anyone's code. Not even yours. The most it did was alert you to an issue while blithely continuing ti function as it always did. Your premise is based on a false foundation.
You are not alone. I usually do make struct classes for largely this reason. And before someone starts bemoaning the "perf impact" of making a class, there isn't one. Or rather, the negative of having the class definition is balanced by having foxed property offsets in a more compact structure. So don't sweat the perf.
The first critical flaw was that it's Drupal.
okokok
Its a test that was supposedly used for years and years. Even without canon evidence, it stands to reason that the rumor about a unwinnable test has circulated among the students. Even in the original ST or other timelines. I do not belief in the theory that you can expose students to the same type of test for so long, without them getting wise about it and the rumor mill doing its work. Maybe every new class was thinking: "those old farts before use did not do it right, we can do better"... sure. But at some point people figure it out :)
Once I'm done with moving countries, maybe.
I can only say, you clearly operate in a business with sensible management. I don't deal in Drupal but if I did, all my sites would be vulnerable to the first incident because I'd be sitting in change control hell getting the patch applied.
The last bug was “let’s use `eval()` on input.” So... I’m guessing they’re not too clever?
Do not feel bad about programming in PHP. Most of the hate comes from complete ignorance of the language and where it is today. I love programming in Node/React/Redux etc but I also love working with PHP. I work in San Francisco as a PHP engineer making a very healthy salary working on some of the biggest names in Tech. You'd be surprised at how many major companies have WordPress even as their backend framework. I've learned that programmers, especially front-end engineers think the entire world revolves around JavaScript and everything else is stupid. Then go on to install 40000 node_modules dependencies and have no idea what any of them do in a production environment. They see PHP through a lens of how many people saw JavaScript in the 90s. lol. Anyways feel free to PM me if you want to talk about PHP or share projects :)
Sounds like you need more screen real-estate if you can't keep a few files open and visible on your workspace at once.
It's not PHPDoc (yet) but Psalm and Phan support this syntax: https://getpsalm.org/r/1fb27903aa
FWIW, I've been trying to standardise this annotation: https://getpsalm.org/r/1fb27903aa
My phpstorm is always split in half, I'm not gonna change my workflow and split it 8 ways just to have an overview of what should all be in one file in first place.
TFW you don't know if someone is being genuine or trollish. :D
that's very cool. yeah i guess we just need some consensus. takes a really long time to get it though! struct objects i guess are the go-to in the meantime
Oh man, this has not been a good year.
How has no one mentioned laracasts yet? Laracasts is probably the best starting point you could have when delving into modern PHP. Do yourself a favour and start here. https://laracasts.com/skills/php Its not just about laravel. Laracasts is a great resource for all things PHP and even Javascript. Although by all means jump into laravel cos it uses most of the modern PHP concepts. Symfony is good too.
No, OP wants just DTOs.
I'd quite like us to have something like Kotlin data classes. They're immutable and have a set of small useful methods plus getters. In PHP they'd be something like: ```php data class User(string $name, int $age); $user = new User('ciaran', 39); echo $user-&gt;name(), $user-&gt;age(); // echoes 'ciaran 39' $user2 = $user-&gt;withAge(40); $echo $user2-&gt;name(), $user2-&gt;age(); // echoes 'ciaran 40' ``` ```
Unless you have a specific reason not to I'd advice upgrading to PHP7.1 and dropping support for everything that's older. 
Yes but as a cheap alternative for small businesses that only collect say a telephone and name for contacting back, that's a safe enough option.
Elasticemail has a great free tier
Help! My IDE doesn't think for me!
Exactly why would that be the issue?
G Suite.
User input is often a major source of vulnerabilities? The more freedom you give in how they input, the more new exploits can be figured out?
potentially is the key word. CKEditor is pretty reputable. If they are having issues with that, I'd imagine they aren't the only ones - just the ones we're hearing about.
&gt; Because auto-updates requires the web server to have write access to all the directories that the site uses Not always. You can always implement some form of auto-update that runs as a cronjob, and then it can run as any user required. 
there are other vulnerabilities, besides filtering markup - which Drupal has been doing for a very long time now. But I do agree that there isn't much of a point for a CMS without allowing some sort of markup to be generated by the user.
Sure, but this was about why "Having a WYSIWYG editor" was a sign of being insecure.
Yeah, that sounds cool. I guess you could put drush up --security-only -y into a cron job? Getting drush installed could be tricky on some shared hosts.
If your traffic isn’t heavy try socketlabs. Their fairly inexpensive when you go over the free tier.
Maybe try a library that handles sending a little better, like sendmail or swift mailer, you'd probably get better feedback for testing. 
Wot Not only stupid but pointless as many sysadmins will have eval turned off in the config.
That means that the function mail\(\), which is responsible for sending your mail, dosen't know how to send the mail, it dosen't know where to send the mail \(which SMTP server to use\). So either you'll need to set a SMTP mail server up yourself, or test online on a host that handles PHP, they are almost certainly sure to have SMTP setup and allow for the use of mail.
You might want to look into Mailhog. It's a fake mail server that logs all the mail sent to it that you can then review later using its web interface to verify it. It comes with a docker file so you can fire it up in a container, configure your app to send to it and then rest easy that you will never again accidentally send out a mass testing email to every user. 
I can recommend "Mailtrap". It's basically an smtp you can test with.
&gt; Getting drush installed could be tricky on some shared hosts. TBH, nearly anything custom with a shared host might not fly. But then, VPS are cheap these days.
There’s a joke in here about how unsafe Drupal is to use and that they should switch to WordPress
[odan/prisma](https://github.com/odan/prisma)
MailChimp has a decent free tier. And the expenses after that aren't that bad.
What's the turnaround time for you? For me it's about 4 months once they start vomiting 'the process' all over it. 
Mandrill, their API service was great, but i think now you need to have a paid Mailchimp account and many many customers had to migrate a couple of years ago. 
After Mandrill we migrated to Mailgun and we are quite happy... a lot of emails on their free tier and their support, albeit a bit slow, is great! The only minus is that their system sometimes assigns you a share IP that is blacklisted and then the bounces spike. But that is rare and they solved it so fast. Also you can always purchase a dedicated IP to avoid all those problems. 
It's not hard at all, it's really easy to automate in a script. I updated about 30 Drupal sites in an hour yesterday. Also the article makes it sound like it is exceptional that there have been 3 security releases in a row, but in reality there is a security release every 2 weeks on Wednesday. Drupal is not only the core code but also a collection of thousands of modules of which you can use dozens (or even hundreds if you have a really complex site). So in reality if you maintain more than a handful of sites you are looking at doing a security update every 2nd Wednesday. Clients pay a maintenance fee for this. Easy money for what is basically just pushing a button and doing a quick manual check.
postmark is great! 
We migrated to mailgun about 2 years ago and have a dedicated IP. We've never had any issues, other than the mentioned occasional reject due to the blacklisted IP (before we went dedicated). I do wish they allowed for better api key management, but what they have works.
There is only a tiny subset of vulnerabilities that are due to typing. Most are classic things like CSRF vulnerabilities or inadequate validation of user input.
Is the API not included in the free tier? Then nevermind :P
 As
This is why hack implemented shapes. It solves the problem nicely.
For lines 8 and 9 replace ' with " . 
Just gonna point out you’re displaying a success message before you’ve even called mail()....
Sweet Zombie Jesus... that was a horrible pun. I like your style.
Lol. I thought i did post over there. I'll delete this and move it over there. No worries.
We use Sendgrid a lot, and it works really well. We’ve also been looking into SparkPost lately, but haven’t used it yet. 
Put your variables in "This is a {$variable} notation", because it's the fastest method which still allows complex expansions like "This {$var['foo']} is {$obj-&gt;awesome()}!". You cannot do that with the "${var}" style. $headers = "From: Your Website &lt;{$myemail}&gt;"; The above line of code work in your case 
&gt; Postmarkapp Wow they are expensive! Mega expensive!
Most of them have had to do with the core migration modules, like configuration filenames being changed or plugin annotations changing. Drupal console has also been generating incorrect plugins for me--either the annotation is no longer up-to-date or they're extending the wrong class or implementing the wrong interface. One specific issue I remember came from following a guide to generate a CKEditor Plugin that worked in 8.2 and the icon would appear in some places but not others. I had to read through a couple of different modules before finding a working one in 8.5. It was significantly different from the one generated by drupal console--the one that looked correct according to 8.2 examples.
Before it was totally free for a looooot of emails. It was easy to integrate, etc... but now you need to pay from the first email apparently. 
I am never genuine. Also shapes were an inspiration for adding a phpdoc annotation for typed arrays in Psalm (though, without type aliasing, the utility to developers is more constrained)
&gt; many sysadmins All 3 of them.
Oh no I'm talking about just the patch. We'd easily have to plan it 4 months out. 3 years though, I can't even imagine that level of hell.
Mailgun could be a good choice plus they offer first 10k emails FREE.
You don’t need typescript.
Whatever you do, do not put your code in production. This is a security nightmare.
I’ve used sendgrid for a few integrations and had no problem with them. Currently working on handling email responses through an event dispatcher to our webhook and the only negative I could say is that their documentation was a bit ambiguous with how it works, but overall they’re solid.
Just to throw a spanner in the works. We **never** use local mail servers for PHP applications nowadays. Go back 10 years and it wasn't such a problem but mail delivery is so unreliable now with so much emphasis on spam protection and risk of blacklisting or poor spam repuation etc. We use mailgun for our mail delivery where you connect via an API to send emails. We even use it for simple cases like forgotten password features etc. We've never had an issue with mail delivery with mailgun and their pricing model means that unless you send thousands of emails you never end up paying anything.
My group used to use Postmark, but moved to mailgun. We've been using it for around 5 years and have zero complaints. Quality service and solid API. Great recommendation.
Your IF statement as it stands right now, wouldn't produce an error message if your mail didn't send because you are only checking to see if your form has been submitted. To return a mail error, you will need a second nested if statement after you call your mail\(\) function. You can associate mail\(\) to a variable like $sendmail = mail\(...\) and then... if \(!$sendmail\) { $errorMessage = error\_get\_last\(\)\['message'\]; } Unfortunately, the mail\(\) function doesn't have very descriptive error messages so it makes it a little bit of a challenge to debug. Other libraries like phpmailer may give you a little more flexibility and have a few other nice features built in. Additionally, the suggestions about security in the other responses here are good things to take into account.
Mailtrap is great
&gt; Whenever you try to load a class dynamically. Sorry Fam, but with composer this is not true. All classes are "loaded" via the autoload file. ` // instantiates foo\bar\myClass, coz of namespace at top of file $x = new myClass; // instantiates \myClass, ignoring namespace at top of file $y = new $classStr; // instantiates foo\bar\myClass, coz it's an absolute reference! $z = new $nsClass ` The above code is not dynamic loading, it's dynamic instantiation like the other user pointed out. It also works as designed. You should probably consider taking the article down until you can edit it as the information you provide is wrong. &gt; The Intention behind writing this article, was just sharing what I encountered today while implementing a factory pattern in a project. I have no idea how this related to a factory. Factories take data and create an instance of an object. You should not have a super general factory ie 1 Factory to rule them all as this breaks the principle of single responsibility.
I don't think I agree about them being `Mega expensive`, but yeah, as with anything; "you get what you pay for".
Third, Mailhog is the best. Setting it up with Docker as mentioned makes it super easy too
So okay. What would consider an enterprise application? I am trying to delineate at what point Wordpress is no longer suitable per the demands in play here?
**Enterprise software** Enterprise software, also known as enterprise application software (EAS), is computer software used to satisfy the needs of an organization rather than individual users. Such organizations include businesses, schools, interest-based user groups, clubs, charities, and governments. Enterprise software is an integral part of a (computer-based) information system. Services provided by enterprise software are typically business-oriented tools, such as online shopping, and online payment processing, interactive product catalogue, automated billing systems, security, Business Process Management, enterprise content management, IT service management, customer relationship management, enterprise resource planning, business intelligence, project management, collaboration, human resource management, manufacturing, occupational health and safety, enterprise application integration, and enterprise forms automation. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Okay so how does this wiki have anything to do with a CMS as OP is asking about?
Google Cloud Platform has a managed Kubernetes platform: GKE. You can create a cluster by clicking your way through the UI. Amazon will release their managed service called EKS soon. It's in beta atm, but I reckon they could release it publicly after KubeCon (next week).
typo in &gt; The client for the beanstald queue server also, pls dont hijack my copy behavior /r/assholedesign
it doesn't it's to do with enterprise software which is what you were asking about.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hey, lune-lute-skimp, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
damn dude, that's cool. would love to see something like that in php
&gt;is-odd has a dependency on is-number as well. ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Lmao. Good bot.
Share the links?
I wonder how much of that could just be emulated with normal classes. $userClass = new DataClass(['name'=&gt;'string','age'=&gt;'int']); $user = $userClass-&gt;new('sara', $neverYouMindHowOld); echo $user-&gt;name(), ... It doesn't scan quite as nicely as a formal language structure, but it's imminently doable in a pretty simple library package.
Excellent. One should never knowingly be serious.
Well, of course not. Don't need any frameworks at all if you want to get down to it, but sometimes it's nice to have a clean, best-practices set of tools to build on. I'd just prefer that it not be layer upon layer of garbage, when there are so many better things out there. I wish we could just run other languages in the browser. Maybe WebAssembly will get us there, but it feels like more layers of shit to this uninformed guy.
This is just a r/PHP summary.
Currently doing exactly that aws workmail. Which works fine, but would like to use a more complete solution, templates, analyctics, cron jobs. Without spending the time in developing this aspect as a solo developer. 
Yea, easy to mix up, the word play in package managers for various languages/systems follows patterns: Gems for Ruby Sparks (back in the day) for CodeIgnitor Fuel for PyroCMS Composer for Symfony
awesome css on that site.. I'll echo what others have said.. nothing new here
I have used SendGrid and Amazon EC2 in the past and both have been very cheap, very reliable options. I have used them for all types of emails, not just transactional ones.
Not anything in particular with Sendgrid, but more that we were facilitating SMTP on far too many sites with the single account. We met some of the devs from SparkPost at CodeMash in January, and they seemed to have some pretty useful APIs for mail sending (rather than just using SMTP), and a competitive price point. We were really just looking at evaluating alternatives to see if SparkPost provides any benefit over Sendgrid with our current setup, and possibly migrating over (or using a combination of the two) if so. But, we haven’t taken the time to do that yet. 
Mailgun have some very high profile customers. I doubt they would have such customers if deliverability was that poor. Although only speculating here. We've sent millions of emails per day via mailgun with practically no problems with deliverability that we are aware of. But I'm sure postmarkapp have the extra features / value somewhere and I've not used them to know myself.
We use Amazon ses for newsletters and there's a lot of them going straight to spam inbox. Remember also that the people we send newsletters and updates to are only people that are using our SaaS for their company and they all have to opt-in for this... There's a good 15-20% emails that just go poof.
Hi, question how do you manage sessions in PHP for scalability?
I’m sorry you experienced this. It’s a really shitty thing for a dev to do. I find it especially prevalent in new grads, but can sadly come from more experience devs. I think there’s a kind of engineer who has a very ivory tower kind of experience - where they get to work in isolation and judge languages based on academic perfection. PHP is absolutely not a particularly stand-out language in terms of it’s language design, especially pre-5.6. But even before that it was perfectly fine. It’s also perfectly fine for someone not to pick it for a project based on their preference. The problem comes when those developers write slightly histrionic articles, which are read by eager young devs. They hear that opinion and, wanting fit in and show off their “expertise”, repeat it as if it was fact. The wiser, more experienced dev will consider each language based on many more factors than academic perfection. You have to be pragmatic about existing knowledge, existing libraries, language popularity, client expectation, dev cost, predictability, testability etc. The truth is that PHP is a perfectly fine choice for many web projects given those criteria. If you can reliably produce a good end result in PHP then use that. If you can produce a great product in OCaml then use that. There are many ways of getting to the same set of 0s and 1s, and no *right* answer. These days, when I get some middle-brow drive-by language snark, I just roll my eyes, think “either you’re a junior or I should be feeling sorry for you”, and move on with my life. I hope you’re soon able to feel the same way. 
I second sendgrid. Never had an issue with them, though their admin area is a little messy.
All of my drupal sites have been hacked so many times that I made www.xmule.ws read-only (and that sure stopped everything, real fast) and years and years ago I ported www.incendiary.ws over to my own platformer that's compatible with Drupal v4-7 SQL schema.
Yeah, good point. There’s still a lot of great stuff you can do with a fairly classically architected PHP app without going full single-page-app and all that. I mean shit look at how React is all about “server side rendering” now like it’s a new thing, when it’s basically what every web1.0 language did since always. 
8.5 changed some fundamental behavior of the media modules from 8.4, so for this one, yes. Any site that uses the media related bundles will have a bunch of issues.
Anyone know when the Null Coalesce assignment operator `??=` is going to be added to PHP? I know it got accepted already, just don't know when it's being added.
Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa I have just rebuilt yesterday evening PHP 7.2.4 
I wrote a [regression library](https://github.com/mcordingley/Regression) that handles multivariate data and implements gradient descent to solve logistic regressions. In the process of writing it, I learned quite a few things, but the most relevant here is that PHP (or any other scripting language) is terrible for the processor-intensive varieties of machine learning. Training neural nets or doing anything else that requires an iterative process to converge to a solution can take days on dedicated hardware using compiled software that uses GPUs to speed the calculations. Scripted languages are an order of magnitude slower than compiled languages, so the computations will take that much longer. When you do see things like this successfully done in a scripted language (FANN, TensorFlow in Python, etc.), what's going on is that there's compiled code doing the heavy lifting and the scripted code is serving as a kind of glue. I wouldn't give up on ML being in PHP, but it'll probably require PECL extensions to be developed, rather than native libraries. Note that I'm distinguishing between different types of ML models. I still think that certain models can be viably implemented in native code, and have a decision tree library that I'll finish up one of these days. It's just, be skeptical when evaluating libraries. Look at what kind of model they implement, whether that model can be supported by native code, and also check the code quality of the libraries in question. I note that a lot of people get excited about ML and go off to build their own libraries, with mixed results. I like to think that my own is of high quality, but only time and use will tell.
Do it again and see what happens 
Any important changes? Or only bug fixes?
Point release, so just bugs. 
Really looking forward to this. Did you get into Amazon's preview?
Probably is a mistake. Google don't use PHP as far I know.
Google implemented their own runtime for PHP for use in App Engine.
[https://i.imgur.com/02g76od.png](https://i.imgur.com/02g76od.png)
Yeah probably. But this extension is a popular one and never really had false detection \(AFAIK\). Any idea where I could get more details about the stack google used for gmail?
I haven't idea. Google uses a lot C++ and Java, so, I would bet in one of those languages. But only someone from Google can answer this.
challenge accepted ;)
Unfortunately, we haven't. Most of our efforts at learnk8s are for vendor-neutral solutions. Said that we will probably write about our experiences using EKS. Stay tuned ;)
https://github.com/AliasIO/Wappalyzer/blob/master/src/apps.json has the rules on how Wappalyzer detects things. I don't see anything in the HTML source or network requests in DevTools that'd trigger Yii detection.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AliasIO/Wappalyzer/.../**apps.json** (master → dc0031e)](https://github.com/AliasIO/Wappalyzer/blob/dc0031e917d9c3e45273989adb99e4908aa9b6bc/src/apps.json) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dy0qa05.)
Using Sparkpost (when open and click tracking is required) and Amazon SES. We found Sparkpost to have much better deliverability and customer service than SendGrid. SendGrid just didn't seem to care about a smaller client like us. Amazon SES is really cheap, but they have a much lower feature set.
What happens?
Have several of those. In the process of upgrading those actually. 5.6 is fancy enough atm though...
This sounds like something that would be handled by a query builder. You make a query object and then append conditions on to it dynamically, then run the query object. Don't know what you're using to build your database queries, but at least with Laravel's Fluent query builder it's trivial. I think any other modern database abstraction layer would/should have a query builder.
A second monitor is gold in this situation. I convinced my boss to let me get a second monitor a couple years ago and it has helped my coding life immensely.
This sounds like an N+1 problem. The typical solution for this is to iterate through all the results of your main query and collect the information you need to create your sub-queries. Then you create a single sub-query with all the information you need instead of multiple sub-queries. For example instead of running multiple sub-queries like this `SELECT * FROM user WHERE user_id = :user_id;` for each row. You would run one sub-query like this `SELECT * FROM user WHERE user_id IN (?,?,?,?,?,?,?,?,?,?)` Then you would take the results from that and combine it with the results from your main query. Both Doctrine and Eloquent can do this for you and I would highly recommend learning at least one of them (I'm sure there are some other good ones out there too). If you are really set on it, there is no reason you can't implement this yourself. However, it sounds like you running into some of the problems those libraries are good at helping to solve. I'd also recommend checking out the book [Solving The N+1 Problem In PHP](https://leanpub.com/sn1php) to learn more about it.
Something something Docker Image something something
Which makes no sense in this context.
Yes, same happens for me too. But I have lots of emails with Yii framework issues and probably Wappalizer detects body of those emails as Yii stacktrace. So it appears no real magic here )
As bomp noted in correction, this is a security release. With multiple security issues is it iirc (Remi rolled this one, so I don't have it all paged in like I ought to). Do please consider the upgrade.
Truth, Probably not too terribly hard to implement, actually. Essential pieces in a root abstract class, then short syntax for defining child implementations with specific fields/initializers. May toss a poc together for s&amp;g...
Everything broke. =( (I haven't actually tried my current project)
Whats new in gmail? - Nothing seems to have changed for me... Wappalyzer on FF dev edition looks like this: https://i.imgur.com/etyRw4s.png 
You're not aware of this but this Wappalyzer result is brilliant comedy. Google wouldn't touch PHP for their own apps with a 20 foot pole. It's a cultural thing. 
They did that because they like money (i.e. PHP customers). But they don't use PHP for their *own* apps.
3 days to publish official image (?
I strongly disagree with the last one about `and` and `or` over `&amp;&amp;` and `||` I find those conditionals are far easier to visual parse using symbols rather than words. Word tokens already exist in your conditionals: `false`, `$variableName`, `null`, `CONSTANT_NAME` etc. The use of a symbol like `&amp;&amp;` makes for a better delimiter than `and`. Also, that example illustrating the difference between `and` and `&amp;&amp;` precedence is crap. You shouldn't be assigning variable values in a conditional in the first place. That ends up looking like exactly the kind of bug that justified the use of Yoda ordering from a previous recommendation in that same article. Just don't do variable assignment in-line, in a conditional.
Changelog for anyone who gets a broken link from their site: https://secure.php.net/ChangeLog-7.php#7.2.5
Would there be any common use case where using a class over an associative array in arguments and/or return values would not be advised? Or would you say that using a "Struct" class can be considered a best practice in PHP?
If you mention tools to which detect and fix coding style issues,[`friendsofphp/php-cs-fixer`](https://github.com/FriendsOfPHP/PHP-CS-Fixer) should be mentioned alongside [`squizlabs/php_codesniffer `](https://github.com/squizlabs/PHP_CodeSniffer). 
They should be laughed at for using mongo
With datatables you have to build the right one query to retrieve all the data then you can use for example the "render" datatables method to manipulate every single columns you need. This will be faster because it happens clientside using js.
I'm not designing sites or anything yet. I'm still learning. I got HTML, CSS, but I've only been doing PHP for a couple of days and am just testing to see if i could make a working contact form before moving on to learning how to add validation and security. 
Can't tell if you're being sarcastic or not. It's just a screen name. 
Google XSS examples. Enter those in the form. 
Does the form submit without the JS? If yes, then: Are inputs from the form used in database queries? If yes: look up "sql-injection" and prepare a little demonstration for your boss.
You got my heart pounding reading this. This is fucking boobs. Let me try this out and I'll get back to you. I added the JS security code to my post, if that matters.
👍
1. Disable JavaScript in your browser 2. Try to run the form 3. Cry If your boss counters with 'nobody disables js' then remind him that hackers are not normal people. They know something as trivial as disabling js and how to do it. Also, JS can not download for a number of other reasons like network glitches or slow network etc. In other words, it's an absolute ludicrous thing to do all your form checking in JS and not any on the server side. JS can be used to compliment and augment the experience of validation, but server side checking always had to be there. 
Disable javascript
Form input should always be sanitized at the server end, not at the client end, not only for the reason which we currently know of, but for all the creative reasons we’ve yet to figure out... if there’s a will, there’s a way... it’s just a matter of time.
No Google app is developed in PHP. They might have bought some PHP start up in the past.
Yeah, a live demo is such a more vivid show of why client-side validation is just a service to the user and actually has nothing to do with Security. Depending on what kind of dev your boss is, there is a chance that he/she will blame Google for giving hackers such dangerous tools. So I should really emphasize two things: 1. This technique has *always* been available to anyone with cURL or wget (or the two dozen other network monitoring tools). Modern browsers just simplified the process of extracting actual browser network requests. Before, you'd have used Fiddler, Wireshark or any one of a dozen other network monitoring tools to capture requests. 2. This is how a lot of people debug end points on their API servers. When I am trying to figure out a buggy server resource, I use this technique constantly -- but I was doing it LONG before it became available in Chrome. Google/Mozilla simply saved me having to hit alt-tab a couple extra times.
1/ no google project is developed in PHP 2/ Google engineers LOVE to reinvent the wheel because greenfield project == promotion.
A coding standard that cannot be enforced through CI is worthless at first place.
You complain that their only security is a js script and then proceed to publish that code online. I don’t think that’s wise. Security is important, but so are many other things. Focus on your job, become good at showing your skills and once the company values your input and opinion you can start changing things. As long as that’s not the case I wouldn’t invest my energy into something is not valued. 
Out of curiosity what is that team working on? I always thought the few people knowing PHP at Google were doing it mostly on their freetime
FFI is always cool because sometimes you just want to call a C lib without having to use IPC or creating an extension. It's faster than IPC, I wish more languages supported FFI natively. Python does.
the more parameters you have, the larger coupling is. Ideal number of parameters - zero. There are no any limit on how many parameters you could have, the only thing that we really need to encounter is how hard code will be to change (how it effects client code). And most of the time we could think of 3 parameters as upper limit. Just to have some limitations to start thinking.
I encountered a method in the project I'm currently working on that has 26 arguments. All of them have a default value and are optional. At least 5 of them aren't even used in the method but they're in the middle and therefore can't be easily removed. Send help.
Just give him an analogy. "It's like hiding the keys to your home under the welcome mat. And most burglars know to always check the mat."
Yeah, deploying stateless apps is really easy (except you do it for the very first time and have no clue about k8s). Adding stateful sets, secrets and so on to the mix is where the real meat is. The only thing I feel sad about in regards of k8s is that most businesses won't need a k8s cluster because the costs for it are to expensive (except your app is your core business). Most IT ppl (devs and ops) won't get their hands on k8s professionally, which is a shame because besides the configuration hassle (when setting up the cluster on your own) it is really really fun to use (same for nomad).
Not to mention that "and" is not equivalent to "&amp;&amp;", similarly "or" is not equivalent to "||". This was briefly pointed out in the article but ignored the reasons behind these differences and why people use &amp;&amp; and || primarily. One example that could trip people up: This will only run the `die()` statement if the former fails. `mysqli_connect(...) or die('Could not connect');` This will always run the `die()` even if the former fails. `mysqli_connect(...) || die('Could not connect');`
As many as are needed to get the job done properly. It's part of the developer's role to know what is sensible and what is not. Http-Foundation\Request constructor for example is: public function __construct(array $query = array(), array $request = array(), array $attributes = array(), array $cookies = array(), array $files = array(), array $server = array(), $content = null) Does it make sense for there to be 7? I would say absolutely yes. 
that code is the definition of reinventing the wheel and in poor fashion 
Do you really have a stutter? I do.
It's not available in every region as of now. Will be rolled out to every in a week or so. Once available, you can find it as first option under Settings menu wheel. [Like this.](https://beeimg.com/images/s40626214682.png)
To be honest I don't really see the reason to use k8s for smaller projects. I can run an application on 5 hosts with separate redundant app servers, load balancers and database servers for a fraction of the cost with a much simpler setup if you automate it with something like Ansible. If a problem arises, it's so much simpler to fix. Most devs can fix a misbehaving web server. Let them fix a misbehaving docker container on a k8s host and it's like starting on square one for them. I see the use case for large scale deployments and the benefits of containers (disregarding the added complexity during the build process). But not everyone is Google and needs these technologies. Sometimes the old and boring solution will lead to much fewer problems in the long run.
What a Debbie Downer. Sometimes it's better to put the fire out before it burns the whole forest down. Btw, you just let me know if you find us with that script. Anyways, What I really wanted to express in my post is that I want my boss to succeed, not just for the sake of my own success, but for his own. What I failed to mention is that he believes that Joomla has built in form security. Look, I don't want to work for anyone else. He's a great fucking person. I do what he asks me to do, and I cut the corners that he wants me to, but I drew the line at form security, and I'm here trying to justify it. So if you want to help like everyone else seems to be doing, then hop on board! If not, then make like a tree!
"It's like sealing your entryway with tissue paper"
Ok, let's pretend that we have method and we will add number of parameters over time. - 0 parameters - no data coupling, we are depending only on method names. This type of coupling easy to handle. - 1 parameter - small data coupling, we can live with it - 2 parameters - larger data coupling, well, not so bad - 3 parameters - even larger data coupling. - 4 parameters... Isn't it primitive obsession? maybe we should move data into separate type? if we continue we will increase data coupling. Are we ok with this in this particular situation? 
For this kind of cases there are builder patter, we could split all this 26 arguments into separate objects (2-3) and so on. There are many ways to handle this. There are also cases when it's ok to have 26 parameters in method depending on how it used. But mostly this is not so good.
No. But I do have a stammer. It used to be a source of severe misery for me.
&gt; it's possible a lot of emails are not landing in users inboxes but you're not finding out about it. Unfortunately, we do find out. Since we send on behalf of other organisations where there users, if not informed, will complain they never received a few days later. When you say "make it to their inboxes", i assume you mean their inbox provider doesn't mark it as spam itself but then how would any email gateway such as postmark or mailgun know if the inbox provider did that? Bounces are known and get handled accordingly. To be perfectly honest, the educational type content on postmarks website does seem convincing and does make sense. But, since it's their business I'm not sure just how over valued and hyped it is in order to help establish themselves as the "leaders". It's just sceptical me and having not had issues around this before I just have doubts. Even if they do "look" really good :) 
Counting things that aren't countable is beyond sloppy. You only have yourself to blame if this change came back to bit you in the rear. Learn the lesson and live with change.
I was taking exception to your saying that 0 was ideal, because the natural consequence of it would mean that your "ideal" application would either be awash with globals, duplicate functions, or didn't actually *do* anything at all. int main() { return 0; } // ok int main() { printf("Hello World\n"); } // doh int main() { $fp = fopen($argv[1], 'r'); fclose($fp); } // doh 
Have a look at the [Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings) (no, not the kinky kind of naughty string) Some of them can even be a problem _with_ server side validation. So without it, there is no doubt that you will break stuff. Just make sure that you test this as far away from any production system as possible
All different ORM approaches have upsides and downsides, advantages and inherent problems. The upside of active record is that your data objects can persist themselves - this fits very well with the self contained laravel mentality. The downside is that your models end up being pretty bib with a great deal of business logic. This is very problematic for instance in testing. Data mapper ORMs like doctrine have the upside that models are simple data objects: a class based representation of a single entity of your data. The ORM's job is to map your schema and your data objects. The consequence is that in addition to your objects, you need to make the ORM available separately to your code to perform persistence and queries. This is very much in line with Symfony's mentality of clear, explicit dependency management injection. I could go on. You can go beyond the default choices of each framework on anything however, but obviously you're going against the grain of the framework by doing so. The point here is that you should familiarise yourself with both for your own benefit as sometimes you'll find a choice better than another for a specific project. 
This is waay, off topic, but what's the difference (not a native speaker).
what's the difference between a stutter and a stammer?
&gt; fBtw, you just let me know if you find us with that script. It's certainly possible... https://publicwww.com/websites/function+isMail%28mailteste%29%7B/
FYI docker4php has updated images with latest security updates https://github.com/wodby/docker4php/releases/tag/1.1.5
Finally added the link... Sorry. 
More like "depends": $image-&gt;compose($imageToCompose, $x, $y, $width, $height [, $compositionMode]); Also modern IDEs are just fancy Notepads anymore, and this matters. PHPStorm shows the name of an argument before the argument, if it's a literal (or always, depending on your settings). This makes it quite clear what is what, if even you have 20 arguments (not that I'd recommend).
Things change and evolve. More to the point, mistakes are corrected over time. 
In your example, I would put $x &amp; $y and $width &amp; $height in Value Objects. So we're down to 4. Then, depending on what the function does, there are definitely other ways to get that number down. 3 should always be the absolute maximum. Even that is too much in most cases.
I doubt this will be approved before php 8.
More like $coordinates = new Vector2($x, $y); $size = new Vector2($width, $height); $image-&gt;compose($imageToCompose, $coordinates, $size); Also, you're probably getting those numbers from some other functions. And those other functions should already return value objects.
IMO, as much as you love this job and your boss, it would be better for you and your professional growth to look for another place and environment that accepts and understands the importance of good practices on a company policy level. Otherwise, from the company's perspective, you will be seen as reinventing the wheel and wasting time regardless of what you do, because their business strategy is to pump out sites quick and dirty. Slowing this process down will have direct impact on the revenue, simple as that, and no boss would approve it. Demonstrating vulnerabilities to the management who don't understand the importance of it will not change their minds, unless something real happens and it explodes in their faces. Many companies practice 'security through obscurity', and it sucks, but it works for them.
&gt; More like - You reuse the same value object to represent x/y coordinate and width/height size. This is absolutely pointless. - You forgot composition mode, so you have 4 arguments, in conflict with your own "at most 3" arguments. - If we have to be consistent and apply these value objects everywhere, when reading and writing individual pixels would require building and throwing away a value object for every pixel. I.e. $color = $image-&gt;getColorAt($x, $y); vs. $v = new Vector2($x, $y); $color = $image-&gt;getColorAt($v); That could slow down your processing by up to an order of magnitude. Your mechanical adherence to argument limits truly demonstrates my point. If you'll have meaningful value objects that help with code correctness and readability: have at it. But if you'll just mechanically have groupings of numbers in generic non-sense like Vector2, then you're just making code more verbose, more slow, and even less readable. &gt; Also, you're probably getting those numbers from some other functions. And those other functions should already return value objects. The reason I used this example is because I'm deep into ImageMagick code right now, and I can tell you you're wrong.
If you're really running into performance problems (and not just optimizing prematurely) and have actually tested that using primitives instead of doing it the "clean" way, then you're right. Then you can absolutely break some rules. I would still put that performance-optimized code behind a nicer API though.
Chances are, if you've never reinvented the wheel, you don't know how it really works.
I think the simplest way to override the javascript validation is to open up your JS console and just type in: function validate_Contact_Us_Page_Form(){ return true; } function isMail(){ return true; } Validation disabled!
Yeah, when you have x, y, width and height that's just a square so why split up those arguments? Also as this has so many arguments it seems a bit like it might be better to have a query object: $compose = new ImageComposition($imageToCompose); $compose-&gt;setLocation($x, $y) -&gt;setSize($width, $height) -&gt;setCompositionMode($compositionMode); $image-&gt;compose($compose) This is a more scaleable solution as if you need to increase the amount of properties in the query object you don't need to do any refactoring of the Interface. 
Once again, if you think mandating the use of a value object whose only value is "I have two things", we have a really different understand of what "a nice API" means. We already have a value primitive for "two thing" and it's an array of two things: $coords = [$x, $y]; You should only introduce value objects when they provide way more value than that (pun not intended). At least this is my philosophy with value objects and it often results in code *simplification* rather than the opposite.
This is a good analogy for client side security: https://i.imgur.com/bYiIN56.jpg
I agree, bypassing checks that are only checking if the field is empty won't cause any issues on the sever. The email address field is interesting, because if it ends up being passed in the fifth parameter to mail() without any further validation or escaping, you can end up getting arbitrary code execution: https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html Supplying the fifth argument is somewhat rare though. 
I hate the constructor for this: $request = new Request([], [], [], [], [], [], '{"test": "foo"}'); It's just ridiculous. Give us a nicer way of creating this like this: $request = new Request(); $request-&gt;setContent('{"test": "foo"}'); Much easier to read. What if you only need cookies and content in a request? You have to know the function signature and constantly look it up. I know that PHPStorm shows the parameter names but that's not shown when reading Pull Requests...
Yep totally agree here. There isn’t any security involved in this code. All it’s doing is validating that the fields are filled out. If some one fills out an empty form, who cares?
Demonstrate sql injection. Or editing of info users should not have access to edit. Like changing their user role or something.
I think op needs to understand security before declaring there is no security. These websites are submitting a contact form and he's not even stating whether or not the backend is using a framework to generate safe database queries. On top of a contact form's garbage data being meaningless to the point of who cares. At worst we can only assume they get bad data unless op can show that the data is actually processed or displayed in a bad way. I'm almost sure the boss escapes the SQL and html entities becuase it would cause business issues so easily if he didn't.
looks bang on.
You're using "coupling" in a weird way. Having more arguments is not more "coupling". If you start grouping parameters into separate types, now you're coupled not only to the method you call, but also to these separate types. Now **that**... is *more* coupling, actually.
Or just turn off javascript
If you never live, you never have to die!
One way would be to do an SQL injection on a seemingly innocuous table. Then follow up that someone could do that on our main tables.
If you know how to exploit your vulnerabilities you can do that in testing environments and show them. If they still don't listen you can go on and do it in production in a new website that's not getting traffic yet, or in a easy to recover/less impact/ low traffic website
http://www.unixwiz.net/techtips/sql-injection.html
&gt; remind him that hackers are not normal people And often times not people at all, but crawlers looking for common vulnerabilities. The whole process of finding a vulnerable site, injecting a shell and joining a botnet is automated, to the point where no human will ever know or care that it was your particular site that was hacked, it'll just be part of a number of bots sold on the black market to send spam emails, join DDOS attacks, and host ads for counterfeit products.
I would guess than an sql injection deleting a full database should be a good way to make them listen
You ask for advise, I give it. It seems that you didn’t like the advise and I respect that, but I am trying to help you. It’s an advise I would give to a friend too. Alternatively you can try to hack your own system and demonstrate what damaging things you can do through a series of steps.
I once worked at a start-up which was extremly proud of their tech-stack and joked about other companies sticking with php, java etc. They used Elixir, React Native, ReactJS (with Typescript), all of them different IDEs (IntelliJ, vim, Sublime, VS Code, Atom, ...), Docker, and so on... No one did not know how to work effectivley with these technologies. They even started writing micro-services to wrap simple rest-apis because of the lack of knowledge about elixir. They focus shifted from the business model to technical issues. That was not a business, it was a playground for developers. 
See my comment to Forma313 above...
just show him that the client side form validation can literally be disabled by the client. at minimum you need server side validation to guarantee data integrity. demonstrate this by disabling javascript in the browser, entering invalid data (possibly of the kind that would cause a server error) and submit it. 
well technically you are right, but just because his code is incomplete :) make it a real life example, This will only run the die() statement if the former fails. $conn = mysqli_connect(...) or die('Could not connect'); This will always run the die() even if the former *not* fails. $conn = mysqli_connect(...) || die('Could not connect'); 
It's type hintable. It's more self-documenting. It's more memory/cpu efficient. The only case where associative array works better is when the keys aren't known in advance. At that point a class with dynamic properties is just a bit of sugar on top of an associative array, and not really a class at all.
Even with IDEs, one isn't always reading code in an IDE (e.g.: code reviews). And its pretty diff/blame unfriendly either. IMO, it'd be easy for a code reviewer to miss if one of these parameters were wrong: $image-&gt;compose($image, 200, 200, 400, 600, "yes"); vs. the multi-line version of given in another comment. $image-&gt;compose( $imageToCompose, new Point2D($x, $y), new Size2D($width, $height) ); Which seems easier to code review? If this code changes, how easy would it be for someone to look through the VCS and find out *why* the position changed? In general, that function exceeds how many parameters are considered 'good'-- but there are still situations where using many parameters would be better than using VOs or multi-line function calls. I'd call those 'acceptable' vs 'good', because nearly every one of those cases: code readability was sacrificed for something else (like time).
That code doesnt clntain any security at all. Its just alerting the user if they left a field blank. And honestly if you werent able to parse that out ... Hes probably right and youre probably wrong. 
You just confused the outcome. Actually, both will die in case of error. It's the success where they behave differently, given in the real life you are assigning mysqli_query to a variable. In the second case this variable would contain just a boolean `true` instead of a connection, because of operator precedence. See my article [Operator precedence or how does 'or die()' work.](https://phpdelusions.net/articles/or_die)
Create a form with his tool that reads from a test database table or saves a file or whatnot. Copy the CURL for that web form. Go in the terminal and add some new parameters to drop that table or exec something on the server. If that doesn't do it, learn what you can from the guy (since it's your "first job") and then go look for a better place to learn from.
&gt; not at the client end You can certainly do it here too.
Then submit a query from young *Bobby Tables*.
&gt; And too many parameters are pretty diff/blame unfriendly, IMO. It'd be easy for a code reviewer to miss if one of these parameters were wrong: Honestly, the sequence x/y/width/height is pretty common in graphics APIs and it's very hard to get confused by it. Also moving those exact four parameters out to a value object accomplishes nothing in that regard: you still have a sequence of four numbers. As for that "yes", I don't know where it came from, but this wasn't in my example. I've never had an argument called "yes" in an API I used, or made. Let's stick to the problem of argument count rather than tacking on made-up problems. &gt; vs. a multi-line version of one you gave in another comment. Your comparison is inaccurate as in one case you are using integer literals, while in the other you use well-named variables. &gt; Which seems easier to code review? If the example was fair, the initial more concise version would be easier to review.
We have to stay positive, folks. At least it's not "how to use variables in PHP".
Great post. Like all of the shit you post in this sub.
Another approach would be to create a brand new form on a different website with the same fields that submits to the same page on your website, but is just a plain form (i.e. no validation). Then you can show submission of bad data no matter how "good" the client-side validation might be.
I would say that’s categorically no like all the shit I post in this sub. There is the short joke shit and the long informative shit. This is the short joke shit. 
Thank you so much for your feedback ! glad to hear that :).
&gt; I think op needs to understand security before declaring there is no security. https://media1.giphy.com/media/eO3OyB250rVPW/giphy.gif
&gt;As IDE: Sublime Text, PHPStorm; I don't think IDE matters a lot, I've seen people do modern PHP code with vim. &gt; Have smaller project or wont use MVC pattern? Symfony Components; Using silex or slimPHP with that is also a good idea.
You have to enable the new gmail manually under the gear icon. It's got a couple of useful new features.
You're not funny or interesting.
Yeah, that post is great and 7 has remained large the same there since release. The only way to lock a class against dynamic props is to set a dummy/error set function. class Foo { public function __set($k, $v) { throw new \Exception('nope'); } }
I agree, it shouldn't be a problem. I meant that to use the official docker image you have to wait a couple of days for building (and testing it). See [this issue](https://github.com/docker-library/php/issues/578)
&gt;Ideal number of parameters \- zero Absolutely not! That implies hidden global state *only*! If you said *one* then we could at least argue on grounds of academic purity but zero? Definitely the wrong ideal.
&gt; Honestly, the sequence x/y/width/height is pretty common in graphics APIs and it's very hard to get confused by it. Many APIs use other, sometimes multiple, conventions: not just one. In this example, one can assume the coordinates are top-left coordinates with the domain-- but when working with graphics: sometimes another coordinate system makes sense. As an example, [imagerectangle](http://php.net/manual/en/function.imagerectangle.php) parameters are not width and height, but `$x1`, `$y1`, `$x2`, and`$y2`. The width and height are derived from the two coordinates given. You mention domain like every domain will use the same coordinate system, the same width/height system, but realistically, in more complicated projects that use different coordinate systems in different manners: its beneficial for the code to describe which it is using. Sometimes, it may be worth it to trade overall readability for convention, performance, or time. This does not seem to be one of those examples-- being pretty experienced in graphics code, even extending beyond PHP. &gt; Also moving those exact four parameters out to a value object like Rectangle(x, y, width, height) in one of my examples accomplishes nothing in that regard: you still have a sequence of four numbers. I didn't use the rectangle example for exactly this reason? The width/height idiom is far more common than the width/height/x/y one. In a time crunch, one may have just used/reviewed an x1,y1,x2,y2 system, or even a coordinate system from another domain. The X, then Y convention is far more common idiom than the "coordinates before width/height"-- one that's taught in most grade schools. Yet, the convention for specifying width before x/y coordinates, where to specify it, how to specify it, and even if the API needs it: varies. The convention is not widespread enough, in APIs. &gt; As for that "yes", I don't know where it came from, but this wasn't in my example. I've never had an argument called "yes" in an API I used, or made. Let's stick to the problem of argument count rather than tacking on made-up problems. Just a random filler for composition mode. I wanted a short string so that it wasn't made needlessly longer. &gt; Your comparison is biased, as in one case you are using integer literals, while in the other you use well-named variables. The variable use didn't matter, in that example-- because two different VOs were used: With the VOs, its clear that width/height are going to something that expects dimensions, and that x/y coordinates are given to something that expects coordinates. Reversing the arguments likely lead to errors or other things that can be caught in static/runtime analysis. Even with variables named, most static analysis tools aren't going to catch errors such as "You passed `$height` to `$y`, at least compared to "You passed `Point2D` to something that expected `Size2D`" These sorts of errors get by reviewers quite often-- especially in number heavy code. &gt; If your example was not biased, the initial more concise version would be easier to write, faster to read and review. It'd also perform better at runtime. Faster to write? Maybe, but its pretty minuscule difference-- even if one didn't include architecting, maintenance, testing, debugging, training, or reviewing. Writing is not where my time needs to be optimized. &gt; It'd also perform better at runtime. As one who writes fast code-- I hate just to say "premature optimization", but its pretty relevant here. Is this the hot-spot code that's affecting the overall application experience? Is the runtime performance savings significant enough to compare to ~10-100 man-hours/year fixing bugs due to misplaced arguments? With a complete example (instead of this function that does god-knows-what), we could do a better performance analysis to show how insignificant the runtime difference is here-- but I'm pretty confident the VOs wouldn't show up on any radars. 
&gt; Many APIs use other, sometimes multiple, conventions: not just one. Yes. Some do it for legacy reasons, some do it for pragmatic reasons, but it's never a *goal* to use multiple conventions, is it? It's always a compromise. &gt; You mention domain like every domain will use the same coordinate system, the same width/height system, but realistically, in more complicated projects that use different coordinate systems in different manners: its beneficial for the code to describe which it is using. Without context you're just describing abstraction for abstraction's sake. Simple is better. If it can't be simple, reasons must be solid. &gt; In a time crunch, one may have just used/reviewed an x1,y1,x2,y2 system, or even a coordinate system from another domain. That's an example showing how important consistency is. As you switch to an API, you know what it uses and convert accordingly. 
I'm sorry to hear that. Please PM me a bank account and I'll send a full refund.
I worked for an agency once. I can confirm this is how they often do business. The primary focus is on pushing out sites as rapidly as possible, not on craftsmanship.
[Oh, yes, little Bobby Tables...](https://imgs.xkcd.com/comics/exploits_of_a_mom.png)
I am confused. Is this a code to display error details on the HTML page unconditionally? Is it supposed for the production at all? Besides, what is [this code part](https://github.com/lotfio/ouch/blob/0f8cc99945a777a1f43e71530be62833ead3bcca/src/Ouch/Core/Reporter.php#L27) intended to mean? 
Because the example code he posted isn't about security at all. If he rewrote that JavaScript as server-side code, it would provide no additional security.
Check out [Mutillidae](https://sourceforge.net/projects/mutillidae/). It's an intentionally vulnerable web site designed to teach people how to find and exploit common web vulnerabilities. The site itself will give you hints on what to do and how to get started, and there are a ton of resources on the web that can help you. Get [Kali](https://www.kali.org/) on a VM and go to town on your Mutillidae instance. You'll figure out multiple ways to bypass JS validation in no time. **Be careful if you're going to be pen testing a site owned by your company.** There's a *huge* difference between doing these things on your time to your system and trying to break something you only work on. **Get permission before you do *anything*.** All of that being said, web pen testing is *fun as hell* and you're only doing yourself a favor by learning this very valuable skillset. 
Wtf? Do *you* understand security? You asked how we could be so sure the OP understands security. I said because he gave a terrible example of security. Completely relevant to your comment.
And to extend on this it sounds like a newbie dev who means well and is pushing for change on a topic that is PROBABLY done incorrectly on the server side in a few easy and irritating ways but isn't actually vulnerable from a security perspective.
Yep, this is the most likely scenario unless OP can point to some code that is handling the data insecurely.
Because I'm worked with sites like this and they manage to get "security" correct because someone managed to add quotes to a form so they fix the sql (... most times without a string replace). And then someone (or a spam bot) adds brackets to some output that is shown in their custom cms and they incidentally fix html entities. The reason I doubt OP is because he completely missed the target and is asking how to subvert an extremely easy part of the "Security" process and doesn't know how to get around a javascript frontend. I just know to err on the side of caution when someone speaks on something serious but doesn't start from where the serious problems would actually exist. I believe he found an input validation issue but hasn't explained how the security is messed up.
You need to check in the PHP manual what does error_reporting ini setting mean. And fix its value accordingly. Also, it makes no sense to have a package for one environment only. Do a developer need to use another package in production mode? You must make your handler configurable, in order to make it usable in any environment. For the guidelines refer to my article on the [PHP error reporting basics](https://phpdelusions.net/articles/error_reporting). As a simples workaround to tell one mode from another, you may use the value of PHP's `display_errors` directive. Or make your handler accept a distinct mode in the constructor, which should be production by default.
Came back at 11, did not see additional news. Disappointed.
I took over a website once that had SQL injection flaws, and XSS flaws. The first thing I did was fix the SQL injections!
Another pov, did your boss qualified? Form input is very important and the injection is real He need to told you to be aware, not another way around 
How?
0\- \[Bookmark this post\] 1\- Download &amp; install [Postman](https://www.getpostman.com/) on your laptop 2\- Sit next to your boss at launch time 3\- ask him to look at your screen 4\- Get &amp; Post bad\(at least invalid\) data to one of those websites developed using his platform, one after another 5\- Try to have a smile on your face during the process 6\- Get back to your desk and wait 7\- Someone\(if not your boss\) will define a task for you regarding **ServerSide Validation**. 8\- Come back &amp; upvote my comment\(this is why you bookmarked it at stage 0\) Good luck :\-\)
Fill your clients' databases with garbage data using postman or sth \[Do it from home, not your office internet!\], Then they will **kindly**\(I hope so!!\) ask your boss to implement serverside form validation.
&gt; OP's boss escapes SQL and HTML entities. Also, since the form is a contact us form, if could be possible that the results aren't going into a database and/or they aren't being displayed somewhere that injected HTML could do any damage. 
I think he meant instantiated object - interface methods without parameters are great to work with and interesting implementations can emerge.
That's not a facade. That's a proxy, or a singleton.
If you're on Windows, the Chrome tools will now let you copy a request as a Powershell command, which is pretty handy.
Static proxies something like Laravel Facades.
Yeah, that's bad code but definitely not a security risk in itself. Worst case scenario : someone takes the time and effort to submit the form with an incorrect email address 😱
&gt; It's clear that you don't have a good grasp of what we're talking about here. I assumed that you did so that's my fault. So here we are again where one of us is making stuff up and being a dick. That person would be you. It's clear that you didn't get that. I assumed that you did so that's my fault. &gt; The poster you replied to said exactly why he can be reasonably sure that OPs boss is escaping inputs - because if he's not, there would be other issues occurring with the forms, i.e. they would easily break for legitimate users. That's not what he said, you are making this up. What he said was it would be bad business for OP's boss not to. Also there's a fallacy with you saying it would break for legitimate users, because if legitimate users don't put HTML into their posts and you never escape or sanitize anything, everything might look perfectly fine. I've definitely seen forms break because of this, but I've also seen that happen after years of everything appearing to be fine and dandy. &gt; The fact that the websites are built with a framework is another strong clue that input sanitization is being performed somewhere. It is no such thing. I've never seen a PHP framework where you do not need to specify in what way you want the data sanitized: is any given field a date, a number, a floating-point number? In my experience, if you don't specify how form data needs to be sanitized then it won't be. This makes sense if you think about it: after all the framework doesn't know what sort of data you expect for any given field unless you tell it. The onus is not on any framework to protect your users, it's squarely on you. Frameworks are there to help you do your job, not to hold your hand. The notion that using a framework is any indication that someone is able to write secure code is misguided: although I certainly see where you are coming from here, if I have a bunch of professional power tools in my garage, that doesn't mean I know enough about how to use them for me to use my own saw without cutting my hand off. Also we're talking about Joomla here. I am not quite familiar with Joomla but if you are as smart and experienced as you're trying to come across, I assume that at least you'll agree that it's possible to write insecure code for Joomla. &gt; Combining those reasonable assumptions with OPs example not pertaining to security at all, i.e. a terrible example of "bad security", and OPs claim of being a fresh dev, the most likely conclusion here is that OP doesn't know what he's talking about. I don't think they are reasonable. Also something either is a bad example of security or it doesn't pertain to security at all. Nothing can be both, no matter how often you tell me that it can. As for the conclusion, OP may well not know what they are talking about but I doubt your ability to draw this conclusion, given that I have been a PHP developer for almost two decades and regularly fix security vulnerabilities in my day job, and you raise expletives at me asking me if I know about security and telling me I don't have a good grasp of what we're talking about, while misreading literally every comment we've discussed so far. &gt; Believe him if you want, we've all worked with terrible bosses Again with the making stuff up. I said the bosses were inept, not terrible.
It really depends if OP is using any frameworks on the server side, and if/how he's interacting with the database. Someone could inject SQL to gain access to the DB if the data isn't sanitised on the server. [https://en.wikipedia.org/wiki/SQL_injection](https://en.wikipedia.org/wiki/SQL_injection)
Javascript. The reason to sanitize data on the client and as well as server side is to reduce load on your serve, speed up error correction for user experience improvement, and for the satisfaction of knowing a user's own computer is telling them they did something wrong. Someone makes a mistake when entering their data, the client says, "hold up, something is missing or is outright wrong" - then points out where the error is to the user for them to fix. All without burdening your server or taking the time to send messages back and forth from client to server.
&gt; The vanishing word thing, I think that happens to everyone every now and then Uh, no.
Are you serious? OP is concerned that their site is vulnerable, so they go and post company code to an extremely popular forum. Code that could potentially allow someone to find a site that they now know is potentially vulnerable. Then OP goes on to mention that someone finding this vulnerable code could put his company out of business. Sorry, not sorry. If I was OP's boss, they'd be fired if I came across this post. 
&gt; So if you want to help like everyone else seems to be doing, then hop on board! If not, then make like a tree! The most helpful piece of advice that you will possibly get from this thread is "don't publish potential vulnerabilities that could send your company out of business if they are exposed to a massively popular forum... and expect to keep your job. If I was your boss, I'd fire you if I came across this post.
no? You've never been talking and then just forgotten the word you were just about to say? It's happened to me a couple of times, very very infrequently, and I've seen it happen to other people very infrequently. I thought it was a universal minor annoyance like hiccups, only some unlucky people have it way more persistently.
I'm replying from a phone and don't have the entire comment thread available in front of me. I'm paraphrasing in my replies in ways that in no way confuse or pervert the points that were made, but you insist on calling out unsubstantial differences as "making things up." "Terrible" -&gt; "inept" makes no difference in the context of this conversation. "Bad example.of security" -&gt; "not about security at all" is almost the exact the same thing. He gave an example of security that is not about security. It's a *bad example of security* because it's not about security at all. &gt; That's not what he said, you are making this up. What he said was it would be bad business for OP's boss not to. He did not say bad business - he said business issues As in, business logic issues, which is clear in the context of his sentence. Had he said "the business issues" then I would agree with you. I'll leave you with this: [K2 Forms](https://www.k2.com/platform/forms) OP posted the framework being used. They are literally drag and drop forms. I guarantee the framework knows what type of data is being input in the fields and can also guarantee that data is sanitized. Sure, frameworks can be used to write insecure code, but OP's claim that there is no server-side code being used is completely incorrect. OP doesn't know what he's talking about.
I think this person is being sarcastic. I'm going with that based on the fact that this is how I would make the statement about your project. I mean one of your test classes is just a dummy file testing itself. Then you just have one more file of tests. You also don't have Travis or scrutinizer setup - so no one can easily check what actual level of coverage is provided.
Yeah, never-mind my previous comment, I don't know where my mind was, but yes it has happened to me in the past.
It's a matter of preference you can use whatever you want ! 
Wow, thanks for your detailed response. Will definitely do some trial runs this weekend with sparkpost. 
All comments are appreciated ! negative feedback will help me to improve those packages ! thanks for your feedback ! next version will work on Travis and scrutinize setup.
Profit 
You have a classification problem. You have a lead and you want to classify the lead as "going to become a sale" or "not". That's the domain of logistic regression. Read up on that section in the README. In essence, you'll want a bunch of historical data about leads, including whether the lead turned into a sale or not. That is going to be your observed outcome variable and it will be a boolean, needs needs to numerically be encoded as either a zero or a one. You'll also need a bunch of data points on each lead that you think contributes probabalistically to the lead becoming a sale. Those are your features. Convert categorical features into a series of boolean values (0/1 in this numeric world) and feed them in. With this data, you train a model, which is represented as a collection of coefficients. When you run that model against a novel lead, it will output a number between zero and one representing the estimated probability that the lead will turn into a sale. It's easy to throw data at a ML algorithm and get a model out of the other end, but it's quite a bit of work if you want a _good_ model. You'll want to do a few things to make this happen. Take your data and split off about 20% of it and set that aside. That's your test data for seeing how good your model is at the very end of this process. Split off another 20% of the remaining data and call it your validation data. The remainder of the data is the training data. Train the model on that and then run it against the validation data to see how well your model does against data that's novel to it. Tune the parameters, tweak the timings, etc. and keep checking against your validation data until you have a model that performs well. Note that you can reshuffle the training and validation data to keep cycling through validation sets if you want. When your model is looking good and you're ready to go live with all of those parameters, shuffle your training and validation data together, train on that, and _then_ use the test data you set aside earlier to validate how well it _really_ does. This is saved for the last step so you don't accidentally over-fit the model. When that's done, throw all of the data at it and send it up to production. One thing that will speed up the convergence of your model is if you can normalize the data prior to training on it. This means that you want to transform the numeric fields (not your booleans!) such that the transformed data for each field has a mean of zero and a variance of one. Store these transformations so you can apply the same transforms to data that you're trying to classify. What this does, in effect, is give the algorithm a much smoother and more regular slope to descend. I would set aside a few days to iterate on this process before you bake it into your application. I would also recommend revisiting the process periodically to tune the model and having the production system only run the model as a low-priority background job. It could take a while to complete and you don't want users held up by it. Hope that helps. If your company needs help with it, I do consult.
I agree. Reducing load is a different topic, since it assumes everyone hitting a form will only be using a desktop browser.
you need it you need to send a 500 status you need to show an error page ypi need to log the error. everything is written on the page I linked to. do you really read the feedback you are given? 
&gt; Yes. Some do it for legacy reasons, some do it for pragmatic reasons, but it's never a goal to use multiple conventions, is it? It's always a compromise. Sometimes multiple conventions are used because tooling or domain dictates it. It isn't always an either-or situation, nor is it always a migration situation: * Sometimes parts of the project must do things one way, and parts of the project need to do things another. * Sometimes code will be extracted into its own module, so as to be used in multiple projects. Different, unclear conventions complicate integration, especially in a team that deals with multiple domains and/or multiple conventions. More on that below. &gt; Without context you're just describing abstraction for abstraction's sake. Not just abstraction's sake. Using that function has an actual cost on human time: in training junior developers, in review, and in not using analysis tooling to prevent errors. That cost isn't always important, but that's not just 'for abstractions sake' &gt; That's an example showing how important consistency is. As you switch to an API, you know what it uses and convert accordingly. Switch? Use the right tools for the job. In many large projects, there are multiple styles, multiple libraries, and multiple goals. Trying to force one convention everywhere, even if it doesn't fit, goes against the "keep it simple." Anyway, my point wasn't to say use VOs everywhere, it was that the method isn't optimal. The size/width/height should probably be handled separately-- as there are many ways to deal with sizes. 
[removed]
Download the developer toolbar on chrome, turn off JavaScript and submit the form. Some browsers, looking at you IE, like to stop running JS when it has a big, so the Js for validation won't even kick in for users running certain versions of it. But the biggest flaw is that someone can simply turn off JS and do some damage.
My current rule is that arrays can only be used to pass data *within* a class. For anything else, I'll make a class, even if it's just a set of public properties.
I was starting to think I was the only one thinking this. Thanks man!
I think that's OP's point. He just needs a way to test and verify. Maybe it turns out OP is wrong, maybe not
A "Laravel facade" is not a facade either. What you have in Aven is either a proxy, or a singleton, and (if you're interested in communicating intent) ought to be named such.
&gt; Sorry, not sorry. If I was OP's boss, they'd be fired if I came across this post. I'm not saying it's not a good point, just saying that it doesn't address the question that was asked and that the advice (almost certainly) isn't backed by real knowledge of OPs situation. &gt; go and post company code to an extremely popular forum Do you know 100% that the code is the exact code from the site? I sometimes post code from one of my sites when I have an issue, but I always change things a bit before posting, not that you'd know unless you saw the source. I agree that posting insecure code from a site is a bad idea, just pointing out that this is the internet, and only OP really knows if that is real code, modified code, or similar code to make the point...
On a contact form... send some things you would like to not see stored or passed along. See what actually happens in a dev environment. Obviously, you need to turn off the validation so the form sends-- easy enough. Just create a new form using Javascript and the console... append some HTML to the existing DOM using as many parts of the original form as you need. This should ensure none of the elements have the javascript validation or don't send code attached. If you send "&lt;script&gt;" via the contact form you added for instance-- what does it look like in the PHP back end handling scripts? That is how to test it.
Where is the limit (constructor parameters) for value objects? People emphasize and say "Value Objects all the things". But what if you not only have a small value object (e.g. money), but a big value object like a customer or an invoice (domain object) with 10 or more values? I think that value object, in this particular case, is not a good design choice because the constructor becomes totally bloated and messy. What do you think? Where is the limit for VO?
Have you ever run a pen test on your codebase? Get Acunetix and run a thorough scan with Acusensor enabled. JavaScript validation is not any kind of protection. If you are on a budget and can not afford Acunetix, consider Burp which you can use to quickly run scripted exploits against your form handlers. Easy test is to send an array to a field that expects a string, expand from there. 
No one talking about state. Think of this like pure functions. Pure function without arguments will not do anything. It is just constant. But this still will have least implication on client code.
Write an exploit that subverts this form and submits erroneous data to the database.
look for the SQL to add a new admin to the Joomla-DB and inject it through the login-form... Nothing more non-destructive but impressive than getting admin-rights on a machine with 1 line of code... 
I should have elaborated on the setup. I am developing locally, and have two container's with the same host directory mounted in them which is the directory containing a Laravel project. I am using the independent composer container to install new packages. The other container which also has access to the same host directory is an apache server. The files are not inside Docker's internal volume's. They are right on my machine. I don't commit the vendor directory or anything like that. When you use composer to install things, doesn't it just grab the package (independent from composer itself), and install them into vendor? Or is there something more behind the scenes that would couple the version of PHP composer is actually using to the packages you are installing? 
/r/keming that looks like dedare
Here's a sneak peek of /r/keming using the [top posts](https://np.reddit.com/r/keming/top/?sort=top&amp;t=year) of the year! \#1: [A little humor for today](https://i.imgur.com/4tBNA0w.jpg) | [124 comments](https://np.reddit.com/r/keming/comments/7tlvvd/a_little_humor_for_today/) \#2: [Thanks a bunch Don](https://i.redd.it/9cepyp6zym901.jpg) | [74 comments](https://np.reddit.com/r/keming/comments/7pwh0i/thanks_a_bunch_don/) \#3: [Bull Titan U.S.](https://i.redd.it/ybt4e54k6lj01.png) | [112 comments](https://np.reddit.com/r/keming/comments/81royb/bull_titan_us/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
It's a tough choice. My first instinct would be to use a framework. In this case, I'd look either into a micro framework or roll your own. You already have the UI, so concentrating on the admin area would be the way to go. This is just the beginning. The page will continue to grow. :-)
Why don't you either update the composer container to 7.2, or (better) just run composer in the web container?
It does matter and you should be careful with a setup like that. Based on the required Php version composer could install different package versions. This could lead to incompatible code. You can however use the composer config to fake the web server's php (platform) version to prevent this: https://getcomposer.org/doc/06-config.md#platform
Just use it for initializing an object with specific variables. Don't do anything that could throw an exception in the contructor.
I cannot get MSSQL to work on Mac High Sierra! I posted in r/phphelp and spent 3 days looking and trying stuff, but nothing will work. Can anyone help me out?
The PHP version definitely makes a difference. One example is packages that have polyfills for features missing from a PHP Version, or different packages that install different versions because each package version requires a different PHP version. Back in pre-docker days I was bitten by this because our dev environment was PHP 7 and the client's host was still on 5.6. The differences between 7.2 and 7.0 aren't as big, but the potential for issues is still there. When developing in docker the best practice is to make the dev environment as close to the production environment as humanly possible. If for some reason you cannot update your docker image to php 7.2, then you can put a platform requirement in your composer.json so that it'll install packages *as if* it was on php 7.0. This will reduce the risk of issue, but not entirely get rid of it. "config": { "platform": { "php": "7.0-" } } 
You're saying all the right things.
I've got management material written all over me!
Fiddler- intercept a post, drag and drop to composer, edit the post and submit again.
To show HTML is not being escaped properly on output I usually enter &lt;s&gt;Strike&lt;/s&gt; into a text field that is displayed as text somewhere. For more effect, use &lt;script&gt;alert(‘we been hackEd!’)&lt;/script&gt; I might need to put my code in code tags above, but I can’t remember how.
You can add a 'platform' key to the composer config section, and it'll restrict the installed packages to those compatible with whatever PHP version you specify. But better too is to add multiple PHP versions to your continuous integration system, so you can find incompatibilities as they arise.
Even ignoring Composer the composer issue - you are setting yourself up for a world of pain with this setup. The whole reason for systems like Docker locally is to be able to replicate your production environment with your local environment. And the problem is you wont be able to detect the issue until you "deploy" - in which case it'll instantly affect your production. Then each time you have a problem in production, you wont know if it is due to a PHP version mismatch issue, or if it a guinue problem - causing massive debugging issues. Honestly - just upgrade your local dev. You'll thank yourself in the future.
There is one correct answer if you have JavaScript based frontend: NodeJS
Thanks all, I think I have a better grip on it. I didn't realize there was actually a section for php in the require section of the composer file. Makes sense. 
This is not a security issue per say... this is just form validation. If someone submitted a form with an email address that wasn’t valid, and no first name field, it is just a spam form fill, not a security hole. I don’t see how this is an issue at all.
That is a totally different conversation than what OP is showing. This code doesn’t have any impact on preventing SQL injection
Holy shit. I stand corrected! Thanks for letting me know!
That is just awesome to the core. Thank you so much!
While that works it's not very user friendly and therefore i think it's bad advice. 
OK, there's some misinformation and not great explanations of the issues you can hit here so I'm going to try and explain the problem better. &gt; A caveat: If you're not putting your `composer.lock` file in VCS, and you're doing `composer install` in the production container, you won't hit the issue here, but you're still doing it wrong. The lock guarantees a known good set of dependencies until you choose to manually update and validate the updates. So here's the issue: You depend on `package/foo`: { "require": { "package/foo": "^1.0.0" } } `package/foo` has a minimum PHP version of `7.0.0`. This is fine. It installs, and works on your local container, running PHP 7.0.x Now, PHP 7.2 comes out, and the package author decides that they want to take advantage of a new feature in PHP 7.2, so they bump the PHP version to `7.2.0`. Ideally, the package bumps the major version because this is a BC break, releasing this as `2.0.0`. Now, one of two things happens, depending on if they bumped the version: 1. If they bumped the version, your version restriction `^1.0.0`, will _correctly_ not be installed on your dev environment, but then you miss out on new features on production. 2. If they _didn't_ bump the version, the package will not _update_ in dev (see below), and without a .lock, would leave to _different_ versions of the package in dev and prod. Now, what happens is 1.x is _incompatible_ with 7.2? There's no reason the developer would care, they have a new 2.x that is compatible. You now run into the issue where there is no viable package for production. If you bump the dep minimum version to `^2.0.0`, there's no viable version for dev. And yes, you can set the platform to be 7.2 on 7.0… but if you hit scenario 2 above, then you end up with a non-working dev. This is why I run my unit tests with at least three settings for the installing my deps: - Use the lock: `composer install --no-interaction --prefer-source` - Use the _lowest_ possible versions that can meet the version restrictions: `composer update --prefer-lowest --no-interaction --prefer-source` - Use the _latest_ possible versions that meet the version restrictions: `composer update --no-interaction --prefer-source` - Update to the latest `dev` stability: `composer update --minimum-stability=dev --no-interaction --prefer-source` (optional, gives you a heads up) Now, the `composer.lock` is written based on the system that runs `composer update`. This means it's _potentially_ not valid for any other version, so I let unit tests using the lock file fail on other versions, and `dev` may be broken, so I also allow those to fail. A super important thing to consider: **for libraries, `composer.lock` is only good for guaranteeing your library dev environment is consistent. `composer.lock` does not bubble up. `package/a`'s composer.lock doesn't come into play in _your_ project, `composer require` computes the requirements and adds them to _your_ project lock file.** TL;DR: mis-matched versions introduces different dependency resolution (without .lock) or incorrect dependency resolution (with .lock), and relies on your dependencies author doing the right thing. Don't do it. Match your versions. Commit your .lock. Test with at least the first three composer installs.
Last tip: if there is an order form, enter -1. This has once lead to a company crediting my CC for the amount listed.
Well, Laravel seems pretty complete to me. Much more so than any JS offering, at least.
If he creates a simple form to generate the xml, I think it is good advice.
This depends on your skills as well. Do you have experience with frameworks? Although I agree it’s an overkill, it’s very fast to implement too if you know what you are doing. If you don’t though it’s not so interesting since it can be a lot to learn. In that case I would go for the xml/csv solution proposed. Or if your friend is not afraid of modifying code you could have a php file exclusively for setting prices, and he could modify that. Not good for the long term but the easiest to setup. 
It takes 5 minutes to upgrade your local PHP version. You really don't want to be doing this and you're throwing away one of the main benefits of docker.
Unfortunately it's an older project without any sort of ORM so things are more difficult :(
I have used doctrine a bit before, but sadly this is an old project without an ORM. It's a case of weighing up whether it's worth refactoring it to use an ORM or not. There aren't that many aspects of this project that are going to cause this problem again (I don't think), so not really sure! Thanks for your explanation, and I'll check out that book.
Didn't know about that method, I'll take a look, thanks!
Might as well just extract an action handler class that only has `__construct()` for effortless injection and `__invoke()` for the actual work.
[https://github.com/search?l=php&amp;q=stars&amp;#37;3A&amp;#37;3E1&amp;s=stars&amp;type=Repositories](https://github.com/search?l=php&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories)
**If you love numbers, you'll like it**
There's also [trending PHP projects](https://github.com/trending/php?since=monthly)
Sure. The point is object over array
By absolutely none specified, I'll tell you hwat.
Thanks for spreading coding standard awareness! My personal tips for 2 tools: - https://github.com/symplify/easyCodingStandard/ - https://github.com/friendsofphp/php-cs-fixer And 2 sets: - https://github.com/symplify/codingstandard - https://github.com/slevomat/coding-standard Not as a comlete group, but with interesting rules to add to set, like &lt;a href="https://www.tomasvotruba.cz/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/"&gt;DocBlock Cleaner Fixer&lt;/a&gt;
I usually mount the local folder as a volume in Docker, which gives you the flexibility to change the code and it's "immediately" reflected on the page. This will create a vendor folder in your folder. One of the checks packages can do is by PHP version. That can give you problems if you have different versions in test and production. Deleting the vendor folder and composer.lock and running Composer should clear most problems. 
You can take my variable assignments in conditions away when you pry them from my cold-dead-hands. if (($var = lookupSomething($x)) === null) { throw new Boom(); } Is one of my most widely used constructs, it acts as a guarentee that $var can never be used before a check on its validity has been performed.
I wouldn't say there is a hard limit, but to me, "too many" is when the method's signature becomes difficult to read and easily remember. That is why it is best to aim for method signatures that are as short \(yet expressive\) as possible. If the parameter list is too long, there are usually a few things to consider: 1. Is the method doing too much? If so much data is being passed into it as an input, perhaps it's being given too many responsibilities. 2. Is the method in the right place? Sometimes the argument list is long because it is a method is on the wrong object \(or is global\), and is asking for a lot of data that it doesn't have access to. 3. Can some of the arguments be grouped into a more unified, atomic value? Below we've seen examples of vector points being represented as value objects and some have said that it appears pointless. But consider cases where the argument list can easily explode, like a postal address. Do you really want to pass the the House Number, Street, Town, Post Code, City, etc... into the argument list each time, or treat that clump of data as an Address object? The grouping should be done when it communicates more clearly what the data actually is meant to represent.
Thanks everyone for the advice. Since my friend is a older person, I dont think him uploading a new page each week will be a good solition. Should have been more clear about my friends skills, sorry :) Since there is no shortcut(lazy as I am) I think I will go with a framework, I have some experience with laravel and codeigniter, hopefully it doesn’t take that long.
If you use composer like you should (commit both composer.json and composer.lock to VCS), you *will* run into issues. Packages can also require a specific PHP version, which will fail if they differ on the web server from your local machine.
1) Who the hell even uses Bing 2) Why do you need a search engine to index Reddit? Just use the built-in search.
I think the question is, who, who are technical, uses Bing? People who use systems as consumers use what’s there. People who are creators search for and migrate to better tools.
1) Yahoo does 😂😉
Use the same image in dev as in prod
Bing shows lots more interesting gardening search results for me. Old info that is more useful than modern sites on gardening topics. Also, the admin for this sub has it turned off so the search box doesn’t search the contents of posts. The search box only searches for what’s in the titles of posts. 
See my other comment. No need to assume things 
Yeah, the `$imageToCompose` parameter seems a lot like a code smell. It's something you'd expect from a static method, not an object's method.
Yeah, from your description it sounds like converting to an ORM would be overkill. How big of a dataset are you working with? If it is a few thousand rows I would optimize the query and then use /u/zabowl's suggestion and do all your manipulation client side. If we are talking about several million rows that approach won't really work.
If you're having trouble finding developers, it's probably because the compensation you're offering isn't reasonable.
DIY is always my goto 
Not sure this subreddit is even the right place for this question but without more details we can't really recommend much. - Location? - Rough salaray/pay? - Expected duration? - General description of work?
Upwork 
Go ahead and make these assumptions Im just looking for a "dev marketplace" jeez
I agree, processwire is a breeze
Deep under a rock perhaps?
Both of those Docker containers are running locally. If they did indeed work locally, why wouldn't the same containers work when deployed?
The rewards are legit. $200 I'm amazon gift cards over the past 2 years 
You could read the sidebar which has link to [@IHavePHPWork](https://twitter.com/IHavePHPWork) and [/r/forhire](https://reddit.com/r/forhire).
We probably haven't met, but I'd be one of those. There are only really 2 things I value in terms of code structuring: use tabs for indentation and try to be vertically compact. Horizontally, I don't care how you use white space. In terms of class names, I don't see much use in repeating the type of class (abstract, interface) either, since my IDE will help me out with that. Abstract classes can have non-abstract stuff in them, too, so the difference is minor anyway. Interface names lend themselves to have easily recognizable names like `Versionable`, too. But I do add an `E7n` suffix for exceptions, as in `SomethingE7n`. For the same reason that I write I18n instead of… you know. I admit, I'm also not very consistent in naming things. I do uppercase the first letter of class names and usually CamelCase them. But method and variable names don't really bother me. Sometimes I use `$apiResult`, sometimes `$is_valid`, sometimes `findThing()` sometimes `has_thing()`. Why this bothers some people to the point that they start setting up rules, I don't know.
haha, Amazon and donating some to the charities and the sweepstakes. Its pretty awesome
also https://www.phpthewrongway.com/
Thank you for your time explaining that. Well done. 
Absolutely matters. Why don't you use php7.2 in your docker??? 
Using site:reddit.com in my google search is way better than anything the search feature on Reddit could offer. 
It doesnt have to be that way.. but TPTB..
Yeah it's only a few thousand, nothing too crazy. 
Big fan of Slim; have used it with the League's oauth2 server
[removed]
Small question, I'm trying to get the contents of a folder to be displayed as buttons that when clicked execute a javascript function. Everything works correctly except for when the button is pressed, at that time I get the error that the file is not defined at HTMLButtonElement.onclick. My code: &lt;?php $dir = '\content'; $files = array_diff(scandir($dir), array('..', '.')); echo nl2br("Uploads:\n"); foreach($files as $file){ $file = str_replace(".txt", "", $file); echo "&lt;button onclick='select(" . $file . ")'&gt;" . $file . "&lt;/button&gt;"; echo nl2br("\n"); } ?&gt;
&gt; By default PHP supports only the GET and POST methods What makes you say that? PHP can accept any HTTP verb you want, even non-standard ones you make up. (Ex: ASDF) Some servers may not like it (Example: the built-in dev server you get with `php -S` doesn't seem to like all less common HTTP verbs nor arbitrary ones, but even that will happily do `COPY`, `DELETE`, `PATCH` or `PUT`) but PHP itself has no issue with parsing a request and setting `$_SERVER['REQUEST_METHOD']` to whatever.
Not gonna lie, it's video search interface is pretty ....uh.... handy.
"Bing pays me to use their crummy search... AMA" For me, bing just doesn't do it. Then again, I don't do much in the way of gardening or video searches-- the searches I generally do are better completed on google for no particular reason. I am curious as to how Bing will pay you to use their service. It won't be enough to change my behavior, but I am legitimately curious.
That's pretty pompous. Fine, I'll go on record. I use it as my first choice. Why? Bing Rewards. Granted, it's a pittance, but over the last couple years Bing has paid for a Raspberry Pi, a small SSD, and I think a book too, which I know isn't much, but it's a heckuvalot more than Google ever gave me for the privilege of tracking me everywhere I go. But wait, there's more! Yes, Microsoft tracks and is creepy. But not nearly as much as Google. SO I can vote with my traffic by searching Bing first. Yes, if i TRULLY cared, I'd use DuckDuckGo. And I do have DDG set as the default on my phone, but i'd say 75% of the time that i search for something on my phone, I have to re-search it with `!g` tagged on, whereas Bing, I probably only have to revert to Google results once out of ever 3 tries or so. SUre, one could argue "but your time is worth X". True. A quick search and scan of the first page of results takes all of 30 seconds. I'm fine throwing 30 seconds away to show other search engines that there are other eyeballs out there for them. Not to mention, if Microsoft can afford to buy me stuff for using their search, oughtn't ALL these companies that are making billions off our backs think about doing the same? Imagine, if they actually bid for the right to use our profile data? And by that, they made bids to us. So yeah. I would ask the same. Who technical, and who is aware of the privacy threats and implications, who technical would use Google products as their first choice?
You can do multiple. However generally the more queries you are running the slower your site. And since it's on every page load, if you have a lot of viewers your server might stop. Probably something you can try - create a static JSON file from the queries you need and load that data into the PHP file. You can also look into front end frameworks like React or Vue or Angular to do all the work on the clients computer.
I would say it depends. Eithet way, the solution is to cache the results for the next time if that's possible. 
Depends. It's better to have *fast* queries, regardless if you have one or many. 
It's less about how many queries and more about how long each of those take.
As always, it depends entirely on your situation. So long as you're not doing anything horifically complicated or running them in a huge loop, you can run queries till the cows come home and it's unlikely to put much additional strain on your database server vs consolidating them. When queries do become an issue, you're better off looking at things like application-side caching.
It all depends how complicated are these queries. Usually if your database server has a short latency multiple simpler ones will be faster than one big one. To put it in practice: in one of the (terrible and old) applications I worked on we had pages where full render required 350-400 queries to be executed and still the page was loading in under 100ms. On the flip side there were also reports executing 2-5 queries which were taking several **hours** to execute.
Please dont do work in constructors and for the love of god dont throw exceptions in there. 
Where is the object supposed to validate its consistency? Inconsistent objects shouldn’t be allowed to exist.
Nobody seems to have suggested this yet, one way to clean it up if you're dealing with repetitive queries is to store them as an array and only run the query once.
I added a disallow for Bing, to my mental robots.txt
All else being equal, the fewer the better. That doesn't mean you have to compact things into one giant, confusing, unmaintainable query. What you _should_ strive to avoid is the "N+1" query problem. e.g. ```php $firstResult = someQuery(); foreach ($firstResult as $row) { $more = doSomethingThatRunsAQuery(); // SELECT * FROM t2 WHERE id = $row['id'] // ... } ``` Instead, try to tweak things so the inner query loop is a single query (typically an `IN()` clause): ```php $firstResult = someQuery(); $ids = array_map(function ($row) { return $row['id']; }, $firstResult); $secondResult = secondQuery($ids); // SELECT * from t2 WHERE id IN ($ids) foreach ($firstResult as $i =&gt; $row) { $more = $secondResult[$i]; // ... } ``` Your code will vary, but hopefully it gets the general point across - no matter how big `$firstResult` ends up being, it still only takes two queries.
I dont give a fuck about you
Bing is actually pretty cool because you can piggy\-back off of it to create your own search engine. I don't know why Microsoft doesn't do more to market it to developers.
How so?
Can you tell us how bing doesn’t do it for you?
Interesting. If the bar could be defined for what the acceptable wait time/queries ratio, what would it be?
It's ok for each component to query the DB for what it needs, as decouplings helps in the long run. Each query cab get only what it needs for its components, and you can offset the number of times you hit the DB by caching results.
&gt; I don't think IDE matters a lot It does, if you are starting now.
https://www.nngroup.com/articles/website-response-times/
Indeed, but constructor is not for validating object's state. It's job is to initialize it. It's ok to have object with invalid state, because nobody should know that the state inside the object is invalid, It is the object's responsibility to manage it and it should not be exposed. The object should validate its state (if needed) before doing the actual work. For example, you could add "validate()" method that would throw an exception, or/and "isValid()" that would return a boolean. 
Inspired by your advice on the benefits of objects over keyed arrays, I did a bit more research into using classes for an incredibly data-heavy use case that's highly relevant to my (&amp; many other) projects: retrieving DB results. My god, what a rabbit hole of useful functionality I've never encountered before this has been! The ff. link in particular has enlightened me to the many applications of PDO::FETCH_CLASS: https://phpdelusions.net/pdo/objects Combining everything you've taught me so far, would you recommend fetchAll()-ing into classes with all required properties already declared and __set() throwing an error? Also, I've been trying to understand the perf implications of buffered vs. unbuffered queries. I understand (&amp; tested) the lower memory overhead on the PHP side, but how does this affect the MySQL side &amp; DB&lt;-&gt;PHP communication? Is there any memory or CPU overhead when MySQL is processing an unbuffered query? Is the roundtrip query latency incurred for every row fetched?
Unbuffered just means that data sits at the socket (in kernel memory, really) waiting to be handled by the driver. The total number of round trips for TCP is (essentially) unaffected, though when you buffer the result set it allows the transfer to continue past the end of the transmission window (which matters if you don't process the results immediately). In general, most PHP db driven apps can handle the data faster than the network can push it, or they're on the same box in which case the network doesn't matter. I do personally avoid fetchAll because it basically makes you iterate the dataset twice (once to load into a list, again the process the records) and obviously the peak memory ends up higher. By contrast, using an unbuffered query a row at a time is more like using a generator/coroutine as opposed to a range builder.
A framework is an overkill *now*. Using it now can alleviate future requests. An XML/CSV file is terrible UX design. A normal user might end up uploading an XLSX file (since it's Excel's default format), the site will stop working, and you'll lose a client. 
I dunno. Try binging it.
&gt; Tried everything from javscript, ajax, jQuery have you tried php? what have you tried?
Thanks
Use a json API. Request with xhr and in Js parse the json. Then, map it over into a table. If this isn't an appropriate answer then I don't understand your question.
Conceptually, I understand how it works. I'm looking for more of a functional answer or direction for an easy solution perhaps a tool that generates the code. Maybe I should post on stackoverflow. Thanks. 
thanks for reading the sub rules, deleting your question from here and asking there
I think you should try to be more specific. You want to get the API endpoints from [https://api.usaspending.gov/docs/endpoints](this page), right? Do you literally just want to get the endpoint URLs off that page? Or you want to request data from each of the endpoints there (which you have already extracted), and then display that data in various tables?
Wow thank you very much.
You should check out the new Stackdriver Debugger and the other PHP client libraries at https://github.com/GoogleCloudPlatform/google-cloud-php :)
Problem is how to store it on the server. Any sys admin worth their salt will fight tooth and nail to keep the server's permissions to the absolute minimum. Having a folder open folder for writing is one of the most used exploits. 
I fundamentally disagree. Passing around invalid object is breaking its contract.
You have more legitimate reasons to feel shitty, like going to hackathons, actually using PHP, and being defensive about it like a little tumblr girl.
&gt; You reuse the same value object to represent x/y coordinate and width/height size. This is absolutely pointless. Keeping related data together (enforced at a structural level, and not simply side-by-side in an argument list) has a myriad of benefits, and has always been a staple paradigm in programming. Presumably you were only considering the possibility of transposition of the two VOs, which using distinct classes would prevent, but simply using VOs in the first place already has plenty of benefits over using their raw data. Not having distinct classes for each does not make them "useless". &gt; You forgot composition mode, so you have 4 arguments, in conflict with your own "at most 3" arguments. Maybe. Or, perhaps that "mode" argument was discovered to be, like so many before it, hidden polymorphism dying to get out, and it was factored out in response. There's more to keeping argument counts low than just finding the hidden classes. &gt; If we have to be consistent and apply these value objects everywhere, when reading and writing individual pixels would require building and throwing away a value object for every pixel. This is presumably a higher level graphics API, so exposing singular pixels is a pretty questionable and contrived scenario. That would be like a higher level encryption API exposing the raw bits. Having said that, there's also nothing wrong with optimizing measured bottlenecks, even if that means unboxing VO data in cases where it's truly warranted. [...] That could slow down your processing by up to an order of magnitude. [Yeah, but probably not, though.](https://www.reddit.com/r/PHP/comments/8ewey0/anyone_else_vehemently_against_associative_arrays/dxz27lq/). And let's not base our software design decisions on hypothetical, unmeasured performance losses, because we all learned not to do that pretty early on in our careers. None of this means that I agree with adherence to any kind of strict, arbitrary rules on argument list length, but I do agree that large numbers of arguments are almost always red flags for design/architectural problems.
You get why you got so heavily down voted right? Like do I need to point this out or can you arrive their on your own?
I am trying to make comment section in my project. I want that it real time based. till now i am trying with lots of ajax. so is there any other ways to do it like with sockets etc . 
Yeah, I haven't encountered PHP since the days when PHP 5 was still new, but it wasn't lack of features that still cracks me up, it's the design choices of a 13-year old's side project. Like, it's not even JavaScript level. What's "semicolon" in yiddish again?
PHP is super unfairly shitty. It's basically JavaScript that you don't have to use.
&gt; it's like the reliable old family car with 100k miles on the clock Of the PT Cruiser model
This is what github is for
If you are using Mac or Linux, there is the [diff command](https://www.computerhope.com/unix/udiff.htm). Some IDEs, such as PHP Storm, will also allow you to compare two files and shows the differences. 
It’s a complicated subject. Generally 1000ms is *safe*-ish when users don’t have to look at white page (remember: 1000ms for whole render, not TTFB!). However keeping it &lt;500ms is good. Speaking about TTFB itself I try to keep it under 100ms. Of course I’m happy when I see 5-10ms but business wise it’s not always possible. Google has a great summary write up linking to multiple resources regarding speed in web and its impact on UX: https://developers.google.com/web/fundamentals/performance/why-performance-matters/
Meld is great
SublimeText has a nice FileDiff plugin. You can compare entire files, selections, clipboard contents... But really, any code editor or IDE has this, so it depends on what you're using.
Why would you say it's unfairly shitty lol?
[Helix P4Merge and Diff Tool](https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge). Can also be used as a merge tool in git.
KDiff works great on Windows.
If you're on Windows try Winmerge. 
There's also diffchecker.com
Jetbrains also lets you right click a file and compare with clipboard.
I think you're at least a bit misinformed. No programming language has 'native' support for decimal types as no CPU has 'native' support for decimal types. Your python/java examples are just libraries provided by the each. bcmath/gmp are good enough. They return strings which can be parsed by any language. For typehinting you can make a simple wrapper class for either, [and many exist already](https://packagist.org/?q=decimal&amp;p=0&amp;dFR%5Btags%5D%5B0%5D=gmp&amp;dFR%5Btags%5D%5B1%5D=bcmath).
Native to the language, not the architecture. 
0.5 sec is unnoticeable, 1 sec is noticible. Between 0.5 and 1 it depends on the individiual and the stress level, aim for below 1 if you want to be good, below 0.5 if you want to be perfect, at least on the 5 pages that have the most visits. 
By that definition, BigDecimal is not native either. The reason is simple, why add more bloat then there is already, for things people use only on occasion.
A preprocessor is similar in nature to a code generator, I think PHP has had a fair amount of generators in the past, specially for admin interfaces. My usual problem with code generators in the past is that once the code was generated, if I touch the generated code, I cannot easily generate more code again without destroying my modifications. Is that also a problem you see with your preprocessor? I really like you borrowed some syntax for haskell for your code generator, looking forward to see it evolve.
Yeah. Or, this is what ~~github~~ version control in general is for. If OP wants diffs but isn't using a VCS, I have to wonder why!
It's part of the SDK, so it's usually available for anyone to use without any third party dependencies. 
&gt; no CPU has 'native' support for decimal types. The VAX-11 did. So does many of IBM's System/360. Separate implementations of ADD/SUB/DIV/MUL/etc turned out to be unnecessary with just BCD coding. The 68k had BCD instructions. Intel's x86 chips still support a 18-digit (10-byte) BCD-format. Now we've got vector types and vector instructions and they're much more useful. The IEEE 754-2008 standard defines 32-, 64- and 128-bit decimal floating-point representations, and Intel [provides a library](https://software.intel.com/en-us/articles/intel-decimal-floating-point-math-library) implementing various libm-style functions for it. &gt; bcmath/gmp are good enough gmp mpf doesn't support decimal floats. It cannot represent `0.1` accurately. bcmath lacks a lot of useful operations that can be tricky to implement in PHP. 
There's this: https://developer.wordpress.org/reference/functions/do_shortcode/
Sure I'd use it. I don't see any good reason to not use it, if a decimal type would be available for the use-cases they're required.
Can’t take credit for building the library, just an interested watcher. IMO you shouldn’t be editing the generated code, especially with this library I can’t see why you’d want to as it’s spitting out pretty simple classes/wrappers. 
cool, how do i make it happen?
There is often an unfortunate gap between should and need. For more that I would like all my code be written by a machine, there are circumstances where the generator simply does not fit specific use cases that I'm interested in achieving.
&gt; Keeping related data together (enforced at a structural level, and not simply side-by-side in an argument list) has a myriad of benefits, and has always been a staple paradigm in programming. It's funny you say that, while in a neighborhood thread, people are making fun of injecting containers, or creating context objects to pass around, because through combining related objects together, they "increase coupling" and "reduce testability". It's all a matter of PoV, isn't it curious? &gt; simply using VOs in the first place already has plenty of benefits over using their raw data Yes, I'd like to hear a few of those "plenty of benefits" please? It's very easy to be vague like that. If you don't want to be specific about benefits, then the negatives of more verbose code, lower readability, lower performance and forced unnecessary complexity easily outweigh the generic statements of "plenty of benefits". &gt; Maybe. Or, perhaps that "mode" argument was discovered to be, like so many before it, hidden polymorphism dying to get out, and it was factored out in response. No, as I already said, the example was a wrapper around ImageMagick (Imagick), so it's not *"hidden polymorphism dying to get out"*, instead it's a library that supports N composition modes and that's it. This is why API design always should take context in mind, instead of liberally applying generic advice in blind abandon. Not everything is polymorphism, not everything is extendable, not everything is a plugin. ***But even if we put this aside***, saying "polymorphism!" doesn't solve anything here. Does it remove the extra parameter? No. It may move it around. It may actually double or triple the code again. It's interesting all these "improvements" complicate the API with zero apparent benefits. &gt; This is presumably a higher level graphics API, so exposing singular pixels is a pretty questionable and contrived scenario. The example is from Imagick, which is a low-level graphics API, so not only it's not "questionable and contrived scenario" but it's an actual real-world, and very common scenario across graphics libraries. Composing one image onto another is not a high-level operation. It's a low-level operation. We don't even have retained mode graphics here, it's all immediate mode low-level basic operations like image loading, saving, clipping, transformation and combination. So that was a wrong guess. &gt; That would be like a higher level encryption API exposing the raw bits. What does that even mean? All encryption APIs work with and expose "raw bits". Please don't talk out low-standing rear exits. &gt; &gt; That could slow down your processing by up to an order of magnitude. &gt; Yeah, but probably not, though. Sara is comparing the performance of *arrays* with *simple structs*. A struct in the context of PHP means a naked class with no methods (and typically no constructor), and only public properties. A VO is typically encapsulated, immutable, and in the examples here, it had a constructor (which adds significant overhead to initialization, compared to inline property initialization of a struct). And the alternative isn't an array, but... neither objects, or arrays, but separate scalar arguments. So what Sara said is completely irrelevant to the situation we're talking about, and what I said is still relevant. Introducing objects where there were none (and no arrays) is a significant relative performance slow-down for low-level operations. &gt; And let's not base our software design decisions on hypothetical, unmeasured performance losses, because we all learned not to do that pretty early on in our careers. I've measured them. Have you? &gt; I do agree that large numbers of arguments are almost always red flags for design/architectural problems. "Red flag"? OK, I guess it depends on what it means to you to have a red flag. "This method has 5 arguments" might temporarily raise a red flag for me too. But then when I see it's a low-level graphics API and the first arguments are `target, x, y, width, height` I'd put down the red flag and say "boys, false alarm, everything is OK!"
&gt; Is that also a problem you see with your preprocessor? The idea of perprocessors is that you should never touch generated code. You already have source from which code is generated and you should change something in this DSL or in code which is used to generate something from your DSL.
where can I find an ELI5 explanation or find someone to do this for me? I don't do code other than html :(
I actually do freelance work, if you'd like I can do this for you. Here's my website with rates and info: blainefreelance.com You can also send me a message on reddit.
I'll take a solid, creative PHP developer over a mediocre { name your language } coder, and vice versa, any day, and so do the best tech companies on earth. It's about what you can produce with the toolset you choose, and being wise enough to choose the best tools for your skill set.
I actually also do freelance work at half your rate, so you can subcontract it to me. I then subcontract it to Ivan who'll do it for half my rate, and he subcontracts it to Arush, who does it for half of Ivan's rate.
this is awesome guys follow this leadcoder.bogspot.in 
When I typehint something like EmailAddress or PhoneNumber, I want to rely on it, I don’t want invalid values. That means that the object has to validate passed value while being created - there’s no other opportunity for that.
I know the code coverage is not acceptable, but with time, it will. Besides of that, I've put everything I thought could be useful on any "everyday" project.
Have you ever worked with monetary values? We've had multiple cases where a number is close to but not exactly zero, or a cent out because of floating point representation. 
better delete this one and post as a link. it makes no sense to copy and paste a link such written in he title.
Yes! I really miss it.
Check your echo statement. You are writing the onclick function with a variable as the argument instead of a string. You need another set of quotes. echo "&lt;button onclick='select(\”" . $file . "\”)'&gt;" . $file . "&lt;/button&gt;"; 
thanks for the tip @colsharpel :\)
Your customers might not care if their balance is off by a cent, but if you have 100m customers and each of their balances is off by a cent \(in the same direction\), that's a $1m error across your books. If you don't know how to properly handle fixed point arithmetic, you shouldn't be building systems that have anything to do with money.
Where it matters is when you, say, sum customers' transactions to get their balance. Then the magnitude might be irrelevant, they're either balanced, in credit, or in debt, and you take action accordingly. Sure you could compare against a threshold, but then that's no easier than using a fixed precision type.
Cool, a preprocessor for a preprocessor 
My opinion is that invalid data should be handled on a different level and stopped as soon as possible in the application. Not all layers have to care about invalid values.
You are confusing "doing work" such as input/output, data transformation, lossy transformations and so on with
Of course I would. You can't use floats for eCommerce, and integers are very clunky (multicurrency makes amounts hard to compare, some customers want sub-minor-unit precision, etc). We (Drupal Commerce) currently use decimal fields in the database, fed to a Price object (Fowler's Money pattern) that uses a bcmath [calculator](https://github.com/commerceguys/intl/blob/master/src/Calculator.php) under the hood.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [commerceguys/intl/.../**Calculator.php** (master → d2315a7)](https://github.com/commerceguys/intl/blob/d2315a7e2dd85a86940feb381df5bdcaf1d2653a/src/Calculator.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dy5pipy.)
yeah, I was expecting someone to come in and go "but what makes it different from x, y, z" lol Looks fairly well done, only advice I'd give them is to make different types of websites with it and find out the limitations they'd hit and improve them as they find those limitations.
If it was that strong, Definitely. But, still, **For manipulating MONEY values,** I would use [**Fowler's money pattern**](https://github.com/moneyphp/money)**.** 
Neos is pretty cool cms, build by the people that made typo3
namespace App\Domain\Model { data Isbn = Isbn { string $isbn } deriving (ToString, FromString) where Isbn: | strlen($isbn) !== 10 || strlen($isbn) !== 13 =&gt; 'Invalid Isbn length' ; data Title = Title {string $title} deriving (ToString, FromString); data Book = Book { Isbn $isbn, Title $title } deriving (ToArray, FromArray); } An example of a non anemic data model which can be auto generated. 
&gt; Your customers might not care if their balance is off by a cent, but if you have 100m customers and each of their balances is off by a cent (in the same direction), that's a $1m error across your books. Eh, no. To get a full cent off, that customer would have to be running microtransactions in the trillions of dollars. There aren't 100 million trillionaires on Earth and even if there were, they wouldn't be all spending all their money in your specific company. In other words, you're massively exaggerating the error that would accumulate over all those accounts. The assumption all errors are in the same direction, and they result in an error in your books is also too forced. And last, but not least, if you think massive businesses don't have errors in their books... you'd be massively disappointed. Errors happen regardless if how good your computer math is. And then you compensate and correct for errors. And everything is fine. &gt; If you don't know how to properly handle fixed point arithmetic, you shouldn't be building systems that have anything to do with money. I understand your temptation to hurl cheap righteousness my way, but all of us in this thread, as we're discussing decimals vs. floats, are aware of decimal and fixed point arithmetic, including me. It's not brain surgery. The question I posed was what do we risk if we wouldn't care? What I *didn't say* is that we shouldn't care. But how much do we risk? And honestly... not much. 
As I recall Uncle Bob doesn't count the value to the left of the arrow as a parameter, which seems a bit of a cheat to me. Maybe because in Java syntax it's doesn't have to be explicitly specified if its *this*. It's also the most important parameter since its the only one whose type affects the dispatch of the function call.
My inventory page for a single product did about 45 queries, no problem. Index table properly then
Maybe? I wouldn't say absolutely not because there are bound to be places that would be useful, but probably not for currency though. Different types of currency can't be directly compared anyway so I've started handling it like Stripe does: everything is an integer and a separate field handles currency type which determines decimal place at the end-user display.
As far as I can tell that is just a named constructor.
Very well put into smooth words, Thank you!
Filesystem access pretty standard. For this, storing uploads outside of the document root would be fine as the uploaded files wouldn't have public access. Even still, not allowing script processing in the upload directory is pretty standard.
Hey @knotted10, thanks for sharing this with us. I recall when I wrote my own PHP framework I was too scared to ask for a feedback. Good job! To your code, what kind of feedback would help you the most? What are the places that are you least certain with? I'd be happy to help
Tell that to the Ariane 5. Also, having discrepancies in your balance sheets you cannot explain is an issue. And the higher the values, the less accurate floating point numbers get. Also, you can't check for exact values anywhere, you always have to remember checking for small ranges. Checking if a balance is exactly zero will fail in many cases. 
Yes, it does matter. And you don't only get wrong behavior by adding up many numbers. 
"my productivity dropped" I know organizations aren't all like this, but ideally you wouldn't need to be concerned about your personal productivity - you'd be more concerned about the bigger picture aims of your team and your organization. Of course this assumes that you have a healthy culture and you aren't being put in a position where you're encouraged to compete with your colleagues.
No, they can be arbitrarily precise or have a fixed precision without rounding errors (float has them even within its precision range). 
Thanks, that worked
Hell yes. Magento does some weird crap to get around floats
There was a suggestion I saw for this on [Fun Fun Fuction](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q) . You could consider making a an agreement with your team that each person does code review of any open PRs at least once per day. It helps if people pick different times of day to do the review, which you will probably want to do any. Then whenever you submit a PR it should get reviewed within a few hours. There's no need for anyone to drop what they're doing and review it straight away. Another option worth considering is pair programming instead of pull requests. This probably slightly reduces immediate productivity, but I've heard that it can massively improve team cohesion and shared understanding, and it means you can push changes directly into master without waiting for approval after you've coded them, so you can learn and communicate about what you're doing much faster.
&gt; Tell that to the Ariane 5. You want me to discuss money accounting with a rocket? &gt; And the higher the values, the less accurate floating point numbers get. Also, you can't check for exact values anywhere, you always have to remember checking for small ranges. Those are good rules of thumb for working with floats, but technically they're inaccurate. - Floats have the same accuracy no matter how big the number, as accuracy is counted in digits. For doubles, they can represent 15 decimal digits 100% accurately, guaranteed. In some cases up to 17, but you have 15. - Floats have an exact value you can compare. The problem comes from converting decimal to binary numbers and back. What looks like the same fixed point value with 2 decimal digits, may be two different floats in further digits. This doesn't occur with whole values (i.e. if you do math in cents, rather than dollars). But it can occur if your base is dollars.
It's a bit advanced for a five-year old. You could try Teach Your Kids to Code by Bryson Payne. https://nostarch.com/teachkids
Right, but when you create a Decimal column MySQL you specify the precision and the scale. If we were using a built in Decimal type the PHP core team would have to make that decision for us, wouldn't they? E.g. they might decide that decimal numbers are like xxxxxxxxxx.xx and then it would be no good to me if I needed three digits after the decimal point for my application.
Computers don't have wrong behavior. Unexpected, probably.
Didn't you watch [Office Space](https://www.youtube.com/watch?v=yZjCQ3T5yXo)?
deep-assoc-completion https://plugins.jetbrains.com/plugin/9927-deep-assoc-completion
I have, but when I discuss the real world, I prefer to stick to real world sources, not movies.
obviously nothing wrong with PHP. when we fail to serialize something, should we generate an error, or return garbage? obviously return garbage. ( https://3v4l.org/hcPKv ). when a function requires an integer between 0 and 255, and gets a number outside of that range, should we throw an OutOfRangeException? or perhaps an InvalidArgumentException? or should we just _SILENTLY CORRUPT_ the input until it is in range? yeah, lets just corrupt the input until it's in range. ( http://php.net/manual/en/function.chr.php#41471 ) when running the post-increment operator on a non-numeric string, should we generate an error, or assume that the coder meant `$str=substr($str,0,-1).chr(1+ord(substr($str,-1)));` ? yeah, let's go with that second option. ( https://3v4l.org/p5Apm ) , ... and i could go on if i wanted.
The example above creates something like: public function __construct(string $isbn) { if (strlen($isbn) !== 10 || strlen($isbn) !== 13) { throw new \InvalidArgumentException('Invalid Isbn length'); } $this-&gt;isbn = $isbn; } For the ISBN class, unless I've miss understood the definition for anemic data models then this isn't one.
In your controller examples, you're using your di container as a service locator as opposed to doing dependency inversion. Also, using singletons is generally an anti-pattern (you're using them all over your commands). It makes code much harder to test. Also use DI there. Generally, things like DI containers themselves are singletons, maybe database drivers. But generally most classes should not be. Also, making new frameworks is a great learning experience, but don't be afraid to include individual components that already exist out there in your framework. Taking components from Zend or Symfony, or individual libs that solve problems for you instead of implementing them yourself will make things easier. Most major frameworks already do this. SF includes parts of Zend and vice-versa as an example. 
This is just a simple example to prove a point. I agree with the original statement, editing generated code feels wrong.
Honestly, I've gone to simply using integers. I get that the value objects are useful, but most of my applications don't need the added power.
Bitcoin.
You need to go to /r/PHPhelp or /r/Wordpress instead of this subreddit. Maybe even going straight to /r/web_work or Fiver would be more appropriate if you're unable to implement on your own and need someone to do it for you.
Your point is, you can put an if statement in there so it's no anemic? Because that is wrong, anemic is if it has little to no business logic. That is little.
I’m saying you can use the generator to add logic in the generated classes, from simple to something more complex. I’ve just chosen to show a simple example. 
Well technically, you can do anything you want. But the reality is if you're working with anything but the most simple of crud systems you're going to be adding more logic constantly, so either you're editing the files or you're editing code templates. Once you've generated them, why do you want to maintain templates? The only use I can see here is to get rid of writing boilerplate code. Then there is the fact that the point you start getting to complex logic, why do it in something other than a proper programming language?
How did you create the documentation?
I think both suck. Store currency as an integer.
yes, all the time. money stuff should be decimal types and I can think of a few occasions where we've had to either do extra testing for or even correct a bug related to floating point arithmetic when doing money stuff. 
hey, your tone is bad and you're lecturing about something based on a misunderstanding of some of the issues that frequently come up in dealing with money stuff. it's not the Office Space scam that you have to worry about. it's not someone's account balance going off by a fractional cent that you have to worry about. it's computing reports and aggregate statistics across very large numbers of accounts that leads to error accumulation. 
&gt; it's computing reports and aggregate statistics across very large numbers of accounts that leads to error accumulation. I posted code that shows the errors don't accumulate to anything significant. With specific calculations, in particular if you're tend to round in a biased way, you can get error accumulation. But that issue is distinct from simply using doubles to store amounts. I demonstrated that. If you feel like putting your code where you mouth is, as well, do so. 
thank you very much
Terrible example: is it an `EmailAddress` or is it not? Your object says it is, but then `EmailAddress#isValid()` says that it might not be... This kind of approach introduces multiple issues when passing around objects: every layer now needs to re-verify the validity of the input, which is as bad as nullable-everything in Java. The exceptions being thrown are not for flow control, but rather for stopping the application from even attempting to do something incorrect.
He’s talking about words vanishing even when they are on a page in front of him so it sounds like a very different phenomenon than “the word is on the tip of my tongue.”
Depends. Generating initial scaffolding code for further editing is a thing. Meta-programming where you should never touch the generated code, but edit meta code and regenerate is also a thing.
&gt; In your controller examples, you're using your di container as a service locator as opposed to doing dependency inversion. Dependency injection you mean. Sorry for nitpick.
Im unfamiliar with this verb. Cannot find it in the dictionary. 
Symfony 4 on php 7.2 is like family car with V6 and turbo &lt;3
In `Gvera\Helpers\http\HttpResponse` your `redirect` method terminates the application with `exit;` after setting the location header. I will advise you to avoid doing this because you often times want to do something after the response has been set such as store logs, clean things up, etc. 
Well, technically they're not *required* anywhere, as we can use gmp/bcmath in those cases. They'd be nice-to-have though.
The first comment I was expecting was "Do not re-invent the wheel" followed by 10,000 downvotes.
Ah, okay. That makes sense. Sounds like a tricky situation, but your plan sounds reasonable and as you can see, there are plenty of options for diff tools :\) good luck!
This is me right now, i'm really confused and honestly want to stick with my procedural form. But with all the comments on how OOPHP is important in professional settings, i better endure and get this right. It's really boring and too long
It's preprocessors most of the way down, I'm afraid. Buckle up.
I'm pretty sure he meant inversion. Dependency injection and dependency inversion are different, albeit related,principles.
you're not really worth having a conversation with because of your tone and desire to disparage and mock your interlocutors. 
ImSuperObjective2, I think I'm with you. Wow, all the downvotes. It's really hard to come up with scenarios where floats cause issues. Agreed, the real world it's more often int overflows that are the culprit. Let's demonize INT instead!!! If programmers don't know how floats work then equality checks can fail, that's true. The only other real world issue I encounter is bad data where a float string with exponent is sent and the receiving program is not expecting exponent notation. This isn't the fault of floats, but just a common real world issue. 
Your link is already helping, I have some stuff already done but some other is missing and your post will fill those gaps. I'd say that I'd like some help if I've made some really complicated mistake over two things: architecture and performance issues that you could encounter. Thanks a mill for the comment, Cheers. 
I think you might be right, the redirect is too specific. Thanks for your comment.
I agree with you, I guess that I won't change much regarding this, since the services that I've put there, are mere examples, I didn't think about the logic itself while I was putting it, because I wanted to do something for showing how to use the framework. All of those commands / services / models / etc will disappear after I create the skeleton for the project. Anyway, thank you very much for the comment and I'll definitely use your suggestions in the future.
Dependency inversion means high-level modules depend on abstractions of low-level modules. It's more related to when and how you use interfaces to describe dependencies than it's related to whether you inject a container or not. So he had to have meant injection, not inversion, as none of what he's talking about is related to inversion.
You just keep wasting describing me and my supposed problems, and saying very little to nothing on the subject I'm talking about. Sorry, but did I order an amateur psychologist to analyze my comments? No. If you want to talk about decimals and money, talk. If not, kindly shut up and go nag someone else.
Also, check out https://github.com/preprocess/pre-plugin for an example of how to glue it into the Composer ecosystem; so that it's not a pain for developers to use.
Isn't that what he was suggesting? To drop the service locator and make the DI container use inversion for his controllers?
The main problem I've encountered is comparing to zero without rounding first, where the float value can be close to but not exactly zero, when it should be (for example in a reducing balance calculation). You're right though that many applications or businesses would discard the cents anyway, at least for display, but if you have a complex app that relies on comparisons or a lot of arithmetic, it's hard to trust the value you get at the end of it all. Not related though, but 0 === 0.0 being false has come up a few times as well. 
It would have to be a class that behaves like a primitive, by supporting arithmetic operators and casts. 
Regarding the last one, my rule of thumb for PHP is: - Always compare two strings via `===`. - Always compare to numbers (int/float) via `==`. And it's due to this reason, when you type an int literal by habit and comparing it to a float.
You can... Use get values in the request url. Pg12 Use hidden form fields. Pg33 Use Javascript to send a form/json/data. Pg52 I'm seeing this as a choose your own adventure, which page would you like to turn to?
Does VS Code do it out of the box? I just installed an extension today that works nicely. 
Sweet! Do you provide a Docker image for this? This could be immensely useful!
yeah, you just open two files and then right click one in the sidbar and chose "compare" then you rightclick the other file and do the same
Look, I know some of what you're saying is being memed around on the subs and forums, but it's simply not correct. And throwing more stuff into it, like Inversion of Control, isn't helping. Here's a short definition and relationship of what you said so far: - Inversion of Control is the "framework" principle. The vendor objects control the lifecycle of your objects (i.e. framework/container relationship), instead of your objects controlling the vendor objects (i.e. library relationship). - Dependency Injection is a *very narrow, very specific implementation of IoC*. It concerns merely that "something outside" controls and gives you your dependencies, however IoC is much broader than this, so calling DI containers "IoC containers" when all they do is manage dependencies is incorrect (but common). - Dependency Inversion is defined literally as this: "High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions." This is about what I said: using abstractions. It's not about injection. - SOLID is just a popular grouping if unrelated principles, mentioning for extra cred was kind of desperate, it has nothing to do with "dependency inversion vs. injection". So let's leave it out of this. Injection can be part of a mechanism in implementing dependency inversion but inversion has absolutely nothing to do with whether you're passing a container to a controller, or individual dependencies. Those are absolutely unrelated issues.
Please add unit testing. Trust me, it helps.