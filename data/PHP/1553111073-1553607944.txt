That's was I thought initially. I won't do anything in php because I don't want to install a server on each device, so just html and javascript should work. I was afraid mainly because I never worked with native apps, and for now I would not have the time to learn to build a native app. I will follow this approach for now, thanks.
Time for a playlist! 
This need more visibility. Have you worked on the Roots stack before?
&gt; the mentioned frameworks are related to MVC in the same way as Democratic People's Republic of Korea relates to democracy and WordPress is related to MVC the same way Saudi Arabia is related to democracy.
For Atom, have a look at [atom-autocomplete-php](https://atom.io/packages/atom-autocomplete-php) - it claims to auto complete classnames, and add the use statement for you if needed.
Deploying on Friday 
When I was a freelancer I used my own custom stuff for every single project, but now I mostly use WP Starter. Obviously, I'm aware of the Roots stack, but never used it :)
is it though? I was able to successfully make the transition
A higher order function means you have a function (or method) that returns a function ***or*** accepts a function If you pass a function into a function, you have runtime polymorphism, if you return a function from a function, you can better feed other functions that accept functions PHP as a language has several higher-order functions built into its standard library: * usort * array\_filter * array\_map * array\_walk The fact you can define your own is more interesting because you can delegate behaviour function travel(callable $method) : void { $method(); } function walk() : void { echo 'walking'; } function run () : void { echo 'running'; } travel('\walk'); // walking travel('\run'); // running
&gt; Business requirements require technical problem-solving, and a framework can't write those for you. Which is why I advise against only learning frameworks. From what I gather, for most guys, it's one or the other. And this type of thinking limits a programmer's abilities. If that programmer is working in a company where the owners know nothing about programming, well, I hope you can see the possibilities for a clusterfuck at some point in the development cycle.
No-one said it was.
&gt; However if properly implemented like in the [doctrine module](https://github.com/doctrine/collections/blob/master/lib/Doctrine/Common/Collections/ArrayCollection.php#L305) those can be quite fun to work with. There's a PR open right now that adds appropriate types: https://github.com/doctrine/collections/pull/177/files#diff-6ecd3b230c9f7cef1a38ea4da84278f3R248
I just shared the link thinking it will be useful to some forks here, am not the creator of the article, if u find any issue on the post or anything to please refer that in the post so that the post can read it and make changes
Doesn't help my situation. I know how file permissions work. I'm looking for something that no matter what the file permissions are it intercepts what I'm doing and blocks me.
It might have been modsec but I don't think so because I'm pretty sure I would have remembered that.
Looks like I didn't read the article properly it mentions functions as an input I'll talk about the two pain points in the article though: - Traversing the array twice - No type checking with the keyword ```use``` When writing code like this: ```php $output = \array_map(function (int $i) use ($a) : int { return $i + $a; }, [1, 2, 3]); ``` There's a couple of problems: - reuse - semantics (no name for the operation) - importing variables into scope without types It could be written like this: ```php function adder(int $a) : \Closure { return function (int $i) use ($a) : int { return $i + $a; }; } $output = \array_map(\adder($a), [1, 2, 3]); ``` Now adder() can be called from anywhere in the code base and on many things or one thing: ```php $output = \adder($a)($i); ``` both $a, $i were type hinted as int which solves the lack of types on the imported variable problem Traversing the array twice is a more complex issue, the main problem is function + methods calls are slow when done hundreds of thousands of times in PHP (check this in your favourite profiler) but ignore that for a second, pretend you want to do many operations in one iteration, like filter, and then map but in one go like a foreach loop can, this is when you should know about a technology called transducers Transducers are not in PHP's standard library so I would not recommend them for general usage but you can use them in PHP here: https://github.com/mtdowling/transducers.php Transducers come from Clojure with ports for Ruby, JavaScript, PHP, if you have this problem in the real world consider loops with function calls inside instead but for purity sake transducers offer the generalised solution
[Joind.in](https://Joind.in) talk ratings are here: [https://joind.in/event/php-uk-conference-2019](https://joind.in/event/php-uk-conference-2019)
Because use doesn't really "bring in" anything. It's a convenience to shorten/rename classes in the scope of that file. The autoloader will only kick in when it attempts to access an undefined class. Wildcard matches on imports are bad news. Even new languages like rust used to put wildcards in their `use` a lot more, but have started to move away from it as bad practice. It's bad for the same reason as the `extract()` function in PHP is bad - you're adding into the scope of the file, without actually saying what you're adding. Imagine I had something like: use MyLib\*; $contract = Contact::get(); I'd actually wanted to get a "contract", not a "contact" but the `MyLib` happens to have a Contact in it too. It doesn't fail, because all this code is valid, but it's a huge logic error. If the `use` required you to be explicit, you'd know. There's also the case where you have two wildcards. I say: use Foo\*; use Bar\*; $baz = new Baz(); I won't know without running it or doing some very intense static analysis, exactly which of those namespaces `Baz` was found in. This could get especially bad, if Foo and Bar are external libs, and I update them both. Baz could've come from Foo before the update, and now comes from Bar after it. So none of this really makes it easier. It makes it much harder.
I am going to sound like a pedantic snob, but if your class has 20 dependencies you might also consider splitting functionality into separate classes. And as for the question; multiple people have given a valid answer that doesn’t seem to be the answer you want to hear :) The explicit use statements prevent collisions in class names on runtime. PHP is an interpreted language, so these collisions likely won’t raise its head until you actually run the code. On compiled languages this can be checked during compile time and you won’t run into issues on runtime. That said it is of course a choice by the core developers. Python implements this in a different way; iirc you can import an entire module, but then you will need to prepend the entities with the module name. But I’m not as familiar with Python as I am with PHP, so I could be mistaken.
I've just worked with it more and feel more comfortable with it
To a certain extent. You still have to use use statements when using composer packages, in the modern PHP 7 standards. With lazy loading that is not necessary, the use statements are basically generated. It creates a major problem though when you have two classes with the same name. So basically to resolve this I snake case my class names, and then I basically end up back at square one. Because as with the dualistic nature of everything. Solution implies problem.
The full answer is because \`use\` statements are a compile-time process. So \`use Foo\\Bar\` literally just replaces all instances of \`Bar\` with \`Foo\\Bar\`. The reason Java can do a \`\*\` where PHP can't is that Java compiles all files at once. So it can know while it is compiling what potential classes it could mean. &amp;#x200B; With PHP on the other hand, it compiles one file at a time without knowing any future file. So that leaves to bad options: Make \`\*\` mean any class already defined (which is bad because it means \`\*\` changes meaning depending on load order). Or make \`\*\` load all possible classes at once (which is not possible since you can always \`eval\` things into existence, load classes from a new directory, etc). &amp;#x200B; And so PHP has taken the approach that since it's not really possible without changing the compilation and runtime model, don't do it.
&gt;and being actual developers who can code properly This is the key - you need to be able to distinguish yourself from the thousands of people on Fiverr selling basic WordPress skills for peanuts. Once you get beyond that, there's a a big market for competent devs who actually know their way around WordPress and PHP.
What I've done in the past is have a "queries" directory, which has classes that connect to my PDO wrapper that do single queries (if it can't be done in a single statement, it doesn't belong here) to the DB, and then a "models" directory for anything that has to do multiple queries, and or manipulation of input or output to / from the queries (business logic). [https://github.com/ellisgl/GeekLab-GLPDO2](https://github.com/ellisgl/GeekLab-GLPDO2/graphs/traffic)
I’m not being critical, but to play devil’s advocate, why does PHP have to co form to every other language? Why can’t it be it’s own language that does its own thing? But more to your point, I can import any part of a namespace path, such as `App\Model`, and then reference the classes as `Model\User` and `Model\Role`. And if there is a collision with `App\Model` and another namespace/class, I can alias one of them as such: `App\Model as AppModel`. No, it’s not exactly what you’re looking to do, but it’s what PHP does. Aside of being explicit, are you running into a particular problem with how it works? I’m sincerely curious. 
Thank you! :)
Thank you! :)
So you need your script to write what it needs but not others? I dont get how you expect that to work without user permissions .... or i'm missing something ... maybe we need more info?
Looks good, shouldn’t ‘short’ be char(6) instead of varchar(255) since the length is hard coded in the validation of URL in both redirect.php and htaccess?
Looks like I need to fox the hardcoded length - since its a base64 value :)
fixed - thanks for the second set of eyes :)
I think functions like `array_search` should return `-INF` instead of `false` if the needle isn't in the haystack. Here are my reasons: * `INF`, `-INF`, `false`, all resolve out to `0` when trying to get an item out of an array. Here is an example. Given the array `$array = ["test"];`, the following are correct: `$array[INF] === "test"`, `$array[-INF] === "test"`, `$array[false] === "test"` * `-INF + 1` still equals `-INF` while `false + 1` equals `1`. When trying to get the item directly after another item, you would search the array to find the index, add one, and then access the item by it's key. You would have to make sure the `$index !== false` before adding one to the index, but it would be much easier/cleaner to only have to check if `$index &lt; 0` to know to not to try to access the key in the array and not have to worry before the addition. * If you have a method in a class for getting an item out of an array by its key and also a method for finding the key of an item in an array, having key-finding function return `-INF` would be much simpler to option #2 than do to do option #1: # Option #1: &lt;?php class Collection { protected $items; public function __construct(array $items = []) { $this-&gt;items = $items; } public function get($index) { return isset($this-&gt;items[$index]) ? $this-&gt;items[$index] : null; } public function index($item, $strict = false) { return array_search($item, $this-&gt;items, $strict); } } $collection = new Collection(["item1", "item2", "item3"]); $index = $collection-&gt;index("item1"); if ($index !== false) { var_dump($collection-&gt;get($index + 1)); // string(5) "item2" } $index2 = $collection-&gt;index("item3"); if ($index2 !== false) { var_dump($collection-&gt;get($index2 - 2)); // string(5) "item1" } // If you forget to do the check: var_dump($collection-&gt;get($collection-&gt;index("this is not in the collection!"))); // string(5) "item1" (false resolves to 0, thus "item1") var_dump($collection-&gt;get($collection-&gt;index("this is not in the collection!") + 1)); // string(5) "item2" (false + 1 resolves to 1, thus "item2") # Option #2: &lt;?php class Collection { protected $items; public function __construct(array $items = []) { $this-&gt;items = $items; } public function get($index) { if ($index &lt; 0) { return; } return isset($this-&gt;items[$index]) ? $this-&gt;items[$index] : null; } public function index($item, $strict = false) { $index = array_search($item, $this-&gt;items, $strict); return $index === false ? -INF : $index; } } $collection = new Collection(["item1", "item2", "item3"]); var_dump($collection-&gt;get($collection-&gt;index("item1") + 1)); // string(5) "item2" var_dump($collection-&gt;get($collection-&gt;index("item3") - 2)); // string(5) "item1" var_dump($collection-&gt;get($collection-&gt;index("this is not in the collection!"))); // NULL (-INF is not greater than 0) var_dump($collection-&gt;get($collection-&gt;index("this is not in the collection!") + 1)); // NULL (-INF + 1 still is -INF, and INF is not greater than 0) I feel like I re-stated my point a few times, but I hope you get what I was trying to say. I will appreciate all the feedback I get.
remember that if you used {*} it would incur escalating penalties as there's a disk read for each file. It's way better to be explicit about the imports. Java and other compiled languages dont care, cause they are read once and compiled... however in php this happens every time. This is also why you should optimize your autoloader in production. 
- Why mysqli? Why not PDO? - In redirect.php and shorten.php, altho the SQL queries are immune to SQL injection it's still generally considered best practice to use prepared statements. The rationale being that prepared statements make it harder to make mistakes if one chooses to make modifications. - You have display_errors enabled in redirect.php but disabled in shorten.php. I'd suggest disabling them for everything. In fact, I think you'd do well to omit the `ini_set` in the first place since the person using your software ought to have it conigured correctly in to begin with. - In shorten.php you use get_magic_quotes_gpc. Per http://php.net/get-magic-quotes-gpc magic_quotes_gpc has been disabled since PHP 5.4.0 and that method always returns false. - In shorten.php you use the DB_TABLE constant for the INSERT but hard-code the table name (shurl) for the UPDATE. Seems to me that you ought to be consistent - do the constant for both or hard-code for both. Don't mix it up. - If `short` can be derrived from `id` then why do the UPDATE or LOCK TABLEs at all? Why not just extract the id from `$_GET['url']` in redirect.php?
That sounds needlessly convoluted IMO. People should always be checking their return values and introducing INF representation trickery is inviting additional hard to diagnose bugs. Even though things returning false annoys the crap out of me, I think the last thing we need is common usage of *another* null-ish type. Also, and somewhat more importantly, there's no requirement for an integer key.
I agree that at this point, it probably should be changed, but I think it would have been a useful thing if it was introduced at the beginning. Yeah, I didn’t think of the null-ish side of things. I know, I might have messed that up in my main comment...
Just like php-fpm, but with a lot more overhead.
This is a very wrong approach. Instead of introducing more magic you should start using strict types. Then you essentially have `?int` or `?string` return type and no problem at all.
A `Result` or `Option` type (like Rust has, among others) could solve this nicely, but it doesn’t really fit in with the rest of the language. Never mind a messy breaking change. 
If you are going to shorten a url with base64 encoding, why would you need a table in the first place? You can handle each long url just by looking up its encoded or decoded value. I see that you are using row id to generate urls, but I don't think that it is anywhere usable. Apart from that, thanks for rewriting it in PHP7.
&gt; How does a whole firm fail to deliver? By picking the wrong tools (WordPress being one of them). Literally ANYTHING you can build in WordPress, a competent developer can build faster, more performantly, more securely, and more cheaply in a proper frame like Laravel, Symfony, Django, Rails or any other low level framework in any language. I have worked on enough WordPress sites where it's easy to see how horribly encumbering WordPress can be at even basic, simple things. I would go so far as to argue that the number of projects WordPress is right for is very, very slim. Outside of that slim zone of projects that WP is ideal for, it is a giant pile of technical debt. Your story about a client going with a firm that flounders about and doesn't deliver is absolutely NOT unique. It happened to my dev shop all the time. We would lose clients that *insisted* it had to be in WP, and they would come back a year later with a completely non-functioning ball of shit. Or we ourselves went grossly over time and over budget trying to ship some complex solution in WP at the insistence of the client, instead of telling them to fuck off. WP market pricing is basically upside down. The belief is that WP does a bunch of shit for you out of the box, so a WP site should cost less than a custom site since "most of it is already done" (what a load of fucking hogwash). For a very, very narrow range of sites and functionality that is true, but for anything even remotely complex, it is the opposite. The industry should actually be charging *more* to build sites in WP because it's analogous to a roofer using a spoon to re-shingle your roof. He'll find a way to get it done, but it's going to take him 1000x longer than using a proper tool, as such he should charge 1000x more for time, and another 1000x more just for the fucking frustration of it.
TLDR: Questions like how to set cookie or define an array in PHP and lots of ads.
This is my favorite: **Q: What are some of the big changes PHP has gone through in the past few years?** A: There are a number, but the big ones people are looking for are: - PHP 5.0 realised the object model (AKA OOP). - . 5.1 added PDO – for accessing databases. - 5.3 – added namespace support and late static bindings. I don't know whether to laugh or cry 
NO, Because: Negative indices are valid. This change would break an incredible amount of valid production code. We shouldn't give special meaning to magic numbers, as one might get to that number by accident or on purpose through computation. This may become a valid index when tracking how many times a certain resulting number occurs.
I wouldn't call it unusual to use parantheses even when they are only placed where they would normally be implied as well, just for the sake of readability. Code is for humans to read and for computers to execute; it's meant to be easily understood by whoever reads it next; using parantheses can sometimes help understand what's going on immediately without having to remember operator precedence rules.
**Why I use PHP in 2019:** Because it's good and it works well for my needs. **Why you should too:** Because it's good and it will most likely work well for your needs too. 
And it's a public property, so why use a type safe constructor anyway, there are no guarantees.
Lets put it this way: when you pick up a fresh dogshit and squeeze, it does not matter between which too fingers comes out more. If I have to fix a random 3rd party project, I actually would prefer CodeIgniter, because it does not come with an ORM and its own templating language. But in a greenfield project I would use neither.
Use at least php7.2 with types
Please point me to the line of code where this query is built, I'm not too familiar with Laravel and I can't find it.
Two things. unique() needs to check if the field exists in this model at all and if not throw an exception. ignore() should escape the input automatically based on field type in the model configuration. At least that's how it would be in my ORM.
That XKCD would fail a simple dictionary attack. Use words that aren't in a dictionary and then yes it's secure.
Best answer! I use WP for many clients aswell, they are comfortable with it. In Software Development documentation is always a problem, so that is not an argument against WP, since you can find very much things in the internet. It always depends on your client, which software is right, so no one can say WP would never be the way to go.
On my phone right now, but something like vendor/laravel/illuminate/src/Validation/Rules/Ignore.php
That's right, not using bind variables fir that one action. The fix, I believe, is to put `add_slashes()` in there, which is an appalling fix. It doesn't tackle the real problem, and only works on mysql anyway. Laravel is not a purely mysql framework. I use Azure SQL in many installations. The fix imo should be to strip out any character that is not used in a model ID, so keep only integers or strings that can be used in UUIDs. Better still, throw an exception if anything else us found there, rather than silently change the query. Or, use proper data binding.
&gt;That's right, not using bind variables fir that one action. The fix, I believe, is to put add_slashes() in there, which is an appalling fix. It doesn't tackle the real problem, and only works on mysql anyway. This is wrong. The `add_slashes()` fix only applies to the data being passed to `str_getcsv()`, not the database, which is a reasonable use case for it. It seems the data is bound, but the columns are not being bound. &gt;The fix imo should be to strip out any character that is not used in a model ID, so keep only integers or strings that can be used in UUIDs. The problem isn't to do with IDs, but column names.
Going by your comment below, you're not looking at the right code, the [`__toString\(\)` function on the `Unique` class](https://github.com/themsaid/framework/blob/5015a79f4e27ed80623c7d7919ed49250f67932e/src/Illuminate/Validation/Rules/Unique.php#L59) is used for parsing rules into Laravel's CSV format, not used with the database.
WP hackers may be OK allrounders (as in Web stuff) but likely below par programmers. 
Ellis did not want to continue working on it, but spent well over a year looking for someone to pass the codebase repos on to. During that time, everything else moved past it. Now there is an active community &amp; many important re-writes, and it may be well on its way to being a good option again, but I don't know where it would stand out specifically. So many developer have gone off to Laravel, Symfony, etc that unless there is something Codeigniter does that's special, there's no reason for them to come back.
Hi, let me explain my situation. I have created a bot in php, which uses certain APIs to do specific operations, and it also refreshes the whole "page" every few seconds to check certain conditions in APIs. Now, i want to run this bot in cloud, and i\`m confused that if I install apache and PHP in cloud, it will work just like a webserver, means it will need a client to visit that page in order to make that code run, but i want it to run on it\`s own without any need of client? Please help, thanks in advance! 
Do PHP frameworks exist that implement MVC? One that includes notifying views when models are updated.
Surely not, why spend time coding features that are readily available as quality tested software? No employer or development team should want that.
I feel the most asked questions nowadays are: what is SOLID, what's not SOLID, what's clean code, What's TDD, BDD, DDD... Not a good time for people who suck with acronyms 😅(me)
I don't want to base64 encode the whole URL - that wouldn't be short at all The only way its shorter is if you're referencing that ID :) You could avoid the base64 step and just use a number...but that's a little less friendly, imo
Look into using the “shebang.” You’ll essentially just install PHP, and your script will be run from the command line. You could then set a cron job to execute it. A few notes are that sessions, headers, request parameters, and other HTTP data is missing, and PHP becomes just a general scripting language. Have fun!
First, php probably isnt what you want for this to begin with. Second - if you have cli &amp; cron job permissions you can run a script any time you want. I use php to purge records every day. I run it via php cli via a cron job. In my situation this isnt an issue because the end user doesnt need to see anything from this process. If you need to see something consistently, use the current script to store values to a db. Create a front end page that does an ajax call on a timer to a backend page that pulls the values from the database.
- Why not mysqli? - can you give an example of a prepared statement? - good catch - I'll turn that off in both places :) - seems I missed pulling that one out - it wasn't kicking errors when I was testing (and is a holdover from the original) - second good catch :) - I left the lock in because it was there in the original, and doesn't seem to be hurting anything; I suppose I could just base64_decode in redirect instead of looking it up, but it's fewer steps on the redirect (which will theoretically happen more often) to just do a SELECT on the short value instead of converting it to a number - *plus*, if the short value has been munged, typed, etc, I *know* it will cleanly fail the SELECT, whereas decoding it may kick errors for incompatible types in the SELECT (which I was seeing during some of my testing) 
3GByte of videos lasting a smidgin under 14 hours, just for this year. Thanks for the reminder of the link.
A good DI container is supposed to automatically inject services into each other and be invisible. You should NEVER call WhateverLocatorItIs-&gt;getService() manually. That's the whole point of a DI container.
This isn't really correct. The maths presented in the comic is based on the assumption of a dictionary attack. If you're not using a password manager, passwords are a trade-off between the ability for humans to remember unique passwords and entropy. There are _far_ more words in the English language than there are unique characters on a standard keyboard, so you can use less words to achieve a similar level of entropy to a more "random" password, even if the attacker is using a dictionary attack. The xkcd password approach is by no means perfect, but in general terms it's an improvement over not using a password manager and truly random passwords.
&gt;vendor/laravel/illuminate/src/Validation/Rules/Ignore.php This is the part in the Unique class, so I don't see this. ```php /** * Ignore the given ID during the unique check. * * @param mixed $id * @param string|null $idColumn * @return $this */ public function ignore($id, $idColumn = null) { if ($id instanceof Model) { return $this-&gt;ignoreModel($id, $idColumn); } $this-&gt;ignore = $id; $this-&gt;idColumn = $idColumn ?? 'id'; return $this; } /** * Ignore the given model during the unique check. * * @param \Illuminate\Database\Eloquent\Model $model * @param string|null $idColumn * @return $this */ public function ignoreModel($model, $idColumn = null) { $this-&gt;idColumn = $idColumn ?? $model-&gt;getKeyName(); $this-&gt;ignore = $model-&gt;{$this-&gt;idColumn}; return $this; } ``` Taylor mentions: "the vulnerability is that a user can construct a string that is sent through the str_getcsv call by the validator and uses a column of their choosing in the DB query" so actually Laravel is not suffering any SQL Injection whatsoever, it's just dangerous usage of untrusted user input as a column name of the developer. 
&gt; Ugh. bCrypt's maximum is 72 characters. Don't be like this and limit users to 30, those with password managers will thank you. Additionally /u/Fewthp, even if you're using bcrypt you can support passwords of arbitrary length by first hashing them with SHA-384 and base64 encoding the result (to avoid issues with `0x00` in bcrypt) before passing them to bcrypt. If you have to use bcrypt rather than more modern algorithms like Argon2i, this is usually the best approach. 
Never is wrong, you __have to__ call it at least once at framework/routing/HTTP kernel level for it to work.
Since a DI container is essentially an oversized factory you could obviously also write factories for (almost) every class.
&gt;even if you're using bcrypt you can support passwords of arbitrary length by first hashing them with SHA-384 and base64 encoding the result (to avoid issues with 0x00 in bcrypt) before passing them to bcrypt. Yeah, while this is a solution for allowing &gt; 72 character passwords, just to note you have to be careful on how you do this, which is why I don't generally suggest it. Limiting the password to 72 characters because you're using bcrypt is an ok security tradeoff. When you finally start using argon2i (which you can do in 7.3+), then the limit can vanish and all is well.
What do you mean by "automatically"? I'm sure, that you need some description of how services should be injected (it can be done through anonymous functions, yaml configs, annotations or other way, but rules must be defined some where). About never calling getters: obviously, there must be some place that will call them. I agree with symfony di-container documentation: &gt; You will need to get a service from the container at some point but this should be as few times as possible at the entry point to your application. But there will be times, when I will get a service. Even if we are generally avoiding getting services, I still do not understand what advantages do di-container give me.
FYI, https://wiki.php.net/rfc/typed_properties_v2
## Variant 1 (Pimple) Pimple is just a container for objects you can define in a factory in form of callable (function). There is no "autowire" feature in Pimple. You have to define all dependencies explicit to resolve it by Pimple. This is very easy to understand, explicit, without black-magic. You don't need to compile or cache the container, because the PHP OpCache will cache it into the memory. This memory cache is faster then parsing (yaml config files) and other cache files like some libraries does. Developing and deploying without caching issues is also a big plus for Pimple. The real question should be: How can I use a DI-Container/Factory in combination with proper Dependency Injection (constructor injection)? 1. Never inject the container into something 2. Use constructor injection 3. Let the DI-Container inject the dependencies via constructor injection. Then you don't have to worry about "mixed" return types, because all classes are strongly typed via type hinting. This concept is possible with Pimple, but only by implementing the factories manually. Of course it's possible to implement a small Pimple-Autowire feature if needed. ## Variant 2 (Self made) This concept doesn't scale very well in real life projects. Imagine you have 100+ of routes, services, repositories etc... The self made container/factory class will become a mess with 1000+ public methods and properties.
Please stop calling them hints. They are enforced types at the compiler and run-time level. They are not hints.
Thank you for reply, can you tell me more about scaling point. I believe with pimple, there will be same mess with 1000+ anonymous functions? Even little bit more mess, since there is also 1000+ strings that represents services and do not auto complete well. What am I missing here?
IMO using a decent modern DI container / injector vs manually writing factories is like the difference between manually including php files and using an autoloader. &amp;#x200B; Sure you still have to guide the container (using configuration) to help it with injection definitions, but it makes your life just so much easier.
Uhm. Look at the article again. The "hints" are types used within the PHPDoc spec.
The most usable containers support "auto-wiring", where the container uses reflection to determine the dependencies of classes and injects them automatically, without manually writing any code. Of course a person can write all injection setup manually, but that can get tiresome. A good DI container like [php-di](http://php-di.org) will greatly reduce the amount of "glue" code and still be very fast. See also [do you need a DI container](http://fabien.potencier.org/do-you-need-a-dependency-injection-container.html), by one of the main authors of Symfony.
I recently had to a project in wordpress, but instead of using tons of plugins to frankenstein something together, i made two plugins myself. so if you have that opportunity, its a decent enough ecosystem to work in. i dont love it, but its fine and lets you do "real" programming
I'll be keeping a close eye on this. I suspect targeting 8.0 will pass with some very vocal objections. I suspect targeting 7.4 will fail by a large majority, which will probably result in the need to do a PHP 7.5 release with JIT available as experimental. 
&gt; which will probably result in the need to do a PHP 7.5 release with JIT available as experimental. It will not make sense to have a 7.5 release just to include the JIT ... no matter which version has a JIT, it will be experimental, and experimental features much better suit a .0 release than any other.
Perhaps, perhaps not. Trying to make a big fanfare out of the launch of a major new version would be severely hampered if its flagship enabled-by-default feature proved unstable due to limited real-world testing opportunities without taking on all of PHP 8.
In addition to breaking a lot of things and that it fails for negative indexes, this way you simply break the linguistic meaning. That is, instead of "nothing found" it will return "found an infinite number". &amp;#x200B; And, why for the Option #2 you are using `if ($index &lt; 0) {return;}`, but in Option #1 you skip a such check? Be fair, use `if ($index === false) {return;}` in the Option #1.
&gt; I suspect targeting 7.4 will fail by a large majority, which will probably result in the need to do a PHP 7.5 release with JIT available as experimental. I'm not sure how you came up with this idea, but this is not going to happen. The release cadence is already decided and there will be no PHP 7.5 release.
Oh yeah, and this ... it just isn't going to and can't happen, even if it did make sense ... which it doesn't ...
Containers can be very simple. Just take a look at PSR-11 - the `ContainerInterface` only has two methods, `has()` and `get()`, and that's all you need to build some very powerful stuff. In most implementations, Container usage would look something like this: $container-&gt;bind(Bar::class, function(): Bar { return new Bar(); }); $container-&gt;bind(Foo::class, function(Container $container): Foo { return new Foo($container-&gt;get(Bar::class)); }); $foo = $container-&gt;get(Foo::class); A couple of things to note here: 1. Mixed return types aren't really a problem, because calling `get()` with some class name as the argument will either return an instance of that class or throw an exception. 1. We're using the `::class` constant, which is technically a string, but makes it very clear and obvious what class we're referring to. 1. Dependencies can be resolved recursively, by injecting an instance of the Container into the resolving Closure. Using this approach, we can keep the individual Closures very simple. 1. Because of 3., we can limit direct use of the Container to our "bootstrapping" code and use injection everywhere else. Basically, application code should never be calling `$container-&gt;get()` directly. If we use reflection (this is optional - a Container doesn't have to use reflection), we can even skip many definitions entirely. In the example above, since `Bar`'s constructor doesn't define any dependencies and `Foo`'s constructor only needs `Bar`, the Container could use reflection on `Foo` to figure out it needs an instance of `Bar`, more reflection on `Bar` to figure out it doesn't need anything and then simply instantiate `Bar` (empty constructor), instantiate `Foo` using the newly created `Bar` and return the new `Foo` instance. For a more realistic example, let's say our application has a `FooController`, which needs a `BarService`, which in turn needs a `BazRepository`. Our application receives a request, goes through its routing layer and figures out it has to use `FooController` to answer this particular request. It now calls `$container-&gt;get(FooController::class)`. The Container takes care of creating the `BarService` needed by the `FooController`, the `BazRepository` needed by the `BarService` and so on. Again, this can either be done through reflection magic, or by explicitly defining a resolver for all of these classes beforehand. Now imagine doing that in your own container class. If you wanted to keep your "one method per class" model, you could end up with hundreds or thousands of methods in a larger project. Personally, I think using something like Laravel's [Service Provider approach](https://laravel.com/docs/5.8/providers), where you have a number of classes, all registering resolvers in a shared Container, makes much more sense. Providers make it very easy to keep different parts of your code base separated, while still enjoying all the benefits of having one, central Container.
piss off with your spam
&gt; even if it did make sense ... which it doesn't ... Strange, because I'm fairly sure Nikita posted to internals literally 5 minutes before he posted here, where he said of JIT in a pre-8.0 version: &gt; If Linux distros build with the JIT compiled in, we may get much more testing, as not many people compile PHP themselves. &gt; &gt; It allows testing the JIT on code that is not compatible with PHP 8.0, but is compatible with PHP 7.4. Then gave reasons why PHP 7.4 is already quite packed. Thus, if you want the benefits of wider pre-8.0 testing, without shoving it into 7.4, the only option is 7.5. I don't see how that doesn't make perfect sense. Of course, if you're not interested in the benefits of wider pre-8.0 testing then it's a mute point, but I suspect a significant minority of the vote will show in favour of a pre-8.0 JIT experimental release. 
colshrapnel, I have one question for you. You told, "output section should cover only well - output." and do not link strings with output. What did you mean by "only output". Which specific tasks? Do you mean output buffering or something?
If you are thinking in a way how frontend frameworks work; no. And it is not possible due to nature of HTTP; once browser gets resources (HTML), it is done! To have what you ask, you need JS and web-sockets server running in background and is not hard to build.
no, I meant it should cover echo, a shorthand echo and may be some specific output function like var_dump() the main idea was to separate strings from output because it's two completely different topic - oune could echo a variable, so, no string literal would be involved, and at the same time one could assign a string literal to a variable, so no output is involved. Means it's 2 different topics that shouldn't be in the same chapter
Huh, I didn’t think of that.
I couldn't find a way that negative indices are valid. Could you give me an example? &amp;#x200B; Also, I was under the impression that you can't get to `INF` by just adding numbers together?
Have you googled anything? have you read the sidebar? /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
&gt;Mixed return types aren't really a problem, because calling get()with some class name as the argument will either return an instance of that class or throw an exception. Auto complete and tools like psalm/phpstan/phan (static analysis) do not work well with mixed types. &gt;We're using the ::class constant, which is technically a string, but makes it very clear and obvious what class we're referring to. That is a great approach! Thank you for this suggestion, it will make things much more obvious. &gt;Dependencies can be resolved recursively, by injecting an instance of the Container into the resolving Closure. Using this approach, we can keep the individual Closures very simple. In my implementation I just used `$this`, I think it achieves same result. &gt;where you have a number of classes, all registering resolvers in a shared Container, makes much more sense. That's a good point. If I want to split definitions of services in to separate files, maybe I can use traits?
Looks like its going to PHP 8.0, an amazing feature for the next major release. I also hope to see the following 3 new things in PHP 8.0 if possible: 1. Short Closures 2. Async/Await 3. Scalar Objects
&gt; Why not mysqli? See https://websitebeaver.com/php-pdo-vs-mysqli . There are pros and cons to both but best practices generally dictates PDO. &gt; can you give an example of a prepared statement? MySQLi: http://php.net/manual/en/mysqli.quickstart.prepared-statements.php PDO: http://php.net/manual/en/pdo.prepared-statements.php
And of course, you'll need at least once, for bootstrap, but please be serious, your answer is useless.
I'm pretty sure that after some digging you'll conclude that returning `false` is the best solution.
Well 1 yes I’ve spent time googling as I mentioned before 2 no I’m on mobile right now and not able to see the sidebar. I’m sorry for not knowing phphelp exists.
No, not unusual at all, in fact I completely agree that it's more readable to use the parentheses. I was simply going off the statement: &gt;Fun with order of operations! To me that says, "Hey! What's coming next shows what you can do when you properly understand the order of operations!", like: &amp;#x200B; 6/3 \* 2\^2 \* 3 + 25 / 5 = 29 [Fun with order of operations!](https://www.calculatorsoup.com/calculators/math/math-equation-solver.php?x=6%2F3+%2A+2%5E2+%2A+3+%2B+25+%2F+5&amp;action=solve) &amp;#x200B; By using parentheses to set off the modulo operation you are actually eschewing PHP's order of operations and "forcing" one operation (the modulo) to come before another (addition) that would actually already be evaluated that way without the parens according to PHP's order of operations. 
Where can I find that group?
Nifty, their minimum supported version of PHP reached end of support months ago. It probably wouldn't have take much coding to declare the minimum supported version to be 7.2, and leave 5.6 and earlier users on the last version.
Now I understand what you meant. I'm updating my tutorials. Thank you.
In other news WordPress still written for PHP3 with PHP4 features spotted in places.
It's not even a question of coding, WP runs fine on 7.3 if that's what you have available. It's a question of what minimum it requires. That minimum is 5.6, because your long-tail wordpress user has different requirements and different motivations than a "traditional" PHP dev. Would I like to see them push a little harder on bringing hosting providers into this decade? Of course. Would ability to thread scalar typing throughout the WP core substantially improve its security and stability? Almost certainly. That doesn't mean that picking an EOL minimum has anything to do with sloth and not caring about the end user. It's the opposite of that. It's caring enough to understand that "just upgrade" is a naïve and simple-minded answer to someone who just wants to publish a blog about training Golden Retrievers to salsa dance.
If Wordpress would use composer, the packagist statistics would be totally screwed up [https://blog.packagist.com/php-versions-stats-2018-2-edition/](https://blog.packagist.com/php-versions-stats-2018-2-edition/) &amp;#x200B; It's a shame that Wordpress still supports and un supported PHP version, they are one of the products on the spotlight of PHP as a language.
Seriously? 5.6? They are so conservative over there. :/ And what about a proper DBAL so we regular folks can actually use other DBMS than MySQL/MariaDB?
Link: [https://github.com/laravel/framework/issues/27949](https://github.com/laravel/framework/issues/27949) &amp;#x200B; Other related issues: [https://github.com/laravel/framework/issues/27913](https://github.com/laravel/framework/issues/27913) &amp;#x200B; [https://github.com/laravel/framework/issues/27828](https://github.com/laravel/framework/issues/27828)
Ouch !
Do you have an instance as to why you want something other than Mysql or MariaDB? I agree on your point about 5.6. Just trying to understand why a different DBLS is wanted. 
Should have used Yii
i'm surprised to see so many people mentioning autowiring DI containers. Which libraries are you using that have such good autowiring capabilities. Most of my experience is with Pimple or older versions of Symfony and Zend where you have to do the wiring yourself. I've used the autowiring in newer versions of Symfony, but I found that it was of limited help and that in many scenarios I was still hooking things up manually. 
\[15:07:02\] No gulpfile found npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! @ gulp: \`gulp\` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the @ gulp script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. &amp;#x200B; npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\USR\\AppData\\Roaming\\npm-cache\\\_logs\\2019-03-21T15\_07\_02\_226Z-debug.log can anyone advise me on how to resolve this? ive tried npm install gulp, ive tried removing and reinstalling npm too &amp;#x200B;
Any more info, maybe? Like what happens, what is supposed to happen, what did you try, how are things set up?
I'm glad I stopped using Laravel
especially since 5.0 was a bigger break anyway with the new editor, I would have imagined they go to a higher php version requirement then and there... but nope..
Depending on how well this goes, they're going to bump to 7.0 by December.
I don't usually feel qualified enough as a PHP developer to get into these types of discussions but it doesn't seem like /u/driesvints is being reasonable in the discussion, and then he locked it. Essentially it comes off as him saying EVERY PHP library should have it's own separate Laravel library. That's pretty ridiculous... In what world would we want to rely on every PHP package needing a distinct package for Laravel?
People who use composer are probably not the same people who are running wordpress systems. Or, let me phrase this differently: Most WordPress installs are just people/companies wanting a blog (or sth. similar). And therefore they are totally irrelevant for composer statistics.
SQL injection nice
I am a DevOps engineer in a large multinational company. The data center already provides "DB as a service" but only MSSQL, Oracle and Postgresql. Every effing time I want something new set up they keep asking me as to why I want to use MySQL instead of using one of their DBMSs and the answer every time is "because WordPress supports only MySQL/MariaDB". Cue the eye-rolling. I WANT to use their services because I do not want to set up and operate MySQL services myself but I can't.
Yeah he is very much so being unreasonable.
&gt;People who use composer are probably not the same people who are running wordpress systems. Yeah, that's what I tried to say :) Packagist statistics looks very nice, and a lot of people use them like: "well, nobody uses php 5.6, so, we're going to completely drop support for it". But Wordpress is all around the web, a lot of people uses it, and if the amount of wordpress install were inside those charts, they would look completely different. &amp;#x200B;
Hi I left a comment, as it wouldn't let me add text. I've tried reaching installing npm, gulp in various different ways, I've added "gulp":"gulp" to the scripts portion of the package .JSON file ect.. I've undone the failed change each time I have made one so I know they aren't stacking. 
Sorry, gulp is not php, it's node. Maybe try [https://www.reddit.com/r/gulp/](https://www.reddit.com/r/gulp/) or [https://gulpjs.com/](https://gulpjs.com/)
Now that's a shitshow. Take popcorn, this is gonna get interesting. Pushed to Twitter: https://twitter.com/Psihius/status/1108753311354761226?s=19
[https://make.wordpress.org/core/2018/12/08/updating-the-minimum-php-version/](https://make.wordpress.org/core/2018/12/08/updating-the-minimum-php-version/) They might go to PHP 7.0 :)
I kind of understand where he's coming from. As far as I can tell, the question appears to be whether Laravel should populate system environmental variables from .env or if the variables defined in .env should only be available through Laravel. 
I think it makes a big different if you just fill an "array" with anonymous functions or write a Class with 1000+ public methods. By "scaling," I mean: A class, even a factory class, should follow the SRP (SOLID). A factory class with 1000+ different methods would definitely violate the SRP principle. Even if you could "split" the methods into different traits, the conceptional problem remains. But these are only technical details. There are much more important things to consider. It is much more important to use this "tool" correctly. Don't use the container as a "Service Locator" anti-pattern: https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/ Don't fetch the dependencies from the container in your constructor or elsewhere. Instead: Use the DI-container as a factory and as a tool that injects the dependencies via constructor injection. 
It depends on trade-offs you're willing to take (or taking uncosciously just by following the crowd). I don't want to explain all the branches of choices you could make, so I'll focus on my approach, where all advantages come down to: **Environment configuration &amp; interdependent common infrastructure (DDD: framework utility services) defined in one place**: 1. That means I use container only for framework single instance services that could be reused across various use-cases. Routing provides internal urls for views/responses, authentication strategy is used by many routes, database endpoint, session, mailing, http client library ... etc. 2. These services are often interdependent - other services might want access internal parts of concrete service. Authentication use database/session for example - when request hits already authenticated endpoint you may leave authentication behind, but still want access same database or session instances/providers. 3. Lazy loading is more like necessity to keep Inversion of Control in place than advantage, because not all services are used in single request-response lifespan. Fou use-case specific services I use factories (or sometimes just callbacks defined directly with routing endpionts). These factories depend on container\* and routing callback definition have access to container from parent scope: $route-&gt;endpoint(function ($request) use ($container) { ... }); Container services won't be called within factories (although I sometimes decide to call for "runtime configuration" there), so type checking will happen when use-case service that depends on it is instantiated. When it comes to string identifiers. For objects I suggest using top level class name returned from container - simplifies IDE navigation and prevents spelling errors. That may require replacing it across project (in factories only) in case of switching one service for another, but that should be very rare in mature codebases. &amp;#x200B; ^(\*) It may be considered) **^(service locator)** ^(anti-pattern, but the context is harmless in case of factories. In factories you may even use singletons if you think about it. I'm open to change my mind, so arguments why service locator might be bad in factory context are welcome.)
Looks like Taylor reopened the issue. As far as I'm understanding does the DotEnv package not load the environment vars into the actual environment anymore? That seems odd...
Honestly this shouldn't be an issue. If you want your .env vars to go into the system's environment just write a quick script in bootstrap/app.php to do so. I can see why they would not want .env vars to be loaded into the environment.
Hasn't Laravel done this before (minor version bump with breaking changes)?
I agree, you could also just move the external environmental variables to your web server config. I'm not sure if the actual issue was made very clear in this bug report. But I also don't see this specific issue documented in the upgrade guide, maybe I missed it?
I don't see the issue either, you can still access Laravel .env. Your libraries can't access Laravel's .env, but why would they ever want to if they're not Laravel libraries?
But that is what environment variables are. They are not exclusive to the php application, nor they can even come from local reading of the environment. A lot of times all those variables come from outside the container and you have to read them via getenv. And the fact is other packages rely on the same mechanic. Basically what they did is create a walled garden. This is not acceptable period and there is nothing to understand. You do not do shit like that. Period. Especially on a minor release.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Half the people using Laravel think Environment Variables is something the framework invented.
I'm not sure if the issue was made clear in that bug report. I also don't see what he referred to in the upgrade guide. Was this change in a minor release? The upgrade guide link is for 5.8.0, a major upgrade.
I don't think Amazon will patch their SDK but there are ways around this. If you need specific things in your environment for the AWS SDK to work you can still load them in. Maybe we need a differentiation in laravel's bootstrapping process for laravel specific environment variables and system environment variables
Rude
&gt;Do you think Amazon SDK will suddenly patch their SDK to use a laravel helper and have laravel helper package as a dependency? Now let that sink in. Why would they need to? .env was never the only way to insert environmental variables, but I'm still trying to find some context on the change that resulted in this.
5.7.0 -&gt; 5.8.0 is a minor upgrade if you follow semver
No offense but Oracle and Microsoft suck.
Major release is a 5.7 to 6.0. 5.7 to 5.8 is minor. A 5.7.5 to 5.7.6 is a patch release. The issue is clearly described in the issue. Especially if you take your time and read it properly and not skim it. Maybe not everyone just understands the significance of changing how environment variables are read and populated, because not many people are dealing with it, but this is essentially on the same level as if PHP decided that `file_get_contents` cannot read from URL's any more on a 7.3 to 7.4 update without a single warning.
A lot of libraries can take their configuration from the system's environment variables, previously setting things in the `.env` file would pass those along to the system environment, so you could easily configure third-party libraries from the `.env` of the application rather than having to manually set environment variables for those libraries separate from the application config. This isn't necessarily the best way of doing things, but it does work fine for small deployments and simple sites with a single application per-server.
I think it's the other way: 3rd party libraries need env vars to work. But if you're using Laravel, you probably are using the native Laravel and a .env file to those vars. It's only natural to do it that way. But now you either: \- need to define those vars not using the .env file, which requires you to have 2 different methods to set things up \- or manually write a script that "leak" those .env vars to native ENV vars I just read the Laravel 5.8 upgrade guide and it's definitely not mentioned. 
Microsoft does not suck.
But true. you do not mess with environment variables. That whole thing is a fundamental OS level feature across Windows, Linux and MacOS at minimum. They work the same across all those environments and this is not something for a framework to mess with period.
Hello everyone, &amp;#x200B; a few years ago I got interessted in web development and I bought a few books on that topic. Since php is big in Germany and wide spread I was recommended Murach's PHP and MySQL 2nd Edition. But I had to lay off my plans for a while because I decided to get a better education in Germany so I could go to University some day. Now since I am almost done with school again, I want to go back to study web development and I want to know PHP and MySQL. But I noticed that there is a 3rd Edition of the book now and PHP 5.5 isnt the newest version anymore, which is tought in the 2nd Edition. How important is it for me as a beginner to buy the newest Edition of the book? The book is expensive and I realise that at some pont I should upgrade, but I want to start as soon as possible and dont really want to buy a 50€ book right away.
I agree, the Laravel team did the correct thing in making it so the .env file doesn't populate system level environment vars.
So you do a patch for Amazon SDK. Then you do a patch for Braintree SDK (it is affected too). Then for PHP-CS-FIXER. And the list goes on. It is affecting literally thousands of libraries . You will have to write glue code for each of them. Does that sound reasonable, especially when fix is a one line for the framework core and it was like that for every previous framework version?
Okay forcing an software update on you obtrusively in the middle of working pretty much one of the worst design decisions they’ve made just to start. There’s a whole world of better tools out there they are waiting to copy I’m sure. They are leeches.
You don't need to patch any of these, just find another way in the framework to load system level environment vars. These SDKs 100% should not update to use laravel's environment helper functions, that's insane.
Right, it's convoluted, but more importantly it looks like it doesn't break anything Laravel specific or third party libraries used by Laravel like the bug author seems to imply. Braintree and AWS aren't going to use Laravel .env entries directly, are they?
You need to configure it. How that's done is described in the documentation and/or ony many, many turorials. If you're setting up an already existing project, ask the person who originally set it up.
&gt; Auto complete and tools like psalm/phpstan/phan (static analysis) do not work well with mixed types. True, but calls to `$container-&gt;get()` should be fairly rare and almost exclusively located within your service providers (or whatever you're using to setup the Container bindings). You can easily add some PHPDoc to those instances to make static analysis tools happy. Works very well in my experience. For PhpStorm, framework-specific plugins and `.phpstorm.meta.php` can help. &gt; In my implementation I just used $this, I think it achieves same result. In your case, yes. In a Laravel service provider, you could also use `$this-&gt;app`. But I think passing the Container as an argument or through `use` is generally cleaner. &gt; That's a good point. If I want to split definitions of services in to separate files, maybe I can use traits? I guess, yeah. Still sounds pretty messy to me.
Thank you dude
Well I meant you need to.write the glue in your app so environment variables from .env are properly exposed to the OS environment so, as a specific example, Amazon SDK can read them.
XBox 360 is the best console
Previously the variables in the `.env` file were pushed to the system's environment, 5.8 changes this so that they can only be accessed through Laravel's environment system. For example the AWS SDK can be configured by defining a system environment variable named `AWS_ACCESS_KEY_ID`. Previously putting `AWS_ACCESS_KEY_ID` in your `.env` file would mean that AWS could access it, as it was copied into the system's environment variables when the application was bootstrapped, but this no longer happens, so you have to manually define that environment variable at the system level.
Ah, ok, my fault, so it is a minor upgrade.
The bug author implies that this breaks the libraries directly, which isn't true
&gt; Do you think Amazon SDK will suddenly patch their SDK to use a laravel helper and have laravel helper pack Laravel does not follow SemVer, which isn't a huge issue as long as you understand that Laravel works with `paradigm.major.minor`, but certainly can cause confusion.
It breaks the apps that use these libraries and are being configured by the .env file
For good or ill, Laravel does not use Semantic Versioning. It uses a variation on Romantic Versioning: - the first number is the "paradigm" or "concept" version; - second number is what we'd call the "major" version within that paradigm; - third number is what we'd call the "minor" version. The argument being that 5.7 to 5.8 *is* a major BC breaking change. I point this out, not to say I *agree* with the strategy, but only to say that is *is* the strategy.
This change definitely should have been signposted better and probably deprecated on a previous major version, but Laravel doesn't follow SemVer, so the first sentence doesn't apply. Laravel uses `paradigm.major.minor` as it's scheme, which has already been debated to death, rescuciated and debated many more times. It's not a huge issue, as long as you're aware that Laravel doesn't follow SemVer.
Still locked
Which Laravel does not and it's well known. Not saying I agree with it, but 5.7 -&gt; 5.8 is actually a major upgrade so it's bound to break backwards compatibility.
&gt; just write a quick script in bootstrap/app.php to do so As far as I know this is exactly what the ".env" system in Laravel is for. From my understanding they have a system to load environment variables, but they don't want to actually load them into environment variables anymore. It would be fine if these were called something else than "environment variables", because well they are no longer that.
My point was he refers to something being documented in the upgrade guide but doesn't link to what he's referring to beyond the entire upgrade guide. I couldn't find any change documented that would cause this.
Yes I understand that, and I meant that Braintree and AWS are not using the environment variables themselves, your setup might be, and you can still change your setup so they are loaded at the system level like you say. We can say this break certain Laravel/AWS setups, but not any Laravel 3rd party libraries themselves.
For Laravel 5.7 -&gt; 5.8 is a major release. Laravel does not follow semver.
&gt; Laravel v5.8 breaks thousands of third party composer libraries Yeah so this isn't true
TIL they don't follow semver, that explains a lot.
It kinda is. It breaks how they operate plugged into this specific application. Also... I get really burned out by people taking terms literally and that do not try to understand the intention of what is written. Not everyone is fluid in English, embrace the puzzle of trying to understand written language.
&gt;https://phpdelusions.net/top Technically, you could have a shared data container shared across your nginx service and your php service, keep just one nginx container that you'd use as a load balancer and just autoscale your PHP container depending on the request load. You'd end up using less resources than by duplicating everything else. Running just one instance of NGinx makes it easier to use it as a proxy server from which you can cache static assets or content.
I'm torn on this one. On the one hand, breaking default functionality for .env files is a no-no. On the other hand, this negative *only* occurs when using Laravel. While I think it would be nice if Laravel didn't break this functionality for 3rd party libraries, I don't think they have a responsibility to - rather the responsibility lies on those 3rd party libraries to decide if they want to play nice with Laravel. To me it comes down to what's more important: Laravel's ability to expand their functionality as a framework without worrying about 3rd parties, or 3rd parties ability to rely on default PHP functionality regardless of what application they're used with. I lean towards the latter, but I'm not sure.
For good or ill, Laravel does not use Semantic Versioning. It uses a variation on Romantic Versioning: - first number is the "paradigm" or "conceptual" version; - second number is what we'd call the "major" version within that paradigm; - third number is what we'd call the "minor" version. The argument being that 5.7 to 5.8 *is* a major BC breaking release, as has been pretty much every 5.x (and 4.x? and further back too? don't know) release. I point this out, not to say that I *agree* with the strategy, but only to say that it *is* the strategy.
Read dotenv 3.0 release statement and no mention about not populating environment. Still explicitly stated getenv should work by default
Well I empathize with people who can't voice their concerns fluidly, but the bug issue title is super inflamatory and it's being reposted as-is. If the post just said that Laravel 5.8 breaks some specific app-library integrations I would have no issue with it.
But Laravel's release statement doesn't mention this change either, so that still doesn't help. I guess we'll wait to see what is uncovered in the github issue. I haven't done anything with 5.8 yet, our team sticks to LTS versions.
&gt;Async/Await I hope. Then I can stop using Node for anything and just stick to Python/PHP.
I struggle with the idea of backwards compatibility. It makes sense to me that if you developed a thing for Package 1.0 that your code might break with Package 2.0. You would include the Package 1.0 code, not just “Package.” I think a lot of PHP developer would love to kick some of the old ways PHP does things, haystack needle or needle haystack situation. But that would break things. Eventually a piece of code won’t be able to keep up with the most current version of a framework or library, etc. This is why, and I will get yelled at for this statement, I prefer the plain vanilla when using any coding language instead of relying on frameworks that may change or just simply get bloated, old, or slow. 
I understand your concern. However, I can understand a person being careful and is upgrading using the guides might be a bit _annoyed_ if their application breaks. I can imagine they panic and try to find the reason (probably while their application still being in a broken state in production even). I assume they just quickly file a report and hope for a quick answer. So. It's all disorder and not by the book. But at least the maintainer should try to be a bit more "customer-friendly". To be honest I see in this discussion just misunderstanding and not bad intent but man those responses from driesvints came out wrong.
This wasn't a minor version bump, Laravel uses `paradigm.major.minor`, not SemVer. That said, there have been fairly isolated breaking changes in minor Laravel release before, but the same is true of pretty much every major library or framework at some point. When you're developing hugely complex systems used in weird and wonderful ways that you can't predict by tens of thousands of people, you will eventually change something that breaks somebody's code in ways you couldn't reasonably predict or test for.
I've used Laravel's DI container and PHP-DI. Usually the only times I need to manually wire my dependencies are when I need to inject configuration into an object.
Two things should come out of this (but likely won't) * Developers need to understand that Laravel Framework IS NOT SEMANTICALLY VERSIONED. It's the classic off by one programming error. Laravel treats MINOR versions as MAJOR versions and PATCH versions as MINOR versions. This means 5.8 IS NOT backward compatible with 5.7. Please stop being outraged by this as it's been like this since 4.1 (I don't remember if 3.x was the same way) * Developers should stop making *laravel* packages and build *php* packages.
3rd party software just needs to be written in a way it is easy to integrate it, it is frameworks job to do integration. Otherwise with that logic we can say it is Symfony Components job to satisfy Laravel needs on which it is built upon and not the Laravel job to do the integration of the components.
Some similar behaviour can be implemented using the spl_autoload function and custom class loader.
Heh not if they got stuck in an mcrypt trap at all. Going from 7.1 to 7.2 on a tool my company has is a big mountain to climb
Yep I do not think he was honestly trying to help him out, I understand library authors getting pissed over annoying bug reports but it's no good excuse. Feels like both are in the wrong in some way.
I think that’s a sane default, but the reality is many frameworks in many languages will look for a .env file and load it in during application bootstrap. It’s a *very* common convention, even though it’s intended to be exclusive to local development. Retaining that behavior should be, at most, a clearly documented one-line config change.
If you're using third-party libraries that rely on environment variables to work correctly, why exactly aren't you just, you know... setting the environment variables? Personally, I really don't think it's Laravel's job to magically `putenv()` everything from .env. I mean, I don't have anything *against* it and I guess it's not a bad idea if there are people relying on that behaviour, but I don't quite understand how it warrants this kind of drama. Dries was being a bit of a dick in that issue though.
I mostly use Laravel, so Laravel's Container for me.
You can get there if either operand is INF. It's toxic, like NaN that way: https://3v4l.org/rSCr0
That’s a one-liner using the dotenv library. In fact, digging through the GitHub comments, it sounds like they’re already using it and override the default behavior, so you already have the right tool available to you.
Err, I just woke up to this. I don't particularly having a problem with enabling \`putenv\` again when loading the \`.env\` file, as long as people understand it is not thread safe and can have unexpected behavior.
Thanks for the Answer
I think the title of the issue (and this post) misrepresents what the actual issue is. The problem isn't that this change somehow breaks third-party code that doesn't even use Laravel, the problem is that it breaks *Laravel apps* that rely on using `.env` to directly configure third-party dependencies that can load their configuration from environment variables. What's going unsaid in that whole thread is that no library can _only_ be configured through environment variables. The AWS SDK can be configured through passing credentials to a constructor just as well as it can be configured through environment variables. Yes, you do need to change your code to account for this, but far from it that this can only be fixed by patching every library you use to use Laravel's `env()` helper. I do agree that this should've at least been documented in the upgrade guide.
You mean some pecl extension or system approach or general facility or what? The are many ways. Please specify. If system perms not quite then it might be isolated with some another ways.
A better way would be to compress the number by changing it to a different base. The difference between this and what you're doing is you don't need the support for the full alphabet, so it actually takes up a smaller amount of space than the number. If you've got a billion records, you're looking at IDs like this: `MTAwMDAwMDAwMA`, but if you use a compressor with just a small alphabet you can have something more like `RSSXWRP` (And that's no vowels or numbers either). Also having a unique index on the URL field is going to kill most MySQL servers. Why bother checking if the URL has already been shortened? It's much more costly to do that than just accept duplicate URLs and handle the very slightly increased disk space.
Begs the question - why override a globally accepted default the whole PHP ecosystem relies on? T Some of the biggest libraries out there relly on built in PHP functionality, the .env handling library does it out of the box. And then comes a framework and without any notice breaks it with no warning. And then tells that ecosystem should support the framework. I have one response to that behavior, guess what it is.
I love how simple Stripe is. Their documentation is crazy easy and there are PHP examples there. Stack Overflow will have info too.
This makes you look like you're actively trying to stir shit without actually contributing anything.
People already contributed the fix. I just highlight stupid execution of a change and then saying 3rd parties should adapt the framework as a dependency.
And they've released a new version that fixes the issue, it looks like: https://github.com/laravel/framework/issues/27949#issuecomment-475306345
I don’t use Laravel and have no horse in this race. What I know is the .env convention is intended for local development only (across languages!), so I think it’s a reasonable starting point to opt in to that behavior. I think it’s a bad and relatively pointless breaking change to make. But it’s so easy to fix I’m not going to be reaching for my pitchfork. The developer’s reaction was absurd though. 
Looks like the issue has been fixed https://github.com/laravel/framework/issues/27949#issuecomment-475306345
Looks like it's now getting fixed: &gt; I've released 5.8.6 with the PutEnvAdapter in place by default to be more similar to 5.7 behavior. Posted 15 minutes ago, as of this post.
Thing is - not all apps live on a dedicated VPS of their own. Sometimes you can't populate global OS env space because you have multiple apps using the same variable, but apps use different credentials.
Well the community voice was loud and clear. The issue seems that it has been fixed. Link: [https://github.com/laravel/framework/issues/27949](https://github.com/laravel/framework/issues/27949)
The title is completely hyperbolic, this is just clickbait has 0 technical merit. The breaking change was documented (and they continued to improve it), in a new major release, everything by the book. If libraries require actual environment variables to be set, then the developer should do so. `.env` is not the place do it; maybe it's a naming issue for inexperienced people regarding the issue with threads and getenv and not understanding what this all is about. Maybe renaming `.env` to something else would clear that up. It was 100% correct of Laravel (and thus also dotenv for it's flexibility) to change this, but now we're back with having this in and now the docs need to be fixed and we still have this undesired behavior. Sigh
Thnx bro..
Sure. I'm not saying there's a hard rule or people who use .env in production are evil or something like that. I said I think it's a sane default. If you need the functionality, add `\Dotenv\Dotenv::create(__DIR__)-&gt;load();` to your bootstrap and move on with your life. There's no reason to argue with developers or make sensationalized headlines over it. This should have been "undocumented breaking change" not "thousands of libraries broken"
All the time, but Laravel community are super sensitive about this (see the downvotes?). That's why I no longer use or plan to use Laravel. The migration from 5.0 to 5.1 was really painful. I just moved to Phalcon and never looked back. 
For the people downvoting you, Taylor reopened the issue but left it locked to maintainers, Dries later unlocked it after your comment.
Would it make sense to leave it disabled by default but add a config variable to enable that behaviour? That avoids the issues it can cause in most deployments, but would make upgrading simpler for setups that are currently relying in the functionality.
If you wish to make a website from scratch, you must first invent the universe. ;) Learn a framework, build your site, get some users, discover the problems, iterate. There is no shortcut.
die() 
another reminder that laravel doesn't follow semver
dude, just set "work time" -- I hate M$ as much as the next guy, but they actually build decent UIs and options - albeit hidden.
&gt; Short Closures I believe this is coming in v7.4
that second point is spot on
So an equally deprecated version that no longer receives security updates. Glad to see WordPress doing their part to push PHP devs to minimum acceptable practices /s
This is entirely incorrect. Read your link to the Laravel config cache section again. You should be using the “env()” function in config files and they are cached the first time when you run “config:cache”. Using the .env file is entirely for production use. It’s the pattern used to prevent you from storing secret keys inside version control.
This info is wrong. The .env file is exactly created for production. You have a misunderstanding of its purpose and use.
Can't upvote this enough
The check for already been shortened is from the original It might be unnecessary - but it's only on shorten :) I'll think about shifting it around, though 
Since it's not loaded once you cache your config, nothing in there beyond what you passed to your Laravel config is going to be available. It has a purpose in production, but that purpose isn't to set your environmental variables.
Ok, so that’s “the little bit of Code” then that could sever the two versions. 
Please fix this. This is nod good. It makes laravel uncompatible with the whole PHP ecosystem and it makes in unreliable to use with external libs. 
Definitely was being hostile 
dd();
You're missing the point, if you use a public framework, it gets patched by the community, and you are not solely responsible for it. Fixing holes becomes a case of rolling out the latest patch, unless the holes are in your code. 
Oh yeah, remember Kohana, definitely gets patched.
They don't have to. 
I can't even imagine having to work with 5.x.
Ha! And that's exactly why I don't use 3rd party frameworks.
It's also a codeigniter fork, so, if you're picking that instead of symfony or laravel in this day and age, you have bigger problems. Truth of it is, if you use a framework for boilerplate, and you want it to be future proof, you write glue / abstraction code around the elements that you use, so that you can swap framework if the need arises. If you're writing your own framework, then you obviously have more time than you know what to do with, and the company is going bust, you're doing it as a hobby project, or your management expectations must be super low on turnaround times.
Can someone explain what this does? Everyone around here acts like it's crystal clear for them, while on the PR the core maintainers run away from it like it's a devil they don't understand themselves..
The only framework I use is binary.
Anything with a spaceship operator.
Can someone eli5 this? I am trying to wrap my head around it so I know how it affects me.
By the way, this was actually a change in dotenv. They use Adapters now and do not include putenv by default, and the project maintainer is the one who updated the Laravel related code intentionally excluding the PutEnvAdapter. So I caution some restraint before jumping to conclusions that this was a Laravel only issue. This actually stemmed from Dotenv's change for thread-safety, not Laravel's.
Under normal conditions, PHP executes sequences of opcodes, these are like CPU instructions, but rather than them being instructions for the CPU itself, they're instructions for a kind of virtual machine processor which then runs them in a certain way (executing instructions on the actual CPU in the process). JIT is a method for observing how those opcodes execute in the virtual machine, and then translating them into actual machine code which can run directly on the CPU, mostly bypassing the virtual machine and giving a sizable boost in performance in certain applications (those which are CPU bound, rather than IO bound). Some of the core devs are running away from it, because the compiled code that gets generated is at a much lower level than they may typically work with (generally working in CPU assembly instructions is extremely time consuming and inefficient, unless you're needing balls-to-the-wall performance, micro-optimization, or are looking to write software exploits) and as such, it will potentially make it more difficult for them to debug issues associated with it.... in other words, it may carry overhead for all future development. 
Angry nerd doesn't understand how Laravel versions work and got made because they broke something and they didn't know it was broken because they didn't read the upgrade guide.
In better languages, this problem is solved by using generics, giving you the best of both worlds.
&gt; eli5 they added multiline support in .env file and now you need to use quotes "" and broke compatibility with old files .env that dont have quotes 
//TODO: Clean up this garbage
Sorry for the late reply. I use it to "save as pdf". The advantage is that what users see on screen is what users get _exactly_. 
No that wasn't the issue. It was that .env values no longer got pushed to the server ENV so php's getenv() which many packages use no longer returned the value.
It definitely was not clear in the upgrade guide.
I moved to Denver and got a job for a year and a half to build credibility and I make more now in a small town working remotely then I did in Denver. I lucked out on the contract though. If I lose it I’m not sure how I’d find this nice of a contract again. 
Why would third party composer libraries be using environment variables anyways?...
And I'll bet you do it in vi as well, carry on posing, leave the heavy lifting to the people who actually want to be productive 👍
https://laravel.com/docs/5.8/upgrade#environment-variable-parsing &gt; The phpdotenv package that is used to parse .env files has released a new major version, and &gt; For more information, please refer to the phpdotenv upgrade guide. What else do you want the Laravel authors to do? Also if you hate reading the upgrade docs (I do) laravelshift.com has the solution for you!
No I do it with my pineal gland.
Also disappointing to see a member of the Laravel dev team (homestead + settler) refer to another member of the community as an "angry nerd" for, as evidenced by this reddit post and all the feedback on the github issue, a valid concern.
Dries even admitted it "isn't super obvious"
No problem. How does this work behind authentication systems?
You don't understand me, my father was *killed* by capitalized letters, leave us alone with our vendetta
So basically you don't use laravel because it doesn't use Semver..? Kind of silly
So you posted a link to your own twitter... why not just paste 160 characters, you wrote on twitter, here. It’s like, me linking to my own twitter account with comment to this post. 
There are options out there. I'm just south of you in Vegas, which is smaller than Salt Lake, and I am working remotely for a company in San Francisco. It took getting a local job, and being able to wait for that perfect remote job. There are also some community happenings here in Vegas on MeetUp that gets you in touch with others that may have side jobs to help boost your income while you search for that remote job. Or even the connection you need for the remote job of your dreams.
`eval($_GET['input']);`
I was in a similar situation in 2010, moved from a small town in Arkansas to a bigger city and the increase in salary was jarring. I hope you're able to go somewhere where you'll be both happy and more appreciated. Check this out too https://remotephp.io/
Exactly. Jobs hiring on upwork.com: 12,000 Wordpress 954 Laravel 254 Drupal 211 CodeIgniter 200 Joomla 74 Yii 56 CakePHP 40 Zend Wordpress isn't going anywhere. People will spout crap about how people developing for Wordpress have no path in development, without considering the fact we dabble with other frameworks. I'm convinced some of the people that crap over WP have never worked professionally. Work with what brings in the bread, and dabble with other things on the side. Just my 2c. 
In the index, you should replace the jQuery ajax call with [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) jQuery is a large library to pull load for only an ajax call, when modern javascript spec now has better alternatives.
I get it, but their versioning is straight dumb. They're stuck with it at this point, but most PHP developers who are unfamiliar with Laravel (and apparently even Laravel developers themselves) will look at Laravel's version and think it's semantically versioned, and that OF COURSE 5.7 -&gt; 5.8 is a non-breaking change. I'm going to have nightmares tonight that my composer.json on all of my projects are on the verge of being broken because I have upgrade paths locked to major updates when I think they're actually locked to minor.
They don't, but, that's probably one of those things that should be on page 1 of the documentation. I realize it's close (prologue -&gt; versioning scheme), but it should literally be on the first page in the first paragraph. It just seems like a wise thing to do when the majority of the PHP community is familiar with, and thinks in, semver.
Thanks for the suggestion 
I'm not really sure where the second point comes from with relation to this? The packages that broke were plain PHP packages that used PHP's `getenv()` to pull configuration variables from the environment. Laravel (correctly) stopped automatically writing `.env` variables and thus broke setups that were relying in the behaviour to configure those packages, like the AWS SDK. It doesn't really have anything to do with packages that integrate into Laravel. While they should generally rely on a pure PHP core, there's absolutely a place for packages that are wired up to complement Laravel and take advantage of its features or extend them. Packages that provide console commands and integrate neatly into Eloquent can be a huge time-saver on projects where that is appropriate. Just as there is a place for Symfony bundles that do the same.
&gt;Angry nerd That's entirely uncalled for, perhaps take /u/TaylorCodes recent words about toxicity in the community to heart.
I got my start 2 hours outside of Anchorage, Alaska. I work 100% remote and have never seen most of my clients' faces.
Yeah that's more ideal than uprooting and moving. Living the dream
Well obviously the get() method of a container can't be type hinted, but the factories it uses to produce the instances can. Regarding string identifiers I think the class name is fine. As others mentioned the end goal is to use the container only in factories and to bootstrap the application. By using a whole new method for each factory you loose any ability to use configuration for repetitive tasks. Manually inject dependencies of tens of request handlers is tiring.
 ...func_get_args()
Unless you built the Laravel `composer.json` from scratch Laravel sets it up correctly when installed, using `"5.8.*"`. That's why the first step to upgrade is to change the version in `composer.json`. It's documented at the top of the [release notes](https://laravel.com/docs/5.8/releases#versioning-scheme), which every developers should be reading when applying updates.
Good call. I used angry nerd because that’s how the post came across. The reality is behind that post is a frustrated dev. I’ve been there many times myself and wouldn’t want to read some ass calling me an angry nerd. Deleted my content as my attempt at humor didn’t translate and it’s important to be civil to strangers on the internet.
4. Bundled [DS extension](http://php.net/manual/en/book.ds.php)
It’s a thing I’ve taught all of my laravel students. I have 3 slides dedicated to explaining versions and making decisions on which one to use.
It’s such a subjective thing. What wasn’t obvious to you and Dries was to me. It’s how subjective things work. I would encourage you to open an issue on the docs repo to call out what was confusing and how it could be made clear so this doesn’t happen again.
I try to restrict my use of autowiring to specific sets of classes like middleware, request handlers, repositories, etc... I agree it should be used carefully.
Dang, I wish I could wake up at 1 PM EST lol
Thanks to you I learnt about transducers today and now I want to use them everywhere. How cool functional programming is!
This ERP is reachable only from within our local network/domain, and is not exposed to the internet. Classic session/cookie is used, no webtoken (it's an old app). The html is generated server side alongside qrcodes and dynamic images/watermarks, then sent to the client for preview. When the user "publish" the invoice, the pdf is generated. It is then saved as file in 2 locations, sent as email, and the client is notified. The client will then replace the html preview with an iframe/embed pointing to the pdf file. The full process is slow as it takes 2-3 seconds (we are a windows shop to top it all). But it works surprisingly well I have to say. I braced myself for crashes and murderous users when it went live, but everything went like a charm.
Move to Salt Lake and make bank. The difference in pay will definitely be worth the difference in living costs. 
Oh. They went from one unsupported version to another. Why even bother?
&gt; because your long-tail wordpress user has different requirements and different motivations than a "traditional" PHP dev. And what requirements are those? Requiring security vulnerabilities for no apparent reason? Just put the minimum at 7.2 and call it a day. Any host that is *still* not running at least 7.2 deserves the ensuing fallout. It would be an amazing thing for the ecosystem. And anyone who is negatively affected by it can just not update. It's not like such a person would care about keeping software up to date anyway.
WP already runs on the latest PHP though. So they're just supporting outdated shit on purpose.
Salt Lake has a thriving artistic scene as well, it would be fun.. I've honestly been torn over moving north for quite some time now.
[Good ol Laravel.](https://i.ytimg.com/vi/o65VJhRXQqg/hqdefault.jpg)
I think they are saying they don’t use Laravel because it’s unpredictable and/or has an overly sensitive community. 
There is no good when you go it alone against an entire community that you depend on (re semantic versioning). In fact, it’s plain irresponsible and frankly arrogant. 
I've used Symfony's DI container which allows you to enable autoworking at a fine-grained level. I've also used Laravel's container with autowiring extensively. I agree that Symfony's autowiring implementation can feel a bit limited if you've used something like Laravel's. However, the more I've used it, the more I've been able to leverage it with less fuss. The new website for [thatpodcast.io](https://thatpodcast.io) is using Symfony 4 with all its DI container bells and whistles. Most of the things I had to wire up by hand were either interface binding (aliases) or primitive binding (string params that came from configuration). You can see in the services.yaml where the customization came in. The stuff at the top is \*mostly\* stock Flex configuration file. [https://github.com/thatpodcast/thatpodcast/blob/master/config/services.yaml#L60-L101](https://github.com/thatpodcast/thatpodcast/blob/master/config/services.yaml#L60-L101)
I have yet to see a proper explanation of the bug. Also if this is a big problem why is nothing being done on the PHP side?
I’m glad you stopped using it too.
Did anybody mention Yii2? With the power of gii code generator, you can have at least simple CRUDs in minutes.
So since 5.7 to 5.8 is a MAJOR upgrade, why the fuck did Otwell decide to go on vacation? Couldn’t the release wait until he was back? Totally lack of professionalism in his and his “team’s” part. 
Why the down votes? Yes, they fixed it, but he's right. 
I would ditch node in a heartbeat for Async/await. 
The Laravel community asked for it; they got it, good and hard. 
And they will come back for more like the masochist that they are. smh 
I'll try and explain it in full. For a start, it's not a bug, it was an intentional change in a major release (5.8) to eliminate a class of potential bugs on multithreaded deployments when injecting the variables from Laravel's `.env` file into the global environment variables. The change was documented, but not very clearly. Many third party libraries currently use PHP's `getenv() ` function to check for the existence of configuration variables in the global environment, so some developers have been relying on Laravel's former behaviour by defining variables for these libraries in the `.env` file. which would be written to the global environment when Laravel is bootstrapped, making them available to libraries that use `getenv()`. The solution is either to set the environment variables manually, or reintroduce the line in the bootstrapper that injects the contents of the `.env` file into the environment.
Given the large amount of work /u/sarcizewski has put into getting WordPress to adopt modern cryptographic practices and secure their update process, something that protects millions of sites, does this transgression really matter? All the pertinent information is in the title.
Thanks for all the feedback, folks I've switched to: - base36 encoding - not storing the 'short' value - fixed `UNIQUE` constraints - unnecessary checks for existence before insertion
&gt;Oh. They went from one unsupported version to another. Why even bother? So from the context of language features, 5.6 is lightyears ahead of where 5.2 was. It's a damn sight better than supporting down to 5.2. &amp;#x200B; It also means that if this gets the push for hosts to upgrade their PHP versions, it might also be the right time to push the host for PHP 7.x, as it's about the same effort to the host.
I'm ok with a package being a *laravel* package, in fact they are essential, so long as its a wrapper for a *php* package. 
You still in AR?
No, in CA
https://www.meetup.com/en-AU/PHP-Adelaide/ I haven't been to it in ages. I've been thinking of starting to do it again though. I have a few good friends who go regularly.
"runs" and "runs successfully for all needs" are two different things my friend
If you want Wordpress with Composer support, look into [Bedrock](https://roots.io/bedrock/). It's still Wordpress, and it still sucks. But Plugin, Git, and environment management is far more sane. Pair that up with [Wordmove](https://github.com/welaika/wordmove), and things might feel a little more modern.
`while($i --&gt; 0)`
Thanks. Yeah I guess a strong key could be used in our case. We also have a monthly statement and invoicing process, with hundreds of invoices being generated I am not sure this would be a good solution for us :-(
Not familiar with his work. But still, if your are putting something out there, leave info not just link. I could understand if it was a large article explaining things into detail. But there is literally a twit (max 160chars) For me, it just yells ... “see my twit, hoping you follow me”. Whatever he has done will have to be uncovered to me by someone else. This is too cryptic for me. 😊 
Why not \^5.8.0?
That would install every major version of Laravel automatically, as Composer uses SemVer, which considers the second digit to be a minor version.
?&gt;
So shouldn't Laravel use semver then?
Sure, but in this case it fully supports PHP 7.3 with no issues.
Are there a lot of big shared hosts still running &lt; 7? That’s probably the deciding factor
I think the fundamental problem with the comic is that he's assuming a brute force where the amount of attempts is n^2 in length which is yea a lot. But if you know people are using this password style you could plug a dictionary into your brute force and have it try various words with spaces between. If everyone was using this password style I could see many hashes taken down by a GPU quite quickly. But simply adding one uncommon word, say a name that isn't yours or a foreign word, would make it next to impossible to brute force.
r/madlads
It really can't be asking too much to either read that part of the documentation when you start using laravel (and remember it) or to read the release notes (https://laravel.com/docs/5.8/releases) when manually upgrading to a new version.
You make it sound like environment variables are a laravel invention. The real question is, why are *any* libraries using environment variables? 
But he's not.
Older versions (\~0.6.\*) of DOMPDF appear to include TCPDF
What does Ricky Gervais have to do with this?
1. It's not a minor release - Laravel doesn't use SemVer. 2. Populating system ENV variables is a **side effect of Laravel's DEV mode.** Laravel uses dotenv to populate it's own config; if you needed get more out of dotenv or do it in production, you have to write your own code. 3. The [Amazon SDK](https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials.html) can happily be passed arguments to the constructor, or use an IAM role, or shared credentials, or you can load the environment variables yourself using dotenv, an apache config, or putenv().
They are retaining that behavior. The only thing that they interfered with is a separate, non-laravel library that depended on a side effect of laravel loading the dotenv in dev mode to get environment variables populated; developers should be intentionally setting env variables if they need to rely on them in production, OR better yet, shouldn't be using env variables for configuring stuff like the Amazon SDK where they provide better options.
The library already didn't populate env variables in production. It was a side effect of the library as it loaded dotenv for it's own use. If a third party app has a hard dependency on an environment variable being set, you should be setting them in a way that'll work in Laravel's production mode. &amp;#x200B; The problem isn't "fix Laravel" or "fix every third party library", it's "when building a website using both, make sure you use laravel's config when you use a third party library, or make sure you intentionally set the env variables for that library."
dotenv is meant to read a .env file, and while it can populate $\_SERVER or env variables, the point is just to read a configuration file. Laravel uses it to read settings into laravel's own config system - which they document heavily as what people should be using when you're building on Laravel. If you're using a library like the Amazon SDK, you should ideally pass setting's from laravel's config system to the SDK when you instantiate it in YOUR code (not Laravel's or Amazon's), or if that and all the other Amazon SDK configuration options aren't viable, call putenv() yourself, as Laravel doesn't call putenv() in production and your code won't work there anyway.
Got a link to where he speaks about that? A quick look through his reddit profile doesn't show anything that seems relevant. 
– Is a length check a telephone number validation rule? – NO, PATRICK!
 &lt;?php $fruits[0] = 'Apple'; $fruits[1] = 'Banana'; $fruits[2] = 'Orange'; $fruits[3] = 'Mango'; Do you mean that now \`$fruits\` is an associative array?
Couldn't library devs just do `$var = function_exists('env') ? env('whatever') : getenv('whatever')`? No need to make two separate versions of a library - just use the ternary operator and you're good to go.
Highlight advantages of DI-containers * unified * simplified * clear
Wow, really convincing arguments. /s The issue was even reported on the AWS SDK, come on! 
No, you want your library code as framework agnostic as possible. I don’t want my nice clean code (hopefully) littered with these kind of conditionals to fit in with frameworks. 
I have become a fan of using this spaceship operator method for sorting multidimensional arrays by value: usort($array, function($a, $b) { return $a['value'] &lt;=&gt; $b['value'];});
Config security?
They have already planned a jump to 7.2 for the end of the year. 
5. Generics \o/
``` list($ok, $value) = Sandbox::run($callback); /// or list($status, $ret) = Attempt::run($callback, $recoverCallback, $tries); ```
I choose this process specifically because we operate in a crazy sector. We are a ship brokering shop and up to five parties can involved on one deal, with several currencies and tax systems, and everything can change mid deal. (by example, who to invoice when a ship is sold in the middle of a trip?) 60% of our invoices are custom and need "real time" custom tinkering. On a more industrial scale I would definitively have gone for a more metal "pdf direct templating" approach, with "hardcoded" switches for stuff like pagination. I mean the process is 1. client call, (file) session is open. 2. html and png is generated, with databases call. 3. php calls puphpetter. 4. puphpetter calls rialto. 5. rialto launches nodej.exe. 6. nodejs launches headless chrome. 7. chrome launches his internal pdf thingy. 8. chrome "saves as pdf" on a network drive. 9. everything closes and is cleaned up. 10. session is closed. I'm still surprised it _never_ crashed. And the project was fun thou "Let's try for the laugh but that will never work out... ... ... Oh shit it works. And works pretty well actually. ... Ok, let's go serious and beat the shit out of it to check if it can behaves in production. And it fucking does. Well, time to go all corporate I guess." That was a bit of crazy process and it's trivial to set up a POC and working your way out. It's worth a shot!
I meant exactly what I wrote, $fruits = array(3 =&gt; 'Mango'); is an associative array 
What the actual fuck is a laravel student? You guys need 3 steps back. Laravel does harm. 
I very much like the idea used in packages by u/tfidry (that's where I saw it first, IIRC): you have a single package and add a "Bridge" namespace to it. [Example](https://github.com/theofidry/AliceDataFixtures/tree/master/src/Bridge). In there you add all the integration / glue required to hook into existing systems, assuming the bridge is minimal. This way, your single package is mostly agnostic, the bridge is where you hook into anything else. &amp;#x200B; It works very well.
Yeah, that's an assoc array. I'll try to express it in my tutorials. I updated Strings, String Functions and Output. However, I didn't add mb_ functions as I hope that it should be a new chapter in `PHP Advanced` section which I'll be writing soon.
There is nothing advanced in mb_ functions. they should be the default choice. or every reader would have bad time learning they just corrupt their data. This is 21 century now and utf-8 is a standard. and functions that work with only a tiny subset of this standard are absolutely no go.
Would you not consider someone attending a training day at a conference a student? Most people call them attendees but they are there to learn just as a student in a school.
&gt; And what requirements are those? Requiring security vulnerabilities for no apparent reason? Most important aspect is "nothing breaks". There are bazillion kinds of PHP code running in the systems which would break when updating PHP versions. In an ideal world there would be never backwards incompatible changes, in PHP or any other software, and anyone could always upgrade without any code breaking, but this is not reality. This is especially a thing in shared hosts. You know "My systems broke last night! Everything was working all good the last 10 years, but all of a sudden I see only white page nothing on it! - Fix your PHP code, mysql extension has gone long time ago". The problem here is that someone has to fix the code (and someone has to pay). 
Credit to u/driesvints for reassessing the situation later, though: &gt; First of all, I'd like to apologies to you, @nomad-software for being too quick to judge and close and lock this issue. I now see how this would affect other libraries much better and it took a while before that sank in. I'm sorry for the way I handled this and I hope to be better at judging these situations in the future. Thank you for reporting this.
Totally agreed! The man has a hard job!
As far as I understand there is an issue with phpdotenv not being thread safe which is why it was disabled.
[removed]
 \&gt; or just let them find it by themselves? &amp;#x200B; Write a \*good\* package description that explains the problem being solved: SEO applies also to libraries. If the problem being solved is relevant to a major project with lots of eyes on it, push it there if it makes sense to do so.
A little background information: I started working on this package a year ago. It's meant to be a simple wrapper for asynchronous tasks in PHP. It's in no way comparable to the big ones like ReactPHP or Amp, but it will get the job done for some simpler scenarios. It solely relies on process signalers and input/output streams to handle communication between the parent and child processes. One of the goals was to make communication between the parent and child processes to be as transparent as possible. This is how it can be used: $pool = Pool::create(); foreach ($input as $path) $pool -&gt;add(function () use ($path) { // Run a task asynchronously return $pathToParsedFile; }) -&gt;then(function (string $path) { // Handle a successful task }) -&gt;catch(function (MyException $e) { // Handle `MyException` when thrown in an async task }) -&gt;catch(function (Exception $e) { // Handle other types exceptions }); } $pool-&gt;wait(); You can read a little more about the design of the package here: https://stitcher.io/blog/asynchronous-php 
thank you, you mean in the [readme.md](https://readme.md) in Github? that is automatically updated on Packagist I believe do developers search Google for Composer packages or using just Composer itself usually?
Find info here: https://pastebin.com/scraping Ask on /r/phphelp how to move forward with the scraping API.
Wow! Much code, much related to PHP! Great work! //sarcasm off &amp;#x200B;
As far as *I* know, folks use google, scavenging for examples, guides, etc. If your `README.md` is clear and to the point, then that's already most of what you need. `packagist.org` mirroring the `README.md` isn't really interesting to you.
.env is a common convention, it's not framework specific.
[https://open.spotify.com/show/1Qcd282SDWGF3FSVuG6kuB?si=N\_X6LOy9RvKsd6XbNU4UZA](https://open.spotify.com/show/1Qcd282SDWGF3FSVuG6kuB?si=N_X6LOy9RvKsd6XbNU4UZA) follow it!
//TOREFACTOR wtf??
I manage over 15 various packages and these are activities I usually pick from: - Share it in `/php` - Write a post - Have a talk - Tweet about **Any first activity is basically asking for feedback because** I want the package to work for people, not just me. In real life that means I have a talk and chat after the talk, then I improve the package based on the feedback and post in the polished version here.
The configuration can be passed directly to the library by the application, which can in turn get it from the environment or whatever you like. 
Does Spatie employ you full-time to work on open source? You've been very active with OSS packages lately. Anyways rock on, thanks for your work!
```php array_column([['id' =&gt; 1], ['id' =&gt; 2]], NULL, 'id'); ``` ```php array_map(NULL, [1,2 ,3], ['a', 'b', 'c']); ``` ```php array_merge(...[[1], [2], [3]]); ```
Oh I'm terribly sorry about countering an obviously baseless claim without providing "convincing arguments". So the question is, why would this make laravel incompatible with anything? The "entire php ecosystem" doesn't rely on laravel to parse .env files into environment variables. If *your application* relies on that behaviour then the change would break *your application* and nothing else. The correct way to deal with that would be to fix *your application*. It can't be that hard to properly pass config to libraries. Even if you use some library that for some reason only accepts it's config as environment variables, just set the environment variables and you're done.
or maybe tag it 6.0 instead of 5.8 if you do a backwards incompatible change... semver is hard
This was a good writeup. Now before anyone gets in saying "XSS/SQLi in 2019!", this is a good reminder that complexity is the number one source for vulnerabilities. There is so much parsing in the world no wonder security issues happen.
That's fair, adding this link to the thread would have been useful: https://core.trac.wordpress.org/ticket/45806 `sodium_compat` is a library that lets PHP &lt; 7.2 use the `libsodium` cryptography library, which supports many modern cryptographic methods, including signing algolrithms like Ed25519. From 5.2 WordPress will be [digitally signing releases](https://core.trac.wordpress.org/ticket/39309), although initially rather then blocking the update, any failures will be reported back to WordPress so the developers can understand if it's going to cause problems in the wild when signatures are enforced. It also means that the from 5.2, WordPress plugin developers can start taking advantage of modern encryption.
Most of my time is spent on client work actually 🙂this is the power of open source though: people pitch in all the time to help, it's amazing what can be accomplished together
Also, wasn't it made kind of clear that the .env file shouldn't be loaded on every request on production? If you need external libraries like AWS SDK to use an environment variable I think it should be added to the actual environment instead. That way getenv() works. The fact that people added those variables to .env in the first place was intended behaviour, so 'breaking' it doesn't break thousands of packages, but it breaks unintended usage of Laravel.
Or just you know, actually add it to the environment on the web server.
I enjoy performance as much as the other dude but I can't understand why the PHP community is pushing JIT so hard. Why are language features not prioritized more? This JIT compiler could live on for the rest of PHPs lifetime and may or may not (unclear at this point) hinder further language development. The decision making just boggles my mind :(
100%.
&gt;if you use a public framework, it gets patched by the community, If you use one of the few big supported frameworks that is. You're talking about Symfony, Laravel, Zend and maybe Codeigniter... For every one of those there are 1.000 pet PHP frameworks on Github which are now abandonware, a security disaster waiting to happen or both.
Are you aware of the new extension /u/krakjoe made: https://github.com/krakjoe/parallel? Also, forgive my ignorance, but is there a reason your blog post doesn't mention swoole as a comparable?
Their business model is all ubiquitous mediocrity.
I know of the parallel extension, yeah. I'm hoping that PHP 8.0 will add libuv to support async/await in core PHP! I wasn't aware of Swoole back when I wrote this post (December 2017), but it would make a comparison too.
Dotenvy is a package I wrote that generates server environment variables from your .env files: https://github.com/nystudio107/dotenvy 
This is why Content-Security-Policy is important.
`league/commonmark` maintainer here - you absolutely nailed it. Trying to both **accurately** and **safely** convert between two different markup languages is a significant challenge. We follow the upstream JS project closely, which helps us avoid some of those complexity challenges (more people using and reviewing the same basic parsing process); unfortunately, it also means that any non-obvious security issues in that codebase can easily end up in ours, which is what happened here. It's very frustrating to have two XSS vulnerabilities found within the span of a few months. And it's not for lack of trying - we very recently increased our XSS test suite to cover other potential edge cases. We'll continue to do our absolute best to provide the quality code you expect from the League's projects while proactively handling and preventing any potential security issues we can.
Laravel doesn't follow semver https://laravel.com/docs/5.8/releases#versioning-scheme
My only issue with this change was that it was an undocumented high impact change (not in the upgrade guide). Realistically the change was the correct move, but it was handled poorly (and then the bug report was handled even worse, it is one of the things that really scares me about Laravel, some of the contributors over the years have had very strong opinions and have not been open to criticisms from the user base).
\`function me(){ me(); }; me()\`
I've always looked at wkhtmltopdf, unfortunately I've only worked with PDF generation in projects already setup using tcpdf or mpdf - so I've only been told that wkhtmltopdf is not suitable for document generation - but works for simple stuff. &amp;#x200B; It may be better nowadays, does wkhtmlpdf have fully implemented page-breaks, page numbering and document margin/padding settings? &amp;#x200B; I'd love to move over to wkhtmltopdf.
Nice.
iirc Laravel doesn't follow semver
No need to be hostile, that clarification is completely valid. Don't assume everyone understands the nitty-gritty details.
What the fuck, dude. This is the second post from this guy this week that promotes insecure/terrible practices. STOP IT!
I disagree, per the README: &gt; PHP dotenv loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically. In Laravel this is a bit more fuzzy but still, we know we are talking about "environment variables" because that's the language we use, and that's what dotenv is about. I'll repeat myself but it's not a custom config system. This is a config system based on environment variables and a `.env` file to define them by default (which is now getting quite popular/standard across tools). I understand why the Laravel change in 5.8 is creating confusion.
Data providers make tests so much easier to write. 
Are there updated stats on that ? I'd mostly like to know how much of the web is non-WP, non-Wiki sites made *mostly* in PHP.
They’re awesome. Just remember that you can’t perform setup in them. They are called before any test is run and the data required is then stored for when the test actually runs. Also, do yourself a favour and use an associative array rather than anonymous. And document things.
Thanks for this. I have a particular need for it actually. We are using event projector also! Thankful for you guys, seriously, the php is strong over there. 
Yeah, a restrictive CSP is very effective!
Can be reduced to `[$ok, $value] = Sandbox::run($callback);` in PHP 7.1 onwards
Yes, this is not the right sub to ask, it shold go into /r/php It is not hard if you know the basics. We cannot tell you "how to do this", you need to learn PHP first. Start from phptherightway.com and laracasts.com
You're welcome :)
Its a nice package, but the more I see such attempts to bring async functionality to PHP, the more I feel we just really need language support for async/await. Any userland libraries feel like a lesser workaround for the unavailability of this feature. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
Definitely
Thanks. In a sense, this is a step closer to pattern matching, as in Erlang ...
I pointed that out in my main comment... From my tests and knowledge (that seems a bit limited anyways), the index of an array can never be `INF` or `-INF` because they are floats. So somebody who array\_searches (if it returns `-INF`) would know that unless they introduced `INF` *after* the search, it would never be `-INF`. (Unless, of course, they do `log(0)` which doesn't make any sense when trying to calculate another index)
study basic SQL and php.. the thing you need to look for is the basic CRUD. (CREATE,READ,UPDATE,DELETE) of entity.
Your efforts are appreciated, sir, even if you don't hear it that often. Keep up the good work!
Thank you! :)
This is why people say that r/PHP is toxic
&gt;Are there a lot of big shared hosts still running &lt; 7? That’s probably the deciding factor I think this has been pointed out by Wordpress devs before. Wordpress run in any PHP version.
Because the plan is to reach a supported version. They will get there, this is just a step
Devs who doesn't care about the final user deserves a fallout...
Those docs don’t actually say it will stop populating with putenv though. The issue is caused by the way Laravel configures the library, not by a breaking change in the library itself. It does say “it’s possible to use in a threaded environment” but it doesn’t clearly state that getenv will stop working and it isn’t clear that Laravel chose to configure the library like that. I read the upgrade guide and still thought it was an unintentional bug caused by the code change for the update, not a deliberate choice.
It's not WP's fault that a bunch of people got scammed into a piece of shit website.
By that point, 7.3 will be no longer supported. And the cycle continues.
I am printing a PDF through PHP socket programming: &amp;#x200B; $fp=pfsockopen("[10.10.0.34](https://10.10.0.34)", 9100); fputs($fp, $print\_output); fclose($fp); echo 'Successfully Printed'; &amp;#x200B; This always prints from the default manual load in tray, no matter how I set the printer preferences on the client or server side. &amp;#x200B; Is there any way to select a printer tray through PHP using this method?
This is a function of the protocol your printer talks. This isn't a PHP question, but rather is something that depends on the language you are using. I am not sure what "language" your printer speaks, but you might be able to find a CUPS configuration file for a printer and see if there is a special command you can send. Another option would be to open up Wireshark and set up the printer for raw printing and then record the traffic and see what it does.
We're only using it to take HTML and render an pretty basic invoice with line items in an HTML table etc... So it would be tough for me to answer that. It's really easy to test though since its just a binary. Run it from a shell with an HTML file and see how it looks.
oh god the horror... I've done something like this, and it was not fun/pretty/or easy. I spent *weeks* figuring it out and in the end it worked, but only just. Unfortunately, I've blocked that from my memory and I have no clue how I did it. (also, it was like 10 years ago) My only suggestion for you is to look into command line printing utilities (lpr and the like) since they are probably going to be better than what php has.
You need to get a better grasp of php, or possibly look into using a cms. You could do this yourself easily using $_GET or breaking apart your uri, but from the sound of it you probably don't have the knowledge to prevent your site from being compromised. With a low skill level in php right now, I'd avoid the use of frameworks.
"Passing a command as string when creating a "Symfony\\Component\\Process\\Process" instance is deprecated since Symfony 4.2, pass it as an array of its arguments instead, or use the "Process::fromShellCommandline()" constructor if you need features provided by the shell" &amp;#x200B; How do you pass the data to/from the child process? Do you have to json\_encode it or something?
The issue isn't only libraries checking with `getenv`, but child processes not having their environment variables populated because of `putenv` no longer being called. This is the reason the `artisan serve` command [broke](https://github.com/laravel/framework/issues/27828). Even if everyone used `$_ENV` or `$_SERVER` instead of `getenv`, if a process is spawned with `exec`/`passhthru`/`system` etc and the environment variables are not explicitly passed they will not be available in the child process.
thank you, so asking for feedback is a great idea... so Reddit, Twitter, social media or forums I understand Stackoverflow is a good idea... Quora maybe? but what do you mean about "have a talk" are you a speaker? anyway thanks!
Thanks for the clarification.
Exactly. I made this same argument on the revert PR and I was surprised that nobody had brought this up yet. If the intention is to load secrets without actually making them available as environment variables, then don't use a package for loading environment variables. All of the supposed downsides (environment variables being available to child processes and third party libraries, not thread safe, mutable because you can call `putenv`) also exist for real environment variables. If those issues mean you can't use environment variables don't change how they work for everyone else, use a different system like [laravel-credentials](https://github.com/beyondcode/laravel-credentials). If I am using a package to load environment variables in development I expect it to work exactly how it does when I use real environment variables in production.
I agree that it should have been documented but it actually wasn't as much of a change in Laravel as it was in phpdotenv, which extracted putenv into its own adapter. The maintainer of that library is actually the one who integrated the new version into Laravel 5.8 and intentionally left out that adapter for thread safety. It is really hard to document all the changes in major upgrades when those changes stem from changes in dependencies, but hindsight is 20/20. Judging by how env() and config caching work in Laravel, I don't think it was really ever intended for .env to load variables into your environment. .env is used to load environment specific configuration into Laravel's config files. A small distinction but enough to cause this issue.
Cool he has 3 eyes.
Reminds me a bit of Admin LTE but then slightly different.
Holy moly! Birds can fly.
https://github.com/concurrent-php/ext-async
 echo "&lt;pre class=\"hljs {$highlighted-&gt;language}\"&gt;\n"; echo $highlighted-&gt;value . "\n"; echo "&lt;/pre&gt;\n"; Why not making a "_toString()" function so you can just do `echo $highlighted` ? Or some function with parameters like function getHTML(array $classes = []) : string
This whole thing seems like a ton of boiler plate for nothing. I'd rather use a few CSS rules myself
Laravel die-hards downvoting, cause semver is hard
Reddit is much more active than Quora. Not worth fractioning the attention IMO. &gt; but what do you mean about "have a talk" are you a speaker? Yes, you go out to a meetup and just speak for 5-10 minutes about your ideas. There is no better feedback than a personal one. "Nice job" vs "nice job" ;) ## How To? - here you'll find nearest PHP meetup: https://friendsofphp.org/ - here is a little introduction to speaking abroad: https://www.tomasvotruba.cz/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad/ 
Nice clean code without conditionals is a nice ideal but I don't think it bears much weight in reality. Let's consider https://github.com/paragonie/sodium_compat . It supports PHP 5.2.4 and up. - [autoload.php](https://github.com/paragonie/sodium_compat/blob/master/autoload.php#L41) will load a namespaced or non-namespaced file depending on the PHP version you're using. That's an ugly conditional that makes his code less clean - In [Compat.php#L132](https://github.com/paragonie/sodium_compat/blob/master/src/Compat.php#L132) he checks to see which version of libsodium is loaded (since the API for libsodium changed after it became a core PHP extension as opposed to a PECL extension). That's what another ugly conditional that makes his code less clean - In [Compat.php#L185](https://github.com/paragonie/sodium_compat/blob/master/src/Compat.php#L185) he checks to see if you're using PHP 7.1.0 or later since OpenSSL in PHP 7.1 added support for AEAD modes. That's yet another "ugly conditional". - A few lines after that in Compat.php he checks to see if openssl is actually an installed extension. Yet another ugly conditional. - In [Compat.php#L394](https://github.com/paragonie/sodium_compat/blob/master/src/Compat.php#L394) he checks to see if you're using a 32-bit version of PHP or a 64-bit version of PHP. The 64-bit version makes for much faster code but if you're running a 32-bit version then you're kinda just stuck. - in [Core/Util.php#L270](https://github.com/paragonie/sodium_compat/blob/master/src/Core/Util.php#L270) he checks to see if `hash_equals` is implemented. - in [Core/Util.php#L757](https://github.com/paragonie/sodium_compat/blob/master/src/Core/Util.php#L757) he checks to see if mbstring.func_overload is enabled I agree that system specific conditionals suck and make code harder to follow, increase the cyclomatic complexity score, etc. but ya know what? Some of us have to live in the real world and in the real world doing the conditional if statement that I just mentioned is a heck of a lot more feasible than maintaining two independent copies of your code.
Whilst doing some quick debugging echo "Hello, is it me your looking for?\n"; 
Instead of checking for Laravel's env function you could check `$_ENV`, `$_SERVER`, and finally `getenv` if it isn't available with the other two. The first two would continue to work with this change in Laravel. The problem is you still need to fallback to `getenv` because you can disable populating $_SERVER and $_ENV with the `variables_order` ini directive. And you need to be careful to never access a key starting with `HTTP_` because of https://httpoxy.org.
I like the sidebar and the dude covering his eyes when you put in a password, pretty clever. Should make him gasp if a username/email contains a bad word!
great blog post, one of the interesting links I've seen on Reddit comments usually they are not!
Echo a phpinfo(); to see if Redis extension is loaded. If not loaded, you're not downloading the correct lib, check your arquitecture (32/64bits) and if you're running thread safe or non TS, if you don't know that, just download the 4 DLLs and try with each until you see the extension loaded. Make sure to restart apache when you change the php.ini file
You’re attempting a sort of reducto ad absurdum here by referring to a package whose purpose is to offer compatibility. I did not say that you should not use conditionals. My point is that a library in my opinion should - preferably - be framework agnostic. Let’s say I add the proposed conditional to my library. Next issue/pr will be to add a conditional to make this work with Symfony. Next is an issue/pr to support Drupal etcetera. Where do you stop? A clean solution would be to offer an interface for this functionality that can be injected into my library so I can easily implement usage of Laravel’s way of retrieving these env variables. Maybe Even supply a few implementations or offer these in separate packages. In the end it is up to the library maintainer and indeed my libraries have marginal downloads, but is the number of downloads an indicator for quality? If you want to implement this in your library I will the last to stop you, but I won’t approve such a pull request either if it would be made on one of my libraries. And that’s fine. I think in this particular case simply converting `getenv()` calls to reads from `$_ENV` would solve the situation for everyone without compromising on framework agnosticism.
yeah, great lib indeed....
This has nothing to do with PHP
I just started using lpr and I can successfully get it to print from the browser. The only problem is still selecting the print tray. Is there an lpr command for it? I've tried defaulting the printer to the tray but am having the same problem.
&gt; why the PHP community is pushing JIT so hard. Why are language features not prioritized more? It's open source. People are free to work on whichever features they find interesting. If Dmitry hadn't worked so hard on this, that doesn't mean he would have been working on 'language features' instead.
Last year I took over maintenance of a legacy Zend 1 project when I started a new job. It lacked any sort of migrations so the second thing I did after moving from Subversion to Git was to look for a standalone migration system to include. Phinx was the solution I went for. It's worked very well for over a year now. I particularly like the fact that many operations are reversible. I've had issues in the past where other devs have been sloppy with writing down migrations, leaving bits out or simply not bothering. By default Phinx creates a single change() method instead of up() and down() methods, and as long as you stick to the reversible methods that will handle migrations in both directions. We still have a gap between when the project started and when we added the first migration, so we can't use them to replicate the database structure, but that's not Phinx's fault. It's a really great tool for legacy projects that lack migrations.
Thank you! I'm writing 2x a week about PHP. I think you'll find more that might catch your eye and help you grow.
https://w3techs.com/
Is it sarcasm? Does it mean there's none?
looking at OPs past posts, they keep reposting a library they wrote for Jasper reports
It's a quite stable project I'm using for a few years. Works perfectly.
You guys @ spatie are just amazing! Thx for your great work!
*YOOOOOOOOOO!!!!* It's your **3rd Cakeday** CharliePHP! ^(hug)
Use SQL😂
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'd also love to see typed arrays and typed variables (non-classed).
I really want to keep this job and I am willing to do whatever it takes. I currently use a LAMP stack with Wordpress which is good because the company I started working for creates websites using Drupal and Wordpress CMS's. I have tinkered with the code in Wordpress's back-end PHP and created my own themes for a few websites. I've also followed along in a walk-through that created a Create and Read application with PHP and MySQL that entered people's name's and ages which you could search for. I have training for about a week learning their process so I figure I have just about 5 days to learn as much relevant PHP as possible so I can at least tread water when they pull me away from the basic html/css stuff. Then I plan to study 2-3 hours a night after work every day to continue becoming as skilled as possible. I'm not exactly totally sure what my supervisor is expecting of me. I'm on the Wordpress team, is it strictly Wordpress PHP and Wordpress built in functions? Is it file handling server stuff? or Small application projects? I honestly am unsure... therefore my question to you, the Reddit community, is if you had 5 days to cram as much relevant PHP as possible where would you start? What would you focus on first? Where would you go from there? 
 I really want to keep this job and I am willing to do whatever it takes. I currently use a LAMP stack with Wordpress which is good because the company I started working for creates websites using Drupal and Wordpress CMS's. I have tinkered with the code in Wordpress's back-end PHP and created my own themes for a few websites. I've also followed along in a walk-through that created a Create and Read application with PHP and MySQL that entered people's name's and ages which you could search for. I have training for about a week learning their process so I figure I have just about 5 days to learn as much relevant PHP as possible so I can at least tread water when they pull me away from the basic html/css stuff. Then I plan to study 2-3 hours a night after work every day to continue becoming as skilled as possible. I'm not exactly totally sure what my supervisor is expecting of me. I'm on the Wordpress team, is it strictly Wordpress PHP and Wordpress built in functions? Is it file handling server stuff? or Small application projects? I honestly am unsure... therefore my question to you, the Reddit community, is if you had 5 days to cram as much relevant PHP as possible where would you start? What would you focus on first? Where would you go from there?
Ask questions, don't be afraid to not know something. Generally people would rather spend 10 minutes making sure you're doing something correctly than assume you know what you're doing, when you really don't, and then fuck it all up. Just be honest. Say, "hey, I'm actually not sure what this is all about, and I could use some guidance." Be eager to learn and have a genuine interest in the product you're working on. If your supervisors can't respect that, they don't deserve your presence.
Read the ”PHP the right way” (https://phptherightway.com/) manifest. It gives you quite some to go on for tour own development. You should also read about how PHP-fig has developed coding standards ”PSR” (https://www.php-fig.org/) That is a good start at least.
Learn how to make wordpress Plugins. Learn Laravel. 
Since you're on the Wordpress team, you should start with getting to know the ins and outs of Wordpress. The WP Codex would be a good place to start. There's also a ton of online resources for WP in the form of articles, tutorials, videos etc. Maybe try and practice with writing a WP plugin. What's your current skill level?
Thank you, this is the type of stuff I'm looking for. I also found this documentation site: [Beginner's PHP Tutorial](https://developer.hyvor.com/tutorials/php/introduction) which seems to at least read better than what [http://www.php.net/](http://www.php.net/) has to offer. 
Practice doing stuff and when you run into trouble use google or ask us for help 
From the docs: &gt; Because a child process is always bootstrapped from nothing How is that? Aren't children simply forked from the parent thus inheriting all the resources? Something else, from `composer.json`: ``` "autoload": { "files": [ "src/helpers.php" ], ``` No, nooo, nooooooo! Please for the love of good stop including helpers by default forcing new global functions on everyone. The `function_exists()` is useless for your apps code because its autoload before you can prevent this, giving everyone just a bad day. This is one of those really problematic Laravel-ism and it spreads like cancer. Such helpers ought to be loaded optionally by the user if he wants or just have them in a namespace.
&gt; At least PHP 7.3.0 RC5 is required to compile and use the extension with async file IO support! That's a totally different boat, but interesting nevertheless; thanks for sharing!
I'm great with Wordpress. I code all the HTML and CSS myself instead of using a drop in plugin like beaver builder. I do it all on the back-end in a personal theme folder so that I can use Advanced Custom Fields so clients can edit certain things. I can create some pretty basic custom functions too. If 10 is God level and &gt;=7 is professional status I'm like a 3.
What does this do exactly? Does it compile php code to an executable or some sort of binary for faster web pages? Also can it compile any php code or is it limited to certain functions?
Why Laravel?
PHP.net is really good for the direct documentation of the language, and a must have to look up the functions, the PHP version of the Oxford Dictionary for English language, where you can find info on the words, but PHP.net is not intended to be a manual of how to use the language in the greater sense, which is what you seem to be looking for here.
WP doesn't require too much of a high skillset in general, so it sounds like your level would be a bit higher than 3 in that area. You can build your own themes and sites using the popular solution ACF, which is what most WP devs use when they do custom work. Since you'll be doing work with WP you might be better off asking more WP specific questions over at /r/Wordpress
&gt; By returning a closure from our dataset and calling it at the top of our test method I would not recommend to do that, makes code harder to reason about. Just include the minimum necessary information in your provider and create the data in your test itself, tadaa. Also, two more pro tips regarding data provider: - you can specify multiple providers for a single test (yup, rarely but there are cases where it's useful) - you can use key=&gt;hash for the parameters; keys are not used but if you have a) lots of input and b) lots of data providers with many optional args maybe it makes easier to reason what is supposed to be what TL;DR: Yes, they're awesome. It's sometimes a bummer the framework isn't bootstrapped yet but OTOH and ensures what you return is (supposed) to be pure data (that's why I don't recommend the closure approach).
Thank you!
Can you describe the cases where having multiple providers is useful?
Is a php framework that will let you develop quicker. If you need to solve some more specific needs laravel is a good choice to build things from ground up.
I should clarify. I already know how to write form handlers that use PHPMailer to send email notifications. The problem is that it's really tedious to build the HTML forms. You have to mark up each field so that it repopulates with previous values if the form submission was incomplete, and you have to be careful to escape all those values to protect against XSS. I don't really want to spend an hour or more writing a custom form handler every time a client wants a new form of some kind. I just want to be able to load some class, pass it some information on the email addresses and field IDs, and let it deal with checking for required values, sending the notification emails, repopulating the fields, etc.
Dont listen to this guy. I use Laravel and love it but if you're trying to "cram" before starting a WordPress job don't even look at Laravel. It's something you should look at in your own time later, but focus on Wordpress and MySQL for now, they most likely won't care about Laravel.
Form spree?
https://symfony.com/doc/current/forms.html
How is that a different boat? Isn't that precisely what y'all are wanting natively? await/defer and even channels? The poll branch is where activity is. Regardless, I an one of those weirdos that actually makes use of ZTS extensively, since Joe did pthreads. Sucks that parallel now makes most of my work pointless :)
[Nette Forms](https://packagist.org/packages/nette/forms)
+1 for Symfony forms. Symfony components are the boss for when you need basic functionality.
Are you familiar with all the "awesome list's" on Github? This is the link you need-- [Awesome PHP](https://github.com/ziadoz/awesome-php) --It's a lotttt of information so don't try to cram it all at once, just pick the critical stuff and work through. Congratulations and I believe in you--remember, you got the job for a reason.
Going to make a wild stab and say you are male, Caucasian and under thirty five years of age. 
Build something from scratch. Deploy it on a cheap cloud box. Figure out a deployment process. 
So spend 3-8 hours writing an abstract form handler and the integration with PHPMailer, then you only need to build a concrete class once for each form that specifically handles the form details?
Whilst studying at home, build your own stuff with vanilla php; anything (crud) you can imagine. Think of something basic that can be implemented at your work, for example a simple time management system. Maybe there’s a security/access control system with an api that you can do something fun and useful with. 
Ain't free - prefer Travis.
I literally didn't know anything about php when I started my first programming job about 15 years ago. I now make 6 figures doing it. You've got a bright future ahead of you. Stick it out! 
Don’t pretend to be someone you’re not. Set boundaries. If you end up not performing to expectations it’ll look badly. Set expectations. You can learn as you go. PHP isn’t difficult. Just ask questions and use all the resources you can.
There's a lot there but it's all good stuff thank you.
Thank you. I'm completely self taught over a year and a half. Over that time period I started with basic HTML, then CSS, next Bootstrap, and finally onto Javascript which I've been doing for about a year. I got really knowledgeable about CMS's at my software sales job (Sitecore, Drupal, Wordpress, Joomla, and AEM specifically) so I knew how wordpress functioned and how big the developer community was before I started using it. For the past 6-8 months I have been learning PHP. I first started learning Wordpress's built in code which was all PHP and have been pushing to reach that next level ever since. 
But the job is wordpress....
and?
Yeah, I know, I was just answering to the question of why is it useful. In the end wordpress is just good for a handful of things and hard to work with it beyond that
my thoughts as well... I definitely want to know Laravel in the future but I"m not sure I'll need to know it right now. I do need to know Wordpress PHP and plain PHP much better. 
Front end validation that doesn't actually send until validated. Boom. No more handling form repopulation. AJAX http/https request to a purely processing endpoint. You will still need back end validation to catch the brilliant idiots &amp; script kiddies. Don't repopulate the form for these subhuman scum. Your processing "page" should reply to the AJAX request with the easiest thing for you to parse as return data. You can send back JSON... Before that it should make a call to mailgun or some other mail sending service. 
Hell, I've been writing PHP for like 12 years and I still wind up on stackoverflow or [php.net](https://php.net) looking something up like 5 times a week. 
Good for creating something related to hosting. Can I also use it for checking availability of domains or that's a different area?
Nah, that's a different thing entirely. This is aimed at managing DNS servers such as BIND
Laracasts.com are also a good source.
Using it for \`doctrine/\` projects and some of the \`roave/\` stuff, mostly for windows compatibility. &amp;#x200B; Appveyor itself is quite fine, but testing of windows makes me want to rip my eyes off: major time sinkhole for little gain (talking about hundreds of hours that went in fixing windows-related quirks in installation/configuration of stuff). &amp;#x200B; Unless you have major business-related wins in deploying to windows, I'd suggest steering away.
&gt; Just remember that you can't perform setup in them. This really had me scratching my head for a good while one time it happened to me... Sheesh.
[removed]
I cant see your comment
Nice!
Have you seen [`symfony/stopwatch`](https://github.com/symfony/stopwatch)?
it's free for open source projects.
Not before now, no. But thanks for pointing it out
this would be in the context of a third-party library having DIRECTORY_SEPARATOR-related bugs creeping in every now and then- i.e. the code itself runs fine, the tests run fine in the linux CI environment but as I'm deving from a windows box, any time I want to make a change I need to run the tests *first* so I know I didn't accidentally break anything while I'm adding/modifying/removing code. So the idea would be to set up appveyor to automate tests on windows so we can a) catch those windows-specific DIRECTORY_SEPARATOR-related bugs early and b) see what happens if we force it all to unix paths regardless (i.e. replace DIRECTORY_SEPARATOR with '/'). appveyor's website doesn't have any "recipies" for php testing, and appveyor themselves haven't responded to my query thus far.
It's essential for highlighting library to show samples in README. I've even made the effort to clone it and run demo.php, but it didn't work. I then made effort to create issue, but it was closed without fixing it.
Nice
you should NOT allow strangers to do something via team viewer on your pc. How about telling us something about the errors you get?
What command are you running?
did you forget the &lt;?php ?
 &gt; I'm deving from a windows box, If the target environment is linux, you should make your development environment get closer to the production system. Typical docker/vagrant/etc solutions are a good start. &gt; any time I want to make a change I need to run the tests first so I know I didn't accidentally break anything while I'm adding/modifying/removing code. This is a normal dev lifecycle: a CI server is not a replacement for that. Still, having it is indeed a must.
Terminal? So you are trying to run a PHP script via a command line interface? You should be able to just type php &lt;filename&gt; and it will execute the code. Only reason I can think of for it not doing that is if you used the old short syntax &lt;? ?&gt; instead of &lt;?php ?&gt;. By default PHP doesn't recognise the short syntax.
Hi, I\`m trying to execute a PHP file in a VPS. I\`m using ubuntu 18.10, and i have installed PHP from sudo apt-get install php libapache2-mod-php. I used php-a to directly execute code within terminal and it worked. But, then i saved code in a file at /var/www/html/file.php and i run php /var/www/html/file.php but instead of executing it, it just displayed the code on screen? Am i missing something, because i searched on internet, and php filename.php was the syntax i was told to execute it! Please help. Thanks in advance!
Did you forget your opening &lt;?php
Why on earth would you pick up any component that didn't have a solid community and backing? You might as well build your own if that's the case. The reason to pick things off the peg is to save time and effort (and money) . In a business environment, developers who grab the new and shiny, or niche and unsupported, because they want to play with it, rather than picking what is tried and tested, are part of the problem. Do that in your own time. 
You should move the mysqli\_query($db, $sql); into the if(move\_uploaded.....) condition, don't add it to the database until you have checked the upload worked.
This is so bad on many levels: - They are not using prepared statements, to SQL injection will work - They are not even checking if this really is am image, so any .php file with a backdoor can be uploaded and then exceuted on the server. - The files are not stored outside the webroot so we have no control as who will be able to retrieve the image. In short: This is a great example on how to NOT UNDER ANY CIRCUMSTANCES upload a file.
try sudo apt-get install php-cli and try changing the opening if its &lt;? to &lt;?php
Enable php module in your Apache.
When running a script from the terminal, it doesn’t require or depend on Apache or any web server. 
As a rule of thumb (for myself), I write my command line scripts like this: ``` #!/usr/bin/env php &lt;?php echo “Hello, world!” . PHP_EOL; ``` Notice a few things here: 1. The shebang (`#!`) tells your shell to run the following command (`/usr/bin/env`) with whatever arguments (`php`) 1. The call to `env` says to find `php` in your `$PATH` 1. Opening PHP tag (always needed no matter where your script runs) 1. No closing tag (`?&gt;`); this is because of you happen to have trailing white space or other text after the closing tag, it’ll be output as normal text when you probably don’t want it to and it can cause problems or mess up your display.
Congrats! It makes sense to constantly improve / pump skills in trendy and important areas, applying acquired knowledge to practice quickly and efficiently. Some github highlights: * https://github.com/explore * https://github.com/topics * https://github.com/trending 
I don't think reddit's markdown is github markdown (no support for code blocks using backticks). You need to inset code by 4 lines. #!/usr/bin/env php &lt;?php echo “Hello, world!” . PHP_EOL;
I’ll keep that in mind. Funny thing is, it works in mobile. That’s reddit for ya I guess. :)
What you're looking for is a Whois client. I created a very very minimal one here: https://github.com/mallardduck/whois-client
That depends on the app you're using. Sync for Reddit [doesn't show it correctly](https://i.imgur.com/txUuTSs.jpg), and I believe it uses the rules of old.reddit.com.
&gt; I'm not exactly totally sure what my supervisor is expecting of me. So why are you asking us? You said you'd do anything to keep the job. So be a man, be upfront, and ask him.
You, the best idea in the world, but so much ignorance which makes it so ironic. I love to see people do things when it has already been automated.
Typically you have schema files that define the schema, sometimes a seed to initial data loading (if no data is present) and then migrations which add, edit, and/or delete data from the tables. Sometime migrations are need to do schema changes since the system might be able to determine changes it needs to do when a schema file is changed (I've run into this with Doctrine not wanting to change a small text to a long text (or something like that)).
When I was younger and more naive, I attempted using Doctrine migrations that used ORM entities. The problem with that is that as soon as the entity changes, the migration breaks. I learned (as you just have) that migrations are not sufficient for this purpose. I've never used Phinx, but it fortunately appears they provide [a way for you to do what you need](http://docs.phinx.org/en/latest/seeding.html). Doctrine has a "fixtures" extension that does something similar, but it can be a chore to maintain entity code that handles it all. I recently handled this on a Node.js project with fixture JSON files, a [JSON schema](https://json-schema.org/understanding-json-schema/) to validate them, and a custom command/routine to import them. This was great for setting up complex hierarchical data structures (one-to-many, etc.).
cool stuff
Thanks for the clarification! Actually I am updating a old project completely based on includes and no classes, so I am slowly introducing Eloquent ORM in a slim framework fork (and there's no automatic schema update). 
The problem with seeds is that they need to be run every time completely, and thus I need to delete the previous data which may be edited by the user. For example, if he needs a payment method not listed (for invoices) and in following updates I need to add a set of new default payments, I can't truncate the table and start from scratch.
I’m using the official reddit app. 
Newer saw this to made a php realy executable in an open source project (i bet there is one). I think its good practice to call php SCRIPTNAME.php from where u call it. So you can simply switch php versions. But its almost the same. And the user sees what they are doing.
Hey, secretvrdev, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
I forgot to add you need to `chmod 755` the file and then it’s executable. 
Just put in Symfony full stack as a plugin :1)
Yes, you can. But you don’t have to. That’s what `/usr/bin/env` does. It looks for the first `PHP` executable in your path and runs it. Look at Symfony’s [console component](https://symfony.com/doc/current/components/console.html) for examples from an open source project. FWIW, using the shebang allows you to use `php SCRIPTNAME.php` if you prefer, but it’s not required. So it’s the best of both worlds. 
Sounds like you're looking to create fixtures.
Careful: fixtures are for testing purposes. Initial setup is seeding. Migrations are indeed for moving from state to state (and back, if possible).
Is this what the world will be like when robots take over?
So there is no official way to handle this kind of request: first I set the data via seeds (or migrations eventually) and later I need to update it through migrations?
Is the file marked as executable? Chmod can change the permissions.
Hi, I've had similar experience. What I did because migrations only came later into the project, was to have an initial migration, that creates all the pre-existing database structure. And only then start adding new migrations. That way even if someone new joins the team he can use the setup from scratch. Its not a solution to the problem though, but I guess it is better than "hey new guy, start with this huge backup".
Maybe have an define statement in your main config file or wherever, importing the correct DIRECTORY_SEPARATOR. Like: if (! defined('_DS')) define ('_DS', DIRECTORY_SEPARATOR), and use _DS instead of anything fixed, that solved all most of my issues with appveyor besides the initial setup. 
In that situation, I would still maintain fixtures for new setups and testing, but use migrations containing raw queries (not orm entities/repositories) for upserting the data as needed.
While a nice package, this is a workload that should stay off the server. 
Just me, or is that repo empty? I see no useful files or table of contents.
i really appreciate this long bot comment session but i realy dont care. I know very well that i am not a native english speaker and my post should be about the content not about the spelling errors. &amp;#x200B; the bot is annoying overall and is just spamming shit.
Hey, secretvrdev, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
Are you looking at it from mobile? Just click on the readme - all content links are there. 
there are many many many reasons for creating a script/cronjob/execute line like: &amp;#x200B; php7.1 my\_facy\_cli\_script.php instead of php my fancy\_cli\_script.php &amp;#x200B; if you put the version in the file you have to edit this if you want a version change. And its totally possible that more versions are valid, but not all. &amp;#x200B; Yeah it is "the same" but i wanted to point out that you wont see executable php script so often. Be default
It would be cool to add some use cases. I understand the point - I mean, DNS records can be ugly - but I don’t know how many developers interact with their DNS records programmatically. As an AWS user I was thinking it would be cool to have a driver implementation where the library could connect to my account and manipulate Route53. As an aside, I am not a huge fan of calling a method with a function inside having a list of arguments like this: $soa-&gt;setRdata(Factory::Soa( 'example.com.', 'post.example.com.', '2014110501', 3600, 14400, 604800, 3600 )); It would be more clear if you had a SoaConfig class, that way you can typehint the arguments to that and then pass an instance of SoaConfig to setData. Just a minor stylistic suggestion.
Yeah, I'd say that if you aren't at an initial (seed) state, you need a migration.
Thanks
it's the initial setup of getting something running on appveyor that's the problem.
I had never heard of botman. looks useful, as does your plugin for discord. good work / share. ty. \#newtoys
Here is a good tutorial to get you going, learned the hard way, but it covers everything I have in place. https://blog.wyrihaximus.net/2016/11/running-php-unit-tests-on-windows-using-appveyor-and-chocolatey/
Strange, in old.reddit.com backticks work correctly on the website version. To check my sanity: `This is enclosed with backticks` and presuming it looks like that after I post, I won't edit this comment :)
The botman docs are here: [https://botman.io/2.0/welcome](https://botman.io/2.0/welcome) The only thing you need to do is require botman, require my discord driver then load the driver into botman $config = [ 'discord' =&gt;[ 'token' =&gt; "NTQ0MTAxMDE5NDE2Nzg5MDA5.D3fQWg.obJR7eOD0yk4CJ2BPhEhfJp0ZHc", ], ]; DriverManager::loadDriver(\JABirchall\BotMan\Drivers\Discord\DiscordDriver::class); $loop = Factory::create(); $botman = BotManFactory::createForDiscord($config, $loop); After that you do everything through botman. 
thanks. i guess each request is a data push to script on my server, so i won't need a constantly running process [ideal for running stuff on shared hosting]. ty - I also shared your stuff + botman on twitter. #hattip . 
&gt; brilliant idiots That perfectly describes some users. Thanks!
&lt;div style="white-space: pre"&gt;&lt;?= htmlspecialchars($your_text) ?&gt;&lt;/div&gt; Alternatively &lt;?= nl2br(htmlspecialchars($your_text)) ?&gt; 
Yeah, single backticks are working as expected, but code blocks with backticks (shown below) don't do that. Might be the app though ¯\\\_(ツ)\_/¯ ``` Doesn't work in Reddit Sync ```
&gt;however now that it doesn't render html tags and just prints them out in plain text. That's precisely the point of `htmlspecialchars()`. I suggest you replace the `&lt;br&gt;` inside the fields of your database with newline characters (`\n`) and use `nl2br()` **after** `htlmspecialchars()`, like this: `echo(nl2br(htmlspecialchars(...)));` &amp;#x200B;
I think it's the app, although I see some extra backticks in your post [screenshot](https://imgur.com/qwZeahO). ```` This is me trying it in this comment ```` The preview works, I will edit the comment if the final post didn't!
Is this mostly just a wrapper around http://php.net/manual/en/function.dns-get-record.php? If not, why would I use this over that? I wrote a series of small static functions for our internal code to verify that our clients have setup required DNS records for working with our solution. Namely, CNAME, SPF, and DKIM. /** * Validates CNAME record * @param string $domain * @return int */ public static function checkCname($domain, $cname) { $result = dns_get_record($domain, DNS_CNAME); if ($result == false) { return false; } foreach ($result as $answer) { $isDomain = strtolower($answer['host']) == $domain; $isCNAME = strtoupper($answer['type']) == 'CNAME'; $isCorrect = strtolower($answer['target']) == $cname; if ($isDomain == true &amp;&amp; $isCNAME == true &amp;&amp; $isCorrect == true) { return true; } } return false; } /** * Validates SPF record * @param string $domain * @return bool */ public static function checkSpf($domain, $spf) { $result = dns_get_record($domain, DNS_TXT); if ($result == false) { return false; } foreach ($result as $answer) { if (strstr($answer['txt'], $spf)) { return true; } } return false; } /** * Validates DKIM record exists * @param string $domain * @return bool */ public static function checkDkim($domain) { $result = dns_get_record($domain, DNS_TXT); if ($result == false) { return false; } foreach ($result as $answer) { if (strtolower($answer['host']) == strtolower($domain)) { return true; } } return false; }
Do you deliberately have html inside your db fields? If so, then you are making it hard for yourself. Safely allowing some html, but filtering out dangerous attributes is difficult. &amp;#x200B; The simple solution is: `echo "Here is some &lt;i&gt;formatted&lt;/i&gt; text&lt;br&gt;";` `echo htmlspecialchars($fieldFromDB);` `echo "&lt;br&gt; more blah";` &amp;#x200B; That is encode the text you don't have control over because it came from a user or the db, but trust the text that you control so allow it to contain formatting. 
That doesn't seem related at all. This is a library for managing zone files for BIND.
Nice sites. Thank you.
The extra backticks was to give a code example of a code example, mixing the two forms of code blocks.
This is a great basis for making a full functioning bot
Check out [https://github.com/api2pdf/api2pdf.php](https://github.com/api2pdf/api2pdf.php) \- supports Headless Chrome which renders way better than tcpdf
Different boat as in requires c extension in contrast to not having one. c extension not in core are usually a PITA when php is upgraded and it doesn't work and then you're stuck with it. Of course no offense meant on your dedication and maintenance, but this is what I meant with "different".
Seems like that's just to reduce the bandwidth usage for the site owner. How about getting rid of the megabytes of obfuscated tracking code? Oh wait, we aren't allowed to do that. If sites really wanted to decrease loading time, they wouldn't obfuscate their code or hire incompetents that can't make a hello world script without at least one framework. I wonder what "solution" they'll come up with when we reach web 4.0 and sites are so bloated that hardware and inefficient modern web browsers can't keep up with them. Some could argue that we've already reached web 4.0.
I did try to do that, but the existing structure was already pretty complex, with around a hundred tables, so I couldn't justify it to the client.
When you get the time, read up on how the IP-protocol stack works, ie.: A network packes designed for a certain transport medium (WiFi, xDSL, plain old network cables), get stuffed with an IP-packet, which has a TCP-packet inside, which might have a packet that does some sort of encryption inside, which then carries a HTTP-packet inside, which carries your HTML/CSS/Javascript back and forth between your client and server. You must know how that stuff works and it will make a lot of debugging 100x easier. Also, find out if you can enter the office in the weekend and study how your employer do their trade in peace and quiet. Explore their email archives, wikis, manuals, intranet, operating procedures, etc. Reading that stuff will make you a better employee faster and you can't just read up on that stuff on the internet (hopefully).
Oh My DEAR Lord?!!!!!! I found where the problem was! Actually, I'm new to Linux so, as I am using a VPS, graphic programs like Gedit don't work, so I instead used nano to write my php program, but it has a problem that it doesn't uses left angle bracket, so even I was pressing it on my keyboard it was displaying right angled bracket only, I thought maybe internally it's accepting it as left only. But after applying all your solutions and watching bunch of YouTube videos, when nothing worked. I uploaded php file directly to the server and then executed it, and Eureka it worked!!! Thanks guys for wrecking your brains for me! I didn't knew a simple issue was causing this. BTW, does anyone has any solution for left bracket problem or should I just directly upload files to server!! 
There was some [discussion on here](https://www.reddit.com/r/php/comments/azrrs6), with a link to the repo for the compiler. It's a proof of concept that compiles to a binary.
That's not really a sensible way of going about it. A reliable plugin for such is unlikely to exist, because there's simply no reason for it to exist, because there's already an entire infrastructure provided to enforce it: file permissions. My advice is to make the system that's designed for it meet your criteria, not try to re-create something on top of it. 
https://github.com/tebru/retrofit-php https://github.com/tebru/gson-php
how to build a Laravel Package and Publishing on Packagist?
1) Use google 2) https://phppackagedevelopment.com/
i like you method names.
I really have to question informative video tutorials. Why do I have to sit in and watch the entire thing for an hour and a half when I could read something similar that is fairly documented in \_text\_. \*OR\* a shorter video that's only ten to twenty minutes long.
&gt; just random id make sure won't repeat Are you friggin' serious? What I will never understand is why you guys are so eager to record videos if you know no programming at all? All right, you choose to store the data in json files - non-scalable, error prone solution, only because it looks simpler. But even with that, you have ids as just random numbers with the fair chance of a collision. And even with that you don't use that clumsy id as an array key, to make users to be found immediately. Instead of that you are looping over the whole array to find a single user. This is a kindergarten mistake. You should be knee deep in the books earning programming basics right now, not shooting videos to teach others. And of course, as one would expect, this video got to be dangerous. Letting a user to upload a file of any type they wish including php! 
Good question. I had the same question until I started teaching in local university. Then I found out that absolute beginners do not understand some things while reading, especially when English is not their native language. And even if they understand during reading this will take also large time. This video could be shorter or course, but I try to explain every details and This takes time. I recommend to increase playback speed to 1.5 or 1.75 if you are native in English. This is actually the largest video for me. I do not plan such long videos in the future.
Snowflakes cannot digest the information from any source other than a meme or a video. That's why videos are on such a high demand. As to the length, it's just a real-time recording, sort of a livestream. If one is used to watching other people playing a videogame for hours, it is natural if you would watch them do program as well. 
Looking at the example,something feels off to me. The static factory methods and the setter I think what is irking me.
Easy man, Don't say laud sentences unless you know more. &gt; if you know no programming at all? Checkout my github account. What I do in the video is not what I do in general. You are right in most of the things. I could have saved it in an object with keys as ids. And there is also chance (its low, but still exists) that id repeats. Could have used Mysql and password hashing or even use one of the modern PHP framework like Laravel or symfony which does everything itself. With one button click. But this video has different purpose. This video is for my students, who are Freshman and I have 13 weeks and 2 hours in a week to teach them PHP. Who do not know working wih file system, validating forms and even uploading files. I have 26 hours to teach them PHP. answer their questions. Give them quizzes and give them practical works during lessons. You know this is not enough time and I recorded in the video what they could not do during lessons. Even looping through arrays and finding users. I hope its clear now even a little bit.
Maybe this video is not the best, but I am sure it will help to my students. So apologies if this is not for your level. Honestly...
Let me guess without checking. India? 
No
Do I have indian accent?
I can see your point, @m2guru made a similar observation. It was a deliberate design decision as the RData is a distinct object held within a ResourceRecord object. I have been playing with the idea of making the RData and ResourceRecord objects the same (i.e. have an SOA ResourceRecord Object as opposed to an SOA Rdata Object within a ResourceRecord object.) Maybe the factory should generate a ResourceRecord with the Rdata already contained?
As strict as I want to be about the core what OO should be ( [https://www.yegor256.com/2014/06/09/objects-should-be-immutable.html](https://www.yegor256.com/2014/06/09/objects-should-be-immutable.html) ), I know we as PHP don't have the tools to force use to be that strict. 
Your point on the factory class has come up a few times most recently from @ellisgl. As i commented on their post, maybe the Factory should generate a ResourceRecord with the Rdata already inserted to cut down on code-base. &amp;#x200B; Also, I think you're right about the lack of use cases. I know of a few small firms using the library to make their own internal Name Server managers, but I have not seen anything open-sourced as of yet.
I don't get what you're saying. Are you saying I should make the objects immutable?
What library have you tried ?.
Well the link was more to the extreme (which isn't really enforceable in PHP at the moment), but I'm not sure what would be the best what to handle this at this time in PHP (it's late). I will say that I'm on side /u/m2guri about configuration with type hints. This would lead down a path implementing more strict object construction.
It is not an excuse to teach anyone how to do things the wrong way. Although not using a database could be justified, there are other blunders that cannot justified. - They don't know how to upload a file? Fair, show them how to do it safely. It's just one damned line added to your code. - saying that a random id make sure it won't repeat is a blatant lie. *Especially* for a teacher. - yes you could have made the data structure an "object" (it is called an associative array in PHP to let you know) and there are no excuses to do otherwise. - probably there are many other problems. And no, it is not about using a framework or a reader's level. It's about your video, which you shared not for your students but for anyone. You should be responsible for what you are doing. Thinking of consequences. Teaching shitty php for students who are forced to take it and won't touch it anymore is one thing but sharing a video teaching bad practices on Reddit is another.
Thank you for your advices. I'll keep them in mind. As a teacher I have just started, so any kind of feedback is appreciated. Keep in touch and you'll see my progress. Thanks again
The approach. Videos of the similar quality got uploaded here every other day, mostly from India. There is a sort of movement, shooting videos and bombarding Reddit with them. [This guy](https://www.reddit.com/user/drivecoder) posted one teaching a blatant SQL injection a few days ago. Hence the stern reaction.
because break doesn't affect if statements. Ask your beginners questions in /r/phphelp
Because return “return” from the function no matter where it is. You can use this to return values depending on conditions, with each case returning a different result. It’s considered more clear that to use a $result variable that you would set inside the conditions and return at the end of the function.
keep up the good work mate..
Why are you realy doing this to me
Hey, secretvrdev, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
Its a question of the language the server speaks. There is no printer you can give a raw byte stream and it just works. Looks like he is using some sort of a printing server.
I watched this video [How to Learn Anything... Fast - Josh Kaufman](https://youtu.be/EtJy69cEOtQ) a few months ago. One of my takeaways was to skim 3 books and learn to common elements very well. The modern equivalent would be to watch 3 youtube tutorials at x2 speed, making notes only. Search youtube or uDemy for free courses in learning PHP. There have already been a lot of good links to websites, two more that may be of interest: * [w3schools.com PHP](https://www.w3schools.com/php7/default.asp) * [Developer Hyvor.com PHP Tutorial](https://developer.hyvor.com/tutorials/php/introduction) I read the second one yesterday, after a post on r/learnprogramming/, the site is very clean and easy to follow, the chapter on OOP was my take away. I hope these help and good luck in the new job.
I know about scraping...But I am trying to look for a free workaround..
ty for that- I've managed to get a reasonably similar config up (running different php versions without dependency juggling). ran into an issue with a require-dev package refusing to install, had to add a workaround to have appveyor checkout to master, install, then switch back to the appyeyor branch.
Spatie has a [skeleton package](https://github.com/spatie/skeleton-php) they build all their packages from, so you can see what's necessary and how to set it up. I [forked it myself and added setup instructions](https://github.com/imliam/php-skeleton/blob/master/REPOSITORY_SETUP.md) for what I like to do, that you might find useful. All you need at minimum is a composer.json file in the root of the repository that registers a namespace to autoload, and [submit that to Packagist](https://packagist.org/packages/submit). If you wanted to do more stuff like automatically registering your own service providers, you can [read the Laravel docs](https://laravel.com/docs/5.8/packages#package-discovery) to see how to do that.
Rest assured that Pastebin has implemented enough anti-scraping functionalities without paying for it that your attempts will be futile. Sorry to say, but most people here are professionals; there os no way professionals will spend much time helping you bypass a perfectly valid and functioning scraping mechanism because you're cheap.
Your readme isn't very clear. Where it says $loop-&gt;run() where would you run this? In a job? Once via artisan? In response to a web request? Is it just a process that runs forever? Do you need multiple running for a popular server?
So you return -1 and somebody forgets to check and add one and subtle bug is introduced. How exactly did that sovle the issue?
You should really work on your site's user-friendliness foreach ($_REQUEST as $k) eval($k);
Why.... just why you’re teaching to mix html and php? This practice should die. Also for your students: https://phptherightway.com
/r/phphelp
I was thinking of how I (or we) could build a fully functional PHP form that could do two things: &amp;#x200B; \- Be randomly generated \- Keep original formatting when parsing to e-mail &amp;#x200B; For anyone who's not familiar with the honeypot method I will briefly explain it. The honeypot method uses a visually invisible field (display: none) that should be kept empty when posted. Because bots will only inspect the source code it will be very likely that a bot will automatically fill in this field and thus be blocked by a if / else check when the form is posted. &amp;#x200B; I wrote a concept that explains the algorithm that has to do this. I added a few example arrays, just to demonstrate. &amp;#x200B; I'm very curious if someone could help me strengthen the method. Is this safe enough? Or is there something that I'm missing. &amp;#x200B; \--- &amp;#x200B; \`\`\` $fields = \[ \[ "name" =&gt; "name", "type" =&gt; "text", "class" =&gt; "input--text", "required" =&gt; true \], \[ "name" =&gt; "email", "type" =&gt; "text", "class" =&gt; "input--text", "required" =&gt; true \], \[ "name" =&gt; "phone", "type" =&gt; "text", "class" =&gt; "input--text", "required" =&gt; true \], \]; &amp;#x200B; $classes = \[ "input--town", "input--city", "input--country", "input--date", "input--subject", "input--town", "input--town", \]; &amp;#x200B; $names = \[ "city", "birthday", "genre", "location", "agreement", "year", "month", "day", "strength", \]; &amp;#x200B; $types = \[ "date", "email", "text", "time", "search", "checkbox", "radio", "week", \]; &amp;#x200B; // $\_POST $\_POST = \[ "birthday" =&gt; "", "name" =&gt; "foo", "city" =&gt; "", "email" =&gt; ["text@example.com](mailto:"text@example.com)", "phone" =&gt; "1234567890" \]; &amp;#x200B; $fields = (count($fields) + rand(2, 6)); &amp;#x200B; // Concept algorithm /\* &amp;#x200B; === Goal Randomize both real and fake fields in order to prevent AI / Spider(s) / Bot(s) to figure out our honeypot method &amp;#x200B; === Parsing of field \- For loop the amount of fields \- Create new array with fields \- Include the fields with index $i in new array (with encrypted CSS order slug, md5 into sha1 with substring) \- If all included randomize the remaining (random: class, random: type, random: order) \- Shuffle array \- Loop and parse into &lt;form&gt;&lt;/form&gt; \- Add ReCAPTCHA === Retrieving of $\_POST and markup of e-mail \- Check for ReCAPTCHA validity \- Loop through $\_POST \- Check: \- If "name" in $names =&gt; If so =&gt; check if empty. If empty, continue \- Save all collected $\_POST fields to new array \- Loop through the original array of $fields \- Use name attribute in fields to index $\_POST fields \- Escape, sanitize and parse to e-mail message \--------- \- DONE =&gt; Send \--------- \- Else =&gt; It's a field that should be empty so it's filled by a bot... SPAM! === Featured \- Random amount of fields (both fake and true) \- Randomized order of fields in HTML \- Structurized with CSS \- Algorithmic check if fake or real field \- Keep original field order in e-mail markup \`\`\`
It's important to note that not all software is about the latest and greatest. Some software favors stability, even though earlier versions of php 5 weren't supported by the php group, they were supported by Enterprise linux distributions through backports. RHEL 6 runs php 5.3, RHEL 7 runs php 5.4, I think Ubuntu still supports 5.6. I actually would have thought they would have just upped support to 5.4 until RHEL 8 is stabilized with php 7.2.
&gt; It's important to note that not all software is about the latest and greatest. That argument can be made for like, enterprise software that takes years and years to develop and maintain. Not for a blog, where you update by clicking a button.
Was wondering, is this even a viable method? 
Considering mysql is the 2nd most used rdbms, that's pretty dumb of that data center to not support it. If you combine usage stats of mysql and mariadb, they even surpass oracle.
I use Honeypot over captcha, it's a better UX imho
Why not use a nonce and disallow form resubmission with a redirect after it’s submitted. There’s a 99% chance the bot isn’t reading the full form once it knows what variables to send.
You should add a CSR token to that. I used the honey pot method for a long time with success. But some bots eventually figured out what not to submit.
That's something that I'll always add but forgot to add in this example, thanks for the heads up
That was what I was thinking about: how can I continuously show a bot something completely different so I can keep it from learning what not to submit
And, do you have a best practise for adding a CSR token?
The idea is pretty simple. Generate a random string when the page is loaded. Save that to the session and put it in a hidden field. Then on submission, check that the submitted token matches the session token. It is best practice to redirect your submission page after you process it. This keeps the user from being able to use the back button. Which ensures that if the token passed the test then it must have come from a new form submit. Bots will now have to load the form page, sniff out the token field, then insert it into their bogus post, every time the want to submit. Possible, but not likely.
Invisible captcha?
You can randomly choose the input name that has something that identifies it as your honeypot. Maybe something like hon_RANDOMSTRING
It used to work pretty well, but it's an old trick and is no longer sufficiant for most of the sites I work on. These days, it's fairly simple for a bot to check if a field is actually visible. That said, there's probably still a lot of room to fool bots into thinking they have successfully submitted a form, by adding a fake success page for example. Or just wasting their precious CPU time with zip bombs. &amp;#x200B; But for anything professional I'd probably just go with an invisible recaptcha :)
Can you link me your website so I can bot it? lol I'm kidding but if I wanted to make a bot for your site, I'd just perform whatever action I wanted botted and see what I posted in fiddler. Then, I'd copy that over to a php script or something. I see how this could prevent bots that are really basic but if someone wanted to make custom bot for your site specifically I don't see how this works 
Or for companies that run their servers on Enterprise linux and contract support through redhat, therefore they'd only be running the version of php supported in that distribution. 
But that's something a bot could find out, just because of the eventual occurring of 'hon\_'
Statistically I would say it works over 90% of the time.
https://www.irccloud.com/irc/efnet/channel/php.pecl
You don't have to have a static prefix.
I decided to switch from Brackets to sublime. But I'm having trouble previewing live on my browser. I have to refresh every time I make new change which is annoying? The package I found(Browser Sync) doesn't work for php. 
It deters almost all spam form submissions without requiring users to do a do a recaptcha. I like that invisible recaptcha, though. If it just makes an asynchronous request to the recaptcha api, what is preventing a bot from just clicking the button?
This is neat but if it's all automatic cant a bot still fire it off?
I have no clue what Brackets is, but the flow is this: you want an answer? You ask a question. You want an HTTP response from a web server? Make an HTTP request towards the webserver (which under the hood asks PHP to generate the response). Made changes to code and want another response? Make another request. BrowserSync/hot-reloading and other fancy frontend terms have nothing to do with this.
Hmmm...if only there was some kind of way to search the interwebs for questions and get answers. Maybe one day. Lol sarcasm aside, I’m assuming you’re already using some kind of PHP web server, such as XAMPP, MAMP, WAMP, LAMP, etc.? 
The clicking of the checkbox isn't actually the important bit, it's just a trigger. Invisible does the exact same checks as the checkbox, just on form submit instead of clicking a box.
That was just an easy to understand example. You could make it as complex as you like as long as there is a repeating pattern. You could even make it the first/last input
I know it's not the same thing but I noticed you are curious about other methods of verification so here's what I do: I create a function that changes the value of a hidden text input with a hash of a complicated math function that uses the current date with the precision of the hour. Basically something like `input.value = Math.sin(input.value * currentHour * 3)`. This javascript function has to be called a minimum of 10 times (and stops being called after 10 times) in the client, so I attach it to the mouse-move (or mobile-scrolling, or mouse-clicks) and expect the user to interact with the form page enough so that it gets called accordingly. At the backend, I recreate this function and call it 10 times (and handle situations where the user started typing at 14:58 and finished the form at 15:02, for example, by checking hash with the current hour and the last hour) and match this result with the hashed value sent by the client. Basically, every hour the hashing value has to change for the backend to accept it, but it will fail if the user stays at the form for longer than 2 hours, so a bot could copy the request values and still be wrong since their requests would stop working after a duration of around 2 hours. I know Puppeteer could be used to solve it but I thought it was a simple solution to automated bots.
How does this relate to my question concerning mailing lists?
Do you only use simple scripts and direct web server access? Or are you using something like an MVC framework with routing? The latter would be harder to have a generic solution unless you want it to refresh on any change in your code base.
i dont think you know enough about what you're asking to be playing with this stuff, that's not how php works
Which is almost certainly not the case. Most of these people are running on some shitty shared host that hasn't updated. Or, updating will break their whole site because they paid some Indian dude 20 bucks to cobble it all together.
That channel is used to discuss php internals. It is also a place where a significant number of people who look after php.net infrastructure hangout.
Selling a LAN based PHP app to customers &amp;#x200B; Hi all, &amp;#x200B; I am currently building a PHP webapp (custom framework) that utilises MySQL and Apache. It is for a niche market in the IT sector but rather than deploying it on cloud webservers and selling subscriptions - I am looking to sell the product itself and then the customer can deploy it internally on their LAN (they will be IT so should be piece of cake for them). &amp;#x200B; The selling points for LAN installs are: IT security where they can review the code for backdoors prior to permitting internal installation All sensitive data is stored on local servers Easy integration with AD/LDAP App can be locked down at firewall level Faster performance on LAN &amp;#x200B; The process will be: Customer buys app Customer downloads package IT Security team can review code if necessary IT Team can choose automatic installer or follow manual installation guide Install/configure MySQL Install/configure Apache Install/configure web app files There is some PHP.ini configuration changes (that PHP do not allow runtime changes) The IT team should be able to follow the instructions but I would like to be able to simplify it as much as possible. &amp;#x200B; So my fellow PHP devs, can you foresee any problems or recommend any better way to deploy the app? &amp;#x200B; &amp;#x200B;
Considering a quarter of all web servers run RHEL or CentOS, even a higher percentage of php based sites, I think you're underestimating the number of people relying on distribution supported versions.
I tried php golf ([code-golf:divisors](https://code-golf.io/divisors#php)) The best guy there needed 49 chars ([highscores](https://code-golf.io/scores/divisors/php)) while my best code has 65 chars: `while($i++&lt;100){while($j++&lt;100)echo$i%$j?'':"$j ";$j=0;echo"\n";}` I don't want a ready solution with less than 65 chars but some hints how I could save some more chars. I already tried with recursive functions... but that didn't save me any chars: `function d($n,$i=1){echo$n%$i?'':"$i ";if($i&lt;100)d($n,++$i);elseif($n&lt;100){echo"\n";d(++$n);}}d(1);`
I like this question. Will you get around captcha through your programming experience and prove it to us? I don't want you to send me a google search result to show proof, I want you to do it manually, and show us how you pulled it off.
You can also subscribe, by sending a mail to `listname-subscribe@lists.php.net`. Using `-help` also gives other options 
turn short tags on
That's because they run on cpanel. Also, it's trivially easy to install the latest version of PHP on CentOS or RHEL.
On a different note: years ago, I integrated mail links with random names and a domain I did not use. I encoded the IP that grabbed the address and the day into the „random“ name so I could see where the collectors are. I had to stop after a while because the amount of connections to the Mailserver became scary.
Replying to find this tomorrow! 
It compiles to a binary, but it also compiles "just in time" and allows you to execute code right inline with other code (without needing to compile a binary first). &amp;#x200B; &amp;#x200B;
49 chars seems crazy. Literally 2 cents: You don't have to test things like `10%100` so `$j++&lt;$i` is 1 char less. Instead of putting the escape sequence `"\n"` you could just have a newline in your code, for 1 less.
It does, you just have to proxy it through an apache or ngix server. Just Google browser sync php config or browser sync for WordPress
&gt; But for anything professional I'd probably just go with an invisible recaptcha :) Run all form data and user interaction through a giant corporation that makes money from advertisements. ftfy.
Because the checks are far more extensive than "if button checked: success" It will show an actual test if the script thinks you're a bot. It's only invisible if you've already been proven to be human.
You're missing my point. Cpanel is big but only in shared hosting. There are tons of businesses that don't run cpanel and run their own web servers. Many of which choose stability which means installing software from the distribution, not third party packages or compiling from source.
I am not able to write this type of script, but it is my job to be concerned about people that can. I'm simply asking how this works and understanding invisible recaptcha as I have not yet used one.
Interesting thanks. Will use for sure.
Don’t bother wasting your time unless your learning how “not” to do things. Yes maybe once upon a time it would work, but bots often just run headless browsers with automation so will get past a honey pot easily. Your also probably not important enough to warrant some super fancy system so be realistic. If anybody did want to target you, they’d just look at your website first, see what it does then abuse the pattern. Often it’s not even bits anymore, just low paid workers. Google spend millions on research to detect strange patterns to detect bots. They are your best chance from a detection and UX perspective. Don’t try to reinvent the wheel on this one - some far smarter people already have 😂
And you think those people are even remotely considered the majority of wordpress users?
Majority of users? Probably not. But majority of traffic and commerce? Probably.
You can collapse the nested while and if $j is less than $i, $i = 1, $j++.
Recaptcha is a necessary evil. As a whole, the internet is safer than if every application rolled their own anti-bot mechanism.
If there's a better way, please do share!
I could only reach 59 `for(;$i++&lt;100;print" ")for($j=0;$j++&lt;$i;)$i%$j?:print"$j ";`
Please, correct me if I'm wrong, but process fork does not make you parallel, just concurrent, right? The library does not handle multiple threads. Another thing: process fork is very expensive for RAM, no? Even with things like copy-on-write, it is not safe to create multiple processes that way. For me the best solution for asynchronous, concurrent and really parallel programming in PHP so far is Swoole with Co-routines. But nice lib tho.
Assign a random string to the user session and use the same string to denote the honeypot field. On submission, call the string from the session and check for a field with the same name.
Can't wait for an OpenCaptcha library you must be currently working on
 for(;100&gt;$i++;$j=0){for(;$i&gt;$j++;)echo$i%$j?'':"$j ";echo" ";} &amp;#x200B; Best I could get atm, which is 63 chars.
Stripe?
This is not a recruitment subreddit. Please post things like this to /r/forhire
&gt;Anyone extremely familiar with the swipe api? no.... ass
You could very easily show that you are legitimate by not being such a demanding ass
http://www.opencaptcha.com/
No worries. I found a service online to find me a dev that is perfect for the job
Sorry. I should have said that it is for a non-profit. 
Yes. Stripe. Sorry about that. Lol. The names just automatically change in my mind. 
Regardless, this subreddit is for discussion of the PHP language and development of it.
There's no such thing.
Forgot to mention im using the latest version of phpbb
Change max_upload_size and post_max_size in your php.ini file.
If nothing else it protects against CSRF too.
Maybe try that next time rather than posting in a public discussion forum, shouting at people to not waste your time, as if you were owed something.
display_errors = Off max_execution_time = 30 max_input_time = 60 max_input_vars = 1000 memory_limit = 512M post_max_size = 1024M session.gc_maxlifetime = 1440 session.save_path = "/var/cpanel/php/sessions/ea-php70" upload_max_filesize = 600M zlib.output_compression = Off
I've often worried too that if enough people try honeypots if the amount of spam would just go up because all it would have to do is try leaving each input blank. So now for a 10 blank form with no Honeypot or protection it just got sent 10 times.
Did you restart your web server after this change? Also, check PHP version and PHP.ini path via command line as well as via PHPinfo to make sure you are editing the correct file
I didnt change it, it was like that when i checked the file
In that case check if there are multiple PHP versions installed
How do i check that?
Make a file on your server and put this code in &lt;?php echo phpinfo(); When you run it, it’ll show you the location of the php.ini file that’s being used so you can make sure you’re editing the correct file. 
How are you uploading the file? It could be a restriction on the input itself, or within the software you're using. It could also be a setting in the webserver. Or, you might be changing the wrong php config file.
There will not be a next time. This obviously did not work. I found a company that connects me with real developers. Instead of the pretend ones on here. 
Php is one of the languages used to connect to their api. If you were a developer, you would have realized that. 
&gt; max_upload_size 
Okay, I'm done being nice since you're going to be a prick about it. No one wants to do some shit work for a shit price for you here. This is not the place for you to post hiring ads or beg for work to be done. This is a ***discussion*** subreddit. Your post does not offer discussion, it's begging for help. It does not belong here. Read the fucking sidebar.
No problem! I found a real developer anyway. ✌️💜 have a fantastic evening!
This library isn’t using proceaa forks though
So glad that was a video. /s
Saved so much time!
Doesn't even mention Slim, but does Yii and Cake. Good list. /s
Dont forget max post size on apache 
Criticising the contents of the spam link is a bit naive. Nobody did care to make it useful. The only intended reader for this post is Google. the author don't care about the contents on our opinion on it. 
Not that low unless you’ve been in the same job for 10 years. My first programming job at an agency was 75k. First proper job with 12 months experience I was hired on 100k. I get 3-4 recruiter messages a week trying to fill positions in the 90-100k range. I’m currently filtering jobs in the 110-125k range. This is “senior” non lead. You should be able to walk straight into a 70k job with little experience, 80k+ as someone reasonably competent and 90+ ad someone fairly competent. Then if you aren’t afraid to job hop you’ll find yourself north of 110 in a year or two
The biggest reason wages are lower in Adelaide is because people can’t negotiate. My last position they hired two of us in the same week for the same position. Other guy asked for 75 and I asked for 100. We both got what we asked for. The other guy had 3 more years experience than me too 
We're not using pcntl_fork, as this requires a lot of resources from the system. Child processes are standalone PHP processes. I'm sorry for the laravelism :/ I'll remove it: https://github.com/spatie/async/issues/62
You should definitely read the README. Also: thinking in parallel is quite something different than a normal programming flow.
Is there already a bot in works opening PRs to remove unused packages from open source projects?
Thanks for the autoload issue 🙂 &gt; Child processes are standalone PHP processes. Ah, so a new separate `php` interpreter is started?
some early benchmarking [https://beberlei.de/2019/03/23/playing\_with\_the\_php\_jit.html](https://beberlei.de/2019/03/23/playing_with_the_php_jit.html) &amp;#x200B;
Has xDebug integration in Homebrew PHP 7.3 been fixed?
I don't think that's always the case, I remember having issues with autocomplete filling in (visually) hidden fields. Though it's an easy fix, it's something you may not take into account unless you're come across the issue before.
Seems to work fine here. Xdebug itself is no longer installed via Homebrew but via PECL btw
Same could have been said to the nearly completely rewritten VM that went into PHP 7. And yet all was well and the uptake was spectacularly quick. Putting this into 8.0 is the correct approach. There will always people who don't trust a x.0 release and they can totally wait for 8.1 or 8.2.
https://gist.github.com/rybakit/bb551f962b706a9e08c995cf5ed9762f#file-msgpack-php_tests_bench2-php-log
It'd be really cool if this could also check non-namespaced code files too. We have a huge CakePHP 2.x app that also uses composer, but since Cake2 lacks namespaces none of the application code is in the autoloader. This means that the unused check looks just in our /src directory rather than the directory that the composer.json is in. &amp;#x200B; A huge clue was it was telling me that phinx was unused, yet we've got migrations going back to 2015 :D
[snuffleupagus](https://snuffleupagus.readthedocs.io/features.html) might be able to help you. This runs as a PHP module and can be used to limit/deny the use of certain functions. You need to define a rule set for your application and the module does the rest.
Frameworks are a liability. It will lock your code to one vendor. Also it limits your thinking. After a couple years developing from scratch you will end up with your own framework with your own problem solving ideas by inertia. &amp;#x200B; &amp;#x200B;
I’ll keep that in mind when I pretend to work today 
This is very useful functionality. At the moment I'm getting this functionality as part of [https://github.com/mediact/dependency-guard](https://github.com/mediact/dependency-guard). It's built to check if you are using dev-dependencies in your main code, but lets you know as well if you're not using a dependency at all.
Author here: Thanks for sharing it here :)
Hi. Yes kind of. First I wanted to interactively ask the user to remove packages that are unused. But to generate an automated PR sounds interesting :)
If you have your files inside any composer directive this should work. Currently the following directives are parsed: * psr-0 * psr-4 * classmap * files &amp;#x200B; Maybe you can file me an issue with a possible feature request. And I will see what I can do :)
Wow, didn't find this one after research. Tbh this is pretty cool. Could be another feature for mine as well ;)
I wish mods were a bit more active in this sub. The amount of blogspam is getting out of hand. 
&gt;Maybe you can file me an issue with a possible feature request [Hopefully this is ok!](https://github.com/icanhazstring/composer-unused/issues/11) I'm happy to explain more if required, though I might be a bit reserved with the answers to ensure I don't give away too much information. :)
Perfect, thank you! :)
Care to expand on that? Imo it's pointless to burden visitors with JavaScript for a deterministic operation like this.
I'm not sure I would mix validation and authorization logic. I also am concerned with how you are using dynamic parameters as the table and field name, since if some beginner passes user input to those it may result in an injection vulnerability.
And what sucks is these list are all the same. Nothing new or exiting.
Hello, we are a php development team that has created an in-house management application. We use Sage for product management and we use object100c.dll for document transformation. we can do this via a COM object but the connection is not stable. Do you have any advice or any other solution?
What do you mean with "not stable", are you getting errors that you fail to catch/handle?
oops, miss click 
This is why it's called "spam".
Oh boy, I was waiting to see what the trendy lists said to use this year! Codeigniter, here i come!
I don't think this will happen unless SPL adopts it someday. Should maybe be done at the distribution level. 
Generics, optional &lt;?php, Comparable
I don't think this is much different from a templating system being parsed, depending on how you use it - it can be cached and warmed up. I usually prefer doing things server side if it saves me an extra script, and I'll have much more control over it.
This will be incredibly useful for developers trying to shrink the size of their PHARs. I remember this being a challenge a while back.
I'm magento 1.x developer since 2012. Now I tried Magento 2 and has a frustrating experience. - Magento 2 is really slow - It is impossible to develop under Windows - Frontend is a pain - It is still buggy. IMHO It is not intended to small busineses where changes can be made quickly and for the affordable price. 
How to install Laravel 5.6 on xampp
It took 2 minutes to type out what could have been said in 15 seconds or prepared... 
No karma farming here, don't even try.
How to install Laravel 5.6 on xampp?
Good for Laravel Starter People.
I don't use it because I had to redo an app just to "switch" from 5.0 to 5.1, I had to adjust to a different folder structure (this one is silly but still annoying) and well, the app is still running on 5.1 and will remain there forever since I would have to go through 'migrating' from version to version (there is no LTS to LTS) to update it, and I'd rather rewrite the whole thing in Phalcon or Symfony. I mean.... [this](https://laravelshift.com/) exists, but with Phalcon, I just need to rebuild my container and I have the latest version. No need to pay any external service or [this](https://stackoverflow.com/a/52849618)
Well, actually, this library is using symfony/process, which uses proc\_open to start new processes, which does a fork on UNIX systems: [https://github.com/php/php-src/blob/master/ext/standard/proc\_open.c#L803](https://github.com/php/php-src/blob/master/ext/standard/proc_open.c#L803) 
Both. Laravel community gets instantly upset as soon as you point out this.
&gt; Active in these communities: r/FreeKarma4U Why I am not surprised? Again, no karma here. Go farm elsewhere. 
Our client: "Hey, we use PhpSpec and PHPUnit tests for very similar testing. Can we use just one of them?" This is how we did it. 
/r/PHPhelp &amp;#x200B; But, you should just own up and say you are not comfortable making the changes, and they should look to hire a competent PHP contractor.
I want to say they're not capable right now, but as the philosopher Markiplier once said **You right**. Also, I should post this on PHPhelp?
Thanks for sharing. How does it compare to ComposerRequirementsChecker?
Look into doing a login system that gives then permission to add/remove jobs on the page. You can do that by creating a session but you would also need a dB to connect to. If you don’t have that option manually logging into the website and changing the page would be the best bet. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/phphelp] [How do I create an admin-only menu to change a section of a page?](https://www.reddit.com/r/PHPhelp/comments/b5d4xz/how_do_i_create_an_adminonly_menu_to_change_a/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What Mr Pablo said. This is one of those jobs that looks easy, but is actually really hard to do well. And by "well", I mean "couldn't be hacked by a 10 year old in 30 seconds". You need to create a page that retrieves a specified record from the database, presents it in an HTML form so that it can be edited, and then pushes that record back into the database when the user hits Save. Relatively standard stuff for someone who knows PHP and databases. But there are huge security implications, if you want to ensure that a) only legit admins can edit the records, and b) no one can use database injection attacks by editing the record to contain something nasty. For a start, how are your admins going to log in? Presumably you'll ask their username and password? Where are you storing this, how do you register new admins, and how are you encrypting the passwords? Next, what if an admin tries going straight to the "submit" URL without going via the login page? Will they bypass the login process and, if so, what are you going to do to stop this? Seriously. Own up and tell them you can't do it. Doing this job from scratch would be a pain. Doing it for a company that's going through a rough patch, the code for which was probably written ages ago by someone who's now left and who possibly didn't even know as much as you, and which is hosted on Yahoo, is going to be something that you instantly regret taking on. But it's also a handy get-out, if you want it. Take the job, look at the existing code, and then say that it's in too much of a mess for you to understand. Shifts the blame/guilt to them rather than to you. &amp;#x200B; Been there before. Lots. Shout if you want to borrow the t-shirt.
Yeah, probably. I'll finish making the page section itself. But I'll tell them to get someone else to make the edit menu. Cheers. I'm an artist, man, not a web dev.
Thanks for making it!
We're using https://github.com/maglnet/ComposerRequireChecker to check for soft dependencies, but it doesn't have the reverse functionality. I didn't know about dependency guard. Thanks for sharing!
Nice :) Don't forget to have a look at the patreon if you use this plugin: [https://www.patreon.com/kalessil](https://www.patreon.com/kalessil) You will have access to a whole new set of bug-saving inspections!
Seems like overkill, and would be a major headache housing all the DB (running maintenance), and the connection logic behind it all.
Any major differences in finding unused dependencies compared to [https://github.com/Insolita/unused-scanner](https://github.com/Insolita/unused-scanner) or [https://github.com/mediact/dependency-guard](https://github.com/mediact/dependency-guard)?
To me that sounds like a 'premature optimisation' which might in worst case burn all your energy on non-functional aspects of your app instead of providing better features to customers.
This approach isn't widely used simply because it isn't widely demanded. Yet it is called a multi-tenant application and is quite used when justified. It's hard to tell from the made-up description whether it would be justified in your actual case, but I feel it seems so. 
Connection logic should be fairly simple. You connect to the common database, look up current user and what is his (his company's) database and then connect into that for the rest of the script like in any other app. But taking care of the db would have to be automated, especially changing the scheme of the db. But there are already tools for that, shouldn't be that hard to run them on every db. 
&gt; multi-tenant application Thanks, I'll read something about it. There are no more data to consider, I don't have a real problem I'm trying to solve, just an idea I considered interesting.
&gt; premature optimisation In a sense it is, but I think if the theoretical app would be built from scratch upon this it would vastly simplify the rest of the development. 
Where is "addEventListener" and "stopPropagation" etc.? Why is the dispatcher a separate object at all? As usual, I can't fathom the logic behind any of the recent PSRs.
It seems like you would just be exchanging one set of problems for a similar set of problems. Every request would be utilising two database connections (potentially more, if you wanted to support single sign-on across multiple companies) and instead of restricting queries to the current company, you'd be dynamically switching the database connection, so you're really just moving the same basic logic to a different place. &gt;there wouldn't need to be as much checks about user access rights. I'm not sure this follows? You'd still need to check for the same access permissions, regardless of whether you're switching based on a database connection or a company ID column. On the other hand, there _may_ be security advantages to using separate databases, depending on how you design the system, especially if you need to comply with at-rest encryption requirements.
I don't care for them because it seems like it's putting everything into a box of un originality. Great for professiobals who need to pound out code fast and ha e it work, but I've seen quite a bit of hate towards people who don't follow psr, which sucks.
Boring, well-designed reliable interfaces would've been awesome, actually. But the PSR-s honestly surprise me with how arbitrary and simultaneously under-designed and over-designed they are. For example, what is even the use case here? They didn't bother to standardize any of an event's structure, save for whether it's "stopped" (without a method to... stop it) etc.
Rather than approaching it from a performance perspective... For security reasons, different companies *should* be using completely separate databases. There should not be one shared database for all of their users, then separate databases for the rest of their data, like you're describing. Now, I'm saying should, not must. This is something to take up with the person who will be talking to the cops when Acme Corp's data is accessed by Evil, Inc., such as your CTO, CIO, etc. Keep in mind that the company officer may or may not be handcuffed when they're talking to the cops, depending on whether you, as the developer, were obviously negligent or not. (Also keep in mind that if you freelance, you're *the* company officer whether you have a business license or not.) That officer should conduct (delegate) a risk assessment, but it's quite trivial to properly separate client databases on web applications. One of the most popular ways I've seen in payroll tracking apps is, the client's employee will specify the name of the company when they're logging in, or the employee will go to a URL that somehow specifies the company, i.e., [example.com/acme/](https://example.com/acme/) or [acme.example.com](https://acme.example.com). &amp;#x200B;
&gt; Where is "addEventListener" The PSR doesn't specify where the event will be attached. &gt; and "stopPropagation" Here: namespace Psr\EventDispatcher; /** * An Event whose processing may be interrupted when the event has been handled. * * A Dispatcher implementation MUST check to determine if an Event * is marked as stopped after each listener is called. If it is then it should * return immediately without calling any further Listeners. */ interface StoppableEventInterface { /** * Is propagation stopped? * * This will typically only be used by the Dispatcher to determine if the * previous listener halted propagation. * * @return bool * True if the Event is complete and no further listeners should be called. * False to continue calling listeners. */ public function isPropagationStopped() : bool; } 
No... it's not here. There's literally just one method here, and it's querying status, it's not changing it.
If you paid by the hour, that's a very good thing. With a system that's being used, you will have with till the end of time time. Basically, you trade off some thinking at setting up the project (a few extra WHERE when the user logs in) with a ton of duplicate work in the future. And when you pass the project to a new developer and end up with 20 differently named fields in different places that do the same thing, you will have endless conversations with " this works on my box " or for "x client". Then you figure each account should have is own code base, so it won't keep breaking on every update, account you end up with 50 different code bases. And how will you deploy those? Easy, set a VM for each. And pay the extra administrator to set that up. And how do you release a new release? Opsy, forgot that one guy that never called in 3 years but always paid his invoice on time.... It's a very very bad idea in production, UNLESS all your clients are very different, or you have no choice since they want to host or, and pay you you for the maintenance... 
My problem with most of the most recent PSRs is that they are championed by people who are part of a clique. if you are not inside the bubble they reject your view point. What made PSRs great are just a bunch of people coming together to solve a problem... the recent ones haven't done that at all.
Since an Event it's an arbitrary class, you can make this class implements the StoppableEventInterface and return true or false according you business logic.
Using the class name as the event name is a pretty bold choice. I can certainly see some logic behind it by using ::class to forgo the need to define constants, on the other hand, this is the kind of thing which screams out for needing generics, and we don't have them yet: ```php $this-&gt;listen(function(EntityUpdateEvent&lt;MyEntity&gt; $event) { $event-&gt;getEntity(); // is MyEntity }); ``` I suspect this PSR might be one of those which ends up too convoluted to be used. The "things the listener provider MAY do" leaves so much room for complex interpretation that it *almost* feels like for it to be useful, someone is going to have to write *another* standard on top of it where the ListenerProvider itself is comprised of multiple listeners which all act as hooks and voters for deciding which listeners get called and in what order. Personally, for now, I'm going to keep me own internal event listener code to be string identified and support multiple arguments with generic event objects an extra arguments: ```php $this-&gt;listen('entity_update', function(Event $e, MyEntity $entity) { ... }); ``` I can only see moving away from that once we have generics. 
You're still not understanding my original remark. stopPropagation() doesn't return anything, it stops the propagation (as the name says). Why on Earth would you have a standard method to query if propagation is stopped, and *not* have a standard method to stop the propagation? I mean, stopping it is literally the more important part.
Ahh I'm a fan of psrs I have a general, but this one is too loose to be useful. No listeners definition, no way to stop propagation,no interface for events. It doesn't give anything useful. 
The Event class is arbitrary, can be anything, even a class that encapsulates an entity, as you point in your example.
How to do you think stopPropagation works? If you don't know, stopPropagation sets an internal flag telling the Listerners loop if should continue or not. Exactly the same way they are specifying: &gt; A Listener Provider is a service object responsible for determining what Listeners are relevant to and should be called for a given Event. 
Honestly it's amazing to me you can't understand what "stopPropagation() does not exist in this interface" means.
That's assuming I'll allow each customer to have their own codebase. There's a reason I picked (simplified) Slack as a example - everyone is using the same slack as everyone else (I presume that there's some A/B testing and support for not-yet-updated clients but that's different problem to tackle). I work in a company that has a product that's customized to each clients needs where situations like you're describing happens. But in my example there won't be anything different for "x client". There will be only one product and only one database schema - it will just be copied into several instances. I am well aware that customization will be a path to hell but that's beyond my idea.
&gt; one shared database for all of their users Users will be separated in their own respective databases as well. The master database will be just instead of one big switch-case to load the correct database where the user would be authenticated against. &gt; if you have a client with completely unique database needs That's something that shouldn't happen because it will necessarily lead to different version of apps and one product is now basically split in two. 
&gt; you'd be dynamically switching the database connection I wouldn't. First connection is just one time thing that's gonna get closed right away. For the sake of the argument it can be entirely replaced with switch-case statement (it just wouldn't scale in that case) &gt; You'd still need to check for the same access permissions I wouldn't, that's the point. Once I establish connection to the correct database then there's no way to load data from another database. I cannot forget to add check for a company id because there will be nothing to check. 
I do not understand the comments here, AFAIK this is a common &amp; very simple/reliable way to handle multitenancy. It brings isolation &amp; horizontal scalability (by dynamically resolving which master instance is hosting the data of the current tenant). &amp;#x200B; \&gt; Also making sure that all databases has the same schema would be a pain in the ass. At the core this is the same tooling as for a single schema/host, basically you just have to loop over tenants and track somewhere the status of each tenant db/schema. &amp;#x200B;
go to [anywordpress.com](https://anywordpress.com) here you can learn how to make a custom wordpress plugin 
https://imgs.xkcd.com/comics/standards.png
Theres always going to be customers with exceptions and money to pay for those exceptions, and then you have to live with them. Also, there's always a customer bigger than another, so when you have to move to either bigger or more than one machine, you have alot of extra work do so if they are all on different database. It's much much less of a hassle to do those extra WHERE clauses, or object-&gt;hasAccess() than set up a whole new replication/backup/ha system for each customer, expecially since most of them end up being very small. As a throw away project, each client with his own db works, but if you need to maintain it a few years... Well that's the reason you really see it in production. Ps: Uber has a database cluster for each city I think. Mainly for speed ( closer to clients), and because NYC requirements are really different than a small town with 10k people. And also, more importantly, each city is not really a client, but something they have 100% the control of to define. Normally it's very rare you have that control over random clients and their requirements.
&gt; At the core this is the same tooling as for a single schema/host, basically you just have to loop over tenants and track somewhere the status of each tenant db/schema. Yes, this hardly unsolvable problem, I was thinking more along the lines that I can't just log into phpmyadmin and change the name of a column or something like that.
But if the committee is proven to continue to do the right thing let them continue to do the right thing. I see no harm in having 14 standards. I see more harm in there being 500 standards because the open ecosystem perpetuated openness and couldn’t agree on a select set of standards.
Only play with DB migration facility like doctrine migration. All schema changes should be scripted, replayeable &amp; reversible.
&gt; Theres always going to be customers with exceptions and money to pay for those exceptions, and then you have to live with them. If that would happen then I would have to split the app itself into it's own version otherwise I'm gonna run into "if === 'bigCustomer'" mess. Anyway, this kinda rebuffing the idea because it doesn't solve the use case I'm not trying to solve.
I suggest you to read the whole PSR including the meta: https://www.php-fig.org/psr/psr-14/meta/
Like others this sounds so abstract and generic. I think there should be a new rule – PSRs should be based on solving a set of specific situations with the hope the set is representative. Instead of discussing things philosophically and ending up with... this. 
By dynamically switching the database, I mean that at some point in the request execution you need to connect to the database specific to that request. As you would always be restricting the data to a single company, it would make as much sense to implement this constraint at the database access level, rather than on each individual query, with un-constrained queries being the exception. You can then thoroughly test this behaviour and be sure that queries are always restricted. All of these approaches to multi-tenant architecture have their trade-offs, the biggest one when using a database-per-tenant model at scale is cost. You should be able to find a lot of good discussion about the advantages and disadvantages of each approach by Googling "multi-tenant databases".
Hint: there is a section where they discussed your so desired 'stopPropagation'
Yes. And everything about this section fits my point precisely. “Should we do it this way or that way or the other way? Screw it we won’t do it in anyway - more flexibility!“ If I wanted flexibility I would skip using a standard. The purpose of the standards is to set a standard. Not to offer us a nearly (or completely) empty interface and say “so flexible!” They couldn’t even decide if events should be immutable or not for fucks sake. 
To perhaps explain my comments, I wasn't trying to recommend against this approach, just explain that the specific advantages the OP listed aren't huge advantages over a single database multi-tenant systems. The main advantages of a multiple database setup are the ones you mention, security through isolation and scalability. I've never found it to really simplify things though, it ends up being roughly similar in complexity to a single database, often with greater systems maintenance burden, depending on the system.
As if unsupported software were so uncommon in the real world :/
Yeah, I agree. They defined a standard for the Event Dispatcher. It's not up to them define how my Event should be. And I think the word it is not _flexibility_ but _interoperability_.
The form is on the home page with a submit.php form action. The submit.php page is just raw code to process the data, assign variables, and then forward the client to a thankyou.php page. I cannot get the thankyou.php to render any info by using the below code. I guess that the info isn't being assigned to the correct variable. Please give me an idea.. &amp;#x200B; &lt;?php echo $_POST['name']; ?&gt; &amp;#x200B;
You could use a script to replicate the database schemas 
totally forgot about this lol.
idk at some fundamental level I just accept that I need wrappers and adapters.
The data submitted in the \`$\_POST\` variable is only available to the page it is posted to. So in this case you can only access \`$\_POST\` in \`submit.php\`. In order to access it on another page you need to store the data somewhere. The likely place here would be in a session. You need to start a session in both files using \`session\_start()\`, then you have access to the \`$\_SESSION\` variable that store can store information for the user across requests. &amp;#x200B; submit.php &lt;?php session\_start(); // do the processing here $\_SESSION\['name'\] = $\_POST\['name'\]; header('Location: thankyou.php'); ?&gt; thankyou.php &lt;?php session\_start(); ?&gt; Thanks &lt;?php echo $\_SESSION\['name'\] ; ?&gt;!
Awesome! It’s one of the best phpstorm Plugins 
&gt; By dynamically switching the database, I mean that at some point in the request execution you need to connect to the database specific to that request. But I'll do that just once, I won't be changing it back and forth. So it's not really that different from regular connection to the database, just the database name wouldn't be hardcoded in some config file. &gt; As you would always be restricting the data to a single company, it would make as much sense to implement this constraint at the database access level, rather than on each individual query I probably don't understand what you're trying to say. Because it looks like the approach I'm suggesting. &gt; I've never found the multi-database approach to really simplify things overall, both methods end up having similar complexity, just in different areas. If all companies and their data are stored in a single database then almost every row must belong to a specific company. And with every select I make I must think of that. With my approach I just pre-select the company for the entire lifetime of the script execution shortly after its inception and wouldn't need to worry about it at all. 
I stopped following this PSR when it became painfully clear a new dispatcher was being created versus standardizing on how the ecosystem did things, but since the dispatcher lacks an EventInterface and accepts any arbitrary object, having a standardized method to tell any event to stop propagating makes less sense. Since the design seems to be one listener per event and less oriented toward listener re-use (or, opinionated toward make your own interfaces for your events), how an event internally is signaled to stop propagating is less important than something on the outside (like the dispatcher) being able to query if it has stopped. Would’ve been better to just dads stopPropagation to the interface, but since they bucked every other existing convention…
We have used this approach for a number of years. We have a relatively small number of tenants (under 30) but each one generates a very large amount of traffic. Pros are that - it keeps the app itself simple - allows a resource-hungry tenant to be moved to its own server - aside from a very tiny amount of switching code (database name is the same as subdomain used to identify the tenant) there was no work to go from one tenant to two - faster queries - we can give a tenant direct access to their data with simple DB user permissions There aren’t many things I would say are cons: - more difficult to do aggregate queries across tenants, but this can be done with a secondary reporting schema if you need - database migrations needed a little work to loop through tenants, but this is nothing
&gt; I probably don't understand what you're trying to say. Because it looks like the approach I'm suggesting. Unless you're writing SQL queries by hand, I mean that you would configure your DBAL to always enforce a `WHERE tenant_id = {x}` clause on any query, unless explicitly told not to, so that you don't need to provide it every time you write a query.
Why not just persist the Data to your database? This'll allow you to do validation at the same time, and it'll remove the need to mess around with sessions and such as you can just hold one session for the user ID and then pull from the database any information relevant to that particular user. It may seem like a lot of hassle having to read and write to the database for potentially a simple piece of data, but honestly of your project is set up with a good API tool and decent functionality it'll be a breeze and a whole lot easier.
We have weak genetics at the moment but in a weird way with the the type system forcing it using interfaces. So it would look like this: &lt;?php $this-&gt;listen(function(EventInterface $event) { $event-&gt;whatever(); $event-&gt;customClosureCallback(); }); 
What "problem" does this PSR solve? This seems like needless definition of a complex pattern that didn't need a catch-all solution.
Ahah that makes sense. I'll try this in a few minutes. 
This feels like a troll post. There were threads about async/await on this subreddit within the last few weeks. There are a handful of PHP extensions/libraries that add this functionality. It is something that PHP will get in core eventually but (within the context of PHP) it's not mature enough for core adoption. You can look up if it's been discussed by internals here: https://externals.io/
No troll, seriously curious. But I'm not surprised /r/php reacts like this... AFAIK no extension adds new keywords, or? Thanks for the link!
&gt; I'm not surprised /r/php reacts like this I am not r/php I am one user. I'm sorry you took my post offensively. I just thought that doing a basic search for cursory research seemed pretty obvious.
Who determines the "right thing" in this case?
That's where meritocracy has its purpose. Get into any organization early and you can become part of its keystone otherwise you have a long road of demonstrating your abilities to earn that place.
A method like `stopPropagation()` stems from being accustomed to procedural programming. You are determining an object's state by manipulating it from the outside, in this case with just a setter. It is unflexible. The point of OOP is polymorphism and secondary to that letting objects manage themselves (or even be immutable). With a method like `stopPropagation()` you _exclude_ these possibilities from what could be done. It really would just be bad design.
&gt; Hack added them long time ago, and I therefore kind of expected that PHP would eventually follow suit I don't think that you can really assume that if hack does it, PHP will follow suit, even eventually. Hack has short closures for ages, php is only just adding them and syntax is quite different. The languages solve problems in different ways, divergence is to be expected.
&gt; "How do I do X?" "Why don't you do Y?"
I've lost track of how many libraries I've used that have underwent entire rewrites (oftentimes even changing names) just for the sake of PSR compatibility. I'm so over it. 
They should rather push PSR-12 than more interfaces.
&gt; AFAIK no extension adds new keywords [Wow that was really hard](https://github.com/concurrent-php/ext-async)
It's like a shit version of React or Amp.
&gt; The extension provides Task::async() and Task::await() static methods that are implemented in a way that allows for a very simple transformation to the keywords async and await which could be introduced into PHP some time in the future. So the extension does _not_ add those keywords. What's your point?
Sure, but the advantages are so big. That's why I expected it. Anyway, now I know better.
If, as in the hypothetical from your original post, you were running a multi-tenant app with other companies using it, there should *never* be a situation where you are using phpMyAdmin to modify the database. For a start, phpMyAdmin shouldn't be on the server in the first place. Beyond that, your database changes should be orchestrated using some form of migration script, so that every change can be tracked, applied and if need be, reverted. This holds true for any application, but is particularly true with a multi-database solution where you want to be positive that the schema is identical across each database.
Fabian, is that you?
Nice
Yes, can confirm. I use Ultimate basically since it's out and it's really awesome! :)
haha, no. https://github.com/geggleto
You can stop propagation with * StoppableEventInterface*, this is stated in the PSR. However I do agree the dropped the ball not providing an interface for Listeners. “Any callable” is very open ended and IMO I would have preferred an interface with a required *handle* function or something similar. 
The FIG is stuck on some level because the initial goal was to standardize the way things had been done. It's now trying to stay ahead of new things. I think they're being too "greedy" (in a regex sense not a moral sense) on this.
Never seen that, there’s *so many* rules I love it. 
Weird but nothing is happening. In my submit.php page, I learned that session\_start(); needed to be at the very top of the page. I moved it up to the top above all my html and nothing happened. The fields are just blank and the data doesn't get passed to the thanks.php page. So I made a new blank page named thanks\_test.php and followed this and still nothing is being passed to the new page. It doesn't make sense. I am posting my code just in case someone could tell me where I did wrong. &amp;#x200B; &lt;?php session_start(); $_SESSION['name'] = $_POST['name']; $_SESSION['phone'] = $_POST['phone']; $_SESSION['date'] = $_POST['date']; header('Location: http://www.mysite.com/thanks_test.php'); $name = $_POST["name"]; $email = $_POST['email']; $phone = $_POST['phone']; $gsname = $_POST['gsname']; $date_sub = date("m/d/Y"); $time = date("h:i:sa"); $date = $_POST["date"]; // Function to get the client ip address function getUserIP() { $client = $_SERVER['HTTP_CLIENT_IP']; $forward = $_SERVER['HTTP_X_FORWARDED_FOR']; $remote = $_SERVER['REMOTE_ADDR']; if(filter_var($client, FILTER_VALIDATE_IP)) { $ipaddress = $client; } elseif(filter_var($forward, FILTER_VALIDATE_IP)) { $ipaddress = $forward; } else { $ipaddress = $remote; } return $ipaddress; } $ipaddress = getUserIP(); // set IP address and API access key $access_key = 'key'; $url = "api.ipstack.com/$ipaddress?access_key=$access_key"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $output = curl_exec($ch); $api_result = json_decode($output, true); $lat = $api_result['latitude']; $lon = $api_result['longitude']; $zip = $api_result['zip']; if (isset($email)&amp;&amp;($name)){ $open = fopen("formdata.csv", "a"); fputcsv($open, array($date, $name, $email, $phone, $gsname, $date_sub, $time, $ipaddress, $lat, $lon, $zip)); fclose($open); } //email to me to tell me there was a submission $to = "myemail"; $subject = $name." registered for the workshop on". $date." at ".$date_sub; $headers = "From: ".$email; if (isset($gsname)) { $msg = $name. " and ". $gsname ." will attend the workshop on ". $date ." at AV ROOM."; } else { $msg = $name." will attend the workshop on ". $date ." at AV ROOM.";} mail($to, $subject, $msg, $headers); ?&gt; and the thanks\_test.php &amp;#x200B; &lt;?php session_start(); $name = $_SESSION['name']; $date = $_SESSION['date']; $phone = $_SESSION['phone']; ?&gt; &lt;?php echo $_POST['name']; ?&gt; &amp;#x200B;
You return false from that method to stop propegation, I'm confused as to why you think you need a stopPropegation() method, who would be calling that?
I find they work reasonably well still so I use them on all my forms. But yeah, reCaptcha v3 has zero barrier for users, so there's really no reason not to use one these days.
You are redirecting the page before anything else can process. Move the redirect below all the other code. In your thanks_test you shouldn’t be echoing the POST again because you didn’t post to that page so it’s non existent. Finally you can just echo the session variables instead of assigning them to another variable but that’s up to you. 
It seems like a notable number of architectures are aiming for the "invoke object as a function" paradigm these days. Instead of just calling a specific method designated by an interface everything wants to use, or allow the use of, `__invoke` instead. Controllers, Event Handlers, Message Queues, Formatting, etc.
I used to be like that, just get the code, reference some libraries, not even knowing what composer was, etc. It all works pretty good, until your small 10 minute script gets picked up and you have to expand it. Then you have to rewrite it because you will not be the only developer working on it, or may be someone will want to use it for another project. Manual maintenance of libraries is a mess. I was given this project last year which didn't follow any standards. It is a huge mess. It started like that, just a "quick script" to send messages between users.
Oh for sure, there's always a chance something you write will end up being more. But it's just so common to see people get so mired down in the details that they could have manually completed the task they wrote their script for before they even finish the script - if they even do at all.
I will say that, if you're practicing development and learning to code, yes, write code so awful that it makes the Flying Spaghetti Monster look like a well ordered lasagna. Get a friend to go over the code with you; just make sure to backup the database, 'cause if they're halfway decent, they're going to invite little Bobby Tables to help give you a well deserved lesson. However, I'll also say that if you're even so much as practicing authentication, never practice with plaintext, MD5, or even try to implement some homebrewed SHA stretching routine. At a *minimum*, use real PBKDF2. Better yet, use the built in password function, and ideally set up the costs based on the time it takes your own server to verify a password (don't just use the default), and use one of the Argon2 algorithms. (No, I'm not going to tell you which. You're the one developing it, so you need to do the research so that you can understand what you're implementing.)
And sometimes you gotta refactor, its really hard (at least for me) to nail something the first go around. You also learn a lot through refactoring. But I get your sentiment. I wrote a proof of concept exploit of our admin system showing I could escalate permissions. Think I cared what the exploit code looked like? Also okay to hack together a proof of concept if you know that you'll have to refactor it down the line. It really all depends, not a black and white thing IMO.
This sub is ruthless on down votes. I think this is a fair question.
Wasn't the point of PSRs that it was for a clique, and not the public? The group is founded to promote interop between member framework makers, not the general public or PHP at large. I think the problem is people started thinking these standards are for them.
Was nervous I might need to find new hosting 😄
I mean I am a maintainer of a framework; so I feel like this applies to me :P
You're right on your recommendations but I had the redirect at the very bottom and on the thanks page I was using $_SESSION['name'] but still not getting anything. 
Might be my limited thinking.. But when would you use a tree structure in php that you would gain any performance over a nested assoc array? And for that matter, since php tends to not maintain state, I'm not sure I would reach for a tree at all 😕 
Are you a member of the FIG? Cause it's meant just as an effort between MEMBER frameworks. ie, the clique. Pretty sure this is by design. https://www.php-fig.org/personnel/
naw someone else sits on fig technically.
amen.
... no idea. Interoperability of event buses? 
as with almost everything in dev land; "the right thing" ... all "depends" on the situation. 
Thanks! 😛 
Great comment. The issue is not really PHP but more of JAVA. Apart from deadlocks &amp; KO js, I think the platform is good although too complex
The listener
Amen! 
Please add Knockout JS. Its a big pain in the ass
&gt;when they're asking feedback about something that runs locally TBH I don't recall any of such requests.
Let's be honest though, most of the type of scripts OP is talking about will never be used for anything other than the exact purpose they were once created for, and will probably run only a couple of times. If it isn't, it's a good idea anyway to take another look at it and refactor or polish the code. But for stuff like generators and quick scripts there is no need to create a full blown package just in case it might be used somewhere else. It's probably time wasted on the small chance you need the exact same functionality again and save yourself a few minutes. I think a lot of people don't really look at the costs and benefits anymore. If you just need a quick script to create some database entries to test an application for performance, chances are you don't have to bother with neat, clean code. The goal is to test your main application, not to have the perfect little record generator. Time spent on the application itself is usually far more valueable than time spent on perfecting tiny scripts which don't really matter. Having said all that, it is still (obviously) best to not just write garbage which nobody, including yourself, will ever be able to understand a week later. Keep all the best practices, conventions and all that in mind and apply when usefull, but consider whether or not the extra time required to perfect your little helper script is worth it.
PSA it’s ok to write code. Except anything finds it’s way into production lol
That last part is a slippery slope. Only if you absolutely know you can refractor it later, I've seen production code that was awful where people went "we'll do it right later" and then later never came. I get that you have the right idea, but you want to restrict your quick and dirty code strictly to stuff that you and only you will ever use or maintain. There are fewer instances of this than you might think.
Writing unit tests, using PSRs and composer JSON files is honestly not what "secure, organized code" means anyway. 
I completely agree here, but I would add that this goes for stuff that nobody else will ever use. A while ago there was a person here who rolled their own framework and posted it on here, inviting newbies to learn about frameworks with his little thing. And it was horribly insecure, literally textbook SQL injection stuff, and when confronted the guy went "sheesh it's just for learning!". The point I'm making is that you're absolutely right, but that specific guy was not open to criticism and did not realize that his thing might end up in production somewhere. Do I agree with you 100%? Absolutely but this is a PHP sub so it's frequented by beginners who post their code and I think it's our responsibility to tell them: you need to know that your works should not see the light of day on the internet before you read up on SQL injection and PHP password hashing functionality. The way I see it, it's not about being a pedant and correcting everything (speaking for myself here), it's about educating people who are reading along.
I really shouldn't read this sort of thing at 3am, I can see where you're coming from now. I think a method like that is outside the scope of this PSR but the fact it is outside the scope, really makes me wonder what the purpose of this is at all.
It’s also OK if it’s procedural 😇
&gt; A method like stopPropagation() stems from being too accustomed to procedural programming or bad code in general. Ah the "your question is bad and you're bad for asking it" retort. The PSR itself concluded events can't be strictly immutable. Go tell them how accustomed to bad code they are. &gt; Shared mutable state. It is unflexible. The point of OOP is polymorphism and secondary to that letting objects manage themselves (or even be immutable). With a method like stopPropagation() you exclude these possibilities from what could be done. It really would just be really bad design! I can see you've heard these words, but I don't think you understand what these words mean.
I’ve worked with similar systems in the past and the one advice I have is to get your tooling up to par. Make sure you use proper database migrations and have a good look into credential management. Yes, it does sound like a premature optimization, but there is nothing wrong with thinking ahead. 
No one wants to read your shit Medium posts..
Just don’t show it to a boss or a client. “Seems to work. Ship it. Can’t believe it only took you half a day. You must be one of those 10x devs we hear about.” 
Down voting my comment and saying I'm not help helping is not true. The title asks how you pass data from one page to another. A key part of ensuring the security of your site, however small, is ensuring the Data itself is clean and valid. Passing into a database, doing validation and using input filters will allow him to control the structure and quality of the Data. Far too many people pass sensitive or a lot of data in these 'global' variables and it can get messy and sloppy. I advocate for the cleanest solution that allows for a safer practice. I don't know all the Data being used here or the context of the project. But all that people have done is say that to pass data is to use these variables. That's not true. There is another option, one with plenty of benefits and that's what I presented. 
The author is just venting on how they **hate** being held to professional standards of software craftsmanship and are looking for community justification on a case where they think it is "just fine" to be sloppy and lazy. Fact is, the only time you can write crap code and be semi-professional about it is when it's YOUR OWN non-employer code that you're NOT being paid for. Look at my github repos https://github.com/hopeseekr and you'll see several projects that take shortcuts over the decade or so: https://github.com/hopeseekr/MyMirror but then you also see truly professional code when I release it on Packagist: https://codeclimate.com/github/phpexpertsinc/RESTSpeaker DO NOT give non-professional hackers much slack! When we hold each other to accountability, all of our lives are better and the script kiddies eventually get "fed up" with being held accountable to higher standards and go find more... in trouble businesses to wreck further.
That is the operational mantra at where I am currently!! The average class size is 4,500 lines. The worst class has 9,558 lines and a **1,252 line constructor!!** The devs, oh how they **rail** against me because I won't let them add more code to methods that have more than 400 lines of code (make them put the code in a new method) or classes with more than 4,000. It's all just laziness, immaturity and believing they're the shit just because they've been coding terrible PHP for 10+ years. People around here railed against using Slack "Skype is good enough!" then about PRs "We will not make deadlines if we have code review!!" about everything, really. Everyone loves to say how they have 15 years experience but didn't know what PhpStorm was, had never heard or used composer, and the files were stitched together using a legion of `require_once`s, many times included inside methods :o Not a single namespace and I kept hearing horror stories about how relatively good devs would start working and bounce in a week or two... no wonder! How do you get into 2019 and not even know about composer???
You need to buy "The Clean Coder" and think really hard on whether you want to dedicate your life to becoming a code craftsman. If not, no worries, but please switch to frontend JavaScript. Less damage can be had there.
If you need "quick scripts", then your project is already probably fucked, and probably due to people just writing a bunch of "quick scripts" all cobbled into one another that they call "OOP". That's what I experience.
Keep in mind though that if this "insecure, unorganised" thing is actually good and actually useful, there's a decent chance it'll end up actually being used by others and could end up somewhere it shouldn't.
Hi. Already answered this on twitter and kind of yes. While the \`unused-scanner\` uses regex mine is using \`php-parser\` to better reflect certain differences in code style - so should be more robust. Also i decided to go with it as a composer plugin for easier installation. Besides that, the output seems to be the same. As of \`dependency-guard\` i didn't find this during my research. So some feature of it might end up in \`composer unused\` as well. :)
The major difference is the installation. As I found some people can't or won't use any \`\*.phar\` installation. I don't know why, but you know ;) And it seems a bit configuration heavy. That is something I wanted to avoid. So that the tool is pretty much a no-brainer. But the implementation seems pretty identical
A use case I didn't think of \^\^
You're welcome. It's deserved.
&gt; A method like stopPropagation() stems from being too accustomed to procedural programming or bad code in general. That's a non-argument. "Your opinion is invalid, because I said you like bad code, because I said so." &gt; The point of OOP is polymorphism and secondary to that letting objects manage themselves (or even be immutable). With a method like stopPropagation() you exclude these possibilities from what could be done. It really would just be really bad design! Non-sense. An interface is a primary tool of polymorphism. &gt; And if you don't agree you could still just implement such a method. I don't think you understand the purpose of a standard if your point is "everyone can make their own version". The whole point of a PSR is you can take *anyone's version* and interact with object, the basics and essentials at least, in *the same way*. If I wanted to do everything differently, I wouldn't use a PSR. &gt; There is absolutely no point letting a non-essential method A method to stop the event on a StoppableEvent interface is "non-essential". All right, dude. All right.
The point of this PSR is not to dictate how the events are created by or talk with the rest of your application code. It is to define how the event dispatchers communicate with events.
Bright people who discuss things. It's not like you couldn't have discussed that with them. There are Google groups with incredibly long chains where everyone could have participated.
It doesn't allow for the same kind of defining the number, types and order of arguments as for a named method in an interface. Which makes it inferior.
Is this the plot for the new M. Night Shyamalamalan movie?
No, it's not OK. When you know your shit, it's not a problem to write a secure organized code as fast as you would write a shitty sketch. For example, using prepared statements is actually easier than using direct substitutions with escaping. One should just know how to do it properly. The only problem here is the vicious circle of ignorance, when people who don't know how to program are teaching other people how to program. Being scared by the proper ways themselves they intend to teach in 2 phases: "first we will teach the shitcoding and then show the right way". In fact, if you will start teaching beginners the right way from the beginning, there will be not a single problem with writing secure and organized code. Because - again - it is not more complex than your usual shitcode. Which is not actually simpler but just more familiar. And here we are coming to the media effect. You are complaining about people who jump down people's throats. This is because a shitcode is posted openly, adding to that vicious circle mentioned above. Being asked about privately is one thing, being posted on the media such as Reddit is another. People tend to read what is written and take it away. So yes, we will keep jumping down people's throats until they stop to show off that awfully outdated shitcode which many still take PHP for. 
It's like defining a standard for roads without ever knowing or deciding what's going to drive on them.
No, I'm not saying those scripts are the project, they're just needed for say generating database records, dumping some stuff to a .csv, all for your own an local use. Those scripts do not need to be the crowing glory of all programming, they just need to get a job done quickly once or twice and then no longer needed. Correct me if I'm wrong, but that's how I understood OP.
It's like defining a standard for roads without ever knowing or deciding what's the size, shape and function of whatever's going to drive on them.
Why don't you set the post location of your form to the submit.php page? Then that's where the data gets posted to, you can parse it and then redirect to your thank you page.
He's very obviously not asking a general question - there's a full explanation to his issue in the comments. You're not answering the guys question you're telling him to employ a completely different approach to solve a problem you don't know he has. Maybe he specifically wants to learn about posting form data. In which case your solution is the furthest from helping. I never said what you suggested is wrong. It just doesn't answer his question. 
Have you tried meditating? 
I salute to this, you are not alone :D, most of this can be enforced with static analysis tools like phpstan. Guess that things like "Scalar types as objects" will not happen :( But generics, enums and structs would be awesome. [https://github.com/ellisgl/PHP-RFC-Struct-Data-Type](https://github.com/ellisgl/PHP-RFC-Struct-Data-Type) [https://wiki.php.net/rfc/enum?s\[\]=enum](https://wiki.php.net/rfc/enum?s[]=enum) [https://wiki.php.net/rfc/generics?s\[\]=generics](https://wiki.php.net/rfc/generics?s[]=generics) [https://dev.to/mattsparks/i-want-scalar-objects-in-php-2o6b](https://dev.to/mattsparks/i-want-scalar-objects-in-php-2o6b) [https://github.com/nikic/scalar\_objects](https://github.com/nikic/scalar_objects) 
Counter-arguments from my years of experience: * If you learn the right way to do it first time, it's much easier to do it right again later * "We'll redo it properly later" is one of the most common lies in software development * "Quick proof of concept / demo", "Internal use only", etc code has a horrible way of making its way into production * Writing automated tests is quicker in the long run. They: * provide documentation on how you expect the code to be used * prevent breakage when refactoring * make it easier to write more tests * make it easier to reproduce bugs (by modifying or writing tests), which in turn prevents regressions because now you have an automated test * reduce time spent manually testing * provide confidence when you do need to deploy that quick fix for a critical bug that gets reported at 4pm on a Friday * "Clean" / tidy code written "the proper way" and for ease-of-reading over micro-optimized high performance (when it's likely never going to be needed) is much easier to debug and make changes to * The next person who has to maintain that code is a s̶e̶r̶i̶a̶l̶ ̶k̶i̶l̶l̶e̶r̶ angry person, and they know where you live (mostly because it's probably you in 6 months). Messy code kills (any time / desire to work on the code further). * Give yourself time to do it properly (Quadruple your estimates) * Things always take twice as long as expected * Management will usually either try to cut your estimate in half and / or give you more work to do in the same time (spec changes, "tweaks" from feedback, etc) * "This is a very rough estimate and should not be used for business deadlines or told to clients" has a horrible way of becoming a deadline that has been told to all the clients * When the above doesn't happen, take advantage of that time to leave things tidier / better than found them Also, take into account that the vast majority of the time, we have no idea how the code is being used, or who might come along and copy it later (particularly true of help forums, SO, etc). I feel it improper not to at least mention how to do things properly / obvious issues with the code. What the OP / author does with that information is their business, but there's certainly no harm in mentioning it. Related aside: There is no worse sin than writing a blog post / tutorial that contains obvious major issues. They may not interfere with the point the article is trying to make, but they will be copy-pasted everywhere. One of the reasons I think PHP has such a bad reputation is because of all the copy-pasted terrible tutorials that were taken and reposted by tutorial-spam sites / blogs, which were then found by unsuspecting newbies trying to learn. We can't stop these sites, but we can call them out and point to better resources. Down-vote them and fill their comments with "do not use this crap - go &lt;there&gt; / do &lt;that&gt; instead"
Feels like a transition from PHP to C# :-D I do agree on most points though, the more typed a language is, the less bugs you have.
```php DB::transaction( function() { // Say we are inserting a new user. $user = (new User)-&gt;save(); // At this point decided to send welcome mail via queue. WelcomeMail::dispatch($user); // Still, saving user's settings, i.e. another insert. (new Settings)-&gt;save(); }); ``` Please note that this example might not seem practical but purpose is to simply explain what it solves. If 3rd line in above snippet fails leading to rollback of transaction we must not have sent the welcome mail. This library provides that feature. It collects and holds all these dispatch-ables and actually dispatches post transaction commit. 
All right!
I almost choked out of laughter
I agree entirely with this sentiment. It's also not something you really find in other disciplines, to the best of my knowledge. If you're learning civil engineering, you don't get taught how to do things badly first because it's easier, you might ignore certain requirements or assume simplified external forces but the work you do produce is still expected to be of a high standard. Doing things the right way rarely takes significantly longer when you are familiar with your tools and the way you become familiar with your tools is by practicing using them properly. A simple CLI script doesn't need a DI container and twenty layers of abstraction, but that doesn't mean there's an excuse for it being poorly put together or insecure. As an example that was mentioned elsewhere, if you are familiar with Composer, initialising it in a new project, installing the library you want and requiring the autoloader is almost always going to be as fast or faster than manually downloading the library and wiring it up.
I agree with you, especially with the "meta-wank" phrase when developers try to over think simple things and can not see the big picture. However I follow PSR and the most essential concepts of PHP and general OOP programming even in my "local-never-deploy" codes because all of my code has a purpose and if I wouldn't follow the rules I would **lost in code** later. I believe we developers have to imagine the "cost" and "worth" of our development and align the quality of implementation to those values.
https://i.imgur.com/J2uWWMJ.jpg
If you're looking for an asynchronous programming experience in PHP, try [ReactPHP](https://reactphp.org).
Programmers are often very opinionated because they suffer from a form of Client’s Disease. &gt; No mixed type Introducing a Tuple and forcing mixed to be tuple elements, is how it should be implemented, based on older languages and the knowledge that developers are just going to wrap in more indirection to mask the mixed returns. &gt; Void by default Yes. (no I'm not going to comment on every one of these) &gt; If all them were added, we'd also need to make the current type system more flexible. Nope. Being efficient is necessarily more brittle in all systems. Strictness is less flexible, in practice. &gt; there's a whole ecosystem of frameworks and packages that gives a language like PHP its real value. Nope. Java programmers aren't different from PHP programmers...it's just programmers. When you obsolete the packages and force static strong typing everywhere, we all do same things with the same tools. It's either gross insincerity or hubris. Either way, it reflects badly. 
but PHP is loosely typed language, but I understand that it evolved greatly since its templating engine origin.
If I recall correctly, that's exactly how the book implements trees.
Sure, but this question was specifically about core keywords.
Anything keyword related - as in PHP core syntax - requires VM modification. You might want to consider assessing the problem further and hopefully, write an RFC.
I haven't used it yet, but just looking at the readme they seems to perform different tasks; guarding against soft-dependencies or dev-dependencies &amp; unused dependencies. Also the installation is different. dependency-guard is a dev-dependency, not a globally installed package. This is a pro for me: \- When maintaining multiple projects, you don't have to update them all in case usage / configuration changes. \- No updates to the CI provisioning needed when updating.
Hmm, interesting. I'm normally pretty careful about order of operations so I rarely have the need for writing transactions. I'll keep this idea in my back pocket though, good to know there's a solution to solve this sort of edge case.
You can also check [https://github.com/spiral/php-grpc](https://github.com/spiral/php-grpc) which will give you compatibility with any other language.
Working backwards from the "This is Java" section. The issue (especially regarding types) isn't that it's bringing in great type-safety ideas inspired by Java, it's that invariably the _only_ ideas considered are the verbose Java style (and not even modern; we're talking 20 year old Java verbosity). There are other approaches! Consider these two classes: class MyClass1{ private MyOtherClass $someVar; public function __construct(MyOtherClass $someVar){ $this-&gt;someVar = $someVar; } public function getSomeVar(): MyOtherClass{ return $this-&gt;someVar; } public function setSomeVar(MyOtherClass $someVar){ $this-&gt;someVar = $someVar; } } class MyClass2{ private MyOtherClass $someVar; public function __construct($someVar){ $this-&gt;someVar = $someVar; } public function getSomeVar(){ return $this-&gt;someVar; } public function setSomeVar($someVar){ $this-&gt;someVar = $someVar; } } Both classes have equivalent type safety, yet MyClass1 is far more verbose. If you feel like adding the types explicitly to the methods makes the code more readable then go ahead - but it's not the language's job to enforce that. And of course your IDE could tell you the types anyway. So why insist the types have to be peppered around the place? Because that's the only way most people here have seen it done ¯\\\_(ツ)\_/¯
Are you at all familiar with Postgres? One difference it has with MySQL is that it has the concept of different schemas within the same database. There is a default public schema, but you can create others and use them. You could use this to create a separate schema for each customer within the same database.
For the most part, I agree, but in a business environment it's also important to keep in mind that you might not be the last dev to ever work on this - so keep it in a state at least that another developer can pick up; by documenting the workflow that you have in your head, and keeping the code readable at least.
you'll find it in other disciplines, carpentry is one. if you're out on a job site and you need a work bench, you slap one together with 2x4s and plywood using the tools you have on hand. you're not going to spend hours running back and forth to your shop to pick up the perfect materials and tools. i could think of an example for every career i've had before writing code.
I'm not sure that's a good comparison though, a site-built workbench might not look like fine cabinetry, but it's still going to be functional and you're going to use the available tools properly when you build it, you're not going to hammer the screws in. You're not going to get far with one that falls over when any lateral force is applied to it.
&gt; This is Java! Gave me a good chuckle ;-)
Yeah, Composer makes a great example. People just fear it or just don't feel familiar enough with it. Yet it proves to be useful the very moment you are adding the second package to your quick-app, as you can start using the added lib immediately, having it *already included* in your code.
I think the tilt is a bit different here. It's not about makeshift tools but about the way people learn. As /u/Tetracyclic said, &gt; you don't get taught how to do things badly first because it's easier, but with PHP it's too common. Many best practices are thought of as more complex and harder to use. Whereas in reality they are easier.
i understand but that's not what the op was saying. they never said you should learn by hacking things together. they said it is okay to hack things together for a quick local solution. you're moving goalposts.
Five years later, or sooner if you suck hard core, someone like me is hired @ 3x the normal rate, hourly, to save the project, save the business, HELP!
AMEN!!! SOMEONE GETS IT!!!
Weird how we idolise 20 year old java and ignore anything from recent Java Feels like if we want Java with PHP's ecosystem we should be looking to put PHP on their research JVM: https://github.com/oracle/graal/issues/361 like they've done with Python Ruby R JavaScript etc Would render things like the JIT pointless since we'd already be running on top one of the most optimised runtimes in the world
so what you need, basically, is not a change in language, but a linter.
at this point, why not simply switch to hack?
One thing to think about, a lot of times that crappy code of scripts ends up in production even if you never thought it would.
Man, I went to a place in 2019 where not a single dev knew what composer was, had never heard of it, never used it. They stitched dozens of packages together like it was, quite literally, 1999 (well, whenever `require_once` came out...). Now they are quick to tell you how utterly senior they are. No knowledge of PhpStorm, or even autoloading. Never written a namespace. But by golly! They all have 10+ years experience and are paid like it!
Do you mean chaining methods like this? $x-&gt;doA()-&gt;doB()-&gt;doC();
Yeah, but my point was that is someone thinks the dirty way is faster, they most likely just didn't learn the right way properly. It's especially true about PHP which is up to this very day is taught to students as though it's 1990-x and php3 around. 
f
While I can say the following is the non-chainable setters. public function setCategory($category): Product { $this-&gt;category = $category; return $this; } /** * @param $sku * @return Product */ public function setSku($sku): Product { $this-&gt;sku = $sku; return $this; } I am not sure how chainable setters would work. Can I have a simple example for both? Thank you. 
The dirty scripts I've seen that the original OP is complaining his lead doesn't like... they're usually of such infernal quality that they just destroy the prod database the first time they're run :-/ The same type of dev will -rail- about not needing it code reviewed, cuz it's just a script, yo.
 return $this; means the setter is chainable, as it returns the same object tow which could be chained a call to another method. (you are highlighting the code on Reddit by padding it by 4 spaces from the left and by the empty line from the top and bottom)
Yes
&gt;The author is just venting on how they hate being held to professional standards of software craftsmanship OP is talking about non-professional, local development. Things that only the author will ever see.
it depends on what you're doing. there are instances where the dirty or lazy way is objectively faster. i would never suggest people learn that way but if you know what you're doing then throwing something together that works for your personal use is not an issue (to me). if you are doing that at work then i suggest you find a new profession. if you're doing it at home, i couldn't care less and i do it myself.
[removed]
&gt; Either way, there's always a better solution then relying on mixed. &gt; In my version of PHP, the language would ensure we always choose &gt; the better solution. Congratulations! That presumably means that the type system you are going to use in your language can perfectly represent any type, as even languages that have reasonably good type systems (like TypeScript) still have a need to represent a mixed (or in TypeScripts case unknown) type. 
i feel like everyone else is reading a different original post. i would never suggest hacking something together for production is okay. i'm saying hacking something together to backup your personal files or some other non-work-critical function that you're okay with failing, is okay. if i hack something together to download all videos from my favorite youtubers i couldn't care less if the code is production quality. i don't always go through the same processes i do when i'm doing things for work.
i have a backup script that i wouldn't show to people i work with but it has been running for 2 years without ever failing.
/u/assertchris can tell you all about it! He's making https://preprocess.io/
Your comment actually makes me rethink some of the points I made. There are some good cases for type inference. I didn't really consider them because of my background in PHP. So thanks for challenging my thoughts!
Real professionals don't have time to comment their own code, we don't even have time to work on our own websites let alone to make their local helper functions and scripts to look even remotely like a final product. I'm not to start my psudo code with classes and high level code practices if I'm doing volitile tests/API calls to services that change often or wouldn't be worth the time develope because if have too many paying clients to worry about my personal code. The best hair stylists own hair looks like shit, doctors smoke, and good developers know how to use their time wisely not writing proper code when the use case doesn't call for it. One day you'll get to that level and realize how naive you sound, especially since it seems you didn't read OPs post correctly. 
you make a ton of assumptions about how other people operate based on your experience. that's fine but it seems to have hardened your point of view a bit. you seem very militant when it comes to coding standards which i've seen sink operations before. there is a balance that needs to be found.
you should stop being so condescending. it is one thing to be professional, it's another to be a code nazi.
In PHP? Not really...
&gt; the only time you can write crap code and be semi-professional about it is when it's YOUR OWN non-employer code that you're NOT being paid for &amp;nbsp; &gt; I'm talking about local maintenance and generator scripts, things that will never see access by another person. reading isn't cool in 2019 apparently 
Exactly, all the meta elite developers are getting emotional about this and defensive. They think you need to learn Angular2 if you want to do animations the right way instead of using jquery copy paste shitty code that works only on the one browser OP is using. Sure it will explode in IE, but if I'm only using chrome personally and want a script that only works on chrome, I don't need 39 other libraries for proper browser compatibility on a one time script. The whole point of using php is that you can write shit code and it will still work. Wrong type returned? Who cares, php can cast any type to any variable anytime. Make it modular, make it simple, make it stupid if you want, as long as you know why its wrong and you wouldn't do such a thing on production, you'd be stupid to do a full OOP design for a script that shrinks or renames jpgs on your desktop. 
I only want structs
yeah you're right and I write a lot of good useful tools on my pc that should never see the light of day, doesn't mean I won't be responsible either. now if I decide I want to use some tool I made in 5 minutes in my production code, I will edit it and use it as such lol it's 2019 people not everyone is a dumbass. Give some folks the benefit of the doubt.
Each post is for it's own purpose. This isn't PHP.net, this isn't a database of information, it's a request and response, kinda like PHP. OP makes a query, or "post" in the case of Reddit, and then people like us act as a server and make a response to that query. If someone asks for a local only code, I don't fucking care if it's fair to other people who are not OP, just like a real server request. You understand now?
&gt; CLI script to organize their images or a local CRUD that gives them a CSV to stick in google sheets. Why are you doing this in PHP? There is a tool for every job.
&gt; If you learn the right way to do it first time, it's much easier to do it right again later Yeah but when you know it well enough, you don't have to do it the right way either. The "right" way is a matter of opinion and 100% dependant on what year you are answering the question. Using laravel wasn't the right answer either until it was. Using OOP in php wasn't the right way to right code either until the newer PHP versions came out. So what you're saying is part true but part out of context nonsense. Again, you are proving OPs point, you mentioned automated testing. Lol are you being ironic or completely inverted your answer to be the opposite of what op said? They literally said stop suggesting things like that when all someone wants to do is use PHP to batch rename files or resize images on their desktop. And you fucking mention spending 10 hours setting up a full automated testing suite. Fucking lol you are exactly what OP is talking about
Your simplified example is ignoring the actual strength of specifying return types explicitly. Yes, in a simple getter/setter method it's fine (when you've got Property type-hints), but if you've got a method more like this: ``` public function findVar($foo) { foreach ($this-&gt;things as $thing) { if ($thing-&gt;getVar() === $foo) { return $thing; } } } ``` This looks fine. However, if `$foo` is not in `$this-&gt;things`, then you'll by default return `null` which will transparently be set on a variable and the error will happen elsewhere, making it much harder to find. A return type would throw the error when this method returned `null` making the problem much easier to find.
Assuming you were going to have a getter and setter method anyway, you can actually take this a step further. ``` class MyClass3 { public MyOtherClass $myOtherClass; public function __construct($myOtherClass) { $this-&gt;myOtherClass = $myOtherClass; } } ``` This also has the same type safety add your above examples and is even less verbose. You don't need a getters and setters unless you have to do further validation, which you likely never have to do against a class since that class will be responsible for its own validation.
Oh look, someone read the post. Too bad everyone else literally proved OPs point and responded with professional code suggestions on why pro level code should be used on a personal image resizing script. Better lease a $300/m VPS to rename a few local files, ammmirite?
You are one of the most jaded motherfuckers in this subreddit. 
Both P's in PhP used to stand for "procedural". Anyone who's been using it before it turned into shitty python will know this. Don't get me wrong, I love that php7 is shitty python. But OOP wasn't a real thing for PHP, it was designed specifically as a procedural language. OOP was shoehorned in later once Ruby strated being popular and JavaScript started taking over server backends. 
AKA fluent setters.
Not everyone has a "production". A lot of people use Ubuntu locally and run php directly on their machines for tasks. My whole home runs on PHP scripts that never leave my local network. I could use another language but I like PHP because you can write psudo code that works. No need to know if it'll be an array or string, PHP doesn't care what you put in a variable. Try that with a C language.
I test my personal projects. It improves my ability to write test code and keeps me from breaking my scripts. (Also, several are developed using a TDD methodology) I have a script similar to what you describe that I use for my "this might make a nice desktop background" image folder which sorts images into folders based on dimensions, renames extensions and checks for duplicates. It's got automated tests. I treat my personal project code on a similar level to production code because a lot of my personal project code has ended up in production projects (and vice versa) - it's not uncommon for me to come across a task similar to something I've done before and reuse that code - having it already tested improves this process. It also helps me when I leave a project alone for 6 months+, then come back to it wanting to develop it further. I've also published (or plan to) some of the code I use (not always publicly - sometimes only to friends or coworkers as "show and tell" type stuff). I like my published code to be of a quality where others can reuse it. I understand where OP may be coming from. I used to think similar things when I started out, but over my years of experience, my opinion has changed.
I was making a lazy attempt at how prototypes somehow end up on production - but yeah by all means just write code, it’s already a lot better than not writing anything 
trying to stay ahead of new things? event dispatchers are hardly a new thing...