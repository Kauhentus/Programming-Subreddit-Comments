1. Learn this subreddit rules. 2. Learn Reddit formatting rules and post your code as text. 3. Learn how to ask a question. If your problem is a failed input validation, then ask about input validation, not whatever redirects or deletion.
f.y.i... "qwertyuiop1" password has been seen 21,081 times before. https://haveibeenpwned.com/Passwords
If you feel so strongly about security why not just force 2FA at that point? Any user using a password that‚Äôs been compromised before isn‚Äôt using a password manager properly and there‚Äôs a high likelihood whatever password they are giving you now is or will be compromised elsewhere. 2FA would provide an actual long-term security benefit with the added bonus of helping weed out spam and not frustrating the user. 
Thank you sir, i located the problem, its working now. Have a great day!
Welcome to lisp :) It's proper form is ```lisp (phptree (is (fun (tree) data) (library structure)) (a (to) manipulate)) ```
Thank you and have a great day too
I understand in theory why this is cool, but why is it the best new thing in PHP7? It seems like a nicety to me, not an "amazing OMG where have you been all my life kind of feature". I use null coalesce WAY more, my vote would be for that.
Came here to say this. Null coalesce has really changed how I write clean code.
No. Use 7.2.x or 7.3.x. Everything else should be considered legacy.
Given the voting, most folks in this sub have no idea on php7 features and waiting for someone to explain them. Looks a bit scary, if you ask me. 
Since the obvious goal of this is to implement a "you must use a password manager" policy, is there a more direct way? This just looks annoying.
I will like strict types more when php has ‚Äòmixed‚Äô. 
My favorite was when I realized I could use it for objects too. So I had an array, `$users = Users[3]`, and I would either need the full name of the *second* or first user. So not the last, which was reserved for a special use. I was stoked when I realized I could do `($users[1] ?? $users[0])-&gt;getFullName()`
1. Get a life 
two-edged-sword... as soon as anyone knows you don't allow them, the amount of possible guesses is far smaller. &amp;#x200B; The far better approach is authorisation on multiple channels like googles authenticator and similar implementations. You remove the security implications of limiting the amount of possible passwords in your system, but increase security by adding a second channel. &amp;#x200B; Depending on what transaction you want to authorize, you can easily scale the requirements for authorisation up a notch. &amp;#x200B; Personally, I believe the future are systems that evaluate the risk of a query and the certainty of the authorisation. The more often you use something, the more likely it gets corrupted. The more important a task is, the more willing we are to go through an extra step to start it. &amp;#x200B; Removing certain strings from the options for passwords only creates users creating less secure passwords by either using something even dumber or just writing it down on a paper at their desk. No online system that uses passwords should allow wrong guesses on a single account at a frequency that would be fast enough to brute-force a password. Most passwords that get stolen, get stolen through social engineering or faked websites. Human error is mostly at play. Password-Blacklists don't change anything if you ask me. &amp;#x200B; I think it was apple that forces me to change my password every couple months and prevents me from using the last 3 or 5 passwords I used... Not only did I revert to "forgot my password" and used the email link to make a new one more often than I actually used the password, I'm also pretty sure the people that eventually get that DB-Dump will be more than happy to have 3-5 passwords each user tends to use, instead of just one. 
To know what a function will return and to force just that type? It's lovely üòçüòç
Nice attitude for a student. Keep with it, you'd be much welcomed in this sub. 
You're right . var_dump the variables and look at the types
One problem with this is that PHP's typing is way more restricted than, say, Java's (no overloading, no unions, no intersections, no generics), and yet as a script system, you could document all these types in a PHPDoc. So by rejecting anything that could be expressed in PHP as a dynamically typed system, but can't be expressed in its still evolving static type subset, you're working with a very restricted vocabulary for creating APIs. I'm not saying it's a wrong strategy, it's a choice. But I made that choice some time ago, and since I've flipped completely the other way (I declare types in PHPDoc only, basically getting what you'd get if you write in TypeScript; no runtime checks). I've not noticed more bugs, but the code is faster, smaller, and as an API it's way more expressive and flexible.
And what's wrong with the types? Do you have any experience with mysqli?
What? That kinda defeats the purpose. PHP has always had "mixed" as that's the default.
The library probably requires php7 and you're using 5.
I concur with everything you‚Äôve said. Without going into too much detail, I‚Äôm far more excited about it because we‚Äôre a small dev shop with a couple devs who somehow made it this far in life, and I‚Äôm forcing them to learn new things and write decent code now. 
Maybe you should consider to look at your own attitude? If you see that I am a student, then you should have the knowledge to determinate that I might not know how to ask the question correctly. Or for what was the case, that i didn't even know what was the root of the problem. I am a student, i was seeking help. Not a list of rules.
Honestly, I like the performance boost.
Wow. Apparently everyone should bend a knee for a student seeking help. I am writing to mode right away asking to make this sub your personal help desk.
There are quite a bit on packagist - [https://packagist.org/?query=jwt](https://packagist.org/?query=jwt) \- it depends what do you need from it. A full auth solution or just encoding/decoding? You can pick any of the bundles for Laravel/Symfony and dissect or use the directly if your cms supports that.
I think the exact same thing. Except about null coalesce over return typing. Return typing gives us absolute confidence in the type and/or existence of a return. We don‚Äôt have to check afterwards, bugs have less chance of wreaking havoc. Null coalesce is fine, but all it does is make things a little nicer. Return typing is seriously nice to have. 
Nice attitude for a "I dont even know what to call you". Keep with it, you'd be much welcomed in this sub. &amp;#x200B;
You can chain it too! `$foo = $one ?? $two ?? $three ?? "default";`
[http://cryto.net/\~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/)
&gt; A password is literally something that only you know. You don't seem to understand how ideas aren't unique. Just because only YOU know your password, it does not mean _somebody else_ could have come up with the exact same password. Ideas aren't unique. Passwords aren't unique. Passwords people can remember are definitely not unique. &gt; If you're not using a password manager, you're wrong. If you want to talk security: introducing a password manager is a security hole. I use one. If somebody managed to gain my ONE password to my password manager - the one password I *have to* remember (see above), they'll have access to my entire online account archive, including MFAs (ugh, thanks 1Password for making 2MFAs so easy ... and security prone). &gt; The first rule of security is: Don't roll your own. Ever. &gt; And if you don't follow the industry standards, you're rolling your own; you're being stupid. Who ever said anything about rolling your own? This entire post is about rolling your own using a _worldwide_ unique check. 
This is where MFA comes in. It's a way to create an always unique "password" every time a person logs in.
I am aware, but still don't recommend. It's a pointless measure that will only frustrate users and frustrate them even more and more as more passwords become "unsafe" from breaches. I honestly ran into a "duplicate password" using a 1Password key before. I was stunned. My recommendation is if your sites is that much of an issue, use other methods to assist such as a form of MFA, account lockouts after X number of tries, etc.
User Experience. Security is our concern, not the user's concern. If I think I need to make the user's login more secure, I will implement MFAs, lock-out attempts, etc. Number One concern for users is their experience. Security is _our_ concern.
There's a lot more nuance to this, and I've spoken about this at length, but thankfully it's on YouTube now: https://youtu.be/RijGNytjbOI
Hi! The best ways to contribute is one of the following: 1) The PHP Documentation is in SVN and therefore we do not have a Github mirror for PRs, however most pages should have a small "Edit" link in the top that will take you to the online editor for the page in question. Alternatively you can find it at [http://edit.php.net/](http://edit.php.net/) and send in patches. &amp;#x200B; 2) Report bugs at [http://bugs.php.net/](http://bugs.php.net/) and list them in the "Doc" type and either "Documentation problem" or "Translation problem". &amp;#x200B; 3) If you are familiar with SVN and not scared to still use it, then the repository is hosted at [http://svn.php.net/](http://svn.php.net/) at the "phpdoc" folder, and english in en/trunk (and step one of the build utilities in doc-base/trunk, with the second one being PhD: [http://doc.php.net/phd](http://doc.php.net/phd) ). &amp;#x200B; There is an ongoing effort to bring the documentation into Git, however it is a long and slow process but hopefully somewhere in the new year that will be a reality and then allowing us to mirror our repositories to Github for PRs. &amp;#x200B; I hope you find this helpful \\o/
&gt; Reality is that some people don't care about how secure their account is, depending on the service that is provided. Exactly this. **Making** the user "be more secure" is only a frustration on the user's. If we feel we must enforce better security protocols for our site, there are far better ways than enforcing a unique password. You can secure a user's login even if they use "123456789" as their password (MFAs, login locks, history detections, login notifications, etc).
Oh, thank you for your concern but surely my humble person is not worth your precious time. 
An extremely locked-down-tighter-than-Fort-Knox server cannot protect users from insecure practices. It doesn't even matter if their password is `qE1nfiOmh1gikLRwocgrgQkHK2yTmarRvPa83Ixm` if they use that password **everywhere**, have used it everywhere for years, and it's been leaked from services that stored passwords in plaintext. Using the Royal You (and Your) below... In that sense, if security is **truly** your concern, and you don't want to implement something like `password_exposed` so your users are aware that their password has been leaked from another service... then you have a moral imperative to implement TOTP/U2F based 2FA (never SMS!). Failure to do either of these means that security isn't really *your concern*, it means lip-service to security is your concern. https://twitter.com/debcha/status/829623063666970625
i have php7 installed :c
&gt; use other methods to assist such as a form of MFA MFA uptake is really low. Even incentivising it doesn't get as much coverage as just explicitly requiring better passwords upfront. &gt; account lockouts after X number of tries This is a bad idea because it's a blatant DoS attack. At the end of the day there's only so much _I can do_ to keep a users' account secure; if a user chooses a poor password then all my measures are for nothing. If I want to ensure my measures have value, then I need the user to join me in this effort and not pick a crap password.
What's on that line? I've checked that file at the current version in github and there's nothing crazy.
&gt; then you have a moral imperative to implement TOTP/U2F based 2FA (never SMS!). &gt; Failure to do either of these means that security isn't really _your concern_, I'm honestly confused here. Why do you seem to be implying we don't? Your post is coming across as an attack on my recommendations, seeming to imply I'm failing in my "moral" responsibility in implementing a 2FA of some type. Like I told you: security is our concern, not the users.
&gt; At the end of the day there's only so much _I can do_ to keep a users' account secure Absolutely, exactly this. If the user doesn't care, then so be it. I have no problems warning them of potential security holes in their logins, but to force them? That I have a problem with. Unless you're a sensitive data site, stop frustrating users with the "Fort Nox" of login checks. The simple fact is, _majority_ of websites that require login credentials are _not_ high security risk sites. Those that are know they are, and should take additional adequate measures to secure a user's login. Here's a good way to approach this: assume the user's credentials are already compromised. And now it's up to you to secure their login.
Good points. Thanks for posting your insights!
Rather than that, how about, prompting them to change their password, after you have identified their password has been used ion a data breach? You might now want to say it or maybe you do want to. "You password has been used in a databreach in another system, please choose a new password now. When choosing a new password, have an prior passwords be shown to the user as 'insecure'
 return $factory-&gt;of($arguments[0], $arguments[1])-&gt;times($arguments[2] ?? null);
the whole code is &amp;#x200B; if (! function_exists('factory')) { /** * Create a model factory builder for a given class, name, and amount. * * @param dynamic class|class,name|class,amount|class,name,amount * @return \Illuminate\Database\Eloquent\FactoryBuilder */ function factory() { $factory = app(EloquentFactory::class); $arguments = func_get_args(); if (isset($arguments[1]) &amp;&amp; is_string($arguments[1])) { return $factory-&gt;of($arguments[0], $arguments[1])-&gt;times($arguments[2] ?? null); } elseif (isset($arguments[1])) { return $factory-&gt;of($arguments[0])-&gt;times($arguments[1]); } return $factory-&gt;of($arguments[0]); } }
The ?? operator was added in php7. Are you sure your web server is using it? A phpinfo() will show for sure.
There's not much to generating and decoding a JWT. There's already a couple libraries ([https://github.com/firebase/php-jwt](https://github.com/firebase/php-jwt)) out there to do that. How and where the token is \*stored\* is a client-side application implementation detail. It's up to the client to figure out how its going to keep track of its token. That's the whole point and power of JWTs. Our back-end generates short-lived access tokens that are JWT. The requesting clients don't \*know\* they're JWTs - they just see a blob of data and think that's the token. All they know is that they need a token in order to get access to the API. The clients then persist this token on \*their\* end (however they want) and pass it up with each request as a Bearer token in the Authorization header. The backend then decodes and verifies signature of the token - and everything we need to identify the requesting client is present in the token. No need for a "session" and the token payload is trusted because it's signed. If in your particular application the client is web-based, I'm not sure how it will store the token except as a cookie. Unless it's a single page app, then you could persist the token in the local store/memory - until the page is closed. Then of course the user would have to authenticate again to generate a new token. Best of luck! &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
i checked and it says 5.6.28, how do i properly update it? It's still new to me
That'll need doing in xammp. I haven't used that or windows in years so don't know how you'd set that. I suspect there's a setting that's only a Google away.
&gt; Like I told you: security is our concern, not the users. And you cannot be secure if your users are unwittingly using a password that's on an attacker's wordlist. You don't have to *reject* passwords that have been exposed, but you should definitely ***inform* your users that their passwords have previously been leaked** and confirm that they want to use that password. (Maybe log their responses for legal liability coverage reasons, too. If their account gets hacked because of their own negligence and they try to litigate against your company, being able to say, "We informed them their chosen password was already compromised and they insisted they wished to use it, Your Honor," is a stronger position to be in.)
In PHP 7.3, flexible nowdoc and heredoc. I have a lot of use cases in my codebase for these and how I can use them while still leveraging Sublime's code folding.
I totally agree. PHP is not there yet for strict and you're playing to too many limitations pretending it is.
It is weird to see that what most people like are strict types and type hinting. Being typeless was the thing about PHP. I think most people agree that PHP gets better when it is less like PHP
Performance
He didn‚Äôt ask what features are there. He asked which we like most.
Declaration. Forcing in and out is just great.
Great talk. Enjoyed that, and ultimately I think what you're laying out will become the standard, although I think that will only come when major API endpoint providers start supporting it.
&gt; Unless you're a sensitive data site, stop frustrating users with the "Fort Nox" of login checks. Counter point: any and all data I store about a user is protected under the GDPR. If I do not do everything I can to ensure this data is secure, and the data is leaked, then I'm on the hook for a huge fine. (Also, Fort Knox :) ) Thanks, but the law basically requires me to ensure users don't pick a crap password. &gt; Here's a good way to approach this: assume the user's credentials are already compromised. And now it's up to you to secure their login. Sweet, your account is disabled. The way we operate on a site that holds lots of data about many people is that when a user logs in, if their password is a known compromised one (i.e. it's in HIBP's list), then they have 24h to change it at their leisure. After 24h, the next time they log in, they are forced to change it (and all changes are checked again!). We offer MFA. The takeup is ~2%. If I (personally) ran a site that had logins, I'd possibly run the same scheme. I *might* consider making the grace period a bit longer, but at the end of the day I must be contentious that I have enough measures in place that I won't be held responsible if the GDPR comes down on me. I'd possibly also just offer oauth options if the password requirements were too much for someone.
It is not about the poor OP anymore. 
I have lots of \`print\` commands that do work in the terminal, so I think STDOUT is working properly.
I think that you are right about the strictness (it's sad) , but isn't it good to forget about some checks and focus on the main script? The way i look at it, it is always one better step than nothing, we can still hack around to manipulate type-hinting and return types. Btw, there was a proposal (on 02/14/2015) for adding Union Types to PHP 7.1, but the core developers voted with 18 no against 11 of yes ([https://wiki.php.net/rfc/union\_types](https://wiki.php.net/rfc/union_types)). Intersection types are still under discussion ([https://wiki.php.net/rfc/intersection\_types](https://wiki.php.net/rfc/intersection_types)) 
Helpers:: &amp;#x200B;
It's better than nothing, absolutely. And we will eventually get there, but as the RFC-s show we simply have to get past the political quagmire, as usual to get those features psychologically accepted and then implemented. Just think how many times short array access, such a small and innocent feature, has gotten proposed, and then canceled throughout the years. And then once it was in... it ended up everywhere (including as a replacement for `list()`). I feel we need some type of revolution like this in the type system, and it'll start small, the way we got return types. Then fought for nullable types. Now property types... Eventually people will realize that all those features are **WAY** more useful once you add unions, intersections and generics.
You can easily use the Linux timeout command for that. However if the process is really stuck up good (trying to read from a hanging disk or w/e), even that won't help you.
So by default, there is no timeout then?
Not to my knowledge. I'd have to read the documentation on PHP.net for that, but I figured you probably already did that before asking?
Being typeless is what allowed bad programmers to make crap software.
ReflectionClass
Definitely hold onto it, the PHP 6 book will be a collector's item someday.
You got my respect reflection buddy, haha
Not just that, have a look at the WordPress Plugin library if you want to see everything wrong with PHP
I believe bad programmers exist even with strict types. Programmers fail at logic, imo. 
Of course, if a website suspects it has been compromised, it should have its users change their passwords to new values. That's not my point though. Mass account hacks do not happen due to the strength of client passwords. They happen because of bad security implementation on the back end. So it doesn't matter what password was chosen by the client in the past or the future. What matters is that client credentials are secure because all this technique essentially does is help populate the rainbow table when the next mass leak occurs. This is just silly.
I've solved the issue. Python was the problem. Thanks for your help, though!
Thanks for the link, will check this out later. I was looking for a full auth solution that works sessionless with jwt, not just encoding/decoding.
[localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) can persist across page/browser loads. Just note that as described in the article posted by /u/DrWhatNoName (which is an excellent article), data in local storage can be accessed by any javascript on the page, no matter its origin.
The way you described it is pretty much how it is implemented. Firebase is actually the library that is used in the project for encoding/decoding the tokens. What I wondered about, was more a full auth solution hooking that JWT up to a full authentication library (user/account management).
Interesting read, I was oblivious of the concerns surrounding JWT. Something I found through wikipedia: https://connect2id.com/products/nimbus-jose-jwt/vulnerabilities The JWT auth is already implemented though, and I am reluctant to change everything instead of putting some time into hardening the implementation. From what I can read in these links and gather here there are real security concerns with JWT, but it can be acceptable if properly done. 
Please, again, a programming language isn't bad. A community isn't bad. WordPress powers a lot of web, so does PHP. Businesses don't care about programming practices. Heck they compromise security, why worry about a programming paradigm? Hence, individuals stuck with bad businesses do what told. 
This side effect: Every PHP CLI tool is 50 % faster ‚Üí PHPUnit, Easy Coding Standard, Static Analysis tool, Rector ‚Üí everything takes 50 % less time to use ‚Üí twice the fun to use clean code tools :)
&gt; It's not getting any features anymore That‚Äôs irrelevant to *learning* PHP as a language. The vast majority of what you‚Äôd learn in a PHP 5.6 book applies to PHP 7 too. 
And people overlook the drop in memory usage! Not just performance...
Not having an explicit way to write "mixed" is ambiguous. It conflates two things: 1. the case of having determined that "mixed" is the only solution in a a particular situation 2. being too lazy or neglectful to decide what type is appropriate in the situation This is a big semantic difference.
The point is when you have non-strict language like PHP, even non-programmers will easily pick the basics and start making bad code (due to high demand and money involved). &amp;#x200B; Yes, I have seen shit in Java, but compared to what I have seen in PHP, their shit smells like roses. Or in other words; strict languages will deter people who are in just for the quick money. &amp;#x200B; &gt;Businesses don't care about programming practices &amp;#x200B; Actually, they do. When you make complex web apps, my clients would never accept WP or similar. Those that do are my favorite clients; they don't save on money for rewrite :)
Types, types, types! It's the one thing which 200% improved writing "larger scale" code IMO. - eliminates a whole class of problems with phpdoc (noisy, out of sync with code) - crystal clear for everyone what is supposed to happen (for the next developer, static analyzer tools) Some developers scorn at this (wrong language if you want this, it's only runtime not "compile time", who needs this aka duck typing, etc.) but here I am, writing great and a lot of business logic code in PHP, with an awesome team, making a great living supporting my family. So what, I say \o/ It's similar to the ECMAScript &lt;&gt; TypeScript thing. Basically, I would never ever again write plain ECMAScript. That would be absolutely ridiculous to me. TypeScript all the way. Same for PHP. Though TS has the advantage (and/or disadvantage sometimes) of being a compile time only verifier but it definitely has the more advanced type system; one you can only dream about in PHP. Of course the 2nd top point is performance, but you can always compensate this with hardware (to a certain degree). Not that I dindn't liked the load of heavy job servers dropped almost in half with the switch back then. But types. Oh my!
&gt; the case of having determined that "mixed" is the only solution in a a particular situation weird, typed languages don't seem to have this issue. And no, you don't need mixed. Just don't put any type. Boom, now it's mixed.
If they don‚Äôt require a type declaration then they have that issue.
How come there's no official maxed-out docker image that has all of the most common extensions pre-installed and preferably statically linked? I'm of the opinion that it's a proverbial pain in the ass having to go hunting down all of the various dependencies. Don't even ask how many hours I lost this weekend trying to work out why GD didn't have JPEG support. The CI/CD pipeline commit message list on my gitlab instance does not make for civilised reading.
üëç I've been using option 2 since the pre-1.0 days. Took me a while to understand it, but when it hit me, it was a blessing. Drawback of this approach: sounds stupid, but since you are creating a complete new index in parallel. So, if you have a LOT of data, you need a lot of space ... this doesn't matter if your data is 500MB. Or 5GB. But it starts to become a problem if you have 500GB because it means your ES cluster needs at best more than twice the storage of your current index size. &gt; Once the mapping is created for a field, it is not possible to change it unless it has been reindexed There's an option not covered here at all: adding mappings for _new_ fields is totally free. So you always have the following "Option 4": 1. add new field mapping 2. adjust code to sync to new field 3. back-populate existing documents in ES 4. switch ES query to new field It's not too different in terms of what it does (still re-indexing everything) but it does not require a permanent new index which means you do not need to host twice the amount of data. Yes, updating all documents that way also requires storage space but it's reclaimed internally ES (it works _similar_ to binlogs and garbage collecting unused segment fields) but also can be triggered manually. When I started out with ES I basically always threw everything into it, not caring about docs size. Or the dependency to the primary storage: when does a model need to be updated? On _every_ or only _specific_ field changes? If you've a lot of updates in your system, the constant syncing _can_ become an issue. Nowadays I handle it the same with carefully crafted SQL statements: only the absolute necessary fields required to fulfill the task.
Well then Erlang, or maybe C or Assembly, must smell like Tulips if it's about barrier to entry? Surely not. &gt;Actually, they do. I'm glad there are such clients. &gt;When you make complex web apps, my clients would never accept WP or similar But WP is not meant for complex applications, as you might rightly know. It's a simple tool with exploitable potential. And people merely did that. Albeit poorly. Still, not PHP nor WP's fault. 
It's an interesting idea. As is providing 2FA. Both can be annoying to a certain class of users, i.e. denying based on pwned is already a sign the user doesn't use software managed passwords like 1Password which maybe also means user isn't interested in the hassle with 2FA and the construct of backup codes, etc. Just get step 0 right: securely hash the passwords and store only the minimal amount of user information absolutely necessary, so when your site gets pwned it's not a total disaster. That and make sure you're GDPR compliant ;)
I would start with something like a simple multi-page website and go from there. Try implementing a template engine, add some simple blogging features, image uploading, etc., once you get rolling. &amp;#x200B; [https://phptherightway.com/](https://phptherightway.com/) and [https://github.com/ziadoz/awesome-php](https://github.com/ziadoz/awesome-php) are some good resources that I keep going back to.
Thanks. I guess that's sort of the plan. I built a library catalog app and now I'm learning how to make my forms better with more security and validation and stuff. It gets complicated so fast!
In php7.3, JSON\_THROW\_ON\_ERROR really cleans up json error handling. Also array\_key\_first/last
How many hours did you lose this weekend trying to work out why GD didn't have JPEG support?
Just a heads up: A number of functions in that codebase misspell \`public function \_\_construct\` as \`public function \_\_constrcut\`.
Password managers don't solve some of the problem though. Every time Lastpass generates a password, I have to sit there mangling it and removing characters until it's valid for whatever stupid rules the site has.
&gt; You don't have to reject passwords that have been exposed, If you look at OP's title. It clearly states "Preventing." And my recommendation stands: don't prevent. I'm find with informing. I'm not fine with blocking. I stand by my posts. OP said "Preventing" and I said "don't do that."
‚ÄúDon‚Äôt use PHP if you know your future, or do use it if you don‚Äôt know‚Äù - what?
&gt; We offer MFA. The takeup is ~2%. We're 100% because we enforce it. But we're also a hospital site, with heavy HIPPA concerns. What we don't do is check if your password is on an exposed list because, in today's world, chances are it is. 
I assume it‚Äôs saying if you don‚Äôt know what tech you want to work in, php is a good language to pick up because it‚Äôs an all-rounder and still highly sort after. On the other hand if you‚Äôre set on being a fullstack JavaScript developer, there would be no use in you learning php when you could be learning something like Node or a frontend framework. 
For those things you can just google them and find some answers. Not that hard tbh. Also, if one would try to make an image like you're describing, something would always be missing for someone.
&gt; On the other hand if you‚Äôre set on being a fullstack JavaScript developer Only if you manage to get hired as a fullstack JS dev
There is so much wrong about this article. The most important however is that you simply cannot be Agile / have an emergent architecture / be flexible / explore the unknown world if your known world constantly confuses you. Just like a child cannot develop sufficiently if it is never shown rules. If there are no rules it always have to live in fear that suddenly everything breaks down. And that is exactly the fear that I have with every line of PHP that I type. _Will that function return an error code, produce an E_WARNING or E_NOTICE or throw an exception? Is the haystack or needle first? Is the array or callback first? Is that variable really of type X? Is that thing null? Will that operation modify a value in-place or produce a transformed copy? Are the `$_SERVER` variables for X set by Apache/nginx (lol @ not having to care about that, it's simply not true)? Did that function return `false` or `0`? etc._ All these **stupid** problems, all this constantly-having-to-validate-that-I-didn't-accidentally-break-the-world that I have to care about as a PHP dev take away time that I could have spent with being creative or innovative.
Could please people stop calling their company "shop". 
/r/phphelp
I keep finding myself going back to using VirtualBox and installing CentOS and using the REMI repo to install all my stuff.
IMHO, mistakes should be celebrated. Creating a culture around taking chances and learning from failures in a safe space is the fundamental spirit of ‚Äúdevops.‚Äù I‚Äôm.certain that each stanza of your hypothetical internal dialog could be answered in front of you by a senior peer performing a basic eyeball static analysis of the code. A developer who is a professional in the space, showing you how Xdebug works and/or reviewing a few basic unit or functional tests for something you might be working on; that is what I would prescribe for you. You have the passion, but you are exhibiting fear, which is the mind killer. I understand your frustration, I really do. However, if you truly believe the grass is greener with any other language - I would urge you to stick with your challenge, dispel the magic by being methodical in your steps, output the values you are confused about, and serverfault can help you with answering questions. 
The same place Windows 9 went The features slated for 6 ended up in 5.3.
Do you know how to typehint/intelisise predefined php arrays in vs studio?
Yes
How? What plug-in do you use for it?
This is a good start. [Some of these items](https://github.com/paragonie/awesome-appsec#php) might be worth recommending too.
Thanks, I'll take a look and update the list.
That is not true at all. You can easily write good software in typeless or loosely typed languages. Nobody complains about all the bad Python software out there (which there is plenty of, like any language). And that is also not statically typed. And I can tell you from experience that there is a shit ton of bad java software out there despite strong typing. The only thing that allows bad programmers to write crap software is a lack of education. Not the language.
I don't know how to put this. I still cannot remember the quirks of its standard library and fully rely on PhpStorm for that matter. I've started using PHP about 13, 14 years ago. I know xDebug, static code analysis tools etc. - imo it's simply not enough. I know about 10 different programming languages, with 2 of them being Rust and Haskell which have the best compile-time type and memory safety that I know of and that I would use all the time if there was any possibility to push them at my job (which I already try and keep trying). I think a program that compiles should not just crash out of nowhere. I think a program for which unit tests and integration tests run green should not just not work beyond a bug in those tests. These are already pretty hard requirements for the programming platform and the codebase and many more than just PHP would be ruled out at that point. But since there are PHP jobs...
&gt;all of the most common This implies that some extensions would be left out. &gt;How come Common is requirements dependent.
Interesting. I usually have different development and production images. Dev container is total anti-container philosophy, runs everything with supervisord within a single container. For production there's separate containers anyway. I find the multi-container setup too much for dev environments. A VM provides an additional kernel, which seems redundant either way imo. 
What's truly bad about PHP? Maybe we could divide it into bad programming practices and programming language limitations. We all know the inconsistencies in string and array functions, but is there anything that makes PHP itself bad? Something that an IDE cannot solve. Is there something missing in PHP that should've been there, apart from strictness/interpreterness of other languages?
How server intensive is loading a Chrome binary and running tests which involve generation of PDFs via frontend? Are there any benchmarks or sample test reports? Thanks!
Would you prefer ‚Äúshoppe‚Äù?
Personally, I wouldn't use vanilla json_encode instead of my own wrapper until this flag become default. For the moment It's just too long code to write. 
PHP have pthreads for managing OS threads. Why do you want FFI solution instead? Can't really help without more info.
I have a different theory about this. tldr; software made in the last ten years is lazy and shitty. Have you ever been bitten by the "community" of npm? NPM sucks ass. When it happens to compile correctly during a CI I'm stoked. It is written by a bunch of kids who were stoked to have a 5gb iPod. Blah blah blah this syntax is cooler. You know what? You don't like PHP's way of naming functions? Fuck you make your own. Its not that fucking hard. Also, when was the last time you used mysql_real_escape_string? In a wordpress plugin? Fuck you you don't write PHP. Also thanks for contributing to electing Trump. As cool as PHP is, a lot of shittards have made it worse. You have any idea what it was like to create software before PHP SPL? Jesus Christ you fucking snowflakes. Also NPM is a pile of shit. Disagree? Just wait, you will have your day of reckoning. Composer is the best thing to happen in PHP, and if NPM worked like that, I'd be so happy.
ASR, AST, AST. Seriously, big respect to all PHP devs who worked on AST less PHP 5. Heard scary stories about tricks it took to teach PHP done of its features. Also speed ups afforded by memory and AST is optimizations what keeps PHP relevant.
Whoaw there. Strict typing is only as good as expressivenes of its type system. PHP have very limited one. You may be missing a lot of good stuff if you reject PHP quasi equivalents to parametric polymorphism, or abstract data types with its discriminate union types. Which can't be encoded in terms of PHP typings. On top of that you may be forcing unnecessarily large interfaces cause there is no way to type after multiple small ones for a single argument.
Tooling can type check those PHPDocs, for a win too!
Type hints do not give absolute anything ;) PHP will do type coercion on the fly in default mode. Think about type hints as syntactic sugar for reflection assertions. With strict types mode its different beat altogether.
And good ones to write high level code that can't be statically verified with what a given type checker can deduce/induce. That's why every statically typed language have escape hatches. Also why inheritance-only OOP have awful ergonomics.
You can encoded some of that logic into your types and have type checker point out places where you forgot to take those constraints into account ;) People why criticize strict types should really get past "int" ;)
Statically typed function parameters and return types, and now class properties. Allows me to drop a ton of useless unit tests that only check types and let the PHP analyzer take care of it.
Yes, having tools is not enough to know how to use them, but Java is a language where for a long time those tools where not available!
Why create packages locked into one framework? It completely sidesteps the point of packages being reusable. 
Does Apache Benchmark is really good at measuring performance? 
&gt;magento This
Thing about Magento 2 is you need to have a backup team of experts you can use. There are ways to speed up both the [M2 front-end](https://onilab.com/blog/magento-2-performance-speed-optimization-guide) and the [admin panel](https://onilab.com/blog/magento-admin-back-end-slow/) \- but if you are not a pro you might find the DIY way very time consuming. Still, the platform is amazing for scaling your business.
¬¨_¬¨ Too many. 
What does this have to do with Laravel, and why would it even?
That's a shame.
What route should I choose if I want to implement automatic code formatting with options in a team with different IDEs? Maybe there exists some formatting config files to keep in repositories? I looked on some projects, [PHP-CS-Fixer](https://github.com/friendsofphp/PHP-CS-Fixer) seems nice, but there are many other, according to [awesome-php](https://github.com/ziadoz/awesome-php#code-quality).
I don't know if you have already, but if you didn't I would advise you to look into: [https://phptherightway.com/](https://phptherightway.com/) [https://www.php-fig.org/psr/](https://www.php-fig.org/psr/) and at least once, download the php format of [http://php.net/](http://php.net/) and read it. All of those are free and set you off to get the good practices before something else spoils it. After that then you can if you want spend money on books that deepen your knowledge on whatever you feel you need. But honestly reading the [php.net](https://php.net) documentation once in your lifetime will save you countless hours of reinventing wheels only to find out months/years later that the language allowed for that workaround natively.
Well, strictly typed languages help with determining memory requirements in "at most" manner, and for dynamically typed, like PHP, it's more of "at least" and a vague estimation at best. That's why data types matter, not just because it's "int".
"Are you saying PHP isn't Laravel?"
[Adam Wathan - decoupling packages from your framework](https://youtu.be/xvHtnLaYxwM)
It was rather. Turns out a command further down the dockerfile was removing the libraries as part of its cleanup.
I mean, I didn‚Äôt mean literally 100% rejection. I‚Äôm merely preventing my devs from creating functions that return back null...or string...or an array, because that‚Äôs what some of our legacy shit has done. So terrible. 
There is explanation later; yes, I have seen shit in Java but it is nothing compared to PHP. Check my other comment. &amp;#x200B; &gt;Nobody complains about all the bad Python software out there Because this is PHP thread? &amp;#x200B; About education; I can't agree. For 10 years of professional programming, I have never, ever met a person who even heard of nested-set. Most of them had university degrees, I do not. &amp;#x200B; I gave an example of nested-set because I consider that as a **must** for everybody and I have been using it for 9 out of those 10 years. With uni diploma, you would learn algorithms that you will never use in real-life, or at least not in PHP. Example: sorting algorithms; unless I write DB engines, why would I need more than usort? After all, PHP goes berserk when having more than 10.000 objects in memory, irrelevant of code (it is internal, locked value).
Oh man... I tried TS, absolutely amazing language. If it had a framework like Symfony, I would make a switch **instantly**. Generics, inline annotations... it has it all. I lwish PHP team open gofundme or patreon account if that would help in bringing these features. 
This is a brilliant talk and shares my views on the current Laravel community. Even as a (majority) Laravel user I find the community is just hell-bent on locking themselves and everyone else into the one eco-system. It just seems really naive and short-sighted to do that.
I was wondering the same thing, there's a single mention of Laravel in the article and it's just a link to an example repo. I guess Laravel is a buzzword these days.
Docker has a Kernel, and then the container has one too. And if you are on Windows, then you have to use Hyper-V which can cause issues with other programs.
You might be interested to know that on the standard windows distribution, there is already an official "common" list of standard extensions which come pre-compiled along with it :-)
The attached article dates from June 2017. It suggests rehashing based on bcrypt instead of the more currently fashionable argon2i. Not a bad article but a bit dated. Be sure to read and understand the comments at the end of the article before applying.
Hackathons are pretty widely despised these days unless there's a monetary incentive for everyone participating. Most people don't like to do free labor unless they're very inexperienced.
I didn't write the post, neither work with security, but I'd like to keep it up to date in 2019. Could you help me what needs to be changed in the post? 
I see. I'm thinking of more coding dojo format, 1-2 hours, pick topics from attendees, so they learn what they want.
After experiencing the horrible pain that is .Net development, there is literally nothing that PHP could ever do that will compare to the productivity sucking adventure that is working with a stack of Microsoft tools. You want to talk about confusing? How about when Visual Studio says that during the build, 15 passed, 0 failed, and 0 skipped in the Output panel. But then you go over to the errors tab, and there are 8 errors. Explain that. Fucking explain it. Or how about IIS configuration, sites vs applications, app pools, and permissions being (by my estimate) 319x more confusing than setting up Apache or Nginx could *ever* be. Or how about all this mythical "type safety" bullshit in an environment like the web where user input and database calls means you will get just as many runtime errors as any PHP application *anyway*. This "type safety" which, btw, makes for some utterly obtuse programming and type juggling. And no, it's not because I'm inexperienced at C# or .Net. I'm not working with C# and .Net. Developers on my team who have been working with it for a decade are, and I'm seeing them struggle to do basic things in .Net/C# (like user generated DB table and columns) I could smash out in PHP in a matter of hours. I've seen more `500` errors in the last 3 weeks on this shitty .Net stack than I've seen in 15 years of PHP development. Also, this is the shit I'm dealing with right now: https://i.imgur.com/vhb1Rlg.jpg Why? Because it's a fucking Windows machine. 
Not that we condone the use of deprecated software, I've setup a tap at my organisation to be able to support older software that were not migrated yet. I'm probably not the first one, but I've also updated to PHP 7.0.33, which were never available through Homebrew. I've also added the php 5.6 formula in anticipation of January first. You can find the tap here: [https://github.com/eXolnet/homebrew-deprecated](https://github.com/eXolnet/homebrew-deprecated)
Not that we condone the use of deprecated software, I've setup a tap at my organisation to be able to support older software that were not migrated yet. I'm probably not the first one, but I've also updated to PHP 7.0.33, which were never available through Homebrew. I've also added the php 5.6 formula in anticipation of January first. You can find the tap here: [https://github.com/eXolnet/homebrew-deprecated](https://github.com/eXolnet/homebrew-deprecated)
12 day old account. Has submitted posts 74 times. Some higlights: * HEALTH INSURANCE AGENT NEEDS ASSISTANCE * I can get any college book for you * I can remove any malware &amp; fix blacklisted wordpress sites * Ive owned 2 successful call centers for 15 years. Ask me anything or PM me * Web Guru. AMA * WIX pro here * I make movie and film posters. * Cancer help assistance *(What the fuck?)* * I'll help you with sheets *(Google Sheets)* * Trump is using adderall? *(in /r/androiddev of all places)* * [Hiring] a Google competition killer * In r/SEO. "Right now I cannot pay you much I'm not going to lie" * Web/SEO/Hosting/Logo/Ads/Leads/eCommerce Guru consultant Tip: Stop calling yourself an expert and/or guru. You seem like someone who has just dabbled in a lot of things. Tip2: Read subreddit rules. Like 90% of your posts have been removed by moderators.
Great. Thanks for wasting your time. You sit on reddit. I actually work hard.
... You've created 74 posts in the past 12 days. You're the one sitting on reddit.
Mostly the use of an argon2i encoder over a bcrypt encoder. Here is [my encoder](https://github.com/cerad/zayso4/blob/master/src/User/UserEncoder.php). Almost identical to the one in the article. Of course you need a fairly new version of php with the argon stuff complied in. The [Michael Spacek](https://www.michalspacek.com/upgrading-existing-password-hashes) article is very good and should be read in detail.
Hey, thanks for this response. I "fixed" the issue through a hack. I created a login link and through javascript I just hijack the click event and click on the link if they're not logged in. It's not elegant but it gets it done. It sounds like what you're saying the issue might be is that my service provider's request needs \`Access-Control-Allow-Origin\`? I'm already sending the request credentials
Spaceship operator
Same here, company went from an Design and Marketing Agency that outsourced to a Full service one with 12 Dev's and now 80% of development work is done in-house, and the rest is either just marketing and or design work 
I have added PHP-CS-Fixer as a stage in my Gitlab-CI pipeline. It has been set up to simply not allow merge requests through if there are any code formatting issues.
Awesome, gonna try it Can i use a Cron job/ scheduler in the background while the application is running. Like fetch new data every 5 minutes
&gt; SPL data structures are horribly designed They still are, because no one has updated them and it is likely that no one ever will. I have drafted a BST for ds 2.0, to act as both a standalone structure as well as the internal structure for a sorted set. I like seeing others implementing similar structures so that the ds API can close in on what others expect. The only cost to using Ds\Queue here would be the dependency on the extension. Perhaps something to consider at a later stage, because adoption is definitely easier if the system dependencies are fewer.
Ok, thanks for the information. I hope they will do something about it... php-ds is amazing as a polyfill, I can't imagine as an extension, it would be extremely faster. Let me know if I can do something to help!
Basically I need to parse 20-50gb of data. If I use pthreads it will duplicate the data for each thread, and that's slower than parsing it on one core, plus I could run out of server memory and start swapping (I do this on SSDs, but then my SSDs last only a few months, and they expensive). &amp;#x200B; I was looking for something like this pseudo code: # Process every Nth of the array function thread(&amp;$data, $start, $threads) { # Eventually I might run this on a GPU for($i = $start; $i &lt; count($data); $i = $i + $threads) { #... parse, change $data, if I change $data here, it will be changed in all threads } return $thread_id; } $arr = [ .. 20gb array ]; $cores = 24; # cpu cores $threads = []; # Start threads, and use same array (same memory) for($i = 0; $i&lt;$cores; $i++) { $threads[] = thread(&amp;$arr, $i, $threads); # Start thread } # Wait for threads foreach($threads as $thread) [ join($thread); } # Now my data is processed $arr; &amp;#x200B;
Ah, could be. Thanks. Just the fallacy of "all of most common extensions" got me. :)
what would be some good alternatives?
This guy was just created a post on /r/WordPress asking how to add H1 tags. He deleted the post though when called out.
tl;dr: * We cannot work for free, so we're looking for new revenue. * " We will never create a paid version of Symfony. " * There is nothing actually new to report, we're just trying to build hype over nothing
1st version was golden in the time being, I look forward to this!
I always thought that symfony already had some side-products, like Screencasts, symfony certification, symfony uniersity, blackfire, etc.
We also looked at other rather successful PHP projects, that generates serious revenue with subscriptions, paid extras etc. They clearly target more ‚Äòenterprise‚Äô uses, given the prices. Good for them, a lot of those other projects use Symfony code, so it was about time the project started to monitize it as well. 
Your need isn't super clear from this post but possibly try looking into the "screen" command.
What works best for you depends on your situation. Can you please elaborate on your "multiple executions of multiple scripts"?
http://supervisord.org/ I have that run the appropriate number of scripts continually, and then have the scripts determine whether they need to do something, or whether they should sleep for 60 seconds. 
E.g., Both functions below generates 10 characters number that are seemingly both hard to guess. &amp;#x200B; function randomA() { $s = ''; for ($i=0; $i&lt;9; $i++) $s.= random\_int(0, 9); return $s; } &amp;#x200B; function randomB() { $s = ''; for ($i=0; $i&lt;9; $i++) $s.= mt\_rand(0, 9); return $s; } &amp;#x200B; echo randomA(); echo '&lt;hr /&gt;'; echo randomB(); &amp;#x200B; From the example, what threat model makes random\_int() more secure than mt\_rand()? 
The "I can hit your RNG 624 times and capture the output each time" threat model. Anywhere you expose the output of `mt_rand`, and do so in a way that lets you capture 624 rounds, allows the attacker to recover the internal state of the MT engine, which means your RNG is no longer random. If you're using it for purposes such as password generation, or any sort of cryptographic purposes, or nonce generation, etc., then this is not fine and you should change it. If you don't care that your RNG state is recovered (think: randomly selecting an image, picking a set of words, etc.), then it's fine.
 ## PHP &amp; MySQL Novice to Ninja ‚Äì by Kevin Yank &amp;#x200B;
\&gt; [/r/PHP](https://www.reddit.com/r/PHP) is not a support subreddit. Please visit [/r/phphelp](https://www.reddit.com/r/phphelp) for help, or connect to ##php on Freenode IRC (nickserv registration required). A good rule of thumb is that if you're asking *how* to do something, instead of why something's done, or how to better do what you're already doing, you're probably asking for support.
For the sake of discussion, let's assume \`randomB()\` (from my sample code comment) was used as a temporary/expiring access token with rate limiting (e.g., IP block after 3 failed attempts). Does the "624 times" threat still applies?
That if you have public access to the return, randomA is not random... üòÖ üòÖ üòÖ 
Absolutely, as you've described it. I don't need to submit the tokens in order to get the state, I just need you to generate the tokens. Which means all I need to do is submit requests for tokens. If you limit the number of token requests over a given period of time _for all clients_, you can limit the damage, but you should just use `random_int`.
thanks this will help!
I need to run multiple PHP files in different timeframes and need to make this automatic. I want to keep all the execution organized, I particularly think crontab isn't easy to manage that.
Multiple files execution in different timeframes of the day. Execution should be automatic
Anyone has an exemple of ci pipeline for Symfony 4 ?
That‚Äôs disappointing.. :(
* `mt_rand()` only has 2^32 possible output sequences. * `random_int()` has 2^128 to 2^256 (depending on the specifics of your OS). You can build a database that predicts the first 9 output sequences of `mt_rand()` from every possible seed and fit it on an SD card these days. With that in hand, if you can observe a short sequence of `mt_rand()` outputs, you can predict the rest of the series. Take a good look at [our backdoor that won the Underhanded Crypto Contest](https://paragonie.com/blog/2016/01/on-design-and-implementation-stealth-backdoor-for-web-applications) for comparison.
I visit regularly some ‚Äûlive coding meetups‚Äú and so far it‚Äôs really great! Usually it follows this pattern: One guy does a talk and breaks it down in some parts. First he talks about the technology and how it‚Äôs done and after that, a wireless keyboard goes trough the audience. The topic of the last talk i visited was about vim, so he first explained how to open and write to a file. After that some guy from the audience has to do it. A format line this is great, because you directly have to use what you learned (unlike a standard talk). 
This is exactly what Cron was made for.
Transparency. Probably the biggest things here are the staff re-alignments (from Sensio to Symfony SAS) and the trademarks being transferred (off hand I'm not sure if they were owned by Fabien or Sensio before but now they're listed as Symfony SAS).
Might be overkill, but we use jenkins for this sort of thing.
Most of the "programming" books I ready are not language specific. I find the language specific books tend to date quickly. I buy books like Fowler's Refactoring (2nd ed just released), Eric Evans' Domain Driven Design, Uncle Bob's Clean series.
On PHP, mt\_rand's internal state is a function of only the 32-bit seed. You don't need (that) many outputs to recover the seed and thus the state. When you have full outputs, one is often enough. When you have partial outputs (converted to a smaller range or otherwise post-processed), you may need a few. In OP's example, his 10 decimal digits are just enough to leak the seed, and thus the state, and allow for inferring/prediction of past/future "random" numbers. The 32-bit seed recovery takes about 1 minute on a CPU without precomputation using this tool I wrote: [https://www.openwall.com/php\_mt\_seed/](https://www.openwall.com/php_mt_seed/)
My approach to this solution would have been a lot more code complexity then the 5-10 lines I found which works and is correct. If you were an employer would you bother going forward or would you be like "GTFO"? I ask because as a developer if we find a correct answer and understand it completly is it not better to use that then something that might be more complicated?
Hey, SavishSalacious, just a quick heads-up: **completly** is actually spelled **completely**. You can remember it by **ends with -ely**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
hEy, SaViShSaLaCiOuS, jUsT A QuIcK HeAdS-Up: **CoMpLeTlY** Is aCtUaLlY SpElLeD **CoMpLeTeLy**. YoU CaN ReMeMbEr iT By **eNdS WiTh -ElY**. hAvE A NiCe dAy! ^^^^tHe ^^^^pArEnT ^^^^CoMmEnTeR ^^^^CaN ^^^^RePlY ^^^^WiTh ^^^^'DeLeTe' ^^^^To ^^^^dElEtE ^^^^ThIs ^^^^cOmMeNt.
Is.. is this how Skynet started?
there's better ones out there like wrk or h2load for HTTP/2 HTTPS
I'm going to answer this for posterity in case someone else googles this in future. I'm assuming you're being asked to do this as part of a code test for an interview. &amp;#x200B; Short answer: Don't do it if you want the job. &amp;#x200B; Long answer: The odds are pretty good that the company isn't doing this to find out if you can google a solution, they're doing it to see if you can work out an approach to a problem, and turn that approach into code. It's a trivial problem, and a grad should be able to solve it without help. Depending on the interview, you may get asked how you came up with an approach, and how you verified that your solution was correct. By jumping directly to the google approach, you've skipped over these steps and won't have the working to be able to answer those questions. &amp;#x200B; In the workplace, googling for a solution is *sometimes* the correct approach, especially when it comes to looking for the framework way of implementing something. However, it's a certainty that you'll hit problems for which there's no ready solution, and you'll have to figure it our yourself. The ability to do this is usually what the interviewer is looking for. &amp;#x200B; Finally, from my time interviewing applicants, there's a terrifying number of people who can't code. We've resorted to having code challenges like this because we can't find any other way of filtering them out. We want to know if you can write code without using google.
Yeah, 624 rounds was the quick google answer.
You do see the irony in this, right? You are warning for malicious Composer packages after which you encourage to install a package that adds a public endpoint to my application...
To everyone whose downvoting the whole thread - I get it, I really do - but if you down vote this thread into oblivion, nobody will learn why googling for the answer to a code challenge is a bad idea.
Tacking on: This is why -- at least in larger projects -- you will often see the idea of "random" separated out into subtypes like: * Cheap general random * Secure random * Cheap seeded "random" for a particular purpose where repeatability is important
I guess this'll be my last post here about HHVM; thanks for the feedback, support, and constructive criticism over the years :)
Blackfire is its own company. Fabians post mentions certification (and conferences) cost as much as they bring in revenue, as he doesn't mention screencasts and university i would assume the same for them. It is really hard to monetize open source, because the incentives of potential customers are to use it and not pay. 
it depends. for such trivial task they might be evaluating if you can code at all. for more complex tasks, they probably are more interested in search history and evaluate your research skills- what keywords you use, which sources etc.
I have some RFC I'm trying to draw up to address a couple things: [https://github.com/ellisgl/PHP-RFC-Stuct-Data-Type](https://github.com/ellisgl/PHP-RFC-Stuct-Data-Type) [https://github.com/ellisgl/PHP-RFC-Static-Class-Type](https://github.com/ellisgl/PHP-RFC-Static-Class-Type) [https://github.com/ellisgl/PHP-RFC-Advanced-Type-Hint-Validors](https://github.com/ellisgl/PHP-RFC-Advanced-Type-Hint-Validors)
Agreed, that's what happens to specifics. That's why they're so rare, but when they exist I learn very fast from them. E.g. *Persistence in PHP with Doctrine ORM* was the only place that put Doctrine together, in time being. Now it's deprecated knowledge, but I believe there are such "hot" books, I just might know about them.
What most valuable know-how did you get from that?
Thank you for everything HHVM has done over the years! I know it is a huge effort to publicly release in-house projects like this, and the community hugely benefited. A special thank you for lighting a fire under mainline PHP to get their act together, which should not be seen as any small thing.
Since HHVM/Hack will be moving away from Composer and using ‚Äúextensions to yarn‚Äù, what does this mean for the yarn community that uses it strictly as a replacement for npm (meaning they use it to manage JavaScript libraries)?
How would you compare it to https://github.com/Roave/SecurityAdvisories?
&gt; and using ‚Äúextensions to yarn‚Äù This is one possibility; we're looking at a few options. &gt; the yarn community that uses it strictly as a replacement for npm (meaning they use it to manage JavaScript libraries)? It's already being used for OCaml, Reason, and even C++; we're talking to some Yarn developers about if making yarn a true multi-language package manager (still on npm, just multiple languages there) would make sense. Esy is another possibility (Reason's package manager). There isn't really a solid blocker against using composer (but executing it with real PHP), but composer definitely want to focus on PHP support. We ideally want to work with a package manager where multi-language is a goal, rather than make (and maintain) something hack-specific.
Thank you. I was not aware that yarn could and does already do this. Thank you. 
Does HHVM / Hack have much of a community? How does one get involved in it? I don't see an active subreddit.
Same goes for PHP. Probably more so. In the early days it was very.... raw
I buy _my_ devs at the dev store.
There is a community which is large enough to carry it for a while - that community is inside Facebook. Having their own language means they can tweak it as they see need, but they have to invest a bit more when onboarding new people (who'd have to learn tooling, libraries, etc. anyways) An indicator for little outside activity is stackoverlfow: https://stackoverflow.com/search?q=Hacklang&amp;tab=newest
Get a load of his bentley web consulting site. It's made of shit wix, which no one uses if they know PHP and WordPress. It's literally just him googling images and posting them on there - most of which are from mobile screenshots. -.- He literally contradicts himself constantly on every sub, he is on a handful of shady subs (scamming, social engineering, etc), and more. Pretty sure he's was dropped on his head one too many times as a child.
I'm currently looking into a variety of them.. A simple google search "recaptcha alternatives" will give a host of sites with "top 8 google recaptcha alternatives" and some of them look quite interresting.. I'm building a PHP library that will support multiple of them, so that in the future I can easily switch between whichever I want..
I'm so so so sorry HHVM took this route :( No one really realizes just how pivotal you guys were (you, especially) in getting us into the modern PHP era. Heck, PHP is still playing catchup. I'm so scared that we'll have another 5+ years of stagnation.
I ported all of my commercial projects **and** corporate clients to HackLang by the end of 2015. It took about 15 months but I still remember the day when I executed `/etc/init.d/php7-fpm stop` ! Unfortunately, I saw stuff failing w/ the lack of PHP 7.1+ support, and I was compelled to port more and projects to PHP 7.2. Unfortunately for HackLang, it took us less than a week to switch back to PHP 7.2, and now Hack is only running specialized high-computation HFT cryptotrading bots, but those are being ported to NodeJS now :-(
Did you like Hack? Do you think it deserves more adoption? Any regrets?
Seriously, I think HHVM and hack was the kick in the pants needed for PHP to get to V7 and all that speedy, type-hinting goodness.
&gt;Because this is PHP thread? Surely you see the parallel. Blaming dynamic typing in PHP for bad software doesn't make sense if Python also has dynamic typing yet the general code quality in that language is more highly regarded. &amp;#x200B; And as for the education comment. I count personal development as education too. Not just a degree or diploma. &gt; I have never, ever met a person who even heard of nested-set. Most of them had university degrees, I do not. This made me laugh. The reason they probably hadn't heard of it is because these days most people refer to nested-set as a "tree" or a "graph". The only place the words nested-set is more commonly used is in reference to the nested-set model. Which is really just a common way of representing a tree (or graph). In university, graph theory and graph traversal is a topic that a lot of time is spent on. I assure you they all know these concepts, probably better than you. The funny thing is if you had gone to university you would know this, and probably would have had a better time communicating these concepts with your colleagues. Don't get me wrong, some of the best programmers I've known were not university educated. Education is more than just the institution or piece of paper. Its a mindset that allows you to be interested in expanding your knowledge. Its great that you've got a good handle on the nested-set model. But don't de-value the years of study in programming theory done at universities.
Programming books? What are those? I haven't bought and since I was in school and they made me. 17 years of mostly PHP and I don't have a single book on it. To justify a book, I'd have to have a specific topic, not just a language in mind. Refactoring, design patterns, etc. are generic skills worth leaning and applying in whatever language you happen to need to work with.
You have to write it so that other developers in your team will understand it. You have to write it in such a way that it can be unit tested. You have to write it in such a way that it will be efficient and not affect the performance of the application. Understanding something is always a good thing, but you should be able to understand the more complicated approach and use it. When you join a workplace, you'll never Google for specific answers to specific problems, you should be able to write algorithms yourself to do this. What you will Google is framework specific approaches or maybe the API docs for a library you are using to see what might be more useful, or to see if the method you are using is doing what you want it to. You will also Google to evaluate different techniques to solve the same problem. But if you can't go into an interview and complete a code challenge without Google then it will not look good, mind you, all you need sometimes is to be able to do it Pseudo code.
There is a small but active community, mostly of corporate users; we‚Äôre not planning on making it larger for a few years, and to be blunt, I recommend waiting: We want to make the language have a sound type system, and remove the need to understand PHP quirks to understand Hack (e.g string equality, == switch statements, ‚Äúcontinue‚Äù in a switch statement in a loop). This is going to be a lot of breaking changes. Even if you like Hack now, and like our ideas, it‚Äôs going to take a fair bit of time to keep up. That said, we‚Äôre working on tools to make it easier for our existing users, but if you‚Äôre not already using hack, I‚Äôd recommend leaving it for a year or two.
The instructions should tell you whether it's open book or not. If they don't specify, ask for clarification, or build something yourself and say "but in reality I would probably use such-and-such method that's in this library".
If we ask a candidate to solve a problem and they spit out 5 optimized lines of code, we either know they‚Äôve googled this or done this before. Either way, the point of the exercise is missed since we don‚Äôt get to see the problem solving side kick in. In the actual job, I agree with you that I‚Äôd rather see you pull in an optimized library that efficiently handles the problem instead of reinventing the wheel, and probably not as well to boot. Most (non-trivial) problems don‚Äôt have pre-made answers, so proving you can copy paste in an interview doesn‚Äôt give me hope that you can reason through a problem on the job. Lastly, being honest is really the best thing you can do. Explain how you would have approached it originally, but you actually learned a better solution and researched how it worked. That shows both sides: how you would have tackled it naively and how you learned new things and internalized them for future use.
I don't get this article. "Here's some PHP code to illustrate a problem, now here's some Clojure code to illustrate the solution" Am I missing something?
Read the takeaway. A less boilerplate solution can be found in pure php as well. 
So why don't you provide an example of that in PHP rather than Clojure. This is a PHP sub afterall.
I don't think it would. And if you came to place where it's an issue you probably don't want to work there. Newbies should realize that writing code is barely ever the issue. Coming up with clean and efficient algorithm is. Once first as a given code follows. Demonstrate your thought process. When explaining how a piece of code you use work focus on not how it works, but why you think you think it allows to complete the task at hand in the best way. Do this, even when it's not most optimal solution, and you'll leave positive impression.
This article is a swindle. The author brags about primitive input validation available in Closure claiming PHP inferior for not having one. In reality, input validation is not that silly as "fill-text" or "positive-number". So you need a distinct validation routine, which, according to Single Responsibility Principle should be a distinct class as well. 
The TL;DR takeaway here is: _do not roll your own crypto_. If you want to hash passwords, use PHP's password hash functionality. If you want cryptography, use libsodium or something.
You get so much wrong. Just skimming through your article I can spot: &gt; You might be tempted to whip up a "service" (a fancy name for a class acting as a namespace to encapsulate business logic in functions) No. A service is an object with dependencies which a namespace doesn't have. How would a user persist itself without a connection or some kind of handle to the storage? Validate itself regarding uniqueness against the set of existing users? "Model" is not just your `User` class, it's your domain layer. &gt; or do you treat it as a dumb data store? If the latter, you should probably just scrap your "class" at this point and use a more primitive data type Typing for data objects obviously has loads of benefits. &gt; To enforce conformance to some spec, types will never get you the power of a runtime schema validation A good enough type system could. PHPs won't by itself. Value objects and DTOs will get you for though. I'm not gonna bother refuting it line by line. It's clearly written by someone who gets more of Clojure and functional programming than OOP and thinks therefore OOP sucks.
To me this was comparing apples and oranges. The author gives an example of business logic written with IFs in PHP and uses filters in Clojure to achieve the same. However, the same could be done in PHP by applying filters or using filtered iterators. Clojure omits the IF keyword, but the same basic expression is used as would have been in a PHP filter, with the difference that the IF keyword is required. TL;DR: clickbaity article with a false promise
Good bot
Thank you, nzodd, for voting on ComeOnMisspellingBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Here is a visual representation of the difference: https://user-images.githubusercontent.com/781074/50142343-2d58c900-02aa-11e9-97a9-05ebffa55242.png 
it's not enough to be able to understand/explain some piece of code you've produced - regardless if you wrote it entirely yourself or found some or all of it somewhere else it needs to be well documented (which is not just commenting absolutely every single line) more importantly, it needs to be _tested_
So writing our own code and abandoning Composer is safer? Safer than battle-tested frameworks?
Curious, how did the number 624 become significant in this case? 
From what you're saying, the ELI5 is basically `mt_rand()` gets its randomness from "fewer" choices than `random_int()`? &amp;#x200B; So going back to my sample functions, if an attacker knows the source of `randomB()` (mt\_rand) and that it was used for generating an access token (say "remember me"), his chances of generating a valid token is high? On the other hand, if `randomA()` (random\_int) was used, then it would be more difficult for him to do it simply because random\_int derives its choices from a bigger pool of randomness. Is my assumption correct?
Why?
Hey - did you install a pre-compiled package, or did you compile it yourself? My guess is that it's pre-compiled, and your system is missing some of the shared libraries it requires, or it's expecting a different system architecture than you have. I'm not familiar with manjaro - does it have a package manager?
This should work fairly similarly for Symfony, I would remove perhaps the database seeding &amp; webpack building and you'll probably have to replace the Laravel-specific code bits (like `artisan`), but otherwise it's just plain ol' PHP.
&gt; "Think of Laravel Collections as a search-able, neatly presented awesome-list but hundred times better" I'm sorry... where is the search bar?
Sorry about that, I am working on the searchbar. I did initially include it but it had some quirks. Will fix it and update here.
&gt; I ask because as a developer if we find a correct answer and understand it completly is it not better to use that then something that might be more complicated? The point of the interview is not to determine whether you can come up some less than optimal solution, google a better one, and recognize that you should use that. The point of the interview is to see how you think and what level of programming proficiency you are at. Not every problem is going to be google-able, so there is an expectation that you can write reasonably *logical* and simple code to solve a problem.
Thanks for your question. I had a lot of links to tutorials and other resources so I decided to share them. That's pretty much it.
&gt; Completely avoid using Composer. Write all your own code... &gt; ...All of these are great steps ‡≤†_‡≤†
I just ask applicants to share a link to their github account. That‚Äôs a good pace to start. Granted, not everyone has one, but a majority of serious developers do. 
Maps are idiomatic in Clojure, not records, not sure why you're advocating this slot based approach, the creator of the language has done many talks on why slot based programming is bad If you wanted to point out that filter and map are universally powerful then maybe advocate maps in PHP since objects don't work with filter or map The powerful thing about Clojure (soon) is that with a map based approach you can spec what data each call point expects, for example if you pass all your data around as maps and then you have the concept of a user and the user has a name and loads of other properties but your function only uses the username of the user you can create a spec for that which only asserts against the relevant part of the data (later in this talk the Clojure creator talks about additions to spec to create a user schema in spec and then how to select parts of it for each call point) https://www.youtube.com/watch?v=YR5WdGrpoug 
&gt;In university, graph theory and graph traversal is a topic that a lot of time is spent on. I assure you they all know these concepts, probably better than you. I assure you, it is not that way here (Serbia). They do learn adjacency list and material path but I was explaining nested-set to each new person. With example of ebay and amazon on white board, that was most effective. One might say that universities here don't have good teachers and I would agree; you get more money working as programmer and the country is in shit. But I have talked with few devs from Germany and USA, same problem. I could be biased because... oh man... you wouldn't believe how incompetent people I met. Some of them were applying for senior position without even knowing implode/explode functions, singletons... And one guy even after not knowing these, still was convinced he could become team leader one day! &amp;#x200B; Why bothering with something advanced like strategy pattern? Or the benefits of Data Mapper over Active Record? Identity-map pattern? I kid you not, it really is that hard to find good developers, at least here, and most of those applied had university diplomas. And it is hard to get employed when CTOs are also on low level; they want to keep their well payed but undeserved position. It happened twice to me, that is why I am freelancer now. &amp;#x200B; So it is hard to make decision. I know if I was to open the company, I would **only** ask to see some real-life code. No diplomas, no programming tasks on useless algorithms... just show me what you have done and we go from that as start. And if they don't have, that's fine; make a blog or small eshop from scratch and call me when you are done. &gt;Don't get me wrong, some of the best programmers I've known were not university educated. Education is more than just the institution or piece of paper. Its a mindset that allows you to be interested in expanding your knowledge &amp;#x200B; That actually is a great explanation, I am stealing it :) I still stand on my original statement: that because of high demand and good money, people not even interested in programming are joining in. And because of simplicity, they can quickly get the basics. But their knowledge is not progressing. As you explained, they don't find education important. Even after 10 years, they would still write code the way they wrote it in first year. With strict typing, such people would pick some other language like JS. That was my point. &amp;#x200B;
I agree while heartedly with you on this. I find I use google searches not for an answer but more for an insight into the process I have come up with. This may sound stupid but I program regularly in several languages and some simple structures like switch statements I dont use often I have to google to remind myself. By simply using someone else's code you will find you lack the foundation to write the code. 
Shameless self plug, sprinkled in here to give a perspective on problem solving and job interviews: https://janmarten.name/random/gold-plating-fizzbuzz-in-php.html
https://www.reddit.com/r/PHP/comments/a72dv4/what_threat_model_makes_random_int_more_secure/
Thanks, I have fixed this, it was just the php version and the php-gd version were different. In case anyone stumbles upon this same issue, check if the php and php-gd version is the same.
just as with spoken languages, reading code is much easier than "speaking" it. when I was a sysadmin, I could have read existing code and explained how it worked and what it did. I could not (necessarily) have started a new file and written code to accomplish the same thing. should I have been given a developer job?
That is why I pay blackfire, even though I don't use it at all. It is a way for me to say thanks for such awesome product that brings me income. &amp;#x200B; If Symfony ever support Patreon or similar, I for sure would subscribe. &amp;#x200B;
Huh, I‚Äôve always replied to that with ‚Äòno, it‚Äôs set to private for a reason‚Äô. If you‚Äôre hiring then you should absolutely have a contextually appropriate coding test. I‚Äôd not have faith in a manager the just asked for my GitHub account: it‚Äôs the managerial equivalent of googling a problem. 
You should use cron jobs as this is what they were designed for.
&gt;Heck, PHP is still playing catchup. \*Hack ^(jk)
That's hilarious.
 I‚Äôm a software engineer but my knowledge of PHP and sessions are pretty limited. I‚Äôm wondering of my idea of secure session management is correct. The application I‚Äôm building has pages that can only be accessed by users when they are logged in. Passwords are salt-hashed and stored as such. When the user succesfully logs in the following happens: \- Session is created, storing their IP address, a (pseudo)randomly generated string, user ID (PK in users table) and a timestamp of the current time \- The record of the user in the user table gets updated, storing the IP address, string and timestamp of above Every time the user visits a page that requires them to be logged in, a function is triggered that checks the following: \- If the timestamp in the session is more than 15 minutes old (basically a 15 minute time-out) \- If the IP address in the session is different from the current IP address of the user \- If the IP address in the sesion is different from the IP address in the table \- If the IP address in the table is different from the current IP address of the user \- If the string in the session is different from the string in the table In any of the events above the user will be considered logged-off, the session will be cleared and the user is redirected to a page that is public. Would this be a safe method?
Nothing supports PostgreSQL 11. I'm stuck on 9.6. Thanks Cloud SQL.
https://github.com/hopeseekr with the blurb "Over 80% of these are not forks but my own code. Over 150,000 lines of custom, mostly PHP, code.
It's a safe method, but most of those checks are pretty pointless. The session is server-side and can't be changed by the user unless you save their input to it. I think you might be confusing the session storage with browser cookies at some point.
If you want to add an extra security layer, you could obfuscate your user id (pk in users table) in case your sessions if compromised. You could use a secret key stored in your app and use it to crypt/decrypt the pk.
In fairness, I have no way of knowing if that‚Äôs actually yours. People will go to great lengths to fake an excellent resume, for a great many reasons; better off with a solid coding test.
Thank you. So the major danger to look out for is a user changing their session ID locally, right? And then doing 1 check (IP or generated string) would be sufficient I assume?
In addition it might cause severe issues for mobile users, where a specific ip might change for each request from the phone - depending on the roaming profile for the network and how far the phone has traveled between requests. The (if necessary, usually it isn't) solution is usually to reauthenticate before a user performs any destructive actions or accesses sensitive data instead, so that you also confirm that the request is coming from the user herself.
Be aware that if you check that ip thing if will unlog you when on mobile networks... It's not usually done...
There is very little danger in this as Session ID's are lengthy pseudorandom strings. Still, it is possible for a user to obtain another user's session cookie - taking measures to protect against this is generally the ideal way to deal with it as IP checks can disrupt mobile users or affect users on shared networks (such as colleges, work, mobile, etc). [I would take a look at the accepted answer on this SO question for information regarding those measures.](https://stackoverflow.com/questions/12233406/preventing-session-hijacking)
&gt;\- If the IP address in the session is different from the current IP address of the user &gt; &gt;\- If the IP address in the sesion is different from the IP address in the table &gt; &gt;\- If the IP address in the table is different from the current IP address of the user &amp;#x200B; Only do IP checks if the website is supposed to be accessed only at the same places, and never on phone. &amp;#x200B; What happens if I am using mobile network while going home, then use my local wifi as soon as I pick up the signal through the door ? What if I use the website both at home and work, will I need to reconnect everytimes ? &amp;#x200B; IP checks are seldom needed, a good random string does the same job, and it will be a huge pain discriminating the legit cases (which happens way more often than you think) from the bad ones. &amp;#x200B; You probably don't need it. Google doesn't bother on gmail, thank god for that, or i would be crazy.
Session attacks are mostly mitigated by using HTTPS. There are a lot of old blog posts that suggested doing crazy hacks to detect session fixation attacks, but all you need in PHP 7 is: session_start([ 'use_strict_mode' =&gt; true, 'cookie_httponly' =&gt; true, 'cookie_secure' =&gt; true ]);
What other book would you like ot get as a gift then?
Thanks for bringing that to my attention. I didn't even realize IP addresses can change so frequently when using a mobile phone.
It's easy to say that _now_, but in the world of PHP where many things/most things are legacy, it's really saying: update everything to use something that didn't exist before. I'm all for doing things right, but I'm not sure everything php suggests today is right, either...
Yes. But only if you wanted it. No face some mirror and tell yourself with straight face that you would not be able to quickly learn it. ;)
So this is the last time we read something about it. I know this also brought us where we are today with PHP 7 being a good solution for webdev, but sometimes it's good to go your own way. (My way is "stick with the standard") So, goodbye fellow traveller....
Say you wanted to check a variable against an array of data, succinctly, without using array\_search or writing out a lot of $x == 1 || $x == 2 et al.. Is there a need for this? We seem to have it in SQL and Python (and probably others?).
The in_array() function is your friend 
What if the data isn't in an array?
SQL: "SELECT \* FROM table WHERE id IN('1','2','3')" Python: "if o in ('1', '2', '3')" PHP: ??
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I fundamentally love Hack, and all of its devs I interacted with, esp Fred, are top notch and always listened to me with respect and never once was a ticket just arbitrarily closed or ignored for months and months. And in fact, I remember being **floored** when FB sent me an unsolicited four-digit cheque for discovering and fixing a relatively-simple password hashing bug. Personally, I wish it had won the war, instead of PHP piecemeal adopting its best parts just to stop the attrition.
Your question specifically mentioned checking against an array. 
Don't get me wrong. I use the latest features of PHP 7.1, 7.2 and 7.3 but I still find it more convenient to save-and-try with no steps in between.
Just FYI, The hack devs, esp Sara, literally created the PHP standard. Something ZendCorp was totally negligent in (and still is!) for decades.
I think pthreads can have shared memory. Never really used it, so can't help much but here are the links: [http://php.net/manual/en/book.shmop.php](http://php.net/manual/en/book.shmop.php)
`$o = 'x';` `if (in_array($o, ['y', 'z', 'm'], true) {` `}`
Not all made the cut. Some where discarded entirely. PHP 7 is a different thing entirely, and that's a good thing.
Makes sense, thanks.
What else would it be? `Array` is the native type in PHP that can store a set of values.
Blame the companies that spent 2 decades using them to rip developers off for product ideas.
&gt; Passwords are salt-hashed and stored as such. Sorry if this comes across as condescending, but since you didn't specify - you're using a modern, secure hashing algorithm, right? And you're using, say, `password_hash()` or libsodium, rather than rolling your own crypto?
I think it is a most useful release in Laravel Ecosystem!
Good job on having separate images/containers for everything. I too often find docker images, where nginx/php/mysql is all in one image/container... &amp;#x200B; \+1!
Surprisingly, this isn't about password hashing, but instead about random password generation. But that's still good advice.
Honestly, the math is a little above my level. It has to do with how the algorithm mutates the state, but that's as far as I know offhand.
I'm using hash() with sha512. The first salt value is the IP address of the user at the moment his password is generated. Then there's the password of desire in plain text. The the second salt value is the current date and time and a random bunch of characters. The full string is then shuffled and hashed using md5. So basically: salt+password+salt(md5) And the above is hashed with sha512.
I like the type hinting but PHP without the strict types is actually one of the most pleasant things about the language - eg. you pass any of 1.0, 1, "1" and your "int" type hint should be enough to implicitly convert the value to integer.
std object.....
So, you actually have nothing than an idea?
That‚Äôs not what the OP asked, but you can check if an object has a property with `property_exists`: ``` property_exists($object, 'someProperty'); ```
So you have a column to store the account create IP ? That's ... not needed, and if using password_hash($userPass), you don't need to generate a salt yourself. Also, sha512 is not as good as the Bcrypt algorithm used by password_hash(). 
Pretty much.
Good luck!
I'm afraid that's a lot less secure than simply using `password_hash()` or libsodium to handle password hashing and verification for you, most notably because you're using a general-purpose hashing algorithm (SHA512) rather than a password hashing algorithm. Password hashing algorithms are specifically designed to be computationally expensive, making bruteforcing them much less effective. I suggest [this](https://phptherightway.com/#password_hashing) and [this](https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-passwords) as further reading material on how to safely deal with passwords in PHP.
I don't have any idea about your knowledge/level of skills, this is basically a shot in the dark, but maybe it will help you out. So first things first: 1. Make sure you have a git repo to store your source code in 2. set-up your local development environment (you could use docker or a VM) 3. just fiddle a bit with [https://github.com/Gutza/octave-daemon](https://github.com/Gutza/octave-daemon) / [http://projects.moongate.ro/octave-daemon/](http://projects.moongate.ro/octave-daemon/) and test your luck 4. Document what operations you would like to do 5. Maybe choose a framework (i'd start with something simple like Lumen or CodeIgniter) and start making endpoints that perform these actions Good luck. 
Thank you, I will read it when I am back home. I appreciate your input.
In this case, its a tuple, rather than an array: [Tuple](https://docs.python.org/3/library/stdtypes.html#tuple): `x in (1, 2, 3)` Array: `x in [1, 2, 3]` Neither: `x in range(1, 3)` `in_array` works (inefficiently) here, but there's probably a better way-- in general.
More-or-less. There are some other nice properties of `random_int()` too. `random_int()`. cryptographically secure, so not only is there a larger number of possible sequences, it's also an unbiased distribution of randomness. Additionally, even if you leak 1,000,000 successive outputs of `random_int()`, you gain **no** information about the next sequence of randomness. (This is because the kernel's CSPRNG is essentially a stream cipher.)
https://github.com/phpexpertsinc/docker-php-stack
Come on, it cannot be serious
He literally said ‚Äúcheck against an array of data‚Äù, and there is no such construct as a tuple in PHP. 
One question is: Where do you put the key and who is going to access it?
You really suck at article writing. I have never even seen Closure before. It's NOT that popular. 
Exactly!
I just want the respective user with the admin role to access it, I'm not exactly sure where to put the key since i never applied it. I would just like to present it as a simple demo for a project of mine.
[removed]
You can set up PHP CodeSniffer to use a standards file. Most IDEs I‚Äôve worked with had support for CodeSniffer. To enforce you can run CodeSniffer during CI. Voil√°, everyone one the same code style.
Firstly this is a terrible test of someone's coding ability, but a decent test of their ability to solve a problem. We use a test that requires you to connect to to an API and do some simple database work, not necessarily SQL we accept any db such as mongo or sqlite. The idea is that we Google for answers all the time, bit the problem we ask you to solve is not googleable. For the team I'm on we would look at it neutrally. That is to say we would be pleased that you sought out the best possible solution, but disappointed that you didn't solve it yourself. If you do go this route ensure that you include a comment to the source of the solution. Keep in mind that you're being hired for your ability to solve coding problems. A part of that is searching for answers, your job as a programmer is open book. If you are worried, wrote the solution you wanted to use, comment it out and put the found one. Submit your results with both, and a comment explains that you felt there was a better way and so you searched for it in an attempt to learn and grow your knowledge base. Good luck. 
What's your beef exactly?
I see but if you want to make something secure, you need to put the key not on the same machine you're trying to protect. That makes it difficult for "normal" users. PHP has GPG / PGP functions with a decent encryption but the risk is to implement it very well. Most fail with this.
I would disagree with on this. Perhaps it's what you're looking for when hiring. Personally of he'd included both as a "I did this and it felt like it could be better, so I found this and learned something on the way" I would respect the shit out of that. It shows a drive to improve and learn, which is very important in the ever changing world of programming. As long he's up front about his solution and it's not the only example asked for, I see little problem with it. Googling shit is 90% of my day, the other 10 is spent understanding and applying those solutions to the codebase in front of me at the time. 
Mine?
If you have to ask this question you should not be doing this.
This is probably the most realistic answer here. 
Yes. You seem to disapprove of this submission.
Why not starting taking inspiration from popular frameworks?
Oh alright, sorry for my misunderstanding, I am new to this. I tried to google a few things and i suppose i wasn't proficient in my search. Thanks for informing me 
Can you possibly recommend any specific frameworks i can inspire from if you dont mind?
I apologize, I'm kind of new to trying to applying this method i am still trying to learn all of this security implementation process
That's helpful
Thanks got it.
That's totally OK - as I said I do not want to disappoint you in any way. I just try to throw in some experience.
anyone have a good solution for docker + magento 2? I still can't find a box that works reliably and doesn't shit itself on static-content deploy, even the official magento team's box shut down after they couldnt get unison working. 
Despite what it claims, it is not minimalist and hardly a framework, but rather a patchwork. Its overall appearance is a decade old with some components twice this age, which makes them rather dangerous. A database wrapper is one of such patches, it is not even namespaced, let alone its contents which is written as though there is no PDO around, no OOP support in the language and out of a [dangerous assumption](https://phpdelusions.net/top#escaping) that mysqli::real_escape_string's purpose is to protect from SQL injections.
I ended up just using devilbox for magento. https://devilbox.readthedocs.io/en/latest/examples/setup-magento2.html
I'll admit I didn't install it so I can't really judge. But in almost 20 years of web development for different companies, the majority of the code I worked with was legacy code without namespace usage and dangerous assumption all over the place. Unless I'm somewhat the unluckiest developer on earth, my guess would be it's the day-to-day business of most web developer. Considering the target audience of this ¬´ Learning MVC starter ki t¬ª, I'd risk saying it's probably good enough. 
&gt; ... to encrypt my data with respect to the database without using the given functions from the php library. What do you mean by "without using the given functions from the php library" exactly? If you want to just encrypt data in PHP so your database never sees it, https://stackoverflow.com/a/30159120/2224584 If you want searchable encryption: https://github.com/paragonie/ciphersweet (check out the documentation, etc.)
I assume that companies you worked for did not advertise their questionable code base as Learning MVC Starter Kit With Examples For Developers at Every Level and Startups. Or did they?
It looks like prepared queries ([https://github.com/Helium-MVC/Helium/blob/master/src/He2Model.php#L364](https://github.com/Helium-MVC/Helium/blob/master/src/He2Model.php#L364)) are being used so the mysqli is mute, but I do agree the DB wrapper can be re-written.
I basically needed to encrypt general Data or a password, Then i looked up simple cryptography related codes like caesar cipher.
I apologize i didnt elaborate, i meant that i didnt want to use hashing of any kind. Thank you again for your response!
Passwords: [Don't encrypt them](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded#passwords) if you're storing them for authentication purposes. Encryption is the wrong for the job. General data (i.e. for storage, not verification): Okay, encrypt it. Make sure you use something battle-tested by cryptographers.
I understand the reasoning, but Docker containers should be one-responsibility per container, not necessarily one-service per. [I just released my latest blog post explaining my reasoning, as well as a very flexible solution](https://jtreminio.com/blog/all-in-one-php-fpm-nginx-apache-containers/). Having to manage less containers simplifies things and requires less building. Your Nginx service really only needs to know the PHP TCP address and have access to static files (images, HTML files, etc) which overlaps with what the PHP-FPM service also requires. Why not join them into one?
üòÇ yes totally. But this is just an aid to automation. The plan is to get everyone doing this themselves with a simple to set up tool. The Ensemble client (plug-in) is completely Open Source so you can see what it‚Äôs doing and it will encrypt the data it sends so it can be used securely even for apps that still run over http. There‚Äôs nothing malicious about Ensemble, it‚Äôs only trying to help.
It actually uses Roave/SecurityAdvisories under the hood, as this is one of the signals we can use to help identify when there‚Äôs a problem package in the wild. The problem with Roave on its own is that if you don‚Äôt do a Composer update/install for a while, you‚Äôll never know there was a problem if one is announced against a package version you‚Äôre already using after you installed it.
&gt; Launches 'goto' resource site &gt; No search feature 
I don‚Äôt think I‚Äôm encouraging that at all. I used that one line as a tongue-in-cheek bit of hyperbole - of course you shouldn‚Äôt do that, but if you were totally hung up on being secure, that might be an idea you‚Äôd have... and I‚Äôm sure some do think that way! I think what Composer has enabled is phenomenal and we should not go back to the way things were. But even a battle-tested framework that relies on many third-party packages (despite many eyeballs) is still a liability. Way more of a liability because of many more entry points into the codebase through uncontrolled sources. It‚Äôs the one side-effect of this whole thing that none can avoid - unless we go down some road of formal package approval.
I'm new to php. I copypasted a login system for my website, but replaced some names from my database users: id -&gt; user\_id username -&gt; user\_name password -&gt; user\_pass It worked before I changed these names, but now I get the error "Something went wrong. Please try again later." (see row 83) [https://codeshare.io/GAOAWr](https://codeshare.io/GAOAWr) Did I forgot to change something?
I think what you‚Äôre trying to say is that I could improve my wording slightly in that one sentence? Noted
Laravel has built in encryption. The keys are stored as environment values, I believe (need to double check that though ) 
Hey /u/fred_emmott, is there an alternative in HHVM/Hack for `assert`, which is apparently being removed? I know in PHP it's sort of a disaster because it multiple possible behaviors depending on ini settings, but I think there are real uses for it.
Looks like the database doesn't like something. Without seeing the database, it's hard to say. However, you can make that error message more informative by using [mysqli_stmt_error](https://secure.php.net/manual/en/mysqli-stmt.error.php) to tell you what went wrong.
Also, please see /r/PHP rule #4.
Please see /r/PHP rule #4. Also, use [libsodium](https://paragonie.com/book/pecl-libsodium/read/00-intro.md) for your PHP cryptography. Use `password_hash`, et al for your passwords.
[https://imgur.com/3Qna6de](https://imgur.com/3Qna6de) &amp;#x200B; this is the database 'users' 
oh, I'm sorry. To be honest, I didn't read them until now. I won't be bothering this platform from now on. Thanks for answering anyway :) 
So PDO all the way instead of using mysqli. Also is $link defined in the config.php file you include? One of the things that would close in on the culprit would be to differentiate the error messages. ex.. "**Oops! Something went wrong. Please try again later. - User name**" and then the pw error block being "**Oops! Something went wrong. Please try again later. - Password**" 
You need to also supply the user email. That column is defined as not being nullable and does not have a default, so any attempt to create a new row without a value for that will fail.
Yeah. I hate to be that jerk who points it out, but /r/PHPhelp exists for things like this. This sub is more for news, libraries, etc.
omg! thank you!! 
Interesting title, I suggest an alternative: "How to add a SaaS platform as a dependency and over-complicate your infrastructure when using your own server resources would be more appropriate." - more accurate, if a little lengthy.
The framework bills itself as a valid option for startups, meaning Greenfield projects. Looking at the design of this "framework", I would rather use CodeIgniter 2. It still utilizes a global registry object instead of dependency injection, for example.
To aid mobile users, I'll link small subreddits not yet linked in the comments /r/phphelp: Post specific problems or questions you have about PHP or your code. Hopefully someone will be able to help you out! If you got something out of here, please contribute back and help others :) --- ^I ^am ^a ^bot ^| [^Mail ^BotOwner](http://reddit.com/message/compose/?to=DarkMio&amp;subject=SmallSubBot%20Report) ^| ^To ^aid ^mobile ^users, ^I'll ^link ^small ^subreddits ^not ^yet ^linked ^in ^the ^comments ^| ^[Code](https://github.com/DarkMio/Massdrop-Reddit-Bot) ^| [^Ban](https://www.reddit.com/message/compose/?to=SmallSubBot&amp;subject=SmallSubBot%20Report&amp;message=ban%20/r/Subreddit) ^- [^Help](https://www.reddit.com/r/MassdropBot/wiki/index#wiki_banning_a_bot)
This is copypasta from the side bar. Please read the subreddit's rules, etc.
Well, that's how I architected my Docker PHP stack: https://github.com/phpexpertsinc/docker-php-stack Nginx + PHP-FPM in one container. Works better that way, especially on Google App Engine Flexible Environment, where it's the only option.
Good to know! Thanks.
In my experience, many experienced developers take "don't Google solution, do it yourself" to practice. Instead of using existing package, they re-create locally almost the same code. Once, I've worked in a company, where the lead developer re-invent whole Doctrine (true story... very sad one) I would actually use such question to tests if they're able to find the answer faster than re-make whole code :) I'd also add one more that is not-Googleable, to see how they approach that. As a bonus, I'd add a question that has mostly miss-leading results in Google Search, to see how critically they approach a new problem.
`invariant()` is the preferred replacement; that said, since I posted this release notes, a few users have brought up some patterns (e.g. using `assert()` to inform the typechecker, but at runtime only get a warning if it's wrong) that there isn't a direct replacement for, so we're re-considering this; it's likely that we'll end up requiring that the first argument to `assert()` is a bool, and removing the string behavior - and I'm happy to see that's deprecated in 7.2!
What about CI daily CRON? That's what I do on Travis.
&gt; Personally, I wish it had won the war, instead of PHP piecemeal adopting its best parts just to stop the attrition. I love Hack Collections! In many ways, I always thought of it as PHP-done-right. Funnily enough, we're hoping Hack Collections die (or move to a separate library) some day; our experience with them made us better understand the benefits of the copy-on-write model used by PHP arrays, which is why Hack's now got the vec/dict/keyset value-types
&gt; I'm so scared that we'll have another 5+ years of stagnation. Looking at the 7.x changelogs, I feel that there's been a cultural change here within the PHP community - I'm optimistic about the future of PHP (and Hack ;) )
If you‚Äôve got that set up that‚Äôs great. Not every project warrants/needs that setup. It may be preferable. Also Roave is limited based on how quickly the issue is identified and added to the rules. What if there are other more complex signals such as code analysis or public reports? Travis won‚Äôt be able to do that without a lot of extra setup. I‚Äôm hoping Ensemble can make this step easier for those who want make it easy for themselves.
True, but both have so little activity that I'm not bothered at all when people ask for support on /r/PHP if there was more traffic, I probably would think otherwise - that was my 2 cents.
Ahh I see, so it has to do with the math in mt_rand()?
Cool, that was fairly painless to setup!
&gt;Unless I'm somewhat the unluckiest developer on earth, my guess would be it's the day-to-day business of most web developer &amp;#x200B; Looks like you are :) Or I am the luckiest as I never ever worked with some crap software. &amp;#x200B; About the post: Just check the code, it is not a framework and definitely not something anyone should use. Sorry /u/blackmagex2 but it really is bad. I would recommend you to install Symfony4.2; in less than hour, you can build full blog site with real validation, excellent ORM, DI... and have &lt;100 ms response, easily. When you do it, you will understand my point. I know it is fun to make own things, I did that myself, but it is crap compared to S4 and would never use it again.
.. as [password_hash()](http://php.net/manual/de/function.password-hash.php) PHP function whose strenght can "grow" with new machines or attacks.
If there is a rule in programing, never roll your own crypto/security algorithm. &amp;#x200B; Cryptography is less programing than math, and one of the few specialty you can't learn along the way. &amp;#x200B; Either you had a solid formation in crypto (meaning years of hard focused work, not a book and 2 months), or spent years in crypto related subject, or don't even dream to write your own.
Being able to read and explain a few lines of code is completely different from being able to hear a problem, understand the problem, and create something from nothing to solve the problem. Here's an anecdote. So this past fall a young man who previously interned for me asked me if he could do his senior project for college for my business. I agreed to it because I'm a big softie. I've known him for years, and want to see him succeed and I try to mentor him every possible way I can. But holy cow, does he suck at coding. I came up with what I thought was a relatively simple project. A REST API and basic front-end for the start of a team management app. CRUD for Users, Groups, Projects, Tasks. A few REST endpoints. Some database CRUD. A basic frontend with a little Bootstrap, and a little JS to read/write the REST API. I promised him I would implement one feature start to finish as an example. After I gave him what I promised him and told him to implement the rest and ask questions as-needed, well... he did almost nothing. The project he presented to his class was basically the code I had written, for that one feature. He could read my code enough to sound like he understood it, and act as if I was being condescending when I questioned his understanding. But he didn't know the language or libraries involved enough to take a working example and adapt it to the next data type over. And he didn't REALLY understand my code because, if he did, he would have realized he could essentially copy/paste it and replace some identifiers to make it work for the next feature. This was a 4th year CS student, folks, at a relatively expensive university. After all of this, his professor gave him a 92% and sent him off into the world. We should all count our lucky stars he's our competition in the job market. 
Yeah don‚Äôt bother rolling your own password hashing mech, php password hash and check methods can defer to the OS installed packages and able to use the strongest encryption that‚Äôs configured, so you can use stuff like argon2 and bcrypt without changing any of your code. Additionally as others have said - don‚Äôt knock people out if the IP is different, you should base it on a cookie. Store a https only cookie which contains an encrypted session id so when you receive the cookie you can decrypt on the server, see who it belongs to then auth them. If the user tries to tamper with the cookie it won‚Äôt decrypt. Yes if somebody steals your cookie they can login, but that‚Äôs no different to stealing a password/api key etc Also you don‚Äôt need the server side 15 min timeout... you can just set the expiry on the cookie you send back each time?
You're giving off the wrong vibe in that title, in my opinion. You should explain that you made this in the title. Be more humble and you'll get more traction I think.
PHP and MySQL Web Development
1. Low token entropy: 128-bit phpsessid tokens are too weak in terms of hash entropy, to cover this use \`openssl\_random\_pseudo\_bytes\` or \`random\_bytes\` with at least 256-bit long token over \`session\_id\` 2. Fingerprint: using IP as a fingerprint is nonsense, you end up terminating sessions for users on IP changes, even if they still use the same machine, instead consider using geolocation, user-agent, browser fingerprint, locally stored fingerprints 3. Timeout: timeouts are okay, but 15 minutes seems to be too fast, consider using both refresh timeouts and expiry timeouts instead 4. Storing tokens in the database is bad: if leaked anyone can grant himself access to any account 5. Stateless sessions/tokens: switch to stateless authentification methods such as JWT to avoid storing tokens on your database and in the session storage bucket 6. More considerations: PHP sessions are generally considered as stateful tokens, stateful tokens are tokens that leverage the assumption of storing tokens on secure storage ends while retrieving them for matches when needed, this assumption make them not the best suitable for scalable applications ‚îÄ consider using stateless tokens such as JWT with short rotation TTL ‚îÄ, login form security is also mandatory, you show few or no hints on password, username/email correctness ‚îÄ even in signup forms ‚îÄ, sessions and tokens, if not secured well, can be vulnerable for attacks: CSRF, MITM, CF, hijacking, and Clickjacking ... etc
Specifically, it has to do with the math of the [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister) algorithm.
**Mersenne Twister** The Mersenne Twister is a pseudorandom number generator (PRNG). It is by far the most widely used general-purpose PRNG. Its name derives from the fact that its period length is chosen to be a Mersenne prime. The Mersenne Twister was developed in 1997 by Makoto Matsumoto (ÊùæÊú¨ Áúû) and Takuji Nishimura (Ë•øÊùë ÊãìÂ£´). It was designed specifically to rectify most of the flaws found in older PRNGs. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Netbeans is a great IDE but a (temporary) unfortunate thing recently has been its move to Apache Foundation, which delays releases due to all the bureaucracy that needs to happen on the move. Hopefully, it will end soon. But you can now use the latest Netbeans release with PHP 7.2 and 7.3 support, which works pretty well already. For Windows: * download binaries from [https://dist.apache.org/repos/dist/dev/incubator/netbeans/incubating-netbeans/](https://dist.apache.org/repos/dist/dev/incubator/netbeans/incubating-netbeans/) * install JDK 11 (when using regular JRE 1.8.x I experienced buggy high CPU usage) Current release is 10vc5 (release candidate). The download location I showed above will probably change once the final release gets out - follow [https://netbeans.apache.org/](https://netbeans.apache.org/) and [https://blogs.apache.org/netbeans/](https://blogs.apache.org/netbeans/). Enjoy!
I stopped reading after ‚Äòcopypasted‚Äô
Those are probably stubs for whatever IDE you are using so that your IDE can autocomplete, do static analysis, and other tricks of the trade. They are empty because core PHP code is compiled. It doesn't exit as text files in your IDE. The code is written in C and looks like this: https://github.com/php/php-src/blob/7f54a153ff5b739b3c3c5783036346a8ec456b86/ext/pdo/pdo_stmt.c#L1367 
Visual Studio Code looks fine for most use cases, but things like this make me return to JetBrains without a second thought.
What you are looking at is a [function prototype](https://en.wikipedia.org/wiki/Function_prototype). &amp;#x200B; I don't think you'd want to take a peek at the source code of PHP. Not yet, anyway. :)
End of an era. So long and thanks for all the PHP 7.
&gt; the PDO SQL tutorial ***a*** tutorial, not ***the*** tutorial. And it doesn‚Äôt look like much of a tutorial either. [Heres a much better one](https://phpdelusions.net/pdo) As for your question, I don‚Äôt know exactly what you‚Äôre looking at but the [PHP manual](http://php.net/manual/en/pdostatement.fetchall.php) has actual information on the function. Best place to start for looking up what a function does. 
Ok thanks. I was looking at some general beginner PHP tutorial I can follow, and W3schools seemed like a good place to start. I don't need a comprehensive PDO tutorial. What's a good PHP tutorial btw?
Any tips for looking for source code of specific functions?
A few reasons: 1. You can replace http server, e.g. run apache instead of nginx 2. To maintain nginx image separately (as we do it) that used not only for fastcgi+php 3. You can scale them separately, not every additional php replica need an additional nginx 4. Sometimes it's enough to run a built-in http server, thus no need for nginx/apache 5. As for static files you don't always need them, for example, if you're running a decoupled application you probably have no static files on your API server, hence there's no need to have codebase in nginx. Also, if we're talking about persistent static files it will probably be a separate volume that mounted both to nginx and php containers
VSCode is not a competitor to Netbeans IDE. It's not a full-fledged IDE, and is not a contender for large scale enterprise development. I love VSCode - I think it's polished and slick, but it is NOT an IDE. It doesn't even have proper rock solid code navigation for large projects (which is pretty much the first and number #1 feature an IDE should have). As for PHPStorm it's nice but I always just used Netbeans because it was 100% capable, solid, robust and free. So there was no reason to switch. With the release of 9 being more cumbersome to install and not having inbuilt support for PHP, I might switch now. 
I've been a huge, vocal fan and advocate of Netbeans for many years now and am extremely disappointed to learn they dropped support for PHP with version 9. I was excited about Apache and everything but really feel let down by this. Might try PHPStorm again.
Design Patterns from the Head First series. I think examples are in Java, but they are easy enough to apply to whatever.
I can't believe they would do this. Seems EXTREMELY short sited. One of the most popular programming languages in the world, and they had a reasonable stake in it. Why would they do that?! I for one have been a huge advocate of Netbeans for PHP but this is a letdown and I'll look elsewhere now. 
I agree, the landing page copy needs improvement, I also need to put up an About page to explain in detail. It was on my todo list for the weekend. Thanks for your suggestion.
Since there's aren't thousands of links, I saw no need for a search feature right away. Again like I mentioned, I did build it in my prototype but it's a bit quirky. &amp;#x200B; Thanks for your comment anyways.
&gt; https://github.com/php/php-src/blob/7f54a153ff5b739b3c3c5783036346a8ec456b86/ext/pdo/pdo_stmt.c#L1367 you should be able to find what you're looking for here
&gt; What's a good PHP tutorial btw? that really depends on what level you're currently at. Is PHP your first language?
Unfortunately w3schools are notoriously dubbed as w3fools for providing the content of worst quality possible
Not first, I know some Java. But I am a newbie overall. I want to learn Laravel eventually, but I read that it is important to get a good grasp of the raw language first.
You‚Äôve never contributed to anything that‚Äôs publicly available on GitHub?
I'm surprised nobody has mentioned https://phptherightway.com/
&gt; VSCode is not a competitor to Netbeans IDE. It's not a full-fledged ID Sure it is, when it comes to PHP development. The lines are blurred these days. There is nothing that I'm aware of that Netbeans can do that VSCode cannot when developing php/web based applications. Feel free to enlighten me. &gt; not a contender for large scale enterprise development I can assure you, some of the largest scale enterprise development is done with VSCode. That said, I've seen a good number of enterprise apps in my career, don't recall one being PHP based :) &gt; proper rock solid code navigation and code completion for large projects I'll admit I don't know what 'proper rock solid code navigation' means, but VSCode allows you to navigate your code base quite quickly and has code completion for projects of any size in (basically) any language with extension support for tons of frameworks. 
Yes I have I guess, but I always set my personal stuff to private. I can‚Äôt stand those people who spam every available forum or meetup with their pointless little browser plugins or whatever.
I'm not sure what I'm looking at here. Could you explain that a bit more?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Am I the only one that does not use Composer? &amp;#x200B; I try to keep the dependencies as few as possible and to avoid any build steps. It used to be ok several years ago but it seems that now (almost) everybody prefers "composing" and "building". Don't get me wrong. I use the latest features of PHP 7.1, 7.2 and 7.3 but I still find it more convenient to save-and-try with no steps in between.
Well, if you're asking about searching in the codebase, for the most functions searching for `PHP_FUNCTION(function_name)` should work. And for the method it's just like it shown by the link: `PHP_METHOD(ClassName, methodName)` But whether it's possible to have it in the IDE, I don't know. 
If you want to learn Laravel, just start with a Laravel tutorial and pick up PHP from there. As someone with some programming experience, it‚Äôs not like you need to learn the basics again.
One example would be to execute a PHP script asynchronously and set time limit to 0, so that it never stops.
Nice. Thanks
Nice thanks !
They made great improvements recently! Unfortunately it's still a hassle if everything is remote, as in vagrant remote. The amount of first time setup and dialogs is still daunting. Nevertheless once it's running, almost indistinguishable even with unit test Debugging, nu favorite. 
They did not drop PHP support. They had to *temporarily* make a release without PHP and other plugins because the process of getting all the source code from Oracle was still not finished then. But it's finished now and Netbeans 10 release candidate has PHP back with 7.2 and 7.3 support and there are no plans to remove PHP support ever. Download a working version [here](https://dist.apache.org/repos/dist/dev/incubator/netbeans/incubating-netbeans/) and watch the [blog](https://blogs.apache.org/netbeans/) for most current news. &amp;#x200B;
Additionally, a post like this isn't going to make any difference, the overwhelming majority of people making help posts here aren't regular members. I would imagine most people don't read subreddit rules on any subreddit before posting, especially if they're on a mobile device, where the sidebar is rarely visible and there's only a tiny note about it on the submission page (which anyone posting from a mobile device still won't see). People are *always* going to make support posts here, the only thing that can really be done is what already happens on every help thread, four people replying to say to go to /r/phphelp, and four people replying with the answer.
[Must have ;)](https://covers.oreillystatic.com/images/0636920046516/lrg.jpg)
Only possibility is to check out the source code written in C, so it wont give what You look. Every compiled modules, or for example phalcon has interfaces that provides You simple documentation what methods are available, maybe some primitive phpdocs. &amp;#x200B; For full documentation You should search official documentation: [http://php.net/manual/pl/book.pdo.php](http://php.net/manual/pl/book.pdo.php)
There's another case besides mobile: I implemented IP checks on an app once, and found out it wasn't usable at the neighboring university. It turns out that if an organization is large enough they have to use a pool of IPs for outbound, and each request can come from a different IP in the same range.
Look at this - [https://github.com/REBELinBLUE/deployer](https://github.com/REBELinBLUE/deployer) . Easy and convenient to use. Written with Laravel also.
I just build my project locally, and then use webhooks for deploy. But if you need more functional solution, consider Jenkins or similar.
It's a setup and forget thing for me, since I don't work with app code, but rather CLI packages. I'm probably not your focus group :)
Give a go to heroku and similar
We are currently using capistrano which is being run by bitbucket pipelines.
Gitlab CI pipeline with jobs for build, package, test and deploy. The deploy job just triggers an ansible playbook.
There are many, many different ways of deploying a modern system, but in most cases the fundamentals are the same: 1. Locally, your changes are pushed to your version control repositories production branch. 2. On the remote server, the changes are pulled down from the production branch. 3. Package managers are run to install the versions of packages specified in the lock files (Composer's `composer.lock` and npm's `packages.lock`) 4. Any task runners are executed if this doesn't happen locally 4. Database changes are migrated 5. Caches are cleared In Laravel, that remote process looks something like this: git pull origin master # Install production Composer packages from composer.lock composer install --no-interaction --no-dev --prefer-dist # Install production NPM packages from packages.lock npm ci --only=production # Run Laravel Mix to compile JavaScript, SASS and npm run production # Execute any new database migrations php artisan migrate --force # Clear caches php artisan cache:clear php artisan config:clear php artisan route:cache php artisan view:clear There are of course *many* ways to improve, safeguard and automate this very basic process. Building off of the above script, you could have a symlink pointing to the live directory, when the script is run you copy the existing live directory to a new location and run all of those commands (up until the database migration) against that copy, leaving the live site unaffected. Once that is complete, you then change the symlink to point at the updated folder. Tools like [Deployer](https://deployer.org/) (self-hosted) and [Envoyer](https://deployer.org/) (SaaS) make this process easier to manage and potentially more reliable. From there you can grow the complexity of the system in many different ways, using continuous integration tools such as CircleCI, Travis CI or Jenkins to automate the build process, run tests and compile assets before deployment. 
Make change, trigger build from CI (probably via webhook), build Docker image, push Docker image, trigger command to deploy the image (e.g. if using K8s, Helm maybe, etc.)
The best setups automate everything. All of our projects allow us to deploy using a single command from the command line on various remote environments. This includes, checking out source changes from version control, installing new dependencies, migrating database changes, rebuilding caches, preparing front end assets such as css files, javascript files, fonts and images etc. all triggered by a single command. We use deployer to orchestrate build tasks on remote environments but we've found that in practice, the best way to deploy is to write your build task into bash scripts and then just use deployer to run bash scripts remotely. Having used various tools over the years to orchestrate build tasks including puppet, deployer, capistrano etc. I'm back to thinking that bash scripts are the simplest and most versatile approach. If you are using docker, you can carry out many of your build tasks locally, build it into a new version of your image and then you just have to pull a new version of your image on the remote. [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)
Pick one: * Heroku * PlatformSH * Docker on GKE, EKS or similar service If you have no idea of what I'm talking about, go to Heroku.
Capistrano for me - it just runs a series of commands on the remote server - e.g. \- Checkout latest code from GIT \- Copy into sensible directory \- Change symlink (for zero down time deployments) \- Run migrations / restart queues &amp;#x200B;
I am using Deployer; it's great :) Not too complicated, and very configurable/programmable. Lightweight too.
We use https://github.com/andres-montanez/Magallanes. It works well with all of our Symfony Projects, we don't use Laravel, but i expect it to working well with it as well. Magallanes can be triggered locally, but we're running it either through Jenkins or Gitlab CI Runners. But, no matter what you do, work with Git, use the "master" branch for live deployments, "develop" for staging deployment and feature branches for developing single tasks. this is basically the gitflow workflow, look it up. Once you've adapted to gitflow, a live deployment is only merging develop in master, a staging deployment is only merging a feature branch in develop. then jenkins or gitlab ci picks the change, runs tests, builds the projects and deploys it throug Magallanes to the server. ps: ... and you want a release deployment, because at some point you may want to roll a deployment back.
I do `git tag {newVersion}` and, once my CI server says tests are okay, it ships that code to production. More specifically, my repos include a set of scripts to build docker images with [multi-stage builds](https://chrisguitarguy.com/2017/12/16/multi-stage-docker-php/) for the PHP and Frontend side of things. Once those are built, the images are pushed to Amazon's ECR (Elastic Container Repository), and then the script updates Amazon Elastic Container Service (ECS) to point to the new code. Once ECS sees that I'm trying to deploy something new, it does a blue/green deployment of the new containers. All of those steps can happen locally (via a `./bin/infra/deploy` script) or via some automated means (we use Amazon's CodeBuild).
I think the most important thing is to have atomic deploys. Without atomic deploys, PHP files of different versions are on the server during a deploy. For low traffic applications this is fine. For high traffic applications it may become a problem. For a request that's being executed it can result in error/fatals/problems because the PHP files may not be compatible. There are many deployment tools that support atomic deploys, e.g. [https://github.com/deployphp/deployer](https://github.com/deployphp/deployer). Atomic deploys go hand in hand with git. If you need to deploy on a shared hosting, you may not have access to git. In that case it's fine to deploy with FTP. Atomic deploys also allow for easy rollbacks etc.
PHP closures are so clunky to work with. PHP always has a homebrewe'd way of doing things. Ternary is upside down, and closures cant implicitly capture scope.
Ansible (Python) [https://www.ansible.com/](https://www.ansible.com/) and Capistrano (Ruby) [https://capistranorb.com/](https://capistranorb.com/) are some the more widely adopted tools outside of PHP, but also work well with PHP/Laravel specific deployments. If you want to stay with a PHP stack then Deployer [https://deployer.org/](https://deployer.org/). &amp;#x200B; In terms of ease, I found that Capistrano worked best. I didn't understand much of what it was doing but setup was easy. Ansible has a lot more features, so if you need more than just code deployment go there. Deployer, is best if you need a lot of customization without learning a whole new language.
The company I work at has moved all it's products and services to docker and have everyone run local development in docker containers and have Jenkins/Gitlab (CI/CD) can handle deployments. We have them set up with webhooks so when we push, it'll automatically build and test the environments and then if everything passes it'll merge the branch into master and deploys to a testing/staging server. 
It's amazing how complicated people make their deployment process, at the end of the day it just boils day to exactly what you wrote - a few commands run on the server. Using simple bash scripts (or even a node script) can be shockingly simple and effective.
We use Jenkins to package up the application, basically check out the code, run composer, npm etc, then tar all the files and ssh them to our ansible server. From there, ansible deploys the code on each server (we have several application servers) by untaring the files into a new directory, then updating the symlink for the httpdocs directory to the new directory. This solves the problems of having to clear view caches etc.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Proposed solution: Sticky readonly thread telling people that support questions MUST go in /r/phphelp not /r/php.
For very simple things I can also recommend [git ftp](https://github.com/git-ftp/git-ftp). Every time it uploads it stores the commit hash in a file on the server, and subsequently only upload and delete the diff of that stored commit and your current commit. It doesn't do anything else, but if all you need is upload changed files then it's great. Easy to set up and very reliable.
Jenkins is quite difficult to set up. And it is mainly from the world of Java. However, many PHP projects use it.
I like how you said ‚Äúthis very basic process‚Äù when it‚Äôs a process that relies on understanding of git, git branches, git hooks, ssh, node, npm, composer, artisan, and probably a bunch of other non-trivial technologies nobody used 5 years ago. This shit‚Äôs getting ridiculous. It used to be drag and drop. 
I might be wrong here but I think that you should use \`php artisan config:cache\` instead of \`config:clear\`
I use Deployer. Its amazeballs and works perfect. Sometimes you gotta config apache config and php config, but after that its always reliable and FAST to push. I've use other zero downtime products and they are so slow. &amp;#x200B; I git push from my local to github then use deployer to git pull / clone from my github repo. Also, deployer stores your old builds in a different release incase something goes wrong and you can have 'shared' files like production specific files that never get deleted.
The ternary operator behaves exactly the same as in C, C++, Java and other languages, so what exactly are you talking about?
That‚Äôs correct because the first command also clears the cache.
well, it does a lot more. Drag&amp;drop may be true for code, but what about database migrations ? Tests ? Updates of third-party libraries ? How many hours were lost to setting up a WAMP server on your computer, to finally fiddle with the php.ini on prod so maybe you had approximately the same PHP extensions on both sides ? Now it's a single docker-compose.yml file that you can drag &amp; drop on any provider.
I think he refers to the "new" one that also checks for isset ```$var = $array['key'] ?? false;``` If not then i'll be very bamboozled.
You're correct, I've fixed that.
&gt;&gt;So writing our own code and abandoning Composer is safer? Safer than battle-tested frameworks? &gt;I don‚Äôt think I‚Äôm encouraging that at all. &gt;Completely avoid using Composer. Write all your own code...
So you're linking to a site linking to another site?
&gt; Caches are cleared Depending on which caches you're talking about, this is wrong and should not be done. Take for example Symfony which has a compiled container, routes etc. You should _never_ overwrite your current version, always deploy next to it, be it a container, another server or simply another directory on your server. You should warm that cache for _that_ version. If you warm up your cache on a running server, you can create a cache stampede, which can cause broken webpages during and after deployment.
\&gt; This shit‚Äôs getting ridiculous. It used to be drag and drop. In the end it still can be drag and drop. You can download library files from github, manually link javascript libraries from a 3rd party, SFTP your development folder in its entirety to production, run sql manually on the database. Once the new developers learn why it's easy to screw that up and why it's hard to maintain, it becomes a bit more obvious why you might want to incorporate some of these other technologies into your project. I've found universally that developers are easily annoyed with processes that have to be done more than once. This is just an extension of that.
`php artisan cache:clear` won't clear the cached config, as it's stored in a file and doesn't use the Laravel cache mechanism. The `config:cache` command first calls `config:clear` and then compiles all of the config files and the `.env` file down into a single file. /u/__radmen is right though, `config:cache` should be run to delete any existing config cache and generate a new one.
I completly agree with the fact that many frameworks are requiring tons of useless/buggy/unmaintained/irrelevant third-party packages that lead to unexpected security holes in company grade softwares because the main frameworks is opaque or heavy. I am as concerned as you are about this point, but I would prefer risking this than using my own flavored code in any case (and this is a personal view), even when I am building crons to send alerts I set up a whole Laravel project because I am used to this tool and because it reduce the surfaces of bugs a lot thanks to years of experience compared to my low level skills for testing every possible case (and the earned time is so much more interesting than some bugs). But yeah really, maybe more with NPM packages, I cross everyday packages that provide too much features, or rely on deprecated packages, and this is the problem with composer. If you are Laravel, and your log package is deprecated, but you do not have the bandwidth to make your own, as much tested as the deprecated package was, you would probably take the risk to maintain this deprecated package in your dependencies (I guess). Clearly a very big issue nowadays...
No you right @web\_dev\_etc, APP\_KEY stores a unique, per-installation, secret key that make encryption more reliable. @OP, you could probably imagine a similar system with a known secret, used to crypt and decrypt your data. 
&gt;this is wrong and should not be done I was trying to give a very high level view of the fundamental process. On any deployment you will likely need to expire caches and potentially warm them, but the approach to that is going to be vastly different depending on the scale of the application, in terms of both architecture and traffic and is well out of the scope of my small example. If you are using the basic script I provided on anything more than the most simple of systems you have bigger problems to worry about. Although in the OPs case, pretty much anything would be an improvement on overwriting the entire production directory via SFTP. Where I'm guessing we're not talking about receiving enough traffic to have a remote chance of precipitating a cache stampede. But if you are working on something that does receive a healthy amount of traffic where a stampede is a realistic problem, please don't look to several paragraph long Reddit comments about basic deployment for caching advice. ;) 
But even the null coalescing operator has the same kind of behaviour, nothing has been turned upside down.
[Deployer](https://deployer.org/). Written for php, designed for most of our usual crap, delivered with common framework recipes, doesn't require non php dependencies (like Ruby). Easy to configure and reliable. 
It's very well possible that due to a webserver request, your old cache is regenerated just after clearing, but with the old code. On the other hand, it can also be possible that your new cache is hit via a webserver request while the old code is still loaded. This becomes significantly worse when things like opcache come into play and you deploy to the same directory. 
Too bad we do not have a faster lambda (like in Python). I would nicely see something like this in PHP: `$users = usort($users, lambda($user1, $user2): $user1-&gt;id &gt; $user2-&gt;id);`
This depends on your needs. Some of us need things like fast rollbacks or gradual rollouts due to business concerns, and that drives more complex deployment strategies.
Sorry, I was mixing them up. Caching the config is the one that clears as well. 
I'm not saying it is, but the OP might find it difficult to interpret, I don't know. 
Yeah see I did wanna read the source code. Not for PDO though; I just wanna see how core PHP functions work.
Jenkins work with any language projects. It's not couple to any. It's done in java, but that's all... 
And if you want both, check ansistrano üëçüëç
Informative and interesting read! I always wondered why certain lines just didn't "catch".
As crazy as it sounds I would imagine that the vast majority of developers are deploying using Filezilla or the Mac equivalent. Why? It's drop dead simple and it works well enough as long as you are careful. Sure, there are issues with it and it's also from the stone age.
Wall of text incoming. &amp;#x200B; TL;DR: swoole rocks, helped immensely, continuing to (happily) use PHP. --- I recently stumbled upon swoole and I must say it's amazing. I'm a guy who's been in development for 18 years, using PHP (among other languages), I've written servers that never lived, I've written servers that went into production and are still running - when I type "server", what I refer to are background services bound to a port - just like nginx, mysql etc. - so I know how to deal with various things related to server programming. I used zeromq and have been a fan ever since it came out. I used node.js for everything it can be used for. I used C. I used Go. I used Rust and the list goes on - it doesn't really matter. Quite frankly, I think I'm a person who can recognize bullshit and hype train. Why did I type all this (no, it's not for imaginary internet points) - it's to give some context to what I'm about to write. A shit programmer will remain shit programmer regardless of language or stack change. Your PHP code sucks? No worries, your Go or Python code will suck too. There's no language in this world that can "fix" a terrible programmer. In the end, we develop programs that are used by people or organizations in order to - make money. That means we need to be able to deliver and prove stuff works. I've never been a fan of Go, nor hypetrain around it - honestly, I can't stand Google (or Facebook for that matter) so not depending on their brain children is what I welcome. &amp;#x200B; In our company (whose name, ofc, I keep a secret because we know you never disclose personal info online) - we depend on many async background services that deal with queueing jobs, post-processing etc - everyone had similar requirements, there are a ton of frameworks for this particular field in nearly every language, but what we wanted was to be able to use language that most of us know (PHP) and to describe some kind of work using trivial code - meaning any developer should be able to read the service's code and understand what it does, without requiring to know how everything works. If I have a queued job that goes through one table and updates another database on a different host with post-processed data - that's the logic we want people to be able to write. Whether you do this in Go, Rust, C, Java, Kotlin, PHP, Ruby, Python - the base principle remains the same. It made no sense to swap to &lt;insert-language-name&gt; because synthetic benchmarks showed that a calculator can run gajillion requests per second over 14400 modem if you use Go if we had to waste 12 months to learn Go properly. Time = money. After this wall of text, what I wanted to actually say was this: I dropped in swoole in our stack. I literally got 5x throughput, on preliminary benchmarks. Sure, we probably didn't write our initial code properly, you can always optimize - but this throughput number is amazing. I even managed to get rid of depending on unmaintained extension used to expose the eventloop (that we had to patch up, and the code sucks right now). Swoole enabled us to drop it in, get rid of old crap that's not maintained and everything is FASTER. And for that I praise the guys behind swoole. It's great. It helps us in our day-to-day work. It provided a substantial speedup. What's best of all - people who know PHP can contribute to our services without being required to learn new hype-language like Go in order to be able to boast with performance numbers. Swoole isn't perfect, but nothing is. For us (me) - it provided awesome results. &amp;#x200B;
I would advise using a specific CI/CD tool. Gitlab has it built in, github recently launched something but I'm not familiar with it, and I personally use bitbucket's pipelines. This means that all I need to do is push my changes with git, and everything is automated after that, and that automation is all based on a single configuration file that you store in your project directory. If you want to get up to speed with this new paradigm, investing in a step by step course might clear some things up: [https://serversforhackers.com/](https://serversforhackers.com/) &amp;#x200B;
TL;DR: everyone use GIT to pull, combined with more automation tools to ease up this pulling process. --- Let's compare what you do versus what's being done in general. In general, you use git to pull code. Then you can automate the task of pulling, checking out the branch, reverting between branches etc. using various tools. With SFTP you need to connect to the remote server and then you upload file-by-file. That's slow because of how the protocol works. With GIT, you need to somehow "tell" your server to execute `git pull`. Whether you do that via SSH or automation tools like ansible, puppet, chef (or using some crappy service that tells you they are so good they discovered aliens) - the principle remains. Instead of PUSHING data to server (sftp), you PULL. Because of GIT and the principle of pulling, you get a lot of (useful) control to what happens with your project (reverting between branches, commits, finding out who did what - when - how - why, revoking access to source etc. etc.) 
Looks like he doesn't know how to use it so he blames the language. Apparently some sites hand out imaginary internet points for hating a popular hate subject.
So what's the takeaway? Don't put breakpoints on an `if` line, but put a breakpoint at _____. 
#2 important as Xdebug has issues with PHP 7.3. 
[Maybe Deployer wasn't the best name.](https://github.com/deployphp/deployer)
For basic small to medium size projects I use *deployer*. It will keep X number of releases and symlink one as the current release. Zero downtime and easy rollbacks. For the enterprise project I‚Äôm working on currently. I‚Äôm using AWS stacks and replacing auto scaling groups that contain prebuilt docker images. IMHO as someone who has done both I don‚Äôt really see the benefit of solution #2 yet. I did solution #1 for a long while and it was nothing less than efficient. However our lead dev told me to go the solution #2 route and so I did. :shrug:
a script that does - git pull - ./artisan migrate --force - npm run prod - cowsay Success!
I'm using PHP for one of my school projects.. been using it for a week now. Coming from, Java, it's been pretty easy. Very similar syntax, except I hate having to use "." to concatenate and "-&gt;" is annoying. 
If they put effort into their blog spam, it would reduce their profitability. Easier to steal content from others so they can get the ad impressions too.
Someone knows copy-paste.
Thanks for your considered response. You‚Äôve raised my hopes that r/PHP isn‚Äôt just full of trolls. Thank you
Envoy, a laravel family product. As part of my CI I call Envoy which uses a private key, which has been added to GitLab, to visit the deploy server and run the commands to pull the repository, install composer dependencies, migrate the database and clear the Config/cache, and link the current deploy directory to the web server root directory. 
Being snarky in the comments on your own article is a great way to build an audience.
docker push kubectl apply
It would be nice if we got this as a CSS overlay for the submit post box. Though I guess that wont work for people using the new layout anyways.
Gitlab CI builds a docker image. Auto deploys to staging, and only allowed on production if the release is tagged from master. It works quite, though I invested many hours in the pipeline.
Interesting. Thanks. The question to me is... why don't IDE's (I'm looking at you PHPStorm) not warn you when your breakpoint won't work? It's so bloody frustrating.
Also handling points of failure. What happens if `git pull` is successful but `composer install` isn't?
I just want proper closures without having to use "use()". 
Since 2.4 you could use the reindex API [https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docs-reindex.html](https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docs-reindex.html) &amp;#x200B; Curator is pretty sweet if you aren't already using it [https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about-features.html) &amp;#x200B; Elasticdump I tend to use less and less as ES matures for this type of stuff, but will mention it here: [https://www.npmjs.com/package/elasticdump](https://www.npmjs.com/package/elasticdump)
One way to examine a random number generator is to create a visualisation of the numbers it produces. Humans are really good at spotting patterns, and visualisation allows you to use your eyes and brain directly for this purpose. Example of bad random numbers (generated with rand() on windows): * https://boallen.com/assets/images/randbitmap_computer.png More details: * https://www.random.org/analysis * https://boallen.com/random-numbers.html
I'm at the same place as you.
Huge +1 for Deployer. It works great with Gitlab CI too!
Composer doesn't get in the way of save-and-try? It's for the installation and management of dependencies, it doesn't add any build steps when you're just working with your code. The only time you run Composer is to install a new third party package and then to update those packages. You don't run it every time you change your own code or anything like that.
Just one fat image? &amp;#x200B;
Composer isn't just for dependency management. Quite honestly, I do my best to keep the dependencies to a minimum myself, but I just can't get over how damn *convenient* its PSR-4 autoloading actually is. PHPStan and Unit testing through any kind of CI pipeline also help in keeping me honest. Composer is good about streamlining some of those commands.
Good to hear this, thanks!
I agree about PSR-4 even though I tend to stick to the default spl_autoload_register call with no arguments wherever possible. In this case there is also a performance bonus due to the native loader.
Yes, still it gets more complicated when you also have Babel, Sass, Less, etc. Therefore I see people feel strange when I tell them that I write pure CSS, JS and I don't use Laravel or at least Symfony :)
GitLab CI is great. I really recommend it. Here's a [quick example](https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html) using Composer and NPM.
I use CircleCI to do my deploys with rsync over SSH. Run any tests and lingers before deploy to make sure everything works and if it does then sync it to the remote server. This is done when something is merged into the master branch.
Yep. Aws Alb does all the load balancing via a target group pointing to the ecs service. Splitting nginx and php-fpm is not necessary, it only complicates your environment without actually gaining anything.
Other major drawback with phpdbg: there is too many times where it fails. I never managed to get it working consistently on a decent size project for an extended period of time.
If you're using AWS you can set up a code pipeline to automatically deploy every time you push to github. And if youre using Elastic Beanstalk and composer, it will automatically install your composer dependencies too.
Just out of curiosity, did you use a PHP framework for your search bar? If so, which one?
Hi Guys, in your opinion which is the best CMS available right now? * Im looking for a CMS that is easy to extend * external websites can consume the CMS data via API and tokens &amp;#x200B;
Proper meaning what? Access to all in-scope variables at the closure definition point?
Same here.
I don't think it's that weird not to use a framework, but rolling your own everything (router, HTTP/request handler, etc) does seem like an odd decision when there are some many high quality, extremely well tested libraries available. And if you're not rolling your own foundation libraries, how do you manage versioning and updates of third party libraries?
+1. We've been using Phing for the last couple of years but just recently stumbled upon Deployer. We're migrating everything over as time/opportunity permits.
I got a bit as while reading this and made a hard exit when I saw deliberate use of comma-first formatted arrays in PHP. Overall, it's a really dumbed down tutorial that holds your hand every step of the way and then some. It may be a really helpful reference to some, just not what I expected of it.
\&gt;Overall, it's a really dumbed down tutorial that holds your hand every step of the way and then some. While I definitely agree with the hand-holding comment, I'm a little confused as to why you called it dumbed down. I made an effort to explain each step as thoroughly as possible, is there something I could have done differently? &amp;#x200B; \&gt;hard exit when I saw deliberate use of comma-first formatted arrays in PHP You're going to hate my next article lol.
Comma first makes for some nice clean diffs
Thanks for sharing, I was just reading through this thread and was happy to see this shared :) I really need to find time to get back to sorting out the pull requests 
My workplace uses Jenkins with bash scripts.
so does comma last on all the things and it's easier to read from a LTR-language perspective...
*posts article on using LetsEncrypt on site not using LetsEncrypt* XD
Jenkins - mostly because we have so many different things to deploy. Its flexibility allows us to keep all of our different stack deployments in one place, which makes build monitoring and fallback easier. Changes hit a particular branch in source control and the Jenkins server pulls the code, builds the project in a container, and then either deploys the container or moves the built project files over to a dedicated application host where it might run a few additional setup commands. If we were dedicated to supporting one or two technologies on a stack for one or two frameworks - we'd probably use something more fine tuned for that particular framework. I like the sound of Deployer. PHP doesn't get enough love for being really useful as a terminal utility language.
Anything automated is simple even though the setup may be not.
Smooth
I agree, but none of this stuff has tooling that‚Äôs bulletproof enough for a developer to not know or care what it‚Äôs doing. So you can‚Äôt skip to the simple, you have to get the setup. 
Never used Symfony (and I hardly meet developers who have). But done a lot with Yii, Laravel, Cake and Codeigniter and Slim. Wouldn't call it crap until you tried, but each framework has its own strengths and weak points. Even looking through Symfoy2 docs, there stuff I like and stuff I think the framework overcomplicates.
There are many options to deploy code. &amp;#x200B; Firstly you should use Github or Gitlab to push your source code. &amp;#x200B; Secondly choose deploy service: 1) You can use Laravel Forge 2) DeployHQ 3) AWS CodeDeploy / Pipeline &amp;#x200B;
What's the actual test you ran? / can we run it locally also?
Bamboo for builds and deployments here. Can be triggered from git commits automatically and run tests, etc.
Won't this mess up your server while it's running?
Best way I‚Äôve seen this handled without a special library is to have releases deployed into separate timestamp named release directories using capistrano then symlink htdocs to the latest release directory. Finishing a deployment is as easy as updating the symlink. Clearing caches after this is useful especially if using opcache with nostat enabled
The great thing about reading source code is that you can identify crap without ever having to use it. And speaking from experience, Symfony (not Symfony2) can be as simple or as complicated as you‚Äôd like, certainly no more so than Laravel or slim
&gt;Wouldn't call it crap until you tried I was describing my own "framework"; it did the good job back in the days but compared to real FW, it really is crap. But I didn't know that before I started using Symfony. &gt;Even looking through Symfoy2 docs, there stuff I like and stuff I think the framework overcomplicates S2 is really old, check latest version. Things that look overcomplicated are actually not, once you figure the reasoning behind that decision. Most people get confused about forms because all of us think about HTML fields, me included. In Symfony, you work with PHP types (that is why you have \`\`Type\`\` as suffix) and HTML is just visual representation. Let me give you real example: &amp;#x200B; Imagine you have eshop where each product belongs to some category: &amp;#x200B; class Product { private $category; &amp;#x200B; public function getCategory(): ?Category { return $this-&gt;category; } public function setCategory(?Category $category): void { $this-&gt;category = $category; } } &amp;#x200B; This is plan PHP class that does business logic; it is irrelevant how simple it is, it is still logic. Notice that I used real PHP objects, no IDs or similar. To select category to which product belongs, you only do &amp;#x200B; $builder-&gt;add('category'); &amp;#x200B; But that is not impressive that much, it exists for long time. It will render dropdown of all available categories and call getCategory() and setCategory() when needed. Not using ID, but real instance. &amp;#x200B; The problem is that this select can be really big. What is impressive is changing it like this &amp;#x200B; $builder-&gt;add('category', AutocompleteType::class, \[ 'search' =&gt; function ($term) { return array of Category instances }, \]); &amp;#x200B; This is real-life example, notice that vendor is not a dropdown but autocomplete field: &amp;#x200B; and the code for that: &amp;#x200B; keys 'find\_one\_by\_value' and 'not\_found' are not relevant for my point. 'constaints' is regular Symfony validation, in this case only that it can not be null. &amp;#x200B; The real point is that is **all** the code needed to change from select dropdown to autocomplete field without a **single** change in my entity, controller... anything... My entity will always get instance of TechnologyVendor class; not id, not a string... but an instance. &amp;#x200B; This is not something that any other framework would allow me to do because they don't have concept of [data transformers](https://symfony.com/doc/current/form/data_transformers.html) . And while this is really powerful, this is still less than 1% of what Symfony can offer. You really should try it; it really is the primary reason I still use PHP and not Java or Typescript. &amp;#x200B;
IMO just easier to put Caddy in front of it and terminate TLS at the web server. You really don't lose much doing it that way, and gain so much.
That's no longer a valid argument since trailing commas are a thing... which is since basically always (I can't even find a reference for when it was added, since it's been in the language a long-ass time).
&gt; long ass-time *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
From the article, they used Phoronix test suite. You could download and try it yourself.
Well, it's against RC6.
That's completely wrong. In PHP, the ternary operator is *left associative*, which means that nested ternary operations will not ever do what you want. In all other languages, including C, C++, and Java (but like...literally, all of them), it is *right associative* so you can nest them. $a = 2; echo ( $a == 1 ? 'one' : $a == 2 ? 'two' : $a == 3 ? 'three' : $a == 4 ? 'four' : 'other'); In a normal language, we would expect this to print "two". In PHP, it prints "four". This a fairly common construct, and this is never the intended behaviour in PHP, nor is that a clean alternative syntax that *will* work in PHP.
&gt; Am I the only one that does not use Composer? Just about. &gt; I try to keep the dependencies as few as possible Good, composer works well with that. &gt; and to avoid any build steps. Composer has no build step. &gt; It used to be ok several years ago but it seems that now (almost) everybody prefers "composing" and "building". No? &gt; I still find it more convenient to save-and-try with no steps in between. As do I. But this has nothing to do with composer. There is no build step with composer; all composer would do with your workflow is make it easier and faster. There's no tradeoff here.
just git clone and use it in production
Databases! PHP has a killer plugin for interaction with DBs (which Webstorm lacks, but you can buy it).
The only issue I've noticed is the comparably higher memory usage which was mentioned in the article. I've heard some complaints about segfaults but I can't recall ever having one, so I can't comment on that. What issues have you been facing?
Segfaults. All the time for each project it's gonna happen at some point.
Thanks for this link, just reviewed, looks cool, i will definitely try it!
For me it was from Capistrano to deployer. Took some time to migrate all projects, but well worth it
Come on, this takes blogspam to another level. Not even a usual half-assed effort - just a shameless link to another site. 
"PHP sucks, you could have done the same with some spaces and semicolons in Brainfuck." -&gt; Why is this on the PHP subreddit?
Yes, it's not a good idea at all to run those commands directly on a production directory. You should be running them against. A copy of the live directory should be made and updated and then the web server should point at the updated directory, either using symlinks or by renaming the directories to switch them over (using a script). Moving the directories or directly using the `ln` command will leave a split second gap where the live site isn't pointing at anything, ideally you would create a new symlink and then `mv` that over the top of the existing symlink, which is an atomic operation.
What? PHP ternary works in ways NO OTHER language. (true ? "a" : true ? "b" : "c");
Proper closures: Like any other language with block scope.
Is it webscale though????!!!
I would expect opposite...
It supports BI better than any webscaled or rockstar ninja cowboy database you'll ever find in the information hyperway ^^/s ^^for ^^the ^^people ^^who ^^didn't ^^catch ^^the ^^joke
Missed opportunity there. They did not said how performant their new set up is :(
Composer is a CMS tool? Wut?
&gt;That's completely wrong. In PHP, the ternary operator is left associative, which means that nested ternary operations will not ever do what you want. You are indeed correct, I just tried this in C: #include &lt;stdio.h&gt; int main(void) { printf(1 ? "A" : 1 ? "B" : "C"); // outputs A } and this in PHP: &lt;?php echo (1 ? "A" : (1 ? "B" : "C")); // outputs B and the results are different. &gt;Further, anyone coding professionally in PHP should probably have known that Now, why would you state that? Just because you probably write spaguetti code for a living, doesn't mean everybody does, innit? &gt;Even if you didn't know that the ternary operator is partially broken in PHP, it would have taken you all of 10 seconds to figure out that the comment you were replying to was correct and it's author apparently knows more about the language than you did. In this particular case, I'm actually happy that I did not know any better, since my ternary usage is fairly limited and NEVER have I had a use for it in a nested form (regardless of language), because, why would you even do that? To make you look smart and spare a few lines of code doing a more shitty job, instead of doing it properly with an `if` or `switch`? In the end, you're both right, but god, do I love being wrong on this one. I wouldn't want to maintain such _smart_ codebases you guys probably have.
Nice article, but it's not really related to PHP, they're using Scala for the back-end.
Without analyzing the structures of the collections in MongoDB and the structures of the tables in the PostgreSQL, it is impossible to make conclusions about such a migration. Perhaps they used Mongo in the manner of a relational database? Not sure that in a year we will see another headline "Bye bye Postgres, Hello %new\_hiped\_technology%"
Yes, it's their in-house CMS tool they named Composer.
I would say they used Mongo as a document-oriented database where a combination of the wto have to be used. And IMO Postgres was the right shot, with its JSON fields it offers the best from the two worlds.
I don't know Postgres well, what about replication and sharding? Because for MongoDB it is quite simple to set up from out the box.
When it first came out it was great. Definitely was a lot faster than any other PHP framework, very nice to use as well with a lot of built-in features. I built a few applications with it, that are still running to this day. However, when PHP7 came out, it became less relevant to me and I stopped using it completely, as it did not bring any real value anymore. 
Well, Postgres is considered by many the best open RDBMS, it has been around for decades (and by no means it's "hyped". For its perspective, it's Mongo and Mysql are hyped). Everything is all right with sharding, replication, connection pooling and many other necessities. 
&gt;kapita Well, things like generating the autoload file, putting the dependencies in the vendor folder can be done by composer. And a lot more, of course. But adding and updating dependencies is a thing that is not supposed to happen that often. In my opinion, a good library should have (almost) zero dependencies and I find the easiness the composer brings as an incentive to the library authors to rely on other libraries and therefore this bring us one step closer to the dependency hell.
Not really. People are moving back to SQL these days.
So your argument against composer is that it might make things too easy for you. Okay.
Not a framework itself but take a look at [swoole](https://www.swoole.co.uk/) if you want speed! There are also [frameworks](https://github.com/swooletw/awesome-swoole#framework) based on it but don't have experience of any of these.
If you are looking for a way to speed up PHP, with low latency and resources, my advice is to look at Swoole. https://www.swoole.co.uk/ Think of it like Go for PHP. Its not really a framework, it adds coroutines, http server and other elements to PHP in a C extension. And it is fast! https://www.techempower.com/benchmarks/ fasthttp-postgresql 329,433 ( Fasted custom Golang solution) swoole 303,514 ( PHP + Swoole 2.1 ) php-raw7 100,583 ( PHP ) phalcon-micro 41,745 ( PHP + Phalcon ) phalcon 20,437 ( PHP + Phalcon ) Json: swoole 1,135,071( PHP 7.2 + Swoole 2.1 ) php-php5 282,294 ( PHP ) phalcon-micro 106,490 ( PHP + Phalcon ) phalcon 57,236 ( PHP + Phalcon ) ...... These results are with the old Swoole 2.1 + PHP7.2. Swoole stable now is at version 4.2.9 with a new Coroutine engine and a lot more changes. Next week TFB is going to run tests with the new 4.2.9 version.
Thank you for your answer. I know that PostgreSQL is a mature, reliable and popular system. I just always worked with MySQL (since version 3.23, if you understand what I mean ;))
&gt;Also, while I'm at it, what do you guys think about Phalcon? Have you ever used it? Do you think it's just another framework or do you like the idea as well? I always saw Phalcon as author's learning playground when it comes to C and PHP internals. The idea is cool but the problem for me is that the actual framework is lacking when compared to Laravel / Symfony. &amp;#x200B; The premise is that it's fast. But I've achieved fast enough (we're talking sub 50ms response times on AWS micro instances) using Laravel. Sure, it behaves differently under load but the projects I work on aren't really constrained by server options or $$ for hosting. I just can't justify sacrificing productivity for synthetic performance, so for me Phalcon is just a nice toy but not something I'd ever opt in to use. The performance is not hindered or improved by a single secret sauce - in nowadays systems, there are many services that affect performance and being CPU bound is rarely one of them, it usually boils down to I/O and Phalcon can't do anything in that regard. Is Phalcon a cool toy? Yes. Is it feature-packed so that improves productivity compared to Laravel? No. Is it fast? It is, but speed doesn't depend on just how fast CPU executes PHP, there's HDD I/O wait, network I/O wait and many more. Can you be productive using Phalcon the same you can with Laravel? Sure you can, but more people are proficient with Laravel/ Symfony, so the chances of finding a productive Phalcon guy are slim compared to productive Laravel guy. &amp;#x200B;
Thanks for sharing the list of frameworks. Seems amazing.
I just set up a CI pipeline with tests and if tests and other requirements pass the application is built and `rsync`ed into place on a server or a group of servers. Additionally commands are run to flush caches and so on. Works well with simpler infra. If you have containers or super horizontal infra then you might want to opt for something more robust.
What can explain such a gap between raw PHP7 and swoole? Interesting.
&gt;So your Easy is not always good. You can use a WYSIWYG editor and get a poor quality HTML. But it is easy, isn't it? &amp;#x200B;
What I think you really mean to say is: After all the noob brogrammers jumped on the Mongo train and finally hit show-stopping technical shortfalls and adding technical debt to their workload, Companies are pulling in seasoned experts to fix the stupidity of the previous brogrammers. Being that Postgres supports JSON now, this migration has been made easier and approvals by management have been more frequent as a result.
That's more or less \*exactly\* what I had in mind :)
Adding a dependency with composer is *better* than trying to manage that dependency by hand. It's not a case of using a tool which is easy but gives worse results; it's a case of using a tool which is easy but gives better results. This is like a baker deciding to not use an oven to bake some cookies because you *could* use the oven to burn them, and tries and use an open fire instead. This is not how you get good cookies.
Test for yourself, PHP is unique in the way its ternary is implemented, dont know a single other langauge with the same semantics. that said ive been bitten by it many times when doing PHP after any other language.
When using Swoole, you're building a request server rather than using mod_php or php-fpm. There's minimal startup/shutdown cost because PHP itself doesn't shutdown in any way between requests. This is a trade-off tho. You're leaving PHP's "shared nothing" world and getting into the realms of concurrency and fun such as race conditions. You (or at least Swoole) are now responsible for handling request data such as POST / file uploads rather than having PHP nicely handle a lot of this boilerplate for you. The source code for these benchmarks is at: https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/PHP As with all benchmarks, take them with a pinch of salt and remember that your application likely isn't going to touch these numbers - most performance issues are likely to be in your application code (and related - eg. sql queries / DB schema). Switching to Swoole (or similar) (for "normal web requests") is pointless if you haven't bothered indexing your database properly and you've got loops within loops in your PHP code causing performance issues.
&gt;Test for yourself I did, but because I don't nest ternaries, I had no idea what he was on about.
I would recommend you to use 'git commit - - amend'. Your git commit history would be much cleaner. 
There are cases were you may have many dependencies. But how about a project where you just download and unzip your 2-3 external libraries (eg. XLS reader, mailer) which takes pretty much the same time and that's all? If the libraries are good enough they should work, so no updates needed in the future. Where does composer stay in this picture?
Really? If you don't know something, you shouldn't be asking how to do it?
&gt; what about .... sharding? They never had a write performance problem. They had 'reliably managing their large amount of information' and also a cost problem. Sharding would have just made both of those problems worse. 
&gt; Switching to Swoole (or similar) (for "normal web requests") is pointless if you haven't bothered indexing your database properly and you've got loops within loops in your PHP code causing performance issues. That applies to any language. Raw PHP with unindexed database will result in even Raw PHP its performance to drop like a brick. The database becomes the bottleneck. But that only applies to database tables that have those issues. Code that does not touch databases or recursive loops or any other issues, will still be way faster in Swoole by bypassing PHP its startup/shutdown cost, saving CPU resources on your server. Another difference is memory usage. To deal with a lot of requests you have Apache + PHP-fpm or whatever combination forking a lot of PHP instances to deal with loads. That results in some massive memory spikes. Swoole runs X PHP instances ( where X is the amount of CPU threads your server has ), that actually results in a lower "run cost" in memory usages. It indeed has disadvantages like you enter the realm of coroutines, race conditions if you start sharing data between coroutines etc. But that is a way more advanced way of programming. If you stick to the simple sequential design and let Swoole handle the now non-blocking parts like database access, file access etc, you still enjoy a lot of the speed advantages. With PHP 7.4 ( end next year ) we will see another nice speed upgrade with preloading, so that PHP cache does not need to check every function, class on every request! That will closes the gap with Swoole for a bit, but your still running into the whole load/unload on requests. Its in the nature of the beast.
How are "brogrammers" and MongoDB connected? I think brogrammers exist in every stack in equal proportion )
"produced in our in-house CMS tool, Ruby on Rails"
From article: \&gt; approximately 2.3m content items You wrote: \&gt; their large amount of information Really? C'mon! 2M3 - of static texts - it is nothing.
Composer provides a good mechanism for updating them if critical security vulnerabilities are found. What's the downside? (And once you're used to it, it's absolutely faster to grab your 2-3 external libraries via composer.) Also, you should be using version control; if you're managing your dependencies yourself you'll need to check them into version control, which means any time you update them you're going to get enormous diffs. If you use composer, you can check the composer json and lock files in, exclude your vendor directory, and just do a `composer install` in your staging and production environments and get the exact same versions as you were developing against. It may not seem like that big a benefit, but again it's one of those things that's all upside. Really, composer isn't magic; it just makes the steps that you already have to perform a little bit easier.
Have you tried turning the server off and then turning it on again?
I did restart it a ton of times
Not really, but DB migration/refactoring can relate to PHP projects. This one is rather big with a new API and a separate/different database, but for big projects, you apply the same methodology described in the article: 1. Create new structure (tables/columns), duplicate data in the old and new structures while your app still consumes the old structure 2. Take your time to migrate all entries from the old structure to the new one (while still consuming the old structure) 3. Switch your app to consume the new data 4. Once you're confident the system works with the new data, wipe the old ones If you have a big PHP app where schema change can take a while, this is definitely the way to go
I think it's a good write-up on websockets, focusing on the technology rather than the framework/tools, which is really refreshing. We have too much framework articles and not enough concept articles.
Are you behind CloudFlare?
&gt;ism for u You are right that some dependencies are huge but if you use normal-sized libraries and put them into the project (+GIT) just once, then I still find it sweet to get everything working after a simple "git pull" :) &amp;#x200B; P.S. Thank you for the nice explanations. I tend to agree with most of your points that you mentioned up until now. I just have a different point of you and that's why I am happy to listen to other people's point of view. This is where such discussions help :)
Did you clear the cache of your browser ?
Postgres is well worth adding to your quiver. It's simply a much, much richer environment than MySQL. I use MySQL regularly for all the usual applications, but whenever I have a database-centric system that requires a little more than out of the box stuff then PostGres is the system of choice. Just one example the spatial handling in PostGres is order of magnitude more advanced than MySQL (it's a plastic toy compared to a Rolls Royce). Postgres comes with more overheads in terms of system maintenance, setup and just understanding what it offers, so it's not going to replace MySQL, but you should definitely find an excuse to acquire some familiarity with it.
Absolutely. having cut my trainee programming teeth pre-RDBMS (DL/1 on IBM Mainframes) I simply couldn't believe it when NoSQL appeared and the brogrammers thought it was really cool. Confirmed when I got to play with MongoDB and experienced Deja-Vue at it's finest. Glad to see sanity is returning (tha's not to say there isn't a place for NoSQL, it's just a niche, not the default)
I think the assumption is that brogrammers are people who jump on hype trains without giving it deep thought - i.e Mongo
IMHO this has no place on a PHP specific subreddit.
Brogrammers like the new hotness. Sometime back, NOSQL was the new hotness. If you weren't planning to switch away from your current MySQL sertup, well you were just an old legacy programmer that was on the way out. Kind of like JavaScript for the past couple years.
Just a friendly warning. Do not post more than one link a day. There are so many reasons for not doing so,
Agree with you re: its not php; but I appreciate these kind of articles. Would you suggest maybe another reddit to follow where this should have been posted?
/r/webdev would probably be more applicable
So what js framework are you using this week? /s
Yeah i did. Shift+refresh on chrome
No
Very interesting, that is why NodeJS outperforms PHP Apache for example, I understand better now! Curious to know if this pattern fits well applications made for serving APIs for example.
What kind of dependencies you can't provide?
A pity that swoole doesn't run on all platforms that support php, which made it a no-go for me, since I never want a platform dependency
I'm looking for a framework that is installed same as Codeigniter (without composer for example) but that contains packages that can help me to quickly deploy a web such as Django or Laravel that have CMS packages, forums etc. Sorry bad english mate!
Doesn‚Äôt have dependencies and contains packages ? Well... good luck :)
Why no composer? It is the de-facto standard for dependency management in PHP's ecosystem. I don't think what you're looking for exists, so providing a bit more information on why you have such requirements so we can better try to help.
If the file is on webpage, did You try adding version to it ?
No problem, just checking what is the reason of you having this specific requirement. To be honest, composer deployment is way easier than to upload zip file containing the project - pretty error prone.
Composer seems good to me. But I wanted a simpler framework that is installed simply with the files that the framework gives you and that installs quickly. For example Codeigniter is what I want but unfortunately I do not find many packages.
So you want a framework with only a minimal core, with the ability to download curated packages for it, isn't it?
You do not understand the context. Maybe because I do not write English well. With dependency I mean that I want to install easy as Codeigniter, that you give the framework files and you move them to the server.
Yes, exactly!
I think like you. I like composer but I was curious if there is any framework like that. Actually to make it easier, what I'm looking for is a framework exactly like Codeigniter but that you can find packages like Laravel or Django for example CMS, forums, file manager, etc
When you download packages through Composer you can copy them over however you want.. There's no need for composer on the production server. And if you're using git you can always choose not to ignore the vendor folders.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
ExceptThatMostProjectsInPhpUseCamelCase. Which_is_harder_to_read_than_some_other_standards.
I remember the dark ages before Composer. It seemed to be a simpler time, but then I wanted to install packages... Composer works the same across all frameworks. What is your problem with it? I suspect that the reason why there's a shortage of packages for Code Igniter is that it is not based on Composer and that CI is old technology. 
Fuck the Code of Conduct! If **that** is what being "inclusive" means, then we best leave that aside, and people who are fearful of being stereotyped can just have anonymizing usernames.
Then PHP by itself! It doesn't have dependencies and you can copy-paste any code from the web as packages. If no kidding, it is better to use some kind of framework. Especially the first time to understand how it works in the right manner. And the Composer is an important and long-awaited Thing in the world of PHP.
Hey all, I'd love some feedback about what's great and what's not on this project management tool. I made version 2 with Laravel so I'm hoping it's better than my last attempt. Thanks a bunch!
Yeah
That's cool. Thanks for the link. 
Scala, PHP, we all use databases in the end
When I create the project, Budget field doesn't have any validation. For numbers at least. I can't add a task to the project.
"Most" measured how? Also, if it's not PHP specific, I say there are better places to post this.
Yes, it is (
What platforms do you look at? Swoole runs on Linux and MacOS. Swoole is something your mostly going to use for Servers. And the most used platform for PHP is simply Linux. I do not see a lot of people running PHP on a Windows platform ( beyond maybe local development before deployment ). If you want to develop on Windows, you can simply run a VM + PHPstorm remote deploy on save. Or WSL for local development. Guess what platform i work on, it does not end with ..nux. :)
CTRL+F5?
Well, it *is* part of [PSR-1](https://www.php-fig.org/psr/psr-1/), which many projects follow. But I'd suggest it's better to stick with language conventions where they exist. Studly/Camel case for PHP projects, snake\_case for Python, etc.
Yeah i tried it with the current time 
What about Symfony Forms bundle?
It's the first time I've heard of ADR and it sounds very interesting, and I could definitely see how it could end up creating a lot of classes. It's kind of funny, I started out using nothing but standard library functions and cobbling together websites to now using Laravel which is very batteries included. ADR seems to me to sit kind of in the middle in terms in terms of complexity. But that can be a good thing. At times full frameworks like Laravel or Rails have so much included that it's hard to feel like you know everything that is going on. I will definitely put it on my to-do list to build a side project using ADR.
I will upgrade from 5.6 asap
http://php.net/ is up for me
&gt;inconsistencies in string and array functions Correct me if I'm wrong but AFAIK all array functions are needle/haystack and string functions are haystack/needle. That's quite consistent enough. The only thing I don't like about PHP is I wish all functions throw an error when it's supposed to. E.g., Instead of something like "string" on success then boolean false on error, it should be "string" on success then throw an error on error.
You want zip file with framework. Ok. You can even download it in zip file from github. Than you want some packages for that framework. Ok. Sooo, i guess you would put them i folder somewhere in project. Let's call that folder 'vendor'. 
Yeah. It is up now.
I think \[Symfony 4\]([https://symfony.com/4](https://symfony.com/4)) has been made for you I guess. I must admit I never used it, but the promise is that they include a minimal core, and using Symfony Flex you can scale with the packages you need. Tell me what you think, and if there is anyone that already used it for any app, I am interesting in your feedbacks!
 I agree [http://php.net](http://php.net)
Complex and difficult systems require a deep understanding that you will not find by a simple question on reddit. Security is one of these things. 
How exactly does the js file is served? Is it included in an HTML or PHP page? If so, try to append a version to the name of your asset. If, for example you set up your htaccess for javascript assets, and you cannot remove the cache for all your users, you might want to do `&lt;script src="/js/contact/index.js?v=1"&gt;&lt;/script&gt;` in order to force your browser to ask for the last version of the asset. 
Best to put this answer in /r/PHPhelp btw ;)
PSR-1 does not state anything for variable name, I find it weird... Where do you see the camel case statement for variable in this PSR?
Rename the file, then try to load it in your browser. If it still loads, you're not updating the correct file. 
You can. Just not from the projects menu. You have to go to tasks in the sidebar. Ima change that though. How should the budget validate? The php converts it to a number but there's no JavaScript validation I guess. Is that what I should add?
I was about to ask "Who does that? A quick google search would show it's a wellknow name already used", but then I remembered that the Guardian doesn't research anything.
So which part is it that you were particular sad about being discouraged? Sexualised language, unwelcome sexual advances, derogatory comments, personal attacks, harassment, doxxing or something else? There's presumably something in there that you wish people wouldn't tell you is inappropriate?
...Bite the bullet. Do a deep dive with Composer if you intend to grow as a developer in the context of PHP. In the end, what you are trying to do will only lead to frustration and wasted effort. Bring the downvotes, or let me be because we all know manual dependency management is only best for edge case stuff.
Per FTP?
(For those who don't get the reference: https://www.youtube.com/watch?v=b2F-DItXtZs)
I‚Äôm continually keeping [`localheinz/repository`](https://github.com/localheinz/repository) updated for myself, and I highly encourage anyone to - use an existing skeleton *or* - create and maintain one yourself so you can easily create packages and applications without wasting time on the same setup over and over again. 
&gt;rockstar ninja cowboy database Ok, I laughed so hard. Get my upvote and post things like that again &amp;#x200B;
Ganondorf.
I think you should check (on the front-end and/or on the back-end) and convert such cases: $10 =&gt; 10 10.20 =&gt; 10.2 10,20 =&gt; 10.2 2'200 =&gt; 2200 ,50 =&gt; 0.5 etc
I don't see any possibility to create a new task: [http://dl4.joxi.net/drive/2018/12/20/0014/3233/969889/89/34d9a66e45.png](http://dl4.joxi.net/drive/2018/12/20/0014/3233/969889/89/34d9a66e45.png)
Thanks to all for the help. Now I have thought better. I think that a framework that has a large community with a large number of packages will be good. My idea is to install the framework and use a package to save time. For example, if I'm going to make a website that requires a file manager, I use a package and save time. But ... Then which one will work for me?
Laravel, Yii, Symfony
(shameless plug) if you go with GitLab, you don't need a separate deployment service, as it comes included :)
MongoDB, the snapchat of databases üôà
Why do so many developers try to store relational data in MongoDB? It makes no sense! üò¨
&gt; - structures &gt; - MongoDB Why are my bones vibrating. Please stop making my bones vibrate. Please, sir!
"An office dog? Yes of course we have one, we're a modern hip company; his name is Cat"
You‚Äôre correct, it even states that they‚Äôve intentionally left this part out and it‚Äôs up to the user to use any case they want, as long as it‚Äôs consistent within a reasonable scope.
Heck of a `ROLLBACK;`: bravo!
RTFM, sir ;)
&gt; At times full frameworks like Laravel or Rails have so much included that it's hard to feel like you know everything that is going on. If you're ever unsure, it's never too late to throw in a breakpoint and fire up a debugger!
Do you have server side cache at all?
I have to agree here, having a Code of Conduct seems to invite problems instead of solve them. Maybe I'll write my own Code of Conduct sometime, unless someone else writes a good one. For now it's best to just avoid it.
I'd argue that those are community related. Every single Code of Conduct I see is focused on community not codebase.
That would be coupled to Symfony though.
I'd agree they're community related, but I don't see the big issue with including it in a repository that also includes a default license. However I wasn't commenting on the inclusion of the CoC, but the specific point the person I was responding to is making. They are suggesting that people who might be harassed or attacked (they said stereotyped, but there is nothing in the CoC that prohibits stereotyping people) should stay anonymous to avoid it happening. Which is frankly ridiculous, why on earth should contributors to a project be forced to stay anonymous rather than having a reasonable expectation that they will be afforded common human decency?
All my jokes are shit, this was just a fluke I'll take the upvote tho
&gt; PHP 7.3 release is also delivering on FFI (the Foreign Function Interface) to access functions / variables / data structures from the C language, [...] Uhhh, false...?
I have a Sub-Domain address what is cloaked/masked. I have a website directory with working HTML and PHP web files. The HTML files load under the cloaked domain address but the PHP files will not. I get a refused to connect error in chrome. Is there any suggestions anyone could give me to resolve this issue.
That post assumes a lot of things. I am glad that my modern PHP framework does not support env. Storing configuration in environment variables is not exactly a sound practice, IMO. But each to their own. Yes, it is extremely convenient, and that's probably why the practice has turned religion. 
I have a cloaked domain address, and working php web files. When I go to the php files they don't load and i get a refused to load error in chrome. The html files do load infact. Any help would be much appreciated.
Perhaps you're right. I read it the other way around though because the current problem is people spying on developers' lives to see if they've broken the CoC. There isn't much recourse when the pro-CoC people dox you and then look at your (public record now) political donations so they can try kick you out of your own project.
I agree, to a point. I usually use an alternative method of configuration, that would work much the same. What is bad about the common use of environment variables is that people simply using getenv('FOOBAR') everywhere, completely ignoring dependency injection. It should be used in the controllers (and injected to the model) and never used directly within the model. That way the models are easier to test but I see people use such variables in models more often than not.
I think you can get better help if you give more details : * OS * Webserver * PHP version * etc
os: nas webserver: apache 2.4 PHP: 7.0 &amp;#x200B;
I have no idea how common that is, I can't say I've seen it happen, but that's not to say it doesn't. But it has nothing to do with the CoC as written, so if it is happening it would happen regardless of whether that CoC is included with a project. The CoC explicitly says it only applies to behaviour in the "project spaces" (i.e. The issue tracker) and other places where a contributor is specifically representing the project. It's designed to set a basic expectation of professional behaviour, so that if someone abuses or harrases another member of the project there's a simple document to point out to call them out. There's nothing called out in the CoC that wouldn't be considered deeply inapproproate in any work environment. If a CoC doesn't exist on a project, nothing changes, the repository owner can still choose to deal with abuse or harassment. All it does is clarify that abusive behaviour won't be tolerated, removing the argument that somebody didn't realise being abusive to another contributor wouldn't be okay. In fact, your example of looking at someone's political donations to try and kick them out of the project is exactly something that the CoC should protect against. Political attacks are specifically called out, because they have no place in a professional environment.
I like Laravel's [approach](https://laravel.com/docs/5.7/configuration#configuration-caching) to this with `config:cache`
Yes, that is my main gripe with it. What I did is write a script that is part of my Deployer script and substitutes values from my server configurations into templates. What that means is that I don't have any server dependent or private info in my source tree, but since it is a Deployer task, it is only run initially and every time the settings change. That is in my opinion a better approach. 
If the CoC is used in the way you described, I have no problem with it. What I'm worried about is when people use the CoC as a weapon, if you're able to prevent that then I have no counter-point to argue. For my own projects I just don't see the CoC as being worth the risk, unless I write my own which I might do.
I agree that 2.3M items isn't particularly large, but given that this is the data backend of their website and article archive, I'd guess that none of this content is actually cold data which would tolerate slow access times. When everything in the archive is accessible through the website, it needs to be accessible quickly - not just the texts, but also associated metadata, which is, in my experience, more difficult to deal with anyway. The article is pretty high level, but I assume there are also some caching layers, search indexers and these kind of things in between - but still, for this kind access pattern, you will certainly not use cheap, high-latency cold storage. 
By source tree, you mean source control (e.g. git). Yes, server depending info should never be in source control. Indeed, when working with payment card data this would be a beach of PCI regulations... I use configuration files stored on the server. These are generally stored in a shared folder and symlinked in by the deployment script at the time of release. These can easily add new variables by the deployment script based on location config files.
Yes, I meant source control, usually git. I keep my servers.yml on my local machine from which I deploy. When developing, I run a local config task to generate configuration. I should probably submit my Deployer scripts to their community recipes repository... 
This is the wrong sub (see the side bar for the rules of this sub). Please use /r/phphelp for stuff like this.
NodeJS and Apache are two very different pieces of software, with Apache being a piece of shit among other things. You can't compare NodeJS and Apache at all.
Newsflash - you can't run php-fpm on Windows. No one in their right mind runs php on Windows, so what exact "platform dependency" are you talking about? You're not satisfied with the OS that runs what, 99% of all devices on the planet?
&gt;For my own projects I just don't see the CoC as being worth the risk It's of course entirely up to you, but _what_ risk? If it's your own project, you are the one with control. A CoC isn't a magic document that takes any power away from you, or give anyone else any power to force your hand. You are the one that enforces it. They exist for the same reason that subreddits have rules in the sidebar and forums of yore had stickied posts with rules. They provide a simple, easily understood set of guidelines for behaviour that the people running a project (you, in this hypothetical) can point to when people are abusive to explain why their post has been edited, locked or removed.
You can do that even if you use composer. You don‚Äôt have to do the build on the server itself.
Guess a button would help, huh?! LOL!!! There's supposed to be one there but it only shows up when there's already tasks inside the database. So, embarrassing... I'll fix it right away. Thanks so much!
Yes. Autoloading of classes has nothing to do with the webserver.
If you'd like to learn more about why this came into existence, see [here](https://threadreaderapp.com/thread/1075902445795065858.html).
Nothing to do with htacess file man.
The problem is that the CoC is doing the exact opposite. The CoC is being used to attack people's gender, sexual orientation, race, political views etc. You can talk about the ideas of what it was originally created to do. I don't care. I care about how it **actually** works. I care about what it does to people in **real life.**
Mongo is one of the worst silver bullet solutions out there. At first is accelerates dev. Then as everything should be coming together in the project it all grinds to a huge halt. After that it is a fight between doing your project a good way and mongo insisting you do everything their way. Mongo clearly was well designed to solve one problem well. I just have never encountered that particular problem in decades of development experience. Where every developer of note that I know has gone is a relational database with JSON elements. 
But where and how is it being used to do that? Given that the project maintainers have to both introduce it _and_ enforce it, surely it's not the CoC that is doing this, but the project maintainers? If the CoC didn't exist, the maintainers who are enforcing it would presumably still enforce things in the same way? Do you have any examples of this happening? I've certainly seen the occasional random person try and use a CoC in this manner, but I've never seen a project maintainer do something because of a CoC that wasn't already at their own volition. Given it's adoption by hundreds of thousands of projects if this is really a problem, surely there are some good examples available?
Personally I question anything that is free. If there is no business model and no way to make money, how do I know its going to be around in a year or even tomorrow?
Are you talking about routes or something?
Well, if you want a good example... here's a funny one. http://geekfeminism.wikia.com/wiki/OpalGate_incident An Italian guy writes a comment about Italian politics in partial English on Twitter: https://twitter.com/elia/status/611319469982527488 The original author of the Contributor Covenant CoC that you liked to above opens an issue trying to get the guy removed from a project he was part of. https://github.com/opal/opal/issues/941 The project owner responds to a request for a CoC, and the author of the Contributor Covenant posts a link to her CoC. https://github.com/opal/opal/issues/942 Contributor Covenant CoC is approved. The author of the Contributor Covenant CoC is banned for violating the Contributor Covenant CoC: https://github.com/opal/opal/issues/954
I can see this being useful in a few places in EasyDB, i.e. [pull#92/issue#85](https://github.com/paragonie/easydb/pull/92)
Isn't that an example of it working well? There was a massive, long, derailing discussion about politics and representation, the Code of Conduct was adopted with all maintainers (even those arguing against any action being taken in the original thread) bring in favour of it. It doesn't seem like there has been any major drama in the world of Opal since the CoC was adopted and nobody was banned or removed from the project as a result of it. Your comment in the last bit seems to be wrong, the owner of the Opal repository commented saying that it would be unproductive to ban anyone, and it doesn't seem like anyone was banned or removed as a result of the initial comments, or the supposed code of conduct violations by the author of the CoC.
Exactly
Don't see why not?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Good morning, all. &amp;#x200B; I am looking for advice on how to best deal with user account passwords. &amp;#x200B; Basically, when someone signs up to my website, their password is stored as plaint text in the MYSQL database. Obviously, this isn't ideal. &amp;#x200B; How should I proceed? &amp;#x200B; The resources I am finding online are mainly about mysql database passwords and nothing on user accounts. &amp;#x200B; Thank you to anyone who can assist me.
I'm the author of a different PHP machine learning library called Rubix ML and I can tell you that you most certainly can do ML in PHP &amp;#x200B; Check out my library at [https://github.com/RubixML](https://github.com/RubixML) &amp;#x200B; I have a few tutorials and example projects as well (Neural Net Sentiment Analyzer, Gradient Boosted Housing Predictor, etc) &amp;#x200B; It would be great to get some feedback from you guys while we're at it &amp;#x200B; Thanks
Oh! LOL! I doubted myself. No, this is correct. It's not letting you because you first need to make a project to go with it. I'll make the notification clearer.
LOL. Okay, then don't use it. There are a whole four records in the database so there's really not much to sell. That's super sketchy though; I would never do that. I MIGHT be adding a donation function or some ads, but the main reason for creating this is to build my portfolio and to give nonprofits who don't have a lot of money nor time to learn something new a project management tool. I work for a nonprofit currently so, I dunno, I guess I care too much. As for it lasting? Who knows? We'll hope for the best. But I've been hosting my applications for years. Thanks for the spelling catch though.
YOU GUYS ROCK FOR HELPING ME BETA TEST!!! &lt;3 
&gt;Correct me if I'm wrong but AFAIK all array functions are needle/haystack and string functions are haystack/needle. That's quite consistent enough. Yeah, I could never remember a method signature. But that never hindered in anyway. I wanted to get more general opinion from people since PHP gets a lot of bad press. &gt;The only thing I don't like about PHP is I wish all functions throw an error when it's supposed to. E.g., Instead of something like "string" on success then boolean false on error, it should be "string" on success then throw an error on error, so it's catchable. Is there no reason for the inconsistencies, no pattern? 
Interesting! Just had a quick glance. But will look at it in detail soon. 
Alright so my reddit wont let me add a body. so ill just comment my post. Ok, So i have this problem where I am checking the IP of the user of a webpage, and if their IP matches my IP then it will do something special. I currently have the code `&lt;?PHP` &amp;#x200B; `function getUserIP()` `{` `// Get real visitor IP behind CloudFlare network` `if (isset($_SERVER["HTTP_CF_CONNECTING_IP"])) {` `$_SERVER['REMOTE_ADDR'] = $_SERVER["HTTP_CF_CONNECTING_IP"];` `$_SERVER['HTTP_CLIENT_IP'] = $_SERVER["HTTP_CF_CONNECTING_IP"];` `}` `$client = @$_SERVER['HTTP_CLIENT_IP'];` `$forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];` `$remote = $_SERVER['REMOTE_ADDR'];` &amp;#x200B; `if(filter_var($client, FILTER_VALIDATE_IP))` `{` `$ip = $client;` `}` `elseif(filter_var($forward, FILTER_VALIDATE_IP))` `{` `$ip = $forward;` `}` `else` `{` `$ip = $remote;` `}` &amp;#x200B; `return $ip;` `}` &amp;#x200B; &amp;#x200B; `$user_ip = getUserIP();` &amp;#x200B; `echo $user_ip;` &amp;#x200B; `if ($user_ip = "M.Y.I.P") {` `echo "Hello Me!";` `} else {` `echo "Hello Stranger!";` `}` `?&gt;`
if ($user\_ip **==** "M.Y.I.P")
ah thank you!
\&gt;From a performance perspective, we were confident Postgres could cope ‚Äì whilst Composer is a write-heavy tool (it writes to the database every time a journalist stops typing) ‚Äì there are normally only a few hundred concurrent users ‚Äì not exactly high performance computing! This seems suboptimal. Why not back up more frequently to server memory or client storage, and only write to db every minute or two? Good read though.
Do not use this function, https://phpdelusions.net/top#ip
The name and logo colour would have you thinking it‚Äôs a Ruby thing
Thanks. I've tried to keep it simple and am looking for feed back.
seconded
We use a git post-merge hook which runs some shell commands and calls some cake shells. It works for us, but our infrastructure is pretty small.
A basic GIT PULL seems even easier. It's literally just an SSH session then typing `git pull`. But maybe some people are still deploying like that.
Disabled it in the .htaccess file. Checked apache cache folder and there was nothing. &amp;#x200B;
So, my only question, which I was hoping would be addressed in this article, was what the performance of switching to Postgres? Did it perform better? What was the architecture of it (replication and all)? Has it been a success? etc. etc...
Thirded
Nth'd :)
&gt; No one in their right mind runs php on Windows, Thats just not true. It isnt optimal to run windows hosts for all the unsupported tools, but pretending the world doesnt exist is misleading. Azure and docker like to act like the platforms dont matter, but many companies arent interested in optimizing beyond their SLAs of platform indepence.
Thanx, you get exaclty my point. I my opinion a good tool support al operating systems. If I could do my job without an O.S, I should would because of all this. An O.S. is unfortunately necessary. And as a developer I want freedom of choosing which O.S. I work on, as long as my programming language support it.
Every other platform that supports php. It's obvious that when I run php somewhere, i don't want to be bothered if a library is so special, it needs OS. version AB2018: in my opinion, then it's not usable.
Do you have a usage example? I cannot wrap my head around `setHelpfulMessage()`, how it's intended to use. 
Sorry for you, but my mind is very good. If you don't know what platform independency means, try to look it up. Don't patronize people who work on something else then you do. We use the big 3 overhere, just to be sure that everything runs everywhere. With swoole, it's a no go. For me it seems more like some O.S. trick rather than having a good solution. (A good solution would work on every php supported platform.)
Should rename it to PubixML
How laravel beats symfony
&gt; never trust anything other than REMOTE_ADDR in security matters I would argue that trusting an IP address at all is shady business.
I think this is not strategically interesting to omit this part, because PSRs are IMHO guides to make it easy to dive into PHP without asking questions, I like guidelines, they pave a clean way and let us think business instead of architecture or code decisions making. 
I believe the quickest way would be to check out Auth0 It gets pricey as you grow, but it's suitable for small sites.
When I had the same problem with not seeing any changes to the edited file - I learned a simple rule - I'm editing the file in the wrong folder, not the folder from where my Apache serves the filed. It may be a copy of your website files, maybe the domain moved. A simple way to test this is - create a new text file test.txt in the same folder your "un"editable JS file is located, write something like "Now you see me..." inside. Try to access the new file directly http://example.com/folder/test.txt If you see the new file - it's caching and we need more details. If the URL is not accessible - you are editing in the wrong location.
N+1th
Hey I thought we want to avoid N+1 queries ? :)
You have to consume the SAML message, whether you use Auth0, Okta, Pingidentity or something else. The article in question shows some code but it doesn't explain what SSO or SAML are. Also, there's no mention of single logout and the fact I got hit by "subscribe to our newsletter" after a few seconds - it's just blog spam and should be ignored. I can expand on why it should be ignored: there's NO mention of checking SAML signatures at all, therefore you can't verify the origin of the message. That means just about anyone can hit your site with SAML envelope and you'd be logged in. Even the library in question has all these security checks off by default. Following crap like the one posted is what gets your sites hacked by script kiddies. 
1. I got hit by "subscribe to our newsletter" after a few seconds - meaning this is blog spam 2. It tells you how to become a service provider of Onelogin IdP, it doesn't touch upon the subject of SSO or why SAML. 3. SAML is a protocol that's in use with enterprises (because they move fast as snails), while entire "small" web wants and uses OpenID Connect / OAuth2 4. The library in question has the signature checking OFF by default. Proof: [https://github.com/aacotroneo/laravel-saml2/blob/master/src/config/saml2\_settings.php#L178](https://github.com/aacotroneo/laravel-saml2/blob/master/src/config/saml2_settings.php#L178) 5. Signature check means anyone can POST to your ACS (assertion consumer service) and log themselves in 6. The underlying SAML parsing library is Onelogin's. There's a library called [lightsaml](https://github.com/lightSAML/lightSAML) which is eons ahead of Onelogin's library. Onelogin's library requires ext-mcrypt which was abandoned.. ages ago (yes, there's a polyfill but the point remains), plus the guy just copypasted xmlseclibs.php to his project instead of creating a dependency in composer.json While SSO is great, it's unlikely any smaller website or project will need it, especially over SAML, especially from Onelogin. Don't follow this article. You'll just allow assholes like me get to your site without even trying.
Well.. it's for a good thing now :D
Agreed, looks like a library for ruby, I would change the logo.
Shopify will be good for you because the interface is very user-friendly, and you can easily get grips to explore it. You can move the elements all over the page and design it just like you want it. It has all the tools that are necessary for creating an online store. You can easily insert the customized images for product and add products online to sell them. The payment options can also be easily set.
Nice work, I wanted to use something like that in my project (just to look what can be done with it). I was ogling https://github.com/php-ai/php-ml but I may give this a chance as well. 
There's no reason not to do strict types on any new projects - we're on the 3rd year of php 7 now.
Now you can properly write interfaces and you can enforce types across your code and get rid of whole swathes of `is_string` or similar boilerplate. Removes entire classes of hidden bugs, especially combined with static analysis since unfortunately we don't compile.
I would personally be against a `mixed` type. I wouldn't mind however method overloading like java for instance has. It would be way cleaner than `mixed` to simply have the same method with different input signatures. 
Do we assume this property applies to all elements or should we prove it with mathematical induction?
Mongo is one of those projects that never should have existed. It tries to solve that one problem by introducing 50 new problems, and it attracts hype because it boasts with speed and scalability - that's sufficient to attract hipster coders who don't know if they even have the problem that Mongo ATTEMPTS to solve. I call it mongoloidb for a reason.
Really interested in hearing your thought here. * What framework are you using currently which does not support env? * Why do you believe storing configuration in environment variables is not a sound practice?
Out of curiosity, is there a reason to enforce the getSnipped() method ? : `public function getSnippet(int $linesBefore = 0, int $linesAfter = 0, int $traceWalk = 0): string` Isn't that something we can get easily from any exception through an error/exception handler ? I admit, the rust dev looks fantastic, IMO I'm not sure I would add dev behaviour in the exception class... var\_dumper or others do already a similar and fantastic job. Plus they don't interfere with prod. &amp;#x200B; But I really like the idea of getSupportLink()... could partially be the same as error code... Maybe If we had something that automatically creates tickets from existing support links, few ideas may come. Thanks for sharing. &amp;#x200B; &amp;#x200B; &amp;#x200B;
‚Ä¶ or change the language 
RC6 is they good version for 7.3 as no updates we're made as far as I know.
Here is a skeleton that is used by roughly 70% of all packages on Packagist already: https://github.com/php-pds/skeleton/tree/1.0.0 (The League one has addition stuff on top of that.)
https://github.com/paragonie/easydb/pull/97/files#diff-ea9301772631d090e4d0145744900559
\^ this guy QA's
Haven't most frameworks been moving toward using env variables?
I think the article shows some good steps in the right direction. The ResponseInterface for the Service even looks similar to a [Domain Payload](http://paul-m-jones.com/archives/6043). Perhaps the next step might be to move the Service away from throwing Exceptions, and instead report errors within the Domain Payload (along with a status). That way, the user interface layer is no longer in charge of "figuring out" things related to the Domain; cf. [Controllers and Domain Exceptions](http://paul-m-jones.com/archives/6608).
Set a session or cookie for the valid user and then redirect using header('Location: admin.php');
You can store the current address in a hidden field and use its contents for redirect.
Yeah of course but how does an universal login page know from where you came from.
That's one hell of a README! Cool.
 $_SERVER['HTTP_REFERER'] &amp;#x200B; https://en.wikipedia.org/wiki/HTTP\_referer
What about with Ajax?
This, either a hidden field or passed with a query parameter from the previous redirect response / navigation to show the login form or dialog.
You do not want to rely on http_referer. There could be custom clients or even filters preventing this header to be sent. You're better off using hidden fields or query parameters.
From your link, &gt; Most web servers maintain logs of all traffic, and record the HTTP referrer sent by the web browser for each request. This raises a number of privacy concerns, and as a result, a number of systems to prevent web servers being sent the real referring URL have been developed. These systems work either by blanking the referrer field or by replacing it with inaccurate data. Generally, Internet-security suites blank the referrer data
1. User visits `/foo` (assuming this requires authentication and user is not currently authenticated) 2. Store the route the user was trying to reach (`/foo`) in the session. This is your "intended" target. 3. Redirect to `/login` 4. User submits login form 5. After validating the login, check if the session contains an "intended" target. If it does, redirect to that target. If it doesn't, redirect to your landing page or whatever.
 agree: goto agree;
It's like an Introduction to ML with some code attached
Perhaps a privacy policy would help. In fact, I'm fairly certain one is mandatory.
Most filters only block cross domain referers now.
&gt; Most Most is not all, and especially not a reason to rely on it.
agreed. i'll put one together.
Hello guys so I have "built" and maintain 2small magazine sites via Weekly + Squares pace. I am talking about a static page which hosts: 1. Several small pdfs (2-6 mbs) 2. One large page of text and images (recent news) No particular html/CSS/fonts are needed... I would like to gradually build a portfolio as a recent CS graduate to apply generally as a Junior Developer . From university I know java,c, basic us+ html/CSS and a bit of python. I think PHP is hot for jobs+ freelancing sooo... (Another option would be java spark or spring boot but I think these options are a bit overkill/difficult to update content regularly) I want to ask: 1. what is the simplest + easier to learn/host/maintain framework for PHP Slim or CodeIgniter 2. Should I focus on php frameworks or strictly study/play around Wordpress 3. For whatever you propose please provide 1 source of good documentation/tutorial/book to check out ;) P.S. I know laravel is the next big thing but I am more focused on a microframework as for my needs
I do this but I keep it on Github and import it from there, I don't use packagist. I use the [auth.json](https://getcomposer.org/doc/articles/http-basic-authentication.md) feature of composer because its a private repo. Kind of annoying to keep it locally in my use cases at least.
Well I'd say all but there's buggy privacy extensions. I'm quite sure all browsers do this. But yes, keeping the original URL in the session is what I would do.
`chrome.exe --no-referers` if you're on windows, no extensions required. I bet the other browsers have equal or the same flag letting the user turn the referer on or off. I mean, if you don't want to build for better quality and user options, be my guest - I'm not going to stop you. You however cannot argue that http_referer is reliable, that has never (and will never) be true. Hell, you can't even rely on the user not modifying or removing the hidden field or query string parameter if you chose those solutions, but what you can guarantee is that those methods work even if the user disabled referers - ultimately leading to your website supporting more end-users.
Pass destinations success and fail with the login then return it with the auth token to a single returning page then redirect 
No, you don't know what platform dependency means. I don't have to look anything up. You just chose a stupid reason among myriad of reasons that you can have for not using swoole, such as - not liking it, not having use for it, can't be bothered, don't understand what or how it works and so on. "Some OS trick" and "platform dependency" just go to show that you actually have no clue what you're talking about - which is fine. I just like to crap on wannabees.
&gt; Isn't that something we can get easily from any exception through an error/exception handler ? You can get metadata about the file in question. Getting the actual code snippet itself is more challenging. https://github.com/paragonie/corner/blob/6a02dcefde29e795432a9a5850ff6c240dc596d2/src/CornerTrait.php#L46-L81
I'm a simple man. I see something from Scott (or in general Paragonie), I upvote it.
I have a few questions in mind. 1. Is this project usable on Web Server? I can see most of the files are in .php so I guess it is usable. 2. I am considering learning Python because I have seen people create machine learning programs in Python and they can run taskbots to accomplish user tasks in the PC environment. Can this one achieve the same thing?
If you're using PDO, you should foreach() directly over the statement, thus consumming less memory on the PHP side. But it's just a wild guess, you didn't give any context, you didn't explained how you're doing it, with which connector, etc, etc, etc... And even the SQL query itself could be slow, you actually didn't give the query, you didn't give a proper explain of the query on the database side, etc, etc, etc, no one can really help you with such vague question.
Do you have proper indexes? The query probably shouldn't run that long. Can you count the number of rows and paginate? 
Using any front-end exposes you to other factors like out of memory, or timeouts. Can you create a script that does this and saves it to a file in the server? Or use a CLI to directly connect to the server and run your query that way.
Hi There, I have finally gotten around in implementing a simple search. Do take a look and let me know what you think. https://laravelcollections.com Thanks.
If you are using AWS, codepipeline is awesome tool. It's able to track your github/git branch and deploy the code
Why do you prefer this to [local packages](https://www.tomasvotruba.cz/blog/2017/12/25/composer-local-packages-for-dummies/#4-autoload-with-composer)? They don't need any "composer update" and work right away. But the code is still separated.
To use it with your application, you must use the PSR 7 HTTP Message interfaces for your request and response objects. The whole library is build to be framework agnostic but uses these interfaces as the common API. Every modern and well written framework and application should fulfill this requirement. It comes with form data, LDAP, JWT and regular token based authentication support built. The architecture allows you to connect it also with any datasource and comes with a PDO resolver. There are also a few additional framework integrations available in separate repositories if you need them. Any fair and fact based critic is welcome! We would like to improve the library further. So tell us what you want or what is wrong with it. Thank you! :)
Can we all stop using Medium? Their constant popups are fucking annoying.
yes I saw that one. brilliant ! My thinking was more about design and responsabilities: inside exception class or in a separate error handler. I admit I really liked the limititertor. haven't heard of it. keep up the good work
The query time comes from the fact that the query runs multiple joins on non-indexed columns. I don't know if I can count the rows and paginate.
I understand. The query is a select on multiple joins of very large tables. The joins are made on non-indexed columns, and that's why the query takes so long. The query time is 10 minutes on the SQL server itself.
&gt;Every modern and well written framework I know it is perhaps a bit off topic but implying that the Symfony/Laravel frameworks are neither modern nor well written will probably not go down very well on this board.
Thank you, but this wasn't meant as an offensive towards any specific framework. I'm not using any of both frameworks, according to the docs, even the older 5.3 version https://laravel.com/docs/5.1/requests#psr7-requests can use PSR-7 requests. And honestly, I don't think people using such a framework have a strong interest in this library, they'll use what the framework caters most likely. Also Symfony has a PSR7 bridge https://symfony.com/doc/current/components/psr7.html. Actually we're abandoning frameworks in favor of "plain old php objects" in our domain model to make sure we can switch libs or even whole frameworks around them without having hard dependencies on them.
Regarding memory concerns, an [unbuffered query](https://phpdelusions.net/pdo#mysqlnd) is also obligatory. 
500 is just a generic error. First of all you must ask your server for the proper error message. It will tell you what certain problem you have, without making complete strangers guess it See [PHP Error reporting basics](https://phpdelusions.net/articles/error_reporting)
This project looks very well designed I'll definitely use it someday. Thank you. I have trouble figuring out what unsupervised learning looks like. I'd be glad to have an example but the four examples are supervised learning right?
100.000 is not THAT big. You might first iron out some of the joins in a joined table before you download it.
Ah ! First thing first, you must optimize the query, either by writing better SQL, or by adding the right index, or both.
Depends on how the buffer is managed by the connector, I usually never end having problems without configuring it (I guess they do not bufferize the whole result but chunk it), on the PHP side you have to iterate over results in a good old stream fashion, meaning without creating an intermediate buffer in the userland. Same goes for CSV generation, fputscsv() is really the best option. But first thing first, FIX YOUR SQL.
You may want to check the link. It says that the buffer is managed the most straightforward way. They bufferize the whole result
Yes sorry, I did and edited my post a minute after I posted it. Thanks.
I can admit some text mistakes, English is not my primary language. But reading this article is just annoying because it seems just thrown to an automatic translator...
If you know the indexes are NOT there... Why on Earth you don't create them? 
It does count on PHP memory limit computation :) Old libmysql did not and it was fixed in mysqlnd 
Then those crazy PHP developers should just drop Windows support on their next PHP release... Right?
I haven't read through everything but would I be able to use this to train the "machine" to learn a card game and its various moves so that "playing against a computer" on the web would be more challenging as it has learned how to play said card game?
OP here, you guys are hilarious So far I've put about 0.00001% of the time spent on the project toward the logo, so we can work on that The name and the language I like though ;)
This is the wrong sub (see the side bar for the rules of this sub). Please use /r/phphelp for stuff like this.
It is not a big problem, can be done even with 100 million rows. You are just running out of memory. &amp;#x200B; The point is to not fetch all 100.000 rows at once but iterate over them. Check [generators](http://php.net/manual/en/language.generators.overview.php), they will be your best friend for this problem. &amp;#x200B; In short; you fetch 1000 rows, convert to CSV. Fetch next 1000, append to existing CSV file. Rinse and repeat, DB size doesn't matter. The only issue is that you have to order by some unique column (like id) and when you fetch next block, append to query something like &amp;#x200B; AND id &gt; .... ID of last one in previous block... &amp;#x200B; If you want to download CSV instead of saving to file, you can always stream response to browser. Something like this: [https://symfony.com/doc/current/components/http\_foundation.html#streaming-a-response](https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response) &amp;#x200B;
Nice to see some SlimPHP support.
1. Yes it is. You can train your models offline and then do one of two things. 1. Use a background process to make the predictions and serve them from a cache 2. Serve predictions in real time by loading the persisted model in your application code running via FPM 2. I don't know much about Taskbots so all I can say is that if the problem can be formulated as a machine learning one then yes Rubix can help. The library is designed to solve a broad range of problems. Like anything, it may require some ingenuity on your part.
Thank you, when you do, let me know how you like it &amp;#x200B; Unsupervised learning is like Supervised learning but without the training signal (human annotated labels) to help with the learning process. They also aim to solve different problems. For example, you can do Classification and Regression with *supervised* learners and Clustering, Anomaly Detection, and Manifold Learning with *unsupervised* learners. &amp;#x200B; An unsupervised tutorial / example project is next on my list
My mistake. I saw the class name / method name at the top and assumed variables were covered too.
The type of problem you describe sounds like a Reinforcement learning one. Rubix so far only supports Supervised and Unsupervised learning. So no.
This seems like it features a subset of https://packagist.org/packages/nmarfurt/measurements What are your thoughts on similarities and differences? Did you build your package, aware of the measurements package I linked, and if so, what are your reasons for developing your version? I'm asking those questions honestly and not to belittle. I'm an advocate of reinventing the wheel ;-)
I wrote a package to help out streaming data from one source to the other. Here's a guideline to help you out optimize output from database queries: https://github.com/ZeroConfig/CLI/blob/master/docs/guides/database-operations.md
Huh, fascinating.. I was not aware of that package at all, actually! A quick dive through the source, and I can see what you mean by mine having similarities with it. The reason(s) I decided to make this package was seeing a few other packages that implemented it as a single God-class with all units defined in an array, and I had never made a fully-feature-complete package before, so I figured trying my hand at the ole' "pfft' I can do that better!" mantra was a good way to test my metal. &amp;#x200B; \_(No worries ‚Äì I don't find your comments belittling or insulting!)\_
Really nice, I like the syntax! 
Cool! Can I suggest adding a `UnitConverter::default()` to do the standard build for you? Not sure what the use case of changing those out are
Haha, I get what you're saying. But I'm not the database admin, and I have to sort of take the database "as is."
Thanks a lot! One of the design decisions was making the code almost sentence-like; making it very obvious what is being done.
Ooooh, I like that! I will definitely add that in. As for the use case of changing them out: it depends on what sort of units your application is dealing with (construct only needed units instead of all units), and what sort of mathematical precision you want for your calculations. If you swap out the `SimpleCalculator` with the `BinaryCalculator`, you will be using BCMath instead of regular operators (`+`, `-`, `*`, and `/`).
I've [added it](https://github.com/jordanbrauer/unit-converter/pull/126) in a PR if you want to just pull that across, I'm just looking in to how your tests are set up. It looks like you've used a boilerplate for this package and as a result there's a lot of files that aren't necessarily required. Have you considered stripping them out until they're actually needed? It makes it difficult to flick through the source code at a glance Also why use npm in a PHP application? If needed you could set up some composer commands for common actions e.g. \`composer test\`, \`composer cs\` etc
There was no boilerplate used, it is all setup from scratch. Mind extrapolating on "a lot of files that aren't necessarily required."? The npm is there for handling an automated pre-commit hook for executing the CS Fixer. I went to use a composer solution, but there were issues that escape me now (would have to look back at the issues &amp; my notes). There are in fact a lot of composer scripts, as you described. :) 
Thanks OP. Never understood why machine learning stuff was always about Python. Your work and especially a readme will definitely help briding machine learning stuff to PHP community.
Thanks, I thought it'd be important to implement :) Let me know if you have any suggestions.
It‚Äôs probably just that I‚Äôm not used to a package with composer _and_ yarn (or yarn in general, though the precommit stuff sounds interesting). Or to be even more honest it‚Äôs probably that I‚Äôve been doing code reviews all week whilst people pile things into production before Christmas. Just from a quick look: * `.vscode` - I don‚Äôt use Code but should this be committed? I wouldn‚Äôt normally commit the `.idea` directory * `.editorconfig` - is this another VS Code thing? * `.env.example` - why does a package need environment variables, or these ones in particular? If it‚Äôs just for task running in CI then I‚Äôm pretty sure you can define variables in there. Or is it for task running locally? * `CONTRIBUTING. md` all seems fine but any particular reason you didn‚Äôt just opt for PSR-2? * `TODO` - why not keep these as either `@todo`s in the code which you can find with an IDE or as Github issues (or both) Sorry for the massive brain dump, peak has done terrible things to me
This is what I was looking for, ml with PHP. Going to check it when have the time.
On a first glance, I like it. Nice syntax, nice code style and you wrote tests!
so where would this be great to use? Like what real life examples do you have? Haven't looked too much into it but I saw it as "the first PHP machine learning library"
Exactly this! As someone who's been in the IT-industry professionally for some 20+ years, please go back and read that wall of text again if you skipped it. This is exactly my sentiment and the only thing I could possibly nitpick is that: &gt;In the end, we develop programs that are used by people or organizations in order to - **create value** Which is of course completely unrelated to the points you are making about the art of programming and development in general, it just broadens the scope of the points you are already trying to make.
I really have something that has been a problem to me for long, how to I know how many pages a PDF file has with php? 
I would suggest spending some time to wiki both Supervised and Unsupervised learning. The two areas combined comprise the majority of the use case of machine learning currently used in industry. &amp;#x200B; For example, your Tesla's autopilot is made possible by Supervised learning
Why did you opt for a configure method in your units? With the current set up your code can be in an invalid state. By either making AbstractUnit::__construct() final or setting these values as properties you can prevent having your code in an invalid/incomplete state. 
I hear you there. I felt a little weird doing it, but wasn't sure how else to best automate the pre-commit CS fixer. The yarn usage is for the lock file support (npm now supports a \`package-lock.json\`, but didn't at the time IIRC). At the end of the day, it's just a development step &amp; has nothing to do with the user-facing side. \&gt; whilst people pile things into production before Christmas. Damn, that sounds rough... I am glad that our CTO told every team to hold on non-bug-fixing merge requests until \*after\* the holidays. \--- The \`.vscode\` directory contains a basic project configuration that helps enforce consistent coding standards (CS Fixer isn't perfect &amp; misses some white-space related formatting from time-to-time). It also holds a debugger configuration, which I have stashed away on my machine. \`.editrconfig\` is actually for a [fairly popular extension](https://editorconfig.org/) that is available to almost all editors &amp; IDEs! Check it out if you ever want a nice way to enfore different styles for different files (e.g., tabs for all files, but spaces for YAML). The environment file is for local task running, yes. New releases (tags) are handled through an automated process that requires some sensitive information. Committing the example file was the best way I could think of telling future me: "this is how you tag new releases for this project", instead of having some magic environment variables on one machine only. The \`CONTRIBUTING.md\` file was added before the CS fixer was implemented. While I agree with a lot of PSR-2; my own code style (see the \`.php\_cs\` file) differs from it enough, that I didn't want to adopt it wholesale. The \`TODO\` file will probably be nixed sooner than later. I used it at one point, but quickly fell out in favour of issue tracking, as you mentioned. &amp;#x200B;
Funny that you ask. I was wondering the same thing a few weeks ago. I think at the time (almost 2 years ago), I was really enamoured for the Symfony console component's command configuration. I think before version `1.0.0` is released, it will be changed to something more along the lines of what you said ‚Äì directly setting properties (while still keeping getters/setters for access outside of the class).
Thanks! If I had to be honest, the "large" test suite is from me forcing myself into the habit of *test first, then code*. The Code Climate scores are fun to try &amp; bump up on each PR as well.. ;)
I'd go with an approach like this, especially if you can schedule the query. Meaning: schedule the query to run and dump the results to a persistent table on a set schedule (i.e. cron job, or whatever your platform has). Then when you're pulling via PHP, it's just a straight select query from that table.
Hitting this a lot too. Wondered why (IDE/xdebug) [whoever] wouldn't simply break on the earliest possible point _before_ my breakpoint (as a workaroudn, of course).
judging on what you wrote, your mind seems narrow. You are not a good analyst to think about what we develop. (what we make, is in use by roughly 40% of the country.) And we love independency so much, we defending it. You never know when we need it. We are still able to go wherever the flow goes. You can't you're stuck on 2 [O.S.es](https://O.S.es) now, because you need a [tool.](https://tool.nA) I am totally aware of php flaws on any platform; hence we use all of them. And yes, unfortunately, we have to go by the weakest link. But that's not the point. It php would run on it, so does it's extensions, and it's tools. If my editor isn't ony the big 3, we won't use it, becoause of lack of independency. It's not about you or how you love to work. It's about how I love to work. Without restrictions of having to choose a O.S. to use a tool. And I stick with that. Your choice is valid for you, I'll get that, but do you get that my choice is valid for me. I don't judge you for that. I judge you for being narrow minded, and not able to see that somebody else can have a different opinion. If swoole was that great, everybody would use it. and guess what, not everyone is, so there must be something off.
The longest lasting bug I can remember of PHPStorm was the Search Everywhere bar losing focus (double shift) besides that I have had very few bugs that lasted more than 1 EAP or short release of PHPStorm. The IDE is getting developed constantly and stuff might regress or new bugs might be discovered. You can always opt to update to the most stable current version and then not update to newer ones. The pros outweigh the little cons that I can see so far.
Try VsCode for a while, they aren‚Äôt exactly alike but you can get most of the functionality with the right plugins. It‚Äôs what I do, nowadays I only open PHPStorm when working with Angular because I don‚Äôt use typescript and VSCode does route discovery via types. 
&gt; What does Reddit think? r/askreddit Thinks that you posted this to the wrong sub r/the_donald Thinks you're a Hillary-supporting socialist for buying software from the Czech Republic. r/aww Thinks it would be a much easier decision to make if PHPStorm included a free kitten. r/thanosdidnothingwrong Thinks that you should delete half of your license. r/gonewild Thinks you should write your question on a piece of A4 and then have someone with a nice pair of tits hold it up. r/todayilearned Hadn't realised there were any realistically competing products to phpstorm. r/showerthoughts Thinks that as desktop frameworks develop, PHPStorm might eventually be written in PHP. r/explainlikeimfive Wants to know what the real difference is when programming using an IDE instead of just notepad. 
I like the idea... But due to the amount of power it has, I'd like to see some options for code signing to go along with it.
I agree with everything you wrote. Swoole isn't a golden hammer. I discussed the REASON that you used to dismiss it. When you develop something and you're done, you don't choose to run the software on the platform that doesn't lend itself to max. potential use - that's all. Swoole isn't all that, nothing is - if we had something, in any language that's really the shit - we'd all use it. My point isn't that php team should drop support for Windows, far from it. 
Are these columns that you're joining on not intended as foreign keys? (e.g. `JOIN users ON user.id = foo.user_id`) Or are your joins on something more exotic? It sounds as if you have a database admin, so presumably you've got someone who knows when and where to place indexes.
Thanks for the laugh. These are all spot on :).
Good suggestion. My main worry is that I'll spend more time finding/configuring the right plugins then I do now getting frustrated by PHPStorm. Sigh. I'll give it a go though.
I don‚Äôt think it‚Äôs a problem it‚Äôs not like there are that many ... :d
I've always tended to give them a bit of slack... It is a complex piece of software after all. But every time I update now it's something new, or just as likely.... something old (regression). Downgrading would be more of an option if I actually felt like there *was* a stable version.
PHP needs this thank you OP.
Why have/keep setters? Do you expect these properties to change during runtime? I do like the syntax you introduce.
Somebody give this redditor gold.
This is important to the future of PHP in my opinion as it will allow us access to tools such as TensorFlow which will greatly speed up machine learning libraries such as the one I'm currently working on https://github.com/RubixML
This comment seems to answer some different problem. Speaking of the OP, - He doesn't need no generators. *Generations* of PHP users streamed their database results before generators were introduced. - He doesn't need to select (not fetch as you call it) by 1000, he can select all at once. - He doesn't need pagination as he needs a single file, not a thousand. - He doesn't need count() as well
It seems there is a general sentiment in the community that help questions do no harm. However, it's quite a controversial topic. 
try net beans. I haven't been able to successfully switch away from it for years. it is imo the best free multi language ide there is. that said, intellij is great judging by android studio. the free community version is probably worth looking into.
I used NetBeans many years back. Maybe I'll revisit it. Thanks. 
Symfony; it is similar to spring (java) and has all the components you mentioned. It can be a bit overwhelming, but that would be my recommendation. Laravel is also good and has many of the components, but a very different paradigm.
I think Laravel uses Symfony now doesn‚Äôt it?
Laravel is pretty good. It's based on symphony which is also a good framework if you'd like to work with a little less abstraction.
Laravel and Symfony (the framework) both make heavy use of components from Symfony (the project) Laravel doesn‚Äôt use the Symfony framework though
I like it when companies post detailed technolush topics like these. Even if it isnt ment to be ingested by the majority of their readers.
Ya but they don‚Äôt use php, and php these days is largely web related so my question still stands: what are the practical applications of this in terms of web applications the majority of us build?
MVC :/
And thus access to GPU HW, isn't it? It _seems_ to me without GPU acceleration you can't seriously consider ML with PHP.
There's no MVC in PHP.
Apparently "REST" is still a thing. Or did it change meanings again like it does every 2 years?
Fun things, it happens quite regularly at work for me to write data migration or import/export processes, I always implement it stream-like to be future proof, and I never managed to explode my memory limit so far even with hundred of thousands records. A few month ago I did for roughly 100,000 rows (it's not a huge number I admit) nevertheless, I was using the soft APIs to do a few transforms, after some bits of profiling 99% of memory was spent by the framework, not the SQL query buffer. In real life, even if you buffer millions of rows, it'll be roughly a few megabytes, whereas your framework might consume much much more because of memory caching, objects that do not go throught GC because of dangling references, etc..
Symfony* ;) 
I agree with you because I'm working with Symfony and I'm now very comfortable with it (and seriously love it), but you have to take into account that it's not that easy to learn. Documentation is well written and will guide you through all the basics and help you to have a correct setup very quickly (which is very nice), but as soon as you need to do advanced stuff, you need to go deep inside the magic of the framework (mostly its dependency injection container and the configuration process) and this will need a lot of training to get it right.
What? Why? If I want to use a MVC architecture in one of my php project, I just do it.
You can't, because of how PHP works with webservers... The process dies, there's no view that communicates back.
Vscode isn‚Äôt comparable to phpstorm. Even with phpstorms bugs and sometimes slowish performance, development time is massively reduced by using phpstorm vs vscode (for me - I have to admit that I haven‚Äôt spent much time with vscode, but few I‚Äôve used it enough to figure it isn‚Äôt as effective as phpstorm ). For JavaScript I like using vscode though. 
The creator of Laravel came from a .net background - so many of his styles and concepts are similar, so that might resonate with you. Symfony great choice, bigger learning curve and more purist, personally I think it‚Äôs docs are aimed at people who already have a strong oop php background Laravel is a great choice, as feature packed for ease, lots of magic, and the biggest benefit is the laracasts.com which has a free series teaching you massive amount of the core workings. If your new is recommend Laravel due to laracasts as getting you started it will be very useful 
[https://www.reddit.com/r/iamverysmart/](https://www.reddit.com/r/iamverysmart/) &amp;#x200B; There is no view to communicate back? Oh, it so sad there is no a way to do it... like responses and requests and sessions... :(
Those aren't PHP 
The communication is made by HTTP requests, Socket, etc. MVC does not tell you how to communicate between different layers. For me, MVC is nothing but a way to organise your project into different sections (models, views, controllers).
The request comes from a webserver and fires up process X (or reuse one). The request comes from a browser. None of that is server side and the client side isn't written in PHP. You can write an MVC application, but can't have this done purely in PHP.
Then you might be interested in looking into DDD instead. MVC isn't about how you organise your code.
Just a small correction in calculations. Million of rows will give you a few megabytes only if a row consists of one byte. For the average row length of 100 bytes it will be 100s of megabytes. 
First of all, MVC is not a dogma -&gt; it's purly a flow of "messages" so it's decoupled into components responsible for "message handling" (the view, the model and the controller). It doesn't matter if the message come from some object or event from classic UI-like app or its reconstructed from HTTP request. 
I personally prefer Symfony, because I come from Nette and they're very alike. I'd recommend it to you, because I want everyone using my favorite framework :) **But I think there is a better choice for you**. There is a PHP framework, that was written by man, who came from .NET - [Laravel](https://laravel.com/). [This post will give you basic insight](https://medium.com/@leanpub/leanpub-podcast-interview-13-taylor-otwell-3c57ffc4e38f).
Why so sad about MVC?
But I have to agree on this. MVC is not about folder structure. 
Oops. Thank you kindly. :)
IMO Laravel is the easiest. Symfony have a lot of configuration and the learning curve is may be frustrating for a newbie. The community (help, tutorials, packages, etc.) is bigger than symfony.
I didn‚Äôt say they were comparable. I said exactly what you did. But I found that in my case it hasn‚Äôt been an issue because I found extensions that do exactly what I need and hasn‚Äôt been a major problem. 
The process doesn't die, the request does. And MVC doesn't require persistent processes, just a communication loop, which is very much there for any HTTP site/app. 
This applies the same way to Laravel though : getting OOP, security or validation right is difficult because the problem itself is complex, not because of a framework :). 
There are SymfonyCasts also now too : SymfonyCasts.com.
Sure, but that doesn't make framework MCV, if anything it makes it MVC compatible
Don‚Äôt think MVC really exists anymore in modern OOPHP land. Especially as REST and Graph along with fronted decoupling is so popular nowadays 
"It's not MVC, but it's MVC Compatible" is a meaningless phrase.
Thanks, I hate your question.
You don‚Äôt. Think of it this way: your question could be rephrased as ‚Äúhow do you concretely combine two concerns while keeping those concerns flexible separated‚Äù The *only* way to do it is to keep all request logic separate (e.g. at least in a controller) and to have nothing more complicated than simple echo‚Äôs and conditionals/loops in in your HTML-mixed PHP (so basically, a template).
Do you think this is a problem at all? Like, newbie learns laravel because it's the easiest path ... newbie evangelises laravel to other newbies ... recursive loop where everyone learns how to do things the wrong way.
Thanks for the honest reply!
I use Phug which allows me to use Pug templates, but use PHP syntax if I want to. I like that I can include both JS and PHP files (partials) which really keeps my frontend code clean and manageable. Pug is like Emmett, only you never expand it. I like it because I am a lazy programmer :) 
Yeah, that's totally understandable. I never do it but found a lot of newbies that fail at this step. In the long run, I think this separation can be automated or enforced. I like to separate code completely and get a clean architecture as much as possible. Do you also separate HTML in smaller files/sections? &amp;#x200B; &amp;#x200B;
&gt;I use Phug which allows me to use Pug templates, but use PHP syntax if I want to. I like that I can include both JS and PHP files (partials) which really keeps my frontend code clean and manageable. Pug is like Emmett, only you never expand it. I like it because I am a lazy programmer :) Oh yeah! We are all lazy programmers. In the matter of layout/php/css is Phug also managing those?
It is really simple. Concerns you want to separate are called "business logic" and "presentation logic". Perform all the business logic first, have your data ready for the output, and then start the actual output. It's better to use a dedicated tool for the HTML output, such as Twig. This way you will have your concerns perfectly separated and a flexible output as well. Just don't overthink it. Many people go that far thinking there should be n logic in the template, which is simply wrong. Logic in a template is all right, it just have to a *presentation logic*.
What is "the matter of layout/php/css"?
It basically does what Pug does. I am handling the assets in my own Gulp build "tool chain", mainly because of me using Sass, etc. 
Check out Twig!
Well, when you want to control those and have a different logic from the backend to the frontend this becomes funky. Guess that is JS job mostly after it gets data.
Twig. 
Sorry, I am lost here. What's the problem with controlling PHP for example? And what's "different logic from the backend to the frontend"?
Generally we don't separate HTML in smaller files/sections as it makes a support hell. You definitely should try Twig, it will answer all your questions better than a thousand comments in this thread.
This.
&gt; separate HTML in smaller files/sections HTML5 imports AFAIK are pretty much dead. So your best bet is to either make a SPA or use a templating system (and vanilla PHP is a hell of a templating system already).
Then they‚Äôll stay forever newbies. A part of growing and developing is starting somewhere, getting to grips, then expanding - if the person gets stuck in their little world and too naive to see there‚Äôs more out there, then they probably deserve to stay in their bubble and they won‚Äôt make it far enough for the problem you‚Äôre describing to affect anybody
Didn‚Äôt know this :) although the website looks like balls I‚Äôm deffo going to invest and hopefully can get some benefit from it, thanks for sharing :)
You've a poor opinion of people. If this was a problem we would all still be using jQuery and React, VueJS, etc. would never have existed. \+ easy != bad. 
There is no problem to have control from PHP. The idea is to hide/show sections and buttons and get that Business Logic decision. This is the SoC that I am having problems with.
Just because something has a lower threshold for getting into it doesn't mean it has to be restricting when coming to solving more advanced and complex problems. If there's something you need to do that you can't do in basically any php framework then perhaps it is not the framework that is the issue but rather the language/platform limitations or just that the thought process was wrong 
I let my PHP framework deal with that via views, either by templates or by sending JSON responses. Views keep the frontend modular. 
Why don't you provide an certain example? You apparently not that simple guy who have no idea how to write PHP code with HTML. You know at lease Blade and Laravel. So why are these generalized questions that make people tell you things you are deliberately aware of? If you have a certain problem then ask a certain answer.
Generally, we do just that by means of views. And perhaps even with widgets (view and controller in one focused package). 
A other package to zf1 measurement 
If you can separate the ‚Äúsmaller sections‚Äù into reusable components that can be useful. Aside from server side templating, client side templating through the mainstream JavaScript frameworks has become increasingly popular (React, Vue, Angular, etc). At a high level the PHP application would expose data services and which interface with the backend. IMHO the main trade off of a fundamental design shift is between responsiveness/speed vs technical complexity.
Actually since PHP doesn't escape values by default such as Twig or Smarty 3 do it is a rather poor templating engine.
Already used Mustache in JS, felt pretty nice. Nowadays I use Volt with Phalcon, but since I'm planning on migrating most of my apps to a more popular framework, I'll take a look at those you recommended.
I really like VSCODE, so I have switched permanently.
I'm not sure I understand your question, but when I use PHP for HTML templates I use the colon syntax for control structures and the short syntax for output: &lt;?php foreach ($articles as $article): ?&gt; &lt;li&gt;&lt;?= htmlspecialchars($article-&gt;title) ?&gt;&lt;/li&gt; &lt;?php endforeach ?&gt; Is this what you mean?
You're definetily being picky, Being precise was not m'y point, most people start having problems with only a few hundreds of thousands, most often because they have wrong SQL to start with, and in most of my own past experiences because they leak memory un the PHP side processing itself. Even though you are right about mysqlnd buffering, most people have problems before that, ans most never need to reach that point. I doubt that you will ever need a multi-million row CSV file to start with, although I might ne wrong, some client did ask me something like this once ans se throw away the code because h√© was unable to import/read such huge file. 
Unpopular opinion but one born out of experience on working on very large systems. If you have no need for highly dynamic ui and just want simple server side rendered html that doesn't need to be passed to a designer, then I would recommend wrapping your templates/views in php functions! Disconnected template files essentially rely on globals, aren't transparent and don't play well with IDE's (which is so damn important for working on large projects) . It may look a bit nasty but whenever you use a template you can guarantee you are providing the template with everything it needs because it is following functional paradigms. Side note: i dislike how negative people in this community can be if they feel like a question goes against their idea of best practices. Programming is hard, best practices are constantly evolving and coding is a game of trade offs which depend entirely on what you're trying to achieve. There is no perfect solution and no dumb questions, we are all still learning here /rant
laravel
Everybody's recommending Laravel and Symfony. You probably won't go wrong with them but for variety's sake I'm going to suggest some alternatives: In a few of my projects I've used [FatFreeFramework](https://fatfreeframework.com/3.6/home) for URL/REST routing and [RedBeanPHP](https://redbeanphp.com/index.php) as the micro ORM. You can use composer to install FatFreeFramework or just include it's single file distribution. RedBeanPHP is also distributed as a single file. Another lightweight microframework is [https://www.slimframework.com/](Slim). Irregardless of what you choose, I highly recommend learning how the default database abstraction library [PDO](http://php.net/manual/en/intro.pdo.php) works. Almost every other framework uses it somehow.
Phalcon!! It was written as a C extension which makes it blazing fast, combine it with PHP 7.3 (when it gets stable here shortly). The framework is lightweight but has all the essentials you are looking for and it is faster than Laravel.
&gt;everyone learns how to do things the wrong way. what makes you say that?
&gt;He doesn't need no generators. *Generations* of PHP users streamed their database results before generator This is not an argument. Generators makes things **much** easier; I have 1 project that has a table with 100 million rows (hobby project) which I populate using generators; just a few lines of code. &amp;#x200B; My best speed is 9000 rows/second, using Doctrine 100% (no plain SQL or similar), with batches of 3-4000 objects. Above that number and speed was degrading, only because of PHP. And it is not that I blame PHP, noone needs to keep that many objects anyway. &amp;#x200B; And that is writing to DB, reading is faster. &amp;#x200B; In OP case: foreach ($this-&gt;getRows() as $row) { .... append $row values to CSV... } &amp;#x200B; and *getRows()* would be a simple generator that would load results in batches of 1000 and yield each of them. Very, very simple thing to do, far easier than using other methods. &amp;#x200B; &gt;He doesn't need to select (not fetch as you call it) by 1000, he can select all at once And that is why he gets 500 error; fetching 100.000 rows will take crazy amounts of memory and PHP is **highly** inefficient with big arrays. Create some dummy array with 100.000 subarrays and see how that works out. &amp;#x200B; This is terrible advice; what happens when he gets millions of rows? Keep adding gigabytes to server and watch speed degrading because PHP struggles to append new rows? &amp;#x200B; &gt;He doesn't need pagination as he needs a single file, not a thousand. &amp;#x200B; I said "Fetch next 1000, **append** to existing CSV file". How can this sound like "create new file"? &amp;#x200B; &amp;#x200B; &amp;#x200B;
"Out of the box functionality is easy, but if you want to start customizing it you will have to learn. " You just described every framework.
Nothing to add. Good synopsis. Upvoted...
If you want to play around with some of the smaller know frameworks for hobby sites or learning, go for it. If it is for a serious site that will need supporting for a long time, for the love of god do not do this. You do not want to be supporting or having to migrate from some dead framework that has little to no community in 5-10 years.
JavaScript brogramming making web clients and pages so fat and heavy they barely run on users browsers. But hey it's new and exciting, doesn't matter it ends up making a shitty user experience. All this push to get people to separate out their logic into MVC for cleaner logic. Now they squash it all into one ball of mud and everyone doing MVC is a has been. 
Laravel is restricting and doesn't scale as well. However, it wasn't the point of Laravel to be able to do that to begin with. It's rapid development framework, not enterprise grade solution tool set. I'll touch on few points just to be specific: 1) Eloquent, as any Active Record pattern totally fails when it comes to complex data structures and multi level transactions. Yes, you can do it, but your code becomes irredeemable mess which it gets very difficult to maintain. Not to mention the terrible coupling it introduces and as such fits only to dumb data objects. For example, how would you do money in Active Record where you need to maintain number of different currencies, some of which might have 1000 fractions (cents), others 100 and some 10? Database first paradigm collapses at these requirements and introduces needless complexity which doesn't really solve anything. Sure you can use Laravel-Doctrine. But I'm not sure how many people use it really. 2) Facades with static methods are simply terrible as they are implemented. If you're making something quick for prototyping, sure it's speedy. But it introduces serious time bomb on long term. It's no better than: \`\`\` private $service; public function \_\_construct () { $this-&gt;service = new Service(); } \`\`\` terrible coupling. Sure it wasn't such a problem if there was a solid other options which brings us to point: 3) DI IoC container of Laravel is utter garbage. Due to it relying on service locator pattern you have very limited configuration, which translates into oververbose codebase in your application for more complex tasks. Not to mention occasional usage of Reflection at freaking runtime. Now, that being said, this doesn't mean Laravel is a bad tool. However saying Larave l can do it, doesn't translate into Laravel should do it, otherwise you'll have a bad time. And I'm aware of quite a few companies by now who sit in shit with Laravel because their businesses grew, and Laravel's rapid development features became serious bottleneck in development. Keep it for small - mid size projects or when you need to make a prototype. I guess you can also build rest api's with it, however I personally wouldn't choose php for lean API's. Node or if you're more serious Go fits that a lot better than Laravel. However, php programmers are easier to find. 
I feel a bit strange when I recommend the PHP debugger that comes with NuSphere PHP-Ed, a non-free IDE for Windows. XDebug is great but having reverse debugging and "global breakpoints expressions" is better. My two cents
MVC doesn't really exist on the server side; here is some [history of why](https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md). A replacement pattern, on the server side, would be [Action Domain Responder](http://pmjones.io/adr/).
&gt;Laravel is restricting and doesn't scale as well. ^[citation ^needed] &gt;any Active Record pattern totally fails when it comes to complex data structures and multi level transactions This is a tired trope. I have used Eloquent (and Doctrine) on extremely data heavy projects for some of the largest entertainment/attractions companies in the world. With both you should be thinking about how to properly structure the solution to the problem, not just blindly implement everything directly at the entity level. On projects with complex data requirements, it makes sense to have some form of layer in front of Eloquent and use Eloquent for data persistence, but that doesn't come close to meaning it must become an irredeemable mess. If it does, that's solely an architecture problem, not a tooling one. &gt;Facades with static methods are simply terrible as they are implemented. Facades are an optional tool that Laravel provides that can be useful for RAD while still making testing straightforward, nothing compels you to use them. &gt;DI IoC container of Laravel is utter garbage. Due to it relying on service locator pattern you have very limited configuration Very limited configuration? This is news to me. You can be entirely explicit with your injection if you like. But the container itself also provides a lot of tools for contextual binding and more complex resolution as well, if that's your bag. &gt;Keep it for small - mid size projects or when you need to make a prototype. Laravel is perfectly capable of being used on large scale projects handling hundreds of requests a second and handling complex data models while keep a clean and understandable code base. Yes, if you haphazardly make use of every rapid development feature and pay no heed to proper architectural principals you are going to end up in a mess, but the same is absotely possible with Symfony. My company has inherited projects built in both frameworks that have been a shitshow, but we've also built systems in both (primarily Laravel) that handle considerable load and have been upgraded and expanded without major issue for years now. As always, it comes down to the experience of the team and the thoughtfulness of the development process, far more than the tools the framework provide. 
In a very real way, MVC *never* existed on the server side; cf. &lt;https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md&gt;.
/u/Linaori is correct; Model View Controller does not exist on the server side. The term was co-opted and then subverted by Sun in 1999 for the web. &lt;https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md#model-2&gt;
Lol still banging on that drum, Laravel is a framework, use as much or as little as you want. Your making crazy generalizations which shows lack on long term experience with it. Pretty much everything you‚Äôve said is old hat and proven to be untrue many times over. This thread is not a framework bashing subject, everybody else is positively contributing - and this is regards somebody who is starting out. Clearly not enterprise. You should give @stauffermatt a shout in twitter regarding its scalability and use in enterprise and he will be able to blow any arguing out of the water as it comes from a rich knowledge of the system.
‚ÄòRegardless‚Äô or ‚Äòirrespective‚Äô, not both :) (Sorry)
&gt; [citation needed] Already gave major bottlenecks. There is no need to refer to authority to make that case. &gt;This is a tired trope. And it's tired because it's correct one. Problem with Eloquent is not precisely Eloquent, but Active Record pattern. It's deliberate coupling of database with business logic. &gt; that's solely an architecture problem Yes. Active Record pattern being bad architectural choice. I'm still waiting for clean solution of common the real life problem I've proposed. &gt;Facades are an optional tool that Laravel provides that can be useful for RAD while still making testing straightforward, nothing compels you to use them. Yes. However, the community seems to think otherwise. And de facto implementation usually relies on facades. &gt;Very limited configuration? This is news to me. Yes. As I've mention, service locator pattern does not provide room for configuration. Unlike actual DI container, where dependencies are injected, Laravel container services requests for it's dependencies. First of all it's anti pattern in it's core, you can read more on it by Martin Frowler in his articles on DI IoC. &gt; Yes, if you haphazardly make use of every rapid development feature and pay no heed to proper architectural principals you are going to end up in a mess, but the same is absolutely possible with Symfony. Correct. However, Symfony has better toolset, than Laravel. One of them being DI container. Which blows Laravels out of the water. It's essentially a Ruby Rails vs Java Spring match.
Only if you don‚Äôt understand how to use it effectively. Like saying ‚ÄúSalads are unhealthy if you cover it in fatty/sugary dressing‚Äù - wild generalizations like this do not help the community!
Hey Tanks, nice to see you :-) As we have discussed before, MVC might exist on the *client* side of that interaction, but it does not exist on the *server* side of that interaction. Cf. &lt;https://github.com/pmjones/adr/blob/master/OBJECTIONS.md#applicability&gt;.
I'd like to suggest [Atlas](http://atlasphp.io) as an ORM possibility as well; it's not "micro" like Dapper but it is definitely a Data Mapper, and not as heavy as some other alternatives.
You‚Äôre just wrong. Would you please stop redefining words so you can shove your own homemade patterns down our throats?
I'm not bashing Laravel. I'm saying it doesn't scale as well as Symfony and layed out shortcomings which become an issue at certain point of application development. Now you're acting out, as far as I see it, from a position of a fanboy who got upset because someone doesn't cheer for the same things. Really, not entirely related, but why it's always Laravel / Vue people who get personally upset about someone not cheering for their tools. 
Yes I know I know: on the server we must say ‚ÄúADR‚Äù instead of ‚ÄúMVC‚Äù for the exact same thing, or pmjones will materialize and start whining. So is the legend. 
What OS do you use? Never had any critical issues for years.
Compared to .net they are all much easier and you can google the bejesus out of anything and find code people have already done. Laravel and Lumen its micro framework are the easiest. They have sample models and views so all you need to do to start is put your db details in the .env file and you are good to go. Lumen for APIs and Laravel for web applications are good. Vue is easiest for single page applications as compared to angular, etc for use with php back ends.
functions are just overkill. you can use include and it will be simpler and better organized than writing HTML in PHP functions which is already a mess.
Laravel uses some of Symfony components. As many different CMS also, Drupal for example. 
Most people do cover their salads in fatty/sugary dressing.
Tanks, you remain (as you have for years) adorably without arguments on this topic. :-)
&gt; Generators makes things much easier; Come on. You cannot beat the simplicity of the regular `while($row =$stmt-&gt;fetch())` loop. It would work out of the box. No need to implement getRows() method. No need to implement generators. Really, sometimes people overthink it and in pursue of simplification make things 1000 times more complicated. It's time to remember the great KISS principle. &gt; what happens when he gets millions of rows? [unbuffereq queries](https://phpdelusions.net/pdo#mysqlnd) to the rescue 
This is true üòÇ although I think sometimes when you generalize you do unfairly target those individuals who try to create the best experiences 
üëçüèº
I'd recommend Slim. If you're only serving static files I'd probably stick to something simple, don't have too much WordPress experience but I imagine that would fit your use case
Laravel, CakePHP, and Drupal all use Symfony components these days. Not sure of any others - I think maybe phpBB does to.
Good summary of upvote. Upvoted...
For the goal declared go for Laravel. 