have you tried CakePHP? That's a rapid development framework. Once you're past the learning curve, you can make a custom site in half the time. Plus, because of the way it's set up, you can re-use a significantly larger amount of code than just straight php. I'm a cynic when it comes to new things in programming. I don't like to jump on bandwagons, because more often than not, they're like you said, more trouble than they're worth. But for large sites, I always use a framework. My personal favorite is Kohana, because it's stripped down. Not once have I *ever* had to "repair" something in Kohana.
Kohana is a good MVC framework if you don't need all of the features of Zend. They're pretty similar.
Zend isn't a framework its just a collection of useful libraries. Some of these libraries are super slow too. 
I'm just curious if you have _anything_ that you commonly use for managing common things in a web application, or if every one of your projects starts out making classes to sanitize get and post requests, etc.
&gt; have you tried CakePHP? I have. &gt; you can make a custom site in half the time. At the timescale where half the work is what's in Cake, using Cake costs more than quick half-assing it. At the scale where quick half-assing it becomes a problem, getting it right is the important issue, and Cake doesn't get it right; besides, at that point, that work is long since not half the work anymore. &gt; I don't like to jump on bandwagons &gt; But for large sites, I always use a framework. That is, after all, a bandwagon mentality. For foos, I always bar. Okay. &gt; My personal favorite is Kohana, because it's stripped down. So, the ones that exist least are the best. Got it. I think I'll just take that to its logical extreme.
I have a lot of pieces. http://scutil.com/ gathers some of them.
This isn't a terrible approach either - however the danger with this model is you end up with that one incredibly needly client who will call on you for every little thing. That's why people tend to do it the other way around - pay for the support, give away the software.
ok. I checked out your php repo, (all 9 files) and I don't see anything related to our conversation in this thread. It looks like you're playing around with making your own unit test classes, which is ambitious, but I can tell you're just beginning php. I'm just curious, why not use phpUnit ?
FatFree is brilliant. * http://fatfree.sourceforge.net/ Take a look at their blog example in the sf.net download area. Why: very very simple and does not at all get in the way of you. Allows you to create simple sites in minutes. Not like any framework I have ever used. 
StoneCypher: try out FatFree, http://fatfree.sourceforge.net/ Cost for using that framework in my app i'm currently working on = almost none, has been nothing but a life-saver
I like the structure of Cake a lot. I like how you have the ability to lean as hard or as lightly on the framework as you need. The ORM could use a bit more work, but it works perfectly well in 80% of cases. For anything more complex, I just fall down to a hand-written query. I like that the framework was designed to accomodate this. I hate ORMs that are all-or-nothing. There's always going to be a situation where you need to hand-write a query for performance or a bizarre edge case. The Router is really good, the MVC structure is one of the best out of all the PHP MVC frameworks (most seem to horribly violate MVC in core itself. Symphony is particularly bad at this). The theming layers work extremely well. The encapsulation afforded through plug-ins makes for extremely flexible architecture for large scale projects. Lithium will likely be the framework that overtakes CakePHP in my books once it matures a bit more and PHP 5.3 becomes the norm across most web hosting packages.
I concur on FuelPHP
How do you organize your files? Do you have a system or do you end up having a bunch of small files? I created a small site for a friend, and as I didn't plan I ended up having 20-25 files of functionality. Obviously using a fw would have given me waay too much stuff I wouldn't have needed. If you got any tips on how to organize files and functionality without a fw, would you mind sharing? I've been playing around with the thought of making a small front controller-ish system where the functionality would be organized by the fc but maybe non-template views would be just mixed with the page's controllers (no separation like in mvc).
I'm not sure if you're trying to make a sarcastic point that making your own framework is stupid or if you're honestly curious. If you are trying to make a point then stop being a dick about it. You have failed to make any valid point as there are just as many security considerations when you use a public framework as when you have your own. If you're honestly curious then I apologize for the previous paragraph.
You mean the part where the web page calls that my erlang library, so you look in the parts that aren't erlang? I have lots of public repos. That particular one isn't heavy on PHP. &gt; I'm just curious, why not use phpUnit ? I had intended to implement stochastic testing, but then I got infatuated with erlang, so I did it over there instead. See quickcheck for examples of why.
I tend to build files to be roughly one conceptual block of crap. That's one to a few classes, and/or several dozen to maybe a hundred functions. There aren't hard rules to this. Over time you just sort of get a feel for what you think is right. In languages like PHP, where you have to be careful about direct access attacks, it pays to write your direct access control in something that enforces by being included, then require_once()ing that everywhere. Otherwise, don't worry too much about it, IMO.
But those are a bunch of things I don't want.
I'm being as directly helpful as the original commenter. I was expecting a genuine response from them.
Zend... But as a colleague of mine has pointed out in the past - right tool for the right job. Certain frameworks excel, or allow for certain things to be done easier. For instance, Cake is a RAD (Rapid Application Development) framework - by using the Bake command line you can easily have an application bootstrapped with CRUD functionality. However, by design Cake is very much setup in the manner "This is the convention in which things are done". A framework like Zend on the other hand makes very few assumptions for you. You are welcome to use as much or little of the framework as possible. When using it as a full stack MVC framework it still makes relatively few assumptions in the way you go about things, other then general module autoloading and basic routing. Your database layer and well... just about everything else are dependent on your preferences and comforts. Want to use Zend_Db? Go for it? Think Zend_Db sucks and want to use Doctrine, fuck yea! Dont really care for Zend_View and would prefer Smarty instead? We can do it! The reasons I use Zend? I work for a company building complex web applications and so far, Zend's architecture seems to be the best in allowing us to write custom code for things like Gearman queuing for background command line processes and building APIs. There isn't one best framework, nor would I recommend you ONLY ever use one. If I were building a simple site, I would probably use Cake - for anything larger/more complex, I use Zend &amp; Doctrine.
I have used CI a lot and like it but recently im moving all my new stuff to FUELPHP. Its full php 5.3 and works the way i always thought a framework should.
Look at fuelphp, seriously it takes all the best stuff from CI, Kohona and rails and puts it together in an awesome documented package. http://fuelphp.com
 Also, ensiferous, you have failed to make any valid point when you said: &gt;there are just as many security considerations when you use a public framework as when you have your own I'm honestly curious as to why you believe that.
OMFG (&lt;--proper usage here too) ive learned that the hard way. There needs to be a support group for that shit. Ive already planned out exactly what you said as a solution too, giving it away for free (donation option) and then pay for support.
Frameworks are useful working in teams of several people. When you're on your own, i think you need a custom answer to your way of work. In my case has been a mix between a basic framework made by me and classic pure code. Big Known frameworks make me go through a long way to solve things that simple code should do easily. However when you are working with more people, frameworks helps to set an standard and common practices that save a lot of time
Kudoz brings up an important point. It is considered crucial by most to use a set of code that has been 'battle-tested'. Does your own framework get used in thousands of applications across the web? Does it have open bug reports, unit testing, and security auditing by hundreds of developers who are more experienced than the average developer? If this doesn't matter to you, then good luck, because it's only a matter of time until someone finds a nasty bug in your code and does something bad with it.
Speed tests like this are pointless. Different frameworks have different default configurations which may run various levels of overhead depending on how they are initially set up. One framework that serves up a basic "Hello World" page lighting fast may quickly fall apart once you start activating helpers, ORMs, components, etc
Watch defcon 18 "how I met your girlfriend" for one answer about php session. There's also the fact that a popular framework has more exposure so it's easier for a script kiddie to find exploits (chances are your own framework will not have its security advisories posted on secunia), you don't have the same knowledge and understanding of the inner workings of a framework you didn't built. The security considerations are not the same but they do exist for both.
Third party plugins for everything I've ever wanted. The automagic ORM and validation have made development tight frightfully fast in my experience. 
How much time did you spend writing Kwolla?
IMO. Make your demo more apparent and easier to see. It instantly turned me off when i saw that information form.
Own creation + Hand picked libraries (but libs are usually interchangeable).
Yeah... that's why all the frameworks will suck eventually. Or they just suck from the start. Or they get bloated over the time. Or they start to emphasize some vertical...
Written to be compatible with PHP4, not specifically for it. It's PHP5 that it excels on.
Well i certainly learnt a whole shiserload from your post. All else aside, you are clearly thouroughly versed in all aspects... So for that, thank you! Ive printed your post and have been pouring over it today. Upon further study, i think i somewhat understand the concept here. From an efficiency standpoint, it makes a lotof sense to use one well formed query than multiple calls to the mysql server mixed with heavy front end processing and parsing.
If Zend isn't slow itself it wouldn't be one of the, if not the, slowest frameworks out there. 
Can't say that's really a defense though if Magento is using best practices. Apply that to any framework and compare the speed. Just proves the point again that it's still a slow framework. 
What's the point of writing your own framework at all then? What if you dislike the way that other frameworks do things?
/r/bestof'ed... deservedly so.
It's the fastest. They just don't know... Shhhhhhhhh....
Everywhere you look in the code you see functions passing everything around by reference... I wouldn't be surprised if that causes notices/errors in the next point release of PHP..
I think the odds of someone finding and exploiting a bug in your own hand-rolled framework and someone finding and exploiting a bug in a common open source framework is not a straight forward thing to answer. My access logs are filled with exploitation attempts for all kinds of common frameworks and tools. 
containable dawg
I've heard about Fuel these days, but is it mature enough to be used in production on a serious project? Will it stay with us for a while or it will disappear some random day like it never was? 
I can actually vouch for that. We tried using Elgg for a social network that should run alongside a conference. (I work at a non-profit in the international security sector, as project manager web development) Elgg was nowhere near beta in terms of development. We used Buddypress (open source as well, plugin for wordpress) and tweaked it to our needs.
just hit beta so production ready is a few weeks off. IMO its pretty stable but they still need to flush out any new features etc before it can be called 1.0. its headed up by dan horrigan and phil sturgeon who are huge with the CI community. its truly an awesome project and i cant see it going anywhere anytime soon. too many people are contributing for it to die off.
I've gone into your comment history and systematically upvoted each one of your posts for the last week or so. I hope this gets you into a heaven of your choice one day. Have some Reddit Gold too.
It wasn't the answer he asked for, but it was the answer he needed. Actually, it *was* the answer he asked for, wrapped in the lesson he needed, so that he had to learn the lesson *while* learning the answer. Well done.
My vote goes for Lithium. You're the only person so far to have mentioned it!
I use Zend Framework because,well, it's the firt I tried and I stick with it (the learning step was huge at the time, actually). I don't really understand why people say it's not a real framework. Anyway I have taken interest in Symfony to expand my view and because it seems to gain traction nowadays.
Teach a man to fish and you ruin a perfectly good business opportunity! Anyway, that was an epic post. Thanks!
* Propel * sfGuardPlugin
Thank you, absolutely will do.
For the site it was originally built for, http://www.prospectvista.com, I spent about 6 months. But that was working only some nights and weekends. If I worked straight on it, it probably would've taken me a month. I worked for about a week to change it and make it a little more general for resale after ProspectVista didn't pan out like we had hoped.
I use Smarty Templating engine, not really a framework but I use it in many ways and love it.
I'm curios as in what libraries you use, custom or were there created some awesome libraries that resolve flexibly the following annoyances which I had when developing without frameworks (3+ years ago): * Forms (generation, validation, fill in) * Routing * Caching per code segments; as with component caches in Symfony (and Yii I think)
As far as I know, mass upvotes/downvotes on a user page aren't counted. 
they also make organising tasks within a team much easier. As soon as you get more than 4 or 5 people all coding on the same app, things like frameworks and patterns really start to make sense.
1) http://dev.mysql.com/doc/refman/5.0/en/index-merge-optimization.html (you're just a LITTLE out of date) 3) If his database has tables with 100 million rows he's going to need to do more than follow aphorisms like avoid varchar indexes, and his question had nothing to do with indexes.
It makes team work easier. When you start working in a team of &gt; 5 then you'll see the complete chaos that happens. It's much easier to organise people with a framework than random files. But you need a few years in various teams to see common mistakes that are made.
Thanks, wouldn't have found this otherwise.
man, that would have taken ages to put down, well done and thanks for your contribution
Nice try, God.
It's not up yet, but I'll host it at http://blog.leftnode.com - Leftnode is my small business/company and I plan on releasing a few products through it. I'll be very candid of my sales and how business is doing.
I believe you need to go into "context" and then vote for that to work.
Are you implying that using a framework would make the development process lack bugs (and security-flaws)?
 QED StoneCypher is god reddit.com/r/PHP/comments/f2yb3 is his shrine.
&gt;Looool. So he's wrong?
I'm just going to leave this here.. http://en.wikipedia.org/wiki/Security_through_obscurity
You gave him a query for all the users. He asked for a specific user. In that case the following would work: (let's say for user with id 37) SELECT p.name AS platform_name , COUNT(*) AS games_count FROM collections c LEFT JOIN games g ON g.id = c.game_id LEFT JOIN platforms p ON p.id = g.platform WHERE c.user_id = 37 GROUP BY p.id ORDER BY p.name ASC Since OP is still analyzing your text he can't as yet comment on it. But I think it's too long and stretched out for such a simple thing. And even for the thing you did, there was no need for a subquery (which mysql doesn't optimize very well).
Holy shit, you're some kind of maniac.
Very small tip. Make integer unsigned unless you actually need negatives. For auto_increment you usually don't.
God...
See the first two examples (#7, #8) in the OPs link. It certainly looks like PDO operates by reference, from them.
I recall reading that this is the case for downvotes. Presumably the same would be true for upvotes but possibly is not.
And this is why I love reddit
Upvoting you purely out of awesomeness. 
Kohana 3 then. 
Like a boss..
How it compares to Buddy press? Also, I'm starting to work in a project that need geolocation. Are you thinking in implement this in the near future? 
Great job!
Absolute hero, you'll most definitely be going to heaven
Oh neat, gold. Thanks. :)
&gt; It wasn't the answer he asked for, but it was the answer he needed. Yeah, not very many people seem to be catching on to this part. I'm kind of surprised, TBH.
&gt; Teach a man to fish and you ruin a perfectly good business opportunity! I'm stealing this. This is a great line. :)
&gt; Forms (generation, validation, fill in) Honestly this is just something I handle on the fly. It's one function to say "scan post for [x:int,y:phone,z:string] and toss everything else. &gt; Routing I fail to understand how this is a PHP issue. Besides, I own an ISP; I can do routing magic that is of an uncommon style. &gt; Caching per code segments; as with component caches in Symfony (and Yii I think) Most of my web work is compiled (C++ and Erlang) or not particularly performance focussed (PHP), so this isn't something that I worry about.
Who are you? Rick Ross?
Buddypress is probably more mature, but feature wise, they're probably on par with each other. The two things that Buddypress has that Kwolla doesn't are groups and blogging, but they're slated to be added in the next release. I hadn't planned on implementing geolocation. Check your private messages here when you have a moment. :)
Bookmarked.
It's a little like saying the plan for the family farm has to be ready for 2.2 billion customers. There's such a thing as designing at appropriate scale.
&gt; You gave him a query for all the users. He asked for a specific user. Easy enough to alter from there. My goal was never to answer his question; it was to teach him to do these himself. &gt; But I think it's too long and stretched out for such a simple thing. Ho, hum. My query is radically more efficient and I got a fair number of thank yous. Please deposit your opinion in the box on the way out. &gt; And even for the thing you did, there was no need for a subquery (which mysql doesn't optimize very well) My query runs circles around yours on all six major SQL backends. Have a nice day, platitudasaurus. Turns out just repeating things you heard isn't an adequate substitute for knowing where that performance comes from.
Well someone had to do it.
I try. :)
Me too!
Actually I am a boss, too. :D Own three companies and starting a corporation. And I screw stuff up and play it off like I meant to.
Just out of curiosity, if I'd knocked this up in MS Access then copied and pasted the resulting SQL; would it have worked and looked the same sans indenting?
Leeerooy Jeenkkiiins! ?
I know this might be a secret but...are you Neo? 
No. I'm John Haugeland. ... Whoa. http://fullof.bs/john-haugeland/
More of a Civ player.
Not entirely true but I do agree. CI 2.0 has already dropped PHP 4 support and is now PHP 5 only, but it is still restricted to many of the architectural decisions made while PHP 4 support was a priority. The CodeIgniter Reactor project (of which I am one of the developers) is an officially suported project which will try to improve this without totally breaking compatibility. CI is moving forwards, but it won't be overnight.
Nah he's Bob Ross. Which makes him an even bigger Boss.
Bob Ross
It's getting more mature every day and is being used by many of us for real-world applications. My freelance work and web-apps are currently being built with Fuel as I control the servers, but for distributed apps I still recommend CI 2.0 (Reactor specifically https://bitbucket.org/ellislab/codeigniter-reactor) as that will work on a lot more servers. Main point: It's not going anywhere.
That's a bigger question that it appears. SQL is 100% compatible across platforms, except when it isn't. Some stuff works "out of the box" everywhere, like simple SELECTs, however almost anything more complicated will require minor tweaks. Even JOINs have slight syntax variations between platforms. 
Most of the stuff written here is pretty obvious, but it is probably nice for the new guys.
I'm currently working in CoreIgniter, and I hate it when CI tries to force me to do something "his way". This is the (first, and) last time I'm using CI.
That's what she said....
Karma for you, man... a big thanks from the whole community!
John Haugeland Slab Bulkhead Fridge Largemeat Punt Speedchunk Butch Deadlift Bold Bigflank
I should use an editor with syntax highlighting? That's news to me!
&gt; Why build an XML parser for RSS feeds when you can take advantage of PHP’s XML Parser functions (such as xml_parse_into_struct)? Spoken like someone who has never even looked at an RSS/Atom feed. The parser in [SimplePie](http://simplepie.org/) is one of the smallest parts of it. The big parts are the normalisation, where you have to work out what the hell a `&lt;description&gt;` tag contains. Harder than it seems, when you have multiple standards all called the same thing, and the same version.
Can you explain a little more about how CI has forced you to do something 'its' way? What were you trying to accomplish, and why didn't it work? I have had zero problems with CI, it's in use on nearly every project I have developed both personally and professionally, and frankly, I just don't understand the very nearly blatant hatred of it here. I'm not saying CI is the best; not at all - Just that it's not as bad as it's made out to be. Are there better frameworks out there? Certainly, but for me, CI was the easiest to pick up and run with.
Nice.
It is true for upvotes as well.
Thanks!!! 
You had me until "*radically more efficient*". Your query doesn't scale very well because of that sub-query. But it was a fantastic illustration of how to plan out and structure a database.
This reply makes it that more awesome
&gt; You had me until "radically more efficient". Your query doesn't scale very well because of that sub-query. Yeah, this isn't actually how database scaling works. So sorry. The correct answer is "the interior and exterior can be processed in a single scan and the join is going to be against less than a hundred rows, so it's actually quite a bit more efficient than the alternatives." When you switch from platitudes to benchmarks, let me know.
Wh. ... what? This looks awesome, but I do not get it.
I'm using CodeIgniter. It's the first framework I've attempted to use &amp; I love it so far. I've installed Cake &amp; Zend but CodeIgniter won me over because of it's documentation. I may try &amp; move my code over to another framework in the future if I try something else &amp; like it better but I wasted enough time learning CodeIgniter just to get this thing rollin. At first I wanted something barebones but the deeper I get into my project, the more I wish CodeIgniter had to offer.
1) Stop using shitty list-post spam sites like Six Revisions.
**ROSS THE BOSS**
Good article, however I disagree with #5 (Don’t Over-Comment Your Code). In all the years I've maintained or reviewed other people's code, I have NEVER seen, and never expect to see code that has been overly commented. It just doesn't happen in real life. Now there are many many cases when code is poorly or too sparsely commented. (The core code of CakePHP seems to have this problem in fact, having comments typically only at the top of functions.)
In fact if I were to write that article, it would be the same, except #5 would be "Comment your f*$#&amp;ing code!!!"
Wow, you don't take constructive criticism well at all, do you? Yes, that is exactly what I meant by scalability, although I was tending to think of the query as a part of a web app rather than on it's own merit alone. Just trying to keep it simple, as you were in your original post. And I was merely pointing out that as the data set grows, your query becomes less and less efficient. Especially when applied to a real life scenario.
Fantastic walkthrough for a newbie. I'd upvote you twice if I could for taking all that time to help someone out! Kudos to you!
&gt;... And the guy that's maintaining it now wishes he had your address so he could murder you in your sleep. He has my address and phone number, he's had 1 issue with the site since I left and that was with apache failing, not my code. &gt;Still got that old code around? Set error_reporting to (E_ALL &amp; E_STRICT) and see what comes up. Go through and see how many places you validated things like email addresses without knowing there was already a built in function for it. I set error_reporting to E_ALL &amp; E_STRICT on the test box to find and troubleshoot any and all the errors. Email addresses were validated twice (registration and login) with filter_var, just like they should be. &gt;Did you know about register_globals? magic_quotes? How does your code behave if those are toggled on or off in php.ini? Did you use mysql_escape_string or mysql_real_escape_string? (I'm guessing no PDO.) Still sure there's no security vulnerabilities? Tested all of this, 99% sure there were no security vulns as security is my primary IT interest. &gt;The fact that you honestly believe that you can pick up a language to any level of competency within a few weeks just shows your ignorance. I did already have some experience, so I guess I mislead you a little, but in general, I feel that if you've achieved a level of competence in any language you can quite easily learn to write in another language quickly. &gt;That you figure you wrote flexible, reusable enough code (in your first three weeks in the language!) that you were able to use it through four months of changing requirements without modifying it shows you're either delusional, lying, or magic. I'm leaning away from magic given that you ended up having to rewrite it anyway (with the benefit of four months of experience - much more than there weeks, by the way). It wasn't really a full rewrite, it's just the fact that I had pretty much gone through every line of code to either A) clean B) make it more maintainable or C) comment (The original comments were mainly for me, when I found out I wasn't staying, I put together comments for the new maintainer that didn't rely on my memory. Looking through the code now, with an additional ~6 months of experience, I can definitely see some ways it COULD have been done better, but overall, the code is solid. The site is reliable and easy to use, it accomplishes the goal and is very useful for the team it was made for. &gt;Oh, and just from a business perspective: What took you five months (including a month of wasted time cleaning up old code) would probably have been a month for a professional developer. If that. It's not remotely economical to have someone pick up a language from scratch on the job. Definitely have to agree with you here, however, I was only non-productive on my normal job for the first week or so, then I was working on my normal job and writing/supporting the website on the side. It was a side project. Saves them money for not having to hire and entire new person. &gt;sent 21 days ago Sorry for the long delay in response, I've been using a different account.
site needs a favicon
As a boss!...
You're right, lemme whip something up real quick.
The dirty secret is that "Security through obscurity" does work most of the time. 
&gt; Wow, you don't take constructive criticism well at all, do you? Saying "you are not correct" is not a form of taking criticism poorly. &gt; And I was merely pointing out that as the data set grows, your query becomes less and less efficient. And yet, the thing you're saying is better is actually dramatically worse. &gt; Especially when applied to a real life scenario. Yeah, it's really easy to say this up until you actually try it, which is why I told you to go benchmark. Repeating yourself and making false claims that someone is taking criticism badly doesn't make you less wrong.
The verbal commentary is better than an upvote any day. :) Thanks for the pat on the back. They're (IMO) too rare at Proggit.
Yes, my son?
The problem is if you *force* people to write comments they typically write stupid comments: // sets x to 5 $x = 5; I agree through, the problem isn't *over*-commenting, it's useless comments. If a comment says exactly the same thing as the code, it's a useless comment. And as soon as someone edits the code, that useless comment becomes wrong too. 
You might could speed things up by using Hip Hop https://github.com/facebook/hiphop-php/wiki/ Facebook uses it, I been really wanting to use it.
1) Use a framework.
Nine times out of ten yes. I think we should encourage people to at least know how to not use a framework as well. Sometimes the scope of the application is just too small for a framework too and it becomes a little bit like premature optimisation.
tl;dr
I do enjoy how you downvote polite replies while talking out of the other side of your face about taking criticism well, though.
Too long? Don't reply.
Likewise so far. I'm gradually building up a set of libraries that I can use from project to project. Can you list a few that use use? 
"I want to kill you"
I haven't up or down-voted anything, except for my own of course - which reddit does automatically.
Dude. Seriously? A correlated subselect is always going to become slower than an simple join as the data set size increases. I don't need to benchmark. It's common sense. The application into which you plug this code, as well as the limitations of the platform on which it runs, also will have an effect.
Well, if that's true, I owe you an apology. I still don't feel that I reacted to any part of that criticism poorly.
&gt; Dude. Seriously? Yes, seriously. Benchmarks beat platitudes. &gt; A correlated subselect is always going to One, this is not a correlated subselect. That phrase does not mean "a subselect which has a correlation." Two, that's not actually correct. If the subselect returns a sufficiently small set, and can be executed in a single pass with the parent select, then it's going to be significantly faster, because there's no need for a cartesian expansion. &gt; I don't need to benchmark. It's common sense. Uh huh.
Stereotypical manly action hero names, akin to a bit from *Mystery Science Theatre 3000*.
First they say, "store configuration externally!" But then there's a commenting example that hard-codes configuration values. Between that and the MySQL-centric bigotry^* this is earning a downvote. *I jest. Mostly. (PostgreSQL FOREVER!)
"John Haugeland" is a manly action hero name? Neat.
&gt;If you’re trying to do something that seems fairly common, chances are, there’s already a PHP function or class that you can take advantage of. Yeah, and you're not using PDO?
You're quick to take offense and quite short with your responses to not just me, but others as well. Good thing I'm an asshole and could care less if you are offended or not.
They've introduced the new version of PHP like they did PostgreSQL 8.4: a set of differently-named packages that are exclusive with the normal ones. Hopefully they'll do the same thing for RHEL6 when PHP 5.4 is out. Well. I can dream, can't I?
In in Freudian psychology the phrase referring to "killing the father" means destroying everything hierarchical, controlling, and restrictive in one's psyche, while "fucking the mother" means embracing everything that is expansive, flowing, and alive in the psyche.
I've always taken this kind of thing to be kind, but it's against [reddiquette](http://www.reddit.com/help/reddiquette).
&gt; You're quick to take offense I haven't taken offense. Please stop preaching; it's boring. &gt; and quite short with your responses to not just me, but others as well. So in other words, I wasn't actually inappropriate, and you just can't find any examples, so you're going to ignore a tree full of people thanking me and just pretend that I'm universally a problem. &gt; Good thing I'm an asshole and could care less if you are offended or not. I'm not offended. I'm just bored of amateurs making claims they can't back up, then telling me how offended I am when I'm not, as a reason to avoid being unable to defend their claims. Find someone who's interested.
Which/what kind of companies/corporation do you own/plan on starting, if I may ask?
In 4 years, people will be saying - but php 5.3 is way more stable than 6.7...
Yea, I noticed the mistake, I was going to correct you, but you are right to leave the mistake. Too many times people write a query without realizing that they aren't getting the data that they asked for.
I own a small VPS ISP - I don't say what it is here because that way I can talk frankly and honestly about hosting without it becoming a form of advertising ("I believe that hosting companies should do X," or "Y is a sign of a bad host," or etc.) I own a small gaming company that does mostly contract work. These days it's largely contracting friends, rather than myself. I own a small web consulting firm. I'm in the middle of creating a project management SAAS application called http://next.do/ , which works quite differently than the other project management stuff I've seen out there on the web. I have some adult website stuff that I don't get into detail about. I have a small non-profit which hasn't done anything yet because its goals are sort of ridiculously auspicious. It thinks it's going to do something about the food problem. We'll see.
I appreciate it. I am happy to be corrected, for whatever it's worth, provided it's polite, like you have been. :)
The outer select is using something defined within the inner subselect to correlate the results. Isn't a correlated subselect is defined as such? Or do I have it backwards? Now I'm extremely curious about this. I'm not a big database designer, but I have been involved in some big projects where the query and design made me go "hmmmmm". I might have to fire up a couple vms and actually bench this.
&gt; The outer select is using something defined within the inner subselect to correlate the results. Isn't a correlated subselect is defined as such? God, no. Do you just not have manuals on your internet? A correlated subquery is where the interior query uses data from the exterior query as part of the interior where clause. That's why they're so wildly expensive. Please stop using phrases and concepts you don't understand. You'll put an eye out.
LOL. Oh, now I really have to test this out. If you're right I'll certainly give you kudos, I'm not a database designer and never claimed to be a pro. But you're condescending attitude toward pretty much anyone who questions you makes me hope the results are against you. ;) 
Save yourself the headache and start using [IUS Community](http://iuscommunity.org/packages/) repositories. These are the open version of Rackspace's updated MySQL/PHP yum repository.
Ok, so I did have it wrong. I don't have time to google shit, just trying to query the brain grapes. Been a long time since I went over this stuff.
"Reddiquette is an informal expression of reddit's community values, written by the reddit community itself. It's not meant to be a list of commandments, but really more of a collection of guidelines. (Be flexible!)"
like a mysql admin tool? I can't even imagine building out a site without that. Hand writing create table statements and using php or command line to run it?
&gt; I criticized you about something I was not only wrong about, but didn't know the correct name of. I didn't have time to google. Uh huh. From the guy who said &gt; I don't need to benchmark. It's common sense. Frankly, common sense doesn't carry as much weight as the people talking about it think it does.
I gather it's pronounced "Huge-land." John Huge-Land is pretty manly sounding. Now that I look at it though, I'm thinking your name may be "How'g-Land."
&gt; I'm not a database designer and never claimed to be a pro Says the guy who called someone else wrong in public about something he doesn't even know the correct name of, then said he didn't need to benchmark it because common sense. &gt; But you're condescending attitude toward pretty much anyone who questions you 1) I'm being arrogant, not condescending. 2) I haven't been arrogant towards you. 3) You've now insulted me five times. I haven't insulted you once. 4) "Your." &gt; makes me hope the results are against you. ;) That's nice. Why are you talking to me? Back when you thought you'd caught me in an error it made sense. Now you seem to be doing this just to sling around more incorrect, baseless insults, and to say you hope I'm wrong. Please find someone else to talk to. You're really annoying, for someone who just got something that basic wrong while trying to correct someone else. It just isn't that difficult to admit you're wrong, much less without being rude about it. Please begin to take your own behavior into account when criticizing the behavior of others. Please don't message me anymore. The only value that's come of it is me teaching you freshman level topics, and the response I get is more insults and "I hope you're wrong." At this point I wish I just hadn't explained anything to you, and had let you wallow in your ill-earned feeling of superiority.
"Hoe guh lund." I don't know how other people say it - I've never been to Norway, after all - but that's how I was raised to say it. But okay, at least now I get where it was coming from.
It is not particularly slow, if you're depending on benchmarks to tell you that, you are doing it wrong. PHP framework benchmarks vary wildly depending on who implemented them and are often tailored to give the desired results. If your biggest speed concern is your framework and not your data store interaction, then you probably don't have a lot to be worried about.
Someone once told me that you should always comment the **why** rather than the **what** and I believe this is the best advice you can give anyone when it comes to commenting code
Whats the timeline on groups/calendars etc? I'm currently elbow deep in customizing buddypress but to have something that is commercial would feel a little more legit especially where support is a concern. If those features are coming within the next month or so I'll buy now just to see. As well are there modules in showing community updates etc in different ways? Is there a way to say like in drupal views to make your own way of a module showing different/certain content. Good job though so far I like it.
Can anyone verify that Virgin Media, Heineken, BBC, MTV and the Museum of Australian Democracy are all using this CMS?
I never said you were in error. I said that I didn't believe the query would hold up when increased the data set size. You're probably right, I am more than likely wrong. It's not that hard, I know. I, too, don't have time for this. Apologies if you took any of my posts as insults. They weren't meant to be. But you are arrogant, which I can't blame you for. I am the same way. Good luck in all your endeavours.
If you want a tree for performance reasons, the standard sparse array already is one. If you want a tree for containment reasons, array('the', array('standard', 'sparse'), array('already', 'is'), 'one');
I just wanted the fun access and modification methods to make my life easier. Edit: for containment
&gt; I never said you were in error. Uh, yes, you did. &gt; &gt; You had me until "radically more efficient". Your query doesn't scale very well because of that sub-query. That's you quite clearly saying my claim was incorrect, without any proof, on a topic you don't even know the correct name of. See also &gt; I don't need to benchmark. It's common sense. So I mean, yeah, maybe be a little more honest about what you've said. &gt; I said that I didn't believe the query would hold up when increased the data set size. Actually, you stated that as a fact. And you were wrong. &gt; &gt; And I was merely pointing out that as the data set grows, your query becomes less and less efficient. Which is, of course, doubly crap, because as the dataset size grows, my query actually gets *more* efficient, not less. &gt; I, too, don't have time for this. And yet you keep it up, long after the other person asked you to stop. &gt; Apologies if you took any of my posts as insults. They weren't meant to be. Uh huh. &gt; &gt; You're quick to take offense and quite short with your responses &gt; &gt; But you're condescending attitude &gt; &gt; makes me hope the results are against you. ;) You really have no idea how unpleasant you are, do you?
Access ... and modification ... methods? $foo[2][3] = 'bar'; echo $foo[6][1]; How does it get easier than that?
what about traversing, depth, sorting, etc...
On my personal machines, I've actually been using [Remi's repo](http://blog.famillecollet.com/pages/Config-en) for PHP and [Percona's repo](http://www.percona.com/docs/wiki/repositories:yum) for their patched version of MySQL. At work, we custom-compile everything into our own RPM repo, because our sysadmin is insane/evil/awesome/bills by the hour. I'm more excited because this means that the people that can't/won't/aren't allowed to use a third party build service and can't/won't/aren't allowed to compile have easy access.
It blocks out script kiddies that only know of an exploit because they read it on some forum and did a quick Google search for people running that software. Although, STO combined with good security measures would be great, I think.
What about them? Those are all trivial one-liners, and not parts of any tree api anywhere ever.
It would be trivial one-liners if you had a known amount of leaves but when you can't anticipate size you need recursion which is not a one-liner.
Much to my surprise and horror, binding one variable at a time **does** work by reference. However, because `execute()` can take an optional array of values to bind, it eliminates the tedium and peril of looping just to bind. That's where binding by reference sucks. Test as of 5.3.5 showing that `bindParam()` works by ref: [mcg@mcg-workstation ~]$ php --interactive Interactive shell php &gt; $pdo = new PDO('sqlite::memory:'); php &gt; $pdo-&gt;query('CREATE TABLE foo(bar INT)'); php &gt; var_export($pdo-&gt;query('SELECT * from foo')-&gt;fetchAll()); array ( ) php &gt; $one = 1; php &gt; $sh = $pdo-&gt;prepare('INSERT INTO foo(bar) VALUES(?)'); php &gt; $sh-&gt;bindParam(1, $one); php &gt; $sh-&gt;execute(); php &gt; unset($sh); php &gt; php &gt; var_export($pdo-&gt;query('SELECT * from foo')-&gt;fetchAll()); array ( 0 =&gt; array ( 'bar' =&gt; '1', 0 =&gt; '1', ), ) php &gt; php &gt; $not_two = 2; php &gt; $sh = $pdo-&gt;prepare('INSERT INTO foo(bar) VALUES(?)'); php &gt; $sh-&gt;bindParam(1, $not_two); php &gt; $not_two = 3; php &gt; $sh-&gt;execute(); php &gt; unset($sh); php &gt; var_export($pdo-&gt;query('SELECT * from foo')-&gt;fetchAll()); array ( 0 =&gt; array ( 'bar' =&gt; '1', 0 =&gt; '1', ), 1 =&gt; array ( 'bar' =&gt; '3', 0 =&gt; '3', ), ) php &gt; I've updated my post above accordingly.
Ok. (sigh) There isn't a tree datastructure because there just isn't a need for one. But you go on believing that things which are really easy are actually very difficult.
I never said it was difficult, its just cumbersome.
If that's your idea of cumbersome, then I dread the day you reach actual work.
If this is your idea of advice, then keep it
Yeah, sorry the answer you wanted to the question you asked wasn't one that made you feel smart.
Probably because there are so many different kinds of trees. If you are advanced enough that you feel you really need a tree, you should be able to write your own.
I can write one, was just curious why there isnt a generic one in the api. But thanks for actually giving an answer rather than attacking my knowledge without knowing the problem set. edit: unlike stonecypher
Well, first off, I'm pretty sure there's availible classes written with the tree search types you want. (I did a google search, they're there.) Other than that, there isn't really usually a reason to worry about performance, as PHP is a web programming language. Sure you can use it to script, but when you do, one isn't worrying about performance usualy. Otherwise, people implement a MySQL or SQLite datatbase, and let the system handle the indexing for you. If you're looking for serious tree performance, there's a good chance, PHP is the wrong language, and you want to use C/C++. tl;dr; Don't extend php.
Thanks, that was very informative and appreciated.
And also slightly retarded. 
:(
What I do for my smaller projects is I make do a phpmyadmin export, and exclude the data. Then you can treat it just like code, and push it into your svn or whatever. People that need to alter, or add structure to it, can just do the same thing and push that data in. It'd be easy to see the changes via a meld/diff. If you need data, consider making a "base" install, or writitng install scripts in sql, so people can just drop thier tables, and push the base install back in.
What's with all the codeIgniter hate? I like it. It is lightweight yet powerful. It has its faults but so do all frameworks. The only thing I do not like about it is the $_GET hate (sometimes necessary to use $_GET) but it can be turned on with a bit of tinkering. I have also used Zend which for me was "meh", heavy weight and can slow things down.
On the Framework Issue &gt; Small one page "fill my form" sites: Probably not necessary (Unless it will expand later) Medium sites: Yes, and use subversion! Large sites: Yes, and use subversion!
No. Obviously, many companies create and test their own framework in much of the same way that Zend or Symfony was developed, just internally. My point is that the code has been properly tested and analyzed by a group of people.
&gt; Other than that, there isn't really usually a reason to worry about performance, as PHP is a web programming language. Sure you can use it to script, but when you do, one isn't worrying about performance usualy. More than that -- if you *are* worried about performance, [measure it first](http://www.xdebug.org/) to determine which parts of your code have actual performance problems.
lol. jsyk, if you're using a database, Propel has a pretty good tree api. I'm sure Doctrine has the same, or better.
&gt; and use Git or another DCVS FTFY ;)
Great.. How long until they update the older versions of 5? I'm sick of having to go out of my way to install a new version of PHP.
I looked at Fuel, but was confused by it. I was also a bit overwhelmed by what Yii had to offer... CLI interaction, application builders? man, I feel behind the times, but I'm comfortable with CI. I learned CI by brute forcing my brain with a book on a daily basis, and tinkering till I had it figured out. Same thing with Mootools, which is my preferred JS framework. Do you know if FuelPHP offers good documentation and a good book or two to get started with?
Correct me if I'm wrong, but isn't Zend a commercial framework? I uh... I'm cheap.
This actually looks interesting. I'm bookmarking this to read into further. Thanks!
Are you sure EE runs on CI? I dug through the basic EE code and it was absolutely NOTHING like CI. 
When running command line scripts through php-cgi.exe, it wants to output headers and text in a fully formed http message. The output difference here over regular CLI is just that - cgi outputs the header portion, which a client's browser will pick up and parse on their end.
The documentation is pretty good right now. http://fuelphp.com/docs/ There are no books currently because Fuel is just getting started but expect many tutorials and possibly books down the road!
Besides the answers already given, there's another simple reason: nobody's written one. I suspect a decent patch (preferably with tests) against trunk implementing a binary tree would probably make it in with little hassle.
I'm not so sure I see the benefit here, other than pushing part of the processing off to another server. Observing an event still has to start and end on the primary server, correct ?
You need to look at migrations. - [Liquibase](http://www.liquibase.org/) - [Doctrine](http://www.doctrine-project.org/projects/migrations/2.0/docs/reference/introduction/en#introduction) - [Ruckusing](https://github.com/ruckus/ruckusing-migrations) They allow you to specify migration files with SQL in an up/down method (typically). 
here's an example. You will probably want to prefix the route url with something unique, unless your default module controller/action is doing this. ` $router-&gt;addRoute( "view-user", new Zend_Controller_Router_Route( "/user/:username", array( "module" =&gt; "user", "controller" =&gt; "view", "action" =&gt; "index" ) ) ); `
you're a hero. thanks for spending all the time to spell that out.
I agree, you need something to signify that it is a user, rather than a controller or action anyways.
So there's no way to have some thing like this: www.socialnetwork.com/iamcoder3 and then display the profile for iamcoder3?
I haven't used ZF and I might be wrong here, but I think that it's pretty hard to do, since ZF doesn't know the controller/action combination to use. If you can distinct if this is a request for user profile by URL (for example, all other requests have at least one slash in them) you can always tweak things with mod_rewrite and rewrite them to /user/iamcoder3.
Containable FTW
I sent you guys a message. This sounds like an interesting little side project.
Updating any RHEL/CentOS 5.x to the latest is just a `yum update` away.
I see.. That's a good point of using mod_rewrite.
I would use Amazon S3 for asset hosting and some cheap LAMP host for website hosting.
While I wouldn't agree that ditching PHP for C/C++ is the only remedy, you could at least give a reason more than "you're retarded". That's just rude.
You can, I do this for my site. But I don't have the code to hand. I seem to remember that it was something like: $router-&gt;addRoute( "view-user", new Zend_Controller_Router_Route( "/:username", array( "module" =&gt; "user", "controller" =&gt; "view", "action" =&gt; "search" ) ) ); But it means other controllers can't have indexAction because, say, um, userSettingsAction the URL would be: http://site.com/user-settings/ and this will map to the userController. You need to remove/rename all the indexAction to something like defaultAction, so the URL becomes: http://site.com/user-settings/default/ 
SQL sucks in trees, but sure, you can build tree-like datasets with adjacency lists, materialized path, and nested sets (there are other solutions too, but these are the most common, and they all suck).
&gt; Honestly this is just something I handle on the fly. It's one function to say "scan post for [x:int,y:phone,z:string] and toss everything else. Well ok, but most forms I deal with aren't just `x:int, y:phone, z:string`. There are many more validations I have to make, for example: the password has the minimum length, username not existing in the database, user can perform a specific action, the CSRF token is valid. That is why I was asking, I am not keen any more to return to "no frameworks" PHP because these validations I can do pretty quickly with symfony for example. And I taught there has been released some library in PHP that eases this part. But maybe you passed this on to your compiled to your C++ and Erlang. &gt; I fail to understand how this is a PHP issue. Besides, I own an ISP; I can do routing magic that is of an uncommon style. Err, I failed to understand what you where trying to say. With routing I was referring to URL dispatching (maybe the bad word, but that is how it is referred among frameworks), and not only that. For example in symfony, I define a route like this: user: url: /user/:username params: module: users action: viewUser And after that I can simply generate links to it: link_to('Link text', "@user?username=someUser"); Of course there is more to it, I can bind routes to models and retrieve objects directly from an url. The main thing I like about it is I can easily generate links (without escapes, slashes and all those) and later on if I decide to move the handling in another controller I just change the route and no need to replace it in every template. &gt; Most of my web work is compiled (C++ and Erlang) or not particularly performance focussed (PHP), so this isn't something that I worry about. The bottleneck for most web application is the database (maybe not your case), so that is why I was referring to caching. With a framework like symfony 2, partial caching can be passed easily to the caching proxy.
Okay good to know. Thanks!!
He sounds like a dick but PHP isn't a game. You aren't a noob until you reach a certain level. Get a book and learn the basics so simple problems wont stop you.
If he only gives access to the handout server to people he trusts he should be fine. 
**... WEARS LIP GLOSS**
Yii is quite awesome. [Check out the docs](http://www.yiiframework.com/doc/api/), very thorough and high quality.
Too bad Zend is bloated garbage that sucks sweaty, stinky, hairy, wart infested donkey balls.
Yeah. Typical Christians. I'm with ya man, they ruin everything. 
I'd guess it is because incentive to downvote on posts like this is very strong. Message poster then downvote ... bam, average sized competition reduction. 
&lt;?php sleep(1); ?&gt;
Just be wary. www.socialnetwork.com/customer_support isn't your support page.
Are you running the mysql daemon? Are you on Windows or a Unix variant? Try connecting from the command line: `mysql -uusername -p testDB` See what happens. If you can't connect from there, the mysql server probably isn't running.
That user needs rights to interact with the database. From command line: mysql --user="root" --password="your_root_password" CREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password_for_new_username'; GRANT ALL on foo to 'user'@'localhost' identified by 'passwd'; GRANT ALL on foo.* to 'user'@'localhost' identified by 'passwd'; exit; If you aren't using command line mysql, you can do this with phpmyadmin too. **EDIT**: Well it seems I granted too much... so I've updated my suggestion. 
The suggestions by leftnode and aar0mm are certainly the right ones. However... should they not work for you, and you're stuck and frustrated, you can try XAMPP. If you're using windows (which is the only platform I've used it on), it's quite fast to get running and could help you through this learning process. XAMPP's database is wide open, which makes it a good place to check your code on. Username of root, blank password (IIRC).
&gt; With routing I was referring to URL dispatching Oh. Okay, that makes sense. I tend usually to do that internally in the compiled web apps (when I say I work in the web in C++ and erlang, I don't mean by building modules for apache; I mean the app I'm building opens a socket and serves HTTP directly) or in mod_rewrite for Apache stuff. &gt; For example in symfony, I define a route like this: That's ... not simple, is the thing. This part I never understood. list($base, $tgt) = rexplode('/',$url,2); switch ($base) { case '': ... case 'foo/': ... case 'bar/baz/': ... default: ... } Same amount of code roughly and I've already handled four bases, and can handle one more per line. What you're working with up there is actually sort of ridiculously heavy for what it does. URL dispatch is smart and admirable, but why do you like the way symfony does it? &gt; The main thing I like about it is I can easily generate links Which you can do just as easily with the string parse approach. &gt; The bottleneck for most web application is the database I'm not sure why everyone believes this. This is almost never actually the case. The bottleneck for nearly every web application is developer performance. The scaling bottleneck for nearly every web application is order of CPU growth. Please don't throw platitudes at me. Despite the proggit myths, I've actually read RAND data. The database is virtually never the bottleneck; where it is, it is because the people using the database don't know what they're doing. Think I'm wrong? Just remember, Digg invented an entire new database, because they couldn't figure out why MySQL was so slow. Because they *hadn't* *indexed* *their* *primary* *lookup* *column*. The database is *never* the bottleneck. Complete fucking myth. Almost no sites scale to the point that a normal database gets even slightly perturbed. What, do you think most websites are Reddit?
Whenever I run into any issues with MySQL, I try going through the command line to make sure everything is A-OK.
he might be using MySQL on a remote server, in which case it's probably shared hosting that doesn't allow command-line access. he could try logging into phpMyAdmin using the credentials he created for the db and see if that works
I don't know how you created the database, but if you used cPanel, you might need to also assign privileges for "username" to the database. 
&gt; You're wrong that there's no need for this. What I actually said was "this already exists," which is quite different than "there's no need for this." &gt; Not for performance or for containment, but simply because I have a few recursive data structures that I need to model That is what containment means. Notably, trees cannot store recursive structures, because trees are directed acyclic graphs, so either you're confused about what a recursive structure is (linked lists are *not* recursive structures, to make an easy example) or what a tree is. &gt; And you're wrong about it not being cumbersome. There's a big difference between "I don't know how to do it without it being cumbersome" and "You're wrong about it not being cumbersome." You would do well to take that difference to heart; I was prepared to explain this to you, [like I did for this guy](http://www.reddit.com/r/PHP/comments/f2yb3/query_help_2_joins_group_and_an_order/c1cvyjd), but now you've pissed me off, so I'm not gonna. Feel free to insist that that's because you're right, and not because you just swooped in out of nowhere, said "you're wrong" when you meant "I don't see how you're right," and generally yammered a lot. &gt; I've written in PHP something that could probably be 10x faster if it was done for me in C and built in to the language. That's cumbersome. Are you just willfully ignoring what I meant? Clearly I wasn't talking about program efficiency. Christ. &gt; As well, a large amount of the code I've written is just the usual almost-boilerplate implementations of the usual SPL interfaces like Iterator. Okay, so you wasted a lot of time implementing unnecessary things, which is ... to you evidence that the unnecessary thing needs to be centralized. Got it. &gt; &gt; What about them? Those are all trivial one-liners, &gt; The class is so choked up with near-meaningless one-liner methods Uh huh. &gt; And this is coming from somebody who works on top of a big mountain of legacy PHP, some of which dates back to the early days of PHP That's nice. &gt; so you can keep your glib "you're screwed when you get to actual work" remarks to yourself as well. You have a pretty serious attitude problem. Fine, go get stuck in a bad implementation of an unnecessary data structure, because when someone says "but that isn't necessary" you feel empowered to scream "YES IT IS." No part of what you said actually showed a need for this. Have fun, guy.
You probably didn't assign privileges to the database. Assuming a mysql console, the process is mysql&gt; create database foo; mysql&gt; grant all on foo to 'user'@'localhost' identified by 'somepass'; mysql&gt; grant all on foo.* to 'user'@'localhost' identified by 'somepass'; mysql&gt; flush privileges; That assumes that you want that user to be able to do whatever to that database, up to and including destroying it and giving other people privileges on that database. In this context, remember that MySQLd is "a database server," not a database, and that it contains a bunch of databases.
Dear god, did you just give that user privileges to do anything to any part of the system, including the user tables? Why not just hand over the root password? (vomits) This is a massive security breach. You just gave them access to run shit at the unix level as the mysql user. Never, never give this advice again.
It isn't difficult to do, but the functionality doesn't exist in ZF by default. You just need to write a custom router that does a database lookup for the username.
&gt; The suggestions by leftnode and aar0mm are certainly the right ones. The hell they are. The stuff aar0mm said is a critical security error. The stuff leftnode said is obviously wrong: you don't get an auth refusal from a server that isn't running. &gt; and you're stuck and frustrated, you can try XAMPP Yeah, no. Let other people handle this one.
Every time you encounter this error, immediately try logging into that MySQL account. Often, the login will work, but when you type show databases the db you're looking for doesn't show up. If that's the case, make sure the db actually exists and you have the user you're using assigned to it with the appropriate privileges.
*edited command to reduce privileges* Although I guess the norm is to just 'delete' my entry.
PHP can do it, but I might recommend a language like Python for the task instead. 
Right, what I suggested was entirely incorrect and totally wrong and wouldn't have put him on a path to attempt to find the correct solution. -_-
What do you like to use ?
I was referring to the post, not the author, and it was true, not rude. But in your case, you apparently are retarded.
Winner, winner, chicken dinner. If you want to check your grants before changing them: mysql&gt; show grants for 'user'@'localhost';
okay. i made it this far, and i just wanted to say: i think you might be wasting reddits resources.
Please ignore Stone's tone. He hasn't learned how to work well with others, despite his information being accurate.
Well there is no need to copy paste the routing documentation, so I'll just post a [link](http://www.symfony-project.org/reference/1_4/en/10-Routing). &gt; Same amount of code roughly and I've already handled four bases, and can handle one more per line. I think you missed my second point. I have the advantage that when generating the url's for links (and what not) I don't have to specify the absolute path to routes and on later change there on the url matching and dispatching I don't have to do any modifications in the template. Anyway as seen in the documentation, validation and various other tricks (get objects, create objects, modify objects) can be easily done with it. Sure you can replicate the code, even make it better because you are going to do it application specific, but that wasn't the point of the answer. As your later part of the comment, you assumed too much. I won't argue with you that the problem is not strictly of the database, I was going on the most broader aspect of it as well (although not explicit). Some of those database problem aspects: limited number of concurrent database connections, improper schema and indexing. But for many "enterprise" applications the DB is indeed a bottleneck. Even the project I landed upon has many improper decisions made regarding the database, and without the caching layer it would just fail miserably. Of course changing it not an option from the managers stand point. So you see why I asked initially about you using caching library. &gt; What, do you think most websites are Reddit? Was this necessary?
[supervisor](http://supervisord.org/) can also work well in place of upstart.
Never could understand why a new php user would use shared hosting when you could a) virtualise linux under windows or b) use a VPS (obligatory plug for the always awesome linode). Doing either allows you to run MySQL and PHP as God (All Hail FSM, noodles be upon him!) intended not to mention allowing you to do stuff that you simply can't do on shared hosting.
Anything I need I write myself.
perhaps others just need to learn to gracefully accept criticism once in a while... he can come off as trollish, I agree, but as you say - his info is usually spot on.
Closure tables?
Even though you're trying to be sarcastic, this is strictly speaking correct: you were entirely incorrect (the server wasn't down,) and checking to see if the server was up would not have put him on the path to checking whether he had made privilege grants. 
&gt; I think you missed my second point. I have the advantage that when generating the url's for links (and what not) I don't have to specify the absolute path to routes Yeah, neither does anyone writing unscripted HTML. They're called "relative links." &gt; As your later part of the comment, you assumed too much. I won't argue with you that the problem is not strictly of the database No, sir, what I said was "your assertion that the database is nearly always the problem isn't correct." That isn't me assuming too much. That's you assuming too much. &gt; Some of those database problem aspects: limited number of concurrent database connections, improper schema and indexing. Those aren't scaling problems, and have nothing to do with being a bottleneck to the webserver. Stop pretending you said something other than what you really said. &gt; But for many "enterprise" applications the DB is indeed a bottleneck Repeating yourself doesn't make you correct. Out here in the real world, RAND measures, and databases constitute bottleneck problems in less than one half of one percent of their six thousand group survey. Stop repeating proggit catchphrases at me. &gt; &gt; What, do you think most websites are Reddit? &gt; Was this necessary? Was it necessary to point out that almost no websites have reddit-order scaling problems, when someone was saying "most problems out there are scaling problems in the database?" Absolutely. I'm a little bored of this. You're repeating things you've heard, and have no experience with. It's pretty painfully obvious.
Whereas your tone is worse, and you never help anyone.
Notably, your new advice is actually just a literal cut and paste of what I said. Take credit much? ---- Edit: hilariously, you've edited yourself again! First, it was (you've erased your wrong.) Then it was this cut and paste of me: GRANT ALL on foo to 'user'@'localhost' identified by 'passwd'; GRANT ALL on foo.* to 'user'@'localhost' identified by 'passwd'; And so when called on it, you decided to add three *more* lines! Except *all* *three* *are* *wrong*, and two of them open *new* security holes. Now it says (since you'll doubtless wipe this one out too) mysql --user="root" --password="your_root_password" CREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password_for_new_username'; GRANT ALL on foo to 'user'@'localhost' identified by 'passwd'; GRANT ALL on foo.* to 'user'@'localhost' identified by 'passwd'; exit; Except: 1) You never, *ever* put your password into a command line, because then any tool with a freshman's understanding of linux can snoop your password out of your command history; 2) You aren't supposed to quote those arguments, or use equals signs; 3) You've given two different passwords to that user, with shockingly different privilege levels, meaning that what that user is able to do, the same account, is different based on which of their two passwords they use; 4) The create user is implicit in the grant, and making it explicit that way actually weakens the account; 5) It's quit, not exit, and you don't put a terminator afterwards, because it's a shell command, not an SQL command (like use database); 6) Not one of those three lines added anything to the example I already gave, but two of them introduce serious new security problems, one of them also brutally difficult to figure out. It's time for you to stop giving advice on MySQL now.
It's a little sad that you guys feel the need to badmouth someone for pointing out catastrophic security errors in advice. Maybe you should call aar0nm a troll for giving advice on something he knows nothing about. People like you and WarRabbit make me want to leave. No, I don't come off as trollish. Trolls are people who pick fights for fun. I showed an appropriate level of horror when some novice stepped up and said "here, hand over the keys to the vault." If you want my info, cut out the bitching. I'm running out of patience, fast.
they want something publicly accessible but don't want to pay more than a few bucks a month?
A link to the RAND paper if you have it at hand maybe? As for the rest of the comment, it's either me phrasing it poorly or you reading it incorrectly because your comment seems way off from what I wanted to say.
The former sentence is false. Zend Framework is a loosely coupled framework that has use-at-will components that are designed to work together on demand. I assume it is this use-at-will nature that you're referring to as "useful libraries", but this is simply an added benefit to using the framework. If you fancy a full stack MVC system, Zend Framework has you covered there as well. Some of the components in the framework that are designed to add a ton of flexibility do indeed provide some bottleneck, but if you do not need the convenience and flexibility that they provide, you can simply not use them.
Good point, that should definitely be on that list. To be honest, I wasn't aware of that solution. XML datatypes, serialized blobs etc. might be options too. Thanks for the comment.
&gt; A link to the RAND paper if you have it at hand maybe? RAND publishes mostly on dead trees. There's probably a link behind a paywall somewhere, but I wouldn't even begin to know where.
You're right, I didn't see he put the specific error message, I briefly read it as him not being able to connect.
nor do most have the necessary skills to manage a server.
I appreciate your saying so. That's vanishingly rare here, admitting error. Upvoted.
This is actually do to the cache control headers your server is sending. Make sure they are something like: cache-control: public pragma: x-anything-but-no-cache 
uhm, I was trying to stick up for you but ok. How was I badmouthing exactly? You *do* come off as trollish, or if you want to nitpick semantics perhaps standoffish would be a more fitting description. *shrugs*
&gt; How was I badmouthing exactly? &gt; &gt; he can come off as trollish Super difficult to figure out since I already spelled it out. &gt; You do come off as trollish Again, trolling is picking a fight for the sake of picking a fight. &gt; if you want to nitpick semantics perhaps standoffish would be a more fitting description That's not what nitpick, semantics or standoffish mean. You seem to be missing the point. It doesn't matter if you agree. When you say shit like that, I don't want to be here. So even if you think you're right, if you want that "usually spot on info" to still be here, stop telling people I sound trollish. This isn't a question of "unless you think you're right." This is a question of "you're being unpleasant and I don't want to be around you." So make a judgement call. I didn't respond to the other guy because he actually *was* being a troll - picking a fight for the sake of picking a fight. And you fed him. I responded to you because you were trying to stick up for me, albeit in a way that frankly makes me wonder if you have any idea how ugly what you said actually was. Because you seem to think I'm of value here. I'm trying to explain what happens when you insult people that way, even while you're trying (sigh) to stand up for them. In, I have to admit, probably the least successful way I've seen in months. But hey, if you want to get down into arguing about it, I'll just fuck off, because I have better things to do. It really doesn't matter if you understand why it's fucked up for you to say someone's a troll. It's simpler than that. If you want that info to stay around, stop saying that.
You can do it with index/index (default controller/action) and declare the route in the bootstrap. Going that route, _everything_ else will need a unique controller name followed by slash 'something'. Another option could be to run 2 separate apps at separate sub-domains eg bio.socialnetwork.com/username
i believe you have to use smileys so as to not appear offensive edit: ;)
I'm replying because you claimed I insulted you, and because your reply implies in several places that if I respond, you will withhold your info in future and thus that I shouldn't ("If you want that info to stay around, stop saying that."). That's quite a nasty tactic. It also implies that if I do reply, you won't answer me ("if you want to get down into arguing about it, I'll just fuck off"); a way of trying to convince me to drop it. It also belittles the argument ("I have better things to do"), so while you make sure you make your point, you also casually mention how unimportant it is, making any reply seem irrelevant or petty. This is, however, all underpinned by the assumption that I care whether you stick around or not, and by the assumption that I care what people think of me. The fact that you're reading this (or at least dismissively ignoring it) should be enough to demonstrate that the first assumption doesn't hold. Because I've replied, either I don't care if you leave, or I find your threat of leaving insincere (PS: "redditor for four years"...). Either explanation will do fine; both destroy the efficacy of this threat. The second assumption, you'll just have to take my word that I don't care what people think of me, within reasonable limits. Responding like I am to your comment? It makes me look very petty, arrogant, argumentative, that's true. On the other hand, perhaps it really is better that I just keep my mouth shut in order that you continue dropping morsels of info for the rest of us to humbly consume. But I dislike the principle behind that. If replying means that you stop contributing to /r/PHP that would be a shame - I really do find your comments insightful and useful. But at the cost of being bullied into submission? Not only that but being mischaracterised? I don't want to pay that cost. (and I really do have nothing better to do tonight, more's the pity.) I know the above sounds like trolling on a grand scale. Frankly, it pretty much is. I do enjoy debating. I enjoy picking apart arguments. These characteristics are shared by trolls. But your reply demanded nothing less of me. I really hope you don't take it personally. Now to the substance of my reply (and I'm sorry I felt it necessary to have such a long justification for my reply but I felt it was required in order to diffuse your threat): I want to defend my name as you appear to have misread what I wrote, and I don't want to be mischaracterised: &gt; "it's fucked up for you to say someone's a troll ... stop saying that" I never said you were a troll. I said you can come off as trollish. Saying that you come off as trollish is not an insult (so, you're right, I have absolutely no idea why what I said was ugly). It's the difference between saying "That dress makes you look fat" and "you are fat". I'm saying "Some of your comments make you look like a troll", not "you are a troll". you define troll as "troll - picking a fight for the sake of picking a fight". I feel that a good example of this would be pointing out that "That's not what nitpick, semantics or standoffish mean." (Nitpick:['to be excessively concerned with or critical of inconsequential details'](http://dictionary.reference.com/browse/nitpick), such as whether *le mot juste* is troll or some other term. Semantics:['the study of meaning'](http://www.teachit.co.uk/armoore/lang/semantics.htm). Standoffish: ['Distant and cold in manner; unfriendly'](http://dictionary.reference.com/browse/standoffish). So what I said an be rephrased as: You do come off as trollish, or if you want to be excessively concerned over inconsequential details such as the meaning of 'troll', perhaps distant and cold in manner; unfriendly would be a more fitting description. Is that clearer for you?). So by your definition, I think that we've both been trollish in our comments today. Phew. Well I've said my piece now. I really do hope that I haven't offended you. I've just tried to explain how you came across to me. Your contributions to this subreddit, from what I've seen, are insightful and useful. But your tone often appears abrasive, which gets peoples backs up. It got mine up, the result of which is the above comment. I think we're probably both on the same team, just reading too much into each others words. I didn't mean to insult when I said you came across as trollish, and you didn't mean to deploy nasty tactics which seemed trollish in your reply to me. That or we're both trolling each other ;)
If I was you, I'd get your self better book and also try not to use mysqli_*() functionality is quite an old method, you're far better off using PDO. www.php.net/pdo 
If it's a rather complicated piece of code that isn't easily identifiable by simply looking at it, then it's good to put a few sentences (or more if needed) explaining the algorithm in detail.
Assuming you're running Windows, I would recommend installing wampserver or XAMPP, and playing around with phpmyadmin for a while. Create some tables, insert some rows, and practice joining rows of information. Also, read up on CRUD. After you get a feel for that, you should be pretty excited to see what you can build with php. If you're able to have fun learning on your own, you might just have a future in it. Good luck !
&gt; your reply implies &gt; That's quite a nasty tactic. Yes, lambast me for things you imagine I said. &gt; It also implies that if I do reply, you won't answer me That is something that lives only in your imagination. Maybe if your reply were about things I actually said, my reply in turn might be substantive. &gt; This is, however, all underpinned by the assumption that I care whether you stick around or not No, it isn't. I gave you a value proposition. You make the call, not me. If I were assuming what mattered to you, like I did for the other guy, I wouldn't have replied at all. &gt; The fact that you're reading this (or at least dismissively ignoring it) should be enough to demonstrate that the first assumption doesn't hold. Wow! You disproved a wrong assumption you invented. Bravo. That'll show me! &gt; The second assumption, you'll just have to take my word that I don't care what people think of me Nobody said or suggested you did. I didn't say anything about what I think of you. Did you hit reply on the wrong comment? &gt; I know the above sounds like trolling on a grand scale. Not particularly grand. &gt; I do enjoy debating. This isn't debate. This is you making things up for attention. &gt; Saying that you come off as trollish is not an insult Okay. That doesn't change that I'm sick of nobodies who do nothing to help bitching at the sidelines. I don't know what part of "my opinion and reaction are not open to debate" made you think trying to argue with them would be effective. It is, again, simpler than that. People like you are unpleasant, and people like me tend to leave because of people like you. Be aware of that. You don't have to agree with it. Just be aware of it. &gt; (Nitpick:'to be excessively concerned with or critical of inconsequential details', Has not occurred. &gt; Semantics:'the study of meaning'. That's like saying that swimming is hydrodynamics because hydrodynamics is the study of movement in water. Just because you can read a few words in a book doesn't mean you're interpreting or contextualizing them correctly. Double uppercut: semantics is about interpreting and contextualizing correctly. &gt; Standoffish: 'Distant and cold in manner; unfriendly'. I have not been distant; I have engaged every stupid fucking thing you've said. I have not been cold, which would suggest that I do not react to or become critical of the stupid fucking things you say. But thanks for cut and pasting a few sentences out of a dictionary and pretending they support you when they quite obviously in fact do not. It helps me be less interested in this conversation. &gt; You do come off as trollish Says the guy picking a fight for no reason. &gt; Well I've said my piece now Peace, not piece. It continues "I've put together those words that lay rest to my heart." Please stop dropping phrases you don't understand. &gt; I really do hope that I haven't offended you. Oh bullshit. You already knew you had. This is just you trying to feel like a nice guy. You've gone on a whiny, insulting rant, which bore no purpose, in a response to "this kind of thing makes me want to go away." And now you want to feel like you have tried not to offend. &gt; I think we're probably both on the same team Nope. For example, I give away applications, libraries, code, I write long tutorials, I give hosting to public projects, raise money for amateur groups, I get people's video games published, et cetera. You moan and bitch, use words you don't understand, and wave your dong around, apparently completely oblivious to how much nobody wants to hear it at all. &gt; That or we're both trolling each other ;) No, you're just trolling. Nobody's trolled you. You're just repeating valid criticisms of you back to others so you don't have to face the truth. These are behaviors that Piaget thought you'd have grown out of by age eleven. Please stop wasting my time. No part of what you said was pleasant, interesting, factual or purposeful. You're just bitching to feel important. ---- TL,DR: Awww, someone says if you don't stop being unpleasant they won't teach you things. How unpleasant of ... them! (sigh) You could just be less of a dick. But instead, you'll drive people away and then claim they're the problem for leaving.
I don't use Magento, but do use Gearman heavily. It's so powerful and flexible. I make it do tons of algorithm computations and it's flexible enough to follow a Map/Reduce style or not. Awesome tool.
Good post, very informative. I'd wager that not very many people would ever *need* a PHP daemon, but I like exercises like this.
I would recommend "PHP 6 and MySQL 5 for Dynamic Web Sites" by Larry Ullman. This book is great, I've always enjoyed reading the Visual QuickPro Guide's. They keep is simple and straight to the point. I hate books that use absurd analogies to explain syntax and logic... NOT at all relevant. There is also a PHP 5 Advanced and MySQL book by the same author. The MySQL chapters in "PHP 6 and MySQL 5 for Dynamic Web Sites" are great for starters. I would recommend reading the book start to finish. When you DO get to the end of the Advanced SQL and MySQL chapter, feel free to open up "MySQL" by Paul Dubois. Great read once you understand PHP and the basics of MySQL. Like jesse_dev recommends, download and install [wampserver](http://www.wampserver.com/en/) - tinker around with it. If your more advanced and you love to play around with computers: take an old PC, format it, install CentOS + LAMP. Teach yourself how to config PHP / Apache / MySQL and setup your router to accept external requests. 8) Once you get through the basic book, bookmark [PHP Manual](http://www.php.net/manual/en/) ^_^ 
Get into a framework fast. Cake or zend are the best. Learn framework and php at the same time.
I see what you mean the problem is i have the controller already created and using a sub-domain has a hit in regards to seo. It just seems to me that Zend should have a way to deal with this since it is a common necessity to have a profile account followed by a forward slash after the domain name. I find it odd and limiting.
Shared hosting is: * Cheap * Easy to set up * Great for small projects I don't recommend going to a VPS unless the project is going to need a VPS. It's too much work for not enough gain. 
I got started with Ullman's book, also - though granted, a much older edition. PHP4, anyone? :P Can't recommended it enough. 
Frameworks are worth their (theoretical) weight in gold once you begin developing more full-fledged applications for the general public to use. I would highly suggest having a solid fundamental understanding of PHP syntax and basic programming concepts like loops/conditionals and data structures first, though - especially function parameters. Much of what is done with even the configuration and basic use of the framework relies on them, and I feel like for most people (myself included) trying to introduce both programming elements like that and the MVC model would do more harm than good. 
If you know nothing about programming then I would say go with [Sams Teach Yourself PHP, MySQL and Apache All in One](http://www.amazon.com/Sams-Teach-Yourself-MySQL-Apache/dp/067232976X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1295405849&amp;sr=1-2). If gives you a good understanding about programming in php. It doesn't really go that deep into advance stuff, but will give you a good base. 
Sean wrote another good article on this subject titled [Dæmonize Your PHP](http://phpadvent.org/2009/daemonize-your-php-by-sean-coates)
Well, sir, I commend you on being unusually competent then! :) I've gone through and cleaned up/had to maintain a lot of code where turning error_reporting up at all made the app unusable due to all the warnings and notices (this includes a lot of very popular open source projects), and the top result on Google for "php validate email" is [this article](http://www.linuxjournal.com/article/9585) titled *"Validate an E-Mail Address with PHP, the Right Way"* that suggests using a convoluted regular expression. And although you knew about or found out about magic_quotes, register_globals, etc, most people have *no idea at all*. These are very PHP-specific things that people coming from other languages would never expect, and once they do find out, they don't necessarily realize they're toggleable and end up relying on one setting or the other. I've seen the code a few programmers have put out coming from other languages, and although the structure is a bit better, things like that often trip them up. I do know other developers like yourself that can do pick up a language and be incredibly professional and competent quickly, but in my experience that's very much the exception. &gt; "Sorry for the long delay in response, I've been using a different account." No worries whatsoever. Have a good one, buddy! :)
lynda.com, w3schools
I am in your same boat I have just started around with PHP and have gotten a lot of help from PHP: The Good Parts By Peter MacIntyre http://oreilly.com/catalog/9780596804381 there are a lot of good code examples and I am slowly working my way through the first project that I came up with. Its just an exercise logger that pulls data from a MySQL database. I think that the best way is to just pick a project and go for it, and hit up the Google when you get an error message :)
[I actually heard that book was terrible.](http://www.amazon.com/PHP-Good-Parts-Delivering-Best/dp/0596804377/ref=sr_1_1?ie=UTF8&amp;qid=1295408266&amp;sr=8-1)
I'm not so sure you're following. You can have mysite.com/username , as long as everything else looks like mysite.com/controller/action . It's not specific to Zend in the least either. It's a matter of having unique routes without collision. I still don't recommend it. I can assure your project will have less headaches, if you can allow it to have a unique identifier in _some_ part of the url across the system eg mysite.com/u/username or mysite.com/username/bio. What if your admin panel is at /admin and you have admin for a username? mysite.com/admin would have a conflict, whether you use Zend or Cake
I would recommend watching YouTube tutorials on the thing you're working on at the time. The combination of seeing someone do it and explain why and then following along (preferably making your own minor changes) helped a lot. My favorite YouTube channel for this is flashbuilding (there is actually much more PHP than flash). I bought a bunch of books and didn't use them all that much. Lynda.com has a good video DVD as well. 
Exactly, and it has nothing to do with the framework.
Humh I thought it was going well. I got it from my Cubemate so for a free book it has been great. Those were some comments on Amazon though. 
Thanks I wil check those things out. XAMPP comes highly recommended. 
I say that, but I still own it. There were no reviews of the book at the bookstore. I bought it impulsively a few days ago to see what the author had to say, only to see the reviews on Amazon later that night. I'll be reading it, regardless. 
Thanks, two recommendations from different people is always a good sign. Ill check that book out. And about messing with an old computer to accept external requests via router would be pure sex. I assume this " CentOS + LAMP" act as an OS if everything is formatted (im a noob, dunno much). 
* Shiflett's [Essential PHP Security](http://www.amazon.com/Essential-PHP-Security-Chris-Shiflett/dp/059600656X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1295408393&amp;sr=1-1), though a bit dated, is still a relevant introduction to PHP security. * Trachtenberg and Sklar's [PHP Cookbook: Solutions and Examples for PHP Programmers](http://www.amazon.com/PHP-Cookbook-Solutions-Examples-Programmers/dp/0596101015/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1295408490&amp;sr=1-1) is a great way to expose yourself to common challenges you'll encounter and how they can be solved, which is important for orienting your thinking for programming. Pick out the problems that interest you, try to solve them, then see what they did. * Join a few forums: [phpfreaks](http://www.phpfreaks.com), [SitePoint](http://www.sitepoint.com/), [DevShed](http://forums.devshed.com/). * Never give up on any problem. It's an attitude I adopted immediately, and there has yet to be a needed solution I have not found or created. * The main thing you'll be doing on the Web is pushing data in and out of a database, so understand how this is done, and understand it well. MySQL is the easiest to start with, and popular. * Get an SQL client / front-end. [phpMyAdmin](http://www.phpmyadmin.net) is the most popular free alternative on the Web, and it works anywhere. For more polished GUIs, use [SQuirreL](http://squirrel-sql.sourceforge.net/) for linux environments, or, my all time favorite on either Windows or Linux environments, [SQLyog](http://www.webyog.com/en/), which unfortunately requires a license, but it's genuinely the best SQL front-end I've ever used; it's extremely powerful. When you want to really flex your skills, move to the command line, which will be a necessary skill for many career Web developers. * Use a text editor you're comfortable with. I for one do not like the bulk of IDEs like [Aptana](http://aptana.com/), but that does not change the fact that it's popular. If you just want a text editor, Notepad++ on Windows, Vim on Linux. * Find a [coding](http://pear.php.net/manual/en/standards.php) [standard](http://geosoft.no/development/javastyle.html) you like and stick with it. * Be wary of online tutorials. *Always look at the date of publication and the comments.* Standards and practices do shift. * If you've already got an idea of what you would like to do with this knowledge, do it. You say you want to build online magazines to book vacations and rentals, so don't waste time on beginner problems that admittedly don't excite, and can deter, many newcomers to programming in general. Practice by doing, and within a year you will have made use of mostly all the basics, and been exposed to many advanced areas of the language as well, all while doing exactly what you want. Your maintained interest is the most critical component to success. If you find yourself wired at four in the morning you're doing something right. * When you are comfortable with the language, begin to look at OOP, and find a practical reason to build a class. I say find a reason because it can be difficult for someone to jump from functional to object oriented programming. It requires you to think of programming differently. How did I get started? It was totally corny. Years ago I was playing around with HTML and CSS, then with Apache and hosting on localhost, and in my browsing for more knowledge on the subjects I came across a site that displayed my IP address. I was completely intrigued, and wanted to do the same thing. I spent a few days looking at some of the languages that could do that (I never even knew that another language was needed), and I reasoned that PHP was the easiest. I displayed that IP address and was totally infatuated with the ability; I thought it was the coolest thing ever. Now I work for a promising startup, developing in every part of the stack. 
I understand what you mean about the collision situation. However, if this is not a case specific to a framework then how do other social web sites manage this, facebook profile url, for example is facebook.com/i_the_user as well as other social network web sites?
I agree, am a very "hands-on", "visual learner" so this is good advice. When you say "flashbuilding" do you mean that Flash can be controlled by PHP? I always wondered what the language people program flash with. hmm. *edit* oh never mind it is action script. 
I got essential PHP security on my shelf waiting. I like your attitude about programming, I am a bit of a perfectionist with who can't sleep until I finish what I have started (it is 6am here in Spain proving this point). Advancing to a CL would be a dream come true and so would OOP which, to what I understand, would be in the direction of a software engineer? I have worked as a private, online marketing consultant (for small companies) who does a little of everything like CSS web design custom made for optimal SEO value, aggressive search engine marketing with unique landing pages for traffic analysis, and beautiful professional photography with attractive graphic design (something I have noticed that many programmers lack is the front end "artist gene"). Now that I feel I have a great understanding on front end stuff, I want to begin learning how things really work. Maybe mix this all up to create something new in the future. I am a true believer in "learning by doing" and I never start anything unless I am very serious about mastering it. Thank you for this post, I have already started listing my "things to do" for this month. 
I also receive this error (http://imgur.com/fEzv2) while installing apache. It won't run after installion, giving the same error. I installed php engine before installing apache.
I get what you're saying.. Thanks!
I tried to install Fast cgi, but it tells me, The product you are trying to install is not supported on your operating system. I have Windows 7 64 Bit Ultimate.
He accidentally the whole bot.
no. i would avoid hard coding the domain name if you can though.
Who are you, why are you asking me to publicly AMA, hiding your identity, imitating me, etc? Get bent.
I'm gonna use a variable for the domain name but I just need to know if there's a performance hit when using anchor tag links from a absolute url or relative link?
&gt;obviously I can't call the query for "WHERE property_id = A AND property_id = B". why not that sounds like exactly what you should do. Maybe post the table structures 
Won't work, the property_id can't be two things at the same time.
One way to handle it would be to do a subquery for each... WHERE item_id IN (SELECT item_id FROM properties WHERE property = A) AND item_id IN (SELECT item_id FROM properties WHERE property = B)
Why can't you do A AND B? Are you using an INNER or OUTER join? 
I should probably note that at that point a JOIN isn't needed. You're just selecting on the items table and the two subqueries effectively take the place of the JOIN.
On the client side, it'll probably take a few extra nanoseconds for the browser to calculate the absolute URL from the relative URL, so the first form is faster. On the server side, on the other hand, it'll probably take a few extra nanoseconds to interpolate the domain name into the output stream, so the second form is faster. **tl;dr:** No, it doesn't matter at all.
You can do it with a join like so: select distinct i.* from items i join properties a on i.item_id = a.item_id join properties b on i.item_id = b.item_id where a.property = 'a' and b.property = 'b';
A few more minutes of thought... SELECT ... FROM items JOIN properties AS p1 ON p1.tem_id = items.id AND p1.property = A JOIN properties AS p2 ON p2.item_id = items.id AND p2.property = B;
Because as stricken also said, "property_id" can't be two things at the same time. That's my idea too. And... Well, to be honest my guess is that I'm using INNER joins since I'm just calling for "JOIN" without inner or outer and I don't really know the difference between them
Thank you very much! I didn't know you could do several joins, it works perfectly!
Thanks! I couldn't get it to work, but I guess the idea is similar to BrianFranklin's one, thanks anyway!
You'll have to post the code of contact.php so we can see what's happening behind the scenes.
I see thank you!
INNER JOIN and JOIN are both the same. They return results IF there is a match. If you want to return results of the full set (even if there are no matches), you'd specify an OUTER (LEFT or RIGHT) join. http://www.w3schools.com/Sql/sql_join_left.asp and http://www.1keydata.com/sql/sqlouterjoin.html are both good resources despite what you may hear [otherwise](http://news.ycombinator.com/item?id=2104271)
I'm just going to do this in Ubuntu. It seems like it be a little bit easier. 
usually you just want to give them the access level to do whats necessary, so if all the script is going to do is read from and write to the existing tables then grant them only access to read and insert.
WHERE property_id IN ('A','B')
I think the best thing for you would be to use a bundled installer, something like WAMP ( http://www.wampserver.com/en/ ) - it will do it all for you.
Even better idea: Make a whole bunch of fake form fields and have them hidden via CSS.
I think that's Second Edition! I have that one on my shelf. :]
Yup as everything formated. If you do eventually consider doing this: to make it a little bit easier I would recommend trying Ubuntu Desktop and Server. Ubuntu team made it easy to setup an Apache server. 
Ignore the commented out HTML (I should get rid of it eventually): http://pastebin.com/v3N4TVxM 
Ok, I have to drive home, but answer to question number 2: it's expecting $_POST["submitForm"] to be set, but I can't see this element anywhere. Renaming your submit button should get it to send emails at least... &lt;input type="submit" class="button" name="submitForm" value="Send Email" /&gt; That's just from reading the code, I'll have a better look when I get home. Looking at the page, the confirmation should show up if the email gets sent, so that'll answer question 1 too. 
Answer to question 3, you can do some sort of javascript on each input. So like: onfocus="javascript:if(this.value=='Your Name'){this.value='';}" onblur="javascript:if(this.value==''){this.value='Your Name';}"&gt; Replace 'Your Name' with the contents of each input box.
I added that line instead of the old line and it still doesn't seem to work in practice. Thanks in advance for looking into it further. 
It is a very useful technique indeed, and is known by the name Honeypot captcha. Good job on inventing it on your own :) 
Implication != inference. There's no imagining, I was being kind calling it an implication, on the assumption that it was unintentional. In fact it's pretty explicit. &gt;you imagine I said. Do the accompanying quotes not fully substantiate my claims? &gt; lambast me no, your tactics. You seem to have trouble separating criticism of your approach and actions from criticism of you as a person. I've never said anything bad about you, just about the way your comments sound. Unlike you, who's repeatedly insulted me as a person. &gt; Nitpick ... has not occurred. This tangent is the result of you nitpicking the phrasing. You seem to forget that there's an entire comment history so we can each look at exactly what the other said. You nitpicked. Now you deny it. Troll. &gt; Peace, not piece. Rather an inconsequential detail don't you think? Oh that's right, you don't nitpick. Also, please google "said my piece" or "said my peace" and note the general theme of the questions relating to that phrase. &gt; Oh Bullshit. You swear rather a lot, and yet call me unpleasant. You also are dismissing an apology, which is rude. &gt; For example, I... blah... followed by some kind of argument from analogy, that because I'm apparently engaging in dong-waving here that I therefore couldn't possibly offer anything of value elsewhere. Or something. I'm not really following your reasoning there. tl;dr You're either a troll and don't know it, for which I pity you, or you're just trolling. Drive people away? Please do be driven. I shan't weep for you.
I'd use a GROUP BY and a HAVING clause if you insist on this being a JOIN statement. SELECT i.item_id FROM items i JOIN item_properties ip ON i.item_id = ip.item_id WHERE ip.property IN ('a', 'b') GROUP BY item_id HAVING COUNT(*) = 2
Or join to the properties table *twice* - once for each property. Edit: as posted below, just noticed.
Yeah, I wish people would use this more often. Name the field email_address or something, with an id, and have is display:none in the CSS - sufficiently obscure that generic bots won't be able to deal with it. It won't help you if you're a big enough target that it becomes worth writing a custom bot for your site, but for small blog publishers it's super effective. Nice work ;)
I usually hide a text field named 'zipcode' with CSS, if it still get's filled, ignore the submitted form.
No. And don't forget about href="/page.php" The forward slash makes it absolute (WRT to the web root).
Did the email send? I tried that locally and the email sends for me. Perhaps your host doesn't support mail() ? The confirmation doesn't show up because it's looking for an element called form_thanks to put the thank you message in.
I've done something similar on one of my sites. I added an empty input field named "comment" but with the label "leave this field blank". The bots always filled it with spam and it was very easy to filter.
Awesome, thanks man. I will test it on our dev machine this week :)
No, the mail doesn't send from the hosted page. I'm using Godaddy on economy hosting, so maybe there's something key missing from the hosting package.... 
Can't you use OR?
Take a look around here: http://community.godaddy.com/help/510 or http://community.godaddy.com/groups/web-hosting/forum/topic/making-a-contact-form/
S/he wants items that have properties A **and** B. If Item 1 has A and B and Item 2 just has A, using OR would return both Item 1 and 2, where we just want 1.
Next step after honeypot is to add timeout before post can be accepted. If it does not stop the spam, it will slow it down at least. If all this fails, you need to revert back to visible captcha (e.g. ReCaptcha). Well you might try to use services like Akismet too.
Thanks, will have to invest some time into integrating that onto that page sometime later... 
The fact that the article recommends mysql_real_escape_string instead of PDO just ticks all the boxes that this is blogcrapspamorific.
Yeah, I always name mine "url" or something like that. Works like a charm.
Nitpicking here, but I believe (not sure) Python's startswith()/endswith() are case sensitive and your PHP replacement functions do both. $startswith = function ($s, $n) { return(strcmp(substr($s,0,strlen($n)),$n)===0); };
You will have to be wary of auto fills, make sure it has an obscure name attirbute, not something that Google toolbar or similiar will try and fill in like "address".
Wow! Regardless of what you believe I edited one time and it was indeed to include your two lines of grant and that was after you were such a dick. **EVERYONE-- StoneCypher GETS ALL THIS CREDIT KARMA!!!** **EVERYONE-- StoneCypher GETS ALL THIS CREDIT KARMA!!!** **EVERYONE-- StoneCypher GETS ALL THIS CREDIT KARMA!!!** I never claimed to know it all, but I do know my suggestion would let a php n00b connect to his db so he could continue learning. Get over yourself dude. 
best way to do it, create a session variable whenever someone browses the website, lets say $_SESSION['browsed'] = true; on the script that processes the comments do if($_SESSION['browsed']=true){ //process comment, add it to DB etc } that way only people who have browsed your page within the time frame of a php session expiring can post comments.
Solutions like akismet or other collaborative filtering (a la gmail) work well. Captcha is a real shotgun blast - it was a clever solution at the time, but the OCR field has quickly grown up, to the point where good machine-resistant yet human-readable captchas are difficult to find. The next step? Personally I find kittenauth to be a great solution, but design-wise it's unweidly.
Thanks for sharing this link. I would not have found that channel on my own. I subscribed http://www.youtube.com/user/flashbuilding
Thanks for these resources. I'm taking a look at Aptana its not something I have used (normally Notepad++) but it looks like there is a lot of power in there
&gt; and that was after you were such a dick. Yeah, it's my fault you handed over the keys to the vault, then verbatim copied the person who set you straight, then handed over the keys to the vault again. I adore how you're throwing a tantrum like this while complaining about how much of a dick other people are. &gt; I never claimed to know it all Yeah, but you did claim to know this, and three times in a row you were wrong in about as serious a way as possible. &gt; but I do know my suggestion would let a php n00b connect to his db You can know that all you want, but as it was pointed out to you, you weren't correct the first time. Also, your suggestion would let any redditor connect to that same server and start erasing files at random. Stop bragging about how right you were. That's just pathetic. It's just not that hard to say "whoops I was wrong," and *not* follow it with more tries to not be wrong. &gt; Get over yourself dude. Stop giving advice you don't understand, novice, you're putting people at risk.
&gt; Implication != inference. There's no imagining, I was being kind calling it an implication, on the assumption that it was unintentional. So, what you're saying is, you have no idea what an implication, which is a resolutely intentional statement, is. It doesn't matter what you call it. You were yelling about something that isn't in the source text. You can call it inference, implication, understanding, insight, whatever you have to. It's all just hash for "I'm sure you meant that, I'm just sure of it." &gt; &gt; lambast me &gt; no, your tactics. No, your imagination. You yelled at something you inferred incorrectly, which was not in the source text at all, and now you're defending it as "lambasting my tactics." In case you forgot, that was "he won't reply." You really just have no idea how to be wrong, do you? &gt; You seem to have trouble separating criticism of your approach and actions from criticism of you as a person. No, I'm having trouble separating criticism you make of things you imagine as inferences from reality. There is no point at which it's valid for you to criticize people for things they did not say. &gt; &gt; Peace, not piece. &gt; Rather an inconsequential detail don't you think? No. Not even a little bit. You've completely failed to understand the usage of that phrase, which is "because I spoke, I no longer feel conflicted, and therefore I will not need to speak any further, because I have spoken my peace." You clearly have not. You're still defending your interpretation of things I never actually said. &gt; I've never said anything bad about you &gt; You're either a troll and don't know it, for which I pity you /me sighs. That's nice. Are you done? You haven't said anything interesting or factually defensible in quite a while, and I'm not actually interested in your opinion of me. &gt; Drive people away? Please do be driven. This is how you "stand up for people" because you think their information is valid. There's actually no chance of my being driven away; I just made the mistake of taking what you said at face value, and believing you actually gave a crap. So, I figured a little behavior modification might help you understand how startlingly unpleasant you were, that even when you thought you were standing up for someone, they still didn't like seeing it. I really thought you might get that. But, instead, you decided to argue. Later on, guy. You probably shouldn't waste time replying again, to insist how correct you are some more. &gt; I shan't weep for you. Ah, the fine words of Roger Fakin. Do you just not understand how pathetic you look, stringing out your text this way in the desperation to look sophisticated? He Olde Hilariousse Self-Unaware Poseur, as Shewn at Merrimont. By Blythe.
&gt; You also are dismissing an apology, which is rude. Says a lot about the quality of your apology, that the person who received it wasn't even aware it was there. Whatever you have to tell yourself, kid. Maybe you've forgotten the purpose of an apology, or failed to understand that if your apology was successful, this wouldn't have happened. But again, nothing's your fault. Keep editing those posts, to make it look like you said crap you didn't, guy.
The devs that don't pick up a language as quickly probably aren't as OCD about programming as myself! errors keep me up at night. Thanks for your quick audit of my knowledge, I'm all psyched up to jump back into my personal project again now.
you're now just adding more layers of intentional misunderstanding and I'm presented with a choice; continue correcting you (which seems pointless at this stage) or bow out. Well done, you win. Do you keep a tally?
Eh, I think "Best Way" is a fairly big leap. None of the bots I have written[1] would be affected by this. Heck, even wget/curl can handle cookies/sessions. This will have an effect on bots that don't implement cookie handling and/or ones that operate from a list of pages, without actually crawling the site/posting in real time. With that said, this concept can be useful and I do use a somewhat similar version of this, although it is more advanced involving several fields + hashing + other stuff, to add a little more control on how people access webapps. However, it should not be the ONLY check you have in place, especially if you are doing anything more serious than a wordpress blog. In this case, using javascript to set a variable in the form would probably be more effective, as it is far less likely that an off the shelf bot could handle javascript than cookies... Edit: Also, your code example is broken ;) * Should use "==" otherwise, if statement will ALWAYS be true * Closing bracket, "}," is commented out. [1] Only created for fun/legal uses
edit: oh whatever. You call me pathetic. Yes, this has been pathetic. It's my first time. How many pathetic discussions like this have you been involved in here? Can't you see what a troll you are? Go away, don't come back. No-one will miss you.
&gt; No-one will miss you. Spoken like a delusional champ. In the last two days, I've had more than 50 people thank me in public, and three people got me a free month of reddit gold. One of my comments crossed the thousand plus barrier, and three more crossed the 500. Find someone else to talk to.
Find someone else to talk to.
Yes, and in the last four years you've been branded a troll countless times. One mysql tutorial doesn't solve that. You couldn't even hold back your trolling on the very thread you're so proud of. Lol. Bye now.
Yes, just keep saying troll. That'll make you right. Find someone else to talk to.
Using hidden values to stop spammers is as old as the hills; most captcha toolkits explicitly avoid this. Instead, use an input, give it a real-looking id, and use CSS to hide it.
&gt; What I'm doing is a query that is joining the item_id from table "items" and the property_id of the "properties table" It sounds like you are trying to join on something that isn't a valid relationship. Maybe if you post the database schema... It seems like you should have three tables (items, properties, item_properties) and the query would look like this: SELECT * FROM items i JOIN item_properties ip ON i.item_id = ip.item_id JOIN properties p ON ip.property_id = p.property_id WHERE p.property_id IN ('A', 'B');
The book I learned PHP on was "PHP and MySQL for Dummies". Worked like I charm, I used that book as a textbook for years, till my friend borrowed it and never returned it :(.
troll.
Another method which JacKrac mentions below is to have an empty form field hidden in the manner discussed above, and set the value to some special string using javascript. Only allow forms where $_POST['hidden']=="GetYourHandsOffMeYouDamnDirtyBot"; edit: or hey, dynamically append a form field so the bot wouldn't even see it in the form at all. It disadvantages non-js users, who whinge like crazy though.
You're right.
The first blog post that shows up about sorting "dictionaries"... Makes me suspicious of the rest of the blog. I understand its python developers that might not be familiar with php. But if you are giving advice you should at least be familiar with php array functions as they are probably one of the strongest points of PHP. Here is a much more effective way of accomplishing the same thing: $list = array( 'Some label' =&gt; 5, 'Some other label' =&gt; 2 ); natsort($list); print_r($list); /* Array ( [Some other label] =&gt; 2 [Some label] =&gt; 5 ) ) */ http://www.php.net/manual/en/book.array.php
Real nice post. "tidbits" is a great description.
It is actually an input I'm using, it's a textbox hidden with CSS that has the captcha question in it, if altered you can't post.
I also use a little JS to replace the form URL. Bots don't currently run that JS so the form posts to a page that says 'You don't have JS enabled, please click here to confirm you are human' which then forwards them to the post action page. So far this, coupled with your idea of hidden form fields has removed all bot spam.
If any amateur developers want to implement this in wordpress, there's a plugin called hashcash that works wonders.
Thanks Ryan, glad you liked it :) It reminds me of [Timbits](http://t2.gstatic.com/images?q=tbn:ANd9GcRNrwxXqf6TSmYzIisSEXQBpQ_YiRLvuP4doI6eXbsLJTVCKwEO4A) .. Which makes me hungry.. lol 
Thanks! And I'm not insisting on using JOIN, but I don't know any other way.
I'm doing this from my phone. I notice that your form tag is missing an action. It is currently an empty string. It should submit to itself. Write the url of the form into those quotes. &lt;form action="the_url" method="post"&gt; replace the_url with the url of the form. As an aside, I am never responding to a post about code from my phone again. Writing code on a virtual keyboard is a PITA! 
I do have three tables and item_properties is the relationship between items and properties, but trying that query is the same thing, it will match every item that have property A or property B
I use this often. I just check to make sure the field is blank, and if not, die("BOT"); Most effective captcha I have encountered so far.
I don't know why I did that. I must not have been paying attention. If the property_id is in the middle table, you can try: SELECT * FROM items i JOIN item_properties ip1 ON i.item_id = ip1.item_id AND ip1.property_id = 'A' JOIN item_properties ip2 ON i.item_id = ip2.item_id AND ip1.property_id = 'B'; I think that's pretty much the same answer that BrianFranklin gave though. 
Alrighto, I am in the process of refactoring my forms code to use some of the technology from that script.
It goes something like this: * page.php = path relative url * ../page.php = path relative url * ./path.php = path relative url * /page.php = root relative url * //domain.com/page.php = protocol relative url * http://domain.com/page.php = absolute url 
Are you done yet? I get it, you're angry. 
Oh. Then I have nothing of value to add. Carry on.
I usually subclass PDO with some extras and then get access to it from anywhere using [Singleton](http://en.wikipedia.org/wiki/Singleton_pattern).
What does any of that have to do with forms?
Have a look at [wikipedia's entry for global variables](http://en.wikipedia.org/wiki/Global_variable) to see why they're considered bad. Passing variables to the constructor tends to make things simple and obvious but if you're not doing a lot of testing and you have fairly simple applications I wouldn't worry too much about it. Have a look at [this blog](http://misko.hevery.com/category/oo/) if you want to get "hardcore" about it.
The Akismet plugin for wordpress has worked extremely well on the blogs I admin.
I will typically pass the connection object into the constructor of the class. $myuser = new User( $conn ); $myuser-&gt;getOneById( $id ); 
Read the manual. Ignore the comments. Read the complete function reference.
Perfect timing for me... Just yesterday was trying to figure out how to make classes act like arrays... Awesome.
&gt; You got me on the containment thing, ignorance on my part. Okay. &gt; You're still wrong though. To implement RecursiveTreeIterator you have to implement about seven methods from various SPL interfaces. So, let me get this straight. First, you say - by metaphor - "I want to cut my way into this bank vault. I'll need an oxyacetyline torch, some slag gloves, a UV mask, a bunch of oxygen, an arc lighter and a heat suit." I respond "but you don't need any of that. The roof is particle board. You could kick your way in in less than a minute." Your response, again by metaphor, is "you're still wrong though. For example, you need to be ready for the heat, and the molten metal." My whole point was that the SPL itself wasn't useful in this context. Ratifying your statement over mine in terms which ignore what I actually said isn't particularly compelling. If my premise is that approaching this as an SPL issue is silly, using the workload of the SPL to justify it just doesn't get you any traction. &gt; Using SPL interfaces where available and appropriate is a PHP best practice No, it isn't. Best practice doesn't mean "something I think is a smart thing to do." &gt; It increases the chance of other developers being able to come to my code and say "Oh hey that's the Iterator interface I know that" It turns out many more PHP developers are ready to cope with integer indices into an array than an unnecessary application of the SPL. Indeed, very few PHP developers actually use the SPL; the vast bulk of them don't know enough to use containers, and the ones who do generally don't bother because the containers in the SPL are fakes, and don't have the performance characteristics which would have made them worthwhile in the first place. SPL is a pipe dream that's used by people who think they're supposed to use it, rather than people who are selecting tools appropriately. The use of the SPL is a well known red flag of someone who's following cargo cults. To suggest that it's a best practice, I can't even begin to cope with that. I'd explain, but frankly I'm tired of watching you call me arrogant as a response to my helping you. When you're saying "this is good because X," it's usually wise to make sure that X isn't *even* *more* *true* for the other side's approach. &gt; And it's a completely necessary data structure. It's not a datastructure at all either way; it's a container. And look, when someone's saying "this already exists, why are you making it again," your response that it's a necessary container doesn't actually ratify your position. &gt; Incredible arrogance on your part to assume otherwise. One, tone down the insults. They're unneeded and inappropriate. Two, I didn't say otherwise. I'm beginning to believe that you've lost track of what I've actually said to you, in favor of a different argument that you would prefer to have because you find it easier. What I actually said was "you already have this, why are you making a less good version a second time." No part of that is legitimately answered by "but I need it, and you're arrogant to assume otherwise." &gt; The attitude problem was because No, it wasn't. You also shouldn't be speaking about it in the past tense. &gt; I keep seeing your name pop up with incredibly obnoxious rage-filled posts Kay. Next time I won't try to help you. &gt; Childish I know And yet you still want it to be my fault, and you haven't stopped. Carry on tilting at windmills, good sir. Sorry I tried to help save you work. &gt; but you really are pissing people off left right and centre lately. No, I'm not, and it's a little boring watching you pretend that I am. Good luck. Please don't reply if you can't make it through a reply without more insults and accusations. Learn how to say "thank you" for the things you were "gotten on," and people might deign to help you more. I for one won't. Sadly, it seems you don't understand what a loss that is for you. I'd like to ask one question, though. Roughly how many man-hours have you spent on your tree?
That's both got serious efficiency problems, returns incorrect results and cannot be foreign keyed.
Thanks, that was really helpful
Seems pretty biased. PYTHON2PHP ========= Python: hard to read one liner that wouldnt be used in production code PHP: Superfluous whitespace
It sorts a multidimensional array, not a single dimension associative array. He could have used the php multisort function: http://nl3.php.net/manual/en/function.array-multisort.php
This is in no way a dig at this post; the "tidbits" were well thought out, and not your average "7 things you didn't know about PHP" items; I enjoyed reading it. I sometimes wonder, however, if I'm actually a better (or at least more knowledgeable) PHP dev than I give myself credit for. I always click the "things you should know" and "things you didn't know" posts about PHP to try and learn something, and it's been a long time since I have. I'm a professional PHP dev, and I know for a fact there's a ton of mundane, slightly varying functions that I don't know off the top of my head, but it's been a long long time since someone pointed out something about PHP that made me shit my pants or jump for joy. Am I alone in this? I *love* learning cool stuff, but the magic just seems to have gone for me.
&gt; That's both got serious efficiency problems, returns incorrect results and cannot be foreign keyed. I understand the incorrect results because I continued to use the 'OR' approach rather than the 'AND' one he was asking about. I don't think I understand why it would be inefficient and not be able to be foreign keyed. Would you care to elaborate? Keep in mind that I realize this isn't what he was looking for, 
How do I answer how something isn't possible? Try foreign keying it. As far as why it's inefficient, benchmark the in clause in the use of memberships some time. There's a reason that's usually written as a join.
I'm on the same boat as you, but a lot of people just learn the basics of the language and that was the target audience of this post. Who knows, maybe someone felt the magic and learned something useful. :)
That depends on what you are using it for. If you are writing your own "db class", then perhaps extend PDO as [simast suggested](http://www.reddit.com/r/PHP/comments/f58k6/using_pdo_inside_a_class/c1ddbx6). If you are just wanting a class to be able to perform a few queries however, that is not going to help you achieve your goal. I suggest passing it into the constructor, this is called [dependency injection](http://en.wikipedia.org/wiki/Dependency_injection), and it has many benefits. One of the main benefits is with unit testing. You can pass a Pdo object set up to access your test database (rather than your production database) during testing. You can also create a [mock object](http://en.wikipedia.org/wiki/Mock_object) to pass into the class during testing to forcibly test your class in different situations (under a query failure for example). The reasons for not using a global variable are many. What if you want to use two instances of the class with different database connections? You lose the ability to do that if you use a global. There is a well respected principle in software design know as the [single responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle). It's a pretty self-explanatory name: a class should only have one responsibility. Creating a Pdo object, or choosing which global variable to use to obtain a Pdo object, counts as a responsibility. As soon as that class relies on a global variable, it isn't portable to another application without modification - unless you happen to use the same global variable in that other application. An important thing to remember is: it's not global *variables* that are the problem so much as global *state*, and although many do not realise it: singletons *do* count as global state, and can cause the exact same problems as global variables. A good class should assume nothing about its parent scope. Follow that rule and you'll be on your way to writing re-usable, testable code in no time.
You can be sure is not intentional.
I do this too. It worked so far.
Until someone evil writes a bot that reads css and figures out which one's are required.
Challenge acce.... Nah can't be arsed... Has to be possible though?
So many ways to implements css. Good luck in botting that. 
Not really, just get a bot that runs the site like a real browser. Google does it to detect hiding text. Screen readers do it to tell the user what form fields to enter. Perfectly possible. Just a matter of time before someone makes a universal one.
Generally bad, but there specific cases where they are actually what you want. Though, in those cases, I usually find I can use anything from an environment variable to a flat file to support the same functionality. :)
Thanks for the details- it is appreciated.
I see. Thanks!
A join is, however, strongly preferred for efficiency reasons. That also scans the table a minimum of four times, where two is achieveable (one may be achieveable, but I don't yet see how.) This query is roughly o(n^2 lg n m^2 lg m), where o(nm) is do-able. Try select id from foo join (select a.foo_id from props as a join props as b on a.foo_id = b.foo_id where a.prop=10 and b.prop=12) as properties on foo.id = properties.foo_id;
The answers you've been getting, based on in, are complexity horrible. Try this one instead, and test them both on large datasets before you listen to the inevitable screeching about how a subselect and two joins are somehow magically worse than two joins, two ins, two ons and two wheres. This drops you from o(n^2 m^2 lg n lg m) to o(nm log t). It may be possible to drop further but I'm not sure how. N is the size of the item table, m is the size of the properties table, and t is the size of the property table's self-intersection residue. select id from foo join ( select a.foo_id from props as a join props as b on a.foo_id = b.foo_id where a.prop=10 and b.prop=12 ) as properties on foo.id = properties.foo_id; When you see an in clause, 95 times in 100, the query is terrible.
This is of course incorrect. For example, this will trigger on the subtable having two rows containing A, or two 2nf-broken parent qualities being present, or etc.
Better to join the properties table to itself to get the residue, then join that to the master. The properties table will almost certainly be radically smaller than the master. Upvoted for being the only person so far to get even close to a decent answer.
&gt; INNER JOIN and JOIN are both the same. They return results IF there is a match. Unmarked join isn't inner join. It's full inner join. They're not the same thing.
And longer version might add something to transmission, but usually you gzip/deflate anyway, and even without that, it really doesn't make a difference.
I feel the exact same way. 
Use routes
Great article and excellent blog overall. Added to my to-read list!
&gt; $GLOBALS["HTTP_SERVER_VARS"]["REQUEST_URI"] Fucking awesome! Especially when he just uses $_SERVER a dozen lines later.
^this. Link to documentation: http://framework.zend.com/manual/en/zend.controller.router.html
So would this suffice? &lt;form action="contact.php" method="post"&gt;
Hi there! I am not too familiar with PayPal API but I did a really shallow and quick review of the code (from PHP point of view): I don't think ArrayAccess is used properly here as you have clearly designated constructor to accept and initialize user credentials. I doubt someone is going to change PayPal User/Password after constructing a class (and you can do that right now): $pp = new PayPal_DoDirectPayment('user', 'pass', 'sig'); $pp['USER'] = 'another user'; // Makes it even more confusing that some data can be changed // using properties and some using array-access $pp-&gt;Amount = 100; Other notes: - Don't add another unnecessary dependency to your lib with the use of cURL. Replace HTTP access code with native [PHP streams](http://php.net/streams). - Usually exception classes are named like `LogicException`, that is - there is "Exception" at the end clearly separating them from other type of classes. Standard SPL exceptions are [named this way](http://php.net/manual/en/spl.exceptions.php). You may want to adopt it too (and even reuse existing SPL exception classes if they fit the purpose). - You may want to split you single .php file into multiple files as having one class per file is a good idea. - Naming protected functions like \_Success/\_Failure (with underscore prefix) is something from PHP4 era. I assume (in your case) it does conflict with other properties so you may want to rename them like events - OnSuccess/OnFailure.
That should work fine. As a matter of personal preference, I would write: `action="&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;"` But for your purposes (since the form isn't going to be moved, right?) what you wrote will be just fine. The above line just writes the page you're on, so if the form moved (or maybe you have no idea what the name of the page is/will be) you wouldn't have to cruise in and adjust the `action` attribute. Let me know if you need anything else. 
Good feedback, thank you. ArrayAccess was done more out of my own convenience, and to provide a means of getting at the raw data should the implementor need to. In an ideal environment it should never be used outside of the class, but if the person using it knows the API and wants to add their own values to the request, then the ArrayAccess implementation allows it fairly easily. &gt; Don't add another unnecessary dependency to your lib with the use of cURL. Replace HTTP access code with native PHP streams. The curl code came directly out of the paypal examples. I'll look into using streams, but on cursory glance this doesn't appear to give nearly as much control over the HTTP connection as curl does. Can I set the SSL Verify rules on a stream? How do I pass POST data to a web request made through streams? &gt;Usually exception classes are named like LogicException You're right, I should have put Exception in the name of the exception objects, thanks for pointing that out. &gt; You may want to split you single .php file into multiple files as having one class per file is a good idea. I probably will in the future. For the time being there are so few that it wasn't a high priority. &gt; you may want to rename them like events - OnSuccess/OnFailure. Good call. I couldn't think of a good naming scheme last night.
Very true, but i was assuming the properties table would enforce data integrity by either using a composite primary key of `item_id` and `property` or at the very least have it as a UNIQUE key to avoid malformed data. This of course is all based on the assumption that this application design has these restrictions for this table. But, from experience, assumptions are a dangerous thing ;-)
Would it be smaller? From the looks of it there will be at least one row in the `properties` table for every row in the `items` table (as the example above shows a one-to-many relationship), so at the very minimum the `properties` table will contain the same number of rows as the `items` table. Or am I misunderstanding what you said? The idea behind my example above is so it can be easily altered to support more properties to check if necessary, simply by adding another letter into the IN clause and upping the COUNT value.
or you could just use reCaptcha and not be a complete amateur like the rest of this thread
So, I seem to be receiving emails from the form now, though they don't contain any of the form information. Here's a screenshot of the email: http://leonardphotog.com/phpformemail.jpg
http://pastebin.com/QNVXWBBH I changed the names of the form fields to match what the PHP up top is looking for. You were just getting the default info coming through because all of the form fields were pointing to something that the PHP wasn't ready for. Funky form... Lemme know how that goes for you... BTW - ONLY change the form fields in the pastebin update I did. (IE - don't just copy and paste the whole file)
I always get that "jump for joy" feeling when I remember about \_\_autoload and the ArrayAccess et al interfaces. Oh, and about the \_\_toString, \_\_set, \_\_get, etc functions. Those things are goddamn priceless, and we should get posts reminding us about them every now and again.
I couldn't agree more. :) Reminds me of that site back in the 2000 where u could set yourself an email to be sent 20 yrs later. lol..
This is what singleton where invented for IMHO, also a single point of configuration setting and retrieval. Singletons replace global variables in a safe way. Also on a general point, globals don't have any real context, especially if you are working with OOP.
hey coder3, rather than leaving the exact same question on here twice, try stackoverflow
This isn't the same question. I figured out how to use example.com/username I just need to know how to hide the url result without using .htaccess and rather use Zend's functionality. Thanks for the help with the former question you mentioned- it gave me insight on how to tackle it.
Well yeah but it's unlikely.
waaaaaay useful: my readable form validation &lt;?php $validation_code = implode( array( (int)(!!!empty($_POST['name'])), (int)(!!preg_match("/^.+?@.+?\..+?$/", $_POST['email'])), (int)(!!strlen($_POST['password']) &gt; 6) ) ); if(($validation_code|000) === 111) { //validated! } else { if(($validation_code|011) === 011) { //username empty } if(($validation_code|101) === 101) { //email empty or invalid } if(($validation_code|110) === 110) { //password empty or too short } } How it goes about validating the input (or any large set of conditions, when you think of it) It implodes an array into a string. The array happens to be made of booleans. They are the result of the double negation (!!) of the condition you are testing for, to deal with those pesky "false, or something completely different" functions. Its casted to (int) so it will actually have a string representation. The result of the implode is a binary number representing the results of the validation, a one is a success, and a 0 is a failure. By or'ing it with 000 (since there are 3 tests in this case), we are saying "dont flip anything (from $validation_code) to 1, and check if the result is 111." Note the parenthesis, if I omitted them then the expression woud evaluate like this: $validation_code|(000 === 111) rather than ($validation_code|000) === 111 due to the | having a lower precedence than ===. This is because (1|0) === 1, (1|1) === 1, and (0|0) ===0. Multiple digit numbers just go by position, so 10|11 = 11, 01|00 = 10 and so on... The next set of tests in the if statement pick the bits apart one by one, testing for the existence of each failure individually, usually for the purpose of creating more detailed error codes. Edit: lowered the arrogance/informative ratio. Edit: Precedence and consistency.
He knows binary, hire him!
Your `implode()` will throw a warning, you didn't specify a string for the first parameter.
I'm willing to bet that when more sites start using the hidden field approach, bots will all get smarter. Right now there's still more than enough sites that so not use this method for the bot owners to even bother.
Same here. It will be that way until they actually make some good progress on the next major version of PHP (6). Last I heard they were still dealing with how to convert everything to to full unicode. Once that happens I believe we will see some real movement.
Exactly, fighting bots is about using road humps.
I stopped sucking from a bottle when my parents forgot it on vacation. 
It doesn't have to be one or the other. Use a hidden field (to catch dumb bots), pass every comment through Akismet anyway (to catch smart bots), and force users to fill out a [reCAPTCHA](http://www.google.com/recaptcha) if and only if they fail the test (to prevent false positives). CAPTCHAs can still be quite effective if you use them as a secondary check.
Thanks, it does actually works better, but what if I wanted to have more properties? Do I need to add more joins and on rules? Something like: select id from foo join ( select a.foo_id from props as a join props as b join props as c on a.foo_id = b.foo_id and a.foo_id = c.foo_id where a.prop=10 and b.prop=12 and c.prop=14 ) as properties on foo.id = properties.foo_id; is that correct?
Just the password. Assuming you meant hash, not encrypt, why would you encrypt a username? What if say you needed to display there username on a profile page, ban/delete a user, or send a confirm email (MD5/SHA1 are one-way). How are you going to do this without referring to them my their hash?
With your hands?
not since 4.3.0: http://php.net/manual/en/function.implode.php
It is more efficient, and I am rather lacking in noodly appendages, so..... 
Read [this article](http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html). Very useful information on what salting is, why you need to use a different salt for each user (and store the salt), etc. But as drhydralisk said, you really only usually hash the password. Most common hashing is one way, so if you hashed the username, you couldn't reverse that. Unless you're using something like AES, but I haven't heard of anyone that does.
They would need access to your server (like though a poorly written script) then they could take advantage of any loose permissions you might have. Like, if you didn't sanitize input and they managed to run a command to write something to a file they would be able to write to any file their user (likely the webserver's user) had permissions for. If you had something with permissions of 777 they could read/write/execute whatever it was.
Person X can't write data to your server willy-nilly if permissions are 0777. **But** you shouldn't count on your scripts being perfect, or an attacker not being able to find another means of modifying your files. Maybe the script is vunerable, maybe a hacker gain access to someone else's FTP account, either way proper permissions prevent many attack vectors.
&gt; foreach ($_POST as $key =&gt; $value) { echo "$key =&gt; $value"; }
Shot thanks!
Basically, if you have your permissions set to "world" writable, then anyone with an account on the same server as you (assuming you're using shared hosting, for example) can write data to your directory or over your files. They can do this deliberately through FTP (depending on the setup), or through a custom PHP script, or cronjob, or whatever. And of course if they are using poorly written scripts then that can give someone *else* (ie. a web visitor) the ability to write over your stuff.
You can also make use of the fact that PHP allows you to do this: &lt;input type="text" name="myfield[]"&gt; &lt;input type="text" name="myfield[]"&gt; &lt;input type="text" name="myfield[]"&gt; Which PHP translates into: $_POST = array( ["myfield"] =&gt; array( 0 =&gt; 'value of first field', 1 =&gt; 'value of second field', 2 =&gt; 'value of third field', ) ); You can supply the key as well: &lt;input type="text" name="myfield[mykey]"&gt;
this is also a good solution
Cool thanks. That looks easier to manage too.
I don't see why you would want to encrypt any of this, and hopefully you aren't encrypting the password because you should be hashing it (one way). Most PHP apps store all of this as is, except for the password and it's accompanying salt which are obviously hashed.
&gt; ArrayAccess was done more out of my own convenience, and to provide a means of getting at the raw data should the implementor need to. Alright, I see your point. But have you considered replacing ArrayAccess interface with ArrayObject subclass? class PayPalNVP extends ArrayObject {} You can now drop your ArrayAccess code and instead of `$this-&gt;data` use just `$this` (eg `$this['USER'] = 'user'`). You will also get foreach, iterator, count, sort support on your object for free with less code than you have right now! &gt; The curl code came directly out of the paypal examples. That's the problem with code examples as they usually come from other examples. &gt; I'll look into using streams, but on cursory glance this doesn't appear to give nearly as much control over the HTTP connection as curl does. How do I pass POST data to a web request made through streams? See my blog entry: [POSTing data without cURL extension](http://simas.posterous.com/posting-data-without-curl-extension) &gt; Can I set the SSL Verify rules on a stream? Set `verify_peer` and `verify_depth` keys to context options. See [SSL context options](http://php.net/manual/en/context.ssl.php) for more.
Not an introductory book at all, but once you get through the others: [PHP 5 Objects, Patterns, and Practice](http://apress.com/book/view/1590593804) is golden for learning OOP concepts that'll help get you from "website dude" to "freaking wizard." Avoid it until you get a finished application or two under your belt though, it can be discouragingly heavy stuff. Once you get the bug and "good enough" is no longer good enough, it'll probably find you. Hopefully there'll be an updated edition of the book by then too, but the 2005 edition is still solid. 
I thought INNER was optional and is just used for clarification?
By the way, whoever downvoted me, that's not an insult. It's a commentary on personal development. I was forced out of my dependency on bottles, which means I graduated to the big leagues: drinking out of glasses. Give the analogy some thought; I know linguistic devices are not everyone's forte. 
That's the data sorted. Now do you need to send the definition of the form to the server too, so whoever looks at the data next can make some sense of it?
Given you're a retarded child, don't ever use the $_REQUEST superglobal; it's [dangerous](http://www.google.com/search?q=php+why+%24_REQUEST+dangerous&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a). You should *know* what type of data is coming through, whether it be POST, GET, or COOKIE. I will otherwise lock you in a room and deprive you of human contact and food, as a retarded child should be. :)
Yeah I'm sure I'll figure that out. But if you have suggestions please go ahead 
Just hash the password. 
You know me don't you....? But thanks! I need to know this stuff.
I'll be integrating with PayPal soon, so this may be useful. I don't have time to look at it right now, but how does it compare to [this one](https://www.x.com/thread/36523), which I've tested? 
I actually saw this comment the other day and face palmed. 
No, no I don't, but I'm unabashed, which can be interpreted as friendly if done just right. Happy coding!
(something or something) and something?
&gt; Singletons replace global variables no
So you could very well end up with multiple connections. great
and people wonder why php developers are considered inferior. &gt;you're far better off using PDO. WRONG
I actually came to /r/PHP to tell others on how to use PHP as a daemon since I recently used it as one. I was creating a Dead Mans Switch implementation on some server software I created and decided to run it as a daemon rather than some hacked cronjob PHP app. The Java app essentially told the PHP daemon it was online at regular intervals. I could have written both in Java, but I didn't want to. I wanted to do it in PHP. It was part proof of concept, part wanting to use PHP because it doesn't require compiling.
That also depends on whether the other people have been caged into their own directories, using various techniques. Even then ways are discovered to break out of the chains now and then, and that's when whole servers get hacked en-mass.
Doesn't seem to do what is needed... If you do ('a' or 'b') and 'a', it would return both Item 1 and Item 2, since they both have 'a'...
I've been a PHP dev for nearly 12 years now, so I know the feeling, but I still love PHP. I think about it not as the language I'm using, but I'm building things that millions of people use. That's a pretty powerful motivator.
Some in my reader: http://phpadvent.org/ http://sebastian-bergmann.de/blog/ http://www.adayinthelifeof.nl/ http://ilia.ws/ http://weierophinney.net/matthew/ And of course, mine: http://blog.leftnode.com :)
You're hilarious.
I meant hash, my bad =)
TIL
Thanks for the suggestions. I enjoyed the PHP Advent blog but I hadn't heard of the others. Its not a blog but the Changelog Podcast from Github http://thechangelog.com/ talks about a lot of cool open source projects that are out there. 
You care to explain why rather then being a troll?
http://www.planet-php.net/ pretty much have all the big ones.
Join is full inner join. So inner is not implicit, no: full inner is, instead.
That's one way to go about it, yes. If you end up needing a bujillion properties, it might be smarter to make a temporary table of those properties using union all, then join that against a rollup of the property table, then join that against the element table. Save that for when you're looking for (seat of the pants guess here) 25+ properties, though, and even then, only if you're having problems scaling. TL,DR: it's possible to get better than this, but you're not likely to need to.
is he trying to prove a point?
mySQL's not my strong suit, but something like this sounds reasonable: A tasks table and a lookup table with a unique 2 col key on {task_id, prerequisite_id}. Then when the user tries to `update tasks set done=1 where task_id=4`, just `select count(*) from prerequisites p, tasks t where p.task_id=4 and t.task_id=p.prerequisite_id and t.done=0`
 - iBuildings [techPortal](http://techportal.ibuildings.com/) - Well written articles by PHP experts. Always very in-depth and enlightening. No top 10 PHP functions here. - [Dynom](http://blog.dynom.nl/) - Nice for learning about PHPs quirks.
You can do all of this in a single table. Have a table called `task` that stores all of the tasks for all of the users in the system. The structure would be: task_id INT PKEY AUTO_INC user_id INT INDEX project_id INT INDEX created DATETIME modified DATETIME subject VARCHAR(256) utf8 task TEXT utf8 required TINYINT(1) DEFAULT 0 complete TINYTINT(1) DEFAULT 0 sortorder INT DEFAULT 0 status TINYINT(1) DEFAULT 0 Now display the tasks ordered by the sortorder and don't allow task N+1 to be done until task N's required flag is 0 or complete == 1.
That's very interesting. It gets complicated though. Technically, you can do landscaping outside before or after the carpet is laid, but they're really separate projects that all build up to the final house. I like your idea though. I think I might modify it to have a category as well so that I can group similar "sub-projects" together.
And if I wanted categories of tasks, say plumbing, electrical, landscaping, etc, I could add that into both tables and link based on that as well. Right?
If you're doing anything similar to Microsoft Project (Server) I would look around for developer docs. It uses SQL Server for the back-end and I'm pretty sure the schema has been mapped out by people needing to do customizations. You'll need to dig deep though. I'm not saying you need to re-invent Project, I'm just saying you might get some good ideas from it. It's pretty comprehensive when it comes to project management.
not both tables, just the task table. The prerequisite table would be a table linking the task table *to itself*. Because a task is a task, and a prerequisite is just a relationship between tasks, right?
Touche. That would work great I think.
Good suggestion. Thanks
Ideally, I'd like for it to be based around the database. The problem is that as time goes on, new tasks may need to be added and I'd love to just be able ot make a few additions to a database and have it flow through easily to my app.
That should return a and b where item is 1
bear.
Hanging around in #phpc on Freenode, one tends to get all of the news there.
The only thing you need to do to his table is have a prereq_id. 0 means no prereq, otherwise you link to an existing task_id. You can create an infinite tree of parent/child nodes all in the same table.
This was my first thought, but it doesn't allow for multiple prereq's per task, so I suggested a lookup table instead.
You could keep the logic out of the table entirely and write your rules entirely in the class that matches the table. I've done this a lot. 
The problem you are talking about is a Gantt Chart. Take o look at the wiki page for suggested tables/data. Also a google search suggests that there are DB solutions out there that you could look at
I didn't realize cookies were merged in as well. TIL. Looks like 5.3 does away with cookies in in $_REQUEST by default though which is a good move.
You seem to be making a gantt chart. That's actually kind of a pain in the ass, as the database isn't enough; SQL cannot express the sequence search efficiently. I'm in the middle of writing one of these now. In the interrim, if you're just making a tool for yourself, use a pre-rolled one; you don't want to build this if you don't have to. It's a lot more difficult than it seems at first blush.
Not a significant one, no.
You may want to look into Gantt Charts: http://en.wikipedia.org/wiki/Gantt_charts Warning: this stuff gets complicated quickly.
You might (and it's a big might) be able to do this in Javascript--but PHP probably won't help much. You need data from your clients' computers to be saved to your servers, which may require an HTTP request to be sent to and handled by your servers, but the rest can be done client-side. In fact, you could probably do it with a browser addon or something....then again, if the form only gets filled out once by each user, that would be a little silly.
You cannot obtain the fields from a form that's pulled via iframe unless it's the exact same domain (cnames have to match unless you specify an override in both pages). This is considered cross-site scripting
What about hosting the form on your site so you can save the data on your database then using something like cURL to post to the government site in the background?
Well, that wouldn't be helped by PHP either, would it? But a userscript certainly might work--though, as I said, it would be a bit of overkill for just one use, especially if the users were originally using IE....
I'm not particularly interested on the job but let me help you with some concepts here; what you're trying to do is to hijack a form submission, I understand that you may have legitimate reasons for it but it's usually a bad thing, the best would be if the aforementioned government website provided a way to ping back your website after the form is completed otherwise you'll have to act as a proxy. the frames approach isn't viable as far as I know due to security restrictions on the client side, for that approach to work you wouldn't use PHP but Javascript and try to attach an event to the form on the government page in order to intercept the submission but as I've said such thing is not allowed by browsers because it can be used maliciously. the proxy approach means that your server has to request the page from the government website itself and show it to the user as part of your website (or a form of your own with the same fields) then have the user fill it and receive the results on your website and then have your server send the data back to the external website. it has to be able to recognize the errors shown on the external website in order to show them to your users on your website which makes this a bit fragile (if they change their website you'll have to update your code immediately for everything to keep working). also it would be good to have the approval of the government website before trying to do it this way, it will be registered on their logs that lots of different requests are being sent from the same computer (IP address) which is pretty suspicious. in my opinion, the best would be to have the users use the government website and then ask them to just copy the number back, I know this isn't as "streamlined" as we would prefer but in your case giving that the external website is uncooperative and unprepared for integration it may be preferable. ps: the programming language of choice (PHP in this case) isn't particularly relevant and also depending on the approach it may not be available.
That system looks like it expects you to already know the API arguments, it's just a wrapper for the actual web request. Basically it does the same thing as my core class. My plan is to build a full set up objects to handle all the paypal methods without having to know any of the api.
Are you saying that I can duplicate the form exactly on my site and as the user is entering data it is being simultaneously entered into the government's site? That could work, but my only concern is still having that application number to go back and make edits. Forgive me for my ignorance, I'm not from a programming background. 
 +----------+ | Projects | +----------+ | ID | | Name | +----------+ +-------------------+ | Tasks | +-------------------+ | ID | | Name | | ProjectID | | ParentTask (null) | | Complete | +-------------------+ The tasks table can reference itself in the ParentTask column. Each task refers to a particular project. If the ParentTask is null then the task itself can be completed at any time. If you want to build a fence and pour concrete, then these are 2 completely independent tasks, but they both require the land to be prepared, so the parent tasks would be set to the land preparation tasks. Not included in this layout is the user table. You can figure this out yourself.
Thanks for the feedback. I think that what I'm looking for may very well be impracticle if not impossible. Another option may be hosting a duplicate form that mimics the government form exactly and collects the data to my server. I could then go to the government site and manually enter the data, although I'm open to any suggestions on making that automated if possible.
cURL would give you a second web-based request where you can emulate the customer's browser and push a legitimate form post to the government site. You can then retrieve the returned page and URL to obtain any IDs or confirmations numbers from the government page. This second request would run within the same half-second the first post occured...the customer wouldn't see it and wouldn't know the difference. The drawback here is that if the government site is slow to respond it would make your site appear slow as well.
&gt; ArrayObject That does indeed look a lot easier to work with, thank you! &gt; See my blog entry: POSTing data without cURL extension $response = file_get_contents('http://example.com', false, $context); Ah, I knew there was a reason I never used streams. On some webhosts (dreamhost, anyone?) accessing remote files via php streams is disabled for security reasons. You HAVE to use cURL.
Yup that all is of course assuming there's no chrooting going on or other variables to consider. Just plain ol' /home/user1 + /home/user2 + unix permissions.
well that is automatable, it was part of my suggestion and someone else suggested the same as well. I'm just worried that in their records all submissions will be originated from the same machine (your server IP) so I think it'll be god to let them know before doing anything in order to avoid suspicions. good luck!
And a prerequisite could be in a different category than the task itself. Before you hang drywall or paint the walls you probably want some electrical work done.
I find mind mapping programs a really fast and easy way to design a DB schema. Then I take it from there and use MySQL Workbench to draw it out more precisely. [MindManager](http://www.mindjet.com/products/mindmanager-9-win/overview) is great but pricey, there is a ~~torrent~~ demo I think. There is also [FreeMind](http://freemind.sourceforge.net/wiki/index.php/Main_Page) which is an open source mind mapping program. I like these because you can add new siblings by simply pressing enter and typing, or children by hitting insert. You can also drag branches around to quickly resort everything. It really helps organize the initial developmental process. Since I started using it (and it's so easy) I show it to my clients and ask them to layout what exactly they want of me.
Sounds like you need hierarchical data in your database. The best way to handle this is to both have a parent_id field, as well as a left &amp; right column as described here: http://dev.mysql.com/tech-resources/articles/hierarchical-data.html To start with you can skip the insert and delete functions, and simply rebuild the tree every time something is added or deleted. There could be a boolean column to indicate whether a parent needs to be completed before children items.
Doesn't make sense to me. :( Item 1 has 'a' and 'b'. (a or b): True. and a: True. Item 2 has just 'a'. (a or b): True. and a: True. Both will be returned.
Yes you can, you just need to be creative.
I can confirm this would work.
agreed, as long as the form you are submitting to is ok with the same machine (your sever) submitting the form over and over again. If it is, cURL is the easy and simple solution.
When you do that be sure to update this thread. I had a look at the classes and example, which look very handy. 
That is actually an extremely bad way to handle heirarchal data. Besides, this isn't a heirarchalism; you need the cement floor before quite a few things that aren't members of a cement floor. The mysql approach of edge painting (they call it nested sets) - which is very different than what you said, naive parent pointers - is also bad. For heirarchal things one wants Bill Karwin's closure trees. However, this is not a heirarchal job. 
Prerequisition isn't heirarchal. This model will not work.
You're just using things you think are database phrases. He's asking how to choose a good car and you're telling him about paint colors. None of either of your two responses has anything to do with what he asked for, which is table structure.
This assumes incorrectly that all prerequisite structures can be reduced to a single integer indexing. That falls apart as soon as you want to support multiple people. This also doesn't allow multiple or alternating prerequisites.
Using recursion it will. Although I haven't had the time to figure out the query. The easy approach would be to use PHP to perform the recursive queries for each task. Please explain in more detail if you think I'm still wrong and why you think I'm wrong.
- I'm not sure it's an extremely bad way to handle hierarchal data. If done completely it's fast to insert and delete nodes, and the entire tree can be read in one query. What's the issue? - Yes I agree it might not be appropriate with this situation, as yes you would need multiple parent items.
&gt; Using recursion it will. Although I haven't had the time to figure out the query. You're never going to figure out the query. Sorting priorities is a graph search; SQL style recursion cannot search a graph faster than o(c^n), which is radically slower than tolerable. &gt; The easy approach would be to use PHP to perform the recursive queries for each task. I think you've completely failed to grasp the actual workload here. This just isn't easy. Take it from someone who's already done it. &gt; Please explain in more detail if you think I'm still wrong and why you think I'm wrong. I basically already did. If you don't understand what I said, then either I could spend two years teaching you computer science, or I could wait for you to put your money where your mouth is. This isn't easy just because you know how to spell the word "recursion." Recursion is not a magical golden hammer which solves all problems.
You may be legally required to encrypt details pertaining to credit card accounts.
&gt; I'm not sure it's an extremely bad way to handle hierarchal data. Well, people with experience are. Try reading this. Start at page 48. http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back &gt; If done completely it's fast to insert and delete nodes, and the entire tree can be read in one query. It is not currently clear whether you're talking about parent pointers or edge painting; you spoke about parent pointers, but the link you gave went to edge painting. The problem is, you can't read the entire tree in a single query with parent pointers, and insert/delete speed is a crippling problem for edge painting. It appears that you can't actually tell the two solutions apart, and are mixing characteristics of the two. It is not possible to perform a vertical traversal in parent pointers without a new query. This is why you cannot extract a complete tree in a single query with parent pointers. To insert or delete from edge painting, you have to re-number two columns for every single row above the inserted/deleted row. &gt; What's the issue? For parent pointers, query rate, storage density, the requirement to manually reassemble past the query, the inability to meaningfully foreign key because of delete stacking, serious table and row locking problems, integrity issues, the cost of finding small subtrees, et cetera. For edge painting, agonizingly slow insert and delete, impossible move without full delete and reinsert, table level locking problems, the inability to meaningfully foreign key because the adjustment breaks every reference, et cetera. The document I pointed you to explains these topics. This is fairly basic DB stuff. What I'm concerned by is that you not only confuse your solution with the two different ones presented at the link you gave, but that the characteristics you describe do not belong to any single member of the three. It's really quite apparent that you don't understand the basics of SQL performance, and are parroting things you heard, because if you understood how these queries actually worked, you would not have made the errors you did in stating performance topics. &gt; Yes I agree it might not be appropriate with this situation There is no good time to use either parent pointers or edge painting to do trees in SQL. Literally none. We're not talking like bubble sort, where there are rare cases where it's a good idea. Closure tables outperform both solutions on every measurement criterion I've ever seen for trees in SQL. There are dozens of other answers. I'm hoping you are one of the few novices who goes "wow I learned a lot today, thanks," instead of having an emotional breakdown at being called wrong and a novice. &gt; as yes you would need multiple parent items. Mmm hmm.
None in particular. But http://www.dzone.com/links/queue.html for getting an overview. You'll have to scroll a lot, but there's always half a dozen interesting PHP posts each day.
First of all, don't be a dick. When I asked "Please explain in more detail if you think I'm still wrong and why you think I'm wrong." I was simply asking for a conversation. Your initial response of "Prerequisition isn't heirarchal. This model will not work." was dickish to say the least. You did not explain anything and now that I politely asked for more information you turn around and do shit like this: &gt; I basically already did. If you don't understand what I said, then either I could spend two years teaching you computer science, or I could wait for you to put your money where your mouth is. First of all, people ask for help all the time. It's our privilege to provide that support. Sometimes an answer may be wrong, but that's exactly why we have open discussions. When people like you enter the picture you make it difficult for all of us to have a friendly discussion on a particular topic. I understand the slow nature of a recursive algorithm. I've been to that class before. The point of the matter is I don't care about the slowness of the situation because if I were to do this problem I would set up my query as follows: SELECT * FROM Tasks WHERE Complete=0 AND (ParentTask IN (SELECT ID FROM Tasks WHERE Complete=1) OR ParentTask IS NULL) This limits the returned results to tasks that need to be completed. A final report can take as long as necessary, but I doubt that you're going to have 10,000 linked tasks. tl;dr - don't be a dick.
Thanks, all this was really helpful!
Wow, that's gotta be the rudest, most condescending reply I've ever had on reddit, well done. I haven't used the closure tables method before, so yes wow I learned a lot today, thanks. And yes I'm not the worlds expert on storing hierarchical data in mysql, I'm just sharing what has worked for me. I do understand the difference between the using a parent id and the nested sets method. In my own apps I use both, which makes it easy to select just the children of a node, or a subset of the tree. In my case inserting/deleting is done rarely, while reading needs to be fast, so combining these methods works fine. Good luck with your life.
Zend Framework is a free, open-source project sponsored by the Zend corporation.
The new query builder is fairly nice. I'm still hoping that one day they'll get around to doing a full site build similar in style to the symfony jobeet tutorial. The existing documentation is good, but it's always nice to have a reference for best-practice for building something.
I'm looking forward to when I feel comfortable enough with CodeIgniter and the MVC way of thinking that I can finally jump over to Yii.
There's a paper Yii book that takes you through building a ticket management system.
Yeah, I started out doing some bits and pieces in CI - it was really great for a beginner as the documentation was absolutely top-notch. I did however eventually run into issues with the framework itself that made me move on - not sure what the state of it is at the moment but development was moving *really* slowly when I last used it.
Yeah, i've been meaning to take a look at that at some point. According to the forum there are some issues as it's based on a reasonably old version of the framework however it still looks fairly interesting.
Not online and not free but [RegexBuddy](http://www.regexbuddy.com/) is the shit. If you use regex fairly often, for $29 is worth every penny.
use sha1() as opposed to md5(). If you're asking these kind of questions, give us a little more security, eh? Good luck!
if item is 2 it would be true (A or B) and false (item 2) would would return no result If item is 1 it would be true (A or B) and true (item 1) with would return a result If I understand the problem, they want all the item 1's that have a property of A or B, but none of the item 2's no matter what property it has?
&gt; First of all, don't be a dick. And this is where I stopped reading.
&gt; Wow, that's gotta be the rudest, most condescending reply I've ever had on reddit That's nice. Go give bad advice somewhere else then. The correct spelling is "thank you for teaching me all that." &gt; I do understand the difference between the using a parent id and the nested sets method. You obviously do not. It's unfortunate that you're unwilling to be honest about your mistake. &gt; Good luck with your life. And you with your career.
Incidentally, that's not what condescending means. I didn't speak to you in baby talk. You're looking for "arrogant."
[Rubular](http://www.rubular.com/). It's for ruby but works well I find.
If you are on a Mac, there's Reginald. It's free and very. powerful
I test patterns in the Firebug console. Never have to leave the page I'm on.
This is a nice one. Bookmarked for when I need to sanity check patterns destined for Ruby code.
It's not a performance issue. It's more of a site structure and future-proofing issue. If you can develop your code so it works with relative URLs (page1.php) then it will be more portable, and easier to test in different environments. 
&gt; Only US$ 39.95 Windows 98, ME, NT4, 2000, XP, Vista, and 7 Yuck.
CI development is still pretty slow, but they recently spun off a [community development](http://codeigniter.com/news/reactor_update/) effort to assist that problem (hopefully!). Haven't really looked at Reactor yet, but some of CI's issues gave me a bad taste in my mouth for CI.
I use Zend Framework extensively. In a nutshell, how does Yii compare?
Do you freelance or work for someone? How do you get more jobs? What kinds of jobs do you usually do?
I make small to medium-sized websites. I usually have between 1 and 3 projects on the go. Commonly, though, only one site will be in development, while others are with the designer, ideally resulting in an unbroken chain of websites being produced by my small company, one at a time.
Whenever i'm working on a project, i'm planning another 2 or 3. That said, i tried not to work on more than 2 at the same time, or else i don't finis any of them.
[http://regex.larsolavtorvik.com/](http://regex.larsolavtorvik.com/) and [http://rejex.heroku.com/](http://rejex.heroku.com/) (for js)
I build applications for a Web site. The suite of features on the site as a whole can be taken as one giant application, though. The distinction is not usually sharp. Is Twitter an application or a site? What about Facebook? 
Normally build web applications for companies and do 1 cms site at a time on the side.
I forgot I had a file by that name in my public directory. For a moment I was stunned. 
It depends on the size/scale of the site and the deadlines. Usually 1-3.
The only thing new that the book really missed was Gii, which is a web interface for yiic the command line tool. It's used for auto generating CRUD from a SQL table and other automated tasks. The book actually does touch on Gii, but not as much as I'd like. The rest is fine, it is based on 1.1 which is the most current branch.
I haven't used ZF much, but Yii is more structured and faster. Here are some good resources: [review zend vs yii vs ci](http://www.sheldmandu.com/php/php-mvc-frameworks/yii-vs-zend-vs-code-igniter-compared) - newest and seems to explain everything the best [stackoverflow: zend vs yii](http://stackoverflow.com/questions/667382/which-php-framework-should-i-choose-between-zendframework-and-yii) [benchmark zend vs yii](http://www.thedeveloperday.com/framework-battles-yii-vs-zend-framework/) 
Seems that's a common route. I started with CI as well. Then I dabbled with 'hello world' with half a dozen others. I was going to go with Kohana and did a bit but then jumped to Yii. I think it's a good route to take. When I first started was a bit of spaghetti coder (though my logic was solid). Then a friend of mine who works for Digg took a look at a code sample and bitched me out really fucking harshly. So, all butt hurt, I took a look at my code, read a ton up on MVC and better coding techniques, and picked up with CI. CI gets you used to MVC but remains familiar to a sloppy coding style so isn't too frightening. After a number of projects with that, I felt I wanted something more structured and more OO. . I'm really glad I found Yii. I feel a Yii developer takes a step above the standard dime-a-dozen craigslist php dev. The structure really helps and it feels more solid, more like ASP.NET. PHP by itself doesn't provide any coding style or structure. People who learn on their own all develop their own unique methods. ASP.NET devs are more likely to have some formal programming education (i have a few semesters of CS myself). Also ASP.NET has forced structure built in, so everyone has to follow some initial set schema, which evens things out. You learn good style as you go. PHP feels much more wild even with many styled frameworks to choose from. Until you know about them, you kind of start out with your arms flailing in the air. I'm just thankful I never started with Wordpress, I saw it recently and it made me want to hurl. I worked with a programmer who thought he could program and learned from Wordpress... It was atrocious, much worse than anything I'd ever seen. Most of the plugin devs there are the same. . oh, and IBM [has some awesome tutorials](https://www.ibm.com/developerworks/mydeveloperworks/bookmarks/html?tag=php&amp;base=http://www.ibm.com/developerworks/library/&amp;dwapp=Technical%20library&amp;lang=en)
I don't really differentiate between the two. But I almost always have 2 projects going on. One which is web development work and one which is an unrelated for-fun project. Usually game programming. In reality I mostly just end up playing Starcraft 2...
Awesome. I'm a huge fan of Yii. Having 10 years experience with PHP, and working with and having developed a range of frameworks (all for private usage), Yii's a joy to work with.
I had a job swap early last year and had to start working with a project immediatley (my first day on the job was making the database), so before starting I had to do research on what framework I was going to use. I'd written a couple before, but wanted to make a clean break - new job, new challenges! I discredited CI, Symfony &amp; Zend for being too big and too cluttered; they've attempted to be everything to everyone and I didn't want to get bogged down in worrying (hugely) about setting up things like caching even before I'd written a single line of code. Of course, caching's important, but there's a time &amp; a place. So I found Kohana &amp; it looked great, made great sense - but what put me off was they were just switching from v2 to v3 as a community, there was zero documentation on v3, and the community was massively split on which version to use and I needed to be confident I was using a good framework. I looked into Yii, found it made just as much sense and was more stable. The community was smaller, but the Wiki and documentation was so more robust. Qiang was doing a release every other month (usually on the 14th), the community were getting plugins publishe as part of the core (Zii,Gii) and he was bug fixing constantly. And as part of the job, I also had to maintain ASP.NET sites, so I read up a lot on that - I got my head round ASP.NET MVC 2 (though never started anything from scratch), most of my work is maintanance in those cases. What I learnt from MVC 2 was the seperation of concerns; none of which I really saw too much of in the PHP community previously. I've tried to take the best of the ASP.NET methodology and apply that with to developing with Yii (which is very similar), and I have to say it works *really* well. The Yii community brings a huge amount to it as well. The extensions and Wiki pages are brilliant and constantly added to, so there's always something to new to find out and learn. In the end, I'm glad I picked Yii over Kohana. It's just an awesome framework. It has practically everything you ever need. 
I work for an agency, so we have a block book our time. If it's a large project, I tend to concentrate solely on that for periods at a time (weeks at a time, if not months) - but along side that, I'll have monthly/weekly tasks for different clients that need to be dealt with. I develop a mix; mostly website. I enjoy getting my head into a web-application and doing it right, but I also like the smaller projects or larger interesting websites.
Too many.
Both. Most of my times is spend making websites, but since those run on a home made CMS lot of my time is spent on developing additional funcionality and/or rewriting old code. I'm working for 3 companies as a subcontractor and I have 3-4 websites going at once. Of course I try to focus on a single topic everyday - 60% of my time goes to website A, and 40% is spent on the rest. Otherwise it's to easy to loose track of what is to be done where :)
Si I wanted to see what the fuss was all about (I'm a ZF guy but wouldn't mind less code and more fun) but the site seems down. Is Yii build to scale ? :p
I'd define "application" as something you interact with, and "website" as something you consume. so twitter + facebook == application.
I work on multiple projects for one client. Some days I'm installing tomcat server and deploying some crazy java app and other days I'm working on a large Zend Framework + ExtJS application. I haven't built a "website" in about 5 years. I pretty much develop web services, back end business apps and maintain a fleet of Linux servers. I do all this from Lima, Peru while working for a Florida based company. In my limited free time I've been trying to catch up on HTML5 and cloud based development as I feel my resume is getting a bit stale. Having a strong background in Linux systems knowledge, however, has really helped me tremendously picking up new opportunities.
No, don't use either of those. http://www.openwall.com/phpass/
Sometimes, one is too many.
The solution you present for implementation walks several ethical and security lines. If the reason you haven't presented the business case is that you aren't sure you want it public, pick someone here who seems smart and ask them what other approach could be taken in private. I see several things which might be solutions for you, but since it isn't clear what you're actually doing, I might be solving the wrong problem. If it's just that you didn't realize your solution was impracticable, your next step is to explain the problem and the business goal in public, so that people can help you look for a less problematic solution.
I used to work on half a dozen client projects in parallel, but these days I've shifted to working only one project which is for myself, because I believe deeply in it. I also have a day job.
"But no offense, [offensive thing]." Why do you think I care about your opinion after you say something like that? It's a much bigger dick move than stepping up with a technical opinion backed by facts. The difference between us isn't whether we're dicks. You're just swinging around insults and whining. I'm actually helping people, and getting thanked regularly. &gt; You talk down to people all the time and you are very rude. You are currently talking down to me and being very rude. I provided value. You did not. I saved someone from incorrect technical advice. You did not. &gt; you are a dick &gt; and there's no reason to insult people Hypocrite. Buckwheat's just angry because he said something wrong, someone said that it was wrong and why, he replied "this is just fine though I haven't bothered to think it through, you should explain yourself," so they explained themselves a _second_ time and pointed out that it was the second time, and since he *still* didn't understand the problem, instead of being reasonable and gracious and admitting that he'd given wrong advice about something he didn't understand, he decided to say dick six times. And now you're joining him in the Amateur Moaning Chorus. What could possibly make you think your opinion is valued here?
next.do ?
Very neat to hear your experience. I don't hear many people mention Silverlight. It is either HTML5 will take over everything, or flash flash flash.
I generally build web sites at work and web applications in my spare time. Websites wise I generally only work on 1 at a time where as web apps is usually up to 5 at a time. My latest website was www.zazazu.tv and web app is www.interstateapp.com.
Yes.
&gt; No I'm stating the obvious. That's nice. So was I. The difference, again, is that there's technical value to what I said, whereas you're just whining. &gt; You've also just demonstrated that you can dish it out but can't take it. You haven't made any technical criticisms, and the whining has no value. I can dish it out. I can take it. You cannot dish it out. Simple as pie, though it appears to be too complicated for you. Find someone who's interested in your opinion to whom to speak, sir. &gt; There's a reason you can't open a thread in /r/php without seeing a dozen reply heated argument between you and someone else that's full of negative rude comments. That reason is that proggit used to be a place where experienced developers could be honest, but it became overrun by angry novices who do not understand the social culture of developers, and spend all day bawwwwing. &gt; There's no reason for it. Yes, there is. That you don't know what said reason is is not proof that it doesn't exist. &gt; And more dick comments that aren't needed. Self referential. Stop messaging me. I cannot be clearer that I am disinterested in your anger.
[RegExr](http://regexr.com) I find that tool quite good, although not language specific it had both online and offline options and its completely free.
I would like to know how good Yii is at scaling also. Although I am aware the scalability of an application is mostly due to the way that you design your system architecture.
I would too. I'm actually integrating a site built around a silverlight plugin.
&gt; No I haven't, and I don't need to You do if you want to compare yourself to me. Find someone else to talk to, please.
You are misunderstanding me. This is not about code, this about how you are treating people in this subreddit. There is more to this PHP community than PHP code. Good day sir.
Actively working on? Usually two-three, assigned? Maybe 4-5 at most. 
Depends, I tend to stick on and work mainly on one project but switch to other projects to make changes / fix errors if needed. Also have my personal projects. I have 5 projects in the pipeline at the moment but I work on one at a time. Problem is they are all of high importance.
I understood your position. I simply disagree with it.
Have now bookmarked the first link you posted. It is also exactly what the OP was asking for.
Ah sorry I forgot to mention that. The output of the function if I were to try and hash "Reddit" would be RANDOMHASHReddit Maybe i will have to use my own hashing function then.
I'm still relatively new to PHP (pretty good at modifying existing stuff to do what I want, but not create complex stuff from scratch). So because of that I'm usually doing websites. Even then I only use PHP if I need to. Small sites that likely never need updating will get the HTML/CSS treatment. More advanced stuff gets the PHP via Wordpress or sNews (which is stupid-simple to setup and maintain). I'm usually juggling 1-3 projects at once all at varying points in the process. 
From [DATA] and [KEY] they create [HASH][DATA]. They store [HASH][DATA] or send it or whatever. Now you can't tamper with [DATA] without knowing [KEY].
I am PM'ing 3, and working about 3, so all together.. 6. It's a mess
You know, i've seen that thrown around tons of times, but never bothered to look at it. I think I'll do so now. edit: I see the advantage of using this for a novice programmer who doesn't understand cryptology, but it's a blowfish encryption with a an extended DES as a fallback (both with a salt.). Not going to lie, but in my studies the sha256 and sha512 are still better alternatives. To each their own :)
An [HMAC](http://en.wikipedia.org/wiki/HMAC) is a hashed message authentication code. It is used to verify that a message has not been changed, so according to the method description, it is working properly. Unfortunately the method is named in a slightly confusing way, implying a hash of the string is generated. It sounds like you are just looking for a hashing function, such as [hash()](http://php.net/hash).
Ah I see, thanks for the help. The method name is definitely confusing.
Really impressed with the documentation.
probably someone's done some sort of addslashes and you need to stripslashes. the \n seems to have been escaped into \\n i might be wrong, just a quick observation of what i skimmed
Wow I didn't think someone would have posted my exact answer! :P
how? 
Also, have you ever been able to use fire php? I can't seem to get it to do anything. I followed the instructions on the fire php thing but nothing happens.
Do this end up working? 
thanks for link to slideshow :)
regexr.com pcretest on the command line just use firebug /regex/.test("content")
Pop open the console and type, say, var string_to_test = 'Something goes here.'; var matches = string_to_test.match(/(.e.)/g); console.debug(matches); While it's not the actual PCRE engine, Javascript regexes are mostly Perl compatible. 
Any time. Read anything Bill Karwin or Joe Celko write, if you're into SQL. Those two have enormous brains.
I am leaving one job that sells one massive PHP application to another that sells one PHP application. So 1 ;)
I work on my own site. It's nothing impressive, just a photoblog with daily updates. It's really kind of an awesome project because I love computers (just graduated with a computing degree) and photography. The two mesh very well. Anyway I designed it from the ground up on my own. So I guess to answer your question... 1 at a time. Haha. 
I used to work primarily on websites, but I've got enough boilerplate/reusable code I basically worked myself out of a job in handling websites (now our junior devs do all of it!). This freed my time up so that when a guy came along with an awesome idea for an application, I was free to work on it with almost 100% of my time. I used to juggle probably two to three dozen different tasks at a time (from "go modify the registration email that gets sent from this site" to "here's some 12'000 line monstrosity of an online store that 'isn't working', fix it"). Now that I'm primarily an application developer, I'm down to probably half a dozen various tasks with 20% of my time and the one application with the other 80% (Monday through Thursday - app, Fridays - other stuff). I also work for a (apparently large, judging by the other posters I've seen on here being mostly freelance or one/two person shops) web company, so my experience may not be typical. :)
Yes, function hashData returns $hash.$data.. seems pretty literal to me. [From the API](http://www.yiiframework.com/doc/api/1.1/CSecurityManager#hashData-detail) &gt;To protected data with HMAC, call hashData(); and to check if the data is tampered, call validateData(), which will return the real data if it is not tampered. The algorithm used to generated HMAC is specified by validation.
Mostly CMS installations and customizations for me. Honestly, I go through waves. I'll finish up a bunch of projects, freak out because my clients have dried up, carpet-bomb guru.com and craigslist, and then end up with 5+ projects to finish at a time. It's the single dumbest way to run a business. Don't do what I do.
&gt; "Not going to lie, but in my studies the sha256 and sha512 are still better alternatives." Running [this script](http://nucleardog.org/hashtimes.phps) to time calculating 100 hashes of a static string. Once with bcrypt, once with sha512: BCRYPT: 22.2699170113 s SHA512: 0.00290393829346 s For verifying a file's contents, SHA512 is fast - that's wonderful. For something that's supposed to be cryptographically secure bcrypt is superior as, by turning the complexity value up, you can make it impractical to even brute force it. (And it also means that - as computers become faster - I don't need to replace my hashing algorithm, merely edit a single config file to turn the complexity up.)
If you know the names and there is a limited amount they can add then you could try if(isset($_POST['something'])) $something = $_POST['something']; 
By far one of the smartest software-related purchases I have ever made. Best tool for regex hands down. 
Let me start by saying that I'm a person who learns by doing. Unless I'm trying to figure things out on my own, I'm not gonna gain much from the experience. That said, the single-most useful book for me was the [PHP Cookbook](http://www.amazon.com/PHP-Cookbook-Solutions-Examples-Programmers/dp/0596101015/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1295646517&amp;sr=1-1), by David Skarl, and Adam Trachtenberg. I found that I could just dive into coding something, and then just look up various topics as they came up. Not only is it a great resource for looking up "how do I do X?", but it's also a pretty good PHP tutorial, if you're already a programmer. The only real issue is that you kind of have to know what you're looking for. Aside from books, you should also be aware that [php.net](http://us.php.net/manual/en/language.control-structures.php) provides some of the best online documentation of any programming language, hands down. You'll probably learn more from the documentation (and the comments there) than anything else. One last piece of advice is to check out some Youtube videos. Just search for "building a web forum with PHP", or something. I almost hesitate to recommend that, because some of the stuff there is pretty bad, but at least it will help you visualize how the various pieces to a PHP website should come together. If you decide to use random Youtube videos, I recommend you just use it to get your bearings, and then move on as soon as you're ready to utilize better resources.
Well, at this point I was getting emails. Then another poster had attempted to fix the code to get the form information to submit properly, and that killed the emails entirely. I'm a little stuck and frustrated at this point. 
Bummer, man. When I am in front of a real computer (on my phone right now) ill pastebin a complete copy of what that file should look like. It's actually a _very_ simple file. I'll let you know when it's up. In the meantime, happy Friday! 
Thanks! Actually enjoying my Saturday morning right now in South Korea. I've lived here for a year but am heading back to the US in 3 weeks. Thanks for taking your time on Friday night to help with this!
Give them a naming pattern, then walk that array looking for said naming pattern. foreach ($_POST as $field =&gt; $val) { if (strpos("customform_",$field) === 0) { ... } } Except if that isn't obvious, then you're probably not ready for injection or XSS attacks, and this is going to get exploited to bejesus and back. TL,DR: &lt;?php print_r($_POST); ?&gt;
On the one hand, this is good advice. On the other hand, you didn't answer his question.
Unless he wants his code to validate.
Check if you have [magic quotes](http://tinyurl.com/ygbk5sq) enabled in your php.ini. It can make your world magically more complex. I would suspect that it's the culprit here. [This](http://php.about.com/od/programingglossary/p/magic_quotes.htm) is also a nice article about it.
Not at all, it's aimed at python developers getting hands on php or viceversa. 
The question was already answered by two people at the time of the reply. To save from redundancy I nitpicked elsewhere.
[From reading the manual](http://framework.zend.com/manual/en/zend.view.scripts.html), setEscape is for *one* callback. If you want to run output through multiple functions, you'll want to create one function to do all of that work, and then define that one function as the callback. For example, in PHP 5.3: $this-&gt;view-&gt;setEscape(function($string){ return htmlentities( strtolower( iconv('UTF-8', 'UTF-8//IGNORE//TRANSLIT', $string) ), ENT_QUOTES, 'UTF-8', false ); }); Further, you probably want to not use stripslashes. Unless you have magic quotes enabled, there is no reason at all to ever call it on any user input ever. If you *do* have magic quotes enabled, turn it off for the sake of all that is good and holy in this world. And if you *can't* turn it off because you are on shared hosting, get a competent hosting provider.
&gt; If you do have magic quotes enabled, turn it off for the sake of all that is good and holy in this world. And if you can't turn it off because you are on shared hosting, get a competent hosting provider. Upvoted for this sentence alone.
You're right magic_quotes were on. By default they are on. I've noticed now that my textfield with single quote data that is entered into the database is not black-slashed. In other words, my database has text like: "..I'm here 'cause I can be.." Is this still safe or do I need to add more filters? are you overriding setEscape here?
&gt; I see the advantage of using this for a novice programmer who doesn't understand cryptology Wait, did you just call me a novice after suggesting SHA-1? famousmadphilosopher did a very good of explaining why phpass is better than what you have suggested; bcrypt is slow, and when it comes to hashes you want them to be as slow as possible. I leave cryptology to the experts, and the people behind phpass are experts that know a hell of a lot more on the subject than I do. There's a reason phpass is used in some of the biggest open source PHP apps out there.
The database code is safe as long as you are properly sanitizing it before inserting it (ie: using prepared statements). You should never rely on magic quotes to sanitize database inputs. I'm not familiar with Zend so I'm not sure how it's DBAL is setup/how you go about sanitizing DB input.
Fair enough.
I haven't used it myself, but I've heard some very good things about the [R&amp;OS PDF Class](http://www.ros.co.nz/pdf/).
Actually, I mistyped, but this is the one I was using, and it either is or relies on a php4 class ( I got warnings when I turned on deprecated warnings). And it hasn't been updated in 5 years. 
It looks like [TCPDF](/http://en.wikipedia.org/wiki/TCPDF) is a good candidate.
I haven't used it, but [Zend PDF](http://framework.zend.com/manual/en/zend.pdf.html) seems to be coming along nicely, and is likely to be supported (actively developed, even) for some time to come.
i use [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/). its a command line tool that renders html and css with webkit, and saves a pdf. advanced options included!
&gt; You're right magic_quotes were on. By default they are on. Only when the sysadmin is incompetent. &gt; are you overriding setEscape here? By here, do you mean in my example above, or in my code? I don't use the MVC parts of ZF, so I don't use it in my own code. Here, I'm not "overriding" it, I'm setting it. Please check out the link to the manual I provided for more information on how setEscape works.
I us either R&amp;OS PDF or fPDF. Revently found TCPDF - haven't used it but looks solid.
Saves me from doing any extra pdf related work, since I already generate the document (a report with tables) in html format. An example on how to transform the html (e.g. generated from a template) into pdf: &lt;?php $html = '&lt;html&gt;&lt;body&gt;html page here&lt;/body&gt;&lt;/html&gt;'; $cmd = '/path/to/wkhtmltopdf' . ' --quiet' . ' --title "title here"' // any other options here . ' - -'; $pipes = array(); $spec = array( 0 =&gt; array('pipe', 'r'), // stdin 1 =&gt; array('pipe', 'w'), // stdout 2 =&gt; array('pipe', 'w'), // stderr ); $proc = proc_open($cmd, $spec, $pipes); if (!is_resource($proc)) throw new RuntimeException("Failed to open wkhtmltopdf ($cmd)"); fwrite($pipes[0], $html); fclose($pipes[0]); $stdout = stream_get_contents($pipes[1]); fclose($pipes[1]); $stderr = stream_get_contents($pipes[2]); fclose($pipes[2]); $exit = proc_close($proc); if ($stderr) throw new RuntimeException($stderr); if ($exit &gt; 1) throw new RuntimeException("wkhtmltopdf shell error (exit code: $exit)"); if (!$stdout) throw new RuntimeException('wkhtmltopdf did not output anything'); $pdf = $stdout; header('Expires: 0'); header('Cache-Control: must-revalidate'); header('Pragma: public'); header('Content-Type: application/pdf'); header('Content-Disposition: attachment; filename="document.pdf"'); header('Content-Transfer-Encoding: binary'); header('Content-Length: ' . strlen($pdf)); die($pdf); 
As stated before, wkhtmltopdf is my weapon of choice. The wrapper that's on the Google Code page is awesome (although I threw a few tweaks into it) and I literally make the layout in HTML, give wkhtmltopdf the link to whatever handler and bam, PDF done. There are quite a few options that makes things even easier (header, footer, etc.)
I have been using [TCPDF](http://www.reddit.com/http://en.wikipedia.org/wiki/TCPDF) for the past years without any troubles. However, the only problem I find is that it's a long pain in the ass creating a PDF from scratch.
I have used it a lot and it's great but very raw. You need to make all higher functionality yourself.
regarding unpacking wkhtmltopdf on linux, just so people know: 1) unxz \*.lzma (leaves a \*.tar file) 2) normal unpacking of the \*.tar file
Thanks. Ill check these out and I have already started lessons on building a web forum. 
www.princexml.com
I generally just salt and hash the password. Sometimes I generate a random salt and store it with the users row in the database, or some times I generate the salt by using a variety of the users register time and original username, for example. Like: $registerTime = time(); $salt = sha1($registerTime . $origUsername); $password = sha1(md5($salt . $password . $salt)); Something like that. 
One big web application at work (more than 3 years of continuous work) and several personal projects in the spare time when not browsing reddit.
Whenever "command line" is said in an answer, it means the answer has nothing to do with the question or answer. For example, OP would get same results doing a command in language a or b.
So, you happen to have a high-quality, open-source, pure-PHP HTML-to-PDF converter? The only other worthy one I know about is in Python, so using it would also involve invoking an external process. Sometimes using other people's hard work involves calling an external process. There is nothing wrong with this.
ah wanted to do that, but i was replying on my phone. :)
Stonecypher sounds awfully like another character around here who goes by the name hopeseekr. Dude could not accept he was wrong. He claimed some code that passed multiple pci compliance tests as sql injectable. It's not, and he couldn't prove it either. If its the same guy he is a complete loser, no matter how much php he knows. The kid just likes to talk shit because he admitted here on reddit that his pupils used to make fun of him and he had poor social skills. Just imagine a kid who's had a raging boner for 15 years and still hasn't gotten to use it. If they arent the same person I bet they have similar lives. 
I agree with SadisticAndroid, and by your commenting history its obviously apparent your not getting laid or paid enough. Most likely both
Try [fpdf](http://www.fpdf.org/). It is really easy and you dont even need PDFlib to use it.
Please note that the PHP Bindings are available for download here. http://products.wolframalpha.com/docs/PHP_Binding_0_1.zip You will need an API key. Here is a screenshot of how the PHP library organises the data into Assumptions, pods, etc. http://i.imgur.com/Aqjwb.png Why use this? How else can you calculate [one cubic parsec of fried chicken](http://www.wolframalpha.com/input/?i=one+cubic+parsec+of+fried+chicken)
Spam here we come
Please note that there is a limit of 2000 queries *per month*.
PrinceXML is *the* solution if you have some money to spare! (and don't want to install webkit &amp; qt on your server)
My workplace uses open office templates, and a quick wrapper around open office to treat it as a PDF rendering engine. It's custom, but not dissimilar to using http://oodaemon.sourceforge.net/ We render quite complex documents, and I could never imagine building an entire PDF via an API these days. The benefit of this is you get both a rich document editor, easy to manipulate files (an open office document = zip + xml; standardised); and the ability to output to a variety of formats.
but they are just as evil
How, exactly? If you are in control of instantiating $conn; why would you instantiate it twice?
You might use sessions and when the form is posted you can check if the user took at least say 10 seconds on the page before posting it back (i.e. what is the normal amount of time that user spends on the form). If user posts page quicker than you esitmated, you can display a visible captcha.
I have no interest in drive-by criticism posts from mentally limited random people I don't know. I get paid and laid, and I know how the wily apostrophe works. Call me when you get out of seventh grade. It's pretty pathetic that you could write something that short, that stupid, and still creep in six grammar and syntax errors that are supposed to be learned in grade school. Funny thing: you were just thanking me the other day.
Funny thing: when you posted your whiny anti-hopeseeker post, I'm the one who gave you that answer you were so thankful for. You sure do have a hair-trigger whiny faux-punishment fetish. Stop trolling, please.
And then just three weeks later, you're trolling me, and asking whether I'm the same person you trolled in this post.
interesting comment. offering up a command line solution is perfectly acceptable for a question regarding a scripting language. more related to php is the fact that this solution uses simple HTML and CSS, two languages that php devs are usually familiar with. furthermore, i think that anyone that has more than *played* with php is familiar with [passthru()](http://php.net/passthru/) and [shell_exec()](http://php.net/shell_exec/), which are functions that allow you to execute external commands. so yes, i give you wkhtmltopdf, a fast, easy to use, and high quality option for creating pdf files using php.
Is that linked to API key? If so, couldn't you (maybe dishonestly) get several API keys and just cycle through them randomly per each request?
You could run a script as cron job however often you wanted. The script would download and compare file sizes (or the entire source code if you wanted). I'd imagine this would be easily possible but all I can give you is that idea, I am by no means uber-experienced with PHP
file_get_contents() it and preg for the "Nothing found" message.
http://phpdeveloper.org/ is a great one to follow since it aggregates many different (and good) sources
wget it and SHA it like a boss. $new_SHA = exec( 'shasum filename' ); Then compare it with the old SHA. 
[DOMPDF](http://code.google.com/p/dompdf/) by far.... So easy to use. You can output the generation or save it. I've used it for my client / project manager to create invoices. include 'dompdf_config.inc.php'; $dompdf = new DOMPDF( ); $dompdf-&gt;load_html( "YOUR HTML HERE" ); // HTML document $dompdf-&gt;set_base_path( BASEPATH . '/invoicePDFS/' ); // Path to save the PDF $dompdf-&gt;set_paper( 'letter', 'portrait' ); // Different options, see dompdf.php $dompdf-&gt;render( ); Try it out!
I guess I was being a bit trollish. I completely agree: if there's no native way to do something within the language, likely there's an external application that's got you covered.
Problem with that is too many sites have things like the date in the footer or rotating banners or whatever.
&gt; twitter + facebook = application **∴** application – facebook = twitter ?
How do I use this for password storage? New hash is created every time I use HashPassword(), how can I compare this with a hashed password that I store in my database? I must be missing something trivial... 
Ok... how do you compare the login password to the hashed one? You can't possibly get the same hashed value by using time()? I must be missing something very obvious...
Extract the text of the content/area you are looking for changes in (i'm guessing not ads/latest products sorts of things) with something like [simplehtmldom](http://simplehtmldom.sourceforge.net/). Hash with something like sha1. Compare hashes over a period of time. If they are the same then the page hasn't been updated. 
The point of that is to make a plain text string that you can verify is your own output. I wrote almost identical code a long time ago for storing settings in a cookie - the user can see everything that's being stored about them, but it's safe from someone trying to put SQL injection or whatever in a cookie.
Make an HTTP HEAD request with curl and look at the last-modified header.
And ads would also mess it up.
You can check an RSS feed, that is what they are basically here for.
I'd compare file sizes, an error page will be a lot smaller than a full pages of content.
I think the best and lowest usage method would be to send a HEAD request to it and see what status code gets sent back. I can describe how if you need. 
I see what you mean by setting it. If I may ask, what framework do you use, if any. I chose Zend because of its robust library and OOP MVC paradigm. I notice that there aren't many developers using it however..
Yes, I completely understand. I have the domain name stored on the bootstrap file as BASE_URL so when I port it to another environment I only have to change one constant variable for the whole application. I had to do it this way to distinguish from controllers/view.
This is highly insecure even though hashed. It wouldn't take long to brute force this password even though salted. You should opt for a hashing algorithm such as [Bcrypt](http://en.wikipedia.org/wiki/Bcrypt) or [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2). What you have to be aware of is the time it takes to run the hashing mechanism. Functions such as sha1 or md5 are made to be very quick hashing. Hashing a password should take at least a few seconds to complete. This way if a hacker discovers the hacking mechanism it takes too long to decode the hashes to make it worthwhile doing. I recommend (and have been recommended) PBKDF2 over bcrypt.
[PHP Lib for PBKDF2](http://www.itnewb.com/v/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard)
That is awesome. I can't think of a use for this that I would ever need, but it will be fun to play around with.
Grab the content, regex to replace footer, then sha/md5 that.
I use parts of ZF, just not the MVC part. I use a simple bootstrap/init script and a common directory layout for my separation-of-logic-from-presentation needs. I've found the MVC implementation in many modern frameworks to be too heavy-handed and verbose for my needs.
This is one of it's strengths, the same string generates different hashes each time making rainbow tables even more unfeasible and useless. You use the PasswordHash::CheckPassword() method to check passwords if you haven't figured it out already :)
Here's some books I've had recommended from Reddit: - Head First SQL - Apress' Pro MySQL - high Performance MySQL 
Figured it out right after I posted. Had a real "DURR, of course" moment. I compared userid and password in my old code. Of course that relied upon that the hash didn't change. :)
[High Performance mySQL](http://www.amazon.com/gp/product/0596101716?ie=UTF8&amp;tag=twittercomste-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596101716) Make sure you get the 2008 edition and not the dated 04 edition.
For somebody who's so busy you do talk just like that guy, who self admitted everything I mentioned. For some reason I think your the same now... and I hate that attitude. That is all. Please, just realize there are really smart people who do not have the opportunity to learn proper programming(ie. going to college), yet they want to learn without feeling like an idiot. And me no care for grammar.
Make sure you read everything related to http://memcached.org/ at least twice.
simplehtmldom is fantastic! Wonderful for scraping stuff. You can run into memory issues if you're using it in a massive grab.
&gt; in my studies the sha256 and sha512 are still better alternatives Can you share with us the methodology of these studies?
I'm assuming you're dealing with some cms requirements.. Using those zend methods is obviously limiting you. I would just do stripslashes($content) followed by html_entity_decode($content), then $this-&gt;view-&gt;content = $content; Also, you probably want to stripslashes() first, assuming you're doing addslashes() last on insert/update. 
sub suckIt() { my $balls; bless $this; }
That's not how ads work.
I always just assumed hasing it a few times over with really weird concatination (like $salt . $password . $salt) would be enough. I'll look into Bcrypt and PBKDF2 though :)
Sorry, I meant you store $registerTime in your database as the time the user registered... then when he goes to login you can pull it out with his original username (also in the database) and make the salt.
Last time I did something like this, I wrote it in Java. But here is what I did: I used the best fault tolerant HTML parser I could find and crawled the DOM extracting all #TEXT values and img-src values. Appending them all together to catch textual and "visual" changes. (I did it this way because, for instance, just about every website written in asp will have this dynamic view state crap in it. Which would make your hashes not match.) You could also make it "fuzzy" by having it check for a 'longest common sub string', and if it's say 95% of the total length then flag it as a non-meaningful change. Edit: A better/easier "fuzzy" method would to add up all the bytes in the appended string and compare the difference. Nerver used it, but if this is a one off thing you could try this: http://changedetection.com/
The [MySQL Performance Blog](http://www.mysqlperformanceblog.com/) is also a fantastic resource, and is authored by some of the people that wrote the book.
The first edition of this book is almost useless. The second edition was a huge improvement.
I wish everything had that nice of an example page.
I'll save you the pain: [PostgreSQL: Introduction and Concepts](http://www.amazon.com/PostgreSQL-Introduction-Concepts-Bruce-Momjian/dp/0201703319/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1295849201&amp;sr=1-1) 
I don't think it's programmer's block, it's probably programmer burn-out. Best way to solve it (at least for me) is to take a couple days off the computer or to try getting into another project.
[Building Scalable Web Sites: Building, Scaling, and Optimizing the Next Generation of Web Applications](http://www.amazon.com/gp/product/0596102356/ref=cm_li_v_cd_d?tag=linkedin-20) is a good read. Covers not only mysql scaling but hardware and other software too. It's a little bit on the basic side but still worth your time.
take a weekend off. completely remove yourself from computers, turn off email if it comes to your phone. you are burned out. hang out with some friends, go out to eat, see a movie, just relax. come back to the project and outline small tasks and then complete those one by one. the project wont seem as daunting after you break it up into small chunks and you get a little more motivated after you complete each one.
This is what is known as a [Many to many](http://en.wikipedia.org/wiki/Many-to-many_%28data_model%29) relation. You usually implement this as: user user_skill skill user_id user_id skill_id skill_id The user_skill table will contain one row for each skill for each user. Most database engines also supports returning grouped results (in MySQL you can use GROUP_CONCAT for this), which would return SQL, PHP if there were two rows in user_skill.
thanks for this - it seems pretty useful
Classic case of burn out. Take a little vacation and get some much needed rest.
Wouldn't that be a bitch to update?
Aha! I see, this makes sense, thank you very much :)
Recommending fPDF.
no because you would only need to write it as a function once and then you could call it when needed
Probably, but that's kind of not cool. If you overload the system like that, it will degrade the service for everyone else. It's better to contact them and arrange to pay for a volume-user license. They could, of course, track you by IP address or HTTP_REFERRER and ban your IP address and/or domain.
It depends where the application number comes from, if it's something the user fills in then that's fine, but if it's generated by the govt. website first, this would not work.
Yeah, but what if i wanna add another skill? Then i'd have to add it into the design manually
Possibly the most intelligent spam of all!
Well I know what you're talking about, exactly as a matter of fact. Working at home is always a challenge when it comes to motivating yourself to work productively. At least that's what it is for me. For me it works best to have external motivators, like other people that want things done or work together with me. Fun of course is also a great motivator. If all this fails, working at a shared office, away from your distracting home, may also be an option.
maybe have it as an include()? for example include(skills.inc.php); which contains a function which returns the skill. The many to many relation would work as well.
I'd love to help but unfortunately I've already committed my time to a dear friend of mine who has come up with the most novel startup idea. I'd like to tell you more about how he's designing a facebook killer and about his viral marketing strategy, but he made me sign an NDA. I'm pretty lucky, he's going to pay by giving me a percent of the website ownership and I'll make billions! But if I wasn't already doing that I would definitely work for you because that sounds like a great opportunity. Sorry. 
practice some sports, punch a bag or something... that helps me overcome any problems and keeping from punching clients.
That would only be the case if you were doing this sha1(md5(sha1(md5(sha1(md5(sha1(md5($salt . $password . $salt)))))))) this would increase the chances of collisions, however sha1($salt . md5($salt . sha1($salt . md5($salt . sha1($salt . md5($salt . sha1($salt . md5($salt . $password . $salt)))))))) would be better but still insecure as you want to increase the time it takes to compute the password. 
Having used it, I would actually recommend [PHP Lib for PBKDF2](http://www.itnewb.com/v/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard) instead.
As much as I prefer `psql` to `mysql` these days, your answer doesn't help the discussion.
I agree with everyone else here in saying that it is a classic case of burn out. The biggest problem about burn-out for @home workers is that there is no separation between home and work life. You find yourself at times never leaving your house for days and your mind will very quickly lose differentiation between the two. Just because you remote in to work doesn't mean you have to do it from home. Here is one solution that we have used locally to fight burn out (I bought and upgraded a EEE just for this). Get to know some of the other local at-home developers (trust me its not just you). Arrange to meet them at a local coffee shop, library, diner, or any place with space and free wi-fi. Every day change it up to a different places all over town. Treat it more like a social gathering and less like a colab-meet. Your mind gets the social interaction it craves, You will find it easier to be more productive, and it is a lot more fulfilling then sitting at home on the couch in your underwear. Hope this helps.
I have a 90lb kick bag in my office for just such events.
Let's pretend I'm interested in doing work without upfront payment. How can you prove to me that it's likely this site will make enough money to pay me? How do I know I'm not just going to end up working for free? So far, you've shown me that you are not an excellent marketer, and you're probably not a developer either. Commenting and votes are simple. You can do it in a few hours (or less) without much effort.
You should absolutely be marketing yourself to coders. You're asking them to do work for you for FREE. No matter how you sugar coat it, that's what you're doing. You're going to have to beg, plead, or show the coders that you know what you're doing, that you can contribute, and that you can pay them. You haven't done any of that in any way. No coder is going to run up to you and beg you to let them work for you for free. Hell, the other comment in this post right now is ridiculing you.
Depending on the number of "skills" you need to store, [bitfields](http://en.wikipedia.org/wiki/Bit_field) can be a compact and fast way to do it.
Writing code is a lot like being a painter or writing a novel. Sometimes it will flow naturally, leaving you with an effortless sense of accomplishment. Other times it will seem like an impossible chore, leaving you exhausted and questioning your career choices. What you do when it's hard defines you just as much(if not more) as when it's easy. "Opportunities are usually disguised as hard work, so most people don't recognize them."
I get this way too and have trouble starting things such as writing code or doing wireframes or even things outside of development. It seems that I get hooked once I invest time and become personally attached to what I'm doing. I go from not caring about any given project to really needing to see it through. But opening the files and putting in the first couple of hours of work is the hardest part for me.
Yes, this is the best solution, IMO. I only work from home one week a day, but even then sometimes I feel distracted or burned out. I go out to the garage and do some pull-ups, jump rope or do a few quick heavy sets on my free weights. I'm lucky to have a gym in my garage, but a gym membership might even be better. Just remember, if it gets the blood flowing, it'll likely get the brain firing as well. 
Seriously, I've been developing a FOSS PHP framework for *years* and have never asked anyone for any help at all. I have absolutely **no expectations** that anyone will ever help me and I have **no money** to offer anyone. The only thing I can actually offer is *gratitude* and the inexorable fact that I control it and they don't. Most people don't know me, nor are they willing to give their time away for something they don't control or aren't guaranteed a return from. People do not easily offer their time or trust to anyone. You cannot expect to get anywhere with your current "*i'm the next big thing, though im not sure what that thing is*" strategy. *edit: grammar*
&gt;Probably, but that's kind of not cool I agree, just wondering aloud on the internet.
&gt; but it seems that as soon as i pop open notepad++ and see the code, im just not excited like i used to be anymore. Therein lies your problem. First, empty your head of everything you know and think you know about programming; now relax and begin to day-dream of ideas, activities, or anything else that interests you... It could be a story, a problem, or even a meme. The fact of the matter is, programming is not about the process of programming it is merely a means to an end. The most important part of any program is either the problem it solves or the idea it expresses. Just like a great piece of literature, the language itself is, for the most part, independent of the message and meaning the author intended to convey for the reader. Otherwise, if you're having issues getting a project off the ground in PHP, perhaps try creating something a little bit out of your comfort zone, say Flash or JavaScript; on a related note, whenever I feel uninspired I usually just get high and stare into space, which always seems to do the trick.
When was the last time you learned something new? I mean... utterly new. When did you last get completely out of your comfort zone? You haven't done it all, and doing the same ole shit (pardon my french, internet) day in and day out is not sustainable. I would normally agree with what everyone else is saying in this thread, but it seems like you've already tried to take a break, and that hasn't helped. Instead, why don't you try something completely new? If you're used to doing procedural code, try to do something completely object oriented. If you're used to doing websites heavy with PHP, why not try something with a massive amount of javacript/ajax functionality? If all else fails, why not try doing something in a different language entirely?
I find challenging myself by learning a new language and contributing to something open source is a great cure. Im mentally challenged and the peer review from open source helps me learn the new language better
&gt; For some reason I think your the same now Lets you feel superior. Find someone else to talk to. I helped you, and you're still raging unwantedly in public. You're welcome.
I've been in similar situations -- the trick is to force yourself to code. Find something, anything, to work on. It doesn't have to be directly related to what you want to work on. Excitement about coding comes and goes -- I've been working at home, alone, for over a decade.
&gt; to force yourself to code absolutely the wrong thing to do. That's a good way of making temporary burnout chronic. Programmers block / burnout is often the result of disillusionment with the work you have been doing. Perhaps a change of scenery (language / tech) would help? 
you use eclipse for php?
Listen to motivational music and daydream of how successful the website will inevitably be. Also, look at competitors websites and make yourself so jealously angry and frustrated that you fire up your editor and code like a boss in order to destroy them.
is that a sarcastic question?
Thanks for the big reply. Ill definitely try out most of these and see if they help (including eclipse).
I had done this in the past. Regional developer/security "tweetup". Was pretty fun. My wife knows little about what i do so its hard to get that level of interaction with her, might try to get one of these going again.
Ive hit walls like this before (not quite as bad), and kept pushing. Im not a big believer in giving up.
I had to move a couple of months ago and I'm just settling down on my new place, neighborhood and city, so I had not been working out much lately, today it was my first muay thai class in some time, just came back from there actually, I feel like a new born
I don't think programmers block is always the result of total disillusionment -- sometimes it's just hard to get into stuff. You look at the blank editor page or, even worse, a wall of existing code and you become paralyzed. But if you start somewhere creating and changing code you can get past it. I will often pull "an all-nighter" to get myself out of the rut -- set a task and just not go to bed until I've made a solid dent in it. Sometimes it's past midnight before things even start to flow. A change of scenery / language / tech is always helpful but rarely an actual possibility. I can change my scenery / language / etc by changing jobs, but that's not practical. I find a temporary change isn't so helpful; when I do other work I often find it even harder to get back to the stuff that blocked me up. 
*This is what I do* Go for a long(ish) drive, and the ideas will flow in your head. Even better if you can drive out to a hill or beach with a lookout (of course this depends entirely on where you live). I find that if I do this and take a notepad of some sort I come up with more ideas in a few minutes than I would sitting around at home. It's a really good way to clear your head too! *For it to work for me, I leave all electronics besides a cellphone at home, and when I'm parked up somewhere I often turn the music off or at least right down too.*
hah, scared him right off reddit
Do I win a prize? :)
Sounds like you need: http://www.reddit.com/r/programming/comments/f87w9/i_want_this_book_to_be_real/
Maybe you should also see Netbeans. Quite nicer I can't point my finger on the "nicer" part, maybe too many things are nicer in Netbeans :)
I'd use Amazon S3.
You'll most likely end up wanting to use either a Java or Flash based tool. [Here](http://www.solmetra.com/en/disp.php/en_products/flash_uploader/uploader_intro) is a link to a flash based one that should handle large uploads. I haven't used it but have heard others recommended this approach.
I'd suggest setting up a simple web server in house where you can control uploaded file size limits, that would be used exclusively as a location for clients to drop files. Then get your ISP to assign a static IP address to the box, and point a subdomain of your site to that IP address. At least, that's what I'd do if we hadn't already built something like this. If you're on a crap ISP, they may not let you host sites from your location, but any decent business class ISP won't care. I think ultimately, your boss is going to have to pony up some extra money for either better hosting or better tools.
You could start to practice your "thinking muscle" with mindfulness meditation. Has a large influence on how you feel. 
Okay. But I still dont think you get it
I could never set it up correctly. Either I had problems with the pop-up documentation, or a Java error message would pop up every now and then. I switched to NetBeans, mostly pre-configured and good to go.
I like this idea, i might go back to some old apps and re-skin them. Playing with css has the benefits of being in a text editor but without much thinking, and lots of pretty colors.
&gt;whenever I feel uninspired I usually just get high and stare into space, which always seems to do the trick. just makes me sleepy
I can relate to getting hooked, its just getting past that first step that seems the hardest for me too.
could this relate to being completely bored with and uninspired with the projects at hand? Super complex project that does something retarded to a spread sheet of data that is meaningless to me, that the client needs impossible manipulations at impossible deadlines. When all is said and done ive spent countless hours working on something that performs functions on data that i dont understand, to turn it into more data that i dont understand. Looking at it like this i see why im not super excited to wake up in the mornings.
Anymore information on this? 
If only...
Driving is definitely a prime thinking time for me. Problem is though being winter its not always an option, especially if the drive is consumed with fears of being hit by someone who isn't being as careful on icy roads as me.
I will look into contributing to an OS project. Ive thought about doing this before, but figured "if im not helping now and its still getting done, why bother". Probably a poor policy now that i think on it.
Overall this seems to be the route of choice.
if they are happy with the process of using youSendIt, here's a few other options (I haven't used all of these extensively, don't know of the restrictions, etc.) * [http://isendr.com/](http://isendr.com/) * [http://www.filedropper.com/](http://www.filedropper.com/) * [http://www.4shared.com/](http://www.4shared.com/) * [http://www.dropbox.com](http://db.tt/iHua8gF) (link is my referral :D) There's always FTP access w/ user directories set up as well.
Amazon S3 is by far the best solution for hosting large files on the web. They're also the cheapest in terms of storage and bandwidth by a long shot. I think since you are just using it as a temporary storage solution you could even use their reduced redundancy stuff and save even more money. And they have great APIs out for PHP, Ruby, etc., so if you know your stuff even a little bit, you should have no problems. Maybe even consider something like http://aws.amazon.com/articles/1434?_encoding=UTF8&amp;jiveRedirect=1 if you want to skip the server-side coding completely, although uploading 2GB without at least a progress bar seems like pretty bad UX...
as an example: I'm a PHP developer for a living, I decided to learn java, and I write plugins for Bukkit. which is a Minecraft SMP mod. Given how much I enjoy video games, it really fits and is very fun to alter a video game in almost any way you see fit. I also learn a ton about java, as the team behind Bukkit seems to know their stuff, and the more I try and work on my code, the more I learn what Java is capable of, and how to work with it. The entire experience is entertaining, challenging, and a huge learning experience, it solves my programmers block problem quite well :)
I don't think MySQL is an appropriate solution for enterprise level applications. I've seen it fail in too many situations, even with dedicated DBAs, fast hardware and good architecture. It just doesn't scale well. So yeah... I was trolling a little bit... my apologies
For whatever it's worth, most print shops I've dealt with still just keep a ghetto (S)FTP server in the office. It's neither sexy nor fun, but it's about as dependable as it'll get and can run on most any computer with a decent hard disk and an ethernet cable. Easy to keep your customers from poking through each other's stuff as well. Alternatively, look into webDAV, like [mod_dav](http://webdav.org/mod_dav/) for Apache. Slightly less painful for non-technical clients since it works in the big blue "e" thing on the desktop with the rest of the internet, if that's the user level you're dealing with. S3 could be good too, just watch out for HTTP timeouts and similar limitations. If your customers are in rural areas with weak networks, fedexing a flash drive would be more reliable and possibly faster. 
Interesting Google Talk: Mindfulness Stress Reduction And Healing - http://www.youtube.com/watch?v=rSU8ftmmhmw I can't really endorse any specific method (haven't tried many) but that will give you some pointers. Btw, the "healing" there is not the vague pseudoscience stuff, but more medical. 
Nobody cares. Still.
&gt; Yii framework website: http://www.yiiframework.com/ FTFY
[iSendr](http://iSendr.com) cofounder here. Our current service is geared towards direct large file transfer (both sender &amp; receiver need to be online during the transfer) but we're looking to roll out some really cool corporate services soon that might address your issue at a much more agreeable price-point. Maybe you'd like to beta test? PM sent!
It would probably improve your skills if you read up on [database normalization](http://en.wikipedia.org/wiki/Database_normalization)
There are also web-based ftp clients you can google for. But there would be issues getting the user logins for the site synced up with the ftp logins.
The best way I've found is to sit down, and write stuff: pseudo-code, functions, pages, features, even flow charts &amp; diagrams; out on paper. Eventually you'll get tired of soft-thinking about it, and just type it up. Note: It's worked for me quite a few times, but, to be honest, I'm in a slump at the moment.(Gonna do this tomorrow on my days off though).
In regards to #6, I will say that trying to write code while dog-tired does help with burnout; though I've only done it by happenstance, never actually gone to work out, then code.
You care you just dont know it yet
Use perl and bypass phps limitations http://www.raditha.com/megaupload/upload.php
this won't get around a host that terminates processes that run too long.
hmm so downvote? because it may not work at one particular host? 
This is what we did, Setup an internal webserver. The machine only cost $200 because I used spare parts and brought a cheap Intel Atom Motherboard, 1 stick of ram and an old HD. We and have it running in a DMZ off our ADSL connecton. BTW the cheapest option I found to secure the server was to run two routers, the webserver is behind router #1, and our business network is behind router #2. For the uploads I used http://www.easyalgo.com/eaflashupload.aspx on our website and files are uploaded to our webserver. Works extremely well. I did have to write the a few backend php pages on the server so we can login and download files. We also have an FTP server but almost no one uses it now
Until you want to store more information about the skills or you run out of bits and have to re-do your entire data model.
Be aware there are browser limits for files &gt;2GB. Some browsers can handle up to 4GB, but not all. http://www.motobit.com/help/ScptUtl/pa33.htm
I didn't downvote you, but I think it would be more the norm than an exception with shared hosting, at least in my experience.
Inspired by [this post](http://www.reddit.com/r/pics/comments/daat6/whole_lotta_boobs_d_de_another_comic/c0yqg1s), my Python's a little rusty, so please let me know if I've made an error or you have any other suggestions. To use - $Image = new ImageUtils; $Image-&gt;loadPath( '/path/to/8S9Kb.jpg' ); $Image-&gt;resizeToMin( 70 ); $Image-&gt;setFilename( '8S9Kb_70' ); $Image-&gt;saveToDir( '/path/to/' ); $Image-&gt;cropSmart( 70, 70 ); $Image-&gt;setFilename( '8S9Kb_crop' ); $Image-&gt;saveToDir( '/path/to/' );
A few tips from my own experience: Start exercising in the morning. Exercise clears your mind in a way that nothing else I know of can. I try to run every other morning. (As a side note, I've been sick the past few days and haven't been able to get the exercise I normally do. My productivity has really suffered!). Try to learn a new programming language on the side. You'll likely struggle a bit (as we all do) at picking up all the intricacies of the syntax / formatting / etc. The next time you go back to PHP, it will seem like a breeze! Set goals for yourself and reward yourself if you achieve them on time. For example, if you get the new order form done by Tuesday, you'll let yourself play Xbox for an three hours Tuesday night (or whatever it is that makes you happy). Trick yourself into thinking that if you don't finish the project that your working on by a set (not too distant) date, you will lose your house. No really, you have a mortgage, and you will only make money on your current project if you finish it by a set day. And if you don't finish it, your house will foreclose, and all is lost. Your wife will leave you and take the kids with her. You'll be in debt up to your eyeballs, and will be forced to live in a van by the river and have to eat cat food for breakfast lunch and dinner. Your friends will think you're pathetic and never want to hang out with you again. Your parents will be so disappointed in you they will never want to speak to you again. You'll develop a tumor near your heart, but won't have enough money to afford a trip to the doctor. And suddenly, the heart attack will hit, and you'll be lying on the floor in the back of your '91 Eurovan completely alone, and dying. Good luck!
**Edit: Anotated a bit** If you want to do vhosts, I'd recommend setting up a generator script. Here's one I did in python: #!/usr/bin/python output_file = '/opt/nginx/conf/servers/%s.conf' sites = [ {'name': 'mysite', 'aliases': 'www.mysite.com mysite.com'} ] skeleton = """# THIS FILE IS GENERATED AUTOMATICALLY # BY: /var/www/scripts/nginx_create_servers.py # AND WILL BE OVERWRITTEN!!! server { listen 80; server_name %(aliases)s; root /var/www/vhosts/%(name)s/_wwwroot; access_log /var/www/vhosts/%(name)s/access.log; index index.php index.html; # YOU NEED TO COMPILE WITH THE NGINX STATUS MODULE OR REMOVE THIS SECTION location /nginx_status { stub_status on; access_log off; # some IPs that are allowed for nginx status allow 81.99.243.159; allow 127.0.0.1; #deny all; } location ~* \.(ico)$ { access_log off; expires 30d; } location / { try_files $uri $uri/ @rewrite; } location @rewrite { rewrite ^/([^?]+)?(.+)?$ /index.php?route=$1&amp;$2; } location ~ \.php$ { if (!-f $request_filename) { return 404; } fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; } location ~ /\.ht { deny all; } } """ def main(): for site in sites: with open(output_file % site['name'], 'w') as f: f.write(skeleton % site) print 'written', site['name'] f.closed if __name__ == '__main__': main() My nginx directory is in /opt/nginx though, FYI. Quick other thing. Here's a template for a proxy passing to another HTTP server, such as a Python WSGI server: server { listen 80; server_name flasktest; location / { proxy_pass http://127.0.0.1:5000$request_uri; } }
Thanks man, I really appreciate this. 
Fair enough, I'm all the way down in New Zealand and where I live people haven't even heard of icy roads so that changes things a bit :)
You could also call isset() to verifiy it contains data before working with it; if it's a limited number of fields.
This is the very first comment I've ever saved.
I'm so happy you've actually bothered to learn about Nginx and have an awesome configuration file to show for it! I "battle" people in #nginx so often, they use these horrible tutorials and can't understand why things doesn't work. Makes me want to cry at times. Have an upvote for making my day.
Just wondering, why force yourself to use nginx vs using Apache? I've never tried nginx, but with what I'm gleaning from your post it sounds like I should never leave Apache unless i'm looking for a headache.
&gt; It's very unhealthy to go without sex for more than a month if you're over 18. Just want to point out that this is a programming subreddit.
A: Hippie speedball.
nginx is much faster than Apache for serving static content, but even with dynamic content, it has a much lower CPU and memory footprint than Apache. If you're on a VPS or even a low-end dedicated server, nginx is the way to go. I've also heard of people setting up nginx to serve static content and Apache for dynamic content (through reverse proxying).
You could use recursion. Note: this is completely untested, and would print a threaded list if it works right. //get all the top level threads $sql = "select * from tasks join categories using (categoryid) where parentid is null"; $rows = $mysql-&gt;fetchrows($sql); foreach($rows as $row) { echo "&lt;ul&gt;"; echo "&lt;li&gt;{$row['taskName']}&lt;/li&gt;; printThread($row['threadid']); echo "&lt;/ul&gt;"; } function printThread($threadid) { $sql = "select * from tasks join categories using (categoryid) where parentid = {$threadid}"; $rows = $mysql-&gt;fetchRows($sql); if(empty($rows)) return; echo "&lt;ul&gt;"; foreach($rows as $row) { echo "&lt;li&gt;{$row['taskName']}&lt;/li&gt;; printThread($row['threadid']); } echo "&lt;/ul&gt;"; } 
Short answer: a recursive function. Longer answer: Select all the tasks, then write a menu generating function that calls itself until the item being operated on doesn't have any subtasks. I found (and cleaned up) this code in [this thread](http://www.sitepoint.com/forums/showthread.php?t=644084) on the Sitepoint forums. I haven't tested it or anything, but it should give you a good idea of what to do. $query = mysqli_query($link,'SELECT * FROM categories'); while ($row = mysqli_fetch_assoc($query)) { $menu_array[$row['id']] = array('name' =&gt; $row['name'],'parent' =&gt; $row['parent']); } function generate_menu($parent) { global $menu_array; $has_child = false; foreach($menu_array as $key =&gt; $value) { if ($value['parent'] == $parent) { if ($has_child === false) { $has_child = true; echo '&lt;ul&gt;'; } echo '&lt;li&gt;&lt;a href="/category/' . $value['name'] . '/"&gt;' . $value['name'] . '&lt;/a&gt;'; generate_menu($key); echo '&lt;/li&gt;'; } } if ($has_child === true) echo '&lt;/ul&gt;'; } generate_menu(0);
You might want to get a dedicated box for them instead of a shared hosting account that way they can configure the timeouts to whatever setting they want. I work for a similar company and we have a server dedicated for customer uploads and yes it still has an ftp server with temporary accounts tied up to orders created by clients. We use PHP and a cgi application http://www.sibsoft.net/xupload.html Although personally I really like the uploader from one of our competitor, they use a flash based upload (swf upload I think) http://us.moo.com/
/srv/www/domain.tld is the new standard, where it used to be /var/www/domain.tld. I'm not sure it's important to anyone, but I read it somewhere and it made sense, so I use it now too. You can just add your account to the www-data group and `chown :www-data -R /srv/www` (where www-data is the default in Ubuntu), to get access to the whole thing. Home directory is probably fine though. The main reason you'd want it somewhere else is if you aren't the only person/account working on the site. If that's the case, move it to /srv/www and leave your home directory for a local git base, cron scripts that run as you, etc. 
I think you misunderstood me. I provide voluntary support for Nginx through the Nginx IRC channel. My battle with users are about users who wants the benefits of Nginx without having to actually learn about Nginx. Usually they will google a Nginx tutorial posted in 2007 or so, said tutorial will contain a lot of bad or downright wrong advice. When things doesn't work for users they join the IRC channel and expect us to provide them with a configuration file which does work. Naturally that's not how we (Or rather I, though most people agree with me) roll. We help people learn and understand Nginx, we don't do free work for people. I am not a sadist, I don't force myself to use Nginx instead of Apache, I prefer using Nginx because it's a lot easier to configure than Apache and it's a lot faster. In fact, overall it's just a far more sane approach to a httpd. Should you switch? It sounds like probably not. It's not overly difficult to learn about Nginx but it does involve work and it does involve learning about a radically different approach to handling a server. You'll have to actually spawn PHP processes yourself, which is something a lot of people are confused by. The reason I say probably not is that the benefits are mostly for people with high traffic sites or if you expect to hit the Reddit frontpage. In that case Nginx can save your website from crashing. 99.9% of web site owners will never be in a situation where they actually require any kind of performance and in those situations switching to Nginx will give you only little gain.
hohoho
I just tried this with my user. nginx is running as the user nginx in the group nginx. I added my user the the nginx group and chown the /srv directory. I just tried to make a directory as my user but am still denied. Is this because the owner of /srv is still root?
maybe a stupid question, but did you log out and then log back in after adding yourself to the group?
Just put it under /var/www/html like everyone else. sheesh.
[WAMP server](http://www.wampserver.com/en/) can be used to run the scripts and then you can shut it off when it's not needed. But honestly, permissions are annoying in windows. You would be better off running a server in virtualbox. But that requires a lot more work to get configured properly.
Right now, you'd be doing yourself a disservice by learning Cake. The current version of Cake is based on antiquated coding practices. While the next major release is much better, it's still in beta. There are [lots of frameworks to choose from](http://www.phpwact.org/php/mvc_frameworks). While PHP is not a *complicated* or *complex* language, there's still lots of things to learn. I honestly couldn't advise you to pick up a framework unless you consider yourself fluent in PHP. Not in OO PHP, just in plain old regular PHP. Why, you ask? Frameworks are "unnecessary," but they're damned handy once you realize all of the thing that they can do for you. In order to both appreciate and understand all of the work involved, it's a very good idea to know all the pitfalls and annoyances of doing it by hand first. This is doubly true for anything dealing with OO. OO itself is a very complex subject, and doing OO on the web is a very different beast than doing OO on the desktop. Same thing for MVC. The traditional desktop-based MVC model translates poorly to the web, but it's adequate enough that it's worth continuing to use. **tl;dr:** Know PHP like the back of your hand *before* learning a framework to truly appreciate what they can do and know what you're looking for.
They gave you good advice get a good VPS or better hosting. In terms of improving performance you need to figure out a technique which doesn't need to call get.php every second.
&gt; Do I need to learn OOP...? Yes. No need to have anything after OOP. You need to learn it. Being familiar with the MVC pattern before you dive in will be helpful in understanding why a framework does what it does. Jumping into Cake and other frameworks will be a major WTF moment. That said, [the docs](http://book.cakephp.org/) are pretty good, so pay attention and you'll be alright. Also, IMO, [chapter 9](http://book.cakephp.org/view/1521/Core-Console-Applications) is a bit out of place -- baking your app is a great way to get something simple started. Not sure why it's so toward the end. But Cake is indeed a bit old. v1.3 is built around PHP4 features and v2.0, if it's ever finished, will still be outdated. [Lithium](http://lithify.me/) is essentially Cake v3.0 (made by the original Cake guys, IIRC) and uses all of PHP's fancy new stuffs.
With a finite set of items, bitfields are **much** faster than almost any other solution. Clearly if you plan on storing more items than can fit in a 64bit integer now or in the future, it isn't a good fit.
polling is bad and not scalable. move to a comet based messaging system (socket.io and node.js are nice, and js is a familiar language if you are a web developer and in terms of scalability, I've had a simple chat application handle over a hundred clients chatting with out breaking a sweat, on a rather small vps)
1 second is excessive, ratcheting it down to 10 seconds is one step. Also use some kind of cache system
[This Page](http://dev.mysql.com/tech-resources/articles/hierarchical-data.html) has good options for how to handle it in MySQL (but it should be applicable to any SQL database you are using). The basic idea of nested sets is to have a "left" and a "right" value for each entry (node) in your database. Any node with a left/right within the left/right of another node is a child of that node. The page I linked describes it as well as I would here, so instead of re-typing all the info I'll just say go check it out. It allows you to pull the entire tree, or just a branch of it with only one query. It just requires more housekeeping than just a simple "parentID" type of solution.
simple fast solution. check every 3 seconds. edit:what is the site?
memcache
Why thanks. I actually did learn what I did from the people in #nginx. I'm antihero on Freenode :)
agreed, while i havent seen your code, i can guess what youve done, and i expect memcached will drop loads by 90%
[Uploadify](http://www.uploadify.com/) should take care of that
While we're at it, here's my "skeleton" that I use along with Nginx, https://github.com/ZaneA/BDSM/tree/master/library/skel Personally Nginx has worked very smoothly for me, I'm running several vhosts on a Linode straight out of /home/user/www/ using a Makefile to automate "deployment" from my local box :)
[Here's](http://www.reddit.com/r/PHP/comments/f5u7z/help_me_plan_this_database_for_an_idea_i_have/) similiar problem. As StoneCypher suggested check slideshow: http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back and this one: http://www.slideshare.net/billkarwin/models-for-hierarchical-data There is a couple of patterns compared and from what I see easiest to write, understand and maintain is Closure Table. But that's only a solution if you can edit your tables. If not, disregard my comment ;)
http://ge.tt works great for sharing large files.
personally use [xampp](http://www.apachefriends.org/en/xampp-windows.html) (actually xampplite) 
Uniform Server requires no configuration or installation. Just fire it up and plop your files in the www directory. At times the easiest way is to create a subdomain or different folder on your server and run all of your tests there. The afore mentioned ideas assume that you have nothing special going on like pretty URLs or static linking. If you do, you will need to do some more in depth configuring to get a testing server, whether local or otherwise, to behave properly.
Do you need a replica of your server? What OS is it using? If linux, building a replica in virtualbox might be the way to go. If you don't need a copy of a unix server you might want to try the MS Web platform installer . It can install IIS and PHP for you. http://www.microsoft.com/web/platform/default.aspx
This will come in handy! Cheers!
use Zend or Symfony or lithium, much better use of OOP including MVC. cakePHP is way too rigid. Lithium docs are currently in the works, so you will probably want to go to the #li3 on irc.freenode.net, same with Symfony, and Zend Channels on freenode
also you don't rely on apache modules to run php modules through, it just run the php one. Apache kept segfaulting on php-spread and nginx didn't. It's a nice set up once you have it up and running.
I use Wamp too, what I find really useful about it is you can change the PHP version with a quick click, as well as enable and disable Apache modules so you'll always be able to test your project on a replica of your actual webserver.
&gt;Do I need to learn Never stop.
don't forget, APC as well, since memcache more than likely requires a decent amount of ram. I would just cach the last 4-5 chat sentences of each side per session. no hitting the db or network. should be quite fast.
No he does not. PHP is extremely fast, it's extremely slow if you are hitting a db all day long. Also his webhost is probably not using fast-cgi which could also reduce the performance if he is using mod_php. i think he should use a combination of either APC or memcache. hopefully his webhost allows APC, i'm not 100% sure APC is vhost segmentable in terms of security playing a role.
Make a copy of your entire site at the hoster (just put it in a different directory). Upload the file to the copy and preview it. If all is well upload it also to the main site. Watch out for the copy getting out of sync with the original! Normally you would use source control to keep them in sync, but that may be too complicated for what you need.
is /srv group writable?
I use MAMP. MAMP is only for Mac methinks, but XAMPP should work the same on Windows. With MAMP I use Virtual Hosts, so that you don't have to drop everything into the www directory. I made it easy for myself and set up the following addresses: * desktop.local (anything on my desktop) * dropbox.local (anything in dropbox) * projects.local (my all-over projects folder, categorized into folders by the type of project and languages used) * specificWebsite.local (I have a few websites I develop as well. It's handy to have one for each so you don't have to move things around) EDIT: Formatting
Same set-up here with the same provider. Except some douche lawyer sent DMCA notice on this weekend to linode when I don't have email access. They waited for me for 12 hours and then they turned off my linode. 8 fucking hours of downtime completely my mistake. Should have made arrangements to access my mail.
How it is a "standard"? Also seems pretty dumb seeing as many people have multiple domains for each host :/ /var/www/vhosts/sitealias ftw Then I have /var/www/scripts for scripts, /var/www/lib for shared things, etc. /srv seems like a nice idea, mind.
I do it all the time... "There'll would be banana-hammocks everywhere!"
Really? I thought it was quite suitable for the job of templating up pages for output to X/HTML. Sure it's trouble if you want to do complex comparisons or whatever, but as a template system I find it a resounding success. What aspects do you dislike? I'm not out to disprove you, I'm just curious.
I started with the Zend Framework on about the same foot, and using it has taught me a lot about OOP and MVC. So yeah, a framework _can_ be extremely beneficial, more so because you are still learning. Of course, the best way to learn is by trying, but the quality of the first things you code using a framework won't be too high. Therefore, start with a small project.
you should read some OOP tutorials first(there are even video tutorials in youtube, and there's this guy from thenewboston.com who has a channel with a lot of programming tutorials and pretty basic and easy to learn you might wanna check), and then pick a couple of simple design patterns (for instance factory as a very basic one). Then picking a framework should be easier
&gt; /srv/www/domain.tld is the new standard Says who? Or did you think standards were vague consensus?
Here comes the standard mewling about how frameworks helped Average Joe make Subpar Site. If you don't know why a tool helps, you either haven't vetted it well enough, meaning you can't know it's the right tool, or it isn't helpful. Just write your own sites. You don't need to start out by inheriting other people's bad code, and if you don't do it yourself, when it comes time to dig yourself out of some framework mess, you won't have the requisite skillset. Preparing for downvote rage by people who don't understand that down arrow doesn't mean "disagree."
&gt; OO itself is a very complex subject Put methods in classes with their data. Describe only a handful as public, to limit interaction. Define their interaction points, rather than the internal guts, to limit dependencies and cross-interactions. Describe some as descendants of others, to enable partial re-use. Not really that complicated.
If you add the semicolons that are probably actually there, then those are the entities for double-quote marks. Go read the manual.
I setup a web server (similar to the main one) on my main dev machine (very easy on Linux / BSD - not sure in Win7), develop / test the site there and upload to main server when I'm satisfied - simples ! 
DON'T USE 10.10. Use one of the LTS releases. 10.04 is the latest. In two years 10.10 will reach EOL and you will have to manually update source lists or completely upgrade if you want to install a new package. See: https://wiki.ubuntu.com/LTS
So can you do some free work for me? I want Nginx to act as a reverse proxy for spoon feeding clients and nothing else. Serve nothing, cache nothing, just accept requests, proxy them to the backend, buffer in memory and serve unchanged. I'm sure I could figure it out on my own, but since you didn't offer... I actually did search a bit, but found nothing immediate. (I seems like this would be a good sample config to include in the examples.)
I personally like putting them in the home directory. This way I can do multiple sites, and each site is a user and I don't have to worry too much about permissions.
some ides include their own server software for just this purpose (also debugging). well, actually i mean phpEd has this. but this isn't the simplest answer. but if you are going to do more than just one site, you should try to install whatever server software your webserver is using. apache, maybe, or turn on iis. then add php.
looks very useful, thanks very much
You can cheat a bit and use the [Turnkey Linux LAMP Stack Appliance](http://www.turnkeylinux.org/lamp) - it's a virtual machine file that comes preloaded with everything you need for a web server.
It seems I did misunderstand you, sorry about that. Thanks for the reply, I'll keep it in mind throughout my travels. 
&gt;Jumping into Cake and other frameworks will be a major WTF moment. Yeah - that's what I figured. I remember trying to use CodeIgniter and just installing it was a major WTF (never even got it installed properly). I guess I was getting ahead of myself. Sounds like I'll stick to hand-coding PHP until I become better / more comfortable with it. Thanks for the help.
Don't poll. Use memcache. Don't advertise the service on Reddit via faked chat log images like you have twice before.
That was very helpful - thanks for this. I'll stick to hand-coding until I'm more comfortable with it. &gt;I honestly couldn't advise you to pick up a framework unless you consider yourself fluent in PHP. Not in OO PHP, just in plain old regular PHP But frameworks are OO-based, right? Do I need to learn OO before checking one out in the future? Or can one get by knowing only regular PHP? I guess that what I was really looking for is something to make my job more efficient (like Dreamweaver does for me as a web designer - I hand-code almost everything, but certain functions the application offers makes my job quicker and more efficient). So I was hoping to find something similar, something that would make, for example, the many database queries I'd write easier. It seems like I'm always going into old projects and reusing the same code or rewriting the same thing over and over from scratch. I figure there's gotta be an easier way. Like a GUI that I can select which tables and statements to query, rather than constantly writing them out. Maybe I'm just being lazy. Lol. Again, thanks for your help. I appreciate it.
You're suggesting that PHP has an inherent limitation that is actually host-configured, then proposing a different language with the exact same host configuration, under the guise of it being a language limitation issue.
In addition to idonthack's comment check to make sure that the group has permission to write to the folders. If you type ls -l /srv The folders permissions should show up as: drwxrwxr-x And files should show up as: -rw-rw-r-- If they are missing that second 'w' than use this command: chmod g+w -R /srv
I would recommend against this unless you want google crawling your dev folders...
This is something I've always wanted to set up for creating new sites. Right now I have a post-it note with each step I have to do when creating a new vhost --- sucks! Thank you!
&gt; With a finite set of items, bitfields are much faster than almost any other solution. Has this been tested somewhere? To my knowledge, MySQL doesn't do bitwise indexes, so matching would require iteration over every row in the table.
I test everything using xampp, you can run it off a USC drive so I can even work on code when I am at my day job.
I have Windows 7 and Xubuntu, on windows I have Xampp, which already comes with phpmyadmin and mysql so that's cool, with Zend Server you've got to download it as an extra feature and it's harder to config. 
you'll probably have to learn something called JOINS if you haven't heard of it already
no
mm maybe you should try reading some tutorials on basic OOP(there's even videos of that on youtube if you check), and then try understanding a couple of simple design patterns (I had a guy teaching me factory and private __consturct methods because I just couldn't understand those on my own)
&gt; Know PHP like the back of your hand before learning a framework Finally someone hit the nail on the head. 
You could use JS to query the value of the input box, if the value.length is greater than 2, then send the get.php request. This is not a long term solution! But a quick fix.
That is something that is easy to prevent with a robots file. Besides I have done this for years anyways and Google has not once crawled my sandbox. Obviously don't be dumb enough to link to it from your main site and no one is any the wiser.
Even better, use Debian. All the apt-y and package-happy goodness, none of the desktop gui load that you absolutely do not need running on your slice server. To answer the serving question, I put them under /var/www/sitename/ and host multiple sites. Either script up copying or add yourself to www-data and edit directly.
No problem, its something you always wonder when you'll get round to it, if people can benefit from my simple script then that's great. 
i left my comment because asr didn't mention how to protect the folder (robots, .htaccess etc..) 
I'd suggest learning CodeIgniter if you're avoiding OOP. I started my project I've been working on (jquery heavy CRM to replace Quickbooks for quoting/sales orders, manage followups, payments &amp; other tools I use daily) with CI &amp; I'm glad I learned it but now I'm starting to move my code over to Zend as I get more familiar with it. 
I'll look into this, thank you for the suggestion
Would be a quick solution but then the chat would be slower and not feel like real time, trying to find a long term solution. Also, it's currently down at the moment but if you wanted to know the url, let me know
Going to check this out also, thank you for the link
I was speaking in terms of PHP, if you needed to query it on the MySQL side I would probably use a column with a SET datatype. Depending on your requirements, this may end up being a giant pain in the ass, but you can also garner quite good performance given the right circumstances. 
I've made the attempt to jump into OO frameworks before but every time it seems like I'm hitting a nail with an asteroid where a hammer would have worked just fine. I inevitably fall back to just doing it all by hand with whatever code I've got in my arsenal. 
I'm not sure if a cache system would be useful as 'get.php' only ever gets New messages that haven't been displayed yet, although I don't have much experience with caching, i should learn hehe
&gt; I've made the attempt to jump into OO frameworks before That's your first mistake. OO is a very small, very simple thing. The second you try to involve a framework, you're trying to learn from someone who themselves didn't understand things. &gt; I inevitably fall back to just doing it all by hand with whatever code I've got in my arsenal. Of course you do. That's because virtually all frameworks are garbage.
never heard about memcache till now thanks. and i read up about it im not sure if caching would be beneficial as i have to query the DB a lot to check and see if theres a new message to be displayed
I've suspected as much but I think that's the first time anyone's confirmed it for me.
It is a good tip. However, when someone is this new to PHP development I think it is wise to explain how unlikely it is that Google will find unlinked random files/folders on your site. And mention possible resolutions to that problem if someone is truly worried about it.
I tried installing CI a while back and couldn't even get there, lol. As a web designer, I think I may be wayyy ahead of myself here.
I had a quick look at the documentation and it solves several problems with typical MVC frameworks. I like the "module" implementation - I find too many frameworks want to act like raw database editors rather than actual applications. I also like how it solves the "widget" problem (building a response from multiple controllers).
&gt; But frameworks are OO-based, right? Do I need to learn OO before checking one out in the future? Or can one get by knowing only regular PHP? The vast majority of PHP frameworks are OO, so you will need to learn how to work with object oriented code *eventually*. OO design is frequently used to manage complexity. That is, when a system becomes complex, using OO techniques is a good way to keep that complexity organized. However, it's easy to use those organizing tools to create even more complexity. &gt; So I was hoping to find something similar, something that would make, for example, the many database queries I'd write easier. As it happens, database access happens to be frequently managed by an object. It happens that PHP has [PDO, a pretty comprehensive OO database access layer, built right in](http://us2.php.net/manual/en/book.pdo.php). Now, while PDO is pretty good, and [using prepared statements](http://us2.php.net/manual/en/pdo.prepare.php) and [placeholder replacement](http://us2.php.net/manual/en/pdostatement.bindparam.php) will make your queries *safer*, it might not make it easier. You might find a query building class interesting to look at. [Zend Framework's Zend_Db_Select](http://framework.zend.com/manual/en/zend.db.select.html) is an example. It lets you build a query using methods (object-specific function calls) instead of putting together the string of SQL yourself. This can add a tremendous amount of convenience for you (or be a raging pain in the ass), at the cost of a bit of performance and complexity. &gt; I guess that what I was really looking for is something to make my job more efficient [...] It seems like I'm always going into old projects and reusing the same code or rewriting the same thing over and over from scratch. I figure there's gotta be an easier way. Using OO techniques may be a good choice in many, *but not all* circumstances to make your life a bit easier. Let's take a look at [MVC, Model-View-Controller](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller). So, for web apps: Users interact with Views. Views pass information to the Controller, which works with the information and the current state of the Model. Results from the Model are passed back up through the Controller to the View. Views are clearly similar to plain old HTML templates. A proper View is a PHP script or template file ([I follow the PHP-is-a-great-template-language movement](http://www.massassi.com/php/articles/template_engines/)) that contains only the logic needed to render output. This means that prior to the template being worked with, all of the information needed to render output has been generated. You can totally do that without touching objects, if you wanted. So, that leaves Models and Controllers. The Controller is easy, right? It's just glue between the View and the Model. So, I guess that means we need to work on Models next. Wikipedia sez: &gt; The model manages the behavior and data of the application domain, responds to requests for information about its state, and responds to instructions to change state. [...] The model is not necessarily merely a database; the 'model' in MVC is both the data and the business/domain logic needed to manipulate the data in the application. So, Models are data and logic, together as one thing. I think it's time for a crash-course in PHP OO! Let's begin. 1. You can think of PHP objects as glorified arrays that have functions attached. Tada, lesson over! Object = data + logic. If you were writing blog software, and were using OO MVC, you'd certainly make a Model class for blog posts, almost certainly make a Model class for post comments, probably make a Model class for users that can create posts, and maybe make a Model class for users that can make comments. But then there are simple things like tags and categories. There's not really much *logic* to attach there, they're kind of just data, sitting, floating out there loosely attached to posts with nothing of their own to contribute, other than existing. Makes life interesting, no? So, we've got the Model, we've got the View, where's the Controller? In PHP MVC, the Controller just needs to take user input, fire up the right Model(s), pass the user's request in, then take the result and feed it to a template to generate the View. This is where a lot of people trip up. If you were to add, say, posting permissions to your blog, where would you put the permission check? Would you put it in the Model, and have it be responsible for permission checking? If so, suddenly the Model somehow needs to be aware of the currently logged in user, and that might not be desirable. So, then you could put it in the Controller, but suddenly the Controller is more than just simple glue code, it's starting to contain logic that might be considered a business rule. Welcome to web application development. It's a glorious pain in the ass to do it right. Ah, but it gets worse! Each OO MVC framework does MVC differently. While I use parts of Zend Framework in my own code, I don't use their MVC implementation because I don't like how overdesigned and complex it's become (even though that complexity has added a lot of powerful and interesting features). But let's rewind a bit. You've stated that you're a web *designer*. Chances are that you aren't archietecting complex web applications with rigid business-driven logic. A full-fledged MVC framework with *real* Models may well be overkill for many of your needs. You may find that bits and pieces of frameworks may meet your needs instead. I keep mentioning Zend Framework here, so I'll bring it up again. ZF is very loosely-coupled, meaning you can use bits and pieces of it without having to use everything. I haven't used it, but I understand that [Symfony](http://www.symfony-project.org/) is the same way (and it's not uncommon to see Symfony and ZF components together in a single project.) I would *not* recommend ZF to people that aren't super-fluent in PHP though, the overdesigned aspects are everywhere. **tl;dr:** MVC is hard, let's go shopping! You might not need a framework. Learn more and pick one that works for the things you're doing.
This is one of the many problems with proggit's punishment fetish: all uncommon viewpoints get downvoted into oblivion, servicing the hivemind. Notice that great grandparent is already at -1, even though it says nothing rude or critical. Why? Because two fanboys, who hang their self esteem on how difficult OO is, have downvoted because how dare I say the thing their self esteem rides on just isn't that complicated? No rebuttal, no rebuke, just downvote. And thus nobody learns, and the hivemind gets dumber and fatter.
I've made something similar for PHP's ImageMagick module (IMagick) http://github.com/raspi/iMagickFx Example code: https://github.com/raspi/iMagickFx/blob/master/doc/example.php Created images: http://raspi.fi/wp-content/uploads/2010/08/imfx-369x1024.jpg
Yes this is why I tend to not voice opinions or bother voting on things anymore. People have forgotten the meaning of upvote or downvote and simply vote because they disagree with something instead of simply attempting to have a conversation on the matter.
I've been using iSendr since it was announced on Hacker News. Just to say it's brilliant. No messing around with rapidshare or megaupload. 
So using that logic, why wouldn't you always use JeOS?
Well, Tuesday's here and I'm just doing this. Let me know how this works: http://pastebin.com/UUZU7RH0 I _think_ I got it all in there the way you were thinking. Feel free to PM me if it ain't workin'. I don't see any reason it shouldn't now, though.
Oh, you didn't get that memo?
Have you ever run more than 20 sites on one box? 2,000 sites? Organization can help a lot.
I use XAMPP, but I may have to try WAMP
Architecture is the issue here, and if I had to guess the constant `SELECT * FROM messages` query is what's burning your CPU, you need to find ways to cut it down
Between Zend Framework (which I use at work and like and know fairly well) and Yii (which I am intrigued by and which has a solid pedigree), and Code Igniter (which I used for a few small projects and found easy to get started with) I'm pretty settled on PHP based frameworks. It'd take a lot for me to really consider a new one.
This is why it peaked my interest. I was curious for feedback if anyone had built anything on it yet.