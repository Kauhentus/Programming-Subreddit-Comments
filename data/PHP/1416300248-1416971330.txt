[This](https://bitbucket.org/sandeepcr529/crxml/src/ac2811468a85f37c8aaa4685856d003fd865b8dd/crXml.php?at=default) is something I wrote way back, Here is the [documentation](http://crxml.gopagoda.com). It used DOM extension internaly, and provided a dead simple interface to generate, parse or modify existing xml documents. One of my goals was to simplify access when the xml document contained complex namespace stuff. So there is a search function, which takes a node name as an input and it will print out all the nodes with that name in the document together with the php statement that can be used to access that statement. You can see documentation for this [here](http://crxml.gopagoda.com/#12).
It's useful in some contexts and also for fun yes :-). API is life after all ;-).
PHP Companion. I use the shortcuts for import namespace, find use, and goto definition many times per day. https://github.com/erichard/SublimePHPCompanion
QUERYPATH - THE only way to parse XML . Nothing comes close.
Please don't pay much attention to the above link. It hashes the passwords using md5 without any salt. This is a very bad idea. http://www.phptherightway.com/#password_hashing
That's one of the best method of learning. Can you make another part of this quiz ? :)
Yep indeed, it was exactly what happened with those these functions. Here's the relative doc diff: http://svn.php.net/viewvc/phpdoc/en/trunk/reference/strings/functions/htmlspecialchars.xml?r1=320681&amp;r2=322842 In regards to BC (and legacy code bases), what made it worse was that there were no config options etc. to adjust the default before PHP 5.6 (the code itself must be fixed).
Before log in. It is like if the user forgets the password, we the administrators will be able to do a hard reset of their passwords
&gt;i am currently doing a system for a school project and i am just wondering if anyone knows any simple codes to reset a password ? Forgot to add some more information in my haste while posting it up. 1) administrator(me) is able to do hard reset for the users who forgot their password 2) preferable done with a click of a button 
Indeed, I'd never deny using it straight out the box is complex, but the moment you want to start digging deeper for more specific requirements it causes a huge headache. I prefer to use a security components which are clear and direct to understand, allowing any overloading to minimise any possible chances of creating security flaws. 
[I'll just start my own International Standards Organisation!](http://i1.kym-cdn.com/entries/icons/original/000/010/832/bender.jpg)
It is only a one liner if you use SensioLabsGeneratorBundle thingy :) I am very much against generators, annotations and other magic stuff such as the new ExpressionLanguage.
OP you can post some sample code for us to see. Not the internals of the framework but show us how to handle a POST request on a URL /blah and save incoming data to the database. Something simple like that, that most of us do. That way you don't have to release the code but you can still give us a taste as to how it works, etc...
Have a look at Processwire's history https://processwire.com/about/background/ Ryan Cramer, the lead developer of PW, created it for his own client projects, and that's how he used it for a long time. But it was only when he released it with an open source license that the software was really put into test and benefit from other developers inputs, although Ryan still gets the final word and quality check on every single change that is made to it. If your confident about the quality of your product, go ahead and do the same, it can only benefit from more people using and improving it.
Give a try to [Web Application Security Quiz](http://timoh6.github.io/WebAppSecQuiz/). It is not strictly PHP related, but contains some directly PHP related questions (and universal web app security related material).
&gt; It is like if the user forgets the password, we the administrators will be able to do a hard reset of their passwords Why do the admins even need to be involved? Why not do it like every other website where you email a reset link which is valid for a short period of time? 
&gt; I don't think you'd gain much from seeing an admin backend when so many of the benefits come from how websites are coded. *Most* of the benefits to the user come from being easy to use. There's a reason Wordpress is so popular, the admin area is intuitive. You could have the best code in the world but if it looks crap it's no good.
Thanks for the clarification.
I often see that the awesomeness of framework/library X is explained with "full usage of php 5.4/5.5 features". I'm maintaining a list of most important changes between each php minor version, but can't figure out which one (from 5.4 or 5.5) is that revolutionary, that would allow me to write a better architecture. Not denying 5.3 though.
Speaking of language constructs, do you know where the 'echo' construct is implemented? EDIT - Ah it seems it's picked up in Zend/zend_compile.c and translates to the ZEND_ECHO opcode
DOMDocument is really the only show in town. All the other APIs suck pretty badly.
The tears of a small child
Why using a throwaway account to publicise the framework?
I have flipped through the PHP and MySQL Web Development by Luke Welling and Laura Thomson and it seems a good book, besides they'll release the fifth edition in a few months so maybe it's worth to wait a little bit ;)
&gt; notTheRealData Phew! Glad it's not the real data!
Interestingly, in the example code: function bar() { echo "Hi!"; } class Foo {} $a = new Foo(bar()); Produces no output in PHP (which I think is a little crazy) but does echo in hhvm: http://3v4l.org/gBT4L http://3v4l.org/gBT4L
If you like PHP quizes, you may like my [PHP challenges](https://github.com/wearebase/base-php-challenges). They're very esoteric and don't really test skill, but they are fun and an interesting discussion point.
Thanks! Those are very good considerations. A lot of effort has gone into security but a 3rd party audit would be important. 
Good idea! I will give that some thought.
See my edit above... and at the moment I'm not worried about publicizing it. I'm worried about whether I have something that people would be potentially interested in, so I can decide if it's a good idea to spend some non-trivial time and non-trivial money to release it to the community.
Thanks so much! You are right I have seen Concrete5 but I haven't seen the others.
How about this: &lt;?php $bodyid = 'name'; //global ?&gt; &lt;body id="&lt;?php echo $bodyid; ?&gt;"&gt; But i wonder why would you make an id as variable? There are scenarios where id has to be a variable but i dont think that is the case for you.
Thanks, ill give it a try. I use the Body ID to make the Nav buttom glow if you are on that page. Now i want to use the ID to create a log file with visitors. That way i have a log file per page of all visitors and i can use these to analyze which visitors come where in my site. Its a little dirty and quick. But its all for learning. **Edit:** Found my problem. I import my footer from a .html file. It seems because i import it it doesn't read or gets to read the defined variable.
It's part of the requirement. But then again its arguable about us sending the password via email. I mean if we are able to do it then it would work I guess but the method "suggested" to us to try was that :/
Thats weird..... Would a class constructor get called there? I would hope so...
Find a good online tutorial and print it out? `;-)` Yes, avoid the legacy `mysql` library - PDO or mysqli is the way to go. 
I wouldn't really call that "optimization" though. Short-circuit evaluation is important because it means you can do stuff like null checks on an object before accessing its properties, or any other sequence of logic checks that rely on some previous step being true to not throw an exception.
Not sure why this gets DVs, so +1. FWIW, I think PTRW is great, but it presents a morass of concepts that can be intimidating for beginners. For mentoring, I like askadev.com too - linking students with free mentors, for free. 
&gt; I need to decide if I want to put in the 500+ hours that it would probably take Here's a crazy idea: find one or two other devs that you can trust and teach them how to use it. Give it a few months, and then get their opinion on the matter. But don't spend that 500 hours coding, instead focus on building up a community of devs who are excited about working with your framework. The success or failure of that particular aspect might be a better indicator, in terms of answering your basic question here.
Its just a little project. It don't need full analytics of every page. I just want to learn a little php, as i said. But thanks, i know how Google Analytics works and it great. Also, i imported the footer with &lt;? php include Includes/Footer.html"; ?&gt; instead of &lt;!--#include virtual="/Includes/Footer.html" --&gt; and that does seem to work perfectly. Didn't need to change it to .php Eventually this website will be used as our intranet page. Just 4 small pages with text. Nothing fancy and no php. This was just for my own joy and learning. Sorry, i could have put that in my original post.
Good idea, thank you.
No, sorry.
"pretend to share it with" I have a feeling there's a joke here that I'm not getting, and maybe something important behind that joke so can you elaborate?
Agreed the docs are lacking, especially for v3 which I struggled to get setup. However since getting it set up, I've found it a smoother process than Codeception, which I tried before. Also enjoy writing the specs in totally non programming language. Isnt Codeception based on Behat+PHPUnit anyway? Although in theory the less technical people can read the specs too, so far they dont seem to have the time... 
Reading through the comments it seems as if you 1. think you only have 1 shot at this, and 2. Are a bit of a prima donna with respect to how others view your work Just release it, analyze the feedback, decide what you want to improve and the improve it.
Can I ask how your system compares to Concrete5? Does it offer front-end editing? Easy customization of the editing experience (as C5's blocks allow)? How clean is the template layer (how much does one need to alter their markup to make it work with the cms? -- C5 is much better than "the big 3" in this regard, although not as clean as Processwire [because c5 needs to support front-end editing which PW doesn't have out of the box]).
[PHP: The "Right" Way](https://leanpub.com/phptherightway)
You're not sending a password via email. You're sending a LINK to a *form* that they fill out to reset their password on their own. Here's how that process works: **1. The forgot password page (http://somedomain.com/forgot).** * They enter their email address * You look up their account based on that email address * If account exists, generate a *random* token, save it into a database (table: password_reset_requests) with their email &amp; a timestamp * Send an email with a link to reset the password, along with that token (http://somedomain.com/reset&amp;token=&lt;your-token-here&gt;) **2. The reset password page (http://somedomain.com/reset?token=&lt;your-token-here&gt;)** * After a user clicks the link in their email, they are brought to this page (again, it could be something like http://somedomain.com/reset&amp;token=&lt;your-token-here&gt;) * Immediately verify that the token is valid and that it has not expired by looking it up in the database using a query like `"SELECT * FROM password_reset_requests WHERE token = '$token' &amp; timestamp &gt; {$current_timestamp - 900}"` * If you don't get any results, then the token either doesn't exist or has expired, and you should display an error, else show the form... * On this page, require them to re-enter their email address, along with a new password and confirm new password (3 fields total) * When they submit, re-verify that the token exists and is valid, and ALSO matches the email address provided * If the token is valid on post submit, make sure the two passwords they entered match * If the two passwords match, hash one of them and update the appropriate record in the user table with it (e.g. the one that matches the email address) I realize that this sounds more complicated and involved than allowing an admin to simply change the user's password, ***but this is the right way to do it***
to scale your site, some of the things that you need to do are: * make sure you can specify a different server for your database (via configuration) * store your user sessions in a session store like memcache or redis, which can reside on a different server * your web server should be stateless, meaning all state information is stored elsewhere (first 2 items) * if you accept user uploads (images, etc), be sure to put them on a separate server as well * make good use of caching layers, and cache rendered sections as much as you can * learn how to use HAProxy, or how to use nginx as a reverse proxy, for load balancing when scaling horizontally, you want to allow your users to switch from one front-end server to another without noticing it, this is why your state needs to be pulled out, and be made accessible from any of your servers. the servers/services for your state have their own rules/guides on how to scale them (clustering, replication, etc). most of these are supported by modern frameworks, and even come as composer packages.
I remember VB6 not doing short-circuit evaluation. It was a pain to say the least.
What about this: &lt;?php class Foo {} // This currently fails with a `ReflectionException` //`Class Foo does not have a constructor, so you cannot pass any constructor arguments` (new ReflectionClass('Foo'))-&gt;newInstance(1); This should probably change too, as for example Testing and Mocking Libraries rely on reflections (to mimic the *exact* behaviour of real classes, and after that patch, all classes have a constructor). So this is a BC Break to `ReflectionClass::newInstance` and `ReflectionClass::newInstanceArgs` - maybe more. Or do I get something wrong?
yeah it does. putting logic outside of the code IS a bad practice no matter what you say or how "cool" it looks.
Agreed. 
This: http://simplehtmldom.sourceforge.net/ uses Jquery-style selectors so it will be very familiar to use.
in the example code you also dont supply an actually connection to your mysql functions ~ as other people mentioned you should use mysqli, heres a quickstart: http://php.net/manual/de/mysqli.quickstart.statements.php but a fair warning, use the prepared statement syntax otherwise with your experience you might create an open invitation for every hacker/script kiddie out in the world to get your data/server ( http://php.net/manual/de/mysqli.prepare.php )
 class Animal { } class Cow extends Animal { public function __construct() { parent::__construct(); } } Calling a non existent parent method feels very weird. I would expect to see that method exist somewhere, and while debugging be able to step into it. I see the issue that is being solved. Feels weird though.
Never had any issues with IE since version 6. Sure IE 7 had alot of problems, but if you think ahead when designing you could always manage it. Since IE 8 stuff I do works in IE without any issues. to be honest, when people say that they don't support IE I just consider them to be not very good. Especially since it's alienating a large userbase. Out of interest: what problems ith IE do you have specifically ?
This used to be a thing that people did, and it was as stupid then as it is now. You support/don't support versions of browsers. the latest and greatest from MS isn't different enough that it takes significant effort to support successfully. What you're doing is just biased bullshit.
but judging from my experience with actual communities ... you would have a "higher quality" of users in your community, if you simply ban IE usage :) one example: tickets submitted by IE users need 20% more "answers" to their tickets, i.e. if you answer to a ticket, they dont understand your answer and ask again. we can actualy quantify this stuff on our end, and in essence "IE" support "costs" us more money then its worth :) [though as you said, we simply support those IE versions which are basically compatible to current standards, which for us is everything IE 9 and newer] 
Instead of hating on Internet Explorer how about you look at your HTML, CSS, and JavaScript and reassess how you do things and maybe adopt a framework that takes care of the quirks? I haven't had to disregard IE in years, nor have I had issues with them on my stuff.
clearly your actual communities involve no government entities or people younger than 30
Wow! Thats really useful information. Will try and understand each and every point clearly. Can i pm you if i have any doubts?
This proposal sounds like it's fixing a "bug" in PHP itself, to be quite honest. A class "constructs" whether it has a constructor method or not, so I don't see why calling this process using any sort of function/method notation should have ever failed. My feeling is that writing `parent::__construct()` is the notation we have for calling a parent's bootstrap process, rather than "call method called __construct in the parent class", which is literally what it does now.
This causes your web app to show white page: &gt;items:[phoneNumber,givenName,] Because there is a comma at the end.
government is not so much ~ german government usually either has secure firewalls that wouldnt allow to surf on our sites at all or they use linux clients, most of our other users are younger than 30, IE usage is below 5% 
What is the benefit of doing this over just putting the files in the docroot? All the uploads are still directly publicly accessible either way...
Well, exactly my point. If console.log() is in your production code, you're not very good.
I was completely pluzzed when saw that no ouput was generated!! The fact that there was no constructor should no affect the call to `bar()`, as they are not related, only bar's return value and the missing constructor are related. IMHO this should be considered a *bug*
Annotations in any other language (logic outside of the code) is not bad practice. Pretty much that simple.
To the moon!
It's not the accessibility - more the fact that you have disabled any ability to execute PHP code injected into a malicious image upload. This could also be done with path restrictions (nginx/apache) but just fully shunting PHP execution on the entire virtual host is often a safer overall approach than risking a path restriction that is worked around. 
You have a form inside a form.
That sounds like a good very good idea! I will look into that and see what will happen. Thank you so much for the idea :)
&gt; &gt;By keeping it outside your document root you ensure that all requests can be proxied by your PHP &gt; &gt; Which sometimes isn't really desirable - as it's going to balloon your simultaneous requests to the PHP runtime from users. Agreed! As with any engineering topic there are a variety of solutions with their own trade-offs; my answer was essentially the simplest solution that offers a good trade-off between flexibility &amp; simplicity.
Nothing substantive for the simplest cases, and arguably readfile is probably the simpler solution! The advantage in more complex cases is that with a small amount of additional effort you can support download resuming; of course these days this is not a feature that is needed unless the files are very large, and even then I suspect you could find a single-purpose library on packagist that wraps this process with appropriate error handling (etc).
IMHO you should really check out [semantic versioning](http://semver.org/) and at least create a seperate development branch from where you then merge new releases back into your master branch. Also tag your releases (use *0.y.z* notation as long as you do not consider your framework stable). Two more things regarding composer: * move "phpunit/phpunit" into "require-dev" instead of "require" * add your composer.lock file to version control
What *console*?
I kind of feel like this allows people to be sloppy. Don't get me wrong I'm sure in some cases it could be nice when extending some kind of class defined in an extension, and you're just not so sure about whether it has a constructor or what. But seriously, if the parent class doesn't define a constructor, you should know that when you extend the class, if you don't know, go look. I've NEVER had, nor seen, this problem.
I think you are talking about this: http://www.webopedia.com/TERM/W/Web_beacon.html &gt; calculate the amount of requests by parsing webserver's access logs at a later time Yes, this is probably the way it is done. You don't necessarily have to do it in real time. Generate the aggregate statistics and produce the report later. Ebay uses them: http://pages.ebay.com/help/account/cookies-web-beacons.html So does Yahoo! https://info.yahoo.com/privacy/us/yahoo/webbeacons/ 
Since a beacon is just an image, javascript would not be required. Having said that, an API call using javascript can send more information about the user and browser, but beacons are useful in situations such as html emails where javascript won't be executed.
Okay. I believe it removes the requirement of javascript to make api calls. However, some adblockers blocks some images with names like track.gif, ad.gif or similar. So there may be a small downside. I've always thought there is a performance side of using beacons. Calling a static file with data, keeping the log request logs somewhere (without having to execute php each time) and parsing them at a late time was one of beacon's purposes. Most trackers (the ones do analytics stuff) I know rely on beacons, but I believe they don't do it just because beacons work properly without javascript. There is no other upsides of using beacons? Like, maybe realtime streaming or something like that?
I'm new to php and somewhat new to programming as a whole. A friend pointed me towards [Apress](http://apress.com) books and I ordered "PHP for absolute beginners" off of amazon. I haven't received it yet but I read/worked through the first couple chapters on kindle and it is very helpful and informative to a novice like me. The updated 2nd edition just came out in August of this year. http://www.amazon.com/PHP-Absolute-Beginners-Jason-Lengstorf/dp/1430268158/ref=dp_ob_title_bk
That's for values only. Not identifiers. It's not smart enough to differentiate. For your reference: http://stackoverflow.com/a/15991422
This shit gave me fucking cancer just as much as other shitty template engines that are not plain php. For the love of god just quit making me need to learn new syntaxes for your made up shit. Twig, Smarty, Blade...and now this? Please...
It turns our that you're talking about [**web** beacons](http://www.webopedia.com/TERM/W/Web_beacon.html). Not mobile beacons, i.e. [BLE beacons](http://en.wikipedia.org/wiki/Bluetooth_low_energy#Proximity_sensing): 
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 8. [**Proximity sensing**](https://en.wikipedia.org/wiki/Bluetooth_low_energy#Proximity_sensing) of article [**Bluetooth low energy**](https://en.wikipedia.org/wiki/Bluetooth%20low%20energy): [](#sfw) --- &gt; &gt;"[Electronic leash](https://en.wikipedia.org/wiki/Electronic_leash)" applications are well suited to the long battery life possible for 'always-on' devices. Manufacturers of [iBeacon](https://en.wikipedia.org/wiki/IBeacon) devices implement the appropriate specifications for their device to make use of proximity sensing capabilities supported by [Apple Inc.](https://en.wikipedia.org/wiki/Apple_Inc.) compatible [iDevices](https://en.wikipedia.org/wiki/IDevices). &gt;Relevant application profiles include: &gt; &gt;* FMP — the "find me" profile — allows one device to issue an alert on a second misplaced device. &gt;* PXP — the proximity profile — allows a proximity monitor to detect whether a proximity reporter is within a close range. Physical proximity can be estimated using the radio receiver's [RSSI](https://en.wikipedia.org/wiki/RSSI) value, although this does not have absolute calibration of distances. Typically, an alarm may be sounded when the distance between the devices exceeds a set threshold. &gt; &gt; --- ^Interesting: [^Bluetooth](https://en.wikipedia.org/wiki/Bluetooth) ^| [^IBeacon](https://en.wikipedia.org/wiki/IBeacon) ^| [^Bluetooth ^stack](https://en.wikipedia.org/wiki/Bluetooth_stack) ^| [^ANT ^\(network)](https://en.wikipedia.org/wiki/ANT_\(network\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cm6cohd) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cm6cohd)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The problem is not whether you know the parent has a constructor or not. The problem is when the parent class doesn't have a constructor by the time you extend it but comes to have a constructor later, then you'll have to modify all classes that extend it and add parent::__construct(). Or, more likely, you will not modify all classes that extend it, or won't even know what classes extend it, so the parent constructor would not be executed at all, leading to a potential silent failure. The point is that you should (or at least should be able to) call parent::__construct() whether the parent class has an explicit constructor or not.
It's just a reliable way to get a browser to call some url for the purposes of tracking or collecting other information. The endpoint doesn't have to be an actual image.
a spelling checker https://www.youtube.com/watch?v=6zXDo4dL7SU
This looks good. I'd suggest making the private methods protected, and adding a bit of whitespace between methods to make it a little easier to read. Otherwise it looks solid.
Someone correct me if I'm wrong, but I'm pretty sure all the mail services (Postmarkapp, Mailchimp, etc) use beacons to let their clients know who opened the emails that were sent, and when. It's the reason I disable automatic image downloads in my mail client o.O. 
You betcha. My gut reaction is that after 10 years on it, the best thing to get at this point would be perspective from some peers who've used it and examined it a bit. And if they *do* like it, then they can become force multipliers, both in terms of helping to spread usage, as well as improving the codebase. Another idea would be to cruise /r/opensource, and related subs - maybe could get some helpful ideas about licensing the software, and onboarding dev(s). Good luck man!
Really like this idea, the only downside is having to use StaticProxy as the type hint in method signatures. Could you do something with reflection API or class_alias?
Ah okay, my bad :)
`$arr = json_decode(json_encode((array) simplexml_load_string($xml)), 1);`
I'm seeing all of these suggestions when really you should just make the upgrade to PHPStorm. ;)
May be kinda OT: https://gist.github.com/rkrx/17bc75d0cb2b8e1eabb0#file-action-L15 Why that extra added dependency that is rather hard to build (I'm thinking of tests in particular)? Why not letting the Action to respond with the payload directly and make the assignment to the Response-object in the front-controller by routing-information?
You should search "orm is an antipattern" or "is orm an antipattern" to look at what people have to say about it. My completely unhelpful $0.02 because I don't explain it at all: yes, ORM is an anti-pattern.
You can use PHP's COM class if the DLL exposes the interface.
Is this a COM or Win32 DLL? If it's a COM DLL you could use the COM class (http://php.net/manual/en/class.com.php) to call the DLL as long as the DLL has been registered in Windows using RegSvr32. To call functions in an arbitrary Win32 DLL you would need to write your own PHP extension or find an extension that provides this functionality. You could also create a COM object in .NET that wrapped the functions in the Win32 DLL so you could access them using he COM class in PHP.
That would be very interesting to try!
I added an Aliaser class that's a shortcut for aliasing the Proxy. I can see some good use cases for this. In one project I have, I want to convert some static classes. Being able to alias the proxy helps in that clean up process.
Have you tried doing `static::$_config_array[$dbkey]`?
Yep, this will surely help him! I also posted something else that might help.
You can do this easily. * Send them an email with a code that you store in a database linked to their account. * They click the link, directing them to abc.co/reset?token=`&lt;token&gt;`. * You check if the code exists, if so, show a form, if not, redirect to error page. * You validate their new pass, then run a query like: `UPDATE users SET password=:password WHERE id=:id` ...or something similar. * Delete/revoke the password reset token. Hope this somewhat helps. 
Looks similar to some of Laravel's code, and looks similar to a YouTube tutorial I watched a few years back.
You would need to rewrite all extending classes by hand to introduce a new constructor argument. But if you were already calling parent::__construct() you'd at least get a missing argument warning, whereas without the call it might just fail silently. I get your point though. And it's also worth noting that IDE's are already able to hint about missing call to parent's constructor, if there's any.
If you're accessing a static variable, the get function should be public static function get($key) { if ( ! array_key_exists($key, self::$_config_array)) { return null; } return self::$_config_array[$key]; }
I'm in favour of this RFC - let's see how it pans out - could see this busting quite a bit of older code (and of course, WordPress plugins). 
Pointless looking at tutorials. I learned PHP by reading php.net.
He'd have to use self::$_config_array[$dbkey]; But I can't condone any of this code.... Also, are we doing your homework for you? This seems like something you'd find in a 5 year old school paper. 
The init stays for either the user need to set the payload_method for error on each class. So to get rid of that. class BlogBrowseResponder extends AbstractResponder { protected $payload_method = array( 'FOA\DomainPayload\Found' =&gt; 'display', 'FOA\DomainPayload\Error' =&gt; 'error' ); &gt; I really don't like having to depend on the concrete class Aura\Web\Response Yes, I get you. In a long run it will be changed to PSR-7 ( Haven't added PSR-7 for api is highly unstable ). Hope that will fix the issue. &gt; (seems like it isn't needed by all engines) It indeed is used by Aura.View for 2 step template and Mustache also can make use of it. See https://github.com/friendsofaura/FOA.Responder_Bundle/blob/0.3.0/src/Renderer/AuraView.php#L15-L20 and https://github.com/friendsofaura/FOA.Responder_Bundle/blob/0.3.0/src/Renderer/Mustache.php#L17-L26 &gt; I am interested in seeing where this goes Have you read the ADR paper? Thank you for your time and feedback.
Sort of related: Why does php require ( why was the decision made(?) )? parent::__construct Surely in most cases you are going to want the parent constructors to run, even if you have defined one for the child class. EDIT: wouldn't it make more sense to explicitly state that you don't want the parent constructor, rather than the current way. EDIT2: /u/ThePsion5 pointed out: How would that work for constructors with arguments that are different from the parent constructor's?
Correction. &gt; if you are still using unsalted (or non-uniquely) salted MD5 for your passwords, an attacker with this setup can make 180,000,000,000 guesses per second That's 180,000,000,000 guesses per second **against every user in your database.** AT THE SAME TIME. With salts, that's 180,000,000,000 guesses per second against **one** user in your database. --- Also, I quite enjoy the fact that the article doesn't actually say how to do it right. Another shining example of the PHP community.
/u/devosc the responder bundle doesn't hold to send back response from action. You are free to do the same. `Response(array('xx' =&gt; 'cc'));` The bundle makes it possible if you are following ADR to build the complete response via the responder.
Thanks, that nicely explains it nicely. Only ever used oophp with an auto DI and the arguments slipped my mind when originally commenting.
Good to use something like https://github.com/vlucas/phpdotenv and use `getenv()` . That will help you not to hard code the values.
Part two does in fact cover implementation, for both PHP and Ruby.
So engineyard is spamming multiple subs now.
I would disagree in this case. The constructor sets up the invariants of the class. If you can derive from the class and prevent its constructor from running, it -- in my opinion -- violates the [open/closed principle](http://en.wikipedia.org/wiki/Open/closed_principle), since you can indirectly modify the base class by modifying/violating its invariants. In this -- and many other -- respect, I think [C++ got it right](http://stackoverflow.com/a/120916/1007504).
It wouldn't be that hard to convert old plugins over.
I can't see this meeting much opposition. How much legacy PHP4 code is still out there?
But it *did* tell you how to do it right. Use bcrypt.
I feel like 5.3 was the first PHP that made me no longer embarrassed to tell people I was working a project in PHP. 5.7 might make me downright proud to say it. This one's not nearly as high on my list as return-types, but it's indicative of a wise overall direction from the php people. Where I see a lot of this going is in making PHP a far better language for doing things other than just rendering views, since that's increasingly moving client-side for many applications (via react, angular, ember, etc.), or at least being managed by a templating library (twig, XHP, etc.) We'll need syntax that makes sense for writing our M and C in MVC or M and VM in MVVM, and that's tough to do with all this odd leftover behaviour from the PHP4 days.
I wouldnt consider this spam...
None of my code has a single line of laravel and neither it has anything from youtube. You can say, that it resembles CI.
The RFC [proposal email](http://marc.info/?l=php-internals&amp;m=141635239219979&amp;w=2) shares two utilities that would help people identify where this would break code: 1. [PHP 4 Constructor Finder](https://github.com/TazeTSchnitzel/PHP4_Constructor_Finder) 2. A [rule for PHPMD](http://phpmd.org/rules/naming.html#constructorwithnameasenclosingclass)
Instead of invoking a single method, the same logic could be spread across a series of them. Which is essentially what is happening in a lot of frameworks that return a view model. Here though it could be confined and controlled, see [this example](https://github.com/mvc5/application/tree/master/src/Blog). Please note that I'm just airing my own perspective, there are aspects here that do interest me. Its interesting to note that the `AbstractPayload` class could just as easily be a configuration object (or implement its interface). Putting the the payload_factory into the domain service object is worrying. I think the whole thing could be implemented using an event without having to introduce any new terminology or possibly any new additional layers of abstraction. What it boils down to is you want to be able to do something after the controller has been invoked, which is what events are perfect for. Plus having the `payload_method` configuration outside the object is fundamentally better di, so you could call each in priority sequence and return something that then stops the event propogation. So I'm interested in the logic involved and maybe less of the new terminology.
Yep - this, plus modifying the constructor signature. 
Doesn't matter to me if it stays to goes but it seems like having the old constructor style doesn't actually hurt anything. This is just making a change for the sake of making a change, and won't actually improve much if anything.
It's also not really valid to talk about how much slower bcrypt is, because the speed is adjustable - that's the main strength of the algorithm. It's entirely feasible to turn bcrypt up until a single password takes five seconds to hash - which is exactly the cause of a recent Wordpress Denial of Service vulnerability (ie tying up a processor for five seconds per password, when you can send a hundred logon attempts a second to the server)
http://php.net/manual/en/book.password.php
It kinda depends on how you are using the term "ACL". Generally speaking, an ACL is used on the models.
I know Symfony has a Firewall/Security component: http://symfony.com/doc/current/components/security/firewall.html As for where does the ACL logic live? Well the rules themselves are stored in the Model obviously but implemented as middleware in the router I believe.
it makes a lot of sense to remove it.
The bundle generator generates about 5 lines of code (well a bit more) and it's just boiler plate stuff you would copy/paste and edit otherwise. Generate one and do a diff, really nothing scary going on. Annotations are not magic, they simply map to a class, including using the standard use namespace declarations. We had a guy at work that was against "other magic stuff" and so he didn't use it. One of the main bits of magic he refused to use was namespaces ... I'm happy to discuss these things, but you need to do a bit of homework. You shouldn't just write things off because you don't understand them, you need a much better reason than "magic", as that's all it translates to.
Finally something useful, people have been posting a lot of useless hipster garbage lately.
Thanks, it's the first real open source/stand alone tool I've built. It's fairly hardened and has a decent feature set. I thought I might as well help drive some traffic to it in the off chance someone might need something like this!
Well I might need something like this in the future, i've ran into some pretty spotty API myself.
Don't forget the 20-kilobyte password attempt DoS attack.
In this case it's a chance to simplify the language. Currently there's 2 different ways you can write constructors. As the RFC points out, namespaced classes already don't recognize PHP4 style constructors. This RFC just goes the rest of the way, removing them completely in a change that is easy to automatically detect with existing tools. Not only does this simplify the language from the point of view of PHP users, but also will simplify the core code, making future changes easier and reducing the chance of bugs. There's already an RFC for [default constructors](https://wiki.php.net/rfc/default_ctor) which would further change the behaviour of __construct. I can't see any specific mention in the RFC, but I would suspect this RFC won't change the behaviour of PHP4-style constructors if they're kept (to maintain backwards compatibility), introducing further differences between the constructor styles.
Apart PEAR?
It was almost 20 years we definitely should have known better how to handle passwords. We rolled with plain MD5 or equivalent till (maybe about) 2007, which makes me wonder "how did it happen". I have been thinking this and never couldn't figure it out (kind of scary because it was such a big miscarry). It was April **1995** when @SteveBellovin posted this: http://seclists.org/bugtraq/1995/Apr/143 Basically, "not much" have changed since then (salted and stretched hashes ;) 
It also depends on the queries and tables. There are a lot slight differences between mysql and pgsql (boolean data type comes to mind). It is also generally safe to rely on PDO validation, however there are an edge case with mysql and encoding which can defeat it. See this article for info: http://stackoverflow.com/a/12202218. And finally, never rely on javascript to validate data! Sure by all means use it to provide pretty interfaces, but javascript can be avoided quite easily by: * JS overriding * Using an intercept proxy (like ZAP, Burp etc) * Using tamper data plugin (almost like an intercept proxy) * Crafting the HTTP request by hand * there may be more... 
Thanks for the input guys, it was my first question on Reddit and i'm proud of you guys for being so helpfull.
I understand what you mean with booltypes. As far as I can remember, pgsql also lacks support (or never implemented) VARCHAR. The maximum length of VARCHAR is 65,535 bytes, but so is TEXT. Is there practicle benefits to using VARCHAR over TEXT? I'm fully aware of js overriding, hence I never validate with js, but then again, I never really design forms to be used without js, so the site would break forcing users to use JS. I really need to rethink some design flaws now.
Yeah, that much is true but I recently discovered active records (in Laravel) and they've made life so much simpler but I should have specified that.
This is usually how I temporarily document things but if you can spare a small expense every month (or have the project on github/bitbucket) you can add all your documentation to a wiki. This allows for contributions as well. You can always include the text files for distribution as well.
I know of a php script that polls serial port with the obsolete dio_* functions. These were removed in some version of PHP to be added to PEAR at a later date, but AFAIK that day never happened.
Do you have any working example? Where do you actually check? I believe you don't access ACL classes directly in your models...? do you?
That's confusing. Do you have an example?
Might be worth adding this link to the end of the article: https://github.com/ircmaxell/password_compat
&gt;It's been said that with PDO, you don't need to escape/sanitize data before database queries because PDO does this automatically This isn't true. You do need to sanitize and escape your data depending on the context that data is to be used. What is true is that you don't have to sanitize values against SQL injection when doing parameter binding in a prepared statement. This is because a prepared statement is sent to the database beforehand and precompiled before the values are bound to it (and thus there is no SQL to inject into). PDO does have emulated prepares on by default, so this doesn't happen. Instead it does PDO::quote under the hood. Additionally, you do have to sanitize your values when handling identifiers from user input data since you cannot bind those. Do note that the charsets need to match for PDO::quote to work properly. Also note that both PDO and mysqli have support for prepared statements. 
Some things are getting added and some getting removed. That does not mean that it is getting better... I just don't get it when people go crazy over every new RFC that comes along, as it is some sort of indication that PHP is going to better. No people. It just won't. A million RFC's won't do the language any good **unless the people writing the rfc's and the people implementing them are really good and have really put in serious time and thought into it**. I am not implying that it is not the case here, but just pointing out that *change =/= progress.* EDIT: replaced capitalized letters with bold ones. 
Well, that's one resource that probably doesn't need critical attention! However, not everyone learns direct from the manual - rightly or wrongly, beginner coders have told me the level of detail is intimidating. 
Quick first thoughts: 1. If there's stuff that needs testing in both repos then write tests in both repos. 2. Yes. Adding phpunit to to the require-dev section will make it available when doing composer install (install includes dev dependencies by default). 3. This seems correct to me. If your project repo needs unit testing then you should also add phpunit to it's own require-dev section. So in this case it would be present in both your composer.json files. 
So, for Facebook? :)
Sounds good, but I dislike it, because it makes the assumption that any possible constructor added later would require no arguments. It favors you adding no-argument constructors later, because what if one of your extending classes are relying on default constructor functionality.
&gt; as it is some sort of indication that PHP is going to better. sure.. there are quirks in the language but still php is better than *many* languages out there. &gt; PEOPLE IMPLEMENTING THEM ARE REALLY GOOD AND HAVE REALLY PUT IN SERIOUS TIME AND THOUGHT INTO IT try hhvm 
&gt; php is better than many languages Can you give some examples. Just curious. I am not going to go into an argument or anything, based on your response...
Prepared Statements are awesome.
Thank you so much for clearing this to me. Now I get the idea. I will start to implement this. And might ask few more queries on the way. Thanks. 
Definitely. Yes. 100%.
I think mysqli requires you to bind output variables, which is a pain if you have a lot of columns - and it seems rather unnecessary. I've stuck with PDO. 
If you are interested in database abstraction, look at Propel and Doctrine. Two great ORM projects that will work inside and outside of a framework. 
This is Roy's stance on versions in the URL. &gt; The reason to make a real REST API is to get evolvability … a "v1" is a middle finger to your API customers, indicating RPC/HTTP (not REST) https://twitter.com/fielding/status/376835835670167552
I don't think shouting adds anything helpful here. 
&gt; try hhvm A lot of the RFCs, and some of the existing features we saw in the last couple releases, in PHP are directly aping hhvm/hack. Generators are one that started in hack and made the jump; the 'return type' syntax is just hack's exactly; so many of the 'phpng' engine optimizations are just playing catch-up to hhvm. So yes, plenty of people have either put serious time and thought into it, or are copying those who have put in serious time and thought (the hack team is really strong, and one of the biggest web applications in the world -- facebook -- is dependent on it)
I'd rather see PHP4 constructors removed entirely, but if it is thought it would break a lot of things, it could be set up as a php.ini switch, defaulting to off. People who really need it can switch it back on. 
Start here: http://people.php.net/
dio is in PECL, with "beta" stability. The following works fine for me with PHP 5.6 pecl install dio-beta
http://symfony.com/doc/current/cookbook/security/acl.html
Actually the rules for that are usually stored outside of the models, but attached. http://symfony.com/doc/current/cookbook/security/acl.html
Sorry. Didn't mean it that way. Changed now...
How much data do you expect to be stored with localStorage? it's worth noting that different browser vendors offer different storage caps (between 5-10MB) for localStorage
Why was that style of constructor removed in the first place?
But code that needs to run on the latest version ? Of course recent code can still be written with the PHP4 constructor style, but how widespread is it ? Somebody should scan Github to find out :)
+1 for "useless hipster garbage"
We're talking an associative array that probably would at the very most contain elements and sub-elements in the 100s, I couldn't see it reaching anywhere near even the modest limits most browsers impose, but I could be wrong...
Honestly you should think about your Business, is making this Open Source going to attract pull-requests and community code creation which will save your business time &amp; money. You have spoken about PHP4 and non-PSR.. You could have a couple of security flaws in this framework and releasing the code for the sake of 2 pull-requests a year is not worth the risk to your business. security by obscurity might just save you, and hopefully allow you to fix it yourself. Without PSR, Composer, Unit Tests its never going to attract the kind of developers you really want. You might even be better create a new project on Github with a big todo list.. Version 2 of your framework but Version 1 for the public and create it from the ground up without the PHP4 bits and with PSR, Composer, Unit Tests, PHPSpec. Does the framework have Dependency Injection? Can I use Twig instead of the Smarty? Twig has a native C extension for PHP so its got much better performance... Really though It looks to me like you should keep it in house and work on Version 2 publicly. You can then work on a upgrade path from Version 1 to 2 in private. 
If you're using it 'in lieu of' a server-side database, then you're writing a client-side application, so it's not really a PHP application. I assume what you mean is that most of the logic that requires a fast response is happening client-side, but you need to occasionally sync the localStorage up. If that's what you're looking for, then I think ReactJS would be a perfect fit for what you need to do. Its entire focus is on not trying to make a whole MVC/MVVM, but to simply build the view. The high-level steps will be to move your PHP views into JSX (javascript with XML, so it's actually pretty easy to convert from mixed php/html). Replace those html-rendering PHP views with PHP views that simply `json_encode()` the data you need to grab for your client. React is essentially a state machine, and each 'component' (e.g. the thing that renders the html for a user) has a state stored as a javascript object. Since you're dealing with objects, it's easy to both to JSON.stringify() to send to PHP, or to store in localStorage. You then abstract all your logic to define when things get loaded from PHP, from localStorage, and pushed from localStorage to PHP.
I'm using the Eloquent ORM with Laravel and it's quite beautiful. I've heard of Doctine but never used it and i've never heard of Propel. 
I used version 1, which was pretty good - and one of the Symfony guys took it over I think. http://propelorm.org/
Why not throw specific exceptions for your non-success conditions? It seems like you used strong literals to code around exceptions. Neat concept, though!
holy hell, that's beautiful. I might give it a try on another project this weekend.
I really like it. The code generation approach is another step, but is thought to be faster than the dynamic stuff employed by Doctrine et al. I've been out of the loop for a while, been meaning to see what 2.x offers. Both Propel and Doctrine have very cool 'behaviours', which add in bits of functionality that would otherwise take a while to make. Versionable = converts updates to inserts in a versioned table. NestedSet = easy way to store hierarchical data, etc. 
Yep, fortunately hashing passwords has been a solved problem since 5.5.
The mantra to remember is "filter input, escape output." When you receive data from the user, sanitize and validate it so that it conforms to your rules. That's the "filter input" part. When you send data to the database, do so via bound values in a prepared statement, or call PDO::quote() on it before interpolating into the SQL command. That's the "escape output" part. (As a side note, when you send data to the browser/client/user-agent/whatever, you escape that too, just using htmlspecialchars() other appropriate mechanism.)
One thing to note here (and this is probably more on the checks on the upload side) but you need to be sure what you're uploading doesn't contain any kind of content, like HTML or Javascript, that when outputted via something like readfile would produce a SQL injection. I imagine the intent here is to upload images, but text content should be validated too. Things like readfile are dangerous as well because they output immediately and don't allow you to capture the result without some kind of output buffering. You'd be better off reading the contents of a file into a variable and then using it appropriately from there, especially if you're including the data into another page. 
What about dictating when exactly a parent constructor should fire?
Although it's tempting to do it through an ini setting, that actually isn't all that great. It increases the complexity of core PHP itself, and so makes it harder to maintain. It's also would be of benefit to very few people. It would only help those who wanted to upgrade to PHP 7 but had some legacy code that they didn't want to change...which is probably about 5 people worldwide. 
A lot. A LOT There are a TON of pre-composer projects still out there making money. If the project itself has been rid of PHP4 crap, they may still rely on plugins that they use by manually copying into a plugins/ folder, which means they have no control over it, and probably no incentive to upgrade...
Thanks for the feedback! I really appreciate someone digging into it and giving some good advice. For the most part I try pretty hard to adhere to PSR standards, other than the way I set up my namespaces. The big set of if statements in the example is just to help clearly sort out how to use it as clearly as possible. That's not a production example. I'll definitely address the majority of these asap though!
Yes, all true. Just thinking of a better (but still non-ideal) fall-back position if there's enough opposition to the proposal of removing it entirely. 
Sure anytime, The idea is solid though. I think I might look into the concept myself. I think id change the way its used though, instead of having chaining and multiple callbacks I would have stubborn define an interface lets say StubbornAwareInterface. The user would simply create a class that implements that interface and throw it into a constructor and run. namespace Project\Api\Facebook; use Stubborn\StubbornAwareInterface; class LikeStubborn implements StubbornAwareInterface { public function getRetryNumber() { return 4; } public function getApi(...$params) { // Lets say Facebook::Like works and accepted $apiKey &amp; $userId return call_user_func_array(['Facebook', 'Like'], $params); } } // This would implement the interface. $fbLikeStubborn = new \Project\Api\Facebook\LikeStubborn(); $stubborn = new \Stubborn($fbLikeStubborn); $stubborn-&gt;run($apiKey, $userId); -&gt;run() would then use the methods from the interface, i.e getRetryNumber(), getExceptionHandle()... So per API vendor (facebook, twitter, dropbox) you would have an abstract that implements StubbornAwareInterface, then Per Api call (FacebookLike) you could define a class extend your abstract and override anything thats special from the vendor. Does also mean as you write them for API vendors you can move them about between projects almost, and its easier to have the same implementation in different locations. // Example for the Vendor class LikeStubborn extends FacebookStubborn { /** * I want 6 for the like... */ public function getRetryNumber() { return 6; } } The StubbornAwareInterface would have constants inside it for responses like Retry which the methods could return to trigger things. Thoughts?
Yup, you want test coverage on everything. Nothing more frustrating than trying to track down a bug in your app that was caused by a change in your framework.
&gt; This looks good. I'd suggest making the private methods protected Why? By doing this prematurely they'll no longer be able to refactor the methods without risking to break someone else's code. Rather replace them with a strategy that can be injected.
By the API numbers and extension names I would say the built extensions were for PHP 5.3 and now you are using PHP 5.4. Correct me if I am wrong. To solve it you need to re-compile the extensions using the PHP 5.4 API.
Sure! We use it with Dropbox, Box, Hightail, Copy, and a few others in production and to help with our Integration tests when we are testing our integrations as well.
I never considered using a static class proxy, but now that I've seen it, well, it makes sense. A couple criticism though. public function __call($method, $args) { $this-&gt;classCheck(); $this-&gt;validateMethod($method, $args); return call_user_func_array($this-&gt;getSignature($method), $args); } Checking the class every time a method is called on the proxy seems inefficient. I'm not sure why you chose to make the constructor arguments optional, especially when the only purpose for StaticProxy is to wrap a class, but that's the type of thing you would do in the constructor *once* instead of on every method call. public function getFullyQualifiedClass() { return $this-&gt;namespace ? $this-&gt;namespace . "\\" . $this-&gt;class : $this-&gt;class; } You're building the FQ class name constantly. Specifically in the `classCheck()` and `validateMethod()` calls, which we already know are used in `__call()`. $r = new \ReflectionMethod($this-&gt;getSignature($method)); I'm not sure why you need to use Reflection, but you should be initiating the ReflectionMethod *once* and saving it so you don't need to build it again the next time the same method is called. But really, I think reflection is overkill here. Every time I want to call a method on the proxied class, you're: * Checking that a class has been set. * Building the FQ class name. * Checking if the class exists. * Building the FQ class name (again). * Checking if the method exists. * Building a method signature, which, again, builds a FQ class name. * Creating an instance of ReflectionMethod, which is thrown away. * Checking if the called method actually *is* static. (Does it really matter?) * Validating the arguments being passed to the method. * Building a method signature (again). * *Finally* calling the proxied method. A lot of what you're doing is going to be done by PHP (again) when you *finally* call the proxied method. PHP is going to check if the class exists, if the method exists, and if the arguments you're passing are valid for the method call. Checking all that stuff yourself is kind of redundant. The whole class could probably be rewritten to be less than 20 lines of code. Changes I would make: * Make the constructor arguments non-optional. With optional arguments you're allowing an object to be created that's non-functional. * I don't see the need to separate the class name and namespace. Pass the entire FQ class name to the constructor and `setClass()` method. If you insist on separating them, then add `private $fq_class_name` as a member of `StaticProxy`, and build the FQ class name once. * If you insist on using reflection, save the `ReflectionMethod` instance so it can be used again later. You should have `private $reflected_methods = []` which maps method names to `ReflectionMethod` instances. * I'd probably merge the `Aliaser` class into `StaticProxy`. Document your code!
Right, this is definitely an interesting way to do it and would maybe make your Stubborn calls a bit more re-usable. I'd probably want to try and make this play nicely as an alternative to the existing chaining system as I like being able to see the Stubborn Configuration when I'm calling run to help trace through issues when I'm debugging these APIs. The other thing is typically we define a single Stubborn request for the entire API. While your endpoints might change, or params/configs might change, they are pretty consistent about the messages they send back for a given HTTP Response Code. Here's an example of how we use Stubborn in one case for calling an API. We have a Request and Response class that we wrote which are similar to Symfony's HttpFoundation implementations. So I added a little wrapper class that gives us better HTTP Code handlers and integrates with our Request/Response objects directly so Stubborn will execute/parse the pieces out that it needs behind the scenes. /** * This is a wrapper around curl_exec which implements * proper error logging and retries. * * @param Request $request our predefined API Request * @return mixed This will either return false on failure, or the response on success */ private function stubbornRequest($request) { global $CONFIG; if (isset($this-&gt;stubborn_request)) { return $this-&gt;stubborn_request-&gt;runRequest($request); } $self = $this; $this-&gt;stubborn_request = new StubbornRequest(); $this-&gt;stubborn_request // Successess -&gt;addHandler(array(200, 201), function ($stubborn) use (&amp;$self) { $json = $stubborn-&gt;result()-&gt;json; if (is_array($json) &amp;&amp; array_key_exists('errorStatus', $json)) { if (!$json['errorStatus']['code'] == 'Created') { $self-&gt;setAttemptResultFromResponse($json['errorStatus']['message'], $stubborn-&gt;result()); $stubborn-&gt;retry(); } } $stubborn-&gt;accept(); // Redirects })-&gt;addHandler(array(302), function ($stubborn) use (&amp;$self) { $stubborn-&gt;accept(); // Auth Failures })-&gt;addHandler(array(403,404), function ($stubborn) use (&amp;$self) { $self-&gt;setAttemptResultFromResponse($stubborn-&gt;result()-&gt;http_code, $stubborn-&gt;result()); $stubborn-&gt;retry(); // Hard Server Failures })-&gt;addHandler(array(400,500,502), function ($stubborn) use (&amp;$self) { $self-&gt;setAttemptResultFromResponse($stubborn-&gt;result()-&gt;http_code, $stubborn-&gt;result()); $stubborn-&gt;fail(); }) // Mashery being a POS -&gt;addHandler(array(504), function ($stubborn) use (&amp;$self) { $self-&gt;setAttemptResultFromResponse('Mashery failure, retrying', $stubborn-&gt;result()); $stubborn-&gt;retry(); })-&gt;retries($CONFIG-&gt;connectors-&gt;retries()); return $this-&gt;stubborn_request-&gt;runRequest($request); } If there is interest, I can probably port our version over to Symfony's objects for public consumption so Stubborn can be used this way out of the box. We also tend to interact directly through REST API's as we tend not to trust the PHP SDK implementations of others ;) That might affected how I wrote Stubborn.
To see how to filter a database you can have a look intohttps://github.com/cundd/pos/blob/develop/Tests/Unit/ExampleTest.php
Any sites that dont want my dna and fingerprints and psychological profile to read the article?
Thanks for the input. I could definitely keep track of classes and methods once they're confirmed. I could generate a static list in case there are multiple instances of the proxy floating around. I tend to be explicit and throw exceptions rather than rely on warnings, but I can redraft this to focus on efficiency. I'm not certain whether the aliasing should happen inside the StaticProxy or by using a class whose responsibility is to alias (the Aliaser)
Guess I will not be going to any EU sites that collect cookies. 
Also, I created the Locator, which in retrospect, i don't imagine I would use it. I might ditch the Locator and only use the StaticProxy. edit: class name
I think the way I've outlined would make the stubborn calls 99% reusable really if not 100%. Seeing that code snippet its abit worrying the *$self = $this* section and that global $CONFIG, it doesn't seem a good structure to follow and isn't advised in PHP these days. Im not really sure what StubbornRequest is since I can't see the code, I assume this a layer ontop of Stubborn. &gt; I like being able to see the Stubborn Configuration when I'm calling run to help trace through issues when I'm debugging these APIs.. Well if you opened up the user defined class all the methods the interface was using would be there for you to see. &gt;The other thing is typically we define a single Stubborn request for the entire API. While your endpoints might change, or params/configs might change, they are pretty consistent about the messages they send back for a given HTTP Response Code. Yeah well this is why the user would create a FacebookStubborn and each request would extend it.. It might be they only override the -&gt;run() though.. as you said there is alot thats the same in terms of responses. 
I've always been a big fan of exceptions and validation, but I've been coming around to the idea that the best behavior is standard behavior, and I'm focusing more on the principle of least surprise. If triggering a warning is the standard behavior when calling a method that does not exist, then it would be best to do the same in your `__call()` method. Developers and frameworks already have systems in place to handle the standard behavior. &gt; I'm not certain whether the aliasing should happen inside the StaticProxy or by using a class whose responsibility is to alias Usually it's a good idea to separate responsibilities, but an artist knows when to break the rules. The Aliaser class is literally a wrapper around the `class_alias()` function, which means it doesn't serve much of a purpose other than offering an over-engineered solution to a simple problem. I could write this code: $a = new Aliaser; $a-&gt;register("Acme\Validator"); $s = new StaticProxy("Foo"); Or I could write this code. class_alias('StaticProxy\StaticProxy', "Acme\Validator"); $s = new StaticProxy("Foo"); It's actually easier to avoid using the `Aliaser` class, but having an aliasing method could be convenient. $s = new StaticProxy("Foo"); $s-&gt;registerAlias("Acme\Validator"); Incidentally, if you're using PHP 5.4+, you should consider rewriting your `Aliaser::register()` to use the `::class` shortcut. It makes it easier to refactor your code and find bugs. public function register($name) { class_alias(StaticProxy::class, $name); }
I do some validation with the browser (html5 required, etc) and JS just because it's easy to prevent the form from submitting, highlighting stuff, etc. But yes, definitely always validate server side because you can't trust the client.
I actually had a quick mess around. This is my concept https://github.com/gsdevme/Stubborn doesn't fully work yet
I see your point. My case would be that I would end up defining the aliases separate from the instantiation. I'd like to be able to do both. I'm trying to decide what's the best way to do this. It might make sense just to have both.
I was in this boat when I was working on taxation with regards to New York state with a client's site. The product they sell has different rules regarding how it's taxed (there's two rates, depending upon the base value of the product). Regarding zip codes, our previous system using zip codes to match tax rates didn't work since zip codes don't fit nicely within county lines. This resulting in a lot of work being put into the tax logic to get something relatively accurate. I agree with having a commercial entity managing it since laws change and not many clients (from my experience at least) bother to keep up with the changes.
It's admittedly simplistic, but http://www.phpu.cc/megadiction/ Uses PHP for the course fetching, but otherwise is an offline HTML5 app after that.
[fopen](http://php.net/manual/en/function.fopen.php)
&gt; I don't know whether I like it or not, it seems more getting tight to a framework specific code to me. The mind-mapping to make a controller out of something that is used to be a facade instead (which a controller really is: being a simple interface for a possibly way more complex subsystem). Having a (controller-)action-object that get simple arguments to fulfill an arbitrary task and then return some simple formed information by utilizing previously injected situation-based dependencies is the most basic thing you can get in OOP: class ClassicUserCtrl { /* ... */ public function __construct(UserService $service, CurrentUser $user) { $this-&gt;service = $service; $this-&gt;user = $user; } /* ... */ public function save(array $userData) { $userData['created_by'] = $user-&gt;getId(); $userData['modified_by'] = $user-&gt;getId(); $id = $this-&gt;service-&gt;store($userData); return $id; } /* ... */ } So your routing-information need information how to treat the return-value on the method "save". This could be "display as json", "display via template-engine" or "inject it into a response-object that already knows what to do".
Does it make sense? I mean if performance is critical for your application then PHP is not the right language anyway. On the other hand, there is OPCache for PHP and that makes your code definitely faster and the number of files is not really important here. Am I missing something?
*Edit: /u/YumYumGoldfish's readme example is dealing with arbitrary responses directly from a theoretical API, so most of my comments below don't actually apply, since they're not internal states. But class constants are still useful, so I'll leave this here in case it helps anyone out on other projects.* Nice, this seems quite useful. One quick comment just from reading the readme: I'd use class constants instead of arbitrary strings for the $result values, e.g. if($result == Stubborn::SUCCESS) { } elseif ($result == Stubborn::BACKOFF_NEEDED) { and so on. You'd just declare those in your class: const SUCCESS=0 const BACKOFF_NEEDED=1 ... This fits in more with convention (see, for example, [PDO](http://php.net/manual/en/pdo.constants.php)'s extensive use of this construction), but it also has some concrete benefits: * It's self-documenting: I can see what all the possible return values are just by looking at the constant declarations, without having to sift through the code and find all the returns. * It guards against typos - if you test for "Hard_Faliure_Result" it will never match, but it also won't throw any errors. If I test for Stubborn::HARD_FALIURE, however, I'll get an "undefined constant" notice that will quickly point out my error. * It's marginally more efficient, since we're comparing integers rather than strings. * It follows the principle of using the right tools for the job. You're using strings as a signifier for a few select constant return values, why not use constants, since that's what they're there for? And for backwards compatibility, you could even set them to their current string values. This would probably nullify the marginal speed increase, but this check is unlikely to be a bottleneck: const SUCCESS='Success_Result' const BACKOFF_NEEDED='Backoff_Needed_Result' 
Mostly you need to pay attention and read the error messages. It's telling you that on line 20 you're trying to open a file and that it doesn't exist (or may not be able to access it). (a) you're using a relative path, are you sure that '../books.txt' exists and that the '../' points to what you're expecting? (b) do you have permissions to read it? (and by 'you' i mean the user running the script) (c) are you sure the file actually exists (trying to load_books before having created the file?) Most of the time you can troubleshoot a lot by reading and trying to understand what the error message says. Sometimes they are cryptic but you get the hang of them. 
My thoughts exactly. To me, having first done OOP in Java, __construct() seems like the weird way for it to be. I get that it means one less change when refactoring, but it's a very small change even then.
Okay, so it seems you're the second one to get mislead by the example. The $result is whatever your API call returns, Stubborn doesn't do any sort of intelligence in regards to parsing what out what your call result was. The text is just there as a placeholder. Otherwise, I agree totally with what you're saying.
your links to the packagist packages for carbon and period, are both wrong. Additionally, it wouldn't hurt to link them in the text as opposed to linking them in the references.
&gt; First, can I ask why someone would use mysqli when PDO is so much nicer? That's mostly a newcomers mistake. It's often presumed that rewriting from `mysql_` to `mysqli_` would be simple (just add one letter, aye?) or solve anything. The function parameter shift is usually ignored until it's too late; as is the more long-winded prepared parameter binding. (Only the hybrid imperative and object-wrapped interface is actually a clever implementation detail.) Now mysqli actually provides a few MySQL/MariaDB-specific functionality that PDO hasn't. But hardly anyone utilizes those. In my opinion `mysqli` is just another stopgap API, likely to somewhen see the same fate as the all-procedural `mysql_`.
updates done. thanks for the feedback
You are right. I dont deny your views. Here are my points. * 75%+ of websites run PHP. How many users use cgi-bin to write modules in other languages ? Not talking about facebook-like sites. So whatever PHP provides, we try to get the max out of it in terms of performance. * OPCache is great and it creates superb reports. But how many users can configure OPCache ? It comes by default for PHP 5.5+, but still majority are hanging on 5.3-5.4. * Considering the amount of learning involved in Laravel/Symfony, i wanted to provide an intermediate framework for beginners and intermediate users. Users who use Laravel, wil definately not give an eye to this. I hope you get my intention.
Misusing exceptions like this is abhuge performance hit. Exceptions are very expensive for a number of reasons, e.g. each exceptions carries a backtrace which takes a lot of memory and time to gnerate
Ah, ha. Well, carry on then! I'll leave this up because it's good for people to learn about in case they haven't, but the example makes sense now. Sorry for the confusion :)
The output without executing it is null.
This is just a floating point error that occurs in many languages c: http://ideone.com/Uj97ZO Java: http://ideone.com/BCVhel 
http://ec.europa.eu/taxation_customs/resources/documents/taxation/vat/how_vat_works/rates/vat_rates_en.pdf Wow... fuck Europe... This is a classic example of why the US killed a bill that attempted to impose sales tax collection on eCommerce transactions. It would have made it completely cost-prohibitive for a small start-up retail company to implement an eCommerce solution. "If my business is in California, but I'm drop shipping a book about evolution from a warehouse in New York to a voucher school in New Jersey, charge this amount in taxes. Whereas if I'm shipping a printed newsletter about science, charge this amount..." Fuck. That. No internet sales tax in the US, ever. EVER. ***EVER***
Well I guess just have it be yet another compatabilty setting in php.ini
At least it's consistent between all PHP versions and all HHVM builds... http://3v4l.org/1R3k3 No clue why, tbh.
Can you explain why? 
You just answered your own question: if the book.txt file doesn't exist and you're not allowed to create it, then you need to get the 'database', whatever that is, to create it.
&gt; Considering the amount of learning involved in Laravel If you want a framework that is easy to learn, you might want to change some things. First of all, a lot of documentation needs to be written. I assume that this is the step after you unittested your application. Second of all, I see methods like this: &gt; select($table, $where = "", $bind = "", $fields = "*", $groupby = "", $having = "", $orderby = "", $limit = "") Nobody will be able to remember the exact sequence of parameters. This means that every time the method is used, the developer needs to read the documentation. 
Computers store their numbers in binary format. The stored binary numbers can only be finite, which means that they have to be round off. In decimal numbers the same thing can occur. It is impossible to write 1/3 in decimal representation. You will end up with 0.3333333333, which is about 1/3 bit still is a bit less. The same happens in this case. Assuming that we use a 32 bit binary representation: 0.1 = 00111101 11001100 11001100 11001101 10011001 10011001 10011001 10011010 (=1.00000001490116119384765625E-1) 0.7 = 00111111 11100110 01100110 01100110 01100110 01100110 01100110 01100110 (=6.99999988079071044921875E-1) If we add those numbers we get 0.79999998956, multiplying this with 10 gives us 7.9999998956. When you cast a floating point to an integer like this, it will round towards zero. This means that 7.9999998956 will be rounded towards 7.
That's pretty interesting. I know some clients that could make good use of this. I can't seem to find a way to turn off the console window though.
In a small test I managed to insert and read 10.000 documents in 43 seconds on a Mid 2009 17" MacBook Pro (with SSD and Memory upgrades). No scientific benchmark, but one may get an idea
the phpinfo() within a window is hardly an "application". show me an IM application, or a todo list manager -- then I might start believing the hype.
So, in short, if you're trying to load_books before you have the file it is going to file. As ramse pointed out you need to check if the file exists and then you can decide what to do about it. You have many options there, you can wrap file in a try/catch block, you can use file_exists to check existence and either create the file (empty) at that moment or just skip it and return and empty array. Still, I'm gonna stress out the importance of actually reading the error messages. You get an error on line 20, super explicit, "I am failing because i cannot open this file because it doesn't exist", that's a pointer that php doesn't like to be told to open a file which doesn't exists, which should've made think of alternative ways (like maybe i can check if the file exists and if it doesn't don't try to open it OR create it OR wrap the statement into something which can 'catch' the error and do something about it). After you run out of ideas you google like crazy of ask for help. Not trying to be a jerk or pedantic, but the first step to eventually be a decent programmer starts by reading and trying to understand what the error messages mean.
Perfect explanation. Thank you. So a work around to this would be to use round (in php) then cast to an integer, I would assume? 
Looks cool but seems to be missing an api to do many important things, such as system tray integration, advanced windows control, icons, etc. Compared to the cross platform nodejs options it is very limiting.
It's like I'm really on Facebook.
This all makes sense to me except the part where it rounds down. Any clue as to why it does that instead of rounding to the closest integer? 
That's what I'm feeling looking at it. There's a few of these already.
That has absolutely nothing to do with the topic at hand.
Those have nothing to do with windowing. You can just as easily write those for the web.
I get exactly your point. I would like to see more *tiny* frameworks not depending on the huge elephants.
Basically because type casting doesn't round, it just hacks off the decimals.
Yes. It seems like a standalone server + WebKit (perhaps)..?
/u/__constructor, what are some better ones..? I knew they had this for Node.js but didn't know about PHP.
I can easily call: &lt;?php phpinfo(); ?&gt; from the web too .... what's your point. I'm saying create a real application then demo that as a GUI app. For instance create a minesweeper clone.
I second that. Let's take a nice look at that md5 hashed passwords user table too.
Maybe I missed this first (or previous) time around - but two sets of functions to_*() and try_*() with the former throwing exceptions. This is nice.
Regardless of what your personal reasons are, the biggest reason to migrate off 5.3 is because it's been sunset and has reached its [end of life](http://php.net/archive/2014.php#id2014-08-14-1). Some package maintainers might back-port security patches in the future, but this isn't a guarantee so continued usage of 5.3 isn't recommended.
Looked at their support forum, it's IE.
People have thought less is more amazing.
Full on nopetown.
6, I hope...
Meh, I don't exactly *love* that. I don't know, it could be cool. I don't know if you need a lot more than HTML5 + JavaScript for a web app, if you can embed a decent browser. Looks interesting nonetheless.
Looks like 8+.
That's how I feel about things. If it can't be done in HTML5+JS, it either needs to be on a server or in a single-user-targeted language.
Mh? I thought you were kidding, how can they have IE cross-platform? The shitness is proprietary...
That's what the developer claims, anyways.
Weird. :-)
I'm on Mac, accessing to a site with .htaccess password, it dont memorize the access, each time i click a link it ask me the password again
Is `try*` a widely-used convention for methods you expect to throw an exception on failure? For example, if I have a `Validator` class, it might have two methods, `isValid(array $input)` and `assertValid(array $input)`. The former returns a boolean and the latter throws an exception instead of returning false. For my purposes, I find that convention pretty reasonable, but if there's a more widely-accepted one I'd have no problem using it instead.
Same boat. I can do everything I need so quickly with the oldschool date/time functions, I've never bothered to learn the DateTime object. :-/ shame on me
seriously... PHP for a desktop application? This kind of thing is making me depressed real bad. There's QT for a cross-platform desktop GUI desktop framework. If there's a job interview, would you really include this in your resume ... developing a desktop application using PHP?
My comment addresses this: If you dictate when the parent constructor fires you can run arbitrary code in your constructor before the parent constructor fires. This means that you can call/access members of the parent before its constructor runs, i.e. you can interact with the class before its invariants are established. They're called "*invariants*" for a reason -- if you can interact with the object (i.e. the object "*exists*" in some meaningful/observable manner), they should (in a sane universe) hold. As I said, C++ has the correct idea: The parent(s) is/are automatically constructed for you before the child's constructor runs.
I think this is great, especially for deploying tools that yo udon't want to host because of bandwidth requirements. I might give this a try with my old bandcamp downloader I wrote since it uses curl multi-get as well as zipping, although I had the zipping down through exec which I will have to move over. 
Depends on the app :-P
Hey, I recognize that sandboxing library! I wrote it :) The short answer to why this happens is because 0.7 as a float is internally represented as a value approximating 0.69999999. . .(see [double point precision floats](http://en.wikipedia.org/wiki/Double-precision_floating-point_format) for why) which then has 0.1 added to it, which becomes 0.79999999. . ., which then gets multiplied by 10 to become 7.9999999. . ., which is then cast to an integer which simply cuts off every thing after the decimal and evaluates to 7. Removing the cast will cause the value to be correctly evaluated to 8.
Why should someone use php for a desktop application?
There are some narrow circumstances when it makes perfect sense... mostly if you want an app that behaves kind of like a website (or already is a website) but you want it to function on a local computer rather than over the internet. But there are lots of other kinds of apps that this would be terrible for.
There's quite a lot of HTML errors - and `&lt;center&gt;` would be better in CSS. Validate at the W3C service. 
Hmm, registering gives this: &gt; .: Important Message &gt; OOOPS we seem to have made a mistake: Please open a support ticket, giving details of what you were try to do. &gt; Thanks, Admin &gt; Fatal error: Call to undefined function event_add() in /home/mafiama/public_html/class/class_db_mysql.php on line 96
I think it might have been the apostrophe in the email that did it (chuckle). 
no, difference between varchar and text afaik on pgsql, but other dbms there could be a difference. So why does pgsql lack support for it?
I'm not saying their NOT better, it's just that unixtimes work so well for everything I've ever needed. Plus you don't incur the overhead of creating an object just to track a datetime.
The RFC seems to disagree with you...
IE 11 ain't bad. Rendering, anyway.
if i recall a conversation correctly, its because pgsql is more standards-complient whereas mysql does its own thing on top of standards just to have nicies for devs
That's essentially what Adobe Air was, more or less
Is it IE? Then it's bad.
I am currently reading [this](http://www.amazon.co.uk/PHP-Absolute-Beginners-Jason-Lengstorf/dp/1430268158/ref=sr_1_3?ie=UTF8&amp;qid=1416448379&amp;sr=8-3&amp;keywords=php+for+beginners) which has been OK so far. I previously read [this](http://www.amazon.co.uk/Learning-MySQL-JavaScript-HTML5-Step/dp/1491949465/ref=pd_sim_sbs_b_2?ie=UTF8&amp;refRID=1X8PNC88C660531AY3ZD) O'Reilly book which I found helpful. It does cover some stuff you already know but I found it handy when explaining things like sanitising and salting etc. Plus it goes about making a basic social site.
There are most likely optimizations you can do to drastically speed up your application without worrying about instance size. Does that 250ms include network transmission to/from the client or is that 250ms time-to-first-byte?
Being able to basically hand out a webapp as a standalone application, is a common desire over the years. Although people have rather gotten used to it, simply saying "get &lt;browser de jour&gt; and go to &lt;url&gt;" has been sufficient, but less than optimal in some cases. This is technically interesting by reducing dependencies and hopefully hiding the source. I'd love to see someone analyze this from a security perspective.
&gt; I'm saying create a real application then demo that as a GUI app That's what they did. The project doesn't claim any special GUI properties, other than running in an application context. I *believe* it's still a webserver and html rendering engine within the application. The GUI part is just being able to run as an application.
Holy Cthulhu table layout and center tag. For sure it'll work in IE7 Edit. I'll be more constructive now. I don't care about how great or not great the site look. You should learn modern HTML. Forget about using tables to align stuff. Form elements need the label tag with a for attribute pointing to the id of the input fields. Never, EVER use images of text instead of actual text. If you want text to look different use CSS. If you want a fancy font then too bad. Better readable than fancy. Honestly your HTML looks like you used a software like Dreamweaver or anything with WYSIWYG editor (creating the interface with drag and drop and just filling some values like class names etc.) Forget that. Don't do that. It's never good and never a good idea.
&gt; Plus you don't incur the overhead of creating an object just to track a datetime. I threw together a quick experiment at phpfiddle.org and the difference in speed over 10K iterations (creating a new `DateTime` instance and calling `format()` vs. just calling `date()`) was 35 milliseconds. There are about a million things to optimize before I would ever start caring about that.
i have written the documentation. It's here- eaglehorn.org Yea you are right about the select query. I will make it much more easier. DO you have any thoughts? 
Was more wondering cpu or memory intensive class of ec2. 250ms actually time spent in php (according to Newrelic). Inspector is giving me: 154ms blocking 153ms connecting 433ms waiting 13ms receiving Optimizing hasn't really been a thought yet, we've got an amazing cache layer that's hitting about 50ms total. I'm a programmer turned DevOps somehow, so any advice, resources I'd love to learn more and get our site running faster.
Reasons to use localStorage over DB: * The information, in its shape or content, has no value for the website but only to the user. * Can be accessed offline and faster locally by Javascript so you can do cool stuff with it without bothering the DB **How and why I used sessionStorage in my last project** We had a huge multiple step, multiple pages form and every field change would trigger a calculation of their value (think like a e-commerce cart where adding items, removing them and changing their price affect the total and taxes. That's not what I did but it's close). Then I had to not only send the total, but WHAT field was checked. My form consistent almost entirely of radio buttons. What I did? Created a sessionStorage (mostly because I didn't want the data to be permanent) and on submit it would just take all the values in sessionStorage with a specific prefix and make a JSON to POST. In my case, the values and everything was validated twice. Front end (the total value had to respect a minimum) and back end (minimum and if the values of the selected fields match what we have on our side so if a smartass decided to change the value of option A from 35 to 40, we knew about it). So if we take the Cookie Clicker example, it's literally a HTML5+Javascript game. There's no need for PHP at all in that case. Using localstorage is a cool idea only if you don't care that users could open their browser tool and edit the values to "cheat" the game. It's actually a way to cheat at Candy Box (another cool HTML5 game like that)
That would be so terrible. I'd prefer to leave this for a major version that breaks backwards compatibility
So they said that they can give me the DLL however I want. Im not sure what that means, but are there any particular requirements I should tell them in order to make this easy to integrate with PHP's COM class?
I have no idea. What is the difference? Im not familiar with .NET so what do you think would be the easiest path to get it working with PHP? Does the DLL need to be configured in some way?
[Thrust](https://github.com/breach/thrust/) with some PHP bindings would be far better.
&gt; So your routing-information need information how to treat the return-value on the method "save" So basically then you are saying the front controller should be able to handle it. Here I am saying it is the responsibility of the Responder. So in responder you can look the content type and respond it. Example public function display() { if ($this-&gt;negotiateMediaType()) { $content_type = $this-&gt;response-&gt;content-&gt;getType(); if ($content_type) { $view .= $this-&gt;available[$content_type]; } $this-&gt;renderView('browse', 'layout'); } }
The naming is partly inspired by C#'s `.Parse` and `.TryParse` methods for some types, actually.
It's not something you missed, it's something that was changed after a bit of discussion. I'd been trying to figure out whether returning FALSE, returning NULL or returning an exception was best. Neither really seemed optimal, and siding with just one or the other would upset a bunch of people. I ultimately decided that having two different functions works best. Two different use cases (or styles of usage), two different functions. Just having functions that return NULL neglects one use case, just having functions that throw exception neglects the other use case, and having hybrids that throw exceptions unless they have a second argument leads to ugliness like `to_int($foo, NULL) === NULL` and a messy type signature.
What changes in 5.4/5.5/5.6 are stopping you from moving off 5.3?
All depends on your needs and where your bottlenecks are. If your application is quite heavy per request you might want to load balance over larger instances, if it's quite light per request but you have a lot of them you might consider balancing over more smaller instances. Take a look at what is holding up your application, consider trying New Relic for a bit (they have a free version which is mostly useless, but their 14 day free trial can give you some good insight).
This just feels wrong...
The best thing about DOMDocument is that, well, because it's the DOM, it has the same API that you're familiar with from JS and other languages.
Heh, I did some refreshing with form submissions. I maxed out your MySQL requests. ;)
Yeah i am using phpsandbox written by you it is the best one out there . Thanks for that .
I was thinking of dropping the users table when I got to it earlier, but I decided that that move would be too harsh.
Some of it looks like some of Laravel, and the way you load views looks like a tutorial from YouTube.
Meh, I was noob at the time (like most) and I found it fine. Not sure how it reads now, but I could just go from variables to deep OOP by clicking an arrow.
Yup. Oh, and no md5 (since it's a hash... and a dead one).
I use PHP for some windows command line scripts. I don't have to deal with compiling or learning a new language, pretty much everything I need PHP can do. I've been wanting to do something with a GUI, but I don't need to make an advanced windowed interface. Simply displaying my script in a self-contained browser window is something I've been looking for.
&gt; Once you understand how they work... Not getting you. May be if you show an example, say, Can you show me how to find the first Tuesday that comes after two months from today using your method?
What I would like the ADR pattern to provide is a traversable set of callable types. During its traversal the ADR handler will determine what the next callable to use is and will return it so that the generator can either call it or create it and then call it. This would allow callables to be skipped or jump to a different point in the queue depending on its state? This would allow a traversable event with named argument support 'controller' =&gt; new ControllerAction([ function(array $args = []) { return new Model(null, ['args' =&gt; $args]); //$args are the named args }, function(Model $model) { $model['__CONTROLLER__'] = __FUNCTION__; //demo check that is called.. return $model; }, function(Model $model, Response $response) { $model[$model::TEMPLATE] = 'home'; return $model; //or $response-&gt;setContent($response); return $response; }, ]), Edit: If one of the functions returns a `Response` the traversal is stopped. 
I'm a 23 year old php programmer. I've been using php for around 5 years. 2 years in the object-orientated aspect and I've recently (in the last 6 months) started using Laravel. I'm from Northern Ireland and would like to contribute back to the open-source world after taking from it for so long.
I was thinking about this question at work, particularly your comment that you're not supposed to create the text file. This is actually a very important concept in object oriented programming. I'm not a brilliant developer but I've been programming for about twenty years, and the first thing that went through my mind when I read [this comment](http://www.reddit.com/r/PHP/comments/2mshro/i_am_getting_an_error_in_my_php_code_and_i_cant/cm78f29) was: "not only is he not supposed to be caring about the books.txt file, **he's supposed to not care about it**". First of all, in the real world, the whole point of using a database is that you can deal with tables and rows and columns and not give a single flying fuck about how they are retrieved and stored. This takes a huge pile of micromanagement out of your hands and puts it into the hands of the developers of MySQL, Oracle, SQLite, or whatever you'll be using. Secondly, and most importantly, if you use your professor's database class to access the book data, you can swap it out for a real database class you write yourself, and you won't have to change any other code. That's because your professor's database class does one thing, one thing only, and no other code of yours does that thing. As an example to illustrate my point: the other day, I made a small utility for a client that allows them to get various statistics about their product. I wasn't told what sort of output they wanted but I knew it would have to be easily opened by Microsoft Excel (you learn this very quickly as a developer). But I wanted to test it without having to keep opening Excel and downloading files. So I put *all* of the formatting and output code in a single class that outputs HTML. When the time came, I was easily able to write a CSV output class, so changing the output to CSV instead of HTML was a breeze. Actually, I easily added a menu that let the client choose between HTML and CSV, but that's a different story. Anyway, all of this was possible because the other code didn't care about how the data was formatted. I had classes that retrieved data, I had classes that output data, and I had some code that got data and passed it to an output class; this code didn't know or care which class it was, just that it had a method to get data, or to output data. It's hard to appreciate from something as small as a class assignment, but in the real world this sort of power is extremely valuable, and you'll really find out what I mean as soon as you get out of school and your boss hands you a shitty legacy project: object oriented programmning is a great way to allow you to change significant aspects of your application without having to rewrite 50-100% of your PHP files.
I would recommend you to read this articles http://fabien.potencier.org/article/59/create-your-own-framework-on-top-of-the-symfony2-components-part-10
See I was hoping for some kind of PHP extension that would wrap around wxWidgets/Qt/GTK+ API, or some other graphical framework and allow you to build GUI applications with PHP.... Instead I got web browser with a built in PHP server... :-/
This is why you never use floats for dealing with money. Always store and calculate values in cents/pence (or, even better, use a [money Value Object](https://github.com/sebastianbergmann/money) that does that for you). If you do need to use floats, you can use the [GMP functions](http://php.net/manual/en/ref.gmp.php) to get better precision.
Yes its truncating, not rounding when you cast :)
I can think of zero uncontrived scenarios where Unix time would be a better choice than `DateTime` for working with date values. Could you give an example?
I usually start from the application endpoints (web endpoints, console endpoints, whatever) and navigate through the code (using an IDE like Netbeans helps a lot). I also like to debug the code line by line with Xdebug, to follow the execution stack. In the end it's about trying to get an idea of the application's architecture, the different bits and pieces and how they work together.
The first thing I usually do, which helps to understand the global workflow, is to start with the `index.php` (or whatever the front controller is) and follow the flow. Ignore details and hacks as you go along, just focus on the main logic. Also run the application, start with the homepage for example and try to understand how it is rendered (again, ignoring the details). As it has been said in other comments, every dev (even senior devs) need time with new codebases, especially if it's a homemade framework. Make yourself comfortable with the idea that it will take some time and make that clear to your boss if he/she forgets that after a few weeks.
I like that you assume i dont understand them, just because i disagree and write them off. Annotations are written as PHPDoc, it is not a language feature and therefor i consider them Magic. All the things that Annotations achieve can be done in some other way. Expression Language was a subset of twig that got extracted, it allows you do write "code" which is evaluated. Tie this together with Annotations (which is done a fair bit in Symfony) you have even more magic and code scattered in different files that cannot directly be tested, or perform static code analysis on it (or so far neither Scrutinizer and Blackfire supports this). Further. You need to cache the evaluated code if you dont want to have a performance hit (as opcache cannot cache the opcodes), but the integration in different Symfony components does not allow you to do so. SensioGeneratorBundles generates 6 files (https://github.com/sensiolabs/SensioGeneratorBundle/blob/master/Generator/BundleGenerator.php#L61), creates 6 directories or static files. I would say that it is a fair bit more than "... about 5 lines of code.." Me doing my homework? you should do yours before accusing me of not knowing what i am talking about ( ;) )
&gt; Some of it looks like some of Laravel, and the way you load views looks like a tutorial from YouTube. On what basis are you saying this ? He said it resembles CI. And yes it resembles CI, they way he is loading. But the internal codes are completely different. Because he has put everything inside src/ and he has folders like /start, /public , you say it looks like laravel. Did you read his previous posts ?
We have been reviewing his framework from the beginning and he has done various major changes based on suggestions from the community. Your comment sounds like he has copied the code. Please !
This. Senior Devs aren't magicians who arrive at a codebase, unfurl the scripts of PHP code, put their palm forward and absorb all the code and thus gain full understanding. The only difference between a Senior and Junior arriving at the scene of a criminal codebase is the Senior dev has done this countless times before and has honed his or her skill at finding the best way to understand what's going on. Having said that, if you don't have an IDE or debugger, then this would be your first step.
Really your best bet is to find something you want to use yourself, something like a CMS that you use on all your personal sites. You'll find enthusiasm for working on an open source project will slowly drop if you have no vested interest for yourself. The problem does come when trying to find one that fits the needs of your site and I guess being new enough that you can easily contribute without getting contributions swamped by other people. I got lucky in that I started using a CMS called WolfCMS for all personal sites a few years back when it was still a fairly new fork of another CMS, so I contributed quite a bit to it. Sadly as I mentioned above though, I stopped using it so had no interest really in carrying on with all the contributions and moved onto other things that I'd much rather put my time into. May seem slightly selfish approach but at the end of the day you do this in your own time and most likely for no payment so you'll want to do something that you want to do and will have a use for.
That's even worse. Then you have to optimise for all browsers, including all future ones, because a you can't update a desktop app instantly when browsers change as you can with a website. It'd actually be better to lock it to IE8.
if you're confused about the architecture, don't. It means you have n' got the skills and will reinvent a square wheel. Instead study the code of Slim framework. Or Aura http://auraphp.com/. (and...stay away from Symfony). 
Why not try booting up a few different instance types and find out? On demand instances are really cheap for a few hours of testing. If you are already running 2 behind an ELB then adding another instance should be easy. Maybe even disable one of the existing ones. Since you're running New Relic, comparing performance is really easy - you just need to see which instance is handling the most requests in the shortest amount of time!
One can still hope for that day to come! :D
I think so. It is like "escaping" the langage. besides it prevents encryption, minification.. 
Are hobbits the only php programmers? Edit: I am a hobbit and I resent being down voted for asking an honest question.
Let's break down the line of code you posted into its constituent parts, analyse each one, and then hopefully stitch them together in such a way that it makes sense. I'm not sure what the value of $info is, so I can't tell you what the exact output will be. You're correct, $info is a variable, most likely a string. The curly braces denote a string offset, in this case meaning "give me the 26th character from the string" (the position starts from 0 not 1). $info = 'ABCDEFABCDEFABCDEFABCDEFABCDEF'; var_dump($info{25}); // string(B) The hexdec function converts a hexadecimal (base-16) number to a decimal (base-10) number. $info = 'ABCDEFABCDEFABCDEFABCDEFABCDEF'; var_dump(hexdec($info{25})); // int(11), as B in hexadecimal == 11 in decimal The doubleval() function converts whatever it is passed to a float (eg a decimal number) – it's actually an alias of the more common floatval() function. $info = 'ABCDEFABCDEFABCDEFABCDEFABCDEF'; var_dump(doubleval(hexdec($info{25}))); // float(11) The percentage sign is known as the modulus operator, and returns the remainder when the left operand (11) is divided by the right operand (8). $info = 'ABCDEFABCDEFABCDEFABCDEFABCDEF'; var_dump(doubleval(hexdec($info{25})) % 8); // int(3), because 11/8 is 1 remainder 3 You're right, it could easily be an attempt at obfuscation, but without knowing the value of $info or the overall purpose of the script that's just a guess. Hope this helps!
So... $info is an array. Using curly brackets is the way to get array's element with index 25. Usually square brackets are used for this purpose (e.g. $array['index']) and TBH it's the first time I see curly brackets in actual code... but it works. hexdec() converts hexadecimal numer to decimal. [More](http://php.net/hexdec) doubleval() is an alias of floatval() which converts variable to float type. [More](http://php.net/manual/en/function.floatval.php) Lastly, % is an operator which performs modulo division. &gt; The impression I get is someone is trying to obfuscate something. It's hard to say. Everything depends on the context, content of $info and further usage of $var.
Yep, exactly this. No matter the complexity of the code, or the size, there's always an entry point. That's where the whole framework starts, it might's well be where a person who wants to learn the framework starts.
The missing .htaccess is a pain for many, but for anyone who has control of the server that really isn't much of an issue. What this really comes down to is "Not every project should use nginx for everything all the time." which is of course completely right. 
No problem, I'm glad to see it is serving its purpose :)
&gt; Alas, as time goes by, this becomes more of a hindrance than it adds value. PHP developers aren't as flexible anymore, as changes need to go through a sysadmin that needs to modify the configs -- assuming the PHP dev doesn't manage the server himself. And the novelty soon wears of, it all becomes an annoyance. It slows things down. That's the bit where I think the author's vision of "a movement of slowly backing down from Nginx" falters. Infrastructure is code, and should be developed and managed as such. If your sysadmin doesn't accept pull requests on the configuration management repo, there's not much AllowOverride is going to get you in the long run - you'd be better off finding somewhere where the infrastructure isn't locked away in a silo. And if your sysadmin isn't using configuration management... Who's going to configure an FPM pool when you need another of those? You're back to "changes need to go through a sysadmin", right? Puppet and Chef are pretty easy-to-learn DSLs. Or be trendy and go Ansible or Salt.
I've no strong views on it, but what's up with Symfony? 
I'm inclined to try Laravel, but the [author's outburst on Twitter](http://paul-m-jones.com/archives/6051) (regarding the technical qualities of his work) rather put me off. I've seen it said it's essentially a one-man band project too. FWIW I've no axe to grind. My next project will be Slim, but curious to try both Symfony2 and Laravel. 
No it's not. I know actionscript 3 and I've produced multiple Air apps. air has access to local file systems and a full api for desktop apps. Yes, it is a desktop wrapper around flash player, but it's also more than that. 
Hi caveman! How is 2010?
That wasn't an outburst, it was one side of a conversation being joined together, which makes it look like some sort of rant. I mean, if you have issues with Laravel that's totally fine, but they should be based on its merits, not fictions.
I'm not really sure what's the point. There is a tool for every job, and PHP is a great tool for the web; PHP was built to work with a client/server infrastructure. The web is stateless. That's why we have things like sessions. Desktop apps can leverage state easier without leveraging things like Sessions. Also, PHP leaks memory all over the place with long running processes. Am I in the minority for thinking this is a bad tool for the job? I'd be happy if someone talked me out of it.
Thanks for your thoughts. &gt; if you have issues with Laravel As I said: I've no axe to grind. &gt; it was one side of a conversation being joined together, which makes it look like some sort of rant As far as I know they were posted in quick succession on Twitter, and given the manner in which these views were expressed, it does seem (from my seat, at any rate) that things could have been handled more diplomatically. I don't know the individual concerned, but anyone interested in promoting framework adoption needs to know that adoptees are interested in professionalism and stability. In any project, if the core dev(s) look like they are going to pick fights with competing projects, or make rash decisions that might adversely affect development, people will worry about that. It is possible that things were said by others to prompt the above, but nevertheless, project leaders need to rise above it. 
&gt; Would this add to confusion? Yes. &gt; Would such ban be wrong, given that the current casting functions would still be valid most of the time (and therefore not target for removal)? For the majority of casts I personally have to write, `(int)` is strictly less correct than `try_int()`. &gt; Should we be able to choose how `(int)` behaves? No. &gt; Should `to_*` and `try_*` be implemented in userland instead? I don't believe they can be (all existing casting/validation functions are broken in different, strange ways, but they may have enough overlap to make it possible). Even if they can be, *any* user-facing application that expects numeric input needs these functions.
It's periodicity: $string = range('a', 'z'); $period = 3; foreach ($string as $char) printf("%s: %d\n", $char, ord($char) % $period ); 
I just found something called wxPHP which looks promising.
Oh, so they're still testing them I guess..?
To be honest I have never seen a html include tag work. From what I read on the link you provided, you can accomplish the same thing with just a quick php script in place of the html include. Example: &lt;html&gt; &lt;head&gt;&lt;title&gt;admin&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;BEFORE&lt;/h1&gt; &lt;?php include_once("test.htm"); ?&gt; &lt;h1&gt;AFTER&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; or: &lt;html&gt; &lt;head&gt;&lt;title&gt;admin&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;BEFORE&lt;/h1&gt; &lt;?php require_once("test.htm"); ?&gt; &lt;h1&gt;AFTER&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; This will do the exact same thing that the Fat Free is trying to do. Of course this is as long as the page it self is a .php.
the curly brackets are used to get a single character out of a string. (I think, I remember reading it a long while back, but I don't remember what PHP version they introduced this in). hexdec converts whatever is at index 25 to a integer, so it must be hex 0-F, then it gets cast to a float.
I am also working on a small project(WP plugin for a mmo inventory manager) I had thought about using client side storage, but decided against it. As mrjinpengyou has mentioned, there is the cheat method. It is possible some one that knows code well enough could potentially put some malicious code in their client side and then harm the website in some way. Just my opinion. It also seemed easier to secure and use the db. Once my code is written, there was very little maintenance to it.
Don't know why you were downvoted, it's completely correct, just not as verbose as the top answer. `$x{$y}` is really just an old alias for `$x[$y]` which can be used for array items as well as string offsets.
I came here to say that the days of the PHP developer working in isolation away from the server configuration are pretty much over forever, and I'm not sure the isolation the author talks about ever really existed in the first place. Not unless you were using shared hosting. Whether to use Apache or Nginx seems like a mute argument these days anyway, because cloud hosting has exploded the number of options we have to consider. Should we use AWS or Rackspace? Should we use plain EC2 instances, or use Elastic Beanstalk? Should we use Docker containers, or another type of container and deployment system? Are we going to use stock PHP or HHVM? How we deploy our software is going to have a small impact on how we write it. I don't think it's possible for PHP devs these days to completely divorce themselves from sysadmin duties. You simply have to have some understanding of the ecosystem your software runs in.
Not moving for brackets, brackets for moving. Longer support for previous versions would be helpful, I'll give you that. But it's not the case, so we have to deal with it.
Edit: I got offset all wrong
Thanks for clearing that up - had to double take after reading over the RFC again! :) 
it's a history quiz.
Some really strange reasoning's in here as to why the "DevOps" movement came to be. Probably a little over simplified from a PHP perspective. The whole .htaccess thing, even Apache acknowledges its a performance barrier since every request has to sweep the requested and all parent directories looking for .htaccess files and if found parse/override child rules - the whole system - whilst handy for "FTP development" is inefficient. For any site that's doing anything serious - your web app config will be in the web servers config Apache/Nginx or otherwise - else you are taking a performance hit. 
Now that's what I call useful!
Yeah, I think, because my idea requires two way communication using localStorage as the model, implementing this in MVC is tricky - the page and JS needs to be loaded at the right time to make the requests, so it's an architectural nightmare as far as I can see right now. I think $_SESSION is really the sensible alternative in this case, but it was worth a punt...
I didn't necessarily mean "if you have an agenda" of some kind. I just meant that if you had legitimate criticisms. Which would be totally fair. They WERE posted in quick succession on Twitter, but as part of a conversation. And yes, of course they could be handled more diplomatically, but... you know... it's Twitter. Taylor isn't particularly good at handling this sort of stuff. He's put a shitload of time and effort into Laravel, and he's rightly proud of it. So yeah, sometimes people get to him. &gt; In any project, if the core dev(s) look like they are going to pick fights with competing projects Sorry, but I have to pull you up on this. Otwell doesn't pick fights. He's normally very friendly and outgoing. This particular guy, PM Jones, has an agenda that involves continually sniping at Laravel in either underhanded or... overhanded.... ways. Most often it's through blog posts that just happen to be condemning a technique or approach (or even word) that just happens to be used by Laravel. It's obnoxious and has been persistent for some time. Even when right, Jones is such an absolute cock about it that even acknowledgement of the point becomes impossible. To refer to this long history of one-way antagonisation as "picking fights" is a woeful misunderstanding. &gt; nevertheless, project leaders need to rise above it. And that is, in general, what happens. 
mysql_ functions won't work as you're using mysqli. Tbh, what I would do is before your while loop, I would add in *var_dump(mysqli_fetch($statement))* and examine the data being returned. You're most likely to find out exactly why that isn't working. Remember to remove the var_dump() though. * Tip: If you're using Chrome, try the var_dumpling() extension. Formats var_dump output to make it readable.
What I personally like a query builders. They however are not very simple anymore (Although quite simple to learn). A possible solution would be to require one array with arguments. In that case you can call a query with: ["where" =&gt; "1=1", "limit" =&gt; 10] In this case you do not need to set and remember the order of bind, fields, groupby, having and orderby. This gives neater code, and is way easier to remember
&gt; I'm a programmer turned DevOps somehow You are a programmer who is also a sysadmin because of circumstances. The term "DevOps" means collaboration between developers and operations, not a developer who is also a sysadmin.
Things like PHP Fatal error: Cannot re-assign auto-global variable _FILES. I don't have have the list with me at the moment.
I'd honestly ask your meetup group if they'd be interested in that sort of thing.
&gt; mostly if you want an app that behaves kind of like a website (or already is a website) but you want it to function on a local computer rather than over the internet Choose according to your needs: HTML5 offline application, node-webkit, python. Don't try to push the limits of a technology just because you like that technology. You will end up in a fiasco. Use the right tool for the job and move on.
There is a similar lib (Dispatcher) that serves a similar purpose. However, this implementation has some key differences - probably the biggest of which is that it is not tied to scheduling Laravel Artisan commands. It can schedule any terminal command you wish. It can also schedule calls to any class or a Closure. It also has some helpers for piping output to files and e-mailing output to developers. Some also might consider it a simpler implementation as it does not require extending any special class or implementing any particular interface on your classes.
Someone said "micro optimization" ?
&gt; [...] First, can I ask why someone would use mysqli when PDO is so much nicer? I mena, think this way. You spend months working on a project and push it out live but you've used mysqli. About 2 years down the line, you want to use postgresql instead, there's a lot of recoding because you locked yourself in, whereas with PDO, you can simply change new PDO("mysql:...") to new PDO("pgsql:...") You can read my opinion regarding that statement [in this G+ post](https://plus.google.com/+AlexandruG/posts/hkvSVK3BFWA) from a while back.
Heh heh! Well, innocent bystander here, just typing what I've seen. I have no specific view of either of them, other than they must each be pretty good developers. If I am mildly of the view that Laravel came off worse here from a perception point of view, it's hardly a terrible thing - Laravel is still miles ahead in developer mindshare afaict. I agree with you though that criticism needs to be expressed in a civil fashion. That all said, I saw a photo of the two leads having made up at a recent PHP conference, so it looks like water under the bridge `:-)`. That's great to see! 
Ahh, good explanation. Thanks
Very nice...That is it ! Thanks ! Cheers 
And maybe the most important part: don't be afraid to ask questions. Not only will you learn the framework, you will get to know the people who wrote it.
Probably keeping a code base of transpiled HHVM-&gt;PHP.
One thing I don't understand about this: what if you want Task1 to run every minute and Task2 to run every hour but it takes 20 minutes to finish? at 16:04 Task2 is called, since it takes 20 minutes to run does that mean Task1 doesn't get called, or gets called after 20 minutes (when Task2 has finished?). Presumably you can set a priority order, and make Task1 run first. But lets introduce Task3, this runs once a day but takes half an hour. At 02:30 we want Task3 to run, the artisan schedular is called every minute and 02:30 is no different, but if Task2 runs first and takes 20 minutes, does that mean Task3 actually runs at 02:50? Even though you want it running at 02:30? A more specific problem: Sending out emails to your entire user base may take 10 hours. Do you set this to check and send a batch every minute? Presumably you would flag where it got upto every minute for when it runs the next minute or something. But would that effect every other task over that 10 hour period? Would other tasks effect the sending of the emails? Obviously this is very knew so documentation on it is sparse, but I can see some obvious problems and not obvious ways to get around them.
&gt; HTML5 offline application, node-webkit, python. An HTML5 offline application can work, but there are some limitations and quirks, and sometimes users want something they can download, install, and run like a regular desktop application. There's no reason to re-code your project for Node Webkit or Python if it's already a PHP project, or if that's what you're familiar with.
I don't really see a big difference. Dealing with different tax rates in US localities is like dealing with them in different European countries.
This test seems like a list of all the things that have driven me away from PHP, and into the sane &amp; loving arms of Python. Useless trivia: you nailed it.
Trust me, it's worth a try!
I'm very new to Laravel (started tinkering with it last month), so forgive me if this is a stupid question: I thought Laravel 5 was due to be released this month, so why is it still "alpha"?
You could replace your Crons. This is still just Cron at the end of the day. Think of this as a fluent Cron expression builder. Under the hood, Michael Dowling's Cron expression evaluator is used to determine if the job is "due" (https://github.com/mtdowling/cron-expression)... If the job is due, it is fired off in the background on a separate process.
Laravel 4.3 was originally slated to be due this month. When Laravel 4.3 turned into Laravel 5.0, the goals of the release changed and I wanted to delay the release until January to allow more time for polish and updating of surrounding ecosystem. (see http://blog.laravel.com)
The way he does routing — it looks like Laravel, and a tutorial on YouTube has $this-&gt;view-&gt;load(); or something (can't remember specifics). Not really looked into CI... I don't like the way it handles stuff.
Is there any locking mechanism available? If I have a task that runs every minute can I limit it to 1 instance at a time? i.e if a particular run takes more than 60 seconds the next one is skipped.
&gt; I don't really see a big difference. Dealing with different tax rates in US localities is like dealing with them in different European countries. There is 1-3 tax rates per european country. In the US each state can have much more than that, since each county can impose own tax. In any case, until there's agreement for all ecommerce software to remove the capability to define and calculate taxes in favor of commercial solutions, there is space for improvements, and we've made them. 
Finally something useful.
You could implement this in your own code if you wish. Nothing like this is baked into the scheduler.
Yeah but they are improving heavily lately. I definitely think whatever version of IE that is gonna be shipped with Windows 10 will be a contender.
Oh, of course IE is getting better. When Windows 10 comes out then I'll look into it again. I usually switch browsers for a few weeks when a new version of IE comes out. 
Well, can I send a PR for this feature? I'm thinking a `protected $maxConcurrentInstances = 1` (null for infinite) property for `Event`, and a simple lock via [tempnam](http://php.net/manual/en/function.tempnam.php). Does this sound reasonable?
Sure you can give it a shot if you want.
Good big picture comments so far. I'll add one suggestion for gaining insight into a large PHP project with a large number of individual scripts working together to build the page / app. For example, add something like this to the footer of a page: if (!empty($GLOBALS['c_debug']) &amp;&amp; _insert_credential_check_function_here()) { $included_files = get_included_files(); echo "&lt;h1&gt;Included Files&lt;/h1&gt;"; foreach ($included_files as $filename) { echo "$filename&lt;br&gt;"; } } This provides a rather useful list of included files in the exact order they're included. It can give you a bit of a head start toward the process of understanding how everything works together.
Agent string blocking isn't perfect, but it's a pretty effective step in my experience. In general, people building scrapers aren't top shelf programmers, and they tend to use off the shelf tools like HTTrack, EmailSiphon, etc, and these tools don't alter the agent string. So it's easy to immediately block those remote client requests, and it's quick, because no additional behavioral modeling is required. Furthermore, in my case, I don't offer content of use to search engines in Asia, Russia, etc, so the agent checking step is a convenient way to block those good bots that shouldn't be wasting my resources or theirs. Note that in addition to agent blocking is IP based behavioral modeling. If a remote client is making successive requests at a rate exceeding 1 request every 2 seconds for a duration of 30 seconds - and the remote client is receiving and tossing away cookies (which on my website network is the most common form of scraper) - then they're blocked. If a remote client is retaining cookies but exceeding 1.5 requests every 1 second for 30 seconds then they're blocked. This isn't a perfect solution but the combination of agent and ip based tracking requires very little resources and is extremely effective at reducing load on my server. On any given day on my website network I've got 50-75 IPs blocked, which in my case translates to 100,000 - 150,000 page requests that aren't being served, reducing my bandwidth usage and cpu load.
I'm confused, how are they using APC with PHP 5.6 (mentions upgrading from 5.3 to 5.6). Are they using APCu for userland caching? Cause if its 5.6, shouldn't Zend OPcode be used for the opcode cache?
It's a good topic, but I agree - it's more about how receptive they'd be to it. In the security-related talks I've given, I've found that developers are looking for more than just "here's what the policy says" kinds of things. They usually want something more practical. 
Is Bcrypt the best option right now for php?
&gt; hopefully hiding the source This would do the opposite of hiding the source. With a webapp, users don't have access to the PHP source because it's on the server. The HTML is just about worthless, so there's no sense concealing that. With this tool you'd literally be distributing the source, so...yeah, they could see all of it. You could bundle it into a phar or obfuscate it, but it it's still decompileable. Furthermore, if you want to do any kind of communication (like a chat app or multiplayer game), you're going to need a server anyway.
Point noted. I made the code extremely generic for the purpose of the post. I don't normally code like this :) With that said, I'll admit that my code ain't pretty, but it's handling some very complex automated business processes with 0% failure, and I've made millions (and millions, and millions) over the years with my development / ebusiness expertise despite my own particular style of coding. It's ugly, but it's functional. Like a camel, lol.
openhatch.org is a good site to sift through various open source projects. http://openhatch.org/search/?q=&amp;language=PHP
Not sure this is really the best thread for this but breifly. 1. No I have no plans at the time to do any LTS version. We backport security fixes back to the last major release. So, 4 would continue to get security releases. It's not particularly hard to port a 4 application to 5. 2. There are no specific plans. Of course we make performance improvements occasionally (see route cache). However, performance is a broad topic and node balancing PHP is quite easy. Laravel has been used to power APIs for Olympic data, MTV, etc.
&gt; This would do the opposite of hiding the source. I would like to see how you get to the source after getting ahold of one of the application wrapped pages. This was the security perspective I mentioned. &gt; The HTML is just about worthless, so there's no sense concealing that. Traditionally, that's been because you can't afford to reveal anything you send to the HTTP client. Calls, formats, etc. In a wrapped application binary, that concern is generally gone as the rendered is just another internal abstraction. I assume you might be able to get to the renderer through a traditional system debugger. Again, these are concerns that can only be known in practice and I'm not gonna test it.
Thanks. From your experience, is this something pretty straightforward? After googling around for COM and php, I didn't see much online except the php docs.
Regardless of your own success, the code you posted is objectively bad. Not just hurried/simplified for the purpose of demonstration, but fundamentally, overtly incorrect in many ways.
I'll update with the code I'm using to render. I wasn't aware that View/Template were significantly different. I'm using the code as is from the site which, from memory, did something like $view = new View; $view-&gt;render("test.htm"); If there's more to it than I probably missed it in the documentation. As for the UI variable, I'm setting that explicitly and the rendering of "test.htm" works if I render it directly, just not if I use it in an include. Give me a few hours and I'll get some code to you.
I considered that, but I worried about any sort of preprocessing that F3 is doing. I'm so new I'm really hesitant to make any sort of assumptions and I was worried doing it that way was against grain of how F3 was meant to be used. I plan on using the PHP templates rather than the F3 templates unless there's a strong reason to do otherwise, but would still like to stay with the F3 way as much as feasible (since it supports using PHP as a templating language).
&gt;This is just a way to schedule your Cron jobs in your Laravel application, thus having them under version control, not mucking with /etc/crontab additions on deploy, etc. /u/utotwel above.
&gt; So, 4 would continue to get security releases. Until you go to 6? Seriously though, long-term support - or some kind of guideline for how long support will last before needing to upgrade - would be awesome.
There was a long discussion on this in the part one post. https://www.reddit.com/r/ruby/comments/2mpds9/password_security_part_1_by_the_numbers/ tl;dr - This is not universally agreed.
Well, to be fair, that would be approaching almost 2 years of security fixes if 6 were to be released as soon as 5 was. But, this isn't really the thread to talk about that.
Obviously it depends on the group. Personally I'd rather hear about alternatives to NIST, as someone who sees the group as compromised and no longer credible.
Are there really no municipality taxes in Europe?
Thanks for the feedback folks; I will refactor the code when time permits and update the post. 
That's neat. 
I see. Wonder what the penalty for calling and bootstrapping PHP/Laravel every minute is.
&gt; I came here to say that the days of the PHP developer working in isolation away from the server configuration are pretty much over forever I literally just provisioned a VPS for a customer, only to have their PHP dev inform us that I'll need to install cPanel and set it up for them. Of course that means I'm going to be babysitting him through the install of Filezilla on his desktop. In the PHP world in particular, I really the opposite, the divide between developer and "server stuff is not my problem" has never been bigger. 
sounds a lot like WP Cron - or is this a different idea?
&gt; I would like to see how you get to the source after getting ahold of one of the application wrapped pages. Depends what it's compiled to and how it's distributed. Not sure if it's compiled right down to binary or not. Even if it is, it's *technically* decompileable, but probably not worth it. &gt; Again, these are concerns that can only be known in practice and I'm not gonna test it. Yep...don't blame you for that.
&gt; hash collision could allow a user’s account to be compromised, that also required that they haven’t logged in since 2008 (I wish I were kidding). Many I'd love to see an explanation of that. 
Likely you'll want to create a new Apache virtualhost for each project instead of making them into subfolders. http://httpd.apache.org/docs/2.2/vhosts/
Yes I think i encountered this kind of solution somewhere. Thanks. I ll try this now. But, I keep asking myself why does it have to get complicated?!
Okay. Thank you for your help.
Hooray for `Closure::bind()`! I've been seeing just how handy `Function.prototype.bind` in javascript can be, as it's used quite a bit in ReactJS. PHP's (and hack's) still relatively weak when it comes to functional programming, but this is definitely a good step towards changing that.
Let me google that for you: http://www.ph-bergsmann.com/typo3/2014/04/04/typo3-with-hhvm/
Is it common practice to use the term "password" to refer to both the cleartext password as well as to the hashed-password? Is there an unambiguous naming convention?
This is a fantastic question, I hadn't thought much about. I checked and I definitely used "password" when I meant "hash", "password hash" or "hashed password" a couple of times, I'll make some changes to clarify that! To answer your question: - password the plaintext string as provided by the user - [password] hash: the result of passing the password through a hashing algorithm
&gt;Annotations are written as PHPDoc, it is not a language feature and therefor i consider them Magic. Annotations are for configuration. They aren't part of the language, they're part of the application, much in the same way a yaml file would be. &gt;All the things that Annotations achieve can be done in some other way. Yes, but that says nothing about which way is best. Annotations are not unique to PHP. They exist in PHP because they work well in other languages and have been stolen. Have you tried them? I used to think the same thing as you :) &gt;SensioGeneratorBundles generates 6 files ... more than "... about 5 lines of code.." It adds 6 lines to your existing code base (adding the bundle to the kernel and adding routes). It then drops half a dozen files in a bundle folder so that you don't have to manually type them out - and you can delete all but two of them if you really want. &gt;you have even more magic and code scattered in different files that cannot directly be tested, or perform static code analysis on it I haven't looked at ExpressionLanguage beyond a cursory glance, so forgetting that, could you elaborate on annotations? I'm thinking you test them by e.g. writing a functional test against a route. The annotation code is tested independently, and the class you're mapping to should be as well, so it's an integration test to make sure your app is wired correctly. Now go do your homework!!! :P 
My quick guess, based on past encounters with WP and a look through the latest commits: WordPress used to use unsalted MD5 for storing passwords before they changed to phpass. The password check function still supports old-style passwords (they get upgraded to the new format when you log in). The code that validated the old MD5 hash used `==`, and, for example, `md5('240610708') == md5('QNKCDZO')` ([demo](http://3v4l.org/igFrT)). (Why is it equal? See [/u/McGlockenshire's post below for an explanation](https://www.reddit.com/r/PHP/comments/2mxq3l/wordpress_401_security_release/cm8t2ld)). So if your old password happened to hash to a string that PHP could interpret as exponential number notation, someone could try to log in with another string that also hashed to the same number notation. [This code has now been changed](https://github.com/WordPress/WordPress/commit/ddb3ee5057c06d661cc9156929ad40c6b70e3ad3).
Yes done! Thank you very much!
&gt; My benchmarks closely match these results, and I got ~140 requests a second for a new laravel install This may not be the best solution for everyone, but for a lot of sites the high traffic pages are static content (or at least content that only has to be updated periodically), so adding a little page cache code is a viable solution for many websites. So I ended up writing a little code that lets me apply a 'pageCache' filter to routes that I want to cache, and I can define how many minutes to keep the cache and apply tags that can be used to selectively clear sets of cached pages whenever the content changes. Then *before I even boot Laravel at all*, I have a simple bit of code that first checks to see if it has the page in the cache first. The pages can be stored as flat files or in a Redis cache (the speed was pretty much identical in my case). I went from ~60 requests/second to ~1200 requests/second, with the latency going from 150 ms to 8 ms. 
I'd still add the km and miles radius values as class constants so users don't need to work it out for themselves. 
What's the purpose of this? The message *is* the summary. The resolution is to fix whatever the summary says. I'm not seeing the use case.
I updated my original post. I didn't have a whole lot of time to get any work done this evening, unfortunately, so I haven't gotten to dig any further into it. But any help you can give me is greatly appreciated.
You can make an auto-updater, but you can't guarantee that a desktop app will always be online. That's the point. A website is by definition online, or you can't access it, so any user will always see the latest version and any changes instantly. Browser changes will break a desktop app until all users go online. But yes, the open code makes it useless for many purposes. It's really only suited for things that would be open source anyway.
Because it isn't spelled out in the linked 3v4l, and for anyone wondering *exactly* what's going on with the whole exponent thing: the brokenness here is caused due to == trying to transform strings into numbers before comparison. "0e" followed by a number at the start of the hashes tricks PHP into thinking that it's a number stored in scientific notation: zero, raised to the nth power. Both hashes become zeros, and zero == zero. If you're using 5.6 or better, you can use [`hash_equals`](http://php.net/hash_equals) when you need to compare hash strings. Not only is it immune from the stupid numeric casting, it's also immune to [timing attacks](http://codahale.com/a-lesson-in-timing-attacks/). Otherwise, use === when dealing with hashes, or any string that might possibly be accidentally mistaken for a number.
I love having &lt;&lt;__Memoize&gt;&gt;, but without expiry/size limit controls it won't (should't) be used as much as it could.
TLDR: use caches to improve performance 
Awesome project that is using Angular.js for the frontend and the popular Zend Framework for the API structure. Great code. A must to examine. https://apigility.org/
Ever had to pass around a date in a specific timezone? 
Thank you for adding that explanation.
Given the current understanding on the field, there is no question which one is stronger, bcrypt or scrypt (for interactive logins, too). If you don't misuse scrypt (eg. like the notorious Litecoin case), for interactive logins, the params from the scrypt paper show scrypt is about 35 times more expensive to attack that bcrypt (bcrypt with cost 11 and scrypt with N=16384, r=8, p=1). I think the justification from first part "However, bcrypt is considered superior for passwords" is wrong, and also if reading @ircmaxell's blog post carefully, it doesn't imply that either. If you can run scrypt with such settings that it is not "misuse" (multi-megabyte memory), it is a clear winner. That being said, there is nothing wrong using bcrypt for now ;)
In voting phase ... wait &amp; see
PBKDF2 is weaker bcrypt (and more so when compared to scrypt).
&gt; I love having &lt;&lt;__Memoize&gt;&gt;, but without expiry/size limit controls it won't (should't) be used as much as it could. Look at the examples. I think this isn't meant to be persistent over different requests. Nifty feature, saves some typing. 
Checkout https://github.com/auraphp
It reminds me of Middleware .
You're preaching to the choir :)
No, VAT is defined at the country level.
I used the var_dump() method and I saw bool(true) where the "2" was supposed to be. I have no idea what this means for me except that the statement is true which the "2" already showed me. The var_dumpling extension did nothing at all.
Yeah sorry, I didn't make myself clear. I don't need the API response from Pusher. I am looking to make that request in a separate process so that it doesn't slow down my API response to the user by the 100-200ms it takes to make the Pusher API call. As I've never used queues before, I was wondering if they are suitable. In some configurations it seems like a queue may wait X seconds before "waking up" to a new job on the queue (it looks like you can configure it to check every X seconds whilst idle with no jobs). That would be no good to me, I need it to process a job the moment it gets put onto the queue even if it has been many hours since the last job. Of course that's just an example, generally these requests are being made quite often and at off peak time there may be a minute or so of idle time. So yeah, I know I want to move the Pusher API call away from the PHP app, I'm just wondering what the best solution is. So I have queues, or alternatively I have a separate PHP daemon or maybe Node.js process which I ping via Redis pub/sub to make the call on behalf of the PHP application.
I'm not sure what you mean. Are you suggesting an alternative for Pusher? Pusher doesn't do polling, it does realtime WebSockets (falling back to polling only if necessary).
Is the Earth a sphere here, or are you taking it's squashed doughnut shape into account? If you aren't, then you probably could not find any functions to do this calculation, because they all tend to look at a non-sphere, because all real maps map onto a non-spherical Earth. But maybe I'm just not looking at your code close enough.
A sphere. Taking "squashiness" into account is a whole different ball game. I was able to find one or two of these in PHP, others in form of equations or in other programming languages. I really needed the "destination" feature for a project and I could not find it in PHP.
Typically you don't have to worry about putting your own PHP into a framework that is built with PHP. Just document what you are doing and why.
&gt;Line up any remaining RFCs that target PHP 7.0. But.. where are the scalar types, generics, arrayof, annotations, exposed AST, anonymous classes etc? :P
If the "actual fact" is that you don't like CodeIgniter anymore then that's a fair statement. I also don't like or use CodeIgniter anymore, but it's still incredibly good that people are maintaining a project used by thousands of people, regardless of your personal opinion. Get out of this "its a competition" mindset. It's not. 
If by "typeof" you are referring to JavaScript's typeof, couldn't you just use gettype($var)?
The link isn't working for me, but I am on mobile.
So if these first eight votes are any indication of how the voting will go, it looks like we won't see a PHP 5.7. Interesting...
http://www.surveymonkey.com/r/XV9ZP8W The link posted is the secure one, you could try the unsecure one instead? If not I'm afraid I can't help, as it may be simply because you're on mobile :)
I guess I didn't think of it being used offline tools, as the use for me would be offloading curl to the user.
Exactly, you want your local environment to behave like the live environment which is why virtual hosts are used. Using folders within a www folder would produce issues when using absolute URLs, that wouldn't be an issue in a live environment. Setting up virtual hosts is part of the way I set up every project.
He's referring to being able to define a typeof for an array of objects (or perhaps a return value that is an array typeof &lt;Object type&gt;, if I recall.
If you are caching complete pages, isn't it easier to just use Varnish or a CDN? Then you would have virtually unlimited scalability with very little complexity. Just control caching times from your application.
Man, I've gotta take a close look at this one. Thanks for the heads up! 
That's not necessarily true. There could still very well be a 5.7 released around the same time as 7.0. Since 7.0 will have a number of BC changes pushing out another version in the 5.x branch with new features and no breaks is still possible. And if 5.7 does come around it's probably the last in the 5.x branch. Not everyone will want to update to 7.0 right away. I can see a lot waiting for at least one minor version to let the "early adopters" find a few of the common bugs/issues and have them be fixed.
Use [SlimPHP](http://www.slimframework.com/) and some orm (if you like, though PDO is probably fine).
Indeed, as long as the PHP developer has server-admin privileges, he can stick to whatever he likes. That's always been the case and will never change.
Honestly I found that pretty hard to believe and a quick look up proved it's not true. If you look under [Geographical Features Of The Application Of VAT In The EU](http://ec.europa.eu/taxation_customs/resources/documents/taxation/vat/how_vat_works/rates/vat_rates_en.pdf) (page 22) you'll see alternative rates or exemptions for numerous localities. You'd need to use a nesting model for taxation just like the US.
I hate frameworks. I find them lazy and inefficient. Unless I'm working with a team, and we document everything as a collective group. I always just create my own libraries and build and modify as I started to learn it, especially if you are new, you won't skip over the core knowledge. Stackoverflow has been my best source for yeeeearrrssss.
&gt; Infrastructure is code, and should be developed and managed as such. If your sysadmin doesn't accept pull requests on the configuration management repo This depends on your relationship between the Dev and the Sysadmin obviously. There's plenty of places where Puppet/Chef git repos are kept very hidden/private, and Pull Requests are only accepted from within the organization (between the sysadmins) for the 4-eyes principle. It doesn't mean the entire config is a silo - developers can get insights into how it works, but it also doesn't mean the entire codebase is open for everyone.
[Silex](http://silex.sensiolabs.org/) is another good microframework and it's a nice choice as it's built on Symfony components. There is never a reason *not* to use a framework.
&gt; For any site that's doing anything serious - your web app config will be in the web servers config Apache/Nginx or otherwise - else you are taking a performance hit. Fully agree. But let's be honest, 99% of the PHP apps are well-suited for Apache and are anything _but_ high-traffic enough for the .htaccess overwrites to be an issue.
I don't get it.
Setting up an instance of our software in a local environment isn't really an option with the way we process all the incoming data streams we connect to, unfortunately. So the dev sandboxes are set up on remote servers where the live app exists. I didn't consider all the parsing stuff with PHPStorm but I use that quite frequently so it sounds like I might just be stuck with the uploading and downloading for now. As for git, it's constantly in use but I'm by far not an expert at it's intricacies. Basically what I did was fork a copy of the sandbox to my local drive, test my changes on the remote sandbox and then commit it through the command line via SSH. Not really sure how I can better that process since everything's gotta run off the remote box. Blagh. Thanks for the quick response though. It definitely helped me get a better picture of what could be done differently on other projects.
Yes, this definitely sounds more like a failure to properly use git than any issue with PHPStorm. 
Silex is too heavy to be a micro framework
This is a sound way to introduce security errors and other bugs that have been solved by other developers.
This is a really confusing question. Because the answer to all of your problems here is "use git". I can't help thinking that you're doing something fundamentally wrong and broken. You should just be able to use git pull to get other people's changes, then edit them locally, commit and push them. If there's anything more to it, I would respectfully suggest you're doing it wrong. You mention, for example, that you delete all the files... Why?
Yes, but my new wheel is so much better!
Slim or Silex are great micro frameworks and more than capable of doing what you want in a simple way. But you can quickly out grow your needs with these depending on what your building and why... For MySQL needs can't recommend anything other than redbeanphp.com, I use this on almost all my PoC work along with a dead simple front controller file (https://gist.github.com/Phunky/047a6a19123cf157f6d8). 
That is a cool list of things you have there ... But, I dont remember that we decided to have all those things. Nobody has a working generics patch. Dunno what typeof is. Dont think there is a consensus regarding annotations, and again, no workin patch . Nikita done an extension for AST, but not sure if it will be a core ext, and not sure if api is final. Anon class patch is ready, Sebastian is reviewing. Strict scalars might be done before release, if not there is pecl ext for that. We have until march, plenty of time for any of those things to happen.
That's what I'm coming to the same conclusion of. I'm no expert on good git practices and am still working all that out.
The only argument that can really be made against scrypt is that it isn't as "time-tested", i.e., cryptographers always worry that, years down the road, a vulnerability in the algorithm will be found. That's why things that are time-tested as well as theory-backed tend to get more respect. That said, scrypt was made around 2009, so it's getting to the point where I think we can begin trusting it and starting to use it in more places.
Run the faintest bit of benchmark between Silex vs * 
Funny enough, frameworks are excellent for this sort of thing. Rapid prototyping, etc. you are right, though, they have a knowledge overhead that can make them hard to get onto. It's worth pointing out that the more you put off attaining that knowledge, the longer before you gain anything. Ie, if you'd done it for the last project, you'd know what to do for next time. Given you want minimal, I'd go with Silex. It's just a micro-framework, so you won't get a lot of benefit. 
Not being able to run your dev environment on your machine makes me think you either a. Haven't actually thought about how you could do this b. Have some sort of crazy architecture problem If you need something sending the application data you just run a fake version of it on your virtual environment, sending out fake data. If you need to connect to web services you can either sandbox them and let the local box connect, or again just fake them. Sounds like a lot of work but there are tools to help and if it saves you 10 min download every time you make a change...?
You should check out the Github's trending PHP projects https://github.com/trending?l=PHP. My personal choice is Bolt, a PHP CMS that is using Silex as it's main backbone. Great code. Great project.
Wow, NotORM has built-in support for handling N+1 queries? That's awesome. Definitely adding that to my toolbox.
I just checked with the guy who manages the servers and he says it's possible for us to setup a sandbox on my local machine. Whew. You're right, even if it's a pain the ass to setup, it would save me a lot of wasted time throughout the day.
Use sshfs (in linux) or some other method of mounting your remote code locally, that way phpstorm will have visibility to the entire file structure. OSX has a tool called Fuse I believe which does the same thing, and you can also "Map a network drive" in windows with at least FTP and SMB shares. Here's an example with linux: https://www.digitalocean.com/community/tutorials/how-to-use-sshfs-to-mount-remote-file-systems-over-ssh
Ah, this along with 'notify of external changes' is exactly what I needed. No local sandbox needed. Thanks for this!
Yes to Slim! I'd use it with [Propel](http://propelorm.org/) for the ORM and [Plates](http://platesphp.com/) for the templating, but those are just preferences. 
That's a good point, and probably the safest way to help push the development community to PHP 7.0.
It reminds me of [Matthias' CQRS/event sourcing](https://github.com/SimpleBus). 
I looked into that a bit, but using a page cache that's closely tied to the application and written in PHP gives you a lot more flexibility. I can do things like only using a cached page if a users isn't currently logged in, etc. And the speed is excellent. I think the only reason there would be an advantage to Varnish or a CDN would be if it's an extremely high traffic site that needs multiple servers serving the cached pages.
They don't have control over PHP either, or any other part of the stack for that matter. The sheer cost of re-inventing everything would make every project infeasible.
The downside of TideSDK is that it requires you to program in a certain way. PHP is like a Javascript that is embedded in HTML in a &lt;script&gt; tag. PHP Desktop allows you to reuse your existing code/scripts. You can use frameworks like Laravel, Zend Framework and others, which I don't think is possible with TideSDK.
&gt;Dunno what typeof is. Apologies, I meant to write arrayof. Also, since you seem to know the state of things, what about proper lambdas, expression trees etc? :) 
I meant to write arrayof, sorry. 
&gt; mainy needs registration and login functions [Aura.Auth](https://github.com/auraphp/Aura.Auth) &gt; and writing and reading from a mysql database. [Aura.Sql](https://github.com/auraphp/Aura.Sql) Also look for Aura.Router &amp; Aura.View and that's all you need :)
I was noticing that. It'd be nice if PHP Desktop did some sort of compilation though.
And why does that make it not a microframework? I've seen benchmarks of Symfony apps that run faster than Slim apps
Being lazy is a good thing for a developer. http://threevirtues.com/
&gt; There is a very useful lesson that MVC brings: Separation Of Concerns. Meaning that you should separate different responsibilities into different sections of your application. This should be the one takeaway line from this blog post above all else. Great article.
What?
Why reinvent the wheel?
Aura does looks a tiny bit easier to apporach, but it still doesn't change the fact that I think a "Hello World" example (in any of the frameworks) look extremly scary compared "the php" I used to write. Guess I'll just need to strap in and start from scratch again.
[This](https://github.com/mvc5/framework/blob/master/src/Controller/Action/Action.php) is an example of it being a traversable event with the above ControllerAction as the route's callable controller configuration.
I understand the appeal of a programmatic interface, and this one's actually pretty. But is a cronjob codification really less effort than letting them manage themselves? Currently using simple `cron:` specifiers with the plugin description block: # title: cronjob collector # version: 0.1 # x-cron: 0 0 * * * Thus the cron slot declaration is self-contained and undetached from the the actual handler, consistently documented in the crontab, takes into account shell or python hooks as well as php scripts. Runtime-declared cron runs might make sense for deferring tasks by elapsed time after a new DB record revision; but even then using "`at`" or having the handler skip slots seems simpler.
As in, for your job? Then... I assume they hired you because they believed you were qualified for such a task.
I thought propel was on its way out &gt;.&gt; Is it still receiving pretty active development?
One of the reasons for using a framework is that it will cover your butt for a lot of security issues. There is usually a login system built in or at least a bundle to easily install one. It covers you on hashing/salting passwords, sanitizing user input, and putting security tokens on your forms at the very least. Writing all of those things yourself is a lot more work than learning a framework. Any system that stores passwords and other sensitive user data needs some serious attention to security. The penalty for screwing it up is just too great. The learning curve on a framework like Symfony is very high and doesn't seem worth it at first, but if you go through with it, I promise that you will come out a better coder.
&gt; View - Responsible for rendering data from the Model to the user. I'm tending towards prefering not to classify the View as being responsible for *rendering* the model, that is the ViewRenderer's responsibility. I think it is possibly easier and maybe more correct to state that the View is *a renderable interface* for the model, e.g a template. I actually like the idea of [FigDice](http://figdice.org/en/intro.html) but I don't understand why I can't just as easily pass variables (or a model) to it. I haven't looked at much it and it supports 5.3. 
Thanks again guys, now i just need to find some good tutorials or videos to get me started on one of the frameworks
view is not a template
&gt; I think it is possibly easier and maybe more correct to state that the View is a renderable interface for the model, e.g a template. The fact that there is a differing of opinion on what the components of MVC mean is the precise problem I'm talking about. Useful abstractions, architectures and patterns have clear roles and responsibilities. Instead, we have been trying to bend MVC to be useful, rather than recognizing that it's not and finding a new architecture. Also: in terms of the pattern, no, you are wrong. It's not a template, because it is stateful (where a template is a transformation).
but a template is a renderable interface?
Which is why I think it is easier to term view as the "renderable interface". I'm not saying you're incorrect or that I disagree completely. Typically we do not want an object in the controller that is responsible for rendering an object; instead we want to associate a renderable interface to a model, which is typically the name of the template. So we no longer want to look at it as passing a model to a view, instead I prefer to look at as the other way around. For a complete web page, each variable could be a model with its own associated renderable interface (or template!).
I have started putting some [geo datum conversion scripts together here](https://github.com/academe/proj4php) and there may be some useful snippets in there, or even some references. I started it earlier in the year and it has been on hold since then due to other commitments, so it is not anything like complete, but help yourself to anything that may be of use. The keyword for a squashed sphere is ellipsoid. If you search for that, there is a plethora of information.
"All the files I work on are hosted remotely" *That is why you fail.*
You're adorable.
Isn't it just a composite model?
This is where I point out [Action-Domain-Responder](http://pmjones.github.io/adr) as the more web-like alternative to "MVC on the web."
I'm actually making my own small MVC framework as practice, and I don't understand the 'point' of models, if you're pushing data to views from controllers. I mean technically speaking, could you not have a bunch of normal classes which return data and push them to views? I mean, models generally (from every example I've seen) inherit the base model class - but why? What is the advantage to this highly OOP approach when it isn't necessarily required? I mean you could even ditch classes altogether and use a bunch of functions in place of a model. Or classes with static functions (models can do this too so point may be moot) or functions in namespaces, whatever. As long as you're getting the data in a consistent and easily usable way, it should be fine, no? I mean I'm almost sure I'm wrong, but I can't figure out why. Think of this post as less of a critique of MVC and more of an inquiry, not trying to start shit just genuinely curious.
Agreed that the timeline sounds wishy-washy, but your proposal sounds very close to waterfall, and nobody wants that.
This is not a job for PHP, but rather much more appropriate for Node
The only thing that I can think of is that there are processing going on in parallel, and this statement would delay the interpreter long enough that the other process can do everything necessary. The code should behave the same otherwise. It is pretty much a meaningless statement
I am eager to to hear about them personally, or as comments on the repo, so I can continue to refine the idea. https://github.com/pmjones/adr 
Have not heard of that one, and Google reveals little. Links to a writeup?
Models should be used to manage the data side of the application, in the MVC definition you're referring to. Controllers should generally ask the Model for the data it needs to pass to the View. Where all this gets a bit messy is just how much responsibility gets leaked between the individual components of the MVC architecture.
my suggestion can be done with 2 week task sprints. It all depends on task management. I do not think timelines of 4+ months are agile at all. So why voting in the first place?
Personally, I think of "password" as the type of data being stored, an identifier or attribute of the user's identity. Identifiers could just as easily be any other attribute of a user, like their first name, so using "hashed" would just be a modifier of the data type. So, you'd say "hashed password" or "hashed first name" where "hashed" is the implementation of how it's stored but not a descriptor of the data itself.
HHVM recently released a transpiler from Hack code to PHP...
That's nothing to do with failover to PHP.
While it doesn't solidify that there will be a PHP 5.7, Internals did vote on and accept an RFC that targeted 5.7 (https://wiki.php.net/rfc/switch.default.multiple). I am still hopeful we will do one. If we do what I would like, it won't be like a normal minor release. I would like to release 5.7 as a one year lifetime extension of 5.X, but also include changes that are intended to help you migrate to PHP 7, such as E_DEPRECATED for changed syntax or behavior.
That is handled by the code already, specifically through the zones. We have a tax expert on call for all of this, he's signed off on the implementation.
COM is a beast all by itself. Whether this particular job will give you any grief when you use the COM class really depends on how "clever" the creators of the DLL tried to be. If they stuck to the basics and just exposed some methods on a simple COM object then you should be okay. If they are exposing multiple objects or hierarchies of objects then your job gets a little more difficult and you may start to run into edge cases that the COM class doesn't support or makes more difficult than necessary.
&gt; there is a differing of opinion on what the components of MVC mean And the components are more-agreed-upon than the collaborations between them.
&gt; I'm not a fan of frameworks in the slightest? So you're okay with being slower than someone with your same basic skill set? Serious question...
Okay, well I was trying to get the point across how much it improves performance. I appreciate constructive criticism, but sarcastic remarks, really? 
The term "model" is being used for two different concepts, which is probably where your confusion comes from (and hey, that's kind of the point of the linked article too). In the high-level abstract sense, a "model" is a representation of the data -- what fields it contains, what is considered valid, how it is saved to a database or files or whatever. To me, the purpose of a model is to present a sort of "user interface" to the rest of the program that lets the rest of the program speak in the language of the business. For example, the router/controller or view or whatever should absolutely not care about SQL statements or where exactly data is saved... instead it should only have to care about the "business logic". So your data models are hiding all of the yucky stuff away from the rest of your program so they only have to deal with concepts specific to the business (or whatever the actual purpose of the program/website is). But I think in your question you are thinking of the term "model" to mean the specific implementation of the database persistence layer. When a framework has a base model class, it is generally putting the common functionality related to "retrieving stuff from and saving stuff to" the database. This is by definition dealing with things that are generic and unrelated to the actual "business logic". So even though they are called "Models" , they are not actually "models" in the sense that they provide an interface to the rest of the program that "speaks the language of the business" -- they are "utilities that provide common functionality to YOUR models". So... yeah you could ditch classes altogether, write just some functions. Or static functions or namespaces... it does not matter. At the end of the day, the most important thing (I would argue, and the OP argues) is SEPARATION OF CONCERNS. As long as your view layer doesn't have to understand SQL statements and instead can "speak the language of the business" (e.g. "retrieveRecentBlogPosts()" instead of "SELECT * FROM blog_posts ORDER BY created_at DESC LIMIT 10") then you are doing your job of separating the concerns. That being said, the reason a lot of MVC frameworks have base classes for models is because a lot of people don't want to deal with reinventing the wheel of database access and generic CRUD (Create, Read, Update, Delete... or INSERT/SELECT/UPDATE/DELETE in SQL terms) for every project, so they abstract it out. And a lot of people thing classes are the best way to organize all this stuff. It's not the only way to do it though. One thing I have learned over the years is that I rarely understand concepts until I'm faced with a problem that those concepts solve. So I didn't grok OOP until I had to build my first large app and needed a better way to organize code. I didn't grok MVC (in the Ruby-On-Rails sense) until I was building my 10th admin interface for a website and realized I was doing the same damn thing over and over again. SO... you are building your own MVC framework and that's awesome, but I would suggest only building what YOU need for your own use cases... if you don't need an underlying "Model" class then don't build one. If you're building an MVC framework just for the heck of it, I'd say don't do that -- instead build an actual website or an actual application that actually does something with a specific business or use case in mind... *that* is where you'll start to truly learn why MVC frameworks exist and are structured the way they are. Until then, you're just learning the "how" without the "why". Hope that helps!
The reason a lot of frameworks do it this way is because a lot of people like it this way. It's not right or wrong to do it one way or another (the only "universal truth" I'd say are higher-level concepts like "separate your concerns"... but the actual implementation of them is somewhat arbitrary. That being said, the reason a lot of people like it this way is because it works fairly well for a lot of people. And then since a lot of people build things this way there is a lot of documentation and support for it, so it makes it even easier for new people coming to it. So if you're asking historically how it came about, I'd say it's a combination of "a lot of smart people with a lot of experience think this is a good way to do it" and "since a lot of people are doing it it must be an okay way to go... or at least I won't get fired for making this decision". If you're asking if it technically needs to be that way, the answer is "no".
Which is why I think it simplest for the user to be defined as class Controller { function __invoke() { return $this-&gt;model([ ... key/values ...]); //or return $this-&gt;view('template', [ ... key/values ...]); } } It doesn't have to matter what is returned by either of them, they simply differ because one is assigning the renderable interface to use for that model. 
&gt; Would this add to confusion? Possibly. Though, to be fair, `filter_var` *isn't* a casting function, it's a string parsing function. `to_int` and `try_int` follow the same rules, and `(int)` and `intval()` follow the same rules. &gt; Would a "moral ban" (like mysql_* suffered before it was deprecated) help remove possible confusion? That's sort of the idea. Using `to_int()` is *usually* going to be a better idea than `(int)`/`intval()`. &gt; Should we be able to choose how `(int)` behaves? No. &gt; Should `to_*` and `try_*` be implemented in userland instead? No, because nobody would use it then.
You should always represent dates and timestamps in PHP as [`DateTimeInterface`](http://php.net/manual/en/class.datetimeinterface.php) instances unless/until you run into a very good reason not to (anecdotally, this virtually never happens).
Thank you. I'm getting a lot of replies saying essentially the same thing you are, so I'll try to digest it all and review my practices. The goal of my framework was to make something reusable to the best of *my* ability, I realize that I'm not making the next hot thing and I'm not really planning to deploy it for anything important, so this is very much just for educational purposes. All that said, you did touch upon my specific concern so I'll keep everything you've said in mind. I think reusability is important, and though it can be done through the method I had envisioned it is coming together a little bit more with OOP models, I do have a question remaining, though. Even in larger frameworks, they don't handle *all* of the business logic in models, right? I seem to recall global classes for things like DB management and other API. How is the distinction made between that business logic code and models? Like I know, for example, that user models, delivering specific data in a consistent way would be ideal, however, would you say that a database driver might also be a model that another model would inherit? Or a generic json reader, which would then have (bad example, but I suck at examples) a JsonFeed1_Model and JsonFeed2_Model inheriting the original json reader class and reusing code a great deal? Sort of like generic templates for accessing data stacked on top of one another so you write less code? If that's not it maybe I lost the concept at some point, but I am beginning to see benefits in the OOP model in any case. Prior to working on MVC to 'get it' I had a system not dissimilar to other forum software where core files would be included on a need to utilize basis, but I can see how the model system might be beneficial to somebody else using my base, where I am not the app developer or some other team completely that wants to toss out models of mine they won't use and implement easily. So, baby steps on this one, I'll try to process all the replies I've gotten so far, thanks.
Thanks for the frankness. I am definitely trying to become the type of programmer that can make reusable code that everyone seems to enjoy, and this is more of a learning exercise for sure, but useful information for the future. I've got that it doesn't need to be this way, but I am getting a few useful replies in favor of using the popular OOP mode system and I'd like to understand fully why things are the way they are, and I've nearly got it, I think. Thanks for replying, any input is good.
I faced exactly the same problem and that is why I created MindaPHP: https://github.com/mevdschee/MindaPHP It is really simple and lightweight.
Make no mistake.. I'm not saying I like it.. or that I can look at it without wanting to hurl.
I don't believe that really holds. The internals are pbkdf2 and salsa20, these are well time tested and proven. He basically put a few loops around them. There's not a lot else to go wrong. As I've said elsewhere the issue however is libraries. For example, the Ruby gem defaults to using a only 1MB of RAM and documentation appears to suggest you're best leaving it that way.
There's almost certainly something else wrong with the code, and this line introduces some sort of handling that bugs around the issue. You'd be better served posting the whole code and letting someone identify the bigger issue.
Thank you for your input! I got a bit dispirited when I seen how many downvotes this got almost immediately. It's a bit of a hostile subreddit. 
It went through a fallow period about six years ago, and stalled on 1.2.x for ages. After one of the original symfony1 devs took it on, it's been very active as far as I know. I don't know what development is like now, worth checking the Git timeline. 
Take the downvotes with a grain of salt. This sub is very much representative of the larger PHP community: lots of ignorance, and even more attitude. Stick around, though. There are quite a few extremely talented and intelligent folks that frequent /r/php, and you'll learn a lot if you steer clear of the trolls.
I don't use Laravel personally, but I've been told that [Laracasts](https://laracasts.com/) is a good resource for those looking to learn more about it. And, of course, if you're going to learn PHP, you should definitely learn how to use it [the right way](http://www.phptherightway.com/), because there is a lot of bad information floating around out there.
From that perspective it would work almost the same. Your application would set caching headers that the caching layer would follow. You would have to set up a few ground rules in Varnish though, so maybe it isn't easier - I'm probably just more used to doing it that way :-) Forcing invalidation would be a problem using a CDN, but I usually just have a short (10sec-5min) expiry time.
If you are new to frameworks I would actually go with a full framework like Laravel. They usually have good documentation and will guide the setup more. Micro frameworks are great if you want to pick your components manually, but if you have no framework experience it can be hard to know what components to pick.
&gt; Also, PHP leaks memory all over the place with long running processes. Nightrain uses PHP built-in single threaded web server that uses CLI SAPI, which I think is mainly for testing purposes. So yeah memory leaks / stability for long running processes may be a concern.
You might want to correct "tenant" to "tenet".
Or do it the way someone familiar with F3 would expect and it suddenly doesn't need to be documented. I didn't post this question so someone could tell me to ignore what the framework is doing and roll my own method of doing stuff because I can. I posted it because I want to learn more about how F3 does stuff.
I'll try it later, but I'm unsure as to why they have to classes to render instead of 1. Can you explain it?
*Tennant :)
For anyone interested in learning MVC's, I REALLY recommend [David Malan's CS75 lectures](https://www.cs75.net/Lectures). It's like taking a Harvard class right from your computer, and Malan is the best CS teacher I've ever learned from.
This is so cool, thanks guys 'n gals! 
I know but... For effect.
Ah; sorry.
This probably doesn't fit your description, but I thought I would self promote and throw this out to you: https://github.com/ellisgl/GeekLab-XPDO
Well, Pagoda's control panel has been down a couple of years if I recall correctly...
This is something that was dawning on me as I wrote my own pure PHP app - I was trying to follow traditional MVC to the letter of the law, and none of the tutorials I read were explaining that you literally cannot implement MVC like this due to the statelesness of HTTP. Since I've decided to sit down with a pen and a pad and work out an application structure that works for what I want to achieve, with the technology I have, but still follows loosely the universal design principle about separation of concerns, I've been much, much happier.
Do not use Pagodabox. It has been unstable since birth and has got progressively worse over time. 
Not really answering your question, but: - you probably mean "Data Mapper" when you say ORM. Both Active Record and Data Mapper are implementations of an ORM. After all, Active Record is about mapping objects to a relational database, hence an ORM - you are unsatisfied with Active Record itself, not specific implementations that put `save()` in the object (you say it's a "no-no"). You should consider using another ORM pattern, like Data Mapper. Per [the definition](http://www.martinfowler.com/eaaCatalog/activeRecord.html): &gt; An object that wraps a row in a database table or view, **encapsulates the database access**, and adds domain logic on that data. &gt; [...] &gt; Active Record uses the most obvious approach, putting data access logic in the domain object. Having `save()` in the Active Record is absolutely normal, that's what Active Record is about.
Plumbing is always the buggiest bit in my experience, we unit test with a billion mocks, the build passes and it doesn't work because you got the method name wrong in the factory. I'm a big fan of not mocking where possible, though I have yet to apply that well in my phpunit tests, old habits die hard. What that approach does do is highlight code smells, things like: this dependency performs an api query in its constructor, weak.
&gt; I'm a big fan of not mocking where possible Can you elaborate a bit on this? All outside dependencies have to be mocked in order to isolate the SUT, so I'm having a hard time understanding what you mean.
They also mentioned that they upgraded from 5.3 to 5.6 along the way, which will improve performance significantly anyway, irrespective of any opcode cashing. It's tempting to think they don't know what they're talking about.
He means not isolating the SUT, probably.
Just do {% for u in somePHP.myFunction(test) %} {% endfor %}
The whole premise behind mocking is that it's impossible to accurately reason about how a unit of code is working unless it's isolated. If I use a real instance, and that instance is behaving in a way that differs from how the SUT expects it to behave, then the test will fail *even though the SUT is working properly*. Thus, the test will lie to me and tell me that my SUT is broken when it is not, and it's actually the dependency that is broken.
Actually PHPunit will warn you if you try to mock a method that does not exist. The only way you can still have passing tests while the implementations fail is if you tell the mock to return a specific result while your actual implementation would return something totally different. But this is what *integration* tests are for. I don't think you quite understand test types, you don't choose one, you try to have all types. Your suggestion of going "one step over" unit tests actually makes them more of an integration test. The problem with those is that they have to change those tests together with changes to ANY of the depenndencies you rely on. When with traditional unit tests they change only when their single dependency changes. The way I do it is unit test everything separately. I don't use external DI containers, my DI is basically a Registry pattern class which is easily testable. Then I try to get 100% coverage on those unit tests. All this ensures that my code is behaving the way I INTENDED. Now I have to test if those intentions were actually correct, for that I write either functional tests with PHPunit( e.g. for ORM that would be creatiing a database with fixtures and manipulating it) or Behat (if its a website). Acceptance tests are different field entirely, it's just a set of tests that *must* pass or your client to consider the work done. That can be anything, like "the page should render faster than 0.3s". They have much to narrow scope to substitute unit tests.
you are already echoing. Basically, you are trying to do this: &lt;a href="/search/&lt;?php echo date(strtotime("- &lt;?php echo $loop.index0 ?&gt; months"))?&gt;"&gt;&lt;?php echo $u ?&gt;&lt;/a&gt; You can't open up twig/php when its already open. &lt;a href="/search/{{ "-" ~ loop.index0 ~ " months"|date('Y/m') }}"&gt;{{ u }}&lt;/a&gt; `~` being the concatenation operator. 
Of course. Mocking lets you isolate your sut, but makes it possible to introduce fictional things in to your code: your mocked function returns a boolean but the real one returns a string or something. It's minor and probably OK but leaves you open to a bug that might be harmless but totally annoying and a waste of time. We have a somewhat dubious factory interface powered by one get method that looks for an appropriately named make method private to the factory which instantiates your dependency. That's fine until your mock returns and that's great but the live code actually doesn't do that at all. Moving your sut to include this plumbing can seem a bit more faffy but saves headaches. Now I ask my real factory for a real object and I know that they all instantiate correctly, resolve my dependencies and can be counted on to exist live. That's my take anyway, no solution can solve all your problems, a sensible mix is probably best
Isn't simplepie dead? 
This wasn't the question, but I can't help wondering if this is actually a good idea. Calling a PHP function from within Twig. It seems like you should be sending twig data, not expecting twig to get the data. I suppose it's possible that the function is some sort of formatting, but... still.
It crashes after refreshing on my machine.
try &lt;a href="/search/{{ "-#{loop.index0} months"|date('Y/m') }}"&gt;{{ u }}&lt;/a&gt; or &lt;a href="/search/{{ ("-" ~ loop.index0 ~ " months")|date('Y/m') }}"&gt;{{ u }}&lt;/a&gt;
Good. Now I hope you took the time to figure out why my solution worked and aequasi08's didn't. I only modified it slightly.
I highly recommend PicoFeed (on mobile, so can't link) it handles both RSS and Atom.
http://fguillot.github.io/picoFeed/
Thanks!
For Wordpress projects (and others), I use [Codeception](http://codeception.com/): * Acceptance tests for front-end testing, verifying all URLs in the XML sitemap meet their requirements and include standard metadata * Acceptance tests for admin features, especially custom forms and the like * REST/Acceptance tests for custom endpoints, such as XML or JSON feeds * Functional tests for internal bits, ensuring plugins are configured and custom classes operate as intended 
This looks like a great successor to SimplePie, and even includes some scraping features that I'd often farm out to SimpleHTMLDOM.
In retrospect my phrasing was indeed extremely poor. I need an object-oriented layer to access my database. Something that associates one row with one object, period. No logical domain mapping whatsoever. As I understand it, that's AR. It could just as well be a very object-oriented DBAL. I basically want to avoid writing basic insert/update queries myself (but nothing more). I don't want a Data Mapper, that's the part I want to do myself. (I do mean Data Mapper when I say ORM. I usually think of ORM as something that is able to do all kinds of complexing mapping into any kind of domain layer, but of course AR is ORM too.) Coming back to my issue with AR: putting -&gt;save() on the object is not the issue. What I absolutely don't want is an implementation where I can create and save a row *without injecting a database connection*. What I want is: &lt;?php $post = new Post(); $post-&gt;setTitle( "Hello world!" ); $post-&gt;save( $myConnection );
Woops, yeah that was silly. A lot of people don't consider AR 'proper' ORM, usually because when they say ORM, they mean Data Mapper. I like to think of ORM this way too. But technically, Data Mapper isn't always ORM, and AR *is*. Right? I try not get too hung up on acronyms and what people mean by them. The DI no-no is the lack of a database connection being injected. I thought that was pretty obvious. But then again people keeping implementing AR that way.
done
I can't believe nobody has recommended [Zend\Feed](http://framework.zend.com/manual/2.0/en/modules/zend.feed.consuming-rss.html) :)
Ok, thanks for the downvote without the explanation. You're the kind of people we need in this industry.
Question on these differences: Are these scheduled actions things that could be scheduled at run-time? e.g. A user submits a form and that form handler registers a new schedule into the scheduler based on some logic surrounding the form details.
&gt; The curly braces denote a string offset Curly braces can be substituted for brackets when requesting indexes in an array too. https://eval.in/225155 tl;dr $info could be an array
This is the one I'm using. Zend Framework 2 has some really good components. 
Perhaps a Row Data Gateway? http://martinfowler.com/eaaCatalog/rowDataGateway.html Then you can have a gateway object that retrieves and saves the row for you, a la `$gateway-&gt;save($row)`.
Transactions ? FETCH_CLASS maybe ? getColumnMeta() ? To be honest theres not much anything advanced in pdo. You put a query in, yo get some results out.
No.
Not really, no.
why not just plain ol DOMDocument or XMLReader?
* Learn about buffered queries compared to unbuffered queries. * Play around with the error types (silent, exceptions, etc). You could set it to exceptions and come up with a way to catch all PDOExceptions and display a "something went wrong" message - or spit out the error if it's a dev environment. * Extend the PDO and PDOStatement classes and add extra functionality, such as query counting or convenience functions for returning result sets in a particular format (eg. select two columns, return as an indexed array). * Read up on all the PDO attributes and understand what they do.
I'm the maintainer of SimplePoe, so a quick update on its state: it's in permanent maintenance mode, as it's mostly stable. Any security or hugely breaking bugs will be fixed, but otherwise it's dormant. :)
You could try wrapping PDO with an abstraction layer or using it with an object model. [Look into the methods PDO supports](http://php.net/manual/en/class.pdo.php) and see what you can do with it - like having predefined classes for your program's stored data and making PDO fetch results as an instance of that class.
&gt; Your suggestion of going "one step over" unit tests actually makes them more of an integration test. Yes, I meant that as an integration test, but as a simple and straightforward kind. &gt; The problem with those is that they have to change those tests together with changes to ANY of the depenndencies you rely on. When with traditional unit tests they change only when their single dependency changes. Yes, I would need to change them together with changes to any of the dependencies, but isn't that the case anyway with integration tests in general? And by the way, you would only need to change methods and tests of other classes that involve the methods that you change in the class in question.
I would like PHP 5.7 to be a LTS release, as a final hurrah for code married to the 5.x branch in case there are a lot of BC-breaking changes accepted in PHP 7. Not sure how to suggest this to them ;)
I don't know who downvoted, but it wasn't me. Welcome to the snobby side of PHP. lol But to respond to your question... First, my fellow programmers and I *don't* have the same basic skill set. I've been programming pure PHP for 13+ years (and probably 1/2 of those were even without autocomplete!); I took the time to learn and use the language itself and now I do it in my sleep. Throw me a framework and suddenly there's a learning curve. Simple things become difficult and frustration ensues. I am a PHP dev with the proverbial "big P". My coworkers use frameworks. They took the time to learn the ins and outs of the framework du jour and can probably work with it in their sleep. They face their learning curve when they have to do something in raw PHP. They're "little p" PHP programmers, depending on a framework. My peers are going to be as fast with writing their framework-wrapped code than I am writing my PHP code. They'll be as slow with their PHP code as I am with my framework code. Second, having the same skill set as someone doesn't mean you'll share the same way of thinking or intuition about things. The truth of the matter is there's more to programming than writing code. Most of the time is spent thinking about how to solve a problem or debugging your code. If I spend 6 hours planning and then 2 hours writing code, and a coworker spends 7 hrs planing and 1 hr coding, we've still both put in the same amount of time. So all things being equal on the skill side, the human factor makes it inconsequential. Third, the framework market in PHP is horribly fragmented. Its not like the Python world that's settled on Django, or C# and the .NET framework. Those enhance the language and the knowledge is transferable across almost any of the projects you may work on in those languages. But you can learn ZF2, Frankie will learn Yii, Sally will learn Larvel, Margaret will learn Symfony... and not all of that knowledge is transferable to the next project if they're not using that framework. Sure the basic concepts are, but the details certainly are not. And finally, in my career I've only seen frameworks useful for maintaining structure in large teams. I've worked in a team that has grown from 10 to ~35-40 programmers in the past 7 years. Some of my coworkers are geniuses, others... um... not so much. The framework serves the lowest common denominator and enforces structure so the geniuses don't kill the not-geniuses and so the not-geniuses don't break anything too horribly bad. When I'm doing a personal project I'm not working with levels of competency so I don't need enforced structure. 
PDO itself isn't advanced. It's a *Database Abstraction Library*, making it a consistent way to do "database stuff" regardless of what you're using - MySQL, Postgres, SQLite, etc. It does enable some features that are not available in the direct drivers, such as named prepared statements. But ultimately, most things like login, etc, are no more complicated than any other. A query is a query. Prepared statements can be quite complicated, and they're a major part of most of those others, especially insertion. I'd start there if I were you.
Of course that is how you feel. I would not expect otherwise. Note the word "feel."
Yes, PHP's request for comment system is bizarrely hard to comment on. :)
Alas. Thank you, though.
&gt;US zones might not even match zip codes I don't see why that matters. A zone should be a simple container. It doesn't matter what you put in it. City, state, province, territory, parish, municipality, country.
No it isn't, just subscribe to the mailing list and reply to the thread: http://news.php.net/php.internals/79098
arrayof was rejected, it has not been prepared for 7. The best chance of getting that functionality is on top of generics, which nobody has a patch for. There's nobody working on lambda or tree patch, neither have been discussed properly. 
So basically your toipc is just saying: "Lets just have integration tests and not do unit tests ?"
Disclaimer: I tend to avoid IDE convenience-integrations on the basis that they aren't convenient to me. Of note, this includes all VCS integration. I don't know when you last used YCM but I haven't had any issues with it for the past year or so. YCM's internals have changed a lot since the first release. Vim is categorically not an IDE, and although you may be able to improve on the basic experience, Vim fundamentally offers no code introspection. Other tools (e.g. YCM) can do this, but are limited both by Vim and the language in question (PHP, for example, is quite limited at least until we get the AST). I've settled on NetBeans for the situations where I need introspection. NetBeans doesn't offer nearly the tools PHPStorm does, in particular with respect to built-in refactoring, but [jVi](http://plugins.netbeans.org/plugin/2802/jvi-vi-vim-editor-clone) is leaps and bounds ahead of the very lacklustre IdeaVim. It turns out that I can be more productive with NetBeans + jVi than with PHPStorm + IdeaVim, and I won't entertain the idea of abandoning the Vim emulation layer. I don't need PHPStorm's extra refactoring capabilities nearly as much as one might think, and the tools I need the most (e.g. UI documentation, rename-refactor, deprecation detection) work fine in NetBeans.
It's neither, IMO. It isn't `a waste of a php instance` - that isn't how it works. *It's not insane*, some IDEs will put that into a list for you so that you can have a checklist of all @todo items - this can be handy. *It's not recommended*. I find @todo notes are only useful to the person who put them there. If you find it useful, go for it.
No, don't worry about it. However, for placeholder images, why not use placehold.it or a similar service?
I would but the html needs overhauled which is why i added the todo - as i say, it's not a *required* thing. Merely a prettify thing.
Yeah, phpstorm adds @todos which is nice but I'm trying to be a little more PSR compliant and wondered if it was "against the rules" to do it this way
I don't want to start that discussion. **Bloatware**. read http://microphp.org/#!/
Well, alright, but that manifesto equally recommends against Zend and so forth, right? 
Right answer. This one simply does what lingben asked for. (Tested few months ago, working)
I do this all the time. This tag has a special meaning in NetBeans too - if I open the Action Items panel, I can see all my notes in one go. Really helpful for periodic refactoring. 
After you setup auto failover (using lyoshenkas link), keep in mind, that HHVM and PHP-FPM have different ways of storing sessions. I've had HHVM with failover to FPM, but HHVM kept failing at sign in. FPM then handled the sign in proccess, but then, user was "signed in to FPM", not HHVM. I think this would be solved using own session storage logic, but I didn't try. 
Well I made this thing called 'Cliche' that [can do this (and more)](http://imakesnowflakes.com/cliche-introduction.html) some time back. I had [posted it](http://www.reddit.com/r/PHP/comments/23sncm/cliche_a_php_cli_utility_for_managing_class_files/) here. You can take a look. It is basically a command line program, that will accept cursor location and a file path from an editor (any editor will do, but I have bundled a vim plugin if you are using vim), and using the projects autoloaders and some static analysis together with Reflection API (will use annotations when possible), returns method, property, classname, namespace, php function and parameters auto completion information. Here are some gif animations of the vim plugin using this info to show completion pop-up. http://imakesnowflakes.com/media/cliche-expression-ac-new.gif http://imakesnowflakes.com/media/cliche-namespace-ac-new.gif http://imakesnowflakes.com/media/cliche-function-ac-new.gif 
I'm on the other side of the road: I'm a *huge* PhpStorm fan, I use a lot of refactoring support and such. And I'm hearing so many things about Vi that I'm tempted to give it a try myself, but I can't imagine everything that I would loose on refactoring/autocompletion. I worked with Java previously, and the fact that everything is statically typed means you can refactor anything with eyes closed. PhpStorm (with good phpdoc) will do the same, and that's priceless productivity-wise. So I'm interested in knowing if anyone works with Vi with autocompletion/refactoring support at PhpStorm's level. The only thing I can add to the discussion is this: https://github.com/QafooLabs/php-refactoring-browser &gt; A command line refactoring tool for PHP There are Vim bindings: https://github.com/vim-php/vim-php-refactoring
Use a better ctags for smarter completions. There's a better one at https://github.com/b4n/ctags/tree/better-php-parser and there's a php-ctags implemented in php. It has full support for namespaces, class inheritance, etcetera.
That looks really, really interesting! I'll have to look into it more when I'm not limited to using my phone, but it seems like it solves the auto completion part, and it appears to use code analysis. Two quick questions, which may have already been answered: * how well does this scale to bigger code bases? Tools like phpctags, sami etc tend to choke unless I give them at least a GB of ram, and even then they'll take their sweet time. * does it support "working the other way around", like cscope is to ctags? Can I look at `$a-&gt;foo()` and see exactly which foo is used, even if there's several classes that define foo? Either way, this seems like a bit of software I just *have* to go and play with, it looks very promising.
https://github.com/propelorm/Propel2/commits/master
Not sure when I "gave up" on YCM, I think it was around 6 months ago. I just might have a look at it again, I know it's very highly regarded and I blame the issues I had on my own configuration, not YCM itself. And maybe it's the kind of software that would run better in Neovim than in plain old Vim. I somewhat agree with your "Vim is not a IDE"-sentiment, but I do feel it's flexible enough to be able to add some IDE-like functionality. And yes, PHP is among the worst languages to be using in that respect, I know. It's why I haven't bothered that much before. It was seeing PHPStorm actually do it that, well, opened my eyes. I'll keep Netbeans in mind, but I'd prefer a real vim solution.
See the link from /u/marcjschmidt, thanks Marc. 
Suffice it to say that if you've used vim for any significant length of time, it completely ruins you for any other editor, ever. It's extremely hard to put a finger on why, or explicitly enumerate the benefits of vim over other editors. It just *feels* so right. Granted, PHPStorm is a wicked good IDE. But it has nothing on vim when it comes to editing. The two are in completely different (but somewhat related) categories, and both are the best at what they do, IMHO.
More than anything, this seems like a question of IDE or editor. Unfortunately people tend to conflate those two things. You see people asking for IDE recommendations, and being told Sublime Text, etc. There are advantages and disadvantages to both. An IDE provides a lot of autocompletion, refactoring help, as well as reducing typing and increasing accuracy - showing unused variables, etc. I don't think you actually want what you're asking. Forcing the behaviour of an IDE into an editor is a misunderstanding of the intention of both. Now, what you **can** do is get the behaviour of an editor into your IDE. In particular, PHPStorm can be used in vim mode. Here is a [Laracasts video showing how to do it](https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/18).
What do you mean by "properly destroy a PDO object"?
Why use PHP to mark them? You could just use an HTML comment instead: &lt;!-- TODO: add cover photo here --&gt; A lot of [good IDEs](http://blog.jetbrains.com/webide/2012/10/managing-todo/) support this syntax (and probably allow you to define your own, if needed).
One reason may be to prevent the comment to leak out to the end user
That's reasonable, I suppose. Though, these comments can easily be stripped out prior to responding to the client.
Well, most IDEs have some sort of vim emulation plugin. Some are just simple key bindings. Others go further (IdeaVim looks to be in this category, though I've not used it myself). But, there is far more to vim than what can be emulated by an IDE. For me, one of the biggest selling points of vim is how it feels like an extension of the OS. I live on the command line, and moving back and forth between that and an IDE is just an impedance mismatch. I absolutely support using both vim and an IDE, though. For large refactoring tasks, a good IDE is invaluable. "Use the right tool for the job," as it were.
Why not just echo/print it?
Compilation to bytecode is possible through third party encoders, see [this link](https://code.google.com/p/phpdesktop/wiki/KnowledgeBase#How_do_I_protect_PHP_sources_in_"www"_directory?).
That's the problem it doesn't send to to the modal, the only easy way i can think of is make for every time it goes through the loop make a modal ? But i think it can be done easier 😬 
Can you show some gist? 
&gt;arrayof was rejected, it has not been prepared for 7. Indeed. The RFC was targeting 5.6 if I recall correctly, which might have been a contributing factor for its rejection. &gt;The best chance of getting that functionality is on top of generics, which nobody has a patch for. I don't see why we cannot have both generics and arrayof. The latter would certainly be a lot easier to work with in certain cases, such as when injecting dependencies from a DiC. Generics would make that a lot more cumbersome. &gt;There's nobody working on lambda or tree patch, neither have been discussed properly. Lambdas are syntactic sugar, but they do look a lot nicer than having to write anonymous functions today. Compare: $someClass-&gt;someMethod(function (Foo $foo) { return $foo-&gt;bar &gt; 20; }); with: $someClass-&gt;someMethod(Foo $foo =&gt; $foo-&gt;bar &gt; 20); As for expressions, being able to walk them and transform them to something else would be quite useful. For instance, you could transform an expression to target a different type, you could transform the expression to build an SQL expression etc. Of course, this could be done with an exposed AST too, but it would be a lot more easier and efficient with an expression tree visitor. 
Yeah it's definitely not perfect, but it's been enough for me so far. I haven't experienced that particular bug but I have been across a couple of others. I'd still rather deal with a few bugs than go back to pure vim (with tons of plugins) set up. :)
I am *so* torn on vim vs phpstorm -- because for me, vim doesn't stand alone, I use it via ssh, with tmux, on a remote linux server that manages my entire development environment. It's so nice having everything in one place, accessible from any computer with SSH capabilities (even my phone)! I use tmux to manage my windows, connections to other servers, database sessions, etc -- all the stuff that phpstorm has nice snap-ins for, I have set up in tmux. But PhpStorm is really impressive too, and it's a nice, tight, consistent experience. I guess it's a moot point though, I don't do a ton of coding these days anyway (management), so I can probably get away with using whichever one I want whenever I want :D
Whenever I've send data to a modal, I've used ajax. You send a request, get your data back and throw it in there using javascript, then show the modal. Then you can have the 'accept' button bind to a javascript event for a new ajax-call that actually deletes the row.
Not writing code a lot is a great reason to avoid an IDE for sure, especially an IDE that comes with a price tag. I use tmux in the embedded terminal of PHPStorm for many of the same reasons you mention, as well as to keep my irc client available but separate (thanks to tmux I can just close the IDE and reattach from iTerm.) As far as consistency, I definitely get that. Part of my switch to PHPStorm is that I was using AndroidStudio (still learning 'droid dev) and I've been writing scala and using IDEACE for that. Using PHPStorm gives me that same feel for that part of my work. It sucks to switch between 3 apps considering vim could let me edit any language I want pretty easily, but at least the experience is consistent. I do not believe it's worth paying for intellij's "ultimate edition" IDE which sounds like a good way to avoid switching apps for different languages, but that's another discussion.
I like using data- attributes that JavaScript can easily access based on which delete button you pressed.
Really funny -- you and I seem to have been following the same path for a bit. I first tried PhpStorm because I was really impressed with Android Studio, as well. (Huge improvement over Eclipse!) I'm excited for PHP's AST because I think it'll really give a boost to the PHP IDE ecosystem, which may slowly help improve PHP's standing overall. (Shrug -- we'll see, for all it's warts I still root for PHP). 
Setting the `PDO` instance to `null` does close the connection (following example is for MySQL, but you can do it similarly for others): &lt;?php $conn = new PDO('mysql:host=localhost;dbname=test', 'root', 'x'); system('mysqladmin processlist -u root -p'); echo 'Press any key to continue...'; fgets(STDIN); $conn = null; system('mysqladmin processlist -u root -p'); echo 'Press any key to continue...'; fgets(STDIN); And the output: [x@y z]$ php pdo.php Enter password: +----+------+-----------+------+---------+------+-------+------------------+----------+ | Id | User | Host | db | Command | Time | State | Info | Progress | +----+------+-----------+------+---------+------+-------+------------------+----------+ | 34 | root | localhost | test | Sleep | 4 | | | 0.000 | | 35 | root | localhost | | Query | 0 | | show processlist | 0.000 | +----+------+-----------+------+---------+------+-------+------------------+----------+ Press any key to continue... Enter password: +----+------+-----------+----+---------+------+-------+------------------+----------+ | Id | User | Host | db | Command | Time | State | Info | Progress | +----+------+-----------+----+---------+------+-------+------------------+----------+ | 36 | root | localhost | | Query | 0 | | show processlist | 0.000 | +----+------+-----------+----+---------+------+-------+------------------+----------+ Press any key to continue... [x@y z]$ Notice that the `PDO` connection (process ID #34) is closed when `$conn` is set to `null`, and this happens while the script is still running. What gets most people into trouble is that they don't destroy all references to the `PDO` instance. In other words, you can't just set the original variable to `null` and expect to close the connection if you've created other references to it by copying the original variable. This most often presents when you inject the `PDO` instance into a class and assign it to class property (e.g. for a DBAL wrapper or repository). Another example: &lt;?php class Foo { private $conn; public function __construct(PDO $conn) { $this-&gt;conn = $conn; } public function test() { global $conn; var_dump($conn, $this-&gt;conn, $conn === $this-&gt;conn); } } $conn = new PDO('mysql:host=localhost;dbname=test', 'root', 'x'); $foo = new Foo($conn); $foo-&gt;test(); $conn = null; $foo-&gt;test(); And the output: [x@y z]$ php pdo.php class PDO#1 (0) { } class PDO#1 (0) { } bool(true) NULL class PDO#1 (0) { } bool(false) [x@y z]$ You might expect that setting `$conn` to `null` would result in `$foo-&gt;conn` also being `null`, but that's not how PHP works; references are not pointers. Since there is still a reference to the `PDO` instance, the connection will be held open until either all remaining references are destroyed, or the script terminates, whichever comes first.
http://en.m.wikipedia.org/wiki/Haversine_formula
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Haversine formula**](https://en.wikipedia.org/wiki/Haversine%20formula): [](#sfw) --- &gt;The __haversine formula__ is an equation important in [navigation](https://en.wikipedia.org/wiki/Navigation), giving [great-circle distances](https://en.wikipedia.org/wiki/Great-circle_distance) between two points on a [sphere](https://en.wikipedia.org/wiki/Sphere) from their [longitudes](https://en.wikipedia.org/wiki/Longitude) and [latitudes](https://en.wikipedia.org/wiki/Latitude). It is a special case of a more general formula in [spherical trigonometry](https://en.wikipedia.org/wiki/Spherical_trigonometry), the __law of haversines__, relating the sides and angles of spherical triangles. The first table of haversines in English was published by James Andrew in 1805. Florian Cajori credits an earlier use by Jose de Mendoza y Ríos in 1801 The term *haversine* was coined in 1835 by Prof. [James Inman](https://en.wikipedia.org/wiki/James_Inman). &gt;==== &gt;[**Image**](https://i.imgur.com/7aX9sbA.png) [^(i)](https://commons.wikimedia.org/wiki/File:Law-of-haversines.svg) --- ^Interesting: [^Versine](https://en.wikipedia.org/wiki/Versine) ^| [^List ^of ^trigonometry ^topics](https://en.wikipedia.org/wiki/List_of_trigonometry_topics) ^| [^Great-circle ^distance](https://en.wikipedia.org/wiki/Great-circle_distance) ^| [^James ^Inman](https://en.wikipedia.org/wiki/James_Inman) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmapgit) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmapgit)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Voted (DateTime), but I think you missed out an interesting step - what about DB storage? It's very rare I get a date from form input, process, to HTML. Normally it's Get a date from DB, Process, HTML or form input, process, DB, or even get a date from DB, process, back into DB.
Thanks for the response! But I'd advise you to comment on the blog post that I linked as I'm not the author of it, he's just a friend in the industry, he doesn't use reddit so I said I'd post on here to see if I could get some replies from PHP devs. (I'm a ColdFusion dev myself). 
A great and thorough response. Thank you. In my personal test script, I ran sleep(30) after setting $db = null, and in sql server management studio monitored the connection. It did not close until the script finished. Note, in this test script it did nothing but connect to the database and then set $db to null. No other classes or references possible. Perhaps some db engines work differently? Or maybe it's a network thing (e.g. opening the connection to SQL server really opens a TCP/IP connection to a remote server on 1433, and as far as SQL Server is concerned it needs to allocate resources to a connection until specifically told to close by the client)?
I just noticed MS finally released an official driver for PHP 5.5, happy days!! It only took like 15+ months... 2 notes. 1. It is a preview release 2. Requires 5.4.32+ or 5.5.16+
If all you want is a confirmation that they want to delete something, put a JavaScript onclick event on the link to delete it. Make it return a JavaScript confirm() asking if they are sure. Once the confirm, the link will follow through and make the delete request. If they cancel, it won't. No Ajax or JQuery required unless you want to use it. I'm riding in a car on my phone, so if this doesn't make sense or you need more info I'll improve this answer when I get to a computer.
Also on mobile so I can't go into a lot of detail, but this is the correct answer 
I've literally just done this for a project I'm working on. /u/Ronburggundy was pretty close but there's an extra couple steps. Add the id to the delete link as a data attribute: &lt;a href="/modal/confirm" data-id="&lt;?php echo $id; ?&gt;" class="delete-row"&gt;Delete&lt;/a&gt; When clicked, store the id into a local variable which is outside of the click scope in javascript then launch your modal: var _clickedId; $(".delete-row).on('click',function(e){ e.preventDefault(); clickedId = $(this).attr('data-id'); $("#modal").modal('show'); }); Then, make a click listener on your yes button that does an ajax call to your service and send the Id for deletion. $('.modal-confirm .yes').on('click', function(e){ e.preventDefault(); var request = $.ajax({ type: "POST", url: "/delete-row", data: { 'id': _clickedId }, dataType: "html" }); request.done(function(data){ $("#modal").modal('hide'); }); request.fail(function(jqXHR, textStatus){ console.log('save fail'); console.log(jqXHR,textStatus); }); }); Also have a listener for the no button which should just close the modal. $('.modal-confirm .no').on('click', function(e){ e.preventDefault(); closeModal(); }); 
I gave [eclim](http://eclim.org) a try and it was actually quite good! I turned it off in the end though as it seemed to have a couple of bugs with regards to the files it needed to operate. I'd recommend giving it a try. It basically has a headless eclipse running and vim connects to it for code completion etc
You can build your own framework on top of symfony/httpkernel + symfony/routing + some IoC for handling services initialization (symfony/dependencyinjection or php-di for example supports even lazy initialization of services via proxy-classes). All magical stuff such as collection/loading plugins, dependencies and other stuff should be performed with IoC. And composer of course. See Silex as an example of such framework.
That's exactly what I am looking for (framework on top of HTTP abstraction and maybe routing) but instead of having to write it myself I was wondering if such frameworks already existed. Something built on top of two, three of the Symfony2 components doesn't sound too bad. I will further look into that. Thanks. Also: I'm trying to avoid DI/IoC containers for magic^TM reasons. I'm not per se against IoC containers, just not on this project.
You can create that structure yourself with silex, and i'm sure slim.
About damn time... I've been raising hell to everyone who would listen at ms for months.
In most cases, yes. If you're already using PHP as a templating language, no. If you're using PHP as a templating language and already post-processing your markup (e.g. HTML Tidy or similar), yes.
Silex allows you to use callbacks but doesn't demand it. You can also use controller classes and Silex also has controllers as services which allow you to use the DI container to construct your controllers with whatever dependencies they require. You can organize it however you want. Just pass it the name of the class method instead of the callback when you make your route. Also it's made up of components that you register as needed. Don't need templates then just don't register the Twig service provider. Or register your own template engine and use that instead. Not that you should use Silex but if you can't find anything else that does what you need you can basically roll your own structure with Silex.
woo hoo it only took the 2 effing years to change 1 line of code and recompile. edit - and naturally they wait until php 5.6 is out to release 5.5 drivers.
Had exactly the same issue and I built [Nectar](http://www.nectarmvc.com) that comes with a user authentication module ready to rock. Tried to make it as quick to get started as possible.
 function register(){ if($this-&gt;_isPost){ $error = false; //get model for user table $userAuthModel = new \userauth\models\UserauthUsers; //validate fields if(trim($this-&gt;_params-&gt;first_name) == ''){ $error = "Please provide first name"; } if(trim($this-&gt;_params-&gt;last_name) == ''){ $error = "Please provide last name"; } if(trim($this-&gt;_params-&gt;email) == ''){ $error = "Please provide email"; } if (!filter_var(trim($this-&gt;_params-&gt;email), FILTER_VALIDATE_EMAIL)) { $error = "Email not valid."; } if(trim($this-&gt;_params-&gt;password) == ''){ $error = "Please provide a password"; } if($exists = $userAuthModel-&gt;exists(trim($this-&gt;_params-&gt;email))){ $error = "Email already in use."; } //if no errors, proceed if(!$error){ //create user $userAuthModel-&gt;createUser($this-&gt;_params); //get user id $id = $userAuthModel-&gt;_conn-&gt;lastInsertId(); //get user record from database $user = $userAuthModel-&gt;getById($id); //create session for user $session = new \system\Session; $session-&gt;login($exists); } else { //send errors to the view $this-&gt;view-&gt;error = $error; } } //if user is logeed in, redirect them if(isset($_SESSION['user'])){ $this-&gt;redirect("/"); } } ಠ_ಠ
Right, that is sample module code. can you elaborate, please?
Most server monitoring tools only refresh at some periodic interval (usually something like 30 secs), so my initial swag would be that the connection *was* actually closed, and maybe you just got bitten by the UI not being current enough because the refresh interval overlapped your sleep. I would try verifying the connection on one or the other machine in real time using something like `netstat`. If it turns out that the connection really is being left open, and you're 100% certain that there are no references to the PDO instance, this is likely a driver bug.
Try out http://phpixie.com You can use only the modules you need, e.g. you can start with phpixie/core at first and add database and orm if you'll ever need them later on.
3. Supported Operating Systems: Windows 7, Windows Server 2008 R2, Windows Server 2008 Service Pack 2, Windows Vista Service Pack 2 MSSQL is kind of decent - but nope, not going to switch to a Windows to run web-servers just to be able to access it.
Thank you for the reference.. But i checked this already. How it can be implemented in real world PHP applications?
Thanks for the feedback. Yeah I've been using Zend for the past few years and I found I don't use 90% of the libraries available (can't stand zend forms). The code above I slammed out last night as the first module so its obviously not perfect. My main goal was to make something lightweight that included a CLI, a templating engine and DBAL since those are the main components I've used of Zend. I also want to reuse code from project to project. I've played around with Symfony, but I've found its still way more than I need for smaller projects and prototypes. Trying out ZF2, it took me 45 minutes to get through the first tutorial, which, coming from ZF1 is just way to much overhead to be productive I feel. 
That's REALLY BAD sample code. In no way should you be encouraging users to write code like this, especially in your documentation. Not to mention the fact that you offer this up as a download. * The controller should not be responsible for performing the actual validation logic. That needs to be abstracted away into a separate Validation class, as well as utilized from within the Model or a Repository class in which the Model belongs. * Errors should be THROWN and CAUGHT appropriately. * Why oh WHY is your controller determining whether the route request is a GET or POST? That needs to be determined beforehand by the Router. Further, a GET request on the /register URL should be processed in a separate Controller method from a POST request. There are only a handful of instances I can think of where GET and POST requests were handled within the same method. * Have you heard of [Dependency Injection](http://symfony.com/doc/current/components/dependency_injection/introduction.html)? Why are you not making use of this? * There is absolutely no good reason for you to be mixing a Session Class with the $_SESSION superglobal. That superglobal should not be used ANYWHERE except for the class intended to process it. Is this what system\Session is doing? If so, why are you checking to determine whether or not the user has been logged in through the superglobal instead of the Session Class? * `$session-&gt;login($exists);` appears to be a flat-out mistake. Did you mean to pass in the `$user` instance? There's probably a bunch that I'm missing, but if you intend to offer up example code or downloadable examples, you need to write better code. The biggest eyesore in all of this is your Validation. In every good and mature framework, there is always some level of basic Validation provided to the developer to leverage according to their needs. This example code - which you have available front and center - puts the onus on the developer to handle each and every piece of information separately on a case-by-case basis. Even Laravel's [Validation](http://laravel.com/docs/4.2/validation) class allows a developer to simply specify the rules in which all of the input parameters must follow. Hell, you're basically touting Symfony's involvement as part of your core, why not use [their Validation component](http://symfony.com/doc/current/book/validation.html)? Ultimately, the question I pose to you is this: What exactly are you solving with your framework that Symfony, Laravel, Silex, Slim - or any other framework, for that matter - falls short? You claim that your framework is intended to lower the barrier of entry and then step out of the way for the developer. That would be fine, if you actually provided the most basic tools that 99% of every decent developer requires to make even the most basic website. Doctrine and Twig do not a framework make. This needs a TON of work, and is nowhere close to complete.
Metrophp https://github.com/metrophp/ The templating is still kinda part of the system. I can implement Rain TPL as a template fragment handler, but it's best if the Metro Template still handles the start of a page. There's a lot of DI magic. Why? It's difficult to swap out components without it, or else you have to define every possible interface you could ever dream of and implement those before you ever start to code. Want to replace the entire output system? Sure, just look at the metrofw/output.php, change the _iCanHandle() line in the etc/bootstrap.php and link in your own template language from top to bottom. The benefit of the output is that it auto detects XHR requests and returns partial HTML template fragments or json serialized portion of the response depending on what the Accepts: header is. The whole idea of metro is that it gives you just enough to write your own framework. Or you can run with the defaults.
Thanks for the feedback. Yeah I started this 3 days ago. Its definitely not production-ready, but it is a side project that I'd like to make into something really cool. I'll obviously work on the sample code and look into symfony's validation component as well. I guess what I'm ultimately trying to do is take the workflow I'm used to from Zend, use newer components, and understand the system I'm working on from the ground up. I'm not really trying to compete with any other frameworks -- its more the workflow that I'm concerned with. I'm still deciding on what tools I want to include because I feel like that's part of what overcomplicates frameworks - when they try to do everything for you. But you're right, standarized validation would be a huge help. I guess user authentication is probably a bad first module to tackle, but its all a big experiment for me. 
Take a look at [Nice](https://github.com/nice-php/framework). By itself, it's pretty much what you've described, though it does rely on the Symfony DIC. You don't need to use closures for actions-- you can implement your own RouteCollector to make use of a stricter MVC style. [Here is an example of just that](https://github.com/terramar-labs/packages/blob/develop/src/Router/RouteCollector.php).
Most "modern" frameworks will let you take what you want leave the rest...there is no compulsion to use all the bits if you don't want to, and you can byo templates and ORM in most instances too. Don't discount the "big" frameworks. They may actually be able to do what you want.
So no then.
Windows only, closed source, think I'll stick with FreeTDS. It's not that either of those is a deal breaker in themselves, but combined, I see no reason to even consider trying them. PHP is most prevalent on non Microsoft based web server platforms (your typical LAMP stack but the M in this instance stands for MsSql instead of MySQL or MariaDB). I've often used a LAMP platform to work with a MsSQL DB base. Including a recent project where I architected and deployed a multiple node MsSQL 2012 instance using AAG's configured in a 2 node synchronous replica with a tertiary asynchronous replica. Guess what, I used a quick and dirty PHP script using FreeTDS to perform a good portion of my pre go-live testing. The fact that Microsoft is lacking in support for other products to interact with their stack is doing nothing except cripple them. In an environment where MySQL is now an Oracle product and the name Postgres scares a lot of people. Making it easier to deploy enterprise grade Wordpress/Drupal/Joomla/etc instances against an MsSQL DB backend would do nothing but help Microsoft's user adoption, however...
There is always [Slim](http://slimframework.com). And as the lead on the project I will of course suggest [Aura.Web_Project](https://github.com/auraphp/Aura.Web_Project). Aura is built with expansion in mind, but doesn't provide a lot to begin with, and easily migrates from single-action closures to full-on controller classes. (Lately I argue in favor of [Action classes instead of Controller classes](http://pmjones.github.io/adr), and Aura handles those as well, but that may not be your thing.) I think they both meet your described requirements for Controllers and Views, and they leave the Model work entirely to you.
&gt; You can use Azure instead. Or I can just use mysql or postgres database that don't require me to run a particular operating system on my web server. Although it's nice that they're doing official released to allow PHP to access MSSQL from their own operating system, the fact that they're in the mindset that "you've got to use a Microsoft OS on a webserver to access a MS DB" shows how far they still have to go. 
&gt; Still, you can spin up an Azure website with PHP configured and ready to go. No it's not. I like to compile my own version of PHP so that I can have all the extensions I want compiled statically, with all the config files set. I don't like to have to use someone elses versions that doesn't have all the stuff I want. &gt; I don't imagine PHP hosting is super high on their list of priorities. PHP runs about 80% of the worlds websites. I would have thought that might be on their list of priorities somewhere. &gt; Now if you're referring to Microsoft and their open source contributions, did you see what they've released recently? Nothing usable - I am totally excited about the fact they announced plans of open sourcing of C# and that it's going to get Linux and OSX support......but there doesn't appear to be anything to actually use yet. 
I agree with you on ZF1&amp;2. We did a lot of "corporate-y" type jobs with that but have moved on to Symfony2 Have you tried Laravel? It might feel good for to you. &gt; something lightweight that included a CLI If you want to hit something golden around the CLI. Spend a couple weeks with Rails. You will need some time to learn all the ruby-isms but the CLI there is by far the best I have used for cranking out a MVP. I'd love for something PHP to get to that point. Symfony isnt quite at the same level
I haven't tried laravel. I'll look into it. As for Rails/Ruby I've used it for a couple of small projects and can't seem to wrap my head around capistrano and everything that needs to be done to deploy a project. I've managed my way through it, but it wasn't pleasant. I love that I can just upload code with PHP and instantly see changes. I have a custom CLI script that I use in zend and find that most of symfony's cli commands are long and difficult to remember. Honestly, a port of Rails for PHP with a workflow like Zend1 would probably be ideal for me.
I didn't want to ruin the thread, so I created a [post](http://www.reddit.com/r/PHP/comments/2n7hmr/mvc5_a_new_programming_environment/) regarding the [mvc5 framework](https://github.com/mvc5/framework).
Going for blunt here, yes I'm aware of the huge influx of downvotes I'll get as a result. MVC is a presentation layer pattern. It's not how you structure your application, which is how you seem to be perceiving it. If that's what you want, go look on packagist for an MVC package. I'm sure they exist, although I don't have the need for an independent MVC-only package. On the other hand, you might not be sure how to describe the application architecture you're hoping to achieve. Laravel is popular for a reason, it's incredibly well written and encourages better code. If there's something you don't want to use, most of the components are available as individual packages. All that said, spend some time reading and figure out what you really want, I'm not convinced that you know 100%.
Honestly, if you have a choice, you should probably avoid using CodeIgniter anyway.
&gt; I have to bind things? I think the most fun I had learning PDO was when I didn't realize you had to bind integers as integers explicitly using bindValue() with PDO::PARAM_INT. In a strongly-typed language, it would be obvious, but since PHP is loosely typed and you can normally pass any variable directly into the query, it never even occurred to me, and all SQL was spitting out was "invalid syntax near '5'" or something. Good times.
Good point well made. ;)
With the recent open sourcing of .net, couldn't you run SQL Server on a Linux / FreeBSD box?
Assuming you only want to update resources when the player refreshes the page or performs some action, you could just run a refresh function that calculates the player's current resources and updates a datetime field in SQL. Next time the refresh function runs, it would compare the timestamp associated with the last refresh to the current time to determine how many resources you would have accumulated. So for example, if I'm producing 7 apples per minute and had 210 apples as of 16:32, then if I refresh the page at 16:34, 2 minutes will have elapsed, so I should now have resources.apples + (7 * 2) = 224 apples. The refresh function would store the new total and the current time for future reference, etc. Scoreboards make things a little more complicated though, because the solution I suggested would only update resource information for players who are logged in, while a scoreboard would require up-to-date information for all players. Probably the simplest approach would be to just update all players when someone requests the high scores. In the interest of scaling, you could use the refresh timestamp I mentioned above to only refresh players who haven't already been refreshed recently, otherwise a dozen players requesting the scoreboard within the same minute would result in a lot of redundant mass refreshes, which generally isn't something you want to do with your server. Another piece of advice though: I know this is a PHP subreddit, but if you haven't written a lot of code already, I would strongly recommend looking into Node for your back end. Node is an event-driven webserver written in Javascript that's much better than PHP at handling a large amount of small requests like this, and with socket.io, you can easily push updates to the client in real time, as opposed to waiting for a page refresh. It's been very popular for developing multiplayer games lately. Anyway, I hope that helps. Let me know if you have any questions and I'll try to get back to you.
I'll give this a shot and report back in this thread. May take a few days.
&gt; they list four major projects that are open sourced: Great. So what? They said C# was going to be usable cross platform and there's no sign of when that will actually happen. &gt; That doesn't mean that you can't spin up a PHP website on Azure. As I said, great, I can give money to Microsoft because they don't want to make their database usable by operating systems that they don't control. I don't want to spin up a website on Azure - I have a website already thanks. If I have a business preference to use MSSQL I don't want to have to change hosting platform just to be able to use that. 
Wat. Do you think SQL server has been open sourced or is runnable on Linux?
&gt;Great. So what? They said C# was going to be usable cross platform and there's no sign of when that will actually happen. Seriously? They are making strides right now and they're merging with the mono project to make that happen. 
http://en.wikipedia.org/wiki/Vaporware &gt; "Vaporware is often announced months or years before its purported release, with development details lacking. ... At times, vendors are criticized for intentionally producing vaporware in order to keep customers from switching to competitive products that offer more features."
Let me just start by saying, what is the [closure class](http://php.net/manual/en/class.closure.php)? What does it do, and why is it useful? What could this class be possibly used for? Closure { /* Methods */ private __construct ( void ) public static Closure bind ( Closure $closure , object $newthis [, mixed $newscope = "static" ] ) public Closure bindTo ( object $newthis [, mixed $newscope = "static" ] ) }
&gt; If my project ends up taking off, I may in the long run convert it over to node, but for now, I'm satisfied taking it on with PHP. Unfortunately, there's no easy way to convert from PHP to Node, since they're fundamentally so different. If I were in your situation, I'd learn and write it in Node in the first place. Most of learning Node is learning Javascript, and that's very well documented. &gt; Would you recommend relying on CRON for some tasks, or would it be more reliable to wait for page refreshes? It depends on scale. If you're getting dozens of requests for the leaderboards per minute, then you'd probably be better off just running mass refreshes on a cron job, but for a small game, that's not going to be efficient. I'd wait to worry about that kind of optimization.
You don't have to wait until monday for the morons. They're here all week.
A valid argument. I'll take a look at node and see if I feel it suits my situation better. I was thinking as an alternative to building a framework, I could piggyback on a simple CMS. If I were to continue with a PHP structure, would you recommend a custom built framework, or go with an existing simplified CMS? What would you call a big game? A few hundred daily users, or a few thousand? More? Less? I know it's really a "much of a muchness" situation, but I'd like to hear from your point of view what would classify as big.
Good sign.
Yeah you should always be using an IoC container, even if it doesn't do automagic dependency resolution. At a MINIMUM, you should be using Pimple to wire up services in a central location.
I just had this discussion/argument with some of my juniors. I ended up telling them they could use vim if they could explain the purpose of every class and method in the entire codebase, and otherwise they were required to use phpstorm.
Thanks for all your help, it's really been enlightening. I think I'm going to go ahead with a php project to start with since, as you say, easier learning curve. Once I'm more comfortable with SQL and database management, I'll look into moving on to node. I can't remember if I said this, but this will be my first SQL project, so I'd like to at least get a hold of it! I figured as much regarding the CMS. I have *some* experience with Drupal, as I use it to run any websites that I have at any one time (and it's very good at doing it) so it was a passing thought. My main concern is in session handling and security, which is where the ready-built system became tantalizing! If I could reach a few hundred players, I'd be happy. Very happy! So I don't think it's going to be a big problem for me at this point in time. As a final thought: If I were to develop the full game and have it actually go well, I could theoretically export the database and build the node version off the same data. Sure, it'd be reinventing the wheel, but it would mean that I wouldn't have to lose *all* my progress, so that's something to look forward to! Besides, the first version of the game will likely be relatively simple. Again, thankyou for your help. Rest assured that your pressuring to move onto a newer platform have not gone unheeded, they've just been put on the backburner until I am more confident in my skills!
&gt; $session-&gt;login($exists); appears to be a flat-out mistake. Did you mean to pass in the $user instance? No, that comes from here. if($exists = $userAuthModel-&gt;exists(trim($this-&gt;_params-&gt;email))){ $error = "Email already in use."; } Which is... much, much worse.
I get that people have jobs and all that, but I've never thought that PHP on Windows Servers under IIS was a particularly good fit. And PHP with MSSQL is similarly uncomfortable. These things seem to just belong to different worlds. I never understood why people want to squish them together. 
I use PHPUnit and Codeception with GitHub, TravisCI, Coveralls.io, Scrutinizer CI, and Slack for my team. 95% coverage is the target, 85% is the minimum, 75% triggers rejections of commits. 
Feel free to go to freenode irc. Look into #codeigniter and watch the frequent idiots make moronic questions about php 24/7/365 xD. No wonder the framework died. The lunatics are running the asylum!
I found it a little difficult to get used to. I can't recall specifically, but there were some quirks that caused me to uninstall it pretty quickly.
it gets better when you learn half of them are "sysadmins" too.
How does that make sense? Surely it costs more (in overheads) to strip out html comments, than for php to recognize a comment?
DI Containers are not magic. Their logic is well documented and very open.
Please go read any of the other 500 posts asking this same exact question.
"Also I want to use an IDE, should I use Sublime Text or Netbeans?" Now this post feels complete.
As Netbeans IS an IDE, should you not have said Notepad++ or something?
Same reason you have Internet Explorer? To download Chrome :)
I have been waiting for this forever. I have BizSpark credits and yet I need to go to AWS for my Database needs. ClearDB 20 MB database is a joke so this will come handy. Is there decent documentation on things one needs to take care of while moving from MySQL to MSSQL for production databases? 
Slim, not Silex. Silex is bloated.
I considered but then I thought saying Netbeans instead of PhpStorm would be enough blasphemy ;)
Phalcon could help you : http://phalconphp.com/en/ It's a complete framework executed as a PHP compiled extension. You can use all its components or not, you will decide which ones are in the dependency injector container. You can extend it, using PHP of course :) It's very modular and you can use it in your way. 
Start with http://www.phptherightway.com/ Lot's of very good best practices on how to right robust, extensible and maintainable PHP code, which is a requirement for a framework.
That really does look great. I'm now wondering how easy it would be to port the Vim plugin to Sublime Text.
Thanks for showing me, that the .data() method works like that!
Ouch! I don't disagree with your technical points, but is this how you do code reviews in person? `:-O` 
+1 for putting your code up in this sub! However I suspect /r/PHPhelp is a better place for it. 
If PHP were introduced today, how would it fare against other web languages? I'm genuinely curious because people seem to have an intrinsic dislike for it despite it maturing a lot over the last few years. Is that dislike still justified?
It would stack up nicely. OO, namespaces, mature language with reasonable speed. If introduced today though it would not enjoy the same amount of code and tutorials that exist, which might pose a problem.
No
PHPDoc is not deprecating the @todo tag so I take it that they're fine with its use. You may want to check out PSR-5 (proposed) https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md
I could see people being unhappy about PHP standard library. Even though the language is nice and OOP, most of the standard lib functionality is exposed to you as global functions in the global namespace (e.g. `htmlspecialchars`, `addslashes`, etc) with pretty inconsistent naming conventions, which hints on pretty huge language design issues. Although I still feel like PHP would have it's place today, even if it was just introduced. Other popular scripting languages, such as Ruby or Python, miss quite a few features of PHP (namespaces, interfaces and abstract classes), which makes it somewhat attractive to huge OOP fans, who for some reason prefer dynamically typed scripting language instead of Java or something. Not a huge demographic, but... yeah.
You do realize that they invented autoloading in PHP so you could have everything, but only spend resources on whatever you use :P
vim can do everything. If you read all the answers, you're now certainly aware that it can do all the things. Smart file opening (NERDTree), autocompletion, debugging, refactoring as some answers point out. But you need all to set it up. And, IMHO, it will never will as integrated as it could me. IMHO. That's why I choose PhpStorm, with the IdeaVIM plugin, and be done with it. Never looking back. Doesn't mean I don't use vim! Certainly "for all the other stuff", but not when I work on my "more than 1000 files in a project". As you probably know, PhpStorm (or IntellJ for that matter) really defined the "integreated" way. Not just PHP autocomplete. It parsed your PHP and "knows" that stuff. It can autocomplete your SQL too if you tell it the database connection to learn tables/columns. And you have the same level of language introspection for JavaScript too. I tried to get all of this working in vim at some point but I gave it. Just not worth the hassle. Day to day I use these things all the time PhpStorm. And vim. Just for different tasks.
People still use bbcode?
I always thought it was a weird from the first time I saw it. It is just a selection of HTML tags, but with angle brackets replaced by square brackets. I just don't see the point of that - it is no easier to use, less easy to get wrong or prettier to look at.
It doesn't matter which is more overhead if neither is statistically significant. Did you benchmark it? Unless you're seeing several milliseconds or more added to each request on a super high-traffic website, you're talking about micro-optimization.
Smacks to me of developers who were not confident in what they were doing. There is still no reason, using HTML tags, why the bold, italic etc tags could not be identified, then all tags stripped out anyway, and the allowed tags put back into the correct places.
Right, but in a way that does way to much in a much more convoluted way than is needed.
Does the "for PHP 5.6" addendum have a specific rationale? Why would a BBcode parser benefit from being PHP5.6-only? It's not like the OpenSSL changes, ZipArchive::setPassword(), and a few deprecations have much impact on any implementation. (I'm not saying running a BBcode parser via phpDBG couldn't hurt...)
In the web world MVC is short for Front Controller Pattern. Although I agree with you 100%, I've been trying to change the course of the "MVC" river for a decade and it hasn't budged one inch.
Again, why use autoloading for two (2!) files (= classes) of actual business logic. If I use Symfony, Laravel, etc. as a dependency I would end up with autoloading for the whole framework thingy. But the actual business logic doesn't need autoloading. For big, complex, enterprise-level applications: sure, autoloading is awesome. For a small, minimal(!!!) RESTish JSON API? WTF? .That is by no definition minimal (as it says in the title).
they can of course. its just far more work then just disallowing them and allowing bbcode ... with bbcode nobody tries class='xx' etc, noobody would complain if it doesnt work, with html they do we tried it multiple time and it always boiled down to gving a better usability for users &amp; less support if you just use some magic macro instead of pure html.
Hm, yes. I didn't find that in the docs at the first glance, my bad. I should have been more thorough. Although: ServiceControllerServiceProvider? WTF? Coming from an Enterprise Java that sounds like something that could be found in Spring [1]. PHP used to be for minimal^TM at one point. As I mentioned somewhere else, I have the feeling PHP frameworks are trying to go enterprise and move towards things like Spring, DropWizard and whatnot. Sorry for the slightly off-topic rant. Thank you for correcting me on the controller misunderstanding. Thats what I pretty much was looking for :) [1] [SimpleBeanFactoryAwareAspectInstanceFactory](http://docs.spring.io/spring/docs/2.5.x/api/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.html)
You could say the same things about Markdown that both the StackExchange network as well as reddit (just to mention a few) use. &lt;a href="http://www.reddit.com"&gt;reddit&lt;/a&gt; gives you nothing, while `[reddit](http://www.reddit.com)` does. &lt;b&gt;bold&lt;/b&gt;, &lt;strong&gt;strong&lt;/strong&gt;, &lt;i&gt;italic&lt;/i&gt; etc., does not work, while `**bold**` and `*italic*` does. Markdown achieves what BBCode didn't, in my opinion, which is to deliver the same results, but make it *clear* that it has nothing to do with HTML and is parsed individually.
No. Front Controller pattern and MVC are different things. One can be used without the other. Yes, in the web world they are used together most times. But that does not mean they are the same thing. The fit together perfectly, nonetheless MVC is NOT the front controller pattern. And yes, I think I didn't make my expectations clear enough. Our understandings of minimal seem to be quite different. I'll try better next time. Sorry ;)
Autoloading and manually loading both take the same amount of time, so you might as well do autoloading anyway. By the way, I disagree with your premature optimization. If your website becomes so popular with high traffic that your framework choice turns out to be, you're going to be in a good mood for changing the framework anyway. And you'll likely be reaching for tools such as HHVM before changing the framework anyway.
You're missing the point though, a framework providing developer convenience is only a side effect of the true purpose, that is to ensure that everyone working on a project has a consistent and standard way of accomplishing common tasks. In other words, it really doesn't matter if you feel like connecting to a db (or some other common task) using framework X is more convoluted than needed, as long as every developer working on the project does it the same way. Having a single standard way of doing things is far preferable to allowing 10 or 15 developers to each come up with their preferred way of doing these tasks (and each of which think their way is "best"), which then results in an unmaintainable mess of code because you have 15 different ways of connecting to the db used in various places. 
It's not necessarily about performance or speed. It's about the amount of code and complexity I introduce. Yeah, autoloading isn't exactly black magic, but it's nevertheless more code. More code increases the chances for more bugs. More code means more dependencies. More code means higher maintenance. I know I am being anal about that minimalism and "less code". Also I should have mentioned that in the introduction. I somehow seem to f*cked that up.
I didn't want to give them the whole thing so they could figure it out on their own :), but what you posted is pretty much what they have to do. Using a variable outside of the scope is good as well. *thumbs up*
Yes but the dynamic route setup is the actual tricky part =) You won't be able to do it with a plain StupidHTTP server since as soon as you start its loop you can't really communicate with it. Illusion overrides the default socket loop to also accept commands from the client. How it works is create 2 pairs for sockets for communication between client and the server. the commands your un are pushed through the input socket to the server, which parses those and performs the specified action. it then writes the result (in our case the built url) to its output socket, which is read by the client. Take a closer look =) 
Interesting. Thanks.
Its not my code this is merely a curiosity post.
According to who? &gt; Errors should be THROWN and CAUGHT appropriately The keyword in this is "appropriately". In the case of validating an object to determine whether or not it already exists, an Exception should absolutely be thrown and handled by the developer as they see fit. Handling empty fields, character length requirements, etc. as a separate Exception would certainly be overkill. But to suggest that all validation errors be treated equally and fail silently as a matter of "best practice" is laughable. Just take a look at how [Sentry](https://cartalyst.com/manual/sentry/2.1\#sentry::createuser\(\)) handles validation for certain fields and objects. Missing fields that the package requires when creating new User objects rightfully throw an error, as those particular fields carry much more weight than others and it should be up to the developer to handle how those Exceptions are treated.
I'm currently using the PHP-based one (assuming you mean [this one](https://github.com/vim-php/phpctags)); I'll give the patched one a go — it's bound to be faster at least. =] I wonder how class inheritance works — or rather, how far it'll go.
Urgh, 2005 called and they want their code back... [http://www.phptherightway.com/](http://www.phptherightway.com/)
&gt; &gt; how well does this scale to bigger code bases? &gt; So how fast you get a response depends on how many files it has to read/how much source it scans, before it finds the data or give up. That really depends, then; I'm usually working on quite a large codebase that is based on ZF1, so that's a *lot* of code to slog through. I'll just have to give it a go. &gt; &gt; Can I look at $a-&gt;foo() and see exactly which foo is used.. &gt; Not sure if I get this right. But the way it work is by first figuring out the object that $a holds at the point the auto complete is requested. Does that answer your question? I think it does. What I want to do is, with my cursor somewhere on foo, hit `^]` and end up wherever that method was defined. So if `$a` is a SomeClass, I'd like to end up there, if SomeClass does not define foo() but extends SomeOtherClass which does, I'd like to end up in SomeOtherClass. Does that make sense?
It's certainly not *bad*, as others have pointed out, it's just *not really Vim*. How bad that is depends on your own workflow and Vim-fu, I think. Just give it a go.
"secure" and "md5" do not belong in the same document. md5 is no better than plain text and hasn't been considered secure for a very long time now. There's nothing secure about this. Additionally, your check_input function is both dumb and useless. You don't run every escaping function known to man on every piece of data (especially when you're then using prepared queries) - you'll end up with data that's both double-escaped and blows up in random ways. You escape data based upon two factors: 1) Where it came from. In this case it's request data that's been pre-decoded by PHP, so there's no real escaping required - altho you may choose to limit the characters available for usernames. 2) Where it's going. In this case it's either going into a prepared query or being run through a string manipulation function, so you don't actually need to do anything to it. Please do the world a favour and remove this trash code from the Internet before some poor newbie does a copy-paste of it. Edit: Don't escape all the things all the ways!
phpBB does lol
Not sure why you're getting downvoted — you're raising valid points. I am, in fact, not 100% sure if I want to turn Vim into a full-blown IDE; I'm pretty sure I don't. I do, however, want to have some IDE-like functions in Vim, and I'm mostly figuring out how far that can go. Subtle difference. If Vim emulation in IDEs would be better, I'd be less reluctant to just switch to those. As it stands, however, it's still lacking. Maybe it'll get better over time, possibly helped by NeoVim.
A few things: - Why use "mysql_real_escape_string" if you're going to use prepared statements and bound params? - Your "check_input" function would severely mangle incoming data. Please look into something like [filter_var](http://php.net/filter_var) for validation and/or filtering. - I'd also advise looking into bcrypt for the password hashing. MD5 is *way* too easy to reverse. - Hard-coding credentials in your application is a bad idea. Please look at something like [dotenv](https://github.com/vlucas/phpdotenv) for loading these dynamically - As your current check stands an admin cannot access the "user.php" page And yes, the overall quality of the code leaves something to be desired
&gt;I think it does. What I want to do is, with my cursor somewhere on foo, hit ^] and end up wherever that method was defined. So if $a is a SomeClass, I'd like to end up there, if SomeClass does not define foo() but extends SomeOtherClass which does, I'd like to end up in SomeOtherClass. Does that make sense? Yes. it is quite possible, as it uses Reflection API, so that will take care of finding the correct class in which the foo() method is defined. You see, this is where something like this can beat things like PHPStorm, because it can work in the context of the project and can use the introspection features of the Language itself, which enables implementation of powerful features reliably. If you find any difficulty in trying it, please feel free to message me. 
I'm not kidding, that does sound pretty cool. Doesn't have to be procedural or one file, but I like the idea. So, yeah, thank you!
Might be worth contacting https://scrutinizer-ci.com/ see if you can get your parser available on it as a tool
There are a few people on this sub who don't like me. Probably because I'm an asshole. It has to be a factor. :) Good luck with it, though! IMO you're better off with something like PHPStorm, as it is better for productivity and accuracy than Vim, because it's able to work project-wide, refactor, etc. But you need to find what works for you. 
Not sure if we are on the same page. What i meant is throwing exceptions should be done in exceptional circumstances. Invalid data entered by user is really not that exceptional, so when it comes to UI - most of the time Exceptions are inappropriate in this case. When it comes to validation failures inside business rules or cases when data integrity is at risk due to some unexpected value - an exception is the way to go. The quoted piece of code in the top comment deals mostly with UI level validation, so throwing exceptions is not necessary.
&gt; I can pretty much trust it to refactor ALL the variables I wish this was my experience with PHPStorm. It never seemed to quite catch all of them, or the references to them in other files. Like, refactor naming a public property on an object, one would think it would change its reference everywhere in the codebase, but it never did that for me.
Why are we still talking about IoC?
some of these checks are definitely "notice" level items, that being one of them. The use of those constants could be ambiguous as their content could change based on the PHP version and how they're used. It's a minor issue, but one that could cause problems (see the differences [here](http://php.net/manual/fa/language.constants.predefined.php)).
It handles the hosting stuff for you. So after jenkins, you push to the heroku branch and then its all done.
Scruitinizer performs a lot of the same checks (and then some) but the target of this is for those needing an internal tool, really. I highly recommend these services if you're looking for a SaaS solution though: - [Scrutinizer-CI](https://scrutinizer-ci.com) - [Code Climate](http://codeclimate.com) - [Codacy](http://codacy.com) They're much more robust and do other quality checks too.
&gt; For literally two classes ( = files) Then why are you even asking for a MVC framework? By the definition of the files you linked to yourself, an MVC "framework" is overkill and unnecessary. Sounds like the problem isn't you're definition of "minimal", it's your definition of "framework" Also, I STRONGLY suggest you get out of this mindset that the infrastructure you build your domain on top of has to be as thin as your domain". So what if a framework comes with templating and caching and an ORM? Don't need them? Don't use them. It's not like these things slow down performance if they are not used. At MOST, they consume a couple hundred kilobytes of space on your hard drive, which is not a reason to immediately dismiss a bunch of useful tools.
Could you provide an example of where this can cause issues? My rule is that all file references in code MUST be `__DIR__` relative, because everything else is unreliable (especially in CLI) and only few people know how non-absolute path references in PHP actually work (in particular how the current working directory, the invoked script, the including script and the include path all influence path resolution.)
Yep, thats a great looking tool. I was talking about this on Twitter yesterday and it looks like http://lukasz.cepowski.com/projects/mock-http-server is fairly awesome too, even if it could be "modernized" a bit. I would prefer to see the two could be combined (use StupidHttp instead of this [httpd script](https://github.com/cepa/mock-http-server/blob/master/bin/httpd) ) instead of just bashing out a half-done product in less than 24 hours. The conversation started after using Go a bunch, as it has some awesome tools for this. https://gist.github.com/philsturgeon/29a75ec4ec3043f87d9f That is the sort of system I'd like to build, by improving and using existing tools. Dracony has built a prototype, but it is definitely premature to release it so quickly, and to ignore all other code out there.
Well it's not like I didn't write tests for it =) It pretty much does one thing: setting up routes in StupidHTTP which comes down to multiprocessing and some socketing, and that part is tested. StupidHTTP has its own tests for actually serving stuff. What I guess it still needs is parameter assertions, like setting expectations for headers, parameters. That might be the next step
I think your last point there is the key...it can be confusing how they're working (and possibly misused), hence the lowest level of severity. Ideally, you'd be using full, known paths to files to reduce the ambiguity.
This app is complete shit. There is a lack of a installer and wasted 4-5 hours of time for me just to figure things out. Still never worked out. The only documentation on how to install is about 4-5 sentences that the developer wrote in 5 minutes.
&gt; Ideally, you'd be using full, known paths to files That's far from ideal.
Just give every line of your code 4 spaces before, and it will be ok. i starts on the fifth line. And you probably should not share your site online, specially accompanied by sensitive code. 
What's funny is my Reddit app displayed all your HTML properly. I had to actually open your comment in a browser to see that it didn't render the anchor, bold, italic, etc.
This isn't a PHP problem, it's JavaScript.
I've tried drupal7, using domain access, translation, and ecommerce modules. But it gets complicated once you install these modules together and get unexpected errors. Also, the site management is also not as user friendly.
It doesn't have to be free, I don't mind paying for it as long as it's a good solution.
Maybe his old one stopped working. :)
Have a look at https://www.pimcore.org/ 
ExpressionEngine and a few third party plugins would probably get you where you need to go. [ExpressionEngine](http://www.expressionengine.com) -- [Third party plugin directory](http://devot-ee.com)
Most of this is out of the box with [Croogo](http://croogo.org/), though the one thing I know isn't in there is an eCommerce plugin (shouldn't be hard to build with omnipay/omnipay though). I know the devs are working on porting it to the latest version of the framework as well, incase your showstopping issue is "omg arrays for data".
&gt; I just don't see the point of that The point is that it's not parsed by a browser as html.
Story of my life. I work at a hosted forum company and we've been considering phasing out bbcode for probably five years... the problem is that it's been in use for 14... making it difficult to tell the users that they all have to change how they write posts. Luckily there are several bbcode+html WYSIWYGs these days that would assist the transition... one day they're writing bbcode, and the next day it's HTML with the same interface.
Yeah, I hear you. Domain Access is an absolute beast to get running smoothly. I'm actually trying to translate one domain in a Domain Access site currently. It's a lot to wrap your head around, for sure.
First off: cool project. It's too early for advises of course; and it likely does a sufficient job with uncovering common pitfalls. The detection rules maybe should become actual rulesets however; the direct subnode comparisions won't permit much introspection else. Some of the checks are obviously hogwash. Luckily most target nikic/ php-parser and composers autoloader (right on!); and Parse can't scan .phar bundles yet. But as for actual early test feedback: * As said before, `__DIR__` is probably more reliable than the non-relocatable `include("$_SERVER[DOCUMENT_ROOT]/incl.php");` workarounds. * `exec(sprintf(escapeshellarg()))` combos probably don't warrant warnings. * The `NotIdentical` test trips over `null !== $expr` variants. (And btw, context-unreflected identicness-checks aren't much wiser than the opposite extreme.) * Curb the dated "Avoid use of $_REQUEST (know where your data is coming from)" meme. Doesn't correlate with contemporary PHP and code. (Though my `$_REQUEST-&gt;has("title", "description")` use is an edge case; the origin is well known anyhow.) * The `exit` prohibition is an unneeded stylistic rule; it's eventually detrimental to safe code flow (think of `exit(header());`). Foremost I'd beg for a reformulation of the "Don't use `mysql_real_escape_string`" documentation note. We all know what's being meant, of course. But on the off chance that some newcomer stumbles upon Parse, this is just another whisper game going awry. But again, this is a brilliant project. Just needs a few more rules of course, some refinement I guess. Extending the static analysis into a variable-flow / taint checks, it might easily outdo common IDE checkers.
First, this is Javascript, not PHP. Second, your loop isn't written correctly. It should be: if (formulaire.tick.checked == false) { alert('Please check the box'); } else { formulaire.submit(); } Third, I would write the loop inverse to what is written now: if (formulaire.tick.checked) { //submit the form } else { //show your alert message } Fourth, you only need to declare your script type if you are writing under pre-HTML5 standards. If you are working in pre-HTML5, the declaration is written as &lt;script type="text/javascript"&gt;, not as you have it written now (script language="javascript" was deprecated LONG ago)
Thanks! I'll give this a shot. 
No problem. Let me know if fixing the loop syntax solves it.
&gt; Ethical hacking is my passion You seem like the kind of guy that spends a summer in a rowboat and thinks he's a Marine. With code like that, it's doubtful you're hacking into much of anything at all.
What are you referring to? On my Android device I get presented with a mobile view that's far easier to read...
if you are going to flag something for a warning, then you *might* want to make sure you aren't using it yourself. (@include_once __DIR__ . '/../vendor/autoload.php') || @include_once __DIR__ . '/../../../autoload.php'; 
what's even better, OP uses \_\_DIR\_\_ in their code
So it doesn't seem to bring up the box anymore when. Please understand I am not educated with code one bit. Any tips would be much appreciated! This is what I have now. I swapped them. if(formulaire.tick.checked == false) formulaire.submit(); else alert('Please check the box');
There's my Decoda library. It handles most use cases. http://milesj.me/code/php/decoda
Thanks for the plug :D
I think the desktop version is too narrow, so much wasted space on either side.
Check out Craft: http://buildwithcraft.com You won't get true multi-site but you'll get the majority of the other features and it's a joy to extend.
TL;DR MVC is evil, omg what to do!? Lots of acronyms that don't help omg still don't know what to do
I'll try to argue why I disagree with the author: A web application stores state in the session data or in the database (depending on the level of persistence needed). I don't understand what is wrong about that or why that does not match with server side MVC (rails and others). Also there is no need to update the views when the data changes. The web works with views that are generated at a certain moment in time. There is no need for updates, nor is it expected (only if you want to fake a desktop application). All code that does not relate to data handling (often not a lot) can reside in libraries in almost all frameworks. Libraries that can easily be included (and managed) with tools like composer. Logging can easily be achieved in filters or event handlers in most frameworks. This article (and the preceding article) must have been written with some problem and corresponding solution in mind. I can imagine that the author is trying to mimic a desktop application or some other real-time experience (web-mail, game, etc..) and is frustrated that MVC is not the answer. I know that for most (boring) web based administrative applications it is an ideal tool to organize your code. But then again, this is also just an opinion. :-)
Quick! Separate your concerns to defeat the evil!!!!11
Haa, haa haa! Busted! This was all an undercover sting. Better pack your bags because you're going to the big house. A whole week where you can only read /r/ASPNET 
Because you may want one API to parse the various flavors of RSS/Atom for you transparently.
What part of that is problematic? Especially seeing as the part of the heading that's blue is actually a link...
I don't get what's not transparent about those and the API can do all of them.
p {padding:15px;}
I feel like if they don't want to use a lot of outside code, they're going to be equally unenthusiastic about installing an entire extension. ;)
To add to this - I find SQL Server to be superior to MySQL and if wasn't for licensing I would probably use it for more of my projects - but that's just my opinion.
I was considering forking and fixing that one typo for this guy, but I don't see the purpose of this class too much.
I can only agree with this post if you only read the article and don't plan on doing anything but that. His post isn't a, "MVC is bad use these instead" article. It's an explanation to why MVC isn't one-size-fits-all and that there are different concepts that can be taken into consideration in its stead, despite their own set of problems. The links provided for each pattern are more than sufficient enough for you to go ahead and learn about about them more and even possibly incorporate them into your own projects.
Best way to create 'forgotten password' functionality? :p
&gt; A web application stores state in the session data or in the database Well, yes and no. We're talking about two types of state here. Persistence isn't what I'm talking about. Yes, that's state, but that's not the problem. What I'm talking about is the state of having a specific View instance being bound to a specific Model instance. Such that when the model is updated, the view is updated in turn automatically. That sort of state isn't persisted (it would be too expensive to even try). &gt; Also there is no need to update the views when the data changes. Ok, that's a fine assertion. But then you're no longer talking about MVC the pattern. You're now talking about the concept. Which is quite a bit different. &gt; All code that does not relate to data handling (often not a lot) can reside in libraries in almost all frameworks. Try not to view it as data handling. Try to view it as persistence. Conceptual MVC fits the CRUD applications (create-read-update-delete) *fairly* well. But it breaks down hard beyond that. Once you have something that's not persistence, where does it fit? If you were creating a shopping cart, and had complex logic around checkout instructions (such as discount codes), where would you put that? The pattern says "Model", but that doesn't do us any good. We'd wind up with a hode-podge of unstructured code because there's no "better place". &gt; Logging can easily be achieved in filters or event handlers in most frameworks. Because you can find a place to push it, doesn't mean it belongs there, and doesn't mean the core architecture isn't flawed. &gt; This article (and the preceding article) must have been written with some problem and corresponding solution in mind. I can imagine that the author is trying to mimic a desktop application or some other real-time experience (web-mail, game, etc..) and is frustrated that MVC is not the answer. Check out the [MVC Tag on StackOverflow](http://stackoverflow.com/questions/tagged/model-view-controller). There are 2 basic types of questions there: people who have no idea and are asking framework-specific questions, and people with real-world problems that aren't clear how to solve with MVC. I would highly suggest you read Thomas Kuhn's [Structure of Scientific Revolutions](http://en.wikipedia.org/wiki/The_Structure_of_Scientific_Revolutions). It goes into good detail about how we get used to flawed systems because they are better than the alternatives, but then refuse to let go until there's a revolution. MVC works for you? Well, then either you really are that lucky/good (in phase 2, which is awesome, not an insult at all), or you've convinced yourself that you're fine. Either way, awesome. But it's not working for a lot of people. It's not working for a lot of applications. If it was, we wouldn't see every single bloody framework take a different spin on it. If it really worked, we'd see predominant versions that solve problems. But we don't. Instead, we can see problems. We can see the cracks. And rather than patch them, we can see better approaches. So what I'm trying to do is demonstrate the cracks. Show where the problems exist. And rather than showing how to work around them (like so many have before), show how to architect so you don't have them in the first place. &gt; I know that for most (boring) web based administrative applications it is an ideal tool to organize your code. It's *a* tool. It's far from ideal for all but the most trivial of applications...
I'm not saying it's something you should be doing, but we all know it's going to happen anyway. There are already several repositories demonstrating some of these different approaches(adr, hmvc) to the same concept. If you were to ask me personally, I'd consider these other implementations a rehash.
Also the point of markdown is that it is still supposed to look relatively neat and make sense even when *not* parsed to html. To that end, markdown makes a good attempt. So yes, I agree it does do what bbcode didn't. 
HTML is a moving target. Even if you're careful to clean it of anything which is harmful, what isn't harmful today may be harmful tomorrow. When you control the language used to generate the markup this isn't a problem.
Looks like you're still missing a bit of the syntax, don't forget the curly braces: {}. Copy exactly how it's written above.
&gt; What I'm talking about is the state of having a specific View instance being bound to a specific Model instance. Such that when the model is updated, the view is updated in turn automatically. Maybe I'm misunderstanding something. This is not a requirement of MVC. V doesn't care about M. &gt; If you were creating a shopping cart, and had complex logic around checkout instructions (such as discount codes), where would you put that? The pattern says "Model", but that doesn't do us any good. We'd wind up with a hode-podge of unstructured code because there's no "better place". It does us a lot of good. M is a higher level concept. How you architect M is an entirely different conversation. &gt; But it's not working for a lot of people. It's not working for a lot of applications. If it was, we wouldn't see every single bloody framework take a different spin on it. If it really worked, we'd see predominant versions that solve problems. Every framework takes a different spin on every concept more because of NIH Syndrome than anything else. And even then, the spins are not so fundamentally different from each other, because MVC is a very simple idea. I get the impression there is some confusion here over abstract ideas, and specific implementations :/
 Liked it ! As you you said - 1-the MV* not application - 2- They solve the easy problems, not the hard problems This article reminds me one from @pmjones, but far more synthetic. HMVC: I agree, a failure, even if the idea initially looks seducing (it was the killer feature of Kohana)
This is the bee's knees. Saved me an evening of parsing through some SimpleXML output. Thank you.
&gt; show how to architect so you don't have them in the first place Is that with or without concrete interfaces ?
Separation of concerns is a really good idea if you're ever coming back to the software in the future. The article even points that out. This isn't so much "MVC is bad" as "MVC was the parent framework, here's a few child ones that have corrected the main issues with MVC". MVVM is one of the better frameworks I've worked with. One of the big problems I find with PHP work (as I pick up a lot of poorly written code and need to maintain it) is that very few companies tend to enforce any kind of framework at all - so MVC is a start.
SHIT!
I've gone through the features of ExpressionEngine, and I have to say I'm impressed. The true separation of content and access for multisites is what I want here. I wished there was some demo showcasing all these features. I'm concerned how multilanguage would work with the multisite feature.
If you want to push updates, look into [React](http://reactphp.org) and [Ratchet](http://socketo.me/)
I'm sorry, but the message box doesn't even come up (if checkbox isn't checked) anymore. Here is a screenshot of that whole section. [Screenshot](http://i.imgur.com/45ngLF0.png) 
I'm going to step out of my comfort zone and ask some critical sounding questions for ircmaxwell. &gt; Where does logging fit? Is there a reason any of these patterns have to specify where logging would go? Even if we were writing a desktop program using MVC the pattern, does that specify where logging would go? Of all the possible criticisms against some of these patterns, the logging question doesn't seem compelling to me. &gt; Siblings To MVC The descriptions for most of these patterns sound like they're still meant for rich clients, not stateless server-side programs. Since we're considering these patterns for use in a stateless server-side program, would it make more sense to evaluate these patterns based on how they might be -- or historically have been -- applied to the web?
Please read the two posts. Then we can discuss it.
You need to switch the formulaire.submit(); line with the alert("Please..."); line. Or remove the '== false' evaluator. Just think through it logically: "If the formulaire.tick element is checked, what do I want to happen? Otherwise, what should happen?"
&gt; Of all the possible criticisms against some of these patterns, the logging question doesn't seem compelling to me. I used logging as an example. It could have been "charge a credit card" or "deploy a change to a remote website" or really any non-CRUD concept. I don't care a bit about logging specifically (other than it's a need most apps will have). But I am talking about the non-persistence-centric concepts that all non-trivial app will deal with. &gt; The descriptions for most of these patterns sound like they're still meant for rich clients, not stateless server-side programs. Correct, because that's how they were designed and are described. &gt; would it make more sense to evaluate these patterns based on how they might be -- or historically have been -- applied to the web? Well, the second you do that, you lose all the benefits that the patterns bring over just separating your code. The difference between MVC and MVVM is literally nothing apart of names if you remove the statefulness of the pattern. So if you look how they are applied historically on the web, you wind up with 2 concepts: * MVC - separation of concerns * HMVC - hierarchical separation of concerns All of the other's are nuances on the way you handle statefulness, and the conceptual line between each part of the triad. And that was my point. Rather than confusing TLA-inspired "patterns", why don't we actually recognize that the problem those "patterns" solve isn't really what we think they do. And hence open the door to understanding and looking at other ways of architecting the application that may be far better attuned to what we're doing.
Sounds like homework. What have you gotten so far? Show us your work!
I'll have to look into it tonight after work, send me a message if you don't hear from me again.
Yeah, Drupal is a beast and requires a lot of specialized knowledge to get working well. That being said, I know it can do what you are asking. I've done several such sites myself.
It is my opinion that the about of changes between Drupal 7 and Drupal 8 development will render a lot of the specialized knowledge needed to make Drupal 7 work useless. In addition, Drupal 8 is built upon modern components, and if you learn how to use these components, you are likely to not want to use Drupal as your central framework. IMHO. 
 .content-outer, .content-fauxcolumn-outer, .region-inner { width: 80%; max-width: 1000px; } I would link to a css file to put it in, but the CSS is pulling from the page :/
Oh, that was for the desktop. On mobile maybe try changing the css to just say width:100% and see what that does. 
Not really. The front controller is typically how request routers are implemented, having an MVC implementation in the presentation layer is completely different as it pertains to...well...presentation.
Yes I did and I don't get it at all. Show some practical stuff for the alleged problems, because I don't face any. Awaiting your next blog post.
&gt; How does that fit into stateless http? It doesn't. And that's the entire point.
I'd use squares and circles and arrows.
So drupal is dead because its getting more modern? last week reddit said its dead because its too hard.
&gt;What I'm talking about is the state of having a specific View instance being bound to a specific Model instance. Such that when the model is updated, the view is updated in turn automatically. Like /u/i_ate_god, I, too, feel like I may be missing something, since Views and Models aren't related in my designs, and Model changes should have no impact on the View. Model changes can certainly, however, have an impact on the Controller, which would then be propagated to the View to allow for presentation of increased functionality to the end user, but it's not a 1:1 relationship, nor should there be a 1:1 relationship between Views and Models. &gt;If you were creating a shopping cart, and had complex logic around checkout instructions (such as discount codes), where would you put that? The pattern says "Model", but that doesn't do us any good. We'd wind up with a hode-podge of unstructured code because there's no "better place". Again, maybe I'm doing something wrong, and if I am then someone please help me to be a better programmer, but I would model the ShoppingCart as a collection of CartItems (with a relation to Products) and quantities, and each CartItem could have various DiscountCodes associated with it. The CartItem-&gt;applyDiscount(DiscountCode) method would apply the code and check whether other DiscountCodes are already associated with that CartItem, which depending on the logic either apply a single code or stack multiple codes together. Using my notes from above, the business logic in the way that Models apply the discount codes could change arbitrarily from week to week without having any impact on either the Controller or the View which present the Cart to the end user.
Your last sentence is what confused me because you didnt specify.
I guess I should give more information on my current situation. I'm building my next website and want to have the ability for users to post things. I'm pretty sure I should escape any html inside there for security reasons, but I would still like to be able to use links. Just links. Nothing else. BBcode seemed like the best course of action. I tried [this](http://pecl.php.net/package/bbcode) one but it kept failed to load because of this error: bbcode: Unable to initialize module\nModule compiled with module API=20121212\nPHP compiled with module API=20131226\nThese options need to match\n in Unknown on line 0
&gt; I try to always encode my backslash literals as \\ regardless if what follows has a special meaning This is a good idea in double-quoted strings, yes. If you want to not have to worry about it, you should really use a single-quoted string instead.
Questions like this make me wonder how I should feel about astroturfing. It's a great question, but my spidey-sense tingles wondering if this is just a set up for some stealth marketing.
Also, it would presumably not have any of the quirks that result from it having evolved from PHP4. The core API might look a bit nicer too (namespaced functions like `Array\map` vs. `array_map`).
Not sure if I'm a bit late for this, but I've found that a queue doesn't work that well for Pusher/WebSockets. I solved it by writing a library that fires off requests and immediately returns. I'm currently only using it for firing Web hooks think you could use it for web sockets. https://github.com/AuraEQ/fire-and-forget/tree/master
I want to preface this by saying that I have a great respect for /u/ircmaxwell. I also want to say that I’ll acknowledge outright that he’s correct. I don’t want to argue that point in any way. But… is it OK if I just don’t care? Seriously, this discussion comes up routinely. “MVC" frameworks aren’t truly MVC. Usually someone brings up smalltalk at this point and then everyone has to sound informed while I try to pretend I didn’t look it up on Wikipedia. The point is… sorry, but I just don’t care. OP talks about the issues with MVC, and the problems that need to be solved. I’m sorry, but these are not problems I need to solve. I have never in my life sat working on an application and gone “Oh, holy shit! My views are insufficiently stateful to properly fulfil the MVC pattern!” The problems that I have are how to deliver software. How to make the best software possible, within budget, on time. To make it testable, reusable, refactorable. I approve of discussion around the academics of software design and architecture, but there comes a point where that knowledge must be **applied**. If the MVC pattern doesn’t technically suit the web, then either we need a new pattern and name that does, or we can simply adopt a simplified understanding of the pattern that better suits our domain, and work from that common understanding. Oh good. We’re done. TL;DR - He's right, but I don't care.
I recommend F3 @ fatfreeframework.com Its quite minimalist, and very intuitive. A small community but very supportive.
&gt; Maybe I'm misunderstanding something. This is not a requirement of MVC. V doesn't care about M. According to what we've learned from frameworks and best practices for the web, your'e right, V shouldn't care about M. But MVC (the design pattern) is an actual design pattern that's well publicized and written about, well before any of these frameworks came to fruition. In MVC, the design patter, the View acts as an observer for a particular Model instance, and the Model updates the View directly. Whether or not that's *good* is irrelevant, it's simply facts about the MVC design pattern, and that was what that bit in the blog was getting at.
You're just highlighting the problem. Nobody cares. Even I care less than I should though I'm not as quick to dismiss a discussion about it. Yes, it's a bit academic at this point but that's how things happen. Eventually new or rebooted old ideas will emerge and practical application that helps us all. I'm kind of surprised there was no mention of event driven design or whatever the hell it's called in the post though I was happy to see AOP in there as an alternative.
&gt; it's been in use for 14 [years] The markup itself is closer to 19 years old than 14. The first implementation was by my former employer, in the Ultimate Bulletin Board, 1996-7ish. It's not BBCode, it's **U**BBCode, damnit!
Just links? Why do you need to load whole library then? You can just provide link tag/macro with simple regular expression and callback. Or if you are also interested in basic formating (such as bold, italics, lists etc) I think you should try Markdown, as it was said earlier.
So ... a question. I use Laravel to build the APIs that my javascript front end applications consume. I clearly don't use ADR - I don't have classes per actions, I'm not leveraging __invoke(), I call things controllers, and models - though I do have a "domain" (assuming that is the correct name for the collection of service objects etc that underpins my business logic)... My laravel controllers are pretty well stock "resourceful" controllers, and I use routes.php to direct and filter incoming http requests. I use Fractal to transform eloquent entities into meaningful objects which are sent as the response to those requests. So - I'm not following your ADR pattern... but clearly I'm not doing MVC either. I don't think I'm doing anything particularly wrong (I adhere to SOLID principles, I apply liberal use of the IoC container, I have close to 100% test coverage...etc). What is it that I'm doing? Does it even matter that there is no formal description for the pattern I use, even though I use it on several projects without (much) alteration? 
You're doing it wrong. Burn it down or find an initialism that applies.
Nice, but is this worth the BC break? On second thoughts, any breaking code should be fixable with a simple search replace., right? Which leads to another thought. Now this may be stupid. But would it make sense to include a script with every one of these proposals, that can fix or notify bc breaks in existing code? So that when a new version of php, with some bc changes is released, these BC checkers for each BC breaks can be run on the old code to convert old code to a compatible versions where possible and notify about the rest. This is nothing new. python does this with py2to3...
I think it makes no difference at all.
I've set projects up both ways in the past. In my experience, the later configuration is much better for anything remotely complex. Why? Two primary ones: 1. When you group classes by their likeliness to interact, following the execution of the application requires less cognitive load. You're not going up and down your directory structure to get from `PostEntity` to `PostRepository` and so on. It seems like a small deal, but trust me, that adds up over time, and the less mental effort you need to spend doing that, the more you have to spend on more important decisions. 2. Not every component has the same needs. For option #1, if you have a `PostPresenter` but not a `CommentPresenter` or `UserPresenter`, you end up with two extra directories with a single file. Which is a good example of you serving the convention instead of the convention serving you. I built one major project with the first convention, and I ended up fighting it the entire time and made some poor naming decisions in the interest of adhering to the convention. Ever since then I've used the latter approach and I've had a much better experience.
There's an issue with these two pages. Seems like they're missing a template or something: - http://eaglehorn.org/home/worker/rss - http://eaglehorn.org/home/worker/text
ExpressionEngine, and a couple of multilingual add-ons.
Thanks bopp for pointing that out. Now fixed. Yes, template issue. Wrong function called for the template.
slim.
I didn't get any problems out of it, perhaps because I started skimming at the third description of what sounded to me like the same damn thing. I don't understand why logging is a problem (you just log, like, with a library?), or why charging a credit card is a problem (you do the charge, and return an appropriate response?). I've encountered plenty of problems with large-scale PHP, but mvc ain't one of them.
This is how I organise my apps as well. It helps give a general overview of all modules up front instead of having to dig through various directories know figure out 1. What modules are available and 2. What components each module has. 
I get to choose the programming languages that I want, since I'm one who is implementing the system. I was browsing various choices of frameworks, such as rails, django, symfony and even play and spring. I looked at laravel at the point when version 4.2 was out; it looks very similar to rails (I'm quite against rails because rails doesn't work really well on windows but oh well I've switch to ubuntu almost completely). From there I just implement the system using laravel. I have no expererience in any framework; laravel is and was my first framework to work with. Sure, the learning curves are there, but hell, having frameworks really settle a lot of boilerplating for me. Despite all this, I'm actually discouraging people to learn php because in my country, Java and C++ were the main language to have an iron rice bowl. PHP is well...just a script kiddie language from those enterprise point of view.
i doubt theres any specific software that will suffice for you out-of-the-box that being said theres a lot of software that can quickly be modified to what you need, i would chose either wordpress or typo3 i would never directly include newsletter functionality, theres just too many 3rd party services that do a very fine job for that, its a huge field in itself, depending on the amount of receipients, this is nothing that a single mailserver should do anyway so if you want your emails get through and have a low spam rate, dont try to do it with your cms. 
This is a good idea. Personally I don't care much for backwards compatibility, I'd rather php continued to make solid improvements rather than having to shoehorn new features on top of bad.
With the second example aren't you going to run into aliasing issues almost constantly? What happens if you need to use all three entities in one script? Now you have to alias each one as you use them. Alternatively you could use namespaces like.. /App/User/UserEntity Or /App/User/Entity/User Both are needlessly repetitious. The only real advantage I see is that you won't have to have as many use statements in the like classes, but that's not really an issue. PHPStorm automatically adds those for me and I'm sure other IDE's do this too. Plus you'll still have just as many use statements outside those namespaces. Like if you're using a framework that uses controllers you'll have just the same number of use statements there.
I've always felt the main practical point of MVC is allowing folks with different skills work on the same project more cleanly. The branches are the states and the designer/back-end/database/sysadmin folks are the users.
Isn't the latter already a best practice? Do any frameworks encourage a different structure? Generally trying to write code so that you could take a namespace somewhere up the hierarchy and split it out into a separate package helps keep you code clean, allowing you to develop faster. What I tend to do is have all those types of classes from your example in a core domain parent namespace (eg Blog in your case). Any classes that touch framework code then go in a separate parent namespace (eg App). If you do this well then often the only classes in App are controllers and repositories (or something behind the repository). This keeps your tests separate from the framework and also allows you to reuse your core domain in other applications (eg a server and clients).
A bit kludgey, but we already can do: $u202E = '\u202E'; $u202E = json_decode('"'.$u202E.'"'); echo "{$u202E}Reversed text"; 
/App/User/Entity is what I'm proposing. Yes, if you were to be using an external class, you would most likely have to use "use as". But like I said, in the classic style, you would have to use "use as" all the time for most classes related to the same entity. Phpstorm may help you with aliasing, but that still doesn't mend the additional confusion aliasing can cause when reading. E.g. UserRepository: is my class really called UserRepository or did I just alias it that way?
While I prefer the second option, I always prefer to suffix my classes - in your example: App/User/UserRepository App/User/UserEntity App/User/UserService When you're writing a service that wraps multiple other repositories, validators, services etc., having to alias everything is tedious. I also think it makes it easier to find the file/class you're looking for.
Why not just use procedural PHP if you are just using a two route JSON api... Instead of creating all this stink here, and bashing everyones suggestions.
Nothing to share other than to say, good on you mate, good on you for taking all of this feedback on board and working your way through it in the spirit that you've displayed. It's impressive. Keep it up brother. :-)
&gt; The problems that I have are how to deliver software. How to make the best software possible, within budget, on time. To make it testable, reusable, refactorable. There is a term for that: [Duct Tape Programmer](http://www.joelonsoftware.com/items/2009/09/23.html) Read it :) I realize that this isn't everybodys opinion and, frankly, I don't know if it is the right way to go. I am the kind of developer who tends to overengineer a problem and end up don't shipping it. I am now trying to move away from that kind of philosophy. I am trying to go as minimal as possible: I only implement the most basic, required features. I don't implement many corner-cases, fault-tolerance, advanced features, configuration possiblities. I don't try to detect faulty input, I try reducing de-coupling and abstraction. Not use design patterns everywhere. All those things that sound awesome in theory, but end up increasing complexity. Because, as you said: &gt; The problems that I have are how to deliver software Yes, it looses a lot of abstraction. And you loose flexiblity. That **may** be a bad thing. But do you really need that? Really? What I am trying to say (without derailing this), is that don't worry about doing everything the right way^TM. Do it the way it fits. As [/u/spdionis](https://www.reddit.com/user/spdionis) said: &gt; Design patterns should not constrain you. Rather they should facilitate thinking and communicating about software design. Think about those trendy micro-services [1] that popped up in Java World a few months ago. Java increased complexity (think about EJBs, SOAP, WSDL, Spring framework and whatnot) and in the last few years they are trying desperately to move away from that kind of thinking (think REST, JSON, microservices, Unix philosophy, ...). Just as an example: [This](https://github.com/rdlowrey/Auryn) is, what I believe, an awesome IoC container, **if** it wouldn't ship with the [Advanced](https://github.com/rdlowrey/Auryn#injecting-for-execution) stuff. Why does an IoC container need to provide a public API to execute methods on classes? After all: "Make each program do one thing well."[2] [1] http://martinfowler.com/articles/microservices.html [2] https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy
Regarding the backwards compatibility and potential usage clashes, it might be senseful to consider **`\x{HHHH}`** alternatively. * That brings it to syntax parity with PCRE, but doesn't impair it for double quoted string interpolation through PHP. * In fact PCRE also allows `\x{10FFFF}` higher plane Unicode code points. * Backwards clashes for `\x{` accidentially residing somewhere seem less likely than `\u` being embedded perchancely (ex `"c:\user\"`) - because `\x` already had an agreed payload constraint since PHP2. Given that ECMAScript adopts it, the rationale for `\u{xxxx}` makes as much sense of course; else it would be a lonesome PHP oddity again.
Thanks Bro.
I don't think reusing `\x` for this is a good idea. This would mean that `\xff` (referencing the *byte* `0xff`, which does not encoding any codepoint in UTF-8) and `\x{ff}` (referencing U+ff, which will represented by two bytes in UTF-8) would look pretty similar, but do something complete different.
This! This is pretty much what I said on my podcast when we spoke about ADR. I don't really find myself saying MVC. The frameworks I use tend to refer to themselves as HTTP frameworks. The web layer is less important than most of the code I write. 
I'm sorry if I seemed rude. It was not my intention (at all) to make anyone feel disrespected or to "bash" anyones ideas. I was just trying to make my point and felt quite frustrated that I seem to be alone with my idea of what I'm looking for. I'll try better next time, Sorry!
&gt; I don't really find myself saying MVC. Which is why the term only has real value when limited to the controller action method. Because that's where a distinguishable difference can exist. For alot of controllers, it may not need to know anything about the view, maybe just about the model. This also falls into the 80% category for entry level programming. * [Adding a View](http://msdn.microsoft.com/en-us/library/dd410597%28v=vs.100%29.aspx) What I like about that is * View contains "template" is all that is said * Strongly typed View Model interface. Whatever the controller returns then becomes the `Response Model`. class Controller { public function __invoke() { return $this-&gt;model(['message' =&gt; 'Hello World']); return $this-&gt;view('home', ['message' =&gt; 'Hello World']); } } 
Yea that's not bad either. My only problem with this is that I always feel inclined to use the same variable name camelcased as what I reference my class as. And in that way UserRepository $userRepository feels too wordy within a user service class.
Uhm yes, they're completely different things. Please note that the topic was syntactic backwards compatibility, not whether `\xFF` remains a binary byte escape.
The real reason is that PHP parser is not context aware. This might change in future with https://wiki.php.net/phpng (source: conversation on Freenode).
Which standards are you trying to be compliant with? PSR-1/2?
For example?
http://3v4l.org/cj0iR See the [Operator Precedence](http://php.net/manual/en/language.operators.precedence.php) table for details.
In that case the developer time of adding code to strip out the HTML tags (or even just integrate some library or other) is statistically significant ;)
&gt; But the MVC pattern is at between 25 and 30 years old now. Yes, the pattern that literally nobody in the web uses. The concept, which was popularized by Rails of separation of controls is only 4-5 years old. &gt; The notion that it's somehow going to be superseded is I think a little unlikely. I'll respond here by simply asking one question: Seriously?
Hi and thanks. [This](http://i.imgur.com/6KtYtEP.png) is what I have designed. Does it look correct?
Have you considered making an 'eaglehorn' organisation on GitHub under your account so that the framework can sit at 'eaglehorn/eaglehorn' and 'eaglehorn/framework'?
You totally didn't understand my comment. I'm saying it's going to be a nightmare when you have 50 entities and you go to use one. Your IDE will autocomplete and give you 50 options since they all have the same name, then as soon as you use more than one you have to start aliasing them. Otherwise you'd have a conflict since all your classes have the same name. Due to the nature of aliases there's nothing which enforces any particular alias so different files might use different aliases, so now you have a codebase where you can't use direct text search to find usage of a particular class. Plus, as you add more code your directory structure will continually expand. It's not going to be easier to find your classes when you have to scroll through 50 folders to find the particular one you're looking for. At least with the first structure you can find the containing folder quickly and then just look for a single file. Also, in the first case files would be uniquely named doing a search for a particular file/class would yield at most a couple results. In the second case searching for an entity would yield all of the entities.
I was referring to my specific platform but I agree that it was first used by UBB! (I originally knew it as "UBBC" in the early 2000s.)
Okay, here's my best attempt at explaining this. The first thing that happens to your source code when it's processed by PHP (or even HHVM) is that it's broken down into pieces called *tokens* by something called a *lexer*. That is, your code which looks like this: function foo() { $a = 3; } becomes a list of tokens which looks something like this: T_FUNCTION "function" T_STRING "foo" "(" ")" "{" T_VARIABLE "$a" "=" T_LNUMBER 3 ";" "}" During this process, keywords like "function" are considered special and become named tokens when lexed, e.g. T_FUNCTION, while all other names that aren't keywords are just considered to be identifiers (i.e. class/function/variable names) and are marked as T_STRING. Crucially, when the lexer breaks down a PHP source file into tokens, it doesn't have any appreciation of context - you could put "function" anywhere in your code and it'd be lexed exactly the same. So far as the lexer cares, `function a() {}` and `{ ) a (function{` are equally valid. So, if the lexer doesn't care about context, what does, since something like that would obviously be a syntax error? Well, the second part of the reserved words problem is in the *parser*, which is the stage which comes after the lexer. The parser matches the list of tokens (which our lexer produced earlier) to various patterns which specify PHP's grammar. (**EDIT:** A wee sidenote: while the lexer keeps the text that made up the token in the list (see the "$a", "foo", "3", "function" etc.), the parser itself only looks at the tag each token is assigned (T_FUNCTION, T_STRING, "(", ")"), it can't look at its content.) For example, the definition of a function declaration looks something like this: function_definition: T_FUNCTION T_STRING "(" optional_parameters ")" function_body ; Let's take the source code snippet `"function foo ()"`. The lexer would break it into this list of tokens: T_FUNCTION "function" T_STRING "foo" "(" ")" Now let's compare this to our grammar. The first thing the parser expects is a T_FUNCTION, and we have that. The second thing is a T_STRING, and we have that. The third thing is a "(", and we have that. We don't have any parameters, so we can forget about them. And after that just comes ")", and we have that. So, it's a valid function declaration! The first bit of one anyway, we can forget about the {} for now. But, let's say my source code looks like `"function function ()"` instead. The lexer now produces this list of tokens: T_FUNCTION "function" T_FUNCTION "function" "(" ")" Let's compare this to our grammar. The first token we expect, T_FUNCTION, is there. But for the second token, we were expecting a T_STRING - and instead, we have a T_FUNCTION! This means we have a syntax error. Now, we *could* "un-reserve" some words by modifying the grammar so it'd accept certain specific keywords where normal identifiers (T_STRING) are accepted, indeed this [has been suggested and rejected in the past](https://wiki.php.net/rfc/keywords_as_identifiers). But to do so could limit future syntax possibilities. ---- **BONUS SECTION!** For some keywords which are only used in very limited circumstances, it would also be possible to simply not make them be keywords at all. For example, we could make the lexer stop treating `as` like a keyword, so instead of lexing `foreach ($apples as $apple`) like this: T_FOREACH "foreach" "(" T_VARIABLE "$apples" T_AS "as" T_VARIABLE "$apple" ")" It would just produce this: T_FOREACH "foreach" "(" T_VARIABLE "$apples" T_STRING "as" T_VARIABLE "$apple" ")" Indeed, since the lexer isn't context-sensitive, it would produce `T_STRING "as"` for `as` anywhere it encountered it. We'd then have to redefine `foreach` like this in the grammar, using `T_STRING` in place of `T_AS`: foreach: T_FOREACH '(' T_VARIABLE T_STRING T_VARIABLE ')' ; This means the parser would accept anything between the two variable names, but that doesn't matter, as we can just add a check somewhere that the word used is `as`, and throw an error if that isn't the case. The point of doing that, though, is that it means I could make a function (or class, or constant, or whatever) called `as`, because this: function as() {} Would be lexed like this: T_FUNCTION "function" T_STRING "as" ... And that matches the definition of a function declaration from earlier. The problem, though, is that doing this means we can't add a syntax that uses `as` where a name would normally go later, so we couldn't have `use as foobar` or `function as blah` or what have you. And this is fundamentally why we have to be cautious in making keywords stop being reserved.
Website says psr-4
https://www.youtube.com/watch?v=ss2hULhXf04 edit: Originally you said your explanation was simple, and all i could think of was this. Thanks for the explanation though!
Great explanation, thanks.
I highly recommend that you use Publisher (on devot-ee.com) for multi-lingual sites if you go the ExpressionEngine route
Glad it helped! I've edited it quite a few times since I originally posted it, eheh.
That's autoloading, not coding styles. Could be compliant with all 3.
TIL. Great explanation, makes sense. Thanks!
Glad I could help! Feel free to ask if you have any questions relating to this.
And if you want to be extra cloudy you could replace Jenkins with travis-ci.org
or circleci, bamboo, cloudship, etc. Why the downvote?
because the keywords makeup the syntax of the programming language.
Creating new projects with Codeigniter is just plain waste of time. You will not add that to your job resume.
As the original author of Savant, then Solar_View, then Zend_View, and finally Aura.View, and as a fan of PHP-based template systems in general, let me tell what your next steps are going to be, in no particular order: 1. You're going to realize you need a helper system, so you'll build one. 1. You will discover you need "partial" templates in their own scopes, so you'll add that. 1. You'll find that "sections" are useful too, so you'll add those. 1. You'll eventually want a 2-step-view system for layouts, so those will go in. 1. You will then want to be able to pick from a stack of shared templates, so you'll put in a file-system traversal mechanism. 1. Then you'll want to override higher-level templates at lower levels, so you'll add in a hierarchy system. 1. You will toy with the idea of adding a compiling layer to suit those users who REALLY REALLY want some convenience functions in a shorter syntax. You may or may not follow through on this. 1. Finally, you'll find performance is not what it used to be with the added features, so you'll begin splitting out various parts so they can be replaced or ignored. And so on. Or you can skip all that and go directly to [Aura.View](https://github.com/auraphp/Aura.View) for the template system proper, and/or [Aura.Html](https://github.com/auraphp/Aura.Html) for a bunch of helpers. So while I'm happy to see a proliferation of PHP-based template systems, they all end up being pretty much the same. The guy writing [Plates](http://platesphp.com) is going through exactly the same process now. 
Also last I checked it didn't work on the HHVM, it was missing some XML parsing functionality that DomPDF needed.
It's true. Begs the question though, have the existing solutions been marketed properly?
This is cool but seems like the sort of thing that would be a NIGHTMARE to stumble on later. "Hmmm..." $partial = function($f, $y) { return function ($x) use ($f, $y) { return $f($x, $y); }; }; "..." "WTF!?"
&gt; Brick is not a template engine that would lex/parse template as a string (think Twig). You say that like it's a bad thing. I _like_ my templates sandboxed, compiled/cached and with a syntax that my front-end developers find pleasant to use. 
If the primary problem is marketing, then the proper solution is to help market the existing solution, not to create a new solution and then market that instead. ;-)
Developer time is almost always statistically significant in an entirely different way. I'm not advocating anything crazy ridiculous here. Comment stripping is extremely common practice. You should be doing it anyway, unless you have a good reason not to.
What is this... this is absolutely horrible... YourModel extends Model extends PDO... No dependency injection And I'm sure it goes on. I had to stop to save my sanity. OP, please immidiately delete this abomination and remove all traces of it. Then go [learn about OOP](http://stackoverflow.com/questions/16356420/mvc-for-advanced-php-developers#16356866) before you think about tormenting my eyes with horrible code ever again. 
They've all still got fallbacks, that's where you use out-of-framework methods to get around them. They each address a specific problem, or a set of smaller problems, and achieve their goals well. You should be aware that they exist, because different frameworks are useful for different products. 
Yeah the way it can be done in non-functional languages makes it very hard to read. On the other hand look at the Haskell implementation: divide :: Integral -&gt; Integral -&gt; Integral divide a b = a / b divideThreeBy = divide 3 print divideThreeBy 2 // Or you could even do this, cause division operator is actually a function divideThreeBy = (/ 3) 
I'm currently helping to change a large app (70+ models, repositories, interfaces etc with multiple external services/dependencies). We're going from a loose version of example 1 to example 2. I much prefer working within example 2 for a large app, it feels like a smaller application when working within the (example) User, Post or Comment namespace.
Not at all. I have emphasised that there is a use case for these type of template engines in the market, including one that you have mentioned (frontend developer friendly).
I actually forgot to mention this in the documentation. There is dependency injection here like the below way. Is this what you mean ? &lt;?php namespace application\model; use Eaglehorn\Model; //using the Eaglehorn PDO class UserModel extends Model { function __construct() { $config = array( 'db' =&gt; 'anotherdb', 'host' =&gt; 'localhost', 'user' =&gt; 'root' 'password' =&gt; '********' ); parent::__construct($config); //now this model has a different connection with db } } ?&gt; 
Hi, no i didn't think of that yet. I dont know whats the future of this. I run my website under ajaxtown. So i gave it as ajaxtown/eaglehorn
I am using PSR-1, PSR-2, PSR-3 and PSR-4. I need to update this on website.
You should check out [Phergie](http://phergie.org/). It's written by a bunch of well-known developers in the PHP community. It serves as the bot for the #phpc channel on Freenode.
AWESOMe! We need more! I built the FIRST php irc bot, with full implementation of IRC client protocol ;p, THIRTEEN years ago, if you can believe that! As far as I know, it was the first PHP daemon, way way back ni antiquity. http://sourceforge.net/projects/phpegg/files/?source=navbar You could control it via /msg, DCC chat, telnet, ssh (which had JUST come out) and, of course, a MySQL www interface. Chief feature was the ability to load / unload the vast majority of its code in real time, so you could upgrade the entire bot without having to shut it down first, which was ESSENTIAL for maintaining Undernet channel control in the early 2000s. It could also send and receive files via DCC, and it downloaded peoples' @mp3 lists, parsed the files via regex and was used as a multichannel mp3 search bot. In 2002, I had personally generated a database of over 2 TB of MP3s across 4 IRC networks, over 50+ popular channels, and over 3000 sharers. It definitely served a niche inbetween Napster's demise and the ascendency of emule/xmule in 2003-2004. [LOL! My pre-PDO "Common Database Interface" http://phpegg.cvs.sourceforge.net/viewvc/phpegg/phpegg/source/cdi/
"Phergie is an IRC bot written for PHP 5.2." Is anyone running it on a more recent version? It would be cool if it could run on HHVM.
No. Please have a look at the link I posted. If you work through the materials in there, you will understand those things at the end. For dependency injection [this](http://blog.ircmaxell.com/2013/01/dependency-injection-programming-with.html) is a good video. But don't stop there, you need to know about all the other things in that list too. Especially [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29). And stop using inheritance for everything. Read [this](http://blog.ircmaxell.com/2013/11/beyond-inheritance.html). Most of the time: composition &gt; inheritance.
I don't care about what he is seeking. He needs to learn. I provided a list of materials for that. Effort !== Quality
You agreed to that kind of quickly, which makes me think you may not understand which "existing solution" I'm referring to. ;-)
It's written to target 5.2 for support, but I would be very, very surprised if it didn't run on HHVM.
You had 2TB at home in 2002?
It works this way as well. I just now tested &lt;?php namespace application\model; use Eaglehorn\Model; class WelcomeModel extends Model { function __construct() { parent::__construct(); } function getUsers() { $config = array( 'db' =&gt; 'blog2', 'host' =&gt; 'localhost', 'user' =&gt; 'root', 'password' =&gt; '' ); $model2 = new Model($config); $users1 = $this-&gt;select('users'); $users2 = $model2-&gt;select('users'); return array_merge($users1,$users2); } }
Almost :) I'd put the "data into html pages" inside the php renderer part, and the larger box around the php render is the physical server, which also has an HTTP server (e.g. Apache, Nginx) that receives the request and hands it off to PHP. Additionally, the internet should ONLY be connected to the browser in this diagram.
Mate, I just saw the video, i had seen it earlier. For models, it is not necessary to extend them. If you extend them, then the only benefit you get is the config gets autoloaded. If you dont extend, you can still access db by injecting the db configuration onto the Model. 
No, it was a locator database for files. You would do something like &gt; !phpegg search Britney Spears and the bot would scour its MySQL / PostgreSQL database for all the people who had "Britney Spears" in their files mp3list.txt (that the bot would request, download and parse automatically, every time it saw someone advertise one). Then the bot would send you a list of people with the songs, what channels they were in, and wherever possible, the exact magic IRC chat command to send to their bots to download the song, like, &gt; /join #mp3chat; /say #mp3chat !personWithSong GET File_Name.mp3 Then the user would just copy that and paste it and their IRC client and the bot running on the sharer's computer would do the rest. Note: Once it hit more than 1 million records, I was forced to learn about PostgreSQL which behaved leaps and bounds with large datasets than MySQL in the early 2000s. This predated google. As far as I know, via PHP-Egg I had created one of the most sophisticated. mostly realtime, multi-server asset search engines on the planet in 2001, come to think about it.
Can't say I have experience hiring out, but here's some resources on what may be tested as a part of the audit: - [OWASP Testing Guide](https://www.owasp.org/images/5/52/OWASP_Testing_Guide_v4.pdf) - [Certified Secure Checklist](https://www.certifiedsecure.com/checklists/cs-basic-web-application-audit-v3.2.pdf) Usually a reputable company will outline their procedures before you get started with them, maybe [something like this](http://www.oneconsult.com/en/application-security-audit).
I have been an activist in few major Open Source projects like Mozilla, Wordpress, etc. I love OS and like users who give an attempt to contribute to the OS community. You can say i am partial. Every new project/software will have flaws. This is an anavoidable scenario. If you see something wrong, you should contribute by forking the project. If you don't have time, you should suggest and motivate. If any user(new/old) reads a comment like that, he wont feel like contributing. Also suggestions doesn't mean, read this, read that. My son knows OOPS but he still uses static classes for wrong scenario. I wont tell him, go read about PHP OOP. Instead i would explain why he should not use static class in such scenario. So please try to help the community instead of throwing durt.
You realize we had google at 2001 right?
I feel a bit dirty after reading. All those `@` and suppressions :) Thank you for sharing :)
It's a lisp implemented in PHP! Scary! This was an interesting exploration. I hope that anyone truly interested in this style of programming, which is swiftly regaining momentum, will check out Clojure, Haskell, or Erlang. 
Also scene predbs which are much more comprehensive. Those go back 30 years atleast.
Your code is alright. I would of prefered to use `$this` instead of `$system`. Rather than getting into layouts, I would prefer to see support for composite child views, e.g prior to rendering, if one of the variables is a view object then recursively render it. Adding `function __call` is trivial for plugin support.
holy shit, the /r/javascript community is so much better
Not really new to SQL or PHP, bee doing it for years:P I only did mysql_escape_string on one thing that I shouldent of, which was a mistake, and thanks for pointing it out :P and as for the "Select * from ads where $IP = ads.ip" I have only been using on my sites were I have been getting $0.50 - 2.00 A day so that hasnt really been an issue because I wouldn't never have many IP's logged. But again thanks for letting me know and I will be sure to change that :)
jQuery [`live`](http://api.jquery.com/live/) is deprecated and to be replaced with [`on`](http://api.jquery.com/on/).
Updated to .on Thanks :)
I second this. Even a small usleep would reduce CPU time by a huge amount.