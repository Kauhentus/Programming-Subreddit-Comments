Expanding on your comments (hehe). Commenting code is also a great debugging tool for catching logic errors, it is quicker to catch a logic error if you're another set of eyes and see a comment saying something but the code doing another. Similarly, stale comments are a problem, but this is not a problem with the idea or implementation of comments, but is a problem with the developers. Good commenting practice should be enforced in code reviews just as much as writing "easy to read" code. And sure, you can abstract things away into methods, but something somewhere is still going to need to do dirty work, you can't keep abstracting away forever and ever unless you want a bunch of useless functions that have one specific purpose.
I think it is more about the long running process and websocket aspect. Yeah, it can be done, but not going to be as responsive. Hard to get that TTFB under 50ms with PHP. 
IoT = embedded programming for items of everyday use and household automation, with Internet connectivity (typically both as a client and as a server). See, it actually has a meaning. It's still kind of annoying abbreviation ("of *things*"?), but it has a meaning.
&gt; The biggest problem with this is that any code base that has a significant number of contributors will have comments that don't correctly pertain to the code they're commenting, whether because the original implementer simply made a mistake when documenting it, or a later developer modified the code but neglected to update the comments once they'd got the tests passing. So: 1. Problem: People submit sloppy PRs with incorrect comments. 2. Solution: Write less comments. Same train of thought: 1. Problem: Regardless of measures to stop drinking and driving, people keep drinking and driving. 2. Solution: Drop measures to stop it. When there's a problem, the solution isn't to tuck it under the rug and forget about it. If people submit bad patches, there should be someone on top of the project doing code reviews and rejecting such patches. Not writing a comment, because someone in the future may forget to update it, is like choosing not to implement a feature, because someone in the future might introduce a bug in it. There's certainly a benefit to being short and to the point, but it's a fine balance. It shouldn't be done to the point you destroy domain knowledge and make everyone be guessing at code. Code doesn't communicate nearly as well as we might think. It only *seems this way while we're working on the project*. Then we come back to the same project few years later, and the WTFs can't stop coming.
40 hour workweek starting at $1500 a month? What a joke, I could make more working at a fast food restaurant. 
&gt; That's true, comments do get stale. Everythying gets stale if it's not managed well over time, so... let's not do anything ;-) &gt; I guess I'd rather live with occasional stale-comments, than none at all. Absolutely.
Not bad. Just subtle enough. This has been my running gag for years when we get someone in talking crap. Point and case, we had a guy pitching us on some project they were working on. A little bit CRM, a little bit HR tool. So he's sitting there showing us these fields where I shit you not, there is php code and yaml which, I guess is stored in the db at some point. Called it flexible. Then went on showing us how you could arbitrarily add a property to a user because there was no strict schema (which I guess in some cases is a good thing but not in an HR tool clearly). I had basically gone into professional courtesy mode and was smiling and nodding and then I heard it. 'And it's not a sql solution, it uses mongo so it'll scale with the web'. Just shot a glancing look at every dev in the room who all clearly were doing their best like me to not be rude to this guy. Sometimes I hear these horror stories and I realize I forget how bad some of the coding world is.
&gt; How do you run npm type scripts to manage a build process? i.e lets say when I deploy, I need to run webpack and then turn the server on. Is there an equivalent to running shell commands that perform a few different tasks on a php based server? Pretty much the same as you would with node. You can use npm and grunt/gulp. PHP also has a package manager called [Composer](https://getcomposer.org) that has the ability to run custom tasks and scripts. For deployment and post deployment tasks such as clearing OPCache, I really like [Magallanes](http://www.magephp.com/). &gt; Is there such thing as 'hot reloading'? i.e in development, I want ot leave a window up that automatically reloads when it detects a change in any file in the root directory. A quick google search left me confused At its core, PHP uses [OPcache](http://php.net/manual/en/intro.opcache.php) which stores " precompiled script bytecode in shared memory". There are a lot of opcache runtime settings that can affect performance, but the main one pertaining to your question is [opcache.validate_timestamps](http://php.net/manual/en/opcache.configuration.php#ini.opcache.validate-timestamps) . When that's off, you won't see any changes until opcache is cleared. You'll want to set that value to 1 in development and 0 in production. Some people also just disable it entirely in dev. You need a way to reset opcache post deployment - [CacheTool](https://github.com/gordalina/cachetool) makes it super easy. Good luck. Oh, btw there's also a /r/phphelp Edit: oops, wrong directive given
* PHP has a bunch of different ways to manage build processes. From simple ones like [rocketeer](http://rocketeer.autopergamene.eu/), Java inspired ones like [phing](http://phing.info), to using Jenkins or hosted services for build and deploy. * "Refresh the page" is PHP's "hot reloading", its a shared-nothing environment. When you re-issue a request, all your code is interpreted again.
More like weareslavery.com How about we write this job post for a remote lawyer in eastern europe and see how that goes.
Everything is an anti-pattern.
&gt; How do you run npm type scripts to manage a build process? i.e lets say when I deploy, I need to run webpack and then turn the server on. Is there an equivalent to running shell commands that perform a few different tasks on a php based server? So, first, you don't need build commands for PHP – it's "built" on demand when the page is loaded. You can use a task-runner alongside it for front-end things, of course. That being said, if you have specific shell scripts you want to run for deployments you can set that up as you would any other project - e.g capistrano. &gt; Is there such thing as 'hot reloading'? i.e in development, I want ot leave a window up that automatically reloads when it detects a change in any file in the root directory Are you referring to Webpack's HMR? That approach isn't possible with a backend language, as you're no doubt aware from your experience with Node. You can't inject modules of PHP into a webpage. You *can* set up your build pipeline with, e.g, `gulp` to trigger a Browsersync refresh when a file ending with `.php` is saved. Simple stuff. 
TIL the level of the work &amp; ethics coming from the PosiRank brand.
One database. If you're connecting to multiple dbs, you'll need to have multiple connection strings and thus multiple connection handlers and thus multiple open db connections. Then you have to pull results from both and run the joins yourself in PHP, which are done way faster and more efficiently by your db than your app. 
&gt; If you need something that multiple databases can provide better a bit easier (for example, certain access permissions, certain backup schedules for frequently changing vs hot data etc) then go for multiple databases. Otherwise, keep it all in one database. You would use different users not different databases for access permissions. And you would have much better performance running a read-replica and doing backups from that rather than locking you master server to run backups. Use Percona toolbox and hot backups are pretty simple. 
Jul 31 22:44:41 Hexagontacticsde postfix/smtpd[19414]: fatal: no SASL authentication mechanisms I got this Error the whole Time
&gt; Firstly, remember that a smell doesn't mean there's definitely a problem. No, it's a smell, not a fire. But if you don't locate the smell you end up with a bigger and bigger fire to deal with later. https://en.m.wikipedia.org/wiki/Code_smell
**Code smell** Code smell, also known as bad smell, in computer programming code, refers to any symptom in the source code of a program that possibly indicates a deeper problem. According to Martin Fowler, "a code smell is a surface indication that usually corresponds to a deeper problem in the system". Another way to look at smells is with respect to principles and quality: "smells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality". Code smells are usually not bugs—they are not technically incorrect and do not currently prevent the program from functioning. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
Non-Mobile link: https://en.wikipedia.org/wiki/Code_smell *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^96581
Symfony*
What part of bshaffer's library isn't working for you? I use it and I didn't have any trouble integrating it into my application. There's also [PHP League's OAuth2 Server](http://oauth2.thephpleague.com/), but I'm not fond of it, in part because it encourages the use of JWT's for access tokens. To be honest, OAuth2 is not simple. There is no drop-in replacement for regular old sessions. I would start by reading [the OAuth2 specification](https://tools.ietf.org/html/rfc6749) first (or some summary of it) before trying to implement anything; you'll come out with a much better understanding of what all of its pieces do and where to begin.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
How? One database instance can support multiple databases and you'd only need one connection to it. Unless I misunderstood you? 
As an alternative, you could use JWT which is pretty simple. https://github.com/firebase/php-jwt
Whats wrong with JWT?
They're a dangerous replacement for sessions [[1]](http://cryto.net/%7Ejoepie91/blog/2016/06/13/stop-using-jwt-for-sessions/)[[2]](http://cryto.net/%7Ejoepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/). 
Goog luck mate! 
You have your terminology incorrect. There is no such thing as a "database instance", unless you're referring to AWS RDS instance. A database is a logical partition of data. You might be thinking of database servers. A single server with a DBMS installed can have multiple databases, and those databases can have multiple tables, and the DBMS can have multiple users. That data can be split off to multiple servers, however. If you have a DBMS residing on url1.myapp.com, you create a connection to that database: `Server=url1.myapp.com;Database=myApp;Uid=myUsername;Pwd=myPassword;`Port, blah blah. It's possible to connect to any of many servers through your connection string (`Server=url1.myapp.com, url2.myapp.com;`), but not to multiple databases. You need to create two connections to do that. And if you're using the same user and the same password to access both, you're not gaining anything.
I think I am sticking with sessions and from now on I ll store sessions in a database instead of disk.
/u/CaptainDjango said it already but instead of just adding another upvote and saying nothing more, I'm going to reiterate, don't do this yourself. You're about to open up a pandora's box of problems. Next thing you're going to hit is spam blocking blacklists even if you've done nothing wrong. It's way smarter just to use one of the options they suggested.
Write a test for it
For an interoperability (nice word :D) I will read about them what u listed and lets see what we will do, i do mainly front end so i dont know much about cryptology. But it's time to learn. 
I've used it with over 2 billion records. Works like a charm 😊
I think we go eith AES-256-CBC EDIT: actually with /u/kemmeta recommendation as OpenSSL supports it. 
This is true, but PHP League's OAuth2 client is fine, especially if you are going to connect to an existing OAuth2 server. I use it for FB/Google/Azure O365 login. 
True.
&gt; that it is inconsistent, badly designed Kinda true tho
I think you underestimate the greed of the EU. If people die, noone bats an eye, but dare to steal a cent.. millions will be used to get your ass. 
Do I correctly assume that you are not the guy behind who offers that bullshit, but more the one who laughs about it too? Can we start a petition or something to close their company and forbit to do another company?
[removed]
Yes, a second pair of eyes is a great way to raise code quality. But the point stands: the code is the code, and the code often has tests written to prove that it is correct. Nobody writes tests for the comments. Bear in mind that the lifetime of your code, if you're writing enterprise-grade stuff, could be ten years or more. Can you really guarantee that the business, through that decade of change, will maintain a high-quality development process staffed by high-quality, process-following developers? You can't, really. That's why I think it's far, far more important to write the code in a clean and readable way than it is to add comments. I see *so many* places that insist on docblock comments everywhere, for everything, for instance, and the comments are filled in automatically with meaningless or even misleading content. And writing a docblock for a function incentivizes putting the "why am I doing this this way" comment (which is one of the few I think that has value) *away* from the few lines of code that it's actually referring to - meaning that people doing code reviews might not even see the docblock comment in their diff tool to consider whether it needs revising. Even if it's available, they may well not scroll up far enough to read it. Processes need to be resilient - that's easier if there's less stuff to maintain, and fewer steps required to maintain it.
I’m going to hijack your comment, thanks! :D ITT: a lot of people outraged that people in eastern europe are willing to work for a tax-free $1,5k. Obviously they won’t find a *good* developer for that money (there isn’t a shortage of programming jobs in mid-east eu). A full stack is an overstatement. More like a person that read a book about Javascript, and then another about PHP. Anyway, I can’t speak for the whole region, but I imagine that this kind of money is quite attractive to people living in small towns, with no local businesses. And I am not even talking about unqualified personnel. And in such an environment people aren’t employed under normal job contracts either. They are outside contractors, with minimal tax, no insurance, personal liability, without government protections a regular job contract provides, and often times a large portion of the salary is paid „under the table”. I can totally get why people would be interested in offers with this general characteristics, and hence why that company is hiring this way. OTOH, all of them can work remotely for any other european company for better salary… I am not trying to defend that company, just pointing out that the reality can be quite different here. For context, in Warsaw and other larger cities in Poland (I guess the target for that offer was even farther east), a reasonable JS / PHP developer with some experience (for example 3 years) can hope for a $3k/mo salary, with minor benefits and ~25 vacation days yearly, etc.
You couldn’t in eastern europe. The rates are around ~$3 hourly for start, so it’s about a third of that.
&gt; Although IoT is mostly Node and Python Not convinced about that, we have been using PHP on Raspberry Pi's for many years now using the wiringPi libary 
thanks, my mistake
&gt; it's quicker in daily activities I never thought I'd hear the day that anyone said anything positive about Atom's speed. It's quite possibly the slowest (actively developed) editor on the market. I get what you mean about the "Java feel", storm, netbeans and eclipse all have a similar feel about the UI but it's worth noting storm is no longer Java and has been written in Kotlin for many years now 
&gt; I find Java GUIs to have that very distinctive look This is true, Storm, Netbeans and Eclipse all have that "Java Feel" and look very similar when using the same dark or light theme. It's hard to explain but I get what you mean about Java feel. It's worth noting though, Storm is now in Kotlin and not Java
May I inquire why you moved from JS to PHP? Just wondering.
Never mind, found one: https://github.com/mjaschen/phpgeo#distance-between-two-coordinates-vincentys-formula
No. Comments are not code smell. But sometimes the are used as code deodorant. 
 class Gps { private static $earthRadius = 6371; public static function getDistance(Coordinate $c1, Coordinate $c2) { $deltaLat = deg2rad($c2-&gt;getLat() - $c1-&gt;getLat()); $deltaLon = deg2rad($c2-&gt;getLon() - $c1-&gt;getLon()); $a = pow(sin($deltaLat/2), 2); $a += cos($c1-&gt;getLatRad()) * cos($c2-&gt;getLatRad()) * pow(sin($deltaLon/2), 2); $c = 2 * atan2(sqrt($a), sqrt(1-$a)); $distanceInKm = self::$earthRadius * $c; return round($distanceInKm * 1000, 2); } } If you have a lot of points to check you should probably look into a GIS database, see https://github.com/brick/geo
You seem to be using a static member variable like a constant. You probably just want a constant to prevent writing to a read-only value and to correctly convey your intentions to the reader.
Yes, I agree with you entirely. I was responding to the point that I quoted: &gt;I would rather read a comment above every-line than try to parse the code myself - that's how mistakes get made. I'm reasonably sure from having read many of your comments that you don't comment every line of your code and we're both in agreement on how crucial proper code review and internal consistency are. I would be astounded to find a non-trivial code base, even with a great review process, where if the majority of lines were commented there wouldn't be a disconnect between what the code did, and what some of the comments stated it did. If you can achieve a perfect comment accuracy on such a heavily commented code base with many contributors, you probably don't need to be picking up advice from Reddit on good practices. I'm not an absolutist by any stretch of the imagination, because frankly it would be a ridiculous position to take, but I will always advocate in code reviews that code readability should take priority over comments and I will reject PRs that rely on comments instead of writing good, clean code. Part of the process of a code review from my perspective is gauging how well someone unfamiliar with the code as written can parse that code and grok what its purpose is and what its side effects are, I'm just as happy to suggest adding comments where that's not the case and the code itself can't be improved to aid in understanding. Not commenting every line of code isn't tucking a problem under the rug, it's avoiding insanity.
Tests are in no way documentation. If I'm trying to work out how to use a library and I find myself having to dive into the tests to work out what to do, I'm one step away from finding another library.
As a guy in small town who works for a ~$500 I don't understand what everyone is talking about
Mailgun gives you 10k for free a month and after that it's pretty cheap. At some point it's worth to invest a few bucks for a working and stable infrastructure. All the work you're investing in your workarounds isn't free either and sooner or later you'll run into Spam problems. 
I'm pretty sure what my intern codes is also not actually php.
Amazon SES will give you 62,000 outbound emails a month for free (for life, not just for the first 12 months).
I'd go with Mailgun. sendmail will work, but some Email Providers may spam list you if you hit their servers with that kind of volume - so you run the risk of being trapped out. Alternatively, you could batch out the emails, sending say 1500 a time, over 4 days? Depends on the campaign you're running and requirements for timely completion.
I thought we were talking about token based authentication, not storing session data. 
Also, be sure to include units. $earthRadiusInKm is more clear.
There is no way to disagree with your statement, but my point was not about a documentation for a library’s public interface, but rather about explaining internal *implementation details* of some private component. ;) I was addressing specific case presented by /u/gadelat, not advocating tests as a replacement for comments in general
[removed]
Depends on what you want to do... and what's your background?
I think both ZF3 and Symfony share similar philosophies and adherence to best OOP practices. In fact, a lot of their components are interchangeable. 
... that is, if you are using an EC2 instance to send them.
A long time ago there was a php library for google maps that could do this. 
Batching them isn't really an option unfortunately. So you're saying that of my 6,000 emails, 1,000 of them might be going to hotmail.com, and hotmail would then potentially have a problem with this? Would i get any warning from hotmail, or would it be a shadow ban so I don't even know that my emails aren't being delivered?
Since you pay for Gmail, look for their. SMTP relay. Sending restrictions are relaxed but you do not get any copy of your sent mails...
&gt; How do you run npm type scripts to manage a build process? i.e lets say when I deploy, I need to run webpack and then turn the server on. Is there an equivalent to running shell commands that perform a few different tasks on a php based server? PHP itself doesn't normally have a build process; it's interpreted on each request. However, you still might need to do some other maintenance tasks, in which case: Use whatever you like! You can use npm scripts, bash scripts, makefiles, rakefiles, grunt, gulp...whatever you like. If you want to use PHP for this step (and you certainly can!), https://www.phing.info/ works great. But if you're already familiar with node, maybe use that? Just keep in mind that you're picking a tool to do everything *except* the "php build step", because there is no build step. :) &gt; Is there such thing as 'hot reloading'? i.e in development, I want ot leave a window up that automatically reloads when it detects a change in any file in the root directory. A quick google search left me confused Sure, but it's got nothing to do with PHP. You just want a plain old live reload tool, like developers have been using for ever. Eg http://livereload.com/, but any live reload tool or plugin will work. Eg, browser-sync, grunt plugins, etc. Whatever you were using on JS land will still work fine. If you were using a browser plugin based system it'll need no work at all; otherwise you just need to inject the right JS snippet in your rendered pages; you were probably relying on some very simple connect middleware to do it, but it's easily duplicated. For example, if using browser sync, something like: &lt;script id="__bs_script__"&gt;//&lt;![CDATA[ document.write("&lt;script async src='http://HOST:3000/browser-sync/browser-sync-client.js?v=2.18.6'&gt;&lt;\/script&gt;".replace("HOST", location.hostname)); //]]&gt; &lt;/script&gt; Should be all you need, shoved into the right template file and set to only render in dev.
PostgreSQL has geolocation extension with functions for common operations such as the one you're looking for. Edit: it's called PostGIS. http://postgis.net
Are you allowed to hit that quota in 24 hours? 
I did and frankly (and embarrassingly) it looked too confusing for me to understand. I've always assumed mailgun etc would be similar (and expensive), but am in the process of setting it up now and am quite excited about finally having a "proper" email system in place. Seems a lot cheaper than I feel it was last time I looked at it as well.
Thanks for prompting me to bite the bullet, setting mailgun up now.
Thanks for prompting me to bite the bullet, setting mailgun up now.
I don't know about daily limits. Maybe you can find something on their website. 
Potentially, yes. It's a defence mechanism they have in force to stop people from mail-bombing their servers. Each email received, is marked and tracked for 'reputation' - if you're listed anywhere for spam, high volume, etc etc - they could put you in the spam folder of all your users. If you have a good historic reputation on your IP, i.e. good email structure, valid HMTL (if applicable) - then you should be ok - but it's something to be aware of. Hence the recommendation of Mailgun - they're a reputable service, that the mailbox suppliers are aware of and give good ratings to; thus you're very unlikely to be 'spam listed'. I'm working at the moment, however if you'd like to chat about this off /r/PHP, drop me a DM, and I'll happily help you later this evening. (I'm in the UK)
Just use [GSuite](https://gsuite.google.com/)
You can do this directly in mysql too if your known places are stored there
I'm an annoying person who likes to "do everything himself", but I'm biting the bullet and setting up mailgun. You can only read a recommendation so many times in s o many different places before it makes even me feel stupid to ignore it...
The formulas for this are well documented and you can copy/paste it into your project, but there are well supported libraries for this like the one in The League of Extraordinary Packages: https://github.com/thephpleague/geotools $geotools = new \League\Geotools\Geotools(); $coordA = new \League\Geotools\Coordinate\Coordinate([48.8234055, 2.3072664]); $coordB = new \League\Geotools\Coordinate\Coordinate([43.296482, 5.36978]); $distance = $geotools-&gt;distance()-&gt;setFrom($coordA)-&gt;setTo($coordB); printf("%s\n",$distance-&gt;flat()); // 659166.50038742 (meters) printf("%s\n",$distance-&gt;greatCircle()); // 659021.90812846 printf("%s\n",$distance-&gt;in('km')-&gt;haversine()); // 659.02190812846 printf("%s\n",$distance-&gt;in('mi')-&gt;vincenty()); // 409.05330679648 printf("%s\n",$distance-&gt;in('ft')-&gt;flat()); // 2162619.7519272
not all of them are in EU. Belarus, Ukraine, Russia as far as I recall had far more lenient tax legislations.
It would go a long way if people (including OP) would stop referring to it as *a* model. Or a model class.
Tnx, but this is a snippet I found online coupe of years ago, it was meant as an example.
https://serverfault.com/a/598183/23961
I would add [fxp/composer-asset-plugin](https://packagist.org/packages/fxp/composer-asset-plugin), although we've started transitioning away from it due to the performance impact in ~1.3 with lots of composer packages amidst a few bower packages.
Clickbait title, muddled example, all to tell you the sacred wisdom: no class should be fat. 
"Posted on 11 Apr 2013" Who knows, maybe the guy who wrote that article did.
I use this (with a minor adjustment to pull in my API key): https://github.com/anthonymartin/GeoLocation.php
&gt; 11 Apr 2013" Who knows, maybe the guy who wrote that article did. I missed the date. Point still stands though. There are several people and frameworks referring to things as "models" which makes no sense.
"Fat model, skinny controller" is the notion that business logic should reside in classes we call "models" (but maybe are better called "services"), which are unaware and independent of any views and controllers, and are often not coupled to any framework. In the context of web apps, it means isolating HTTP handling concerns from business logic concerns, for better maintainability and reuse. This is what OP actually supports. But he's decided "fat model, skinny controller" means something else. So move along, nothing to see here.
Well, in JavaScript you can do things like this: function oops(a) { if (a.x &gt; 0.5) a.x = "oops"; } var b = {x: Math.random()}; oops(b); console.log(b.x); // type ? 
Do you mean geographical points? Geology is about the material of the Earth - and rock formation - not location `:-)`. 
Are you using this for local dev only, or have you deployed it as a stack to a prod (or even qa/testing) env? And I hate to be the "does it scale?" guy, but does it? Logging has been a pain for us in the past when scaling docker containers.
sendgrid.com is good and cheap
I knew a few companies doing embedded node stuff. From lighting to beverage dispensers. Its actually quite well suited. 
&lt; 500 a day. Most of the time they wont get to inbox as mail providers see the php headers and reject them thinking a server has been promised. You want to use a service if it's part of a business; end of story.
well if we started using proper domain language we would get witch hunted out of this sub :D
[removed]
So what you are saying is that in-line comments do not fit __your__ style of programming. There's a lot of us who disagree. Largely due to the fact that if we have yet another doc; you completely remove the comment from the actual context. And Context is hyper-important.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I can't see why not, it's just a hard limit per month as far as I can make out. Certainly once they start billing it's per email per month, so if I send 100,000 emails on day 1 and then nothing else I can't see they'd charge me any differently to if I sent 100,000 emails throughout the month.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thanks, have set mailgun up now. Unfortunately they talk about "warming up" so they might struggle with sending so many emails straight off the bat - we'll see. At least I'll be sorted for the next big one...
Yeah it hit me immediatelly after I posted it :P
Your best shot is making sure your content is Unicode, and UTF8 (most common Unicode encoding), and using grapheme_strlen() as it counts *actual character units* in text. But this is assuming text editors are implemented correctly and not counting codepoints or something else, which is quite possible, as Unicode is a messy mess, and most people get it wrong, even professional developers.
Like a rock?
I found mb_detect_encoding() function on php docs. I don't know how reliable or useful it is to you, but I thought it'd be worth a mention :)
It's done with some simple math that you can just copy. E.g. if you have records in a database with lat lon on each record, you can order by closest distance like this: https://gis.stackexchange.com/a/31629
Yes, i tried it too already. Even so, had some edge cases. ;s
Interesting. Is there any documentation on their switch?
I cant enforce the incoming data to be unicode and sometimes conversion does not works 100%. What do you mean by "counting codepoints"?
And what happens when the earth grows to 6372km in 30 million years? What then?? Not that I disagree, but OP was trying to help with an example.
The author mistunderstood "model" in MVC. It's a layer, not a class.
&gt; I cant enforce the incoming data to be unicode and sometimes conversion does not works 100%. Then you need to figure out which charsets you plan to support exactly, and have a separate strategy for each one. This sounds like a lot of work... and it is, I'm afraid. I don't think you need to support anything other than Unicode, unless you also support Asian scripts. Then you might consider supporting some yet-common charset like Shift-JIS etc. But I don't know enough to tell you. &gt; What do you mean by "counting codepoints"? A Unicode term. I'm afraid if accuracy is important, you'll need to do a bit of research and reading about it. Look up what's a Unicode "codepoint", how it's encoded, what's a "combining mark", "composite character", "normalization forms" (decomposition types), encoding formats (UTF8, UTF16, UTC, etc.), "graphemes", etc.
This isn't a PHP question. Google *email service providers*.
You're the one that pasted it. If you're not prepared to accept responsibility for it, don't paste it.
[removed]
In the meantime there's [StaticClass](https://github.com/ScriptFUSION/StaticClass/blob/master/src/StaticClass.php).
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [ScriptFUSION/StaticClass/.../**StaticClass.php** (master → 87eb297)](https://github.com/ScriptFUSION/StaticClass/blob/87eb29703db3baba09b68d35b739372370bfb5a0/src/StaticClass.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dl0gl5h.)^.
Imagine if anyone could just publish anything.
The wages of Active Record. :-/
They did a blog post about it https://eng.uber.com/mysql-migration/
This is why you're a Reddit and not an Internal.
Damn! Next thing you're gonna tell me to implement left-pad myself.
Success when designing a sophisticated, robust API is much more about the design principles rather than technical implementation. My friend /u/philsturgeon wrote [a very good book about designing and building APIs in the correct way](https://apisyouwonthate.com/) – and many of the examples are in PHP.
Laracasts are perfect for millennials who are yet to develop a taste for best practices or books.
While I was born long long before the millennial generation, I will say Laracasts does a great job of getting people rolling with not just Laravel, but PHP in general. Furthermore, Jeffrey at a minimum does an above average job directing people towards best practices than some random ass answers found within the hallowed halls of StackOverflow or elsewhere. If PHP The Right Way had a video course, that would have been part of my answer as well.
A recent similar discussion, with a bit of chat about delegating to Postgres or MySQL: https://www.reddit.com/r/PHP/comments/6ntxxc/best_way_to_find_users_around_coordinates_within/
OAuth2 is an authorization protocol (_as in delegation_), not authentication. You should look into OpenID Connect, which defines a standard for authentication on top of OAuth2, but you should not use basic OAuth for authentication.
Thanks!
[Of course!](https://www.youtube.com/watch?v=9b4cW9sx47A)
The data i'm working with are not stored in a database.
I put together a class to deal with this a while back that I still use. It allows for handling request information as an object or array. Has support for both immutable data, as well has being able to write to changeable data in the request as you may require. https://github.com/Metrol/Request I've never posted this up here before since I really didn't think it was quite complete enough for public consumption. Still, there's most of the stuff that would address what is being talked about here.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Mailgun is genius, I use it for all my services! Be aware though, that when I set it up for my last project, I was set on a "probation" mode when one email bounced, limiting me to 100 emails pr day! But when I talked to them about my usage they removed it very fast☺️
Dangerous is a gross exaggeration. JWT is not without its downsides but it has its upsides too. There was a post in /r/programming that showed the positives and negatives of the different authentication methods (cookies, sessions, JWT, OAuth, etc). Use what's appropriate.
Totally random sidebar but... NERP?! Is this a widely used term? I know LAMP. I thought people used LEMP to describe variations. What does NERP stand for?
I used SparkPost, quite easy to integrate
&gt;Can I just revert to sendmail Nope. I mean in a technical sense yes, you can send email all you want from a local machine, but in practice you have to go through a good amount of work setting up a proper email service for yourself before any other email services will even consider your email worth putting in the spam folder.
&gt; I cant enforce the incoming data to be unicode and sometimes conversion does not works 100%. Attention users and vendors. In this age of globalism and uniform web services, we need to enforce text encoding standards. Effective November 1, 2017, all text must be encoded with one of the following international standards: UTF-8, UTF-16. If you are unable to use one of these international standards, please contact our sales team to upgrade your service. 
can you share more about your logging issues?
Don't be silly, no one would implement left-pad on their own. You need to install the basic pad library first
Step 1) Detect encoding. Here, it's important to tweak the order of detection. For example, if you need to distinguish between UTF-8 and ISO-8859-1 encoding, list UTF-8 first in your encoding_list otherwise it will get it wrong. This is my goto order: 'UTF-8, ASCII, ISO-8859-1, JIS, EUC-JP, SJIS' http://php.net/manual/en/function.mb-detect-encoding.php Step 2) Pass detected encoding type as 2nd param to mb_strlen() http://php.net/manual/en/function.mb-strlen.php Can you post an example of where this didn't work for you? 
Ive tested it all already. :/ The only non-working examples i have is from production, which contains sensitive data. :/ Thanks anyway.
Guys like you still exist?
Read a lot already. Basically, what i need is graphemes, but they didnt helped me yet. :/ I will take a look at another materials. Thanks for the help man.
Yes but... it's perfectly possible to build the front-end and back-end separate within the same framework; especially with Laravel.
1. Total. if you send more than that, you need a service. If you're sending spam, they can shut you down. If you're not, they will enhance deliverability. 
If some random has dropped in with this, it'd be lost to the Reddit wastelands in minutes. But because a guy from Netflix (whose platform is buggy af by the way) had this idea...
Used to be Wordpress (to my infinite displeasure), but between Laravel, and [SimpleMDE](https://simplemde.com/), it's actually pretty simple to put together a content management system. I've abstracted most of the work out now and I don't have to use Wordpress XD
[SparkPost](https://www.sparkpost.com) gives you 100,000 free per month. Might be useful if you think you'll be getting close to the Mailgun limit. 
Solving the problem of centralized logging when using Kubenetes. If I have x nodes, I want to have all the logs searchable in one place. So far I've come up short of solving that. 
Although conversely my wife used to receive emails from my site just fine and since switching to Mailgun today her emails are ending up in her junk folder... fingers crossed things will improve as time goes on!
NERP is sort of the new JavaScript MEAN stack. MEAN - MongoDB, Express, Angular, Node NERP - Node, Express, React, PostgresDB (Sequelize.js ORM)
Looked into using Elasticsearch? https://kubernetes.io/docs/tasks/debug-application-cluster/logging-elasticsearch-kibana/
Sure, not by choice. I learned fullstack JavaScript at Fullstack Academy, and then stayed on as a fellow for 3 months. Fucking love that stack. However, I took a six figure salary offer to go work for a large Forbes15 financial institution, and their tech stack is a bit behind. Gonna suck to lern PHP, Anuglar, and ugly ass Perl - but gotta go where the money is, eh? EDIT: JavaScript stack seems to be the future though, so I worry about spending time in a place where I am developing skills (PHP/PERL) that may be on the way out for (Node.js, which I love much more);
What would you call it?
Oh. That explains why I posted my reply on Reddit and not the internals mailing list. Man, thanks for clearing that up for me. I was, like, totes confused there until you came along with your baby troll/alt account. What would we do without folk like you?
well i took about 2 years of computer science but ruptured my Achilles and as soon as i could walk just got a job just need some advice really...is learning php a legitimate field to get in to? my fear of network administration is that it seems like that fad was big a couple years ago
This. I would add that `composer` is the equivalent of `npm` or `yarn` https://getcomposer.org/ Format is composer.json, similar to package.json. You can add ~~code~~ scripts in there, example: "scripts": { "test": [ "vendor/bin/phpunit --configuration phpunit.xml --coverage-clover coverage.xml", "@standards" ], "standards": [ "vendor/bin/phpcs --standard=phpcs.ruleset.xml *.php inc/ bin/" ] } Then do `composer test` or `composer standards` to run. 
&gt; I am developing skills (PHP/PERL) that may be on the way out PHP has a long way to go before "being on the way out". PHP7 is actively improving, releasing new versions every few months, over twice as fast PHP5, and experiencing a sort of renaissance. Perl 6 on the other hand... They don't really belong in the same category anymore. 
No, I think dangerous is the right word here. The danger is in people recommending stateless JWT as the *New Hot Thing* that makes ordinary session ID's a thing of the past. It doesn't, and stateless JWT comes with a number of security &amp; usability pitfalls that session ID's don't have. I made this mistake recently as well, when developing an app API for a client. I thought JWT would allow my app to scale better and be more secure, but I found that the inability to revoke JWT's made them unsuitable for my app. Long-lived sessions were a requirement because the API is meant to be consumed by native mobile apps (where sessions typically don't expire), so token invalidation was essential. JWT's are a neat idea and they have their uses, but generally speaking, I would not advocate them as a sessions replacement.
Hopefully I won't do too much perl then!
[Security Advisories](https://github.com/Roave/SecurityAdvisories) is a must for any application.
JWT is the correct thing to use for access tokens. Not to be confused with sessions!
Practically, no.
The first time you run the code, the compressed version will be ever-so-slightly faster. Once you've run the script once it will be [opcode cached](https://support.cloud.engineyard.com/hc/en-us/articles/205411888-PHP-Performance-I-Everything-You-Need-to-Know-About-OpCode-Caches), and the comments and longer parameter names wouldn't make any difference.
No, not at all. When PHP first reads your script, it converts the PHP code to opcodes. It then caches the opcodes so it can use then any time the script is loaded. Opcodes already have the comments stripped, so there is no performance difference (unless you are not using an opcode cache, but since you care about performance I assume you do)
You can use empty but its a weak check, meaning it can be 1, '1', true, 'hello', etc. It works like isset in that it wont throw a notice if the index is not present: http://php.net/manual/en/function.empty.php &lt;?php if (!empty($my_variable['Image']['src'])) { ... } 
Not sure how this flew over my head. Didnt realize that empty would not throw an undefined index!
I was talking about token based authentication instead of making hundreds of session files in temp folder.
I thought isset() would not throw an undefined index? I use it all the time to test if an index is present or not.
Isset will not but then if I want to check if its a certain value I have to do another if statement. Because $my_variable['Image']['src'] could be '', false, null etc.
Why not check in the same if ? if(isset($my_variable['Image']['src']) &amp;&amp; $my_variable['Image']['src']) { } The second part of '&amp;&amp;' will never check if the first one fails.
Yeah, whats wrong with that? if (isset($a) &amp;&amp; $a=='value') I get your point, but there is not a issetAndEquals function in PHP. I've had the same thought before. You could write it if you want... Something like this would be kinda interesting though: if (isset($a) &amp;&amp; == 'a') 
For things like this I usually prefer to go up a level and check if there is a way i can ensure that the data is there and then do my checks. Since you're doing if() you can potentially just do a hard check on it for false if you can guarantee its existence. if($myVariable['Image']['src'] !== False) as others have said you can also group them together with &amp;&amp;. 
The second link suggests that "keeping a list of revocations, accessible to my servers so that I can invalidate tokens" is bad because what happens if "your blacklist/authentication server goes down"? What about CRL's for the X509 infrastructure? Should we stop using SSL/TLS because it uses CRL's?
This should probably be taken to another subreddit - but I am not sure which one I would recommend. netsec would probably be a good place to check though I don't know if they accept these types of questions. That being said, having in-house servers connecting to production does impose some security risks. I don't allow anything to touch production except our production servers. I think there are greater risks than a DDOS in this use case. &gt; The cloud app actually calls the reporting server and forwards the result to the client when ready for our long running reporting we use a queue and the results are delivered to s3 where our application will generate a timed, signed link when it is ready and the user requests it. I believe this use case of a worker server handling these loads an then delivering to a secure location works just fine. May be something to consider.
Interesting and i like that. For some reason I thought that wouldnt work. I will check it out.
The whole point of his post is that he cannot guarantee its existence mate
without unit of work and only 2x faster... interesting. Also interesting that hydration of associations is even slower that in doctrine. But still this could be useful for building persistence layer. The only thing that I recommend - put some efforts in real use-case examples which demonstrates pros of this solution.
It might ever so slightly increase the parsing time of reading the script, but it would be so minimal that the payoff wouldn't make it worth it.
&gt; MVC is a design pattern, but it's a very high-level, architectural pattern. Wrong. MVC is a USER INTERFACE design pattern, not an application or architectural design pattern. The M in MVC is the Model that holds the data for the VIEW, not the application data that you store in a database! The web framework you use, whether it's Symfony, Zend, Laravel or whatever, is part of the user interface, not your application or business logic (yes, an API is also an interface). Thanks to Ruby on Rails, a whole generation of developers (also looking at you framework guys) have been completely misinterpreting (or abusing) the MVC design pattern. Can we please stop building applications INSIDE frameworks but rather separate your business logic out into a library that you then EXPOSE to the framework? Can we do that? Also, please fuck off Active record and all that shit (since you're the biggest culprit of all this). And if you use PHP, use Doctrine instead which is a data mapper that allows to accomplish this. Thank you. 
No, but we're moving to OCSP stapling. 
i didn't know that too :)
Sure you can! `isset` short-circuits. This means that if you have both accesses in one isset: if(isset($arr["image"], $arr["image"]["src"]) { // do cool stuff } It should work fine! I am not 100% sure on this - but the documentation does state: &gt; Evaluation goes from left to right and stops as soon as an unset variable is encountered. So I am pretty sure this should work juuuuuust fine.
If you're only assigning a variable with this data, you can use the null coalesce operator (new in PHP 7): $imageSrc = $my_variable['Image']['src'] ?? null;
Hi Mark! Thank you for your interest :-) It has not been designed for scability; I guess I would use a cloud service for that purpose. We're currently using it as a local environment for one of our project and it works great for now! Still, it might need some improvements and I'll wait until we successfuly deployed it to production before releasing the final 2.0 release. Regarding your logging issues, I don't know which logging solution you're using, but Graylog is interesting for our needs. In a docker-compose file, you are able to use Docker logging with: your_service: [...] logging: driver: gelf options: gelf-address: udp://host:port So I guess if you put your Graylog server on one server and [tell him to listen to a given UDP port](https://github.com/thecodingmachine/kickoff-docker-php/blob/master/.docker/graylog/udp-input.json), it will receive all logs from your containers. Hope that helps! :-)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [thecodingmachine/kickoff-docker-php/.../**udp-input.json** (master → f81eb30)](https://github.com/thecodingmachine/kickoff-docker-php/blob/f81eb30845755cd3c51dc883d35ce33a9fd2a7c6/.docker/graylog/udp-input.json) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dl15z69.)^.
To clarify It does have a unit of work concept, but you are not forced to use it. The 2x + speed advantage is only for updates and deletes. Other operations are more or less the same. There are lots of code samples in the wiki. Anything you would like to see? 
I don't really follow you. You posted a link about using JWT for session storage, where the author is not adverse to using JWT for the correct purpose, which is authentication tokens. 
Woo, seems like people really don't like JWT.
No one said anything about being stateless or stateful. JWT can do both. Also your use case for revoking a token, what exactly are you trying to achieve? If you are storing data in a JWT that is no longer valid, then thats not an authentication token, thats session storage. 
The real question is what are you trying to achieve by revoking a token?
You don't even need 10011010: 
I absolutely love the name of your exceptions!
It would, but the following is equivalent: if (isset($arr["image"]["src"])) { // ... }
&gt;no one sensible would ever use this for anything. Challenge *accepted*. 
But considering the latter part doesn't get evaluated, it should not throw a notice, right?
I'm the author of Bowhead, which is done in Laravel (I am migrating all my projects and work from Symfony to Laravel) .. I also wrote a series of tutorials on how to get going. https://github.com/joeldg/bowhead
It won't throw a notice in either example, they produce the exact same result.
Ooooh, I read this whole post wrong. Sorry!
Thanks! Throwing a regular exception seemed to be taking it too seriously haha. 
As long as you abide by "warning-ware" haha 
Guilty as charged haha. I can't imagine using Zttp for anything other than a fun, small package like this, but you'll have to pry collections from my cold, dead hands.
I would imagine you would want to check if the 'Image' index exists too. if(array_key_exists('Image', $my_variable) &amp;&amp; array_key_exists('src', $my_variable['Image']) { ... } 
&gt; Something like the Cloudflare protection uses (note, if the attacker knows your real server IP, then the Cloudflare umbrella is pointless anyway). You can always deny access to anything but the Cloudflare IPs.
I love how this makes on the fly software updates really easy. If I ever need to tweak an algorithm or fix a bug, I just need to submit a *really* good answer to stack overflow with the updated code. Goodbye source control! 
&gt; Once you've run the script once it will be opcode cached, and the comments and longer parameter names wouldn't make any difference. That's not strictly accurate. Although the opcodes (and everything else) will be stored in memory, PHP needs to copy them from where they are stored in OpCache, to be locally available in the [current process that is processing a request](https://github.com/php/php-src/blob/018f033aaf46a012a8f90818a5c5eef1af60739c/ext/opcache/zend_accelerator_util_funcs.c#L641-L661). PHP also does a checksum on [the data](https://github.com/php/php-src/blob/018f033aaf46a012a8f90818a5c5eef1af60739c/ext/opcache/zend_accelerator_util_funcs.c#L786) which necessarily touches all of the bytes in the file. (there is some other stuff going on, but those two are one's I'm reasonably sure about). Reducing the size of function names and removing the comments would make the memory used be smaller, and so require less memory bandwidth. However, few people would ever see a difference in performance. The only scenario where you would see a noticeable difference is when your machine is neither IO or CPU bound, but instead is constrained by memory bandwidth throughput. This is not totally impossible to happen. e.g. if you have a PHP docker container running on a host, alongside a few other containers, that container might only have 8 gigabytes per second of memory bandwidth available to it. Serving up 1,000 requests a second would mean that each request could only touch 8 megabytes of memory, before the limit on the memory bandwidth became a problem. However, hardware is really quite cheap compared to developer time. Making it harder to investigate bugs, or log exception traces clearly is not worth it compared to acquiring more/more powerful hardware, until you have something like 100 (at a guess) servers running your code.
What the other folks said about opcache discarding comments isn't correct. By default, the [opcache.save-comments](http://php.net/manual/en/opcache.configuration.php) and opcache.load_comments directives are on by default. That means all documentation comments are saved and loaded from opcode cache. Turning it off will break any code (several frameworks) that depends on annotations. I've not measured how much memory saving comments in opcache uses ~~, but I would guess that the amount is negligible otherwise those directives would probably be off by default~~.
I started teaching myself PHP as my first language about 8 months ago because the app I was working with (opendcim) is written primarily in PHP. I've been able to pick up a lot and I have had a lot of success. I am currently re-writing an RFID auditing plug in I wrote and the difference in code is night and day, however I am largely stuck in the procedural side because I am just not clicking with OOP. I know I need to make the leap but I don't know where to start. Any tips? Thank you
I'm using this lib in one of my projects.
Can I quote you on the readme? 
Absolutely
Done; added to a new testimonials section. I have laughed every time I read your post haha.
&gt; Even if you're the strictest PHP writer there is, not following a style guide is at best, like the 5th reason you should never use this code. Gold
I'm extremely tempted to improve this with file-based caching so the rate limit isn't an issue. I'll make a PR if I get around to doing it 😂
You already said why it's not off: it'll break code based on annotations. How negligible (or not) the amount of memory wasted is, is irrelevant at that point. I could argue in the same train of thought that the amount of memory wasted is significant, or they wouldn't bother having *two distinct options* about it in the extension.
&gt; Would a PHP script run faster if say I would remove about 1000 lines of comments / Doc Blocks and function parameters where shortened? The meme we have going is "no, because opcache". But actually: - PHPDoc comments are preserved as an opcode (so they add memory). - The names of identifiers and variables are also in the opcodes. - The number of source files (separately from their size) has direct impact on performance as it results in more autoloader triggers and IO operations (even with opcache, autoloading is an overhead and by default results in mtime() calls for every source file). - Interfaces and typehints have to be loaded and verified at runtime (every method in every class implementing an interface) but in most cases this has no functional purpose on stable code. So it does have *some* impact. Not a big one, that you should bother complicating your deployment procedure in 90% of cases. But for large, stable libraries, it might be worth a shot to have some processing script compile a redistributable package that eliminates non-functional elelements (warning: not a popular opinion, watch me get eaten alive for it). Needless to say, this is not a current practice in the PHP community. For reference, about 2/3 to 3/4 of the source in a typical package is non-functional (and I'm counting only code that is loaded at runtime, so not counting `/tests`, TXT/MD files etc.).
I hope your cache handler makes use of this library for its workings.
Huh, now that I reread that I have no idea why I added that. ¯\\\_(ツ)\_/¯
You might be looking for something like: if ($my_variable['Image']['src'] ?? null) { // Do stuff with $src } If the var is set and truthy, the inner block runs. If it's falsey OR if it's unset, it won't run, but it won't throw any errors about undefined indexes.
Does this checksum validation occur regardless of `opcache.validate_timestamps` value?
&gt; netsec would probably be a good place to check though I don't know if they accept these types of questions. They strictly disallow questions like this. I feel like this is a missing sub .. I haven't found anywhere I would think is suitable. I mean, you'll get upvotes at /r/asknetsec but half the sub these days is about certification exams. 
And if you search around a bit there is a post from posgresql community, that debunks most of the reasons stated in that post.
Hi! Your project (and especially the associated blog post) is one of the factors that inspired me to try this out. I had a tinker with Bowhead but didn't get all that far because of local environment issues which I didn't have the appetite to resolve at the time. Also, I want to keep away from cryptocurrency at the moment. More interested in precious metals at this point. May I ask; why are you moving from Symfony to Laravel?
&gt; `isset` short-circuits `isset` doesn't, the `&amp;&amp;` operator does. If the left operand is falsy, the right operand does not get executed/inspected.
You are conflating front end and back end which is not surprising seeing as you are a node developer. PHP is server side so you have no need to run webpack. If you want a front end toolchain then use npm, webpack and npm scripts. There is no reason to bring PHP into that area. If you want to run server side tooling then you have composer for packages, and many people just use the symfony/console to write scripts if you aren't using a framework. Most frameworks have their own server side cli tools like laravels which is based on symfony/console I believe. Also note that Laravel uses npm for front end tooling as well. Almost all server side languages stay away from front end tooling and leave that to the js community. That may seem odd to you coming from node which tries to do everything but this is how everything else works. If you wan't more complex server side tooling then there are a plethora of tools available. Some built in PHP like deployer, but there is no reason why you can't use capistrano or even kubernetes if you want to go all out.
PHP use checksum even if file mtime is same? 
What year is it? &gt;CakePHP &gt;Zend Development &gt;Core PHP &gt;PHP / Smarty &gt;Open Source CMS &gt;MVC framework &gt;Ajax &gt;XML
I've made a library for this cases where there's a need to access countless children. https://github.com/alrik11es/object-dot-notation &lt;?php $d = \Alr\ObjectDotNotation\Data::load($my_variable); if($d-&gt;get('Image.src')) { ... } * It will check everything you need or return null. * **It works with objects or arrays**. * It's always under development/improvement and needs feedback but the good thing is that I can fix any problem fast because of is tiny nature and I'm using it in production.
If the reading is slower than Doctrine, I should focus on improving that, since most database actions will read more on average than the other actions like insert,update,delete.
So are you saying the docs are wrong?
Sorry, I misread your comment in the context of this question. However, your solution only works for non-existing/null values, which is not what OP was looking for.
Great thoughts Lt! I will digest it and edit my post when I have some time. Tkx for the feedback!
I love your lib so much, I wrote my own micro kernel on top of it! &lt;?php // well, if I don't use anything else, i can use the namespace as well. namespace brandonshar; try { $request = StackOverflowBuddy::createRequestObjectFromGlobals(); } catch ( HaveToWriteYourOwnCodeException $fuck) { @/*h*/ $fuck-&gt;me or die( "trying"); } try { $configProvider = StackOverflowBuddy::createAwesomeConfigurationProviderThatFindsConfigFilesAnywhereAndParsesEverythingPreferableAudioFilesFromMyBoss(); } catch ( HaveToWriteYourOwnCodeException $fuck) { @/*h*/ $fuck-&gt;me or die( "trying"); } try { $httpKernel = StackOverflowBuddy::createAwesomeHttpKernelLikeLaravelOrSymfonyOrSomethingButBetterAndIndepedentBecauseFrameworksSuck(); } catch ( HaveToWriteYourOwnCodeException $fuck) { @/*h*/ $fuck-&gt;me or die( "trying"); } try { $requestContext = StackOverflowBuddy::get( "createRequestObjectFromGlobals")-&gt;attribution(); $kernelContext = StackOverflowBuddy::get( "createRequestObjectFromGlobals")-&gt;attribution(); StackOverflowBuddy::doAwesomeMagicThatAutomaticallyFindsProperResponseHandleMethodOnKernelClassByStackOverflowForRequestObjectByStackOverflowInStaticKontext( $httpKernel, $kernelContext, $request, $requestContext ); } catch ( HaveToWriteYourOwnCodeException $fuck) { @/*h*/ $fuck-&gt;me or die( "trying"); } catch ( UnnecessarilyGratefulException $wtf) { try { StackOverflowBuddy::createIssueOnGitHub( "BrandonShar/stack-overflow-buddy", "Dude, your code sucks", "I'm quite sure, i shouldn't have ended up here", file_get_contents(__file__) ); } catch ( HaveToWriteYourOwnCodeException $fuck) { throw new \LogicException( "fuck it", $skill = 0, $wtf); } } try { StackOverflowBuddy::sendWhatsAppToExGirlFriendAndMom( "I'm finally a real programmer! suck it! Love you."); } catch ( HaveToWriteYourOwnCodeException $fuck) { @/*h*/ $fuck-&gt;me; } 
I've got a quick and dirty Docker (nginx, php-fpm, I user redis and MySql on a cloud server) setup for local dev (which I have to say, I freaking love over using Vagrant), which just logs to the Volume and I read the raw logs. This looks like a really neat solution, especially the reverse proxy. Currently I have to either use different ports or just docker-compose down/up when I'm working on different projects. 
This title is not really a fair presentation of the concerns raised by the maintainer. If you're interested in the subject I advise reading the full thread.
They look like independent checks and options: https://github.com/php/php-src/blob/018f033aaf46a012a8f90818a5c5eef1af60739c/ext/opcache/ZendAccelerator.c#L1850-L1892 Oh, just noticed - this is probably off by default. &gt; opcache.consistency_checks integer - If non-zero, OPcache will verify the cache checksum every N requests, where N is the value of this configuration directive. This should only be enabled when debugging, as it will impair performance.
Same answer as above - apparently the consistency check needs to be enabled in the ini file - but it is independent of the file checks.
I mean on the box itself. DROP (not DENY) requests from anything other than the cloudflare IP address.
Do you think monolog should adopt psr/log? That's the same situation. This is not about shim layers. It is just the lightest way to go, the other solution could be to refactor their code directly so it implements interfaces without shim layer. 
Check out https://preprocess.io/#property-loaders – it might interest you.
It will solve the complexities of deploys as well. Now we just need to update our SO answers. Which luckily can be done using a web interface!
So in the end both shouldn't affect the production. But anyway it was interesting to learn.
This is fucking obfuscation that make one's eyes bleed
I *think* this would break down if you don't call the traits constructor? I've admired preprocess since the day I've seen it, but I would prefer to use vanilla-ish php.
Sorry for the boring answer, but the you have these options: 1. Implement iniProxyTrait(), and document it should be called in the constructor. 2. Document that property, x, y, z should be initialized to such and such in the constructor. 3. Use lazy initialization, i.e. in methods: if (!$this-&gt;isProxyTrailtInit) $this-&gt;initProxyTrait(); 4. A variation of 3, but on a by-property basis, replace using property $x with getter getX() which lazy initializes $x. As for the engine, such code would have to be hoisted and inserted in the constructor. The problem is a constructor may not exist. Which is a problem in PHP, because if a subclass doesn't know a parent constructor exists, it won't call it. In Java when you don't invoke a parent constructor, it's called automatically. So implementing this in PHP will be a long multi-step process. If you have the patience and time - sure, let's go for it :)
Yeah, the trait does implement its own constructor for that, but it also provides a _magic_ (bleh) constant for cases where a custom constructor is needed. So typing something like `loaders;` in the constructor will add the required call to the custom constructor. I notice that isn't documented, which sucks. Would be awesome for something like this to be supported natively, but I doubt it will ever happen. :/
Ha! Further down the rabbit hole.
I've implemented something like that via decorators in https://github.com/Ocramius/ProxyManager/ You may also want to look at the solution in https://github.com/leedavis81/vent The working concept is simple, here is a naive implementation: class Foo { private $bar; public function __construct() { unset($this-&gt;bar); } public function __get($name) { if ('bar' === $name) { $this-&gt;bar = $this-&gt;initializeBar(); } return $this-&gt;$name; } public function rollADice() : string { return "dice side: " . $this-&gt;bar; } private function initializeBar() : int { return random_int(1, 6); } } See https://3v4l.org/Kjf34 for the results.
This is so great! Now I can fire all my ~~google monkeys~~ developers!
&gt; I hope to never have to do a schema change on such a big table So true. After the DB reaches a certain size, this really becomes an issue (unless you use such big tables for key/value stores). Once you reach that point, adding a column practically becomes a downtime if you've transactions on it all the time. Sure, he mentions the online schema change tools. But once you realize that adding columns in other databases is free*, why go through the trouble? That's easily the #1 reason to avoid MySQL and use something else. *) Talking about `NULL` columns with no initial default value.
As far as I understood OAuth, each server manages his own clients, but is connected to other servers, managing their own clients. When a user of one of your customers would try to login the network of another client, that clients server would check the credentials with the original server for that user, taking it by the word when it says it's a legitimate login. In other words, OAuth is great when you want to use one login in many different services, without having your login-data in danger of being compromised or having to create an account with each service. "facebook login" would be a great example for such a service, since it allows you to log into many sites with your facebook credentials, even though you've never visited these sites before. Given that you have many customers with a set number of users, that do not require access to the services of other customers, I do not thing OAuth is a service that would make sense for you to implement. The only opportunity I'd see here is that you could allow for a "company domain" of users, that gives each of your employees the option to log into every clients system, using his company-credentials, without having to create accounts for each user that is supposed to administrate that project. It could make your work-flow in the company easier, by managing which of your employees can access client-data and have them get access in an easy and safe manner. It will not bring any benefits for your clients though. edit: in the rare case of clients having multiple systems by your company, that do not work together/use different user-tables, etc. It might be an advantage. But if you made multiple systems for one client and you used 3 different sets of users, as a customer, I would have asked if you really know what you are doing a long time ago... 
 At first I thought it would only upload my code to SO. but reading into it... it's actually smart. Not sure if "just take random code and use for production" is a recommended workflow, but "let's look at some other solutions, to figure out how we can do it fast" is a good one and this code helps with it a lot. 
I think the contributor(michaelklishin) answered that question pretty well. Best I can tell with the most recent comment the reason to accept this PR is because it will help spread the user's library to end users which would then make it popular enough to warrant all of the extra work the maintainers would need to do... 
No. If the fix is working around an edge case, I consider it a code smell. A clean solution wouldn't treat this as an edge case and wouldn't make the comment necessary.
[amqp interop](https://github.com/queue-interop/amqp-interop) is not a library but only interfaces, a spec, just like psr/log. What is wrong with implementing them? Everybody will benefit from this, you and I. Life is too short "to wait for a couple of years". We can do great stuff today, why should we wait? Also, I stated several time that I am going to support it. 
The thing is, there can't always be a "clean solution". Apparently you've never written cross-browser CSS. Sometimes you just gotta do weird shit and it's not obvious why you did it.
It's truly inspiring to watch my humble project be taken to these heights!
Don't come whining to Reddit because a library isn't implementing your chosen interfaces. We're not here to peer pressure the maintainer into changing their mind. Just write an interop layer/wrapper. Edit: I do want to make something clear. It's great that you're making an interop layer, and it's cool you're trying to make it universal. So long as you're not pushy about it, it's a great thing
&gt; amqp interop is not a library but only interfaces In my experience the term 'library' refers to a set of resources, usually packaged in some way for easier distribution. That link's readme directs the user to [queue-interop](https://github.com/queue-interop/queue-interop#amqp-interop) which has an installation step consisting of `composer require queue-interop/amqp-interop` in order to pull down the interface files. That's a library. I really think you're missing some of those contributor's points. You claim you'll support it, but how can they be sure? Who are you? What is your track record? How can they depend on you not to abandon it? Who's to say you won't discover an intense interest in abstract art performance and disappear one day? Your intentions and desires aren't the issue here.
Where is the documentation for phpdbg? [phpdbg.com](http://www.phpdbg.com/docs) seems to be down and the [php docs](http://php.net/manual/en/migration56.new-features.php#migration56.new-features.phpdbg) just point to the website. I can only find old blog posts but nothing official. Edit: Added php doc link.
I think you should rename it to "script kiddie haven"
&gt; That's easily the #1 reason to avoid MySQL and use something else. no it's not, it's quite rare to have such big tables for a basic project or website... I think I can count the +1GB databases I've seen on one hand.
i know $this-&gt; in model references to the model but $this in controller inside a method does it references like " this method uses $this-&gt;function() ?
Not since 20 years or so ago when PHP started compiling scripts before executing them.
How about, no :)
It's good to see the point-release of this under-rated IDE is gaining the exposure it deserves at last.
under-rated… okay…
I mean, finally, PHPStorm gets some recognition on this sub. I'm surprised it took this long.
Kotlin compiles to Java bytecode and it probably uses the same UI elements, so this change doesn't mean much in this sense…
Kotlin compiles to Java bytecode and it probably uses the same UI elements, so this change doesn't mean much in this sense…
Are you OK? You seem really upset that someone bothered to let others know that a popular IDE now supports PHP 7.2
It's funny how I get the total opposite vibe! Unfortunately the market for PHP IDEs is a one pony race at the moment, with PHPStorm being the only tool that does autocompletion right. Every time someone asks about namespaces and modules etc, everybody gang up to recommend PHPStorm (which, let's not forget, it's paid, and not that cheap for those who are in emerging markets with weak currencies. It's literally 3 months lunch per year down here in Brazil). -- edit -- To be fair, PHP-Integrator for Atom is getting there, but the sorting for the autocompletion suggestions is pretty bad (sometimes leaving out some obvious stuff) and I lost count of how many times I have to force re-indexing the project every day. I really wish I could understand the code as to contribute to it!
I believe he's using sarcasm here
I think we'll never know… https://en.wikipedia.org/wiki/Poe%27s_law
Relieved, clearly, no? Relieved that finally, the truth can be known about PHPStorm 2017.2.1, and that the word shall be spread. I've been on this sub a long time, and I'm appalled its taken this long for it gain the recognition it deserves. I'll be honest, when I was younger, I used to Google images of PHPStorm, and imagine them running on my OS. I'd copy them, oh, how I would paste them.
How do you load the autoloader without require? *ducks* 
It's the "Stop writing PHP like it's 2009" guy. If you remember, the first step to not writing PHP like it's 2009 was: 1. Use HHVM. So guess what's the first step to "Never require() anything in PHP again": 1. Use HHVM OP, no need to write more articles, just write titles, we get the point. You worked at Facebook, so you really fucking love HHVM. Proposals for your next blog titles: - "How to be incompatible with most PHP hosts" - "How to be unable to use most PHP extensions" - "How to have very spotty compatibility with Composer packages" - "How to have no Windows support" - "How to use a custom PHP engine by Facebook with uncertain future" 
:D
I, for one, welcome our new PHPStorm 2017.2.1 overlords.
What does autoload function do? It requires too....
Why use `classmap` instead of PSR autoloading? You don't need to constantly run `composer dump-autoload` every time you add a class during development, and you can dump an optimized class map when you deploy.
Seriously though, does someone posting this take something away from you? Why make such a big deal? If you feel that this post adds nothing of value, why not down-vote and move on?
PSA: If you're an open source developer with an active project on GitHub/BitBucket/etc, you can get PHPStorm and the entire Intellij suite for free (for foss usage). 
My feeling is that, whilst obviously the app is a robust and popular package, essentially what seems to happen is that it dominates to such a degree, that dissent get shots down. Of course, only some kind of conspiracy theorist could posit that the app is shilled-for, only a swivel-eyed lunatic could possibly posit, that, over and above its own rightful success amongst the user base, that the app is shilled-for. I've got my swivel-eyed-loon-basher right here Sir.
Technically classmaps are faster. Less to do per class being loaded (no need to check if a file exists, or look for it in several locations, which happens across components). You do need to run composer dump-autoload every time, because Composer doesn't implement classmaps as a regular workflow for code you develop. That's a problem with Composer, not classmaps as a concept. Say I have a classmap autoloader, which auto-updates itself in such situations. Even if it's not about speed (because during dev it doesn't matter that much), once you choose to go classmaps, you can do some very interesting things that PSR autoloading can't do (while remaining compatible with PSR).
I agree, people seem to get upset when someone says they don't like it and would prefer to stick with sublime or atom. I prefer Symfony over Laravel. I don't attack people for preferring one tool over another, and I'm not attacking you. As a PHPStorm user, I found it informative that the latest update includes PHP 7.2 support. I don't follow JetBrains blog, so I wasn't aware of this just yet. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I realize that a classmap is faster, but as you said, for dev its not about speed. But if you're trying to encourage someone that is using `require()` everywhere in their code to switch to a front end controller and have composer handle the autoloading, they're not going to do anything with the classmaps, nor realize that there are other options. On top of that, they'll have a bad developer experience from having to dump their autoload after every class. Chances are, they'll not realize the benefit and go back to their old habbits.
A good user-friendly website is a need of every small or big business. It defines you brand your image over the Internet. Most of us are not aware of website development in another way they don’t know which is best the best language to build a creative website. In this era, website moved from static to dynamic and today PHP content management system has made it easier for all of us to develop such creative dynamic web sites. So if you are truly looking to build a website for your business then you can take help from Vwish firm which is famous for its amazing php development services india at very inexpensive rates.
&gt; with PHPStorm being the only tool that does autocompletion right. I don't really remember having problems with autocomplete on Netbeans.
&gt; If you want to go even further and happen to be using HHVM in your project (and you should), you can get autoload to work for all top level symbols: Classes, functions outside of classes and even constants outside of classes. Submitted: 2012-05-25 19:34 UTC &gt; https://bugs.php.net/bug.php?id=62162
HHVM, along side fractal of bad design, was the impetus behind PHP7 getting it's shit together. /me ducks 
Oh, what's this? Information about something PHP-related on the PHP subreddit? Well this just can't be!
Thank you 
&gt; I agree, people seem to get upset when someone says they don't like it and would prefer to stick with sublime or atom. I prefer Symfony over Laravel. I don't attack people for preferring one tool over another, and I'm not attacking you. I agree with this much
And here I thought you'd be Very Agreeable :) Have a nice day.
I'm aware of the differences, I never claimed Sublime or Atom were IDEs, just that some people prefer them to PHPStorm, and that I don't have a problem with that.
my understanding having sent in the request myself if that you need to show you're a _significant_ open source developer with a crucial piece of OSS software (eg Drush, or Ansible creator). I have for example Drupal modules on drupal.org that are OSS. And JetBrains replied to an email ages ago saying in short: "that's nice, is your work pivotal to a specific community" no it's not, it's an OSS module with 25 downloads, lol ... What I do recommend is their EDU agreement. As a staff member in HigherEd I provide proof of employment and yearly I use Jetbrains products for free at my employment.
or refactoring. Or namespaces. Or modules. Or many front-end technologies, in terms of syntax recognition. Or looks, and feels. Or coding standards plugins. Or integrated versioning management, both for SVN but of course more importantly, Git. Or integration with Chrome/Chromium/Firefox for run-stop analysis. Or integrations with your LESS/SASS compilers. Or FTP, if you're still rocking it like it's Two Thousand Zero Zero Party Over, Loose, Out of time. Or of Twig, or of Smarty. Of Zend 1 but Zend 2 too, CakePHP if that's your bag, but able to be part of the Laravel party.
Of course, Netbeans knows Wordpress too, and can be made to make you update your cores, people. The rebellion starts here people. It starts with looking outside of what is rammed in your faces. So look around.
Sure, but now that it got its shit together...
I understand your reaction. But we're becoming a mono-culture in this well-monetised sub. Framework? Answer is always Laravel. Fair play, Laravel is capable. IDE? Answer is always PHPStorm, and other answers get karma-koshed.
Is it possible to pay only once for a lifetime usage? 
https://github.com/TheDevNetwork/PhpTypes That's one of my projects. I have a free perpetual license from them. The number of stars is relatively low although the downloads are somewhat high. I am not sure that it is required that your project is *crucial* but that it is active and used. I am certainly not a "significant" open source developer, but I do try to contribute here and there to whatever projects I can. Their EDU program is also good, but not everyone works for higher education. I think the requirements for entry are much more difficult for their EDU program than their FOSS one. 2 cents.
This tool didn't make a real Terminal in a Web browser, but it's very close. All in PHP of course. Anyone have something like that ?
Do not mean to start a flamewar but to counter your argument about monoculture, I personally prefer Symfony over Laravel. 
You would get no flamewar from me Sir, yours is the response i would encourage. That there is diversity of frameworks, and of IDEs. I am troubled by what I hear of late. Edit: mis-assumed gender-pronouns, use as you would.
Mandatory: https://blog.jetbrains.com/phpstorm/2017/07/autorun-phpunit-tests-in-phpstorm-2017-2/ :)
I was dis-agreeable? :-/
Fair enough. Perhaps I don't lurk here enough to see what you're seeing. I participate in meetups and conferences, so I am generally exposed to a wide variety of frameworks and technologies although I am biased towards the ones I think are best. However, competition can and generally does encourage making things better. E.g. AFAIK Symfony wasn't doing commandbus until after laravel started doing it. Currently, I use things like IntelliJ Suite (Primary), neovim (secondary), VSCode (as a replacement for gedit mostly). 
No, just plain agreeable.
When I look over PHPStorm, I don't yet see anything to make me ditch Netbeans. I respect the project. I respect the enthused users. I disrespect the shills. That's all it is ultimately. I provisionally spectate the MS FOSS offerings..
I was as much as I could, in the moment
For use only with the open source project. While there's really no way to enforce it, you're not meant to use the free license for any commercial work.
Indeed! Amended first post.
I understand completely.
I don't know that I would go as far as calling enthusiastic users shills, most of the devs I know (including myself) are very passionate about whatever technologies, frameworks, etc, they use and thus naturally evangelize things. It's the general nature of open source, even if some of these IDEs are not open source themselves.
So name another IDE that is out-of-the-box as awesome and setup as PHPStorm.
A classmap is also helpful if you want to add composer autoloading to a legacy project and untangle the mess of requires and multiple-classes-per-file that built up over time.
Me too. Both Laravel and its creator are way too opinionated for me.
That is a good point. Thanks.
Everything you describe exists. But I did and do seek to make that distinction between shills and users. Absolutely, that is vital to fulfilling any good-natured discussion.
dude
It's not Laravel/Creator's success, it's the way this sub is dominated by that IDE, and if I were on their team, I would dial it down one notch like an Autistic kid who's been parachuted into the middle of a school play.
Yes but you won't get major version updates after your annual subscription expires.
This is off topic. Might as well be telling us to use node.
Yeah that's what I thought. Sometimes things are really good, and there's no competition. PHPStorm is one of those things. I mean, this is akin to whining about a Photoshop post on /r/graphic_design.
This sub is in no way dominated by Laravel. Laravel is just a popular choice within the PHP community as a whole right now. If you don't like news about what's current in PHP, why are you subbed to a PHP forum?
I have been successful using Mailgun. Are you sure everything was configured correctly? I have also really liked the freely available e-mail offered by Zoho. If you have your own domain, you can use their SMTP server for free, but not for mass mailing, so it depends on your use.
Are you using the Mailgun API or the SMTP service? I found that some emails weren't getting delivered using the API, but they worked fine with SMTP.
I'm using the Mailgun API via the Laravel driver. All emails are successfully sending out from Mailgun, but they always end up in the spam box. I guess the major question of my post is, has anyone ever successfully used a service like Mailgun and hit the Inbox for most services (outlook, gmail, etc.)?
Your Mailgun campaign emails and whatnot are hitting the Inbox for multiple service providers (outlook, gmail, yahoo, etc.)? I am almost certain everything is hooked up correctly. My colleagues and I have been looking at it for a day or two. The MX records are all setup correctly, we have our own domain, we get a 9/10 on the mail tester service that is recommended by folks online.. just can't figure out why we are hitting the spam bin for everything... aside from Mailgun using a shared IP address that is blacklisted for spam by a few major spam lists (spam cannibal and a few others).
Yeah, using the Laravel driver just like you. However, I wasn't sending out mass e-mails, just automated things like registration, password retrieval, and order confirmations so that might have factored into it.
Hmm, maybe. At this point we are in the development phase, so we are just sending out one or two emails an hour to very select inboxes. 
&gt; has anyone ever successfully used a service like Mailgun and hit the Inbox for most services Yes, thousands of people (myself included).
I use [MXRoute] (https://mxroute.com) and can't recommend them enough. Although this does vary a bit from a PHP integrated service like Mailgun or SendGrid. I'm using them for a whole variety of domains and have configured SPF, DKIM and DMARC and mails are delivered successfully! 
Phpstorm has fallen out of favor for me after switching to Ubuntu. The ui is unworkably slow and clunky, while on the same system when I was running ms, it was working buttery smooth. Tried all the bs about enabling gpu rendering and whatnot. No change. Then in a twist if irony I found vscode to be so much smoother (on Ubuntu...) while still supporting 80% of the features I use daily... Unfuck the ui and I'll happily renew my license. Until that day, sorry. 
How well does it handle querying across multiple tables with, say, half a million records? Does it have any special features for doing batch processing? Why isn't there anything convenient for using limits and offsets?
So if someone likes a product they are a shill? I have FIVE Fractal Design cases, so I must be a shill for them, right? No. I just really fucking like their products, so I buy them like mad. Your posts seem to be quite odd.
You realize that Sublime, Atom, etc can all be configured to have pretty much 80% or more of the features that PHPStorm has, right? Linters, autocompletion, documentation, and so much more are easily possible in modern text editors. Don't get me wrong, I love PHPStorm, but don't discount text editors just because they are *just text editors*.
I'm gojmg to say that your DNS is wrong. Post the headers of one of your spam bin emails.
Well it will be slow and use a lot of memory just like every orm out there. In your repository you can return a PagedQuery, which is my answer to limit and offset. Paging (limit and offset) is the right way to deal with large result sets.
did you manage to make it autocomplete correctly? adding the right use statement and all? (if yes, what is the secret?)
Oh, and thanks for reminding me to add that to the wiki!
Agreed, reads are more frequent and will be further optimized. My previous profiling attempts didn't yield much results because xdebug profiling adds overhead to all function calls which can make some things seem like a problem which actually are not. Time to try out blackfire.io
Sounds like a security nightmare. What's the purpose of this exactly?
The EDU license only requires a .edu email address to verify, and you can renew it yearly. Just did this about a month ago.
Mandatory: not everyone uses PHPStorm :P
I'm a total noob, just learning and teaching myself PHP w/ MySQL. I work for a really large company and we have tons af basic and shitty internal 'apps' (if you can even call them that) people have built with MSFT tools (VB, Excel, SharePoint, BI, etc.). I decided to teach myself PHP so I could make some basic data collection and analysis/presentation apps to try to replace some of those MSFT-based dinosaurs. I have experience with HTML, CSS, JS, WordPress, etc. I've been using online tutorials and my personal shared server space on Bluehost as my learning Dev environment. So far I can establish a MySQL db and connect to it to do some basic CRUD in PHP. What's a realistic expectation for how long it will take me to finish learning slightly more than basic skills and develop a useful MVP concept app? My next plans are to learn OOP &amp; MVC concepts and leverage CodeIgnighter or Laravel. Should I learn those concepts before I try to develop a real app or can I make some basic useful stuff from scratch? Any thoughts are appreciated!
I find it a bit funny that an alleged previous Facebook engineer doesn't understand that it's a language construct/statement, and not a function. Do you do echo('Hello, World!'); as well?
Did you try using Oracle's jdk instead of openjdk? I'm on Debian so I'm not sure what Ubuntu ships with but openjdk used to be quite a bit slower for complex applications.
I haven't. I will give this a go. I read phpstorm shipped with its own patched version of openjdk, so I kinda assumed that would the best one. 
For php no. For angular 4 / typescript it's doable with some auto import plugin. 
Docblocks are internally different from comments, so no. They are not comments, they are docblocks.
Well, for what it's worth, there doesn't seem to be a compelling reason to use this over any other particular ORM (from my perspective) even though it's touted as being high performance. I guess you mean that it performs better than other ORMs? That's not much good to me with the kind of datasets I work with - I'm locked out of using just about any ORM I've ever seen, because I need very granular control over database operations. Which says more about the kind of work I do rather than anything about ORMs, but yeah. I was wondering if this would be the one ORM that'd make me switch over from my custom query builder. I'm also still wondering if anyone will be able to build an effective ORM for large, complex relational databases, but I'm not sure it'll ever happen.
I had a similar experience (in addition of the fonts looking terrible on ubuntu). My solution was different though, I went back to windows.
&gt;I read phpstorm shipped with its own patched version of openjdk Oh... I didn't know that. In this case my suggestion might be wrong. Still worth trying I think.
I've never heard of that IDE before, can you link it?
That's good, but it still requires a specific type of relationship to a school in one way or another (since just being a student in K12 wouldn't get you an edu address AFAIK), so not everyone has one of those! /me shrugs Whichever way, if you can't afford it directly or want to get it for free, there's definitely some awesome (legal!) routes to go!
My PHPStorm does this naturally.... Granted most of my apps are modern and follow strict PSR4. Never had any issues there. EDIT: So does webstorm (angular 4 and typescript). I haven't yet configured PyCharm or RubyMine. Just install plugins for appropriate frameworks, etc.
I used to use a patched jdk, mainly for better anti aliasing of fonts. These days the included jdk works fine for me. I don't bother switching it. Performance seems to be ok as well (ubuntu 17.04) . Not much different than running in windows on my laptop.
I'm on Debian too, but I always use the jdk that is included with Phpstorm and it seems to be running fine. Do you always install a jdk before installing Phpstorm and did you notice a performance increase?
I use it on my machine with 8GB RAM and SSD and it is fast as it can be. VS code is nowhere near PHPStorm and you are able to work with VS code now, you probably used phpStorm wrong.
Are you running Ubuntu? Did you do any special configuration for PhpStorm? What kind of cpu / gpu are you using? 
You can use windows font rendering on Ubuntu, it is not turned on by default because they dont pay for the patent. https://www.maketecheasier.com/improve-font-rendering-linux/
I would, but the lack of full disk encryption alone is worth it to never go back there again. (that's of course not mentioning the shitshow they call windows update and the retarded amount of 'telemetry' and secrecy around it.)
AWS SES, Laravel comes with the driver for it.
Oh, that's good to know, I'm quite happy with windows and docker for now but I'll keep that in mind for the next time I try Ubuntu. Thanks.
Here is a recent tutorial about writing a cryptocurrency bot that use various APIs. Sources are on github (PHP 7.1/Laravel) [blog post](https://medium.com/@joeldg/an-advanced-tutorial-a-new-crypto-currency-trading-bot-boilerplate-framework-e777733607ae) [source code](https://github.com/joeldg/bowhead)
Why so many constants for bits ranks? You can take a look at my implementation, [adagio/bitset](https://packagist.org/packages/adagio/bitset), which API is inspired by the [bitset extension](https://pecl.php.net/package/Bitset). 
As this article seems to suggest that using JWT as a session store (or as method to store a session ID) is a good idea. I'll just leave the [usual links](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/) on why that's generally a [bad idea](http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/). If you're using JWT for something that isn't just a single use authentication token, you should probably think hard about what you're actually trying to achieve and how JWT is going to help you do that.
I'm struggling to think of a use case
I'm using openjdk myself. I remember having performance problems with other IDEs under openjdk so I assumed it *might* be a problem in some cases with phpstorm too. Just a suggestion for a possible fix that's easy and no harm to try.
Not a shill. Not a shill. You're a shill.
There are two options. 1. Use `include`, doh! 2. `cat vendor/autoload.php app_bootstrap.php &gt; index.php` 
Those are debunked - 99% of the usage (using it for auth and CSRF tokens) is perfectly ok for JWT as session. The last 1% needs server-side storage regardless. List of known limitations at https://github.com/psr7-sessions/storageless/blob/master/docs/limitations.md
You don't need an edu address if you have another recognized adress. Full list: https://github.com/JetBrains/swot/tree/master/lib/domains
Java or C#.
Kinda disagree with the idea of rolling your own code for this: you will get security issues, and some maintenance burden too. We write security-maintained libraries for this: [just use them](https://github.com/lcobucci/jwt) :-\ I hope this was just meant for demonstration purposes...
Do you have a link to a good analysis debunking the original articles I linked? I've not seen any good argument for why JWT would be better than the traditional cookie/session model in the vast majority of cases, but I'm very open to reading one. The main use cases for JWT tend to be at scale, where I/O and horizontal scalability becomes an issue, but the overwhelming majority of projects are unlikely to bump into these issues and from my perspective would be better off using the simple and extremely well tested cookie/session approach. I perhaps could have made my position clearer in my original post, I'm not entirely opposed to using it as a session, but as I said, people really need to think about what they're actually trying to achieve with it and whether JWT is really the solution they need, given that it's been thrown haphazardly at all sorts of problems in recent years, often with security implications or a badly thought out implementation that simply causes a different set of problems when it reaches a scale where it would be useful.
 &gt; Do you have a link to a good analysis debunking the original articles I linked? No, mostly me discussing with the author, but it's lost on some thread somewhere. Maybe I should go with an article when I find time for it. &gt; I've not seen any good argument for why JWT would be better than the traditional cookie/session model in the vast majority of cases, but I'm very open to reading one. Even removing the need for a storage for sessions improves reliability of the service when NOT at scale. If you use auth+csrf, then JWT "just works", and you get: * you get rid of I/O failures that I see way too often on slow hosting systems (because there's still many out there), or resource-starved machines * you have one less storage component to manage * you invalidate all sessions in a single sweep (changing signing key) without having to design an endpoint for it, nor having access to the actual session data * you get rid of a lot of session mutability issues (shutdown bullcrap, global state, etc) * another free ~3ms response times back (if relevant, usually not the point though) Using it for write-heavy or sensitive data is a no-go, but that would fail HIPAA/GDPR/PCI audits in 2 seconds, because sessions are the wild west of storages: everyone does whatever they want server-side. Most scenarios where I see a session used for something other than authentication and CSRF or captcha usually evolve into a DB-side audit log or similar once the solution matures (think shopping carts in ECommerce). Perhaps the biggest limitation is that you are not able to "log yourself out from another computer", but the last time I saw this implemented in a "common mortals project" was years ago, and the project would need a DB-backed session anyway. Scale is not the big problem, although it is one that is quite solved :-) To sum it up: it's a tool. People keep bashing it out of fear that it is not as safe as current session solutions (based on a string identifier passed around servers, DUH), but don't consider that any tool should be used when the technical requirements are fitting. Even if they don't fit, and you realize it down the line, swapping a JWT session system with a DB-backed one is generally a day of work.
I'm on Ubuntu and PHPStorm works fine, but can confirm there is a slight difference between oracle jdk and openjdk performance on the IDE.
Imagine if anyone could just publish anything.
Am I the only one who paranoidly hits cmd / ctrl + s after every thew characters?
&gt;Am I the only one Probably not
What an amazing bot.
Wow, nice list! 
No love for CakePHP?
the question was about vs code
There's also LexikJWTAuthenticationBundle for Symfony, if anyone is looking. 
I thought we were talking about PHP on r/PHP on a thread about PHPStorm...
The article explains how to do this in PHP 7 as well. Did you actually read it or just see "hhvm" and come here to complain?
Yes I did. The article starts with how to use Composer, which would've been an interesting read in 2012, but in 2017, to be introducing PHP developers to Composer is bizarre. I'm pretty sure over 90% of the people opening that article are using Composer every day. Plus, it doesn't deliver in your premise, as the first thing you should do with it is to require() the Composer autoloader. "Never require() anything" is not the same as "only ever require() one thing", the latter of which most PHP devs already do, you know? Autoloading has also been supported by PHP for 13 years now. Your subject implied something *more* than "there's autoloaders", which as we all know... kind of need the initial "require()". So far, no meat, just fluff. So what's next? &gt; If you want to go even further and happen to be using HHVM in your project (and you should) Ah, so to go further we **should** use HHVM. PHP7 can't autoload functions and constants. But see HHVM can... And you never deliver on your premise, by the way. Your entire article is about configuring a project so we can write a "require()" right at the start of it.
You must be a fun guys at parties. Your sense of humor is pretty lacking... The whole joke is that you still need to require() once so you then never have to write it again... I'm sorry that was too complicated for you to get :/
Well I used phpstorm as well for angular stuff as it works well for that too. And most of my projects have a front and back end, so the two often mix. 
You probably don't know http://code.runnable.com/ With this tool, you can make a Terminal with PHP in backstage (no Node.JS or other)
Changelog: http://www.php.net/ChangeLog-7.php#7.0.22
[Colored](https://github.com/jstpcs/lnxpcs/blob/master/cards/classic/php-card.png) PHP card, [black-n-white](https://github.com/jstpcs/lnxpcs/blob/master/cards/black/php-card-black.png) variant, all the other [cards](https://github.com/jstpcs/lnxpcs/tree/master/cards) and all the other [prints](https://github.com/jstpcs/lnxpcs). Pics are distributed under IDGaF license. It means that you can use provided designs for any noncommercial purposes like creation of handout materials for conferences and meet-ups, printing wall posters for home and office and so on, but if you violate the license I will most probably do nothing, because we don't give a fuck.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [jstpcs/lnxpcs/.../**php-card.png** (master → 8e1aa2d)](https://github.com/jstpcs/lnxpcs/blob/8e1aa2d51d6e196fe7420846204cdfa4268390e1/cards/classic/php-card.png) * [jstpcs/lnxpcs/.../**php-card-black.png** (master → 8e1aa2d)](https://github.com/jstpcs/lnxpcs/blob/8e1aa2d51d6e196fe7420846204cdfa4268390e1/cards/black/php-card-black.png) * [jstpcs/lnxpcs/.../**cards** (master → 8e1aa2d)](https://github.com/jstpcs/lnxpcs/tree/8e1aa2d51d6e196fe7420846204cdfa4268390e1/cards) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dl3x346.)^.
Wow, I just looked at this and your other ones, beautiful. Great work!
Thank you. 
Maybe you chose the wrong profession, should've been a comedian. Programmers don't have much sense of humor for clickbait titles.
/r/phphelp
I used to but not anymore. The workflow I use with PHPStorm doesn't need it.
It is not possible to load very large sets of data into objects and use memory efficiently. You can use iterators or generators to retrieve the first set of objects, and only load 1 object into memory at a time, but then you cannot retrieve related objects without N+1 queries. No one ever wants to see more than 100s of rows at one time. If you need to do math on 100K+ records that's where your aggregate SQL functions come in. I am using it on a large, complex relational database. And yes there are places where I simply write queries to retrieve the data I need. But for 95% I use the ORM.
If we can stop telling people to build vulnerable applications that would be greeeat. That thing is vulnerable to at least SQL injection, XSS and CSRF. I just ate so I had to stop watching it. Stop doing this to innocent watchers. kthxbye
this is completely different to "share your terminal as a web page". it's a sandboxed runtime for a language, not a proxy to an actual terminal...
may be in the next digest
According to this there are many more in Symf: https://codecanyon.net/attributes/software-framework/symfony Still not loads though. 
Ahhh lol
Code like this is the reason people hate PHP. Please take it down so others don't follow these bad examples.
Here is Mailguns log for a single email. I sanitized the data with myEmail and ourDomain.com: { "tags": [], "envelope": { "sender": "noreply@ourDomain.com", "transport": "smtp", "targets": "myEmail@hotmail.com" }, "storage": { "url": "ourUrl", "key": "ourKey" }, "log-level": "info", "id": "W3jAum7JRlqYKBtp3_0QEA", "campaigns": [], "method": "http", "user-variables": {}, "flags": { "is-routed": false, "is-authenticated": true, "is-system-test": false, "is-test-mode": false }, "recipient-domain": "hotmail.com", "timestamp": 1501697986.797761, "message": { "headers": { "to": "myEmail@hotmail.com", "message-id": "fe6bda73d33af1195ec509bb72b5e35e@ourDomain.com", "from": "noreply@ourDomain.com", "subject": "Operators Working Group" }, "attachments": [], "size": 10322 }, "recipient": "myEmail@hotmail.com", "event": "accepted" } { "tags": [], "delivery-status": { "tls": true, "mx-host": "mx4.hotmail.com", "attempt-no": 1, "description": "", "session-seconds": 1.2534761428833008, "code": 250, "message": "OK", "certificate-verified": true }, "storage": { "url": "ourUrl", "key": "ourKey" }, "log-level": "info", "id": "Zrvgr92oTB-Ci5r__XeybA", "campaigns": [], "user-variables": {}, "flags": { "is-routed": false, "is-authenticated": true, "is-system-test": false, "is-test-mode": false }, "recipient-domain": "hotmail.com", "timestamp": 1501697989.754051, "envelope": { "transport": "smtp", "sender": "noreply@ourDomain.com", "sending-ip": "184.173.153.201", "targets": "myEmail@hotmail.com" }, "message": { "headers": { "to": "myEmail@hotmail.com", "message-id": "fe6bda73d33af1195ec509bb72b5e35e@ourDomain.com", "from": "noreply@ourDomain.com", "subject": "Operators Working Group" }, "attachments": [], "size": 10322 }, "recipient": "myEmail@hotmail.com", "event": "delivered" } 
&gt; you get rid of I/O failures that I see way too often on slow hosting systems (because there's still many out there), or resource-starved machines If you have an I/O failure on your hosting system, sessions are the least of your worries. Hosting services tend to be starved of bandwidth, not disk space or anything of the sort. And guess what, JWT increases the size of your requests, and if you mutate the tokens, of your responses, as well. &gt; you get rid of a lot of session mutability issues (shutdown bullcrap, global state, etc) ... what? &gt; another free ~3ms response times back (if relevant, usually not the point though) And where is that... "back" from?
Not even a Linux card.
Dude, I respect that you put work into these tutorials. But seeing a SQL injection in the first second alone makes me mad. If a beginner follows this tutorial he will do the exact same mistakes...
Yeah, I'm aware of how difficult it is. Kinda feels like you're talking down to me here, I know how SQL databases and ORMs work. A lot of what I do is processing data, and that means pulling or pushing thousands of records out of a table of millions with different joins as needed. It would be nice to have an ORM for the maybe 50% of the time when I'm just spitting stuff back to the front end, but it's not worth the headache of effectively having to build two separate sets of classes for database interactions. When I say I'm wondering if anyone will build an effective ORM for large, complex relational databases, I'm wondering if I'll ever see one that handles this kind of work without requiring this annoying extra overhead. I've tried Propel, Idiorm, Doctrine, RedBean, and various framework implementations of Active Record, and none have been satisfactory. A while back I just said fuck it and built a set of custom tools instead, but I keep looking at ORMs that get posted here, like maybe they'll have some idea or feature I can use. Object relational impedance continues to bite me in the ass in the meantime. This doesn't say anything about how good Corma is as an ORM, just that it's not suitable for what I do, because just about every ORM I've seen isn't, and so far none have any additional features to make my work easier apart from the functionality to run raw SQL queries. Which isn't in the Corma wiki, by the way. I assume it exists somewhere.
Didn't mean to talk down to you. Raw SQL queries aren't really documented because that is part of the underlying Doctrine DBAL and Pdo connection objects. Generally I just return whatever non-object result sets I want to from the appropriate repository, while *generally* leveraging the Corma query helper to make building the SQL composable / easier.
Fair enough.
Please stop.
I know what I'd print on my next t-short. Thanks! Awesome artwork!
You are welcome!
&gt; y next plans are to learn OOP &amp; MVC concepts and leverage CodeIgnighter or Laravel I'd say you are on the right track. I would avoid Wordpress and any other consumer-centric CMS. They support much older PHP versions (Wordpress supports 5.2!), so you will not see much modern PHP code to inspire. - Get rid of shared hosts and use a VPS plus your local development environment. - Learn to use a proper debugger, and game yourself with code analysis tools (PHPStorm's PHP EA inspections plugin, phpstand, phan, psalm, phpcs, and there are many more). - Read up the PSR recommendations, and try to follow them as much as you can. - Composer, package management, etc. 
How does this sub not have a rule against low quality posts i.e. posts that promote bad practices?
&gt; If you have an I/O failure on your hosting system, sessions are the least of your worries. It's I/O: failure is part of its definition. &gt; &gt; you get rid of a lot of session mutability issues (shutdown bullcrap, global state, etc) &gt; ... what? Ugly code where the session is unrelated to the request after shutdown. Can sometimes even lead to race conditions server-side. Commonly happens when the session is mutated after the data was sent to the client. Seen it multiple times when dealing with ZendFramework reported "issues". &gt; &gt; another free ~3ms response times back (if relevant, usually not the point though) &gt; And where is that... "back" from? From the removal of filesystem or network access. JWT is almost as fast as SHM.
&gt; Ugly code where the session is unrelated to the request after shutdown. Can sometimes even lead to race conditions server-side. Commonly happens when the session is mutated after the data was sent to the client. Seen it multiple times when dealing with ZendFramework reported "issues". And how is JWT solving said issue? "Screw it, we have no session state anymore"? You don't need JWT for this. &gt; From the removal of filesystem or network access. JWT is almost as fast as SHM. Guess what, you can store sessions in SHM. Way to shoot your own point in the foot, I guess.
These are beautiful. Thank you. 
[But why!?](https://media.giphy.com/media/1M9fmo1WAFVK0/giphy.gif)
Thanks for the comment. Not aiming to write a bot though, just need some form of wallet system with exposed API. I'm just making a payment gateway system and as part of that I either need to go re-invent some wheels, or I might actually just drop PHP and go Node on this. Not sure yet though...
Awesome!
&gt; And how is JWT solving said issue? You can't modify session information after sending it to the user. &gt; Guess what, you can store sessions in SHM. Way to shoot your own point in the foot, I guess. I know very well that you can, and I know very well that it's a good way to shoot yourself in the foot. Now... are you done arguing for the sake of arguing?
&gt; You can't modify session information after sending it to the user. You lost me there. No matter how I try to read your statements so far, JWT looks worse every time. 
I use plain Ubuntu 17.04, i did no use any special tweaks, did not change the default java. I have some core i5, which is not a weak processor, i guess you might have different experience on notebook FE. Also phpStorm is evolving fast and some older versions suffered from more bugs.
Having to maintain one less stateful component of the stack is generally a good thing, so I don't really see why everyone is always so outraged about sessions in tokens, heh. Anyway, feel free to add more disadvantages of JWT that aren't already documented in the limitations that I mentioned above.
Should be higher up than this, it is fantastic. Great work.
I'm not sure if it will help, but I created a wrapper for bshaffer's library to work with slim. https://github.com/chadicus/slim-oauth2
Honest advise: watch some videos how to write proper code before creating your own videos
Push in the right direction: don't use homegrown solution for pagination
&gt; Having to maintain one less stateful component of the stack is generally a good thing, so I don't really see why everyone is always so outraged about sessions in tokens, heh. Because having less state is always good, but you can't eliminate state you really need. It's like this saying attributed to Einstein: "Everything should be made as simple as possible, but no simpler." If you don't need sessions, well, then you don't have any particular need for "sessions in JWT". If you do need sessions, what JWT offers may fall quite short. A session is typically implemented as a centralized, serially accessed (i.e. data consistent) storage, so you can trust you don't have dozens, or hundreds of "slightly different" sessions scattered between the client and your server processes. That's actually **important** for many use cases for sessions. I.e. without consistency you can't implement your business rules. Also a session allows you to add a bit more information to the current user interaction state, without suddenly bloating up your request/response payloads to the heavens. Not to speak of all the risk of accidental information disclosure, because even popular JWT libraries crop up with vulnerabilities from time to time. So JWT sessions to me aren't sessions. They're something in-between having no session, and having one. Basically same as using encrypted &amp; signed cookies for session, no difference. The sane default is to just use a normal session and opt-in to all the extra risks and drawbacks of JWT only when strictly necessary. JWT is (poor) over-engineering reigning supreme over common sense.
More like this is a demo for [walkor/Workerman](https://www.reddit.com/r/PHP/comments/6rc6h3/workerman_asynchronous_event_driven_php_framework/)
 &gt; Because having less state is always good, but you can't eliminate state you really need. Session data should always be small, because it is contextual information that is usually pushed around atomically, which means loads of I/O if you use a storage, and loads of I/O if you push it into the HTTP payload. &gt; If you don't need sessions, well, then you don't have any particular need for "sessions in JWT". I do use sessions for a myriad of domain-specific contexts too. Unless you persist blob files in it (in which case I'd question the sanity of the solution, but it needs to be analysed in the context of the problem being solved), you are going to be fine. &gt; If you do need sessions, what JWT offers may fall quite short. A session is typically implemented as a centralized, serially accessed (i.e. data consistent) storage, so you can trust you don't have dozens, or hundreds of "slightly different" sessions scattered between the client and your server processes. That's actually important for many use cases for sessions. I.e. without consistency you can't implement your business rules. I think the discussion ended when you said "a session is typically implemented as &lt;x&gt;". We are just breaking the dogma, providing a battle-tested, documented, security maintained and performing solution. If you don't like a solution, that's an opinion. If the solution is wrong, you need to prove it. &gt; The sane default is to just use a normal session and opt-in to all the extra risks and drawbacks of JWT only when strictly necessary. JWT is (poor) over-engineering reigning supreme over common sense. The risks are the same, and the solution is simpler than a shared storage solution, so I don't really see where you are poking with this. 
 &gt; That's my general impression Much like the rest of your points, it's an impression. Given the last comment above, you didn't even read that "limitations.md" that I posted above. Have a good night/day/whatever.
Responding to [this](https://www.reddit.com/r/PHP/comments/6ralr4/creating_and_verifying_jwt_signatures_in_native/dl4sw5i/). ----- &gt; Session data should always be small, because it is contextual information that is usually pushed around atomically, which means loads of I/O if you use a storage, and loads of I/O if you push it into the HTTP payload. Things like "small" and "loads of I/O" have a **very** different meaning across a distant TCP connection, and local memory. So you're still making my point that sessions belong where they're used: in the memory (or disk) of the server. Not constantly traveling around the world. &gt; I think the discussion ended when you said "a session is typically implemented as &lt;x&gt;". We are just breaking the dogma, providing a battle-tested, documented, security maintained and performing solution. If you don't like a solution, that's an opinion. If the solution is wrong, you need to prove it. Expecting data consistency is not "dogma". Not expecting race conditions and data loss is not "dogma". Those are real effects that can result in your application misbehaving. If you really expect me to *prove it*, and it's not already obvious to you, then this will become a very long conversation. As someone on the Doctrine team, you should be well-versed in the topics of data consistency - atomicity, consistency, isolation and so on. If you arbitrarily change "session state" from multiple parallel processes and then slam all the resulting changes on the client, you have no idea which one "wins", and what pieces of crucial state you lost in those that "lost". A simple test: count how many requests you've processed for a given session... in the session. Can you do it with your JWT tokens? No. If you have processed N requests, instead you'll arrive at a number between 1 and N, and the higher the concurrency, the close the number will be to 1. Can I do it with sessions that guarantee serializability? Yes, I'll arrive precisely at number N. And this is just a simple counter. There are far more worrisome data loss and corruption possibilities, given the wide range of uses a session sees in practice. So sometimes we may need the high concurrency with the same client, and we may be willing to break that guarantee and live with the consistency issues. But **this should not be the default**. The default should match people's expectations, be safe, and **not trade correctness for perceived need of performance right from the get go**. In that sense, JWT are an attempt at a premature optimization of the worst kind. &gt; The risks are the same, and the solution is simpler than a shared storage solution, so I don't really see where you are poking with this. If you're aware of the race conditions, you can't claim with straight face that "the risks are the same".
[removed]
Yeah, and cloud computing is providing services traditionally handled on-site or on the same machine as the user, but over the internet to 3rd party datacentres. In either case: what we said is so amazingly vague it means barely anything. Even 'embedded programming' is a lot more vague than it used to be. That term covers everything from people that have to write MISRA C on lockstep CPUs with hard real-time requirements up to people using what is basically a full PC with a full OS all baked into a small chip so that they can control all their lights via an app or something. 
That's what happens when we overthink something. It stops having any meaning. Pick any word, even your most favorite word. Now start saying it over and over, while also thinking deeply about its meaning, and in several minutes it'll suddenly mean nothing. Magic! What's the lesson? Don't overthink it!
[removed]
[removed]
Not even a PCMCIA card!
Hey I use that library in a few projects! Thank you!
Excellent work; very happy to see someone talking about these topics here.
[removed]
You've posted a thread asking about general security of your servers. It's one of many possible general security measures. &gt; Pointless You come off a bit obnoxious when people are giving you general feedback in line what you were asking to try and help you, and you respond by basically arguing that something is "pointless" because it doesn't address one specific facet of the broader subject. Using this logic you could say that every security measure possible ever is "pointless" because it doesn't address everything. Security isn't binary. Also this has nothing to do with PHP. I'm not just trying to be a dick to you, but this type of argumentative illogical response just discourages people from responding to what could have been an interesting thread. 
Simply remove the default "web" group route (basically a welcome page) and add everything to api. That will remove sessions, cookies, etc and just use only what the api needs.
It's magnificent! You're doing it right, oh yeah!
Great work, love it. Thank you!
Good bot 
These are great! Thanks!
This is awesome. Thanks!
That shirt is fantastic. Is there anywhere I can buy it? Right now? This very second?
Thanks for the share, these are beautifull pictures.
Thanks for you kind words. The links to ready shirts are in GitHub's [readme](https://github.com/jstpcs/lnxpcs). The direct links to teespring - [colored](https://teespring.com/php-card#pid=2&amp;cid=573&amp;sid=front) and [black](https://teespring.com/php-card-black#pid=2&amp;cid=2397&amp;sid=front).
So what s the difference between this and reactphp/ampphp?
Fuck off. You can't even spell "Nederland" right.
How about the unsanitized headers from an email that ended in a spam bin? 
And what about doing open source project, that will be used in commercial work ?
Probably not: https://www.jetbrains.com/buy/opensource/ &gt;* Projects that are sponsored by a commercial company or organization, or those with employees paid to work on the project are not eligible &gt;* Projects cannot provide commercial services (such as consulting or training) around the product, or distribute paid versions of the software
I have the python T-shirt! What you are doing is great, so keep up the great work :)
Thanks a lot for you kind words!
`$this` is always a reference to the current instance of the class.
[T-shorts](http://www.instructables.com/id/Make-a-pair-of-comfy-shorts-out-of-an-old-T-shirt/)
Yeah the firewall thing isn't directly aimed at solving DDoSing, it's more about break-in attempts. But it still has more than zero value on the DDoS subject: 1. You're assuming the attacker knows your origin IPs... generally anyone that does this block-all-except-cloudflare-ips firewalling will also take measures to keep their origin IPs a secret - or at least obfuscated. 2. Attackers come at different levels of eagerness/effort - not all will put a bunch of effort when that see that some basic measures are in place like using cloudflare. Not to mention untargeted "drive by" attacks - which is a big chunk of attacks in general. 3. If the attacker does get your IPs - dropping packets in software is still way better than your web server, PHP and database using resources to render pages. 4. Lots of hosts include hardware firewall services that can be controlled by API. Or course there are better methods to handle this - but this is a good cheap/free partial solution, and it's not mutually exclusive to any other better barriers you have in place. So I'd say it's far from pointless. Those are just some general points above. But more specifically on your situation - why not just use cloudflare or something similar (they'll do a better job at protection than you can do yourself) - and then host your origin servers in house? Where you host your origin servers doesn't really matter. So not sure if I understood the question. Some more relevant subreddits might be: * * https://www.reddit.com/r/netsec/ * * https://www.reddit.com/r/security/ * * https://www.reddit.com/r/cybersecurity/ * * https://www.reddit.com/r/sysadmin/ * * https://www.reddit.com/r/linuxadmin/ 
I don't consider it hijacked at all, and understand your response. :) It's just that it seems a bit exploitative for a US company to be operating like this (though it's hardly the first time, for any company, anywhere), and some of the other responses should give you some idea of how it's viewed as well.
[removed]
[removed]
[removed]
A command bus has its uses. But I don't see any of them utilized here. No part of this article actually justifies the use of a command bus. Go read every sentence of it. There's a lot of talk about architecture, business logic, and so on, but no part of this justifies that basic service method calls should take this over-engineered form. What I see is just a method call that was made verbose, slow, type-unsafe and unable to discover via tooling like IDEs (the way typing `-&gt;` on a service object lets you discover what methods it supports). 
Maybe because this post was not about the architecture at all... But about testing. Testing Business Logic in general and using architecture built around CommandBus and Flarum forum as an example
You are not alone: https://github.com/phalcon/zephir/issues/1564
So why is the first half dedicated to introducing the concept of layered architecture, the command bus and domain events? I apologize if I'm confused by the fluff, but it's hard to understand what an article is about these days, all the fluff comes first.
I recommend creating the LAMP stack in Bash for Windows 10 and then installing Zephir through that.
Then it won't create a .dll file but it will create a .so file.
I didn't want to write tooo general article about testing so I've chosen to concentrate on CommandBus. But before I explain how to test it I should have briefly (very briefly) introduced it. Mostly by putting links to other resources. The most important advice out of it: discover the business logic, test it in #1, use integration tests as they are more business-related.
But then you add the .so file to your php.ini file like ``` [Zephir Parser] extension=zephir_parser.so ``` Bearing in mind, this will be in the Bash for Windows php configuration and not the Windows PHP config if you installed the LAMP stack on there.
Very nice, but isn't this kind of abusing what github is about, just a little bit, but making the project partly a store front? It would be nice to see some of the source files, since that is what github is about - spreading and supporting open source, so people can take, change, advance and develop things further. I realise people won't like what I'm saying, because they are great. But there is a place for everything, and github feels kind of wrong in this instance.
It's the easiest way I found for easy sharing of pics with IT people. The images are stored without compression, people can subscribe to changes to get notification of new ones. To get all images you can just clone the repo. You are right, that there are also links to ready shirts - I'm planning to remove this part as soon as I prepare a site for these links and I will leave only pics in the repo.
Well, best of luck :-) 
Your domain could be flagged as spam. check your domain here: https://www.ultratools.com/tools/spamDBLookup if your domain is flagged as spam, your screwed. and maybe rightly so, who knows, I dont know what you email about.
Anyone managed to compile this on Ubuntu 16.04? I'm running into way to many SSL problems if I enable libsodium. Trying to compile with a newer version of libsodium and openssl works for libsodium but it starts giving problems elsewere regarding other tools being build with a different Openssl version. /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libc-client.a(osdep.o): undefined reference to symbol 'SSL_CTX_set_tmp_rsa_callback@@OPENSSL_1.0.0' //lib/x86_64-linux-gnu/libssl.so.1.0.0: error adding symbols: DSO missing from command line Anyone got a proper build flow?
[removed]
Seems like it would be better for the workers to pull jobs when they are free, instead of distributing the jobs up front. 
Could you pleeeease add those on qwertee? it's cheaper and has really good quality. Teespring sucks for EU based people, shipping costs alomost as much as the shirt itself =(
You can get any pic in hires and make a shirt in any service you like - I really don't mind.
i know, but qwertee is easier and they have great quality and i think it could attract more people. 
Looks like it has the option to use ReactPHP and simplifies a few things, such as Web Sockets support. I see the ability to run multiple processes, but I would compare this to kraken-php. This is probably simular to NodeJS clustering, which is something I've wanted from ReactPHP. This should technically distribute work between the forks. However, when you fork a process you cannot inter operate data across forks. This also doesn't provide much help when you need to distribute work outside of a single machine, which is more what Kraken-PHP is for. I thought I remember seeing a library that wrapped ReactPHP and AMPHP together but I could be wrong and it might have been a library that could work between both. I really love the ideas developed in Vert.x over NodeJS as PHP suffers the same issues as Java libraries, most libraries are not async. So having processes for async work and other processes for synchronous work, then being able to communicate amongst them, scale them up or down and have shared memory between then all across machines... this would be bliss, and what Vert.x does.
I was just going to say, "Doesn't PHPStorm already do this"
https://www.reddit.com/r/PHP/comments/25mdqi/10_things_i_learned_from_rphp/ &gt; 2. PHPStorm is the only IDE How do you not know this?
Oh god yeah this guy, I hate this guy. 
I'll inspect it just as soon as I'm done indexing.................
Tastes differ) and I get used to teespring. It's just a little hobby and I don't make living from it, so I don't want to spend much time on merchandising. If you'd like to open a shop on qwertee one day and sell something using my prints, feel free to contact me any time.
Don't use drupal so idc
Indeed, that's what i was trying to explain ^^ Like, storing jobs to an array, and launch workers, pulling from jobs pile until jobs pile is empty. But i have no idea if there's a way of doing that with pthread TBH
If we're talking about strictly OpenSSL techniques (as opposed to libsodium / libsodium_compat) then look at `openssl_seal` and `openssl_open`. Altho all the examples of that that I've seen require the public key be wrapped in an X509 cert, which can be annoying. For your specific example, you'd be better off creating a random key using `openssl_pseudo_random_bytes` or (if you're running PHP7+) `random_bytes` (or `random_compat` on Composer for pre-PHP7). I'd also prepend the IV. I mean, technically, some PBKDF's generate both IV's and key's but if you're gonna go that route it seems like it might be better to generate them both from the same random source instead of generating the IV from the key. And use a better hashing algorithm too. I could elaborate on this but to keep this response brief I won't. Finally, you'd do well to make use of [authenticated encryption](https://en.wikipedia.org/wiki/Authenticated_encryption). eg. make an HMAC of the ciphertext and then verify that. Altho keep in mind this is something you should do on top of `openssl_seal` / `openssl_open` since they don't appear to do this. 
**Authenticated encryption** Authenticated Encryption (AE) or Authenticated Encryption with Associated Data (AEAD) is a form of encryption which simultaneously provides confidentiality, integrity, and authenticity assurances on the data. These attributes are provided under a single, easy to use programming interface. The need for AE emerged from the observation that securely combining a confidentiality mode with an authentication mode could be error prone and difficult. This was confirmed by a number of practical attacks introduced into production protocols and applications by incorrect implementation, or lack, of authentication (including SSL/TLS). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
No article. 
OK this is spam for a webdev company, but folks... you need to see this site. It has to be seen. It's like what a 1995 Yahoo GeoCities homepage would be like, if we had today's hardware &amp; browsers back then. Just keep scrolling and hovering things. It's amazing.
It's a total misaligned turd of a website 
You could check the following blog: https://blog.haschek.at/post/f2fda You could use tar instead of gzip.
I'm a human, bleep, bloop. As seen in: https://www.reddit.com/r/PHP/comments/6lfl6p/i_have_created_a_php_script_that_can_defend/
Haha, thought I had seen it somewhere 
I agree as far as it goes, but I'm not sure there's much we can do except tut disapprovingly as the Drupal leadership embarrasses itself.
Just created an account to post this and/or are you scared they'll come for you? In any case, I am siding with Larry on this issue, but I have not read as much as there is the read about it. From what I gather someone doxxed a person and the illegal doxxed material was used to remove from the community and essentially destroy someone's career, let alone reveal their personal life things to the greater public. There would have been the "OK" approach: tell the doxxer to stop, and let Larry know that they hope not to see "his conduct" within public or private Drupal spaces. From what I gather Larry is a person who knows the boundaries for "his conduct" and knows what is OK and what is not OK to do within community spaces. The funny thing here is that they felt like they had to make a Change.org petition to help with making it seem right and gather support. If I had done the objectively right thing I guess I would not need some petition to make my position more "right". There are always people who disagree with you and your decisions, but most often the objectively right choice gathers to most support. I've never used Drupal and I do not know anything about their community or "conduct", so I am just an observer with opinions. As I said, I have not read 100% of the data on this issue so I might be wrong in some parts, let me know if that is the case.
Didn't read the article yet, but the deleted post's history is impressive. Reads as a fiction novel: - Post Closed as "not a real question" by Tim, missingfaktor, Kirill V. Lyadvinsky, user7116, John Weldon - Post Reopened by Robert P, jmucchiello, Paul Sasik, Jamie Ide, T. Stone - Post Closed as "off topic" by Welbog, graham.reeds, Bart Kiers, DevinB, Cory Petosky - Post Reopened by Michael Kristofik, Phil.Wheeler, Matt, Anycorn, too much php - Post Locked by Sampson - Question Protected by bmargulies - Post Closed as "not constructive" by Sam Saffron - Question Unprotected by Robert Harvey♦ - Post Unlocked by Robert Harvey♦ - Notice added Historical significance by Robert Harvey♦ - Post Locked by Robert Harvey♦ - Post Unlocked by Robert Harvey♦ - Notice removed Historical significance by Robert Harvey♦ - Post Deleted by ChrisF♦, Tim Cooper, Robert Harvey♦ - Notice added Historical significance by Jeff Atwood♦ - Post Locked by Jeff Atwood♦ - Notice removed Historical significance by NullUserException - Post Unlocked by NullUserException - Question Protected by Eitan T - Question Unprotected by Eitan T Do not know what the backstory is but the actions look quite schizophrenic. Edit: and yes, I wholeheartedly agree with the article's sentiment
Agreed. PHPStorm has an inspection that highlights accidentally using a single equals instead of two or three, as should any decent editor. Yoda conditionals feel like a solution looking for a problem nowadays. 
I like these. Keep it up! :)
I will for sure :)
[removed]
Nice! The 1st one looks good too, just saw it now. 
wow
Thanks! have been waiting for yii2-queue for a while
`ext-sodium` should build with `libsodium &gt;=1.0.8` since that's what Xenial ships with. (I'd recommend `1.0.9` at minimum though if you can, or `1.0.13` if you can compile it yourself). `ext-sodium` doesn't link against OpenSSL though, so those issues are disjoint. The OpenSSL issue looks like a linker error. Do you have `libssl-dev/libcurl4-openssl-dev` and `openssl` installed? You might be missing a`./configure` argument. Try to specify the path for the OpenSSL library. (If you're including cURL support you'll probably need to specify the cURL shared library path as well) --with-openssl=/path/to/openssl --with-curl=/path/to/curl [The packaging script](https://github.com/charlesportwoodii/php-fpm-build/blob/make-ext/Makefile#L206) I use to generate deb/rpm's work against beta2 (as of yesterday). I statically compile OpenSSL 1.0.2 and cURL 7.54 libraries directly from source instead of using the shared libraries Xenial ships with. Feel free to use it as a reference for your own builds. I also have a 7.2 [Dockerfile](https://github.com/charlesportwoodii/docker-images/blob/master/xenial-test/php72/Dockerfile) I'm experimenting with built from the packages created via this script. It's also on Docker Hub. docker pull charlesportwoodii/xenial-test:php72 docker run -it --entrypoint=/bin/bash charlesportwoodii/xenial-test:php72 That'll drop you to a bash prompt where you can run php CLI commands directly (`php -a` for readline CLI) or you can mount a directory and runs scripts manually. 
Glad you posted this. We had a discussion about this in the office the other day. My first instinct was to tell my colleague that it wasn't necessary since the ide already gives you a warning if you did assign a value instead of doing a comparison. 
Not sure I want to post those publicly. Do you mind a PM?
Thanks I'll check it out. We are a company with an extremely targeted audience. We only email those who have signed up for our website, so it's by no means a mail blast to anyone and everyone. It shouldn't be qualified as spam as we follow the best practices and none of our content is even spammy in nature whatsoever. We aren't listed on that blacklist for our domain btw.. just ran our domain through it.
People actually do this?
The polar reactions to this alone point out the need for this to be addressed.
You could, ***but***: * I'm not the best person to track down your errors. The collective brain of the sub is better than one person's eyes. Especially if I don't have my reading glasses. Or begin the weekend early, which I'm planning to do because for the 4th day in a row, I'm alone in the office, just waiting for the east coast to close. * Header information is sent unencrypted over the internet already, so there should be nothing to hide unless you're sending spam, and in that case we probably won't help you anyway.
Check out WordPress. It's one of their standards....
Even worse, Symfony uses it as a standard. https://symfony.com/doc/current/contributing/code/standards.html#structure It's one reason that I'm seldom tempted to contribute even for tiny fixes.
Also relevant and much more resource friendly: [Tarpit](https://en.wikipedia.org/wiki/Tarpit_(networking\))
Sometimes. They have a set of code standards but a lot of existing code does not follow them. 
I think do do this you would need to keep track of how many jobs you've submitted, limit that to the number of workers in the pool, and wait for collect() once you've reached that limit, before submitting the next job. Something like this completely hypothetical and untested code: $workerCount = 3; $pool = new Pool($workerCount); $tasks = array(); // Add tasks to pool queue for ($i=1; $i&lt;=9; $i++) { $task = new ChildThread($i); $tasks[] = $task; } $activeJobs = 0; foreach ($tasks as $task) { if ($activeJobs++ == $workerCount) { // wait until at least one job is finished $activeJobs = $pool-&gt;collect(function($work){ return $work-&gt;isComplete(); }); continue; } $pool-&gt;submit($task); } // clean up after all tasks were submitted while($pool-&gt;collect(function($work){ return $work-&gt;isComplete(); })); $pool-&gt;shutdown();
Note: The example code used is vulnerable to Bleichenbacher's 1998 padding oracle attack on RSA, which leaks your plaintext after about a million or so messages. The reason is the [default padding mode for `openssl_public_encrypt()`](http://php.net/manual/en/function.openssl-public-encrypt.php) is PKCS1v1.5. The simplest workaround for working with RSA is to specify `OPENSSL_PKCS1_OAEP_PADDING`. A better solution is to switch to libsodium and use `sodium_crypto_box_seal()` instead.
Bookmarked! I like this. If I miss a day or two on Reddit, I will still be in the loop.
Cool, thanks for the tips!
Hi! We've launched a telegram channel with all the updates, feel free to subscribe and get notifications if you like: https://t.me/frontend_digest or facebook: https://www.facebook.com/zfortgroup/ Cheers!
It is just a text file with SQL commands in it. Select a table in phpmyadmin and export it it, open the file it creates in a text editor, you will see that it is just SQL commands and comments.
Hope a new/better CMS comes out of all this drama when the dev's split off. No offense to anyone, but this is what likely is going to happen. Remember CakePHP and Lithium?
Not everyone use PHPStorm or an IDE though 
Hell the what... Fabien, WHYYYYYYYYY?
&gt; Do not know what the backstory is but the actions look quite schizophrenic. It's from early in Stack Overflow's history, when they were still trying to figure out the exact focus and rules of the site. There were tons of reddit-style 'poll' questions, like "what is your favourite programmer joke", "what is your favourite music to listen to while coding" etc. 
Oh good. Glad to see this. Definitely hasn't been done many times before. /s
&gt; Indeed, who can claim they have never written code like this Maybe I'm some genius programmer, but I've literally only done this twice in my entire life. Both times I discovered the problem pretty quickly. It's really not hard to read your code as you're writing it. 
Been looking for something like this for a while!
You can catch this problem with static analysis tools like `phpmd` even if you don't use an IDE.
Do you have links to the repos? Would love to take a look (not /s)
We haven't released anything yet, but we will soon.
Do you need contributors? If so PM me
Please fix the return types on those godawful regex functions in PHP.
Indeed, I guess mine and your brains work differently than most, because I've always found this problem a complete non-issue. I hereby claim that I have never written code like this.
I had to read through part of a legacy code base once, and within a few minutes of opening one massive bowl of spaghetti, I found if ($foo == 'condition 1' || $foo == 'condition 2' || $foo = 'condition 3') { // stuff } It had probably been like that for a good 5+ years. Yay!
Nooooo don't fall back down to WordPress levels. 
Damn. I want to modernize wp, like rewrite it using Symfony or Laravel. The tool is great, the code base is so horrible. I'm very conflicted on liking or hating it.
They should though 
I use symfony and vanilla vim. FUCK YODA. There is no need at all. 
Have you read the [documentation on mysqli_error](http://php.net/mysqli_error)?
I think this is more appropriate from /r/phphelp or /r/WordPress. However, from your snippet, I'm not sure why is there a mysql_error() call in first place. All mysql_* functions are gone in php 7 (for good reasons), but the $wpdb object is there to abstract all that from plugins and user code. Just remove the `or die(mysql_error())` part and it should work. If there are no database results matching query, the $results variable will be empty. Seeing that the table name has "payments" in them, I strongly suggest you to take read the documentation for that class before writing any more code with that class (to prevent any sql injection vulnerabilities). 
[removed]
That did it - thanks! I had tried that previously but must have left an extra closing brace in or something. I'll read the documentation that /u/ThePsion5 linked to so I can figure out the intent. Thanks again.
No I didn't - I came to understand what I did from reading various posts on StackExchange. Thanks for the link, hopefully that'll fill in some blanks.
Instead of recommending Yoda conditions we should encourage people uncrap their toolset.
Hmmm, I check the IP from the headers you posted: 184.173.153.201 is listed on 4 lists for spam LISTED | SORBS SPAM | 184.173.153.201 was listed | Detail | 3600 | 77 LISTED | SPAMCANNIBAL | 184.173.153.201 was listed | Detail | 43200 | 83 LISTED | UCEPROTECTL2 | 184.173.153.201 was listed | Detail | 2100 | 78 LISTED | ZapBL | 184.173.153.201 was listed | Detail | 2076 | 77
Symfony packages are the programming equivalent of "how the sausage gets made". You really don't want to know what's going on underneath the API.
&gt;Create random key &gt;```$password = sha1(microtime(true));``` I certainly can't think of anything more random than the current time. 
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
I was thinking about just this the other day... PHPStorm has been complaining about a few thousand instances of unnecessary brackets, which when removed, then complain about assignments in logic. A code pattern I find extremely clean and concise [I usually use if (!($var = SomeModal::Get())) { ... } ] if (($var = SomeModel::Get(...)) === null) { throw new Fuckup(...); } /* use $var */
Such a set of properly mapped functions desperately need to be built into the PHP-core. As soon as they were in there I'd put money on Jetbrains coming out with a re-writer within a couple of weeks.
It's interesting there's still people who think there is a debate to be made over PHP/Web IDEs that are all substantially inferior to PHPStorm (this includes vim). Being subborn is built into the culture, so we just have to wait for those people to die off. Next up, the people who downvote because they still code webpages in C and PHPStorm's support for C sucks?
I will keep using Yoda conditions, and enforcing yoda conditions among codebases I own. We apply TDD, Mutation testing, 100% coverage and so on, but there is always "that one edge case that wasn't caught", and the assignment bug happened many many times to me. Also, not all the code goes through full testing at all times: there is always an edge case. I do not believe in non-enforced rules and styles, so anything that the compiler doesn't do for us should be done by us proactively. Until the AST for an assignment expression is a valid child node of any other expression in php, the Yoda conditions will stay.
Absolutely!
We'll try to fix bunch of stuff but the priority is consistent naming at the moment.
Just to clarify, everything I wrote above "But more specifically on your situation" - was just general points on why cloudflare-ip-allowing isn't "pointless" in general. I wasn't talking about your specific situation. But I'm glad you found a solution to your stuff.
to me, needle before haystack is more intuitive, as I think like "search for X in Y". it makes even more sense for replace functions (replace X for Y in Z). either way, having a standard is better than not. :)
Netbeans also displays notification.
Initially we started with that, but someone here made me change my mind, as I also figured that most functions already follow haystack, needle. I don't think it's that important which one you pick, as long as it's always that and you don't have to think about it.
And now Lithium is pretty much dead and Cake is losing popularity.
I trust the people managing large FOSS codebases. Everybody else's opinion is irrelevant.
I have an idea how to resolve all this in a few simple steps. - We split **Drupal** into two distinct organizations: **Drupal GSD**^1, and **Drupal SJW**^2 - We split **FIG** into two distinct organizations: **FIG GSD**^1, and **FIG KBN**^3 - We merge **Drupal SJW** and **FIG KBN** into a single organization, where people can form committees, subcommittees, write formal letters, proposals, write dramatic open letters, start choice.org petitions, "boldly and proudly stand up for Dries Buytaert and Megan Sanicki", dig through each other's trash and dirty underwear, and excommunicate each other over petty bullshit. All of this fun, now in one place. - People who want to code, write standards, and *Get Shit Done™* in general, can stick with the other two organizations. ^1 Get Shit Done™ ^2 Social Justice Warriors ^3 Kafka's Bureaucratic Nightmares
The CakePHP hype cycle is over (this always happens), but I think it's fairly healthy yet. I think even they're modernizing and evolving their platform very quickly, all things considered. It's a modern framework.
[Scalar objects](https://github.com/nikic/scalar_objects) comes to mind, it's a bit of a new paradigm that removes ambiguity inherently, but PHP's glacial pace seems to have dampened work on it.
It's not the same thing at all, although they do solve the same problem and I prefer the Scalar Objects approach.
&gt; ELI5 So you know the flowers and the bees, right? Sometimes the flowers want to be submissive... &gt; TL;DR - A productive, long-time, high-rank member of Drupal was ousted over what he does in his private time, by overly zealous Drupal leadership. - Community splits in two, some supporting the former member, some supporting the leadership. - The leaders are more interested in covering their ass, than restoring a productive environment. - This drama lasts for months. - Nobody gets any work done.
The content is great but want to let you know the socials docked to the right are blocking content on safari. Cuts off some letters here and there with the formatting. Edit: typing is hard. 
Well, that approach is totally different. With that you're using a totally different API. The idea with Zubr is to fix inconsistencies while keeping an API that is as close as possible as the original, so that one doesn't have to learn it but can just "guess" it. 
Thanks! We'll check it up
Can you ELI5 what you just said..? I'm not sure I got what you said. what about Jetbrains..?
I tried quite a few before landing on Sparkpost. I went with Sparkpost because their reputation and analytics. They stepped up when Mailchimp let so many down in offering a very solid free tier. The paid tiers are pretty reasonable with respect to what you get. I've had several clients with them for a while without incident. Try them out before you settle on anyone. No affiliation besides being a happy customer.
Same here. Yoda conditions are simply part of defensive coding. It also has saved me more than once. Couple of years ago many it was a trend to use yoda conditions. Now it seems to be fashionable to suggest not to use yoda conditions, mostly because `false === $something` is hard to read. Brains are wired differently but I see no difference between `false === $something` and `$something === false`. However I do agree `42 &lt; $foo` is harder to read than `$foo &gt; 42` but there is no point using Yoda conditions there. Yoda makes only sense with `=` and `===`.
I don't write PHP, but a common pattern in C is: while ((c = getchar()) != EOF) /* Ok */ if ((ptr = malloc(...))) /* Ok */ if (ptr = malloc(...)) /* Bad */
That's what we have CLion for.
Yeah, but unless they code in notepad, there will be a static analysis plugin, they can use for this.
I absolutely hate code like this. It just seems really ill-structured.
Thank you! I restarted the build process and reverted back to OpenSSL 1.0.1f. Without the --with-sodium flag the build runs just fine. When I try the --with-sodium and libsodium-1.0.13 installed it gives me: In function `zm_startup_sodium': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:464: undefined reference to `crypto_pwhash_opslimit_interactive' /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:466: undefined reference to `crypto_pwhash_memlimit_interactive' /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:468: undefined reference to `crypto_pwhash_opslimit_moderate' /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:470: undefined reference to `crypto_pwhash_memlimit_moderate' /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:472: undefined reference to `crypto_pwhash_opslimit_sensitive' /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:474: undefined reference to `crypto_pwhash_memlimit_sensitive' ext/sodium/.libs/libsodium.o: In function `zif_sodium_crypto_pwhash': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:1831: undefined reference to `crypto_pwhash' ext/sodium/.libs/libsodium.o: In function `zif_sodium_crypto_pwhash_str': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:1875: undefined reference to `crypto_pwhash_str' ext/sodium/.libs/libsodium.o: In function `zif_sodium_crypto_aead_xchacha20poly1305_ietf_encrypt': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:2362: undefined reference to `crypto_aead_xchacha20poly1305_ietf_encrypt' ext/sodium/.libs/libsodium.o: In function `zif_sodium_crypto_aead_xchacha20poly1305_ietf_decrypt': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:2431: undefined reference to `crypto_aead_xchacha20poly1305_ietf_decrypt' ext/sodium/.libs/libsodium.o: In function `zif_sodium_crypto_pwhash_str_verify': /usr/local/src/php-7.2.0beta2/ext/sodium/libsodium.c:1912: undefined reference to `crypto_pwhash_str_verify' collect2: error: ld returned 1 exit status Makefile:311: recipe for target 'sapi/fpm/php-fpm' failed make: *** [sapi/fpm/php-fpm] Error 1 
As with all life's mysteries everything can be solved by applying just a little bit of common sense. Pretty much the point of the article, no? Use them when it makes sense, don't use them when there's no benefit? :)
Typically there is more often more than one needle in said haystack. 
Please, made a demo with a real term un browser like phptty but with bash or sh
And I highly recommend anyone who does to install PhpInspections Extended while they're at it
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; being a student in K12 wouldn't get you an edu address Every school I've been to hands out `studentID@schoolname.vic.edu.au` addresses that jetbrains have accepted. 
Would you care to expand on why you think it's ill-structured? Assignment/modification in-condition is an extremely powerful code pattern, and is actually the foundation of most readers and iterator loops. Here's a quick example of the PHP docs using assignment in condition: http://php.net/manual/en/function.fgets.php I personally find it cleaner and more concise than separating them out - It makes it immediately clear that it's the result of the function you're testing.
I meant that if PHP ever decides to re-map its functions to a core namespace e.g. \php\ then Jetbrains, who develop PHPStorm, which practically everyone who writes PHP professionally uses, would almost certainly add a feature that would provide a one-click to parse and re-write existing code bases to use the new functions by changing the argument order / function names as necessary.
Ah, I see. Definitely. It looks like /php/ won't happen until PHP 8, though..?
I'm not sure you're implying that all other IDEs are substantially inferior to PHPStorm, but if so I don't think that's the case for Netbeans. Just a heads up in case you've never tried it.
Potentially. There's a LOT of work that needs to be done to bring PHP's function listings into the more modern world. Don't get me wrong, they certainly work, we wouldn't be using them if they didn't, but there's a lot that can be done to improve them. The thing about proxies like the one you've posted, is that there's no unified standard (you mention in another post you'd already changed your mind on order once) so really, the standard has to come from the PHP Core group themselves. Once they start to implement \php\xxx functions then someone will write a quasi-official proxy that maps to them for lesser versions of PHP, and that will become the new standard.
&gt; The thing about proxies like the one you've posted, is that there's no unified standard (you mention in another post you'd already changed your mind on order once) Just wanted to clarify this, I've changed my mind before we released a single line of code, whatever rules we picked are there to stay. It doesn't really matter if it's `haystack, needle` or `needle, haystack` as long as there's consistency across functions.
Must be something new. When I was in school k12 they did not give those to students (usa) 
Yeah I get it. My point is, that order is only ever going to be "fixed" when it's made a PHP core coding standard, i.e. when they finally create a next-gen namespace system in the core. Before then it's just educated guesswork.
&gt; uncrap their toolset So stop using PHP ?
Lol, seriously. I prefer outcomes based analysis. Which would remove PHP from the crap category.
Has it gotten better in the last 5 years? Because back then I tried netbeans and php eclipse and eclipse was faster and more reliable than netbeans.
Have an upvote for vanilla vim! Best for remote development :D
Hahaha, like WP has standards
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Personally, I think you should use yoda conditions most of the time. But not to prevent these little assignment errors, but because it actually should reduce the cognitive load on your code. That is, because you won't be looking at a single if clause. You should be in some kind of context. If your code is well structured, most of the time, it should be clear that property you check, so you can skip it. function handleJedi( $user) { if( Occupation::JEDI === $user-&gt;getOccupation()); if( "luke skywalker" === $user-&gt;getName()); } I write both ways, always depending on whether it's obvious what is checked again. But, I'm german, so it doesn't sound that strange in my head both ways anyway.
I haven't tried Eclipse in ages, but I don't find Netbeans slow at all, even compared to PhpStorm.
I have used many IDEs prior, including NetBeans. NetBeans is inferior to PHPStorm in a number of ways, but it's also inferior to IntelliJ, which is very telling. NetBeans falls behind in features and commensurate configurability, but also in more subtle ways. The patches to NetBeans are less frequent and have not been proactive. Proactive meaning providing for the next bleeding edge release over a "stable" one or supporting the language through missing language-level features (e.g. type-check assumptions through annotations). Introspection is the single most important feature for any codebase. NetBeans is also still under Oracle. Setting aside how bad it is to trust Oracle product support, NetBeans will never be a primary revenue stream for them and gets the commensurate attention that any satellite product does. YMMV
I don't like doing two things in one instruction. Here the instantiation and error checking. The above code can very well be written as $var = SomeModel::Get(...); if ($var === null) throw new Fuckup(...); // use $var That way, if you at one time want to remove the check (because `SomeModel::Get(...)` now always returns correct values) you can simply delete it without having to modify any lines
I do think language plays a role here. I'm strictly English speaking and when I see null === $x I can help but question why I am testing the value of null when I know that null will always equal null. However, I can certainly understand that other languages may not have this order issue. What I do find interesting is that while you accept the yoda equality checking, you find the yoda checking for less than or greater than to be a bit strange. Brains are interesting.
This isfucking awesome! Now i am thinking about how i can automate things with my Bravia =)
Modern syntax is based heavily on doing more than one thing with the same segment of code, just look at most unary and terniary operators: ++$i = Read, Add, Write, Assign. $i++ = Assign, Read, Add, Write. $x = $a ? $b : $c = Compare, Read, Assign A single for (.., .., ..) loop contains half a dozen instructions in a single statement etc. If your personal preference is to spread things out, that's fine, personally I like it compact, and the reassurance that the variable can never be used between being initialized and checked.
Good initiative. I have some comments. Can you elaborate on this? https://github.com/nkkollaw/zubr/blob/master/src/parse_url.php So basically... No change? And you wrote [redundant tests](https://github.com/php/php-src/tree/7945dca6ec83be384057888a11d204196f70ba5b/ext/standard/tests/url)? I don't get it. Why not simply work on the inconsistent PHP functions instead of all of them? Put those in some sort of `zubr.php` file: use function \Zubr\in_array; use function \Zubr\html_entities; // ... Then: namespace Foo; require('/path/to/zubr.php'); and write PHP happily ever after? Like you are doing [here](https://github.com/nkkollaw/zubr/blob/b5e2416a3f7138199bdce46c7d563e36ad227f8d/tests/HtmlEntitiesTest.php#L3)? 
I love writing in Yoda statements when it comes to null, true and false, and I honestly don't see the problem with it. It's not harder to read for me at all so maybe that's why I don't see the problem.
While I'm here: https://github.com/nkkollaw/zubr/blob/master/src/functions.php if you intend to do every function, and do a `require_once` for each of PHP's ~5368 functions, your app is going to slow down... Still waiting after all these years: https://bugs.php.net/bug.php?id=62162
It's good if you absolutely can't afford the $5 per month for webstorm. It's better than just using a text editor. But it's definitely on in Jetbrains league. 
This looks interesting. Do you mind providing a high-level overview of how this works?
Insane! Great work. 
"I still do not know what color this bikeshed will be. Please advise."
Give it a couple of months before a defacto standard emerges for a Sodium OO crypto library. At this point I don't get why they don't just make one prior to GA and shove it in an official repo. 
Well for once if they are bringing the new crypto api at least the new functions should have the same signature as the old ones, it usually makes sense. This would also make the hash and verify functions have the password as the first argument. Not that one function has the password as 1st parameter and the other one as a 2nd one.
I'm forced to use PhpStorm at work and I honestly don't see any benefit over Netbeans. I'll look better at what it has to offer. At this point I'm already convinced I'm not using it to its full potential.
&gt; So basically... No change? And you wrote redundant tests? I don't get it. We still need tests to catch typos (have already happened :-) ). &gt; Why not simply work on the inconsistent PHP functions instead of all of them? We're also wrapping functions that already follow the rules we set so that one can avoid calling PHP's core functions altogether and just use Zubr, without going back and forth between Zubr and PHP core. Might not be that important, but some people might care. &gt; Then: namespace Foo; require('/path/to/zubr.php'); and write PHP happily ever after? Like you are doing here? I think it would be confusing both to first-party (after a few months) and third-party devs to see html_entities() in the code. My idea is that always using \Zubr\html_entities() is more readable. No one stops one from doing what you're saying, though. :-)
Yes, we'll definitely optimize that but it's not paramount at the moment.
Incredible. 
Yep so much bike shedding. I still don't know what are the arguments against putting sodium functions/constants into a proper namespace though. 
The new API is an existing extension that has been integrated into PHP's core. Changing the API in significant ways would make migration difficult for existing users of the extension.
Besides the problems brought up in other comments, what bothers me is the way how public-key crypto is used here. As the public key is used to decrypt the payload (not to verify signature as it is supposed to be) there is no point to have public-key crypto in the process at all. You could just share the AES key instead of a public key and be done.
The first line is the one with the error. $supplier; // Will output "Notice: Undefined variable: supplier in [...] on line 1" You don't have to declare variable before assigning it like in Java or C. And if you wan't to, you **must** assign a value, even a null one. Change the first line with $supplier = null; or delete it completely and this script should work alright. [PHP Doc on Variable scope](http://php.net/manual/en/language.variables.scope.php). ---- Btw, as the sidebar says, you should have posted this in /r/phphelp, not here. Go there for the following questions.
This one here, remove the other one from your brain. Dvwelcome
I use it for everything now, local and game development. Hard to give it up once you learn it.
libsodium is not new.
I guess you can do that in PHP as well. Even with these language 'curiosities', a JIT can still be useful since (hopefully) most functions are well behaved. It can just fall back to plain old interpretation otherwise.
Sorry, it was already 5AM when I posted my question. I tried removing the $supplier outside the if, but it still cannot find $supplier on my 2nd if. Says it is undefined 
I know, you just don't have that level of control and ease of use anywhere else. I was forced to use IDEs at a job, and while it has other benefits, I still prefer vim all the way!
Did it says `Undefinded variable` or `Undefined index` ? If it's index, it `$_POST['supplier']` which is not set.
Our company is using this pattern to some degree so reading this article was quite helpful
After reading one attempt after another at a brilliant analogy, truer words have never been written before. 
Great job! Thank you for taking the effort to write this.
Hahaha....
Could this be extended so you can type from the command line, when searching and alike?
Maybe have a look at https://github.com/amphp/parallel and how it's implemented there.
My personal opinion is that I really don’t like them in PHP, but I can stand them in other languages (Java). In PHP they are docblocks, not initially parsed until you use reflection, and that just feels dirty. 
As this is done in a "compilation" step, I think this is alright.
I find them alright. It's a good user-land implementation allowing to assess if the PHP community really embrace them or reject them. Note that in all the projects using annotations, annotations are one way to do it and is never the only way. So it's pretty much to allow people to do a "quick &amp; dirty" config in a simple way when they want to. For libraries, I definitely avoid annotations, for my apps, there is some bits where you really don't care and this simplifies things. Using annotations for everything however is a big no-no.
&gt; not initially parsed until you use reflection you still gonna use reflections to read attributes/annotations even if this will be part of the language. This is not something like decorators in javascript for example. And all information about annotations are still available at compile time.
I use annotations in Java and love them (when used in the right places), but in PHP I avoid them because they're not natively supported. I'd definitely start using annotations in PHP if core changed their mind, but unfortunately I don't see that happening soon.
I really like annotations in doctrine entities but despise them in symfony routers (makes it clunkier than yaml imo). But i'm currently not working on symfony/doctrine and avoiding annotations because of that.
I really don't like annotations, it feels like a hack to solve the lack of decorators in PHP (I'm not talking about the design pattern decorator but true decorators like the one we get in Typescript for instance). It's often used to solve a problem that can be solved without it (Symfony uses annotation but gives alternatives). - Annotations are used to handle validation within an entity. This breaks the SRP, with an entity that now describes data it accepts. I think validation should act on the request using a middleware with a dedicated class PostValidator. - An entity should not dictate how the data is persisted too, and the schema should be in a yml or elsewhere. - Annotations used for Routing is a problem too, since you'll end up with route definitions spread all other the code. I can get that, sometimes, annotations are a good way to get something fast but it adds too much overhead and performance issues for me (you have to use cache when using annotations). 
Obviously, annotations in comments are sup-optimal, that doesn't require discussions. What maybe is worthy of discussion is the concept of annotations at all (without comments). From what I've seen in Java, annotations in the hands of the developer community at large is like giving a toddler a loaded gun. There are countless of ways to abuse annotations and drive people to use them to achieve solutions that make your app *worse*. You see, the problem is annotations are very susceptible to deceptively appealing demos. You just put this @thing on your method and class, and some magic happens! It's short and sexy, and it makes it *feel* like you're doing a lot in little. What you don't see (until much later on) is how **tightly coupled, hard to analyze and debug** code driven by annotations is. It's just meta-programming gone nuts if you overdo it, and people who use it can't help themselves but overdo it. I'm personally against annotations for most uses. I think Java's compiler uses annotations excellently (to mark methods to override etc.) but the community uses them horribly. And we see the same patterns of abuse with Doctrine, PHPUnit etc. in PHP. There's a version of annotations that, however, *can* make sense for a language like PHP and it's called "decorators". It's a feature of Python and TypeScript and is coming soon to JavaScript as a whole. It *looks like annotations, but it isn't*. It's a tangible feature that's simple, predictable, easy to understand and yet covers for many uses that annotations are typically used for, and without the magical code generation and reflection that annotations require.
I think annotations are a good idea, and I'd like to see support in core eventually. In the meantime, using them in the form we have now is still quite useful, plus it helps show what works/doesn't work for when they (hopefully) end up in core, shows support for the feature, etc. Conversely, if we don't use annotations now, we're less likely to get them in core, and they're more likely to be unpolished or missing key features when we do. From my point of view, that's a strong argument in favour of using them. As for arguments against: &gt; they are often being implemented in comments (or actually docblocks). To me, this very much feels like abuse of docblocks. Imo, comments should not be used for functional code. Yet a lot of frameworks/libraries use annotations in this way (e.g. Symfony2, Doctrine2). While I think annotations can be very useful, it just feels very bad to put them in comments. "this very much feels like an abuse [...] in my opinion [...] just feels very bad" That's a very emotive argument, but it's short on specifics. Why is it bad? What makes it an abuse? From what does your opinion stem from? Also, keep in mind that in PHP we have comments (using `//` or /* */`) which are not meant for code, are stripped out from the opcode cache, are not available via the reflection API, and are purely meant for human-readable descriptions. I agree, using them for something like annotations would be an abuse! And then we have docblocks, (using `/** */`) which is meant to be machine readable, is cached in the opcode cache, is available via the reflection API, and is not just meant for human-readable descriptions. You elide over the difference, but they're *different constructs*. This isn't really about "don't put tokens meant to be understood by a machine into comment blocks", it's about *which* tokens should be put into the block explicitly meant to be machine readable. Is `@var` okay, but `@table` bad? Why? You won't find anything to that affect in the PHP documentation saying which tags are allowable; it's *all* being done in userspace, so you need to come up with some rules as to why one usage is "abusive" and another is not. (For me, I think shoving stuff into docblocks is okay as long as it's *metadata*, not logic. The second I see an if statement in a docblock, I'm getting off this bus. But some metadata to indicate that variable should contain an integer? Seems fine to me.)
Thankfully the endless indexing seems to have been resolved for massive projects. Sometime last year, I thi-[Indexing...]
I use yml in symfony/doctrine wherever possible. Just feels cleaner. Code here, config there. 
I'm kinda late to the party here but you can use Collection from [Illuminate\Support](https://packagist.org/packages/illuminate/support). It's nowhere near as compact as doctrine's single class package, but it's not like you have to download the entire laravel framework either. 
What is done in compilation stage? The class data available in reflection is post compilation. You can write whatever the heck you want and it won’t be invalid until you try to use that annotation with something else.
To play devil's advocate, because PHP as a language does not natively support annotations, where would you suggest we put them if not in comments/docblocks? I do understand what you're saying though. And I agree with you. But, until native annotation support is introduced, docblocks are the next natural place to put them. As for native support, I would love it if PHP supported them. I could see this being a devisive topic for many, so I'd settle for an optional C extension instead. Actually, I'm kind of surprised this hasn't already been done. 
I'm assuming that if it is available in the android Sony remote app, it can be emulated here. If you can sniff the packets between the android app and the TV, see what they look like when you are typing. 
My biggest issue with PHP Annotations is that there seems to be huge push to put *EVERYTHING* in annotations and some of those annotations take up a large amount of screen real estate, so the docblock ends up twice as long as the method. I have opted to put some things in xml or yml configuration instead of annotations. I still use annotations, just not with everything.
You can retrieve docblock content with native PHP, but I agree, it isn’t parsed. 
Dude, love this response. Thought out, written well, and no malicious undertones.
Annotations are essentially glorified comments that possibly mean something to some code somewhere in your application. Decorators are functions that are applied to a function before it is bound to its name.
It looks like your config.m4 is having problems locating `libsodium`. Make sure `libsodium` is installed via `make install`. Alternatively use `--with-sodium[=DIR]` or `CLFAGS`/`LDFLAGS` when you run `./configure` to specify the where the `libsodium` library is located at. Assuming your linker config `/etc/ld.so.conf.d` on Xenial isn't setup differently from stock you should just be able to do a `make install` though and let m4 pick up the library.
&gt;What is done in compilation stage? Interpreting the annotations, to avoid the performance overhead of doing that at runtime. But apparently that was not your concern. For both the examples of Symfony and Doctrine, it's clear that it's annotations serving a specific purpose and there's a validation step to ensure the annotations are not filled with invalid values. I think that's ok and I find hard to imagine someone willing to try to change the annotations with reflection at runtime.
Annotations are for functionality that is not part of the language. Annotations as comments (preferably single line) are the appropriate place to put information that is not part of the language, but is important to tracking context. With the type system, as it is, we have a lot of context in PHP programs. If there were a new format in the language like: @&lt;annotation&gt;;&lt;annotation&gt;; ... function() ... We would have some potential trouble with annotating inlines and such, but it would help prevent the mixing of pre-processing data with actual comments (like docblocks) There should never ever ever be error thrown from annotation processing. Otherwise, that set of annotations is functionally a tightly coupled language feature.
Yes, hence why I prefer decorators.
Have you got a source for that? My understanding is that given that annotations are docblocks and comments, they are not interpreted by the PHP compiler until requested by reflection (for reading, not parsing). Frameworks appear to cache class data which is still interpretable by PHP, at the base; however, the annotations are still read separately from the code to build the maps and relevant metadata pots.
But that doesn't really speak against all that, does it? Few people use `$i++` as both increment **and** read, because it's too much happening at once. At least it seems like one of those clever solutions, and we know that clever is not the best way...
&gt;My understanding is that given that annotations are docblocks and comments, they are not interpreted by the PHP compiler until requested by reflection (for reading, not parsing) Yes. Sorry it seems I was not clear by "compilation" I mean frameworks/tools relying on annotations have a "build" step where they interpret those metadata and dump them to avoid to have to do that extra work on each request.
&gt; sup-optimal super-optimal? haha... I jest
Noticed that, but I'll leave it there so it looks like I'm super low-key suggesting I hate annotations so much, I want them to stay comments forever.
I love Symfony annotations for controllers and entities as it separates config from logic
Im not quite following your idea... I mean, in your example, the annotations are in the same file as the code so if we would want to change the framework, we would need to change the code files in order to change the configuration... no? In the other hand if we use yml or xml files for the configuration and would want to change the framework, we would **not** need to change the code files in order to change the configuration... right?
That's a separate issue and the new framework may not read the same yml/xml format... Symfony yml routes do not work on Phalcon What I mean is in Silex you code routes in the controller as a return function call but I prefer docblocks as routes are just configuration
It depends on the type of annotations. For example, the Doctrine annotations in entities are configuration of the ORM and can be done in yml or xml files, so i rather use yml or xml to keep the logic separated from the config. If we look at the phpunit annotations to specify a test dataprovider, then i like it because i feel its quite specific and localized. I don't think it would bring much advantage to put it in a separate config file. If annotations become part of the language, they will probably be more performant, but maybe less flexible (which can even be a good thing) Either way when it comes to dirtiness, we will always be creative enough to find ways of creating bad code using native or interpreted annotations... ;) Readability wise, i don't think there is much difference.
I am pretty neutral towards the current implementation of annotations, but your argument is a bit flawed. I would assume that **doc**blocks would contain, as their name suggests, **documentation** and not data that affects the actual behaviour of the application. Having a docblock that says "$foo is an integer" is proper usage because it is purely informational and the engine does not take it as a constraint - $foo could still be a string or an array even you documented it as an integer (of course, you shouldn't actually do that). On the other hand, shoehorning implementation details or configuration into docblocks seems like a massive hack. Yes, the reflection API lets you tap into that, but IMO it was a mistake to have it implemented that way and it should be reworked with a proper annotations implementation. I also don't understand how is putting metadata like ORM details or routes into annotations better than hardcoding that data. While convenient I believe they are somewhat overused in the current PHP ecosystem, they feel like something like macroes from Rails. 
https://www.reddit.com/r/PHP/comments/1ztstd/rant_it_baffles_me_that_people_think_using/
Yes, the other FW will not read the same config file, just as it wont read the same annotations... the difference is that if we configure the routing in a config file and want to change the FW, we will still need to change the config file but not the controller class. About silex, I don't think you are correct. In silex u have a function call with the http method name, which receives the route uri as a parameter and a callable. The callable is actually the controller. So even in silex, if we want to keep the controller completely unaware of the route, we can have a controller defined as a class, and then inject its instance (as a callable) into the 2nd parameter of the routing method.
What are you on about??? It's about visual differences I have no idea what you're trying to say...
Im talking about separation of concerns: configuration should be separated from code, and the annotations example you gave should not be used in the first place. In my humble opinion anyway. Furthermore, i think annotations are not just about visual differences, its also about performance, its also about what should annotations be used for, and its also about how much bad code the annotations strategy help us avoid. Am i making sense now? :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; I would assume that docblocks would contain, as their name suggests, documentation and not data that affects the actual behaviour of the application. Again, I note the use of the word "assume". Why would you assume that? There's nowhere in the PHP documentation that actually says that, is there? :) As for the rest of your comment, I agree that annotations in their current form are a hack, and I agree they should be reworked as a proper annotation implementation, but I don't think they current system is a mistake. There's absolutely a place for hacks in userland as a feature is fleshed out. On the other hand, you say: &gt; I also don't understand how is putting metadata like ORM details or routes into annotations better than hardcoding that data. I agree somewhat (I happily use Doctrine annotations, but avoid annotations for routes), but I would note that your objection would apply just as strongly even if annotations were reworked with native support.
&gt; as it separates config from logic Oh really? Give me only logic then, so I could use it with another config. 
Reminder that we deprecated Yaml support (removed in 3.x-dev) in the ORM.
It also is one of the few OSS projects built with decent BDD and from the specification up. I suggest reading through it, as it is very well crafted.
I don't understand what you mean? Logic like your if statements, your variables and your business code that actually does something and gets touched a lot Vs routing that is setup and then never touched (or rarely) ever again like how it is in yaml or xml, I prefer that stuff to not be PHP functions or variables
If something like this drove me nuts, I wouldn't be using PHP.
There should be no performance overhead in Symfony at least though as they are cached. It's not much different than having a config file in JSON, yaml or XML from that PoV
Having developed in Python and currently coding Java. It confused the hell out of me.
Could you explain why? There are a lot of valid complaints about php annotations just in this thread
It was indeed a linker problem, even thought the ./configure said it found libsodium-1.0.13. I still had the vendor library installed (1.0.8-5) (/usr/lib). I uninstalled that one first, reinstalled 1.0.13 (/usr/local/lib) and it worked properly. Thanks for the help 
Whaaaaat?! Well, thanks for the heads up. 
Are people still crying about that? Wasn't it about his sexual preferences? I thought we developers are smart people and won't fall into this bullshit of discriminating people of their race/past/preferences/religion etc.?! I think the GSD (Get Shit Done) mentality should be a more priority! Ignore the haters and concentrate on more important things in your life. Nobody cares if you like dicks or to get punished. You are the only one giving that a bigger value! So ignore what haters say and you will see that everythings good! Damn.. It's 2017 and people still are in 1670
&gt; And then we have docblocks, (using /** */) which is meant to be machine readable, is cached in the opcode cache, is available via the reflection API, and is not just meant for human-readable descriptions. That's a bit of circular reasoning here. Docblocks were not a separate token, were not in opcache and so on. They were made such due to the heavy use of annotations in them. It remains a questionable feature, because: - The actual annotations are not recognized by PHP, therefore there's no standard API, no standard syntax, no standard features, it's just bunch of text in a comment. - Along with the annotations, opcache has to store a lump of documentation text which is not part of the annotations and it just sits there wasting memory. - Annotations in doc comments are classically understood to affect *the interpretation of the documentation*, not *to affect execution of the program*. That's not just the classical, but also the intuitive interpretation because it's a doc comment, after all. It's not called "PHP code altering instructions", it's called "PHP documentation comment". As such, annotations in doc comments are used incorrectly if they affect code execution. &gt; Is @var okay, but @table bad? Why? Well, now I think we've covered the "Why".
&gt; To play devil's advocate, because PHP as a language does not natively support annotations, where would you suggest we put them if not in comments/docblocks? That question is also the answer why JSON doesn't support comments. Crockford said he intentionally didn't include comments, as people would start using them for annotations and JSON would turn into a mess. Alas that fix wasn't available for PHP, hence the mess we're in.
The worst performance hit of annotations is on developer performance. If we could build an objective benchmark of developer performance, we'd see a relatively flat chart for classic code (no annotation). For development with annotations it'd start much higher, and then quickly drop like a rock, when said annotations victims realize they have to be debugging and maintain a bunch of obscure auto-generated code spaghetti, and they keep hitting walls everywhere, because most annotations are quite closed for extension. If the annotation writer hasn't thought about your particular scenario, you're not in luck. If you want the annotation behavior to be dynamic, you not in luck, it's just a piece of static text. Etc.
&gt; There's nowhere in the PHP documentation that actually says that, is there? :) Actually I don't think that docblocks as a special token are documented *anywhere* in the PHP manual, the only place where they are even mentioned is the manual page for [getDocComment](http://php.net/manual/en/reflectionclass.getdoccomment.php), which itself has almost no information. So, yeah, that is why would I assume.
I think you are way too extreme about it. In some cases it's more tedious to keep track of a configuration located elsewhere. For example when you take a controller and its action method, it's a kind of thing you appreciate to have to look at only the controller to know which route it is. I like it much less for entities as entities are the core of my domain and it's coupling them too much to Doctrine (although you'll always have a coupling of some kind. There is no question that annotation can be abused of in horrible way, but hey, that's the case of a lot of other things.
[This one](https://github.com/jstpcs/lnxpcs/blob/master/cards/black/cron-card-black.png). As soon as I saw the file name, I just knew it had to be an hourglass! All your work is dope, but this one really stood out to me, I like it! Good job!
Agreed, it's nice that there's room for both beginners' questions, as well as architectural considerations.
&gt; I think you are way too extreme about it. In some cases it's more tedious to keep track of a configuration located elsewhere. It doesn't have to be elsewhere. This is not an "annotations vs. XML/YAML" argument. It's more of a "markup vs. code" argument. Basic OOP and functional techniques can do a lot more than any external config file or annotation can do. &gt; For example when you take a controller and its action method, it's a kind of thing you appreciate to have to look at only the controller to know which route it is. Why would you be looking at the controller to figure out "which route it is", though? Is this more likely, or is it more likely to be looking for "which controller is this route"? A controller works the way it works regardless of the route it's assigned to. It gets the parameters it needs, and that's it. But if you open a URL and you want to know what code did just run... well, whoops. Now you have to grep a hundred controller files, instead of looking at a single routing config. Annotations helped you shoot yourself in the foot there. 
Annotations where introduced I think by Java, that all configuration where in place. Before that xml's where used for that. Having that in mind, Symfony/Doctrine has implemented them correctly, because you can always fallback to xml/yml/php. In other hand it sucks, because we will always have trouble debugging it until it's not native. RFC: https://wiki.php.net/rfc/annotations https://wiki.php.net/rfc/attributes Latest rfc for 7.*: https://wiki.php.net/rfc/simple-annotations Project: http://labs.adoy.net/php-annotations.php **Decorators fit more then anotations**: https://gist.github.com/CHH/4520200
https://github.com/doctrine/doctrine2/pull/5932#issuecomment-233593524 I prefer to use YAML as well but I can understand the reason for dropping it. Happy to XML instead.
&gt; Actually I don't think that docblocks as a special token are documented anywhere in the PHP manual That was my point, yes. They're not documented, so I think the next logical step is looking at how they're used, rather than trying to draw analogies about how similar syntactical elements are used in different languages. &gt; So, yeah, that is why would I assume. And that's exactly why I *wouldn't*. :)
&gt; That's a bit of circular reasoning here. Docblocks were not a separate token, were not in opcache and so on. They were made such due to the heavy use of annotations in them. That's what I was getting at, yes. People like to trot out the "annotations in docblocks are an abuse of what the feature is intended for", but at this point the feature has been modified explicitly to support that usage. However badly it's been implemented, it *was* implemented. &gt; It remains a questionable feature Quite right; it's a pretty ugly hack, and it doesn't work all that well. But if that's the only concern, then the obvious answer is improved support integrated into the core, right?
Gotcha, thanks. Guess I'll switch to xml moving forward...
&gt; People like to trot out the "annotations in docblocks are an abuse of what the feature is intended for", but at this point the feature has been modified explicitly to support that usage. I see it more as a reluctant hack, than a full-hearted support. If they really cared to support annotations, the AST and reflection API would have an official syntax for annotations that's readable through PHP, rather than using third party libraries with their custom parsers. &gt; But if that's the only concern, then the obvious answer is improved support integrated into the core, right? I don't know, it's kind of... "well I have the flu already, might as well get full-blown AIDS".
Personally I don't really like them because they are often not linted or otherwise understood by my IDE and therefore don't have code completion. In addition, the various different implementations make them "magical" in nature adding cruft to stack traces and over complicating run-time debugging with xdebug - more often than not they raise the question of "how is this working?". I like to be able to follow how my code executes, knowing the various pathways helps. With annotations being something that is parsed in an intermediately step adds some mystery to the execution.
But then invalid syntax would issue a syntax error. 
&gt; we have comments which ... are stripped out from the opcode cache &gt; And then we have docblocks ... is cached in the opcode cache Is this true, PHP differentiates between the two types of comments? Is this noted in the manual anywhere?
Nothing wrong with PHPMyAdmin but you should try MySQL Workbench. Also before teaching others, you should learn how to: - use PDO - optimize your DB. You can start with [data types](https://dev.mysql.com/doc/refman/5.7/en/data-types.html) - DRY! Use a template engine And most importantly, please do not sell or publish that thing because *"it's a disastah"*
Why can't they just go in code? For example in the first line of the function `if ($param &gt; 10) throw new ArgumentException` or whatever. 
This reminds me of how I wrote my codes 15 years ago. How times have changed.
You should review the code for SQL injection vulnerabilities: https://stackoverflow.com/a/60496/1461181
Another shitty "for beginners" tutorial from an Indian guy, what a surprise.
Thanks to all, I realized that I did it badly :( Therefore I remove this post so people wont follow bad pratice
Some time ago I started compiling a list of principles, good books, articles, so on, to give to ppl in your situation. It goes from basic to more advanced stuff: https://herbertograca.com/dev-theory-articles-listing/
With typehinting in use, is there any reason to use PHPdoc annotations if I'm not auto-generating documentation?
I strongly dislike how annotations are currently used in general, especially when used for things like routing and data source configuration, because they often create unnecessary dependencies between components, and because they often violate boundaries in architecture models.
Yes it's true, and no it isn't. :) The only reference in the manual is [here](http://php.net/manual/en/reflectionclass.getdoccomment.php), and it explains nothing.
&gt; Along with the annotations, opcache has to store a lump of documentation text which is not part of the annotations and it just sits there wasting memory. Stupid idea time: create composer plugin that uses white-listing to filter out docblocks.
- They are tidier than loose comments - You can describe your variables - You're already commenting your code, and they are easy enough to auto generate - Not every project is PHP7+ - There may be a way to annotate array keys. I've done this using JSDoc and seen it mentioned that there is an equivalent, but never could get examples to work. Also, if you use PHPStorm, `/** @var FooFactory $bar */` is really convenient sometimes.
Where ": self" is used as a return type hint, you may wish to `@return static` to assist static analysis tools in correctly identifying return types in child classes, i.e. where &lt;?php abstract class Foo { /** * @return static */ public static function factory(array $args) : self { return new static($args); } } class Bar extends Foo{ public function BarSpecificMethod() : int { } } Bar::factory() may be mis-identified as returning an instanceof Foo, triggering errors when calling Bar::BarSpecificMethod(), i.e. may trigger analysis error of "Class Foo does not implement method "BarSpecificMethod" $thing = Bar::factory(); $thing-&gt;BarSpecificMethod();
&gt; eventual mocked external services This is interesting. Does the 'eventual' part mean you use the real thing at first during testing, and later develop a mock that runs inside this container? &gt; build-tools (has nodejs, php, xdebug, etc) Ah, I need to start doing this. Currently phpunit, behat, composer, etc. are installed on my host, which I sort of like because they run faster (shouldn't but do). &gt; After that, a single Makefile to orchestrate the entire thing. These are the basic things you need in it: &gt; docker-compose run build-tools ./vendor/bin/phpunit Why in a Makefile and not shell scripts? I'm guessing you're not using the dependency checking/change detection of make... I'd also guess you don't like composer's "scripts:" feature. I don't either. Composer should do its job of managing dependencies and not try to be a shell script replacement. 
&gt; Not every project is PHP7+ I said "typehinting in use", I meant I'm using typehinting in my project. So I'm locking in the minimum version. &gt; Also, if you use PHPStorm, /** @var FooFactory $bar */ is really convenient sometimes. Ah, yes, I do that constantly. Litters the code, but makes autocompletion work. &gt; You're already commenting your code Right, but not redundantly (I'm hoping). If I'm using typehinting, @params aren't adding any information. I see way too many PHPdoc blocks that just restate the name of the method. /** Find all users registered recently */ public function findAllUsersRegisteredRecently() 
Even better idea - don't use annotations and disable them in opcache ;-)
&gt; Does the 'eventual' part mean you use the real thing at first during testing, and later develop a mock that runs inside this container? I create fake services for any API. First, I don't trust them (for example: Github - super squishy and unstable), second my tests look like a DDoS otherwise, and lastly, I need to be able to work while traveling. I can switch from my internal services to external "real" services by changing environment parameters. &gt; Ah, I need to start doing this. Currently phpunit, behat, composer, etc. are installed on my host, which I sort of like because they run faster (shouldn't but do). They aren't faster at all, unless we're talking MacOS: everything is much slower on MacOS :-\ &gt; Why in a Makefile and not shell scripts? I'm guessing you're not using the dependency checking/change detection of make... Because Make is pre-installed in everything, has autocompletion and sane exit code handling semantics. &gt; I'd also guess you don't like composer's "scripts:" feature. I don't either. Composer should do its job of managing dependencies and not try to be a shell script replacement. Most of the scripts run for well over 5 minutes, and that's the default timeout for composer scripts.
&gt; I create fake services for any API Yep, this is all normal. I was asking about the use of the word 'eventual'. I thought maybe you delayed writing mocks.
It just depends on whether external services are used or not: I may have misused the word, sorry!
&gt; Why can't they just go in code? They can. That's the beauty of it; they are entirely optional. I personally prefer to use them, sparingly and thoughtfully. Take the following as an example; it includes both an annotations method and a non-annotations method. Functionally, they do pretty much the same thing: https://pastebin.com/JrbRt9v0 The reason I prefer annotations is because it allows me to hoist boilerplate code out of the body of the controller, leaving only the business logic specific to the task at hand. In other words, I can separate out my tests for existence into comments. I also like that I don't need to lookup the route in a separate file -- I can look up either the name of the route `"api.user.account.transaction.split.create"` or I can lookup the route itself `"/.*/accounts/.*/transactions/.*/split"` (using regexp). All of the information that I would need to know about this route is defined in the comments: the route, the parameters it accepts, the type for each parameter, what HTTP verb(s) it supports, the content type to expect in return, etc. So these annotations are actually doubling as inline documentation in addition to the black magic that happens behind the scenes. --- I know that not everybody is a fan for whatever reason they have, and that's okay. But in my defense, the OP asked *"While I think annotations can be very useful, it just feels very bad to put them in comments."*, which lead me to my question, *"where would you suggest we put them if not in comments/docblocks?"*
&gt; The reason I prefer annotations is because it allows me to hoist boilerplate code out of the body of the controller, leaving only the business logic specific to the task at hand. Why is this an advantage? Firstly, it's hardly separate as you only moved it a few lines above. Secondly, if you really do want it separate, you could just replace that with one function call in the body that does everything you need for that method. I sort of see where you're coming from regarding routing, but to me it sounds like the annotations are being used to cover up flaws like a lack of type hints, bad method names, etc. 
&gt; Crockford said he intentionally didn't include comments, as people would start using them for annotations and JSON would turn into a mess. &lt;pedantic&gt;Actually, [he did it because](https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr) he felt that comments would destroy interoperability of JSON.&lt;/pedantic&gt; Why does that matter? Well, JSON by definition is a [data-interchange format](http://www.json.org/), not a programming language like PHP. So it matters very much that JSON remain as language/framework agnostic as possible so that it can be consumed and used with as little barrier as possible. PHP and Symfony/Doctrine, on the other hand, are not built to be interoperable in the same way that JSON was built. They serve two very distinct purposes. Besides, using annotations instead of inline code actually makes your code more portable than you think. If you decide to change frameworks, the annotations would be a blueprint for what you need to do in your new framework to make it work. Running code with annotations in comments won't be parsed unless the framework supports annotation parsing -- which could be disabled.
They are treated as [different tokens](http://php.net/manual/en/tokens.php)
&gt; Besides, using annotations instead of inline code actually makes your code more portable than you think. If you decide to change frameworks, the annotations would be a blueprint for what you need to do in your new framework to make it work. This is much better done with simple interfaces than annotations. It would be quite a nightmare to have to reimplement someone else's annotation processing in attempt to be compatible. &gt; Running code with annotations in comments won't be parsed unless the framework supports annotation parsing -- which could be disabled. Which doesn't help because your code won't work correctly. We're after all discussing annotations that generate code and change behavior, and not documentation annotations (which are harmless).
Regarding Opcache, there is also this: http://php.net/manual/de/opcache.configuration.php#ini.opcache.save-comments
&gt; Why is this an advantage? Besides what I've already said, some of the annotations give me boilerplate logic for free. For example, using the `@ParamConverter` gives me the call to the entity repository for free, as well as throwing a `NotFoundException` if the entity does not exist. I also like that it keeps my definitions close to my implementation (yes, even a few lines above). &gt; it's hardly separate as you only moved it a few lines above. My example is contrived, but it really pays off in more complex situations. Plus, like I said, it also doubles as documentation that is easy to read and understand... while code is easy to read and understand, to me, there is more cognitive overhead in reading code. &gt; if you really do want it separate, you could just replace that with one function call in the body that does everything you need for that method. To me, that kind of answer is a "let's kick the can down the road". Something, somewhere, is going to have to implement both the boilerplate sanity-checking logic, as well as the business logic, to process the request. From my perspective, I prefer to use thin controllers (in fact, I like [thin everything](http://blog.joncairns.com/2013/04/fat-model-skinny-controller-is-a-load-of-rubbish/)). So if there is something that I can leverage from my framework that will allow me to write less code (especially common code that would end up being repeated multiple times), then I'm down for trying it out. It just so happens that I ended up liking using annotations. It is also important to know that nothing is perfect. Sometimes annotations make sense, and sometimes they don't. It's about experimenting and trying different things, and using the right tool for the job at hand. 
&gt; I said "typehinting in use", I meant I'm using typehinting in my project. So I'm locking in the minimum version. What I guess I meant is that typehinting in PHP7+ is better than it was in 5.6. So if someone has to backport your code, or you're for whatever reason on 5.6, it is more useful than the native typehinting. &gt; If I'm using typehinting, @params aren't adding any information. Say you have the following `function getPrice(int $item, int $amount) {}` All you know is that `$amount` is a number, but not to what it refers. With a DocBlock you would have `@param int $amount The quantity of items from a menu`.
&gt;This is not an "annotations vs. XML/YAML" argument. It's more of a "markup vs. code" argument. And in practice in 99% of the current apps if you don't have Annotations, XML or YAML it's a PHP configuration. We are not talking of how to avoid those configurations, but about annotations as a valid choice for such configurations. &gt;Basic OOP and functional techniques can do a lot more than any external config file or annotation can do. Curious to know what you mean there although that's a bit off topic, I don't mind the conversation :) &gt;Why would you be looking at the controller to figure out "which route it is", though? Is this more likely, or is it more likely to be looking for "which controller is this route"? A controller works the way it works regardless of the route it's assigned to. It gets the parameters it needs, and that's it. The second part of your argument is fair and completely valid. If you don't have a dedicated route mapping file where you can get either of those informations, e.g. when you are using annotations, I would expect at least a CLI command to give that information easily. As I only ever used those annotations in Symfony and there is this command, I assumed that would be the cause. If not, then annotations would be quite inappropriate indeed. So annotations or not, it should be easy to get which controller is used from the route name. However if you look at the controller code directly, it's pleasant to know which route it is for. It's not a must have for sure, but that's a nice bonus that annotations can provide. 
Too bad he doesn't know the difference between *affect* and *effect*.
These are both very good points, and I agree with you. I would like to offer a thought though: while it would be ideal that developers write code that is 100% interoperable between frameworks, the reality of the situation is, they don't. Similarly to the argument about writing database-agnostic code (because what-if we decide to one day ditch XYZ in favor of ZYX), it rarely happens in business. And even if it does happen, the code is usually already in such a state of disarray that a major rewrite effort would be needed anyway. With that said, I get where you're coming from and I do agree with you. We all should be striving to write the very best, cleanest, decoupled code as practical. It's all about the trade offs. For me, I'm okay with using annotations that generate code and change behavior; I like using Symfony/Doctrine, and I have no desire to switch frameworks anytime soon. :)
In which PHP version did docblocks start being opcached?
&gt; but about annotations as a valid choice for such configurations. Annotations are pretty bad at configuration as they carve the configuration in stone right on the thing being configured... But the goal of configuration is typically to separate it from the thing being configured, so you can configure the thing without messing with the configured code. Annotations aren't configuration in that sense, just macros. Meta-programming. With all the drawbacks of macros. It's basically giving people the ability to redefine PHP arbitrarily, which is maybe great for job security, but little else. &gt; Curious to know what you mean there although that's a bit off topic, I don't mind the conversation :) Well, tell me what you find indispensable about annotations, and I'll tell you how to do it without annotations. &gt; I would expect at least a CLI command to give that information easily. Gets complicated, doesn't it. Your command-line console also doesn't have the features of your IDE. Instead of relying on over-engineered command-line dump utils, I can just open a plain PHP source file and CTRL+click to the controller definition... Sometimes people don't realize what they lose as they're trying to gain. Talking of which, you also lose the ability to order your routes, which is important with some more advanced matching. And, of course, you lose the ability to change the routes (i.e. configure the routes) without messing with the controller source. Something that kind of was why routers were invented in the first place: to separate routing from controllers. Ironic I think. &gt; However if you look at the controller code directly, it's pleasant to know which route it is for. It's pleasant, and it's in the route config if you need it... I mean placing routes on the controllers is so backwards to me. Completely unintuitive. Instead of matching a condition and calling X, we do it the opposite way: X declares to... nobody in particular... "if something matches this condition, call me". Architecturally speaking, that's a nightmare for code reuse and configurability.
&gt;support for Laravel Something's gone wrong with your framework if libraries need to support your framework in order to be useful in the context of your framework.
Wordpress. Obviously. 
[removed]
Sometime between 5.0 and 5.3, I think.
You're irrelevant.
&gt; I would like to offer a thought though: while it would be ideal that developers write code that is 100% interoperable between frameworks, the reality of the situation is, they don't. Unfortunately. But after a couple of decades of pain, eventually some learn. It's possible through adapters and facades (not the Laravel ones).
Annotations in Rust make a lot of sense. They are available at compile time and combined with macros you can do a lot of type-safe code generation. In PHP I don't know why you'd do this in annotations instead of just doing it in the language. We pay a runtime penalty either way and if it's in the language instead of the annotations you have a better shot at tracing and debugging it.
Unfortunately, the inexperienced author does not consider anything other than assignment or comparison in isolation. However, as soon as you want to do both assignment and comparison together, "Yoda" conditionals are preferable to avoid superfluous braces. Consider ``` if (($foo = $bar) === 'something') ``` vs ``` if ('something' === $foo = $bar) ```
Yes
Lmfao are you the shithead who keeps making new alts and being toxic in /r/drupal? Seems like it. 
Nope. Just someone who thinks the DA, acquia, and dries have acted poorly. Very constructive post though.
Which cart would you prefer? And what parts were you thinking were over-engineered? Or just the entire thing?
Cool story!
Not afraid, I know folks at my company who feel the same way, and some who maybe don't agree, but think it was handled poorly and that conversation is good, and I never was attacked. Just reasonable people disagreeing on certain aspects. Either way, I just prefer to keep my company and myself out of it. I contribute once in a while and prefer to be able to get work done as I need it instead of having other core team members judge me for my opinions on the situation. tldr; I speak publicly at my office but would rather not drag them into it.
&gt; as it separates config from logic I think it does exactly the opposite. It violates the inversion of control principle, by having controllers configuring their own routes and by having entities configuring their own data storage settings. It also couples framework to application logic (controllers) and domain logic (entities), which is a violation of boundaries in modern architecture models.
Each to their own, i don't agree :) but we all have our preferences, for me it is all about visual differences, I would also use yml in most cases, but I don't mind docblocks. So long as it isn't in a function.
Each to their own, but you and many others have completely misunderstood me. Comparing: - https://silex.symfony.com/doc/2.0/usage.html#example-get-route to - https://symfony.com/doc/current/routing.html#routing-examples I much prefer the Symfony way. This is regardless of using yaml or xml which are fine and also do the same job. To me its: Within logic (Silex) or within Config (Annotations, Yaml, XML, etc) Symfony also provide a PHP way to do the same thing, but to me it isn't as clean as annotations.
I'm also interested in hearing anyone's thoughts about feedback they receive (or don't receive) on their code. We currently do 8 code reviews per year for junior developers, and 4 for senior developers. It's a mixture of Google Docs and Github's review tools. We don't do any peer reviews or upward feedback or anything :( I'd like to try to incorporate that into our system but it may end up being too much overhead.
Seriously stop this crap now. [Everybody already told you your code is terrible and vulnerable to the entire owasp list.](https://www.reddit.com/r/PHP/comments/6rcpim/new_social_network_3_updating_data_by_using/) At this point it's plain malice and nothing else. I am done being nice. Seriously stop posting this effing crap to anywhere. The target audience (new people) will follow those turds and will be vulnerable to god knows what. You cannot do that to people unless that's exactly your angle and you are an actual malicious actor. Just stop.
&gt; Seems like it. That's some fine detective work there, Lou.
I'm often stumbling over the "Chicken &amp; Egg" problem when it comes to creating REST-APIs and the backend that manages them. As I see it, I got 3 options. I can create a backend that talks to the DB directly and a separate API, that basically does the same the backend does, just with JSON in-/output instead of an UI. I can create a backend that calls the API through xhttp-requests, using it like a normal user would. Or I can create a backend that uses the same functions of the API by calling them internally The first has a clear separation, but I hate doing things twice and just because the backend works, does not mean the API is bug-free. So it's double the testing as well as making sure that both do the same thing. The second removes the issues with copied code, but adds the uncertainty of whether wrong behaviour is a result of the API or the client that talks to it. It also feels less secure when the admin-requests come in through the front-door. Seems like security-hell to me. But also clean, since the admin is just another user. The 3rd seems like the most elegant solution, but calling them internally and externally, with all the rights and authorisations included, seems like a level of complexity, the other two don't require. Is there maybe a pattern that I'm missing that would allow me to use the same functions for both, without concerning with different input-formats? So what I usually ended up doing was to create a backend that would work with the database directly. Then create the API that would offer all the functions I need, using the backend for development-purposes, before writing a client-backend that would be able to use the API, from any location. Since I'm juggling with the structure of that for a while now I was wondering what some of you think is the best approach. Am I missing something? How do you separate your public API from your backend? I appreciate any thoughts on the topic, because I haven't found an answer I'm satisfied with yet. 
Some of the finest
congratz!
Good point. I can take a beating but would rather not have my company and coworkers get caught in the crossfire either. :)
Well, for me it has to do with the maintainability and modularity of components. Annotations are the *quick and dirty* option, useful for low-profile projects and prototypes. For an enterprise scale project, I would not recomment them at all due to the coupling and dependencies they bring with them.
Thank you :)
ummm, I think its the meaning of "clean" that is different for both of us. I think by "clean" you mean in a readability sense, and I agree with you, the annotations are probably more readable for most people. And they also have the advantage that we can immediately see the route for a specific controller action: its just there, next to it. So its quite handy. However, I think of "clean" in the sense of code design, following SOLID and GRASP principles. And, in this sense, both the examples you gave in your last message are equally dirty, because you have a file with logic and configuration. They are not separated, as you claimed in your first comment: if you have a controller with annotations and you move it to another framework, you will have useless stuff in it (the annotations). If we use yml or xml in the other hand, the configuration and the logic will be in different files. Then they are really separated and exactly the same controller can be used in completely different frameworks, which is proof of good separation of concerns. :) Even if using silex, we can have a file with the configuration of routes (in php), and other files with the controllers, with no knowledge about the routing.
[removed]
I would say that, if it adds something, we should use them. The other users already gave some very valid examples of situations where using them adds some relevant information. Nevertheless, if it's adding nothing, it is redundant, therefore useless, and it might bring inconsistencies and confusion if we update a method signature and forget to update the docblock. Also, remember that a variable name should be meaningful, and avoid the need for comments explaining what a variable contains, so using a docblock to add a comment explaining what a variable contains should not be a good use case.
Its a nice post, and it starts by explaining some concepts that are needed to understand what comes next. I personally test in a bit of a different way. I run the same tests for the handlers, but I mock the repositories. Then I do specific and detailed tests for the repositories to test that the queries are actually giving me what they are supposed to in every situation. I feel this is more reliable than your approach. But again, nice post.
What is APM? I really wish people would stop throwing around acronyms as of most people already know them. You didn't even link the tool...
Here it shows that docblocks and comments have [different tokens](http://php.net/manual/en/tokens.php)
How does DocBlock fit in with PHP7? Does it complain if you remove the (now unnecessary) "int" from the comment?
sorry, i posted the URL in the "link" section of the Add post, then I filled in text in another tab ... some day I'll get how to post properly here :P APM is "Application Performance Monitoring" ... an APM tool can show you realtime performance metrics on your application. It's what NewRelic, AppDynamics, Blackfire.io, etc all are ... APM tools for PHP.
I don't think it does. In PHP7, a lot of it is redundant, but the `@param int $foo A number` is really useful/helpful. Really, you have to just decide how thorough your code is going to be, and how much time it is going to take.
My view is that separation is good. I've not had a project where I had to split it in two, but I always have API functionality removed in someway, like separate classes that don't interact at all with the main application.
I am a fan of sendgrid, as their api works even with native smtp enriched by header, also for what i need they have the best price, much cheaper than mailchimp for instance. 
it definitely makes working with it easier, since it's easier to grasp the responsibilities of each part. thank you for your input.
Cool, def let me know how it goes.. As for the move from symfony, have you tried out Laravel? Just need to try it out and you will rapidly see why, the basics of how I build projects is built into it, everything you need for jobs and queues and caching and database etc. It's the best framework I can found in 'any' language.. Really it is an achievement. 
[removed]
We do reviews (4 eyes principle) after each pull request. So a couple of times per week per person. Simply because it will bring the overall quality to a level we want, and also to know were a programmer has a weakness, so I can teach.
Congrats! We are currently using this library extensively in our projects and the quality of the code makes customization a breeze. I recently built a LaTeX renderer that was fairly straightforward to implement due to your library's architecture.
We also makes sure everything is reviewed by at least one person. The advantages are numerous; you catch errors earlier, it helps people get a better view of the how the system works, people can learn from each other, etc. I think code reviews are really important when working in a team. I go more in depth in a blog post I wrote about [code reviews](https://jesperjarlskov.dk/code-reviews/)
[removed]
[removed]
Well, Sylius is not for a "3 products to sell" type of shops. It's for full-fledged custom e-commerce with an appropriate budget for development. It is not positioned as a box solution and probably never will be. Yes, it's an investment. And a good one.
Actions Per Minute. A measure of how fast you code.
So the big difference is that this tool has the dependencies of installed packages "sandboxed" per package instead of throwing it all in the root like Composer does? I don't really see the general use of that, since I don't feel we achieved node_modules levels of clutter yet, but I'm glad that it exists for people who have issues with multiple required versions.
if you don’t do it now, you’ll either BC break or be stuck with this design for the rest of your days… Just like PHP. ;)
Yes that is one difference. It also verifies the gpg signatures for you. Symfony 2/3 conflicts, and phpparser version conflicts are often pain the in arse, and I actually prefer to use phive rather than composer global. I only wish it could work directly with github (albeit lack of signature check). 
Well, we can't do everything in version 1.0, unless there were more people working on it. What do you suggest for regex functions? EDIT: I created an issue: https://github.com/nkkollaw/zubr/issues/108, we'll see what everyone says. I just wouldn't want to add too much stuff and we never reach 1.0.
10 points for Spaces in Spaces vs Tabs. 
Deployer is great. I used to use Rocketeer before but it seems like an abandoned project.
I use Magellanes (http://www.magephp.com) for simple apps. And ansible (https://www.ansible.com) - when project deployment requires certain complexity (ex. server needs setup and etc.)
[Elastic Beanstalk](https://en.wikipedia.org/wiki/AWS_Elastic_Beanstalk)
The indentation in this file is all messed up https://github.com/0x13a/optional/blob/master/src/Optional.php
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [0x13a/optional/.../**Optional.php** (master → e085c4b)](https://github.com/0x13a/optional/blob/e085c4b4b301b349c7314e2a2cf3999743c291c1/src/Optional.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dlbn5vh.)^.
It's almost certainly a mix of tabs and 4 spaces. Github chose to display tabs as 8 spaces...... /for the glory satan ofc
I get the idea, but I don't like having untyped (or universally `\Optional\Optional` typed) return values, as this makes code very hard to navigate and inspect. For single optional returns, I would rather work with null values or domain exceptions instead.
&gt;Well, tell me what you find indispensable about annotations, and I'll tell you how to do it without annotations. I just find them convenient for the routes or some serialization config from time to time or in entities for very simple crudish applications where there is not much happening. So I do perfectly fine without it. &gt;Gets complicated, doesn't it. Your command-line console also doesn't have the features of your IDE. Instead of relying on over-engineered command-line dump utils, I can just open a plain PHP source file and CTRL+click to the controller definition... Well, I would probably agree if I had to maintain/develop that, but I'm not and IIRC that command already existed prior to annotations so it's a case where I don't really care :) &gt;Talking of which, you also lose the ability to order your routes, which is important with some more advanced matching Hm not so sure about it. Well I least I never had this issue so I'm talking only for myself, but IIRC the Symfony router is dumped and the routes are re-ordered for performance reason. I wonder to which point the order is preserved. Well, I guess someone will open an issue if that happens^^ &gt;It's pleasant, and it's in the route config if you need it... I mean placing routes on the controllers is so backwards to me. Completely unintuitive. Routes as so coupled to the controller actions, in my experience it simplified things for us to put that configuration directly in the controllers.
Potential alternative which has more advantages I find: https://github.com/bamarni/composer-bin-plugin That said I quite like Phar.io however it doesn't hilight enough the current limitation of PHARs: unlike in Java or node, the code bundled is not isolated, making it dangerous to use when the PHAR has to execute your code. We are trying to develop https://github.com/humbug/php-scoper to mitigate that, but it will never works as well as in Java or JavaScript.
&gt; &gt; Talking of which, you also lose the ability to order your routes, which is important with some more advanced matching &gt; Hm not so sure about it. Well I least I never had this issue so I'm talking only for myself, but IIRC the Symfony router is dumped and the routes are re-ordered for performance reason. If Symfony orders your routes for you, it means you can't order your own routes. QED... :) Maybe Symfony always does the right job, like putting the most specific route first, but sometimes the specificity of two routes is the same, and only a human can really decide which one they want first, i.e. say these two: /products/{id:num}/{action=add|edit|delete|view}/ /products/{id:num}/{action:alphanumeric}/ If you swap them, the result will be quite different. &gt; Routes as so coupled to the controller actions, in my experience it simplified things for us to put that configuration directly in the controllers. Well, once again, routes were invented to decouple URL from controllers. If you couple them, they're coupled. If you don't couple them, they're not coupled. Say I have reusable modules for news, product listing, blog and so on, and I often configure the routes for the module. The blog stays the same, the URLs change. That was the purpose of it. If you want to give it up, fine, but I wouldn't say it has to be like that. If you explicitly choose "all this code is a one-off, I'll never reuse it, although **I could**" then that's a valid choice. But if you say "nah all of this is so coupled anyway, I can't reuse it, so I might as well embed config on it", then this seems to come from lack of experience IMHO.
Looks like 125 lines of code to replace if ($value === null) { //do something } else { //do something else }
The purpose of Optional is not to replace every single null reference in your codebase but rather to help design better APIs in which—just by reading the signature of a method—users can tell whether to expect an optional value. In addition, Optional forces you to actively unwrap an Optional to deal with the absence of a value; as a result, you protect your code against unintended null pointer exceptions. 
Capistrano
[Ansible](https://www.ansible.com/) is a great tool for deployment. It supports useful features such as [atomic deploys](https://docs.ansible.com/ansible/latest/deploy_helper_module.html#examples), [rolling updates](https://docs.ansible.com/ansible/latest/guide_rolling_upgrade.html#the-rolling-upgrade) and many more. You can also use Ansible to provision your servers (installing PHP, Apache/Nginx, etc.). Ansible uses [inventory files](https://docs.ansible.com/ansible/latest/intro_inventory.html) to know which servers to connect with. Using multiple inventory files you can [differentiate between environments](https://docs.ansible.com/ansible/latest/playbooks_best_practices.html#how-to-differentiate-staging-vs-production) (for instance development and production). You can also [define variables depending on the inventory file you're using](https://docs.ansible.com/ansible/latest/playbooks_best_practices.html#alternative-directory-layout) in order to deploy the right configuration values. Regardless of which tool you choose, I recommend [separating the deployment process in two stages](https://12factor.net/build-release-run): * in the **build stage**, you create a *build* based on your source code. The build should include your app's dependencies (Composer's vendor directory), compiled/minified assets, etc. I like to use [Make](https://www.gnu.org/software/make/) for this stage, but you can use other options as well such as [Phing](https://www.phing.info/) or [Apache Ant](https://ant.apache.org/). These tools can also do other things for you such as running your (unit) tests. For most of my projects the result of the build stage is a [tar archive](https://en.wikipedia.org/wiki/Tar_(computing) which can be copied to the server. * in the **release / deploy stage** you take the build from the previous step, extract it to a directory on your server and combine it with the correct configuration. You can also run extra steps, such as setting file permissions and running database migrations. The benefit of this method is that you can run the exact same build on the development / staging / test environment as on the production environment. Only the configuration parameters (such as database credentials) are different. This gives more certainty that you will catch any bugs before they end up on your production environment. It also removes the need to install certain tools on your (production) servers, such as Git and Composer (which don't belong on a production server in my opinion).
Thanks :) That LaTeX renderer sounds really cool!
&gt; just by reading the signature of a method But looking at the example, what used to be Burger is now Optional. Isn't it less clear now? Optional what? I don't know how it's done in Java but I bet it uses generics. At least in Rust you need the actual type that's wrapped.
We use a tool called [Deckard](https://github.com/RoundingWellOS/deckard) for build and deploy. Our servers are built and configured using Ansible.
&gt; The purpose of Optional is not to replace every single null reference in your codebase but rather to help design better APIs in which—just by reading the signature of a method—users can tell whether to expect an optional value. PHP 7.1 has nullable types and return types, so you can have: function foo(?Bar maybeBar, Bar mustBeBar) : ?Foo Just from reading the signature of this method I can tell that `maybeBar` can be null, `mustBeBar` can not be null and the return value is going to be Foo or null. If the foo() function never returns null I can instead use: function foo(?Bar maybeBar, Bar mustBeBar) : Foo This also works for scalar types: function foo(?int maybeInt, int mustBeInt) : ?string 
Thats one informative ad.
Indeed. Hasn't PHP stolen enough nonsense from Java? IMO this is just another layer of complication which requires more to grok. Furthermore IMO from an OOP POV it promotes bad design, as in such instances I would try to use a null object pattern if I was that concerned about receiving a null back...
&gt;But looking at the example, what used to be Burger is now Optional. Isn't it less clear now? Optional what? ^ this. &gt;I don't know how it's done in... there is already a solution in php, optional types in 7.1
Although I love optionals in other languages, I hate not having good types in PHP :( Generics will probably fix this once it's implemented though. More on topic question: how does this library relate to https://packagist.org/packages/phpoption/phpoption? In what way is it better/easier/faster/etc?
Thanks, Jarlskov. I loved the blog post.
Amazon France apparently have them in stock: https://www.amazon.fr/Open-Goodies-Official-elePHPant/dp/B01MRUHSLA?tag=markepulse0f-21&amp;th=1 
Thanks, I appreciate it :-)
I have tried out Laravel. I haven't used all the features, but I have built a complex data aggregating and reporting back-end with it (for work). I have done a couple of smaller projects too. The real killer for me was attempting to upgrade from 5.1 to the current release. Also, some of the 'magic' just frustrates me. Pretty unfathomable stack traces sometimes. As for my current project, I have toyed around with a few things in the last week or so. While I'd love to take this as an opportunity to learn a new language (maybe Scala, c++, D, Go) I have decided to go ahead with PHP because I have very little time to give to this. So, now I have a small Phalcon CLI app which receives streamed output from a CasperJS script which is responsible for getting real time price info and executing trades (via browser automation). The Phalcon app will be doing all the clever stuff and also storing the price info in a database so it can be used for training and testing later on. This is where I am at the moment anyway. Lots to do, but am also learning lots in the process! I guess I'll make a GUI too, maybe in Laravel ;)
No, do not introduce another tool and fuck up our ecosystem like the Javascriptians have fucked theirs, we have ONE standarized tool and that is composer, deal with it.
Ok, that works as well. Probably I couldn't mock everything easily because Flarum uses ActiveRecord pattern beneath the repositories. My approach may be simpler (or more lazy) in terms that you don't need to test repositories because they are already covered with integration tests. If repository method is not used in any handler - who uses it, anyway? Both approaches are pretty nice and valid. Which to choose depends on your coding style and your architecture.
Just to clarify, I also ported the `Optional` type [from Java to PHP](https://github.com/Ocramius/ocramius.util.Optional), and it is _useless_. Why? The entire discussion on nullability being bad is because in Java, everything is frikken nullable. The entire language is a mess because of that, and regardless of generics, it is a nightmare to work with it. 50%+ of my tests are around nullability because of that. Given that PHP has no generics, an optional type just acts as an extremely good code obfuscation mechanism, making everything even less typed.
This is basically a more complicated Either monad. 
&gt;If you swap them, the result will be quite different. Yes I do see that, I'm just not sure to what degree Symfony changes the order. &gt;Say I have reusable modules for news, product listing, blog and so on, and I often configure the routes for the module. The blog stays the same, the URLs change. That was the purpose of it. If you want to give it up, fine, but I wouldn't say it has to be like that. That's a good example where annotations are inappropriate for sure. &gt;But if you say "nah all of this is so coupled anyway, I can't reuse it, so I might as well embed config on it", then this seems to come from lack of experience IMHO. I rather say: "I don't plan to re-use it, so I'll make things easier and embed the config in it". A lack of experience can always cloud a judgement, but IMO a lot of people complicating pretexting code re-use by lack of experience as well.
do we have any links for the actual talk?
This story reminds me of https://www.reddit.com/r/PHP/comments/62eie8/1m_downloads_of_an_open_source_project_in_php/ Anyway, congrats!
&gt; Yes I do see that, I'm just not sure to what degree Symfony changes the order. If these are in two different controllers, there's no *order* per se, that's the point I'm trying to drive across. Unless you think it sorts routes alphabetically by controller name or something :) &gt; I rather say: "I don't plan to re-use it, so I'll make things easier and embed the config in it". A lack of experience can always cloud a judgement, but IMO a lot of people complicating pretexting code re-use by lack of experience as well. I'm just trying to understand why it's easier. It seems like the same exact amount of effort (in both cases you type N number of routes), but for a worse outcome overall. You win: - Can see the URL above a method. You lose: - Ability to order routes across controllers. - Ability to define and compute routes through code. - Ability to configure routes independently of the site. - Central reference in code that shows how code is wired (still better than CLI dumps). - Ability to reuse one controller over different routes (with different parameters). - Ability to separate one application in modules, each with its own router and set of controllers. - Ability to reuse said modules over different routes in the same (or different) project. - Ability to nest routers (a router hierarchy). Annotation routes seem like a scenario that works very simple one-off projects, and works against you in most other cases, while they give you very little in return. *Shrug* Have you never used one controller over different routes? Maybe not if your framework makes it hard or impossible for you. Let's say static pages. How do you wire them? Do you type empty controllers over and over, that just return views? Because I just use the same StaticController for all static pages across my site. Easy peasy: $static = function ($twig) { return function () use ($twig) { return new TwigView($twig); } }; ... $router-&gt;add('/about', $static('About.twig')); 
Ansistrano: https://github.com/ansistrano Basically Ansible + Capristrano
If you use the functional interface of Option you get type hinting by type hinting the arguments to the functions you're passing.
You make it sound like the nullability discussion starts and stops with Java. Eliminating nulls in PHP/Javascript removes a lot of possible run-time errors.
Our agency experimented with using Rocketeer to deploy Magento until support was ended and then we switched to Capistrano. It looks like development on Rocketeer is (maybe?) being picked back up again.
I personally prefer the `NullObject` pattern so that way i don't have to check at all.
&gt;If these are in two different controllers, there's no order per se, that's the point I'm trying to drive across. Unless you think it sorts routes alphabetically by controller name or something :) I got your point. I'm saying Symfony changes the order of the routes for performance reasons. I just don't know to what degree so maybe it doesn't alter the order for cases where the order might matter. &gt;I'm just trying to understand why it's easier. It seems like the same exact amount of effort (in both cases you type N number of routes), but for a worse outcome overall. Well maybe indeed that's what you're missing. It's just easier to keep your route sync to your controller as the config is at the same place as the code, or update one when you update the other. That's it, nothing grand. You describe a lot of drawbacks but from what I see, they are easy to foresee or identity and you can simply chose not to use annotations for it. 
And the type hint is defined by the consumer of the callback: grrrrreat.
I played around a lot with GADT in Haskell, and nullability is indeed better there, but getting rid of it at the cost of a loss of type information is **not** OK. `Maybe Int` is a `Just Int | Nothing`, but `Maybe` on its own means nothing at all. In Java, `Optional&lt;Integer&gt;` is OK, but `Optional&lt;Object&gt;` is a big foot-gun.
Found this : http://www.ebay.com/itm/NEW-READY-TO-ADOPT-PHP-Eli-The-ElePHPant-Elephant-Plush-Toy-/222548879255?hash=item33d0f26797:g:m6YAAOSwzgBY420q
I really like reading the source code of Sylius, I aprove things while reading it by nodding my head unconsciously. Maybe I'm a symfony guy and maybe I should try to learn everything about it and market myself as a *Sylius Developer*. Feels like it's a good way to find a credible job...
Your class accomplishes very little and has harmful drawbacks as noted by other commentors. However I will focus on one specific piece: [get](https://github.com/0x13a/optional/blob/master/src/Optional.php#L37-L44) public function get() { if ($this-&gt;isPresent()) { return $this-&gt;value; } throw new \Exception("Value not present"); } Now code can just do this `$val = $optional-&gt;get()` and receive an exception instead of `null`. In some cases this may be an improvement but generally so not really. You think if someone isn't going to do a null check they'll do an `isPresent()` before that `get()`? Here's my take on it: [Ardent\Option](https://github.com/morrisonlevi/Ardent/blob/972e9eea600edf9d0941c303f3b6a958e40dbb34/src/Option.php). It still has some of the drawbacks listed elsewhere in the thread, but in my class it is more difficult to unsafely get the value: $it = $option-&gt;getIterator(); $it-&gt;rewind(); $value = $it-&gt;current(); Compared to some possible correct ways: foreach ($option as $value) { // do whatever } $option-&gt;map(function($value) { /* do whatever */ }); ----- I wasn't going to comment on it initially but your `filter` looks totally wrong. What good is a callback to the filter method that doesn't take a value from the Optional?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [0x13a/optional/.../**Optional.php#L37-L44** (master → f0a434b)](https://github.com/0x13a/optional/blob/f0a434bc10fbdbadbddd58c68c477a1b8497df1c/src/Optional.php#L37-L44) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dlbypfv.)^.
Respect for building something interesting and putting it out there, but as a team lead, not quite practical for adoption. (Perhaps it is not intended to be practical though) My reasons are: 1) It doesn't really save on any cognitive overhead, quite the opposite 2) I wouldn't want to have to explain this to new developers 3) It's a standard to adopt that affects the entire codebase, and even if I were a fan, I'd feel a little irresponsible to require future devs to adopt such an non-standard paradigm and to the client for the costs involved to refactoring it out when someone ultimately ends up thinking it does not belong.
I've used swift. Optional are clutter. Fuck optionals.
As an alternative for ansible, you could look at using [gitlab CI](https://about.gitlab.com/features/gitlab-ci-cd/) for the same sort of automation. Since we host our sourcecode on our gitlab-instance, every push to a certain branch triggers a automatic deployment to a staging environment. We should be able to manually deploy these to production as well, but we're not doing that right now.
I've been trying to carve out the time to have close look at Sylius for what feels like an eternity now. Would you have a recommendation as to where I should begin to dive in? Is there a good starting point or "roadmap" to reading and understanding the project?
Not monadic enough for me ;). Good effort though dude, definitely check out https://github.com/schmittjoh/php-option for some inspiration.
I used capistrano for years. You guys upvoting should seriously try Ansible. Google for a playbook that mimics capistrano's deployment steps as your starting point. Never look back.
Came to say the same. There's literally not a single line using Optional in the examples, that wouldn't be improved in every objective and subjective way by removing it and replacing it with null...
Swift optionals are quite like PHP 7.1 nullables, actually. 
I agree with you on all points: 1, 2 and 3. This kind of change of paradigm only gets traction if it's widely promoted by a framework/library. So Laravel can have weird Facades and Collections, and your junior developer won't be scared, even though he has no idea of what it actually is/do. Or React and use all kind of Babel/ES6 wizardry and no one thinks spreading the spread of a spread is a bad idea.
Even in Java, Optional was only intended for use in streams. But the "OMG functional things!!!" part of the Java community took it and ran with it, putting it everywhere where it doesn't belong. Now there's a backlash against it. But, of course the PHP community always lags the Java community by a few years, so here we go. Warmed up Java Optionals.
Maybe/Option monad you mean? Either/Result has a left and right value, like a tagged union only with the added context of success and failure paths. This is more like nullable types that we got that in 7.1.
You didn't say how you expose static pages though. Separate controllers for each page?
I don't get it, why not just use an if/else seems to be exactly what's going on here...
What is up with these packages that treat home page visitors like they've been there before? I read the whole front page, and while it tells of fixes, and that it's better than ever, what does it do and what is it for? 
Does anyone have any experience with setting up their own implementation of computer vision? I just wanted this for a small toy project and it seems the resources are pretty darned limited for PHP. PixLab has been the closest I've been to a solution, but at 20 dollars a month for a toy-project.. that's a bit steep.. EDIT: This is more about object detection and not facial recognition - more specifically - pattern matching.
Good point, if adopted as a standard of an opinionated framework, I may not like it but I'd gladly follow as standards trump personal preference.
You're right.
Generics &amp;&amp; union types, please!
Would you suggest using PHP for a simple website (as opposed to some js framework or a static page generator like Hugo)? I've never used PHP but it seems like it fits this use-case well. I'm a programmer by trade, so coding/compsci concepts wouldn't be a barrier to entry. Thanks!
We use Capafony at work for Capistrano and Symfony 
Solution in search of a problem.
Considering Swift has no null, the problem is quite well defined.
Was gonna say this http://www.elephpant.com but apparently they changed to just sell via Amazon, and only in France and UK :( Not sure if they ship internationally. I got mine there late last year (direct from the site) after accidentally throwing away the original.
[It’s a trap](https://github.com/0x13a/optional/blob/f0a434bc10fbdbadbddd58c68c477a1b8497df1c/src/Optional.php#L28-L31)
The rainbow elePHPant is also still for sale: http://phpdiversity.org/the-enfys-shop/
yeah but if someone submitted the code you wrote there in a pull request I would tell them to change it
Interesting, albeit brief, post. I'm a sucker for async-related stuff, especially from you.
We deploy multiple Laravel projects with AWS Opsworks which is basically Chef.
Do you think this is Hacker News or something?
&gt;once it's implemented I've got some bad news for you...
I started with reading Symfony documentation, clicked documentation and started with Chapter 1 Setup. Routing, controllers, Doctrine (and Entities), Twig, configuration... aka the basic stuff. I created a simple static web page with Symfony, just routing, used controllers to render templates etc. I was also playing with Laravel at that time, I was familiar with composer, command line and some design patterns. After reading docs, I used MySQL Sakila database (maybe you heard, a sample database filled with sample data) and created a fronted for it (I've also created a frontend/backend for it with Laravel). The Bundle stuff in Symfony was where I started to understand what is going on behind scenes in Sylius. I'm still learning Laravel and Symfony, still reading Sylius.
We've recently transitioned from using Capistrano to using AWS CodeDeploy
The current RFC hasn't been voted upon, right? Although I see it hasn't been worked on for a year either :(
Well, why would it throw an error? You can still use it exactly the same. The contract is still valid.
Concretely what issue does adding a defaulted parameter cause?
 var str : String? = nil Oops. Anyhow this is /r/PHP, not really interested on schooling you on Swift's lameness. Again. 
ElePHPants will be available on every Amazon stores shortly (we hope!). We are struggling a bit to create items on amazon. The elePHPant team
We use Fabric. It lets us be very granular on what commands we want ran and easily specify which clients we wish to run various tasks on.
Found it, already ordered!
Where's the "oops" here. This works exactly as expected. You have optional string, you can assign nil to it, to signify it's empty.
I use Rust style Results and Options, and I communicate the polymorphism through method documentation. I get your point but knowing something will always be a Foo and never expecting a null adds a lot of value for me, anyway. PHP unfortunately doesn't offer much when it comes to type safety, I wish it supported generics.
From the docs: http://php.net/manual/en/language.oop5.interfaces.php &gt; The class implementing the interface must use the exact same method signatures as are defined in the interface. Not doing so will result in a fatal error. So if adding a parameter with a default value is acceptable then at the very least, the docs should be updated.
If all u need is a simple website, i would just go for something like wordpress.com. Even if you just need to collect some data from users using a form, theres plenty of form generators out there, i think even google has one. If you need something a bit more custom, then PHP might be the way, maybe using a micro-framework like silex or lumen. For enterprise applications i would advise Symfony or laravel.
Exactly. We like Composer. Stop it.
This has to do with the [Liskov Substituion Principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle) (LSP), that states that all subtypes (S) of an object (T) can be interchanged without modifying anything about either object. By adding optional parameters to the concrete implementation of the interface, you are still holding true to the original contract–in other words, any method that requires your interface will still work without modification because the as far as that method is concerned, the signature has not changed. interface Foo { public method bar(array $bar); } class Bar implements Foo { public method bar(array $bar, $baz = null) { // … } } function bam(Foo $foo) { $foo-&gt;bar([1, 2]); // valid $foo-&gt;bar([1, 2], 'bad'); // valid, but don't do this! } In our contrived example above, you can see that the `bam()` function is asking for a type of `Foo` and not specifically of `Bar`. The type could be anything, so long as it implements `Foo` and it's methods (including parameters). You can always abuse the interface, as I show in the second call to `$foo-&gt;bar()`, and it might work like a peach for forever and ever. But, because the second argument is not a part of LSP, you can never guarantee it will always work. While you're soaking in the LSP, you should also take a look at the [SOLID](https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) principles, which LSP is a part of. 
**Liskov substitution principle** Substitutability is a principle in object-oriented programming stating that, in a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e. an object of type T may be substituted with any object of a subtype S) without altering any of the desirable properties of T (correctness, task performed, etc.). More formally, the Liskov substitution principle (LSP) is a particular definition of a subtyping relation, called (strong) behavioral subtyping, that was initially introduced by Barbara Liskov in a 1987 conference keynote address titled Data abstraction and hierarchy. It is a semantic rather than merely syntactic relation because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
So there is nil/null in Swift.
Hm as annotations kinda force 1 controller per route, unless you're fond of extending a base class left and right for that, I wouldn't go for annotations for that specific case. As long as those are isolated and specific cases, I'm fine with having a different config for it. If there's a lot of it for the app, then I wouldn't use annotations either.
Docker + Mesopshere 
You can't even copy / paste the code because of their fancy double quotes lol.
It's not null, it's nil. And Swift's nil is categorically different than Objective-C's NULL and nil, as Swift's nil is just syntax sugar for setting an Optional to empty. It's not an actual null reference. My point was that since Swift doesn't allow any of Objective-C's mechanisms for setting a reference to "nothing", Optional isn't a solution in search of a problem, the problem is quite well defined: there needs to be a mechanism for modeling empty values, and Optional (and its nil) fill that need. Now... that's enough Swift and nitpicking for /r/php. See ya.
wat
**I FOUND A WEBSITE COMPLETELY ABOUT FINDING THE LENGTH OF AN ARRAY IN PHP.** 
Kubectl to deploy into kubernetes. 
Finding the length of an array in php, they found a website completely about it.
Good
I added this to my bookmarks - great resource
Comments are for comments. End of.
Yeah we already knew about that one. It's Mailgun's IP that is blacklisted. That is a shared IP they gave us. We emailed them about it and they said it shouldn't be a big deal. So yeah, not impressed with Mailgun only because of their support.. it sucks ass. I don't want to pay for their service because of it. Was going to pay 59$ a month but their support lost them a customer.
Funny they merely ask about why such a thing might be relevant, instead of showing an example. I like to use sizeof when I want to iterate through an array using a for loop instead of a foreach... as in something like: $numberOfItems = sizeof($theArray); for ($xx=0; $xx&lt;$numberOfItems; $xx++) { $thisItem = $theArray[$xx]; // do more stuff here... }
Why assign a variable to the array size? for($xx=0; $xx &lt; sizeof($theArray); $xx++) {
There are examples. They're linked at the bottom. And they're hysterical.
I really love GitLab CI + Deployer. While Ansible is much more robust, Deployer is simple to use and for **my** use case, it does the job and does it well. As for GitLab CI, I love it for many reasons. You can use Docker to run your CI and deployments and if you're used to using TravisCI for your public projects, you'll feel right at home with the YAML configuration. I also love that your builds and deployments are fully integrated into your project repo. Your mileage may vary, but with our private hosted GitLab server and Deployer we are getting by just fine. Also had it all set up in about a day or two.
AWS CodeDeploy and Salt Stack as the provisioner
AWS opsworks with chef 12
I didn't understand how to find the length of an array until I studied the cheating husband example.
So you are not testing the size of the array for every iteration, was my understanding. At least, I believe it was costly with `count()`
Not even the slightest bit.
&gt; knowing something will always be a Foo and never expecting a null adds a lot of value for me, anyway. That's what a `Maybe Int` accomplishes: In haskell sayHello :: Maybe Int -&gt; [Char] sayHello Just a = Data.List.intercalate " " $ take a $ repeat "Hello!" sayHello Nothing = "I guess we just don't like each other..." The above is the same thing you are referring to.
Sure, it would be optional to assign a new var. I find it handy, though, for various purposes. Plus, it arguably helps readability of the code.
May be true for an array, but in general you can't make that assumption about Countable stuff.
Good ol' WordPress rich text box
The best part is on "Create a PHP Array" 
There are many better ways to model the absence of a value. I doubt this cumbersome fad will last. Nil and null are not different.
Thanks, I will go with Deployer. It seem very simple enough to maintain. As for CI tools, I considered GitLab CI too but my team is looking for an opensource solution for Jira alternative as its license cost go to the roof as users increase. We also kinda want to host these tools ourselves. I wish I could convince my team to try Gitlab at some point.
That is the first thing I thought too. 
GitLab community edition is entirely free and can be hosted anywhere. We have a private instance running on our servers and it doesn't cost us a dime! I'm not sure how the paid options work and if you can host those, but community edition works great for us. 
Depends on the number of iterations. 1000000 `count()` calls will be slower than 1 `count()` for example. `sizeof()` will also be ever so slightly slower since it's an alias and will be one more function call. In most real world situations these won't matter, but it generally agreed that recounting the same array on every iteration is not efficient.
Tried to click an ad to support whoever made this crap, found no ads shockingly.
I mean, one great reason is so that you don't have to worry about what happens if you modify the array in the loop. What happens if you remove or add elements? Even if you don't plan to, it's a good habit to avoid setting up your loops like this so that you don't risk creating those kinds of bugs.
Interestingly.. not present on the first page of Google for "php array length".
Oh, great. I didn't find that option on the website before. I will take a look again, Thanks.
composer is very nice but composer global pretty much sucks when you run into dependency hell this seems to solve it.
Personally I ran into dependency hell a lot with using composer global so am happy this exists instead which tries to solve it.
I'd poke https://twitter.com/streamacon about that, assuming they did manage to record them given how badly it went for them.
Why not try to contribute to a solution for Composer then?
I don't get it. I don't get this sub either. A thoughtful research or a honest effort in the Open Source hardly gets 0 score, but a silly joke gets a shitload. 
&gt; APM is "Application Performance Monitoring" And here was me thinking it was [Atom Package Manager](https://github.com/atom/apm)
To be honest I have a few symfony/console commands that either "pre-compiles" classes with nikic/php-parser or does `var_export()` to file to avoid the runtime reflection checks across multiple classes via reflection.
hah!
Thank you guys for all your comments. It's always a learning when I submit stuff here! Thanks
Yeah I'd imagine they have 100's of these sites just trying to grab some Google space. The ironic thing is, this sub linking to it is actually going to give it a boost :(