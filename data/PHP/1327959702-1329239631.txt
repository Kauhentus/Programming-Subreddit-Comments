We wrote a service in Node.js that uses the Twitter Streaming API to constantly get a feed of the tweets we care about. It's about as good as it gets.
I'm not sure that can be done on many shared hosting accounts.
would it be possible to take a look at said service? and could it run without user input?
In FileZilla -&gt; Site Manager where it says Logon Type, set that to "Ask for password"
Being forced to release a head of schedule or before testing is done.
How could they fuck up namespaces? Now we will get a generation of programmers who think that namespaces are shit...
lol, now _that's_ commitment. And I'm glad to see that I'm not the only one to do that. But, I think you unnecessarily downvoted yourself; I think you're supposed to downvote comments which add nothing to the discussion, whereas you highlighted some gaps in my suggestion that I should have made more clear. That's a bad habit I have, and if I hadn't done that, then you wouldn't have needed to bring that up. So, I'll downvote myself as punishment, and upvote you for highlighting my mistake.
My experience is that that often doesn't happen until after the project is complete :-(
Getting artwork. I have a handful of personal projects I'm working on, and as with all personal projects, no budget. So, how do you get artwork without compensation to an artist?
I take it wearing a seatbelt is a precaution more than anything, since I've yet to get into a car crash? I don't drive very often, and I'm vey safe, so I can't really ever see a time when I might need a seatbelt. Sure, you might go your entire life never having a single conflict. Or, you might have one. Why not just get into the habit of using namespaces and save yourself (or the people who will maintain your code in the future!!) potential problems down the road? Are few extra keystrokes really worth not following the safest practices?
The first year of trying to get started &amp; scapping the project over &amp; over again..... I'm glad I'm finally making progress
Awesome - I really appreciate the help. As has been pointed out in this thread it seems to be seen as best practice regardless, so I will try and get into the habit. Getting into OOP has been hard enough, so if I'm going to do it, I may as well do it right!
Finishing!
I've done some sites I was /darn/ proud of. Had incredible potential. But since it wasn't SHINY and soaking in AJAX/Flash/PRETTY BAUBLES, it keeps getting marked up as "Old and worthless" 
Ini_set('display_errors', 'on'); error_reporting(-1); Also, sorry to vent on your thread. Use stackoverflow for (well structured) development problems. 
You know what they say, the last 20% of the job takes 80% of the time. 
Yes, autoloading with namespaces is the best thing ever. Check out this for some more information: [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) Assuming all goes well and people follow it, you'll easily be able to add other peoples code to your project without having to worry about making sure it's included!
I have my own micro-fork of a library called twitter-node: https://github.com/cmwelsh/twitter-node We use Node.js to do a call our PHP code when tweets arive.
I used to be able to finish projects from start to finish. The more I learn about optimization, the less I get done. Abstraction and proper documentation are a must if you want to make it simple for yourself or others to work on / extend your code later on but it's never easy.
I would hazard a guess that it was linked to [Rob Allen's excellent tutorial.](http://akrabat.com/zend-framework-tutorial) He also [wrote a book](http://www.zendframeworkinaction.com/) that is well regarded although I can't personally vouch for it as I haven't read it. Rob has also released a version of his tutorial for ZF2 which is available [here](http://akrabat.com/getting-started-with-zend-framework-2/) As mentioned in the thread you linked to Jon Lebensold's [free zendcasts](http://www.zendcasts.com/) are also very good. Just note that some of the early ones are quite old now and use older versions of Zend Framework. On a more practical note unless you are learning ZF1 to work on an existing application I would strongly advise you to learn ZF2 (even though it is in a none feature complete beta at the moment) or even symfony2. Each of those is more powerful and IMHO easier to learn than ZF1.
Though you do have a good point about clients giving up their deliverables. I'm on year 2 of what should have been a 2 month gig. Kind of poisoned me from taking on additional side-work.
Also why not just use ``exif_read_data('pic.jpg')``? I haven't used PHP in a long time, but I literally just went to php.net and typed in "exif" into their search field, and that's what came up.
You should check out Zend Framework: Surviving the deep end http://survivethedeepend.com/ I think that's a great place to get started with the framework.
I was speaking in a general sense. I was not mentioning that current implementations of unit testing frameworks are flawed. I am sorry if I caused any misunderstanding.
the data variable is a string of raw data read in from the email attachment. createimagefromstring() takes that data string and returns a resource object to use with gd functions. The problem is that it strips a lot of header info from the data string, including the bulk of the exif data. By using fwrite I am simply creating a file from that data without modifying it in anyway, the result is the image exactly as it was sent. Once I've created the image file I can call exif_read_data(); on it and all the data is intact 
The last 10% of any project.
Would it be easier to use a different database and load fresh test data to database just before testing, via script of course,? Is there any drawbacks for this method? 
I'm converting an existing application (my website) over to a php framework, Zend is the one I've settled on after much debate and consultation. The bottom line is that there doesn't seem to be any really good choice. I would do ZF2 but it's not production ready but perhaps I can upgrade to it in time.
I don't think you should write to the file-system, just to read from it. At the very least I would use the [tmpfile](http://php.net/manual/en/function.tmpfile.php) function to avoid the hang-up of waiting for a single file to be written/read. But instead of writing files, may I introduce you to the [data stream](http://php.net/manual/en/wrappers.data.php): exif_read_data("data://image/jpeg;base64," . base64_encode($raw_data));
So, if I'm learning, starting from scratch, what are the best resources to learn ZF2?
Zend **OR** Symfony.
I've been waiting for a client to give me their banking details for an e-commerce project for over 2 years. The site is done, tested, approved. All I need is the codes for the payment system. The checkout is done and tested to, using the banks test suite. The site has been half a day form ready for _years_. The client knows this. And I'm still waiting...
It's impossible. But, really it is. The larger the team, the more the variations (natural noise is what I call it) in time estimations smear out, some estimates will be bang on, the majority will be too little time and too much work. A bigger team == more interactions and more areas in which people have to talk about and decide something. Often this is the part where wooly specs and two slightly different ideas spiral into a giant time sink. MVP is the chant you have to keep too. Minimal viable product. Maybe the customer would like.... STOP. No they won't. Not in version 1. Version 1 is your proof to them that you can deliver something that works. It may not be pretty but you hope to god that they also notice that they need widget to calculate X and pay you to make V2.
Just add those bits then. People judge quality of something in around 10 seconds. Why does Apple do so well? Their products look and feel damn nice. The first few minutes of interaction are a pleasure.
This is a nice method because while you test your app you can browse to 'test.php' with your debugger and watch it run. Then later when it works the user can trigger it via ajax. Often I make test.php write a log to a file/DB then use ajax to ping a php page to read the last 5 lines of the log every 9 seconds... &lt;script&gt; $(document).ready(function() { $("#responsecontainer").load("log-watcher.php"); var refreshId = setInterval(function() { $("#responsecontainer").load('log-watcher.php?randval='+ Math.random()); }, 9000); $.ajaxSetup({ cache: false }); }); &lt;/script&gt; http://www.brightcherry.co.uk/scribbles/2009/02/26/jquery-auto-refresh-div-every-x-seconds/
Well said. An often overlooked part of ZF is that it's not really a true framework - Yes, it can be used most excellently as a MVC framework, but for the first time you play with MVC, you want something that will force you to stick to best practises.
Clients.
Not sure how useful this is really... As a side note you can use the reflection classes to set methods and class vars to be public or otherwise. Though again I wouldn't really suggest doing this in production code for any reason. I've used it before when I wanted to unit test specific private methods (though even this is of dubious wisdom given the tests shouldn't know how the class works).
Oh, how cute, they're turning PHP into Perl? :P Jokes a side, imho, this feature would be really well complemented by a include_lib kind of function, let's say you're working on /project, on /project/index.php you write "include_lib('../lib'); then, all files on project/lib are included (ofc none of them could have any output or you'd be shooting yourself in the foot, those files should only be classes declaration). I'd be a happier person :P
Thanks to everyone for the help - I *think* I've got it now. Well, I've managed to build an autoloader that works with namespaces anyway. Really appreciate the tips!
if you have problems with the last ten percent, what does that say about the first 90%, failure to plan.
I'd hate to have to make that decision for you if you only have 15 days :) CakePHP can be real quick as it has a lot of things built in with it (User Auth, Routing, jQuery, loads of helpers etc), plus there are plugins at http://www.github.com/cakedc that can let you drop in a full user/ratings/categories/etc system
all these comments and hardly anyone has mentioned planning. how big is it, whats it suppsoed to look like, whos going to use it, how many will use it, whats it do, does anyone else do it, why is it better, whos going to look after what. this goes far beyond just "scope" You can all jump in and worry about graphics, or the last ten percent or documentation or frameworks or technologies (PHP, AJAX etc) or what clients think they want or you get the picture. None of these things mean shit unless you start planning. Think about a painter, 90% of his job is prep before he paints. So should your job be the same. 90% of it should be planning, planning for success, planning for failure, planning for results, planning for management, planning for developers. planning scope and beyond. you need to manage a project and this is bigger than developers alone. tldr KNOW WHERE YOUR GOING BEFORE YOU START.
The only drawback is that it takes a long time (relatively speaking). Your unit tests should run as fast as possible, so that you run them as often as possible.
That is very easy to write on your own. Most of the time it's accomplished by autoloading though, so there wouldn't even be need for such a function.
There isn't a whole lot out there at the moment. I think Zend has the beginnings of a tutorial up, but as I said, ZF2 is not feature complete yet so there isn't much reference material floating around that I'm aware of.
write test cases for yourself... stop coding when they finally pass
I cannot recommend this book enough: http://www.amazon.com/Zend-Framework-1-8-Application-Development/dp/1847194222/ I've been using Zend for about 3 years now (by no means a long time) and most of what I've learned has been from that book. It is incredibly well written, and doesn't just read like the documentation, unlike some other Zend books I've read. It will show you how to do things according to best practices, and goes in depth on many areas of the framework. I wouldn't worry too much about Zend being your first framework, it was mine as well, and I've had no problems. I found this book to be the most helpful out of any Zend book I've read (I ended up buying about 3-4 of them).
Easiest way to describe Zend... it's a framework to build other frameworks off of.
I didn't know that one thanks.
Seriously. Does anyone have a good book or other resource on this? I make a database and end up scraping it several times before I have something that I finally say good enough.
Namespaces are great for libraries that will be used in multiple apps, but are practically useless for use within a single app. Namespaces help you avoid naming your classes something like myLibrary_product to avoid conflicts. When you need namespaces, they'll make sense.
Not familiar with gearman, but a common solution is caching the data.
I think it's ZF1 only. Some things may be a little outdated, but as a starting point it's quite good
Yo dawg, I heard you like encapsulation so we put some namespaces in php so you can encapsulate while you encapsulate. &lt;?php namespace Yo\Dawg; class PimpThis { public $pimped = "Yo dawg, I heard you like {s0}, so I put {s1} in your {s2} so you can {s3} while you {s4}!"; function pimpThis($whatHeard) { $pimped = $this-&gt;pimped; $pimpIt = function ($whatHeard) use ($pimped) { if(is_array($whatHeard) &amp;&amp; count($whatHeard) &gt; 0) { for($i = 0; $i &lt; count($whatHeard); $i++) { $pimped = str_replace("{s$i}", $whatHeard[$i], $pimped); } while($i &lt; 4) { ++$i; $pimped = str_replace("{s$i}", $whatHeard[0], $pimped); } } else { while($i &lt; 4) { ++$i; $pimped = str_replace("{s$i}", $whatHeard, $pimped); } } return $pimped; }; $this-&gt;pimped = $pimpIt($whatHeard); return true; } } use \Yo\Dawg\PimpThis; $encapsulation = new PimpThis(array('encasulation', 'encapsulation', 'encapsulation', 'encapsulate', 'encapsulate')); echo $encapsulation-&gt;pimped;
* There are tutorials on how to transition your application over script by script to Zend (i.e. I don't have to do a full rewrite, one of the things Joel Spolsky says never to do) * There are tutorials on how to do this for CI, but CI is not a true OOP language and has backwards compatibility for PHP 4, things that made me stay away from it * Zend is frequently listed as one of the top 3 framework in articles I consulted * I looked at Symfony2 but Zend has a far larger development community and I plan to hire freelance developers in the future to contribute to my applications git hub repository and a larger community means it will be easier to hire developers * I can learn ZF now and update to ZF 2 in the future so I can skip Symfony2 now * Zend was recommended to me by a very talented developer I met (as well Symfony) You can make a list of pros for every other framework, it's actually kind of sad how the PHP community can't rally around one framework like the Ruby or Python community (or even two or three), the community is fragmented and because of that at this time there doesn't feel like there's a 'best' out there. It makes me think that I will at some point have to transition away from PHP and I considered learning Python/Django but I've created too much stuff for my site in PHP and I'm just not going to rewrite it in another language. The comments in here however are making me consider just building something new in CI first just to learn the MVC...
Well, getting a real world php app (apart from Facebook itself...). Running and compiled is pretty awesome. There are some pretty cool devs under cake atm. Regarding stats... Well I'd expect, this would blow normal php out of the water, but numbers are never a bad thing. 
Would this book still be applicable even if I'm using zf 1.11?
I see, well sorry I misunderstood your goal -- it seems you're the author of the code? I thought you were a user, and were looking for a "hey should I use this for profiling?" type answer. There's certainly value in non-xdebug profiling. Now, though, it seems you'd like a _code review_....does that sound more like what you'd like? If so, I wouldn't mind looking the code over this evening.
You can find W.J. Gilmore's book (Easy PHP Websites with the Zend Framework) in PDF format alongside all of the files for the example project here on his website: http://www.wjgilmore.com/books/read/easy_php_websites_with_the_zend_framework I was personally recommended this book by a very knowledgeable fellow, and bought it myself.
Getting Started
The quickstart guide on the zf page is pretty handy and what I started with (althought that was around version 1.6 or so)
This is where I'm starting: http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/
On node.js a service can automaticly restart itself if connection drops 
From a superficial glance at reddits comments you can see they only render so many levels deep at once then utilize Ajax for the rest. I'm guessing that it's intentional for loading comments efficiently. 
Have you looked in https://github.com/reddit/reddit/wiki? I know they've left some things out but its worth a look.
I'd like to do the same, let me know if you find anything interesting.
Yeah I noticed that as well. Even still they render several levels before the cut off. Even with the cut off the way I am imagining it it would take a pretty heavy approach.
Hi there! I think it depends largely on what database model you're using, but I'll assume SQL-like. You'll obviously need a table, and in the table, you'll store comments. Since you also have something to which the comments will be tied, you'll need a separate table for that (I will assume you've already got that set up). Your comments table will have the following fields, in my ideal solution: * comment ID * parent article ID * parent comment ID * body * user that made the comment (either ID or name, your choice) * time comment was made * upboats The super-important pieces are, obviously, the first three fields. For every comment, you'll generate a new ID (most SQL implementations let you do this automatically). You'll also assign a parent article to the comment, probably best to use the article on which the user is commenting (so my comment, for example, would have parent ID p58r0). Finally, if the comment is a "reply" to another comment, you'll assign the parent comment ID, which will be another comment's ID number. For example, if I were to reply to 0x18's comment on this article, my parent comment ID would be c3mn3ao. With this information, you should be able to send all relevant data to the frontend, and the frontend can properly arrange and format the comments. Of course, your database call will look something like select * from comments where article_id = &lt;the article ID you want&gt; I'm not sure if there's a better way to do this. If there is, I apologize for my insolence. If you're using a NoSQL implementation, then good for you, and I may have to write another brief tutorial for you :) EDIT: If you only wanted to show X levels of depth, you could add another field to your database like `comment_depth` that you can use to limit your query. It would wind up looking like select * from comments where article_id = &lt;the article ID&gt; and comment_depth &lt; 7 EDIT2: Now that I think about it, this post probably belongs in /r/mysql or similar. :)
&gt; I am having trouble coming up with a way to replicate it without some deep recursion or several database calls. Do it at write time, not each time you generate the page. You can find a great many examples of data structures that store hierarchies in a way that makes for lightning-fast reads.
I am using MySQL and I already have things setup as you described. The problem is getting the data from the query into a tree format. The solutions I have come up with seem very inefficient. Basically just brute forcing it and running through the list of comments and putting them into "buckets" based on the parent comment. Then putting those buckets in other buckets and keep going until I run out of comments in my array. 
I don't have any code yet it's all just theory. I was just hoping there was some SQLfu or special library I could use to generate a tree based on the table setup I have.
I'll have to put some thought into it, I can come up with a myriad of solutions, but they all seem to be ridiculously query or php heavy. That said, the original solution doesn't seem like it would take that long to execute, unless you were working with many thousands of comments. What's the average comment thread size you'd be looking at?
The [PHPUnit Manual](http://www.phpunit.de/manual/current/en/automating-tests.html) itself is a pretty awesome resource. It assumes zero prior knowledge of unit testing. This [blog post](http://blog.spooxe.com/blog1.php/2011/06/22/install-phpunit-via-pear-in-an-xampp) should guide you through installing PHPUnit on Windows with XAMPP
Tough to say at this point as I am still in heavy development and haven't released anything. I guess I should just build it the best I can now, then fix it later if I run into problems.
Ok, checked it out. Some thoughts: * You really need a decent [code-highlighting &amp; formatting system](http://www.codingthewheel.com/archives/syntax-highlighting-stackoverflow-google-prettify) on your page. * [I recognize that trace output from somewhere](http://moduler.pagodabox.com/index.php/trace/lastTrace), but I can't place it... * [Code is pretty sloppy](https://bitbucket.org/sandeepcr529/moduler/src/fe14f098f16b/profiler.php) (btw is your page too? it has the same code...); formatting is all over the place (you _really_ need to adopt a coding standard of some sort), questionable logic (I see PHP code being written to file)... I don't think I'd use it, just looks thrown together -- lots and lots of bad practices -- or maybe it was a part of a much larger codebase, and you modified it down to what it is now? 
I had a problem with ODesk and a Designer once. I gave them a creative brief and several links to things that could be used for inspiration. Instead they took the inspiration and simply copied it into photoshop, moved it around in the window for 6 hours and ran some stock actions to make a title that wasn't even close to what I asked for in the brief. lol AVOID ODesk like it's the plague!!!!
Hey, [we covered this last week](http://www.reddit.com/r/PHP/comments/oufy9/to_blog_or_not_to_blog/)! Good luck!
I've had folks tell me it's a pain to install on Windows, but thanks to pear, it's copy and paste on Linux.
You want something like this: [preorder tree] (http://www.sitepoint.com/hierarchical-data-database-2/) 
Check out how lithium does it [here](https://github.com/UnionOfRAD/lithium/blob/master/security/Password.php) - there are excellent notes in the source code.
Thank you for taking time to check it.... &gt;You really need a decent code-highlighting &amp; formatting system on your page. I know. I will put one. &gt;Code is pretty sloppy I have to tell you that its just a first version...a proof of concept...? What you mention as php code being written to a file is the execution dump being written to multiple files....the actual php code files are untouched. The profiler stands between, or in other words, intercepts include calls, and present a patched version of a file to php. This patched version contains calls to profiler functions to log the execution data. The profiler writes the details of a function invocation as a php array to multiple files. Files names are modulus of the functions invocation order. This means if the number of files is configured as 50, the 55 th function called will be written to 55%50 , 5.php in the dump directory. By doing so the other wise huge dump file is split to a number of small files, which makes the trace viewer to quickly retrieve the execution details of a certain function invocation, Because only one file needs to be read instead of the whole dump. By further processing information such as total time spent in a function, number of times a function is called, number of duplicate calls, ie same function called with same arguments, etc ..can be produced. &gt;I recognize that trace output from somewhere I had posted this here in another thread http://www.reddit.com/r/PHP/comments/o7hmk/i_have_made_this_xdebug_like_profiler_in_pure_php/. Probably you have seen that one What do you think?
Overall, it's a cool idea and probably fun to code up. The problems that I see with generating PHP files like that are: * security - I don't see how you can avoid user input from getting into the generated file, at which point someone could easily own the server. * performance - For one, filesystem i/o is way slower than DB i/o. Two, filesystems don't usually scale as good as a DB can. * overkill - Have you ever used [sessions](http://www.php.net/manual/en/function.session-start.php)? Your project is almost a textbook example of where you could effectively use sessions. Even if you don't use sessions, you should probably use a DB, or if you want to stick with files, just save data to the files and don't generate PHP code. I would probably `json_encode()` a data object that contained the profiling metrics. I think ideally you would write just the data to the file, and not generate PHP to put into the file.
is there anything that doesnt require the installation of PEAR, what a pain in the ass. Install this before you can use that to find out the other doesnt work properly.
Download an ebook, or go buy a paper book, just remember that you won't be able to grep it. Then, starting with the first exercise in the book, write out the exercises as they appear in the text. Do this until you are capable of writing your own programs- although you'll definitely still need to use the documentation at php.net - it's a notoriously difficult language function syntax-wise. You're way ahead of the game by knowing HTML, js, and css- most people trying to learn PHP don't have these basics down and everything is much more difficult as a result. Good luck!
I am as inexperienced as you in unit testing. But I was able to integrate enhnacePHP with my existing framework with great ease. 
POST data is not retained between invocations of a script. I think your browser is probably resending the old post data. All browsers normaly asks if you want to resend POST data though.... You can use firefox extensions like httpfox or even the all powerful firebug extension , to monitor what post data is being sent to server every time a page is loaded.
I'm not really following your description, but I'll take a stab at it. The HTTP protocol has two verbs you're interested in, GET and POST. Without getting into a lot of detail, GET is for passing information via the URL, POST is for passing information to the server directly. GET has a size limit in how much can be passed, and there generally GET is for GETting stuff (meaning, operations that don't change data on the server). So when you have a form on a page, and you hit submit, the browser grabs all the input values from the form and sends it to the server. If you set the form method to GET, it'll send it via the URL, if you have the form method to POST, it'll send it directly. On the other side, the PHP environment will look at all of the GET variables and put them into the $_GET global variable, likewise with $_POST. The thing to understand here is that the values for the form isn't sent to the server unless you click on the submit button. Doing an F5 just refreshes the page, which means the server just requests the html page back, but it doesn't send anything to the server in the form of variables, etc. Just think about it in terms of GET and POST. When you hit F5, the server does a GET to grab the page with no URL variables. When you click on the submit button for the form, the browser does a GET or a POST depending on the method attribute for the form, and it sends down the variables in the form based upon the form itself. &lt;form action="page2call_into_on_submit.php" method="GET"&gt; &lt;input type="hidden" name="my_get_input" value="blah" /&gt; &lt;button type="submit"&gt;Push Me to Submit via GET!"&lt;/button&gt; &lt;/form&gt; &lt;form action="page2call_into_on_submit.php" method="POST"&gt; &lt;input type="hidden" name="my_post_input" value="blah" /&gt; &lt;button type="submit"&gt;Push Me to Submit via POST!"&lt;/button&gt; &lt;/form&gt; edit: The other thing to understand is that the PHP environment is recreated on every request. This means that just because you sent in variables in request 1 doesn't mean they're available in request 2. You have to get the browser to resend them every time, which is what hidden fields are for, and also the very problem cookies were originally created to solve.
when you send the entire query in, you have to escape the strings because the DB only sees 1 long query. When you prepare it, it means you send the query text with placeholders to the server first. Then you send the variables for the placeholders and ask the server to execute the query. You can re-use these by sending in new variables in a 2nd execution, etc. Since the query and the variables are separated, there's no danger of dangerous input causing the query to execute in a manner you didn't want it to.
&gt;What process of creating an account do you guys use A plain and simple registration form. Or offering them to login through OpenID, Facebook, Google, or a similar service. &gt;what fields do you require E-mail and password. Streamline the registration process and only ask for the essential information if your goal is to maximize registrations. Additional information can be collected at a later stage. &gt;how do you retrieve password etc. You don't. Passwords should be hashed (e.g. with bcrypt), not stored as plaintext. You might think that you're doing your users a favour by storing their passwords as plaintext to send them if they forget, but you're really not. You're just undermining security and compromising your users' credentials, not only putting their account on your site at risk, but their accounts on other sites as well. If they've forgotten their password, send them an email with a unique link with a limited lifetime to allow them to change it.
I would avoid learning actual unit testing practices from the PHPUnit Manual. Use it to learn the framework. Read [xUnit Test Patterns](http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054/ref=sr_1_1?ie=UTF8&amp;qid=1328092137&amp;sr=8-1) to get a good grasp of Unit Testing itself. PHPUnit is a member of the xUnit testing framework, so you'll know the fundamentals of unit testing before you start working a lot with PHPUnit.
Yeah, it's one of those things that once you read about it you have a slight twitch &gt;_O and then just live with it
PHPUnit was a piece of cake for me on both my Windows and Linux boxes with PEAR.
PEAR is pretty easy to install, but I agree, it is a pain. PHPUnit will work without PEAR though, you just have to set your include path properly.
Is that even easier??
If you'd like some free shit, check out the links in the sidebar of [/r/PHPhelp](/r/PHPhelp) !
It would be helpful if you provided a sample of the code setting your sessions. 
Any recommendations on good books? I've just finished reading the "A Book Apart" series to get caught up on mobile and responsive design and loved them. Any fun, interesting books on learning PHP?
I think the problem most people have is that XAMPP comes with a really old version pre-installed and it can be a fiddle to install the new one (which ends up being a separate package). Particularly when you are integrating with an IDE like netbeans. If you installed WAMP differently it might be simpler.
I do one-on-one mentoring *plus* provide you with my ebook PHP: From Beginner to Pro. I do this all for a token amount equivalent to 1 latte a week, just to make sure people are serious and not wasting my time. IF you're interested, email me. Relevant links on my bio: http://users.phpexperts.pro/tsmith/
ok I think this is the problem. When I refresh the page after I have submitted a form , Firefox asks if I want to resend the data and my only option is to resend or cancel. So I guess it is resending the post data again. Is there a way around this? Maybe doing a redirect back to the same page or something?
Thanks man, I'll take a look at this when I'm at work.
I love it! I've been using it for years. I have vhosts set up and configured my windows host file so going to http://somesite.dev routes to c:\xampp\htdocs\somesite\ just like a live web server. It fits my needs perfectly
That's quite clever actually. The depth and hierarchy field in particular could possibly save any comment tree building in PHP. But why advise against such a cache field? It's unlikely to be queried directly for normal operation, and then `FIND_IN_SET()` seems okay for rare use.
If you are using Ubuntu Server (not sure of version) the php.ini is ignored and the session directory (/tmp by default) is purged by a cron script every 30 to 60 minutes.
that was my first attempt at a solution, spent about an hour trying to install it on my dev machine, and my client's server doesn't have it (they don't even have imap!)
When I try to learn any new programming language, I come up with an idea for a site I want. Then I learn little by little what is involved with creating that site. That way you research little by little and you're doing something you enjoy in the process.
The way I design my applications... it would be next to impossible (not impossible - just improbable) that a hacker could gain a members password. I understand what you are saying... I don't happen to agree with it. I don't store any credit card information. If a client wants to host their own payment forms then I recommend that they hire someone else. I don't need to do that... most merchant gateways offer their own PCI Compliant hosted payment forms and API's. Just because you pass judgement on the way I do things by saying that "automatically means that you're less secure" doesn't make it so. I have been developing business applications for more than 1.5 decades. To date, I have never had a security breach in any of the solutions that I have developed... period. I am not saying that it couldn't happen... I am saying that it's unlikely. When you develop an application you have to weigh many things including Performance, User Friendliness, ROI, Security, Business Logic, Scalability, etc. Retrieving a password is at the top of the list of user friendliness. I have created applications where the password could only be regenerated and it created a mountain of support tickets for a number of reasons including email provider issues. I have chosen to look at it from a motivation standpoint... what does the hacker stand to gain from hacking the site other than mischief. I have determined that there is no real business reason for me to do it different than how I do it. I appreciate your passion about security... however, we just disagree on this issue.
Do you have anything else running on the server? Some apps like forums and other software packages will manually reset the values, and if every session is stored in the same directory (by default temp) those other apps will clean out all sessions. If this is the case, the solution is to create a different session directory for your app and configure it to use that.
cheers for the link i just grabbed the zip, if all you need to do is setup include paths then whats the big drama and the need for pear. or are the include paths throughout heaps of lines of code.
heh cheers, so why dont people just set_include_path, i find that strange, there must be some technical benefit to using pear surely.
Not exactly, think of a domain as a domain of knowledge (business rules), so in the example above, the User domain knows everything about users. A repository handles requests to the User domain and returns an Entity, so a repository interacts with your data layer, service objects to build up an Entity. Basically the methods in a repo align with the action provided by a Business Analyst. An Entity can also contain sub-entities (i.e. Domain_User_Entity_Profile). Think of an Order Entity, it would contain a collection of Product Entities. The Order Entity could also contain a Customer Entity. You can read [Domain-Driven Design and MVC Architectures](http://blog.fedecarg.com/2009/03/11/domain-driven-design-and-mvc-architectures/) for more ideas--personally I don't like the implementation....but that's just me. I just wrote this on the fly to give you ideas: class Domain_User_Entity { private $_repositories; protected $_id; protected $_firstName; protected $_lastName; protected $_profile; public function __construct(array $options = null) { $this-&gt;_repositories = array(); if(is_array($options)) { $this-&gt;setOptions($options); } } // Setters/Getters public function setId($id) {} public function getId() {} public function setProfile($userProfile) { if($userProfile instanceOf Domain_User_Entity_Profile) { $this-&gt;_profile = $userProfile; } elseif(is_array($userProfile)) { $this-&gt;_profile = new Domain_User_Entity_Profile($userProfile); } else { barf exception; } return $this; } public function getProfile() { if(!$this-&gt;_profile) { $userProfileRepo = $this-&gt;getRepository('User_Profile'); $userProfile = $userProfileRepo-&gt;findByUserId($this-&gt;getUserId()); if($userProfile) { $this-&gt;setUserProfile($userProfile); } } return $this-&gt;_userProfile; } public function resetPassword($verifyPassword, $newPassword) { return $this-&gt;getRepository()-&gt;resetPassword($this, $verifyPassword, $newPassword); } public function getRepository($name) { if(!array_key_exists($name, $this-&gt;_repositories)) { $repository = Domain_Service::getRepository($name); if(!$repository) { // barf exception } $this-&gt;_repositories[$name] = $repository; } return $this-&gt;_repositories[$name] } }
Naw, all my software has been sold.
Run a `phpinfo()` and make sure your settings are actually applied.
Reason for switching? Pros/cons? Sounds interesting.
Per the manual: &gt; Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. In your case, you might be doing something like this: $user = getUser($escapePostVariable['id']); if ($user-&gt;isAdmin) { $admin = true; } then later: if ($admin == true) { } Now, in this case, you go "well, if they are not an admin, so $admin isn't defined, it won't be true. We're fine. Except, with register_globals, someone could just add: `admin=1` to your query string and suddenly they are an admin. In this case, having an undefined variable is disastrous. You should always instantiate your variables with a sane value, in this case, setting it to false at the top of the script, or having an else means they are definitely **not** an admin unless they *explicitly* are. $admin = false; $user = getUser($escapePostVariable['id']); if ($user-&gt;isAdmin) { $admin = true; } or: if ($user-&gt;isAdmin) { $admin = true; } else { $admin = false; } I prefer the top version, finding it more declarative, and no need to hunt it down as a default (e.g. the default comes first, then you switch it, not if it's not being switched, set the default.) **In either case** the passed in GET variable gets overwritten.
No. I think it shows request served per second or something like that, so higher is better :) As you can see it is always faster (apart from the hello world case on IIS)
&gt; However, you can simply turn PHP Notice Errors off by using error_reporting(0) and the application works perfectly. You are using a variable that isn't defined yet and you think the application is working perfectly? What you have is a contrived example! This is what really happens: $admin = ($user == 'bob'); // Bob is an admin if ($admn == true) do_something(); // If user is an admin, do something Did you catch the error here? $admn is a typo. With error_reporting() set to zero, PHP doesn't complain and your program appears to "work" but is incorrect. &gt; Why can't you just create it on the fly inside the if statement? I feel like this is the easy, no-brainer way to do it, but apparently PHP discourages this practice. Why? Because you can just as easily create a typo on the fly. The question is, why are you doing comparisons against variables that don't exist? That doesn't really make sense. I have code that turns notices and warnings into exceptions that completely halts the execution of the script. This minimizes the chances of serious errors going undetected. Every variable has to be explicitly created (through assignment or as a parameter). 
Here is how I learned about unit testing. I went from not knowing anything about test driven development and unit testing to being in a position where I can't imagine ever not developing this way. It's absolutely amazing the amount of confidence a set of well written unit tests can give you. 1. Watch [Lecture 24: eXtreme Programming by Richard Buckland](http://youtu.be/XP4o0ArkP4s). This guy is an amazing teacher. **If this is the only link you click in this comment, make it this one.** 2. [The Clean Code Talks -- Unit Testing](http://youtu.be/wEhu57pih5w) a Google Tech Talk, gives some great insights and is definitely worth watching. 3. The SimpleTest tutorial and documentation is great. I recommend you [read through the tutorial from start to finish.](http://www.simpletest.org/en/first_test_tutorial.html) It will allow you to really understand how you go about writing tests and the basic work-flow. 4. Get [phpunit](https://github.com/sebastianbergmann/phpunit/). While the tutorial for SimpleTest is good for a beginner, there were times where SimpleTest would just up and shit itself. Just save yourself the hassle and use phpunit, it's stability is probably the reason why it's the "defacto" framework for PHP. 5. Keep the [phpunit manual](http://www.phpunit.de/manual/current/en/) open while you write tests (at least while you are still learning). Be sure to give the entire manual a *very quick* skim reading before you make a start. This is so you know what it is capable of, for example, I spent the first few days writing tests where I would create basic objects for a set of tests over and over again in each test function. Turns out that's exactly what **setUp()** is used for, if I had skimmed through that part before I started I would have known that. Good Luck.
&gt; My question is what's the point? Notices are potential errors. As for me I turn all notices into errors, so the script stops immediately even if a notice occurs. Helps me to keep my code clean and prevent some nasty bugs.
&gt; PHP doesn't complain and your program appears to "work" but is incorrect. It would only "appear" to work if you missed the typo in the source code. When executing the application inside a web browser, it would be quite obvious that it isn't working when bob's admin page isn't showing up. &gt; The question is, why are you doing comparisons against variables that don't exist? That doesn't really make sense. I can't think of any specific examples off hand, but I have run across instances where the variable may have been initialized (like if it is initialized inside an if statement that fails, or if it's inside a $_GET variable that isn't there.
APC is built into 5.4 though, right? If so the times are worse in most cases then 5.3 with APC enabled. If not, then why are those values not filled in? 
&gt; APC should join the party soon, not sure yet if it is ready yet. We will run compat tests first. Seems it was in some way (yet) not available for the tests. Even if APC was built-in you can still disable/enable it. Looking at the comment above - there will be tests coming.
Yes, but only if you want to write "Hello World" in IIS.
I'm not suggesting to hide them all. It was more of a philosophical question about why PHP discourages it. I asked the same question on Stack Overflow. They acted like I committed programming blasphemy. I think it is really cool that PHP will automatically declare a variable on the fly and assign it to NULL if it does not exist already. For the record, I have all error messages turned on for development purposes, but I turn them off for testing and production.
Are you able to perhaps post the LUA file and the PHP output to something like pastie.org. I can't really get my head around the output you've pasted there.
The tests were only done on Windows (on a server in the microsoft.com domain), if that's what you mean. As for whether the performance gains are only on Windows, I can't say from this data, but I highly doubt it.
So now that you've done TDD for awhile. Do you find your development time the same as it was before you were doing TDD? I ask because I've tried TDD a few times and it takes me twice is as long because now I have to write all these tests. I see great value in it, but can't really understand or absorb the additional time commitment. 
If your client tells you "I see dead people" a lot more will make sense.
Thanks for your message. I've been using error_reporting(E_ALL) for development purposes but changing it to error_reporting(0) for testing and production. CodeIgniter (the framework I use) has the following code inside the index.php file to determine what error messages to show. define('ENVIRONMENT', 'development'); if (defined('ENVIRONMENT')) { switch (ENVIRONMENT) { case 'development': error_reporting(E_ALL); break; case 'testing': case 'production': error_reporting(0); break; default: exit('The application environment is not set correctly.'); } } So, when developing, all error messages are shown, but for testing and production, all error messages are turned off.
Thanks sir for your informative comment. Have an upvote. &gt; In production, you should capture the errors and log them (I even send myself an email) and display a friendly error message to your end users. How do you capture errors and gracefully handle errors? A try / catch statement?
For capturing errors, you can use the [set_error_handler](http://php.net/manual/en/function.set-error-handler.php) function. But what I do is convert errors into exceptions using an error handler and the built in [ErrorException](http://php.net/manual/en/class.errorexception.php) class. Then errors can be handled with try/catch statements and include a full stack trace. Here's the code to that: set_error_handler('errorToExceptionHandler'); function errorToExceptionHandler($errNo, $errStr, $errFile, $errLine, $errContext) { if (error_reporting() == 0) return; throw new ErrorException($errStr, 0, $errNo, $errFile, $errLine); } I catch all exceptions with a try/catch and that handler logs the error/exception and puts up a friendly error page. 
I'm interested in why as well, I use Eclipse and find it does everything I need. It does have a little tendency to get confused with possible multiple class parents though.
I think a lot of the performance gains are Windows-specific: I gather 5.4 builds now use profile guided optimisation by default, whereas 5.3 doesn't even support PGO as an option. My own numbers on Linux showed a slight improvement over 5.3 as over 5.4.0RC1 (haven't had time to re-benchmark since), but we're talking single digit percentage improvements, not the big double digit gains seen in the Windows benchmarks.
any plugins you'd recommend getting with sublime text 2? for coding php and zend?
Thanks, that's helpful. PHPStorm does feel more responsive than Eclipse, and PyCharm is really nice when working with Django, but I like having it all in one - with Eclipse I can switch perspectives and Pydev doesn't do too bad with Python/Django, and Aptana or PDT both do the same things as PHPStorm. Do you find that keyboard shortcuts and autocompletions are more intuitive or helpful in PHPStorm or Sublime Text 2? I've seen YouTube videos of people demoing in TextMate and they seem really efficient, which has inspired me to look into some alternatives to Eclipse, or at least into using Eclipse better.
I have written PHP in Eclipse, Netbeans, Vim, ActiveState Komodo, and PHPStorm. PHPStorm is by far my favorite for full blown development. It has the best integrated debugger I have used, a full suite of intuitive features, and most importantly - it's fast. PHPStorm can load and scan thousands of files in record time, and it doesn't lock up the IDE while doing so. Honestly, I think it's worlds ahead of the competition right now. Komodo is my second favorite, but it falls a little short in some areas, particularly speed. 
I would say autocompletions are better in PHPStorm but not bad in Sublime Text 2. Keyboard shortcuts are about the same, and they are both 100% customizable so if you don't like them you can easily change them.
I'd never done unit testing before last year and didn't know where to start. Luckily Sebastian Bergmann was giving talks in the area and our boss got him to come to the office for a days consultation. He travels a lot, so keep an eye out for a course. By far the easiest way to learn! To add to what others have said, I found the PHPUnit skeleton /scaffolding a handy tool. Write a class, generate a test file for it using this, then just tweak the setUp / tearDown and write the tests. Having the skeleton test there alone makes it fairly clear. (Also Netbeans will do this for you on a context menu once you have PHPUnit up and running.)
you need to look at nleft or nlevel trees. in addition to the table as described above you would have an nlevel, nleft and nright fields. These three fields allow you to have an endless parent/child structure throughout your table, you could literally go 50 levels deep if you so wanted to, its not practical but its possible. From experience, even four levels deep can be problematic. You would also be best having a category value as well so you can categorise your blog article. You would create the categories with the same parent/child structure. When you call your blog, a simple select * from table where id = 1 is not enough As you are also talking about comments, these need to be added to a table with a parent/child structure as well. So now you have three parent/child tables using nlevel, nleft and nright. How do you get it all together. using joins. inner join, left join, outer joins. read up on them. select * from table1, table2, table3 inner join table1.cat_id = table2.catid inner join table1.comment_id = table3.comment_id WHERE now in your where statement you feed in user search terms, WHERE keywords = 'keyword' and username = 'name' You need to do some research on nlevel because you will need a function to write the nlevel, nleft and nright into the table to create a parent/child structure to read from. to get your category id above you need to read from the nleft and nright before you can feed the id into the select query. Hope that makes sense, it seems complicated at first, but once you understand the underlying principles youll pick it up pretty quickly. TLDR nlevel trees for parent/child structures are what you are looking at. using nleft and nright values to collate groups of parent/child trees. 
This happens because the page you are when you press F5 was fetched by sending a post request. To work around this you can redirect user to a different url after the session is setup. So the new page is fetched using a regular GET, which will get refreshed without the above issue.
yea..the php version I need was not available from wamp at the time I needed it. 
Actually I think you're right. For most runs, I'll need to get the domain portion to do the DNS check, so I figured I'd avoid running the filter_var call if it failed my simple @ check.
Looks good. You may want to use DI for the model, so pass in the database connection (there was a nice post about this a few days ago on /r/php) Also take a look at how Zend Framework uses view helpers and controller action helpers, they are neat. Have you seen how Doctrine 2 does the 'model' layer? Another thing to investigate :) In summary, the code looks nice, there was nothing surprising in the way you are approaching MVC. Coming from ZF it all looked pretty normal :)
Thanks alot. I am going to look into those. I was unsure if I was headed in the correct direction, so I posted here to verify / get some help.
I am experimenting with a couple different ways to do the dbModel. I am aware there is no "protection" in it. I am just trying to get functionality right now. About the indexModel.php : I was following a tutorial and it was sort of mocking a database connection. I completely forgot about it. Thanks for pointing it out.
I had never heard about PHPStorm before reading this post. I just tried it and I think it's a big bloat-fest of poorly written software. It wouldn't recognize my mounted network drives, where our source code resides. When trying to get thru the "project setup wizard" without specifying the project dir, I accidentally instructed the program to use C:\ (it wouldn't allow me to select nothing). After that it began scanning my entire C drive while showing a progress bar and a cancel button that didn't do anything. When I instead tried pressing escape the progress bar window vanished but the scan didn't stop, giving me an unresponsive window and a half-frozen environment. You could say I should have given it more time or that I didn't know what I was doing. But I don't have patience with programs that can't even do these super simple tasks right, so I resorted to killing it with taskman and uninstalled it.
You generally need a mixture of PHP and JS for a Facebook app, so there won't be a magic-bullet PHP framework. I'd also be surprised if any framework could keep up with the rate that Facebook breaks their own features. Sorry I can't be more helpful.
On Windows. Is there a linux benchmark?
any comments ) ??
Holy cow! I thought I was actually grasping the whole concept. You have proved me wrong. It is hard to teach myself these things, as all tutorials and demonstrations are written by different people. Different people have different programming styles. If you could suggest some readings(that break it down Barney style) that would be amazing! Thanks for the constructive criticism anyhow.
PHPstorm doesn't support editing files on network drives, they scan and read every file for autocomplete and the network latency makes it too slow apparently.
Anyone have a recommendation for an IDE with a decent vim emulation mode? I'm gonna check out this PHPStorm, I see it's got a [plugin](http://plugins.intellij.net/plugin/?webide&amp;id=164).
I got the book and I must say it is really helping me out and I'm beginning to see clearly some of the parts that confused me about zf.
Weird that there was an option for doing exactly that, then. &amp;#3232;\_&amp;#3232;
I think that option copies all the files to a local directory. Sorry for the confusion if that's what you were doing. EDIT to add link: http://devnet.jetbrains.net/docs/DOC-1253 'Project files/SDK installation on a network drive. This may work for you for some time, but is officially unsupported. Move them to your local drives or use "New project from existing files" wizard to create a local copy and set up auto sync. Note that you should always open that local copy afterwards, not the original remote location.'
I don't quite get that either. I understand that there is a dangling pointer which could result in a segfault, but I'm not sure how this can be exploited.
I use XCode for Objective-C, and I used to write a lot of Java in eclipse, but it's been a while. I also use PHPStorm for JS, and lately I'm dabbling in HTML5 canvas. A really long time ago, I wrote C with vi and gdb.
This is how: http://php.net/manual/en/book.mailparse.php
You could use a pre-built framework that has components to handle this for you, like [eZ Components Mail class].(http://ezcomponents.org/docs/api/latest/introduction_Mail.html) Basically you set up a script that connects to your POP or IMAP email box every x minutes, finds any new messages, and inserts the data into your database. The eZc Mail class will handle making the connection, and parsing out the data. You'd just need to worry about importing the parsed out data into your database. I've been using this class for a few years to handle bounce-back automation. It does basically the same as above, but I just look for email bounces, parse out the reason, and update a database table. Note that you do not need to download or use ALL of the components in that package. There are a lot of them. Read the docs to figure out how to just use the Mail class. Good luck!
http://help.github.com/ This is assuming that you are using some IDE or advanced editor which integrates the functionality of GIT. Or that you are able to set up and use command line tools. Though , if the project is not opensource , you might want to cut out the github and instead access your local repositories directly.
I prefer mercurial. Here is a tutorial http://hginit.com/ http://mercurial.selenic.com/wiki/Download http://mercurial.selenic.com/wiki/PublishingRepositories#hgweb , Describes how to setup so that every one can synchronize with everyone else. I think using the cmd line interface will be good for now as it will help you to understand its working. 
The least expensive one I've found is email. Example usage: "hey, i'm working on the include.inc file today, don't fuck with it till I say so." But seriously, you need to provide some details about your working environment; do you work in the same office? Do you have a LAN? Are you using a remote or local server? Ever heard of SSH? GitHub? Edit: Fuck'n downvotes? WTF?
Someone has a clear and complete benchmark? This is just unusable
I promise I'm not trying to be obtuse, I really don't understand how you can disagree with me. From the OP &gt; I run a drupal6 website modest traffic, gets about 80.000 pageviews per day. The point of contention with Fosnez was that medium size sites in the ~80k/day range don't use frameworks. I listed a couple medium size sites that use the framework he said aren't used. The point of this thread is to establish possible causes for slowdowns for the OP's site, and Fosnez flatly stated the problem is using a framework. Clearly that isn't definitively true because there are examples of more popular sites using the very frameworks he's talking about and not having the same problems. Again to restate, something being less efficient doesn't mean it is the cause of slowdown issues. Maybe using a framework adds an extra 5ms to a request, but the database is adding 100ms. While the framework is slowing it down, it isn't the problem, fixing that wouldn't necessarily solve the speed issue. You have to evaluate what is causing the problem because stating what the problem is, and Fosnez didn't do that. 
Here is an article that compares the advantages and disadvantages of the two big version control systems (SVN/Git) [http://looble.org/git-vs-svn-which-is-better/](http://looble.org/git-vs-svn-which-is-better/)
&gt; if the project is not opensource , you might want to cut out the github Or use [bitbucket](http://www.bitbucket.org) which supports mecurial and git and allows private repos for free.
We're currently using dropbox + svn, seems to be working ok so far.
Just wondered if I could guess from the terminal commands
One of the many features of PHPStorm that I love is the built in code formatter. I have it mapped to command-option-L. Makes it really simple to set my preferred coding standard and even simpler to automatically reformat any code to that standard. Also, the source control integration is awesome. I frequently edit code in the diff window, which gives me realtime diff'ing against the previous version as I type. The source control panel makes it really easy to see files that were added/changed/deleted. If you debug CSS using Firebug, you'll probably love the CSS-X-Fire plugin, which lets you import your Firebug changes directly into your CSS source files via PHPStorm. Not PHP obviously, but frequently a related task in my experience. Luckily PHPStorm also has awesome support for HTML/CSS/JS. The syntax highlighting is also better than anything I've seen elsewhere. In most cases it will properly color mixed code, for example it'll color an HTML string inside of a PHP variable, where any other editor would just see it as a plain PHP text string. This works for HTML, SQL, JS, CSS... (more?) ... contained within other code. It also encourages you to be productive: In PHPStorm, click the Help menu, and then Productivity Guide. It's a handy tool that tracks how frequently you use the various coding shortcuts that PHPStorm offers, with the convenient side-effect of showing you what many of those shortcuts are. I looked at a lot of editors and IDEs, and this is my favorite. But I'm always looking for something better. :)
Before you get too invested, I would recommend you use the [PDO](http://www.php.net/manual/en/pdo.connections.php). It is safer and cleaner. It also will allow you to switch DBs if that should happen in the future in a relatively code agnostic way. It is really similar to how the older, deprecated mysql functions you are using are used. It is really great in closing the connection all you do is set your database connection object to null. If you are connecting to the same DB multiple times throughout the script, why not connect once, and reuse that same connection to perform multiple statements? 
I could never get uploadify to work reliably so I switched to plupload &gt;&gt; http://www.plupload.com/
Just FYI... Notepad++ adds ^M characters to files. I switched to Geany.
I'll definitely look into bitbucket. That's the first I've head of it.
I'm not exactly sure what that is (sorry, still new). I assume that's going to be something that could bite me later?
Any IDE with autocomplete for php and jslint for javascript will do. Support for phpmd, xdebug and phpunit would be recommended too. The features on JS side will be quite limited , if you are able to write proper, advanced and functionally oriented code in javascript.
No, it does not. If you know that, you need to use UNIX line feed characters.
He's talking about [CRLF line endings](http://en.wikipedia.org/wiki/Newline). It's not necessarily a bad thing, but if say you'r working on windows, and you mate is working on linux (or a UNIX like OS), then you may end up mixing up two different types of line endings. Windows uses CRLF line endings (which includes a carriage return, shown as a ^M) and linux uses standard line feeds. It is possible set Notepad++ to use Unix-type line endings where it will just add a single line feed at the end. Some version control will also handle this for you, so that when you commit a change it will strip CRLF and replace them with single line feeds, or vice versa.
I was in your exact position 8 months ago. We had a spare computer in the office. I installed ubuntu on it and then installed apache/mysql/svn etc. It was setup with a fixed IP address so our settings in netbeans / winscp weren't screwed up with DHCP. I also had to move all my localhost databases to this computer when I started working with someone. Teaching myself vi so I could ssh in the ubuntu box to setup svn repos was fun.
This is awesome, thank you. I'll read through this for sure.
Someone else mentioned mercurial, too. I'll look into it. Thank you for posting the links, it helps quite a bit. 
does anyone use http://www.phpedit.com/en ??
Create a file... put some code in it... upload it to your server. SSH into your server and open the file in VI.
I kept having problems with it locking up constantly and I have a core i7 2600 machine with 12GB Ram.
I've never had it lock up on me, even on my piece of shit core duo machine with 2 GB RAM at work. You did something wrong or were using a bad version.
Methinks OP might not understand OOP syntax.
A code repository is an absolute must. Mercurial seems to be the easier of the two to setup/use, but git seems to be becoming the standard because of it's extreme flexibility.
This makes me think /r/lolphp isn't enough. We need /r/wtfphp
Adding to this vague reply, you'll want to 1. Forward the mail to a Windows/Linux server running PHP, and pipe the message to a PHP script. 2. Your PHP script will use mailparse to parse the message into separate parts. 3. Use the "get_part_data" functions to identify attachments by content-type. 4. Once you find attachments, use the substr trick in the "msg_extract_part" comments to get just the base64 encoded attachment data. 5. Decode the base64 encoded attachment data, and save the resulting binary data to a file. This ought to get you going in the right direction.
PHP Storm
I'm not quite sure how to do this in PHP but in Java there is [Apache Poi](http://poi.apache.org/). Can you instantiate a Java VM to parse these files?
Ideally I'd like to do the parsing natively, but if there are no other options I'll take what I can get :p
.inc? O_o
when you end a php file with .inc it prevents that file from being sent as plain text to the browser. I use it as a way to distinguish between files that I intend to be seen by the browser and ones that will always be "included" into other files.
Then you've got a very specifically configured server. .inc files /are/ sent in plaintext to the browser unless you specifically set apache to parse them as php. I made the comment because it's been literally seven years since I've seen someone using .inc files. The only way I can really make sense of your comment is that you're calling files file.inc.php.
Last time I did this it was something like this (about 5 years ago): 1. Put pipe to /etc/aliases: mmm:|/opt/mms/mms.php 2. Use mailparse to parse attachments (no need for substr tricks): \#!/usr/bin/php &lt;?php $data = file_get_contents("php://stdin"); $mail = mailparse_msg_create(); mailparse_msg_parse($mail, $data); $stru = mailparse_msg_get_structure($mail); $from = false; $txts = array(); $imgs = array(); foreach($stru as $st) { $part = mailparse_msg_get_part($mail, $st); $info = mailparse_msg_get_part_data($part); if (array_key_exists("headers", $info)) { if (array_key_exists("from", $info["headers"])) { $from = $info["headers"]["from"]; } if (array_key_exists("content-type", $info["headers"])) { $type = $info["headers"]["content-type"]; if (strstr($type, "text/") == $type) { ob_start(); mailparse_msg_extract_part($part, $data); $txts[] = array("content-type" =&gt; $type, "content" =&gt; ob_get_clean()); } else if (strstr($type, "image/") == $type) { ob_start(); mailparse_msg_extract_part($part, $data); $imgs[] = array("content-type" =&gt; $type, "content" =&gt; ob_get_clean()); } } } } mailparse_msg_free($mail); 
If you can make something segfault, you can usually leverage that to overwrite the processes internal memory, as well. Depending on if the memory in question is on the heap or the stack, it means you can either alter the processes behavior significantly, or make it execute arbitrary code (ie: [Shellcode](http://en.wikipedia.org/wiki/Shellcode)), or both.
I found this, looks simple enough. http://www.phplivedocx.org/ It's recommended on StackOverflow as well.
No need to decode anything. At least I didn't have.
ive not noticed this, i use notepad++ regulary. i do notice it adds /r/n sometimes.
They usually release the MSI at the same time, but in this case they were rushing the Windows team to get the release done, so I think the MSI packaging was left out. *Update:* I reported this to the right people. It should be resolved presently.
It was initially marked bogus. A short while ago, I suggested we change the "bogus" status to "not a bug", and update existing bogus bugs with the new status. The reason for this was to represent the true intention of the bogus status, which is simply to say "This isn't a problem. It's expected behaviour". If you're asking about why the bug was marked bogus in the first place, I think I understand kalle's reasoning. It's not so much an error in the code, as it is an easy pitfall in the syntax of the function. The suggestion that a change in behavior be made wasn't yet put forward. However, changing the behavior as suggested would be a major BC-breaker. It fundamentally changes the behavior of a function which many will have used in their code already. Throwing an exception is a reasonable way to behave if autoloading fails.
And since i'm talking about the default spl_autoload functionality, [this one needs some explanation too](https://bugs.php.net/bug.php?id=49625). I find it a bit frustrating that when I want to utilize some cool stuff in PHP, such as spl_autoload with namespaces, there are some confusing problems that the devs won't fix for what seems to be mixed reasons. It's not as if these issues would take too much to fix; patches and suggestions for alternative solutions have already been provided. To top it off these issues have been around for a long time to rub some additional salt in the wound. I'd like to raise some awareness to these issues so that the devs can take notice and introduce a fix for them in a future 5.4 release (to my knowledge they haven't put those fixes in 5.4). Edit: I wrote this one more in frustration than the original topic since I was working with spl_autoload() so please excuse the angry mood of the text. I'll keep it here to encourage discussion on this if anyone is interested.
The issue i'm having with this is that i'm using spl_autoload to handle all of the operations of loading a class from the filesystem when I need to instantiate a class and it isn't loaded yet. When I am instantiating a class that doesn't exist an error should be thrown. I quite agree. But when I am trying to check to see if a class exists to prevent that same error I shouldn't be triggering it. I shouldn't have to duplicate the work of spl_autoload to check if a class exists on the filesystem if I want to avoid that error. It would be similar to if calling isset() on a variable that doesn't exist would still trigger a warning or if calling file_exists() on a file that doesn't exist would throw an error. I'm trying to prevent the error, so why is it still happening? Edit: I also appreciate you taking your time to respond before I get too far into this debate. :)
Hey thanks a lot, the installers are up!
I appreciate your input on the bug. Here's hoping something works out in the future!
Could someone explain what this does that can't be done just by creating an array or object? Could even just create a class that stores data and offers functions to retrieve values.. I'm missing the point, I think.
I'm not even there yet, I tend to read a bit and play around with what I learned by creating small projects. My goal is to build a small cms using zend framework
Hi..you have to give some example where using this would be an advantage. Problem with the magic approach is that it is hard to debug when something goes wrong. Have you checked a new thing called 'traits' (http://in2.php.net/manual/en/language.oop5.traits.php) that is being introduced in php 5.4? Is that behavior you trying to achieve here? 
Bwahaha
Wow, the full code. Appreciated. I'll test it out tomorrow and report back if I find anything out of ordinary/fixes.
I, personally, take the "Finding Forrester" approach to writing code. &gt;No thinking - that comes later. You must write your first draft with your heart. You rewrite with your head. The first key to writing is... to write, not to think! When I get started on a project, I just write. I write until, in theory, I have a working result that should do what it's supposed to. I don't even think about what problems are likely to crop up, in terms of errors and exception handling. After the "first draft", I run the code, fixing any obvious syntax errors. Once I get something that runs without error, I rewrite the whole damned thing in whatever design format I want (MVC, library, etc). But, to answer the question itself, I'd say that you shouldn't worry too much about making your code work as you write it. Refresh frequently when you're debugging an issue, if it's a matter of bruteforcing it, but when writing large sections of code, don't even care whether it runs.
http://postmarkapp.com/inbound
That's strange. I honestly haven't done any configuration to it, I just installed it through the package manager and it worked. &amp;#3232;\_&amp;#3232;
Netbeans is good. 
That would've been vim. 
&gt; This is why implementation of this size don't use frameworks like drupal. Lets break apart this sentence so we can see where we are disagreeing. &gt; This The problem of slow load times &gt; is why The reason &gt; implementation of this size Presumably he is talking about the OP stated size of 80k/day which you seem to claim is made up but is clearly stated at the top of the page. "80.000 pageviews per day" &gt; don't use frameworks like drupal Don't use frameworks like drupal. Putting it together: Problems of slow load times is the reason why sites of 80k/day don't use frameworks like drupal. Maybe you're confused because you're only looking at the post I responded to, which was already a nested conversation where previous comments were made. So I said frameworks are slower than plain PHP. I showed how he did indeed state that frameworks aren't reasonable for 80k/day sites, and I quoted the OP talking about that 80k figure you pretend doesn't exist. How about you use some supporting facts instead of being butt hurt? 
Thanks! well done. next time I will use a better medium. I just hope that the moral of the story isn't lost on my terrible reddit formatting
This is an actual skype conversation from earlier today (edited the names out). please take this knowledge and run with it friends. btw, we are still running php 4.2 [colleague] $testArray = array("index"=&gt;"value"); if(isset($testArray["index"]["crap"]) &amp;&amp; !empty($testArray["index"]["crap"])) { echo "true [{$testArray["index"]["crap"]}]\n"; } else { echo "false"; } [colleague] returns true [me] php&gt; $test = "value"; php&gt; echo $test["crap"]; v [me] hehe because value is an array php&gt; echo (int)"crap"; 0 php&gt; echo $test[(string)"crap"]; v [me] haha [me] php&gt; $test = array("index"=&gt;"value"); php&gt; echo array_key_exists("crap", $test); [me] there you go [me] array_key_exists is ftw
`git` was originally invented for mega-projects. For small teams you might want to look into [http://fossil-scm.org/](http://fossil-scm.org/). That's easy to set up (a single binary for Windows too), and provides a slim web GUI, and much much easier commandline interaction, albeit there isn't much documentation or IDE integration. 
I must disagree. I've been in charge of running the upgrade at my job from 5.2 -&gt; 5.3, and I've found that other than a bunch of [Notice] and [Warning] messages, there is nothing in 5.3 that won't allow 5.2 code. Hell, we've still got pg_exec and pg_numfields (no underscore there; it's *that* old) in our codebase and 5.3 runs just fine.
Got around to watching those videos. Thank you for posting them. Really helped wrapping my head around why I was having so many issues w/ writing tests in PHP. Coming from a Java background TDD is relatively easy to approach because OOP is forced upon you. When I'm doing PHP dev, right now, I'm writing very top down with no OOP. I've been using PHP more like Perl. 
I've used it on both Mac and PC - since it's built in Java, it's a seamless experience between them (minor hotkey changes, but that's to be expected.)
[Best explanation I could find:](http://markmail.org/message/ex62whgfk6gtage5) &gt; It's actually very simple. Take variable $a which is a string ("foo"). Now it you do $a[0] that would produce first letter - "f". Now here's a tricky part - if you do $a['blah'] it would convert 'blah' to number, get 0 and return the same letter "f". &gt; Now what happens if you do $a[0][0]? Since $a[0] is "f", $a[0][0] should be first letter of "f" which is "f" again, right? **Only in 5.3 it did not work because of some deficiencies in implementation of string offsets. In 5.4 it was fixed.** &gt; Now the situation in the bug - what happens if we do $a['blah']['foobar']? As we noted before, it's the same as $a[0][0] and thus produces "f" in 5.4. In 5.3 it didn't work because of the above deficiency. That's it. [Relevant discussion](http://php.markmail.org/thread/yiujwve6zdw37tpv#query:+page:1+mid:yiujwve6zdw37tpv+state:results), [related post](http://markmail.org/message/mss7yz3hsfkzv6lu#query:+page:1+mid:ez2jnplgq2rj7fma+state:results), [bug report against 5.4](https://bugs.php.net/bug.php?id=60362), [and related](http://markmail.org/message/yiujwve6zdw37tpv?q=list:net%2Ephp%2Elists%2Einternals+string+offset&amp;page=2), [and related](http://markmail.org/message/u42omwjulej3r5wp?q=list:net%2Ephp%2Elists%2Einternals+string+offset#query:list%3Anet.php.lists.internals%20string%20offset+page:1+mid:qbdbcuhyhvpvse7u+state:results)... 
This. People need to learn how memory is managed in the languages they use. PHP takes a hand from C's arrays, which would work something like this char *foo = "foo bar"; printf("%c", foo[0]); printf("%c", foo[1]); printf("%c", foo[2]); results in "foo" being printed. Nearly the same exact idea is happening with this PHP code. **This Is How It Is Supposed To Work**. If you are writing code like: var $foo = "bar"; doSomethingWithBar($bar) $foo[$bar]; and `$bar` is not null, *then you are a bad programmer and need to learn not to overload operations on variable types that do not support the overloading you are trying to do.* Plain and simple.
No problem, glad it helped. For better or for worse I didn't have that problem when coming into PHP because the way I came into the language was basically "how do I do the stuff I already do but in PHP". So I've been only writing OO PHP code. This approach worked this time, but the downside is if I ever go learn a functional programming language later it's going to be extremely difficult to adjust.
If your application is properly structured, you can already be certain the same library will not be included more than once (and if that does happen, you treat it as a problem, and don't simply hide it). Using simply `include` or `require` looks cleaner, and while I'm not 100% certain about this claim, I've read it used to be faster than its `_once` counter-parts.
Netbeans can be very slow, especially over network drives for initial projects, and can hang, or seemingly hang while indexing. PHPStorm isn't amazingly better but it does seem to be faster at indexing than netbeans. Of course netbeans seems to do better than any eclipse alternative.
&gt; If your application is properly structured This seems really strange to me. Why jump through hoops to design your program not to include things twice when it's so easy to guard against? Nearly every modern language provides the equivalent of require_once, and in those that don't, there are [common patterns for achieving the same thing](http://en.wikipedia.org/wiki/Include_guard). I don't see why this is considered a design error when working in PHP, while it's just business as usual in every other environment. &gt; I've read it used to be faster than its _once counter-parts. It still is very slightly, as I understand it. But we're talking about the time that one hash lookup takes. So unless you're doing it in a tight loop, you aren't likely ever to see any effect.
Rasmus believes it is faster, though he writes some pretty bad php in the name of optimization. To him, speed appears to be more important than readability or structure. I do agree that if your code is structured right, no file which should be included only once will be included more than once.
I use require_once exclusively. It's good programming practice when you're not using autoloaders.
I can see plenty of situations where require_once is very useful. How would you fix the "problem" of two classes that require the same "utility" class? On some pages you might include one or the other or both classes, so both files need to include the utility class. It's not the job of the main class to do that.
I kinda agree with the sentiment here, however, I can't help but see an analogy like: *Guns shouldn't have safeties on them because if you use it right, you'll never need a safety.* The safeguards are never built for the typical cases - they're specifically built for fringe cases or to avoid accidents. I agree with the idea that you should know if your code is included multiple times though. Maybe throwing the warning *is* like a safety, in that it lets you know that something is probably wrong. -- I'm oddly reminded of: **"That kid... is BACK ... ON THE ESCALATOR AGAIN!"** [ TS and Brody argue for a bit about the kid getting maimed by said escalator] **"The parents should suffer that terrible ordeal to learn how to better manage their child!"** 
be a good guy thelerk and edit your submission so others can understand it :)
See the [speed comparison](http://blog.seeit.org/2010/06/php-the-include-include_once-performance-debate/) of include/require and the _once alternatives. If you don't know whether a class has already been included, then use the _once methods. Alternatively, class_exists() is faster than the _once methods as well (if you're including a PHP class and not just code). 
Autoloading? 
Autoloading.
I suppose that's an interesting point, but OO is not always the best way to write an application.
I use a include.php file, with a require_once for everyfile, this include file is then included in top of every standalone php file, such as index.php, admin.php. This makes sure i always got access to all my functions, and the only problem i have is with ajax loaders, since they can't access the rest of the php file for some reason, so there i have to include files as well.
ive always used phpmailer to create, and send emails with attachments, not sure about viewing them using it.
It's perfectly conducive to code samples, you just need to learn markdown. Any text indented by four spaces is parsed as a code block: such as this text. You also need to end a line with three spaces to get it to insert a line break Like so. Otherwise you need a double line break to create a new paragraph.
OO is not the only worthwhile programming paradigm. Get your head out of your arse. 
I don't get what it is you're trying to warn us here. Why would you ever use isset to test the presence of a character using a string as an index? The only knowledge I'm running with here is that you don't get the difference between a string, an array and an integer...
You should be turning errors off in production mode anyway. I kind of see the upgrade plan laid out as follows: * Write code with PHP 5.1 have server be PHP 5.1 * PHP 5.2 is released * Install PHP 5.2 locally * Test all sites locally, fix errors as needed * Announced planned downtime - Plan for an early morning upgrade * Update PHP on live server, or test server if possible * Push out code to all new sites * Be thankful that you don't have to hope there is old documentation floating around on Google, since you're using the latest and greatest
[My opinion from the previous submission.](http://www.reddit.com/r/PHP/comments/p1mjm/please_tell_me_if_you_understand_what_this/c3m5um5)
lets see ... there is DCI and functional programming , which are both paradigms not fully available in php, and aspect oriented approach, which is currently impossible to use. And then there is procedural programming , in which no sane person would write an application. Procedural programming is for simple scripts , not applications. So .. please ... educate me.
 $_SESSION['ccNum'] Oh my. Please don't do this.
I like that style, though I go a little differently. I do love to just hammer code out and get a working prototype done as fast as possible, though. Make it work, and THEN make it robust, logical, and pretty. Any of the errors/exceptions, I account for as I find them. The problem with not doing this is that many of those are forgotten once you finish, or will be more costly to go back and implement/test. The best example I can produce is for DB handling; there's quite a few things that have to be in-place and have to be setup before you can connect to a DB: * DB extension/driver has to be installed * php.ini settings for the DB may need to be tweaked (timeout settings, etc.) * remote access may need to be enabled on the DB server (among other things like collation) * need a valid login * login has to have the appropriate rights for the DB * the actual DB must exist * the table(s) must exist in the DB While you may be able to easily identify / code for many of those steps, some will not be obvious unless/until you attempt to deploy your application to a brand-new environment (and not just a code refresh).
Or by using StdObject? Not much. What you're seeing is a guy who came from the Ruby world trying to make PHP act more like Ruby. Read a little further down, you'll see you uses "method_missing" instead of __call. __call is PHP, method_missing is Ruby. When in Rome, do as the Romans do.
You're doing it completely wrong if you're putting Credit Card numbers anywhere near the session variables. Those go into your database encrypted... In fact if you put them into your session variables it is **illegal** because it violates the merchant agreement that the company/you signed allowing them to process credit cards.
Lucky for you I once needed a robust option for accessing IMAP servers and none existed. I posted this class to phpclasses (yes I know I need to move it to github someday). It works well, hit me up if you have any questions. http://www.phpclasses.org/package/6256-PHP-Retrieve-messages-from-an-IMAP-server.html *edit* After reading some responses to my class on phpclasses I see a report that there is a bug in my example code. I'm attempting to access a private method in the example script FYI, easy fix of course.
It won't receive any votes, and won't show up in /r/sub/new/
When I write an application from scratch (no framework involved), I typically don't even write *anything* database related on the first write. I write myself an OOP interface, and code against that. After I have the first draft done, and need to test the database stuff, I write the database layer in with the appropriate queries (though, I often just use stored procedures, to separate the application from the database). There are many different caveats to this method that I use, but the essence of it is "don't get stuck on the little shit".
True, that does work for classes. Not for general includes though, if you just have a file with a bunch of useful functions. And lol at the number of responses to my comment...
&gt;Procedural programming is for simple scripts , not applications. I strongly disagree. In some cases, OO is a good fit, but in many cases, people try to adopt an OO approach when all they really need is modularity. Now if you said "non-modular procedural code is for simple scripts", I would agree. But blanket statements like "All application programming should be OO" lead to cargo cult programming. People spend hours and thousands of lines of code organizing their projects into little objects and class hierarchies when they are never actually going to *use* 99% of these structures in a way that is in any sense advantageous over a procedural style. Non-classical inheritance models are better, but even so, the main advantage gained in most cases is simple modularity. Of course, just because you've adopted a procedural style for the overall project, that doesn't mean that individual components can't be strongly object oriented. In fact, I would argue that this is often a far more sane approach than trying to shoehorn the entire application into an OO style. Now, don't get me wrong. I've created some very beautiful OO programs that I am quite proud of, which do benefit from their OO design. I've also created a number of them that I was proud of at the time because their structure seemed so neat and tidy, and then later came to realize, during maintenance, that I had essentially dolled a procedural program up in a very pretty OO dress – functionally good OO design, to be sure, but not actually useful.
Good points, I agree it is generally better to code to an abstracted interface when possible, and I especially agree with "don't get stuck on the little shit"; I've explained it to others in the sense that when you're coached on test-taking, _don't let any one problem take an inordinate amount of time_. Same principle, I believe.
Breaking a contract / PCI compliance is not the same as illegal, but you are right, it's a breach and can open you up to liabilities.
You might also try http://www.phpdocx.com/
well i will now. and thanks for the explanation as to why its a "bad" idea. does make sense and i didnt realize it was so easily decrypted at the server level if someone got their hands on it. Thanks for the link too, ill def check it out.. like i said its my first cart im making and obviously doing it right will save me some headaches and pocketbook-aches later down the road. Again, i appreciate you not being a dick about it and being a teacher. thanks again and enjoy the weekend!
An analogy is meant to convey an idea, which his did very well. You don't agree with his point. Fine, we get that. But don't start picking apart an analogy because it isn't exactly the same. If it were exactly the same, it wouldn't be an analogy.
I don't think adding boilerplate cruft to source code is in any way a "good" solution; yes, it _works_, but that doesn't inherently make it good. Ideally, the language would provide features that would relieve the client code from having to worry about such issues, and PHP has such features in the `*_once` functionality, and also in the autoloader functionality. To the quote _"If your application is properly structured"_, it's not so much 'jumping through hoops' as it is using a sane naming scheme. In other words, feel free to just throw all your files in one dir, or to scatter them out as you see fit, but as the complexity grows then the overhead to maintain that will also grow. I think that most projects have at least an informal standard of how to name things (and likewise, where they belong on the filesystem) in the project, and if not, then I have doubts about the architecture of the application before even looking at the code. That is, unless you follow some sort of standard, such as the one being floated by PSR, called [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) (PSR is a working group aiming to establish some standards within PHP). These standards are close to what many are already using, though implementations can vary slightly (and thus the reason for PSR). As such, properly naming classes and namespaces, and putting them into the corresponding logically-named filesystem location actually makes life much easier for pretty much everyone involved. I don't know Zend Framework very well at all, but knowing they follow a very logical and standard naming scheme, I can very predictably locate (such as when letting auto-complete help me find a class/dir) any class they offer without even looking at the directory tree. Turn that into code (in the form of `__autoload()`, which is basically what PSR-0 is), and you just jumped through the proverbial 'hoop'. So no, it's not hoops so much as having the discipline to follow a naming standard -- which most already do anyways, and it's really only a side-effect that you no longer have to explicitly include code.
I was expecting a response from you for my reply for your comment, http://www.reddit.com/r/PHP/comments/p1mjm/please_tell_me_if_you_understand_what_this/c3m5um5 But as the post was pushed to second page, I thought no one cared anymore. Please excuse my persistence, But I believe this is really useful and I am surprised that people are not noticing. Just give me some response, even if you disagree. You can execute me, just give me a fair trial... 
Sorry to ruin your fun :)
I disagree, include_once &amp; require_once take a lot longer to run, and if you code it correctly it shouldn't be an issue. (note the speed tests are taken from each of my environments, all showing it faster. Might not be a global truth; I expect to be though).
Reminds of the time I upgraded a server from 4 to 5. That was one fun week.
That sounds about right. Also, consider looking into Symfony2, which has the 'FOSFacebookBundle' to help get you started on an FB app.
This is the third submission I've seen you made about the exact same thing. I'd suggest you stop spamming this subreddit.
I posted again because I don't think it got the attention it deserved. If you think otherwise please let me know why. 
There are lots of ways you could do this. But as I point out in my other comment there, if you're asking the passed-data to ask *itself* what it is and *trust* that before throwing it at the database, you're going to get into trouble. The better thing to do is to always know what types go in which field on which table, through the use of Models. That way, you're not calculating all this stuff on the fly and you can just go about your business. This brings up a much, much more important point. . Look, **/r/PHP**, we've known each other for a while, so I'm going to be blunt. You guys have **got** to stop reinventing the wheel around here. There are dozens of good, solid, *tested* ORMs out there. Use them! That's what they're for. You dramatically decrease your coding time, your overhead, and your vulnerability to attacks and injections the *second* you switch to one! There's absolutely no reason not to. (This is a good part of why the ruby and python geeks still laugh at us, btw.) Every time another one of these posts show up, I die a little inside. Yet another app is released into the wild, with all sorts of homegrown hacked solutions, untested, un-thought-out - and someone is going to have to clean up that mess *eventually*. Of course, if I had my way, PHP would have done away with it's direct MySQL functions *years* ago, and you'd only have an ORM to work through in the first place. And the world would be a happier, safer place for it.
Sorry, I wasn't here last night. But the advice above is excellent. I didn't want to sound mean, but glad you got the advice you needed!
i don't think you're handling this correctly. the value type shouldn't decide the casting, the type of field in the table should dictate type (i,d,s,b). if you wanted to automate this you'd have to query the meta data in information_schema.columns. anyways, see if you can switch to pdo. imo, telling mysql how to cast it's data is of little use, it already casts automatically. I would think you would be casting and/or validating in the application already. check out named parameters and how you can just pass an array of name value pairs into pdo::execute. to me this is the most simple and elegant way to run statements. see example #2 http://php.net/manual/en/pdostatement.execute.php 
Sorry bro, but that is just code clusterfuck.
I'm wondering what you mean by "invest time"? I can absolutely roll out a full doctrine implementation - fixtures, schema, models, crud &amp; all - in a very small fraction of the time it'd take me to write all that stuff by hand with PDO. If you're new to it and tackling *that* learning curve, using the native functions is probably going to be an even *bigger* curve. Just my two cents.
&gt; The CC's should be sent to the payment processor for processing and then immediately discarded. Agreed, but that doesn't mean there aren't websites that save your CC info for next time.
Somewhat valid point. That function I posted is at a very low level though. Before that is run you'd do some checking on the data coming through POST you need to validate it to make sure it doesn't exceed the max length in the database, is an integer or an alphanumeric etc before you actually run the query. Also if you submit a bool, null or an int into a varchar field in the database it isn't going to crash it. If you insert an alphanumeric string into a tinyint or integer field it may crash itor give unexpected results so that's why you validate it first and if necessary parse it to an int or if not possible return the user back to the form with an error. If you had to introspect the table structure each time before your query that would be slower because you're running two queries. Using an ORM would work because usually the table structure is already written in the code so it just needs to do a quick check first. Either way the ORM is going to handle that low level parameter binding for you. But if it thinks the database field should be an int so it tries to force all incoming data for that field as an int then if the user inserted 'wtyyr' it's still going to crash the program. So you still need to validate it first. As with OPs question he's not using an ORM, so hence the answer I provided.
Many payment processors will store the CC information for you and return a token you can use for followup transactions. You store the token and not the CC information. I have a site that does monthly recurring transactions and we have no CC information stored.
Or if you use an ORM, the Repo could just call that. You could also use Zend Framework's methodology and the repo could call that. The point is, your data is completely separate from your business logic. And if you're really cool, your repo won't know what the storage mechanism is, i.e. database, web service, file, etc. 
Entities are just fancy arrays with extra functionality public function getFullName() { // If $firstName and $lastName are properties} public function getPdfInvoice() { // call the Repo, which calls the service layer to get a PDF of the entity} public function getFormattedDate() {} public function save() { // calls the repo-&gt;save method } Just don't standardize your entities, only do what's needed to meet the Business requirements. Otherwise, you'll be programming forever.
Please keep it professional.
Thanks for your reply. As far as throwing data into the database and trusting it to type itself, I'm not solely relying on this function for data validation. However I'm wondering how exactly that's risky anyway? The way I understand it, user generated strings are the primary (only?) real threat, since they can inject malicious SQL. With prepared statements you are explicitly telling MySQL what is SQL and what is Data, this way it cannot confuse the two. If my understanding is correct, when a malicious string is entered and my function types it as a string, it would still be safe - simply because it's being handled as 'data' and not part of the SQL... there's no way MySQL can confuse the two, even if my function relies on the data to type itself... Regarding your second point, I'm not exactly using this code for an enterprise grade solution, and the stakes are not high. I enjoy the hobby of writing and code, and frankly I wouldn't have even imagined to look up an "ORM" (And from some quick Googling, I'm not exactly sure what it is or how exactly it would help me) So, even though I made a post, attempting to reinvent the wheel, I learned something about something completely new anyway. However, for the sake of understanding MySQL, I'm still curious about the above situation. 
I will look into PDO, thanks! I do like the advantage of being able to plug into other database systems with minimal or zero SQL changes.
Like any programming language it takes time to learn it. I would make sure you understand basic programming principles (loops, functions, arrays etc.) before you dive in. But if you're serious about PHP go here: http://www.php.net/manual/en/ It's official and it's free.
I personally taught myself with the book: Core PHP Programming by Leon Atkinson. It helps if you have friends you can ask questions. PM me anytime.
THIS is what I was going to suggest.
w3schools is flawed, use w3fools.com instead.
Since you want it to be professional, let me know where to send my invoice.
It would be nice if you could give me some reason why you think so. Can you tell me if something existing that can do the same without using an extension? Do you think there is no value in able to trace execution and checking which functions are getting called and what values are they returning when something is not working as intended? Don't you agree that it will help debugging greatly? I believe it is a very useful thing to have, but it may contain some flaws. They cannot be fixed without the feedback from a community like this, which is the reason I try so hard to get people to take a look at it. Majority of users here apparently use xdebug, and hence see little value in a profiler like this. But isn't it true that there is a large number of php programmers havent used, or even heard of xdebug. Most of them work in linux environments. Installing xdebug and its dump viewer is not really straightforward in linux. And most of the above programmers dont have permission( when they work in a company) or relay on system administrators to do stuff like installing new software. The advantage of using a debugging tool is not so apparent to most of them. So even if the have heard of xdebug, they really are not going to go through the trouble of installing it. I want to bring the power of profiling and tracing to those people, so next time they have to write a series of echo statements to figure out why something is not working, they have a better option. But I am not getting any help from those people. Because they are not part reddit or any such forums. Even if they are part of any, they only join or login when some thing is not working, or to ask how to do something new. They as sure as I can be, is not going to check something like this out. So please tell me, What are my options? 
I would also set a goal. Whether it is a bulletin board, a web calculator, or something. It goes a long way to motivating you to use the language. For PHP, my first application was a budget tracker years ago. I'd input money I spent, and money I made and give those amounts categories. It was originally just stored in a text file, but eventually I graduated to databases and learned to do all sorts of neat things with it. I was also a comp sci major way back when, so I had an interest in the field beyond just learning PHP.
WOW! 
fantastic resource. thanks!
If you prefer, "Please keep it civil". Looking at your comment history in /r/PHP, you seem to be continually calling people idiots and fuckwads, and generally being uncivil. Many people reading this subreddit are at work, or are trying to learn. As such, we ask that the tone be kept professional, and civil. The moderators here are fairly "hands-off", but we do have guidelines, and will enforce them.
you should check out the www.killersitesuniversity.com These guys (www.killersites.com) have been in the business for a long time and they just started this university. So far they have tons of interactive php tutorials...Ive done 3 of the courses and it is pretty awesome so far!
My knowledge of much more beyond web development: Application development, game development, server administration, database administration, business classes, etc. I dabbled a little in everything before/during college and that made me far more useful than others. Talking about web development alone, I would say learn the more popular frameworks, PHP and front-end-wise.
Glad I could help!
Learn how to write object oriented PHP. Classes, protected and private methods, getters and setters, they all go a long way in making stereotypically ugly PHP code, well, not shitty. PHP's function list is so extensive that it can be tempting to write as few lines of code as possible to get something working. But really, you'll pay later. Also, a templating engine like Smarty can make your HTML much more readable, and prevent the temptation to mix your logic and formatting. On my iPhone right now, but if you want some good code / bad code examples (IMO) let me know. Best of luck!
How accurate is their information? Does any seasoned coder know?
Besides the Blog section, very accurate.
There are few things you should keep in mind, when making something you describe as "database connection class": - you might need to work with more then one DB in same application, do not *code yourself in a corner* by forcing one and only one DB connection available - mysql is not the only RDBMS out there. It not even one of the best, and .. hell .. most of OSS advocates would argue that it isn't even "opensource". That said, there is no need for such "connection class" anymore, not since MySQLi and [PDO](http://php.net/pdo) (which you should really learn how to use) are available. Instead you would benefit from object which oversees multiple connections.
And you dredged up a conversation that was finished to publicly say something to me that could have been said privately. The only one not letting this conversation be over is you. &gt; Looking at your comment history in /r/PHP, you seem to be continually calling people idiots and fuckwads, and generally being uncivil. Look, I'm ok with you just banning me because you don't like my posting style, because I hurt your feelings on an alt, whatever. What I'm not ok with is this bullshit character assassination going in in your head so you feel ok about banning me. Just fucking ban me. Because you can't link to a single posting of mine w/i the last 2 months in which I've called someone an idiot, despite you claiming otherwise. By far the majority of my posts in PHP have been simple observations, or helpful comments. You can't even link to more than a handful of posts in which I've used the word fuck, and out of all those, only 1 is referring to someone directly. You did find that though, didn't you? What it comes down to is this: I'm going to continue cursing. If you want to ban me for it, do it guilt free with the knowledge that I refuse to stop. Otherwise, let this fucking conversation die, and next time PM me instead.
Awesome! Thanks!
I just skipped through the pages while my head smashed my keyboard. &gt;Save the file and start your PHP projects with some really useful functions that sooner or later you will need to use. Sure, please pollute the already full and shitty 'namespace' with your useless reimplementation for the kind of 'programmers' that don't like libraries. I mean, you never know when you need to check if a string looks like an ip address and you totally forgot how to look into documentation!
This just happened to me last night. I have cleaned up all my wordpress source files created a new user account. But I'm still having the redirect problem. Is there something I'm missing? Lemme know. 
You should contribute some code to his site. Here's my contribution. It tests whether or not a variable is a string. Please add it to your production code. function is_var_a_string($string) { if(is_bool($string) == false &amp;&amp; is_int($string) == false &amp;&amp; is_array($string) == false &amp;&amp; is_object($string) == false &amp;&amp; is_resource($string) == false &amp;&amp; is_null($string) == false) { $return_value = true; } else { $return_value = false; } if(is_var_a_boolean($return_value)) { return $return_value; } else { exit; } }
Why do this instead of just using is_string()? Or is that the joke? edit: nevermind, that's obviously the joke. I wooshed.
'useful' - for a very liberal definition of 'useful'.
costs money for those who are wondering.
So share with the class! How useful are require and include?
They are quite useful. I'll explain what they do, for the noobies: If you have any snippet of code that you use across multiple pages, you can just write it in one file. Instead of copying and pasting that snippet across all the pages that use it, you just need to use require(snippet.php) and it will insert all of the code from the snippet file into your page. So instead of copying and pasting big blocks of code, you only need to copy and paste one line. And better yet, if you ever have to change that code, you can change it once in the snippet file, and it will be updated immediately across every page that uses it.
[Class Autoloading](http://php.net/manual/en/language.oop5.autoload.php) will blow your mind.
If you're going to be serious about this, you'll have to learn to do things the right way. This includes saving advice in txt files. For added bonus, call the file README.txt and put it in a folder called advice.
second that.
I can only imagine what your .php files look like. Damn.
Not mentioned, but using includes helps if you have say one single file that contains database login information. There's only one place to change the username/password/etc... if that should change.
I'm sorry if this comes off as harsh, but if you had said two *days* I would surely have let it pass, but two *years*? Something is not adding up here ... what, exactly, have you been coding for two years?
These look significantly worse.
Ahh, the good ol' teacher questioon *"So Timmy, tell the class what you've learn today?"*, always a good way to continue educating the curious mind and being able to explain so you can better understand how you've learned.
You should definitely check out [codeigniter](http://codeigniter.com/).
If you're coding one-off scripts I can see not using them for a while, but not knowing about them is unheard of. I can only imagine the headache of maintaining this code.
 file a.php: &lt;?php include "b.php"; ------ file b.php: &lt;?php include "a.php"; Problem?
2 years? did you not notice include(...) or require(...) in any files or any tutorials... or any thing at all? 
~~Sometimes~~ Many times `include_once` is better.
It's usually not something to even worry about. 's' is the magic param type here in PHP-land for the mysqli library. Usually doesn't even matter what the underlying mysql field data type is nor what your PHP value is, because as you say, mysql will more or less automatically cast it to the appropriate type for storage anyway. Because of this, I'm not convinced this aspect of `bind_param` even has a valid purpose. Disclaimer: Check the comments on [mysqli_stmt::bind_param](http://php.net/manual/en/mysqli-stmt.bind-param.php) for any exceptions.
Create Read Alter Purge ???
I warned a team member of this very problem, and subsequently ended up spending nearly an hour debugging the fuckery that resulted when it was ignored and actually became the problem.
That's an incorrect assumption. The closing tags exist to be used. Omitting them is the correct convention by Zend standards, but not for PHP as a whole. If you code your site correctly, there should be no need for something hacky like omitting end tags.
Sure they are not required, a lot of things are "not required" in programming, but its still a good idea to use them. You could write a complex mathematical formula without brackets, but it would be hell to read later, for example. I prefer to follow the overall golden rule of "always close your tags". In my 10+ years of programming, I have never accidentally added whitespace to the end of a file. I am not sure how someone would do such a thing, other than maybe a bad file merge or an automated tool gone wrong. I don't know about you, but I don't just go around throwing whitespace all over the place :)
I assume you've been coding in PHP *by yourself* for two years? Open source projects. Read them.
Closing tags exist to signal the end of PHP code, which is automatic when the end of the file is reached. They don't exist simply "to be used". All the core PHP developers (Rasmus Lerdorf, Andi Gutmans, and Andi Gutmans) recommend not using the closing tag, and have specifically stated the non-requirement of the tag is a [feature of PHP](http://www.justskins.com/forums/php-dev-question-about-132394.html). A feature that's meant to be used.
There is no age-old standard of always closing tags. You're simply making that up.
The point is that it's not hacky at all. The EOF is an implied close to the PHP block, so it is being closed by the compiler. In fact, I find class files much cleaner with just the one &lt;?php at the top.
I started last fall and these sources have been the most help: 1) Make sure you have a strong foundation in HTML (and if you want nice looking sites, CSS) 2 Resources: http://tutsplus.com/course/30-days-to-learn-html-and-css/ and http://code.google.com/edu/submissions/html-css-javascript/ 2) To Learn PHP: Best Resource: http://www.php.net/manual/en/ Other Resources: http://www.tuxradar.com/practicalphp/ Also see Nettut's post on "Best Way to Learn PHP": http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/ Also, http://stackoverflow.com is a great resource for many already asked questions and a place to get help but please search before doing so. Also, if you're going to use mysql, please do "PDO" and not mysql_connect and don't use md5 to encrypt passwords!!! Good luck and remember that practice via experimentation and simple projects will go a long way! I've learned the most through deciding to try a project where I might need to learn a few new concepts.
This is one of those situations where both choices are acceptable and defensible. * Omitting the ?&gt; can be a good idea to avoid potential problems if blank lines are accidentally added below. * Adding the ?&gt; can be a good idea because it shows consistency and enforces good discipline. 
No offense, but it really took you two years to realize this? I'm guessing you do no OOP in your designs?
i imagine every php file having the db info in them. all it takes is to forget the opening &lt;?php and there you have it
Includes were the first thing I ever used PHP for, because I was looking for a way to separate the HTML before and after the content into different files, to make it easier to maintain. I find it pretty hard to imagine being ignorant of includes for that long.
Rasmus's continued distaste for object-oriented programming and nostalgia for procedural programming seems misplaced. It isn't so much that the "world has moved on" as he says in the talk, it's that our demands are so much greater. Procedural programming simply isn't good enough for the type of complex tasks the average web developer does these days. It isn't 1995 anymore. I feel like many problems in PHP could be solved if the designers just decided that procedural programming should be secondary to the object oriented functionality. Even newbies are being told to use PDO -- it's now impossible to avoid.
Are
Now that you've discovered includes, here are some quick security tips: If a file can only be included by one other file, you want to check in the file that is to be included that the including file is the correct one. One way do that is by defining a constant in the including file before doing the include, and checking at the start of the file that is included whether that constant has indeed been defined. By doing this, you can prevent some attacks that might arise from other flaws in your software. It will also prevent people from loading the files to be included directly, but that part of security should typically be handled by putting them in a directory that is not web-accessible - which can be done by putting them outside the web root or by setting your .htaccess to block all access to that directory. A practical example, which I have seen leading to sites getting hacked in the past: Let's say you have a CMS which should be accessed through example.com/yourcms.php. To convenience people using your CMS, yourcms.php will detect whether it has been configured, and if not, it will figure that the person is setting up his installation, and include libs/setup.php to allow the person to go through setup. (convenient and a pretty big security flaw) Now, normally speaking access to the /libs/ folder would be disallowed through .htaccess, but for some reason that isn't the case here (security flaw #2) - perhaps because the user was required to do it himself, or because permissions on .htaccess prevented the cms from doing it itself. Plus, /libs/setup.php would normally be deleted after setup, but that hasn't happened either for one of the same reasons as mentioned above. (security flaw #3) Now, unknown to your user, his live site can be compromised by someone simply browsing to example.com/libs/setup.php and filling in fake data, or using error messages to gain information about the system. But maybe you avoided security flaw #2. Instead, your hapless user installed some other PHP script that features another flaw: allowing inclusion of arbitrary files already present on the server in a user-accessible directory. Your user is probably borked if an attacker has some time and skill, but if your setup.php does a check to make sure that "BEER" is indeed "TASTY" (i.e. that a constant called BEER has been defined and has "TASTY" as its value), you won't have played part in that. To summarize: * Make sure directories containing files that are meant to be included rather than run by themselves aren't web-accessible, by either putting them outside the webroot or by blocking access through .htaccess. * Make sure that when you include files, they do a check to see whether they're being included by the right file. * Avoid having files around that could cause trouble when included. And a fourth one: * If a certain file should be included, make sure that the right file actually *has* been included. If not, stop working. You can use the constant check for this, too.
No. I didn't say require() AND include(), I said require()/include() because they are essentially the same thing. Singular.
Comments aren't required, but are important because they tell you what is going on. "?&gt;" tags at the end of your file aren't required, and are wholly unnecessary because you have the actual end of your file to inform you of the end of your file.
Precisely, you also don't need the end of line semicolon if there's a closing tag &lt;?php echo 'fuck' ?&gt;
Is that in Luke? or Matthew? Or was it Egyptian?
I didn't know that... but that one does make me uncomfortable. I've had it drilled into my head that leaving out semicolons is like forgetting to put the pin back in the grenade...
a cheap easy way to stop lookup access on your web directories is to just include a index.php file in each directory with a header() pointing back to the root. Its not super foolproof, but it stops the simple browsing people. Also what if the include file cant have any information before its output, ie a html template for instance. 
Un drill it, it works well if you use PHP as a templating language, like &lt;?=$hello?&gt; Also, javascript does not require them ... they exist purely for the reason you stated ~mindfuck~
His explanation in the Q&amp;A of why we didn't use randomized salting of array hashing was very enlightening. Since the max_input_vars ini config was decided upon, I kept thinking it was a really lazy and sloppy way to fix this bug. But understanding that it's done this way to not break caches really made me do a turn-around in that view.
Seems like learning PHP by reverse engineering PHP binaries. :&gt;
Come on man, that's not constructive.. lol.
Not sure if trolling.
Netbeans will, by default, scan for external changes when you alt+tab back to it (so if you copy something in, it will know about it and possibly automatically upload to a server if your project is set up, etc). You can turn that off if you want, but if you're working over a network share that can't keep up, it may be easier to just have a local copy, 'upload' to the network share, and deploy via git/svn/etc.
People who write a lot of JavaScript and omit semicolons are asking for trouble; they are often required for the parser to disambiguate two possible interpretations of a code snippit (see [this stackoverflow post](http://stackoverflow.com/a/1169596) for a great example of the ambiguity in JavaScript.
download the help file manual from the php web site, it has alot of demo code in it for all the different commands. It also shows you relevance to other commands so you can click through and read about them too. You will need this manual even when you start to know what your doing, youll still need to refer to what inputs certain commands take, what order they go in, little things like that. I taught myself, and decided to go the difficult route, build my own CMS. First attempt was quite shit. But i stuck with it and got the point where i was pulling opensource stuff apart to see how it works. This helped me way more than any other tutorials because i got to pull apart code developed from a different point of view. CMS is in its nineth incarnation now, has been used to build decent size sites in the past and continues to be a project. So much of a project its my babay and i dont want to let it go. :) If you need criticism, advice etc PM if you feel like
Why do you not code it right? There is this chance that something will slip through
no, im with him. You've been doing it wrong. That was the first thing i ever used, coming from strictly doing front end background.
&gt;A single line break, consisting of \r\n or \n, after a closing ?&gt; is ignored by PHP and is not output. Any other whitespace however, including a space that appears before any line break, will cause it to be output. I'm trying to find a source for this but Google is proving difficult. Can you point this out for me?
Have you check every single PHP file on your server for suspicious code? I found that if I had even one file with this code, I would be redirected.
Here, let me help you there. * The "HTML before … the content" is called **the Header**. * The "HTML … after the content" is called **the Footer**. Did you name your files "before.php" and "after.php" by any chance? Lol. EDIT: Wow, I must have been having a bad day to write something so snarky. I apologize.
MikeSeth, that is such a rare condition that it hardly bothers mentioning. Besides, by mentioning it, you have lowered your worth as an expert solver of such problems.
You should PM me where you work. See? I've made a quite lucrative career fixing garbage dumps — err, I mean, websites developed by people who were *way* over their heads but somehow kept that from their bosses. If you give me the heads up, you and I could work something out so that the code is somewhat respectable by the you move on … **That way, no one will put out a bounty to kill your ass when they inherit it in the future.** [This is supposed to be humorous, but I understand if I butchered it, somehow. Haven't you ever wanted the email address of a guy who's code you're constantly rewriting, years later?]
I know, right? The level of entry in PHP is extremely low. But it's good, you know? Assuming the piles of crap aren't so bad that the site is rewritten into a different language (hey, i've seen this before!), it just teaches employers the value of hiring pros from the start, then adding Juniors in an apprenticeship program.
http://www.phpu.cc/ You **need** the one on one mentoring just to unlearn your horrible patterns you've picked up.
&lt; 10 years you better know it, as it's been stressed since C++ and Java came out, 10 -15 is grey, 15+ I'll agree they tend to be missing the boat, which gets really hard to deal with.
It **is** constructive!! Don't you realize PHP developers (that includes you, if you dev php) have a **terrible** reputation in the world? and because of that PHP is considered *that kid language noobs use*. Don't you realize that some of us have 10-15+ years into PHP now? Changing languages would set me back probably $50,000+ a year, because I'm such a subject matter expert. If noobs like meatloaf keep proliferating at the same speeds as they have historically (from, say, 1998 to 2008), then we're screwed!! These noobs will keep screwing up site after site after site to the point that the bosses throw up their hands and say REWRITE! in PYTHON, or RUBY or whatever fringe language is the new "cool" language. That just means less of a future for PHP, which means less jobs and money for us. This is why it's constructive. We *have* to find out why noobs learn so wrong, and DESTROY their sources of information, as well as create shining beacons of new information (which I'm doing, btw). Unless you enjoy coding in Python, or whatever.
I'm surprised that was your first book. I had known PHP for 10+ years when that came out. For us vets, there were NO good PHP books and if you didn't learn C++ or Java first, you are almost certainly going to be somewhat of a programming noob to this day, not knowing proper debugging, DI, DP or any number of things, really.
I second this. See [my comment](http://www.reddit.com/r/PHP/comments/pcbhj/ive_been_coding_in_php_for_two_years_and_ive_only/c3oeoy0).
amg, try an unframework. I'd recommend [**Flourish Lib**](http://www.flourishlib.com/).
Vote up LieutenantClone below... Because otherwise close to half of the discussion is hidden from people's views, and that seems wrong.
PHP Objects, Patterns, and Practice is a pretty good book
A quite lengthy [Stackoverflow thread on the subject](http://stackoverflow.com/questions/90924/what-is-the-best-php-programming-book) will be surely helpful to you. Plus my two cents: [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) is an amazing book. Good luck! :)
So what are the five things that we should know? I think a better title would be: "A series of observations about node.js and how it compares to PHP as a development environment" I'd argue if you really want to know *why* node.js is great in a very distilled conversation, [this](http://www.readwriteweb.com/hack/2010/10/why-developers-should-pay-atte.php) interview is pretty good at breaking it down.
I found David Powers' [PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117/ref=ntt_at_ep_dpt_4) to be very good. I read it in November and I'm very confident in my OOP code writing skills some 3-4 months later.
In my personal (and largely uneducated) opinion, knowledge of how to use objects in php doesn't have to be particularly deep for you to be successful. Objects in programs that run persistently do a lot of state maintenance, but web programming is inherently stateless, so you only use objects for really short term encapsulation of data or as big function containers. If you go through GoF you'll realize that many of the patterns they throw at you are either not very useful in the context of web or incur too large of an overhead for a language that throws away the world every time a request is made.
I started learning PHP four years ago. Today I wish instead of learning the 'procedural' way and cruising the internet for coding tutorials and learning all the worst practices those 'tutorials' will teach, I wish someone had just said 'Learn OOP right off the bat with a framework'. If you learned PDO instead of PHP's native mysql extensions (which are being deprecated btw) you can't even hand your server unsanitized input. Instead I spent years learning bad habits that I had to correct, applications that I had to rewrite, and code that I can't reuse because it isn't written and packaged in modular classes. You might not understand any of this OP but I just write this to ask other 'veterans' around here whether they think OOP and a framework right off the starting gates could be the way to go? I just feel like time was wasted, but I suppose say that I know the language quite intimately now.
I'm not trolling you. I genuinely would be interested in seeing some of your code in the same way some people slow down to look at the aftermath of a road traffic accident.
I'm not sure the cause which is why I am not indicting netbeans, just my experience with it. I've only ever used it for Zend Framework projects, and that alone is 2375 php files just for the library.
Thanks for the tip, I can't do that my current job but I'll keep that in mind for the future.
[Advanced PHP Programming](http://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616/ref=sr_1_1?ie=UTF8&amp;qid=1328551859&amp;sr=8-1) is the best book you could buy for learning how to really use the language. It doesn't just show you OOP, but gives you examples of how to really use it to advance your programs and make your life easier. Seriously the best PHP there is.
I totally agree; was the "No" directed at me or the parent?
As one of the authors on this book: Thank you! :)
6 indeed, though one is sick, so soon to be 5 :( Complicated merging of families. My wife moved in with one. Everybody knows 5 is the cap for not being a crazy cat lady.
Object-Oriented PHP: Concepts, Techniques, and Code by Peter Lavin seems like a good one. I'm coming from PHP for the World Wide Web (Visual QuickStart Guide) by Larry Ullman. Peter Lavin seems to do a great job explaining OOP.
write your own language!
I think Objects Patterns and Practise is getting A BIT long in the tooth. I read it maybe a year ago and I remember thinking it was starting to look a bit out of date then. Maybe there's been a new version... The only PHP specific one I have on my shelf is "Pro PHP" which I think was pretty good because it covers some more unusual topics than most PHP books like testing, frameworks and SPL - not much on OO design though. If you just care about OO design I'd suggest looking at general programming books rather than a PHP book. Classics like Clean Code, The Pragmatic Programmer and Design Patterns taught me more about writing good OO code than any PHP book ever did (and despite not owning many I have read a few).
It's ok, but I cannot recommend this book because of the style. The examples presented throughout the book are seldom related one to another, the context is most often hard to grasp the way they are laid out, especially in the later chapters. I have read and re-read this book many times and although one can come to understand the principles, some of the other suggestions below (PHP Object-Oriented Solutions) lays out OO patterns in a much clearer fashion. My 2 cents.
This was also my favorite OOP book.
I never said it was wrong, I said it was hacky, and Google readily admits that omitting end tags is hacky. I'm not saying anyone is wrong, I am stating my preference, get off my lawn.
Yet for all the thousands of PHP files I have authored, I have never once had this problem. It's really not the landmine you make it out to be.
You may or may not be an idiot, but you are definitely full of yourself.
You're comparing apples to bowling balls, and making the mistake of thinking PHP tags have anything in common with curly braces and HTML tags.
I started out EXACTLY like you. I am literally watching, at this exact moment, these videos to help me understand OO (as I'm getting into iOS design, OO is becoming more and more important). Hope this helps.
&gt;Google readily admits that omitting end tags is hacky [citation needed] stop pulling stuff out of your ass when you don't even know what you're talking about. [http://code.google.com/intl/fr-FR/speed/articles/optimizing-html.html](http://code.google.com/intl/fr-FR/speed/articles/optimizing-html.html) &gt;Omitting optional tags keeps your HTML formally valid, while decreasing your file size and making your code look much leaner. In a typical document, this can mean 5-20 % savings. Applying this and a few other techniques in our Privacy Centers, we managed to save about 20 % of the original file size. yup, that sounds like them readily admitting that leaving out end tags is hacky!! /s
The vim emulation in PHPStorm is pretty damn good. It used to crash a bit, but its a lot better now, I don't notice any slowdown anymore and bugs are minimal. Otherwise, Eclipse has viWrapper, which is also great, but I don't know if it works properly with Aptana.
That may be, but at least we're in the same boat there.
That's one edge case. And I'd say a pretty damn obvious one, I mean that's not gonna sneak up in a few months as a hard to track bug, it will fail in a very obvious way from day one.
Alas you're right of course, albeit brusque..
&lt;?php echo $hello ?&gt; That work for you? You could always try getting a decent host too (the &lt;?= is to be fully supported by future php versions while &lt;? is to be deprecated eventually).
I never said you "should" use short tags, simply that you can use php for templating. It doesn't matter which one you use they will typically be one line (or inline) statements not requiring a semicolon. Similarly you can omit the {} in ifs (or use the template style ifs) Yes, it will be nice. Please support this by taking up that standard rather than bowing to the current mess. If you check the docs, short open tag is on by default, therefore people would have to go out of their way to break your code.
I liked [PHP5 Advanced](http://www.amazon.com/PHP-Advanced-Visual-QuickPro-Guide/dp/0321376013/ref=sr_1_32?ie=UTF8&amp;qid=1328607547&amp;sr=8-32) but it was a little on the thin side. Good for beginning OO IMO. Well, the 100 or so pages that actually go over OO...
It wasn't maruiz who did the tests, it was Dmitry Stogov, who's a core developer of PHP. It can probably be safe to assume that he didn't fuck this up.
I was kind of thinking the same thing in regards to the $value variable. It shouldn't feel strange to anyone that's been using C#, but for long time PHP developers (And noobs), it may seem a bit weird having a magic variable appear out of no where. The properties *could* be written like this to avoid confusion: public minutes { get() { return $this-&gt;seconds / 60; } set($v) { $this-&gt;seconds = $v * 60; } } It makes the accessors look more like the functions they really are, and there's no magic $value variable. Then again, what if the developer forgets to write set($value), and writes set() instead?
Have to agree with this. I mean, I've learned a LOT from tutorials, and I am generally able to pick out the bad ones from the good ones, but most the stuff out there is older and it's seems it's harder and harder to get more recent information.
This makes more sense as it looks like a PHP lambda: $f = function() use ($a) { return ++$a; }; I think $this is enough magic for me :) coming from Python where it's called 'self' and you have to specify it as a method parameter. Explicit is better.
Here: * [bench.php](http://lxr.php.net/opengrok/xref/PHP_TRUNK/Zend/bench.php) * [micro_bench.php](http://lxr.php.net/opengrok/xref/PHP_TRUNK/Zend/micro_bench.php)
I hope I don't break anything.
In Python, everything is an object. I'm not suggesting we do away with functions but PHP could be rapidly improved if it moved away from the current procedural API. The inconsistent string and array API could be easily cleaned up by slowly moving that functionality into methods. You will still able to use the string and array functions but the methods would provide a better interface. It's no surprise that the Unicode work in PHP6 failed; any project of that size and scope is doomed to failure. They had to update every single API function and every extension and can't release anything until the whole project is done -- that's doomed to failure. Instead, they should introduce a new unicode string type that's incompatible with the current string functions and simply add methods to that type. They can start out small and grow both string APIs as needed. 
That page is served with Java? Like raaaaiiiinnnnn on your wedding day.......
Define 'outperformed'. he was obviously not comparing different frameworks. The drupal benchmark was probably just a simple bootstrap, and wordpress a fully working blog. The point was the increase between PHP versions.
Yes, they were made ;)
One of the much earlier versions of Requests had you instantiate the Requests class and use operations on it. I tried that, and I wasn't a huge fan of it. There's the possibility of adding something like this though for those that really want to use it. A pull request would go a long way towards that. :)
And wouldn't it be "*fewer*" memory leaks anyways?
Not really, unless you suffer from _NIH syndrome_.
I've tried to be as PSR-0 compliant as possible, but you're right on that one. I might copy what I did for SimplePie and rename Requests to Requests_Core, with Requests as a subclass. That might be a little unclean though. Thanks for the feedback!
&gt;Its showing the requests per second, and if you look at it its saying that Drupal is capable of 10x as many requests per second. Where does it say that? Because the page I'm viewing says the following: &gt; PHP + Zend OptimizerPlus performance [req/sec] &gt; ---------------------------------------------- &gt; [...] &gt; drupal 1074.3 1146.7 7% That's a 7% increase (1.07x), not a 1,000% (10x) increase. 
The nice thing with class_alias() is that it's literally an alias and not a subclass, so the alias can live in the top namespace like your main Requests class currently does, while the real class is namespaced as per PSR-0 requirements... I didn't even know about it before someone pointed it out on here, and it was just the thing I needed to have it work both ways (in my case at least, although yours looks very similar :).
I would definitely add typecasting, it's only an extra `$options = is_array ($options) ? $options : (array) $options;` after all... But I agree on keeping it as a parameter and not a separate method call. It's not a matter of more or less OOP, it's just a matter of API design choices. Both work, but one's shorter, and doesn't lose anything over the other.
It seems that pretty much all your methods are static; may I ask why? If I were to write a class that used this, I would not be able to unit test my class very easily. I notice from your tests that you have the ability to inject a mock "transport", so you're clearly aware of such issues. 
Would be nice if PHP would include better HTTP handling either in core or as an official extension; I agree that cURL, while a great piece of software, sucks in PHP. Yes, it works, but so does using scissors to cut your grass... which is about what it feels like using cURL in PHP.
Not trying to disparage. I use pecl_http and just curious, for those who do use it, why one might switch to this lib?
Good to know. I'm assuming that the test is meant for /trunk, and was just re-used against 5.3. There _are_ specific tests for 5.2 [in the 5.2 branch](http://lxr.php.net/opengrok/xref/PHP_5_2/Zend/bench.php), but only `bench.php` (I couldn't find `micro_bench.php`), and I didn't try to run that one.
Having a baseline of what your max performance will be is pretty useful. Just an empty controller with minimum libraries. A "you can't do better than this" number.
Can i use this for ws security? I have to connect to some API using this ws security. It is driving me crazy.
&gt; most things are easily overridable or replaceable. This is what I worry about, working **around** the framework. Thanks for the tips though!
If you use PDO for making database queries, you won't need to sanitize inputs through excess code. [Very cool thread over at Stack Overflow.](http://stackoverflow.com/questions/4364686/php-pdo-sanitizing)
&gt; Is this one of those threads where it looks like an argument I was actually thinking that my last post seemed a bit more argumentative than I intended but I was too busy to correct it. &gt; They can't implement your idea of "value-type" objects because the idea of arrays and strings as low-level types I disagree. Yes the idea of arrays and strings as low-level types is profoundly built it -- and I don't suggest changing that. Being able to call methods on string and array types, however, is just an add-on ability. It doesn't have to affect anything else in the core. If you think about it, it's really just syntactic sugar. Didn't development actually begin on PHP6? I believe they started the slog and progress was being made. 
 wget https://github.com/rmccue/Requests/tarball/v1.5 | tar xzv FTFY
I think its good how it is, you could always just write an OOP wrapper for it anyways. class Requester { $this-&gt;class_name = 'Request'; public function get( $url, $options=array() ) { $class = $this-&gt;class_name; return $class::get( $url, $options ); } }
If your needs are met by pecl_http keep using it.
Haha, that's just the install. I'm working on setting up both PEAR and Composer support so you won't need to do so. :) Edit: Composer should now be set up, "rmccue/Requests"
Most of the time, sanitizing (removing invalid parts of the input) isn't what you actually want. Instead, *encode* content right - don't think of SQL injection as a security hole, but as a plain old bug, which just happens to open up a security vulnerability. There are two ways to encode: 1. Use interfaces of your programming language. For example, build an SQL query with prepared statements, or create an XML document with DOM functions, like this: $userInput = "a&lt;b"; $textNode = $document-&gt;createElement($userInput); $someNode-&gt;appendChild($textNode); echo $document-&gt;saveXml(); // This step will do the encoding, automatically This variant is extremely safe, since you can't really "forget" to encode text. However, it can be tedious if all you want is to write the result. 2. Use a helper function to encode user input in between the markup you write by hand, as in echo '&lt;h1&gt;' . htmlentities($userInput) . '&lt;/h1&gt;'; Here's a handy list of what to use (output: interface / helper function): **HTML text**: DOM: createTextNode / htmlspecialchars **HTML attributes**: DOM: setAttribute / htmlentities(, ENT_QUOTES) **JSON (JavaScript data)**: json_encode **SQL**: PDO prepared statements / PDO::quote **command line arguments**: escapeshellarg `strip_tags` is useless, and `htmlentities` doesn't offer any advantages over `htmlspecialchars` if your encoding is correct. 
Originally Requests was instantiated, however I felt like that was an unacceptable level of code overhead. There's no reason I should need anything but a one-liner. Regarding substituting for testing, the `transport` option is designed for that (take a look at the included tests). If you want to substitute the Requests class itself, I'd recommend abstracting away the class name (say, `$Requests::get`).
For what it's worth, there is a PECL extension for it, but it's impossible to rely on in your own software, since most users won't install it. An included one would have made this entirely redundant, so I definitely agree.
The problem with `class_alias` is that it's 5.3+ only though, so that makes it impossible to use (if I did use it, I'd convert the whole thing over to namespaces anyway). Nice to know it exists though. :)
Requests is a HTTP library, *not* a REST client. You can easily build something like this yourself though. Using file_get_contents in a simple manner like that is fine, until you hit hiccups. For example, a HTTP/1.1 response which is chunked, then you need to write a decoder. Or a gzipped response, even though you didn't ask for one. Requests is designed to hide all that and give you what you want, regardless of how spec-defying the server is.
Snoopy has a horrible API, horrible documentation, no testing and is not currently maintained. Edit: It's also LGPL licensed, which makes it a bit more unsuitable for use in commercial projects. I've taken great care with licensing in Requests, to the point of writing my own IDNA encoder, since the existing best one was LGPL licensed. (It also ended up being an order of magnitude faster, so there's that too.)
That is very true and it is definitely a two-way street. Still, PHP PDO is good to learn. 
Thanks! :)
Speaking of licensing, what is the difference between an "ISC License" and an MIT license? The wording looks identical.
The ISC license is very similar to both the MIT and new BSD licenses, it's just slightly different wording. In particular, the ISC license is a little easier to read for people who aren't familiar with the usual license jargon. MIT: &gt; Permission is hereby granted, free of charge, to any person obtaining a copy of &gt; this software and associated documentation files (the "Software"), to deal in &gt; the Software without restriction, including without limitation the rights to &gt; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies &gt; of the Software, and to permit persons to whom the Software is furnished to do &gt; so, subject to the following conditions: &gt; &gt; The above copyright notice and this permission notice shall be included in all &gt; copies or substantial portions of the Software. ISC: &gt; Permission to use, copy, modify, and/or distribute this software for any &gt; purpose with or without fee is hereby granted, provided that the above &gt; copyright notice and this permission notice appear in all copies.
Got it, so less legal wording. Thanks!
&gt;Originally Requests was instantiated, however I felt like that was an unacceptable level of code overhead. There's no reason I should need anything but a one-liner. Extremely refreshing. I often write static wrappers around classes I implement *just* so I can use it as a one liner, so it's awesome you took that route from the beginning.
My suggestion is just hire someone as a contractor. Nobody is ever going to sign on for a questionable job like this when there are quite literally, thousands of well-paying startup gigs available in every city. Your pitch has all the marks of not being promising for an engineer: * Just an idea. No product. Ideas dime a dozen. Good ideas included. * Not even a good idea. Tools for a company to monitor their brand and reply to consumers? Numerous of those exist already. * You better be offering a whole lot more equity for your #3 founding employee, the one who actually makes it a reality, than the **chance** at "few pennies". * Any company will be "interested" to a receptive idea. That does not mean they will buy your idea or your shitty demo if it gets that far. * "PHP Guy"? -- You've already said neither you nor your business partner understand tech. Why do you think it has to be PHP? For what it's worth, the [/r/ruby](http://www.reddit.com/r/ruby) or [/r/nodejs](http://www.reddit.com/r/nodejs) kids are far more receptive to bullshit startup ideas. * You compared yourself to FB. Seriously? Save yourself the embarrassment and just hire someone as a contractor.
Not yet, but that's [on my todo list](https://github.com/rmccue/Requests/issues/1). :)
+1, I also think it's much easier to write a static -&gt; dynamic converter than a dynamic -&gt; static one.
As I said in my previous comment, it does depend what you're building - if you're making something very custom that has crazy authentication routines or the like, then you may have to replace/override parts (which literally just means creating a class with the same name as the framework one, and putting your own code in it). I've found that CakePHP does cover most eventualities though, and the only thing I had to replace in my project was the access control component, since we wanted something quite unique.
 wget -O- https://github.com/rmccue/Requests/tarball/v1.5 | tar xzv FTFY
And [now it does](https://github.com/rmccue/Requests/commit/c1f049bc5dcb4db6d8fc7338bdb41d8e2ef9c173).
[Read this book.](http://www.amazon.com/exec/obidos/ASIN/059600656X/ref=nosim/chrisshiflett-20) It's seriously only about 30 pages long, and very succinctly covers the most important things you need to know with regards to writing secure code in PHP. See [here](http://phpsecurity.org/contents) for table of contents.
Out of curiosity, are you thinking about baking support for asynchronous requests? curl can do it, but if ordinary curl requests are considered obscure, async curl code is downright voodoo. In that a few folks long ago figured out how to make it mostly work, and everybody's been copy-pasting their code religiously ever since. async requests would probably return something other than a request_response, users would have to call another function to start the waiting across multiple requests, preferably with a function argument that gets called as much as possible while waiting. Anyway, congrats on a good looking library. 
How exactly do you expect them to stay in business. Upgrades in their case even means a new major version, so I don't see what's bad in it.
Of course it's possible to learn it by yourself. Just pick up a good book and stick with it, you should be fine. Avoid those who say "PHP 6" in the cover, the authors might not know what they're talking about. The documentation is great too, you'll learn a lot from it. To look for a function simply visit php.net/function-name, there are examples to help you understand better and also some useful contributions from other developpers.
My pitch was intended to be slightly funny. 1) Everything starts with an idea. You then find the right people that believe in the idea and you build upon the idea. 2) I can see here that you didn't really understand what I was talking about. Yes, there is Hootsuite, SproutSocial, Radian6 and others. Yet, NONE of them mitigate a brands risk in social media from someone posting something they shouldnt. Do you know what it costs a company for a social media fail? I do, $4.2MM. Put a solution in place that will assist them mitigate that risk and still engage and get back analytics now thats different. 3) Yes, there would be equity. This person would be a co-founder 4) Interest and deeper discussions that have taken place show validity in the overall concept. If none of these companies were interested then it would be time to move on. Your right, it doesn't mean they'll buy. But, you at least have to build it and see right. 5) BS startup ideas, did we get burned at a startup? Who pissed in your cereal before you commented? I've spent 15 years in tech, am I a programmer? Nope, can I write html5, css3, jquery yup. I architect the user experience that people want to use. I design the UI that makes site, web apps, mobile apps and more usable. Does that mean I have the skill set to fully build whats needed, nope. It does mean that as a founder I know my limitations and am looking to surround myself with people that know more then I do and as a TEAM we can pull it off. Could it be built on ruby or nodejs. Sure, I can tell someone what the solution needs to do. How it needs to scale and if they suggest a better solution then we're all ears. 6) I made an indirect comparison in the fact that at first FB couldnt predict the future. A lot of founders know what they would like to happen. But can't say for a certainty "this IS what's going to happen." Yet, when I see that a mobile app company that built an app to find the best car wash in town gets $1.5MM in funding. I have to say to my self, huh? Now to me that's a BS idea. If you want to know more then please feel free to reach out to me. Send me a PM and I'll give you my number. I'll explain the concept to you and then you can still tell me that it's BS if you want to. I'm a big boy. 
You may wish to follow the same method you used to get yourself happy with HTML+CSS+jQ. I've never read an interesting programming book, and they've never taught me a concept that I couldn't have understood by snuffling around open source software. You could explore some projects on [Github](https://github.com/search?type=Repositories&amp;language=PHP&amp;q=php&amp;repo=&amp;langOverride=&amp;x=1&amp;y=15&amp;start_value=1) and see how they do things. Download something, get it up and running, then repeatedly break it until you understand it. I learned HTML+JS+CSS via right-click-view-source and PHP on 'useful functions' and example sites. If you're a book learner, remember your local library before you start spending. There may even be a local [PHP users group](http://www.phpusergroups.org/groups.phtml?menu=groups) with someone willing to take you under their wing or lend books they've surpassed. I can't recommend specific books as I don't like them, but remember one book that may be great for Alice could be gobbledygook to Bob. Don't get disheartened if you can't understand a book, explore some others. Never give up, Never surrender!
Indeed and it will also allow autocomplete on the var.
You could use PHP's type hinding: $test-&gt;foo_lambda(function() use(test $test) { echo $test-&gt;foo(); }); 
Have you considered using a tool such as [wget](http://www.gnu.org/software/wget/) or [curl](http://curl.haxx.se/) to create a mirror of your site? If you use the [recursive switch](http://www.editcorp.com/Personal/Lars_Appel/wget/v1/wget_3.html#SEC13), you can make sure it downloads all the pages linked from a given page as well.
well, if you use echo commands to push the content into html, then instead of echo use: file_put_contents($file, $echoed, FILE_APPEND), where $file is the name of the file you want to create and $echoed is the string the echo command would usually output.
I prefer the look of [fitzgerald](https://github.com/jim/fitzgerald), it's a shame it doesn't have a maintainer at the moment :(
Apparently the comment I agree with on that discussion page was downvoted: ivosaurus &gt; To me, that title just means it will do nothing for me, and I'll have to find custom components / code for all the normal things one is apt to want to do in a webapp. 
Exactly why, is it that you don't use the Save-function in your browser? The next best would probably be ob_get_contents().
Which would be more helpful in code, though? As in, if someone reads the code besides you... date('c'); or... date(DateTime::ISO8601); // or date(DATE_ISO8601); ?
I'm with Nicoon here, could you describe your possible solution step by step?
Exactly why I didn't buy. Fuck annual licenses for software.
Why is it that every time someone posts code in this subreddit, people have to tear it to shreds? I hope OP isn't the author, if he was he'd probably feel awful.
because using the save function in my browser across 15-20, sometimes 30-50 pages is slow and time-consuming. Plus, using the Save button has no learning curve for me. I like to learn new things.
Perfectly reasonably answer. :) wget is probably the way to do it, if you want to spend as little time as possible on it.
I didn't to come off as to professional. Wanted to be friendly and strike up a conversation first. Notes taken. When the solution is built there will specific IP that belongs to us. Can another company add this in. They could, yet they've failed to do so. I do see your point, but just as other companies provide analytics in the social space. Others felt they could improve upon that. They looked at their competitors and innovated around them. We're doing the same thing. We'll be able to provide social analytics, feedback, mentions, followers, top influencers (we're even doing something different there as well). But for us the reporting back of what's happening in social space is just one part of the greater whole we intend to build. Thank you for the feedback, it's good for a founder to hear it being harsh. I'll learn from the exchange. Now that you know that, happen to know someone I can recruit as a possible co-founder? 
Singletons everywhere!!
Okay, im going to explain my story again. Im making a program for my users using Visual Basic 2010 Express Edition. One thing that is implemented in my program is something called "user experiance" Its kinda like a side function that records all the things my user does, im doing this because maybe i can get more information about how my users use my program and such. After a certain amount of time, the program saves a .TXT file located in a file on the users hard drive, this .TXT file with be with other files. My program will then compress the text file into a .zip file. The only trouble is actually uploading the .TXT file. I need a way to upload it without putting any FTP details so no hacker can access the database. Any help?
And it's not disk seeking when loading code? 
Really? Then this IDE is completely useless to me.
Autoload is actually the standard method for loading classes in any project, and the linked microframework uses it. And you're right, with the use of autoloaders there's no need to pre-load plugins, unless of course those plugins are changing the behavior of the built in classes, pre-creating them before the autoload kicks in (why a developer would do this, hell if I know). However, pretty much every autoloader performs two IO tasks for every class they load - one to test if the class file actually exists, and then another to load it - so realistically I don't see why a directory scan is such an intensive task that it should be prohibitive to do it with each request. It's not even a recursive scan...
Nice news, we'll be doing some benchmarks on the Cake framework once the stable version is released to see if its worth doing an upgrade in production. Will post the results.
I agree that it's probably not that big of a deal. In my project, I load all my classes into memory with APC or eAccelerator and turn off all automatic disk checks. This means my application doesn't hit the disk at all during it's run. 
Because opcode caches can store these files in memory without loading and reparsing them on every request, but this directory traversal method forces a disk seek, even if the files are cached.
Looks like the OP is the author, but I'm sure he posted his code to get useful feedback, and not just congratulations and hugs. 
Why not rip the whole php site to html files in one operation? http://www.httrack.com/
If you used ACL then you could see if the currently logged in user had permission to delete clients.
You're basically double namespacing: namespace Serenity; class SerenityAppController { } so I have to type new \Serenity\SerenityAppController() rather than just new \Serenity\AppController() Some questions: Why is everything a singleton? What if I need to talk to 2 databases? Why is every singleton instantiated regardless of whether it's required or not? Instead of using singletons, have a look at the Registry Pattern: http://martinfowler.com/eaaCatalog/registry.html You could look at how frameworks such as Yii implement this to allow lazy loading, rather than loading everything upfront even if it's not required
I use Netbeans, it has a couple of niggles ( the "" handling in HTML files drives me fucking crazy) but it has excellent code completion and handles large PHP codebases fine (Drupal mostly) and works well on Linux. I've tried the others (and stuff like vim) but always end up back on Netbeans, it's simply a nice IDE.
Thanks for the PDO tutorial. I've been using the mysql functions and I guess that's now outdated.
Alternatively if you have [wget](http://www.gnu.org/software/wget/) you can just do `wget -m http://my-website.com/`
The salt grain: http://stackoverflow.com/questions/1396501/do-php-opcode-cache-work-with-autoload/1397160#1397160
if you have shell access and command line php installed you could probably do this with a shell script with something like this for each file php index.php &gt; index.html 
Potencier uses the craziest names (yeah, like "pimple").
this function will probably be inside a webpage or webapp, so I'll prolly just use curl, since i wont have command line access, and i'm not the only one that will need to be able to use it. 
past* Also change the font to something other than the default on the main page thing if you're doing it other places.
Personally, I still think phpstorm beats Netbeans. And as it's only ~EUR 90 it isn't that big of a deal.
Are you saying there is a typo some where? I am not real happy with the font either one of the reasons why I plan on getting a professional to do a redesign.
Congratulations! Here are some of my thoughts after a brief look through: Use an autoloader, so that you can load everything as it's needed, rather than all at once. Using style.css is pretty ambiguous. It should be named more purpose specific, i.e. admin_style.css UserModel::init() is specifying data for fields that is accessible via the database structure. Not sure if you are generating DB structure from this code, but if not, you can easily build those forms from the DB structure (see SQL Describe Command) In a real MVC scenario, you shouldn't be querying data from your Views (Pages, in your case). The View should ask the Model for a list, and the Model should be the only part querying the database. Just some thoughts... Good luck and happy coding
Upboat for learning new stuff!
You overuse both singletons and static methods. Both make it VERY hard to unit test things. The registry pattern is ... okay, but also tends toward difficult to unit test. Nothing about the registry MAKES you follow bad unit testing practices, but it's sortof a slippery slope. I've never personally see someone stay on the good path when following registry pattern. Lazy loading is good all around.
Yes, it can be. The problem mostly comes in because it's very difficult to tell what things *need* to be in the registry when testing a given module. With DI you can tell via function signatures.
Agreed, I've done similar with PEAR. My real meaning was that hard coding database constraints in the model and then specifying them in the database as well is not the way it should be done.
It's probably not worth the effort unless you really saw a performance penalty, but you could have a dual solution where it: 1. Looks for "plugins.php" and load from it if it's there. 2. If no plugins.php, scan directory as usual 3. (Optionally) create plugins.php based on initial directory scan. You'd have to manually trigger the plugins.php update whenever new plugins came in though which would be a pain. 
The typo is in the title of this Reddit post.
If you cache the database schema the disadvantage of this approach goes away, the problem with code generation is the overhead of the extra classes, you need 2 classes for each model. And it's a real pain in development to have to regenerate every time you change a db field.
haha oh OK I was looking all over the site to see where I screwed up. Never occurred to me it was in the title of this post. (Of course the one place I can't fix.)
I should also note that some things, like Doctrine, allow you to do both. There's a method that gets called that by default looks at the database and figures out the columns. You can override that and just provide the structure. So you can have the fast at dev time and then only build the code-based database structure right before final tests and deployment.
I use Netbeans for full projects, but if I just have to open a random file I use Notepad++. IDEs are always clumsy for the ad hoc stuff, and I don't think that's going to change any time soon.
Configuration files aren't evil, massive or multiple config files are evil. You can have a very simple php based config called, e.g. config.php: &lt;?php return array( "name" =&gt; "My Awesome Web App", "hooks" =&gt; array( /* your hooks config goes here */) ); and then you can load that in your app: $config = include("config.php"); and you still have a simple, easy to extend framework, that happens to have one config file (no big deal). This include is cached by APC because it's a php file, not a .ini or whatever, so no disk seeks or directory scans required. It'll be a lot faster.
I was also able to finish the process. Here are my thoughts/suggestions: * I'm logged in and still need to perform captcha on new code reviews. * I don't see any way to access past reviews I've created. * Maybe implement a "open for public review" flag and give users the ability to browse those public reviews? * Clicking on my username should probably do something but it doesn't seem to just yet. Anyway... just my two cents. Off to a great start. Keep us updated. 
Cache the schema forever in production. In development you turn schema caching off so you're free to make your changes and have them instantly reflected in the site. For deploying db changes to live code, you're probably using migrations anyway, so your migration system can clear the schema cache as part of that.
What's the problem with having the migration system generate the base classes? Though I suppose as long as you are using migrations and put it in your migration system your system doesn't have any horrible side-effects, depending on how mature the code is that handles the caching. 
battle tested for 4yrs, it's pretty solid: http://www.yiiframework.com/doc/api/1.1/CCache
So then do you have logic spread around for what happens when you call -&gt;get() and it doesn't have the item? That seems like it would be incredibly annoying if there's not a good, generic, way to handle that.
I'm not sure if Idea still has its licensing based on major versions but I suspect at the very least their less popular products moved to year subscriptions because anything else isn't worth their time. I've not used PHPStorm but PyCharm is definitely worth it. That and if you're happy with what you got at the end of the year and don't need upgrades then don't get them and use what you have.
nope, that's taken care of, it uses the SQL as a cache key. In Yii I can do this: $rows = Yii::app()-&gt;db-&gt;cache(60)-&gt;createCommand("SELECT * FROM foo")-&gt;queryAll(); and that will cache the result for 60 seconds. Using active record, I can do this: $user = User::model()-&gt;cache(60)-&gt;findByPk(1); And that will load the user with an id of 1 and cache the result for 60 seconds. So it's basically painless to use. If I need to invalidate the cache when a user updates their profile or whatever I can use a cache dependency to handle that automatically.
Then I officially consider this a case where your way is as good as mine. Huzzah, multiple ways to achieve the same result!
https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
Good point about the namespace. I started the project without namespaces initially. I'll go through and clean up the names for the next update.
I updated the example app to give a better example of the models. There is a backend command to auto generate the base models from your database. Modifications to the models are done on the child model. Any time you make a change to your schema you can regenerate your base models with a single click.
I have an htaccess file to remove the index.php. Never gave much thought to turning that listing off for my assets. Good catch!
There might be better ways, but all that came to my mind is to use eval() on the PHP file's contents, then put the result in an HTML page. Since eval will display it directly, you might wanna use ob_get_contents() (as i_am_at_work suggested) to capture it then put it in an appropriate HTML file. You can easily write a PHP script that goes through the PHP pages on your server and produces .html files with the same name. Edit : After some reading I found out this solution isn't practical since the string passed to eval shouldn't contain PHP tags.
good ole -m
&gt; curl is available on all major Linux distributions and is enabled by default on every build of PHP I've ever seen. Sounds like you've been fairly lucky then! :) I've got nothing against Guzzle at all, so if you prefer it, use it! I personally need 5.2 support (5.3 and 5.4 are not ubiquitous enough, unfortunately). I'm working on adding several of the things that you mentioned as well. :)
Your actual problem is that anybody can delete data, not that anybody can discover the URLs to do so. If you address the former (require valid user, check to see if they should be deleting things) then the latter is a non-issue. zxide's comment about the security hole probably refers to you simply making it harder to exploit the problem rather than preventing it.
Lithium makes me feel better, but cake tastes better.
If you work at a company using Linux, odds are good that curl is installed. If you're provisioning a server, it isn't hard to use a package manager to install it (apt, yum, etc). It's rather common for curl to be enabled on shared hosts (e.g. GoDaddy, hostgator, dream host, ServerGroove, etc). However, a common problem here is that open_basedir restrictions may be in place which prevent you from using CURLOPT_FOLLOWLOCATION (redirect support). &gt; 5.3 and 5.4 are not ubiquitous enough, unfortunately From a quick search, here's a list of shared hosting providers that support PHP 5.3: http://nephtaliproject.com/php53hosts/index.php. The sooner people start migrating from PHP 5.2 to PHP 5.3+ the better PHP will be. A large number of major PHP frameworks have already migrated to PHP 5.3 or are actively working towards migrating. With all that said, if I had to use PHP 5.2, I would definitely consider using Requests. It's obvious you've put a lot of time into the library. Congrats on the release!
Magento is probably at the top of the pack these days. I've also used OS Commerce, Zen Cart and the Wordpress E-commerce plugin, all of which are *pretty* good.
This is exactly what I was going to say as well. As a framework developer myself, it's really easy to pick things apart:) I think you might want to add a bit to your readme about your goals of this framework and usage examples... 
you should really just disable directory listing sitewide first, then enable as-needed (if needed).. It's safer that way, and you don't need to think about excluding another directory if you make a new folder for "other-kinds-of-assets" or what have you.
i like the javascript pop-up for logging in
The best way to identify problems is to ask what's wrong, always understand criticism is pure gold, validation is comparatively worthless. This isn't directed at you in particular I just though it'd be a nice supplement to your comment.
OpenCart?
Thanks, it's using facebox to do that. 
I agree about Magento - it is a *good* PHP based solution. It is also a beast. You can do anything with it. It is incredibly flexible. But unless you are comfortable editing XML configurations and are familiar with MVC (Zend Framework) you may want something different. WP E-Commerce Gold (something like $75, I think) is very good.
Cake. Think of all the time you'll save when writing out namespaces. Serious question though: Why do you say it's what became of Cake 3 when Cake 2.1 is only in beta?
It was written by one of the google engineers in their blog. I really don't care to go find it for someone who is not going to appreciate the effort. Even if I am completely wrong, you would do yourself a lot better to not be a condescending asshole to fellow developers.
You miss-interpreted my comment.
One recommendation: Make the comment boxes more transparent, like 70% opacity, because the focus is on the code. Make the comment box 100% opacity on mouseover.
Should be noted that PHP's http stream wrapper does support chunked transfer decoding as of PHP 5.3: http://www.php.net/manual/en/context.http.php
Ah, good to hear!
[No.](http://blog.visionsource.org/2010/01/28/opencart-csrf-vulnerability/) [No.](http://forum.opencart.com/viewtopic.php?p=72582)
Another vote for Magento.... OScommerce is good too, just seems a bit dated nowadays imo.
Eh? I don't think its awful, its just a different approach to the same problem. I personally like multiple inheritance more, because I have never used traits, but they seem like they fit the bill easily enough, and I am always up to learning new pardagrims.
you know what? I didn't think of a hosted service like shopify. that might be perfect. thanks for the great idea. If they can get over a monthly fee... but I guess they'd be paying something to take credit card transactions online. I think they might think they'd do 100k in sales, but I doubt it... it's kind of a niche product they're selling.
wow. (second link) admin seems like a dick. reason enough not to deal with them.
it's a keyword, not syntax. :-P 
Magento
What is the source of the data? If it's coming out of a SQL DB, you wanna do this in SQL not PHP. You will want 'sum' and 'group by' ...
Probably using a GET where a POST should be.
This is really slick! Bookmarked.
When you say a list, what do you mean? An array? A database result? A file?
The source of the data is actually being parsed from an HTML file using preg_match_all based on various html elements of the tables containing the data. I was hoping to perhaps do this using arrays, but it seems that the easiest way at this point is to parse the data, drop it in a SQL database and then pull it back out in a much easier (and cleaner?) code.
One size never fits all, but I use the [Data Transfer Object pattern.](http://en.wikipedia.org/wiki/Data_Transfer_Object) Typically, my "model" for a ticket would consist of two parts: Ticket Data Transfer Object (DTO): A DTO class for a ticket would have no code other than properties to hold data about a ticket. Ticket Data Access Object (DAO): Performs functions that accept or return one or more ticket DTOs. This would include functions for validation, filtering, and database operations. By structuring it so that the DTO *is a* ticket, and the DAO *handles* tickets, the design pattern supports having a method returning multiple tickets, or a method like getTicketsForCustomerId(). Additional benefits include: * DTOs are lightweight and can be passed around easily (to a view, for instance) * The DAO can easily be turned into a Web service with a few lines of Zend framework code. Hope that helps.
Actually you can hide a group of comments by clicking the red tab on the side. If you would rather hide all comments you can click the blue comment count at the top of the code section. 
Actually I was stupidly caching the page with the captcha. So when you logged in the cached page from when you weren't logged in was being served up. I have a fix locally but until I push the files up to the server I just turned off caching. 
It's not code that's meant to be copied verbatim. $_dbAbstraction is used here as a comment about what the object is rather than a suggested name. The example is meant as pseudocode to give OP a rough idea of how factories work. If you were actually using this pattern, then you'd have something like $_pdo or $_orm or whatever you choose to abstract away the database details.
The idea is good, the styles could use some work. http://i.imgur.com/rj8m3.png Why is that scrollbar there? (Opera) Set a default font as well, it looks really bad as default.
Is this not something that many ORMs already do?
With shell_exec you can invoke the wget...
Traits look awesome. it seems like this will do away with the need to extend "base" classes for simple functionality all classes need to have. Best new feature since late static binding IMO.
**NSFW** Gah, I assume something's broken/hacked? I just got a goatse on the right **NSFW**
Careful parsing html with regular expressions. Actually, don't be careful, don't do it. Lot's of programmers do, bit it's really best left to a DOM parser. Malformed HTML shows up **everywhere** in **everyone's** code, and it will eventually break for all but the simplest of HTML. I'd check out [this](http://www.php4every1.com/tutorials/php-domdocument-tutorial/) tutorial to learn the best practice. Regarding your problem, i'd do something like $item_qtys = array(); foreach($items as $i =&gt; $sku) { if(isset($item_qtys[$sku])){ $item_qtys[$sku] += $qtys[$sku]; } else { $item_qtys[$sku] = $qtys; } } assuming that you have an array of items parallel to an array of quantities. implementation will vary depending on your data structure. Anyway, something like this will consolidate dupilcates and you can access quantities based on an item number just by calling the key of the $item_qtys hash.
I like this, but why would `find` modify a parameter rather than return a new `Ticket`?
I don't get it. Class names are unknown? How does that matter for autoloading? Use a convention: every class in that folder is "Plugin_&lt;filename_w\o_extension&gt;". I must not be getting it. Moreover, you could use events, so you can keep your framework as small as possible, but we can extend it as much as we'd want.
Oh right, gotcha. Sweet as.
A nice article about sql injection. http://www.webappsec.org/projects/articles/091007.txt
I think it's a placeholder.
Same in FF
I'll add that DTOs are great for reducing remote method calls and response time in a system with distributed or remote data store (which is what they were designed for!). It might be worth using them from the start if you think your app might ever need to scale up or connect over lines with latency issues. I refactored them into a project a few years ago and it sped things up considerably.
Goatse in advert-banner. Wat?
I'm viewing from work. It doesn't matter if its a placeholder or not, its still NSFW. There are a [variety](http://placehold.it/) of [other](http://placekitten.com/), more suitable services available.
or alternatively $id = $_GET["quiz_id"];
https://raw.github.com/php-fig/fig-standards/master/accepted/PSR-0.md Note that due to the (idiotic) decision to use the common escape character 'backslash' as namespace delimiters, the markdown formatting is broken on PSR-0 in github. There are multiple pull requests asking for the markdown to be corrected, but no response. The Raw output is easier to understand for now.
The options trait looks broken. Take a look at a nicer implementation of a similer feature that can be written as a trait - [AgaviParameterHolder](http://trac.agavi.org/browser/tags/1.0.7/src/util/AgaviParameterHolder.class.php) and [AgaviAttributeHolder](http://trac.agavi.org/browser/tags/1.0.7/src/util/AgaviAttributeHolder.class.php) which also have namespaces 
I'm assuming it's a prank, not that I stayed long enough to find out. Even pains me to downvote the OP so somebody else doesn't wince like I did, since it's the middle of the night and there's no update. Appreciate those links though, TIL and those are going to be handy.
I still don't get what's wrong with using "\" for namespaces. Can someone explain this to me?
Whoaaaaaa, that's not good. That's drupal-ish. Use events or array mappings like @phpnode suggested above. Maybe you could use some kind of plugin subscriber (again, I'm talking pub/sub here), where you could register a subscriber. Something like [this](http://pastebin.com/WkbgXVGw).
ohh, and you forgot the ; after $id in the same snippet. "&lt;a href=deleted.php?quiz_id=&lt;? echo $id ?&gt;&gt;Yes&lt;/a&gt; | &lt;a href="allrecords.php"&gt;No&lt;/a&gt;" should be "&lt;a href=deleted.php?id=&lt;?php echo $id; ?&gt;&gt;Yes&lt;/a&gt; | &lt;a href="allrecords.php"&gt;No&lt;/a&gt;"
Your lack of attention to detail is disheartening.
wish I'd read this earlier
 $output = $ArrayB; foreach ($ArrayA as $id) { if (!array_key_exists($id, $ArrayB)) { $output[$id] = 0; } } Edit: added missing closing bracket
webdevradio did an interview with nate and gwoo a couple years ago when this was in earlier stages... http://bit.ly/9JcSKu disclaimer - that's my podcast
Looks like your original question's been answered but I just thought I'd point out there's a big SQL injection vulnerability in your code as you're not escaping the ID value. If the id is always numberic the easiest thing to do would be: $id = (int) $_GET['id']; This would also solve an XSS vulnerability on the first page.
array_merge( $ArrayB, array_fill_keys($ArrayA, 0) ); That's assuming you don't have any values in B that aren't already in A, if that's the case you'll have to do an intersection first.
Thank you. For a second I thought this doesn't work but there was a slight error with my database. This is ... suprisingly easy and small snippet, as well as useful. Thanks a lot.
I realize that you already have a PHP solution, but you said that they are tables. are these in SQL?
What has that got to do with using the word 'insteadof'
These values are fetched from 2 MySQL-databases to these arrays. If you're about to say that this can be done by using a MySQL-query - that is out of the question, since the database is split in 2 databases and I need to do it the stupid way like this.
I don't see this on Windows 7. Could it be OS specific?
Server and daemon configuration and maintenance, memcache, redis, mongo, *sql, Amazon services (AWS, S3, etc)...
Multiple Design Patterns, HTML/CSS/JS, AWS, MySQL, NoSQL
Upvote, I forgot about that :- ssh combined with rsync alone saves hours a month :)
I switched to phpstorm from netbeans. phpstorm feels a lot more responsive for one, the code completion is better out of the box, and the code formatter is really good. I also liked the git gui in phpstorm better than netbeans, but thats a very personal preference.
Learn about databases. Specifically joins, relations, transactions and prepared statements. Operating systems and their command syntaxes. Knowing a bit of c will help you understand how php works and helps your understanding of more complex functions in php. Knowing how object oriented code works and has to be made will clean up your code and will make some of your code reusable. Design patterns are important, learn multiple and more specifically learn about the pros and cons of them. Know a lot about apache, it is fast as hell and a lot of basic things can be handled by apache. learn how the filesystems work, optimizing data storage can save you loads of storage in some projects and will give massive speedups (IO transactions are slow and lock files). Develop an intuitive directory structure so you can find your code. Learn to document your work. Start using version management software. Learn how to extract data from other sources (devices or online places). No need to remake existing products. Learn a bit of formal logic and how to transform natural language to formal logic to code. Client side languages are important, learn to optimize for them. Learn about improving execution times based on expected loads and hardware, do not however focus on microsecond improvements. Learn about caching, preloading and preparing data on less busy moments to shift and level out the required performance. This will save you hardware.
This is how you would do it: &lt;form action="URLYOUAREPOSTINGTOHERE" method="POST"&gt; &lt;input type="submit" name="submit_value" value="42" id="submitButton"/&gt; &lt;/form&gt; For the CSS you would do: #submitButton { background-image:url('PATH/TO/IMAGE.JPG'); background-color:transparent; border:0; } Edit the variables/css properties as needed.
you can join across databases. http://www.shawnhogan.com/2005/12/cross-database-join-with-mysql.html 
- HTML/CSS: In most cases, your PHP products will output some sort of HTML. If you know HTML, it'll make working together with frontend developers a lot less painful. - Social skills: You should try to be good at listening to people, and understand that the words they're saying aren't necessarily the same things as what they really need. If you're good at expressing yourself verbally, it'll make dealings with clients (both internal project-managers or 'real' clients) much easier. 
As a long time cake user ... you should use yii.
I see all the usual basics covered, but I *always* recommend that PHP developers learn another language besides PHP. Nothing will improve your PHP as much as learning something like Ruby on Rails, which is domain-relevant and will teach you different, non-PHP patterns for solving problems. With any luck, it'll teach you some good practice habits, as well - since PHP tends to just give you enough rope to hang yourself.
I'd go for git, it's the new black. You can get a free account at [github](http://github.com), this can also work as code portfolio.
If you identify yourself as a "website developer", know PHP+C+Java+.Net+JS+HTML+CSS, but they code in Ruby, you're not a _useful_ website developer. If you bill yourself as "Ruby Developer" the employer knows what they're buying, and will ask about HTML+CSS+JS. Plus personally, I really like PHP. I've tried others, but PHP is where I'm most confident. If an entire company were to suddenly decide to switch from PHP to .Net, that would be hella weird, and a bigger red flag to me. Sure, I could learn it, but I wouldn't be an expert and who knows if they'd stick with it long enough for me to become competent? I really don't get this "you aren't a _real_ programmer until you can build a missile control system in literally _every_ language" mentality.
Protocols (HTTP(S), FTP, features and security-danger-zones(think about cookies and sessionstealing)), hashing/salting (how do I store passwords securely? Which passwords should I accept as secure enough?) How to learn about that stuff... Hmh, to be honest I don't know the perfect way, what I know I learned by poking around and attending conferences
Sorry about that it was a hack and has since been fixed and the images removed.
It was not a placeholder the site was hacked. It has since been fixed and the offending images removed.
I don't think you can truly master JS (or jQuery) working in the DOM without having a thorough understanding of HTML and CSS. HTML and CSS are very simple, so I don't think there's a valid reason for any web developer not to understand them.
I am not really sure why the scroll bar is there I will investigate that. Thanks for the input.
Welp, at least you learned about a security hole.
The site was hacked. It is fixed now.
The site was hacked. It is fixed now.
&gt; I really don't get this "you aren't a real programmer until you can build a missile control system in literally every language" mentality. That's not at all what I was saying but thanks for putting words in my mouth. If you identify yourself as a "Ruby Developer" but you know lots of other languages, then the potential employer *doesn't* know what they are getting, because you are not giving them a full picture. When I see someone bill themselves as a "Ruby Developer" it tells me that they not only know Ruby (or think they do), but that they are most comfortable in Ruby and prefer to work in Ruby. It has all kinds of connotations that may or may not be applicable to that person. If someone instead represents themselves as a "Web Developer" (if someone wrote "Website Developer" I'd think they are either under the age of 18 or over the age of 50), and merely lists out the languages they proficient with (and familiar with, etc.) that tells me that they are language agnostic and have experience working in X different languages, and will be able to shift as necessary for given projects. 
This should not be downvoted. People should see this.
I left a C# job and moved to PHP. Wasn't that weird. Both worlds are pretty similar, I missed Visual Studio and some of the cooler things C# can do. But NetBeans almost makes up it.
Version control is really easy to teach someone if they've never used it before. C/C++ and pointers are totally unnecessary to writing PHP. Yes having that experience is a good thing but he was asking what *should* they know, not what's the ideal set of skills. Likewise all the systems administration skills (setting up and configuring LAMP stack, etc.) are in the ideal set but not necessary to be a decent web developer.
A good programmer doesn't just learn languages based on what you think you're going to be making money off of. This is one of the key things I look for when looking to hire someone. If you said that to me in an interview I'd almost certainly pass on you because you're clearly not really interested in programming. If it's "just a job" to you and not something you are actually interested in, something you pursue on your own time, then I probably don't want to work with you.
Oh sure, no. That stuff isn't strictly necessary, and it's really easy to look up if it's applicable to your project. I think most people don't know those details of the top of their heads.
Kind of relating to the database stuff in your post, it helps a lot to know how to properly set up a database with the correct data types (as an example, storing the unix epoch as an integer instead of a proper date as a DATETIME data type), field sizes and then to normalize the entire schema. I generally only normalize to 3NF, but I believe it goes all the way up to 6NF.
In my experience, most recruiters don't know a ton about programming and are simply scanning for key words on a resume anyway. When I hire people, I like people who make it easy for me to tell what they are more proficient at. You may as well make it easy to understand what they are getting rather than bullshitting around with them by saying you're competent at alot of things but an expert at none.
I concur. I use Doctrine in its simplest form. It takes all the pain out of the basic CRUD handling and database querying. It even has paginating and other niceties. 
Read these: * [Drawing on the Right Side of the Brain](http://www.amazon.com/New-Drawing-Right-Side-Brain/dp/0874774195/ref=sr_1_1?ie=UTF8&amp;qid=1328808822&amp;sr=8-1) -- Learn how to focus the artistic side of your mind. The benefits you reap in web development will surprise you. * [Design of Everyday Things](http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0465067107/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1328808845&amp;sr=1-1) -- Learn the basics of designing [stuff] * [On Writing Well](http://www.amazon.com/Writing-Well-30th-Anniversary-Nonfiction/dp/0060891548/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1328808858&amp;sr=1-1) -- Learn how to write better. Documentation, emails, cover letters, website copy, etc * [I will teach you to be rich](http://www.amazon.com/Will-Teach-You-Be-Rich/dp/0761147489/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1328808870&amp;sr=1-1) -- Learn how to manage your fat stack of cash you make from web development * [Mythical Man Month](http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?ie=UTF8&amp;qid=1328808895&amp;sr=8-1) -- Learn how big projects work and why adding people isn't always the best choice Read each of these they all provide extremely valuable information.
What do you mean exactly by bars? Do you mean all physical bars (like places you drink at) on the map? In which case, something like this: &lt;?php // Connect to database server $con = mysql_connect('localhost', 'root', ''); if(!$con) { die(mysql_error()); } // Select the relevant database $sel = mysql_select_db('database_name', $con); if(!$sel) { die ('mysql_error()); } // Query the database $sql = "SELECT name, address FROM markers WHERE type = 'bar'"; $result = mysql_query($sql); if (!$result) { die(mysql_error()); } echo "&lt;table&gt;"; echo "&lt;tr&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Address&lt;/td&gt;&lt;/tr&gt;"; // Loop through all results while($row = mysql_fetch_assoc($result)) { echo "&lt;tr&gt;&lt;td&gt;" . $row['name'] ."&lt;/td&gt;&lt;td&gt;" . $row['address'] ."&lt;/td&gt;&lt;/tr&gt;"; } echo "&lt;/table&gt;"; // Close database connection mysql_close(); ?&gt; Note that my table markup is a bit dodgey, I just compacted it to show you.
Hi, thanks for the support. I understand that php, as a daemon, is running. What puzzles me is the under reported difference in working between the two versions. With the 5.2, the upload can last five, ten or thirty minutes, but the max_input_time is still 120 seconds. I think that this will remain a mistery and the pratical solution will be an enough big value for both times (the file sizes are already fitting). 
&gt;MySQL Workbench Only recently though. It's still very buggy on OSX but before it was unusable.
Apologies for putting words in your mouth, you looked to be expressing the same sentiment as many before you. So by that, would you agree that if someone actually _is_ a PHP developer, they should put that? Why should that raise red flags? For reference: * Java at university (mainly to teach us OO, inheritance, etc) then dropped it like a over-engineered, bloated brick * PHP is my preferred language * BASh is lovely, but not for web * HTML+CSS+JS is assumed, its web dev after all * No real interest in node.js * 25 years old ( I'm not sure if I should feel mature or immature :) ) * Working in the UK (where the majority of job specs worth looking at are language-specific, eg "PHP Developer") 
http://php.net/substr
http://php.net/manual/en/function.substr.php
I got my current job from an add for "Junior PHP developer". Here are the things I have to deal with on a daily basis: * mysql * linux stuff (cron, grep etc. in bash over ssh connection) * classic ASP with VisualBasic :( * javascript / JSON 
I'd take it one step further, install a VM and build your own LAMP stack and play around with administration. When you understand the capabilities of your foundation, it allows you to push the project's architecture and design.
if you had read the article , you would understand why it is **not** even close to "best practice".
these could be of service to you, fairly language agnostic though. http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication http://stackoverflow.com/questions/621884/database-development-mistakes-made-by-application-developers 
There is no flaw with their multiple inheritance although there might be a flaw with multiple inheritance in general. 
PHP developer must have advanced skills in: - **SQL** and experience in work with mysql and postgresql - pure **javascript** and knowledge of more then one JS library - ability to work with at least one VCS ( be it git, svn or some other ) Additionally said developer should have some skills in: - **CSS/HTML** ( in larger companies it is done by separate devel ) - Linux or BSD **server administration** .. to know his way around Also you need understanding of OOP principles. Book you should have read would be : - [SQL Antipatterns](http://pragprog.com/book/bksqla/sql-antipatterns) - [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) And watch the lecture series from Douglas Crockford : http://yuiblog.com/crockford
get a real computer?
http://us2.php.net/filter_var
not an IDE.
I used to develop PHP applications on windows. Then I tried mac, finally I moved to linux so I would have full control to mimic my servers. With linux I could run memcached, RDBMS and NoSQL instances with just a few commands on the terminal. I love linux for development. However, Since I also need Adobe's CS suite I'm moving back to windows and running linux as VM's inside windows so I can continue to enjoy the power and ease I've come to expect from a development machine. So in essence, you need to learn linux so you can fix and run your servers. It's as important as understanding your database.
uhh... .Net?
Stay far away from WP E-Commerce. The developers of that plugin have a tendency to break stuff and disappear, and their documentation is terrible. Go with Cart66.com if you need a WP shopping cart!
One of the most important things to me in an IDE is it's intelligent auto-complete as I go about my work. Auto-completing standard PHP tags is nice, but knowing about the methods in my own code base is also very useful. Some people may disagree, but I like Geany and actually consider it half-way between an editor and an IDE because of this. As for the reason I use it over Netbeans, Eclipse, or PHPStorm - speed and memory usage.
I currently use Netbeans; I had used Zend Studio from 5.0 through 8.0.? and got tired of the performance and inflexibility.
Zend Studio, but haven't touched it in days since I started testing out PHP Storm. Haven't figured out yet how to setup debugging and profiling but once I have that setup on PHP Storm I might just use it full time.
If you can bundle into it all the features of an IDE, why can't you call it one?
Aptana
Along with all the MySQL suggestions, PostgreSQL might be another suggestion to learn a little bit about the architecture. Just so you have a starting point. Also get to know some of the new NoSQL technologies that are building momentum. MongoDB, Redis, CouchDB, and Riak are the most populars ones right now. With Cassandra, HBase and Hypertable for big data analysis.
NuSphere PHPEd. Been using it for years. Excellent auto-complete not only for PHP but also for CSS, HTML, JavaScript and my own code libraries.
...and when to de-normalize.
Not an IDE, but for the past year I have exclusively used vim via ssh and screen. Out of interest, what features of IDEs do the developers here need? The only thing I could consider using is auto-completion; anything i need to look up I can do quickly (but you eventually learn functions and parameter ordering). vim provides colour-coding, auto-indentation, multiple (split) windows and if I wanted it, a file side pane (although I prefer using the OS). At the moment I am mostly working on Zend Framework applications, but haven't desperately felt like I needed features to use it (and I wouldn't call myself a ZF 'pro' - I know how to use the MVC and common components).
 Zend Studio used to be awesome before they switched to Eclipse with version 6. I hate 6... dealt with 7, liked 8 and am falling in love with 9. It does a lot of cool stuff like automatic code formatting and snippets and also runs any standard Eclipse plugin. I use Zend Studio 9 for: * Built in support for Zend Framework * Git/Mercurial integration * Ticket system integration via Mylyn * Javascript/jQuery support * XML and XSLT support * Remote code synchronization including Amazon EC2/S3 support * Autocomplete (SPL and custom libraries) * Debugging support using built-in debugger * Code profiling using built-in profiler * PHPDoc support * Super easy refactoring across files (changing variable/method/class names ) * Automatic code completion/formatting/snippets 
It's important to learn how to tie your shoes for instance.
Learn cross platform peculiarities. Learn how to install PHP on any web server that supports it, on any operating system that supports it. Yes even IIS. Learn the subtle differences between each environment. Learn how to deal with stubborn hosts that are stuck in the PHP4 time machine and the clients who are in too deep with said hosts. This mostly applies if you're a freelancer but it couldn't hurt for job apps either.
Easier to learn IDE than vim :)
Linux. I wish I knew that shit :(
Learn JS, learn how to navigate and manipulate the DOM in modern web browsers (don't worry about IE), learn how to build prototypical classes and perform basic data management. When you have come to a full understanding of this, THEN learn jQuery, so you can appreciate just what jQuery really is: just tool that makes complicated tasks easier. Far too many web devs learn jQuery first and then they can't do anything without it. They don't know what jQuery is doing under the hood, so they can't replicate it. They also learned all the wrong habits because they've only ever built things the jQuery way. jQuery employs structures and techniques that are not best practices, things like having functions that perform completely different tasks based on how they are used, or loading EVERYTHING into one namespace. They do these things because it makes the library easier to work with for non-programmers, but it's a bad example for new developers coming into JavaScript. It's the kinda shit that makes traditional programmers hate JS.
check out sequel pro
I use emacs and have been developing a brand new php-mode with a coworker/friend of mine, since the current one is lacking. It has specific support for Zend Framework, but is useful for any php coding. It has increased my productivity incredibly. We're hoping to release it "soon" (been developing it for about a year and a half, now).
Find an api and try to make it work.... Version control (SVN,GIT)..... 
That's surprising. If I were hiring a Junior PHP Developer, there's no way I'd expect them to have any experience with the command line. Hell, half the time, they don't even know javascript.
Those books are mostly irrelevant to a PHP developer. Might be good books but have nothing to do with the discussion.
I tried PHPStorm and really liked it, the only issue that I had was autocompletion not working with CodeIgniter (and I hear the same with other IDE's as well), but works fine with PHPDesigner.
I've been switching around between Eclipse, Netbeans and Aptana. For the moment, I'm preferring Aptana. The other two had major performance issues for me, and I'm really loving Aptana's Git integration. The fact that it properly supports YAML out of the box is nice. I also prefer its default keyboard shortcuts and syntax colouring, but that's trivial stuff to change in the other two anyway. One thing that drives me a little batty is that Aptana does not auto-complete the php tag. Apparently this is by design in order to accommodate Zend Framework. It's not a HUGE deal, but when you're writing PHP templates it's a little frustrating.
Eclipse for PHP Developers Caveat: My development machine is an Intel Core i7 2600 with 12GB RAM. Eclipse ran like crap on my old machine that only had 4GB RAM.
An IDE normally consists of: &gt; * a source code editor &gt; * a compiler and/or an interpreter &gt; * build automation tools &gt; * a debugger &gt; Via [Wikipedia Integrated development environment](http://en.wikipedia.org/wiki/Integrated_development_environment) I would agree it's no an IDE, but should it be excluded from this conversation - maybe. * **Source Code Editor** - Obviously * **Compile and/or interpreter** - You can run your scripts by hitting cmd R. This will use /usr/bin/php though you can customize it to use any php install you want. * **Build Automation Tools** - These can easily be included and built into textmate plugins - just like php support was built into netbeans. * **A Debugger** - To my knowledge it doesn't have a full debugger, but it does have built syntax parser. It obviously doesn't have the feature set provided by NetBeans or similar clones. But with giant amount of ram free on your machine from not running NetBeans, you can find some alternatives.
yes geany is very nice and fast. I recently switched to sublimetext2 which has great features but has some issues of it's own (loses connection to smb host, full ui frozen). Geany is very nice if you are working in a local environment. I have never looked into geany plugins, maybe there is something to make it even better
pm me when you release it please.
Emacs!!
most importantly, Javascript: sometimes you will want to do some things client-side - *after* the page has loaded... also, it doesn't hurt to know some basic XPATH/XSLT and if you're into self-harm, try playing with CSS on Internet Explorer some time...
Navicat isn't free
http://php.net/manual/en/class.splfixedarray.php store each character separately! *This is a very bad joke. Don't try this under any circumstances.*
sweet thanks i'll add to my rss
I do it all the time. If you SSH into a vm using for example putty, your mouse is not in VM hell. Its easier than having a giant VM window that traps your mouse anyway :D
I'll probably get some hate for this, but I use Dreamweaver CS5.5. The PHP code hinting has gotten incredibly useful in the newest version (recognized my own methods and class, autocompletes all variables I set). I'm mainly a designer with CSS and HTML, but I do code PHP often and I'm pretty experienced. Having everything in one is helpful.
I'm using the latest version of PDT (Eclipse 3.7.1 and PDT 3.0.2) on a laptop with 2GB RAM and an Atom N450, and I'm pleasantly surprised with the performance. This is for a large scale project using ZF too, and I haven't even tweaked the settings yet. I feel they've really improved performance on the more recent versions.
I keep coming back to it after trying other IDEs, but it is so sluggish compared to others.
Same version I am using. I am also using the Color Theme and Smarty addons because I happen to like it Smarty for templating and I like the ruby blue color scheme (http://www.eclipsecolorthemes.org/?view=theme&amp;id=3021). I haven't noticed a performance loss from it. I also use a lot of jquery and the 960gs css framework.
*nix + ableon, photoshop, + whatever software isn't supported by linux. 
Mythical Man Month is constantly advocated as a book for programmers to read.... 
Not an ide but I like using notepad++ when im windows for the simplicity and the ftp plugin and I liked to use vim when im on unix.
Yeah, I don't think you can fairly say that os/x == linux. Also Final Cut and a whole slew of other apps. That's why you pay the big bucks.
I'm using Komodo Edit right now, but I like Zend Studio &amp; Eclipse (Except for their slowness). Sublime Text is a neat editor as well.
Besides the obvious database development stuff which is likely to be essential to your PHP development career I'd recommend, well, everything.. have fun with it and just don't stop trying to take it all in. You said you had an extra box laying around? Setup your own servers and host a development box for yourself. Why? Knowing your way around the command line and how to configure your services is something very likely to be useful but it could also help with debugging in the future too. Both looking at log files and understanding how configuration files impact your site. Got spare time? Take a peak at other languages! You may not intend to use them, and you may never end up using them but I would be shocked if you didn't learn something from. I showed a couple of developers Rails recently and the convention over configuration magic just blew their mind. They had no idea such things were out there which is exactly how I felt more than once on my path. Not only that but those things you may glean from other languages can often times make you a better PHP programmer too, or improve your workflow. Capistrano, for example, can easily automate your PHP deployments. Even though it was created with Rails in mind it can easily deploy PHP projects. You also get other benefits from this constant tinkering and hacking. Your google skills are going to improve and your ability to just figure shit out and make it work on your own which is not only a handy skill in the workplace but very rewarding on a personal level too. Ultimately besides the essentials that others have pointed out its tough to nail down the next best YOU NEED TO LEARN THIS because its always changing. When I first started CSS didn't even exists.. Turns out it was a little more than a neat idea and keeping on the look out and toying with things that looked like a novel idea at the time helped me grow and adapt with the times. 
Other languages that are not php.
Then throw out the LAMP stack and switch to LEMP. Once you have a sweet NGINX/php-fpm/APC setup, you'll never want to go back to Apache.
I find myself in a similar place, I've tried various IDE's which have some impressive sounding features but leave me wondering why they have so many buttons I'm never going to click. These days I'm mostly using SublimeText 2 which has the core things I need and excellent keyboard based controls, with a little more polish than vim...
NGINX is pronounced "Engine X"
I think it's worth it to know both old-school VCS like Subversion and new-school DVCS like Mercurial or git. Knowing the proper workflow for each is beneficial.
ahh, roger. Didn't think about that part.
I miss the good old days of Calendar API 1 where you could just hardcode your username and password for cases like this. What you'll need to do is use OAuth2 and create a refresh token which you store in your code, and then your general users can use that token to work with your calendar. I haven't used this method yet, but I plan to. [Here's the blog post I found on it.](http://cornempire.net/2012/01/08/part-2-oauth2-and-configuring-your-application-with-google/) 
there are absolutely not irrelevant. Learning basic design (art) principles can help when doing the little bit of design work required of web development. Learning how to design a system (DoET) is extremely important for anyone in IT doing any sort of development. Learning to write well is useful for anyone that sits at a computer and needs to write documentation, reports, recommendations, emails, etc. I will teach you to be rich is just a good book to teach people how to manage money something you'll earn if you get any good at development. Mythical Man Month is really more important for project management, but still a great book for any developer to read. The OP was asking for non-PHP related skills.. This is what was asked for. All of the technology responses are obvious choices. These touch on soft skills that most developer suck at.
I have been using Eclipse for quite awhile. I honestly like it. It has its issues but it is a great free alternative.
phpDesigner is by _far_ my favorite. Auto-complete with your own classes/methods, not made in Java (which means it's fast as hell!), built-in debugger with params, git and svn integration, FTP, full framework support, next version will have code folding... Take a look at it, I haven't found a comparable IDE, and am quite frankly surprised by how many developers on here don't recommend it, maybe being put off by the fact it's not free? (try the demo) It saves me more time that I can shake money at, so it's worth it. Also works in WINE for all you devs not using ~~Linux~~ Windows.
Honestly, just spend a day coding with vim and look things up as you need them. That's how I learned, and I was proficient after a day. Totally worth it.
Yep, but that's 1 out of 5.
I actually want to look into a few of these books because they seem pretty interesting, but I still think most of them are peripheral at best to the OP's question.
I'm with you on that. I do think that apple makes very nice and long lashing computers. Edit: Long lasting computers.
Dammit, and here I was ready for a lynching :(
Coincidentally that's the hardest part to set up in PHPstorm and why I'm still using NetBeans (because it just works).
Don't you even mention &lt;input type="file" /&gt;!!!
Can you tell me how which web server you're running makes a difference in performance of an application when there is frequent database access? Other than that, I'd also like to know about any other certain cases when Apache was faster. The application model for web apps is changing a lot too these days. Most new frameworks serve using a single portal (i.e canonically a single index.&lt;languageext&gt;), not with a directory of .php files.
the correct answer is of course an editor, but netbeans is a very nice php ide :) netbeans is really nice if you have beefy hardware to make it responsive
Wouldn't you be able to run all of these on a Mac?
And it is cross-platform supported. Meaning when you have other developers who use OSX or the crazy ones who use Windows, their IDE looks just like yours, has the same features, and behaves the same way.
Yes, this is already starting to look more like it. You still have a good bit of static::ness left in https://github.com/ElbertF/Swiftlet/blob/bc5fe7cda7f615cc0156c11c804a49ccd2e0d91a/Swiftlet/App.php though ;)
Title is not very informative. Sorry but I'm just not into detective stories.
Love it
Yep, you got downvotes. By way of support you are not the only jack-of-all-trades on r/PHP although it seems we are in a small minority. 
ah, I typically quicklook it, or throw it into TextMate/vim (depends if I'm currently engrossed in a terminal or not... usually vim more often than not, lately.) I've never once tried to open a single file in Netbeans that wasn't in a project — was quite shocked when a team member on windows did it.
gedit
AWS for sure.
This... 
Dabbled languages: * C * Obj-C * Python * Ruby * Coffeescript * RISC ASM * Dolphin Smalltalk (?!) * mIRC script (MP3 player + user-info-card database. So ashamed.) Vanilla C doesn't do multidimensional arrays. If a language needs extensions to do something so basic its going to need a damn good reason for me to use it. Its also why I dropped assembly+VLSI. Making your own OS+Processor from scratch is _sexy_, but far too tedious.
I'm not defending Apple in any way but there is something it provides over Linux. Apple controls everything so they are able to circumvent the issue of fragmentation, as a result all their products and third-party applications are tightly integrated, consistent and stable. Linux is schizophrenic in comparison. I would still never condone purchasing Apple products. But they do some things a lot better than Linux does.
#1: Anything that allows key combinations for common operations but does not require them #2: Something that provides a debugger, with breakpoints and the ability to inspect variables... without requiring a PHD. I don't have any issues with people that use Vi or Emacs, but both instantly make me want to kill a bitch. If I wanted to spend 3 months memorizing it, probably less so. It wouldn't make me any faster though. I spend most of my time reading documentation / looking up APIs etc.
I posted some bug reports about this and they have fixed some of the issues.
Love it. Had to leave it for NetBeans as search in NuSphere is TURD. Their debugger is wonderful, a bit of art. Really can't praise it enough. It shits all over Xdebug :( but until their search + refactoring works it's pointless using NuSphere :(
Yep, fast hardware helps. I have an i5-2500K/w 16Gb for home use and a X4 645 AMD with 8Gb for work use and it is fine on both. It's acceptable on my laptop (i5-2430 w/ 8Gb) as well. I also spend a fair whack on good hardware as the time saved more than offsets a reasonable cost (even my employer agrees on this, desktop upgrade soon).
Agreed. You can offset this to some extent my using applications based on GTK or QT/KDE by preference (though with the right theme they visually mix ok). There are upsides to this however, if Gnome (for example) takes a course that no one else wants to follow you can move to an alternative (I use XFCE but lots of Gnome apps) with Apple you get strictly what you are given.
What you guys are using for working symfony framework? Beside Eclipse and netbeans? As I don't have a very performant machine to work on and this two IDE asks for a lot of resources.
My issue is that it is $100 for personal use.
Scrolled down to find this. I think it is really under appreciated. Simple things they added in version 8 have been great like when selecting a variable it will highlight all of them for you in the document automatically.
I fucking love Workbench..
Are you really suggesting that there is a minority that knows HTML and CSS in [/r/PHP](/r/PHP) ?
EUGH
This is what I use with the project+ plugin to fix the hideous file manager and to work with my scm. While maybe not a IDE by definition the fact it's lightweight, extendable and works with all the languages I use makes it great
I checked out phpDesigner and it has some nice features but the syntax highlighting has some bugs and symbol and tag matching (especially symbol matching in javascript) is horrendous. This is a must have feature for me... Eclipse never fails.
I had the same problem on my older machine. If you leave it running all day it can be a memory hog. I would recommend closing it if you won't be using it for a while.
I loved 5.5, but eventually had to leave it because of lack of PHP 5.3 support. I eventually switched to netbeans because I couldn't stand 6 and both 7 and 8 had a major bug with the cursor when dealing with large files that had both HTML and PHP.
http://php.net/extract
Wait.. You're doing this in PHP, but you're using some weird method in place of a normal loop. Why? Do it the sensible way, like this: &lt;ul&gt; &lt;?php foreach ($this-&gt;variableArray as $item): ?&gt; &lt;li&gt;&lt;?php echo $item-&gt;getValue() ?&gt;&lt;/li&gt; &lt;?php enforeach;?&gt; &lt;/ul&gt; Have a look at [Zend_View](http://framework.zend.com/manual/en/zend.view.html) or similar. 
That'd be NuSphere's PHPed. Even over Wine in Linux it whips everything's butt.
PHPed. 
You can call your bundle one, but not the Editor without them.
Check out my 10 line templating system: https://gist.github.com/929494 It's based on functions rather than objects, but, I think it'll provide a little insight into how looping is done.
Everything HTTP, absolutely, also, everything SMTP, POP3. IMAP may be a little overkill, but knowing how pre-existing, text based protocols work will save you a ton of time and prevent you from reinventing the wheel.
The only sane suggestion so far.
Yep, netbeans probably isn't a good choice on a low end laptop or a netbook but, it's pretty snappy on decent hardware.
Yea, some of the shortcuts are different. I've learned so many shortcuts in Notepad++ that when I try to do them in Aptana it almost deletes my project :X
I discovered phpDesigner last year and have never found anything as easy to use and powerful. It's my go-to IDE.
I would have suggested FPDI. I currently watermark PDF's, but I do it via shell (and that via PHP) I use PDFTK. Here's a php example: exec('pdftk /path/to/filename.php stamp /path/to/Stamp.pdf output /path/to/expectedFile.pdf &gt; /path/to/output_log 2&gt;&gt;/path/to/error_log'); stamp.pdf is the watermark. filename.php is the original file. You can ignore the last bit (From &gt; and onward), that bit only exists for logging. And if you just need to generate it, but not feed it right away, add an ampersand (&amp;) to the end, and exec() won't wait for it to finish. It just sends that command out to play then continues on.
Win 7 64, where everything java is slow.
I have never met a competent programmer who does his/her development on Mac.
Exactly!
You should check out PHP Template Inheritance (PHPTI). It does a great job of this.
Right, I have no qualms about the price in a commercial environment. It's those people that build PHP apps at home in their spare time. I don't want to drop $100 of my own money for software like this. Especially considering the entire Windows 7 Home Premium operating system costs $100.
Sounded promising, but windows only.
Vi
You're making this way harder than it needs to be - just allow the use of a foreach loop within the template. Otherwise you're just reinventing the wheel, to little benefit. You're already *in* PHP, so let it do what it does best; abstraction for the sake of abstraction will only make this more confusing.
Yep, it does everything almost automatically. I spend a lot of time personalizing things, but the important bits are ready to go as soon as you create a project.
Got my upvote. I occasionally use Notepad++, but like you I also like the variable / function / method intellisense. I also like packages that are all-in-one, because I've found that most programs that rely on third-party plugins are less stable, more fragmented, more of a pita to use, and less productive. But I could go on a huge rant about why I dislike open source and plugins, so I wont go into more detail.
I wouldn't say it's easy to set up. There are **a lot** of configuration options available. It was also the first IDE/text editor I've used where there is no such thing as 'Save'. Everything autosaves at all times - you use the 'Changes' features and hopefully version control (almost mandatory) - that was a real change in my approach to coding but entirely for the better. Try it out when you can afford some time to be relatively inefficient, because you probably will be at the start. Over time, as you figure it out and tweak it to your needs, it will pay off in a big way. Did for me at least.
I don't see how that limits variable size...
Actually you gave me the idea to scan each character variable which is basically an array, and I can count the size and chop off after a certain point. I actually don't even see a way that PHP allows you to bound input. Kind of weird.
Yeah, I'm more of a designer that knows a lot of PHP than a PHP programmer who knows how to design. That's why I use DW. It's great for design work and integrates well with the rest of the creative suite (PS, Illustrator, etc). The fact that it has great PHP code hinting just makes my life easier. Though, I have learned, [/r/php](/r/php) is one of the less friendly sub-reddits around.
 $input = substr($_POST['whatever'], 0, $max_length); That will truncate the input strings to `$max_length`.
Oh thanks. I don't know why but I have trouble understanding the php.net site. Every other site has examples that make sense but for some reason that shit is confusing.
I'm not new to programming at all, but I only do it when I have to. I must just be an idiot.
The whole point of HTML templates is to abstract the PHP away from the HTML (and vice-versa). If you ask me a templating system should be designed in such a way that you are able to open an HTML template file in a browser and have it render properly, minus the injected text/image content. All this stuff about adding PHP to the template file or devising another proprietary scripting language to litter throughout your HTML that then has to then be parsed by slow-ass PHP (a la Smarty) is ridiculous and completely misses the point entirely.
We all know you can't ever **completely** abstract away the PHP from the template. And if you're littering it with that sort of nonsense, you may as well be using a proprietary language; that's effectively what you're doing. It's far better to stick to a small, well-formed subset of PHP (loops, conditionals, and whatnot) that's well known and supported rather than hacking in cruft that does anything "magic". I've been doing php for a little over 10 years, and the thing that makes working with templates hard is interfacing with designers. Most modern tools (like dreamweaver and whatnot) can handle a little inline PHP that's well presented, but crazy proprietary logic generally is not. If you use a bit of code such as: &lt;?php if ($items) : ?&gt; &lt;ul&gt; &lt;?php foreach ($items as $item) : ?&gt; &lt;li&gt;&lt;?php print $item ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;?php endif; ?&gt; Dreamweaver will perform admirably, and actually show you a list that you can manipulate and modify - it skips over the tags it doesn't know. Working in a team environment, this is *critical*.
That's really good to know. I am pretty new to programming and have never used version control before. That is one of the things I am looking forward to, it's a necessary and useful step from what I've seen. So I can host a local version control easily enough with PHPStorm? What do you recommend? Git?
I've been writing PHP for just as long, and I definitely agree that a little PHP in your template is much better than Smarty or some other bloated templating engine. I personally prefer to define blocks and placeholders using HTML comments which are then extracted/injected into by PHP, for example: &lt;!-- #region:[regionIdentifier] --&gt; &lt;div&gt; &lt;span&gt;&lt;!-- #placeholder:[placeholderIdentifier] --&gt;&lt;/span&gt; &lt;/div&gt; &lt;!-- #endregion --&gt; ...and then handling all of the logic within PHP itself. This way the HTML template file will still render properly in any editor or browser and your designers don't have to muck with anything except for page layout and defining regions and injection points.
Your point is valid, but I guess it's a matter of preference. My way is certainly nowhere near the same thing as what Smarty has done...either you're not familiar with Smarty, or you didn't comprehend my method. It's simple search and replace, and doesn't even particularly require regular expressions (although I think it's cleaner and makes sense to use them in this case). I'm of the mind that if I'm going to put PHP into my HTML I may as well just go back to writing the HTML inline inside the PHP file. An HTML file is not the place for logic, regardless of simplicity...it should be markup and nothing but.
I think most IDEs don't work very well with the latency you'll get accessing files directly over FTP. We had a thread about this (remote indexing on IDEs) back in December, you might want to check it out: http://www.reddit.com/r/PHP/comments/nezz4/i_need_a_php_ide_for_os_x/
aah, gotta love vim, plugin heaven :D its so nice to have git with vim and all that good jazz :)
If the reason for you doing this was to abstract away logic, then you've utterly failed. Essentially, you've just replaced one language with another. The intent many people have for doing this is for designers not having to concern themselves with code. The thing is: 1. The designer would still have to learn *your* tags and how they work. 2. Your tags are functionally identical to the existing PHP logic. 3. Some designers will already have experience with PHP and how to apply it to a template. When it comes to your language wrapper, they won't, and will have to start all over again.
Sorry, but *what?* There's absolutely no logic there, it's all markup. It is literally impossible to write logic within the confines of valid HTML.
What do you call #region and #endregion, then?
I use sshfs for mounting remote folders of code locally. The IDE doesn't matter too much beyond that.
Instead of beginning my response by answering your question, let me first respond with my own question which should quickly illustrate the idiocy of your statement: What do you call opening and closing tags in HTML (&lt;div&gt; and &lt;/div&gt; for instance)? It's markup. Markup is by definition *not logic*. My tags are no different.
Let me make sure I have this correct... &lt;div&gt; Hello world! &lt;/div&gt; ...is logic? I think we must have different definitions of the word logic.
Kate . It's minimal. It doesn't display php errors, but it has most of what an IDE should have: basic auto-completion, code coloring, sidebar navigation, etc. I've been using it for about 8 years.
No, nor is it the example code you presented earlier. Stop presenting strawmen. 
Ugh. Do you not know what presentational logic is? Do you not understand that you've just implemented logical structures, but with markup in place of PHP? You're committing a fallacy of composition here. Let's take an example: XSLT is built on-top of XML. XSLT is used to create presentational logic, just like you're doing with your comment tags in HTML. However, just because XSLT is logic and is using XML for its syntax, does not make XML logic.
Thanks for the suggestions. The intention was to make this lightweight and readable as opposed to feature complete. Not entirely in the same space as Requests or Guzzle I suppose. The primary use case is: user needs to do some one off things in an API (like a quick BaseCamp hook), not necessarily for building an interface to a Credit Card Gateway or a whole library on top of. My responses to your points: - Normally I would. When I built the library I wanted it to be as simple as dropping a single file (not having to do a whole git clone) if wanted. If the project continues to grow, naturally I would do that. It's certainly not at the point of an autoloader yet. - Me too. If you check the source code almost everything has a more concise alias (`sendIt` is actually an alias for [`send`](https://github.com/nategood/httpful/blob/master/lib/httpful.php#L214)) - This too is [already in the library](https://github.com/nategood/httpful/blob/master/lib/httpful.php#L346) - Definitely something I'll consider. As with most of the other stuff, focus was on readability/skinny vs. feature completeness. Thanks for the feedback. I'll consider breaking the source code up a bit for the sake of source code readability here soon.
This is what I used in a framework I created. I am now trying to export the main parts of my framework. The template system is one of them.
I do allow. PHP is used. I was just trying to achieve a little a quicker way to echo arrays.
Looks like you put a lot of time on that but this was something I don't want, I don't want to recreate a new language. I was just trying to simplify the output of arrays but I don't think it is possible to do what I want using php, just the way I do now with str_replace (which I was really trying to avoid but found no other way to do)
I love this. This is way more intuitive than other frameworks I've used and it's written in C? I think I'm going to dig into YAF this weekend. Nicely done. On a side note your username makes me think of Unknown Hinson.
The best IDE I have ever used. Having been using it for quite a few years now, it doesn't compare to any of the popular IDEs. Though, haven't ever paid for it (Michael Pham [the creator] sponsors me), I would definitely shell out the money for it without hesitation.
 NO offense, but who in their right mind would move to Baton Rouge, LA??? Do you guys even have 50 MBit internet down there? I'm actually thoroughly intrigued. It's probably as hot and muggy as Houston where I am currently but with a whole lot of negatives including no friends or family there. Do you find that such a small, non-techy city has any non-happily employeed "experienced" PHP engineers out there at all? I wouldn't think so, and this post seems to suggest that as well. Louisana has a 6% income tax rate for over $50,000. Does that mean you're willing to give us a 6% bonus to offset this if we come from a non-income tax state (Texas)? Why do you not offer telecommuting? Hell, 100% telecommuting gets you a 33% discount on my services. Those jobs are also very rare and would engender tons of demand from highly-qualified software engineers around the continent. Your immediate competing metropolitan areas, Dallas and Houston, have median Senior PHP Engineer salaries of ~$85,000/yr. Can you match that for *remote* people? You don't list the site or even the industry this is in. Is it ecommerce? Porn? both? Something else?
Yes it's an extension like PDO etc. so you just extend the core classes for controllers etc. but a lot of the code will be C and you will never see it. If you're trying it out I would recommend not trying to use Windows unless you know how to compile extensions on Windows (I don't). There are some dlls on the Yaf google code site but I don't know if you'll be able to find one compatible with your current PHP install. What I did was boot up a Fedora VM using VirtualBox and do all the work there as it is easy to compile extensions in linux (pecl install yaf). You just need: * httpd, php, php-pdo (to run the app) * php-pear, gcc, pcre-devel (to compile the extension) (I might've forgotten some pckages but it'll tell you what you need in this event)
This makes perfect sense, I've done it a few times before. It works even better if your url goes directly to an image filename, so if it doesn't exist, a php script writes it to the filesystem accessible via that url and then does a fpassthru. This way php is only fired up on the first request, all subsequent requests go straight through apache.
I never went back after I started using vim, may be not really an IDE though.
It's easy to implement with a 404 ErrorDocument too.
&gt; Apache-only implementation Really you don't need mod_rewrite for what you're doing. You can refactor this code to make it work with any server. Platform dependency is something to shy away from. &gt; That's not true. If you change sizes in URL browser returns an error because script checks a checksum of md5(file)+sizes That's not very good protection. It's not at all difficult to generate this checksum on the client. Just grab the original file md5 off the server and you can create the URLs without needing the script. &gt; But if you have less than few hundreds of images in one folder that chances is pretty small. Chances are better than you think. Especially with md5, which is [broken](http://www.win.tue.nl/hashclash/rogue-ca/) to the point where collisions can be easily found. &gt; Can you explain that please? I'm not sure that I understand it right. Every instance is tied to one config file. What if I have different apps with different configuration needs? I'll have to duplicate the whole source tree per project. Edit: added link
&gt; Truncating file hash to 6 characters severely increases collision chance. I realized that is not an issue, and here is why. The thing is, file names always are different in one directory. Let's assume we have */img/path/foo.jpg* and */img/path/bar.jpg* with the same substr(0, 6, $md5). And in this case we will have cached URLs: /imgcache/img/path/foo(81fad6-50x100).jpg /imgcache/img/path/bar(81fad6-50x100).jpg
&gt; That's not very good protection. It's not at all difficult to generate this checksum on the client. Just grab the original file md5 off the server and you can create the URLs without needing the script. I suppose, it can be solved by adding salt to a hash.
There is if there's infinite number of sizes possible. This is also how Gravatar works, for instance.
Say you have 1Gb images of your products. And you have to serve product image in 6 different sizes. So what would you do? Resize on upload and create 6Gb more images, when about 50% of them will never be requested? And this is not only reason to resize on request. If you today want serve 100x100 image and tomorrow you will need 200x200. In this case you have to remove all your cache and resize all images again.
This is also asking for DOS attacks. The number of sizes supported really needs to be limited to a set number of sizes.
You're right. Like I said it was just initial speculation based on a quick look.
The upside to resizing on request is that if you change the required size in the future, you can simply clear out the cache and let them lazily resize again as people request them.
If you are serving 1gb images, you are well out of any problem space or context that any people here were discussing. We are not discussing the exceptions to the rules, but the rules themselves.
&gt;Ì want to convert a bunch of people into using unit testing. That makes me understand it even less. Why not use the defacto standard for php unit-testing (at least where i come from), even if it comes with this additional "hassle" of installing a new (but extremely useful) extension. Seriously, XDebug (or any other form of profiler/debugger) should be a no brainer for anyone who want's to develop good/solid php software.
Must you harass everyone?
If you want to do it "right", then you shouldn't use namespaces as substitute for shallow class and function names. They are intended to solve naming conflicts, not as [bland decoration](http://en.wikipedia.org/wiki/Cargo_cult_programming). I'd also like to point out that popular and proper aren't always the same thing.
Try making a page with a secure login (with user information securely stored in a database). It sounds simple, but you'll be surprised at how many things you discover that you need to learn to do it the right way. Plus, you'll probably need to know how to do that for most sites anyway.
Yeah, thanks for the idea.
I'm curious what the PHPStorm guys like about it that makes it better than Komodo
I don't think the framework will help you learn the language itself. It will provide some nice libraries for common tasks but personally I believe the framework itself can put you in a box that will possibly frustrate you &amp; make you lose site of what you're trying to learn. I've settled on Zend but learning Zend &amp; trying to learn other frameworks was such a headache initially &amp; didn't help me dive into my project. I had some PHP experience under my belt &amp; I took on a side project for my job &amp; about 2 years in now I'm finally on the right path to making this thing happen. I don't get paid to code at work so it was very frustrating trying to slam all day at work &amp; figure this stuff out on weekends &amp; my off time. I go through periods where I make some progress &amp; then I end up putting the project down &amp; only coding 5 minutes worth of good code in a given week.
Upload the image and have it make all the resized images that will be visible on page load. If the CMS is being used during peak times it may need to be on a separate server. For the not immediately visible sizes have it do that resize on first request and cache it so it doesn't have to be done again. After that it's just bits on a server until content or images are updated. As long as you have enough space, cache and don't peg the CPU with dynamic stuff it doesn't matter how many images you have. YOU SHOULDN'T CARE since you built this system to not have to deal with managing multiple image sizes with a large volume of images. If you have 1Gb of images and you need 6 sizes then of course you'll have to store 6 sizes of the image on the server but this doesn't mean your image cache size will rise to 6Gb. Smaller versions are almost always lower quality since you can get away with heavy compression at smaller sizes. A 100x100px image should be something like 1-2kb if not smaller. Smaller image size -&gt; more compression -&gt; smaller file.
&gt;You want to cache as much of a page as possible, and you want the images to exist only when needed (otherwise you get one hell of a mess on the back end server If you have a mess in the image cache someone didn't build the system correctly. Also a human should never be in that cache if your system works correctly, it should be managed by tools.
I really enjoyed learning by taking various open source projects, reading through code to see what was going on, and tweaking things a bit. I really liked looking at the old Kohana code in how they handled mvc, plugins, Joomla as far as handling various different things, and quite a few other apps. There are so many different little things that will always be of some use to you, so it's well worth looking at things in action and trying to manipulate them yourself.
Ah really? What makes you think that about the book? 
Here are a few ideas for some really fun projects to cut your teeth on: * IRC bot (using php sockets) * Online notepad (do you keep a txt file with handy notes in it? make an online one that sits behind a login and stores to a database, encrypted) * Fusker (Porn fuskers take a porn page with some pics in it and spit out all the pics in the gallery. Works with porn sites that name their pics in ascending numerical order e.g. /sexytiems/01.jpg - 20.jpg. I have built one of these and would be happy to share the source) The best way to learn more about the language is build projects that you enjoy and will find interesting.
It reads like the PHP docs; very verbose. There are better books less than half it's size.
He's not arguing very well, but here's the thing; you've re-implemented `foreach`, but called it "regions" instead. Why couldn't you simply use `foreach` in PHP instead, and make a rule for yourself that if you have to query the database, or make an HTTP request, or any business logic that retrieves/creates data for your view, you should not do that in your view file?
I would suggest a blog or forum. Then you'll deal with templates and user permissions and use mySQL as well. Start simple and add features like the ability to upload images, user-formatted text, generate reports, etc.
It uses a lucene index for search related things; if you've got an SSD, you'll see huge speed increases. Another option might be to set up a ramdrive and configure things so the lucene index actually sits on that 
I personally love Larry Ullman, he is what got me into php. If you get a chance, try picking up one of his beginner books. It'll cover somethings you already know, but has chapters on mysql integration etc. Definitely worth reading.
Thank you enormously! That did the trick perfectly :D SQL injection isn't on the list of criteria thankfully...
Here it is, a code coverage analysis tool written in pure php, https://github.com/sandeepcr529/codespy
Contribute to a cool looking open-source project and adapt to their coding style. You'll learn quite a lot! I'd suggest PHP-ActiveRecord - there are a lot of ORM tools out there, but learning how to use it (or some other framework) will teach you heaps about OOP and database relations.
Cheers guys and thanks for the link
Write something that solves your own problems.
People will probably undervalue your suggestion, but people often learn better when working towards a goal that makes something they already do better/easier. In my opinion this is worth more than writing a dozen blogs and irc bots.
Hear hear. I was reluctant to use vim for an embarassingly long time. Then I decided to suck it up and force myself to use it for a week. Haven't looked back since. So much more productive with so many useful plugins.
No worries. Github has public and private repositories. You've setup a public one here, so yes we can see the code, if you want to setup private repos you need upgrade to one of the paid plans. There's two ways to encourage collaboration on github, you can actually add individual people as collaborators, you do this by hitting the admin link towards the top of the screen. However the more social way to get more people involved is by merging in pull requests. Github allows any user to fork a public repo, I can do this and when I have made some changes that I think would make the project better, I can send you, the project owner, a pull request. This allows you to see the changes I have made, and if you approve, you can just merge my chages into the project. Lots to learn, but once you get your head around it you'll start to see the potential.
Thank you for your response. The pull requests I think I half way understand. Since the repository is public anyone can see the code, download, and use it as they like. However not everyone will resubmit it back into the repository; but in the event that they do, I can see their changes. Are their changes going to appear as “branches” (I’m not sure if this is the term git uses) which would then give me the option of pulling their branches into the main (master) trunk? (There is a pull option in Git Extensions interface I guess I will take a look at it to see if I can figure more things out.) Another thing that comes to mind, GitHub isn’t a continuous integration server so it does not run the unit tests that I wrote in the /tests/ directory, nor will it be able to run any tests written by pull requests. So basically as the project owner it is my responsibility to ensure test coverage, code quality, and coding standard?
I'm going to check it out over the next week and try to remember to let you know how I find it.
Also, if you want free private repos you can use Bitbucket. 
You've almost got it. Everyone can see your code, but no one can commit directly to it. If they wanted to make a change, they can "fork" your repository, which creates for them a complete copy of your repository that they can commit into freely. These forks are tracked through GitHub. If they have a change that they would like to add back to your repository, they create a pull request with the changes. You'll get notified of the request, which you can accept or reject (and even pick only the changes you want). Once accepted, these changes are merged back into your repository. In the end, there's still two copies of the repository, your's and the other user's, each completely separate. The concept of branches and tags (from svn for example) still apply, but work a little differently. I highly recommend reading through the guides at [http://help.github.com/](http://help.github.com/). As for CI, check out [Travis CI](http://travis-ci.org/). It can hook into public github repos and automatically run your unit tests.
Agreed, and no one does mess with it by hand. Problem is that as the system exists, it breaks out every permutation of an image. So a customer sends us a 1200 x 1960 image (something like that), we break it out into the 30 or so variations we use on the site. Most of those images probably will never get seen however, just because not every product is viewed every way. So you have a lot of space being taken up on the servers for nothing, but if you only created the image once it gets requested, you would save a lot of space. You obviously don't create the image every time, you create it once on the initial request. After that it functions normally, and that's what i was referring to.
Make sure if you do do your own auth system read the following at stackoverflow. http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication 
Well if it's on demand the "saved for nothing" becomes "saved because of one hit". If you have 30 sizes of an image someone again did something wrong. You could just resize for common sizes then use CSS to display it in the strange sizes on the site. 800x600 isn't much bigger than 700x525 and if no one specifically needs to download the 700x525 version (just displayed on site) you don't need to resize for that.
I think a better way to organise your array would be: Array( Array(Lot 9, Mark, Mercedes) Array(Lot 9, Mark, BMW) Array(Lot 7, John, Audi) etc. This way, you can just sort using $array[$x][0] 
Wow... I couldn't tell you how many times I attempted array_multisort() last night, but like you were saying, I wasn't paying close enough attention to how it was working. This solved my issue no problem. :D Always nice to have a fresh set of eyes. Thanks.
Linux CLI stuff, Python.
I dunno if possible, but it would really break through if this could work with autoloading, say as long as the user made sure to import it before anything else happened. I don't want to manually be using include() in my code anymore. But great work already!
awesome, thanks! I was also looking at some Kohana tutorials.
This *might* work out for you http://www.kendoui.com/dataviz.aspx
Seems expensive, I use Flot http://code.google.com/p/flot/
If you don't mind not having commercial support and the project is open source, it's free.
URLs don't have an inherent length limit. Browsers limit the length of URL you can type in the location bar, but if you call an API then it shouldn't be a problem.
The chart API is good for basic things, but as soon as you start needing to handle data larger than the values it takes, you have to start messing around with scaling your values and all kinds of nonsense. I would recommend using FLOT. You can use my wrapper to get you started without having to write any JS: https://github.com/deanc/flotlib 
No, google has a limit too. It doesn't reach nowhere near the URL limit.. go test it. 
I agree on the expensive part. It would be used in a commercial product and that price tag is too high for what I intend to use it for. Flot on the other hand is based on jquery, I'm using scriptaculous which will cause conflicts. So unfortunately both are not really an option in my situation.
This is simple math...
exec out to pdftk -i belive pdftk works with compressed files.
I actually think your imageboard idea is really a great place to start. That could possibly incorporate a lot of great skills because it would involve: - Secure Login (Account Management) - Multiple SQL Tables (Threads, Posts, and other such elements) - File Uploads (Gotta upload the images they're posting) - Sessions or Cookies (To maintain login) And possibly other tasks depending on the complexity of your project. I think it's totally doable, but don't expect to write it overnight. I could write one over a weekend if I set aside the time and had the energy, but I've also been writing PHP for a few years. Remember the best documentation is already available on php.net, that's how I taught myself PHP. :)
hmm, I'm just not sure of any problems I have to solve at the moment.
I wasn't going to have user accounts on the imageboard but since so many people have suggested coding something like that, maybe it'll be worth it in the long run.
Stack traces will have the wrong line numbers just off the top of my head.
&gt;Is there a limit on the URL length for the Google Chart API? What is the maximum URL length? &gt; The maximum length of a URL is not determined by the Google Chart API, but rather by web browser and web server considerations. The longest URL that Google accepts in a chart GET request is 2048 characters in length, after URL-encoding (e.g., | becomes %7C). For POST, this limit is 16K. from [the faq](http://code.google.com/apis/chart/image/faq.html) is what I found, I'll generate a database test population later tonight and run some tests. I don't the 16K limit will limit me but better safe than sorry.
Make sure if you're doing any payment processing that you are forcing HTTPS. Otherwise you'll be endangering a lot of innocent people, and will lose a lot of reputation among people who know what's going on. eCommerce solutions are not something that should be hacked together and done haphazardly, in my opinion. The whole notion of a quick and easy commerce site that anyone can setup is incredibly scary. It would be far safer for you and your family member legally to go with a hosted solution for your eCommerce, as it would protect you from future legal liabilities associated with a DIY solution. I have hosted my less important personal stuff with DreamHost for many years - lately they've been pushing a solution called Cafe Commerce. I haven't tried it but they're really pushing it hard. Might be worth looking into as a quick fix since it sounds like they'll pretty much take care of it for you.
I'll take a stab at this. The README file is great for a few reasons: 1. It explains what your project is, how to install/set it up, and how to use it. 2. You can usually get away with just a README for your entire project's documentation (although I wouldn't recommend it). 2. I know quite a few developers who won't touch a project without some good README. Readme files on github should be in [Markdown format](http://daringfireball.net/projects/markdown/) to be displayed correctly. As for the license.. you really should have one. Again, most developers won't touch a library that doesn't have a license. It protects you and anyone using your code. Even if the license is "Free to use for anything," you should still include something outlining the terms. The popular one around github seems to be the MIT, but [there are a bunch of them](http://www.opensource.org/licenses/category). Bottom line, If you're developing code for public consumption, especially something to be used within other projects, please include a license and carefully consider which one you choose.
Its actually rather easy to hit.. if you have multiple series in a line graph for example, the data length is datapoints ^ series, i usually hit the limit with a 24 (hour) bar chart with 3-4 stacked bars. But its kinda random, its dependant on the numbers you use.. 1 = 1 byte, 1000 = 4 bytes. etc Although you could use their [Extended Encoding Format](http://code.google.com/apis/chart/image/docs/data_formats.html#extended) to "compress" down the data, but i never really got my code working properly with this format and i gave up.
I think with proper validation of $url the function itself is as safe as any other But to be able tu use file_get_contents($url) you have to allow fopen_wrappers, which could lead to a potential security problem on another place, where someone might not have thought of this possibility. Plus cURL gives you a lot more options.
I don't think file_get_contents is any less secure than cURL. From other people's benchmarks however, it looks like [cURL is the faster option](http://stackoverflow.com/questions/555523/file-get-contents-vs-curl-what-has-better-performance) If speed is not an issue for you, you simply want to grab the contents of a URL and you have access to php.ini (To make sure allow_url_fopen is enabled), then I see no reason why you shouldn't use file_get_contents. If you want to do something other than just fetching the contents of a URL, then cURL is the way to go.
I agree "apt-get install *" and "brew install" are both nice; however, the alternative does not require _much_ more effort: ./configure --prefix=$HOME/local &amp;&amp; make &amp;&amp; make install The benefits: 1. Full control of where things go. 2. No longer at the mercy of the package maintainer. 3. Same installation process no matter what your *nix variant is. 
 header('content-type: image/png'); $url = 'https://chart.googleapis.com/chart?chid=' . md5(uniqid(rand(), true)); # removed a bunch of information here for easy posting // Send the request, and print out the returned bytes. $context = stream_context_create( array('http' =&gt; array( 'method' =&gt; 'POST', 'content' =&gt; http_build_query($chart), 'header' =&gt; "Content-Type: application/x-www-form-urlencoded\r\n"))); $fp = fopen($url, 'r', false, $context); fpassthru($fp); fclose($fp); It's all in Google's documentation
pChart is perfect for this kind of stuff. You can send quite a bit in and have decent control over how this kind of stuff looks.
Image size, yes, but we weren't talking about image size.
it will? can you point me somewhere I can get more info about that? And I am not using a stack trace anywhere, but \_\_LINE\_\_ and \_\_FILE\_\_ magic constants.
Comments and empty lines can be excluded. But is it important, I mean if you can visually see which lines are covered?
No, I meant I don't want to have to include() *other* source files (the ones I want it to analyse), for it to be able to analyse them.
Wait, I have to understand what a function does before I use it? That's crazy!
Pretty much the only difference is that `file_get_contents()` can read both HTTP streams and file streams, which is where the danger is. As long as you always check that it's a URL, it's fine.
You must make sure you're passing a safe url, one from the web, using http, etc. Always validate user input!
cURL can't read file streams? file:///etc/htpasswd
I'm not sure on that, but that's easy to pick up. The danger is when someone passes in a relative URL by accident and that's picked up as a file. IIRC, cURL would tell you that your URL is invalid for that situation. Personally, I always ensure that it starts with `http(s)://`
Problem is, a *hell* of a lot of security flaws that get into code are 'easy to pick up'.
I mean, this will work http://pastebin.com/GbuQqK0B is this the behaviour you looking for?
This needs to be upvoted more, highcharts is really awesome.
Thats all well, but after that things are not so straight forward. I mean invoking xdebug, integrating it with an editor. And what if my favourite editor does not support xdebug? Now I have to change my editor. And we are taking about web development, not command line script.. So my script requires sessions,post data and stuff. So now I have to know that I have to start a debugging session in editor, take my page in a browser, wait for xdebug to connect to my editor/debugger client waiting port and start debugging...Oh did I tell you have to enable xdebug for that specific request or send a certain variable (XDEBUG_SESSION_START=session_name) with the request to let xdebug start a debuging session. Installing it may be easy..but using it as you mentioned is not so.... 
http://www.ruilog.com/blog/view/b6f0e42cf705.html
The image chart api is fairly rudamentery, it leaves a lot of stuff to be handled by the user, like scaling data, adding tick marks to the given axis, etc. This allows you to control the output quite a bit if you know what exactly it is you will be outputing. However, if the dataset is dynamic, this quickly becomes a pain in the ass, elements will overlap and make the chart unreadable. Also, the image size the chart api will return is limited to a relatively small number of bytes, so your size must stay fairly small. That said, if you are outputting the same dataset each chart (same labels) then you will be able to setup your layout in advance.
Very nice list, thanks! Checking these right now.
Hey thinkspill, since these guys also wrote FPDF, I've seen it, but project I'm working on is to small for pricing like that ;-). Anyhow, thanks for link!
I &lt;3 CodeIgniter ... Took me about 3 hours to do that tutorial set and get a fairly good understanding of the basics. 
So my current conclusions FLOT -incompatible with used javascript framework so therefore a no go -Clientside . Highchart -Too expensive . pChart +Looks like a good option as soon as the product is up and running. . Google API +With the chart builder not that much work +Free (whohoo) +- Dataset limitations, which I will not hit within the first year -No eye candy -Relies on google API . Dataviz -Only outputs svg files -Clientside +-Forces GPL license on my code, so distribution or selling is not an option. . So here is what i'm going to do: Write an adapter for google to be used during development, piloting and the first weeks/month of production. After releasing I'll start writing an adapter for pChart using the google API as a backup in case pChart breaks for whatever reason. Integrating the google API should take less time whilst still serving its purpose. Migrating to pChart will give me independance from an online API which is not under my control, some eye candy and a lower bandwith usage. It should also protect me in case google decides to reinstate the daily request limit. 
My problem with these sorts of benchmarks and the reason I wanted to try the extension out for myself is that the app doesn't really do anything so it's not very clear if it would be worth using one framework over the other for real life work. For example if just bootstrapping the app only takes a fraction of the time it takes to query the Db you might as well just stick with a bigger framework. Particularly given that not all frameworks (Yaf included) even have a Model class so you might end up including a large ORM anyway (e.g. Doctrine). That being said I don't think this is the case - in my own test I used the same ORM for both only changing the framework and Yaf was clearly faster but I don't know at what point you would start to see diminishing returns in using a small framework.
http://php.net/manual/en/book.http.php
Does starmonkey = spacechimp or is this a random coincidence? 
Net Tuts has a great [CodeIgniter video tutorial](http://net.tutsplus.com/articles/news/codeigniter-from-scratch-day-1/) which teaches you good MVC architecture.
I do it with git. The production instance is placed into a separate local branch, and the production branch is pulled and merged into it. You can use hooks to do stuff. The remote repository is served by gitosis over ssh using a restricted account; the production machine does not have its own ssh key but instead uses authentication forwarding. I run a script on the developer machine, it ssh's into production, and performs git pull using the key I've authenticated against locally.
&gt; issue with file_get_contents is that it provides no method of setting a timeout [Are you sure?](http://php.net/manual/en/context.http.php#context.http.timeout) &lt;?php $context = stream_context_create(array('http'=&gt; array('timeout'=&gt; '0.01'))); var_dump(file_get_contents('http://www.example.com/', false, $context)); // Warning: file_get_contents(http://www.example.com/): failed to open stream: Connection timed out in /tmp/test.php on line 4 // bool(false) 
Micronum provides best web solution for small and midi bussiness such as web designing, developing or web promotion in all budget. We have good hand in Android web application and mobile applications.
Ack, really no meat here. A lot of softball questions, that were clearly emailed to the interviewee. As a result, absolutely no followup took place - really more of a survey. In the future, I would love to see *actual* interviews, asking important questions with interesting answers and having some sort of discussion around them. I don't care what book he'd recommend, or what his stack looks like. That doesn't improve my world. I want to know his tricks, his secrets, his opinions on the direction of the roadmap of PHP and Zend. What does he think of Traits and what's on his mind for using them?
I use [git-ftp](https://github.com/resmo/git-ftp) for dozens of projects with great success.
one of my favorite things about vim is the low overhead and the ability to run it on the server you working on. bundled alongside all the awesome plugins. it really is my most valuable tool.
Thinking about your project structure further... I wouldn't recommend PSR-0 support or restructuring for its own sake, but I think it would help ease adoption for PHP coders who already use PSR-0 in their projects. You could then add it to packagist.org and they could simply add a line to their composer file and know your code will be included in the same way as the other libraries they're using. That can be a big plus. But you're right that some of us just want to download a file, require it and go. For those, why don't you offer a separate release download that simply appends all the classes into one file? The build script could be as simple as: cat File1.php &gt;&gt; Release.php cat File2.php &gt;&gt; Release.php #etc. Anyway, just a thought :)
1.Why didn't you add the ability for creating nested templates/views. 2.Where should all the complicated business logic go?
You should check out Puppet (http://projects.puppetlabs.com/projects/puppet) or Chef (http://www.opscode.com/chef/). Makes it possible to "script" your entire server if you want to, but you can also use it just to deploy specific software according to rules you define.
what does hand-coding mean?
Does the Tachyon.phpfogapp.com use Tachyon?
I might be biased coming from a PHPUnit background, but essentially i'm not as interested in the visuals as in the actual metric/number. Because that is what's important and it makes things comparable or analyzable by tools like Jenkins/Sonar.
Yes it does. As well as [Bootstrap](http://twitter.github.com/bootstrap/). But i shall migrate it somewhere else, PhpFog was just for me to test it, it is way too slow and the payment plans do not interest me (too much for too little).
Throw an exception in the code you are covering.
Right that's it *kicks chair over* .. I'm off to learn Capistrano
God speed, good sir. ©_^
Check out PagodaBox, their free version is the shit.
Thanks for the link. I'm likely to dive into building a site to see how it goes over the next couple days.
My development machine is a Core i7 920 (2.67GHz, 4-core hyperthreaded) with 12GB of RAM. Eclipse still runs like shit for me. And if I'm going to put the time into learning an environment, it'd be nice if I could use it on my netbook too. :/
I'm using Fusion Charts (free, open source edition), if you can stomach flash: http://www.fusioncharts.com/goodies/fusioncharts-free/
hidden inputs are your best friend
I do similar but with svn hooks that run an update script on the target directory.
Phpfog.com Used it for work, wasnt too bad. Orchestra.io Want to use this but haven't had a chance yet
That was my idea at first, but (see below) this will be used for other people, who don't have a server, but only a shared host. 
Your details are kind of vague, but Google shows over 20 ***million*** results. https://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=php+rpg+script
I've used phpfog/appfog and they are pretty good, but I've really been impressed with [pagodabox](http://pagodabox.com/). They contribute a lot to the php community (they host fuelphp.com, kohanaframework.org, pyrocms.com, etc) as well which is really cool.
How would your ideal solution differ from *every web host in existence*?
If you know of a pure PHP/SQL rocket *propelled* grenade? Please post links. Otherwise, role-playing game.
Many Thanks. I added an exception handler and code to track throw statements. Now [this](http://i40.tinypic.com/2a7st9c.png) will work, even if throws an uncaught exception. 
Ok. I dont think this can match with xdebug's code coverage functions and hence cannot provide an accurate code coverage info as it does. Although It probably wont be able to provide an absolute value, it can provide a relative value, i mean how much code coverage changed by adding a certain test. And sure, it can be made into some format as json or xml for tools to use. But I don't think that ll do..right? :) EDIT: Hey, you might like [this reddit post](http://www.reddit.com/r/programming/comments/khhdj/in_pursuit_of_code_quality_dont_be_fooled_by_the/). 
my apologies for using "b/c". I will take into consideration in typing more professional. Everything you have said i have a pretty good understanding besides the last bullet point. I will definitely look into open source projects. thanks!
ive made many small projects but my biggest two are those ecommerce and a simple cms. Thank you for the advice. This is exactly what i need to hear to push myself. 
Starting a new project tomorrow, I think....
This depends on where you want to go. I'd also say at least touching on Linux and Apache. Don't need to become an expert and run your own hosting, but knowing how to install enable mod_rewrite in Apache could easily show that you have touched most aspects of LAMP.
I'd sign up for a github account and push up some of your code. You'll figure out git basics, which is good because I don't see a VCS on your resume. More than CSS as a backend dev I'd encourage you to learn JS. I recommend jQuery as the best framework to learn, there's a reason why Ruby on Rails now uses it by default. I'd stick mainly to figuring out AJAX requests in jQuery they're simple. If you're looking into MVC frameworks, I'd highly recommend codeigniter. It's a fairly straight forward, light weight framework and it's extremely popular right now. If you're comfortable with MVC you may also want to check out [Fuel](http://fuelphp.com/), it's an early stage MVC. You might learn a thing or two maybe even become a contributor. Job Wise I'm not quite sure what the industry looks like in LA, I know that it's a decent size. If you have a hard time finding a job down there, SF has a much larger webdev scene tl;dr 1. Sign up for github 2. Learn jQuery PS: I'd suggest posting links to your github repo's up here asking for feedback. The community is pretty reasonable.
Honestly just use PDO and you'll be more knowledgeable with most PHP devs I've had to fucking work with.
For real, this. I am awestruck at how many PHP devs aren't using PDO this late in the game. http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/
CodeLobster PHP Edition (Professional) http://www.codelobster.com/ for CodeIgniter
I am a project lead at a development firm with 8 years of experience as a PHP Developer, and I started out teaching myself, and have no formal degree. I'm currently in the process of screening applicants for another developer I need to add to our team, so I will tell you what I'm looking for: * Work experience, or freelancing on projects that did NOT use the opensource frameworks, and here's why: I need a PHP Developer... yes they need JavaScript and HTML, but it's easier for me to spot those guys than the designers masquerading as developers because they know how to install a Joomla module. * An understanding of structural and syntactic paradigms. These are things like inheritance, scoping (the question "describe the differences between public, private and protected methods inside PHP 5 classes" is presented to every potential developer), auto-casting data types, etc. The reason for this is because the specific actual environment a developer works in is almost always a product of the company and its policies. The ability to work in that environment has more to do with their grasp of the syntax than their experience with different environments. * The ability to provide architectural answers. "What are some security concerns when working with SQL?" "What are some of the reasons to use an MVC architecture?" "Describe what the important things to consider are when writing code from scratch for a project." These don't always have right answers, but they always let me know what level of understanding they have, and I rephrase several times if they misunderstand the question with no penalty, because sometimes people are nervous, and sometimes they just don't know the buzzword bingo. So for me, the thing you'd have to show me is that you can actually write code. A code sample maybe, or freelance projects where I absolutely knew you had to write code (meaning something other than CMS's most likely). How do you do this? Well, learn, but get out there and challenge yourself. Find freelance projects to do, even incredibly small ones, and try to learn something new on every single one. If you do, your client is paying for you to learn a valuable skill that will increase your value as a skilled coder.
Considering how many free alternatives are out there I disagree.
First time I interviewed for a developer gig, the second person I spoke with asked me to discuss MVC. I had no idea. I had played a bit with objects, but I was totally unfamiliar with the concept of MVC, despite the fact that -- I later realized -- I had actually implemented it somewhat. The interviewer pretty much said "we're done here". I managed to get in for another round, but nothing came of it. What I would recommend, from hindsight: Know OOP and MVC. Reading up on it isn't good enough. Use it. Learn jQuery. You'll need to know the fundamentals of vanilla Javascript, but pretty much everyone uses jQuery too. Developers try not to re-invent the wheel, if we can help it. Everything on new sites is done via AJAX, so you'll need to know how that works too. jQuery makes this easier. Get some work live. Do this before you interview. I always recommend a CMS. It's become a bit of a joke between a coworker and me, because I still work on mine all the time and insist on using it instead of Wordpress. It's never a bad pet project to have though; it displays a lot of different skills. Publish some of your code on GitHub. Not only will it familiarize you with SVN and give potential employers a way to view your code, but you'll be sharing with the community, which is a great way to get your name out there and gain some credibility.
&gt;Well you sound like a discouraging ass Also, using throwaway accounts to say what you really mean doesn't help your credibility.
I am in the process of gradually converting live code to use PDO, loads of internal scripts that do small things. I really wish I would get 1 or 2 month dedicated so that I would be able to power through all of those scripts and modernize the whole thing.
love hearing about other peoples experiences. preps me for potential interview questions and what to expect. like you and many people here have suggested similar things which narrows down what i need to work on. Thanks. 
&gt;Why is scanning a directory's contents any more intensive than loading dozens and dozens of class files like the big frameworks do? If the directory is empty it's a single disk access. APC, that's why. Note: I'm not advocating for big frameworks.
wait? just so i understand you. you think im "screamngimemore" and i have to hide behind another name to tell you something? if you do think it is me, which i really hope you dont, your assumption is making you look very silly. i gain nothing in doing this. 
Well, if he doesn't like PHP and wants to use Django he's not really losing out by not getting a PHP job.
Did he know he was applying for a PHP dev position?
&gt; ...GitHub...SVN... huh?
I'm not a CPA. You might want to talk to one. You will need to register as a business if you plan on picking up more clients. It's easy to do, but how to do it depends on where you are. In California, if your name is not part of the business name, you'll need to file a fictitious business name as well as register as a business with your city. I only give California as an example because each state is different. As an independant contractor or business, you can write off business expenses (office supplies, mileage, business cards, etc), but you don't pay less taxes if, for instance, you incorporate as opposed to register as sole proprietor (there are exceptions having to do with S-Corp vs C-Corp, but at your size, this isn't something you need to worry about yet). Once you have your business registered, you can open a business bank account, and if you want to, a merchant account (credit card processing). You can use any system you like for invoicing. I personally prefer Quickbooks, but with 1 client, it's not worth the price. I hope I didn't confuse you even more. 
I'd fork that...
It's linkspam (see username, domain and post history). Just downvote and move on. 
It's more than one and a half years in development and I can no longer code without it. I've put a lot of love and labor in it, I'd really appreciate it if you check it out.
Same, can't program without it now... I think it's an awesome tool!
As a front-end engineer, please learn actual javascript. Just relying on jQuery will cause you to either write or use plugins to do something thats easier without jQuery. You'll also write better code in general. It will also help out when you're trying to find a solution to a problem. I see so many questions on StackOverflow asking how to do something in jQuery or why X doesn't work in jQuery and it's actually a question about general javascript.
Done and done. :)
I can see that you have really worked on it and I really hate to tell this but, There are already things like krumo(http://krumo.sourceforge.net/) that does this. Can you mention how this might be different. If you can add a search facility to search huge arrays, may be it ll appeal to some people... 
It's mentioned in the second paragraph of TFA. &gt; Kint is an ideological successor (and a superior alternative) to Krumo, which you may know as "Var_dump 2.0". It is no longer updated for quite some time and I've found many issues with it in personal use. The advantages are many and all mentioned in the description. To search for a variable/whatever just doubleclick the plus icon in the output. That will expand all outputs and then you can just use the inbuilt search of the browser.
Yes. I saw. Sorry I missed that at first. Good work!! EDIT: But the search I was mentioning was not that. I have a huge array and I have to search for a certain key, value in whole of that. I cannot possible open the whole of the array because it is huge. 
Okay, dBug seems to recognize some variable types like xml strings, which maybe is a nice feature, I think I'll implement options to output serialized, xml and json strings too, thanks. There's also a separate dump output of database resources, but it's heavily advised against using the inbuilt mysql_* functions, I'll see if I can implement something similar. Thanks again!
if($login_status != '' $login_status == 0) You need a logical operator between the 2: if($login_status != '' || $login_status == 0) 
&gt; if($login_status != '' $login_status == 0) if($login_status != '' || $login_status == 0) 
okay, sounds interesting, how do you suppose this could work from the UI perspective? I can only think of a separate php helper function that filters array keys by passed keyword and you output that instead of whole array. Thoughts?
not much effecient, but, How about converting the whole array to one dimension, where $a['reddit']['bl_nk'] = 'klint' would become $index['reddit/bl_nk'] ='klint' export it to json and output it with the klint display, add a small textbox for searching in the entry for each variable, when user enters some value check the stored index for it and display it with the key decoded to the original form.
&gt; $_POST[username] encase array keys in quotes &gt; $_POST['username'] just do it man, you may not care about it now, but it's the way.
yep, I use it all the time too, it's handy when I don't know if the data i'm gonna work with is a regular array or an object.
You are correct.
Actually, Kint is perfect for my needs, can't think of anything I'd like to have :)
Upvoted because those questions in stack always make me laugh. 
i will do thank you as im sure you can tell this is not my area of expertise
Thank you very much for the information. Out of curiousity, what do you consider a "small amount" that you would normally prefer a check for? Likewise, what is a "large amount" that you'd prefer bank transfer? You are not the only person who has recommended an accountant. All I know about accountants is that they keep track of a company's money. How do they save "more money than they cost"? I'm not saying you are wrong but why can't this be done on my own? At what level of growth do you think it would be definitely recommended to have one? I will check out Freshbooks. My initial idea was to write my own invoicing system in a web application where my customers would be able to log in to my website and view/manage their invoices from there. However, the idea of recurring billing is especially appealing to me. I'm not sure how you would do recurring billing in a web application. I'm guessing you'd need some type of cron job to be executed periodically, which is something I have no idea how to do.
&gt;you can tell this is not my area of expertise that's why I did not go into the "why"
If you're going small-time for a while (getting an accountant is a great idea, see other comments), you should look into bitcoin. It shouldn't be your primary method of receiving payment, but simply offering the option will bring you at least some business, and there's no transfer fee even across state or country borders. Cheers!
First, get an accountant. They will help you immensely with anything tax related. Register your business with the state. IANAL, but look into an LLC for better protection of your assets in case something goes horribly wrong. Then get a business checking account. I use Quickbooks Online for the back-end accounting stuff and generating invoices. I do time tracking in Freshbooks, and then I have a custom portal for clients to make payments. The site takes PayPal and will soon use Stripe.com for credit card processing. I'm not terribly interested in a full merchant account with the volume I deal with, so Stripe's 7 day waiting period isn't a huge issue with me. As a side note, the higher versoin of Quickbooks allows you to make payments through them, but I haven't had any issues with PayPal thus far.
No corporate or mom and pop client is ever going to pay in bitcoins, let alone understand what they actually are.
I receive about 80% of my pay via paypal, especially all foreign clients. Many US (domestic for me) companies prefer to write me a check, and they generally 1099 me at year's end. I am a freelance translator and interpreter, primarily, but also do some webmastering (and localization of websites). I have an invoice template that I fill in and send with completed translations (95% of my translation transactions are over internet/via e-mail, so I just e-mail the invoice with the completed documents). I also have to say, I've done a lot of interpreting for insurance companies, in medical exams, depositions, etc., and they are the worst at being stingy. They don't want to pay anything, ever. It's not like they don't have tonso money, they're just stingy (which is why it's such a lucrative business, of course). Luckily, there are very few Portuguese interpreters in my state (like, 1, I think, and that's me). So when they try to argue rates with me, I tell them,"Pay what I charge or find someone else." Nine times out of ten, they pay what I want, because they can't find someone else. For translating (or webmastering), since physical location is not generally an important factor, of course, I have to be more competitive with rates.
Very nice. I'll give it a whirl and let you know what I think. This is actually great for what I am working on ATM.
I never said they would, I just said it should be available. In fact, &gt; It shouldn't be your primary method of receiving payment seems like a pretty clear warning against it being your primary method of receiving payment. I'm sure that "mom and pop" will be happy to fork over the cash. And there are pretty good efforts happening to educate the public--especially businesses--about the usefulness of bitcoins, so we may not be that far off!
&gt; I would say that even with out mvc experience you would still qualify for a junior position. i know someone that told me he knew alot less than what i know when he got a jr position i figured he knew someone to get the position or lied to my face. of course it wouldnt hurt to have this under my belt but i guess my real question is **what do you need to know to get a entry/jr position**? what should i focus more on. like would very good procedural code not get me anywhere?
I had an idea for a website. 1. Got a book from the library. 2. Taught myself PHP/MySQL (already knew HTML, CSS, and Linux) 3. Implemented idea. 6 months later I had a job as a Jr. PHP Dev. That was 5 years ago. Point is you need to put your skills out on the web in a live demo, which it sounds like you are doing - maybe you need more confidence.
BOOKS dont help me and i know what you meant about spending more time on research. ive tried several learning techniques but the one i found promising is following up on online tutorials do them once, study it, and then **TRY** it on my own by applying it to something that interests me. i knew html/css from myspace/xanga days. i just barely started learning php last September and slowly made projects on my local server and slowly started to add more and more better things to them. This is exactly why i posted this is to get some **direction** because i dont know if im not going about this whole thing correctly. And doing this HELP ME SOO MUCH! if you want to discuss more and maybe build off of each other that would be cool? 
I did. People who have never worked on a project in a team would probably not be familiar with repositories. Experience with GitHub is better than nothing, in that regard.