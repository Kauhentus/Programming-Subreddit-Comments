Looks good - but [xdebug](http://xdebug.org/docs/display)
where abouts of the internet are you from?
just use FROM_UNIXTIME in your select, and you can have it as readable as you wish
Just a suggestion, and you've probably already done this and I've missed it, but could you write some bad code and then link to that on your web page, so that we can actually see it in action on a real broken page, without annotations etc?
&gt; so that we can actually see it in action on a real broken page, without annotations etc
How would you use this with Wordpress?
Pixel per Pixel it should be identical.
The Wordpress code base is full of minor errors, whilst I want the strictest error reporting possible. So I've just added a 'wordpress' option (I use Wordpress myself), which should give you the strictest level possible, without breaking Wordpress. You can find examples on setting it up [here](https://github.com/JosephLenton/PHP-Error/wiki/Example-Setup), at the bottom.
Frankly, I'd stay away from frameworks if you're still learning the language. They can be difficult to wrap your head around if you're not intimately familiar with the language already, and you will learn a lot less about PHP in general if you're just using someone else's code. Now, once you've got PHP down for the most part, frameworks are a great time-saver for your larger projects. I have used CodeIgniter a number of times and I have found it to be very useful.
I think that the idea of putting it in PHP.ini is the best part of all of it. 
&gt; For debugging via AJAX, you can always just use whatever network monitor you prefer [eg: builtin Chrome Network tab on the Developer Tools] and see the xdebug output after the AJAX is called. But then you still have to alt+tab to the Chrome dev tools, or share your screen space with them, and click through the network section, just to see the error. If you come across an error you didn't expect (a bug in something your not working on), it takes a few seconds longer, because you have to open those tools. This might sound really minor, but when your developing a site for weeks or months, that time really builds up. It also starts to drag on those long coding sessions. So I'd prefer to have the error pushed onto me, than have to reach for it.
No, not when used. I know how annoying help pop-ups can be. One of the reasons it has those annotations is because one person I showed it to thought the page really had error'd. It gives a visual que that "this is an example", in case you missed the title. I definitely want to get an ajax example up however.
&gt; However I'm thinking of adding a dump underneath the stack trace. So it's there if you want it, and if you don't, you don't see it. Yes, this would be perfect. After all, one of the biggest reasons I use Developers Tools is so I can see what actually got POSTed, and if it makes sense. So if you want to save the clicks and hassle with an extra window, adding the variable dump under the stack trace is necessary. &gt; I've not tried the xdebug debugger You should look into it. It includes a profiler which can be pretty nice when trying to optimize the speed [or discover the bottleneck in a script]. The stack tracing is pretty good, but obviously, you are trying to make one superior to it. Makes sense that it would override xdebug, however.
I'm on mobile so I'm too lazy to look it up, so let me just guess how they do it. They got a img tag inside a div with styling z-index: -1 and then the div on the top with 100% transparency? Or am I missing something?
&gt; But then you still have to alt+tab to the Chrome dev tools, or share your screen space with them, and click through the network section, just to see the error. If you come across an error you didn't expect (a bug in something your not working on), it takes a few seconds longer, because you have to open those tools. I live with that panel open, and have so since the first version of the wonderful WebDeveloper Tools plugin came out for Firefox. Most developers I know who spend any time on frontend work do. It's just a part of the workflow. You have a lovely tool here that you've created, but you really should checkout the wonderful functionality of xdebug. With warnings for instance, you probably don't want to interrupt the whole page with a stack trace.
not bad, not bad !
You may have changed my life with that link, thanks!
I've always been against the idea of putting errors inline on the page for a few reasons. A) This cannot/should not be used in a production env. B) There are many cases where an error will occur, but because of the html rendering, the error might not show up on the page. C) This only works if you're using PHP for render HTML. This blows up if you're doing a postback, ajax request or any other type of non HTML request.
These three points are exactly why I wrote this. &gt; A) This cannot/should not be used in a production env. You can set it up outside of your project in dev, so it won't get deployed, with two lines in you're php.ini file. You can disable it globally in production, in case it does, with 1 line. Instructions are [here](https://github.com/JosephLenton/PHP-Error/wiki/Example-Setup). &gt; B) There are many cases where an error will occur, but because of the html rendering, the error might not show up on the page. It replaces the page, so errors are always fully visible. &gt; C) This only works if you're using PHP for render HTML. This blows up if you're doing a postback, ajax request or any other type of non HTML request. [Works with ajax too](http://i.imgur.com/OcTpc.png)! The handler is paused during the error, and so you can alt+tab, fix it, alt+tab back, and hit 'retry' to resend. No changes to your site or JS is required.
Since this is capable of being implemented in php.ini, it should be able to be done in .htaccess as well shouldn't it? That would be another way to do it site by site (or even directory by directory). I'll toy around with getting it to work that way.
Yeah, that could work. If you get it working I'll be happy to add those instructions to the github project. The only caveat is that I usually have my htaccess files the same in dev and production, where as php.ini files are usually setup differently. That's the main advantage of adding it there.
Am I old school because I prefer everything to just end up in the logs (syntax highlighting be damned)? And yeah, xdebug's stacktrace is all I need.
&gt; However, no matter the protection it's always possible to save the image by going to the browser cache. You can send no cache headers along with content, so they don't get cached, and most browsers will respect it. Some streaming sites do this with their audio and video. It's already straight forward to get around it; you either download it directly, or run it through a local proxy (such as Proximatron), and add the cache headers yourself. You might also want to take a look at [Steganography](http://en.wikipedia.org/wiki/Steganography), which is the science of embedding messages into images and other media. This is used by some art galleries and other companies to protect their images. They embed a non-detectable watermark into their picture, and so if they suspect you have copied it, they just need to check if your copy contains that watermark. Some companies claim to be able to have this persist even if you convert the image to another format.
I predict it's isset. With @ the error handler still gets run, it just has the error reporting level set to zero during this time, and the in-built error handler respects it. Generally, I have found PHP code that avoids errors all together is generally faster.
Right, isset is not a function, but doesn't it still have to spend a cycle doing a check on that array that it wouldn't had I not just referenced the array? i.e. is the extra array key check more expensive than the error logging functionality? I guess I could benchmark it... ...EDIT - OK I benchmarked it, and it looks like it fluctuates between faster and slower... Perhaps it's too small an operation to measure in microseconds?
Is it your first gig? Just curious. I would leave. Clearly they are way behind and if you stick around there too long, you're missing an opportunity to sharpen your skills at a place that actually programs the 21st century way. OOP is, IMHO, a basic prerequisite to have under your belt before you can even call yourself a programmer. You are right to be pissed about this.
Thanks for the complements. The Ajax stuff is built using a middle-man fake xmlhttprequest object, that I inject into the page, allowing me to take over Ajax. Feel free to rip out the code. For multiple errors, I don't. When an error is hit, it is fatal, and displayed there in full. I have never found it easy tackling multiple errors at once, so I'd rather take them one at a time in full, then all at once.
Ah, I suspect that they have been doing HTML / CSS forever and the most complex is gets for them is some procedural JavaScript/PHP (which is hell to maintain). It may be tough to convince them that OOP is the way to go. Old dogs and new tricks and all that. You could espouse the virtues of OOP, but it sounds like you already had a difficult time getting them on board (due to their stubbornness) 
Yet another reason why you should leave.
That's a matter of taste but I tend to differ, at least in the case of warnings/infos. I also use my error handler for debug messages so I can track the execution path and my variables values (for objects I reflect on attributes). That's the result of too much C++ in Visual Studio, I miss it's debug tools. I'm not going to rip your code as I hate not doing things myself, but I'm definitly going to steal idea of hijacking the xmlhttprequest !
var_dump() does basically the same thing, and when xdebug is nicely set up you get nice HTML and colorful output. 
You shouldn't use `isset` over `@` because `isset` is "faster". You should use `isset` because it is good programming to always be sure of what you have available before attempting to work on/with it.
Most likely. The div on top is probably a transparent png instead. css transparency is a bitch in older browsers
This script uses short opening tags, that's what caused my parse error. Now the require works fine, but if I call the function, the connection is lost to the server. Wut.
I prefer http://dbdeploy.com/ because phing has a built in task but there is also http://www.liquibase.org/. 
I've updated a new copy which doesn't use short tags; if ThePaavero is right, then that should be resolved. Sorry!
I actually built a [custom var dump with nice formatting](http://i.imgur.com/8rRP5.png), var types, and collapse able array/object output. Works awesome :)
Can you give any more details? Is there anything in the error log? Just a guess, but are you also making any calls to 'ob_start' before or after loading? I had a bug that related to that about three weeks ago, which kinda sounds a little similar.
You can never defeat every method of screen capture. However, you can use javascript to both display images and to catch the print screen button event. What I do is use a clear png for the image source and I use javascript (ajax) to set the background of the image container to the image... when the print screen button is pushed, I change the background image to a watermark or whatever. It's not 100% foolproof... but it does reduce the amount of picture theft.
I understand that, but since we do not have namespace autoloading available, this is the best compromise I've found.
For benchmarking, you want to run an operation more than once. Running it only once means that the test is subject to random fluctuations in whatever your CPU is doing at the time. Your benchmark should take at least seconds to run.
^Urgh ^TB. *placeholder for comment coming after I finish work*
Nothing, as far as I know. My work environment doesn't support it (and I don't have any control over that), so I use this. I've used xdebug in the past on personal projects (not much time for those these days), and I like it a lot.
+1 for DBDeploy, but along with keeping track of your DB delta scripts, I'd also recommend establishing a baseline data SQL file that you can update as things go along. This way, you can completely rebuild the database quickly and easily and get it back to a known state at a moment's notice.
Install xdebug, then edit your php configuration and set some xdebug options. For example, here is a copy paste of something on one of my dev servers: zend_extension=/usr/lib/php5/20090626/xdebug.so xdebug.default_enable on xdebug.profiler_enable 1 xdebug.profiler_output_dir /path/to/some/dir xdebug.trace_format 0 xdebug.auto_trace on xdebug.trace_output_dir /path/to/some/dir xdebug.trace_output_name trace.%R xdebug.collect_vars on xdebug.collect_params 4 xdebug.collect_includes on xdebug.collect_return on xdebug.show_mem_delta 1 xdebug.show_local_vars 1 xdebug.max_nesting_level 50 xdebug.var_display_max_depth 6 xdebug.dump_once on xdebug.dump_globals on xdebug.dump_undefined on xdebug.dump.REQUEST * xdebug.dump.SERVER REQUEST_METHOD,REQUEST_URI,HTTP_USER_AGENT xdebug.remote_enable on xdebug.remote_handler dbgp xdebug.remote_host 127.0.0.1 xdebug.remote_port 9000 xdebug.remote_log /path/to/some/dir xdebug.remote_autostart 1 I would not use this on production though.
I'll go download CodeIgniter.
Maybe novel, maybe not. But nobody can dispute the usefulness of such tools. The more the merrier. And it's not just handy to newcomers. (I would wish one of those tools would be distributed per default with PHP. Time to expand the standard featureset beyond PEAR in my book.) Making errors and notices more accessible is obviously the main goal. But I'd like to make a feature request here; extending it into an "error *manager*" would be even groovier. Not all errors and notices need to be suppressed or worked around. I know I'm alone with that opinion, but I retain a few undefined var messages. They're there for debugging, not eschewing. But having too many obviously diminishes their usefulness. If I had a tool to tag / document them, and a filter feature for various debugging stages could be a significant bon.
There's actually an [RFC](https://wiki.php.net/rfc/array_column) out to have this type of functionality in core. The name is still being discussed on the internals mailing list (some pushing for array_pluck), but that's the beauty of the RFC process.
dvd($o){die(var_dump($o));} dpr($o){die(print_r($o));}
Fair enough, I still stand by my original statement though. :)
same here but mine goes like: function t($param='exit',$stop=true){ echo '&lt;pre&gt;'; var_dump($param); if($stop) exit; } 
None at all from what you're saying. As long as the proper caching configurations are set on the files then that's fine. While I was talking of download speed partly, my main concern is in the browser's rendering of the web font. It's fresh in my mind as I had a client that chose looks over speed and now the site is dreadful. As long as performance isn't thrown into the trash for the sake of looks, then web font away. The middle ground is best when done right. :)
I have taken the liberty of just modifying your stylesheet to reflect the fonts I suggested. I am at work and can't spend too much time on it, so there are a few padding/spacing issues that need worked out. But this is more of a "let me show you what I mean" when I say that it doesn't take much to enhance the look of a website. http://i.imgur.com/L0yHr.png You're the dev and Codetique is still awesome, but IMO spending 65kb one time to spice up the look even a little bit like this is absolutely worth it.
This was just to show a snippet. My actual system is a Library folder with bootstrap.php which defines and registers an spl_autoload_register function. Three folders in there: Models, Views, Controllers.
Have a look at Symfony2, this framework has a lot of useful tools (including error handling and web debug toolbar)
Yes yes, indeed. Such a error log and tagging feature would be most useful as secondary bug tracker. Not sure if it's feasible or sensible as it diverts attention from unit testing. But I do indeed love to "break the law" in regards to undeclared variables. (It's common that there is no breakage, but the notice seldom enough to retain it. Yet it can indicate breakage outside of your code (e.g. RPC input), and so full isset silencing not the best option.) It's probably overkill, but on my list of nice to have.
Prefer doing things the proper way over micro-optimization.
I would use: if ( ! empty($aSomeArray['SomeAssocArrayKey']) &amp;&amp; $aSomeArray['SomeAssocArrayKey'] == 'SomeValue')) { // Do Somethin' } EDIT: Disregard this. Just to add that using @ is almost always "incorrect" and bad practice. Only on certain situations like reading from a file it is acceptable, since the file might not be available.
To expand on mikedar's correct point; &lt;?php $array = array('key'=&gt;'value'); $iterations = 1000000; $start_isset = microtime(1); for($i=0; $i&lt;$iterations; $i++){ if(isset($array['invalidkey']) &amp;&amp; $array['invalidkey'] == 'invalidvalue'){} } $time_isset = microtime(1) - $start_isset; $start_suppress = microtime(1); for($i=0; $i&lt;$iterations; $i++){ if(@$array['invalidkey'] == 'invalidvalue'){} } $time_suppress = microtime(1) - $start_suppress; echo "Time(isset): " . $time_isset . "\n"; echo "Time(suppress): " . $time_suppress . "\n"; $ php isset_suppress.php Time(isset): 0.064298152923584 Time(suppress): 0.77993178367615
Thanks a lot, but I'm still having the same problem (I also moved the require and function call from the index to the autoload file). Here's my php.ini -&gt; http://pastebin.com/Mx2dC5t0 EDIT: FYI: Noticed I had output_buffering set to 'on', turned that off, restarted WAMP, but still no dice.
We use a version number stored within the database, and a script that checks the version number, and if necessary, makes the appropriate changes to the database to bring it up to date (e.g., "alter table xyz..."). A giant switch statement without "break"s ensures that it can catch up from any previous version to the current one. It's a very simple system and hasn't failed us in 10 years of scores of developers and deployments all over creation.
that's pretty nifty!
I hope no one logs in with a username of **';DELETE FROM USERS; --** Also, the reason that the redirect is not working is that you are outputting HTML (the doctype et.al) before the header. You cannot do this and you are likely getting warnings about the header being sent after output. To emit header info, you must **NOT** have **ANY** output whatsoever before the header() statement.
LAMP, WAMP &amp; MAMP all come with it installed just not enabled ;)
Did you look at the code? It does not look nice.
My personal issue with these type of articles is the whole premise of "We ALL know how horrible PHP is, right?!? I mean, it's TOTAL shit, for real"... followed by something like "but it IS easy to learn, and easy to setup on server". And in this specific article, like many similar others, it seems like he's talking about PHP4. In fact, one of his criticisms is that so little has changed in PHP, which is complete bollocks. IMHO, PHP 5.4 is great. No back-handed compliments or anything... it's just great. I can LITERALLY do anything that python or ruby can do on the web. And I've just grown tired of all the "we know it sucks, but here are some reasons it's okay" blog posts and articles.
what if $aSomeArray['SomeAssocArrayKey'] is set to int ZERO, and SomeValue was zero? 
http://www.php.net/manual/en/function.is-readable.php
Why? @ is always slower, especially if you're doing something like opening a file when it is not necessary (ie its not readable). 100,000 iterations of is_readable vs @fopen: Time(readable): 0.080253124237061 Time(suppress): 1.3109090328217
What's the downside to using a class as a static container? The downside of console_log vs Console::log is that, as I said before, no autoloading. I see no upsides to moving it to a function that has to be manually included.
Put your code in [here](https://codetique.com/review/create) That will syntax highlight it and make it easier to look at and troubleshoot. 
I've been trying to read everything and anything that interests me. You probably need a reading list of some sort. One book I can recommend right now is Design Patterns: Elements of Reusable Object-Oriented Software. http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612
If you download and install phpMyAdmin, this will allow you to edit your database with your webbrowser, I believe multiple fields at a time. If you wanted to present it differently, then you can write your own code. If you want to learn how to do this as an exercise, by all means do so, but if you are looking for a way to edit fields in a database via a web browser, use phpmyAdmin. [phpmyadmin](http://www.phpmyadmin.net/home_page/index.php) download and extract to your web root. Edit the config.inc.php file to point to your DB with proper credentials and you are off to the races. [quick install guide](http://wiki.phpmyadmin.net/pma/Quick_Install) edit: changed phrasing.
I have actually looked into doing something like that. I do agree for larger monitors there is a ton of whitespace. Perhaps there can be some detection and if screen size is sufficiently large comments could bump into another column. Isn't there a lot of whitespace in the code you write too. How do you solve this in your IDE? I mean 52" is larger than my family room TV. 
If I can get a community around this and start making some money then I have plans for IDE plugins so maybe in the future that wish could come true.
This isn't really much different than doing it with MySQL. Some of the SQL query may change to be compatible with MSSQL but it's really minor changes. Also, you will not have PDO available, technically there is a MSSQL driver for PDO but last I saw it is still in the experimental stage, so you'll have to do it the old fashioned way and sanitize your information manually. As [merelyasetback](http://www.reddit.com/r/PHP/comments/vxsu4/trying_to_do_something_simple_with_forms_but_just/c58khy8) already said, you'll want to make sure and have a primary key ID setup in the table and make your edits on that ID.
 &lt;?php // Sorry reddit, i am very bad in english. So more code, than words class Memo{ static $fns = array(); } function def($name, $fn){ Memo::$fns[$name] = $fn; if(!function_exists($name)) eval('function '.$name.'(){ '. ' $fn = Memo::$fns[\''.$name.'\'];'. ' return call_user_func_array($fn, func_get_args());'. '}'); } /* --------------------------------------------------------- */ // Simple usage: def('hello', function(){ echo "Hello!\n"; }); hello(); # Hello! def('hello', function(){ echo "Hello again!\n"; }); hello(); # Hello again! /* --------------------------------------------------------- */ // Controllers: def('def_url', function($name, $fn){ def($name.'_url', function() use($name){ return '/'.$name; }); def($name.'_link', function($text) use($name){ $fn = $name.'_url'; return sprintf('&lt;a href="%s"&gt;%s&lt;/a&gt;', $fn(), $text); }); def('redirect_to_'.$name, function() use($name){ $fn = $name.'_url'; header('Location: '.$fn()); }); def($name.'_page', function() use($fn){ $fn(); }); }); def_url('basket', function(){ echo "...Basket page..."; }); echo basket_url()."\n"; # /basket echo basket_link('Basket')."\n"; # &lt;a href="/basket"&gt;Basket&lt;/a&gt; basket_page(); # ...Basket page... redirect_to_basket(); /* --------------------------------------------------------- */ // HTML DSL (nise, but useless =( ) def('def_sprintfer', function($name, $tpl){ def($name, function() use($tpl){ $args = func_get_args(); array_unshift($args, $tpl); return call_user_func_array('sprintf', $args); }); }); def_sprintfer('a', "&lt;a href='%s'&gt;%s&lt;/a&gt;"); def_sprintfer('img', "&lt;img src='%s'&gt;"); def('def_tag',function($name){ def_sprintfer($name, "&lt;{$name}&gt;%s&lt;/{$name}&gt;\n"); }); foreach(array('p','div','html','head','body','title', 'h1') as $tag) def_tag($tag); echo html(head(title('Hello, World!')). body(div(h1('Hello, World!')). div(p("This is a page about world!"). a("http://world.com", img("http://world.com/logo.jpg"))))); # &lt;html&gt;&lt;head&gt;&lt;title&gt;Hello, World!&lt;/title&gt; # &lt;/head&gt; # &lt;body&gt;&lt;div&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt; # &lt;/div&gt; # &lt;div&gt;&lt;p&gt;This is a page about world!&lt;/p&gt; # &lt;a href='http://world.com'&gt;&lt;img src='http://world.com/logo.jpg'&gt;&lt;/a&gt;&lt;/div&gt; # &lt;/body&gt; # &lt;/html&gt; 
ci has its own way of giving you error details, get xdebug and learn how to user it, much better and faster IMO
Also, two very subtle differences: &lt;?php $i = 0; echo $i++; Output: 0 &lt;?php $i = 0; echo ++$i; Output: 1 
Been using the tutorials on w3schools.com to limp my way around so far and you are right, the syntax is nearly identical. Bluefish autopopulates the code so that is helping as well. EDIT: I see what you mean about the primary key ID. Its actually in there. It automatically generates when we add a new user to the table. Its labeled "Owner_ID" in our table. So in actuality there are 4 columns: Owner_ID, Name, Asset1, Asset2. 
 $i++ Is basically the same thing as: $i = $i + 1 `++$i` is supposedly faster than `$i++` ( expression ? true : false ) This is yet another shorthand version. It is also referred to as a [Ternary Operation](http://en.wikipedia.org/wiki/Ternary_operation). Do not overuse this. Shorthand to do: if( expression ) { // true } else { // false } 
Seriously? This is not a review. Add more detail or its just an ad.
Well, that was really, really quick ;-)
Hence why I stay away from ++i altogether. Its rarely the most intuitive way to write the code anyways.
Ok guys, I love this framework and I will try to describe it a little. Symfony2 have a really, really nice design. This framework bases on SOA using IoC's Dependency Injection pattern. I have tried Yii, CodeIgniter, a little Zend, and Symfony have a better architecture than any of these. By the way Symfony2 brings many of RoR's and Java Spring's ideas to php. You can create your services and declare their dependencies. But you can also use just controllers and service container (DIC is similar to Service Locator) to get services and not create yours. Symfony2 use Twig template engine (but you can use php as well), I will not describe its syntax, you can google twig's site and watch it yourself, but I will mention only one thing about twig - extending templates. This is a very very useful feature. Ok then Sf2 use Doctrine2 by default as ORM. This is just the best ORM written in php. Just because it so comfortable to work with. I don't know what to say else, just try it:) Especially if you're working with MongoDB. Doctrine2 brings ideas of Spring (Java) and Entity Framework (.Net). Doctrine may be harder to understand than Yii's AR, but it worth it. Symfony2 have a really good Form builder/validator. It can help you with building a very complex forms based on any entities. It also has events that can help you to build dynamic forms. Sf2 can use yaml, xml or php for configs. And in some cases you can use annotations, this is very useful. Also sf2 have a web debug toolbar, you can google it and screenshots, it can provide you information about your request and what was happening while sf2 was handling your request (database queries w/ explanations, some config rules, and timeline of execution). Also symfony lays on code generation. Compiled twig templates are php classes (so if you extending some template then complied class will also do this). This is needed for better performance on prod env, all the annotations and config files are compiled
Pretty sure that Php**My**Admin is for **My**SQL not MSSQL. Unless the OP got it wrong and means MySQL, this will not help him? In the spirit of keeping this helpful though, http://stackoverflow.com/questions/1372641/something-like-phpmyadmin-but-for-sql-server
I would like to see on the main page how many people have looked at the code snippets. With this I could see the looks/answer ratio and maybe filter crap review requests with a glance 
split is deprecated, length is a javascript property and short tags are always a bad idea
Hmm, do you suggest swap whole database with data or?
That sounds a lot like the way Drupal works with module updates. The only problem I can see having one global version number for the entire schema is if two different developers working on different features both create new versions of the schema. How do you prevent conflicts in version numbers and what happens if you want to put feature B live before feature A?
You're able to disable short tags in php.ini. If you attempt to deploy your PHP application to a server where short tags have been disabled, you have to replace all instances of &lt;? with &lt;?php, which can be a pain in the butt. I'm not saying this is common, though. I've never encountered a server that has disabled them. Also, &lt;? will be deprecated in PHP6 or something. And another thing, &lt;? causes problems if you're serving XHTML or XML I believe, but I can't remember why. Sorry.
they sound awesome until your client moves servers and you have to go through hundreds of thousands of lines of code to remove them
In addition: News ["CreatePHP demo now online"](http://blog.iks-project.eu/createphp-demo-now-online/) Article ["CreatePHP Taking Shape – Another IKS Early Adopter"](http://blog.iks-project.eu/createphp-taking-shape-another-iks-early-adopter/)
In that example, no it doesn't really matter. But it makes a difference in for loops. for ($i = 0; $i &lt; 4; $i++) vs for ($i = 0; $i &lt; 4; ++$i)
i like it, nice and simple.
Actually I got the idea from a proprietary system developed in house where I used to work. Theres was pretty different from what Codetique has developed into now though. I'm working on tackling multi-file reviews. Once I get that working then adding integration to any version control shouldn't be difficult. I have some ideas on gamification but I really want to reward people for doing good reviews so I'm considering actual monetary rewards for doing reviews. I haven't hammered out all of the details on how it will work (that's one of the reasons why I wanted to take this to that startup event) but hopefully in the near future that will be an option.
And for objects?
I don't think I've ever had to do this for objects, but I think this would work: $object = new Foo(); $object-&gt;bar = null; var_dump(array_key_exists('bar', get_object_vars($object)));
Could not agree more about JS. I used to hate using JS until I dabbled with libs like Prototype and then jQuery some time after. Now I'm completely addicted and a large portion of the product I manage is written in JS (with nodejs).
 private static function FormatFileArray(array $_files, $top = TRUE) { $files = array(); foreach($_files as $name=&gt;$file){ if($top) { $sub_name = $file['name']; } else { $sub_name = $name; } if(is_array($sub_name)){ foreach(array_keys($sub_name) as $key){ $files[$name][$key] = array( 'name' =&gt; $file['name'][$key], 'type' =&gt; $file['type'][$key], 'tmp_name' =&gt; $file['tmp_name'][$key], 'error' =&gt; $file['error'][$key], 'size' =&gt; $file['size'][$key], ); $files[$name] = self::FormatFileArray($files[$name], FALSE); } }else{ $files[$name] = $file; } } return $files; } This makes working with the $_FILES array much easier in my opinion. I also use this a lot unless someone has a better recommendation: static function is_int($int) { if(is_numeric($int) == TRUE) { if((int)$int == $int) { return TRUE; } else { return FALSE; } } else { return FALSE; } }
&gt; To confirm, was it the issue with using short PHP tags? Yes (as you've characterized it). &gt; When loading via php.ini, I am unable to autoload neighbouring classes, without specifying my own autoloader. The autoloader is supposed to be configured at runtime. You can simply register your own, as you pointed out without affecting downstream. It's just another source for definitions. &gt; Which IDE are you using to analyse? I've ran it through Zend and WebStorm PHPStorm can be configured to selectively inspect for different languages, error types (there are limitations) and common practices. Eclipse can be configured (with more work) to do much of the same thing and some extra bits (iirc).
 &lt;img src="image.php"&gt; http://us.php.net/readfile "A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide." &lt;?php $file = 'http://10.1.1.5/image.jpg'; $type = 'image/jpeg'; header('Content-Type:'.$type); readfile($file);
How do I locate the code the web server runs? i've been trying to locate it to try and do this. wasn't sure if it was possible. PS: I'm a noob
Well thank you. Was going to do a test like that to check which one was faster. :)
symfony 1.4 was alright, good documentation especially the books. it was also fast with dev environment. symfony2 is slow as shit. even with a top of the line pc, sf2 (using dev environment) was really slow. you have to wait a few secs for the pages to come up (with a huge spike on processor every time). i've read everything to try to speed it up, to no avail. they should try to make this crap fast out of the box and not try to come up with excuses like my setup is wrong, or i'm not tweaking it enough or some nonsense. i'm not the only one having problems, just read about how sf2 is slow. sf1.x was a joy, but sf2 is another thing altogether. sf tries to be too railsy. if you want rails, just go ror ffs. ror is a piece of cake if you're not a moron.
I will try to make this short &amp; it may sound stupid. My wife is a SQL developer and explained to me that many employers use stored procedures for the security benefits they provide. I am working on a project for to set up a MySQL database and register users for my BIL's website. I started to look into using stored procedures for passing data in/out of the database but it led me to my current question. It seems to me that using server side stored procedures is not a common practice for PHP developers or am I missing something here?
sf2 is slow only in dev mode and only if it needs to warmup cache. Yes, first (cold) run usually takes 8-12 secs, but then it takes 200-400ms. It could take more time if you run it on winows (don't know why). But yeah, this scared off many of developers.
There is no error-checking (i try to write less code, to show idea more clearly). On github i have more advanced version [bu.defun](https://github.com/Bubujka/bu.defun). I love metaprogramming and dynamic-languages. Without my lib - i will be very unhappy in programming on PHP (after knowing some lisp, io, js, ruby). I use it for all projects at work. You can see more (synthetic) [exampls](http://defun.bubujka.org/doc.html). Not all i use every day (some demo i write only for fun). But this is useful for me: &lt;?php // ... // def_return save value and always return it on call. // At first iteration i can write this: def_return('admin_password', 'SuPeRSecReT'); // and use it: if(post('pwd') == admin_password()){ is_admin(true); redirect_to_admin_index(); } // without lib: function admin_password(){ return 'SuPeRSecReT'; } // or in class: class Admin{ static function password(){ return 'SuPeRSecReT'; } } // I always use function - in future i can replace def_return with logic. // def_return i use always, when i need constant. // def_memo save results of function in static variable (its hidden from users - // dont think about it) def_memo('sum', function($a, $b){ echo '.'; return $a+$b; }); echo sum(1,2)."\n"; #.3 echo sum(1,3)."\n"; #.4 // this call get results from cache. echo sum(1,2)."\n"; #3 echo sum(2,1); #.3 // At first i write def-function, but when i need some caching // i replace "def" with "def_memo". // defmd - cache function results in memcached bu\def\memcached_prefix('bu.def.tests'); defmd('sum', function($a, $b){ echo '.'; return $a+$b; }); echo sum(1,2)."\n"; #.3 echo sum(1,2)."\n"; #3 // def_accessor acts like def_return, but can replace stored value def_accessor('title', 'Hello from my site'); def_layout_url('basket', function(){ title('Basket page'); echo view('basket'); }); // and in my layout: # ... echo '&lt;title&gt;'.title().'&lt;/title&gt;'; echo $data; # ... // About controllers: in our projects we have // - def_url - return raw output to browser // - def_layout_url - wrap raw output with "view/layout/".layout().".php" // layout() - defined with def_accessor too // - def_admin{,_layout}_url - if user not admin - its redirect to login page // - def_{user,guest}_{,layout}_url - some pages only for users, another for guests // - def_json_url - adds correct headers, catch return value and use json_encode on it // and def_wrapper... def('ob', function($fn){ ob_start(); $fn(); return ob_end_clean(); }); $v = ob(function(){ echo "Hello, world!"; }); echo "&gt;$v&lt;"; #&gt;Hello, world!&lt; // we can write big function with 'echo' def('big_output', function(){ echo '1'; for($i=0;$i&lt;10;$i++) echo '.'; echo '2'; }); // and if we need all it's output in string: def_wrapper('big_output', 'ob'); echo '&gt;'.big_output().'&lt;'; // with def_wrapper we can controll all arguments and return values // Write loggers, inspectors $wrapper = function($call){ $call-&gt;args[0]++; echo "&gt;"; $call(); }; def('say', function($i){ echo $i."\n"; }); say(1); #1 def_wrapper('say', $wrapper); say(1); #&gt;2 def_wrapper('say', $wrapper); say(1); #&gt;&gt;3 undef_wrapper('say'); say(1); #&gt;2 undef_wrapper('say'); say(1); #1 
You can write a populate() function to retrieve the data and populate the form on load. Then, when the user submits the information again have the database update with the current values in the form.
Yes, I've begun reading about PDO. I was just curious more than anything about why there does not seem to be more tutorials about using stored procedures to provide security. Maybe the PHP development community has evolved along different lines than SQL developers (just a theory). Thanks for your reply. 
The problem with stored procedures is that often times you end up implementing your business logic in multiple places. Add a column to a table? Now you have to update your stored procedure and the code that calls the procedure. Granted, there are worthwhile use-cases, but for more apps it just isn't necessary.
These replies are very enlightening, thanks for taking the time to respond. 
And if it's a streaming JPEG that doesn't stop loading, be sure to also set your timeout to zero so that your script doesn't die at 30 seconds (the default): set_timeout(0);
Programming. You need to learn it.
Agree. And also stored procedures are more difficult to debug/optimize.
No need to be pedantic. I know what it's for. That's why I said not to use it.
If your database is of a decent size running your tests agianst all if your data will take forever! 
The main point being made is that PHP is not as good as some of the alternatives. As good as PHP has become (and I am a big fan of 5.4) it is still downright missing some features that other languages have had for ages. That doesn't mean I just prefer the other language, and it doesn't mean I hate PHP. It's simply a matter of fact that those features are missing, and that sucks. You can do anything in any language, but given Python or Ruby you get a slightly neater syntax to do it in. And the fun part is that none of it matters. At all.
PHP is not _meant_ to be used in any specific way. Replacing chunks of it with C is certainly an optimisation but that is not really the point here. Using any server-side language alone to build a website these days is considered slow, so most high-traffic sites I know are making the switch to API-centric systems with JavaScript frontends. All the backend API is handled with Node, or PHP, or Ruby - ie: it doesn't matter. You can still build a big-ass website with PHP, as is proved every single day.
$src is not defined within the scope of click(). To access $src, a global variable, you need to use `global`: function click() { global $src; // your current code here }
This should be taken with a grain of salt, as you're calling it a hundred thousand times in your code. So it's only a real performance hog, if you are doing this in a tight loop. Otherwise you won't notice. Plus you could try caching the reflection information, to see if it speeds it up. I've done that in java.
thanks
PHP is meant to be used as a glue for C/C++ because that's what the *creator of the language said*. Period. You can use it however you want to, but people that don't use it the way it's very specifically been designed to be used can't complain when it doesn't live up their expectations. &gt; You can still build a big-ass website with PHP, as is proved every single day. What websites? My site gets 25 million page views a day, and it's written in PHP, but I wouldn't call that a "big-ass website". I've already had to start planning for a move to a different language. Sites like Facebook and Yahoo most certainly aren't running straight PHP. We know that. [Tumblr is moving away from PHP](http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html) to Java/Scala, just like many start-ups do once they start becoming big-ass websites.
&gt; I don't give a damn what PHP 1 was for, or 2 or 3. This discussion doesn't have anything to do with past versions of PHP. I'm talking about how it's being used *now*. I'm talking about how Rasmus Lerdorf *still* gives the same speech at every conference, describing the way PHP is designed to be used. We're talking about the way massive sites like Facebook are *still* using it. &gt; PHP can be used to build massive websites. That cannot be argued. Oh, it most certainly can be argued. My site currently has an Alexa rank of 945, and I still don't call that a "big" website. I'm not sure you know what a "massive" website is. Simply saying "that cannot be argued" doesn't magically make you correct. I'm not even going to address your Node statements, because it has no bearing in this discussion.
I'm honestly surprised t how many people think hiding the source of the image isn't sensible. This is the most obvious solution to this exact problem.
Yes, the dreaded "do you wish to resubmit form data" client problem when they hit the back or refresh buttons. [Here's one solution to help with that](http://en.wikipedia.org/wiki/Post/Redirect/Get).
Hmm it's funny you should mention that - I actually had been using: ONCLICK="history.go(-1) which I guess is what was confusing you. I had just thought that was probably stupid and adjusted now to: onclick.location href='URL' and it has removed the error! However I'm just in the process of going through my code putting all the value="$varibable" in - and it works well for simple inputs. I think I have a storm ahead of me when it comes to &lt;select&gt; fields with hundreds of options and also radio buttons. I think I can do something like &lt;? php if($variable == "optionvalue") echo "selected" ?&gt; straight into each and every &lt;option&gt; tag.... but that is a very long process - any tips on ways around this? 
Please stay away from frameworks until you've got a solid foundation in PHP. Everyone in this subreddit will be quick to point you at a framework like CakePHP but if you don't understand the language underlying the framework you'll either stick yourself in a subset php monoculture and not understand the greater php world or at least confuse yourself for a long time. You need to know why things are done the way they are before you commit to a framework. Choosing a framework takes an informed decision which you cannot make if you haven't already mastered the basics.
Wait, really? It doesn't in most languages. What difference does it make?
Put all your option values in an array, like so: $vars = array('optionvalue' =&gt; 'option name', 'optionvalue2' =&gt; 'option name 2', etc. . .); foreach($vars as $val =&gt; $name){ if($variable == $val){ echo '&lt;option value="' . $val . '" selected&gt;' . $name . '&lt;/option&gt;'; } else { echo '&lt;option value="' . $val . '"&gt;' . $name . '&lt;/option&gt;'; } }
Copy / paste
haven't you heard of security through obscurity?? ha
You want to *encrypt* your data, not *encode* it.
Honestly I don't even know what a framwork is. I minored in CS in college programming in C with vim. I'm not exactly familiar with high-level tools or IDEs. I think part of the problem is I'm learning html for the first time with php and mysql. After some more googling I think what I want can be accomplished with a simple html *text area* as long as I can populate it with php variables holding mysql data. What I was looking for was an example of a php loop that outputs forms containing the mysql data to be resubmitted if changed instead of just a non-interactive table. I appreciate your philosophy. I think it's the right way to do things. It's how I learned C and C++, I'm just a total beginner to web languages and in this case I think basic html is hurting me. Hopefully I can phrase my questions better as time goes on.
I went with this: //Where the source is being initialized and assigned global $src; $src = "http://tinhatstudios.com/wordpress/wp- content/themes/MyTheme/images/plussign.jpg"; //Where the click function is being created function click(){ if ($src == "http://tinhatstudios.com/wordpress/wp-content/themes/MyTheme/images/plussign.jpg") $src = "http://tinhatstudios.com/wordpress/wp-content/themes/MyTheme/images/minussign.jpg" ; elseif ($src == "http://tinhatstudios.com/wordpress/wp-content/themes/MyTheme/images/minussign.jpg") $src = "http://tinhatstudios.com/wordpress/wp- content/themes/MyTheme/images/minussign.jpg" ; } if (have_posts()) : while (have_posts()) : the_post(); //Where the click function is being called echo '&lt;div id="title'.$i.'" class="sdvExp" onClick="'.click().'"&gt;&lt;h3&gt;&lt;img src="http://tinhatstudios.com/wordpress/wp-content/themes/MyTheme/images/plussign.jpg" width="20" height="20" id="plussign"/&gt;'; It still isn't switching the source of the image. I think it may have something to do when the page is being requested by the server. Since page is originally loaded with one source the second one can't be found....maybe? I really don't know. I honestly just want it to look similar to the collapse feature in Reddit. where you can collapse each comment line. I'm going to try and decipher their code.... Thanks for the help though.
Setapdf
Yes. Avoid most of the time.
Great little link for a side/bored project
I've seen both these methods (the sessions versus the storing) and heard people say both are the better option - mind filling me on why you would recommend against session storage? Also thanks for the advice on the the two options to solving the resubmission issue. I don't know anything abuot Ajax so if anything I'll do 2. However: I feel like I'm headed to a solution with my current effort of storing the variables, and then generating a somewhat dynamic form every time a page of the form loads, the value checks if there is a variable that matches it's name and fills the field with it if there is. Is this bad? why so? Many thanks for taking the time to help - really appreciated
Oh fancy talk. Ok that makes sense - I think I'll build it with sessions first and then when I learn more about databases and MySQL I'll implement just such a thing
Let me add this gem, published by CMF-Main-Contributor Lukas Smith: https://twitter.com/lsmith/status/220418990424596480
Upvoted. People should do a little googling and complete some self-education before posting basic requests such as this here.
You are definitely more up to scratch with Rasmus quotes than me, but I don't listen to him much as generally it doesn't matter. He says a whole bunch of stuff. So what are the points of this argument: Rasmus says you should replace as much with C as you possibly can if you want to make a big site, and so does Facebook. That's one optimisation route for sure. But you can also build API-centric systems, with lightweight frontends, load balanced middle-ware and smart-caching on the back. This works just as well and is how we did things there. You can also use PHP frameworks that are already compiled as C https://github.com/phalcon/cphalcon/, which is mental but works. The fact that you have multiple options for how to build large sites, in any language is a good thing. PHP will hold up just as well. You can RAD your whole site with a team of PHP devs, then optimize it at a later point by switching parts out. This comment thread started with me saying PHP can be used to build large websites. It can be, and it's not a bad idea to do so. If you know how to optimize and iteratively improve a system then it's going to scale fine. As I said 20,000 WITHOUT caching, shows that much higher results load be possible WITH those systems in place. Congratulations on 945.
What if the problems can't ever be fixed? Would it then not become almost reasonable to deny those problems exist or matter? There has been various attempts to rewrite php as a less broken language. Nobody cared, because it wasn't php anymore. The PHP core team is stuck with keeping the warts for the sake of backward compatibility. This translates into new features being more awkward than they should be to account for the baggage. So I can see the lure of accepting the things that cannot be changed, and finding simple joys in the midst of our shared misery. 
Interesting. But all it does is put more oil on the fire. I wish everyone would get on with their lives. I - and a lot of PHP dev - don't give shit about your high horsed opinion on the language. So while I salute Fabien for his words - and work -, I just wished he had abstained from speaking out... The past week has been awful, constant bashing on PHP coming from people with little to no experience in it. And whenever you try to argument with them, you are just tagged as fanboy...
Having learned "programming" trough a basis of C, then 8+ years of PHP-hacking. I can say, that learning Ruby and Python has been the best thing ever for me. I finaly learned to write proper PHP too! To properly design your application. Write tests. think about thread-safety, race-conditions, offloading, layering, and so on, and so on. So yes, &gt; PHP is still the easiest language to learn for non-technical people It applies to me. But that really is &gt; PHP is still the easiest language to learn to program the wrong way, for non-technical people I would never, ever consult someone to learn programming by learning PHP anymore. Instead, one should learn to program in a strict environment. Just like you can learn anything else properly, only when the teacher is strict instead of floppy, and self-admiddetly "not very good at her subject".
I know .. I'm using php-fpm behind nginx. But as far as I know still every request has to start at line 1 of the called php file. It has to process all includes, register all services, register all routes before the handling of the request can even start on every request and it's not really faster then apache+mod_php. I use it on my server because it makes it so much easier to also host ruby and python apps behind that nginx server. I guess this is also the main reason why facebook converts most of it's code to c++, so it won't have to bootstrap every request... and I guess it's the reason why php is bad in benchmarks like http://blog.curiasolutions.com/the-great-web-framework-shootout/
&gt;Citing the popularity of a programming language as the measure of its quality is like calling Britney Spears the greatest composer of all time Popularity is not a measure of quality, but it is a measure of success. And PHP is a very successful language. &gt;I don't get this defensive attitude from the PHP community. Admitting that problems exist is the first step towards fixing them. Most of the problems which are usually voiced are not problems at all. But rather complaints by users who not fully understand PHP. Or from people who struggle to switch to PHP from another languages. So usually in those big posts where people ranting about PHP there might be couple of genuine problems, but they will be lost in a global nonsense. Plus most these problems are well known and being worked on. Unfortunately PHP is similar enough to most other programming languages so people expect it to work same way, and is different enough that it doesn't. So people keep complaining about it and frankly it pisses many PHP programmers off. PS. Contrary to popular belief PHP does not have an international group of assassins which will kill you if you switch to other language. So if you don't like how PHP works either join discussion on what changes should be made to it([wiki](https://wiki.php.net/), [mailinglists](http://php.net/mailing-lists.php), [issue tracker](https://bugs.php.net/report.php)) or switch to Ruby, Java, C#, Brainfuck or whatever language you prefer. 
I'm not saying people shouldn't enjoy PHP for its good parts. I'm saying that denying its flaws is akin to spreading misinformation. It helps no one and hurts those who are considering learning other languages to learn more about programming.
I get your point, but maybe a strict language would be too hard on beginners. I started learning programming with visual basic, many years ago... sure I don't do any "on error resume next" stuff anymore. Now Java or C++ are very strict languages but unsuitable for beginners, would I say. Too picky with the little details, completely overwhelming for someone who's starting off. I think the forgiving object orientation implementation in PHP is good enough for beginners to start gripping the OOP concepts. Python is not so strict though, it's dynamically and duck-typed. Also, its OO model is kind of sucky: I loath having to write "self" as first parameter of every method (wtf!) and the fact that I can actually choose the keyword for "self", and that it can be different on every method (WTF!!). I also don't like the fact that it supports multiple inheritance, but well, you can choose the features you use after all. Don't get me wrong, I also love python, but bashing on PHP for being "loose" and liking python for being "strict" is kind of weird. 
&gt;That's a problem into itself. If you need to know something completely to criticize parts of it, it's usually overtly complex. Completely disagree. To be fair I can't even imagine a single example where it would be true. &gt;Besides, people shouldn't have to validate their complaints - there usually is an actual cause for the complaint even if it's identified incorrectly. People shouldn't have to validate their opinions, but when they try to persuade others that something is bad they should provide some explanation. E.g. in recent article posted here "PHP: a fractal of bad design" author states that PHP is unpredictable and his example is: "mysql_real_escape_string and E_ALL" if the author had a better handle on PHP he would have know that use of myslq_* functions is and was for quite a while discouraged. And as of php 5.4 E_ALL displays all error messages including e_strict. &gt;This "love it or leave it" attitude is helping no one. And I don't support it. I'm just saying that if you think that PHP is fundamentally wrong and it cannot be fixed. Just switch to another language. Something like "don't hate it or leave it".
I refuse to get into a This and That Sucks in This and That language. Sorry :) But I only brought python up, because it was designed especially to teach people programming! When I talk about "strict" I mean strict in the sense that it slaps you in your face when you are doing something clearly stupid. Like "foreach over an object" or like using a variable, key or parameter that does not exist. PHP is forgiving, and at the most (in recent versions only) sends a notice. At the most. But more often it just "does weird undefined stuff" then. Sometimes that is "by design", more often it is not. When you are learning something, and you get rewarded for doing it wrong, such as a language that actually allows you to test empty() on an undefined variable (how can something not exist yet be empty?) then you learn it wrong. And I am not talking about "wrong" in the way some people consider functional programming wrong. Or find singletons wrong. I mean wrong as in "even in PHP it will break your application, only you might not see it right away"-wrong. Much better is a language that explodes and tells you "nope. You are doing it wrong. Try again". Untill you have it right. Right in a sense where you deploy your website and it continues to work. Right where you throw rubbish into your app and it continues to run, rather then break your server, or open up security holes. Edit: Also important to realize that *low barrier of entry* or *small learning curve* is **not** the same as *have something working in no-time*. Low barrier, means that learning it, requires you little pre-existing knowledge, such as not having to learn entire OOP-patters to get some "Hello World" out of your server. Small learning curve means that the environment allows you to gear up fast. There are many languages and systems that offer that, in addition to being much stricter about what is **correct**. These are just as rewarding when it comes to getting your project out there. But are more rewarding, because you have actually learned to do stuff the proper way.
&gt;there might be couple of genuine problems Understatement of the century.
People are being tagged as fanboy when all they do is like something without arguments or base. I have heard a lot of pro-PHP people who gave little or no arguments beyond the "there are millions using it" or "it is installed everywhere". When that is all you have to say in defense of your beloveth language, then you are rightfully tagged fanboy IMHO. Fabien finally comes with some real arguments and technical foundation about why it is not all that bad. As such, he is one of the very few who cannot be considered fanboy in that sense. &gt; constant bashing on PHP coming from people with little to no experience in it This is not true. Many of the people who spoke up had decades of experience with it. And gave very deep insights in why it sucks as a language or community. But even so, people with little experience are perfectly capable of criticising it. *argumentum ad verecundiam* https://en.wikipedia.org/wiki/Argument_from_authority
Only that this is not practically true. PHPs compiler is not optimised (probably simply not designed for it) to run in long threads. Let alone the average PHP-application or script. Memory management, garbage collection, socket management and such lack in most applications and are heavily underdeveloped in the language and its compiler. This is not a real problem, since 99% of the PHP-environments are single-threaded. But it becomes abundandly clear when you run it persistent. I manage several servers, where we simply have to "kill and restart" our PHP-processes every so many hours in a crontab. The only real solution other then moving to a language that was designed and optimised for persistent and statefull processes.
Writing original code is more enjoyable than supporting an ancient legacy app on someone else's bloated platform? No joke?
I like PHP because it gets the job done and makes me money. Do I need more of a reason?
These pissing contests don't help anyone.
My comparison was indeed poor. Maintaining someone else's bloated and poorly designed platform is a lot less enjoyable then maintaining a well designed and elegant platform. First and foremost because I learn a lot more from nice stuff, then from ugly stuff. But then, you may ask: why is one platform bloated, ugly and poor, while another is gracefull and welldesigned? That is where PHP, mostly its developers and community step in. Somehow the level of professionalism is lower then in comparable environments like Ruby or Python. The OP goes into detail to explain us why PHP -the language- is now very similar to those two. Yet the crap that comes out of many PHP-shop is a /lot/ worse then the average MyFirstRailsBlog, or your average HellowWorld in Django even. Simply because the latter force you to do thing s The Right Way. To design and architecture properly. Whereas your average self-tought-PHP-scripter (such as myself) will have none of that. "Ah, well, who cares; it works".
You may want to grab a (digital) copy of [Rails For PHP developers](http://pragprog.com/book/ndphpr/rails-for-php-developers) then. It explains especially well the architectural and philosophical differences between the average Rails site and the average PHP system.
I deal with very high traffic so I'm not going to build the core of the system around someone else's framework. Every framework tested started slowing down or requiring magnitudes more hardware to be thrown at it when you get to hundreds or thousands of requests per second. Ask Pornhub_dev up there if he could ever base his system around someone else's framework. No way. Django I considered but Rails was out of the question.
Ah. Very good reason. The best. But also a very valid reason not to use PHP :) It is not exacly the best performing language*. You'd be a lot better off with scala, or even C, then. So then, why do you use a "platform" in the sense of a language+stack that is suboptimal for your performance-needs, yet refuse to use an MVC platform for the same reason? Honestly curious. * yes, yes, extremely large sites are PHP-powered. But extremely large sites are Rails or Python-powered (twitter, Github, Reddit). And Ruby (not Rails, mind you!) is actually a lot faster then PHP, yet everyone whith some sane mind would advise against a rails app for really high-concurrency, load and such.
What's wrong with being a php fanboy? I think php is great, feel free to label me a php fanboy.
The other type of test you want to run is acceptance, or functional. That can be accomplished with the Selenium 2 extension for PHPUnit which uses WebDriver to automatically "run" your website. It's got code coverage metrics built in too, which is a nice added extra.
You don't need to worry about integrating CI and PHPUnit, the Reactor team have done that for you: http://travis-ci.org/#!/EllisLab/CodeIgniter/jobs/1776914 That code is being run from the "develop" branch on GitHub which is only a month or two away from release. That month or two is mainly waiting on the design team at EllisLab to finish up the documentation and for us to get Sparks in, the rest is pretty much done. 3.0 doesn't change the world, but if you're a CI developer it will add a shitload of improvements to your current application. It's pretty stable, and I am using it for the upcoming v2.2 of PyroCMS.
The only valid complaints I've heard about PHP are that it uses \ for namespaces and doesn't use a standardized needle/haystack order for function parameters.
thanks!
Either freelance or work for a web design firm. You will be hard pressed to find a corporate job only using PHP and MySQL.
&gt; But maybe, just maybe, another language would get the job done better and make your more money? you mean like that RoR Facebook app? Oh, that's right, it was written in PHP...
All of the arguments he uses for PHP can be used for Python as well
The card one is always nice. It can easily be extended to pretty much every TCG out there.
Krop, AuthenticJobs, StackOverflow Careers, LinkedIn - all the usual places.
OK. It's done using PHP/MySQL. I have a database which contains 9 separate fields. Each field contains a prize ID for a single slot, so I have fields slot1, slot2, slot3... etc all the way up to slot9. I then have another database field which contains the scratched/unscratched data. This field by default looks like this: 0,0,0,0,0,0,0,0,0 When a user scratches a slot, it gets updated. So if the user scratches slot 3, it will update to look like this: 0,0,1,0,0,0,0,0,0 I may have made this overly complicated, but what I want to do is check all slots marked 1 (scratched) and then compare that with the prizes (slot1, slot2, slot3 etc). If the prizes are the same for at least 3 scratched slots, they win that prize.
Google "MySQL FULLTEXT" bro. Alternatively if you don't like MySIAM Google "Sphinx | Solr".
It was originally written in PHP. Nowadays they don't actually use ANY of the PHP executables anymore, because they are terrible. Instead they convert PHP code down into C++, which then gets compiled into normal bytecode executables.
It means you've stopped thinking critically, i.e. have handed off what makes you human.
and again this link... half of the "issues" there in reality are non issues... Author of this link abviously doesn't code in PHP or coded in PHP many years ago for short time period...
Fabien is trying to point out that PHP's ecosystem has changed for the better and perhaps change some preconceived notions of it. The tone is proud and maybe aggressive but it doesn't matter. He loves PHP and people are going to bash anyway. He created a wonderful platform which I much prefer to development on than RoR or Django.
Everything but the dependency stuff I agree with.
Yup. A good combination of very solid try-catching, extremely well organised constant cleaning of the superglobals, very well designed socket/resource closing and killing, and overall unsetting() stuff all over the place. That got our long running threads up to hours, from minutes. After 30-somthing minutes server would run out of sockets, memory or some other resource and the thread needed killing. Now we got it up to hours. 
Indeed. Yahoo is actually a much better case to point out to. They use and used it really successfully. There is a video of a presentation of one of the chief engineers of Facebook somewhere on the internet (lazy here) where he points out that the actual reason for using PHP is legacy. He does so after someone in the audience asks about why they favor PHP.
&gt; Not that doing stuff with PHP is impossible, it is clearly not. But that it is suboptimal, poor and a often gets jobs done poorly. All the specific arguments you've come up with against PHP are about how some people write bad code with it. I don't see how, in a million years, that has anything to do with whether I am going to write good code in it, or be efficient. It's like you're arguing against buying a pen because some people can't spell.
So, you are saying that a *pre* for PHP is the fact that you can deploy it everywhere. Good point. Valid. Agreed. Everyone will agree. Yet that has nothing to do with how good the language is. And "it being able to deploy" is the *pre*. Not the *millions of people using it*. That is simply the cause of it. Nor does it say anything about the quality. Just like Biebers amount of fans say nothing about the quality of his music.
&gt; missing even standard gnu tools like "file", and you can't install it without root. There's no reason you can't install 'file' with normal privileges. Make your own bin directory and build whatever you want into there. 'file' doesn't require any special access, it just has to read the file you point it at, and the "magic" file, which is included with the source.
I will not argue about how much of the list is really a current issue; some stuff is a matter of taste. But still many points are still valid. imho too many. I'm not someone to whine about minor stuff like namespace seperator. But some stuff is just not acceptable for me. - Why still PHP has no unicode support? - Why is there no build in opcode cache? - Why are real security issues are not fixed for such a long time? - Why is there no testing?
So they forked it slightly. Linux is still Linux even on different distros. Tons of people run their own MySQL forks, too. And you need to back up that second statement with evidence.
He can't, and everyone knows it.
&gt; slightly Did you even look at the document i linked? That scale of difference is more akin to the difference between a unix and linux. As for the evidence: Look to the other reply to my post.
I'm genuinely willing to entertain the idea that someone from Facebook has said this. I think it's highly unlikely however. I don't like to call people liars but the burden of proof is on him now.
By "Framework" I'm assuming you mean "well established codebase" vs putting something together from scratch? Go the second route. You can use other peoples components and using Composer you can assemble your own codebase. Most Frameworks are designed for websites, not web applications. They will also mostly follow the MVC methodology which does not apply to a game. I would suggest using something like Silex or Limonade so that you can keep things slim. This way you can a lot more control over how things should be routed. Scale is tough - it really depends on what your bottlenecks are. Obviously the biggest one is I/O, so you want to minimize that. Are you using a traditional RDBMS or something like Redis? There are different tweaks for every system. Redis seems to be easier to scale but I can't give you a real answer on that - I haven't needed to add slaves. Do the action based approach, but go one step further. Basically, have the front end update on its own, but periodically check back to the server, with the server being authoritative. This will offload a lot of the work to the user instead of keeping it on your server. Basically, look at old multiplayer games - that's what you'll be mimicking. That being said, you could also look in to websockets combined with something other than PHP to provide actual real-time updates for various sections of your game. Again, this offloads work. You could technically do it with PHP and route it through something like Pusher. One of the big issues you'll find is organization. Your codebase will grow, you'll think of new things you need to add. It's inevitable. It will spiral out of control. I would suggest keeping a list of all features - things you need and things that are just plain awesome. Then figure out exactly what your game is about. Sure it's a tribalwars clone, but are you more focused on battle? city management? etc. When you do that you'll be able to further sort your list of features into things that absolutely MUST be in your game. Show this list to a skeptic and then you defend each and every feature that you want to include. If you can't adequately defend it, move it to the "nice to have list". Eventually you'll have a list of features. Set it in stone. You should never change this list unless you think of something that you need to add to make one of these work. If that happens, repeat the process with your skeptical friend. Another thing you should watch for is more technical - version your code. Properly. I'm only really familiar with Git so that's what my advice will relate to: branch often, commit often. But only work on one thing at a time. Don't work on two features at once as rolling back will be a pain. One feature at a time, check it off your list. Interfaces and abstraction. Building -&gt; Barrack -&gt; Advanced Barrack. Building -&gt; House -&gt; Condo. Try and figure out how you can ensure that as much code as possible is reusable. All buildings should have the same properties, but barracks can differ from houses. In this respect, interfaces and abstract classes will be your best friend. In a (native) dynamically typed language like PHP you still have the ability to define argument types as long as they are non primitive (objects, arrays). This will help you keep your codebase a little more organized, but will also help provide useful IDE based auto-completion. Find a friend. When you're building the game you know what you can and can't do. You know how things should and shouldn't be used. Your friend won't. Getting 2+ people to take a look at your project will not only add fresh eyes that will catch major bugs, but they'll also catch minor ones. Fixing the major bugs gives you a product, fixing the minor ones adds polish. But be careful, when you start taking their bug reports seriously they'll start adding opinion. Ignore this carefully. These are your first users. They are who will start spreading your product from word of mouth. You want them to be happy, but you also want to stay true to your original vision. Any suggestions you get from them, take seriously - but don't halt production to add them in. Instead add them to your nice to have list and focus on finishing the need to have. Edit: A bit more information
There's no eval, there's no closures. &gt; There's no other reply to this post on your reddit user profile as of 08:39 UTC. Further up the chain.
Go to local conferences and coding gatherings. Every time I have gone to a conference, I've always been offered work.
First you need to understand server side scripting (PHP) and client side scripting (Javascript). These two go hand in hand.
Actually, that's the witch hunt mentality you're thinking of.
Especially since PHP has such a weak stream.
Guuuuuuyyyyyssssss, stop being mean and just jerk the circle :'(
So, basically sf2 just accommodates a bunch of programming ideologies at the sake of performance. 
Hiring in Minneapolis. It would help if you mentioned where you are and if you're willing to move :)
It's Fabien Potencier, the author of Symfony. Of course it's legit.
You're probably okay to use the dev version if Phil suggests its "pretty stable" as he's on of the reactor development team; then again, with his last commit message being "Ahem." how much can you trust the guy? :p
You didn't offend me in the slightest. It's open to interpretation, but I don't think adding a testing controller is necessarily a bad practice. Just make sure you don't deploy it to production. I think Phil was indicating that PHPUnit integration is right around the corner so you might want to wait until the next reactor release if you want that level of unit testing. Also if you are really desperate for PHPUnit integration you can checkout the develop branch of reactor. Regardless of your decision good luck and some testing is always better than no testing.
Drupal and Wordpress have their place. Its about the right tool for the job. If you have a client with a budget of $500 who wants a simple blog, it would be silly to use anything other than Wordpress. For slightly more diverse sites, Drupal can offer a great amount of functionality as well. Would I use a Drupal *forum*? Fuck no. I don't need all of that additional overhead in a system that wasn't built as a forum. Would I use some proven forum software like phpBB? Sure. Symphony and Mozilla phpBB as an example. Symphony being a framework, its kind of funny that they don't roll their own forum until you realize the amount of time and money that has been put into phpBB. If you don't reuse any other code, that's kind of scary. Maybe your shop is full of uberdevs. I've seen so many huge clusterfucks lately that would have been prevented simply by using phpass instead of some broken "I can code this myself" implementation of an MD5 without a salt.
Benchmarks are so misleading though. Choosing a language or framework based on benchmarks would be like choosing a car based on its maximum speed without taking into account if you can actually utilize that speed or afford the car. 99.9% of the sites that exist won't ever see enough traffic for it to matter. Great, someone has a blog. Does joe blow who is going to get at most 500 hits *in a month* really have to worry about performance differences? I'd say if you're serving static content, you would need to break 500k pageviews per hour before I'd even start to give a shit about benchmarks. In comparing php-fpm to mod_php based on performance, I think you are missing the bigger picture. php-fpm vs mod_php is about efficient resource allocation more than anything. If you use mod_php, bloat the apache process up to 80MB, then you will probably end up using that 80MB process to serve static assets. Thats *horribly* inefficient. This is especially the case in environments where caching is employed, because delivering most of the content shouldn't involve php anyway. On processing includes etc, as another poster pointed out thats what an opcode cache is for. I run nginx + php-fpm + APC, and I've tuned APC appropriately. The result is an almost 100% hit rate on the cache, so the files are only processed once. Facebook created hiphop and says "[it] sacrifices some rarely used features – such as eval() – in exchange for improved performance." Sounds like its just a case of C++ being leaner than php. 
Its more like "So, let me get this straight, you used a gigantic framework and then replaced it with a custom app, and you're surprised that performance increased?" They should have rewritten their test with optimized php, and then compared that to python, otherwise its apples to oranges.
I should have been more specific. I'm a Django fan and the screencap reiterates the generic anti-PHP argument that I'm part of: "PHP was okay, but now my eyes are open to Django or Rails". I don't hate PHP. It's great for beginners and if you're really awesome at PHP - more power to you. But I really like Python's syntax and now that I know how to use it for websites, I can't praise it enough. Still use WP for 90% of stuff though. :)
I will say that my time using PHP made me a better programmer. When you want to actually make something beautiful you start to see the limits and you can step out of the box and try another language but your time with php gives you a little bit of everything to help you make your choice. 
As a fellow Django convert I also had a smile while scanning my front page.
Hey, sorry for the late reply, but it was quite difficult tracking this down. You appear to be using an old version of WAMP, with PHP 5.3.0. There were two bugs which stopped this from working. One of them was fixed yesterday, the other which caused your strange 'no connection' error, has also been replicated and fixed. If you download a new copy from phperror.net, or from the github repo, you should (hopefully) find that copy works for you. Although I would also recommend upgrading to a more recent copy of WAMP, as your version has some PHP bugs in it too.
Usually I'm mocking results from db and working with some part of data from live environment.
facebook compiles php to c++ because php is to slow for facebook. see https://developers.facebook.com/blog/post/2010/02/02/hiphop-for-php--move-fast/
while nginx gives much more performance with the static files the php performance was about the same. One thing we notice is that the memory usage is much lower on nginx+php-fpm 
Actually, they did. About every Plesk (shudder) has Rails/Python hosting built in by default. And many large hoster offers Ruby and python hosting. But frankly, with your average rails project, not having it on your $0.50/month host is not a problem. You really host your €2k projects on a $0.50 hoster? No? Any "enterpirse-ish" hoster, with SLAs and the likes will offer passenger or fastcgi for your app if you ask. And for the $20 projects, you have many bulkhoster like dreamhost, site5 and such have very solid and official Rails support on their $5/month programs (prices are an indication, not absolutes :). But even when you were right. And Rails /is/ unhostable, python can get support no-where. Does that mean the languages are worse? Because that is what the critique is about. The critique says that PHP is a crappy language with a core team behind it, that somehow cannot get the standards up. The only counterargument people give to that is: But PHP is everywhere. Well, if that is the only argument for PHP, it indeed is a poor language. I know it is not that poor. It has good things, many of them. So please, for pete's sake. Stop the argument that "it deploys so well". Because that is but one, tiny argument going for it. And a really poor one at it.
Looks really cool, will look into signing up tomorrow at work :)
And why was hiphop developed ? Because they were happy with php? Facebook is always taken as an example for big sites written in php, but as you said facebook is old. Which "newer" big sites are written in php? 
using multiple pages and session data is one way to go about it, and it can work, but to be honest it's sloppy. it's generally not a good idea to trust sessions when you are dealing with required data. if it were me, i would keep it all on one page, in one form, and use javascript (jquery) to .hide() and .show() your different sections or pages of the form. that way when they finally submit the form, all the data comes in at one time and can be validated and processed all at once. 
I regret that I only have but 1 upvote to give. Because of your post I have decided to learn Python and possibly recode some of the long running processes that I have in PHP.
It's probably all the fanboys *sigh*
I would love to have a mentor- I'll check out the site in the morning!
Thank so much. I'll be trying again when I get home from vacation. :)
I'm just working through the design of a module that does something similar, but in the other direction. I have a command-line tool that needs to be run from PHP, which processes large documents. Its output may be very long, so cannot be blindly pulled into memory. So my approach is for the command line tool to write its output to a file, then the driving PHP package to open the file and returning it as a resource. That way the caller can do what it likes with it - write it off to another file, read it into memory for processing, write it out to the web page etc. I would be wrapping the PHP file resource in a class so that the temporary file can be automatically deleted once it has been read, or on __destruct(). Some regular cleanup would catch any that get left behind. The wrapper would implement an iterator so the file can be read line-by-line if required, but I have no idea how to implement a custom file resource wrapping a real file resource, so it can be read using standard file reading functions - fread(), fgets(), fclose() etc. Does that sound like an approach that would work?
Thank you for taking the time to answer this. I'm still deciding between mysql and redis, redis seems more suitable for this (atomic operations). I've looked into Limonade and it seems to be exactly what I need. I'm used to developing on a per feature basis, so the code versioning won't be that big of a problem. If I stick to a naming convention it should work out just fine. I might take a look into sockets too. I got a few friends ready to test drive this, so that won't be a problem. Thank you very much for your answer, I think now I have everything I need to get this done. 
Of course it is saving you real money. If you need 5 Servers running php code to serve the same amount of requests like 2 Servers running python/php or one server running c++ you save lots of money.
the code is basically the same just in python.. it's also a mvc framework.. it's also using a orm database library... the same objects are declared, it's using the same database with the same queries. it's just 3 times faster with basically the same code.
Which is just a wordy way of calling yourself ignorant.
I agree. php is fine for the most sites. It's fine for company websites, forums, blogs and stuff like that. But would you choose php if you want to create something like github or disqus? If you want to create a page as popular as facebook, do you think php is the best language for that? And if you start your page with php and it gets really popular do you think you can restart from scratch and make it better ? No.. then you have to invent something like hiphop... ,)
The "Ahem" commit was made BECAUSE our awesome unit testing system pointed out the error. See, point proven! :D
You can do what you like. You wanted PHPUnit testing integration and 3.0 has that right now. I pointed out that is was stable, in use on my live sites and being used for the product that I sell as my main source of income. I clearly trust it, but you can code everything with one testing library then recode it with another later if you like. :-/
Is `$test = array( 'test', 'will this work?' );` really that much more to type? Also, can someone try: $test = [ 'test', 'will this work?', ]; If it doesn't allow the trailing comma, it's useless IMO.
Wow - *another* whole wardrobe full of related functions in PHP, that I have never come across in twelve years of PHP development. Thanks for the pointer :-)
This is a good idea with one caveat - there will always be some disparity with what different people define as "best practices". One of the goals of the group should probably be to define what this is.
Oh yeah? I see your command and use while(true){fork();} Enjoy!
Just SIGKILL the parent :)
Damn, I wish I thought of that. Two years ago, I accidentally DID run that above loop in C++ and man... painful times indeed. Luckily, I killed ALL THE THINGS before the spawned and took over mankind :D
Have a loot at http://peter-hoffmann.com/2012/python-simple-queue-redis-queue.html then. And especially the links at the bottom. I am rails developer so in love with resqueue. But I have seen really good stuff done with Celery. Very often servers' long-threads are actually queue-handlers. There is really good stuff for that in Python. Even with pretty clickety-click frontends and all :)
I came accross it while studying for the Zend certified engineer exam that I still haven't taken yet. You do learn a lot of these relatively obscure but very useful functions.
Just joined as a mentor. This is an AWESOME idea!
I could not possibly agree more. I'd say, moreover, that should probably be the *first* goal, in fact.
http://i.imgur.com/r6lLo.png Yes, it is more to type.
In CI I will run a settings function that will spit out an array called settings in a MY_Controller. Then I would be able to call it by $this-&gt;settings['setting_name'] from anywhere.
So cool!
I thought it was urlrawencode that I was missing. Turns out curl works fine. Thanks for the help :)
I know that's how strings work. That's why it's not a complaint of strings, but a complaint of namespaces. They should have used _any other character_ for namespaces, like other languages use. my&gt;test&gt;namespace my|test|namespace my-test-namespace my,test,namespace my.test.namespace my~test~namespace etc
Actually, most, if not all the LRPs I have are queue handlers. I guess this is definitely the sign to move to Python. I have tried Ruby, but could not get past the language syntax. It just doesn't feel right. I think Python is pretty though.
I've heard lots of talk about this - but to be honest it's above my abilities right now - but I like the idea of this for a second draft. Out of interest - what is it that makes session data unreliable or sloppy - does it sometimes fail, is it relying on a weak link in the chain? Another option I've heard about is submitting direct to the database each page, then calling from the database to repopulate the fields. Any thoughts on this?
I signed up wanting a mentor. Seems like I'm not the only one.
There's no doubt that there'll be more apprentices than mentors. We're getting a good number of mentors, though. :)
oh ya, i knew that. typo.
Perhaps what is needed is a somewhat formalized curriculum? While I'm sure we have some talented programmers in the house, teaching is a very different skill set. It might even be a good idea to consult with a person that teaches for a living - assuming someone in the group doesn't already do that.
Mentors offer much more than simple language support. In fact, with the people I've mentored, I've adamantly refused to hand-hold in that regard. A mentor gives the apprentice guidance in their day-to-day activities, teaching them best practises, but also teaching them how to make good use of resources like ##php and the manual.
I'm in! This is such a great idea. I'll be signing up shortly!
In accordance to CI, I have a config file that saves the minimum required settings. Everything else is db. For example there is the CI config.php, then if the website is called bananas.com I will have a file called config_bananas.php. Said file is loaded on the constructor. Sometimes, if the site is really big, I might have multiple multiple config files that are loaded as needed.
(My comment was mainly sarcastic &gt;.&gt;)
I'm gonna jump on the bandwagon here and say that we're looking for developers with your skillset in the Baltimore, MD. area and are paying well above $20/hour. PM me if you're in the area.
Sounds like you paired up with someone who was too far below your skill level. As well, there's a lesson to be learnt about mentoring programmers: Don't become the manual. The first goal in mentoring any new developer is to teach them how to help themselves. Don't answer questions that can be found by reading the manual. As well, don't answer basic support questions. Teach them how to find the help themselves. It's a skill unto itself.
If I want to create a page as popular as facebook, honestly I need to put my dick back in my pants and get back to reality. If I had a dollar for every person I see who thinks they have the next "great idea", I'd never have to work again in my life. At any rate, I think that having the idea and getting it out there is **far** more important than being pedantic over what language or webserver you're using.
it can easily fail and in fact the user can clear their session data whenever they want, so when they finally submit the form it will be incomplete. submitting to the db each page will work and is much safer, but again, the best idea is to keep it all on one page.
/r/forhire Check it 
What byte code cache are you using? Have you checked benchmarks? Have you done your own benchmarks? 
That is one example. There are plenty of others to choose from. Look, there is no need to be defensive about it. I'm a PHP developer too, and I think anyone who doesn't use PHP because of its namespace practices is retarded. But it's still a valid criticism. It's a horrible namespace delimiter, and they obviously didn't think it through when they implemented it.
I'll give that a shot. Thanks for the suggestion.
is there another language that i can use to learn with , without paying a license fee? if ($alternative != free) { echo http://i.imgur.com/9GQec.gif } else { http://i.imgur.com/DkBrI.gif } 
This is pretty freaking sweet. And, I would guess, a whole lot more performant than wrapping everything in proxies. I hope that the extension stabilizes quickly so I can convince my boss to use it in production. Even if not, this could be invaluable on my dev machine as far as debugging. Pretty freakin sweet!
I recently worked with [Tank Auth](http://www.konyukhov.com/soft/tank_auth/). I had a very good experience with it, integrates like a charm and it's among the safest auth libraries around because it uses phpass. No ACL and no admin panel, though.
We have used both Ion Auth and Tank Auth at work on multiple projects. They are both pretty mediocre. I like Tank Auth the best. Neither take security extremely seriously, but Tank Auth comes out slightly ahead. I've had a [decent security flaw](https://github.com/ilkon/Tank-Auth/issues/4) posted on the Tank Auth issue tracker for 9 months now. They're both pretty abandoned, to be honest.
Good point, and you are right that the popularity alone of anything doesn't necessarily make it the best candidate. But I think when php users bring up "popularity" of this language, they are referring to the fact that it's widely used, shared or comes pre-packaged with most hosting services. "Popularity" is used to describe more utility than any emotional connection. "Ubiquitous" is probably a better word. I mean if anyone actually has an emotional connection to a programming language, then it might be time to expand horizons or seek professional help.
Race hazard, and intriguing. I may build a proof of concept.
I saw a security talk similar to this once. It is by Samy Kamkar who wrote one of the most popular XSS exploits of all time. If you are interested in this exploit then you'll find this talk interesting or informative (if you can stand listening to this guy talk, that is). [LASCON 2010 - Samy Kamkar - How I Met Your Girlfriend](http://vimeo.com/17822912)
On this same thread, what is everyone's experience with with using a config file either in xml, plain text, or ini format? Because these config files must be loaded and parsed on each page load (excluding using something like memcache to solve this), does it seem to cause any significant performance hits for anyone? Edit: also, being that PHP does not need to be pre-compiled before publishing, what use cases can you think of that forces one to store configuration settings in a separate xml or ini config file, rather than just `including` a config script file that sets constants or some master config array/class?
Why do these articles keep showing up? Is PHP the new hipster thing to hate? Look, internet zealots, I don't give a flying fuck which language you support, and don't need anyone to tell me why the language I use is good/bad/eats small children. It's a language, not a fucking religion. I know all about its quirks. I know how to produce production code with it. I've tried other systems and use them only when I'm in the mood to dick around, but they all have their own non-obvious retardedness too.
You could also just log the start and end times for the script, which doesn't require any additional software =D
This subreddit has turned into that scene in The Simpsons where Lisa asks "why do they come to our concert just to boo us?"
Debuggers are great, and have their place, and yes we should use them. However sometimes you just want to know "what's that variable". Debuggers are still slower at dumping that information out, then just a quick 'var_dump($foo); exit;'. Maybe if there was a 'dump this' button in IDEs, and the dumped variables were seperate to the variable list, that would make this a little more swift.
the article doesn't say or even imply that, in fact it says the opposite: &gt; Eevee accused the PHP world of being created by and filled with amateurs. Eevee is the author of the "fractal of bad design" post not this one, then after that: &gt; The previous argument doesn't cover a lot of users, however. Many are using PHP ‘professionally’, and even have customers who may demand that work is done with PHP. now go fuck yourself, you.
Python, Ruby, Javascript and Lua are all free, Open Source and great for learning. And when you're bored with that you could give Java, Haskell, Clojure, Scala, Go, Groovy or Perl a turn. More complicated but all free and open source as well. Almost every language has a mature platform for building web applications and languages being licenced and non-free are more the execption than the rule. Of course, each has their quirks and faults but none quite so numerous as PHP (well, maybe Javascript).
Hey, it works for Ruby... ;)
I don't agree with `var_dump($foo)` being faster than clicking to create a breakpoint and then running your application.
Then we'll have to agree to disagree. But if you break down the steps var dump becomes: * add var_dump * alt+tab * refresh whilst with xdebug: * add the breakpoint * alt+tab * refresh * alt+tab back * goto the variables pane * look through for your variable It's minor, but when you could be working on a site for months, those extra steps build up. Don't get me wrong, debuggers are awesome, and allow you to have a deeper understanding of your code. But sometimes you don't need that, and var_dump is still a useful tool in the toolbox.
Sublime Text 2 is excellent.
I've tried many/almost all. Nothing even compares to PHPStorm in terms of usability and reliability, in my opinion. Eclipse/Zend Studio is the absolute worst of the bunch.
have you ever tried IntelliJ? it's by the same company. I wonder how those two compare. I've heard mixed things about Eclipse and Zend. First: eclipse with PHP sucks. I've tried it myself and it sucked. I've heard Zend "is not perfect but it's better than anything else out there" (barely paraphrasing on that one). I think i'll just download my top three options and see how they work. 
I've heard a lot about it. Why do you prefer it? What's the feature that stands out the most?
I use PHPStorm but Komodo and NetBeans are good too.
What are some features that you like about PHPStorm? 
Netbeans, especially netbeans 7.2 beta, which has full support for php5.4 and refactoring works in closures now with use declarations. the php5.4 support is excellent. They are now doing hard-core php linting in netbeans as well. Also netbeans support of javascript is pretty snazzy. I'm currently using svn at work and the built in svn client is probably one of the best integrated clients of any IDE out there. Their git support now is also execelent. Over all, it covers the full life cycle of web development using LAMP. I wouldn't be nearly as productive without netbeans.
xdebug also prettifies var_dump output.
Yeah I've noticed, which is really useful. I'm not saying don't use xdebug. My comment is in response to the article saying that you never need to use var_dump (and similar) with xdebug. There are times where it's just quicker to dump it.
Abstraction and MVC are the direction PHP is moving, anyway. It just seems logical to me to have a convenient library you can plug into any project that needs it, and your code ends up looking cleaner.
It depends on how "large" your project is. If you have a large project and working a lot of files, the bigger name IDEs like Netbeans, Aptana are the way to go because they offer code completion using the classes and functions that you create. When dealing with a smaller project, I would choose Sublime Text just because it's simple to use and you already know how to use your classes and methods. 
Same here. All my config files are in pure PHP or stored in a settings table.
Thank you, I'll try that.
4 months ago - https://gist.github.com/2134554 (it broke a bit after MC update). Seems that everyone likes to try reverse engineering.
What about PHP 5.3 Support? And will there be any BC?
It's a bit more expensive though. Unless you need to use two or three Jetbrain IDE products (eg java, phpstorm, pycharm), seperate ones can be cheaper.
I just use class constants myself. I've tried using others, but it often ends up more complicated then it needs to be. edit: the other advantage of just using integer constants, is that you can do: class Projects { // hidden const DELETED = 100; const PRIVATE = 200; // visible const PUBLIC = 300; const PUBLISHED = 400; } "select * from projects where status &gt; " . Projects::PRIVATE ; Ok you are presuming the order of constant values (that private is always less than public), but as long as you always use large numbers for constants, then it's easy to add constants in between in the future.
Only a few weeks ago I started to use PHPStorm and I love it! I tried like 5+ different IDE before, but this one is the best right now. It's cross platform, fast, intelligent and full of features.
:) So many votes for it. It's funny, when I posed this question on a different forum, I got ten different responses but only one was PHPStorm while here's it's the opposite. Thanks!
I'll be trying it out. Thank you.
http://mandrill.com/
The article clear states PHP 5.4 only.
The argument is pretty simple: you shouldn't have to change your table structure just because the data has changed. Unless it's truly trivial data that a Constant will suffice for, I almost always use a lookup table. Early in my career, I was working on a simple document management database. The client wanted documents to either be "submitted" (not publicly viewable) or "approved" (publicly viewable). Simple enough, use an "active" binary flag and you're done. And then they wanted a *third* status, so I switched to an enum. And then a fourth. and a fifth... By the time we were done, there were no less than nine different statuses depending on the level of review the current document was under, and the code had spaghetti'd because of all the custom if-else loops dealing with those damn enums, not to mention all the database changes we had to make moving, adding, and renaming those selections. **Moral of the story: clients change their minds. Never code yourself into a corner.** I'm not saying this will happen on every project - but you should definitely be prepared for when it inevitably does.
* Ctrl+P for fuzzy searching of file-names is extremely efficient, I cannot recall having to search for files in the file tree by hand * Ctrl+R for fuzzy searching of class methods is also great * SublimeLinter is great for PHP/CSS/JS validation checking * the Git and SVN plugins are an complement to the other key-bindings * although controversial, I really do enjoy using the file mini-map
That sounds like good idea for certain situations, actually. Thanks for suggesting it.
Wow, I may consider going back to CakePHP when this is all said and done. The fact that they are going the DataMapper route for the Model, as well as focusing more on performance means this will compete better on all levels with the other big frameworks!
Actually read the article. This guy actually gets it right.
I kind of agree and disagree about the community part. While I think the author is correct about the community, I believe it's Zend that needs to lead the way. All in all they haven't done a very good job of promoting PHP has an enterprise level language, and as a result PHP programmers aren't perceived in the industry as being enterprise level programmers. Once we better our image, the fringe elements on the community with drift away.
Added benefit to look up tables: if you ever need to populate an UI widget with the available choices, you never need to worry about going back and updating it. UPDATE: just read the article, and it doesn't like lookup tables because of the JOIN lookup hit. Solution: don't use integer IDs in your lookup table, use the enum values themselves. Makes raw data readability better, too. Foreign key or not that baby, up to you and your desired performance level.
Yeah looks like somebody over at EllisLab will need to do that. I've raised it with the right people, thanks.
That's very true. Perhaps that should be a feature request for the documentation site (a way to flag content). Either that, or ping bad notes to a dev/doc member who can remove it...
Awful code :)
When you will try PhpStorm, have a look at settings just to learn about all features. And you can always try EAP version with latest changes that aren't in the stable yet.
I'd like to argue that this WILL happen on every project in some form or another. Clients will change their mind always. They will always have some little thing that they want you to add. Always prepare for this by ensuring that your code is easily extensible and can be quickly modified.
This is what I'm doing now, but I'm starting to suspect that there's something funny going on with the timer code. I see pretty consistent times browser side, even when the timer says the processing took longer. I'll just focus on the timer code for a bit and see if I can find the problem there.
The minimap is a great feature. I tend to know what the code looks like in a file, so it's easy to jump about.
On my last project, which in my opinion was pretty huge, the client was the most understanding human being I've ever talked to. He had made a plan on beforehand though, you should always ask for that.
You wrote the title! It clearly says "all PHP 5.4", it's not confusing
Try this: &lt;meta name="keywords" content="&lt;?php echo $keywords; ?&gt;" /&gt; &lt;meta name="description" content="&lt;?php echo $description; ?&gt;" /&gt;
Every language sucks.
how? He's just like the rest and speaks in anecdotes about non issues. How is the community bad? I beg you to find better resources than php.net for any other language. 
&gt;Abstraction and **MVC** are the direction PHP is moving moving? Its been there for years
You should not do `"ad hominem"` attacks on people, who you do not recognize. When it backfires, one tends to look REALLY stupid. 
^ Non-static instance variable or class member.
Ironically I've had posts deleted because a moderator said that it wasn't an appropriate place for my comment while there's a dozen or so comments on other pages with the same type of content. It seems rather random. 
&gt;maybe i'm going about this the wrong way.. Indeed you are. If you don't understand what OOP is and why it is used then there is no point for you to learn it's syntax. First thing you should do is to read about basic OOP concepts like inheritance, encapsulation, data abstraction. Once you understand what is what and why it's needed. You'll have much easier time learning syntax. Because your google search will go from "php oop tutorial" to something like "static methods in php" and you will get much higher quality results. Or you would be able just to use php documentation. 
I am not a power user of Sublime Text but I like editing single files with it so I haven't created projects with it yet. It does do code hinting for the file that you are in but haven't seen it do it for files that I have opened.
I was pointing out a bug with the function. The bug was recognized in their bug tracking system. It was a long standing issue so it wasn't like they were planning on fixing it. 
See also https://wiki.php.net/ideas/usercomments
Some of us were supporting PHP 4 until recently. ;) I can't tell you how awesome it was when the WordPress project finally axed PHP 4 support, and dragged tons of straggling shared hosting providers into the modern world.
I was using [geany](http://www.geany.org/) on windows and [TextMate](http://macromates.com/) on OSX before today. But I just discovered [Sublime Text 2](http://www.sublimetext.com/2). So now both windows and OSX is running sublime :D
Stop blindly attacking performance issues. Use xhprof: blog.cnizz.com/2012/05/05/enhanced-php-performance-profiling-with-xhprof/
Chrome Dev Tools works great for determining where slowness is occuring from all the different resources you pull down, rendering times, etc..
This is the kind of anecdotal non point shit i'm talking about. Author is just jumping on this season's link baiting band wagon of saying fluffy things about why PHP is so bad. Really none of these blogs criticizing the language provide any real data or situations where PHP is terrible at what it is made for. 
Ugh another pointless rip at w3schools... There is nothing wrong with that site. They cover the basics of a lot of topics and offer greater resources than I've found else where.
The true problem with PHP is that people WILL NOT SHUT UP ABOUT IT!!!
&gt; There are only two kinds of programming languages: those people always bitch about and those nobody uses. *-- Bjarne Stroustrup*
Never use strings as the key to your lookup table - the whole point is that if the name changes, your data *wont* have to. You lose that benefit if you're joining on the name.
I use critsend for things like that for some domains. Nice aspect of critsend is it's not a monthly charge - you buy credits and use them as fast or slow as you need them. If you have slow months, you're not paying monthly charges just to have the account open. I think it starts at $10 for 20,000 emails, and the credits are good for 3 years.
Craigslist is fairly simple, because they offer RSS feeds, and the search data is all visible in the query string. If I search for "bike" in New York, the location is: http://newyork.craigslist.org/search/?areaID=3&amp;subAreaID=&amp;query=bike&amp;catAbb=sss which means the query string is: areaID=3&amp;subAreaID=&amp;query=bike&amp;catAbb=sss If I replace "bike" with "truck", I'll be searching for trucks instead, and if I add &amp;format=rss to the end of the query string, I'll see the results as an RSS feed. So what your PHP application would need to do is accept some user input, then use that to generate a query string for Craigslist, open the page (look up *fopen* or *file_get_contents*), then parse the results, either using an open source RSS library or by writing your own using regular expressions. You'd probably want to parse the information into an array, and once you have the raw information, you can format it however you want. Edit: Look into [SimpleXML](http://php.net/manual/en/book.simplexml.php) for RSS parsing. Let me know if you have any other questions.
 echo "&lt;td&gt;" . '&lt;a href="update.php?ID='.$row['primary_id'] . '"&gt;Update&lt;/a&gt;; ?=ID# should be ?ID=#
The MVC pattern isn't a new thing. CI, for example, had legacy code in it for years. PHP 5 just brought new features that made writing OO code a whole lot easier. Autoloading being a notable example. I agree with you about WordPress though. Their instance on supporting continuing stupor for 4 was brainless.
&gt; How is the community bad? I think it's more to do with the community that puts out a MySQL tutorial that uses the mysql_* functions, ignores basic SQL injection prevention, and doesn't fact check before posting. It's 2012, use PDO for FSM's sake. There is a growing trend to try to correct these mistakes, but it will be a slow process. 
ircmaxwell is actually a pretty smart guy. I don't think of him as someone who simply jumps on bandwagons for his blog.
Oh fuck, as someone who has been dropped in the deep-end and needs to learn PHP stat, I totally agree with this. The quality of the user generated documentation is piss poor. The same applies to blogs and forum postings. It's not unique in this fact. C#.net and Java also suffer from this. It's a bit of a ball-ache. 
But then when those two developers pull the latest change, the version number in their DB will not mean the same thing as the version number in the merged version.
because you are advertising crappy code.
If you really think that then you clearly don't have a clue, no offense. Stuff [like this abomination](http://www.w3schools.com/php/php_mysql_insert.asp)is exactly what the article is talking about.
I have gone trough 4 part tutorial and I am not very impressed...
Ideally, one should be able to defend the merits of ircmaxwell's arguments without relying on ircmaxell's past reputation for being smart.
I am glad that I was not the only one that thought this.
Then see my other reply....
While PHP has a lot of strengths, I think it tends to foster a false sense of knowledge and understanding of programming. I remember when tutorials I read were saying that it's perfectly fine to just use $_POST['whatever'] concatenated with your SQL statement like so: mysql_query('select * from table where id = '.$_POST['id']); There are lots of tricks I've picked up over the years (like using ' instead of " since it tends to be a little faster performance-wise for PHP) but I don't feel qualified to make a tutorial. A lot of people think it's easy and tend to promote ill-code and bad conventions that deviate from OOP. Aside from the community, the language is strong and powerful but people need to remember that just because it's not Java, it shouldn't be taken for granted that if you can ditch all practice and rely on the optimizer.
Untrue if it's a foreign key with a CASCADE relationship.
Any particular reason? "Not being a fan" isn't very technical...
I didn't mention JOIN costs - as I stated, the original article did. 
To each their own.
I don't use reference tables, but I don't use enums either. I usually store the value as an unsigned int and let it refer to a real constant in code. IMHO reference tables aren't necessary unless you're defining object relationships. The only downside is that you have to know what those constants mean when you're pulling data in a report, but it's kind of trivial to just create a view on the db with the constants aliased to whatever you think is legible.
I took the advanced and upgrade courses when they first had them. There wasn't much info that wasn't already covered during CakeFest, but you could ask live questions and @jose_zap tried to answer them on the spot. I guess it depends on who is paying for the course (mine was covered by company). Maybe check out [tv.cakephp.org](http://tv.cakephp.org) for the videos from the last CakeFest in Manchester where a lot of Cake 2.0 was covered.
Absolutely nothing wrong with that. It does exactly what it says on the tin - tells you how to insert data into a mysql db. Doesn't say this is the approach you should take on your web app it just gives you the info. At times when I've forgotten the syntax for simple procedures that's just what I look for not essays on best practice.
Hey now, that there's what we call reason and logic. That has no place here.
&gt;But on the fringes, there are a lot of people who are writing articles, tutorials, and posts designed to help beginners learn the language (and usually how to program). The problem with this is that the majority of those authors frankly don't have a clue what they are talking about. I'm glad that someone else have recognized this. 
Yeah, I know. I actually didn't copy/paste I retyped and "typod" it. 
There are plenty of things wrong with W3 schools and plenty of inaccuracies. It's also a bad source of learning in general, and there are plenty of other better sources to go to. The reason people tend to go to W3 schools is because they think it has some kind of affiliation with W3C, which is not the case. 
Past experiences with something can help shape your view on it in the future. In this case, past interactions with ircmaxell have painted him in a very positive light, enough that I don't automatically assume something negative about him. As for the article itself, I agree with it to a great extent, in that anyone with a keyboard can write a tutorial on PHP and litter the net with more turds.
That's a text editor, not an IDE.
oh man THANK YOU!!!!
The greatest thing about web development is that anyone with a computer can write code. The worst thing about web development is that anyone with a computer can write code. Yes I'm an asshole but your post shows you have no grasp whatsoever of server-side programming and client-side programming. You can't call a PHP function from JavaScript and vice-versa.
I use it as a job queue for my scheduler/distributed worker environment.
You forgot *or die mysql_error();*
&gt;And don't even get me started on "web developers" who don't know HTML. Better than all of the web developers who *only* know HTML.
Code completion is in Sublime by default, and I hope you'll forgive me for doubting your guarantee that a 'dedicated IDE' will be more stable or easy to use than Sublime.
Fairplay on the mysql / mysqli point
Who really cares? "poor php :,(" It's doing fine for it's bad reputation in some quarters. I guess some like eloquence others like to get things done.
It does code completion from included classes? Also, have you played with PhpStorm at all?
&gt; You can't call a PHP function from JavaScript and vice-versa. Is all you really needed to say. No need to be a pretentious dick about it. I know you didn't wake up yesterday and know all of the answers to the universe. 
You're right I apologize for being a dick. To my defense I've had to deal with shitty code all day and I think all my anger came out on you. I hope an upvote is some consolation?
Redis is also an excellent replacement for Memcached in that it performs great as a simple key-value store but the native data types (hash tables, lists, sets, sorted sets) really add a substantial amount of flexibility.
No. php.net teaches you how to write, you guessed it, PHP. But since you seem to be taking that for granted, I'm sure you could go to javaScript.net or svn.net and find a resource of just as good quality. php.net shows you how to write OO code in PHP. It does not teach you software development because that's not it's job. It also does not teach you about web security or bug reporting for the exact same reason. php.net follows the single responsibly principal you might say...
Exact real world case, minecraftforum.net. We use to it to speed up common database queries that result in the same information being built each time. If Redis is available and the data is not stale or null, then it is pull directly from Redis instead of running the database query.
&gt;anyone with a keyboard can write a tutorial on PHP and litter the net with more turds. A great deal of those people don't even belong to the PHP "community" IMO, they are just blog spammers looking to get some traffic and could give two shits about what is on their blog.
I'm sorry but that's just a really bad design. You're breaking all sorts of normalization rules, and it's certainly not helping your performance. I'm sure it works great for you anecdotally, but it's a really bad way to go about solving this problem. And you REALLY should not be foreign-keying off of an email address. I don't even want to imagine what sorts of problems you'd have in a truly distributed high-load environment. I really, really recommend that you spend a bit more time researching this before trying to implement that sort of a solution again. It's not a good idea.
I've been experimenting with C# lately. I have to say it's pretty neat. But in order to gain a wider market share, development tools must be made free. Mono is off to a good start, but I'm talking about Microsoft. Granted, money must be made somehow I suppose. But still, keyword is "free".
I bought a VS book on databases expecting to learn more about data readers and data adapters, and it had a 20 page snippet in the middle of the book that was rudimentary then said "the rest is outside of the scope of this book". It didn't go much beyond the extreme basics. Half of the book was full of error handling and how to do other unrelated tasks.
Just saying that ' is faster than " ends up being a pretty big joke. Its kind of like saying having a gnat on the space shuttle makes it slower. This is the type of stuff that gets perpetuated by blogs because "php performance" gets a lot of google results.
Not sure why you are getting downvoted, this is exactly the problem. The number of sites that scrape / borrow content from other sites, regurgitating nonsense on accident, is insane. Some sites don't even try to hide that either. If python became the most searched for, the amount of shitty python information out there would triple overnight.
It doesn't look like this idea is going anywhere since 2008. Any reason why you might know of?
If you're validating that the input is definitely: /^[0-9]{5}$/ then you are safe as far as SQL injection goes. That said, you should really get in the practice of using prepared statements and then it wouldn't be a question :)
First, AWESOME! This is a great start, and thank you for building this. There are just things I think it needs to be perfect. A range of improvements: * Could you have it check lines without requiring all three? If I write the first line, it'll be great if it's checked straight away. I often work to get line 1, and then 2, perfect before writing the third. * Second, if there is a blank line, note that it's there, but skip it. For example if I enter: reddit haiku project, awesome project I get "must enter all three lines". It would be if it can still check line 1 and 3, and just skip line 2 (placing a 7 next to it). * Third, could you move the error info to the right side of the box instead of stating it underneath? Just place a red or green number next to the line instead of a sentence, listing how many syllables you have recorded there. * there is minor pause when it checks; I notice it talks to the server to do this, if you can push this into pure JS then you should be able to remove it. * Make the haiku enter box bigger, so it has a bit more emphasis. * The short url should be present when writing, but disabled. This will give users a visual hint that short urls are supported (as otherwise you don't know until it's complete). * Really style up the displayed version of the haiku, when viewed, like it's being published Pick a nice font (i.e. [this](http://www.google.com/webfonts/specimen/Merienda+One)), and give the page more umph. If you get all those done, I think this is real winner. It's surprising that there are no good online haiku sites, and Haiku apps on the ipad just plain suck, yet there are actually quite a lot of Haiku communities online. Thanks again!
Actually, just because advertising.
I saw someone using an MD5 hash of the SQL query as the key. Is that how you guys do it or some other method?
Prepared statement or additional escaping. Use mysqli extensions if you can...
Netbeans is a good choice when I didn't familiar with the PHP build-in functions. Now I use emacs... 
The enum type [is great and all](http://dev.mysql.com/doc/refman/5.0/en/enum.html). But sadly, for the sole reason that requirements may change out of the blue, it's usually a bad idea. Though you could alter the table and add new enum values as needed, it's generally a bad idea if there's any data in that table already - the value for that column will be deleted _for all records_. So yeah - a reference table to join against is the best way to go. Just be sure to set a PK on the reference table matching indexes on the main table to make sure `join` queries are efficient. When ever a client mentions they need to capture a "status", this is a red flag to jump to using a reference table solution. I've faced the same problem as krues8dr many times, so now I always start out with a reference table. Regarding storing constants in PHP code - again, requirements may change. Personally, I find it easier to handle this by using a reference table to join against, rather than hard-coding any potentially volatile value.
Very NSFW: Our entire video/image browse system @ motherless.com uses Redis exclusively. That's most recent uploads, most favorited, etc. Redis has been a dream to use, and it's been faster than MySQL. Also all the hit data on uploads and members is stored in Redis, plus using it for site stats. 
@interstateapp.com: * Job queue (emails/web hooks/pushing to firehose stream). * Pub/Sub firehose stream * Simple write-lock for our upcoming notes feature * General caching layer
Unless he did and was adding his thoughts to your argument. But since im here, i was just thinking the same thing the other day. Plus all that copy pasta blogging .. i dont pay much mind, as long as i find out what im looking for, but sometimes thats all the hits i get are 5 blogs with the same exact tutorial that didnt help me the first time.
PHP does suck in certain ways, just like HTML. The real reason why I use both is simple though. They are quick to deploy. Sure, you could program a bulletproof and responsive app, but it could take so long to build that it is irrelevant by the tie you push it. Sure it has quirks, but in 99.9% of all scripts you write, it is more than enough. Only once in a while will you ever have to change to a more efficient language on the most demanding scripts, but facebook in the earlier years did just fine being written in PHP (now they had tons of DB hacks, but the scripts were fine for the most part). TLDR: Time is your biggest asset
Looks better. I can understand wanting to keep it off for clutter, but ultimately people just won't know you support this, or how to get a short url via your site, when they first use it. You could have a disabled example short url, greyed out with opacity at 0.6, underneath. If you move the errors from underneath to the right hand side, then you also then have more space underneath to play with.
This would be easily remedied by using reddit style tree threadding. That way relevant replies (ie. corrections) are directly below the original comment.
ah, ok. I see it now. You might want to add a timestamp onto the end of the css/js files, to avoid cache errors. I was thinking something [along these lines](http://i.imgur.com/ZRl7f.png) for errors is more useful. It's more direct; you can tell how many sylables match up as your typing, without needing to read a whole sentence. You just 'get' the number straight away. They can then turn green, or into a green tick, or something else along those lines, when the number of sylables matches up.
No. If you really think PHP tutorials suck, then build better ones. However writing a good tutorial is really *damn* hard. It needs to be well written, interesting, you need to be able to get the gist of it quickly whilst also offering depth, pretty and approachable, open to community improvements, as well as technically correct. If someone where to build PHP tutorials that met all of those criteria, then I'm sure it would naturally rise to the top.
This is an interesting (yet imho, irrational) viewpoint. The PHP project is made up of volunteers and users, so I do not understand what you're saying. And the namespace separator reference is equally puzzling. And patches are welcome. :)
very cool! 
seems to allow system().. I also seem to have free roam of their machine, not sure to what extent don't want to be rude and fuck something up edit: looks like they're using jailkit
A simple and fast hashing mechanism (md5 or sha1) is fully suitable for situations like this.
I believe in Canada they have post codes with letters. So make sure you're not capturing any Canadian details or any other country for that matter because in other countries they don't use zip codes, more likely they use post codes.
it's interesting, but what is the point? I can't think of a time that i though "oh man, i wish i could write an extremely small chunk of php right now and run it on someone else's server" edit: also i think it's not running very well... http://imgur.com/ya5uQ
I can read any file on the server and he's got some files with 777 permissions so I can edit at will. Plus, it seems to accept make commands.
I rewrote [my blog](http://jrm.cc) to use redis for everything. Another of my sites [for watching steam sales](http://steamalerts.com) utilizes nothing but redis as well. Finally, I use it on [bf3s.com](http://bf3s.com) as a queue for updating profiles, caching parsed profiles, and storing user input configurations for signature files -- so just about everything there as well, heh. I generally find that for most simple "app" type sites like these, especially when there is very minimal admin or "data exploration", redis is just blazingly awesome. *(Some of those sites are down for weekly backup right now :/)*
any file out side of the jail? If you look at the link I posted, you can see where I was able to look.... It is pretty limited, I'm unable to run either make, or gcc, neither appear to be in the path.
I suppose, but pastebin and similar sites offer the same sharing functionality, which is the important part. If it had something like realtime collaboration between multiple visitors that would be a nifty feature, though i think it's not too close to what they were going for.
Use system() or shell_exec() instead of exec()
This is vulnerable to (D)DOS and exposes its uses to XSS
Beware that matches 12345\n and may end in undesired effects. Use the ~~/s~~ /D modifier to avoid it.
With the regex validation you aren't in any danger of SQL injection. That said, there is absolutely no reason to not use prepared statements for every single database query. MySQLi is so ridiculously easy to use, I don't even know how to access a database without prepared statements any more.
thanks for the heads up, as of right now, though, this is only US. there will be some major obstacles if this expands beyond the US.
PDO
Have you guys never seen http://codepad.viper-7.com/ &lt;- especially cool http://codepad.org/ http://ideone.com/ before?
You could do that and I have seen it done. In our Redis implementation we simply assume the cache is valid if it is there and has not expired. We specifically target these high access rarely changing queries in the code and wrap Redis calls around them.
What book, out of curiosity? 
[This piece of shit](http://www.amazon.com/gp/product/1590599470/ref=wms_ohs_product) Had to dig that up out of amazon. If you want a walk through of modeling an application based on renting cars, where 80% of the book is focused on shit so simple you'd have to be an idiot to buy a book on it, this is your book. This is just afaik, because its been a few years. I gave the book to a friend after reading through it.
Odd. Apress books are generally pretty decent! 
 $bob = ['bob' =&gt; 'hello']; var_dump($bob); Parse error: syntax error, unexpected '[' in /tmp/php1Iq6L6 on line 8 I'm guessing it doesn't use PHP 5.4?
You should be careful switching around frameworks willy nilly. The better idea is to use reusable PSR-0/Composer components. With CakePHP on the PHP-FIG now I assume they'll be moving towards it, so you'll be able to mix and match the ORM from whatever framework with whatever other framework.
[Tables](http://cdn.memegenerator.net/instances/400x/21903158.jpg)
Not seeing the justification for your argument. How does using a unique key such as a member of an ENUM replacing lookup table break normalization rules? If you're suggesting it's because it's duplicating data across tables, that is incorrect as the value is a key - if that was the case then any foreign key, be it natural or surrogate, would be considered denormalizing. As for performance for things like using email as a primary key, consider that PHP is primarily used for web applications: you're going to be doing reads rather than inserts, and looking up user profiles by email a big chunk of the time regardless and will wind up indexing email (and possibly making it UNIQUE) anyway. And unless you're handling megadigit counts of records, having a 40 byte string key instead of a 4 byte integer isn't going to impact performance significantly. At this point of the argument, context becomes important: most web applications don't need to scale to Amazon-like levels of efficiency (and in a commercial application you probably would be using a customer number rather than an email address for a user profile key anyway). Admittedly with a CASCADE + natural key you will get a performance hit that you wouldn't get with just a surrogate key if the primary key changes, but generally when choosing a natural key one also chooses a field that doesn't see change often if at all. ADDED: [Wikipedia has a nice summary of the pros &amp; cons for using natural vs surrogate keys](http://en.wikipedia.org/wiki/Surrogate_key).
Wow... that sounds like a real nightmare waiting to happen. If you ever lost track of the code/constants, your data would be totally worthless.
I've used so many editors and IDEs. I liked NetBeans for a long time but recently switched to Aptana and like it quite a bit. That said, looking at the features of PHPStorm, it seems like a compelling choice.
Hi /r/PHP! I know there's a few of you out there using SimplePie, so in case you don't follow the blog, here's the announcement! In a nutshell, SimplePie is now PHP 5.2+ only. We've also taken the opportunity to split it up into one-file-per-class (which was a major pain before) and we've fixed [alot of bugs](http://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html). If you've got any questions or comments, I'd love to hear them! (Also, you'll be seeing a new release of [Requests](http://www.reddit.com/r/PHP/comments/petov/requests_for_php_a_http_request_library_for/) soon, with multirequest support, plus new HTTP methods!)
Nice! Simplepie is my favorite RSS parser. It always just seemed to work no matter what feed I threw at it. Keep up the great work!
I definitely agree. We have a lot of clients who do not want to pay for maintenance longer than a few months after we deploy their applications, so typically switching frameworks is a lot easier for us since we can switch from project to project. We currently use CakePHP for simple and fast projects, and Symfony2 for more complicated projects which may need to be extended in the future. It would be nice to be able to use CakePHP for both of these purposes!
I kind of agree. I just started playing with Symfony a month ago, and I'm impressed with the overall architecture. It feels a bit like Spring from the Java camp.
don't use BETA versions. all three times I tried different Netbeans BETA versions I ran into trouble...
The name and design is very similar to [jsFiddle](http://www.jsfiddle.net/). I wonder if they were created by the same person.
Trim the request data first.
Thank you, McCue! Myself and a few other developers at Curse have been watching the progress over the last week hoping a new release was coming. Been trying to work through a few performance crippling bugs with SimplePie on high load sites that looks like they were fixed.
The design of the forum software and the high traffic load causes the query cache to invalidate very fast. It does help for some pages, but in general it fails trying to keep up.
I love SimplePie. I've only ever had a need to use it once but it saved me a ton of time.
Because APC lives within the instance of PHP itself, so if you have 20 PHP daemons running they each have independent and non-shared APC instances. Redis or Memcached sit outside, so every PHP instance can take advantage.
Agreed. For anything heavier, you ideally want to be using a proper HMAC.
Why one file per class? Does it make it easier to manage? If so how?
Article is talking about necessity of high quality tutorial provided by professionals. Neither of which applied to you or your site. You are either suffering from *Dunning–Kruger effect* or trying to scam newbies to pay for collection of bad practices and outdated tutorials.
Using the forums table from IP.Board as an example. It stores all the typical forum information which is rarely changed. It also stores who was the last member to post in that forum, which can change upwards of a rate of 100 per second. This of course invalidates the query cache very quickly. So the information that rarely changes such as forum name, ID, and ordering get stored in Redis for fast access. The last time that information changed was over a week ago and we invalidate the cache every five minutes.(Five minutes if the maximum we want to wait if we need to change it.)
The main issue we encounter is file system level locks with the *.spc cache files. Which SP spits out warnings instead of handling the errors gracefully. Same deal with the Memcache cache module, it has issues with not gracefully handling errors. Will find out if these are improved or fixed in 1.3. Going to see who on the team gets assigned the task of swapping out for the new version and doing tests.
I'm not sure why a database hit should be of any concern when it comes to user account creation. I imagine user account creation occurs very infrequently for even the most heavily trafficked sites out there (ie equating to maybe a hundred or so extra database writes and reads a day on those popular sites). Adding an index on the token column will help for lookups during the activation process. You could even store activation tokens in a separate table linked (either abstractly if using myisam or by foreign keys if using innodb) matching a main user table ID pk to work on your token verification process separately if table locking on the main user table is a concern. While your approach might help to avoid touching any database at all during the verification process, is that really a problem? What problems are you having exactly with a normal db approach? Can you describe how using a db approach like you used to do is more complex or more difficult to maintain? 
A Database Error Occurred Unable to connect to your database server using the provided settings. Filename: core/Loader.php Line Number: 346
Yes, and I'm quite sure it does include them (otherwise the whole www-directory wouldn't work). The thing is, session.save_path never even gets set. Phpinfo() says it doesn't have a value.
&gt; it doesn't require any janitorial work in the long term like a database solution might Can you go into more detail on this point? What do you mean? &gt; many sites regularly send autologin links via email that take you directly to your inbox or similar [Session hijacking](http://en.wikipedia.org/wiki/Session_hijacking) comes to mind. So does [eavesdropping](http://en.wikipedia.org/wiki/Computer_surveillance) to collect URL's. Breaking into a computer and examining browser History also comes to mind. Bottom line - bad idea to associate or do business with those reckless services.
He's not saying that Redis a job queue. He built a job queue on top of Redis - what is so hard to understand about this?
Yeah, *trying to* overwrite, however it just won't change. I commented out the open_basedir line and it did work, but only because it's still using the /tmp path. It's like as if *php_admin_value session_save_path* does nothing. No error, no value, no nothing, it just will not overwrite the path.
&gt;Can you go into more detail on this point? What do you mean? Nothing complicated, just removing expired tokens from the db and optimizing the table every once and a while. Good second point. I don't see how session hijacking is an issue any more than normal, and, if an attacker could eavesdrop, your session id is already compromised. The last point is good mostly because the biggest weakness of this method is that it's hard to invalidate cookies.
What is on line 1 that tries to work with the /tmp directory? And, does Apache allow [overriding](http://httpd.apache.org/docs/2.0/mod/core.html#allowoverride) anything at all (See [first few lines in this PHP manual page](http://php.net/manual/en/configuration.changes.php))? Is /Home/vhost/tmp a valid directory? What are read/write permissions set to here?
*session_start();* is the first line. I tried it with AllowOverride All, but no luck. Also if it was about that, I guess I wouldn't be able to change the upload dir either?
Your choice of rebuttal is pretty interesting .. 1. The error suppression with `@` : it was a single sentence in the section. It was so short, because i consider that to be a minor issue. 1st and 3rd links contains a case where functions are called on file, before checking if file exists and the 2nd is about suppressing error in output buffer. Why didn't you address the larger portion of section, which dealt with hiding of deprecated code ? 2. This topic was about cakephp, and not about *other frameworks*. I am a bit past the age, when *"but they did it too"* seems like a valid argument. 3. Why is the argument about "tight coupling" invalid? "Routing mechanism" is not restricted to one single class. 4. Yes, I already noted, that I have not followed the development of 3.x branch. Are you trying to tell me that the core architecture will radically change ? That was not my impression from the article ? 5. The last link is to a "proof of concept", for which i have had no free time to work on and repository only contains a single file at the moment. Why bring this up? Is there something wrong with that file ? 
What happens when you call [session_save_path()](http://php.net/manual/en/function.session-save-path.php) to set the session path in-script before `session_start()`? And, can you confirm the read/write permission settings on this directory? Usually this boils down to a permission issue.
What does the read/write permissions look like on /home/vhost/tmp? 755? Try full permissions (read/write for everyone), and then take away read/write values one at a time until your script can no longer function. I don't have the exact values on hand you'll need in order for your script to function...
Good. So the problem now is why doesn't using `php_admin_value session_save_path /home/vhost/tmp` work while calling `session_save_path("/home/vhost/tmp")` does. Try some variations on the php_admin value: `php_admin_value session.session_save_path /home/vhost/tmp` `php_admin_value session.session_save_path "/home/vhost/tmp"` `php_admin_value session_save_path /home/vhost/tmp` `php_admin_value session_save_path "/home/vhost/tmp"` I'm pretty sure the proper way of referencing this setting is session.session_save_path
Well .. at least they using term "model layer". That brings some hope .. but yeah, they say it will still take 6+ month on development (I must admit, I had skipped over that paragraph .. it didn't look all that important).
Oh god, session.save_path is the correct one. I thought I had tried all the different ones already but apparently not. It's working great now, thanks a lot!
I love this!
I was trying to be evil and teach you a lesson of debugging. I think I gave you the answer too quickly. For the benefit of others experiencing this same problem, what do your apache and php error logs say about this problem?
If they are absolutely adamant that they not use hosted solutions, I'd just suggest paying for a you-provide-hosting service like https://www.filerun.com/buy, change the branding/logo/etc, and charge your client more. Any of the numerous OS products would work as well and the skinning would take substantially less effort than writing one from scratch. Building your own would be a complete waste of time.
I don't think it's evil at all. However, none of the error logs said anything so I assumed the command was right (just as upload_tmp_dir was [why are they using _ anyway and not . like in the session variables?]) and the problem had to be somewhere else.
Yes, I agree. They're not interested in anything that requires monthly installments. Do you have a specific OS product to recommend?
Very nice. Disappointed [FuelPHP](http://fuelphp.com) isn't on the list. Wish the navigation was sticky like on the top or left side -- see [Twitter bootstrap](http://twitter.github.com/bootstrap/scaffolding.html) for example.
Frankly that sucks that your error logs showed nothing. How unhelpful is that? I'd recommend filing a bug report to request that attempting to work on non-existent configuration options produces an actual error: https://bugs.php.net/
True, I should have checked it instead of relying on my poor memory.
I really like where this is headed. I'm not sure I agree with suggesting Composer for dependency management though. That would make a better advanced topic. Rather I would start by showing devs how to implement their own simple dependency management to ensure they understand the concepts. Also php.net is full of bad code (Even the official examples). So linking there might not be the best idea. Also where is the unit-testing topic? With a little more polish this could be something worth linking to in the /r/php sidebar.
I think PHP namespaces are ugly and so poorly implemented you should just code your namespace by convention. This isn't terribly difficult to do if all your code is object oriented anyway.
It's in there as "Fuel".
From a modular standpoint, I think it's great. You could easily replace objects without having to do a search / replace with the 'use' keyword.
I think it was added after I commented... I hope I'm not that blind. :D
Here's the problem: There are many competing style guides out there. For example, I personally HATE the "put the { on a new line" syntax. Drupal even recommends against it (http://drupal.org/coding-standards/). So now we have two large communities fighting over which standards to follow. Also there is no way many of the projects and years of ingrained habits are going to change, especially over night. I say this as someone who has been doing PHP development for over a decade and makes his living doing PHP development. I am, however, a polyglot and prefer Scala, Go, Python, and Java (in that order, not that anyone cares) over PHP, for a large variety of reasons. More importantly, the standard library is so inconsistent that it is frustrating to use most of the time.
You know, you're right. The homepage hints at it, but for most people, they don't know what it's actually saying. I'll fix that up, but thanks for pointing that out! SimplePie, in a nutshell, is a library for parsing the RSS and Atom syndication formats, commonly known as feeds. The huge orange logo on the front page is the somewhat-official feed logo, although (unfortunately) it's becoming less and less popular these days.
I agree with most of what the author said, but the database example is just stupid. The solution given, $pdo = new PDO('sqlite:users.db'); $stmt = $pdo-&gt;prepare('SELECT * FROM users WHERE id = :id'); $stmt-&gt;bindParam(':id', (int)$_GET['id'], PDO::PARAM_INT); $stmt-&gt;execute(); can just as easily be replaced by the original query with type casting: $pdo = new PDO('sqlite:users.db'); $pdo-&gt;query("SELECT * FROM users WHERE id = " . (int)$_GET['id']); or even simpler, mysql_query("SELECT * FROM users WHERE id = " . (int)$_GET['id']); I get that the author is trying to prove a point here, but this is just laziness.
PSR-1 is excellent as it ensures components written by one author will be mostly compatible with those written by another. That's pretty much the main purpose of the FIG - to avoid or minimise the incompatibilities between libraries written for different frameworks. PSR-2 however risks jeopardising this by attempting to regulate and standardise personal taste/design which has little impact on interoperatability of code beyond other developers gawking at a taste that doesn't match theirs. Any developer who reads PSR-1 + 2 and disagrees with the formatting structure of 2 I worry will throw out the entire thing - or worse form a competing standard. According to the survey done to draft the PSR-2 approximately 33% of the frameworks surveyed disagreed with issues such as tab indentation, brace positioning, etc. The ideal scenario that the FIG is going for is to conform these 'minority' developers (which still represent a huge community) to the majority but I'm more concerned that it will actually discourage conforming where it actually matters most - code compatibility vs formatting. Instead, I think that the FIG would be much better suited having PSR-1 either by itself or with a couple of variants of PSR-2 for each framework/developer to elect and disclose which they follow. 
You could use pdo+smarty if you dontt want to use a framework
This man speaks the truth. I was involved in development of a rather large PHP app for five years and we ran into naming collision problems maybe two or three times. Nothing that sed and grep wouldn't help you fix. Once namespaces became available, they were used in one project inside company and in some libs. To my eye the code looked pretty damn ugly with all the backslashes. Even for PHP. The most ridiculous bit about namespaces is that they could've spent the energy implementing something a kin to Ruby modules, which would have brought you the functionality of namespaces and traits in one clean package. 
&gt; mysql_query You are exactly the kind of person that should be reading these pages and not writing tutorials.
Yes, so for the vast majority of projects (in my experience anyway) PDO is overkill.
No. Should be using a hash method that involves a work factor (e.g. bcrypt or pbkdf2). A bit of googling turns up things like this which explain far better than I can (I'm trying to not put too much effort in figuring out how to word it when it's all been done many many times before): * http://codahale.com/how-to-safely-store-a-password/ * http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php * http://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage 
Well yes, that's coding the namespaces by convention like The_Pants_Commend_Me wrote in his comment. You had to do it prior 5.3 and IMO still gives the cleanest result if you're smart about it. 
It would be nice if there was also a debugging section, talking about error logs, errors and exceptions, php.ini settings, and libraries that can help such as [xdebug](http://xdebug.org/) and [PHP Error](http://phperror.net).
When you start entering the realm of 'the right way' and 'the wrong way', you start becoming a bigot. I'll be over here getting shit done while you're espousing your bigotry.
The thing about standards is that each company has their own.
If only you wrote a tutorial for beginners in this style!
&gt; Here's the problem: There are many competing style guides out there. That's not the problem. The problem is no style guide. So, PSR is presented as one (and it's a one topic in this list). It's the most neutral style recommendation out there (built out by the community, including Drupal, I believe). The point isn't to demand anyone one standard, but to present *A* standard not tied to a project. Better to be able to point to a new person a common standard than no standard. Your problem, frankly, doesn't factor in.
It's setup as a Github repo at the moment. Something missing? pull request!
PSR is good. It's good because it's a neutral standard. Not everyone can agree on a standard, but everyone can agree that using a standard is better than using no standard. PSR fills that purpose. If you are smart enough to disagree with elements of PSR-1 and 2, then you probably going to work with your own specific, spelled out standard. For someone that needs this document, however, it's a wonderful resource.
At that point of performance tuning, you're already using an aggressive caching layer, so any DB hit is going to be bad, regardless of how you are accessing it. &gt; and it has no security issues unless you give it unfiltered+unescaped input. Good security discourages this by default. Yours relies on humans not making mistakes. I don't know of a any software team anywhere that can make that claim to fame.
They;ve said this is not going to be a rewrite, so I don't think their switch to PHP 5.4 is going to change the way you use it all that much.
how is it overkill? You can make a query in the same amount of lines of code
example ?
&gt; In-memory databases sqlite supports this
working now
&gt;Version 1.3. 1.3 MB zip file. Released on 7 July **2011**.
Can you include as alt-text of the logo and maybe somewhere in the title- what simplepie does? (when i was seeing 20/20 i almost never looked at the alttext or titlebar- but now its' the first thing i look at and it makes a huge difference)
Probably doesn't help you much, but I used this recently to put calendars into my system: http://arshaw.com/fullcalendar/ It doesn't actually do any of the event adding/updating in a database or anything, it's just the visual representation in jquery.
oh ok. http://www.phpscribble.com/o/Ol8BiR i can make that loop endlessly thus making your server attack itself http://www.phpscribble.com/o/QIzRIH and now i get to exploit your trusting users 
Maybe, but not in the article's example.
You seem to be confused about how PDO works. And when are you *not* executing statements you've executed before? If your Site is like 99% of the sites that out there, you're running many of the same queries on each page load. I'm not even sure what you're thinking by quoting my comment that PDO executes *faster* as proof it executes slower. 
And you can save a considerable amount of typing by not having to use the full name of the class each time when you're not using name spaces. There's also nothing particularly more clear about having The_Pants_Command_Me vs. Me in your code, unless you're using really poorly named classes. 
My point was that MySQL already has caching layers built in, so any performance boon from PDO will likely be insignificant (or PDO's overhead will make it slower than a native mysql_query call). A quick search for PDO benchmarks turns up [this page](http://jnrbsn.com/2010/06/mysqli-vs-pdo-benchmarks), which concludes that the difference is insignificant, but depends on the application.
If you don't like that method: &lt;?php while( $row = mssql_fetch_array( $result ) ): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;a href="update.php?id=&lt;?php echo $row['primary_id'] ?&gt;"&gt;&lt;?php echo $row['name'] ?&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php endwhile; ?&gt; assuming that actually works for the rest of your php file.
&gt;&gt; Encryption &gt; &gt;SQLite supports this via a number of open source and closed source extensions. I was about to say the same thing. In fact, I am using full-bore encryption on the sqlite database that we are embedding in our product. Totally transparent to both the end-user and the actual SQL commands (unlike other SQL encryption offerings, which encrypt only the field of a record, not the whole database).
You should also list out the memory consumption and performance figures, and base language (which can affect both memory and performance figures).
mysql query cache invalidates on -any- insert or update to the table. if you have a write-heavy table, the query cache is all but useless.
For fucks sake, PSR-2 is not an attempt to regulate personal taste. If you contribute to any medium to large project, you would/should follow their coding standard. Why not provide a set of default best practices so projects can share a coding standard? As I mentioned elsewhere, enshrining sensible defaults for a language's ecosystem is not an uncommon thing. PEP-8 is regarded among Python developers as very important and is followed almost religiously. 
Bullshit. Utter, imbecilic, and totally misguided bullshit. You can't argue that the triviality of supporting a style guide is a reason to do so. If it's so trivial than why the fuck does it matter? Style guides make sense in a language like Python where whitespace is significant, but PHP isn't Python. Why do four spaces matter instead of tabs? Why not five? Why not eleven? The problem with enforcement of style is that the parser itself doesn't enforce it, and so it is incredibly easy to introduce style drift in a large project because the only enforcement involved is actively adhering to the "standard." This is a mental tax that is unnecessary and ultimately pointless because it's both trivial to implement and trivial to reformat if need be. All it takes to change the coding style in a modern PHP IDE is to change your IDE style settings and run a reformat command on the code. Booom! It adheres to whatever the hell you want. But there's no point in forcing people to have to juggle a style standard in their head at the same fucking time they're writing code that needs to get out the door, especially when their own personal style may not reflect what the standard attempts to enforce. If people can't read different code styles, then they're just unimaginably stupid.
. . .forget something?
That is certainly an interesting aspect. Currently I am focusing on portability over performance, and therefore I think it's outside the scope of this article. But, if I have some extra time, I'll see if I can write a blog post about it :-)
Why is it important for projects to share a coding standard? Interoperability is one thing, how exactly does that brace being in the same spot across multiple projects benefit anyone in any real way?
I guess I was getting a little carried away - but still, providing a direct link to an inbox without a login wall just seems like a bad idea.
It's not about being a bigot, it's about not teaching people all the old-fashioned crap that is no longer correct. Too many tutorials about mysql_connect() and not enough about PDO if you ask me! This guy is onto a winner, and I've already forked in the hope of helping.
Whoops, thank you!
Things in Ruby tend to change between versions a lot more than in PHP and some people find that infuriating. The Gem system and RVM make it a lot nicer to work with though.
Why do people keep saying any hit at all on the db is bad?
Sql compact has a light-weight, free* db too. Don't forget about them. No, I'm not joking - they have this in their 2012 edition. *Sure you'll need a separate page just to encapsulate a table-of-contents for the licensing section alone. But the way I figure it is, the more people that start to explore this db platform and yet reject MS licensing policies, the more likely MS will be inclined to release this db platform under a truly freeware license (and I'm not talking about the crippled "Express" crap) rather than having to enter into a dark contract. On second thought, I probably dipped into the sauce a little too much tonight, so ignore me.
Vagrant is an awesome tool for anyone developing in teams with more than one or two developers. It lets you clone dev VMs so that everyone is working in the same environment.
My point is that style guides are inherent timewasters. The human brain is built to be incredibly flexible at understanding and deciphering patterns, even if it has only a limited dataset to work with. When I read source code written under Zend guidelines, or Wordpress, or CakePHP, or Drupal, I spend zero mental energy comprehending the code despite widely disparate stylistic choices. Now, on the flip side, having to adhere to any style guide, particularly one that details choices all the way down to whitespace and bracing choices, exerts a mental tax on my coding efforts, in that I have to consciously filter out the "style" I've developed over the years and enforce stylistic rules that I could very likely be getting wrong if I don't reread the standard every five minutes. It's a lot of work for no benefit other than everything looks "pretty" according to some ascetic sense arbitrarily defined by nitwits who take criticism from other language communities way too seriously. At my company, I task my employees and myself with writing high-quality, productive code. As for styles, anything that doesn't affect the functionality of code outside your control just has to be readable. My emphasis is use your damn common sense, but otherwise, spaces, braces and tabs never killed anyone. And not once, in nearly five years, has anyone ever had an issue reading someone else's code. It's a solution for a problem that doesn't exist.
May i suggest a library I wrapped up some time ago that does almost full validation. It checks the MX record and asks it if the email account exists. https://github.com/lavoiesl/smtp-email-validator
Except that `filter_var()` uses a regex internally (and a pretty lousy one at that)... https://github.com/php/php-src/blob/master/ext/filter/logical_filters.c#L525
This script will only return false if the server expcitly replies not valid. For example, using this validation, you will prevent bob.marley@gmail.com from entering bob.mraley@gmail.com (implying the later doesn't exist). This is just a quick validation. Real validation always implies a complete round-trip through user's mailbox but you save of the trouble of the user waiting for the email that he will never receive. 
It associates a key and value pair, in array declarations and in a foreach statement.
When you're initializing an array, PHP defaults to numerical indexes that it manages itself. Therefore: $v = array('Hello', 'World!'); Is automatically assigned the keys 0 =&gt; 'Hello', 1 =&gt; 'World' so that you can do this: echo $v[0]; //Hello When you use the =&gt; operator in your array initialization, you are telling PHP you want to use your own keys instead of the numerical ones it automatically assigns, like so: $v = array('A' =&gt; 'Hello', 'B' =&gt; 'World'); Then you can do this and be certain you are getting the right value even if your array has had it's keys shuffled by an outside operation: echo $v['A'] //Hello
It maps an index to a value. For example: foreach ($users AS $user_id =&gt; $user_data) { // $user_id is the index // $user_data is the value // $users is an array of data } // In defining an array $data = array( 'index' =&gt; 'value' ); // The =&gt; in this case simply points the 'index' to 'value' so it can be // used like: echo $data['index']; // Prints value 
agreed - the problem that I have is most regexes that are out there for this particular issue will take an email like test+yourSite@gmail.com and return it as invalid. This is extra annoying for me because I do this with every site I signup for (habit to see who is selling / letting my email out). My goal was not to provide a scud missile solution just one that better fits what I'm looking for.
instead of running it like this /usr/local/bin/php /var/www/html/php/script.php change the script to an executable with chmod a+x and put a shebang at the top of the file #!/usr/local/bin/php
if you want it to fire at 9:08pm every night, that should be okay. without the script, it's hard to know if it's a problem in the php code or not. things to think about: * what users cron file is running the script? * does that user have the proper permissions to do the task? * perhaps when run from cron you're in the wrong directory? (set to proper directory with *chdir()* at the top of your php script) Perhaps check the cron line for special characters at the end of the line? I usually do: &gt;8[space]21[space]0[space]0[space]0[tab]/usr/local/bin/php[space]/path/to/script
Your PHP scripts should never be in a user accessible folder. Any script within a web page is never exposed to the user because only HTML is output to the browser. You can verify this by accessing a page and then viewing source. If you can still see any sensitive information then you are doing something very wrong.
Unless you're running some sort of weak FTP or your server is wildly misconfigured you should be fine. If you haven't seen your PHP source do far you should be good.
Email services tend to do things their own way. For example, google (and I think yahoo) has the "." character which can be mixed in with a real address any which way the gmail user wants. Great for catching where spam originates from, but again, another example of email services just doing things their own way.
Is... is it really called a shebang? I have always wondered what that line meant/was called...
&gt; On the left side of @, the client's email service can accept any username format however the hell they please. This is incorrect as stated. The rules for the local-part are well defined in the various mail RFCs, and failure to comply with them is going to prevent RFC-compliant mail servers from being able to send mail there. Still, you are right, the best way to test if an address actually *works* is to try sending a mail there. Format validation only gets you so far.
The best way to filter an email address in PHP is to make sure it has an @. That's it. The RFC is so ludicrously complex and allows for so many variations that it's not worth your time or energy trying to filter for bad addresses - just send a god damn confirmation, and if the user put in an address that doesn't exist, you don't have to worry about it since they'll never complete the confirmation process and you can periodically clean out bum addresses from your database.
I'm not so sure - if the large majority didn't follow basic standards outlined in those rfc's, the internet wouldn't function. So there's that. Now that I think about it more, perhaps you should personally enforce the email address standard if only to encourage others not to break the rules.
Email addresses are insanely complicated. What's more, there is no good reason you should have to reinvent the wheel. Verifying email addresses is simple: Send an email to the given address, leave the hard part up to the software designed to deal with it. If it's valid the user receives a verification link/code and that's all there is to it. Pretty much anythiing more complicated than asking the user to enter their email twice, and checking for an @ is wasted effort.
oDesk is my primary income. I'm in the US and charge $50-100/hr. I end up getting all sorts of jobs that the cheap offshore people mess up and never have to chase after jobs. The trick is to setup search filters and then use the search results RSS feed with a service like RSSfwd to send you alerts when the ideal positions are posted.
or better yet, just check to see if there is a @ in the email. this should be done in javascript. then, wait for the confirmation
&gt; How easy is it to implement the encryption on any platform using any base language to write the application in? It's one function call, to set up the key. &gt; For example, H2 database supports all the other DBMSs command sets (up to a certain extend). That doesn't sound very useful. There was a post recently where a guy showed his custom functions so he could run his sqlite application on postgresql, and found it several times slower. That's because the differences in implementation matter outside of the core and compatible sql92 that they all reasonably support. Anyway, as far as command sets go, where do you draw the line? Does CHANGE MASTER TO work? &gt; it saves the overhead of setting up network connections. On UNIX, one uses Unix domain sockets which let you take advantage of multiple cores. The embedded feature is not for performance. 
short for hash bang http://en.wikipedia.org/wiki/Shebang_(Unix)
I've had code delivered from people like you, and punching in the face is something I mutter under my breath while trying to make sense of the pile of spaghetti shit I needed to wade through to fix bugs. We are going PSR-2 now - you deliver that or don't get paid. This isn't fine art, so you don't get to behave like a spoiled artist.
Uh, if you don't filter it people could enter multiple email addresses. [is_email() does all the RFC compliance for you and isn't that hard to use...](http://code.google.com/p/isemail/)
I don't think it's a good idea to validate against anything that is more rigid then RFC. OP's example that 'some@email' and 'some@iKnowThisDomainDoesntExist.notarealtld' is valid so there is no reason to filter it out, as it will be a nightmare to maintain later. As ICANN now sells top level domains you might actually start encounter 'some@email' addresses in the wild soon.
 I learnt that using Oracle 6 in 1992, so it is hardly a new concept. What are they teaching you young 'uns these says?
Instead of mysql_fetch_array it looks like you should be using mysql_fetch_assoc, check out http://www.php.net/manual/en/function.mysql-fetch-assoc.php Also do not get into bad habits early on if you are on php5.1 or greater then check out http://us3.php.net/pdo for database access
First, [eval](http://uk.php.net/manual/en/function.eval.php) is pretty much evil (note the big warning on that page), it's incredibly dangerous to parse code like that unless you can be 100% sure that field contains 100% safe PHP code. Your problem in this case is likely that the code `&lt;? $numCourse ?&gt;` doesn't actually do anything, you probably want `&lt;?=$numCourse?&gt;` or `&lt;? echo $numCourse ?&gt;`. However, you would be **much better and safer** (and surely faster) storing something like: &lt;b&gt;Planbeskrivelse:&lt;/b&gt; &lt;/br&gt; Din jobplan indeholder {numCourse} forløb A. B og C. Hvert forløb beskrives efterfølgende ud for hvert bogstav. Then simply doing: $str = str_replace('{numCourse}', $numCourse, $rows['description']); If you end up doing a lot of different replacements, you might want to look into a templating engine like [Smarty](http://www.smarty.net/).
I was hoping to avoid it as it's a production box, but if there are no solutions I will have to do so some night in the near feature.
The idea is certainly commendable, but if the author thinks that is a "simple" tutorial that can rival w3schools, they are deluded. (Note: I hate w3schools but this page does not explain things well for beginners.)
It's not a standard, its a recommendation. It's important to remember that.
Troll.
Dreamweaver, Notepad++, Zend Studio (Not on eclipse), Zend Studio (Based on Eclipse), NetBeans, Eclipse for PHP, TextMate, Sublime text as Eclipse plugin, PHPStorm And maybe more, but you asked for 5 so that is enough. 
Again, it sounds like you've never worked in an environment where you're collaborating with dozens or hundreds of other programmers. All those little things that you're considering "aesthetic whims" have real, actual, monetary value in a production environment. It makes your code clean and consistent - and therefore other developers can get up to speed faster. For instance, this trivial bit from PSR-1: &gt; Files MUST use only &lt;?php and &lt;?= tags. That right there? That means you're not going to run aground on the inevitable XML-in-templates issue where &lt;?xml breaks when short tags are on. It's so surprisingly simple, and it's going to save you untold hours of head-desking. Or this: &gt; Class names MUST be declared in StudlyCaps. Now you know how every class ever will be named. You don't have to look it up to see if there's an underscore every time you want to use something new. That's fantastic! You ever work with somebody else's package and they keep changing all over the place? Again, time lost. . The point here is, there's a reason for almost every one of these rules - and they're not just good ideas, they're **valuable** ideas. So cowboy up and start using 'em!
They shouldn't be hung up on style in the first place. There isn't a problem to solve.
Yes it is. The problem with PHP.net comments is that there is no community involvement in rating the suggestions. For example, [I came across this](http://uk3.php.net/manual/en/function.time.php#107943) the other day - a convoluted method of finding the first day of the next month. It is long, it is complex, it will fail in any language other than English, and I would question whether the date format it passes through strtotime() is entirely unambiguous ("NN NN NNNN" - is that UK or US?). All it does is strtotime('first day of next month'); If I didn't know better, knowing the phases people go through as they learn programming, I would say it was put up for a bet. Sure, the comments are useful, but don't be copying and pasting them as though they are *the* way of solving PHP problems.
Thanks, was a slight oversight from a paste of some other code that does return more than 1 entity.
its 5.4 now http://www.phpscribble.com/25n88t
Could also be worth looking at mustache (http://mustache.github.com/) for a basic templating system that will work in a variety of languages.
No one has mentioned this, but it could be that you are using binaries that aren't in the PATH when cron runs it. You need to have the full path to every command you run in your php script.
Also you need to specify a user to run the script as if you're using /etc/crontab.
you're using PIXEL_CHAR, it looks like this option returns a signed integer for each "char" (pixel?) I'd try the different output formats, maybe one will be the type you're expecting. check out the [Pixel Constants](http://www.php.net/manual/en/imagick.constants.php) for different return types: * imagick::PIXEL_CHAR (integer) * imagick::PIXEL_DOUBLE (integer) * imagick::PIXEL_FLOAT (integer) * imagick::PIXEL_INTEGER (integer) * imagick::PIXEL_LONG (integer) * imagick::PIXEL_QUANTUM (integer) * imagick::PIXEL_SHORT (integer) 
While its possible you'll see more random TLDs in the wild, this validation is covered. The only thing that would not work with this call back is the some@email, which I don't see ever happening. Even if it does - its a removal of 3 lines of code to make this work.
I wonder why wont you RTFM or just google. Anyway, the operator is known as fat comma operator and is used to create/donate hashes, not to be confused with password hash. Hashes are used for lookups. And they are nothing but key value pairs. Usage in PHP $myArray = array('key' =&gt; 'value'); foreach($myArray as $key =&gt; $value){ echo $key, ' has ', $value; } Hash tables or key-value pairs or associative arrays. 
Sadly this does not seem to fix it, they all return funky values. Correction: Using floats works, apart from the alpha value (last element in each pixels array). Returning some strange alpha values, even though the image does not use alpha. New output: http://d.woollyh.at/neL0
If you don't think that is bad, you've probably never encountered it. Let me show you a more concrete example that can be found in the wild quite often: $result = @mysqli_query($conn, $sql); Apart from the fact that PDO should be used here, there is another major issue. If you don't have the MySQLi extension installed, you're doomed. You will get a blank page without any feedback. The error logs will be empty. And if you do not know about xdebug scream or debugger (did you know about them?), you will have to trace through the code by inserting var_dump()s along the line. Of course, in this case there should probably be a `function_exists` or `extension_loaded` check somewhere. But the lone fact that it is really dangerous should be reason enough to avoid error suppression.
Which plugins do you recommend?
I've explained the problem and you have just repeated yourself, so it looks like we have reached a stalemate. 
Okay, you have to hit the database at some point. That's not what they mean. What is meant is that every hit on the DB is going to hurt your performance. Store data in the DB, but read from the cache. Only go to the DB if your cache doesn't contain the data, and keep the data in cache until it's changed. So, if I have a page load that requires a DB hit, I inspect that, and see why does it need to hit the DB? Can that data be cached? I try to avoid DB hits.
It's not. It's an internal tool to be used at one of the Jobcenters. 
What sucked about Eclipse? It's a bit clunky but if you're willing to look past that... it has [great features](http://www.reddit.com/r/PHP/comments/w443d/best_php_ide_cross_platform/c5bhadn).
I sure hope you're escaping `fullActivation`... Otherwise you're open to SQL Injection... 
This will reject some completely valid addresses. It does a check for an MX record, but you don't need an MX record to receive mail - MTAs must also check (and attempt delivery to) an A record in the absence of an MX record.
That isn't wrong. If you look at the output in the examples, that's what they're getting too. This is expected as the result of up-conversion to the base integer type in PHP. The extension was merely compiled in C with signed characters.
Also, if you *must* use `mysql_*` functions, you should be using `mysqli_*` functions instead.
After learning Java first, I can't tell you how much I hate the syntax for associative arrays. I know know that I can use array Java style with indexes, but it seems like everyone loves using foreach loops. Ugh.
Unless I was looking at the wrong section, PHP.net doesn't have a good explanation. 
&gt; I had toyed around with the idea of running multiple Jenkins slaves, each with a different environment ... Each one of those slaves would require a VM. This isn't true at all. Jenkins is just a Java webapp that comes shipped with a portable application container (I believe it's Jetty). You can deploy Jenkins several times (or just once!) to your own application container, if you're already running something like Resin or Tomcat or Websphere. If you wanted to run several different isolated versions of Jenkins, you could simply run Tomcat (which is basically zero configuration if you hide it behind a reverse proxy and use the reverse proxy for access control and security), and deploy jenkins several times to myhost.com/jenkins1/ and myhost.com/jenkins2/ (or jenkins1.myhost.com, jenkins2.myhost.com, whichever you prever). 
Yep. As stated in the original post, "=&gt;" doesn't show up in searches on google or php.net. I did try ...
Each would require a separate VM, because of the environment setup required (PHP installs). The jenkins install isn't the requirement for separate envs. 
PHPStorm does all of that and more, much faster, and cleaner. 
You're parsing a PDF to HTML to data. It's inherently dirty. It's also a tiny amount of data. Why does it matter if it's ugly or inefficient? Your code works. Move on.
personally, i like the \n{\n style. i find it easier to read, looks nicer. easier to line up blocks of code.
I hate down votes. But people on this sub reddit are very very good compared to those on IRCs, the only response you get for these kind of questions used to be RTFM. I guess OP and pi_over_3 have never ever used an array in PHP. [Here is a link to php.net page.](http://in2.php.net/manual/en/function.array.php). This operator is available and works in a similar way in Perl. [Here is a Wiki article](http://en.wikipedia.org/wiki/Fat_comma). Read more about hashes and look up tables.
Nice, dude.
This might be as simple as doing this with the plain HTML text: $resultsArray = array("Tech ID:", "Name:", "Account #:", "Address Line 1:", "Order Type:", "Earliest Start:", "Sub Type:", "City, State, Zip:","Planned Start:", "SR Sub Area:", "Due:", "Primary Phone Number:", "Duration:", "Property ID:", "Activity #:"); $out = array(); foreach($resultsArray as $v){ $start = strpos($text, $v) + 4; //find our ID, skip over trailing &lt;br&gt; tag $end = strpos(substr($text, $start), '&lt;br&gt;'); //find our next &lt;br&gt; tag $out[$v] = substr($text, $start, ($start + $end)); //get everything between $start and $end for our value }
http://www.phptherightway.com/
It's called the [Double Arrow](http://us.php.net/tokens), since there seems to be a lot of confusion on this post about it's name. It's use was covered fairly well.
If you just started coding PHP, you need to learn it without a framework first. It's **awesome** that you want to use a framework, and Codeigniter is a great one - but the learning curve is going to be painful if you try and do both at the same time. You'll also suffer from "framework dependency" where if you ever need to access a Database without using the helpers, etc - you might look like a noob. Seriously - learn the basics (data types, functions, loops, conditionals) then jump into the OOP waters (Classes, objects, inheritance, static, closures, etc) Once you have a grasp of those things - using a framework becomes much easier, and you can "look under the hood" to troubleshoot something if it goes wrong. If you've never written PHP and you're trying to understand Codeigniters MVC implementation, how routing works, etc, you're going to have a bad time. Seriously, a week of doing some tutorials and reading will save you a month of headache!
[You might be making things more complicated than they need to be](http://ca.php.net/pdf). But maybe not - your code would probably look similar parsing the PDF directly.
On my system the dir is /usr/lib/php/20100525. That might have something to do with it. But then, I'm running unstable, so it might be legitimately different for you.
&gt; As I mentioned, I've run this script at the command line in the same way as I have it in the cronjob, so any pathing issues should have shown up there (right?). Wrong. When you run the script yourself, it'll inherit your path. When cron runs the script, it'll use some default path, which will probably be the empty string. You can set environment variables in your crontab though - I'd recommend MAILTO, so that cron will tell you about anything it gets on stderr (and stdout too, I think). &gt; Been doing some more testing and looking through the access_log it doesn't look like the script is being run. access_log is controlled by apache/nginx/whatever, not PHP. Nothing you do on the command line will show up there. For debugging cron, something like `file_put_contents('/tmp/test-' . date(...), "hi\n")` should do it. &gt; I tried restarting cron but using the path below crond doesn't exist, I'm hunting for it now, but I've never had to restart cron on these servers before. You should never have to restart cron - it'll automatically pick up changes to crontabs. If you insist, `/etc/init.d/cron restart` would be the way to go. Also, cron logs stuff to syslog. Those logs are probably in /var/log. Depending on how you've got things set up, check cron.log, `grep -i cron messages` or `grep -i cron syslog`.
Ohhhh, going to give this a look. Thanks!
I can't see why that's necessary if running PHP as CGI.. Apache modules, yeah that's tricky but doable, but PHP as cgi should be fairly painless.
Right, so you're using the *intersection* of MySQL and H2. I mean, you're not using MySQL features that H2 hasn't implemented like LIMIT with UPDATE statements, or the REPLACE statement, or ENUM() types, or multi-table UPDATE statements, or case-folding, or implicit indexes (table ordering), or whatever. You might as well use SQL92 and PDO. It offers the same definition of "compatibility" across a wider array of databases. In the meantime, labelling H2 as "MySQL compatible" while SQLite is not "MySQL compatible" is confusing.
No problem. First time I got burned by that was in trying to bring a poorly written C windowing library that assumed unsigned to the GameBoy Advance, whose commercial toolchain was the first C toolchain I'd ever seen with signed characters, and watching it frequently explode with no clue what was borked. Took me hours to figure out what was going on.
Hey thanks - that's really useful to know and would have probably taken me for ever to figure out - really appreciate it. For some reason I am getting an error with the code and am struggling to debug it. My setup now looks like this: echo '&lt;select name=\"sv_07\"&gt;'; $vars = array( 'Year' =&gt; 'Year' '-2012' =&gt; '2012', '-2011' =&gt; '2011', '-2010' =&gt; '2010', '-2009' =&gt; '2009', '-2008' =&gt; '2008', '-2007' =&gt; '2007', '-2006' =&gt; '2006', '-2005' =&gt; '2005', 'Pre 2005' =&gt; 'Pre 2005', ); foreach($vars as $val =&gt; $name){ if($_SESSION['sv_07'] == $val){ echo '&lt;option value="' . substr($val, 0, 1) . '" selected&gt;' . $name . '&lt;/option&gt;'; } else { echo '&lt;option value="' . substr($val, 0, 1) . '"&gt;' . $name . '&lt;/option&gt;'; } } echo '&lt;/select&gt;&lt;/div&gt;'; But I'm getting errors, tried some debugging and seeing messages such as: &gt;Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING or T_VARIABLE or T_NUM_STRING in /home/4seOiK/prog.php on line 16 I can't see anything wrong with it, might be using echo wrong. Anything jump out at you? Thanks! 
hope this help $content = $content."&lt;hr&gt;"; $works = array(); $worksArray = scrap("\&lt;A name\=\d{1,3}\&gt;", "\&lt;hr\&gt;", $content, 0); function scrap($before, $after, $content, $preg_quote) { $srtring = strtoupper( md5(time()) ); if( $preg_quote == 1) : $before = preg_quote($before); $after = preg_quote($after); endif; $regex = $before."(.*)".$after; $content = str_replace(array("\t","\n","\r"),null,$content); preg_match_all("@".$regex."@sU",$content,$matches); return $matches; } if( is_array($worksArray[0])): foreach($worksArray[0] as $workOrder): $scrapData = scrap("&lt;A name=", "&gt;&lt;/a&gt;", $workOrder, 1); $id = $scrapData[1][0]; $scrapData = scrap("Company:&lt;br&gt;", "&lt;br&gt;", $workOrder, 1); $company = $scrapData[1][0]; // and so on... array_push($works, array( 'id' =&gt; $id, 'company' =&gt; $company )); endforeach; endif; header("Content-Type: text/plain"); print_r( $works);
Yes, I screwed up the substr command in my example. See, if you do substr($string, 1) it will read everything but the first character. If you do substr($string, 0, 1) you're telling it to start at the first character (0) and stop at the next character (1);
The thing about bigots is that they don't believe themselves to be bigots. It's always about 'teaching someone' or some other nonsense. 
If you're on a cloud service, the answer is yes. There are no guarantees that none of your servers will spontaneously combust. Happened just last week to our database master.
Should still be encrypted, so they'll have to get both the file and the decryption algorithm.
What do you mean when you say "debug code better"? If your code is laid out in a logical manner than the source of the errors will be easy to determine. Are you getting some kind of error that isn't reported to you immediately and repeatedly by apache?
function d($x) { echo "&lt;pre&gt;".print_r($x,1)."&lt;/pre&gt;"; }
I'm the developer of [Requests](http://requests.ryanmccue.info/), which in my opinion is the best HTTP library. ;) I also hear good things about Guzzle, haven't heard of the other one though.
Unless he's going to write his own encryption algorithm (and do it terribly wrong) there would be no point as the key would have to be passed to the application just to be able to run.
I'll hijack your thread because you might want to know this to what does :: do? is it used instead of $var = new class; ?
You sir are a gentleman and a scholar.
the scope resolution operator **::** uses the original object, **new** just creates a new one. it's useful to create a new object in many cases, but important to know why/when. for example, a collection class which gathers a bunch of reddit posts. the original contains the parameters set while creating the first collection, and can be used later without reconstructing the class. however you could always create a new object to create new collections that might contain 'featured threads' or something, you can use the same methods and variables to build your collection of threads and it wont interfere with the original collection, so of course later in the code you could always tap the original class for additional info on the original collection to build the page. just an example.
I think you're right. They're all form elements, form name, action, method, value and id. Action is where the form processing script is. In Codeigniter, that would be referring to a controller function, where you can validate the form data using respective library and call a function from model to store/display/mail etc the data received. Of course all data is sanitized and xss cleaned so don't worry about that. Name is given to the form tag to help you identify with css. Method is either POST or GET depending on how you want the form data sent. Value is used to show a default value, show the previously entered if the data is validated and comes back to the form, send a specific value if they're checkboxes. Id is used by css and jquery to identify the exact element you're referring to. To understand MVC i would suggest the tutorial in the CI user guide. You will learn to work with CI and the get the concept as well. String is data type. In php, dont worry about it unless you have to typecast it.
This is interesting but I must admit, I'm looking for something built on cURL. From my experience cURL just works it just has, as you said, an interesting API. If I may ask, why didn't you build something on top of cURL?
Install xdebug, you could also check out [php error](http://phperror.net) which makes the errors you receive a lot more pretty and readable.
Definitely have xdebug if nothing else. You can also set up handlers or wrap your code in a try/catch that provides debugging info (like a stack trace). Make sure you have error_reporting set to the highest level. Low coupling, high cohesion, and well-planned code flow/execution also makes a huge difference. Good code is easy to debug.
I'm working on getting it to work with vim, notepad++ and netbeans.
He did. Requests is abstraction above curl (if available) and fsock*
Where does it say that?
Here's another one https://github.com/c9s/phpbrew
http://requests.ryanmccue.info/ Ctrl+F type "curl" Press enter twice
Yeah I've confirmed the directory and the presence of the files in it so that's all good :)
Somewhat related, I discovered [Travis CI](http://travis-ci.org/) the other day. It allows you to perform tests on multiple versions of platforms, PHP included.
Is 200 pages really a lot?
You can't imagine how much RAM PHP PDF libraries use...
I agree with this Jason :) Just that I feel PSR-1 is actually extremely important for compatability where as PSR-2 is more about standardising something that in essence comes down to personal taste. I of course don't have an issue with PSR-2 existing but am concerned that by bundling/pushing it so tightly with PSR-1 it risks diluting the importance of PSR-1. I would much much rather that the majority of developers, no matter their personal taste, adopt PSR-1 for practical and interop reasons. The risk with trying to prescribe both in the same breath is that developers who don't like PSR-2 are more likely to be dismissive of PSR-1. To give an exaggerated example, its akin to writing a pair of standards that says: WSR-1: all web designers should keep their code clean, concise, and semantic, ensuring it works as expected across a variety of platforms. WSR-2: All web designers should use Macs. This reduces the annoyance of sharing fonts with non-mac users. Whilst part 2 may work well in certain workplaces where it is enforceable, the risk is that all non-mac designers may shrug off *both* if one is believed to be fickle and unjustified. By attempting to tell a significant (40ish %) and equally experienced part of the community that they are 'doing it wrong' with little tangible justification beyond "It's more comfortable for me this way" you risk a significant subset of the community not taking the other much more important standards seriously. 
Correct, however keep in mind Python and PHP have *very* different communities. PSR-2 is purely about personal taste. The reason it is even mentioned is because developers find it frustrating to deal with code that is laid out differently to how they are familiar with. It has no impact on compatibility with other components and as far as the compiler/interpreter is concerned is identical. The debate of tabs vs spaces and brace positioning has nothing to do with compability. I don't actually disagree with you though that a set of default practices is a bad thing - but I do think that if they are going to be 'bundled' with another more important standard then an alternative PSR-2b should also be 'bundled' to provide coverage for a much larger subset of the community than 60ish %. This way we don't risk jeopardizing the uptake of PSR-1 based on something fickle and project dependent like coding standards. In short: PSR-1 should be ideally adopted by ALL projects as it has a clear and present benefit to interoperatability between components written by different authors. PSR-2 should be used on a project by project basis, and likely the only projects that would adopt it are the ones who already do.
PHP does another optimisation. PHP won't make new copy of value of variable for function till inside a function you wouldn't change it. For example: function dummy($zxc) { return $zxc; } $asd = 'qwerty'; // at this point php interpreter created in memory one ZVAL (C's struct) that contain value $qwe = dummy($asd); // value of this expression refers to $asd's ZVAL, so $qwe's and $asd's refers to exactly same object in memory $qwe .= 'a'; // now php interpreter created new ZVAL for $qwe, because values of variables are not the same anymore and one ZVAL can contain just one value PS this is also described here http://php.net/manual/en/function.debug-zval-dump.php And I forgot to mention it - in php function calls itself is expensive. I would recommend you make a script that before deploying will find and replace all the /_(d|g|u)\(/ to "//_$1\(" Umm, there's underscore before (d|g|u)
&gt;I leave a lot of object type checks for example, which throws an exception if a variable is not an instance of the correct class (which would usually follow by a "method undefined" fatal error when calling a method on that variable). Why not use [instanceof](http://php.net/manual/en/internals2.opcodes.instanceof.php)? Calling a non existent method is not an exception. Exceptions handling is not error handling.
I have come across http://fuckyeahnouns.com/ before which uses the [Bing image search api](http://martinsikora.com/bing-image-search-api) to grab (the first?) image that matches the word entered. Might be a good place to start. Google have deprecated their image search api, presumably due to bandwidth costs / lack of advising.
If you have ideas for contributions then please send in a pull request. Composer, Packagist, PHP-FIG, this starters guide, etc are all doing good things for the eco-system in their own ways. It's in no way too late, but there are going to be those who fight every good new idea to the death (see above). Just make each good decision and good contribution you can one at a time.
Hmm, that's quite different from how I imagined the problem to be... Would it be possible to "disable" these user functions via php.ini, or the ini_set() function so that they are ignored (without throwing errors or stopping execution) if run on the production server?
Thanks for all the comments! Many thanks!
Thanks for your reply, really appreciated! Things are becoming clearer now but I still believe I need help with the "action" part! You see, right now my form tag looks like this (I also included a little piece of the form): &lt;form action="" method="post"&gt; Status: &lt;select&gt; &lt;option value="backlog"&gt;Backlog&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; I don't quite understand what to put in "action". Should I put the filename of the database.php (since it handles the database) there?
When your code can no longer proceed, and you need to advise the caller that the requested operation could not be executed. The caller may, in turn, fail to proceed its own requested operation, and turn over the exception to its own caller. The overhead of exceptions is miniscule, as long as you don't rely on them as an out-of-band message passing mechanism. Optimizations should be done where I/O and loops are concerned; exceptions are about the last thing you should throw out for performance's sake. Exceptions are also a contract.
This will make it unsuitable to be included or executed from the webserver PHP.
Alright. Create a file in the same directory called example.php. Set your form action to the following: action="example.php" Next change your select element to the following: &lt;select name="backlog-select-box"&gt; &lt;option selected="selected"&gt;Backlog&lt;/option&gt; &lt;/select&gt; I have named the select box 'backlog-select-box' so you don't get confused between the name of the element and the value. Add in the following after the select box and before the &lt;/form&gt; tag: &lt;button type="submit" name="submit"&gt;Submit!&lt;/button&gt; Next, in your example.php file add this: &lt;?php echo 'Selected value is: ' . $_POST['backlog-select-box']; ?&gt; Hit the Submit! button. Shout if you get stuck.
Well, a thoughtful answer is don't do this kind of thing until you know exactly what you're doing and can be sure that the guy after you would know as well.
It doesn't make any difference whatsoever.
flickr api?
if you use windows, xdebug has a stand alone client if you don't want to use an IDE. It's definitely worth the time to learn. remote debugging is by far the most efficient way to debug. And bonus is you don't have to change your code constantly to do it. Find bugs in a minute instead of hours.
This is a flawed design from the start. Why would you even want this?
Just because you know how to manage a server doesn't mean you actually want to. 
CakePHP lets you develop on the command line, but doesn't need it for deployment.
Just use a standard MVC pattern. Pretty much every framework gives you the tools to handle this out of the box. For instance, in Symfony2, you set a route for something like */gallery/show/* and that maps to the Gallery controller and calls the showAction() method.
You may have had a point, you should try to make it next time. Just stating "that's bad" does nothing for you or the other person, just make you seem douchey. If, however, you say "that's bad, and this is why", then that's different. You mentioned about people not knowing how to do things the right way, well you're doing nothing to make a difference on that issue.
The answer is right there in the StackExchange replies and has been there since you posted this. People there are offering ways to "secure" this, I was leaving a subtle hint to ignore those people and just don't do this in the first place.
That's what I'm trying to accomplish here, a routing kind of script. I have these classes, and I need to use AJAX somehow to call them. Now what? :P That's where I came up with that script. Is there a better way to do it?
I know from experience that at least CodeIgniter is very hassle-free in this regard.
The better way is to use an existing framework to do it for you, so you don't have to worry about the low-level concerns like this and just focus on solving the problem at hand. ;) But to directly answer your point, I think you'll find that pre-/post-pending a keyword on the function name to show that it's "safe" will do you well. Like "index_action()", "show_action()", etc. At least until PHP gets nice function decorators, at least...
I disagree. Symfony is a bit of a bear to manage if you don't have SSH access.
Dynamic dispatch is a ubiquitous and nessary part of programming and program design. It is central to C/C++ and sophisticated programming at all levels. You have no idea what you're talking about. 
The most reliable method would be to register a callback with a dispatcher. class Dispatcher { private $callbacks; public function register($route, $cb) { $this-&gt;callbacks[$route] = $cb; } public function __invoke($route, array $args = array()) { return call_user_func_array($this-&gt;callbacks[$route], $args); } } $d = new Dispatcher(); $d-&gt;register('user/getDetails', function ($id) { return array('a','b'); }); $d($_GET['c'] . '/' . $_GET['a'], array($_GET['id'])); I'm using __invoke to be consistent with being able to pass $d around as though it were a single function which may be needed depending on what youre currently doing. ( $d is interchangable with any old function and so makes layering dispatchers/middlewear a little simpler);
Dynamically executing code based on user input is not "bad design" its how all non-trivial programming works. You just need to make sure it isnt *abitary* code. 
Ah ok - great, will adjust, thanks.
Unrelated, but frequently-implements. He asked for the best way to handle it, that's the best way. QED.
I was asking as you are against style guides, but now you like style guides, but you don't like style guides. &gt; PSR-2 simply continues the false idea that code style drastically affects comprehension It is nothing to do with comprehension. No developers are crying about being confused about being able to read code. Anyone can read code in any style and know what is going on. We both fully agree there. The issue is _writing_ code. It obviously needs to be consistent for a project. Not just because developers get confused about reading it (we have already established that they don't) but because every project SHOULD HAVE standard code unto itself. CodeIgniter needs to be consistent to itself. Zend Framework needs to be consistent to itself. Drupal needs to be consistent to itself. Being consistent BETWEEN these projects means that components are all consistent. If Drupal is built with 5 PSR-0 components, then it does not want 5 different standards, it wants to remain consistent unto itself. So, using PSR-2 means that all of those components will be the same. If you don't want to implement PSR-2 then absolutely don't bother. You were never the target audience. The projects involved with the FIG want to standardise their own code. They don't want YOU to standardise YOUR code, because they (we) don't care - AT ALL. We want to standardise our code. If somebody else wants to use PSR-0, PSR-1 or PSR-2 then thats great, bully for them, but it is not the intentions of the group for anyone else to have this forced down their throat. So furthermore, why do you care? Probably because the wording on this site explaining what the FIG was in the first place was terribly done. I fixed it, so now it's different. Please read the FIG FAQ that I put together: http://www.php-fig.org/faq/
&gt; I was asking as you are against style guides, but now you like style guides, but you don't like style guides. Don't mischaracterize my words. You know damn well there's a difference between a coding convention regarding the functionality of auto-loading (PSR-0) and the formatting of class, method and namespacing naming (PSR-1) then whether you add a newline after a brace or use spaces or tabs (PSR-2.) &gt; It obviously needs to be consistent for a project. Why? &gt; Not just because developers get confused about reading it (we have already established that they don't) but because every project SHOULD HAVE standard code unto itself. Why? &gt; So, using PSR-2 means that all of those components will be the same. Why? The components *are* functionally the same if they act in an expected manner according to PSR-0 and PSR-1. They act no differently if they use conflicting bracing and spacing styles. &gt; We want to standardise our code. Great. Standardize the functionality of the code, not the completely irrelevant coding styles. If, as you've already agreed, the stylistic formatting of the code doesn't affect programmers comprehension, then WHY should there be a coding style enforced in the first place? Simply saying they SHOULD isn't a reason at all.
There are reasons frameworks are generally structured in certain ways. It also helps future developers to figure out how everything is tied together. Is he too hard headed to learn proper development practices?
Right, but the way it's structured means that you will still likely need the cli in production. Things like bin/vendors or even composer, and then running any additional commands like assets:install or cache:clear are all semi-necessary, or at least necessary if you want to retain any of your sanity when pushing your app live.
It was a more pedantic point, "a standard MVC pattern" would not include nor relate to dispatching/routing. 
You've completely failed to respond to my central argument the entire time: why have a style guide in the first place? Zend, Drupal, Joomla, etc. may all have their own style guides, but that just transfers the idiocy to a different group. What's the actual, functional, productive difference between: function prefix($prefix = '', $text = ''){ return $prefix . '-' . $text; } Or: function prefix ( $prefix = '' , $text = '' ) { return $prefix . '-' . $text; } They are functionally equivalent and while the second example is obviously wildly contrived, it is still completely readable and obvious as to its function. They are called in exactly the same manner, and return the exact same result: echo prefix('hello', 'world); //hello-world The mental effort, however, in writing according to one style vs. the other is not zero, however, so there must be SOME benefit beyond aesthetics to adhering to one style vs. the other, especially since any modern IDE can reformat either example into the other style with a mere few mouse clicks. The mere fact that you you appeal to nothing more than "style guides exist, therefore style guides are necessary to proper development" just illustrates how laughably misguided the whole affair is. By the way, stop with the back-handed compliments: &gt; You can develop your applications for your clients as inconsistently as you like. I will not dare to knock the quality, I am sure your applications are wonderful and function perfectly. I don't give out personal info under this account, but suffice to say some of my open source code touches your codebase. . .
Not really, I'm just trying to find a practical place to start moving towards more OOP without coming to a complete halt or causing too much stress. 
Interesting. Examples?
Sure, add a dependency. That's MUCH better.
No, I've never needed to. Edit: *Motherfucker.*
What about putting if(defined(DEBUG)){} around the functions where they are called? Not sure if that would be any faster though, since PHP still has to do work to check the defines.
If somebody wants to accept non-formatted code then that is up to the project at hand. Most people will be reasonable enough to bring it down and change the format, as long as THEY haven't changed existing formatted code. It's not about OCD, or about "My House My Rules", it's about trying to manage maintainable code and reasonable contributions. If their pull request has had their IDE auto-format everything, change all the line endings, instantly change tabs or spaces or anything else then I have no idea what they are trying to submit and have to close it down! If they submit a few lines and there is a bracket in the wrong place then I'll move that bracket myself. If they have loads, I might suggest they move them. We are two different developers in two entirely different fields, so there is no reason for us to be on the same page. For you building your application is the most important, then you can hit Ctrl + Alt + F in your IDE or run CodeSniffer to make it hit a certain style. That is YOUR way. Folks running open source projects NEED to make sure that code contributions don't randomly break shit, so clean, standard code is absolutely more important. Different developers work in different ways. Open source projects require this, for reasons I have explained multiple times. For us its important, so we've implemented rules to help us. They are working, it's not like herding cats. People voted, agreed and now things are moving forwards. You are not an open source project, you don't like it, you don't need it, you were never the target audience, nobody cares if you use PSRs and it doesn't matter to the internet if you do or dont.
Aaargh Just use regular expression to remove all calls from code in deployed version
Yii might do the trick for you. I would, however, strongly recommend that you get your team to Cowboy Up and switch over to something mature like Symfony 2 or CI.
I actually avoid this problem by using namespaces and then forcing that namespace onto my class name: if (!method_exists ('Api\\' . $library, $method)) { throw new Exception($_err[ERR_INVALID_FUNCTION], ERR_INVALID_FUNCTION); } $obj = call_user_func(array('Api\\' . $library, $method), $vars, $object); In the past, I would prefix all callable functions with something unique ("rpc_", I believe) and concatenate that with the method requested.
Unit testing with php unit. 
I would determine whether the user is 7 days from expiring within your query, rather than doing so in PHP. You shouldn't need to pass any login values to SQL since it's a script running via cron. Loop through that result set and send an email to each. The query would look something like this: select first_name, last_name, email, expire_date from users where date_format(expire_date,'%Y-%m-%d') = date_add(curdate(),interval 7 days) the expire_date may be something like "date_add(membership_date,interval 365)" for a year long membership.
It might be easier to do the filtering database side. If you're using MySQL you can do something like SELECT * FROM memberships WHERE end_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY) AND emailed_expiration_warning='n' Then email each of those users and do an UPDATE to emailed_expiration_warning to avoid sending multiple emails to the same user.
If the information needs to be secure then that should be a part of the application logic to deny access based upon an ACL. If an attacker only has to guess an ID to gain access to secure information then you've got **way** bigger problems than how that ID is represented in your URI.
Yeah as mike mentioned pre generating them seems to be a good solution.
Lol, how do you generate the unused keys?
As per the other commenter's post you should really only need to do something like: 1. Run an SQL query to obtain a list of all members that are due to expire (date add/sub MySQL functions should help here.. if you're using MySQL that is). You don't really need to worry about sanitisation etc. as there are no user inputs in your script. You just need to make sure the script it outside of your web-root. 2. Loop though the result set sending each member an email. 3. Nothing. You are done. PHP will automatically clean up after itself. This set-up will work up to a few thousand expiring users at which point you might want to look into splitting result sets into batches to save on memory. This can be done in a very similar to way pagination at the front end. Just keep fetching limited batches with an increasing offset until you get back an empty result set. More importantly you may wish to store in the database that you have notified a user otherwise you may end up spamming people. Obviously the cron will need to run more often than once every 7 days so unless you're either careful with your query or actively checking if a user has already been notified you could end up sending people emails every time the cron runs. A simple way would just be to have a flag on their user record called e.g. expiry_notification_sent that is updated when you send them and email and reset to 0 when they renew. An arguably more flexible solution would be to have another table joined one-to-many to the user that could be used to log any sorts of notifications sent rather than just renewals but this would be more difficult to process. 
Bash I think
I learned by self teaching and at one point was a 'hermit-coder' i suppose, but eventually you have to learn the proper way of doing things. Its just the right way to go about your maturity as a dev...really, please try to get him to do this...he and you will be much better off for it, trust me. No amount of band-aid fixes will get you where you should be. If he is as good as you say, it wont take that long to get there.
Think of this as a coupon code, so it can't be incremental, and the end user shouldn't be able to figure out how to generate them
Why not generate UUIDs and chop off the characters you don't need? As others have suggested, pre-generating them and storing them in a database, with the column marked as unique is a good idea if you need to give out codes in real-time. 
This is a perfect example of where bigotry can get in the way of sound, technical decisions. The real answer is to evaluate your needs and make a decision based upon that. Out of the box, Mysqli gives you access to more of the available functionality than PDO. This is because PDO needs to be generic. And if you don't need to be portable (and *most* projects really don't), you lose for no good gain. Sound technical decisions are not made by bigots who speak in terms of 'right' and 'wrong'. Yes, they'll do shit like compare bigotry to evangelism, and try to flip it around into a positive, but at the end of the day, you don't want these people making technical decisions for you (regardless of their wordplay). What you want is someone who is capable of looking at things with the problem in mind.
Yes, this could be the answer, UUIDs with limited length, and then insert into a unique field, then at the end of the process (there will be a process to generate X codes, 1000,10000....and so on) check the number of codes vs the needed, if there are less, then some of them were duplicates, so rerun the generator with that number, this in a recursive function. This way, i can avoid checking every id before inserting...right?
I'd go with Symfony, but you should be working with phing or something and some sort of version control git/mercurial/svn or similar and then deploying to the shared web host.
You throw an exception when something exceptional happens, like a file not existing when you expect it to. There are several exceptions you can throw, you can also provide your own codes. There are OutOfRange exceptions OutofBoundsExceptions and others with SPL or whatever it is.
yep. This is what a company I used to work for did for gift card codes. It's very easy to implement and very easy to generate more codes when needed.
It didn't occur to me to add another column updating when a notification was sent. I'm going to be taking that into account as well, the last thing anyone needs is daily reminders for things like this. Thank you.
I usually just use: $uuid = md5(uniqid(mt_rand(),true)); 
This is my first experience using cron so I wasn't sure if I needed to be connecting to the database or not (or using PHP for that matter.) It seems the likelier solution would be just to go through SQL. I wasn't even aware that you could provide an interval like that. I believe that my client is having memberships run in quarters, so I'll research my options and code accordingly. Thank you for your help. 
Ok. I am wrong, the FIG is wrong, every open-source project with a style guide is wrong, [Python developers are wrong](http://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds), [Sun don't know what they are talking about](https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=0CGIQxQEwAg&amp;url=https%3A%2F%2Fdocs.google.com%2Fviewer%3Fa%3Dv%26q%3Dcache%3A9-ZGcC3UMk4J%3Adevelopers.sun.com%2Fsunstudio%2Fproducts%2Farchive%2Fwhitepapers%2Fjava-style.pdf%2B%26hl%3Den%26gl%3Duk%26pid%3Dbl%26srcid%3DADGEESgNtoDAvw5-RfaG30f5IojuDqTH_PI_tSnGWT4wClweiD9QqCwFX73kvQ5vL17baLS_1swM6ry7cdqVpIQIFX0xDQ9kgY4M_zQGTi4d0hV8b9M3QQ5R-9xQBQShZFm-03Aq0xbc%26sig%3DAHIEtbTIrLUiSeVp8kTgT8ZnpixxJ2T71Q&amp;ei=lKj8T7SoDca4hAfNsrncBg&amp;usg=AFQjCNHZaN4hwMzq05JLSH-nBi_ifnFYgg) and nobody should ever care about consistency because it doesn't matter. Compiling is the one and only goal for code, there are no other possible factors. Consistency is nothing more than meddling do-gooders trying to enforce there will on innocent bystanders. Thank you for showing me the light.
Don't do this. This is a horrible, terrible idea. If you're using a Version 1 UUID (quite common), then the first part of the UUID is your mac address, and the latter part is a timestamp. With a couple bits in the middle that are incremented sequentially. What part are you going to truncate to? The mac address will give you the same "unique" id every time. The timestamp will give you... Well, a sequentially incrementing timestamp. All versions of the UUID algorithm except for Version 4 are fairly deterministic... They are not meant to be "random", unsequential, or have any other property except being unique. And that's all you should use them for. Version 4 is simply random numbers with two reserved bits to describe the version. That's the only route that is *maybe*, *potentially* useful, but in that case you're just as well going with a simple random number generator and encoding it into hex... You'd accomplish the exact same thing with a couple extra bits of randomness. Use a high quality random number generator (even an external service like [random.org](http://www.random.org/)), and convert it from base 2/10/16 to base 36, which is numbers and letters (case insensitive). Pregenerate and store.
You could use the c preprocessor and #define/#if to remove them at production time. Not claiming it's a good idea, or even a viable one, just what popped into my head.
FYI /r/codeigniter 
For a case that simple something like [sprintf](http://php.net/sprintf) would do the trick.
You sound very upset that your best defense of your viewpoint is "everyone does it." You also seem oblivious to my detailed explanations on how to conform with minimal work to styles like PSR-2 and don't bother to address them. Finally, you act as if I hate style guides on principle or have a vested interest in the failure of PHP-FIG. Far from it; I applaud PSR-0 and 1 and explain in great detail my misgivings with 2. Your only responses so far are backhanded jibes at my code quality, accusations of amateurism, or red herrings about line endings. In short, this has been pretty hilarious but ultimately unproductive. Consistency only matters when there is a cost to incosistency; you have failed to demonstrate one. Finally, my code actually is consistent. I just make the computer do the work instead of my developers.
&gt; Your only responses so far are backhanded jibes at my code quality, accusations of amateurism I've made no insinuation of the sort. &gt; Finally, my code actually is consistent. I just make the computer do the work instead of my developers. So after ALL of that, you use a style guide? Hilarious. Nobody has suggested it NEEDS to be the developer doing it. You can configure your system to PSR-2 and BAM - you're doing the same as everything else.
1) Yes, yes you did. Any reasonable reading of your previous comments would see the sarcasm: "I'm sure your code works perfectly." If you were not being facetious, then I withdraw my contention. 2) I said this repeatedly. Not because I personally feel the need to but because my protests to outside developers typically go unheeded, so rather than listen to them both about a fucking brace I massage their poor fragile brains and give them what they want. My own developers appreciate having the freedom to write code the way that suits them, and everyone's happy. But seriously, no one has ever given me a good reason to go through the trouble in the first place. Don't feel bad; at least you didn't try to convince me by using the argument that unbalanced braces gave the code a bad "vibe." ;)
I absolutely was not being sarcastic or rude when I said that, it was a response to some other guy in another comment of yours being a rude ass and assuming your code was terrible. I am not that guy and I down-voted him. I am sure your code IS brilliant, but you don't care about style guides and I do. Let's put it down to up-bringing, or maybe it is an OCD, but this is how EVERY developer I know works. It's how EVERY project I have ever contributed to works. It's how EVERY office I have worked in or just popped in to consult with works. At some point, everyone who gives a damn about their code uses a style guide, be that before or after, automated or not. At some point, maybe when its finished, maybe when your feature branch is held hostage by the dude running your RFC or PR, maybe as a cron job, but AT SOME POINT a style guide is implemented - which you yourself agree that you do. As for the FIG we just reduced 20+ style guides to 1. THAT is an achievement, so yay for that.
ah, sure. better safe than sorry but how likely is a concurrent request? depends on OP's code i s'pose.
I apologize for the accusation, then. And yes, it is a difference in philosophy, because I have a talented group of coders but we had a near disaster implementing a style guide because some our most talented are OCD about their way of doing things. The solution was to automate after the fact. . .which I implemented.
have you looked at snowflake? https://dev.twitter.com/docs/twitter-ids-json-and-snowflake https://github.com/twitter/snowflake/ Seems to (maybe) fit your needs.
depending on the configuration, you may have to set cron up to run at a certain time. Also, look into [Gearman](http://www.gearman.org). You can program this into the current design so that if you do expand to multiple users you can. Or look into [Postmark](http://postmarkapp.com/)
Bigot.
Your argument is that I have to use an IDE to use code templates/snippets? The fact that I always develop in an idea is irrelevant; I'm pretty sure vim or whatever the elite hacker master race uses this week can also be configured to use code templates/snippets/autocompletion: http://www.vim.org/scripts/script.php?script_id=2540
This is only an idea, but certainly worth double checking - make sure that you're using a font that supports the TM character.
The fellow is generating "millions" of codes. He is either planning something that will slowly run for centuries, or he is going to have requests within the same second from time to time.
UUIDs are not random, there are merely unique. A Version/Variation 1 UUID is generated from the generating computer's MAC address, a timestamp, and two sequential counters. If you simply truncate it, you'll either end up with a mac address (not very unique) or a timestamp (not very random). All other version except for version 4 are based off of things like the host id and object ids... Again, not random. The only variation that's feasibly useful in this situation is 4, which is entirely random with the exception of two bits used to encode the version. In that situation, you're better off just using a random number generator and encoding the result in whatever base you choose... It's a couple extra bits of randomness and avoids generating any bits you don't need. UUIDs, as the name suggests ("universally unique identifier") are only designed to be unique, and only as a whole.
&gt; has a very... particular way of doing things.. yii is definitely for him then. yii is the quirkiest of the php frameworks. weird naming conventions, unusual coding style, a very verbose manual with no examples, too much magic, ... let him try it, he will definitely like it.
It is unlikely, but it is still an occurrence that can happen. Lowering that probability only has positive outcomes from it.
http://www.cyberciti.biz/tips/serve-html-files-as-php-files.html AddType application/x-httpd-php .html You can put that in .htaccess, which for what you want to do would be better as it may not change your entire site depending on where it is located. However some web hosts may block this command or the entire .htaccess file for that matter. Otherwise that's it. That's all you need to do. If you look at your httpd.conf file, or wherever the module is loaded, you should see a similar line defined for .php files. You're doing the exact same for .html files.
Unless the security on your server is just terrible e.g. anonymous FTP allowed, weak SSH authentication, etc you don't need to fret. The user can save the page that the PHP generates - the CSS, HTML, JS, but not the PHP itself. This is why you can store API keys and other things in PHP and not worry too much as long as your server itself is secure.
Netbeans!
I tried doing this, however I am still getting an error. I should state that I am trying to parse an html file which happens to be my 404 page. The requested URL /fsdf was not found on this server I get the following error: Additionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.
I was working for a mechanical contractor at the time when I *really* got into PHP. I was in charge of inventorying over $100k in parts and was handed paper and pencil. I did the inventory on paper but then created a database (at home) and started putting inventoried items in the database. I started playing around with getting the data to spit back useful information and accept user log in and all sorts of stuff. I started with a small task and built it up from there. I did it all on my spare time and created all the bells and whistles. I approached the company and told them what I did on my spare time and that I would like to install it on the server and set it up so the company can track inventory properly (proper checkouts and reorders). The said it would **complicate** things and told me to *keep the ideas coming*. Six years later: I started my own PHP based software development company and have been making progress. I am also being contracted by the mechanical contractor I worked for to design a few systems for them. Lesson learned? Start small, dream big. A roadblock is just an obstacle that hasn't been broken into manageable chunks yet. **TLDR;** Programmed an inventory system on free time-&gt; company didn't want it-&gt; started my own company.
You're more than welcome to existing structures like that: http://php.net/manual/en/spl.datastructures.php Don't create it yourself though.
The advantage with the SPL datastructures is that they are written in C and do not depend on regular PHP arrays so they should be quite a bit faster than implementing one yourself.
What your looking at now is know as job queues. In your use-case you have two jobs. 1. Who to send a message to. 2. Email to send. If you only running a small site, both jobs can be done (should be) done in single cron job. When start scaling up having many cron jobs sending email makes it hard to estimate the traffic at any one time. It is better to place the mail in a queue and have only one once script send them. You can then control how many emails are sent. Job Queues like beanstalkd scale better than pure sql queues, for small to intermediate zend_queue provides a quick solution (sql backed) won't require any new software to install and work better on shared hosts. For under 200 better just to keep it all in a single cron. 
Not been suggest yet silex (symfony2 micro framework) and like codeigniter you can get started in one day and if you product goes nuts a re-write in parent symfony2 would be very quick. 
FYI it's pretty dead...
I'm assuming you mean access the files on a client machine? In that case, no. If anything, you might be able to write a Java program which will perform your file modifications (that you download/run on the client computers of course). It'll almost be like a Java Drive By, except it won't be rogue.
It won't make the script non-executable in web environment; it will append the shebang into the script's output, potentially breaking the output buffering and causing framework level exceptions.
It's not possible because i's a huge security hazard vs computer illiterate users.
Btw your site also doesn't scroll correctly on the iPad. The left and right scroll fine when I'm at the top of the page, but of you scroll down the left side a little, then scrolling the left side scrolls the right. Otherwise it works perfectly.
if I understand this correct, you're confused on how to work with &lt;select&gt;. &lt;select name="authors"&gt; &lt;option value="1"&gt; O'Reilly &lt;/option&gt; &lt;option value="2"&gt; LUCARiO &lt;/option&gt; &lt;/select&gt; when getting the value out from the select, you simply have it in $_POST['authors'] (assuming you POSTed the form, else it would be $_GET). The value is what will be sent, and in between the &lt;option&gt; is what is shown to the user. If you want a script to populate the &lt;select&gt; you can do that as well. &lt;select name="authors"&gt; &lt;?php while($row = mysql_fetch_array($sql)) { ?&gt; &lt;option value="&lt;?php echo $row['id']; ?&gt;"&gt; &lt;?php echo $row['author_name']; ?&gt; &lt;/option&gt; &lt;?php } ?&gt; &lt;/select&gt; Hope formatting pulls through, first time doing code-formatting. Edit: seems it did. To add, the $sql is of course your query to the database.
Holy shit. It's so simple it's ingenious! You are amazing!!!!!! :D
It's not my site, but thanks I'll report that issue.
This is called transactional email in ESP slang. All major ESPs support it. 
&gt;string uniqid ([ string $prefix = "" [, **bool $more_entropy = false** ]] ) You can easily add entropy to uniqid. The odds of a collision is miniscule.
We all have Jeffery Way to thank, don't we? xD btw, that tut is outdated though. So you might have some troubles if you follow it to the dot. But as long as you google the errors, they'll always give you a solution.
I never really got around to using CIBonfire, tried it, didn't like it. I usually just copy and paste it from my code library, for login/auth codes so I guess, for someone new, you might like, but it's hard to get a seasoned user to jump ship.
I really do not understand what you mean by this. What do you need to be accessed and where ?
tldr call_user_func_array($$callback, $args)
...no. This is layered dispatch (with sate/continuations) as well as route mapping. In linear procedural code, perhaps $route = $_GET['r']; $params = filter_input(); $routes['x'][] = function () {}; $routes['x'][] = function () {}; $routes['x'][] = function () {}; $init = $_GET['id']; foreach($routes[$route] as $r) { $init = call_user_func_array($r, $params[] = $init); } echo $init; but of course that's pretty much useless when trying to do anything generic or when trying to write maintainable code. D'you think all routing solutions of all the major frameworks are aptly summarized by $$cb(); ? Perhaps there are problems associated with "variable variable" dynamic dispatch that you havent considered and indeed are unaware that their solns can be complex. 
This, except we don't use the mysql_* functions anymore. Use [PDO](http://php.net/manual/en/book.pdo.php) instead.
It sounds like you're coming from a lower-level language - PHP is a relatively high level language written in C, which abstracts all the "rough edges" (like memory management) away from you. PHP does everything behind the scenes for you with its arrays (which *are* actually hashes). No memory management, no manually keeping track of size, no atomic traversing - all that is done for you and you don't ever have to think about it. That being said, although PHP is technically an OO language, most *everything* you do in it involves working with arrays. Request variables, server settings - pretty much everything is an array. Back in the PHP3 days, we used to joke that it's an Array-Oriented language, actually. Even today, you're probably going to be looping over Iterables that merely implement lists underneath.
No, `mysql_` was replaced with `mysqli_` . Using wrappers is not positive.
Dynamic dispatch is a compiler technique to create/invoke a binding whose right side can only be determined at runtime. It has nothing to do with request dispatching, although the latter is likely to be implemented with dynamic dispatch. In PHP, the most general case of userland dynamic dispatch (as opposed to implicit one as in $foo-&gt;bar()) is $$foo(). That was my point. Also, manually writing boilerplate code for e.g. routing - mapping URLs to entry points - is something that can be automated by code generation. 
Ok, that's an excellent synopsis that is well-thought-out. I agree with your overall point, but I'd suggest that for the average user (like the OP) that PDO will keep them out of trouble, and I'd assume that they're not doing anything intensive enough that the performance will be an issue. For anyone trying to get real work done, mysqli_ is probably the way to go, I completely agree. But I think we can agree that "using wrappers is not positive" is a bit of an overstatement. Anyway, thanks for clarifying your position. Nice to see some well-thought-out reasoning around here for a change.
&gt; PyroCMS is a company, we have remote employees and we can have remote interns if we wish. What you're proposing is called "on the job training" if it's paid, and "open source participation" if it isn't. Though the word has become seriously abused over the last 30 years to skate worker protection law, the traditional difference between an intern and an apprentice is whether they're allowed to do work. Yes, I realize you're using the word the way it is commonly used today. To intern, "to take inside," as in "we let them in the building to watch." . &gt; It was a light hearted suggestion, which I barely expected him to go for, but it's perfectly valid. The only part of it which I think is problematic is putting this on his resume as if it was work experience. You don't put things into "work experience" that are related to the field, but not on the job. I'm a programmer. If I put my hobby libraries, which are programming, under "work experience," I'd be lying. I was not saying he shouldn't pitch in. I was saying he should not misrepresent his background on his resume. It goes under "work experience" if-f he is paid. . &gt; Why do people have to argue about EVERYTHING on Reddit? Tone it down. I saw someone giving advice that I thought was genuinely dangerous. I responded politely and kindly, and explained my position.
You are absolutely correct. I also mentioned that some arguments in favor of Linked Lists having that advantage do not apply to PHP. As a result I'm going to make my life simpler by sticking to arrays.
the entropy added is still not great enough to work across multiple machines.
Much better. Hopefully this will encourage more adopters of PSR-1 even if they don't necessarily agree with PSR-2.
I don’t know about setting yourself problems to solve but when doing new projects you should get into good habits early. * brain storm the problem * from that come up with a paragraph spec of what you are trying to do and ensure everyone is happy with the overall goal * come up with some wireframe designs of the UI (lots tools for this) * plan out the major components of your app with UML * plan out your database models, create and ER diagram * pick a revision control system * use a project management system (something that has some bug tracking features as well) * put all of your tasks into a backlog of work then create milestones with specific delivery dates, put tasks from your backlog into those milestones * code your unit tests first * code your app * and code your unit tests first! some other points: * iterate * never ever duplicate your code * keep your methods simple * each line of code you write should do only 1 thing! Yes 1 thing (it makes code so much easier to read) * hard code in nothing! (use settings and config files) * be careful with the php language things like empty and == can get you in trouble * do not be afraid to refactor, good code is always evolving * have a good separation of concerns your php database access layer, logic layer and presentation layer should all be separate * global variables are evil! * following a style guide * security security security, never trust anything that goes into or comes from your data access layer, check everything, escape everything
Are there any books that you *do* recommend for someone who really does want to be a better php programmer? I hope you don't mind me poking you about this again.
Embed.ly is written in JS, not PHP. I made a similar script that embeds (only) videos according to rules - [Embedder](https://bitbucket.org/wooptoo/embedder/src/tip/embedder.js).
Yep, that's a perfect example of someone doing it their way obstinately. Again, if I'm going to contribute to a OS project, I'll follow their guide rather than be a burden on them, even if I have a philosophical disagreement about the necessity of style guides that venture beyond line endings ;) I wrote our build system to run an interstitial reformat on our code so that people screwing around with their tab or space settings wouldn't reflag whole code sections. When git gets the code it all looks the same.
I switched to Netbeans from Eclipse, never looked back.
I know, I was just using that as an example. Maybe I should send github my build system. . .it would be nice if stuff like that was automatically reformatted before it hit your pull queue.
What is your concern with having the key in the html somewhere? An example of what data you are working with might also help.
As already mentioned, 'id=9000' in URL should not be a security issue, even if some idiot tries to put an arbitrary number just to browse your database, but if you are paranoid, you can always add an extra field, and do a youtube-style id url. I use md5 sum of the primary key and some other semi-unique field if I'm feeling paranoid. Or random string of [a-Z]. 
no, my argument is that code templates - while debugging - are a bad idea because I worry something will go wrong in your template engine. Also I don't use IDEs nor do I assume anyone else should be forced to. That's why your code, while nice, is a pain in the ass - new people who want to learn PHP suddenly have to install and learn an IDE, too? One thing at a time, please.
Honestly I haven't read a "PHP book" in ages so I am a very bad source in critiquing. the majority of the one's I have come across are painfully outdated and some right out inaccurate. My suggestion to learn PHP programming better is try books that have to do with programming in general. Books on object orientation and patterns, like GOF http://en.wikipedia.org/wiki/Design_Patterns or PoEAA http://www.amazon.com/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420 are great for learning Object Oriented principals. But those will help somewhat. What really helped me become a better PHP programmer is to study other languages, and then study their web frameworks, then take what you learned back to PHP. Find out why one aspect is pretty common in X language frameworks, but not PHP frameworks. How do other language frameworks solve the dependency issue, etc. Some languages I suggest learning are actually other ones that are pretty mainstream in web programming: Python for it's typing and how it compares to PHP. Ruby with how mixins relate to PHP traits. and Java is great as there are quite a bit of aspects that PHP stole off Java in it's OO design.
Well the thing is I rarely use untied functions outside of an object/class but if you are going to have a global "debug" function, why add a call to debug_backtrace() to find out which file/line/class/function it was called from so that a) you don't have to grep your whole project to find out where all those print_r's are coming from and b) so you can optionally trace your calling order and arguments.
For something this inter-related, you should start with a real framework instead, which will do all of this low-level work for you. Have a look at CodeIgniter and Symfony2/Doctrine - even if you're not going to use them, they'll give you a better idea of how to handle all of this.
md5 would degrade uniqueness... as would any hashing system. 
Yes.
What do you have so far?
You could use base64 or base32. I want to say I remember an OWASP article that mentioned not giving raw database IDs in forms / urls. It probably doesn't matter so much in forms but I use base32 for urls just so the number is smaller (EX: 9000 -&gt; 8P8).
Makes sense something kind of like how Dropbox works I'd imagine... back to the drawing board.
Something like this should do it: foreach (array_keys($records[0]) as $feature) { echo "&lt;tr&gt;&lt;th&gt;$feature&lt;/th&gt;"; foreach ($records as $product) { echo "&lt;td&gt;{$product[$feature]}&lt;/td&gt;"; } echo "&lt;/tr&gt;" } I'll leave it up to you to figure out how to deal with the product names and column headers.
I agree 100% with mike_sol. If you're afraid to show the key, you have bigger problems...
Maybe we can make a /r/phpelitists .. wouldn't that be fun? :D
I wrote a similar class that supports file uploads, proxy, and user agent selection. I will try to meld the code together :)
This is exactly the same thing going on in [/r/webdev](http://ww.reddit.com/r/webdev) and it's distracting from the cool and interesting stuff. Thanks for bringing this up.
Scalability. As you scale an application out to additional servers storing session data in a database ensures that each server will have access to the same session data. Local file based session storage is going to faster than database, so if you aren't too worried about scaling your application horizontally, then I wouldn't worry too much about it.
That is exactly what I needed to know, and exactly what I'll do. Thanks.
In the form you can reference a session variable which holds the actual key. But as many others have said, you need to make sure your security model is sound. It sounds like your security model is based on hoping that people won't try to guess the keys.
Don't. If the id actually means something, like it's someone's name, then you're doing it wrong. Ensure the record id is just a dumb unique identifier, and nothing more. i.e. 1, 2, 3, 4, and so on. If you need to validate if the user is allowed to alter that record, that is a separate issue. For this you can require a login, and then use sessions to track whilst they are logged in. When the request comes in, you check if they are already logged in, you check if they have permission to alter that record, and then you alter it or fail.
memcache works better than both for that problem. ;) You'll still need a DB backup though.
Unless each page is getting a lot of hits at the same time its generated you should be fine.
It's not currently an issue but I need to plan for the future. What would be the proper way to handle this if many concurrent hits were a possibility?
An exclusive lock is blocking, meaning other processes trying to access that file would wait until the lock was released. It is possible to get the other behavior by setting LOCK_NB as well. Since they're bitfields, the call would look like: file_put_contents('myfile.txt', 'some stuff', LOCK_EX | LOCK_NB); To be clear (because the documentation isn't): Blocking locks cause another request to wait until told otherwise. Non-blocking locks cause another request to return immediately, either with an empty string, error, or exception depending on the command used.
Excellent, this is exactly what I was looking for. Thank's for your help. All of my upvotes to you!
Honestly, you wouldn't want to be using file operations at all, for this exact reason. Check out [APC](http://php.net/manual/en/book.apc.php) or [memcached](http://us.php.net/manual/en/book.memcached.php) if you will have multiple servers. If you absolutely *had* to use file operations w/o using flock(), I'd recommend having the script sleep for a random number of microseconds (between 100 - 500) and then check the file's atime again; if it has changed, then a competing PHP script has already updated the cache, if not, the current script is probably the first one to wake and will have some cycles available to update the cache before a competing script wakes up. But, seriously, use the right tools for the job: APC or memcached.
I'd much rather store a static HTML file then store the data in memory, as I will need my servers' memory in other parts of my application and the app is not nearly at the scale where setting up dedicated memcached servers is economical. These are certainly considerations for if/when I reach that point though. Thank you.
Busted.
You may also be interested in [HTML Purifier](http://htmlpurifier.org/).
I'll upvote it because I think that it reduces substantialy the quality of posts, but someone is upvoting those posts for them to reach homepage; so I don't know if this is the general consensus. 
I dunno, that's a little too ironic.
Why not work the other way around? Just have a cronjob that regenerates the file every X minutes, and just tell apache to only ever serve the cached version if it exists (rewrite rule).
Instead of that whole level of indirection I'd rather recommend reduction to the single dispatch table it actually is. $dt = array( 'user/getName' =&gt; function() { return 'michael'; } , 'user/getAge' =&gt; function() { return 23; } ); echo $dt['user/getName']($params);
&gt; jesse_dev 1 point 3 hours ago &gt; Hi StoneCypher .. I see you're still trolling with your various usernames. Why else would you defend yourself here Because I have a high degree of empathy and a sense of justice. Just because someone defends someone else doesn't mean he's that other person! I know it rarely happens, but there are some people out there willing to stick out their necks for others. (NOte: I realize StoneCypher was pretty gruff and short to temper in the past, but he's really calmed down. And he always meant the best. He just got really prissy when people couldn't catch onto things as quickly as he thought they should. Upon talking with him over a period of months, I think he understood that he was holding people to a higher standard than they could reach, adn since I think he's found a measure of peace. That **STILL** doesn't excuse a small minority from creating dozens of sockpuppets and seriously having it out with him every single post he made. I wish there was more I could have done back then besides sticking up for him.)
The "level of indirection" is there for a couple of reasons, 1. so you dont need to manage your own representation of the routing system and importantly 2. so that it cannot be changed outside of the dispatch/defineRoutes combinations. You'll note that the routes list is *not* globally accessible. If you wanted to break route definitions up across files, then return defineRoutes() in different files and write a mergeRoutes(include f1, include f2, ...) etc. The point is to provide a functional interface that does not require mutation of state, etc. which has many advantages.
&gt; except /r/php becuase here I can still help people out occassionally. ಠ_ಠ &gt; Will all of you noobs PLEASE post elsewhere!? I can't find the good stuff! 
May I ask you how much experience you have with functional programming and in what language?
You're feeding a notorious troll. My suggestion is to just block him entirely.
I liked memcached, but it gets regarded as "out of date" whenever I bring it up. I was happy to see [this](http://engineering.twitter.com/2012/07/caching-with-twemcache.html) yesterday. Twitter gave it a lot of love.
Not sure what you mean. By "database object", are you referring to the connection, a table, or..? Technically, in procedural style mysqli, we are still working with objects. `$m` is a Mysqli object, not a resource. `mysqli_connect()` and `new Mysqli` are the exact same things. `mysqli_connect()` is basically an alias for `new mysqli`. Or are you referring to that "This is still procedural, even though it uses a class" section? With that, I have yet to find any definitive answer if this reuses any open connection using same credentials like the old mysql library says it does, or opens a brand new connection. If it reuses a connection, then it becomes less important. If it opens a brand new connection, then we have problems. If someone knows this for certain, do tell.
Why don't we take all the noobs and push them into another subreddit.
Because there are a very large number of these pages and only some will get a lot of page views. I don't want to waste server resources caching pages every ten minutes that will not be needed.
Which example are you referring to? There are 4 code snippits in there... If you're referring to: $mapper = new PersonDataMapper(new MySQLi(...)); $people = $mapper-&gt;getAll(); In practice, you wouldn't. That would be managed by another part of the application. But you would inject that dependency into any object that needs a database connection. So since I wanted to keep the examples reasonably brief and on point, I chose to instantiate it when passing it to the constructor...
And this is the sort of response I expect from assholes.
I think someone was on the right track with pushing questions to r/phphelp, and keeping this subreddit for interesting articles and discussions. A few problems I can see: 1. If questions are supposed to go to r/phphelp, we need a clearly displayed rule about this and heavy mod enforcement. 2. r/phphelp has about, oh, 1/20 the subscribers of r/php. People will still ask their questions here because there are fewer people to answer them over there so it takes longer and the quality of the responses may be lower. 3. There is no penalty for, or even a polite suggestion in the rules against asking painfully obvious and google-able questions. Even if this is the place for questions, if copying and pasting your submission title into Google answers your question, it should not have been posted. 4. There is no penalty for, or even a polite suggestion in the rules against bringing up the same topic of discussion over and over and over. (If I see someone ask some variation of "Which framework should I use?", "Where can I find tutorials for &lt;framework&gt;?", or "What IDE does /r/PHP use?" one more time, I might just put a bullet in my face.) I think the word we should be able to use to describe every post on r/PHP is at least *interesting*. If it's a sufficiently complex and unusual question, or opens itself to multiple answers and spawns a discussion... Great. If it's a simple question with a simple answer, it should be relegated to r/phphelp.
Perhaps we could turn this rather... vitriolic discussion into something positive and progressive? How would you suggest that us mods address the quality of posts in /r/PHP? Do you feel that it would be of value to employ stricter content guidelines? Should we be a bit more trigger-happy with the "remove" button, when it comes to help posts? We are here to help, but we also have to be careful not to cater to the outraged minority, so discussion is very welcome. On another note, I'll be watching this thread closely. I must ask that those commenting here respect our civility guidelines. Please do not resort to personal attacks upon *anyone*, including general attacks laid against new programmers. Uncivil comments will be removed, and egregiously offensive users risk further action.
 SELECT `firstName` , `lastName` , `email` FROM `users` WHERE ( DATEDIFF( NOW(), `expiration_date` ) &lt; 8 ) `expiration_date` and `NOW()` may need to be reversed to calculate the different correctly but that's the gist. I would also track when you send an email and NOT send an email once a day after it gets under 8 days, perhaps even only sending the email once.
Thanks for asking! &gt; How would you suggest that us mods address the quality of posts in /r/PHP? The guidelines need revisisted. There isn't much going on there that actually covers what this subreddit _should_ be. One course of action could be: 1. Solicit ideas from the community on what content they prefer in /r/PHP. 2. Draft a new set of guidelines. 3. Solicit feedback on guidelines. 4. Repeat 2-3 until reasonable resolution. 5. Update guidelines, FAQ, and sidebar links to direct mis-posters to the correct subreddit. 6. Remove content that is outside of the guidelines. &gt; Do you feel that it would be of value to employ stricter content guidelines? Yes. &gt; Should we be a bit more trigger-happy with the "remove" button, when it comes to help posts? Yes.
Can you suggest some guidelines that you think should be in place? Keep in mind that the day we banned "meme posts" in this subreddit, was the day we received a huge wave of attacks from a significant number of users. Reddit's userbase is starkly anti-content-moderation. There are only a few exceptions to that (see /r/askscience), so it's always a risk for mods to try to enforce new guidelines. I'm not saying "no", but I'd sure appreciate some more input on the matter.
Do not use the javascript class...Completely useless. Just add your js to your views.
So my thought process on this is simple. If your very specific question can be answered with a quick google search, I think you're wasting everyone's time including yourself. However when people come here and ask what's the best way to do something because there's **many** ways to do something, I think that's where this kind of community shines. I enjoy PHP because of its community, and that a topic can get wildly varied opinions that are equally good. If I wanted to be uppity I'd be a rails developer or something. /r/php is a vague term. Just as easily as one can create /r/phphelp, one can create /r/phptricks or /r/phpnews. Who's to say what this Reddit is for exactly? I think we just need to work harder at building the FAQ with interesting things and use our vote/hide buttons better. 
You probably wouldn't instantiate it, but you _should_ pass it in. It's an example of Dependency Injection.
Thanks for this link. I was completely unaware. Like I said, I get over-ruled whenever memcached comes up as a solution, so I'm a little behind the memcache news train.
seems /r/truephp would be more appropriate, like /r/truegamedev and /r/trueatheism
PHP has the best ordered dictionary in the world. I'm glad that the SPL data structures are available now for serious work, but it's really cool that noobs have to learn only one data structure, and it has performance good enough to keep huge websites running and functions to do everything with it. 
&gt; Reddit's userbase is starkly anti-content-moderation. Well, at least somewhat. There's [a discussion concerning images and moderation in general](http://www.reddit.com/r/sysadmin/comments/w6t2s/more_discussion_on_the_upcoming_ban_on_images/) going on right now in /r/sysadmin, and it seems to be that there are two camps of people who comment on that sort of thing: 1. Let the users moderate themselves. If people are upvoting it then they obviously want it there. 2. Fuck that. There are a lot of people who vote and don't comment (or even click through!), and we don't care about them because they're ruining this place for serious discussion. It's difficult to tell how much people vote/read comments/write comments/etc. because we just don't have analytics on any of that, and what Reddit *does* provide is fudged. When it comes to Reddit, I'm pretty firmly in the second camp. When I was a moderator for a relatively high-traffic IRC channel, we let people do almost anything, as long as they didn't get at each other's throats too much. But as content gets more structured, I tend to believe more moderation is useful - that is, IRC should be almost-anything-goes, while newspapers should be pretty heavily edited to provide a consistent high quality, thoughtful content, etc. Reddit's somewhere in the middle. This of course is just my opinion. I have no idea what other people want, or which groups of people you want to favor more, or if the groups I outlined are at all even accurate representations of reality. I also don't tend to contribute too awfully much to /r/php, despite using the language on a daily basis, because... well, I don't know. But what I'm saying is that if I'm gone, you won't notice, so perhaps I'm one of the people it'd be better to piss off. Thanks for doing this, btw. Moderation's a thankless job.
Ugh, I hate it when people make points I agree with, but in a way that I totally disagree with. Upvote, downvote, upvote, downvote...
I would say the massive amount of built-in functions that negate the need to look for (and open yourself up to the risks of) 3rd party libraries. I know frameworks for PHP are hugely popular but I've never seen the need, PHP is not an ordinary programming language where you are given the bare bones and left to construct everything from them, it is in effect a framework. I've heard arguments for and against the "PHP *is* a framework" mindset and I think that it is. It's designed to eliminate the need for frameworks that handle HTTP, database connections, etc, because it is the framework, and it is the language. I've heard so many criticisms of PHP having too much built-in, I mean look at all these [array functions](http://www.php.net/manual/en/ref.array.php)!!! Pfft, it's not a big deal to me. You could write most of those using simple loops and language constructs, sure, but it's kind of nice that they are there, and they are optimized and compiled parts of the language, and you never have to reimplement them. I also appreciate that PHP is fast and flexible. A lot of people scoff at this idea, but look - PHP powers parts of, or the whole of, some of the worlds biggest websites. It is not a handicapped language, it is not slow. There are a lot of coders who write slow code without thinking about the cpu usage behind the scenes, but PHP itself is never the issue, except in the case of actual bugs in the language. It is just a programming language - you use it to tell a computer what to do, and if you tell it to do a lot of work, it will do it.
Could you provide reference to that claim (converting and storing each possible type)? That would mean if an object has a __toString method, it's called on each modification to the object - which is highly impossible..
Native access to HTTP variables as well as server settings. I feel these are the "variables" that make PHP the language of the web.
Yeah, the claim is completely false. PHP most certainly does not retain separate copies of every variable.
There is no language where I can debug as fast as PHP: change code =&gt; refresh browser =&gt; instant result. I'm doing ASP.NET right now and the debug cycle is slow enough to change the entire way I work.
I question the need for self-posts and question-posts at all in this subreddit. I think some people would rather this subreddit be about posting interesting articles, projects, etc. Reddit is all about posting links but this subreddit is just filled with help posts. 
Get good reference book , sitepoint has some great beginner books and learn version control system (git and github are all the rage now). If your building a website I'll bet that you will be spending more time on html\css than php get some books on that. As with any project, start small your lack of experience will make it difficult for you to identify and breakdown your project into steps. Make a list, start where your strong later iterate back over it and split it into smaller steps and repeat. 
I would set up CodeIgniter! if you don't already Take out a piece of paper and draw out the objects you'll need (if you're going OOP) and how they'll interact
That it is so easy to complain about it and to know that it will stick to web stuff for a long time **and** only web stuff.
I'd have no issue even if they implemented even more helper methods for those types of things. Most of the time their optimised C code is going to be much faster than anything I try and write at the PHP level to do the same thing.
I use GD fairly often. What portability issues are there with it? You mean just the extension not being enabled?
If You want to earn something from project You should first check if this project has business potential. Use Git and Wiki (on bitbucket or github). First plan structure for project. Create database schema before starting programming (I use MySQL Workbench). Don't write spagheti code and separate PHP from HTML. Maybe try to setup http://jenkins-php.org/ (this will not be easy). This will help write better code. Create comments inside Your code. Use PHPDOC syntax. Use Netbeans as IDE (code completion and other good stuff) and Sublime Text 2 as lightweight editor (learn shortcuts for both apps). Write consistent code. Use newest features of PHP (namespaces) and work with newest PHP version (PHP5.4). Read PHP PSR standards. I hope it will help You :) 
As somebody who doesn't subscribe to /r/wordpress is that not to be expected?
I find the sidebar on /r/php a little bit hidden, it's hard to remember it's there because it's so small. I feel that a lot of people won't have seen the content that's in it. I personally really like the /r/python sidebar where it contains a load of information (including guiding people to the appropriate places). I know that if I'm looking for some good links to information sources I can just quickly click through to and I've always managed to solve my problems before ever needing to post. Maybe a rework of the /r/php sidebar?
Having to explicitly import a global symbol into the local scope. When I think about it, it's surprising that this behavior is not universal in modern languages. If a function is going to have side-effects, there should be some syntax that makes you notice them. 
Thanks
thank you
But how DO you display each row of a mysql table via PHP?!!
the favourite thing I can never understand oop. I just cannot.
Use Memcached or Redis to store it, not files. If you see even moderate traffic file based caching will fall over.
Many of the larger reddits have a line at the top pointing out the rules or some other important thing. E.g. here: http://www.reddit.com/r/IAmA/ I think the same should be done for r/PHP: Add a (yellow) messge to the top, directing to r/phphelp. Apart from that. If you need help enforcing stricter content guidelines, I would have no problem helping out as a mod.
Blogspam should be removed as well IMO. I see (and notice) more of that than anything else because its a pet peeve of mine. This subreddit tends to have more posts by people with 0 comment karma than any other that I visit. Of course, I exercise what the system provides and downvote / move on. I don't rage and make a post about it.
I find Javascript to be even faster, because in addition to the change code =&gt; refresh browser =&gt; instant result, you also have the incredibly useful and easy-to-use (in Chrome and Firefox, at least) web console.
/r/sublimetext for anyone wondering.
How easy it is to mix it with HTML. Also, how easy it was to learn given that I already knew C.
If you want to do pdf with html the absolute best pixel-perfect no hassle solution is http://code.google.com/p/wkhtmltopdf/ ! Server side rendering of your HTML with a webkit engine and exporting to pdf. 
What do you use it for? I'd like to get more familiar with it
Unless you advertise /r/phphelp a lot more, removing posts here is just likely to cause new and potential users to avoid this subreddit thinking people here are unwilling to help a/o stuck up. Must remember to act as if every visitor is potentially visiting for the first time. What kind of environment do you wish to project to that first-time user?
A pretty good list. None of it is dramatic, or will totally redefine PHP, instead it's just some good things that will make life a little easier. It feels like the PHP developers are concentrating on just cleaning up the language over the last few years (which is great). Now if they can just get rid of all those bloody dollar symbols ...
Slow and fast are relative, FORTRAN tends to be faster than C for heavy computations, but you won't hear anyone claiming C is slow. HipHop was not created to fix a speed issue, it was created to fix an energy use issue. C++ is much more energy efficient than PHP, but Facebook did not have an issue with performance. You can argue they go hand in hand (and they do), but you cannot argue that the impetus behind it was performance; it wasn't. The impetus behind it was to decrease server costs. If I were to put together a list of the 'top 5 myths about PHP', this would be the top one.
You can [cut out that middle step](http://livereload.com/) if you want.
Keep trying, it's worth it.
It's syntactical sugar, which historically PHP has been completely lacking in. Since almost everything in PHP is array-based logic anyway, having extra sugar for arrays is a huge benefit to productivity. This is actually the current Python way of doing list comprehensions. But the *real* pedantic difference here is that array_map only works on arrays, not Iterables - the new syntax can handle just about anything.
My absolute favorite thing about PHP is that it's relatively mature for a web-language. Every time I sit down to do anything in Python, there is, at best, an infrequently-updated beta package with questionable support that will probably break all of my code when they update it in a month. In PHP, there's usually a 3-year old (but possibly abandoned) package that's stable and does exactly what I want. It might not be written especially well, but at least I know it *works*.
So you have to reference two of the fastest general computational languages in existence to try to rebut my point? I think that mostly demonstrates the credulity of your argument. When switching from one language to another, you get a 40% performance increase (PHP to HipHop compiled), I think that says something about how performant the two languages are. As I said, a lot of the time the performance of particular parts of code is not really of that much importance, but in facebook's case, as you mention, it always is. Scale is what makes facebook averse to the speed of PHP; when they get that big, slowness costs you money because it costs you efficiency and energy. That's why they've had to move away from PHP in many areas. 
http://www.html2pdf.fr/en I know it doesn't support nested tables, for one. I also don't think it converts any css.
I really like the getter/setter proposal. Only filter the data when needed, simple as that.
Dynamic arrays/variables. I have to work with classic ASP a lot for work and I miss those more than anything else.
I am in favor of very strict moderation and pushing all the content OP described to phphelp.
&gt; Only one I'm not a fan of is parameter skipping, seems it would be more appropriate to have named parameters instead if they want to go that route. I'm with you. Nowadays when a function gets to about 5 parameters, I just request an array of arguments to circumvent this problem. Also, in the few cases that I have to call a function with many parameters, I have to go to where said function is declared and start checking the default values. All this would do is I'd be *counting* those parameters instead of checking their values. Not much of a gain...
I hate being grammar/spelling nazi, but compitant, really?
Isn't that what you just did? ;)
Yikes. Fixed.
good idea, this would have made me feel really stupid lol but the font definitely supports it; it's in the character map and i've somehow managed to make it come up before within gd using some freakish concoction of html_entity_decode() and str_replace()
Could you explain how such a solution would look? (Sample code preferred)...
I'd love to. Let me get back to you after close of business today. ;)
What's wrong with the dollars?
I don't know PHP well, but as list comprehensions are a very functional programming sort of thing, and as a Haskell sort of dude I feel obliged to chime in. In Haskell, for simple things, it's usually best to just use a `map` or `filter` or whatever (when dealing with lists), but as it gets more complicated, list comprehensions become useful. For example the above example would just be `map firstName users` which is much nicer than the equivalent list comprehension `[ firstName user | user &lt;- users ]`, but when you have multiple lists (or arrays or whatever) the equivalent desugared code becomes increasingly unclear. For example: [ (x, y, x + y) | x &lt;- [1..640], y &lt;- [1..480] ] is quite nice compared to: concatMap (\x -&gt; map (\y -&gt; (x, y, x + y)) [1..480]) [1..640] 
The file example is good, this is useful for reading lines from the end of a file (e.g. a log file) that is many 100s of meg long. Point at the end of the file, zoom along backwards yielding lines as you go.
If you're writing 1000 variables per day, you have far bigger problems with how you're writing code than pressing &lt;shift&gt;+4...
I'm somewhat against the proposed format for it, though. I think that instead of introducing an odd, never-before-seen format for specifying which is the getter and which is the setter (placing some sort of constant or something inside of what looks to be a method call?), it should just use an attribute. I'd like it to look like this: public get $hours { ... } public set $hours { ... }
Personally I don't think /r/PHP gets nearly enough traffic to worry about splitting off help posts (12 posts a day). That said, I like the way /r/android does things. All questions about android go to /r/androidquestions. I'll note that the only reason this works is that a) the mods made it clear that questions should go there and b) a large portion of /r/android subscribers also subscribed to /r/androidquestions to help answer those questions. 
My main reasons are: * having to move my fingers to the top row every time I want a variable is a hassle, especially when I need to do this 1,000s of times. * missing them out is a common trap you can fall into when working across multiple languages * the single dollar doesn't really do anything, other than say "this is a variable", so it's just line noise * I already know it's a variable, because I have syntax highlighting In fairness there are issues with removing it, around potential classes with constants and functions. For constants PHP could just continue to use all upper case by convention, and continue to throw an error if someone redefines it. I doubt anyone has the variable '$E_ALL', so this is really a non-issue in practice. For function names there is an issue, because you need to distinguish between '$f()' and 'f()'. However you can just use aliasing rules to do that, and this works fine in Ruby, JavaScript, and plenty of others. Besides if you chose to call your variables 'str_replace' or 'mysql_real_escape_string', then you deserve some pain. Moving more of the standard API to namespaces, and offering array and string functions through methods, would also make this a non-issue in practice for function names.
I would agree with this, advertising or a mentioning the existence of /r/phphelp would be a good start; people won't use it if they don't know it exists (I didn't until this thread). As a designer and long time wannabe programmer who's about to dive into serious php writing on my bootstrapped startup, what you said about treating each poster like as though it's their first visit to /r/php and keeping in mind the kind of community you like to impress upon them, is a great perspective. As already said, newcomers and new programmers will come with questions and if answering them directly isn't what the community wants (I also would prefer to see here, even as a novice programmer, the more interesting and esoteric news and discussion about php), then kindly directing posters over to /r/phphelp is a fine way to handle it. Over time, it would become known that you ask novice questions there instead. If mods can move questions to that subreddit from here leaving a forwarding link, even better. Maintaining a positive, helpful environment toward both pros and newcomers is the way to grow the community and encourage participants to help each other. New programmers will become seasonsed and I assume it would be wanted for them to continue the trend of fostering newcomers and become mentors themselves. *edited to fix bad grammar caused by tiny text edit window on iPhone reddit app.
Considering the amount of spam and redundant information on the Internet in general, this can't necessarily be a bad practice. Culling low quality posts from the forum should be done with a conservative hand, to avoid losing potentially interesting or engaging discussion topics.
The worst part of these inane questions is the people asking them want to learn a skill that is fundamentally about *solving problems*, yet turning to Google for answers to such beginner or biased questions never occurs to the posters. I'm not a programmer yet, but a simple google search will turn up more opinions, lists and for/against discussions than I could consume in a lifetime.
youre in the top 10% of php5!!!
Php is for everyone
&gt; For function names there is an issue, because you need to distinguish between '$f()' and 'f()'. However you can just use aliasing rules to do that, and this works fine in Ruby, JavaScript, and plenty of others. Besides if you chose to call your variables 'str_replace' or 'mysql_real_escape_string', then you deserve some pain. It's not done with aliasing rules in other languages. It's done because functions **are** variables. Where in PHP they are not...
That's a good one but I'm sure a solution could be found.
&gt;Windows XP and 2003 support dropped Thanks for wasting my time then. :-/
It's not disinegenuous when mjcov's comments are: &gt; It is not a handicapped language, it is not slow. and &gt; There are a lot of coders who write slow code without thinking about the cpu usage behind the scenes, but PHP itself is never the issue Those just aren't true. Even compared to other dynamic languages, it's not the best of the bunch by any means.
I replied to a comment, I didn't create my own topic to rant about it :P
this is refreshing. so much hater on php recently.
I'm curious if this means that `get` and `set` will now become reserved words, and therefore unusable as function names.
Seconded, although I'm extra biased as perl was my first language I really got my feet wet with. PHP or perl without the scalars would feel pretty naked and would definitely take me some time to get my eye adjusted when scanning through code blocks.
Speaking of, the fact that there isn't a finally block for exception handling is still mind-boggling to me.
That's not what it says on the page you linked.
You're correct, there is still *extended support*. :/ For whatever that is worth.
It's almost like my point was that two languages can both be classified as 'fast', and yet one language still be faster than the other. Or if you wanted to flip that around, if someone wanted to get crazy *and wave their hands about CRAZILY*, they might claim my point is that C++ being faster than PHP doesn't make PHP slow. It should also be noted that Facebook never had any problems scaling PHP. PHP's performance was not the issue, the energy costs was the issue.
A better approach would have been to apologize to timdev since you obviously misunderstood him. Continuing to push that the mutation of global variables aren't side effects just makes you look silly. I suppose the next time I tell someone I'm using a Symbol in reference to Ruby, I should expect you to start telling me I'm not using a Symbol because it isn't a LISP Symbol. IOW, stop being so smart, you'll find yourself understanding the intention of other folks better.
&gt; PHP's performance was not the issue, the energy costs was the issue. The problem with that statement is that it was PHP's performance that led to the energy costs. If energy costs were the issue, then PHP's performance become the issue. That's how cause and effect work. If they solved the energy costs without making changes to the way they ran their PHP, then yes you could argue that there was no causal link; but that's not what happened at all.
&gt; Continuing to push that the mutation of global variables aren't side effects just makes you look silly. What? Of course they are!
It gets my money like a good little whore
Sorry, I thought I'd start out with a joke. I wanted to have a discussion about some of the new php 5.3 features such as anonymous functions. I'd never post a meme just to post a meme.
i thought it would have been a place for discussion about wordpress, news, etc, and not just a "help i don't know what i'm doing and i need this website done tonight!" place
Wrong. You get a beautiful copy-pastable full text indexable pdf.
I'm not exactly sure what that syntax means (and that's why I don't like it much), but list comprehensions get you in that direction: $result = [foreach ($homes as $home) if ($home-&gt;location == "St. Louis" &amp;&amp; $home-&gt;size &gt; 50 &amp;&amp; $home-&gt;price &lt; $salePriece) yield $home];
PHP really has no "PHP way", everything's been mish-moshed together; so actually, in doing it this way, it really is the PHP way :)
Why isn't it in the sidebar?-
I'm happy to hear about parameter skipping. This guy is right, functions "shouldn't have 12 optional parameters", but at the moment, many *do*, and this is a good way to work around that issue without permanently deprecating many functions. It's a great short-term proposal, at least.
Named parameters might actually be a great alternative. I assume you mean something like function('argument' =&gt; 'value', 'argument' =&gt; 'value')?
Yes, and I don't see any problem with just reusing array syntax. It makes a lot of sense.
You're right, it's very consistent and it's a better alternative to the use of default. Might be worth pitching in one of the development mailing lists while things are still being proposed.
Could you show us the body of new_question() ?
I know i could merge these functions by taking in the tabel_name, and i properly will soon. :) right now i just want it working, before optimizing it all.
Oh, thank you - then I need to take a look at this again.
I use assembla for source repos, project management, time tracking, wiki, bug tracking, but there are others as well like github. You can do project management using google spreadsheets if you want. Also check out http://phpmentoring.org/
&gt; having to move my fingers to the top row every time I want a variable is a hassle, especially when I need to do this 1,000s of times. Valid complaint. &gt; missing them out is a common trap you can fall into when working across multiple languages Shouldn't your syntax highlighter catch this? &gt; the single dollar doesn't really do anything, other than say "this is a variable", so it's just line noise &gt; I already know it's a variable, because I have syntax highlighting So how would you handle "$string interpolation" without dollar signs?
That's no excuse for making it a standard feature of the language. If anything, it gives those shitty coders even more reason to write bad code that you have to maintain.
See my comment [here](http://www.reddit.com/r/PHP/comments/weaic/will_all_of_you_noobs_please_post_elsewhere_i/c5d5umz). If you or anyone would like to help out, I'd be glad to grant mod privileges.
I agree mostly, but Visual Studio's debugger is pretty slick. Deploying to the server and everything being down for several minutes while it compiles everything, _that_ I hate with a passion.
&gt;because it would infinite loop I'm confused. Does the example you provided _not_ loop infinitely? Why not?
The question query goes through just fine, and if i do an "echo mysql_insert_id(); i get the correct id, same if i use the $question_id I will considder swapping over to mysqli, seems its not to much work, and might as well go for safety. Heading to bed now, but will return in the morning and see if i can solve it.
Needs some more details on it though. Are the keys all turned into integers, i.e. not preserved? What happens to rows that don't have the named key - if they are set to NULL (as the example would do) then what is the use if the original keys have been lost?
One option we considered was having some `PasswordHasher` interface and implementing different hashing methods via classes like `PasswordHasher\Bcrypt` implementing the interface. The main problem with this is that the password verification function has to work on *all* possible password hashes. So it can't be really put into a class specific to a hashing algo.
However, people have continued posting pretty continuously since 2010 voicing their displeasure and requesting it be added. Everyone feel free to hop on over and add some more complaints to the pool.
I got a smaller vehicle because of the gas mileage. ha! The larger vehicle had too much power for you, eh?!? No... I didn't want to pay for the fuel. Wrong! There is a link between vehicles that use too much gas, and vehicles that have stronger engines. Therefore, YOU REALLY DID IT BECAUSE IT WAS TOO POWERFUL. That may be true, but the power of the vehicle has never gotten in my way. If not for the fact that I'm now driving all over the country, I would be perfectly happy with my old vehicle. It really was about the gas mileage, and not the power. Causal link! Causal link! ----------------------- 
Oh ivosaurus, you're too smart for your britches, go find something snooty to wear.
&gt;In your opinion. In the opinion of the community guidelines which we set to uphold quality content for this subreddit. The fact that this post has now been deleted from the feed is a testament that this kind of content is not welcome here. &gt;the meme isn't even important to what I posted. [Then why the fuck did you post it in the first place!?](http://static.fjcdn.com/comments/MY+_94d9eb6eea3608124a1e9fe6b0e64f0e.jpg) 
IMO, keyword arguments are a much more elegant way to address that problem.
It only loops infinitely if you let it. Take this example: foreach($evenNumbers as $num) {} Will loop forever, but this: foreach($evenNumbers as $num) { If ($num &gt; 5000) break; } Will only run 2500 times. 
If keyword params are added the syntax could match the function definition syntax. e.g. create_query($where, $order_by, $join_type='', $execute = false, $report_errors = true) could be called as: create_query('disabled=1', $join_type='LEFT', $report_errors=true);
There is also { } in strings as well. It's a shame they didn't think to pick a character easier to type e.g. #
...I was actually referring to how /r/webdev was filled with posts on Sublime2, but that's ok.
I assume it will be a basic numbered array, like what you get from array_keys etc.
Frozenfire, I want to thank you or whomever deleted all of the flame posts against me. One of the major problems with Reddit in general and this subreddit in particular is the use of sockpuppets and other name-calling, utterly absurd (and many times *vicious*) ad hominems on otherwise caring people. Off the top of my head, I know three PHP experts who frequented this forum who have been grossly disenfranchised and driven away because one or more individuals created numerous sockpuppet accounts and went around harassing every post they made. Like [Lollercoaster](http://www.reddit.com/user/Lollercoasters) and DumbassHopeseekr created to harass me. There have even been entire topics posted meant to disparage people on this subreddit, such as: ["Hack my code (hopeseekr)"](http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/) After you guys banned those 3 sockpuppet accounts and deleted both the posts that did ad hominems against me and my defenses as well, this thread stopped being so ... vitriolic. I wish you would do the same when people unabashedly lynch other people in this subreddit and that policies could be enacted on Reddit as a whole. Particularly STRICT NO-TOLERANCE enforcement of outright libel (saying other users are murderers, kidnappers, etc.) and posting commenters' names and adddresses and employers' contact info (and even their loved ones) on threads. Even in this post about PHP, someone posted the ROT-13 encoded name of a friend of mine, in an attempt to do just that... Why? I don't know. But I thank you for stopping it. * NOTE: There's a burgeoning amount of evidence that people who create sockpuppets and/or go around stalking and attacking specific individuals as indicated above differ in very disturbing ways from the usual "troll" who attacks everyone. The majority of the specific-person-targeting stalking trolls exhibit the classic markers of psychosis, and there are many incidents of them actually going to the addresses they post online (when they happen to live close by) and taking it into the real world, sometimes with devastating results. This same subset of neredowells frequently target people with low self-esteem, sometimes driving them over the edge (I've had numerous trolls egg for my own suicide over the years and post some of the meanest, hurtful thoughts I've ever had in my life). Such can and has caused great psychological stress and increasingly both law enforcement and the judicial system are noticing and taking actions against both the perpetrators and their facilitators and enablers (people who could take action but don't).
This subreddit is divided between into five categories of people: 1. People just starting PHP, who dont even know the basics (functions, variables, etc.), who typically ask inane questions that waste the other groups' time just by reading them on the front page. 2. People who have been doing PHP a few years, know they can get better and are actively looking for mentorship, guidance, etc. 3. Professionals who have been at it for years (even 10-13 yrs) but do not a) use IDEs, b) have an anti-debugging mindset ("Vim to the end, man!" [and I **love** vim as an editor; I just require an IDE for professional coding) or dont' know how, c) probably do not know what Design Patterns are or actively use them, and d) have problems thinking in OOP paradigms. I'm not sure an appropriate name to call them. 4. Professionals who have been at it at least 3 years who a) use IDEs, b) couldn't dream of debugging a complex web app without an IDE's debugging support, autocompletion, and syntax suggestions, c) know what design patterns are and remember hte dark days when they didn't, and d) think in OOP paradigms. 5. A small fringe of troublemakers that are usually large up of subsets of groups #2 and #3, who claim people in #4 are elitists. This subreddit needs to figure out if it wants Group #1 to dominate the posts like they are, or whether we want to go back to having mostly articles for groups #2 and #4. We also have to somehow reach Group #2 and mentor them so they grow into Group #4 and somehow combat the hostility Group #3 has towards 4ers and help those that want to grow, grow. 
Moronic Monday is a terrific idea for here!!
That should be one of the selling points.
After being so ruthlessly attacked as an "elitist" and "asshole" when I posted this, I'm so happy others are voicing my concerns and are not being similarly attacked.
here http://drupal.org/coding-standards/ http://framework.zend.com/manual/en/coding-standard.html or this http://www.extremeprogramming.org/rules/testfirst.html http://www.agiledata.org/essays/tdd.html
As a wordpress plugin developer I just took a look there. Goodness me. Even though the Wordpress Codex is somewhat bad in places, most of those posts can be answered by searching it.
Yes.
Where is your compatability library online? Sounds very useful.
Stone, I **really** would like to see some evidence that PDO degrades performance vs something else on complex JOINs, as those are the bulk of my SQL these days. would you mind privmsging me when you post this?
This. Well put. Keep up the good fight. 
/r/phphelp Oops, sorry, I guess that was a tad ambiguous. 
When I learned to program, it was with PHP too. And since PHP didn't have any OOP support that was worth writing home about, I ignored it. Consequently, it wasn't until a few years ago that I learned how much I had missed by ignoring OOP.
Great post, you are younger than me by a touch but have a few years experience on me, and probably helped me out back in your IRC days... Thanks for that.. I completely agree about the new devs not able to google simple solutions which tends to turn me into an asshole poster on Reddit. Completely agree on looking at older code I've written... even older than a month ago.
I just started teaching myself PHP a week ago. This is awesome and inspiring.
Here's an example of GD at work: http://repo.phpexperts.pro/graph_sort/
&gt; I also wish the PHP community would focus more on aesthetics and improving code to make it more maintainable, instead of just hacking it however works. It's nice that newbies feel immediately successful by cutting and pasting, but that can lead to massive security issues that plague us all. Ahhh! Yes, you're talking about the distinction between **Hackers** and **Devs** vs. **Engineers** and **Professionals**. See here: http://www.reddit.com/r/PHP/comments/whhve/which_audiences_does_the_rphp_community_want_to/
The biggest problem is how to get the beginners/lazy noobs to actually post elsewhere. It's not unreasonable that they come to /r/php and submit a question, since it is a PHP focused subreddit and those reading it will certainly be able to help. Perhaps instead it would be more sensible to create a more professional PHP-focused subreddit? I know that it would be challenging to get off of the ground however. Personally, I very rarely post to Reddit at all - I consume instead. I fit into the category of 'Engineers/Professionals' and have been using /r/PHP for about a year. I was hoping to find a decent community focus, but while there are some very interesting links posted the discussion does seem a bit limited, which is why I don't offer input very often.
The nice thing about it is that it works with everything. You could use all of `['firstName']`, `-&gt;firstName` and `-&gt;getFirstName()` or whatever other logic to get the name ;) It's a more generic construct (and also can have nested iterations and filtering and stuff).
Yes, I completely agree with the OP in that something needs to be done, I'm just not sure if banning beginners from asking for help will actually be practical. It might just confuse and alienate a lot of people.
Sounds like magic quotes are on. I have always suggested turning them off. But now you *really* should. As magic quotes will be completely removed in PHP 5.4: http://php.net/manual/en/security.magicquotes.php If you can't turn them off because you don't have enough access on the server, then at least write your code to detect whether they're switched on or off and behave appropriately. Also make sure that any data going into the database is escaped first. And you should really use PDO or something like that which will do it automatically rather that manually executing mysql_real_escape_string() over everything separately.
Hole heartily? I believe you meant "wholeheartedly"
I learned php from a book too, though it was around 2005. I think I got php in Easy Steps. It taught me how to do a guestbook and blog. And from there I managed to put together a photoblog in one weekend (because I left for Germany that Monday for two weeks).
I love 3 things in php. There are not php-only; 1. Backquotes foreach(explode("\n", trim(\`find files -type f -iname '*.txt'\`)) as $f) echo '- '.$f."\n"; # - files/foo/one.txt # - files/foo/three.txt # - files/foo/two.txt # - files/one.txt # - files/three.txt # - files/two.txt \`rm -rf img/tn; mkdir img/tn\`; \`cp img/*.{jpg,png} img/tn\`; \`mogrify -resize 100x100 img/tn/*\`; 2 &amp; 3. Anonymous functions and eval http://www.reddit.com/r/PHP/comments/vwjk0/whats_your_most_useful_php_snippet_or_function/c58pc2t 
I will not begrudge someone who is trying to shape a community that they actively participate in, but I am particularly offended that you equate VIM usage with something less than professional level or otherwise as a lesser attribute. I use VIM exclusively. I write code professionally in PHP and Java, and work on toy projects in Scala, Ruby, and whatever I happen to be curious about in any given week. I have undergraduate degrees in Computer Science, Math, Business, and English, and I'm always trying to learn something new (but on my own, I rarely try to coerce others into teaching me). I debug with the tools necessary to understand the problem and create a solution. This includes everything from var_dump and Xdebug, to attaching gdb to the apache process and adding breakpoints to inspect what is actually happening in the underlying process. Yet, by your generalization, I have plateaued as a developer and need your special guidance to elevate myself in your prestigious association. No thanks. But I agree, mostly, that having a flood of "How do I {$x}" where $x is a trivial or well understood and documented problem, could be a nuisance and deserving of it's own section (ie. /r/phphelp). I particularly hate people who turn to group-help first before even thinking about what they are trying to do. Perhaps just adding a hard and fast rule that asking for help requires certain pre-requisites (ie. simplified code case instead of c/p of the entire file) would whittle these kinds of posts away.
could you please stop that spam ?
PHP is also really slow compared to Ruby or Python and they are all scripting languages.
There's a lot more to being an engineer than aesthetics and maintainability.
&gt; Keep in mind that the day we banned "meme posts" in this subreddit, was the day we received a huge wave of attacks from a significant number of users. Yeah. That's going to happen no matter what the change is; that's just the nature of Reddit. I'm not saying you're incorrect. I'm just pointing out that this isn't a way to measure the quality of a rule. Any change will be seen by some segment as wrong, and they will fight you. It's unfortunate that this has become the tendency of Reddit, but I've only ever seen one large community resist this change, and I believe that has to do with the people that community selected for; I think it's actually human nature, and largely unavoidable. On the plus side, that gives you a lot of undesirables who are flagging themselves for removal.