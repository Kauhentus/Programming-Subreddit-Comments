[WOMM Award?](http://www.codinghorror.com/blog/2007/03/the-works-on-my-machine-certification-program.html) :)
I'm surprised they didn't mention MemCache. It's superior as an open source. It's so good that even Facebook has almost taken over the development of it's open source and AWS just released their Cache service to match it. Basically it's temp caching variables, including arrays. So you could dump complete sql results into it with a chosen time to keep it cached. We can also cache html portions in the assembly of the page and module outputs for simple times like 3 minutes. I enjoy it with NginX , makes life easy and it's simple to use.
What I would expect for a new person on my teams project would be: * Ability to model a problems domain, but doesn't overengineer. * Knows to profile code with xdebug, and optimize accordingly * Can write meaningful documentation. Good code commenting explains the why and what, instead of how the code works. * Understands object oriented design principles like S.O.L.I.D. and G.R.A.S.P. * Doesn't give up easily when has programming related issues, and actually tries to look up for a solution before asking for one * Wants to become better at it and doesn't give up just because it seems too hard. I'd say the most important part for an out of school would be the last point. The rest, would suit better a mid developer, like I'd need on my team. For an entry level developer most of the stuff you'd be put at would be: * Fixing frontend related issues (DOM has changed, but Javascript hasn't) * Work on data imports, and usage reporting (learning the database structure as you'd be required) :) * Learn the framework and ORM we use * Also learn all the points mentioned in my first listing The most important would be for us to bring you up to date with the project so you could advance to a mid developer and actually work on more challenging problems (what from previous colleagues seemed to take about six months).
Don't use PHP. The spagetti code only gets worse as the project gets larger. The startup overhead gets worse the more files you have. Just don't. For the sake of your sanity. [There](http://www.rubyonrails.org) [are](http://www.djangoproject.com) [much](http://www.playframework.org) [better](http://www.python.org) [alternatives](http://www.asp.net/mvc).
That doesn't even check the referrer and is essentially useless: http://shiflett.org/blog/2006/mar/server-name-versus-http-host
That doesn't even check the referrer and is essentially useless: http://shiflett.org/blog/2006/mar/server-name-versus-http-host Unless you are using the `Host:` header for something...
That confirms me what I always thought about that: worth nothing. They are companies around here, claiming out loud that they have all their engineer certified… not worth much after all. Those companies aren't the top notch one, that I can say.
while im not positive about its use of the print stylesheet, wkhtmltopdf works very nicely for creating PDFs from html &amp; css. might be worth checking out: [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/) edit: added '&amp; css'
What are you studying now?
Sadly, it seems to not work with php.
MPDF. Works for us anyway. http://www.smaizys.com/php/mpdf-html-to-pdf-introduction/
while it isn't a php extension/library/class, you can download a binary and execute it from a php script using exec() or shell_exec(). should be much faster than using pure php, and it uses webkit to render, so the results are pretty freakin sweet. &lt;?php $html = 'http://reddit.com'; $pdf = '/tmp/output.pdf'; $command = implode(' ', array( "wkhtmltopdf", escapeshellarg($html), escapeshellarg($pdf) )); exec($command) if (!file_exists($pdf)) { die("something went wrong\n"); } ?&gt;
It does work with PHP if you can call system commands (ala exec). But it has a lot of problems with kerning the fonts correctly. I've had quite a couple of sleepless nights over this in the last couple of weeks. There is no real solution, yet.
The referrer value can be modified by the client. I would not trust it for anything important.
This is probably a misguided attempt at CSRF protection. [Effective protection requires a token/nonce.](http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html)
your googling skills need to improve. preg_replace("/[!\^A-Za-z0-9 ]/", '',$string_to_be_stripped );
I wouldn't worry about your design (functionality is king for us php dudes). As a guy employed to do PHP, they would rather me not waste my time doing HTML markup. Even though I consider myself pretty good with my markup and design skills, that's not why they hired me (May be different with like a statup company or a smaller firm). You should also focus on Javascript as a second language to learn then you can build some powerful shit. But you should have a pretty good knowledge of HTML because working with PHP you will obviously be writing it too.
I had some luck with dompdf yesterday when I had to replace a fpdf utility that didn't support bold/italics/underlines mixed with tables. dompdf was just: * build html page * include the page and read into a buffer * send the html to dompdf * save file The only real gotcha I encountered is when I tried to open (and not close) a `tr` within another `tr` -- which was honestly a bug in my code.
This is the correct answer, a token of some sort is needed for cross site request protection. If nothing else the referrer header may be legitimately missing from users of certain proxies, firewalls, and other security software.
In what universe in ASP.NET a much better alternative? 
Northern Ontario, but prepared to move if it's a must
I have been using Joomla on my own for quite a bit now, as for framework, I have not done much work with any of those to be honest, it's all been hand written code, no frameworks. And I am very serious =)
Software Engineering
Let your browser render the page and use a pdf print driver. Your browser will "print" the page to pdf, thus fulfilling the print stylesheet requirement. E.g. [CutePDF](http://www.cutepdf.com/Products/CutePDF/writer.asp).
Note that that's to _ASP.NET MVC_, which is pretty universally raved about by anyone who uses it.
It sounds like you're a pretty motivated person / eager learner since you decided to go back to school so I'd definitely say you're ready for real world. I can't remember where I first read it, but I was reading an article about development a long time ago and the author said something to the effect of: &gt;If you're ever meeting with a client and they ask if you're familiar with BuzzwordOfTheDay 2.0, tell them "Absolutely." then go home and google it to figure out what the hell you just became an expert in. Point being, just do your best to impress the hiring manager or client and be willing to learn on the job and you'll be just fine.
I second MPDF... just got done adding it to a new project... literally took 5 minutes.
Is there a reason for this implode/array construct? Wouldn't a simple concatenation serve the same purpose?
If you just compared the bytecode output of something like ionCube to an x86 binary, you're in error. Reverse engineering an actual binary is hard work; "decompiling" PHP bytecode is not. As a matter of fact: http://dezender.net/
To me, a registry for 4 singleton objects was overkill. I'm literally talking about an object for page data, a memcache object, template renderer, and the controller itself. I should probably use a static property for the controller's own stuff, but I just went with a global to save typing since I was already referring to the others. Lazy? Definitely, and I'll probably fix that one soon anyway. Like I said before though, this is a 1.0. It's not perfect, but it works. It's stable, and it's a good starting point. It's flexible and clean to build on, and any shortcut I took I did so knowing I could easily clean it up later. I didn't code myself into a corner with any of these. I've also already changed a LOT under the hood for a 1.2 release, but wanted to put a stamp on this one so it's not in perpetual beta. What I wanted to do in 1.0 was accomplished :)
There's not really anything you can do that's stronger than the Honor System. If you get them something that you've run through ionCube or Zend, they can just buy [this](http://dezender.net/) and get around your "protection" in a matter of seconds. I'd just put the code in a phar archive and make sure the license you give them forbids them from reading/duplicating the source code. Or implement your code in a language that can actually be safely sold without tossing the source code around.
OP hasn't taken the test yet. These are just his study notes leading up to the test. I'll admit that the stuff he's written so far seems pretty basic, but studying for something like this means you have to have the basics down cold just as well as the more advanced stuff.
Fixed the jQuery UI, added space to the upload as per your screen grab, and tested the delete user function. Looks like that one is to do with the demo site and not in the app itself. Thanks for the feedback!
Personally I'd save that money for something that is actually useful, like coffee for all-night coding sessions. The only thing this certification seems to test is your ability to memorise the manual.
Try http://www.reddit.com/r/assistance
Joomla is the ultimate counter-example if the question is "How can I make good software?"
While I am very sorry for your misfortune, I'm not sure if the PHP subreddit is the best place to find assistance. Perhaps I might suggest some alternatives? /r/helpit /r/AskReddit 
I'd be happy to help, PM me with some of what you want to discuss and we should be able to set something up.
From processing over 400+ PDFs per day I can tell you that this is the way you want to go. There is also another project that makes use of the libhtmltox package that has PHP bindings. [wkhtmltox](https://github.com/mreiferson/php-wkhtmltox)
I've got a little time ... are there specific areas you are concerned with?
Nope. I'm a fan myself. First MVC framework I used for PHP and I haven't yet seen its equal. The documentation is crap, don't get me wrong, but the framework works well for me.
I really tried to ignore this comment, but being the one that comes up first in here, I'll bite. In your 10 latest posts on Reddit, you criticize (and in some cases outright insult) the Zend Framework, CodeIgniter, jQuery plugin developers, Elefant, a "Super Simple Database Connection Class", another person's PHP5 MVC framework, and an alpha of DaringCart. You must be a brilliant coder. I'd love to see what you've written yourself. 1. I use @ to suppress needless E_WARNINGs on file_exists() where the file in question is an optional file, and it's okay if it's missing. I don't want a warning, that would be useless. This is perfectly fine, except to someone who doesn't know when/why error suppression can be used effectively and thinks it's always bad. 2. There's nothing wrong with a little procedural code where appropriate. Not everything needs nor should be OOP. C is an entirely procedural language, and yet the operating systems we use every day are written in them. OOP for the sake of OOP is applying a hammer to every problem. 3. High cyclomatic complexity? In a couple methods, sure the number of routes rises a bit. That's not abnormal. But in "almost all functions/methods"? That's just plain hyperbole. Actually most of your comment is just hyperbole. The best thing a programmer can do is to learn to think for yourself, not just regurgitate what you've learned. I hear so many PHP devs citing things they've learned not to do in PHP as if they were physical laws. It's becoming an increasingly and depressingly narrow community, which is a big reason why it's going to be unable to save itself from the exodus to Ruby/Python/Node.js/etc. My code isn't perfect. No code is. It's not "horrible" either though, and such remarks are both unconstructive and harmful to the community, not to mention arrogant. I'm putting myself out there and offering something for nothing, with a willingness and commitment to improve and build upon it, while you just sit back and play the cowardly critic, which judging from many of your comments on Reddit, seems to be a role you quite like to play.
Sublime Text is a breath of fresh air. If only it had a good tree file view with FTP/SFTP/WebDAV support
&gt; However if you make changes to your php.ini, it will requires a server reboot before the changes take effect. I think the "tour guide" needs to brush up a little more on how the stack works. Changes to php.ini are instant for CLI, and only requires a reload for Apache. Other interfaces also support on-line refreshing of the config (FPM uses the USR2 signal). As written, it's implied that the entire server must be power cycled in order to change php runtime settings. That may not be what was meant, but as the article appears to be targeted to new users, this kind of misinformation is dangerous.
+1 I've successfully used TCPDF in a project and it worked great with CSS. Of all the options I've found, it's one of the better ones for working in PHP but the code is an unbelievable monstrosity -- I have no idea how the author manages to continue to work on it.
Thanks so much to Danodemano, who spent time checking all my answers! and talking with me about them!
Who else absent-mindedly clicked on this post, hoping to see a rage comic???
[html2pdf](http://www.tufat.com/s_html2ps_html2pdf.htm). Its the best I've found that's free and works. It has no problem interpreting CSS and it's PHP based.
That's assuming that sessions are on disk using file instead of something like memcache, or sql, or...
That's what I was talking about, so many people seem to use $this-&gt;input-&gt;post('field', TRUE), having to pop TRUE on the end of all those statements when you could so easily turn it on in the config file. I don't understand why they would bother when the automatic alternative is so much better...
Right. That's part of the reason why I said the method I linked to was crude. Do you have any suggestions for a better way? How would you handle it?
Are you sure a [graceful restart with USR1](http://httpd.apache.org/docs/2.0/stopping.html#graceful) won't work?
I'm sure it will. My point is that a reboot is overkill.
go on..
=( sorry to disapoint
No problem, I never said I was disappointed… :) It’s just that after coding php for 10 years now, I was a bit surprised… :)
I count two distinct ways to include files in Php: * Include/Require[_once] * Autoloading I'm not joking around, what other ways do you have to include files? 
The "tour guide" is just a run of the mill blog spammer trying to get ad revenue. I really wouldnt expect anything being posted to be very in depth or accurate.
It's a fetid pile of shite.
Fairly boring stuff for the most part that is explained already by just reading the comments in any PHP.ini file. However I did like the idea of using the prepend and append header/footer files as a way to calculate script execution times. It's not something I would ever use, but I was wondering why anyone would ever use that setting before.
I'm not sure you're thinking of the word "prepare" in the right sense here. Maybe thinking of it like this will help: Preparing a statement is essentially saying "This is the SQL statement I'll be using and I'll be putting parameters here, here, and here." Then you fill in the "here"s with the parameters by binding them, whether it's with your own variable or provided from $_GET or whatever.
Oh, missed that about OP. I have talked to a friend that got his and it sounded like the hardest part was the memorization of the function names &amp; parameters (haystack, needle vs needle, haystack). I know they cover much more than that, but he talked like the rest of pretty intuitive.
&gt; /usr/local/lib/php/php.ini What distro installs it there? I've only ever seen it in /etc...
First, preventing SQL injection isn't really the primary function of prepare() or bindParam(); it's merely a really convenient and advantageous side-effect. When a PDO or other database driver 'prepares' a statement, that means it sends your statement to the server to be precompiled (if the server supports it). The server typically sends back a handle or some other internal representation of the compiled statement for use later. Behind the scenes that handle is kept track of by PDOStatement for use later. When the statement is prepared on the server, and if it has any parameter markers (e.g. '?' or ':param') then the server makes those parameters a prerequisite of the statement execution. When you bindParam(), you're merely telling PDO how to fetch those values to pass on to the server. The server receives the values as native unescaped data. It doesn't need to quote or escape because it already compiled the statement. I hope that makes sense.
I've been procrastinating building a little site (a thinly veiled excuse for me to study the core functions more closely) to improve memorization. I figured param order wasn't really important, since any IDE worth it's salt would have that baked in, but you've made me rethink things. Maybe in the 2.0....
I don't know why that downvote, but whoever did it: wtf. paranoid is correct and while spork is right too. Any implied snarkiness is all in your head. That said, I agree. It's much easier to do something like sudo service apache2 restart or sudo rc.d start httpd, though, the people who would even need to read this guide probably won't have the privileges required to restart an entire instance or sudo. 
I'm pretty sure there's sample tests out there if you're serious.
So , instead of addressing the points i made , you decided to go for *ad hominem*. 1. If file does no exists, it will not rise a E_WARNING. Such thing might happen only if you are checking for files larger then 2GB, or maybe symlinked ones. Anyway, the warning indicates failure of filesystem level, which is something the developer **should** know. But instead you are hiding this information. There are extremely few cases when error suppression makes sense ( hell , i know only one: with `file_get_content()` over http, which is bad idea in it own rights ). 2. Procedural code is wrong when you try to hide it behind classes and hope noone will notice. 3. High cyclomatic complexity (basically anything above 2) means that the code needs refacroting. NO, "terrible" was the only even remotely polite word i could find for what you have written. I guess you expected only praise, and instead of asking "what the hell is wring with my MVC?" .. which might have been a reasonable response, you decided to find something which would let you dismiss my opinion .. good for you.
This has nothing to do with certification. I've never really seen the point in pretty much any cert, PHP or otherwise. No, this is just a familiarization project, stemming from things like writing a small function on StackOverflow to answer a question only to see someone else say "oh hey, PHP has a built-in function for that." I'm just trying to get to know PHP better, and maybe to have a sample project running online somewhere that I can point to as a sample of my abilities. Like I said, I've been procrastinating rather a lot (reading Learn Python The Hard Way, reviewing the FuelPHP source), probably because I'm afraid of failing. It's almost entirely a personal project, but I'm hoping it'll at least be slightly helpful for people who are not me.
My attack was not ad hominem, it was pointing out the fact that your comments have been similarly negative across the board. I didn't make that up, I simply listed the projects you derided in your own comment history. As for not addressing your original points, I actually did that too. I have experienced file_exists warnings in other less catastrophic scenarios, such as permissions failing. I chose to ignore those and proceed with the request. As for honest, non-hyperbole-filled feedback, I'd gladly accept that. Yours wasn't it. Nothing you've said in any of your comments has been constructive, only condescending and insulting. Either way, at this point I'm not interested in an argument about who said what first, so let's just agree to disagree, shall we?
Hey - was that you in my class? I do some of the trainings for that class. 
Unless it is required at your workplace, you should not concentrate on single framework. Instead you should examine most of the popular one and what they have common and what are the main differences. And to understand that, you should know a lot of things first. There is the short list: - Inversion of Control, - Separation of Concerns, - Dependency Injection - S.O.L.I.D principles - Law of Demeter - Test Driven Development And also, you must understand that classical MVC is impossible to use in PHP and how it is different from the MVC-like patterns that *are* available in php: MVP, MVVM, Model2 MVC and HMVC.
Sure. Emm .. only about that *".. less catastrophic scenarios, such as permissions failing"*. That is something the developer should know about. This would mean the file was made, the change in behavior was expected, but nothing happened and no reason for "why" was given.
I teach a prep course for this for Zend, and have dealt with dozens of people who've taken the prep course, then taken the exam. Couple thoughts below: "The job market" is huge, and there's load of different types of php work, let alone web work, that people may be trying to get in to. I ask the people taking the prep course and the exam why they're taking the exam. Some people have companies paying for it because they want some certification in their ranks. Some people are in "the job market", and feel it helps them get noticed. That one is a little foreign to me, as I've never worked anywhere that used certification as a critieria (when I started in web work, there *wasn't any* certification for web tech), *but* I do know people who work at companies that do look for certs as a filtering signal. Will a php cert *get* you a job? No. Will it help get you in the door at certain companies? More often than not, yes. Some companies are aware enough of PHP to look for it, others don't know specifically about it, but do see "certified" and the resume gets passed to the next pile. I say this as someone who does some informal discussions with area companies around their hiring. A public portfolio with lots of code for review and great referrals in a solid network will, in most cases, go farther to getting you further along in the hiring process than certification alone (not just php, but most tech), but... not everyone has that, or has the time to build that up, nor does everyone want to work at companies that are that informal. Some people prefer the more formal structures at established companies, and tech certification is part of that scene. FYI: I also ask people who take the test to get back to me afterwards. Many don't, but some do. Of those that do, *almost* all pass on the first try, but some failed, and passed on a second try. Also FYI - I saw this repeated at ZendCon this year - not everyone who took the test passed it that day (no insider knowledge, I just had some hallway conversations with people). To people who think it's just memorizing all the manual... it's not quite that. There's some elements of the questions that just aren't knowable by someone who's never used the language before (idiosyncratic stuff, etc). That said, there's things I'd improve about the test itself, but... I'm not in charge :) Knowing that some people fail it, I think it's a *reasonable* indicator of competence with the language. Most of the ZCEs I know are *very* competent developers, and ZCE status is just one more shorthand indicator of that. They'd be good developers without it, but the ZCE is one more signal hiring people can use. 
The most surprising was that function names are not case sensitive. That just seems like a bad idea? Why is that bad?
My first impression on clicking that link was "I'm sure going to trust someone who tells me the only way to change php.ini is to reboot the server".... 
missed out about 95% of the variables in php.ini... bit of a short tour ;) 
That being said, more than half of my freelance jobs have been, "can you build this site for me in Joomla?" It fills an oddly relevant niche of CMS that can be installed and configured by a developer and maintained by someone who doesn't know what he's doing. For my own projects, I use my own platform, but my clients tend to want Joomla. Well, or Drupal, and I try to push them toward Drupal, because I prefer it myself.
I would strongly recommend learning one framework inside and out, and then using it as a reference for building your own. Essentially, you need a bootstrapper, which interprets the query string and relays requests, and a collection of models, controllers and views. As far as directory structure goes, you'll have to play around and find what works for you. By the time you've done this, you'll be able to pick up other frameworks very easily, because you'll be able to see their rationale. You'll also be able to construct project-specific variations of your own framework, which will make large projects vastly easier to code.
it's my own site I run full time. I want to take advantage of mvc so I'm thinking I will rebuild it in codeigniter. Was also looking at yii but I want something with a lot of developers so they are easy to find and contract and oDesk has about 7x more developers for ci than you. Could also build my own mvc framework as I have a lot of stuff already built (been running the site over two years). I make a full time living off this thing and do all my own development so I take this stuff seriously. It's a big decision. Right now I plan to seriously look at ci in jan and start rebuilding parts of it under a sub domain. After that I will look at if I want to continue or change paths. If you have any advice I'd be interested.
&gt;setting safe_mode to 0 &gt;giving IUSR full control over the directory and all contents (replace permissions) Already checked :/
If you have not noticed, the cli version php.ini is different from apache in Debian bases Linux flavors
What you have to realize is that **framework is a tool** for development. It lets you code pages faster, by already have done the "mindless tasks" (like creating user authentication or routing the requests) and letting you focus on the parts that matter. But there is a cost - performance. Unless you really suck at writing code, framework will make you application slower, because of all the generalization and "works for everyone" approach. If you have an existing site, just slapping on a framework will gain you nothing. If you want to rewrite you application from scratch, then framework will let you complete that in less time (if you already know how to use said framework). If instead you want to expand or optimize the existing functionality, you should focus on refactoring and profiling your existing codebase. If that is the case, here are few books which would help you with it: [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by Robert C. Martin , [Real-World Solutions for Developing High-Quality PHP Frameworks and Applications](http://www.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications/dp/0470872497) by Sebastian Bergmann and [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. Said book will not give you clear rules for "how to do this", but instead will explain you the direction in which you should aim. --- P.S. in my personal opinion , CodeIgniter is one of the worst php frameworks out there, with unreasonably high popularity.
BSD?
I thank you very much for the thoughtful reply. Yes clean, maintainable, *modular* code is my goal and I asked people on here and they said MVC but don't reinvent the wheel so use a framework. I also have a friend who runs a very popular site, I asked him about frameworks a year ago and he said he had no need for them. His site is built in PHP. At the same time there's a lot more things I want to build for the site and I wonder if those things would be way easier to build if I switched to a framework. I dunno, the more I investigate the 'grayer' it gets. Thanks again for the thoughtful reply and I will look at those books!
Hi mate Just to give a word of advice. PHP would be dealing predominantly with extracting data (for example from a database) and I would suggest displaying data in a way where you can make use of CSS stylesheets in order to format the way the page looks. In regards to actually getting the data this will effectively depend on how you design database etc. Multiple categories would probably mean using some sort of nesting categories mechanicm. I use the nested set model (http://en.wikipedia.org/wiki/Nested_set_model) which is a bit daunting at the beginning but quite powerful once you figure it out. And the good news is that a PHP is both an active and sharing community and you can find hundreds of sites with PHP examples. Also make sure you use a good IDE as this will significantly speed up the process. ( Lots of free ones on offer like Netbeans, eclipse etc). Good luck A 
&gt; include a page of text on each of hundreds of such webpages include(); include_once(); require(); require_once(); http://php.net Sorry I can't be bothered to link you them directly just do a quick search for each of them. &gt; associate any given paragraph with a category I'm assuming that you want to tag paragraphs with certain phrases? In which case you need four relational DB tables: * articles - Each row holds the information required to fetch an article. * article_contents - Has an `article_id` Each row has a belongs-to relationship to an `articles` row. This is where you hold your "paragraphs". * articles_contents_tags - A join table that allows you to associate many `article_contents` rows to many `tags` rows. * tags - A list of tags that you can apply to articles Of course this is very quick and dirty, there is a lot more complexity. You also need to design an interface to allow you to administer this. &gt; occasionally include an annotation alongside a single paragraph in this text Could you elaborate? Do you want to annotate the body text when specific keywords or phrases come up automatically? To hazard a guess you would need two more tables. * articles_contents_annotations * annotations &gt; let the user click "category X" and display all paragraphs marked as X within the section they're viewing Once you have the above figured out this part is easy. The problem here is we don't have any context. What usually happens is we have a design that's shown and explained to us (unless we made it ourselves). Only then do we start even thinking about code. If, as you say, you know nothing about PHP/SQL/NoSQL this is not going to be easy to implement in a secure and usable fashion. The best pieces of advice I can give you are: * Take it slowly. * Get a design laid-out first. DO NOT START WITHOUT AT LEAST A BASIC LAYOUT IN FRONT OF YOU. * Use [PDO](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access) if you want to use a relational DB. Most tutorials are out of date an recommend things like mysql_query(), this is bad. * Read [this](http://programmers.stackexchange.com/questions/46716/what-should-every-programmer-know-about-web-development). * You probably wont be able to find a developer willing to do work for free or for student wages. Ask around your circle of friends once you have a well-defined plan but don't rely on them totally cause they don't owe you anything. Good luck.
This article seems a bit uninformed. They neglected to mention that the only issue with short tags was with XML, and that the also have the excellent usage of having `&lt;?=$x?&gt;` be a shortcut for `&lt;?php echo $x?&gt;` which makes them great for templating. But it could be helpful to some I guess.
Aye that is a horrendous directory for it.
CentOS? Or it might be compiled from source.
First of all, determine what your data will be, and create database tables according to it, for me, the most difficult thing about this is gathering and inserting data into the database, the rest it's just a few queries. You don't need to physically create all the pages, you can just have one php that accepts parameters and use those to query your DB, so for example: index.php will show all the categories, and clicking on one, will load index.php?catId=3 that will show all the words/paragraphs of category number 3, also on the future you could make it work without revealing ids, thus the urls could look like /MyCategory/ or something along the lines. Sorry for my English, just send me a PM if you need further advise, or just update your post, some real data will be nice to help you build your DB structure
Yes you have the honor of being my first php reply, I only joined recently :D You might also consider using ready made frameworks that tend to do similar things like this already or ready made CSM's like Joomla. if you are extracting data from a DB then you don't need to have separate files but rather you leave the DB to do the heavy lifting. Also consider investing in some good books/ebooks for php/mysql it will cut many hours of research and help fast track you 
No Linux distro would install it there; /usr/local is defined universally as "users can do whatever they want here, the distro won't touch it". I assume it's a self-compile, with some *really* weird ./configure options.
As a FreeBSD user, FreeBSD's PHP ports assume php.ini is located at /usr/local/etc/php.ini, and install an example config at /usr/local/etc/php.ini-dist
Ok, that makes a sense. Thanks.
Yep, clear as day! Thanks.
A small tip on php.net: php.net/function_name will throw you to the documentations for function name. [include](http://www.php.net/include)
Yes, i'm Spanish, thanks but i have tons of problems with past and future syntax... :) Ok, so according to that site you only have Categories and text/items/references, right? Well, i wrote something and i though it'll be easier to show you some code, so i setup this demo [http://koncepto.com/categories/](http://koncepto.com/categories/) The source code is on [http://koncepto.com/categories/demo.zip](http://koncepto.com/categories/demo.zip)
I think rich97 has it. Although I would have gone with different naming schema...(double _? ) :) Take one step at a time. If you know C++ and SQL, you will have no problem picking up PHP. Just start with a single table, with an autoincrement id and a single field. Create insert/update/delete form for that. It is not clear from your original question, but will this be a read-only web? 
It's counter intuitive. Everything else in the language is case sensitive. A lot of people declare the the case sensitivity issue is personal choice and it probably is. After coming from a C++, Java background, I tend to see case insensitivity as a weakness. I try to defend PHP as much as I can because I generally like using it but 'features' like this make that harder to do. But mostly I think it's bad because the variable naming is case sensitive. Although they may be trying to avoid the full retard rule.
Thanks for the insightful reply.
And how does that change the fact that modifications to the CLI-flavored php.ini are picked up immediately?
that does point to the fact if you are on Debian based Linux flavor, you may have to make changes at two places
Sorry that got deleted. I liked the feedback, and was going to show it around to help improve the Zend courses. FWIW, I did try to stress that the first day or two will *really* seem basic - I do have to use most of the material that Zend provides - BUT... that particular class is the funnest for me because we tend to be able to get off topic and "go deep" in to some areas that students want to go in to. Now... you passed the test without coming to class - that's great - but given that you'd paid for the class, I wish you'd have reached out to me privately to get more out of the class. The training classes aren't for everyone, but I don't like people having a bad experience on my watch.
You're welcome. I've been teaching for Zend for 3 years, and am happy to answer any questions anyone has, on the prep class or any others, at mgkimsal@gmail.com.
Nice idea, I added it as a bug report: http://netbeans.org/bugzilla/show_bug.cgi?id=206329 I hope they fix it soon, the NetBeans devs are really nice
Hrm... I think I had a similar reaction back in the 90s when I started with PHP, but got over it. There's so much more to complain about than that :) But I somewhat agree that there's an inconsistency there re: case sensitivity. This isn't a 100% thing, but PHP does provide loads of functions (hundreds or 1000s) and those are case-insensitive. Following on that initial rule, other functions you create yourself would also be case-insensitive. However, because all the variables in an app are ones you create yourself, they're all case-sensitive. Hrm... that's not a great distinction to draw, and probably doesn't help the matter too much. Was riffing on this idea in my head, and it sounded good about 3 minutes ago, but doesn't look so good written down :)
&gt; take legal action if you find out people are unlawfully distributing it or using it. Part of my brain just went "And he'd probably get more money from damages too..."
It's normal that your design/frontend isn't as good as your programming. I know very little people who actually do the two. Normally you just have a (team of) programmers and a (team of) designers who are working together.
Nice article, thanks.
As far as I know, session variables are stored in the server's memory, they are bound to IP adresses, and I never heard about any PHP code which could change variables in the memcaches.
This is a helpful, free series on PHP for beginners: http://blog.themeforest.net/screencasts/diving-into-php-video-series/ and I'd also recommend the Lynda.com video tutorials (you can get a month's access for around $20) 
Thanks for the information. How would you go about accomplishing remote logouts and users' permissions being updated immediately when an admin changes them?
By not storing the permissions in a session variable but for example acquiring them on each page, but if you have much permissions to load, it would increase your loading time significally. For the logout, I don't have an direct idea, maybe using an int column in your database with 0 as logged out status and 1 as logged in. You clearly have another approach than me, I try to store as less as possible in session variables.
Ok, I didn't read everyone elses post, but here's my two cents: PHP reads stuff from a database and puts it into the HTML a page generates. What it queries out of a database depends on whats in the URL bar. If you know those two facts, you can model more or less how your whole site will probably work without knowing the underlying stuff. If you want to tackle this, some basic 'introduction to php' tutorials should give you all the skills you need to put this together. Essentially, though, what they will teach you is how to write a php script that connects to a database, how to set up a database, how to write a page to put stuff in the database, how to make a page to take stuff out of the database, and then at that point you can stop and adapt those skills into making your page work. PHP is quite forgiving and gotcha free when you're learning it, so I would expect for a new person, you're looking at about 8 hours of solid focusing, and you'll have what you need to learn down. Just find a beginning PHP tutorial now!
&gt; acquiring them on each page This sounds pretty intense to me. Is that what you do? If so, what has your experience been?
&gt; I wouldn't worry about your design (functionality is king for us php dudes). Please don't go around calling yourself a professional programmer. Gives the rest of us a bad name. 'code monkey' would be acceptable.
I would highly recommend looking at the [adLDAP](http://adldap.sourceforge.net/) package on SF. It is much better than the base LDAP functionality in PHP when using AD.
I didn't really had projects with much variety in the users permissions, usually it was just admin, user or banned, and one sql request on the top of each php page was enough.
You can try using date and strtotime. Not sure if it'll work for the input or not. date("M. d | g:ia", strtotime($item-&gt;get_end_datetime()));
Actually, they're bound to a session id, not an IP address. Binding to an IP address would be stupid. The user's browser sends the session id to the server, the server then looks up the appropriate session from the store.
It would, but doing the implode is generally cleaner, and you end up not repeating yourself. It also is great for building paths… implode(DIRECTORY_SEPARATOR, array($basePath, 'addition1', 'addition2'));
Yeah, that's going too far. Let's use an e-commerce website as an example. The website has items and orders. A user (let's call him Bob) can create, edit, and delete items. Bob can also edit and delete orders as they come in. Now, let's say Bob wants to edit an item. Let's also say that Bob has JavaScript disabled, so client-side form validation doesn't happen. This is how it would go (**bold** = database call to determine permission): 1. Bob goes to the item's page (the one that public users have access to as well). 2. A database call is made to retrieve the item's information and also to verify that it is a valid item. 3. **The script sees that Bob is logged in, so another database call is made to determine whether or not the "Edit" link should be shown.** 4. Since Bob has the ability to edit items, the "Edit" link is shown. He clicks it. 5. **A database call is made to verify that Bob is allowed to edit items.** 6. Another database call is made to retrieve the item's information and also to verify that it is a valid item. 7. The item is valid and it doesn't appear that Bob has posted the form yet, so Bob is shown the edit form. 8. Bob edits the form and then posts it. 9. Steps **5** and 6 are repeated. 10. The item is valid and it appears that Bob has posted the form, so it goes through validation. Whoops! Bob missed a required field. Show him the form again. 11. Bob edits the form again and then posts it. 12. Steps **5** and 6 are repeated. 13. The item is valid and it appears that Bob has posted the form, so it goes through validation. He got it right this time, so he is redirected back to the "view" page. 14. Steps 2 and **3** are repeated. In this example, there are five times that the database is called to determine permission. This is just one user. Now let's say that you have a busy website where users are constantly doing things that need verification of their permissions. Think of all the database calls required for that. It seems pretty intense, right? That's when storing permissions in the session seems like a good idea. But then you lose the ability to change a user's permission and have it take effect immediately.
Who said anything about calling myself a professional programmer?
Indeed it does: [wkthmltopdf Integration with PHP](http://code.google.com/p/wkhtmltopdf/wiki/IntegrationWithPhp)
Coda while nice for beginners, and the simplicity is appreciated, shouldn't even count as an IDE as it doesn't have most of the features I'd expect from an IDE like some sort of code completion for arbitrary libraries and debugging.
Thanks, that definitely gets me a lot closer. However, the time is not correct and it's because of the -0600 at the end. For example, if the actual start time is 6:46am it seems to add -0600 to make it 12:46pm. Any idea how I can omit that part of the string? 
I only use short tags for the echo shorthand. To do stuff like this: &lt;?php while( $rs = sql_fetch( $query )){ ?&gt; &lt;li&gt; &lt;a href="&lt;?=$rs['url']?&gt;"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;?php } ?&gt; It really comes down to the application you're developing.. If you're going to be sending it out to the masses.. don't use short tags as some people may have them disabled. If you're working in your own environment doing your own thing, I wouldn't lose sleep over it. Worst comes to worse you do a replace of /&lt;\?=\(.+?)\?&gt;/ with &lt;?php echo $1; ?&gt; If you really need to fix it. Most of the time I'm using a templating engine anyway so I don't really encounter this problem too much anymore anyway. 
try this: date("M. d | g:ia", strtotime( preg_replace('/-.+$/','', $item-&gt;get_end_datetime()) ));
I don't use short tags. You never know when something you might will be thrown onto a server that doesn't support them. It has happened to me before, especially around the time when I started using &lt;?=. Now, I don't, and it's never a problem. I think I can live with typing the few extra bytes so that I know in the future that I will never have to Ctrl-H the shit out of some times.
Good luck!, if you need anything, just ask, or send me a PM. The problem with Spanish for foreigners it's usually with masculine and feminine, so if it's feminine it'll be La casa (The house), but a masculine form, El coche (the car), Una casa (a house) un coche (a car), but once you get this, everything else it's easy :)
I use short tags but only in my views and only when I am outputting a single variable. They make the views way easier to read IMO. I also tend to use the &lt;?php if(foo == bar): ?&gt; &lt;?php endif; ?&gt; syntax in views because I don't like a bunch of curly brackets being in there. I think ultimately it is a matter of preference and support. 
Only in the views and only for simple variable output, conditionals, and loops here too. It definitely has that "template language" feel and keeps the markup neat and tidy.
This usually ends up being easier to match than { and } &lt;?php while( $rs = sql_fetch( $query )): ?&gt; &lt;li&gt; &lt;a href="&lt;?=$rs['url']?&gt;"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;?php endwhile; ?&gt;
I'd run a diff to make sure nothing subconsciously slipped over, and if it comes up clean, then release it.
You should look into the [HERE Document](http://en.wikipedia.org/wiki/Here_document#PHP) for those kinds of situations. The syntax hilighting isn't supported by all IDE's though.
Just upvote if you agree with it. :)
&lt;? und &lt;?= are typically only used in templates. I don't use PHP templates myself, but there people who prefer them over Twig et al. Using or not using them is mostly a question of whether they might cause problems elsewhere (like in XML declarations). Portability (imho) isn't of such importance, anybody doing any serious work with PHP isn't on shared hosting anyways. As only &lt;? may cause problems &lt;?= is enabled *always* as of PHP 5.4, independent of the short tags setting. So it should be safe to use in the future. That also seems to be the consensus already now: It's okay to use &lt;?=, but one should not use &lt;? preferably.
I know about heredoc, but why would you prefer it to normal html? It is a good practice to have as little PHP in your view as possible. 
I'll definitely try this on my virtual server where Wordpress uses lots of memory and runs dog slow (even with Xcache).
I never use short tags, not even in my templates. I've had too many issues where code was deployed to a server and some weird bug showed up that took us forever to chase down and ended up being that a short tag crept into the code somewhere and short tags were disabled.
It wouldn't a single function that does this. I'm guessing you have two scripts, one that you're running from the CLI and the other is the webpage. For the CLI one, you could save your response from Twitter as a file if you don't want to use a Database. Run the script, update the file. Then your webpage script can read the file and spit it out on the screen. You'll probably want to look at the file_put_contents(), file_get_contents(), and maybe serialize()/unserialize(). Otherwise you could store the data in a DB. The CLI will insert the new data into the DB, and your webpage will read it from the DB. I'd suggest looking at the PDO functions for database interaction.
At the moment I'm just developing for myself, keep my brain busy and all that, so yeah I use &lt;?= ?&gt; because I know the server I'm running my applications on supports it. Anywhere else? No chance. Unless I'm explicitly told to use them, I'll default to &lt;?php ?&gt;
I honestly see no real point in using short tags. All it seems to do is save a few extra key strokes (3 if you dropping php from the opening tag ~8 if you're using the echo short hand). In the end is it really worth the potential of having code break to save those few key strokes? Perhaps it's my preference of coding standards and naming conventions but I don't see any "real" benefit to the short tags.
&lt;?=$variable;?&gt; will echo a variable. It's really easy shorthand for wedging some stuff in to the middle of some HTML, and I believe requires short tags. So as far as rethinking prejudices against short tags, I mean, yeah you should rethink that. Why you gotta hate *someone else's* workflow? To each his own, live and let live, etc. I wonder why some people do some things some ways, but I don't hate on it. I try to learn from it, and when I do and I still don't like it, it doesn't necessarily take away from anything I know or am doing. I just don't like doing it that way, and we all move on with our lives.
I swear at my coworker EVERY time I see this if/then syntax. I think it's preferrable to keep the code looking as similar as possible everywhere... js/php in terms of basic syntax. Just makes things way easier.
I think this is really the only valid reason too.
I hate it because it interferes with mine;)
I only use it in views. It has no place in any other code. I am not as concerned about consistency in my views as I am about readability. 
The reason I prefer it to normal HTML is you don't have to add in random PHP tags to output variables everywhere. I find if I have that style, and lots of variables to output, it really messes things up, and only further integrates PHP into my HTML.
I strongly disagree when working with primarily HTML-based views. It looks enormously cleaner to use the single line syntax. I've worked with a lot of teams and it seems much more like a de facto standard.
I see your point, but you are outputting HTML from PHP instead of just flat HTML. Most views are meant to be flat HTML with some PHP sprinkled in. If you are using heredoc then there isn't much point to using views in the first place which is a bad idea IMO.
Well I guess it depends on the situation. I tend not to write full platforms, but plugins, like for Moodle or Wordpress. So views are something I don't handle myself. I guess I tend to see it from my perspective. I never use the heredoc for more than 10 lines or so max.
Get a better IDE that matches braces for you.
This is true, in the context of a template it's less of a big deal.
Hmm, I've worked in a lot of groups for about 10 years now, and have yet to see it. Weird;) I think it's more of a last couple years thing and habits do die hard. 
&gt; because I know the server I'm running my applications on supports it But, what happens later when the application gets moved to another server that doesn't support it? Sure it's a pretty easy fix, but I prefer my applications be able to move to any server without having to fix things like this.
I agree with "to each his own" in most circumstances, but in this case there are servers out there that do not support short tags. If the files get moved to a server that doesn't support short tags, your application will break. I feel that it's a developer's responsibility to future-proof things as much as possible.
With the server on the floor next to me, it's a safe bet I won't need to fix this. They're personal applications to keep my brain ticking over while I wait for my uni course to get to PHP.
That's when you turn it on using .htaccess.
Sure, as long as they're personal applications and you have total control, then code as you please. For commercial applications though I'd never leave a potential future failure such as this in place, even if I know it will initially deploy on a server that supports short tags.
Like I said, unless instructed otherwise, I'd always default to &lt;?php ?&gt; tags :)
That worked, thanks! 
A few paragraphs in all I saw was $hit; After that my focus was blown. Can anybody paraphrase this for me?
What's this about portability then? Code should look good even in monochrome.
I agree, but that's not good enough to make me switch to the alternative syntax.
Is twig becoming a standard? I'm considering using it in a new project, seems easy enough to pick up.
With proper indenting, what's it matter? &lt;?php foreach ($users as $user) { ?&gt; &lt;p&gt;&lt;?= $user-&gt;name ?&gt;&lt;/p&gt; &lt;?php if ($user-&gt;isAdmin) { ?&gt; &lt;p&gt;Admin Powers!&lt;/p&gt; &lt;?php } ?&gt; &lt;?php } ?&gt;
You can use a different session handler and store your sessions in the database with [session-set-save-handler()](http://www.php.net/manual/en/function.session-set-save-handler.php) Then if you ahve the session data stored in the dbase you can easily manipulate it by session ID.
In more complex templates, it's sometimes easier when you can see what you're closing the block for. It's a preference thing. Ultimately neither way is wrong.
Any template system that pushes its own meta language isn't worth the effort.
Seriously? The fact that your php wasn't parsing took you forever to figure out? How do you stay employed?
Sounds like it'll still be slow.... :P
1. It wasn't my code. Each time this has happened it's been legacy code from previous developers. We're talking pages with php code intermixed with a dreamweaver rat's nest of table based layout. I didn't even know where to look. 2. With short tags turned off the code gets sent to the browser, which then treats it like an unknown html tag and simply ignores it. It's not like there was an obvious error message or a page crash, things just didn't behave the way they were supposed to. 3. "Forever" is hyperbole. Actual time was maybe an hour or two, but it's an hour of extreme frustration followed by 10 seconds of total disbelief.
Interesting. Very few of the commenters or people who "liked" the post were black, yet it's called "hiphop"VM
This is really unreadable!
I use short tags all the time. It's three fewer characters to type, and there is no reason not to. I don't write open source code.
Yeah, I got lost in all the pointless detail. Where is the "Download Now!" button? Edit: I've been browsing their Github page, can't see HHVM anywhere.
More comments and discussion about this here... http://www.reddit.com/r/programming/comments/nav19/facebook_releases_hhvm_60_percent_faster_than_its/ (Plus a lot of unnecessary PHP-bashing, but you know how programmers are...)
you got down modded to hell, but it is a good argument. NetBeans will bracket match both { and } and foreach(): and endforeach
why is this down modded? lol. Not having control over your server is dumb. So arguing that 'I don't have control so I have to do X' is also dumb.
how can you not have control over the php.ini file? Your argument is so weird, how do you get yourself in a situation where you can't control the server or at least choose a hosting company that isn't retarded?
I work as part of a team on a popular open source project that's used by thousands of people. In the past year, we've had maybe 2 complaints from people who didn't have short tags enabled, so I really don't think portability is *that* big of an issue. I think in most cases, you'll be fine. That said, the new version coming out soon won't have them, because the project will be adopting a more formal coding style, and there's just no point in creating an issue where one doesn't need to exist, however small it may be. For my personal stuff, or for the company I work for in which the code will be running only on servers I/we configure and control, I use short tags. For distributed code, I've stopped doing so. 
I use short tags &lt;?= in views (templates). I use normal &lt;?php tags at the beginning of controller and model classes. It's worked for me for a long time. People who use Smarty and other template languages in php really annoy me. I have never heard a good reason to use them. Maybe in Java it's a good idea... but in php it's just a bizarre architectural anti-pattern which causes much more problems than it solves. 
Yeah, you thought you'd get some karma after the [/r/technology](/r/technology) post? Good luck to ya.
I honestly can't think of a single situation where this would be useful.
I use &lt;?= =&gt; because Lithium (Li3) preprocesses it's templates and using these tags automatically escapes the output. Outside of that though... I like being verbose. I use: &lt;ul&gt; &lt;?php foreach($list as $item): ?&gt; &lt;li&gt;&lt;?php echo $item; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; I just find it to be clearer.
I never use shorttags, when you want to create portable php code, it might be dangerous because not all webhosts support it. Is it really that hard to write &lt;?php instead of &lt;? ? :D
I think your best option would be to do this with AJAX calls allowing Javascript to manage your DOM (see JQuery or Prototype). Do you need the data to persist any longer than a single session?
&gt; but you are outputting HTML from PHP instead of just flat HTML The php interpreter will be parsing the file anyway, so the difference in runtime is likely to completely insignificant, and I can easily imagine that the winner in practical situations could be either style, for different reasons... I'd have to do some benchmarks to find out which. &gt; If you are using heredoc then there isn't much point to using views in the first place which is a bad idea IMO. I don't see how this follows at all. The file is still being used for presentation output and code.
I never said I hated them. I've just been trained up not to use them, and I'm encountering them now in some inherited code and wanted to see what other developers thought. Honestly, I've already "fixed" all of the short open tags, but I've left the echo shorthand in place. What drove this post is that I noticed the echo shorthand actually makes the view scripts a bit more readable.
As I tell others who ask my opinion on the subject: php is the only template language you need. We use the alt syntax in our views, which makes it easier to follow. Why add the overhead of another library and parser just to do what php was originally designed for? Really, if your views are so complex that the php gets in the way, you're doing something wrong.
There's nothing wrong with them. I don't use them just because it's better to avoid flamewars.
Really, I could see developing with the echo shorthand, and replacing it with long form in the build process if required. I use Zend Framework for most of my development, which has a filter to enable echo shorthand even with short tags disabled. I've never used it because I think it's unnecessary overhead, but it is an option.
close, i saw it on hacker news and thought reddit would like to know but i guess it was already covered.
Not sure if I understand question completely. But you could still join tables but assign an extra field called gr_ordering so for example select blog_title title,update_date, 1 gr_ordering from blogs union select image_name title,update_date ,2 gr_ordering from images orderby gr_ordering,update_date This will sort out first by the table destination and then by date Hope this helps Alex
I agree with above comment as source of data should be presentation agnostic. Let html/css handle the look. However one thing to consider is if the source of the data will be from forms -i.e. user entered you must make sure you protect against SQL injection code etc. so you must do some form of sanitizing.
Assholes. Assholes use short tags. If you ever have to run somebody's PHP source code through an XML processor (I do), an outrage will follow.
&gt; The php interpreter will be parsing the file anyway, so the difference in runtime is likely to completely insignificant Not entirely true. The PHP interpreter will parse the file but only execute on the PHP lines and when there is virtually no calculations to be made in a view it will be considerably faster than if it has to concat a large string of a heredoc. Also there would likely be more than one heredoc template so that will compound the slow down. It takes way more time to concat a string than it does to fetch and return a value. &gt; I don't see how this follows at all. The file is still being used for presentation output and code. If you are using heredoc for your view code then why not just put it in your controller, it is inefficient to have a separate file for the view at that point. I guarantee that someone will come to that conclusion. Then eventually all of your presentation code is in your controller code. There is a reason why none of the popular frameworks use heredoc for their views.
I see. Does the echo shorthand break it as well, or just the stand-alone short open tags? I guess I never understood why XML parsers break on &amp;lt;? and not &amp;lt;?php. Wouldn't they look for &amp;lt;?xml?
&gt; Not entirely true. I'm pretty sure that I'm safe in saying, that in 90% of sites, execution time of php code is never a problem. Nevermind the fact that views should usually be cached, and so most of the time it's not executing. &gt; it will be considerably faster than if it has to concat a large string of a heredoc. Don't forget PHP strings are much more malleable than say java strings, and so much easier to work with for such purposes. As I said before, I'd really like to see some practical benchmarks before I'd accept any theoretical statement declaring that significant slowdowns would actually cause problems because of this step. &gt; If you are using heredoc for your view code then why not just put it in your controller, Because, &gt; Then eventually all of your presentation code is in your controller code. ... Am I missing something here? You can use *exactly* the same reasoning to say you should put conventional view files in your controller. Why does it only become inefficient "at that point"? &gt; I guarantee that someone will come to that conclusion. Somone is most definitely welcome to, but it will be a horrible conclusion to come to, and their code will become horribly convoluted because of it. I couldn't give a stuff about them, they'll find a way to disorganise their project whatever they do, if they make those kinds of conclusions.
In PHP 5.4 you're able to do this: $class = (new SomeClass())-&gt;someMethod()-&gt;anotherMethod();
&gt; // doesn't work &gt; new SomeClass() &gt; -&gt;someMethod() &gt; -&gt;anotherMethod(); To me, it makes absolutely no sense why you would even try this? If you wanted to call these methods without creating an instance variable, you need to declare the methods with the *static* keyword and then you can call them like: SomeClass::someMethod(); SomeClass::anotherMethod(); 
EDIT: its not faster, its slower. its cleaner, and from what i can tell, its faster as well: &lt;?php $loops = 100000; $strs = array( 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ' ); $start = microtime( true ); for ($i=0; $i&lt;$loops; $i++) { $var = $strs[0].$strs[1].$strs[2].$strs[3].$strs[4]. $strs[5].$strs[6].$strs[7].$strs[8].$strs[9]; } $end = microtime( true ); echo 'concat: '.($end - $start)."\n"; $start = microtime( true ); for ($i=0; $i&lt;$loops; $i++) { $var = implode( ' ', $strs ); } $end = microtime( true ); echo 'implode: '.($end - $start)."\n"; ?&gt; at least for me. results in something like: concat: 0.070356845855713 implode: 0.057484149932861 
What is the advantage of that? It's way longer than setting a static keyword before your methods ...
what if you want to instantiate a new object?
I've actually never tried to instantiate a class with static methods...
My guess would be that it has something to do with the way the PHP interpreter parser "arguments" with the *new* keyword. Chaining is bad anyway (it never improves readability, only can be make it worse) ... if you need to do $class-&gt;method1()-&gt;method2() you should really create method3 that calls the other two
I'd have to say it looks a very useful way of confusing the hell out of a beginner coder if you want to mess up their coding habits from the start and that's about it.
It should work. It's just parser bugs. Before version 5.4.0, PHP also cannot handle this: function foo() { return array(1, 2, 3); } echo foo()[2]; // 3 
I don't think that it's cleaner, but I guess cleanliness is in the eye of the beholder. And your measurement example is a bit rigged: in your original you don't have an array, you create the array just before you implode and forget it. Also in your first measurement loop you have ten array element lookups, which are not found in your original. For this one: &lt;?php $loops = 100000; $start = microtime( true ); for ($i=0; $i&lt;$loops; $i++) { $var = 'one ' . 'two ' . 'three ' . 'four ' . 'five ' . 'six ' . 'seven ' . 'eight ' . 'nine ' . 'ten '; } $end = microtime( true ); echo 'concat: '.($end - $start)."\n"; $start = microtime( true ); for ($i=0; $i&lt;$loops; $i++) { $var = implode( ' ', array( 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ' ) ); } $end = microtime( true ); echo 'implode: '.($end - $start)."\n"; ?&gt; I get: concat: 0.035006999969482 implode: 0.12302803993225 
Your construct doesn't return anything, so there's no object to further act on. Change your __construct to also return $this, and you should be good to go.
You could use a singleton pattern to create a new instance and immediately call methods of it. SomeClass::instance()-&gt;someMethod()-&gt;anotherMethod();
Advantage: Not having to create a static method when this will work fine.
This'll do what you want: &lt;?php class SomeClass { function __construct() { } function someMethod() { return $this; } function anotherMethod() { return $this; } public static function factory() { return new SomeClass; } } $foo = SomeClass::factory() -&gt;someMethod() -&gt;anotherMethod(); 
Thanks for the information. Wouldn't that be much more taxing on the system?
constructors return the object ($this). in php they cannot return anything but the object.
Here is a good scenario: http://www.reddit.com/r/PHP/comments/lbm73/what_is_the_reasoning_for_instantiating_a_class/c2rddty
Although not optimal, a potential solution would be to implement a static method which returns a new instance, like so: public static function newInstance() { return new self; } This will allow you to instantiate and chain it in the same statement, like so: SomeClass::newInstance()-&gt;someMethod()-&gt;anotherMethod(); I'm sure that they'll fix this behaviour in the future, but until then, creating a static method or using two statements are your only options. 
People do this all the time in other languages. In Java, for instance: final Thing thing = new Thing().isRed().isSquare(); thing.doSomething(); Especially with jQuery: var table = $('#table').isRed().isSquare();
Here's a possible scenario: &lt;?php $foo = new Model_Baz; $foo-&gt;where('name', '=', 'scibuff') -&gt;where('id', '=', '44') -&gt;limit(1) -&gt;get(); Some people also like doing this, which is also perfectly reasonable: &lt;?php $foo = Model_Baz::factory() -&gt;where('name', '=', 'scibuff') -&gt;where('id', '=', '44') -&gt;limit(1) -&gt;get(); Using your way, we could do: &lt;?php $foo = new Model_Baz; $foo-&gt;where('name', '=', 'scibuff'); $foo-&gt;where('id', '=', '44'); $foo-&gt;limit(1); $foo-&gt;get(); Or we could do &lt;?php $foo = new Model_Baz; $foo-&gt;build(array('name = scibuff', 'id = 44', 'limit 1')); Obviously that last example could be made much clearer, but you get my point. Chaining methods can greatly increase readability when done correctly.
True, I like the method chaining in jQuery. 
This is what I was going to suggest as well. Factory or singleton patter would accomplish it just fine if it's needed.
It's not a bug. He's not returning `$this`, but the point is moot because previous to 5.4 you can't chain off of constructor method.
someMethod and anotherMethod may be perfectly useful methods of an instance on their own, but also useful for configuring a new instance as well.
Here is an example of how to get the instance: http://www.php.net/manual/en/language.oop5.static.php#101350
Personally, I'd sort and store the data server side (it's faster) and cache the report request. 
Any non-text editor will easily match braces for you. I personally dislike that alternative syntax (foreach: endforeach) and prefer using braces. As a side note, no IDE I've worked with matches up the alternative syntax, so this downvoting is very peculiar to me.
&gt;Now the question is where is the best place to generate results for reports? Ideally there are three places Uh. All of them? The database is your data store. It's self-evident that you need to fetch your data from there. Your PHP back-end compiles and formats the data and ships it off to the browser. The browser parses the results and displays it to the user and usually offers different methods of interaction. I'm afraid your question doesn't make a lot of sense. **Edit**: People have reacted strongly to my responses, and I just wanted to clarify that I am not trying to come across as condescending. I am just trying to get OP to properly describe the issue he is having, as I do not currently understand what the problem is. 
If you're doing MVC architecture, your views should be full of code which calls templates. Your views should strictly control what information your templates have access to. Say you pass an instance of a user model to your template: &lt;?php class User extends Model { public function get_name(){} public function get_address(){} public function delete(){} } The first two methods are safe to use, but that `delete()`? You designer/front-end guy should never have direct access to this method. It's public because you, the developer, want access to it. So, you strictly control what's available in your templates. You tell your designer, "You have access to {foo} and {bar} and {baz}" and don't have to worry about anything going wrong. I use Mustache, which is extremely logic-less. I enjoy using it, and I feel it gives me, the developer, the maximum amount of power to dictate what the designer can and cannot do to my carefully crafted system. On the other side of the pendulum are Wordpress themes, which have access to anything and everything within the template files. That said, template engines aren't for everyone. They slightly slow you down while developing, but the security tradeoff, I believe, is well worth it.
You clearly don't know programming that well. Constructors cannot have return values because the object itself is returned upon instantiation. Constructors are merely there to allow you a method of loading resources and instantiating properties with data required for the class's operation.
If you look in jQuery code, you can see all functions returns jQuery - and this is also possible in PHP class Foo { static protected $_instance = null; protected function __construct() {} static public function getInstance() { if (self::$_instance === null) return self::$_instance = new self; return self::$_instance; } public function isRed() { return $this; } public function isSquare() { return $this; } public function isValid() { return true; } } $o = Foo::getInstance()-&gt;isRed()-&gt;isSquare()-&gt;isValid(); // output: true
This syntax works perfectly in Java and in JavaScript. It works in C++ if you put parentheses around the `new` expression. It probably works in other similar object-oriented curly bracket languages. PHP (&lt; 5.4.0) is the odd one out here. It's a parser flaw. Also, *returning* $this is a barmy notion. It's a constructor. Constructors do not have a return value (and in statically typed languages they don't even have a return type, not even void). Try to return a value from a constructor in PHP and it will be silently ignored.
I'm sorry but you will never convince me that &lt;?php echo &lt;&lt;&lt;OUT &lt;div&gt;$test&lt;/div&gt; OUT; is better than &lt;div&gt;&lt;?=$test;?&gt;&lt;/div&gt; For a view. Also even though PHP strings are mutable that doesn't mean that the speed to concat a string the size of most heredoc statements is faster then just writing the data straight to output. Think about it, before anything can be written to output you first have to compile the string and interpret all of the variables, then run the echo which writes the string to output. Instead of write to output if you hit a variable write the value to output. You are right about caching it makes all of this a moot point but not every part of a page can be cached. &gt;You can use exactly the same reasoning to say you should put conventional view files in your controller. Why does it only become inefficient "at that point"? That's true, and I have seen it done before (to my dismay), but it isn't as easy. You have to close your PHP tag, then put the html in, then reopen your PHP tag. Whereas with heredoc all you do is drop it into your controller method, no PHP tag manipulation required. All it takes is some young upstart trying to show off and you will end up with everything in your controller. I have had to clean up messes like this before, it isn't pretty. &gt; I couldn't give a stuff about them, they'll find a way to disorganise their project whatever they do, if they make those kinds of conclusions. I think you must have created a lot of the stuff I have later had to re-engineer ;) I can't tell you how many times someone had a nice system created for them, the creator moved on and the maintainers took over for a year or two. Then the owner wants a new feature and the maintainers can't figure out what to do because they have screwed up their nice code base. You want to do things that make it difficult for people to disorganize their project and the MVC aids that greatly. The clearer you can make it that something is a view then it's less likely to become part of the controller even when someone new comes onto the project. 
The main drawback to statics is you lose the ability to unit test since they are really tough to mock on the fly. You basically have to provide your own mocks for static classes. I think that's a big enough drawback for most to avoid them. I'm still torn because I really like the efficiency and simplicity of the code...I think it's more readable to have: $money = Format::money($money); than $format = new Format(); $money = $format-&gt;money($money); With 5.4, it looks like you could do: $money = (new Format())-&gt;money($money); Which could be a good compromise potentially.
Possibly if you had the __construct method return $this then you'd be able to do this...
As mentioned elsewhere you can do what you'd like with or without a singleton pattern: class Something { protected $x, $y; public static function instance(){ return new self; } public function moveTo( $x, $y ){ $this-&gt;x = $x; $this-&gt;y = $y; return $this; } public function out(){ echo 'x: ' . $this-&gt;x . ' || y: ' . $this-&gt;y . ' -- '; } } $myvar = Something::instance()-&gt;moveTo( 100, 100 ); You could even add variables to instance() if you want to pass to the constructor. Edit: You have to understand this is different from a jQuery type thing.. If you wanted to do a jquery type thing you could do something like this: function initObj(){ return new Something(); } Then: initObj()-&gt;moveTo( 100, 100 )-&gt;out(); If you notice when you use jquery you never do var myObj = new $('asdf'); Because jQuery returns an object.. it isn't be instantiated as an object. You can use this same pattern. 
There is a way around it. Just define a function that returns the only argument it is given: function _($x) { return $x; } _(new SomeClass())-&gt;foo();
When data is retrieved from the database, its just data. When is compiled and is sent to the browser its still just data. Infomartion is derived from data and has a meaning too it. Example: 30% of the users are male, 50% were over the age of 30, etc. Generating those results can be done in sql, javascript or php. The question is which is the best.
&gt;Generating those results can be done in sql, javascript or php. Uh, no. You require a data store from which you retrieve the data from, you require a back-end which processes said data and delivers it in an appropriate format (HTML/JSON/XML/whatever), and you need the browser to actually display it to the user. With just SQL, you have no method of delivering said data to the user (unless he has direct access to your database). With just PHP, you have a method of delivering data, but you don't have access to any data source. And with just JavaScript, you have a method of handling browser behaviours and fetching data from a server, but you don't have access to a back-end to serve up the data, let alone a data source. I suggest you go back and reformulate your question to make it more intelligible. 
sheeeeeit. good thing i think it looks 5 times cleaner, or else i'd have have alot of scripts to edit, *again*. tl;dr; sheeeeeit.
Jesus, dude. Take it easy. If you don't understand what he's asking just move along, no need to effectively call him an idiot. 
&gt;Jesus, dude. Take it easy. If you don't understand what he's asking just move along, no need to effectively call him an idiot. What the hell are you talking about? I'm merely explaining to him that the question in his current form does not make much sense as all three parts are required to fully generate and display a report. I am asking him for clarification as to what he means, as one should when the question isn't clear. Nowhere have I called him an idiot. Now, I suggest you stop overreacting and go cool off somewhere. 
In my experience you should do as little as possible in the database. It seems that summing can be done extremely efficient outside of the database but you may have to write some dedicated functions. That's what I did. For instance I once had to generate a bunch of reports with a little under 1000 crosstabs in each with various summing (count, means etc.). I had the database make one big sort of all variables (many "union all"), then I had php iterating over this array doing all the summing etc. Finally I had a function iterating over the summed array making the output to the report. There were around 12000 rows in the database for these reports. At first I did all the work in the database and each report took up to 15 minutes to generate. After I changed it, it took consistently between 2 and 3 minutes, of which only about 5-10 sec were not spent in the database. I guess you could do something similar, either throw the raw sorted data at the client and have javascript doing the final aggregates or perhaps doing some partial aggregate before it's transferred.
Depending on what reporting needs to be done, you can employ some data warehousing techniques in a combination of php and sql. You can generally think of running reports as a "request to build a report" and a "request to view a built report". The former is usually the tricky part since many reports will require some degree of complex queries and aggregation and can be quite expensive to run on the fly. The latter is the easiest if you already have the data prepared for you from a build request. Basically, you'd be running an on-demand ETL for the data you need to present. What I've done in the past is maintain operating data in my relational tables and then have separate tables that are customized for the reports. So, when I need to build a report, I run a complex query and populate this into my report table. Once it's generated, I can very quickly retrieve the contents of the report without the overhead of an expensive data transformation. Now in terms of your options of showing reports, my take would be the following: 1. Utilize MySQL to maintain your relational data and your report tables. Run expensive queries to populate the report tables. 2. PHP will let you interact with the database, run your report query, perform any additional transformation/presentation logic and then store in the report database. You will also pass reports to the browser in a form that makes most sense (HTML tables, JSON, etc) 3. Javascript will let you maintain a rich interaction with the data built/prepared from both PHP and MySQL. Does this help?
It all depends on what kind of report you have to present to the user. If your report is just a some basic summary data (counts, averages, sums) then the majority of your report generation will be done in the database. PHP is just the transport for outputting that data on the page. If, however, your report needs to take a bunch of different data and perform analysis on it... well, you _could_ use a stored procedure on the DB, but since the database is often the bottleneck in an application it makes more sense to perform that computation in PHP. Performing the computation in the browser does have the benefit of alleviating some CPU demand on your servers, but that comes at the cost of transmitting all the related data to the browser first. Depending on the volume of data needed for the report, that could be prohibitively large. You also have to take great care with writing the data processing code, since you can't have long running JS routines that block the browser event loop. If PHP takes a couple seconds to respond it's just a slow page load, but if JavaScript hogs the browser for a couple seconds users get pissed. There are also security concerns with sending that data to the browser for computation. You may not want all that data to be viewable by users (and anything that leaves your server, regardless of protocol, is viewable by users).
You're being a little too literal I think, obviously all three have to be employed. The question is more about where the bulk of the processing should occur.
Wow, I'm going to have to completely disagree here. There is just no way a properly tuned database is going to be slower than php for doing something like as simple as a sum.
15 minutes to process just 12000 rows? Ouch, something isn't right there.
Well, that clearly depends on the case. We haven't gotten a lot of information as to what kind of information will be presented on the reports, how the user interacts with this data, how often the data updates etc. Edit: If you people are going to downvote me, at least tell me what's wrong about what I just said. 
I have my doubts how intense that really is. If you set it up correctly, you should be able to get away with just 1 database extra database call per page (just load all that user's permissions then). If you determine that the database is a bottleneck, you can always use something like memcached to save the info, which would can easily be updated when an admin makes a permission change. 
That would be 12000 times 900 or so but still very inefficient.
You aren't asking him for clarification. You're telling him his question is unintelligible. That's extremely condescending, and phrases like &gt;Uh. All of them? ,and &gt;Uh, no. are clear examples of this fact.
You wouldn't call anyone an idiot, that'd be mean, but multiple paragraphs talking down to them about simple programming concepts is just you asking for clarification. BS, if you thought he wasn't an idiot and really wanted clarification, you'd have asked a real question... but your response had 0 question marks. Nah, you're merely being a typical know-it-all coder who's default attitude toward most people is "This person is retarded and I can only hope to transfer some of my vast understanding to them"
&gt;You aren't asking him for clarification. Yes I was. I suggested that he would go back and reformulate his question to make it more understandable. &gt;You're telling him his question is unintelligible. If it was understandable, it wouldn't need clarification, would it? &gt;That's extremely condescending I'm sorry you feel that way, because it was not my intent to seem condescending. &gt;phrases like [...] are clear examples of this fact. "Uh" is condescending? 
&gt;but multiple paragraphs talking down to them about simple programming concepts I wasn't talking down to him, and I'm sorry you people interpret it that way. &gt;BS, if you thought he wasn't an idiot and really wanted clarification, you'd have asked a real question... but your response had 0 question marks. Seriously? I asked him to reformulate his question to make it more understandable. &gt;Nah, you're merely being a typical know-it-all coder who's default attitude toward most people is "This person is retarded and I can only hope to transfer some of my vast understanding to them" Well, you've already made up your mind about me, so okay. I could tell you that you are wrong, but I doubt that'd do much to change your opinion of me. Good day. 
I'd suggest build the report in Crystal Reports, then export to PDF. This has adventagers as it seperates out the report writing from the coding, and if you have access to a very good report write (and presenter) it will look much better. Here's how you connect it: &lt;?php if(isset($_GET["invoiceNo"])) { $invoiceNumber = $_GET["invoiceNo"]; } else { $invoiceNumber = '00000001'; } //- Variables - for your RPT and PDF $my_report = "C:\\reports\\invoice.rpt"; // rpt source file $my_pdf = "c:\\reports\\reportoutput\\invoices\\".$invoiceNumber.".pdf"; // RPT export to pdf file //-Create new COM object-depends on your Crystal Report version $ObjectFactory= new COM("CrystalReports115.ObjectFactory.1") or die ("Error on load"); // call COM port $crapp = $ObjectFactory-&gt; CreateObject("CrystalDesignRunTime.Application"); // create an instance for Crystal $creport = $crapp-&gt;OpenReport($my_report,1); // open the report file //- Set database logon info $creport-&gt;Database-&gt;Tables(1)-&gt;SetLogOnInfo("&lt;PATH TO DATABASE&gt;", "", "&lt;USERNAME&gt;", "&lt;PASSWORD&gt;"); //- disable field prompt or else report will hang $creport-&gt;EnableParameterPrompting = 0; //- DiscardSavedData - to refresh then read records - optional //$creport-&gt;DiscardSavedData; //$creport-&gt;ReadRecords(); //this report takes a parameter (the invoice number) so send it through $creport-&gt;ParameterFields(1)-&gt;AddCurrentValue ($invoiceNumber); //export to PDF process $creport-&gt;ExportOptions-&gt;DiskFileName=$my_pdf; //the name of the exported file $creport-&gt;ExportOptions-&gt;PDFExportAllPages=true; $creport-&gt;ExportOptions-&gt;DestinationType=1; // export to file $creport-&gt;ExportOptions-&gt;FormatType=31; // PDF type $creport-&gt;Export(false); //run the report and export the file //------ Release the variables ------ $creport = null; $crapp = null; $ObjectFactory = null; //------And Now -&gt; Embed the report in the webpage ------ echo "&lt;embed src=\"".$my_pdf."\" width=\"100%\" height=\"100%\"&gt;" ; ?&gt;
yeah, it can be frustrating trying to why people respond to you how they do... but if you took some time to consider that other people's experience of you may be valid (at least in some way) you'd probably learn a lot more about how you present yourself and become more effective at getting people to clarify things. But yeah, good day, and for the record, I don't make up my mind about strangers within a single reddit interaction
I guess text isn't a very good medium to communicate over, as people tend to project and interpret the text in different ways due to the lack of cues which are otherwise present in verbal communication (not to mention body language). I was merely trying to offer my understanding on how things work to provide a foundation as to why I did not understand his question. I am sorry that you all interpreted my responses as hostile and condescending, as that was not my intent. I am not a native English speaker myself, and the cultural differences in communication might be partly to blame for this misunderstanding.
Likely you need to rethink your SQL queries. Do you have indexes on any of the columns in your database?
&gt; I'd suggest build the report in Crystal Reports But now he has TWO problems...
Isn't Crystal Reports windows-only, though? 
When I did procedural php development, i generally avoided short tags as they added one more thing that 'didn't fit' on the page. In general, having embedded css, js, and any 'functional' code on an html page gives me the shakes in one form or another. For pure readability (performance notwithstanding), keeping css, js, and all php functions, classes, and logic separate is the key to sanity, as well as preventing the next developer to work with your code from killing himself. 
Another question. I've got another instance where preg_replace didn't work for some reason. I'm basically wanting to echo out from X time - Y time. Here's what I've got. &lt;p&gt;&lt;?php echo date('g:ia', strtotime($item-&gt;get_date())); ?&gt; - &lt;?php echo date('g:ia', strtotime(preg_replace('/-.+$/','',$item-&gt;get_end_datetime()))); ?&gt;&lt;/p&gt; echoing 12:30pm - 6:46am for example. Which should be 6:30am - 6:46am. Any idea? Is there a way I could just subtract 6 hours from the first time?
Learning any one language should be a distant second to learning how to actually design a program. I've spent too much time fixing the work of php "professionals"... which amounts a gigantic heaping mishmash of random functions, 90% redundant code, and a lack of any cohesion whatsover. And throwing all your functions into a single, 2000 line 'functions' file is NOT the right way to do it. 
Try this: &lt;?php echo date('g:ia', (strtotime($item-&gt;get_date()) - (3600 * 6)) ); ?&gt; Strtotime just returns a number in seconds. Subtracting (3600 * 6) will subtract 6 hours from the number before it is rendered as a human readable date string.
nginx, yes. Windows, no. 
I cannot upvote you enough. I was actually somewhat close to getting it but I still get confused on where what goes in between what parentheses. I've much to learn.
No, you farm out the crystal report writing to a report writer.... that's the point.
Crystal through COM is, yes.
SQL injection is dealt with by prepared statements, no sanitization needed.
Are you saying there's Crystal Reports for other platforms which can be accessed through other means? 
If you don't have this option, you can only create text files from within explorer. That means you have to effectively edit the file twice to get the right extension. This registry operation eliminates that problem.
This registry tweak has nothing to do with coding habits. It's simply a quick hack to make the process of php file creation easier from within windows explorer. It also has the benefit of enabling php file creation to be automated via keyboard macros. I just created one macro that takes a single input from the user, then creates the php file, inserts a default template, saves the file and opens it in the browser. This would not have been possible without this registry hack.
You're doing it wrong if you're using Windows Explorer to create files and projects in PHP. May I suggest PHPStorm or NetBeans as an IDE and project manager.
Maybe later. For the moment, I'm happy with Notepad++
Truth to be told I wasn't the one who were supposed to do the database programming but circumstance forced it upon me. I did consult one of my friends about it but he basically said that I did it wrong but it was passable given the situation and that he didn't have the time clean it up. Still I was surprised that the actual summing over approx 900 crosstabs each consisting of 1x2 variables with several different sums took about a second or less in php on a core2 laptop - for some reason it was slower on my shared host. I guess the real culprit was to do with the amount of ram in the different stages.
Look into ExpanDrive. Costs about $15. Lets you mount remote FTP/SFTP/S3 locations as Volumes, in OS X and Windows. Never worry about an app having explicit FTP/SFTP support again. 
I love memcache, recently implemented it for our sites, we get about 40k visitors and around 300k page hits daily and here's our mysql performance now http://imgur.com/lu1WI
Behold the wonder of Haml: - users.each do |user| %p= user.name - if user.isadmin %p Admin powers!
This is a great question, one that I've tackled just recently. In short, it depends on the circumstances. I try to keep all HTML in the view, but if processing the data to build HTML obfuscates the view, I move that logic to the controller. What counts as "obfuscates" is a matter of personal aesthetics. In my opinion, your example code above seems appropriate in the view. But if you needed an entire code block to process the list, then I'd consider moving it to the controller.
You're doing the right amount of it. If you were to take it as far as you could go you would be composing html in your controller, which is a nightmare to maintain. On the other hand, you don't want to be doing any real logic in the view; control and flow statements (loops and ifs) are fine, anything more complex should happen before the view. A good rule of thumb is to prevent multi-level (nested) loops and flow control statements in your view (obviously this has caveats, but in general is a good way to go). Quick tip if you want to clean up that really long line with the list item: right inside the foreach, do something like $class = ($registry-&gt;page_number == $page_number) ? 'class="active"' : ''; Then your echo would look a bit cleaner: &lt;li &lt;?php echo $class;?&gt;&gt; &lt;a blah blah... PS, if you're using e() I'm guessing it's older cakePHP. AFAIK those helper functions have been removed in the later versions and anyone jumping into your code isn't super likely to know that's a shortcut for echo. I would just echo if I were you, but that's preference I guess. Good luck!
I try not to ever store html code in variables. For something like pagination, I would probably abstract it further than you did and have a function called *pagination()* and just make a call to that in the view. I do a lot of WordPress programming which has an interesting combination of MVC and pure OOP. For web programming, I tend to use something which I call MVCW (model-view–controller-widget). I would make *pagination()* a widget and let it handle getting the data, organizing it, and outputting it as html. Then you just drop *pagination()* into any view and have instant pagination. Pagination and the navigation menus are normally the only cases which I use "widgets" so I just have them as internal functions of the relevant controller (maybe with a separate view). Depending on the scope of the project and the widget, I might make a separate Widget class. Check out this [CodeIgnitor thread](http://codeigniter.com/forums/viewthread/109584/).
I would probably store the URL in the controller in this example, or create a method to build it. You don't even really need a method thoguh, just change your page array to have key/values. It's been a while since I've been elbow deep in PHP, but something like this looks much cleaner to me: &lt;?php foreach( $registry-&gt;page_array as $page_number =&gt; $page_link ): ?&gt; &lt;li &lt;?php if( $registry-&gt;page_number == $page_number ) e('class="active"') ?&gt;&gt; &lt;a href="&lt;?php e( $page_link ) ?&gt;" class="page"&gt;&lt;?php e( $page_number ) ?&gt;&lt;/a&gt; &lt;/li&gt; &lt;?php endforeach; ?&gt; As well, this would allow you to re-use the pagination template for any object designed with a page_array -- Or if you have multiple templates for pagination, your URL formatting will all be in the same place. Don't repeat yourself.
To answer your question for a different scenario... Money/Number formatting for instance -- I would likely have a formatting helper class or (*shudder*) global functions somewhere. Your account has &lt;?php print_dollar($account_value) ?&gt; &lt;?php print_plural($account_value, 'dollar', 'dollars') ?&gt; I would not have ``$account_value = '$20.00'`` instead it would just be '20' in the instance itself.
There are ways to use it on, "non-windows" platforms, such as [Crystal Reports for Eclipse](http://www.theserverside.com/news/thread.tss?thread_id=41650). Exactly what platform are you alluding to?
Netbeans has got something like that built in.
`e()` is a function i created that escapes before echoing
i actually extracted the common views into widgets. Pagination is in its own file so i just include that file, instead of calling a function.
I use snipmate.vim ([vim.org](http://www.vim.org/scripts/script.php?script_id=2540), [github](https://github.com/msanders/snipmate.vim)). Just added a couple new snippets this evening, in fact. Type the shortcut, press Tab to expand into the full snippet, then tab through the defined fields to modify the inserted block.
If loops are confusing for a person, they shouldn't actually continue until they've mastered them. Doing what you suggest just to avoid a for or while loop is wasteful due to the unnecessary array creation, and doesn't solve the knowledge gap problem.
For OSX [Transmit](http://panic.com/transmit/) is a much better, faster alternative They also make [Coda](http://panic.com/coda/) which is the only editor I know that doesn't make wasted calls to the remote location when doing simple file system operations. I have yet to find anything equivalent for Windows for WebDAV connections other than PhpED. 
I have a feeling that you are coming for a "stateful" language where your question would make more sense. When someone makes a request to a URL, you have to generate an instance of that class... You can't reuse an instance that you just served up to someone else. Or maybe I totally misread your question... I feel tired... The singleton pattern ensures that in a given request you create no more than one instance of a class. I would have to take a look at what your "parser" class does before I could fully understand what it is you are trying to do and then I could possibly give advice.
[Zen Coding](https://github.com/sergeche/eclipse-zencoding) for Eclipse! Turn this: div#page&gt;div.logo+ul#navigation&gt;li*5&gt;a Into: &lt;div id="page"&gt; &lt;div class="logo"&gt;&lt;/div&gt; &lt;ul id="navigation"&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 
JAVASCRIPT ONLY HAS FUNCTION SCOPE, WE SHOULD STOP USING IT.
Or that they hit return at the end of the file, like every other file format in existence.
space was an example. *anything* after that tag will be sent out, that includes a carriage return. Which, coincidentally, is the normal way to end a text file. There are even editors that will warn you if you don't.
whitespace includes carriage return. It's fairly normal to have a carriage return at the end of a file.
It sounds like you're serializing objects and saving them to a file. Is this correct? Are you not using a database?
You're fine as-is; your parser appears to be a type of Factory. If you unset() the parser when you're done with it, you don't need to create a singleton out of it. Based on the way you've described it, you might have to significantly refactor your class to correctly apply the singleton pattern. But yeah, make sure you call unset() for instances of the parser that are no longer needed when you're looping through in order to be kind to your memory footprint, and you should be gold.
Consider your needs: aggregate totals? sql sending data arrays to client? php rendering reports? js Probably works. Hard to really be sure without knowing your data...
That is some terribly unreadable code. &lt;?php foreach ($registry-&gt;page_array as $page_number) { $class = ''; if ($registry-&gt;page_number == $page_number) { $class = ' class="active"'; } $url = sprintf( '%s/%s/page/%s/%s', URL_ROOT, $registry-&gt;controller, $page_number, $registry-&gt;query ); echo sprintf( '&lt;li%s&gt;&lt;a href="%s" class="page"&gt;%s&lt;/a&gt;&lt;/li&gt;', $class, e($url), e($page_number) ); } ?&gt;
I know what you mean and sometimes I have no clue where to put the code. For example, you have a class that returns a timestamp, so you format it in the view, no problem. But then what happens when you have to make decisions on this date, for example, if you show two dates and if it longer than two days show the full date, for example "From: %s To: %s" instead of "Starts: " or something like that. Is it OK to complicate the view with this logic? I mean, it is in the presentation layer or should you create this in the model? (method to format this) Or drop it in the controller? Maybe create a helper? Confusing...
Of course if you are prudent enough to go down that route. I am just telling him as a matter of caution. Never hurts!
but I thought they removed *nux dependant libraries now that its in the core! The joke is I submitted a documentation request in php.net and the reply was they don't care about windows would you believe :D
but I thought they removed *nux dependant libraries now that its in the core! The joke is I submitted a documentation request in php.net and the reply was they don't care about windows would you believe :D
Care to share which project you're working on?
That's unreadable as well... :D
If you were using an IDE like any decent programmer, you wouldn't ever need to edit the file extension.
Platforms as in different operating systems. I asked you if CR was windows-only, and you responded that Crystal through COM was, implying that it was available on other operating systems as well.
In ZF the code you wrote would live in a view helper (lets call the class Project_View_Helper_PaginationPages), then in the view you do: &lt;ul&gt;&lt;?= $this-&gt;paginationPages($page_array, $active_page) ?&gt;&lt;/ul&gt; in this way you have somewhere that isn't quite a view because it is to PHP heavy, but it isn't squeezed into the controller because (after all) it is view logic.
In cases like pagination I'd probably just write a class for it (generally a zend view helper if I'm using ZF). I'm not that bothered about having html fragments in these but if there's more than, say, a div with something in it I might consider loading a partial for the content within the view helper.
View helpers in ZF are very handy and so quick to write and use. That was the thing I missed the most when I moved to Symfony2/Twig (you have to write Twig extension or macros).
My method is far faster than any IDE out there that requires user interaction.
Still can't find any use for this if I'm using Eclipse/NetBeans/etc. I have never once thought to myself, "Gee, I wish I could save myself 2.8 seconds by using a shell addon!" If you're creating PHP files via explorer rather than your IDE, you are doing it wrong.
As the previous poster mentioned it sounds like you're implementing something like a Factory pattern. These typically use static methods to satisfy the "there is just one of this and it doesn't need an instance" requirement. A singleton is only really useful when you need to ensure there is only a single instance of a class but that it is actually an instance (rather than an class with static methods that has no instance). For example most people use singletons for classes that manage a DB connection.
Is there something like that for Notepad++ too?
I haven't done too much yet with sf2, but I think that is what [embedding controllers](http://symfony.com/doc/current/book/templating.html#embedding-controllers) are for. More of an HMVC setup this way.
Separating views and templates solves this. It may not be practical for the rest of your current project, but for your next one I would highly recommend looking at something like https://github.com/zombor/KOstache Edit: Quite frankly, the downvoters of my comment are fucking morons.
What's unreadable about it? Haml keeps the syntactic goop to an absolute minimum.
Also available for other editors like sublime text 2, textmate, netbeans, notepad++ and more ([google code](http://code.google.com/p/zen-coding/)).
[Zen Coding for Notepad++](http://code.google.com/p/zen-coding/downloads/detail?name=Zen.Coding-Notepad%2B%2B.v0.7.zip&amp;can=2&amp;q=). There's plugins for other editors too on the [google code](http://code.google.com/p/zen-coding/) page.
What are you talking about, javascript is globally scoped..
Forgive me if this is totally off the mark... At what point are objects released from memory? I figured that they would be persistent for the duration of the user's session unless specifically destroyed. If I make a couple of repeated requests to the URL I run out of memory. I figure this meant that the objects were still loaded into memory and were not being destroyed once the request was completed. Is that not right?
No, I am actually parsing data from a company web page using [Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/).
Can an instance self destruct? I'm thinking something like this... &gt;class Parser { &gt; &gt; function __construct() { &gt; //This is where all of the work gets done for this class. &gt; &gt; $this-&gt;suicide; &gt; } &gt; &gt; private function suicide() { &gt; unset($this); &gt; } &gt;}
As soon as PHP has finished rendering a script all objects are released (and some during the execution of the script due to garbage collection). PHP does not have a persistent state -- Which makes me wonder why you are running out of memory after a couple of calls. The only data that persists is that of which you place in a user's SESSION variables, memcache or some other database type (or if you serialize something)
I sit corrected.
No, $this cannot be unset. 
You can use DOMDocument to eliminate using html in your pagination class or function. For example, &lt;?php function pagination($route, $currentPage, $numPage) { $doc = new DOMDocument; $ul = $doc-&gt;createElement('ul'); $ul-&gt;setAttribute('class', 'pagination'); for ($i = 1; $i &lt;= $numPage; $i++) { $li = $doc-&gt;createElement('li'); $a = $doc-&gt;createElement('a', $i); if ($currentPage == $i) { $li-&gt;setAttribute('class', 'active'); } $a-&gt;setAttribute('id', sprintf('page-%d', $i)); $a-&gt;setAttribute('href', sprintf('%s?page=%d', $route, $i)); $li-&gt;appendChild($a); $ul-&gt;appendChild($li); } $doc-&gt;appendChild($ul); return $doc-&gt;saveHtml(); } echo pagination('index.php', 4, 10); 
Y U NO KNOW ABOUT FUNCTION SCOPE VS BLOCK SCOPE?
No.
Symfony seems to be the winner lately. Zend is used in alot of commercial projects I've worked on, but the catch with it is its going to be really hard to learn Zend without having an already functioning project to use as an example.
There is nothing sensible about not supporting IE...
Oh cool, I have read about Symfony, never actually checked it out. In addition, I did take a look at Zend few times, pretty complicated stuff.
as is, you're quoting out of context, so by definition the folks reading it are not understanding what knuth meant. ensiferous is correct in this, you are not.
Also, thank you for your reply.
link to some of said bullshit articles?
Out of curiosity, and if you know, what's the advantages of Symfony over Code Igniter? I've been using Code Igniter for the last year or so after first getting into MVC but I'm always on the lookout for something better. I've heard a lot about Symfony and am curious if it is better than CI. 
I started with Symfony, but lately I've been using Silex (Its micro counterpart) and I get the feeling it would have been a great stepping stone. If you look into using Silex properly and read about Symfony at the same time, I think by the time you developed say... A blog or something, moving to Symfony 2 might be a little easier. Perhaps you're a little more adept with php than I was though (I'd echoed some variables and kind of understood what a function was when I started) and tackling symfony wouldn't be a bad idea to start with. Regardless, as much as I love symfony now, goofing around with silex to see what it's capable of has been a blast lately.
Sure, I've got a folder full of articles where they suggest the most inane things because blogspam is usually awesome. Oh wait, nope I don't keep them because they are pointless.
What is the result of the following code?: var hello = 1; function moo() { alert(hello); } moo();
How am I quoting it out of context?
moo executes in the top level names space, most likely window. in this context. Javascript scope is 100% function based. If you don't believe go look up some topics on things like binding scope (proxy in jquery), the module pattern for encapsulating data, or the effects of variable hoisting. Here's a better question, what is the result of the following code? var herp="one"; { var herp="two"; } alert(herp); Do you understand how the scope changes when the new keyword is used? Javascript scope is very different than most C like languages.
I could write a text of 1000 words here, about which MVC is superior,but, as beginner, I would suggest CakePHP, great, complete documentation
TIL most shite articles are not online and cannot be googled. drop the bullshit, it has no place in our industry.
http://en.wikipedia.org/wiki/Program_optimization#Quotes &gt; "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified"[5] — Donald Knuth
http://labs.phurix.net/posts/50-php-optimisation-tips-revisited echo is faster than print Wrap your string in single quotes (‘) instead of double quotes (“) is faster “else if” statements are faster than select statements ++$i is faster than $ i++ http://progtuts.info/55/php-optimization-tips/ Single quotes (’) with concatenation is faster than putting your variables inside a double quote (”) string. Use isset where possible in replace of strlen Incrementing an undefined local variable is 9-10 times slower than a pre-initialized one. Use absolute paths in includes and requires. http://css.dzone.com/news/6-php-optimization-tips Dot Vs Commas Concatenation explode Vs preg_split Single Vs Double Quotes Seriously, do I have to keep going? Do you honestly think that echo vs print or single vs double quotes is what is bringing down the performance of a site? At the end of the day these types of articles are everywhere, and a great deal of them are just blogspam that is copying from other blogspam. I didn't go to great lengths to pull these up either, I just googled "php optimization" and picked a few at random from the front page. For you to say that its bullshit that these articles exist laughable. Its kind of like "Man, has this guy been on the internet?"
Still not seeing it. In this case, we are looking at an absurd optimization where the code has oviously not been profiled, otherwise he wouldn't be asking "Hey, my application spends .0000003% of its time here, if I could shave off .000000006% of the execution time, would that be worth it?" &gt;We should forget about small efficiencies Yep, like worrying about consolidating php tags. &gt;should not pass up our opportunities in that critical 3% Check, not the critical 3% &gt;but only after that code has been identified Oops, the code has not been identified
For a good normative framework, I'd suggest [Alloy Framework](http://alloyframework.org/). It's a somewhat-strict HMVC framework that's very REST-centric.
Hello, This is Mike Auger, President of Pinnacle Cart. I was directed to this post from a Developer who thought it was important to read and address. I couldn't agree more with him. In 2012 you will see a drastic change in our commitment to the development community and I will start by committing to and addressing the concerns listed in this post. Based upon what I read, there is one main issue that creates other issues. - The ability to work locally on the cart - we will also open up access to the forums for non-cart users In our next release, this spring, we will have this resolved and provide you additional tools to assist in development. The upcoming API will also allow you to resell mods / themes / apps that you create for the customer base. We appreciate all the feedback good and bad and I want you to be able to address your concerns directly to me and our developer lead. I can be reached at mike @ pinnacle cart .com and you can reach our lead developer at doug @ pinnacle cart .com. Reverse engineering or hacking the login isn't an option and we aggressively pursue violations to our copyright. At the same time, I understand your frustrations and hear you. We will provide you better options in the coming months. As for comparisons to other carts and platforms there will always be a healthy debate. My contribution to you for consideration is security. Because your end user customers are completely responsible for breaches in customer data, security should be near the top of the list when researching cart options. Less than 2% of all carts on the market today carry the PA-DSS certification and none mentioned here are certified except Pinnacle Cart. Thanks for your patience and time. Mike Auger President &amp; CEO PinnacleCart.com
I would suggest moving to a micro-framework after you've had some experience with a full-sized framework. Generally I find I use micro-frameworks when I want more control over something whereas a full framework tends to abstract a lot of things away from you. It would be easier to get started with if your goal was just to learn to work with a framework.
I second this. When I was starting out with frameworks, Symfony had too much setup time for me. It was confusing as I was new to MVC. CodeIgniter bridged that gap for me perfectly. 
If you go with Symfony expect a pretty steep learning curve. Cake is 'easier' albeit significantly more complex than CI.
Codeigniter is probably the easiest to get started with, but you shouldn't spend too much time with it. It will teach you bad practices and leave you wondering why it can't do very simple things. Or why their caching system is a steaming pile of hashed poo.
Yii framework.
you've got a strange definition of bizarre, especially considering that only a few of these are specific to PHP. 
ah yes, the ole "lets pretend we were speaking in a context other than the context with which we were speaking, that way I don't have to give the other guy the point". 
I don't understand why everyone keeps saying Zend is hard to learn. It has generally very clean APIs, it's well documented, and the code is clean and easy to go over if the documentation fails to explain some particular detail. Everything is straight-forward and works as you'd expect, so why do I keep hearing it's "really hard to learn"?
http://kohanaframework.org/ http://cakephp.org/ http://www.slimframework.com/ All are great at getting off the ground fast.
It doesn't matter. Just pick one that has documentation and a code style you like. They all do the same things otherwise.
Do I need to use Unix to install codeigniter or can it just be done via the web? I've been writing my own everything for as long as I've done PHP and I've thought about looking into codeigniter, I just have no idea how to get started.
I am glad you asked this question as I currently have CakePHP, Zend AND Codeigniter on my system and am completely lost with all 3... lol
thankyou so much! Ill get on this tomorrow morning, WP-Robot took preference for a bit...
var herp="one"; { var herp="two"; } alert(herp); Just because the block has its own scope does not mean that it does not default back to global scope as soon as a local variable cannot be found...
Thanks. I have a self managed VPS and it's been a pain in the ass getting Python and all its packages, Ruby/RoR and all its packages, JSON, Emacs and everything else up and running. I had reservations about putting myself through that agony again but if its as easy as FTP + MYSQL then I think I can handle that.
Huh? The block has no scope. That's exactly why I wrote that. In javascript functions and objects are nearly the same exact thing. The "global scope" you're referring to is usually just the window object, which is the root object defined by the browser/dom. I'm really not sure what point you're trying to make about javascript variable scope, but it is indeed function based.
I second cake, it's got pretty good documentation and Version 2 was just introduced.
Seconded. this is my favorite framework right now. and I've played with many. Advantages: * it's extremely fast, * excellent documented, * with short learning curve, * OOP architecture, * GII - admin generator, * no separate template language, * routes mechanism, * rights mechanism, * tons of others big and little features.. I've built custom CRM, HR application, web based loyalty programme and tons of other... Because of a job I'm working with eZ Publish mostly right now, and yeah It's fine, but I miss Yii so much. EDIT: formatting.
Kinda hard to just jump into, though, since there's so much there. I hear CodeIgniter is better in that regard but I've yet to bother looking at it.
You think that's unreadable? Or you mean just the way mine is formatted?
I've used PHP Fat Free for a project or two. Highly recommended. http://fatfree.sourceforge.net/ 
So what do you do with those apis? Where do you start? How do you know if you're doing the right kind of thing?
I don't doubt that you have a point there. I'm still really inexperienced and I'm sure in 6 months I'll have a similar, different revelation about how I could have progressed easier.
Good breakdown. I've known for quite a while that php arrays are really heavy, but it's good to be able to put accurate numbers to the statement.
Extremely informative article without the normal "omg php sucks lol!" mentality that we see. Well done and thank you.
I think the problem with Zend for an introductory framework is specifically because it has all these API's. With Zend you can do damn near everything and once you have a firm grasp on PHP, it does do everything you'd expect in a manner you want. The problem is that for NEW programmers (not new to frameworks, but new to programming) they don't have a huge understanding on how PHP code works and how it's "supposed" to function. For them Zend is this huge complicated beast. Sure you can argue that you just throw them in there and they'll float to the top eventually, but why waste that time? It would be better to introduce them to a framework that expects that you're fairly new to PHP and have them work up to the point where they require something like Zend. Generally when you go looking for Zend, you already know you need Zend. 
You'll find most frameworks in PHP are just a collection of files that you'll upload to your project. There's some minor configuration to get it going, but most times it will walk you through that on the download page.
&gt; PHP ain’t C. That’s all this should tell us. You can’t expect that a super dynamic language like PHP has the same highly efficient memory usage that C has. You just can’t. You know what other language ain't C and has super dynamic everything? Javascript. Oh yeah, you know where I'm going with this. #!/usr/bin/env node var startMemory = process.memoryUsage().heapUsed; var array = []; for (var i=0;i&lt;100000;i++) array[i]=i; console.log(process.memoryUsage().heapUsed - startMemory + " bytes"); &gt; itsnotlupus@void:~/tmp$ ./test.js &gt; 1150216 bytes I'm not going to bother using Buffer instead of Array (which loses all pretense of dynamic typing or sizing, like SplFixedArray, and uses exactly 4 bytes for a uint32, unlike SplFixedArray), partly because it's actually not as easy to check the memory usage of Buffers since they're allocated outside of the V8 heap, and partly because this hopefully makes enough of a case that no, this is definitely not *all* that this tells us about PHP. For whatever reason, PHP hasn't felt the kind of evolutionary pressure Javascript interpreters have been under those past few years, and it shows. *edit: Trying with larger arrays, it seems like V8 is actually allocating 16 bytes per used array slot. It's unclear why it's seemingly allocating less than that on smaller arrays. Best guess is it's still allocating 16 bytes per value, and reclaiming some heap space from something else.
Oh man, this looks awesome. .must install and test it out..
upvote+ for kohana
I completely agree with you, 100%. My question was regarding fairly experienced developers, that make use of other similar(ish) frameworks and libraries, from whom I keep hearing variations of the same thing: "Zend is very hard"
I bet someone on the core team needed it for something and it was just easier to add it to the core than set up a whole extension for it.
Can you elaborate on why? I've never used Havij myself so I have no idea.
Fair enough, I think a lot of users who claim "Zend is very hard" haven't really spent a lot of time playing around with Zend. 
All the work should not be done in the constructor either. post some code and we will help you out.
Kohana is great
Yay for Kohana. Though the documentation is a bitch. Some fundamental things changed from 3.0-&gt;3.1-&gt;3.2, not to mention all the version 2 sample code still around.
CodeIgniter is great. I also like Kohana. If you aren't used to MVC I'd recommend writing a simple MVC framework yourself. You would of course be reinventing the wheel, but it's good experience and it will help you learn.
I just learned php without any frameworks in the beginning, but maybe something like cakephp. 
Laravel
It doesn't really matter much. If you find that your code is becoming unmaintainable, then you might want to look into other methods of validation, such as PHP's [input filters](http://php.net/manual/en/book.filter.php) or a validation library, such as [Zend_Validate](http://framework.zend.com/manual/en/zend.validate.html). 
Great! Thank you.
If you already know Codeigniter, try Kohana then, it's CI done right. You should get it quickly since structure is very similar (Kohana was forked from CI eons ago).
Just the way yours was formatted.
I will not disagree that there is potential for improvement here. 144 bytes per element really is much and I am not going to deny that one *can* use less. Your concrete comparison though compares two very different things. JavaScript has two distinct notations for continuous arrays [] and objects {}. PHP does not. PHP arrays are basically arrays, dictionaries and linked lists combined into one structure. (By the way, I would have preferred distinct structures in PHP too, but well, that's the way it is.)
I may be biased, but http://www.elefantcms.com/ * Minimalist * Very concise * MVC that acts like ordinary php scripts * Good organization of your code
Oh ok, i agree
This was interesting. It's been ages since I've learned something new about PHP.
I have recently tried Kohana, but it appears a lot of it has changed since it's days as a CI fork. It's HMVC, which I have still yet to wrap my head around. Also, their documentation isn't as idiot proof as CI's. 
i hate the idea of echoing html from functions
this is the approach ive been thinking of taking. Building a url is definitely somethign that can be done in teh controller.
This seems overly complicated for constructing a view
I don't understand why that discussion still comes up. You shouldn't be bothered with long vs. short tags if such things can be automatically rewritten. [http://include-once.org/p/phptags](http://include-once.org/p/phptags). You're welcome.
One of the reason I like programming in PHP is because the array is so versatile.
That's a fair point. The V8 engine is sneaky though, which makes truly even comparisons rather tricky.. If you replace `var array = [];` with a `var array = {};`, you'll get the exact same numbers, even though you're seemingly using an object. (Because internally, you're very likely not using a map-like structure at all.) In the same vein, if you replace `array[i] = i;` with `array[i] = i+1e-4;`, the memory footprint doubles. V8 is now using 32 bytes per object slot containing doubles rather than 16 for ints. More fun, deleting every element from the above structure except the first and last one actually increases the memory footprint rather than decreases it. It's also quite slow. I haven't benchmarked php's behavior, but I wouldn't be surprised if its behavior was more linear here. All in all, it means that under the hood, both engines are very different beasts, and it's likely to be near impossible to write a comparison that doesn't bias in some way against one or the other, short of being tediously exhaustive. In the end, we're comparing what the code itself actually mean to do as best as each language can express it, which is probably as fair as anything else. 
No, it is a very good practice.
The time you spend "playing around" is time you should have spent "working the guts".
funny...thats what I think about javascript and objects... (this is coming from a guy that has developed with PHP for the last 11 years, I don't hate the language [far from it]...but the last couple years I have been loving JS more and more)
Besides the mentioned `SplFixedArray`, there are also **[Judy Arrays](http://php.net/manual/en/book.judy.php)**. They seem to be lists predominantly, but no idea how much that would save. (Also once just resorted to strings as faux array store. If used as e.g. byte map that's also rather speedy.)
I often call !empty because it does isset and then checks empty string.
LIKE A BOSS
Thats good if you have one person on your website. If you didn't you would max out at 266 requests just from that one array. Many websites routinely get that kind of traffic. 
Too many notices are annoying. They are useful for debugging incoming parameters, but without a proper error handler nobody can stand them. I'm using OO wrappers with builtin filtering `$_GET-&gt;text["id"]` that also get rid of unneeded notices. (Unlike with isset() swamping, I can still bring them back for audits.) So yes, just use a filter or validation library to reduce both on the annoyment and the syntactic overload.
Good stuff. Good documentation too.
That's the tradeoff for having the luxury of a loosely typed language and no real differentiation between dictionaries and vectors. Maybe one day PHP will allow for stronger typing in this regard. It seems maybe kinda-sorta headed in that direction, what with the implementation of obj and array parameter hints.
Netbeans isn't bad, isn't perfect but it isn't bad.
Fully agreed -- I wouldn't have to rage if all the submissions to [/r/PHP](/r/PHP) were of such high quality.
[JetBrains PHPStorm](http://www.jetbrains.com/phpstorm/) my personal fav. Worth the price.
&gt; For whatever reason, PHP hasn't felt the kind of evolutionary pressure Javascript interpreters have been under those past few years, and it shows. I can tell you the reason -- competition. JS performance was hideous before V8 came along and embarrassed the big-boys like FF &amp; IE into improving their performance. I think this is most directly the result of the fact that JS is backed by standards, making it practical to develop competing implementations. PHP has no such standards (at least not that I'm aware of), and though efforts have been made to make forks and so forth, I don't think anyone's attempted to dethrone Zend as king-of-the-hill; I think most of the efforts have been around altering some functionality of PHP, which results in the code being incompatible with standard PHP code. Nobody can compete with Zend because the definition of PHP itself is a moving target... edit: forgot to add that PHP also has the luxury of making slow code faster by moving it to C. This doesn't affect the overall nimbleness of the language, but it does let you directly attack bottlenecks with an exacto knife-like precision. You can either write your own extension, or you can make your own performance changes and compile PHP (or the affected extensions) yourself.
The really big difference, actually, is where the code is run. Servers that run PHP code are extremely powerful compared to my moms pentium4 running windows/anti-virus/toolbars/browser all at once. Oh, and if the JS causes the page to "hang" even just a bit, you're failing -- most web apps can handle execution times in seconds and be ok, a browser interface cannot.
You missed the point -- if you are running something in your webapp that is triggered by a customer, is expected to be returned inline (not to kick off a background, scheduled task), and this process causes you to generate a 100,000 count array: you are doing it wrong.
I did not know that!
What if Reddit was written in PHP and the comments, the users, and the amount of up/down votes in the comments section were stored in a multidimensional array. A single post could hit that amount. 
Exceedingly well worth the price.
But it isn't and that would be the wrong way to code that page. It isn't even coded like that to begin with as it is. A page shows at most, what, 500 comments? That's a multidimensional array with 500 base elements and an object under each. Besides which, most of reddit is probably unbelievably cached which takes a lot of the array/query building out of the equation almost entirely.
What? I was discussing why JS has evolved to be such a performant language, and why PHP cannot even feasibly begin to do so. Your quip that 'servers that run PHP code are extremely powerful' is extremely situational; my test servers at work (100's if not 1000's of them) are mostly VM's spec'd with 1 proc (usually a 2.9) and 2gb RAM. Oh yeah, they're all Windows servers with active A/V. And I won't go into shared hosts, which I'd venture to guess is where a majority of public PHP scripts reside...
Herp, does your question (tracking defined functions) have a specific relation with the MVC pattern? Or even the faux MVC frameworks?
Awesome, IDE version 3 is great, I love the remote deployment feature :)
I would love it if Facebook's development with hiphop spurred the same kind of performance war for PHP that Javascript has gone through.
He's not making any comment about ~100,000 elements specifically. He's just using that as an arbitrarily large number in order to do easy benchmarking. I don't know why you feel the need to attack his use of it.
The big thing I don't like about JS is that variables have a global scope by default. If I do this: function thing() { var thingy = "lorem"; anotherThingy = "ipsum"; } `anotherThingy` is accessible from the global space, but thingy is not. You shouldn't be able to so easily create a global variable. It should require some sort of keyword at least.
Except that "0" (0 as a string) is considered empty which is a bit stupid as it may legitimately have been inputted 
I didn't realize there were so many filters. During my sifting through symfony I've never come across them. Is there a reason to reinvent the wheel here? I'll have to experiment with them and see how they work.
This is the correct and proper use of this meme.
So there could actually be a reason that you'd check isset() and !empty()? I saw this recently and thought for a moment, but never followed through to find out if it really made sense.
I also use PhraseExpress for coding. The advantage is that it works systemwide in any program. I also like it's flexibility of the text expansion options.
Wow that's some balls. 
I absolutely agree. The only thing that I find remotely annoying about javascript objects vs arrays is that you can't use the same looping patterns for both.
The problem here is that you're all developing on the same server, if you used version control properly working from a local version on your machine would be fine.
Unfortunately, I really doubt Facebook will be pushing for HipHop to be used by others; there's absolutely nothing in it for them, it'd just cost them money in supporting random people's edge cases. Someone would have to fork it, and honestly, it's probably not interesting enough to attract language developers. The reason Google push all sorts of nice stuff is that they have a huge amount to gain from a faster web; their internal statistics say that people are more likely to click Google ads on a page that loads faster, due to an incredibly complex set of variables.
It has a little ZF help built in, so for example while in an action you can right click and 'go to view' which is handy. It also hooks into the ZF CLI, but I couldn't get this to work right...
There are several reasons why it is not possible to run a local copy. Its far too complicated to explain but it basically boils down to an IP restriction (sounds stupid when its simplified like this but many people have tried many solutions to get it to work to no avail). However that is out of the scope of this request. There is still source control but SVN updates take forever because of the sheer volume of revisions and number of files. So slow infact Zend Studios failed remote indexing is actually faster than doing an SVN updates. 
That one is really easy to fix. Use jslint or something similiar and you will never have a problem with global space again. Although I agree, its a huge design flaw in js.
Use strict mode: "use strict"; anotherThingy = "ipsum"; Now line 2 will throw an exception.
I agree, more of this please, really interesting read.
wvenable: You're full of shit: http://codepad.org/7OCmpdGU
i don't think one exists. the majority of them out there that do completion are java based. java on osx isn't the speediest demon around. working over remote sources can be slow at the best of times. combining those is asking for disappointment, which you've had in spades it seems.
Why is SVN slow? We are only talking about 5000 files. Also can you explain in more detail why you are all developing on one machine, that to me seems to be the source of your problems.
It sounds like the problem is with your development environment - and nothing's going to get fixed by using different tools.
DCVS sounds like exactly what you need, not some wunder-IDE. Why in the heck you would want an IDE to do indexing over a network... I have no idea. Sounds like an awesome way to make any IDE as slow as a zombie.
It wouldn't be the wrong way. Any ORM is definitely going to give you array elements. You would send an array to your view to be looped through. So at the very least everything will exists in memory in two different places. If you add all the little kinds of data like it being someones reddit birthday or they edited their post, if someone is the OP, the numbers get way up there even if it is limiting how many posts show per page. Reddit needs to update all the time so I don't think you can rely on it caching too much data. 
http://www.sublimetext.com/
I've been playing with [FuelPHP](http://www.fuelphp.com) lately. It's similar to CodeIgniter but makes decent use of some of the new 5.3 yumminess.
Not an IDE
Don't use NetBeans if you are on OSX, you can't open files from Finder in NetBeans, which is annoying if you want to just look at a quick script you downloaded. I started using PHPStorm after using KomodoEdit for awhile. PHPStorm is pretty good, it still needs a few tweaks here and there. TextMate and Coda aren't IDEs either so I wouldn't consider them. Your best bets are PHPStorm, Zend Studio, and Komodo IDE.
Same difference http://wbond.net/sublime_packages/sftp https://github.com/notanumber/gitst2 https://github.com/lunixbochs/sublimelint
To all those saying "change your dev environment"... You're mostly right, but... the OP says that his original Zend Studio handled the job of remote indexing well enough to suit his needs, it's just out of date and won't be updated. Obviously it was/is technically *possible* to do what he was after, but not with modern tools for some many?) reasons. 
I have had experiences at my previous job with SVN being slow. A simple svn update would take 10 minutes before even starting to actually update. Solution: switched to git
I know jimdoescode said don't use NetBeans on OSX, but I have for a while now and absolutely love it.
"C++ defines keywords to act as aliases for a number of operators: and (&amp;&amp;), bitand (&amp;), and_eq (&amp;=), or (||), bitor (|), or_eq (|=), xor (^), xor_eq (^=), not (!), not_eq (!=), compl (~)." http://en.wikipedia.org/wiki/Iso646.h TIL about those preprocessor macros. Hard to find documentation on them and, of course, I've never seem them used in any real code. So, In C++ `or` is `||` by way of a preprocessor definition. It does not have a separate `or` operator like PHP. So you're still slightly wrong.
I should have clarified, that bug annoyed me but if you use NetBeans to open all files it works just fine. That issue was a show stopper for me.
&gt;no separate template language That isn't an advantage. PHP is horrible at this and it also encourages you to add logic to your templates.
I don't know if it fits all your criteria or not, but Coda is hands down the closest to perfect I've seen. I went through a phase of trying every editor. Just use coda.
I had no idea about input filters! Learn something new every day... Thanks :)
Coda is barely more than a text editor with code highlighting, very basic project management, and poor svn integration. My main problem with Coda is that it won't scan my project and offer autocompletion, which is very useful in a large project with many developers. It would also be useful to include php debugging integration.
My choice is Codelobster PHP Edition - http://www.codelobster.com It has special plug-in for many MVC frameworks.
Is the dev server on a remote machine? Can you connect to it locally via the local network? If so you could do a simple samba connection to the server and set those files to be your local files. Might be able to fake it with webdav too if it's remote - but I can't imagine how it wouldn't be slow as shit trying to index remotely for thousands of files.
This is actually mostly what I like about it. It does enough and isn't trying to do everything. Code prediction for me is annoying as it almost always was just lagging down my typing. I can see how many people do like this though, admittedly it's lacking in that area. I've never had any issues with the svn support though...
Unless they are Dawn of the Dead remake zombies. Then you better watch out, that IDE will chew your face off before you even are able to type &lt;?php
Just to flesh this out a little more - Like CodeIgniter, Laravel aims to have a small learning curve. It is small, fast, and has good documentation. The official website is: http://laravel.com
The code may seem complicate, but it's a lot easier to manipulate then using html. http://www.php.net/manual/en/class.domdocument.php
i disagree, seems a lot of other people do too
Considering the OP's above notes about how it's "just not possible to work locally", this is actually a pretty good suggestion. A few remote ssh user accounts, make everyone learn emax/vim, and get that app in questions setup with the various number of ide-like plugins is a pretty decent bet.
Just for the sake of testing, try sending something that doesn't have a domain at the end and see if that works. If it does, try changing your encoding to replace the "." with a "|" or something not normally in URL's and change it back in your controller. Apache might be seeing the .com at the end and getting screwed up. 
I totally initialise all variables properly, and fix all notices and strict warnings. It helps me build solid applications.
This. And then use Netbeans.
Thanks for the response. /index.php/home/new_url/google.com That works fine. It seems like http:// / http%3A%2F%2F is what's causing the issue.
For inputs like $_GET and $_POST, [filter_input](http://www.php.net/manual/en/function.filter-input.php) is really useful. You can even wrap it a bit to provide default handling and other goodies. Ex: function default_get($field, $default=false, $filter=FILTER_DEFAULT, $options=array()) { $value = filter_input(INPUT_GET, $filter, $options); if ($value === false) throw new Exception("Invalid GET value for '$name': '$value'"); if (is_null($value)) $value = default; return $value; }
PHPStorm seconded.
Use a wrapper function... function param($name, $default = NULL) { return isset($_REQUEST[$name]) ? $_REQUEST[$name] : $default; } 
try breaking the URL into Segments 3 and 4, with 3 being http or https and 4 being the rest of the URL. Then you can add the slashes back manually, or just use CI's prep_url() command if it's http. edit, or just send it without the http/https and add an optional 4th parameter to handle the few https cases you get. 
I think i had this problem before. Take a look at your .htaccess file. the regex for mod_rewrite probably isn't setup to handle one of those characters. I was having an issue in general with encoded urls and mod_rewrite. edit: I remember what the problem was. You have forward slashes as part of your url. Even though they are encoded they are unencoded by the time mod_rewrite sees them so it's separating at each forward slash. i would print_r( $this-&gt;uri ) and see what all the segments contain.
Or a personal location on the dev server for everyone (still hooked up to svn / git of course). At my previous job, we all had dev environments like http://myusername.dev.example.com/ and that worked really well. We didn't need to waste time setting up a local environment, and we were always sure that the dev environment would be the same for everyone with regards to PHP version, extensions, etc.
I've had the same problem ... Add the following to your Apache config for the site, or via a .htaccess file: AllowEncodedSlashes On
Thanks everybody. From your suggestions, it's looking like I'll end up filtering slashes, to minimize future issues like this.
In my experience your IDE cannot effectively index files that are not on the local machine--mostly because they can't access the files quickly enough to make the development experience worthwhile. There are 2 options: 1.) Work with remote files and sacrifice the indexing (PHPDesigner does this well) or 2.) Take the extra time to get a local dev environment setup and use indexing (PHPStorm does this very well).
Assuming that $item-&gt;get_thumbnail() comes back NULL (or any other FALSE value) when there is no thumbnail: &lt;?php $image_src = $item-&gt;get_thumbnail() ? $item-&gt;get_thumbnail() : '/link/to/your/default/image.png'; ?&gt; &lt;p&gt;&lt;img src="&lt;?php echo $image_src; ?&gt;" alt="&lt;?php echo $item-&gt;get_title(); ?&gt;" /&gt;&lt;/p&gt;
PHP caches the results from file_exists and other functions. You need to use the [clearstatcache](http://us.php.net/manual/en/function.clearstatcache.php) function.
I don't know why you're getting downvoted. Sublime Text 2 is a great editor with plenty of 3rd party packages to make it a full-fledged IDE.
Any guides on this?
There's also an option in the config files somewhere that references "allowed URI characters". You might want to look at that as well.
You sir are a gentleman an scholar. That worked perfectly!
I'd rather see you use isset(), than have you be one of those guys who thinks it's ok to have an app full of variable not defined warnings.
Netbeans locks up on a 5000 line file I have to routinely make edits to. It was quite frustrating. Im on a Macbook Pro I7 4GB of Ram. I switched to a different IDE and no longer have these memory issues. I've heard some people blame this on java, but I don't really care the reason. It was slowing down my development. Edit: Other than the memory issues on very large files, it really is a pleasure to use netbeans
Add SublimeCodeIntel (https://github.com/Kronuz/SublimeCodeIntel/) to that and you're golden. The only thing I've noticed is that on *nix, ST2's window tends to go blank sometimes until I resize it. Not sure if this happens on Mac, though.
Answer this for yourself: How should the browser know beforehand if the server-side script will access the cookie?
You say SVN/git support but then you say you can't have a local working copy. Which is it? Having tons of people working on the same code base only underlines the fact that you should each be using a local working copy under version control. Personally I use vim plus command line use of SVN/git, but nobody can tell you which IDE to use; you need to try them all and pick the one you want. Also you shouldn't be using FTP/SFTP, as again, you should be using the version control.
Omg, thank you. The guy I work with doesn't do it, because his server doesn't have notices or warnings enabled. Really weird stuff.
Every cookie for the current domain will be sent. If you want cookies to work on sub-domains you need to set the cookie domain to '.example.com' (the prefixed period is important).
I had mixed-revisions problems with SVN during my last project. Solution: switched to git svn clone, rebase and dcommit. No one knows yet...
Yep, tried that and it still does the same thing.
Netbeans does all of these with the right plugins I think...
?&gt;
hahahah love it. 13 posts, 13 different frameworks.
I'm currently using CodeIgniter MVC framework. So It would be nice to be able to have all the function names at my fingertips as I type. I'm going to try installing PHPStorm like thinkspill mentioned above. 
The people down voting me probably didn't read. I said you should use the above code in your pagination **function** or **class**. 
I don't always compile my PHP scripts. No, actually I never do. And the Zend runtime (much like other interpreters) handles uninitialized variables exactly according to spec. For robust code it also helps concentrating on actual issues, [not](http://en.wikipedia.org/wiki/Cargo_cult_programming) hypothetical ones.
It was never intended to be used like that, it was designed to be used like this. $resource = connect($user, $pass) OR die("Could not connect");
I think monk_e_boy forgot to include 'echo' in his snippet, since ZendViewHelpers are meant to return markup, not output it.
Once a browser gets a cookie from a domain, it'll just keep on sending that cookie back to the domain on every request it makes, until it expires.
Coda. nothing else comes close.
How do you mean? There are tutorials, both in text and video form, all over the net on git and mercurial (the two most popular implementations of VCS). Google is, as usual, to the rescue.
&gt; Don't use NetBeans if you are on OSX, you can't open files from Finder in NetBeans, which is annoying if you want to just look at a quick script you downloaded. I think NetBeans is awesome for projects, but for simpler text editing a simpler program is better, such as sublimetext 2.
Ofcourse it does. There's nothing wrong with intentionally using uninitialized variables. But you're not doing yourself any favours. If you consistently initialise every variable it makes you write better code. If I get a warning or notice in my logs it *always* indicates a bug, usually a typo in a variable name. edit: my first reply was actually intended for [voilsdet's post](http://www.reddit.com/r/PHP/comments/nechh/is_it_bad_practice_to_use_isset_on/c38gv2i), sorry for the confusion
Huh? Cookies are sent in all subsequent HTTP requests to that cookie's domain, even when downloading pictures or loading stylesheets, etc.
in my humble opinion it is. PHP by itself is a template language, so there's no need to add another layer on it. keeping logic in controllers and developing quality code is up to you.
Let's refactor that a bit: if(!($image_src = $item-&gt;get_thumbnail())) $image_src = 'default.png'; This way you only call $item-&gt;get_thumbnail once.
I think /r/php is for total neophytes. every single post is someone asking ridiculously easy questions just a google away!
In PHP 5.3 you can also use this variant of the ternary operator: $image_src = $item-&gt;get_thumbnail() ?: 'default.png';
One controller for the pages, each page is a method/function; one (or maybe more) for the blog. I would honestly use an existing blogging engine and then use rss to display it on your site. I used WordPress.com and consumed the rss feed (nickshontz.com) with code igniter
So, I do need an IF in there. I'm still learning a lot but I thought that it may need that in there. Can you explain a little about what if does if that statement isn't in there?
Honestly? In my opinion, an MVC architecture would be a little excessive for such a small, basic site. MVC is fantastic for web applications, but for a nie basic portfolio site, you'd end up spending a lot more time on it that you'd need to.
Hey mate, I have been developing a few MVC sites in my spare time. If my advice is incorrect, someone please correct me. You're on the right track of making a controller for the basic pages (bio, portfolio, contact) and having a separate one for the blog. The blog controller would communicate to the blog model - which would contain CRUD functionality (Create: new blog post, Read: view/display post, Update: editing posts, Delete: removing posts). If you're thinking of using a premade MVC framework instead of rolling your own, I'd recommend [CodeIgniter](http://codeigniter.com/). It has an excellent [user guide](http://codeigniter.com/user_guide/index.html) and there are plenty of tutorials out there to get you started. edit: now that I think about it, maybe using MVC just for the blog.
I know it's excessive. I just want something small to be able to wrap my head around it 
Um.. can't really understand what you're not clear about. The line I've writen will: 1) assign the return value of $item-&gt;get_thumbnail() to $image_src (inside the IF) 2) then, it will check if _$image_src_ is empty ( in short: _if(!$image_src)_ ) 3) if it's empty ($item-&gt;get_thumbnail() returned an "empty" string (that could be "", null, false or 0) then the IF condition will be true, and the code _$image_src = 'default.png';_ will be executed The same code could be writen as: $image_src = $item-&gt;get_thumbnail(); if(empty($image_src)) { $image_src = 'default.png'; }
It all depends on how extensive you want the control and customization of your site to be. For something very basic you could have, class InformationController: public bio() public portfolio() public contact() //... class BlogController: public index() public addPost() //... class PostModel: $author $body $category //... With $author, $category, etc. just literal values (as opposed to references to other models/tables/etc.), that is, author is just an html text field, and categories a hard coded select. 
So for the InformationController, those methods would just load the respective views right?
Yes, or if you have an abstract controller which calls the methods, it could dynamically load the right view for you, and the methods may be essentially empty. class ControllerAbstract { public function dispatch($method) { $this-&gt;$method($v = new View($method)); $v-&gt;display(); } } Where view takes $method in its constructor to include the appropriate phtml/php file. This passes the view to the controller action, so the methods would now be, public function bio(View $v) { $v['title'] = 'My WebSite!'; } So if you were instancing a controller somewhere, you would call $action = $_GET['action']; //etc. $controller-&gt;dispatch($action);
Thank you for the explanation! 
I just prefer one program for all my coding needs.
I don't think there is anything wrong with using an MVC *architecture* here. MVC does not have to be big and complex. Whether it is a low-level framework that requires lots of programming, is more the question (that may or may not be what the OP is looking for, depending upon what the OP wishes to learn and what the future plans are for the site). If looking for a simple MVC framework, try FuelPHP. A four-page site could be put together very easily, with a lot learned in the process. Implementing a decent system, that follows good practices, and shows how a lot can be achieved with little work, is the important thing here, I suspect.
Take a look at codeigniter, fairly easy to understand. 
If you want to implement MVC why don't you use a well regarded framework first instead of trying to roll your own right off the bat?
I just finished refactoring the code for the parser/factory class. I did move all of the code out of the constructor and into separate methods that are called by the constructor. It made it 10x better as far as readability is concerned.
&gt; I just want something small to be able to wrap my head around it Thinking like a great programmer. 
I'd split off the portfolio into it's own controller class PortfolioController: public function list(); public function refine(); // Search for projects using filters (i.e. PHP) public function view(); public function addEdit(); 
I think building one's own MVC framework is a great exercise for learning how an MVC works under the hood. I've built over 1/2 a dozen over the years but have never used one in the real world--that'd just retarded and dumb. So, why not use a custom MVC for a personal portfolio site? I'd never work on a project/with someone who advocated building a custom MVC for a third party; here, use Zend Framework, CakePHP or whatever. 
If you need a dynamic portfolio you should perhaps consider making the blog generic enough to reuse; though the above is another acceptable way to go.
Just downloaded. IDK how I ever got by without this. I'm already 10x faster at writing html lololol :D
I was going to suggest you use the TinEye API, but it is super expensive. $300 for 5000 request. ImageMagick might do the trick, but you're going to have to build an algorithm. [compareImages()](http://php.net/manual/en/function.imagick-compareimages.php) might be a start.
That might be something I end up doing, because I'd like to be able to easily add/remove things from it down the line as I get more things to add to it, thanks for the idea!
Opencv has facial recognition but I don't know if it can tell if they are the same faces. Also there aren't (to my knowledge) php bindings for it (there are for python) http://opencv.willowgarage.com/wiki/
I disagree. A great programmer would use the correct tools for the job. MVC is over-architecture for something like this. If you're interested in MVC, make an app where MVC would make sense to use.
I have been using a micro framework called Silex for my site, which is essentially what you're looking into creating. You can build with silex using MVC architecture really easily, and it works quite well. Integration with Twig and Doctrine make everything so neat and tidy, although it would still be elegant without them. If you're interested, feel free to ask and I'll send you a github link to the site repo and you can use it as a reference along with others that are already available. Currently my site has a basic CRUD for the blog which is relatively secure, a portfolio section that is largely handled by the database, and generic information sections. All of it exists in a very svelte MVC style architecture, but without the weight or overhead of a full blown MVC framework.
Excellent article. PHP, as a project, made some big mistakes in the last few years but they are quickly recovering and good things will come from that. Hell, maybe we'll get to see proper Unicode support after all...
Yeah, i jsut highly disagree with building html like that
This is one of those big hard problems. I don't think exists a library that you can simply hook into. http://www.face-rec.org/ is a good repository of information about current trends in this technology.
He did say he had a blog on his site. That seems like something simple that could be revamped using MVC, plus it's probably one of the most commonly used examples in MVC framework documentation.
Wow, just looking at your site has given me some great ideas... This was great to look at because I was looking at the pages and thinking about how it works code-wise. I think what I will do is just make the main home/about page a flat html file, and then a blog controller and portfolio controller. Does that seem reasonable?
One surprising thing about face recognition is that even simple algorithms can do quite well. I would recommend taking a dataset (like FERET), and try writing a simple classifier. If you can build even a halfway decent classifier, try it on some faces extracted from your own images.
This guy has talked about image analysis and comparison before. Kinda hard to navigate so I've lazied myself out of finding a direct link to those posts. http://www.hackerfactor.com/blog/
Excessive? How do you have 9 upvotes and no down votes? MVC architecture is not complicated, it's simiply just separating the 3 parts Say you want a way to display a blog post. **front controller**: *index.php?page=blog&amp;post=3* $page = preg_replace( '~\W~', '', $_GET['page'] ); // Simplified sanitation require( 'controllers/' . $page . '.php' ); // Can use is_file() to check if page exists **Controller** *controllers/blog.php* $post = get_blog_post( $_GET['post'] ); // Model require( '../views/blog_post.php' ); // View You got MVC and a front controller in 4 lines
By the way, **everybody can help make PHP better!** The easiest way to get involved is contributing to the docs - you can start right away using the [online editor](http://edit.php.net). If you want to stay up to date with what is going on with PHP, [subscribe](http://php.net/mailing-lists.php) to the internals@lists.php.net mailing list. There are also two PHP chatrooms on [efnet](http://www.efnet.org/?module=servers): #php.doc for documentation related discussions and #php.pecl for src related ones.
I missed the mention of the blog. I'm just against using more than you need to get the job done.
[Write your own PHP MVC Framework (Part 1)](http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/) What I used for my first MVC. It's great for starters. Since then I've moved over to cakePHP, for now. I'm thinking about remaking my own MVC again later on.
Small accounting company. 5-10 employees. Require a sleek, 5 page content site. Contact form with success page. Google Analytics. Sounds simple? They also would like to be able to update the content. Extra work: Mobile/Responsive --- Edit: This is a fictional brief :)
A good way to beef up a portfolio if you can't find work is to write a blog - blog about interesting ways you do things with PHP/JS/HTML5/CSS3 etc. Explain how you've done it and why the code works that way. Nothing says you know your shit more than being able to explain it properly :)
That's true. I've thought of that before but never got around to it. I'm hoping to be able to build contacts through projects that can be referenced in job interviews. I get out of the Navy in a little over 4 months so I'm working on building my portfolio and getting my resume out there.
PM Sent.
Seemingly OP has not used a MVC framework previously, so I think it's a cart before the horse kind of scenario. I may be wrong though.
not surprised about php, since it is a language that was not designed. rasmus was some clueless dude about languages (just some guy who knows how to code), and zend was after the money from the start hence the monstrosity that is php. php devs are morons too for putting up with idiotioc nonsense like T_PAAFUCK_WHATEVER. no need for a better php. there are other languges better designed with better libraries than php. unfortunately, php will survive for a long time since a lot of noobs are incapable of moving forward.
Unless he was writing a CMS, I don't see how such a project would improve his php skills or add anything for a portfolio towards working as a php programmer.
It's not MVC support you need, then - there's not really much an IDE can help you with there except maybe quick switching to views from controllers. Any IDE with autocompletion should work for what you want. Aptana certainly does it, it's possible you just don't have it set up correctly - you probably just need to add the CodeIgniter sources to your buildpath. To do that, right click the project and click properties. Under PHP buildpath, you need to add the CodeIgniter folder — if it's within the project, add it on the first tab, if it's elsewhere add it on the second. It'll take 5 minutes or so to index, but after that you should be able to use Ctrl + Space to bring up suggestions.
Yeah that's kind of what I'm going for
This is a great idea. If I could browse an applicants' blog full of relevant information, I would be really stoked. A time stamped catalog of what they know, how they apply it, how well they appear to get it... Awesome. Also a great exercise in learning for the blog creator.
mvc always makes sense. minutes to implement 
No reason you can't document techniques used in your projects on the side! Coming from someone who takes part in hiring in this industry, something like this would actually set you apart quite a bit from others without a lot of experience. Most people I review have totally mediocre portfolios and at a glance I have no idea what's just a jquery plugin, what's actually a poor implementation of a poorly chosen cms, what's custom, etc. A blog would be like a glorious repository of code samples that are accompanied by your thoughts. If you lack a lot of experience, an employer might find that really useful for evaluating you.
That's the point, I think... CMS's are popular because they can let you easily make a non-trivial website, and that's because they cover the most common features. If you can demonstrate to me that you can program such a system (and that the code is good), then that's huge. Portfolios aren't always a "look how awesome I am" paradigm; they're also used for demonstration of skills, and of works done in the past. 
I'm just saying that such a project is... uh... rather large. If he had a portfolio and justed wanted a larger project, then yeah. But for one of your first projects, I think a CMS is rather complex to do on your own, and will take a bit of time to do.
I have done many projects in the past, but nothing other than for my own benefit. If I *were* to write something for this fictional company, I, as expletive-deleted said, would write it in a CMS format to allow for better code reuse.
Hi, I just stumbled in here through one click of the random button. I don't even know what php is, but I stayed at a Holiday Inn Express once and... Doesn't google's Picasa find the same person in multiple pictures? I'll be leaving now. 
Hey, if this isn't your first rodeo, then fucking A. Always write a project with a CMS or general framework in mind. In fact, as you code, you should also design a debug system, like a bar that pops up at the top when you are in development mode to let you turn on features such as "show DB queries", etc.
I prefer vim :) 
Now you're getting it.
If I understood how to use vim I probably would too. 
Code yourself a custom framework, then write a custom CMS with it :) Even if you never use it, it looks quite nice
Start contributing to your favourite Open Source framework or tool
Even as a tool for learning? This is his own personal project, not something he's getting paid for.
You know, there was a time when I was in the same boat as you. This guy is awesome. I love his style, as well as just his content. http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-novice-tutorial-videos/
Yup. Post to Github and you've got a nice little bit of resume meta.
Cliff notes version: Use Sphinx or Lucene. Don't use MySQL fulltext search. PostgreSQL full text search might be okay.
Apache solr
I use CodeIgniter and when I started using it I read a forum topic about best practices, and the developers said that no matter CI does support short tags and even have a config option to rewrite them if needed, it's better to do full tags like &lt;?php echo $var; ?&gt; all the time. So ... I stopped using the short tags.
Upvoted for Lucene - I've integrated it in one afternoon into my CMS and it works wonders.
[teehee](https://github.com/timtamboy63/Serene)
depends on your datatype. 
PHPStorm also works with remote servers where project files are indexed locally and auto-uploaded on change. I don't think is useful for the OPs situation, where multiple users work on the remote files.
I wouldn't call this 'GET /user/(:num)/edit' =&gt; 'user.profile@edit' intuitive. IMHO, this syntax is plain ugly. Tries too hard, and departs from the more recognizable user\profile-&gt;edit() way of calling controller methods.
What would you recommend to a client with these requirements?
LOL, nice name drop.
If you know C, you can write a User-Defined Function (UDF) for MySQL which allows you to use it as though it was a native function in MySQL, but has the benefit speed and is less bulky being custom tailored to your exact purpose. UDF's are a pretty advanced task though IMO. http://www.codeguru.com/cpp/data/mfc_database/misc/article.php/c12615
I really want to downvote this just because of your username.
You can easily achieve this functionality with open source CMS projects. The most common 2 are [Drupal](http://www.drupal.org) and [Word Press](http://www.wordpress.org). They can be setup without any programming knowledge and a little computer experience. They both have good documentation and communities making self setup very easy with a little google fu.
As important as it is to understand the functions of and how to build a framework yourself I feel that alot more could be gained by making a significant contribution to an open CMS. Both in credibility and for the respective community.
Here, take these )). I noticed they were missing.
But your username says it all
True true, though, in my case, when I started Serene, I had no idea how to read other people's frameworks, and I hated following other people's logi c, so perhaps writing your own is a stepping stone?
Wait a minute -- the author said that the biggest problem is no plan, and no direction. Is fleshing out more documentation and throwing some more voices on the mailing list really going to help with that? There comes a time when more people =/= better project.
Thanks for the tip... I don't use any of those MVC frameworks but the smarty and jquery plugins look useful.
I use Eclipse... however, my development machine has 12GB ram and an i7-2600 cpu. It has some small annoyances but was free and works great.
I built my own... it took less than a day and it outperforms every other framework I have tested because it isn't chock full of garbage or unnecessary overhead. 
So far all of your search types have been easily indexed things: older than, newer than, before ticket, after ticket - index on a timestamp assigned to - index on a user id status - index on the status type If all of your methods are like these, then you should just use standard SQL. If you're doing heavy text-searching, then I'd suggest using solr/lucene/sphinx like these guys are suggesting.
That's why I said to pick some other personal project to learn with. There's plenty of made up projects that are are more suited to MVC: todo list app, simple project management, invoicing app. If there's no need for a model layer, why use MVC? Looks like everyone's drinking the MVC Koolaid around here.
I was hoping to broaden the scope of the question to not just how the query would be formed, but how to grab variable amount of input from the user and properly prepare/bind/execute the statement.
I've always thought the factory method pattern was too obvious to even be called a design pattern.
Indeed, this is bullshit. If your code gets thrown onto a server that does not have it enabled, you enable it, instead of rewriting it everywhere in your whole codebase, ffs. What do you do if you don't have mod_rewrite? Rewrite all the links in your application?
You ask the administrator to enable it.
I found the fact it was classified as a design pattern was the most complicated part of learning it. Things that aren't magic could do without hocus pocus names. I'd prefer "Create Object Named by String" method. Then you wouldn't need to read an article to figure out what it is. :P
Not sure why you've been downvoted, `Product_MobileDevice::__construct()` is missing a couple.
Almost all the magic is done via **abstract** factory pattern. The factory pattern isn't really that useful when it comes right down to it.
Here's my code portofilio, so you can have some helpful hints. Currently 220 PHP files, 24,930 lines of PHP... http://repo.phpexperts.pro/ I also have my main CV online: http://careers.stackoverflow.com/phpexpert
Never used it but I read a while ago that [face.com](http://face.com) has an API.
What is this CruiseControl thing? I like code portfolio, thanks for the tips.
Sorry if this seems insulting, but do you know what a loop is?
You aren't sanitizing your inputs, all your SQL queries are vulnerable to injection attacks. To cut down on the boilerplate of form writing, you may want to look at either php frameworks and their form component (Symfony2 Form, Zend_Form) or some of the components available through PEAR, e.g. http://pear.php.net/package/HTML_QuickForm2
The comments by Dusan are very interesting
Wow.. I'm sorry, but is this for real?
Let me start by saying that I do have experience with using Membase in production. However with that being said, I still prefer Memcached over Membase. My reasons for still wanting to use Memcached / SQL over Membase is because I feel I have more ability to slice / dice / craft the data I'm storing in Memcached with sql commands. Membase has no interface / sql like syntax, its strictly a key-&gt;value store with persistence. So attempting to say give me all of the x users that were created on date greater than said date, needs to be done in other cumbersome ways, ie. you may have to fetch a bunch of objects and parse the data to figure out creation date. Agility in my book is out the door when this happens, and agility is key in enterprise systems / scaling. Last time I attempted to use it, I was informed that it would have atomic operations for push / pop on arrays in a coming release. However, it has been some time and they still lack atomic push / pop array functions, this would be helpful for dealing with cumbersome searches in a key-&gt;value store. This would also allow us to manage lists of information in a better manner, similar to how Redis allows us to do this. There are also little bugs that creep up if you aren't using the membase engine. If you attempt to use the memcached engine in membase, you may see strange memory allocation issues where it can't allocate more than 10MB, this may be fixed in newer versions, but last I knew it was still an issue. I've also seen Membase take nodes offline due to excessive disk thrashing. This goes completely against how a caching system should work, imho. Ultimately if you have a set of keys that fall out of memory they fall back to disk. When you get someone who comes in and requests that key, its fetched from the hard drive, then stuffed into memory, and served back. Problem is, if you have keys that are constantly falling in / out you can easily cripple your caching layer and cause a pileup while pulling from your hard drives. This is just another strange scaling issue that most people aren't aware of. Now this isn't to say that they haven't made headway / progress on some of these, but I'm not impressed by the product, and would rather deploy MySQL with Memcached v1.4.10. If anyone can shed some light on the problems I speak of, if they still are, or have been fixed, awesome. But in all honesty, the best thing I can say is setup a lab environment, and slam the living hell out of it. What works for some, may not work for you, what doesn't work for some, may work for you. Just remember, all system / network gremlins are different, be sure you know which ones you are dealing with.
As others have pointed out it looks like there's some basic concepts you haven't learned yet, particularly dealing with arrays and loops. I would suggest finding a php book and starting from the beginning to fill in those gaps of knowledge. Don't try to run before you can walk etc. You'll probably find that once you do fill those gaps you could probably re-write that code in a fraction of the time it has taken you.
Thanks for the reply. For reference, how long ago were you guys using it? And at what scale? Why were your keys falling in/out of memory? Was it just an issue of not enough instances running or was there another consideration at play there? I'm leaning towards waiting on this. Our current setup is working pretty well and we are doing some optimizations that should make it faster with the new code base. We're just a little concerned about it scaling out to 10x/20x/50x its current size. We haven't had to resort to sharding yet but if we keep going down the MySQL path that seems like it will be the next logical step. From what I can tell making the jump wouldn't be too terribly difficult as it uses the Memcached interface.
You want to use array_key_exists() to check if a key in an array exists, empty() to check if an array contains items or not, and isset() to check whether a variable is defined or not.
I'd recommend [Elasticsearch](http://www.elasticsearch.org/).
I use Zend Studio at work for the time being, which is very bloated and not perfect but has those features you mentioned. I'd recommend using proper version control (Git) and Vim with a variety of plugins. TextMate works too, and Netbeans is an OK, free alternative.
I can't speak on scale specifics unfortunately, but it is still being used. As for the keys falling in / out, its was exacerbated by some poorly written code that was using Membase for the cache store. The problem existed with large key -&gt; values being created for people with exceptionally long expiration times. What was going on is that information that had been created over the course of a month or so, was now being requested some time later. Unfortunately the requested information was the stuff that had been created at the beginning of the code's life, and the key/value had been persisted to disk; so now we had a bunch of caching machines going to disk to fetch information, very slow and painful at times. We had an influx of these requests / code flow problems when first going down the Membase path. While it can be argued this is a usage problem, this is still something that most people aren't aware of, so it can be an ugly gotcha that just sorta appears one day. Sharding MySQL would be one of your next options you can do. I would also suggest looking at memcached v1.4.10 if you aren't running a version 1.4.x yet. As for the jump, using Membase is pretty much like using Memcached from an api point of view. The back end systems setup / maintenance is a little different though.
"PHP community is looked down on in software engineering world and articles like this one backs that point of view." "PHP Master (as Sitepoint’s website and with such a bombastic name) should rise the bar when it comes to quality of the articles." I like this guys opinions!
lol - Yes. I hate forms I've got to be doing something wrong.
Not at all, this is why im here. foreach etc... Yes. I use it for iterateing trough data, what section would you suggest using loops instead for.
Its not live, I do try and sanatize user input. Thanks for the HTML_QuickForm2 that seems sensible, framworks seem to need a lot of time to get the hang off.
Sorry for being blunt, but it's not so much that you're doing something wrong as it is you're doing nearly everything wrong. * The code and the HTML aren't separated. * You have hundreds of if-statements in place of a loop. * SQL is not sanitized. * You have no input validation. * You have a strange method of checking for posted data, leading to the code being substantially bigger than it needs to be. etc.
Now let's get back to best practice: using something that already exists.
What the user would ideally want (what *I* usually like to see, but seldom do) is a decent search that actually finds relevant items. That in itself is a black art, which is often better dealt with by offloading to code that has already solved many of the issues involved. Go with solr/lucene etc. and focus on the business objectives.
Bingo :)
You should probably have submitted the URL your blog post wraps. http://www.jblotus.com/2011/08/27/understanding-filters-in-lithium-php/
This article is super flawed. Factories are all about creating classes that implement the **same interface**. The examples do not show this at all, the article does not touch it. This is NOT the factory pattern. This isn't even a standard pattern.
It's the continuous build system I setup to -- not to sound pedantic -- continously build my projects (on every source code checkin), check for syntax errors, run the unit and integrative tests, and if all the tests pass, to create the package (e.g. http://www.phpu.cc/mvc/phpu-mvc.zip), create the documentation, and handle automated releases to the testing, staging, and production environments. Cool, huh?
I was looking for a response from mediango to see what he would recommend.
Just sayin.
Garbage blogspam. Actual article is as noted by execrator.
Do tell.
By using loops you could realistically cut that 466 lines of php into about 30 lines.
Is a factory essentially a collection of polymorphisms, and rather than it being a design pattern exactly, it's just good code organization? Sorry if that's way off. I haven't really investigated factories yet.
Haha [extract](http://php.net/extract) would replace the first 160 lines or so!
Please write the article yourself if you're going to post your own site. I'm tempted to report this and just post the real article myself.
If you're suggesting using extract on the $_POST superglobal, then that would be a very bad practise. There's a reason why register_globals is disabled by default and has been deprecated since PHP 5.3.0.
I would say, list main framework (Zend, Cake, Symfony, etc.) Certifications also work as some people ask from time to time about them. Maybe what kind of environment they use (LAMP, WAMP or similar).
Editors / IDE's !
This is a good start: http://svay.com/experiences/face-detection/index.phps
Some sort of geek code? Like: ZF/WAMP/NetBeans/10yrs LAMP, WAMP (maybe [LW]AMP for both?)
The language(s) you'd prefer to use at your day job instead of PHP.
perhaps a flag for Zend Certified Engineers/Zend Framework Engineers?
It would *replace*, not fix.
So, you *are* suggesting that he'd use it on $_POST. Sorry, that's a terrible idea, and shouldn't be done at all. It opens up for potential security vulnerabilities.
I think that sounds good, of course there is going to be a lot of people using several environment, frameworks, etc. but at the end listing the main ones should be more than enough. The addition of the IDE is a good idea.
No I'm not, I was just saying that 1 line of extract is EQUIVALENT to the first 150-160 lines of that code.
I think there's basically two things that flair is used for: 1. Custom titles or swag. Examples: r/dogs (your dog's name and breed), r/nfl (your favorite team). If this is the case, I think we might as well just allow anyone to put whatever they want. 2. Something useful to say about the commenter. Like you mentioned, r/askscience uses these to greatly benefit their subreddit; r/Android does a similar thing with pointing out application developers. I think that option #2 makes the most sense because this subreddit is historically at least as much PHP support as it is anything else. We have an opportunity to increase our usefulness as a support channel and I think we should take it - if we use our flair to denote what we feel qualified as "experts" in to answer, like r/askscience does, then I think we'll see an increased exchange of information. And if there's some moderator approval process for what gets given out, then having "MySQL / Memcached" next to your name means that your words might carry more weight in a discussion about that memcached.
There isn't room to list them all :)
Function you **wish** php had. 
Favourite framework/CMS.
Prefered environment for PHP, editor. So like, Linux, Nginx, FPM, Percona / Sublime Text 2 Though I guess it's kinda retarded and pointless.
Why not? It shows your expertise in that area and that your opinion is based on experience.
Ummm.... how do I edit my flair? I see an 'edit' near my name on some subreddits, but not others, and not one here. Is this a setting I need to change, or is it something a higher power than me has to enable?
Not really useful/relevant to a programming reddit for a single language.
Hey buddy, go to r/programming if you wanna circlejerk about PHP's flaws.
It's enabled for the subreddit as a whole by the moderators.
Tell him to check out his log files if he has them (he better). They're probably insanely bloated and causing unnecessary file reads and wasting additional generation times.
So should I be able to edit it? http://gyazo.com/dce82a0e55ae7206fde27c5422a4c3c0
Keep in mind, you NEED to make your portfolio site extremely fast since you're demonstrating your programming abilities. If you use a database, it shouldn't be a bottleneck because of it's relative simplicity. Once your site is complete, you should focus on optimising/cashing your client-side code. Having said all this, using a controller for the about us page might add up to 0.04secs to the load time over using an HTML file. At the end of the day, I'm not sure it matters much either way--I put my about-us page in a controller, but it'd be faster not to. 
Someone smart comment on all of this. Has anyone used Hip Hop?
So on my portfolio site, I implemented Zend Framework MVC and used a Domain-Driven Design for the model layer. I also configured an automated build process using phpUnderControl that would not only unit test the application code but also generated API documentation before deploying it to the server via SVN. That's excessive! Using an MVC...not so much.
You don't really have to sanitize user input that much unless you want to validate/filter the format of accuracy of the value. Just use bind variables in your SQL. It's simple: $firstName = '"; drop table user;' $binds = array($firstName); $sql = " SELECT user.* FROM user WHERE first_name = ?" $result = $pdoAdapter-&gt;query($sql, $binds); //use Whatever adapter floats your boat.
No, because they haven't turned it on yet.
[I got this](http://bit.ly/tJiN7d).
Well given that you are reading a lot of tuts, I am not sure how far along you are. Are you able to make a db connection in php and connect to a particular database etc? That would be the first step. Preferably you want t store your database credentials in a separate file which you will include prior to making the db connection. Something like: **EDIT: can't get php code to show properly in my comment.** 
http://www.php.net/manual/en/function.mysql-query.php http://www.php.net/manual/en/function.mysql-fetch-array.php http://tuxradar.com/practicalphp/9/4/0 If you have user input beware of sql injection! 
My previous experience with PHP utilized the mysql extension but after reading back over the comments in your previous question I noticed someone mentioned PDO which after reading about it seems like the ideal way to go. Also, run-on sentence.
Well any database server requires credentials to login via php. You'll need to supply the address of the database server, even if it's 'localhost', your mysql username and password, and the name of the database you want tot connect to. You usually supply those in a separate file called 'dbconfig.php' or whatever you choose. You then include that file just prior to execution of the database connection. There are different ways to connect but I always used the most basic mysql_connect() which I know now isn't the best way but as a beginner you might want to try.
An example would be to place in the separate file: $user="username"; $pass="password"; $dbname="your_database"; $dbhost="localhost"; obviously change the values to whatever match your database. Name the file whatever you want, something like dbconfig.php. Shit, conference call in 3 minutes. Will try to update shortly.
Nice job. A couple suggestions: * Let both the schema and input be passed as file path, URL, object, array, or JSON string * Add some unit tests with larger, more real world examples. For instance, your car and book examples would be a good place to start.
Seriously? phpmaster.com? Was "ihaveagiantcock.com" already taken?
By ignoring it
Then no worries. If you're only reading output from a database then "SELECT * FROM table" or "SELECT quote FROM table WHERE author = '$author'" should work. Then trap it in the mysql_fetch_array or whichever mysql_fetch function looks more suitable to your needs, and echo that out in a loop. 
Thanks for the suggestions, I had actually planned on allowing the schema be passed as a string or object. I had originally created a bigger unit test, but decided to break it up into small tests since so many features overlap. For example, I could have a string type with a pattern defined, and the unit test could fail for either a type mismatch or a pattern mismatch. By having 2 separate tests, only the specific one causing a problem would fail.
I'm sorry but this made my day
It took me a day and made yours. Worth it!
How would you suggest doing it? Extract as other say is insecure. Also lines 61 to 163 which you suggest would be were id Validate and sanitize the data.
Symfony 1.4, that is all. Dont bother with this Symfony2 bollocks yet, if at all. IMO the devs had good intentions but lost the fucking plot.
I would recommend you look at books/some existing code to see how others do it, you don't seem to know what the aim is with that code, you just seem to think you need to fill in all these variables because you've seen a bad example. Don't go as far ahead as frameworks, look into loops and basic database manipulation (such as mysqli or PDO).
Wouldn't a post like this fall into the lower end of the quality spectrum? Retards? 
While i agree that article is horrible, you seem to have wrong impression about the goals of factory. A factory is a class with creates instances with the same lifespan. For example, you can have factory which creates *Domain Objects* for you Model layer. Each domain object will have different methods, but they all can be created by same factory. Same goes for all the datamappers for said model layer.
Well, if we were to always congrats ourselves sure, but the idea was just to say good job.
I think they wanted ieatgiantcocks.com but you already had it registered
I won't claim I'm smart, and I haven't used HipHop beyond just playing around, but we did look seriously at using it for a high-traffic application at work about 6 months ago. In the end it was determined the project was too limited for our needs and we weren't really in a position to take advantage of it. If you're using strictly "core" PHP then you'll probably have a better chance of having what you need available; our stuff used too many extensions. I'll admit our development and deployment environments weren't up to par to really support HipHop either. if you're going to deploy compiled code like this you really need to have a solid testing infrastructure; you can't just SSH into a customer's server and debug on the fly like a lot of people do. (Bad idea, yes I know, but people do it!) On the flip-side, HipHop is a pretty cool (though not new) idea. If you're environment is disciplined enough, and you've *already exhausted other performance optimization avenues*, and you're code is mostly "vanilla PHP" then HipHop might be useful. Check it out, see if it's right for you, and then go from there.
What benefit does this provide? Seems to just add a ton of keystrokes and function calls to build queries. 
It's because they banned all those rage comics that were clogging up the joint.
Thanks for the advice! Got others? I'm sure there are more than a few others.
Not sure why you've been downvoted. Such dangerous shortcuts are the reason PHP developers are given such a poor reputation.
You are missing one critical piece of advice. Use [HTML Purifier]( http://htmlpurifier.org/) to clean out user submitted HTML.
&gt; libraries out there for allowing safe use of various syntaxes, including HTML, Markdown, BBCode, and Wikitext Why is HTML is in the list of "libraries for allowing safe use" ? Markdown is fantastic for programming-related discussions. Reddit uses it, GitHub uses it, StackOverflow/Exchange uses it. It's also quite friendly for non-technical users, unlike bbcode or wikitext. Manually balancing tags in bbcode is bitch. The only reason bbcode is still used today is because of inertia. Counting apostrophes in wikitext is hellish, and the reference implementation (mediawiki) is a mess of titanic proportions. Markdown, on the other hand, is pure bliss... except two minor issues: underscores mean the same thing as asterisks, and line breaks need two trailing spaces. It's easy to get used to these, though. But there's one thing you need to remember when you use Markdown. At least when it comes to the [PHP implementation](http://michelf.com/projects/php-markdown/) (but probably also in other implementations) **Markdown allows inline HTML, and does not sanitize anything.** Try passing that `&lt;b onmouseover...` thing through PHP Markdown. It comes out intact. So if you just take user input and pass it through Markdown without any extra sanitization, your ass will be completely exposed to all kinds of XSS attacks. [HTML Purifier](http://www.htmlpurifier.org/) is the only library I trust to take arbitrary user input, Markdown or not, and produce safe &amp; valid HTML. Nothing else comes close. In fact, no other language that I know of has a comparable library. We PHP programmers should be damn proud of it. If you ever need to allow your users to submit any sort of HTML content, you should pass it through HTML Purifier. No ifs, ands, or buts. Edit: Also, `htmlspecialchars()` and `htmlentities()` are not 100% secure unless you properly specify the character encoding, both using the header `Content-Type: text/html; charset=UTF-8` and also at every function call.
That's a fair point, and I'm hoping that will come into play with the blog/portfolio sections. My goal right now though is just an entry level job, so I'm hoping a few fractions of a second don't diminish my chances!
I agree, I think putting your favorite IDE or framework is fairly superficial. Putting your experience/certification/etc next to your name can change the way people look at conversations
I'm going to side track this slightly and ask if A) Code Igniter's built in XSS functions are sufficient enough and B) if not, is HTML Purifier something that could be easily added in as a library. This is, of course, if you have experience with CI. 
&gt;At least when it comes to the PHP implementation[☀] (but probably also in other implementations) Markdown allows inline HTML, and does not sanitize anything. Oh wow. That's important. I misunderstood that, I never employed a Markdown converter in practice. I'll add your advice to the post. Still, the simple Markdown style syntax, apart from any particular implementations, is clearly nicer than the alternatives. HTML (on its own) should be discouraged from being accepted as a formatting mechanism even when it can be purified.
I like htmlawed and it is pretty small. I mainly use it xss though and not really stripping html.
CI's `xss_clean()` function uses a regex-based blacklist to detect most common XSS attacks. Since it uses a blacklist approach and not a whitelist, it is impossible to be 100% secure. In fact, earlier this year CI [fixed](http://blog.astrumfutura.com/2011/05/codeigniter-2-0-2-cross-site-scripting-xss-fixes-and-recommendations/) an XSS vulnerability, and just a couple of weeks ago [another](http://secureappdev.blogspot.com/2011/11/ellislab-xssclean-filter-bypass.html) vulnerability was found. This cat-and-mouse situation will continue forever unless CI abandons the blacklisting approach. In fact, the first link recommends that you use HTML Purifier for any serious filtering. Also, NEVER enable global XSS filtering. It might help newbies write more secure apps, but escaping everything even before it hits this DB is not considered best practice.
I yield my time to the Gentleman with his handle on reddit being handleonreddit.
Here's what I use: $input = $_POST['dirty_input']; ... some validation here ... $intermediate1 = preg_replace('/\\x20*(?&lt;!\\\\)\\n(?!\\n)/', " \n", $input); $intermediate2 = Markdown($intermediate1); $clean_output = HTMLPurifier($intermediate2); The third line is a dirty hack to make newlines actually behave like newlines. It inserts two spaces before every non-escaped newline. My users seem to prefer the altered behavior. Still, some folks insist on using a WYSIWYG editor. You know, WordPress spoiled everyone! Then it's necessary to toss in [TinyMCE](http://www.tinymce.com/) or [CKEditor](http://ckeditor.com/) and shove the whole thing through HTML Purifier. No harm done, except the occasional pink Comic Sans that gets through.
&gt;Also, htmlspecialchars() and htmlentities() are not 100% secure unless you properly specify the character encoding True. It's also a reason to prefer htmlspecialchars over htmlentities. If you want certain exotic characters or symbols to work you have to make sure that every single call of htmlentities is told the character set that you're using for your data. But if you use htmlspecialchars, the handful of characters that it converts can be processed equivalently in the most common Web character sets, including UTF-8 and ISO-8859. If you're using one of those character sets (and everyone should be) then you only need to specify your character set once in the content type and it'll all be okay, *I think*. Whereas with htmlentities there's no alternative but to specify the exact character set everywhere, or some characters will break. htmlentities is also a little slower because it converts more characters.
"Oh gods, this is going to be a nightmare. `strip_tags` is a clusterfuck... \*click\*" &gt; `strip_tags` is ***never, ever, ever*** the right function to use Yessss. Infinite upvotes for the recommendation of HTML Purifier and pointing out `htmlspecialchars` (as opposed to the subtly incorrect `htmlentities`).
Wow, thank you for this! It's incredibly useful information. I've used strip_tags() on occasion, but never bothered to test out how exactly it worked. So now I know...
Will $taxonomy always be an array of count() == 1? $taxonomy = array(...); $interesting = current($taxonomy); echo $interesting-&gt;name; Or if there can be more than one item and you want the name from every StdObject: foreach ($taxonomy as $interesting) { echo $interesting-&gt;name; } 
It will be one value.
$interesting = current($node-&gt;taxonomy); echo $interesting-&gt;name; Totally worked. I have never used the current() function before.
what's wrong with filter_var($variable, FILTER_SANITIZE_STRING); ? use [filter_var](http://php.net/manual/en/function.filter-var.php) and [pick an appropriate filter](http://www.php.net/manual/en/filter.filters.sanitize.php) to keep tags and a certain range of characters out.
It still feels dirty. If you have to do it this way, maybe keep an array of whitelisted columns to update, and do an if(in_array($key,$white_list)) inside your loop before the update.
Some drawbacks off the top of my head... 1. You're not validating the input what-so-ever. Maybe this isn't a huge problem, but it basically makes all the data in your settings table untrustworthy. 2. Was that setting supposed to be an int? Or a string? Oh well, better figure it out. Again, due to the lack of validation (or in this case, filtering) you are leaving settings open to be unreliable, not just untrusted. 3. If you are storing different types of input, you're eliminating the ability to store your data in reasonably typed columns -- but for a settings table, you're probably not really optimized for that anyway, plus they tend to stay kind of small. I'd say it can work here, in this one, very specific scenario, but it's really not a good practice. You should, at the least, be validating input in some fashion and, as otherwise suggested, filtering from a list of know configuration values. I mean, your app should have access to a list of configuration parameters, no?
I've had clients request a spellcheck feature and while CKEditor will do this, my initial response was a puzzled "Oh, you don't use a browser that does that automatically?"
"I don't always ignore exceptions, but when I do, I'm ignoring exceptions"
place four spaces before each line of code and it will be nicely indented.
&gt; I read people say to use loops etc Where did you read people saying to use loops, and in what context? I would presume that CodeIgniter has a better way to save all the fields posted to a database than what you're doing currently. What you're currently doing is really bad, because presumably you're making many SQL statements and executing them one after the other (in a loop), where instead you could just be using one SQL statement. Communications with the database is one of the slowest parts of a normal PHP application, so you want to minimise this as much as possible. Here, using a loop to insert values one by one is actually a rather *awful* practice. I'd suggest you read up on CodeIgniter's db class and models before continuing further.
FYI there is also the [PHP Markdown Extra Extended](https://github.com/egil/php-markdown-extra-extended) by Egil Hansen that gets rid of the two spaces a few other features he added.
I hear you on netbeans. I've had much better luck with phpstorm but it will all come down to code base size, ram, and processor speed. I've definitely noticed that phpstorm is way less random about when it decides to do heavy processing.
post your autoload code
Plus there isn't really a specific certification for PHP (aside from Zend, which 15 year olds can do). "Computer Science" is good, but if you've ney experience with PHP in the real world it's worth nothing here. Maybe years of experience?
Do you still need a solution? I could write an exemplar file for you. 
Quick note on HTML Purifier: It's really not that quick. Try and purify 5-600k+ of HTML and it'll take probably 5-10 mins. 
I think he's actually doing rows rather than fields so this wouldn't be particularly unusual code. If it's just some back-end form it'll probably work fine though it could use some exception handling and validation.
I found this out the easy way, but logically i do a str_replace sort of algo on harmful characters. It may be sloppy but i like knowing exactly what goes in and out of my DB.
CPanel (while not a distro) installs it to `/usr/local/lib/php.ini`, although I'm embarrassed to admit I've ever used it. (It's nearly impossible to remove without reinstalling the OS, so you're pretty fucked if you inherit it on a vital production server.)
Sure, dont put yourself out but it would be highly appreciated ! Forms realy are my kryptonite.
So, what on earth is it doing in PHP core?
i'm using htmlspecialchars
The same thing as all the other horrible and buggy features in PHP core; someone committed it a long time ago, and most of the PHP core developers either don't see why it's a bad thing, can't be bothered taking it out, or fear they'd break compatibility and lose users (which is why deprecation exists, but meh).
&gt; Why is HTML is in the list of "libraries for allowing safe use" ? Because you're reading it wrong: &gt; libraries out there for allowing safe use of various syntaxes __(__including HTML__):__ Markdown, BBCode, and Wikitext emphasis added
I think it's because s/he took what was purposely a nonconstructive/humourous comment very seriously and decided to be all condescending about it.
What is this sorcery?! &amp;#3232;\_&amp;#3232;
I've used these sometimes too. I was wondering the same thing.
Problem with htmlspecialchars is that it only encodes double quotes and not single. Here's what I use: function escape($str) { return htmlentities(mb_convert_encoding($str, 'UTF-8', 'UTF-8'), ENT_QUOTES, 'UTF-8'); } [This stackoverflow post](http://stackoverflow.com/questions/110575/do-htmlspecialchars-and-mysql-real-escape-string-keep-my-php-code-safe-from-inje/110576#110576) has been my goto reference for general XSS / sql injection prevention stuff.
We thought about going this route, but - Our web dev isn't familiar with editing the cart to handle this type of customization and we'd likely have to bring someone on to edit it for us. the cart is updated automatically - an edited version of it wouldn't be supported and would likely break with every update they push out. This would require us to keep the cart developer on to handle constant updating/rebuilding. the cart's source code isn't available unless you upgrade your account (another $400-500 on top of what we paid for the standard version of the cart).
your wish is my command good sir
Nothing wrong with that, for pure text. When you want to allow *some* html it's not enough.
There's an important fundamental difference. array_keys will return *multiple* keys if the value is contained more than once, whereas array_search will simply return the first key matching said value.
&gt; But if you use htmlspecialchars, the handful of characters that it converts can be processed equivalently in the most common Web character sets, including UTF-8 and ISO-8859. While this is correct, it is not right. If you specify UTF-8, htmlspecialchars in modern PHP will do some additional checking to prevent certain overlong encodings. A 0xC0 for example will swallow the next byte in IE6 (of course, what else) making it treat subsequent bytes out of context.
Why the mb_convert_encoding?
If you have pure text, you should ESCAPE, not FILTER the data. By escaping you preserve meaning.
because htmlentities alone is vulnerable to multibyte character attacks
Then why not simply use htmlspecialchars with ENT_QUOTES and UTF-8 specified? It will check the bytestream for invalid characters. You can even get a substitution character (vs empty string) in 5.4.0.
That might be sufficient. I just got the above from [here](http://stackoverflow.com/questions/110575/do-htmlspecialchars-and-mysql-real-escape-string-keep-my-php-code-safe-from-inje/110576#110576).
Then the next logical solution would be to make a separate login system for your main site, but tie it in (with your own code) to their login api, assuming there is one. Basically they login to your main site with a un/pw that gets thrown over to pinnacle cart for verification. If they don't have a good api or no api at all then this might not work. If they do have an api, then this should solve your problems while being release-independent, unless they change the api :&gt;
Does your autoloader fire at all for any class or is it just that one interface causing the problem?
Interesting. I was aware of Markdown Extra (which fixes underscores in the middle of words, hooray) but I didn't know that somebody had extended it yet again. Honestly, I'm a little worried about the "proliferation" of these extra versions of Markdown. John Gruber apparently doesn't see any need to update or extend the original specifications, and I can sort of understand that. But unless some effort is made to standardize these uber extra enhanced extended features, they could become ugly, incompatible monsters like the early days of HTML. 
You say that it is called once, but a few sentences later you say it's not called at all. Which one is it?
Winners RTFM :)
I just wanted to change [the docs][1] to point out these issues, but found that this was already done: &gt; **Warning** &gt; Because strip_tags() does not actually validate the HTML, partial or broken tags can result in the removal of more text/data than expected. &gt; &gt; **Warning** &gt; This function does not modify any attributes on the tags that you allow using allowable_tags, including the style and onmouseover attributes that a mischievous user may abuse when posting text that will be shown to other users. So really, if people use this function, it's their own fault. (But thanks for making people more aware of it.) [1]: http://php.net/strip_tags
It gets called for class 'something', but fails on loading 'another'. The autoloader never fires for 'another', but it does fire for 'something', which is how this file containing the class gets loaded in the first place.
I'll clean up the description
you have to be careful using $_REQUEST, it can lead to difficult to find bugs. http://devlog.info/2010/02/04/why-php-request-array-is-dangerous/
I think we should see if he floats.
Depends on whether you want to keep html tags around for display, or if you just want the text content.
While I like the idea, "experience" is extremely relative/subjective and might not actually offer any benefit. Though something along these lines would definitely be what I'd like to see
I don't really like this idea. The zend certs hold little to no weight in terms of a programmer's skill level, and doesn't even come close to indicating what they're capable of. Also, not many php people I know actually have the zend cert, though all of them are 'seasoned in the field', as it were.
Wow...
Went through it briefly but it looks more of a query builder than even a micro-ORM. Am I wrong?
I am really digging Inspekt: https://github.com/funkatron/inspekt I had been using HTML Purifier previously
Either way, a single point of consistency is better than 100 points of inconsistency
 update tablename set fieldname=default This will set tablename.fieldname to its default value.
If you have pure text there are no HTML tags.
Who says it isn't? Besides, it has little to do with PHP.
 UPDATE `table` SET `column`=DEFAULT You can also use DEFAULT as a function to get the default value of a column: UPDATE `table` SET `column1`=DEFAULT(`column2`) http://dev.mysql.com/doc/refman/5.0/en/data-type-defaults.html Note: this is untested. 
Of course, the solutions posted so far apply only if the default value of the field has not changed.
That was what I was looking for. Thanks!
The MySQL subreddit is active enough that you would have gotten an answer. Also #mysql would have given you an answer immediately.
What if you have html with text in it and want to extract just the text? Not uncommon. Then you need filtering.
Find a freelancer in your area who is willing to do the work. Do it above board with contracts so you both know you're getting what you want. Try /r/freelance if you need to or try contacting PHP developers on Monster of Dice or whatever and see if they'd be interested.
There's also /r/forhire which I've had decent luck both finding talent and getting occasional work. I personally avoid Monster, Dice, Hotjobs and the other shitty job sites like the plague. Use niche job sites, forums, craigslist, etc.
I always think in strings as having a datatype. The presence of tags itself is irrelevant in determining whether the datatype is HTML.
I'm a little bit surprised that this is news to anyone, but a lot of people here are digging it and learning something new. Nice post.
Please be sure to specify a record by using a WHERE clause...
&gt;The easiest way to get involved is contributing to the docs What the..? How long has that dude been around? I've wanted to help contribute to PHP documentation for years... Never knew I had the option.
&gt;php devs are morons too for putting up with idiotioc nonsense like T_PAAFUCK_WHATEVER. Yeah, fuck those foreigners for not speaking English.
Good advice here already about the subreddits, but depending on the size of where you live consider the /gigs section of Craigslist. Post an add asking for portfolios, github accounts, and references. Lots of freelancers I know keep an eye on that. Perhaps there are also some PHP or general web programming user groups in your area. Attend some of those meetings and see who you can meet. Also, perhaps rather than finding a bid for the whole project all at once, maybe you could come up with some smaller tasks that you could "try out" a freelancer on. Have them add a feature or rebuild an isolated system so you have a chance to see if you like working with them and are happy with the quality and price of their work.
I've literally almost jumped off a roof when I left out a WHERE clause on an update. Thank god for backups.
I'm probably being paranoid. It looks like this would be a really reusable chunk of code, and its worth considering where it might end up. I just think of unintended side effects like letting a user change the ID of the record, for example. If you force yourself to keep a whitelist of updatable columns, then you subconsciously consider those edge cases as you whitelist new columns.
We switched to Ubuntu, years ago, after having a huge swath of problems with RHEL3. It's not my favorite, but nothing really is. I was always a FreeBSD guy and was forced to switch back to Linux by work.
debian stable plus the following repos: http://www.dotdeb.org/ for PHP, nginx, Redis, MySQL Vanilla http://www.percona.com/docs/wiki/repositories:apt for MySQL Percona dotdeb keeps packages very up-to-date right after they are released. 
Unless you have a verify specific task for the freelancer to do, be prepare to shell out a lot of money and here's why. &gt; I started building it back in 2006 as I was learning PHP, so the foundation is absolute crap. So site is most likely using PHP 4 / Mysql 4. Rewriting to latest versions may or may not be time consuming , depending on how much deprecated code you have used. &gt;20k+ members, So authentication mechanism is needed on new site. Possibly importing member data over, including password (hashes). &gt;I need someone to help me re-do the foundation, and then stay on board to fix things and create features as needed. Screams of needing a framework to get things started off. &gt;The workload would not be very consistent, = consultation rates. &gt; I'd prefer to have one person work with me on this because it will take a while to wrap your head around how the site works. Requires some dedication on the developer's end to study your site. You'll easily save 1/3rd of your costs by providing documentation on how the existing site works. &gt; How do I find my miracle worker? By paying a lot. &gt;Odesk charges 10% and is filled with low-quality workers. True, but low quality workers, as you may already know, require little compensation. &gt;What is the best way to go about this?? Setup the foundation yourself (ie, use your favorite or most popular framework) and create specific tasks that you can consult out.
Message sent.
I believe with E_STRICT an empty() on an undefined variable (e.g. view code below) would throw an error. &lt;?php if(!empty($test)) { echo "lulzy"; } **EDIT**: It seems I am incorrect.
We use Centos with VirtualMin at work but I prefer ubuntu for personal projects
Debian + webmin works great, I prefer apt for package management.
CentOS
One of my hosts runs Debian. It took them forever to support MySQL 5 and they still won't upgrade to 5.1 yet until they feel that Debian 6.0.x is stable enough.
"sudo su" and you have the root prompt
I fiddled with 3rd party repos once, but it always seemed to cause aptitude confusion and conflicts for me. Another thing that bugged me with Debian was that the PGP-keys for use with apt got out of date or something. It was easily solved, but I never understood why this happened. Have you had this problem?
I know, I wasn't sure where else to post it
or run the client in dummy mode i.e. mysql --i-am-a-dummy which will prevent you from doing UPDATEs or DELETEs without where clauses.
I've never had a PGP key get out of date. Sometimes you need to add /etc/apt/preferences file to pin certain repositories over others for conflicting packages. I ran into an issue recently with libmysql18 between percona and dotdeb which I solved by adding this to /etc/apt/preferences: Package: * Pin: origin repo.percona.com Pin-Priority: 610
Heh. Yeah I'd strongly suggest switching to MySQL 5.5 or even better, Percona 5.5 Dotdeb and Percona provide these, respectively.
TIL this. I didn't know you could do that. I will have to use this in the future. Thanks!
Can you show us the site?
lol I've done this exactly once on a high volume production database. My heart literally sank the instant I ran the query. Fortunately I had a typo in the SQL, so it didn't run. Nowadays, whenever I have to hack on a production database, I usually write the WHERE clause first or wrap it in a transaction and only commit if I'm satisfied with the results;)
Awesome to see you writing interesting tools for Travian, I work for the company so if I can help with anything send me a PM =) We're always very happy to see the community creating projects like these. Do be careful with using Travian copyright images and so forth if you're going to put adverts on the website - have a look at our policy on fansite usage of copyrighted material.
The proper way to do this would be to overload the constructor, but PHP doesn't let you do that. What you're doing is basically a proxy for overloading, so it seems OK to me. You might consider making your poor-man's-overloading really explicit by having __constructFromData() and __constructFromId(). The actual constructor can check is_int($id_or_data) and call the appropriate method.
Isn't it bad practice to prefix your methods with a double underscore as PHP uses those for magic methods?
`sudo -i`, dammit. That's what it's there for.
Thanks for the reply brother! Nice to see other people who enjoy the game. No copyrighted material has been used. I'm an attorney by day. If anyone is sensitive to the legal concerns that might cause me to have to shut down, it is me. But a nice second or third income will sure be nice :-)
Solution: Lots of money. The people with the skills required to *not* fuck this up are few and far between, and most of them are booked up solid with other more interesting jobs.
I don't think hearts do that...
I didn't think there was any other way to do it. Good call on separating the functions. Thanks.
It's used in a few frameworks (CakePHP, Wordpress...) so I never really considered whether it was kosher or not - apparently it's not though: http://framework.zend.com/manual/en/coding-standard.naming-conventions.html#coding-standard.naming-conventions.functions-and-methods &gt; For methods on objects that are declared with the "private" or "protected" modifier, the first character of the method name must be an underscore. This is the only acceptable application of an underscore in a method name. So, away with the underscores.
I wish I could help out but I don't know PHP at all.
&gt; apparently it's not though: [1] http://framework.zend.com/manual/en/coding-standard.naming-conventions.html#coding-standard.naming-conventions.functions-and-methods I would say most frameworks are not following those naming conventions. Why? Because those are the guidelines for a single framework, not something that everyone who writes PHP should abide by.
Please see the sidebar. [/r/web_design](/r/web_design) and [/r/webdev](/r/webdev) are both suitable for this post.
if your constantly updating shit, just because there is a update on linux, lawl. worst thing to do in any kind of production environment. 
Are you sure the destination path is correct? By the look of the error, it's trying to write the file to the same location as the script's directory. As a side note, chmoding to 777 is never the right answer.
Looks like $location is empty and it doesn't have permission to move the file into the CWD.
It still applies. Even if the default value of the field changes, that doesn't not make it the default value. *"Wherever you go, there you are." --Confucius* 
I only use FreeBSD if I need a *nix. 
I generally use arch.
I changed that because just to see if it would write to the same folder. I don't think that's important to the problem. Its basically saying "write to this folder."
Reminds me of using a system with plesk installed. I hate that shit.
&gt;Are you sure the destination path is correct? Yes. I should mention that I've gotten this to work on a live server. I just can't get it to run on my personal server. I understand chmod isn't supposed to be the answer, but from my internet searches, that's the only solution I saw... so I wanted to beat anyone that suggested it to it.
You're right that there are no official guidelines for PHP, but given Zend's role in writing PHP, I figure their framework is a good place to start.
This is really situational advice, but one thing you may consider is removing the "load" logic from the constructor entirely. Using the constructor to load model data from an api is no doubt convenient for some cases, and it may work for you, but it is prone to one very important problem: there are lots of different ways to load information, and you may not even want to load information at all. If you remove the first parameter from your constructors and instead call a loadById() method after instantiation, your models become a bit more versatile. If you came across a scenario, for example, where you wanted to query for a user's information but all you had was their username (e.g. login request), you could simply implement a loadByUsername() method rather than worrying about differentiating between scalar types in your constructor: $user = new User($client, $token); $user-&gt;loadByUsername('someexistinguser'); If you are able to do any "write" requests via the api (e.g. POST, PUT, DELETE), then you may find it easier to use these models to compile your data before issuing the request. In that case, you may not want to perform any api querying to instantiate the model: $user = new User($client, $token); $user-&gt;username = 'somenewuser'; $user-&gt;save(); This can be abstracted even further -- I'm not a huge fan of the model being aware of its own persistence mechanism, but it does at least get the job done. If this sort of flexibility is appealing to you, then I recommend that you not use the constructor as a way to load data into your model.
&gt; I changed that because just to see if it would write to the same folder. You did what now? &gt; move_uploaded_file(): Unable to move '/tmp/phpAYEt0l' to '10.jpg' in /var/www/html/MVP/test/uploadFile.php on line 8 The problem all seems to be laid out there. $location.$newName.".".pathinfo($_FILES['logo']['name'], PATHINFO_EXTENSION) equals 10.jpg not /path/to/dest/10.jpg If the path was correct, it would be listed in the error message. It would say &gt; move_uploaded_file(): Unable to move '/tmp/phpAYEt0l' to '/path/to/dest/10.jpg' in /var/www/html/MVP/test/uploadFile.php on line 8 Easiest way to find out... error_log($location.$newName.".".pathinfo($_FILES['logo']['name'], PATHINFO_EXTENSION)); (or die(...), or echo and exit, or ...) I'd be fairly certain that your result will be missing the target path and only has the filename and extension. Edit: The only reason "my code is simple" is because you left a lot of it out when showing it to us. We can't see where any of these variables are defined, or if they're being defined at all. Is it from a config file? Is it hardcoded somewhere?
&gt;You did what now? Basically, to prove to myself that its not a destination problem, I changed $location form what it was to blank. This means that it will copy the file from where it was to the directory in which the php script is running. This worked for troubleshooting purposes on the server... is there a reason it would cause a problem locally? There is an echo in my code like you suggest. I just omitted that because it didn't matter. This is what it looks like: echo $location.$businessID.".".pathinfo($_FILES['logo']['name'], PATHINFO_EXTENSION); It appears exactly as I want it to. There doesn't seem to be an issue there.
Is that echo why "10.jpg" shows up after "line 8"? Because if it is, then it's not the full path, and just goes back to my original statement. As for not mattering, yeah - your debug code, and it's output, are extremely relevant to troubleshooting. Saying that it works on the live server just proves that it's not the code, assuming the code is actually the same in both places, it tells you that it's your inputs that are different.
All in all, it really boils down to two things you need to consider. First, which OS style do you feel most comfortable in? Redhat / Debian / Arch / Slackware / *BSD , try to choose something with at least a decent user base. Secondly, choose an OS that is an enterprise cut or long term operating system. You want an OS that will continue to receive updates, security at the very least, for another 3 - 5 years, but also isn't receiving the bleeding edge compiles, because that is how unknown bugs can creep in. I've used by Debian and Redhat based *nix distributions in enterprise setups, both perform well, both can easily be managed via packaged releases built from a main station, and both have large user bases. 
nevermind, misread title...
I run Ubuntu 10.04 on my and my work's and my work's client's linode boxes, but I've also used Centos on some projects.
The "correct" way to do this is to use a static factory method and make the constructor protected. $photo = \Api_name\Media::newFromId($photo_id, ...); $photo = \Api_name\Media::newFromData($data, ...); Do the loading in the `newFromId()` method and have the protected constructor take the data: public function __construct( $data, \Api_name\Net\ClientInterface $client, $access_token ) {} But the advice that courtewing gives is also very good. Rarely do my classes do any loading in their constructor; they have `-&gt;loadById()` or `-&gt;loadData()` style methods. 
I was using Debian stable + dotdeb.org, then... everybody caught up. Now php-fpm is available as standard with Ubuntu.
Please be patient with me. I'm not sure I understand. The exact code ($location="";, echo statement, and all) works on the server. Except its not an error and the .jpg shows up in the same folder as the php script. I don't think its the code either... but the input isn't different either. I think its the environment... but, obviously, I don't know the answer so that's why I'm here. Am I missing something? Did I misinterpret what you said?
That's just Zend's style guide, which is only really relevant to Zend Framework. That doesn't make it a rule written in stone. "Do it this way because Zend said so" isn't a compelling reason to do anything.
Do it properly and get [DVD Profiler](http://invelos.com/). Windows only, I'm afraid, but worth running Parallels just for this due to the insane level of detail in the metadata they have. It can publish your list up to their site rather than your own. The community behind it is fantastic.
My history of Linux Webserver usage (work and home): **Early Years:** Mandrake Linux, Red Hat **Middle Years:** Debian, Damn Small, Puppy, Fedora, SUSE **Current Years:** Ubuntu, Centos **Currently toying with:** Mint In a nutshell Ubuntu is what I usually choose these days (when it's up to me) but many sites I assist with are on Centos.
CentOS with cPanel/WHM, mainly just for EasyApache.
I originally had static methods implemented, but it didnt feel right. Maybe you can suggest some way to make it more elegant. I have a abstract base class that has the constructor that loads all object. All objects are loaded with an ID, they are just loaded from different URLs (URLs are stored in the concrete child objects). so now i have static `loadById()` - that means i have to make the api url a `const` so that its available to the static methods and instantiated objects - that also means i cant make the child objects constructor private, because then the base class constructor has to be private, and the base class constructor cant be private because it needs to be called by the child class! So the constructors have to be protected or public. - that also means that in my `createFrom...()` functions in the base class i have to use `get_called_class()` to get the name of the static class that was called and use that with the new keyword $class = get_called_class(); return new $class( $response-&gt;getData(), $client, $access_token ); Does this feel ugly and complicated to you?
See my reply to the other gentleman
chmod can be and is often the answer when dealing with upload directories, but not 777. That gives way too many priveledges to everyone. Read more about file/directory permissions and pick what is best for this scenario. 
That code will update any setting to the specified value. Let's say you have a column called user_id that the setting is associated with. You don't include this on the form where the user is editing the setting. As a crafty user I can manually add a post value to my submission and try to force another user to have whatever setting I want.
iirc in CodeIgniter you still use post() even after validating the input.
Holy shit!
&gt; I have a abstract base class that has the constructor that loads all object. I'd recommend changing this and not use the constructor to load the object. Instead, have the constructor build an empty object. This empty object can then have has many non-static load methods as necessary (and the abstract base class could implement the primary `loadById`). &gt; functions in the base class i have to use get_called_class() to get the name of the static class that was called and use that with the new keyword This isn't necessary, you can use this syntax instead: return new static($response-&gt;getData(), $client, $access_token); &gt; Does this feel ugly and complicated to you? Yeah, it sort of does. If you find yourself repeating code or going through too many functions/layers to accomplish something then it's probably too complicated. 
I went 777 because it is a server that is just used for testing. Its only used in-house. That being said, even going 777 doesn't help. 
I did not know about static(), it seems static::CONST works as well, I couldv'e sworn I tried it and it didn't work. Thank you for your help.
Fixed it all up, looking good now. The only thing that feels off now is having protected constructors. Thanks again.
Beyond the two you noted, can you also add these features? * Taxation by zipcode. This should be a high priority because tax laws in the USA are changing rapidly by zipcode in this struggling economy. * A WordPress-like Plugin system. Note that OpenCart's plugin system is kind of fake and pathetic -- in some cases you have to actually replace a core file or use a 'diff' program to see where to interject code, or use this VQMod kludge. However, at least OC has a plugin system, while I didn't see one in PC. * There's a place in the settings in the database that refers to 0777 permissions instead of 0755. I'd like this to be moved to the settings panel in the admin so that I can edit it there instead of the database. This was the reason we couldn't implement our theme at first -- because our hosting plan rejects 0777 but does work with 0755. 
Ubuntu Server 11.* After done installing all you (literally) have to do is apt-get install php-common nginx php5-fpm
Why is that? Would you mind extrapolating?
May I ask why you prefer Ubuntu over Debian?
I've been using Debian Testing for years now, seems to work pretty well.
Why is Percona better than vanilla MySQL?
Latest Ubuntu LTS with self-compiled versions of PHP. Use packaged versions of Apache and Postgres.
Only reason is that it is easier to find resources online if I run into a sticky spot.
Maybe the problem came from when I mixed Lenny with unstable. I was pretty fresh back then and hadn't grasped the concept fully. Would you agree that running Debian testing instead of Debian stable is the equivalent of running Fedora instead for Red Hat?
I don't know... I haven't really used Fedora or RHEL much. I do use CentOS on one virtual server though (as it runs cPanel), but I'm going to try to get rid of it and replace it with Debian. It's a personal server that I also host a few friends on (hence cPanel - it's the easiest thing for them to use). Packages need to have no major bugs for 10 days before they can migrate from unstable to testing. So it's not like you're running totally untested packages or anything like that. Some issues occasionally happen, but it's been pretty good for me. I normally install the stable version off a Debian netinstall image (or Linux-Vserver debootstrap if setting up a virtual server) and then upgrade to testing right after the installation. The data centre I use only had a Debian Stable CD, and Linux-Vserver doesn't seem to handle installations of Debian Testing well (but it handles installing Stable and upgrading to Testing fine)
Or RHEL. But yes, this.
This is the way to go, having models know about their own persistence is a break-down in separation of concerns. They're representations of data with methods to mutate that data in interesting ways, not portals to a backend storage. 
I don't know of any that you can install on your own host, interesting idea though. But there are online communities offering similar services such as http://www.blu-ray.com/ Personally as StuartGibson mentioned I use [DVD Profiler](http://invelos.com/) which is a program you can install but then you can upload your collection online. (It does loans etc as well). If you collect DVDs you might like to join us at /r/DVDCollection
Switches instead of many elseifs
TIL - been using MySQL for a decade, and didn't know this (never had to use it, I guess).
I use Debian stable. In a production environment you don't want to bump a major version unless it is really needed. You need to understand most of the problems you can have is not the stability of the package but breaking your PHP applications. If you are serious, you should always test this in a mock system and then upgrade, that is the only reason I don't use for example dotdeb.org unless I need to deploy a newer version. The development cycle for Debian now is shorter. Also you can go with Ubuntu LTS, not bad but there are some features that just won't work. For example once I installed Ubuntu 10.04 LTS in a server but grub over a serial console (so you can access it remotely thought IPMI or similar) is broken and it have been like that for a while because Ubuntu patches all these packages. As you can guess, works in Debian. Mostly I only use Ubuntu for customers as they want to pay for support. RedHat is also a good option but it is way too expensive here in Japan with no bilingual support (it is 40% above of what you pay in America, same type of support). I can see you sometimes compile PHP, it is good you know that and even better if you learn how to do it properly (debian package). Compiling your own package is important for PHP as we have some customers that require anti aliasing with GD and sadly Debian and Ubuntu don't use the bundled library but an external which lacks these features (so far), I kinda understand why they do it like this but still annoying. Edit: Trying to fix most of my funky English...
CentOS always felt heavy to me, I prefer ArchLinux which focuses on minimalism. It also has a rolling release cycle so there aren't major versions, you just upgrade your packages and you get the latest OS. Plus beyond the awesomely named package manager (pacman) it feels like I have better control over keeping unnecessary packages to a minimum compared to yum/apt-get.
Just reiterating your suggestions. Just browse these to get an idea of how easy it should be... [Symfony2 Form](http://symfony.com/doc/current/book/forms.html) [Zend_Form](http://framework.zend.com/manual/en/zend.form.html)
I'm not. I'm merely toying with it. Just because it's new and shiny, really... no other reason. For my work I generally use Ubuntu and Centos.
TIL that RHEL is Red Hat. :)
Why would you want to use Ubuntu(an unstable DEBIAN) as a webserver?
Yes, but what are the settings. That's the important bit. And you're planning to reuse this for more than one thing. Regardless, this is a security issue waiting to happen. Trying to justify it by saying "Well...in *this* case it's okay to not care about anything" is overlooking the fact that this is a bad idea to begin with. Add the extra logic and call it done.
I agree with you but it has to know of its persistence a little, right? How would you create an object from an API without the object knowing how to contact the API. Right now im passing a client to the objects and the client is getting the data from the server. static function createFromId( $id, $client ) { $object = new static(); $object-&gt;setData( $client-&gt;get( $url.$id )-&gt;response-&gt;getData() ); $object-&gt;setClient( $client ); $object-&gt;setAccessToken( $access_token ); } It still "knows" of its persistence in a way. What other ways are there? Apart from making the user of my api write $user = new User(); $user-&gt;setData( $client-&gt;get( $url.$id )-&gt;response-&gt;getData() ); ... Everytime they want a new user
You could just ask me of course. 8+ years of PHP/MySQL/JS development work.
Same here Ubuntu Server 10.04 for LAMP with a mix of RHEL for Firewall and LB.
Actually I was asked this very same question on an interview once... I just find it a lot more easier to find stuff online for issues and the community support is also nice.
Maybe this would help you get started? [IMDB API](http://imdbapi.com/)
You have a service of some type do it, some sort of tier between you and your storage engine. Look at what your doing to fill in your object, you're making your model accept a ‘$client’ object of some kind and know how to interface with your storage engine, which looks like some sort of REST service right now. Imagine separating that logic out and using a data service, either something you build or an ORM. &lt;?php $userService = new UserService(); $user = $userService-&gt;findById($id); All the logic is moved out of your model into a class whose main focus is dealing with user objects, that alone should make more sense. Now imagine you want to tie in certain functionality when a user is modified, saved, or you want to fire certain events when objects are loaded. Putting logic like that into your model would be messy and wouldn't make as much sense, but it would make perfect sense in a service like that, and provides a natural hook point for other code.
The last part of the article is the bread and butter for me. You can argue the merits of a language until you're blue in the face, but at the end of the day all that the client cares about is how fast you can do it and whether or not it works. PHP despite its flaws is king of the hill when it comes to getting something up and running quickly.
The whole argument reminds me so much of the hate directed towards C++ when Java was gaining prominence a million years ago.
What I would like to know is why are there not any projects to fork PHP and fix some of the problems it has? I understand not wanting to break backwards compatibility (though I would like to see them to break it once and get the painful process over-and-done with) but I can't be the only one wanting to see this language develop into something a bit more modern.
Anyone who has the wherewithal to make a better PHP is more likely to already have chosen another language. PHP is nice because cheap hosting companies have it pre-installed, but I can install anything I like on my server. Anyone who cares about PHP internals will be posting patches. What would you put in a fork that isn't already on the road map anyway? And those things you want probably exist in Perl, Python, Clojure etc, so why not just use one of them?
Up and running quickly, yes, how about building something maintainable and elegant long term? In my 11+ experience as a PHP developer, that's where it fails because most PHP developers are horrible. So, you have a project touched by many people and it just becomes more horrible over time because they suck as developers.
&gt; What would you put in a fork that isn't already on the road map anyway? A properly namespaced core with a consistent naming and parameter scheme. That's all really. Edit: Oh! And named parameters!
Trying to see how other people would handle this so forgive me if im asking too many questions. So, for a `getFriends()`method on your user object, would you proxy into the UserService class via a static call? User class function getFriends() { return UserService::getUserFriends( $this-&gt;id ); } If not how would you implement this without using any persistence in the user class?
So you're saying... the problem is horrible developers, not the language, yes?
I used to blame the developers as well. And certainly some of the blame can be pinned on them. But in my 20+ years experience as a developer in general I've learned that most of the time, the clients with their zeal for unreasonably short time constraints and lack of ability to convey the right information are the root of the problem. You can say, "oh well I take the high road and don't work with those types of clients" and that's great. It must be nice to work in fantasyland. But the rest of us need money, and we need to compete for that money. And if that means throwing some half-assed piece of software together to make the deadline and make the client a happy customer (and a returning customer) then so be it. I'm all for maintainability and proper coding standards. And on rare occasions we have the pleasure of working with clients who understand how valuable it is. But those occasions are few and far between. The rest of them get what they pay for. 
Now worries man, it isn't what you're doing is wrong by any means, just a differing philosophy of the best level of abstraction. You could do that, I still don't think that is best because it muddies up the separation that was the point to begin with. It is still better IMHO, but not perfect. The way Doctrine handles this is to use a proxy collection, so it sets a proxy object as the "friends" property on the user. As far as the User model is concerned, it is just a collection of it's friends, it doesn't know how they're being fetched, just that it has them. The proxy object can be created and configured by your ORM/service so the knowledge of how and where to fetch from is still abstracted out of your model.
I'd say that a good MVC framework assists this greatly, as it enforces a certain level of compliance... of course you can still code like shit, but it's less likely if the whole team use the same IDE and MVC framework, and also some good version control system like GIT. All these technologies have come a long way in the last 11, or 20 years so I'd like to hope things are a little different nowadays. These are human issues, not PHP ones, in my opinion.
Disappointingly sound logic.
Thanks for the suggestion, their is not one elseif. Just lots of Else
The aim of all the code is to accept form data, validate/sanitize it (no not done that, but thats what lines 61 to 163 will do) and pass variables to MYSQL.
I'd love to see native support for AOP.
Which PHP tends to attract in great quantities.
Ugh... I'm sure this article makes some great points but the first paragraph is barely even English. Don't people proofread anymore?
http://www.percona.com/software/percona-server/feature-comparison/
Could you provide a little more information? Are you trying to represent a number as binary representation to a file?
By, heaven forbid, being easy to learn and accessible. I view needing a CS degree to even start coding as a huge problem
If you're good with stats or linear algebra, I could use some help with a [stats library](https://github.com/mcordingley/PHPStats) that I've been working on.
I'm trying to create a binary data matrix: each row will be x values long, each value being 2 bits, y rows.
Cake? Doesn't that framework still support php4?? +1 for Kohona Don't know slim
Have you tried [Nusphere](http://www.nusphere.com/)? Does it compare in any way? (really want to know, I took a look at the website and the ide features and it seemed nice)
Lots of people did stuff in old school Visual Basic too. Doesn't make it any less horrible.
a) You could pack as a hex string which means each 2bit value is packed into 1byte $d = pack("H*", '00011011'); var_dump(strlen($d)); // int(4) vs $d = pack("S*", 0x00, 0x01, 0x10, 0x11); var_dump(strlen($d)); // int(8) b) you could write a function to take your array of values, turn them into ints, and use [bindec](http://ca.php.net/manual/en/function.bindec.php)/[decbin](http://ca.php.net/manual/en/function.decbin.php) functions to split them up $b_string = implode ('', array('00','01','10','11')); // 4 values at a time only $int = bindec($b_string); pack('S', $int); then $int = unpack('S', $packed); $b_string = sprintf( '%08b', $int[1] ); var_dump($b_string); // 000111011 // split $b_string into 2 char segments and convert to ints Unless your format is already required to be this way or your processing hundreds of gigabytes worth of data, I'd go with option A.
Primitives as Objects would resolve a lot of the namespace and naming issues. Create new versions of all those array and string functions as members of their data type and depreciate the old ones.
&gt; Edit: Oh! And named parameters! Note: Short array syntax available in php 5.4.0, prior to that stuck with array(). &lt;?php function foo($input) { $defaults = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3]; $opts = array_merge($defaults, $input); var_dump($opts); } foo(['a' =&gt; 5]); // outputs: array(3) { ["a"]=&gt; int(5) ["b"]=&gt; int(2) ["c"]=&gt; int(3) } 
Really wanted to read some responses to this. I too am searching for a way to create a modular framework :(
Yeah, I'm going to be storing millions(if not billions) of data points. My other problem is that the number of values in each row of a matrix wont always be divisible by 8(pack "S" is 16 bits). I was hoping there was a more straightforward way of doing binary writes. Thanks for the heads up.
someone like...Facebook?
* abandoning all the `array_*` and `str[_]*` functions in favour of proper methods attached to primitives (eg: `$length = "Hello, world!"-&gt;length` or `$count = array(1, 2, 3)-&gt;count`) * abandoning the error suppression operator (@) * using exceptions instead of error reporting
still, the critics are right and phil just offer lame excuses for php. for example, he said to use autocomplete for needle/haystack inconsistencies. yeah, fix flaws in the language using your editor.
Thanks for the responses, guys. Sorry I didn't get back sooner, but my daily reddit allowed time ran out yesterday right after posting. The site is currently being "re-done" in CakePHP by a group of Indians I found on Odesk. They are 4 months behind schedule and their code is filled with bugs. They are also not implementing the fixes I ask for, and are leaving tons of features out while saying that they are done. I told them that if they are not done by Jan 15, the project is off, so I'm giving them a few more weeks before I go off and find someone else. Either way, I need a right-hand programming man (or woman). I can't see myself having a relationship with this Indian company after they complete (or fail to complete) the project. They don't have a clue about why the website exists, why the features are there, etc. I need to find someone that understands the objectives of the website, and why it exists. (Its a large reviews site). Lastly, what do you guys think about hiring a separate designer from the coder? Should I get the coder first, then have them help me pick out a designer?
&gt; The first candidate to receive the exercise selected CakePHP and complained that it took him 6 hours to install it before he gave up. Did he have to install it on your enviroment? And if so, could it be that the guy had no experience with linux? As for your question, everything but unread messages per thread can be done in most frameworks by just following the tutorial so I would say that your timeframes are quite reasonable.
Well, first, I'm not so sure you should require they use an open source framework at all. If they can code it straight, let 'em. That'll certainly show their skill level, and if they *choose* to use a framework, then you can judge accordingly. Second, if you are going to force the use of a framework, why not force them to use yours? If I was an applicant, and I was told to use a framework, so I spent X number of hours learning, for instance, Zend Framework to pass your test, then I get hired and have to turn around and learn a whole different framework (Kohanna), I'd be one or more of the following: a.) burned out, b.) pissed off, c.) temporarily confused. However, I don't think the task itself is necessarily too much. Seems fairly straight forward, if you aren't looking for bells and whistles. Which brings me to my next query: do you judge UI? I program PHP full time for a University, but I told them when they hired me not to expect me to make things pretty. I make things *work*. Someone else can pretty it up, or help me to do so. I'm just curious on how you take UI into consideration in your judgement.
the manual isnt clear about this?
Instead of the first two examples, why not echo "Line 1 foo bar blah\nLine 2 bar foo blah\nLine 3 blah bar foo\n"; or instead of the third echo "Line 1 foo bar blah" . PHP_EOL . "Line 2 bar foo blah" . PHP_EOL . "Line 3 blah bar foo" . PHP_EOL; Is there some benefit to having multiple string arguments passed to echo of which I'm not aware? Also, you could use [heredocs](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc) or [nowdocs](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc) PHP certainly doesn't lack options in this matter. :-) Edit: code formatting
IMO, that is a waste of time and doesn't really tell you much about a potential hire's talent. Junior level applicants will struggle if they do not have much experience. Experienced coders will feel like you're wasting their time. Everything they've learned in computer science has nothing to do with the task at hand. Instead, ask them about data structures, algorithms, and give them real life problems that are encountered in creating a bulletin board that utilizes what they've spent $100k to learn in school. If they can think abstractly about how to solve the problems presented, I guarantee you they will have no problem figuring out how to install a framework and creating CRUD models.
Why ask them computer science questions for a programming job? I know having a strong concept of CS will help you be a better programmer, but with how many CS students I've seen who can't code worth shit, I don't think that is a great indicator.
I think, rather than task them to create something that can - let's be honest - mostly completed using a selection of tutorials, give them real world *problems* to figure out, like owwmyeyes suggested, and make it stuff that the applicant really has to think about rather than being able to Google the answer (not that there's anything explicitly wrong in asking for help). You could come up with a bunch of scripts or tools that have problems in them. Maybe they work, but can the applicant come up with a more effective way of producing the same result? Give them the scripts and a certain timeframe to find/fix problems, like what might actually be expected of them in a real-world client situation.
IMO I'd say that yes, it's too much to ask, especially if you're not telling them ahead of time that you expect that specific experience. Aside from playing around with Smarty once for a week or so, I've never once touched an open source framework. If you want a Kohanna developer, or a CodeIgniter developer, or whatever, then you need to specify that in the job posting.
Not true at all, when a framework is involved, buth Ruby and Python are faster to get a project up and running. PHP is definitely getting there, there are some awesome frameworks popping up, but as of right now, it takes longer in PHP.
I find PHP bashing a bit much too, but what does learning something like Ruby (and Rails) or Python have to do with needing a CS degree?
http://www.oscommerce.com/ http://www.ubercart.org/ http://www.magentocommerce.com/ http://lemonstandapp.com/ 
Yes, you require a CS degree to use programming languages other than PHP. I think that's another part of the problem, "Hmm, PHP is so easy I don't need to learn anything else". I think PHP developers see what their peers are doing and have no will to really get better. You don't need to outrun a bear, you just need to outrun the other people you're with.
Wow!!!! When i saw this I was wondering ... do i f**king know how to write a form !? ........ 1. You have probably heard this but .... USE LOOPS 2. When you get into the things , and you learn some stuff about OOP - you can write some functions that handle the validation and the form creation itself 3. For a beginner i'll recomend you to watch a couple of tutorials , youtube is full of "php newbie .etc" tutorials you can spend several days just watching, then - check out codeigniter.com - there are a bunch of other tutorials - spend several days watching and learning the stuff there .....- then everything will be alright.. And for god's sake DO NOT CODE untill you spend several days watching tuts and learning the basics, you are just wasting your time and energy on stuff that would not be helpfull in any way
Honestly, you'd have to be offering a lot of money for me to indulge in something like this. Hacking something together in 4 - 8 hours is possible, but you won't get the things you really should be looking for, such as a proper testing suite, or well constructed, properly documented code. When you put people under the gun like that care goes out the window because they suddenly need to worry about how long they're taking. Good code should save more time over time, at the expense of being a little slow off the line.
...or just learn the language. It's not like the schemas for functions are hidden or anything.
As an experienced dev I personally think this is the wrong approach. An alternative would be to take an hour with a few (1 or 2) guys from your team and see if he can outline a solution to your test on a white board. I feel its better to see how candidates approach problem solving and if they can take suggestions from a group. Also, where are y'all hiring? I'm looking for work and around Oklahoma City.
This is truly subjective. I'm not saying that Ruby and Python don't have great frameworks - they do. However it really depends on the programmer to make use of them. How long it takes is going to depend on familiarity with the language and/or framework.
I like people who use this form of echo. Upvote.
&gt;But in my 20+ years experience as a developer in general I've learned that most of the time, the clients with their zeal for unreasonably short time constraints and lack of ability to convey the right information are the root of the problem. As another developer with 20+ years of experience, I can say with certainty that this plays a major part in the problem. Even great developers will cut corners if they're not given any choice. What sometimes happens is that some bad developer sets the bar for timelines in the customer's eyes. You say "I'll need X weeks to do this properly", and they say "but it took random programmer Y a single week to do this other project". Clients generally don't understand the difference between good code, and bad code. They do however, understand units of time and associated up-front monetary costs.
Good point, but I'm quite familiar with Cake, Zend, CodeIgnitor, Django, Rails, and Pyramid. I'm pretty well versed in frameworks at this point and out of those all, Django, is the fastest to get something setup. Let me give you an example. Say in an emergency, I had to setup a polling app with accounts (cookies and cache sessions), profiles with avatars, a proper search engine, granular and full page caching. I could realistically do this in three or four hours with Django, that's not even mentioning the built in admin CMS system that comes for free. PHP is getting there, but currently this is not possible in that time period with the frameworks provided. 
It's difficult for me to argue points based on Django as I only have a passing familiarity with it. When I have the time I'll definitely have a look.
honestly, using PHP_EOL is fairly pointless in this day and age unless you're dealing with something truly legacy. Most programs (including Windows programs) will recognize "\n".