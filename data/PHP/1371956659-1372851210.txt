So use it or don't. That's the beauty of it, you can choose. Laravel's core being PSR-2 has absolutely bugger all effect on your codeâ€¦use any coding style you like in your application. There is no obligation to use any coding standard you don't want to use in your own code. This is why I like PHP. edit: speeling (hehe)
I was gonna say http://www.php-fig.org/ but i see this code_style_guide contains much of their standards.
This project originated from a quick hack that I built for work. I needed to test the performance of a few different HTTP libraries. While throwing together the standard "$start = microtime(true)" garbage, it occured to me that there might be a benchmark framework that I could use. Well, there are frameworks...but they are basically just thin wrappers over microtime(). I wanted something more comprehensive (and less intrusive) so I cobbled together Athletic. Basically, Athletic follows the PHPUnit methodology: you write a test class which extends an abstract class in Athletic. Inside the test class your "test" methods are annotated. The benchmark is run by executing the Athletic command-line tool, which iterates over your methods and runs the benchmark. I'm still polishing the tool and it certainly has a lot of rough edges, but I wanted to share it to get feedback and perhaps help someone looking for a benchmarking framework.
Spaces instead of tabs actually makes a lot of sense. Tabs do not have a standard size, and it can cause all sorts of visual messes if your development team are using a variety of OSes and IDEs. &gt; that shit should be 100% programmer or company specific I would say it should be company-specific. It's annoying as hell for different developers working on the same project to use different visual styles. If everyone is using the same standard then its much easier to see what's going on at a glance.
It's just what you're used to. I prefer having it on an open line because it's easier for me to see the scope of the code.
That's what I use indentation for.
Yes, i too never understood why Zend and now PHP-FIG preferred this over egyptian braces. 
Well, we have a problem example right there, since 4 spaces is far more common. If you were all using tabs in your environment, you could just set yours to 2 and everyone else set theirs to 4. Using spaces, now everyone is stuck with using just your hard-coded preference with no possibility of changing it without reformatting. 
&gt; Spaces instead of tabs actually makes a lot of sense. Tabs do not have a standard size Sorry? A tab is *1 unit of indentation*. Your text editor can choose to show if using the equivalent of 2, 3, 4 spaces, and it won't affect you or anybody. Using 4 spaces *is* forcing everyone to code like you.
I love it! I had done something very similar some time ago ([PHPBench](https://github.com/mnapoli/PHPBench/wiki/Bench-example)), but this old implementation suffered from bugs (and I am ashamed of the code) and I never took the time to improve it. So I'll be using your framework now! I checked out the code, very good too. Very clean. You could use the Symfony file locator to get rid of your own implementation. Anything you don't have to maintain yourself is a good thing (and I see you already used Pimple). One thing: in my implementation, each "BenchCase" (or what you call Event, the class) had a fixed iteration number. The goal was to compare functions, not really measure their precise execution time. In your implementation you specify the iteration number per function, is there a reason? Another thing: I had an option to export the results to file, you could do something like that too so that data can be plotted. And finally the command line tool doesn't seem very practical, you should inspire from PHPUnit so that one can run `athletic` and it will run all benchmarks in the current folder.
The decision was made at PHP-FIG to use spaces because you couldn't align everything precisely with tabs (unless you mix tabs &amp; spaces and that's a hell hole). Just explaining
Tabs do have a standard size, unless you're talking about soft tabs, which are essentially spaces. 1 *hard* tab character is 1 *hard* tab character, but unlike a space character, it can be defined to visually represent as many "spaces" as preferred. Space characters don't offer that flexibility. 
I seriously prefer it on a new line, same reason as parent. Indentation matters, but I consider matching braces vertically part of that. It's weird though, I've never experienced anyone who codes like that besides me and generally would accept to code like everyone else despite thinking it's silly (or you know, running it through a code tidy). Spaces instead of tabs I'm not really a fan of though. With tabs we can choose our indendation level, but spaces it's stuck so everyones the same. While I can see the point, it would have made just as much sense to recommend tabs be 4 spaces by default.
Everyone is entitled to their own opinion, as long as it's mine. 
It's not a problem at all if you apply the simple rule of using tabs for indentation and spaces for alignment. So you tab to the indentation level of the line, and then add spaces to align if needed - which actually is not that often, really. Certainly not often enough to warrant the extra white space and file sizes (4 bytes for each indent instead of 1 byte). I also really hate navigating in code that uses spaces - 4 x left/right instead of 1 per tab. Still, PHP-FIG made the choice it did, and more and more packages are using it, so I guess we need to adapt. 
It feels like a breath of fresh air. gj
Have been using the beta site for a whole, good to see it getting closer to release
Looks great!
I'd rather tell a newcomer to use PDO than DBAL, how else are they gonna learn how to build their own queries? ;)
Ooh, very nice :)
What cons do you mean?
Oh christ can everyone just shut up about tabs/spaces. Every time someone mentions standards there has to be 100 posts on why one or the other is clearly superior. Guess what? it doesn't matter which one is better, because the point of the standard isn't to impose the BEST method of indenting code, it's to impose A STANDARD method of indenting code. Programmer specific - are you insane? What happens when your need to merge two programmers' changes into a single file? Oh brilliant now the diffs are impossible and the file ends up fucked. But at least each programmer can decide if they have a 20px indentation or a 15px indentation.
You must be looking at the wrong stuff because the docs are excellent (even the English is of very good quality) and tutorials are up to date. It's what I learned from when I first started with it, and it's been a breeze. What exactly are you having problems with?
I love how we can finally go to the www. part of the site... It's the little things that count.
It's biggest pro. It's written in C, which makes debugging and finding actual errors which come from phalcon a lot harder to properly find and hotfix than they would be if you would work with a php framework. Even if you can code in c, it's more time you have to invest when debugging. If phalcon has any security problems, you are too pretty fucked if you don't have an proficient C programmer around. You basically have to have C security knowledge too to properly operate phalcon. And C security is a lot more complex than "validate all input, escape all output". 
Unrelated question: I usually do yum install php53 on my CentOS server and then yum install php53-process, php53-pdo, php53-xml etc. to install extensions. How would I do this for PHP 5.5 (including finding the extensions)? yum search php55 returns nothing and yum info php returns PHP version 5.1.
The same is true for any software though, innit? Look at Java - half the world is based on it, and when vulnerabilities pop up there's nothing to do but either uninstall or pray - no one actually dives in and tries to fix them, everyone waits for a patch. Other PHP extensions are the same. If you have php-intl installed and it makes your entire site international, and if an update breaks it, you certainly won't be diving into its C code trying to fix it. At some point you just have to start trusting the developer of the software you develop with. The con you mention is basically the con of every programming langauge and framework out there, if you put it like that.
Ouch. Not even 5.4?! Which version of centos?
I made a topic for it on their forum and reported all the problems I was having, you can read it here: http://forum.phalconphp.com/discussion/317/ And right now I'm learning Symfony and I plan to go pretty deep with it before dedicating time to anything else.
Thanks for the comments! I forgot to mention in my comment, but I looked at PHPBench and it helped drive some of the decisions for Athletic (annotations, etc). It also helped spur me into releasing the library, since at least one other person had the same idea :) Good suggestion regarding Symfony file locator...I have no desire to maintain a file loader so I'll integrate theirs. No particular reason for per-method iterations. I originally started that way because I thought it might add flexibility. With per-method, you could have several different types of benchmarks grouped in a single file. I'm less certain how useful it is now (after using it some), and have plans implement a per-class annotation. Better output/export is in the works. I have the output split into two domains: Publishers and Formatters. Formatters take the results and format it (duh), so you could have a CSVFormatter or even an SQLFormatter. Publishers ship the data somewhere, so you could have a DatabasePublisher, EmailPublisher, FilePublisher, etc. I was thinking last night that the Publishers should be modified to follow the Decorator pattern, then you could stack Publishers on top of each other (e.g. dump to a file AND email). Totally agree about the command-line tool. Does PHPUnit just recursively run all tests wherever it is invoked? I admit that I only use it through my IDE (PHPStorm), so I'm not actually sure how it is used in a non-IDE environment :) Thanks again for the comments!
It's still open. The main problem being that the dev tools did not create certain files and some files were created as .volt files while the tutorial said you should be getting .phtml files. After I reported it all, I did the tutorial again, from scratch, making sure to follow each step to the letter. The end result did not work and had several features missing. I then sent that result to the devs, as they requested. I haven't heard from them since.
I have forwarded it to appropriate channels. I must have followed another tutorial, strange. I hope they'll get in touch soon.
Hey, I see that you wrote PHP-DI...awesome! Mind if I ask a few DI container questions? I've used DI for a long time, but I'm new to using a container to streamline the process. In Athletic (and other projects) I'll run into situations where one class needs to instantiate an undefined number of child classes. A benchmark needs to instantiate a dynamic number of Result classes, for example. Since passing the container around as a service is an anti-pattern, I only saw two potential options. 1) pass in the construction closure that Pimple holds or 2) build an abstract factory pattern, where various concrete factories are given permission to extract a single type from the container. I went with method #2 for Athletic and have a number of factories whose entire job is to create() various objects. Is this an ok pattern? Better way to do it? Also, I have a whole class just for initializing up the dependency graph, is this common?
&gt;With the recent launch of PHP 5.5.0 it's time to move into the future and show everyone the new layout for php.net I think the PHP team is stuck in the distant past if you guys think this is a modern design.. It is not responsive at all, and is set to a 960px content width, which was considered an out of date design standard even 3 years ago. A modern website design scales to the size of the users browser, and since high resolution displays are very common now you should be designing to scale up to at least a 1600px wide content area. 960px looks so tiny on my desktop display.
imho, if code looks the same no matter where you are, it still looks somewhat professional... just give it a unified look.
It looked okay on my iPhone. What would you change?
You put a single window across your entire desktop? Isn't the point of having big monitors so you can have multiple windows open at the same time? I think the site looks fine, especially since it is largely documentation. Optimal line-length for reading is 80-200 characters. Sure, it isn't flashy or overly fancy...but its just documentation so who cares?
__EDIT:__ Original claim of lying not true. But that still doesn't change the fact that OP requests for retweet instead of linking to the new beta. Why request retweets? To get his own name out there. I get that, but there is no reason to go on reddit and ask for retweets.
Considering anyone using PHP 5.4 in prod is likely using a beta version of APC, this isn't that upsetting...
Yes, I use my browser in full screen mode; it would be difficult to navigate between the 22 tabs I have open if I didn't. I have 8 desktops that I can switch between on 2 large monitors that are dedicated to my other apps so I don't have to minimize anything. Also, optimal line-length for reading text is actually 75 characters, but that doesn't mean you can't have multiple columns to take up the space for more content or navigation, images, etc. Looks at reddit's own design for comparison, it takes up the full width of the screen at any resolution but can still be comfortably read.
Why is Javascript being used for displaying basic content, download links, navigation and notification messages? You can easily do all that without using javascript. The CSS doesn't define a colour for body text and thus relies on the browser's default styles, so you get, in my case, light grey text on white background.
For security, that shit is backported. For higher PHP versions, I used to use: http://iuscommunity.org/pages/Repos.html Now I'm just content with 5.3.3 and will wait patiently for when 5.5 is supported, by the default repos.
Fair points. I'm also a fiend for tabs...I recommend the Treestyle Tab extension for Firefox. Being able to arrange tabs vertically (and nested) is a huge space saver. Edit: I have three chromes open (~15-20 tabs each) and two Firefoxes open (~60-80 tabs each), split across two desktops and three monitors. I totally understand the need to keep tabs open :)
Am I the only one that likes the old colors, font, and spacing on code better than the new version? [Comparison](http://i.imgur.com/zCE4Kpr.png)
To answer points about responsiveness, it's on our list, but getting the current site theme updated is our first priority. If you want to make patches please send them to the mailing list, or register them on http://bugs.php.net Thanks!
So do I. I'll try to be a little more constructive with a few examples on the documentation pages. * A js-enabled browser should not be mandatory. I consider this a bug. * I am disturbed by the lack of contrast. This affects the plain text, the titles and the links. Dark grey over light grey may be artistic, but it is less readable. And why use so pale a blue for links? Titles (h3, since there are no h2) aren't visible enough on a fast page scroll. Php.net is mostly intended for a technical audience, so the UI should focus of effectiveness more than "beauty". * The search box is less powerful than before. I use it, like many friends and co-workers, to quickly access to a function's reference. In the beta, it always points to a generic list of matches, and the previously default link is not the first result. I'd have to use the mouse on a intermediary page instead of a fast keyboard-only search. * There is not enough difference between the comments and the official documentation. They share the same colors (background and front). * I hate it when real dates are hidden. The comment was posted "X years ago"... but which month? Was it before PHP5.3 was out or not? Why not put "2009-03-25 (4 years ago)"? This applies to many other sites, notably github, I can't find any good reason for it, and it always annoys me. I usually have to convert it in my head, giving the year "2013" would be even slightly better. * The line-height is annoyingly large. Why add extra space between lines of text or code? * In several browsers, scrolling feels less fluid than before. I haven't investigated why, but I suspect the new JS libraries in this beta. * The banner images at the bottom are useless and a bit ridiculous, IMHO. But I recon that's not important. Apart from these regressions, there are a few improvements. Some useless texts were removed ("report a bug" was repeated on each block of a doc page!). Some blocks have a better ergonomy (like the "Parameters" block) and would be more readable if the colors were more contrasted.
Lying, really? See the github for php.net's source code: &lt;https://github.com/php/web-php/commits/master&gt; The last 2 commits were made by dragoonis A php X net : "[beta site] Making beta mode kick..."
From the php side, if there are no calculations that need to be run against the field I just user ISO, 2013-06-22 11:04:00. In the case of date and time calculations the easiest to use is unix time, ie: the number of seconds since 1970. 
Mysql has its own datetime format optimized for storage and calculations. 
1. Set your [default timezone](http://www.php.net/manual/en/datetime.configuration.php#ini.date.timezone) to UTC in php.ini 1. Storage depends on the precision you need. If you need sub-second precision you will need to store the time either as an [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string or as a BIGINT (millis/micros since epoch). If you don't need sub-second precision use a [DATETIME](http://dev.mysql.com/doc/refman/5.5/en/datetime.html) 1. Correct the date/time for the user's timezone upon rendering/displaying a date. You'll need to store the user's timezone to do this. There's no good way to defer this to the browser, unfortunately. 1. Use ISO8601 date/time formatting in APIs Hope that helps!
Build it from source: https://github.com/zendtech/ZendOptimizerPlus I've never had any issues with it with php 5.4.
For those of us who believe that they don't have to click 4 links to get to the actual information: http://php.net/?setbeta=1&amp;beta=1
I was referring specifically to how it's visually represented. The point of coding standards is to improve the readability and standardize the look of the code across a team.
&gt;A tab is 1 unit of indentation. Your text editor can choose to show if using the equivalent of 2, 3, 4 spaces, and it won't affect you or anybody. As long as everybody is using the same settings for their tabs and tab stops, and nobody is mixing spaces and tabs, sure. &gt; Using 4 spaces is forcing everyone to code like you. That's kind of the point of having a standard.
Its not looking "ok". Its a well rendered desktop version. I was speaking it should be rendered as a mobile version. Larger fonts different layout. Etc
As a side note, one of my biggest pet peeves when reviewing code written by others or diving into a project is whitespace all over the place. Please people, put some whitespace highlighting into your IDEs/editors. I swear some people just hit the spacebar at the end of a line a few times just to piss me off.
There's only one relatively minor problem. The date rolls over in 2038 
[@derickr](https://twitter.com/derickr) is your guy for PHP DateTime info. He's given a number of talks on the subject, there are probably more recent slides: http://derickrethans.nl/talks/time-ipc2012s.pdf
Because of stuff like that I switched to ubuntu
How would you do the navigation?
All style guides are ultimately about giving up some personal preferences in order to standardize the way a team writes code. No one will ever be 100% happy with one, but they're all better than not having one at all. I once read an argument that language designers should make the language enforce a style with compiler warnings because of the amount of productivity lost in style arguments. Having been through a couple style definition discussions I'm sympathetic.
DoS isn't as spectacular or serious as, say, privilege escalation - but it is a security problem in the very common PHP use case that is shared hosting. &gt; Seriously? That's your idea of a fix? What if you're in CLI mode? It doesn't execute in CLI mode too. &gt; What keeps the users to make a cron which runs each minute and does the exact same thing? The password. If they don't know a password, they can set a cron job that will fail with 401 Unauthorized and which won't clear anything. How is this not a fix?
"Relatively minor" is exactly right. By 2038 we will have long ago switched over to 64-bit (or higher) architectures. 64-bit operating systems use signed 64-bit `time_t`s. That means they can express a time period of ( 2^64 )/2 -1 seconds, which is about 21 times the current estimated age of the universe.
Well hold on... I recall talking with a guy who was working on rewriting my old electricity provider's billing (or something with meter management) application that was written in the late 70's. I know where you're coming from, but never underestimate government facilities' ability to function behind the times. 
The speed gain here is really not worth it if it will make the code more difficult to maintain in the future. I'm not saying it will - just that it could - and saving a few microseconds here and there just isn't worth sacrificing maintainability. In other words - you are advocating optimizing too early ;)
Absolutely! You never know what is going to happen in the computer world in 5 years let alone 25 years. Just a painful reminder: ie7 was the latest version of internet explorer 5 years ago. I can see it now; Somebody out there is going to have a live feed of Unix time and video it akin to an odometer rolling over. I should probably put a notification in my calendar to do that. 
Was going to post it, they are trying WAY too hard to be like other sites and copied a lot of elements but under no vision or creative guidance new design looks horrible. Old one was at least professional and to the point, this one is pure garbage and looks like a web site for a grape drink.
* http://careers.stackoverflow.com/jobs?searchTerm=php&amp;location= * https://jobs.github.com/positions?description=php&amp;location= * http://www.simplyhired.com/a/jobs/list/q-php 
I do not know. Not my baby :)) but there are ways. (If you really do not know acess sites like smashing magazine see hiw they do it) 
For criticism #5, hover over the date. I really don't mind it since usually they have this option. Thought they were using the time html element but they are not.
the new theme is awesome and looks neat.
What? Ubuntu doesn't put new versions (apart from patch releases) in the main repos either. I don't think any distro does, that'd be a nightmare.
Just curious... Why would you be browsing php.net from a phone on a regular basis? Do you write PHP on your phone or mobile device? 
I do like responsive designs, but it's overstating it to say they're "stuck in the distant past". Most websites I see still use a static width, even brand new websites. But a responsive design would be nice.
Not everything has to be responsive, who would be looking up PHP documentation from their phone on a regular basis?!
You get that with hard tabs, as well. 
Pure CSS menus are a nightmare for usability.
To be honest the whole post sounds a bit rude. Ever heard of a little word called "please"?
This guy is right. Timezones are hard and doing it half-assed now will come back around to haunt you later. You need user timezones (not UTC offsets, but actual location-based timezones) in order to handle dates/times correctly.
Which is why you also make the menu headers a *working* link to a TOC page.
Aside from what everyone else has pointed out I only noticed one other thing at a quick glance. In services/modules/base/mysqli.class.php it looks like it's trying to be a singleton, but didn't quite make it. If you're going to use that pattern enforce it otherwise there's no point in having a getInstance() method and the $_instance variable. Change the constructor from public to private. Remove self::$_instance = $this; from the constructor. Change the code inside of the getInstance() method to the following. if (is_a(self::$_instance, MysqliDb)) { return self::$_instance; } // read values from a config self::$_instance = new MysqliDb(...); return self::$_instance;
I think the site looks great and have to laugh at all the responsive design complaints. Are PHP developers really going to need something fully responsive so that they can look up fputscv on their iPhone 5? LOL NO, they won't, because they will be on a desktop...programming.... 
Maybe PHP.net could try [CardinalCSS](http://cardinalcss.com/), might help a brotha out!
A couple months ago I was asked to come in an audit an application. This application was used as a POS for a fitness chain. After roughly 30 of looking at it I told them if they don't stop using it they'll end up getting into a lot of trouble. I found credit card details with full details including CVV stored in plain text. I had admin access via SQL injection as well. They were pretty pissed off at their developers to say the least. It's developers like this that give PHP developers a bad name.
Thanks, I hadn't seen that. But that's no excuse for the UI. If the information is hidden and users can't guess that it exists and where it is, that's a usability problem. And I still prefer to browse the page with my hands and on the keyboard.
Only PHP frameworks: http://www.techempower.com/benchmarks/#section=data-r5&amp;l=sg
I always store date/time values as epoch/gmt time. This is basically an integer (big number) indicating the number of seconds since January 1st 1970. The reason is that this number (given that clocks are set correctly) is the same for everyone. You can later easily apply a timezone to this to get a persons local time. If you need to do calculations etc. and you have users spread out geographically over various time zones I strongly suggest you take this into consideration.
Hey Will, can you explain what you mean by 4 clicks? I've added the setbeta option to ensure beta mode is enabled/disabled by a cookie option to keep things static. Thanks.
Hi Rogojine, if you'd like to take your feedback and make some technical patches you're welcome to do so - https://github.com/php/web-php
Exactly. Best comments: * check if input is bool * iterate * prints out hello Though don't miss out phpdoc especially describing a class or its methods. Also if there are heavy Algos ahead. When you work with a team you also usually put in some bugfix comments like: please don't change this line as it may screw performance. But never comment the obvious.
Please just nuke all the user comment database and start from scratch. The comments are nearly ALL junk, out of date (PHP 4) and include some of the shittiest code I've ever seen (which newbies seem to copy and paste). If you dont want to nuke them, at least sort them by recent first. The top comment on this page is ELEVEN years old... http://www.php.net/manual/en/language.basic-syntax.php 
Why are you linking to your twitter?
If you ask "Report any issues" in your post without any further information, I think it's okay to assume to report feedback here. Rogojine feedback was constrictive and elaborate (I even support every point), asking now to go somewhere else sounds .. a bit rude. Nevertheless, thanks for the hard work. I for one point would like to see even more responsive/mobile optimizations (being on firefix mobile in Galaxy note 2 here) thanks
My patch would be to revert everything related to the new theme. I haven't seen one single thing that made anything better.
This shouldn't even need to be discussed anymore. If your app is vulnerable to SQL injection these days, you're doing something majorly wrong. At the very least you should be using mysqli or PDO with prepared statements. But, unless you're making a pretty small application you probably shouldn't be writing raw queries/parameters anyway, and should be abstracting it.
It's not nearly as purple as the old design- looks great!
&gt; Isn't the point of having big monitors so you can have multiple windows open at the same time? Isn't the point of life having different entities trying different ways of doing things? Stop thinking everybody has to do things your way, and start thinking of how to allow everyone to get it their way. Customization and flexibility are two things modern designers tend to neglect. For the record, I do maximize my browser window. I want large fonts and a lot of information visible at once. I don't have a problem reading long lines; some other people might have so that's why you can resize your windows or rotate your screen. Oh and when I'm developing, I use two screens, by the way.
Good work Paul, this needed to be done. It might not be 100% awesome, and there will be work to do, but its a big step forwards that needed to be done.
Exactly. This is a nice and simple way to describe what they're about to do to the PHP site and, unfortunately, the Internet and mobile OSes fad since a couple of years ago. It's not just the PHP guys doing these horrible sites.
I check the docu while being out eating remebering to do something differently and checking if the method allows it or if i should look at another version. There is no real real use but having a better mobile optimised font would help
This would be your best bet for 5.4. There are tagged releases in there in the Git repo - so you might want to grab one of those rather than HEAD.
Not on a regular basis true. They are redesigning the site. When everyone looks at optimising the sites for mobile devices why would the php community not do it??
Not nearly enough contrast on the beta site. Everything on the function reference pages just kind of blurs together, making it much harder to find what I want (usually the needle and haystack order!). I find it overall to be less readable and less usable. Seems like it was made for tablets in mind rather than for desktop computers.
Ugly and lesser usefull == bad implementation. You should always have the option to go to the full site if you need it though. Smaller does not mean ugle or lesser features. If a frontend dev or designer ditches functionality or features that is wrong. Thes eis no excuse to remove functionality. Sure you would need to handle it differently, but you CAN use the small screen and implement the full functionality
Certainly an improvement over the old - one thing I did note, the call to action to switch (at least on my computer) is just a dirty old unstyled anchor tag slapped above the header - makes the old design look (even) worse :D Love the new documentation pages layouts too - they are a real highlight, much easier to read.
There is a list of hosting companies that offer Phalcon as an extension. Check this out http://phalconphp.com/hosting. Fortrabbit also offers a free dev account.
&gt; The search box is less powerful than before. I use it, like many friends and co-workers, to quickly access to a function's reference. In the beta, it always points to a generic list of matches, and the previously default link is not the first result. I'd have to use the mouse on a intermediary page instead of a fast keyboard-only search. Quick URLs still work: http://php.net/strcmp 
@theswader Actually this was the case until a week or two ago. I am preparing an explanatory post regarding this but cPanel has arbitrarily removed all of the votes but 7 from the feature.
Learn PSR-0 namespace autoloading then it will all make sense.
You've a few options.. 1) Put the sensitive config in a config file or ini file, and have the code base read it (but gitignore the config file). Downside is you're parsing it each time and relying on OS's file cache to prevent re-reading it from disk on each pageview. 2) Alternatively define a BaseConfig class which holds all your non-sensitive stuff and the code to deal with it. Then have the site create a SiteConfig class, which is inherited from BaseConfig, but overrides the sensitive stuff, and again that part of it is gitignored so not in the repo. Your codebase would create a SiteConfig class to get at it, rather than a BaseConfig class. Upside is this benefits from any opcode cache you're running (APC etc), so it will almost never hit disk, or even get as far as OS fs cache. 3) Environment vars are another option, but personally I hate them because its external to your code base, and just one more thing that has to be documented when setting up a new server 
The tone of his comment and what he was suggesting wasn't at all rude. You're just being too sensitive. 
Twitter, PHP.net, beta. Just link to the damn beta here.
A bit unfair to single out Zend Opcache here - a server running APC could be controlled in the same manner. I would like the think the number of shared hosts running any form of Opcache shared between all users of the machine to be fairly low anyway (no?) - a better idea would be to fire up separate PHP instances/pools per user account (via PHP-FPM/etc.). 
See ya in 2015
And yet that top comment is actually quite useful. People would still run into that same issue today. The advice is just as good now as it was then. That's not to say that a lot of the comments aren't out of date - many of them are, I agree. I think you just picked a bad example.
32 bit timestamps are also a problem for old dates. Guess what, many people were born long before 1970. You can't save their birth dates in 32b timestamps. If you don't have a total control on where the application will be deployed, you have to expect the worse. There are still many 32b servers where I work, especially 32b RHEL6.
Unless you're using canonical links, like php.net is doing.
[Menu messes up if you have a larger than default font size](http://imgur.com/BFaOqbu) - Latest Chrome, win 7, font size set to 'large', normal zoom. 
even so, not all search engines support canonical links, and even those that do can choose to ignore them. Matt Cutts himself has stated that 301 redirects are preferable to canonical links in this situation.
1. Store in UTC, and keep the users' timezones 2. Convert timezones on display. 3. Discover what [falsehoods you believe about time](http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time) and [some more](http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time-wisdom)
because of feedback i received from a couple of friends who tried it. they had problems understanding what some of the methods were supposed to do.
My only reservation here is that it's not really a TDD exercise. TDD typically involves choosing and writing tests for the functionality being added next by the developer, as opposed to here where the test dictates the next piece of functionality to add. It's a subtle difference, but a tangible one. Now I'm not saying that this isn't a good idea. I'm not saying it isn't useful. Just that it's not quite TDD, as the design evolution is already in place for you, and you're just writing the code. For a great example of what I'm talking about, check out [Kent Beck's *Test Driven Development, By Example*](http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530). He walks through developing a few applications using TDD while keeping a "mini backlog" of what to do next, constantly adjusting the priorities. Again, not putting this down, just not quite sure if it's as much as a TDD exercise as a testing exercise. But it's an interesting concept...
I finished university this year (started at 19, almost 22 now) and I have to say that the people I met, the friends I have now are simply amazing. It was a great experience that ultimately ended in me deciding I hated the course I completed (Computer Games Art) while I spent all my free time doing programming. Right now I am back at home working on a personal PHP project in the hopes I can prove I know my stuff. I have other projects that show I can build systems but this project is to show that I can code nicely (the other projects aren't nice at all) using MVC and an OOP approach to problems. My hope is that I can prove to other developers/companies that it is worth their time and money to have me onboard their teams.
I think it's a great concept, and I wish you the best of luck with it. If it works, hopefully it can be a spark of change to the way we traditionally teach testing (which is sorely needed). So don't take my words as discouragement, but more of a side-note / rant about it... Keep it up, and hopefully the experiment will work!
I have updated the original comment to add a link for you. I did not think people needed a link to php.net
Could you point me to the basic symfony tutorial? Can't find it on the site.
have you wrote a article about the finally keyword? it can really use some copy-pasta
Yup. That function was originally used to wrap the whole code parsing, and thus eat lots of code :)
http://symfony.com/doc/current/book/index.html it is symfony's doc , and it is a complete tutorial on the fraomework and its components.
Never heard of this Vagrant virtual machines, seems interesting.
might be useful. someone has similar preset for aws usage?
There is an [AWS provider](https://github.com/mitchellh/vagrant-aws) for vagrant.
That's like asking why is `array_map($callback, $array)` and `array_reduce($array, $callback)`? The answer is simple: Someone implemented it like that. PHP has lots of "who knows" implementation "got-ya"'s. This is one of them...
MD5 hash won't protect anything really...
The best answer is already given by ircmaxell. However, like most weird things in PHP, there is historical background to it. Calling $GLOBALS a superglobal is a bit of retcon; as originally there was just $GLOBALS. It's an important language feature as one of only two ways of accessing global variables from within a function (the other way is the global keyword). When $_GET, $_POST, etc were added to the language the concept of superglobal was born. And they needed to have the underscore prefix to avoid conflicting with existing PHP code. 
please if you are going to work with PHP , stop asking yourself why or you are going to go nuts. PHP development used to be very messy. But now , we cant change anything , since it would "BREAK" everything. I personnaly have no problem with huge breaking changes , even if it messes up with native extensions. If these extensions cannot be maintained , then they are not worth it. 
I don't think agnostic means what you think it means.
I'll be honest, I'm not sure I understand the point. You either learn PHP syntax or POD syntax. But POD translates to PHP, so why not just learn PHP?
You could say the same about any preprocessor (Sass, Less, Coffee script, ...).
In my view PHP 6 should break backwards compatibility API and fix all of this rubbish.
$_GET, $_POST, $_REQUEST, $_SESSION, $_FILES, $_COOKIE and $_ENV are considered "input"... ..variables that are imported from an external source $GLOBALS does not fall in the above category 
Yeah that's what I thought first but I wanted to be sure if there was really a good reason for that :)
I take offense at nothing (well nothing in your statement). I'm glad there are people better at explaining things than I am ;-)
Here's a more generic overview of time and timezones in Unix http://unix4lyfe.org/time/
More historically-precise `$_GET` and `$_POST` didn't always have underscores in front of them. They were introduced in Zend/PHP3, and originally called `$HTTP_GET_VARS` and `$HTTP_POST_VARS` et al. Which were lengthier but more in line with the `$GLOBALS` denomination (also didn't exist in PHP2/FI). The leading underscore in `$_REQUEST` is just from the shortening that was introduced in 4.1, whereas `$GLOBALS` didn't ever have the `HTTP_` pre and `_VARS` postfix. And as you said already, the retainment of the underscore for `$_GET`/`$_POST` was for eschewment of expected identifier conflicts.
It may have been due to Xdebug being enabled and your IDE not listening for a connection. That tends to slow it down quite a bit if you're not aware of it. I've disabled Xdebug autostart by default now, and all complaints re: speed have stopped. Care to try again?
Here's a bit more background: https://jtreminio.com/2013/05/introduction_to_vagrant_puppet_and_introducing_puphpet_a_simple_to_use_vagrant_puppet_gui_configurator/
There's also www.rove.io for Chef.
I really need find some time to discover Vagrant. It almost looks too easy from what I've red so far
So the obvious usage is something that is too big for memory, such as streaming data from disk into a database with some processing in between. The syntax is nice, since it cleans up otherwise kinda ugly code that deals with pagination. But more subtly, it gives you an object that you can pass around which maintains its position in the "loop", no matter what that loop is (a foreach, a file stream, etc). You can pass that generator around to different functions and begin operating where you left off. They allow you to replace callbacks with simpler iteration cycles. It's one of those features that you don't normally use...until you realize you really need it. Then it's clunky to implement on your own.
Yeah, we can just bring the internet down for an hour, do a quick find-replace, and it will all be behind us forever. Or just not have these problems in new projects. Either way.
I copied your code and it worked fine for me. Are you sure that $_POST['main_body'] is being sent from the form properly? Try using print_r($_POST) to check. 
When i use the follow: if (isset($main_body)){ print_r($main_body); } it works just fine, shows the content i typed in the form. But when i do it under if (isset($_GET['confirm'])){ print_r($main_body); { i get just a "array ()" here is the form code &lt;form action="editprocess.php" method="POST"&gt; &lt;input type="text" name="main_body" height="120" width="500"/&gt; &lt;br /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; How i have it set up, when you fill out the field to change the table in the database, it goes to a preview and asks you to confirm it, when it asks to confirm the changes it displays the form content. But when you click on submit to confirm the variable gets the undefined error. I am missing something :/ 
Howdy, just a couple notes from someone who's been in your shoes for some months now... When I'm coding/troubleshooting a page I'll often put var_dump($_POST) and var_dump($_GET) at the top, that way you KNOW what is being sent to the page, every time. Stop using mysql also, use PDO or MySQLi Get rid of your closing tag "?&gt;" It is recommended practice NOT to use the closing tags unless you actually have html after it. When you're researching google, make sure the tutorials you're reading are relatively new. Anything older than 12-18 months has a high chance of being out of date. It's sad that outdated info still sits at the top of search results :( But as a self-learner, it's your responsibility to find out what's bad information and what's good information, you can always look at php.net to see if a function is outdated. Being able to troubleshoot your code yourself is a huge requirement, and the only way to learn is by doing it and failing and failing and failing and then succeeding and learning from it.
To paraphrase a quote from the movie Mystery Men, &gt; "There are no good reasons and no bad reasons, there's just ... there's just a bunch of reasons."
If I understand correctly: *editprocess.php* is handling the submition from two different forms. One with method "get" and the other one "post". The 2nd form(the get) is not sending any data apart from the *confirm* variable. When you try to access $main_body here: if (isset($_GET['confirm'])) { //Other stuff here echo $main_body; } The variable is not set: remember that there is no persistence of data between the two requests. 
So if i understand, When i check if the "GET" Form with the if statement it basically forgets about the other if statement before it that defined the variable as its a different form? 
This makes it super easy. I didn't have to touch anything to get a Laravel config.
Yes I would love this!
The Python 3.0 debacle is actually quite instructive here. There were good intentions to fix "well-known annoyances and warts, and removing a lot of old cruft." But consider how much grief this simple change to the print statement caused: Old: print "The answer is", 2*2 New: print("The answer is", 2*2) Deciding not to support the old syntax alongside the new is the kind of thing that has held back widespread adoption of Python 3.0 for years longer than necessary. Imagine how disastrous it would have been if PHP had done the same for `echo` ...
Yes. It's a different request. Your php script does not retain state between requests. Let's try something: Your main form: &lt;form action="editprocess.php" method="POST"&gt; &lt;input type="hidden" name="form_name" value="pre_save"&gt; &lt;input type="text" name="main_body" height="120" width="500"/&gt; &lt;br /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; Your **editprocess.php** &lt;?php //Let's make sure we only accept requests with relevant data: if ($_SERVER['REQUEST_METHOD'] == "POST" &amp;&amp; !empty($_POST)) { require_once('class.php'); $connect = new connectdb(); $connect-&gt;connect(); // Handle the main form: if (isset($_POST['form_name']) &amp;&amp; $_POST['form_name'] == 'pre_save') { $main_body = $_POST['main_body']; // You should be filtering for xss here, no need to use mysql_real_escape_string, // mysql_real_escape_string should be used to prepare data that is going to be commited to the database not served to the user. // Additionally mysql_* functions will be depracated, check either MySqli or PDO $main_body = mysql_real_escape_string($main_body); $confirmation_form = $main_body. '&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;'. '&lt;form method="post" action=""&gt;'. '&lt;input type="hidden" name="form_name" value="do_save" &gt;'. '&lt;input type="hidden" name="main_body" value="'.$main_body.'" &gt;'. '&lt;input type="submit" name="confirm"&gt;'. '&lt;/form&gt;'; echo $confirmation_form; } //Handle the 2nd form: if (isset($_POST['form_name']) &amp;&amp; $_POST['form_name'] == 'do_save') { //$sql = mysql_query('UPDATE `home_page` '. //'SET main_body = "'.$main_body.'" '. //'WHERE id=1'); //mysql_query($sql); $main_body = $_POST['main_body']; // Main body *should* be echoed here // Didn't test this! echo $main_body; } } else { // No $_POST data in the request // Do some redirection here, maybe to your index.php file } Not tested, and not the best practices, but I hope it helps.
Seems like a fair idea to me. Even if someone doesn't like it, they don't have to use it.
I really hope this one gets in. I'm incredibly impressed with how quick Joost smashed this out after I suggested it.
Are you using bcrypt for hashing passwords? Are you filtering user inputted data, and using prepared statements to query the database? I'm not familiar with cakephp.
I could use bcrypt, but it's stored SHA1. Inputted data is filtered, as far as I know prepared statements aren't possible if you use proper syntax.
There are hashing algorithms designed for passwords. They're meant to be slow, to make brute-forcing a hash more difficult. bcrypt is one of these; SHA1 isn't. I don't think SHA1 is considered particularly secure these days anyway. If you use Cake's ORM, you should not need to worry about escaping query parameters. If you ever show user-submitted data to users (e.g. printing out a username), make sure it's escaped. Cake's HTML helper, IIRC, does this for *some* functions, but not all. It's been a while, that may have changed. In any case, just make sure that data is being escaped.
I realise (hope) it's a business decision, but a 5-digit password is laughably easy to brute-force. hashcat+GPU will guess in the billions per second. Hell, 5 digits is short enough that someone doesn't even need to get your hashes - it's feasible to perform the attack online.
You should probably join us in #phpc or #phpmentoring on Freenode. You probably won't have to pay.
While I don't hate the feature this is a terrible argument. You could say "Well, you don't have to use it" for any feature no matter how great or terrible
A unified error methodology, don't be crazy! Any issues with this approach? set_error_handler(function($num, $str) { throw new \Exception($str, $num); });
 yield "Fuck yea";
This is pretty much just "pay to help us better our product", as the customer will buy it and improve it without much more than like two mouseclicks from your end. The lazy business model
As somone who has given alot of thought into developing a php accounting application I might be abe to help you save some time and unfortunalty its a rabbit hole with no bottom. Accounting applications in my opinion have two key functions the first is tax and compliance and the second bookkeeping. Tax and compliance is the reason why accounting applications are known as monolitic beasts and the why organisations pay a high price for solutions. The cost of retaining the necessary experts and developers to keep any application current is excessive with every new financial year bringing new regulations that must be translated into code with every region having there own national and local regulations. Now the second function of accounting applications the bookeeping and by that managing a General Ledger. Fowler has good information on patterns used to implement GL (search for Posting Rule) even then its a complicated abstraction but one that a good developer can implement. What will keep you up at night is how to main the necessay concurrency. At it's simplest all transactions could be stored on a single database table which would be a blocker if your queries create read locks during updates. This sort of complexity that had me looking for lower handing fruit. 
So just for an FYI, if you already know this then I apologize. The hashing algorithms are just the first step of hiding the contents of a password. There are 3 things to consider when hashing a password: 1. The algorithm itself. (SHA1) 2. "Salts" This is random data thrown into the hash process to make it much more difficult to brute force. 3. "Cost" this is the number of times the password has iterated through the algorithm *with* a salt. Simply running a password through SHA1 is not efficient: http://www.sha1-lookup.com/ If I gain accessed to your database and all you did was run your passwords through SHA1 I would have all your passwords. SHA1 is an algorithm, its a tool *used* to ultimately have secure hashes. Bcrypt is a built in PHP function that forces you to specify a 22 character "salt", and the "cost" i.e amount of times you would like to iterate through the algorithm. **Prepared statements** is also a built in function that allows you to write *general* SQL queries. It works like this: I tell PHP to "grab this row in my database". A php's PDO (the object that handles database queries) then takes my statement, and "prepares them" for several different databases, finds out which database you are using, and then translates the query into the correct form. It also validates the query to make sure people cannot attempt to use a SQL injection. If you filter your input correctly, you don't need to use prepared statements. But there's still the issue that if you change database's, you have to rewrite all the code to fit into the proper syntax for that database, like Oracle for example. Again, I don't know how much you know, and if I am preaching to the choir I apologize, and just consider this a refresher exercise for myself! Anyone care to add to this?
Making every warning and notice an exception is a tarrible idea that I doubt would ever be implemented.
SHA1 is not secure, well..it depends on how you use it I guess. Even using MD5 with a decent salt and large cost would be sufficiently difficult to crack for most computers. http://www.sha1-lookup.com/
I am not positive if I was just lucky to get the new site. To revert to the normal site it gave me a link to: http://www.php.net/?setbeta=0 **(see correct beta link below)** so I tried to set that to 1 with the above link to see if it would help force the beta site to appear for everyone. **Edit:** The link is http://www.php.net/?setbeta=1&amp;beta=1 . Thanks to speaker219 for the link where I found the correct url.
thx 
As /u/ckdarby says, add your database config file to .gitignore and create a database.default.php with empty strings. After you do this, you also need to purge your repository from all versions of the old files as these can be found. Follow [these instructions](https://help.github.com/articles/remove-sensitive-data) kindly provided by Github.
Not any feature though. This one can be safely ignored. Edit:// Was on my phone. What I mean is, in your own code, you do not need to use this feature, or for that matter even know it exists. If you come across it in someone elses code, you will have already needed to check to see what variable name the exception is under, and if not assigned, you can assign it rather easily yourself. Not all suggested features could be ignored like this.
Ahh cool, you learn something new every day! Thanks! [Proof](http://3v4l.org/TevhO)
You can compute billions of MD5 hashes per second on today's consumer GPUs. You may as well just store MD5 password hashes as plaintext. There are plenty of good uses for MD5, SHA1 and other "insecure" hashing algorithms, but passwords isn't one of them. edit: interesting link!
Yes, that's the one. I thought the HtmlHelper had better handling of escaping in the 2.x releases, but looking at http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html, it seems only `link` escapes by default. If the thing you're guarding against is maybe a bit fuzzy in your head, try setting a username to "&lt;script&gt;alert('hax0rz!');&lt;/script&gt;"; you should see a JS alert box on pages with that unescaped username displayed. That's a proof-of-concept of the thing you want to stop :)
No, I had to look it up, thanks for the explanations, I'm learning! :-) AFAIK, the standard encryption of CakePHP needs a Salt in the core to be defined, but no costs ( = 1?). So I should implement bcrypt instead of SHA1 and escape printed data. 
&gt; why is array_map($callback, $array) and array_reduce($array, $callback) There's a logical explanation to this specific example - "Map a function" vs "Reduce the array" :) Especially considering the fact that there can be more than 1 array in array_map. People think it should be a somewhat extension/module-level standard, array as 1st arg for arrays, string 1st for strings, etc.. It's easier but not sure if it's right. &gt; PHP has lots of "who knows" implementation "got-ya"'s True ofc, though strange !== bad ;)
That's strange â€” CTRL-F "magic," no results.
Is it necessary although when it is just email and password with its validation rules?
&gt; we can just bring the internet down for an hour, do a quick find-replace No one says you must update all your 5.2 (for example) sites, but for the sake of future projects it would be better to get rid of all legacy stuff.
[One year ago.](http://www.reddit.com/r/PHP/comments/om9gm/phpnet_gets_a_new_design_opinions_divided_great/) And I'm still not convinced on it. Everything seems to take up a lot more space, requiring more scrolling to read the same amount of information.
Can't agree with this more. For a site that most people use to browse documentation on, it does a really bad job of presenting the documentation in a nice easy to read way. The old design is a lot better at this, which is why I'll be sticking with it as long as possible. After that I guess I'll have to knock up some stylish rules to beat it into something usable when I have stylish available.
Your framework can do that easily enough, the core language doesn't need to. It would be the biggest backwards compatibility issue ever.
It's valid. The only argument we've heard against it so far that has any merit is "it promotes bad practise to ignore them.", which, well is a little silly. If you are going to be using the $e you should reference it. If you are not going to be using the $e then you shouldn't bother referencing it. As for missing out the actual exception type hint from the catch block? Not sure about that part, but it works fine in other languages.
The feature is valid, though I'm slightly more used to C++ style `catch (...)`, the argument isn't however.
Because PHP is a language [full of hole](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/), so POD is designed to be safer and cleaner.
That's why I use a good old fashioned for loop whenever I need to do any updating of an array. The internals of foreach are just too weird to waste my time worrying about them. 
Hi kugrian, Can you report this via our new UserVoice system, see this new reddit post: http://www.reddit.com/r/PHP/comments/1h1b94/phpnet_moves_to_uservoice_for_support/
\*GASP* PHP is inconsistent? :P
Since there's been confusion before about it, I'd like to note that dragoonis is indeed part of the PHP.net team, so this post is about as official as things get. Please don't report it. :)
&gt; Better possibilities for static analysis tools Do explain...
 I'm supportive of moving in this direction and I think Paul has done a lot for the community by putting this new design forward. But, with that said, I think we can do better. How about a design contest? If you think that is a good idea, vote for my idea at User Voice: https://phpdotnet.uservoice.com/forums/211823-php-net-beta-site/suggestions/4121707-have-a-design-contest 
* http://tutorial.symblog.co.uk/ * http://knpuniversity.com/ * http://www.ens.ro/2012/03/21/jobeet-tutorial-with-symfony2/
I assume any such behavior would be a setting, defaulted to off, so how would this be a backwards compatibility issue?
Personally, I love the new design. It would be even better if it was responsive. :)
It pretty much is compatible to anything. I mention bootstrap because using Paginator::toHtml() will render the pagination with a div that has the the css class "pagination" found in bootstrap.
Creating this as an ini setting defaulted to off would of course be fine, but just switching this would obviously be terrible. Also, that switch would be default off until PHP 6.5 at least if history is anything to go by.
How long have you been at your current position? If you've been there longer than 2-3 years, I would say you should consider moving on. I think the key to being a truly successful developer requires you to not only expose yourself to different technologies, but also different industries. It really depends though on what you want out of your career. I personally don't like to feel "comfortable" for too long. As a developer, I like to feel challenged. A new position will expose you to new set of problems to solve and give you more perspective and experience. Good luck to you, whatever you choose to do! 
Thanks! I took a quick look at r/php before I posted but it was late so I guess I missed it. 
&gt; As you can see, the code returns all the results and then evaluates the criteria as opposed to passing the selection criteria to the ORM or SQL. I guess it depends on your experience with caching strategies. I've worked at a place where the caching was set up so that you call for broad datasets (always cached) and doing the filtering programmatically, if possible. Hitting the db directly with a custom query was typically a no-no.
"A situation where the PHP documentation doesn't adequately describe the semantics of the language? Never!"
That's true I suppose. However, if it's convenience that you are after, wouldn't it be preferable to abstract the markup generation into its own rendering class so you can simply pass the rendering concretion to the paginator?
Thank you so much!!! I never would of thought of doing it that way. It worked great, I changed all the MySQL to MySQLi $sql = $con-&gt;prepare("UPDATE `home_page` SET main_body=? WHERE id=1"); $sql-&gt;bind_param('s',$main_body); $sql-&gt;execute(); $sql-&gt;close(); It works great, and i read into PDO. I just need to read up into xss filtering, but for now for this little test project i should be fine for now. :)
Fine, quote marks!
Well, Paginator::toHtml() was meant as a drop in and move on. As it is easy to render the pagination without doing anything else, hence the name toHtml(). Also it serves as an example on how you can create the pagination manually, like I showed it above.
I think the author is approaching this wrong. You don't evaluate skill based only on a code sample - you use the code sample as a catalyst for conversation about their problem solving skills. This is far more important than your ability to pump out a bunch of PHP. The goal here is to learn how the applicant approaches a problem, and to determine how they decided that the answer in the sample should be the best way to solve that problem. We're not evaluating "PHP skill" because that's just stupid. I'm not interested in how much of the manual you have memorized. We're evaluating programming skill, problem solving skill, and critical thinking skill.
The PHP project is completely open-source, so if you have the CSS skills, you're encouraged to contribute. Feel free to fork [web-php](https://github.com/php/web-php) and make your changes, then create a PR. It's never been easier to contribute. :)
- Working with more people is usually better. You learn a lot more from discussing, reading and working with other people code. Usually is much more difficult to have a team fully composed by morons with more people, but god and everyone knows this is just theory and statistics. :P Run from the team of morons - Go for people who already worked and left the company for opinions! This is easily found on LinkedIN right now. Try to understand why they left the company, this will give you a good feel on how is working there. - Money is good, but it is only reflect of your current knowledge. Don;t understimate yourself and consider this opening position a life-time opportunity, changes are that within a year or so these kind of offers tend to become more and more common to you DO what you want to do, the only one suffering the consequences at the end is you. Just be confortable with the decision so you can afford any outcomes you may suffer from it.
@theswader: http://www.niden.net/2013/06/voting-for-phalcon-as-cpanel-feature.html
I'm thinking this link would be a lot of help: http://www.larryullman.com/series/learning-the-yii-framework/ This [book](http://www.seesawlabs.com/yii-book) helped me a lot too. Try hanging out at the Yii IRC channel too, people are generally friendly there, and it's low-traffic so your questions don't get lost in the scrollback.
&gt; You could cache DQL queries with criterias too. I agree, but that wasn't the point. &gt; And i feel ORMs are usually an excuse for devs to not think their datas through before coding. This is a little counter-intuitive, but sometimes you don't want to think it through. In prototyping products, there's a lot of value in the speed and thoughtlessness of ORMs.
This is a bit of a misnomer. IDE's currently specifically have to avoid suggesting that unused exception variables are unused variables. With this change, it would be possible to let IDE's relax that rule. If you're using it then cool, if you're not using it then the IDE can say "Hey, you're not actually using this.".
A good php programmer is someone who still learns and can refactor his style over time (nobody should code how they started with php4 or even worse php3) A bad programmer is the exact opposite - additional instead of finding ways by himself he will always ask the senior for any solution. In other words you actually need to work with a programmer for a week or more in order to be really sure he is the one.
Anyone else a little uneasy about offloading content (feedback is valuable content) to a for-profit third party?
The obvious usage is replacing iterators where no iterator is needed, specifically for iterators which do nothing but lazy loading. You can save a lot of classes by just using yield instead of iterator objects where you don't need them. You can also simply make methods foreachable without having to implement any iterator class. And on top of that, it's also faster than iterators. I expect a lot of database data retrieval stuff to be a LOT sleaker and faster with yield instead of iterators. They just simplify your code a lot. And simpler code is better code. I know yield from python and don't use iterators as much as there i do in php. In short: Generators = Awesome.
What I meant was that you could have your toHtml method look like this: public function toHtml() { return $this-&gt;getBuilder()-&gt;construct($this-&gt;getArray()); } The way the paginator is used wouldn't really change, but the markup it generates would be dependent upon the assigned Builder instance, which would make it far more flexible. 
What's wrong with using the magic __get() __set() and __call() functions? Sure it can make generating documentation a bit harder but doing dynamic introspection/inheritance with them is incredibly powerful
I agree, all his points are irrelevant to filter quality developer. I was also expecting the use of camelcase instead of underscore as one of the positive signal... To his credit he says "PHP skills" which could point to current PHP best practices; but still, not really.
Well, I agree with you. But the main thing to focus on with the Paginator is how easily it creates the pagination for your application. It can read the request url and build the pagination automatically. It doesn't require a lot to get going: Let's say you access the page at: http://your-request-url.com $paginator = (new Voodoo\Paginator("page=(:num)")) -&gt;setItems(125, 10); Which will create pagination with pagination url like this. http://your-request-url.com?page=1 http://your-request-url.com?page=2 http://your-request-url.com?page=3 ... And you can use Paginator::toArray() to display the pagination the way that you want
I like symphony (1.4 not 2) better than yii and have quite a bit of experience with both, BUT, the guy that wrote codeigniter is using laravel these days, which is pretty fucking glowing praise. Any particular reason you're going with yii? If it fits all your needs I'd tell you to go the wordpress route (I'm basing this on your dreamweaver comment)
The PHP project offloads [most everything](http://php.net/thanks.php) to for-profit third parties.
&gt; magic Well that there's your problem.
I dont know, maybe I'm making this project more complicated than it needs to be. I need to be able to have a database of users "Username, Password, Registration form etc.), and I need to have text documents. Lots of text documents that are constantly being added to, then passed to someone else for them to add to. I know I'm being vague, sorry about that. 
Probably because `!== false` is far more common usage with `strpos`. This tells me a whole lot about your experience.
You're right, I shoulda picked a better example :p
There are very obvious uses for both (like say checking for whether a string starts with another string). http://andytroutman.com/articles/2013/01/24/rockstar-programmers-are-not-assholes.html
&gt;But the main thing to focus on with the Paginator is how easily it creates the pagination for your application. And how it works with Bootstrap. :) Nicoon isn't saying what you've done is bad, he's just saying the core functionality should be agnostic to the Twitter Bootstrap framework, which it is not because the output is hardcoded.
Thanks for the irrelevant link. The point is that testing whether a string starts with another string is by far less common than testing whether a string contains another string. Using `strpos` in this context rather than `preg_match` should tell you more about the developer. Perhaps that's the kind of question you should ask instead, i.e. an actually meaningful one. 
Halting (possible) progress on one side because of things on another unrelated side is an awful way to manage things. &gt; what about the ability to namespace functions ? That's already possible, isn't it?
&gt; ability to namespaces functions Who says you can't? Check [this](https://github.com/igorw/compose), for example. &gt; method overloading There's func_get_args() instead. Not that nice, but won't change I guess, at least in next few versions. &gt; what about int and string hinting in methods Was proposed for 5.5, hard to define a correct spec for that. There's an RFC for that. I'd love it too. &gt; what about "real" getters and setters for props Devs voted 'no' =\ Would be useful. &gt; what about removing stuffs from PHP instead before adding some and you still propose some new stuff :)
Yes I understand. But the core functionality is not the Bootstrap Framework, which is just a CSS class. The core of Paginator is, it accepts so minimal settings to create an elastic pagination. You are still free to style it the way you want it. Paginator::toArray() is the method that returns the pagination data so you can create it your own way. But back on Bootstrap, lots of developers, like myself, use Bootstrap to create a pretty decent layout for the application. Bootstrap is pretty standard by now, it already contains style for pagination, so I took advantage of this and provide a simple method, Paginator::toHtml(), to render the pagination in HTML. Which by default has a class '.pagination' from bootstrap -&gt; Paginator::toHtml('pagination'). &lt;div class='pagination'&gt; &lt;ul&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; But the core of Paginator is: $paginator = (new Voodoo\Paginator)-&gt;setItems(125, 10); $data = $paginator-&gt;toArray(); 
&gt; what about removing stuffs from PHP instead before adding some ? like the global keyword ? PHP is maintained by a large open community, and you can't tell people what they *have* to work on. &gt; what about method overloading ? How do you propose doing that in a weakly typed language? &gt; what about int and string hinting in methods That's been discussed on the internals list often, and it's not as easy as it sounds. &gt; prop typehinting What would be the use case for that? &gt; what about lambdas ? How would that be different from the closures we already have?
I just find that RFC very confusing. Go interface system is interesting , but having 2 interface systems in one language , i'm really not sure about it. At one point we need to think about what is PHP ? where should it be heading in term of paradigm?
Eh? Yes, I *know*, you're missing the point of my comment completely: it's more valuable to know whether a developer understands when to use `strpos` over `preg_match` than some half-baked notion that === should make them think of `strpos`. So *that's* the kind of question you should ask.
can you get him some flare? maybe something like PHP.net team? that way people know he's legit
Method overloading seems a bit reckless. If other languages support this id be curious to know more but i agree with your first statement strongly. In fact id like to be able to define allowed library functions at compile time.
In general, it's easier and safer to escape everything. If you want to avoid escaping emails, let's see what you need to check before knowing it's safe: - Which characters are valid in email addresses - Which characters are valid according to my validation logic - Do those characters have any special meaning in any domain they'll be interpreted in^1 (e.g. HTML, but depending on the data and where you put it, CSS JS etc may also be involved) - For those characters, what general classes of attacks do they allow - Am I vulnerable to *any* of those attacks Now, to answer your actual question, I have no idea. I can't think of any attacks - you can't have the HTML tag delimiters (&lt;, &gt;) in an email address, so as long as your validation logic catches that, I don't think the Escaping 101 &lt;script&gt; attack will work. Are there other attacks that are possible? Maybe. There are very clever people who know far more about this kind of vulnerability than I do. I would escape^2 the email address and not worry about it :) 1. The "special meaning within domains" question can get very complicated. What if your domains are "nested"? For example: `&lt;div style="color: &lt;?php echo $usercolor; ?&gt;"&gt;` In this case you need to care about CSS *within* HTML, that's *two* layers of escaping. This kind of situation causes all kinds of edge cases and as a developer it's basically impossible to understand well enough to know it's safe. 2. Where "escape" means applying an escape appropriate for the context you're printing data. Escaping data that goes in a CSS file isn't the same as escaping data that goes in a HTML file. If you need to escape multiple times (like in point 1) it becomes very complicated and if you ever need to do this, do something else instead :p
Oh god yes. When Woothemes did it, it was a disaster. UserVoice is being sold by people who don't know better as a all-singing support system, and it really is not fit for purpose. Trust me - been there and got the t-shirt - still cringing when I think about the experience that UserVoice was, when the square peg that it is, was squeezed into a round hole. I'll lay it out now: it is not going to work, and will piss off more people when implemented than the non-curated feedback comments do already. That is, unless PHP have managed to round off the edges of UserVoice in ways that Woothemes were incapable of doing.
Code samples seem pretty unreliable. Instead, We'll sit interviewees down in front of some trivial, but semi-difficult task like "parse this XML, extract this element and replace it in the XML with some arbitrary text. You have 30 minutes. You can use anything on the internet and can install whatever tools you want." XML parsing is pretty easy, but sometimes is done rarely enough, even an experienced programmer may need to refer to documentation. Which is the whole point. We don't evaluate whether the task was completed, but instead we look at what research did the person do. Did they get started in the right direction? What language did they use? What tools did they download and install? We leave all of these things up to the interviewee to determine. How they approach the problem tells us a LOT about their level of experience and basic knowledge. Even though we don't hire for PHP but for a few other languages, if you have several years experience programming in *something* web-related picking up PHP/Java/Python/Ruby should be pretty straight-forward.
Many other languages support method overloading. Actually, before I started using PHP nearly all other languages I used previously had method overloading and I was really sad to learn it didn't =(
Content is an asset. UserVoice will now own a considerable amount of php.net's assets.
Tried to follow examples; got dick stuck in fan.
One of the things I find interesting in code is *personal growth*. I don't think there's a single one of us that looks back a year and says "that code is awesome, and there's absolutely no way it could have been better". If a person takes this "couldn't possibly be better" stance it sets off more red flags with me than a matador at a bull fighting marathon. If someone came to me and said "This is how I solved the problem, and this was my rationale at the time. However, I learned X, Y, and Z since then and I would have done this and that differently." I would give them massive points for discovering a fault and taking the time to learn from error. I want to see signs that you're not limiting your own growth. That you are responsive to new ideas, and that you're capable of seeing your own shortcomings.
Author here - thanks for the feedback. I think I did a bad job at explaining what the "point" was. I was interested in evaluating how familiar someone was with PHP as opposed to their capacity as a software engineer in general. Why is this important? Well if I drop you into a massive PHP (or Drupal, Symfony, etc) project, not being familiar with the language is going to be a huge stumbling block. It would be just like taking me (a PHP guy) and handing me a bunch of Ruby, sure I could grock the syntax but the idiosyncrasies would bite me.
Hahaha I agree. I just wanted to see how many downvotes I could get with that comment. I guess it's 6 LOL RESPONSIVE FANBOYS UNITE
Many of those other languages are strongly typed. Method overloading becomes much more difficult, if not impossible with a weak typed language like PHP.
You're right, but lets not get all Richard Stallman about it What did they have before? An archaic bug tracker with no way for users to actually comment on the website? So maybe UserVoice now 'owns' the content, but if it means php.net gets better as a result, then its win-win. By contrast, you could avoid all commercial and closed services and feel virtuous, but actually achieve nothing useful 
Calm down. I've heard of this exact question being asked of junior-intermediate devs, as was asked it myself once. If you're honestly the sort of person who would not want to work somewhere because they asked a simple question like this (among many others), I'm sure you're doing a lot of people a lot of favors. The extent you go to to explain your stance here only highlights this. Irrationality: You has it.
What are your objections exactly? A feedback system isn't really rocket science, and at first glance UserVoice seems to be doing an ok job
Man people on reddit are so defensive. lol. This is only one question out of like 20 or so and it only helps to tell me understand what experience you have. A final decision is much more nuanced than that. Another question I ask is "what's your favorite way to type check an input for an integer value?" Since PHP has many ways to do this and even the most basic PHP dev should know how to do this the myriad answers that a question like this provides give you lots of insight into the style of a coder. Other questions in general web development would be (for example in CSS): What's the difference between these two selectors: div a div &gt; a Furthermore I don't want you to work for me. I want you to be able to work without me. If you can answer questions that pertain to the code base that already exists I won't have to spend anytime explaining.
The array_combine function is definitely a bad example. I'd prefer looking into how a coder would handle loops. Code like for ($i = 0; $i &lt; strlen($string); $i++) would raise a red flag. On the SQL / ORM query, it really depends on what the caching strategy is. If the table is small enough and cached, going through the entire set rather than sending a custom query might be better. Magic methods. Definitely agree with you. I used to think magic methods were really cool but after going through Doctrine 1 magic method debugging hell, can't say I'd use magic methods without a very very good reason. Definitely happy with the way Doctrine 2 removed magic methods.
It's not that they make documentation harder. It makes debugging harder. One example is when you inherit a class that has __get() or __set() and you create a property that the parent assumes would go through __get(). It just gets worse as your project gets bigger.
How is knowing === premature optimization? I've fixed a lot of bugs where the solution is as simple as using === instead of a ==. strpos is just one of the many functions that has 0 as a valid return value.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: http://www.reddit.com/r/Serendipity/comments/1h2wae/how_do_you_evaluate_php_skill_given_a_code_sample/
Would you rather them put the string in a foreach?
I'd rather that they assign strlen($string) to a variable rather than resolving it every loop. So the code should end up looking like: $len = strlen($string); for ($i = 0; $i &lt; $len; $i++)
Too bad the comment quality won't improve with this change.
I agree. Pick one interface system and roll with it. I program objc so I am all too familiar with protocols, and I really like using them, but having protocols and interfaces in the same language will lead to confusion.
As headzoo below mentions, method overloading doesn't make a whole lot of sense in a weak type language. Languages such as C++ and Java have method overloading because your variables have to be a specific type. 
I don't think that they all would be better. I mean, if I had to choose between &lt;ClassName&gt; and ~ClassName, I'd go with the former. Given that ~ is a bitwise complement or a destructor
It might kind of, sort of make sense in PHP if you could overload hinted methods. function doSomething(ClassA $instance) ... function doSomething(ClassB $instance) ... Then if calling `doSomething($foo);` where `$foo` did not match that hint would throw a runtime error or a linting error if you tried to define `doSomething` with a hint overload and one with no hint. Now don't ask me how the bloody hell you'd implement that, but it kind of makes sense.
I sure hope so, would be very nice. That said, I don't want to be the person that has to implement such a feature :P
I'm still a fan of the old design, it just felt easier on the eye. The light color scheme and an excessive line height are just ouch!
The thing is, there's lots of existing technologies, including Java Generics, and C++ templates that are related to type definitions and use angle brackets. That syntax is typically used to represent a 'placeholder' type that will be replaced with a concrete type later. They're a bad choice in this case because this system would do something completely different to all prior art using the same syntax. While ~ may be an operator or destructor in some syntaxes, you'd probably never see either of those in a type definition and hence it's a better choice.
I'd say out of all of the proposed options I like @ the best though even that has some collisions with other syntactic features proposed like annotations and or the current features of error suppression.
Nice idea - maybe the use of generics like &lt;syntax&gt; could be argued against depending on opinion from the masses. Interested to note that this Wiki entry now has a "Effects On Opcode Caches?" sub section in it's document...
I've been using this library for a decent chunk of time now. It allows me to cut down on the repetitive crap while, from a readability standpoint, still making sense. Terribly contrived example follows. Let's pretend we have a multidimensional array and want to sort them into groups based on some property within the array. Normally, we'd do something like this: $data = [['property' =&gt; 1, 'somethingelse' =&gt; 'this'], ['property' =&gt; 2, 'somethingelse' =&gt; 'is'], ['property' =&gt; 1, 'somethingelse' =&gt; 'extraneous']]; $map = []; foreach ($data as $k =&gt; $array) { if (!isset($map[$k])) { $map[$k] = []; } $map[$k][] = $array; } With Functional, it provides this same functionality (pretty much the exact same code, mind you) as Functional\group(): [392] $&gt; Functional\group($data, function($v) { return $v['property']; }); â†’ array(2) { [1] =&gt; array(2) { [0] =&gt; array(2) { 'property' =&gt; int(1) 'somethingelse' =&gt; string(4) "this" } [2] =&gt; array(2) { 'property' =&gt; int(1) 'somethingelse' =&gt; string(10) "extraneous" } } [2] =&gt; array(1) { [1] =&gt; array(2) { 'property' =&gt; int(2) 'somethingelse' =&gt; string(2) "is" } } } Obviously, you could do the same by abstracting this yourself, but the benefits from having it provided via an extension are hard to ignore.
&gt; so Wordpress devs can suck it up and clean the code A good tool won't help if you don't know how to use it.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: http://www.reddit.com/r/Serendipity/comments/1h3h7p/php_rfc_protocol_type_hinting_xpost_from_rphp/
It seems pretty relevant to link directly to the thing you're asking people to look at. Even though it isn't a hard thing to find, you will certainly lose some people if they have to click more than once.
That just makes messy code, plus it's an extra line of code. Most languages (with the exception of JavaScript?) are smart enough to not recalculate the string length every loop, they cache it behind the scenes. for ($i = 0; $i &lt; strlen($string); $i++) Is actually how you should be doing it.
what good tool are you talking about ? i hope you are not talking about Wordpress.
I'm also very interested in the decision process. The code of php-web is hosted on Github, but they chose to disable the bug tracker. Instead they went for another third-party application. Why reject a tool well-known from professionals and opt for a more general tool? There are currently 131 "voices". Some have little interest, like "Love it!". Some are interesting, but buried deep into the flow. Some are a collection of comments instead of a single point. How do they plan to handle them? With the Github tracker, there is the possibility to sort tickets (bugs, enhancements...) and to handle duplicates. You can also link a ticket to commits or pull requests. And you can close useless tickets. IMHO, if they really want to know what people think about the beta, they should collect the various comments, organize and filter them, and post a survey, asking visitors to vote on every question.
Why uppercase CLASS? Just use class....
tl;dr No branch in the git repository web-php, so no going back. Maybe I see too much in this, but I believe it's useless to compare the beta to the old site: *the old UI is dead and won't be revived*. Not because the beta is better, but because it wasn't developed in a branch. Everything takes place in the *master* branch where there is a mix of commits for the beta and other fixes. So the beta is already a mandatory part of the PHP web site.
Can people get past the syntax and look at the concept please? We can tweak the syntax. I even say that it's prob not right. Instead, can you provide feedback on something meaningful about the proposal?
A great addition to PHP for those who like to use the "use" operator. If you prefer to write fully-qualified class names, this won't make much of a difference. I've actually moved away from using the "use" operator, partly because of this issue in PHP 5.4 (and lower), and partly because I get annoyed with constantly maintaing the "use" list at the top of my scripts. I also like the clarity that fully-qualified class names bring to my codeâ€”I don't have to jump to the top of the page to see what the alias is. [Jason McCreary goes as far as to say](http://jason.pureconcepts.net/2013/04/php-namespaces-avoid-use/) that the "use" operator breaks the fundamental aspects of PHP namespaces. Not sure I agree entirely, but he makes some good points.
You can simply overwrite the php files in the php folder to "upgrade" it... Php doesn't really have an "install" in the traditional Widows sense. It's just a folder with no reg keys or anything. You should mirror the same extensions on your local staging config and production server. Certain functions in php (I.e. creategiffromjpeg) require certain extensions. If you call on that one without the GD library installed and enabled in php.ini you'll get errors.
Thanks. So there really is no housekeeping I need to do if I have installed a few PHP versions back and forth as I have been experimenting?
&gt; All i'm saying is no need to throw the whole "use" functionality away. Agreed.
All the call_user_func style functions ignore `use` when referring to the class in a string, so this is handy for that. Mostly when using them statically of course.
It has nothing to do with PHP; it's an HTML question. The easiest way is to insert the image tag into the &lt;p&gt; tag that contains the text; it'll wrap automatically. 
2) Yes, you generally want to mirror your production environment when you are developing. If your production is in the cloud its easy cause you can just clone an instance. There are local alternatives such as [Vagrant](http://www.vagrantup.com/). I've never seen different environments for different browsers, but the standard setup in large public projects I've been in is to have 3 environments: dev, testing, and production. 5) Don't have a real answer for you, but yes I believe it would be .so as that's what it is on all my linux environments.
[This](http://codex.wordpress.org/Wrapping_Text_Around_Images) might help. I imagine you want something like: &lt;div&gt; &lt;?php echo wp_get_attachment_image(#); ?&gt; &lt;p class="alignright"&gt; &lt;?php echo "text to echo here" ?&gt; &lt;/p&gt; &lt;/div&gt; 
Just for future reference, this isn't a PHP question, it's a HTML &amp; CSS question. :-)
Good read. I agree with this approach. If you're having issues with a new version of something, you need to use an old version or adapt to the new version.
4) I've used Macports and Homebrew the same as you, very similar to me as well, I believe I read that more people are either using Homebrew and/or have adopted it over Macports, but I'm not 100%. http://chadthompson.me/2013/05/06/why-homebrew/ Thank you for asking this question. I'm looking for the same information. Best practices as far as developing and deployment. I'm going to be looking into "Phing" (a deployment tool), which was mentioned in another post, "Capistrano" was also mentioned as well. 
PHPStorm handles all the languages you stated quite well. For JS-centric websites there is WebStorm.
I suppose there's no chance that anyone will recognize that the significant amount of backwards compatibility maintained in PHP over the years is responsible for its success? Otherwise, I'm not sure why we still have to worry about needle, haystack/haystack, needle.
That's correct. You simply overwrite files to update them. EDIT: On IIS at least, make sure to "recycle" the AppPool in order to reload PHP after overwriting files/updating the php.ini, otherwise you have to wait for the next recycle for the PHP changes to take affect.
Good looking out. Thank you. 
I would add that it's functionally equivalent to a constant, and I know I'm not alone in the practice of naming things according to their usage. E.g. in browser-based javascript, there's really no support for constants, but sometimes I need a constant-like data structure, so I'll use a normal variable but name it in all-caps, as that at least communicates the intention. While it's not a big of a concern here (I don't think you can overwrite it), it still conveys to others that it is indeed a functional constant.
&gt; * I read this quote earlier somewhere " .. try brew install openssl and try building PHP again." .. This shows my lack of understanding. Dont you install an extension on a running PHP version? If you re-install PHP, don't you "reset" the extensions? Seems strange to install an extension and then reinstall PHP (or is re-building not the same thing?) When you install openssl, you're not installing the PHP openssl extension; you're installing the openssl library. What you're doing in this case is upgrading the openssl library and then rebuilding PHP against the new library version. &gt; * I have PHP 5.4 running on MAMP and 5.3 running on system.. do you generally want these to mirror each other with regards to extensions / config? Is it even important at all? Do many people have different environments (like testing on IE9 , IE8, IE7, etc..) It's a good idea to mirror your development and production environments as closely as possible. I use Vagrant to do this, and the only differences are that my dev environment has extra logging and xdebug installed. This is less important if you have a good testing foundation and use a continuous testing/integration service before deploying, but sometimes subtle differences between even minor PHP versions can trip you up and can be a nightmare to debug. Browser testing is independent of the back-end environment, though. &gt; * Is there a way to cleanly uninstall PHP? If I get to a point where I just want to do a fresh start, what steps do I need to undertake before I reinstall a new PHP version? Depends on your system and how you installed it. Sometimes it's as simple as running a script, and sometimes you have to manually delete files and directories and edit configuration files. Refer to your PHP distro of choice's documentation. Upgrading generally doesn't require an uninstall, but again make sure to check your docs. Since you mention Mac homebrew a couple of times, uninstalling is as simple as `brew uninstall php54` and upgrading as simple as `brew update &amp;&amp; brew upgrade php54` &gt; * What is the difference between Homebrew and Macports? I have used them both, but just copy and pasting without any real idea what is going on. Is one preferable to the other? Please learn these tools and don't just copy &amp; paste commands from the Internet. While these tools are mostly safe, they do have the potential to screw up your system. Take some time and read the docs. It's well worth the effort, trust me. As to the differences, I don't know. I use homebrew, but I haven't used macports. Both projects have the same or similar goals, but they may have different ideas as to how to achieve them. Best thing to do is read the project docs, get to know the communities, and choose the one you're most comfortable with. &gt; * It seems I have missing errors PHP Warning: PHP Startup: Unable to load dynamic library '/opt/local/lib/php/extensions/no-debug-non-zts-20090626/php_openssl.dll' ... but why is this showing me .dll files when I am on Mac? Aren't extensions ".so" files? Yes, Mac should be using .so for extension files. I'm not sure how you installed things, so I can't speculate on what went wrong. &gt; .. lastly, I guess if anyone could point me to a good resource or this stuff? Not so much the coding side of PHP, but the "backstage" aspect of it? Something reader-friendly? The PHP manual is a good place to start for PHP. Read up on extensions, configuration files and options, etc. There is no quick read which will bring instant enlightenment. You'll have to spend some time in technical docs, end-user manuals, the occasional RFC, and sometimes source code in order to really understand how things work. Most of the blog posts and articles I've seen either barely scratch the surface, confuse matters, or are just plain wrong. Sorry. Hope this helps, and good luck with your learning!
Oh hey, you're back! I thought you got nuked for good. Welcome back.
In this case WP is a product, language is the tool.
Great thanks!
I'm not sure I fully understand the use-cases; for instance, in the section "Cross-Project Dependencies", the argument is made regarding the PSR-3 logger interface. So, given the example there of 2 projects both implementing this interface, how would this new type hinting solve the problem? Someone, somewhere, is still going to have to create a `Logger` interface -- no, actually both projects will be forced to, is that correct? So each project will have some sort of stub-interfaces, which are just proxy representations of the real thing, though since they're not managed by any sort of versioning system, they have the chance for the API to easily fall out-of-sync? I guess I'm failing to see how this use-case would play out in the real world.
http://nvie.com/posts/a-successful-git-branching-model/ I also make use of the 'git flow' extension to make using that model easier http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/ That combined with a bare 'hub' repository and hooks that push to the hub on post-commit for our integration/staging environment, so that when a developer commits their changes to their local working copy, the integration/staging/testing environment is brought up to date. http://joemaller.com/990/a-web-focused-git-workflow/ Then to actually promote the code on the production server(s) log in and do a 'git pull' which updates them to the most current 'master' code 
&gt;When you install openssl, you're not installing the PHP openssl extension; you're installing the openssl library. What you're doing in this case is upgrading the openssl library and then rebuilding PHP against the new library version. Aha. This is valuable. Thank you. So am I correct that installing extensions really is as simple as putting an .so file in the correct folder and adding a line to .ini? &gt;Browser testing is independent of the back-end environment, though. I know. I just wondered if it is normal practice to run an app under different PHP versions to see how it does, like running a site under different browsers. Probably not, right? I imagine you know the environment where it will be deployed and you target it for that. finito. &gt;Please learn these tools and don't just copy &amp; paste commands from the Internet. While these tools are mostly safe, they do have the potential to screw up your system. Take some time and read the docs. It's well worth the effort, trust me. I realize this, really. And I try not to blindly cut and paste and I try to at least have an idea of what I'm using. But I just can't go down every rabbit hole I walk by on my way to my determined goal, or I never arrive! :) &gt;The PHP manual is a good place to start for PHP. Read up on extensions, configuration files and options, etc. There is no quick read which will bring instant enlightenment. You'll have to spend some time in technical docs, end-user manuals, the occasional RFC, and sometimes source code in order to really understand how things work. And I do spend a lot of time there. But it seems that most material (from all sources) is either aimed too low or too high for me at my level. Hard to find stuff that I can really digest. Thanks!
My company is putting on an [online summit](http://summits.phparch.com/summits/devops/) on that and related topics. ETA: That being said, I'm a fan of vagrant/VirtualBox, and am excited about [Puphpet](https://www.puphpet.com) making it easier for devs to move to that.
This is a big topic, some key advice (in no particular order): * Use version control, git or subversion, whatever makes sense for you and your team. * Keep your development/testing/deployment environments as similar as possible. Vagrant has really come into its own for doing this easily and is really helpful when you work on numerous projects. This, https://puphpet.com/, is pretty new, but really simplifies this task. * Automate your deployments, either using version control, bash scripts, phing, or even puppet. * Automating database deployments (changing tables, etc) are a hairier problem to tackle, there are tools available to help (like dbdeploy) and I think Doctrince has a solution. I haven't gone down this road as much. * Use a completely local environment, especially if you're working on a team. You don't want to waste time clobbering someone else's changes or stepping on each other's toes. * Composer has become quite popular for managing dependencies and giving PHP a real package manager. See http://getcomposer.org/ You can learn more at our [DevOps](http://summits.phparch.com/summits/devops/) summit in 3 weeks. Disclaimer: my company is putting this event on but it's relevant to the OP's question.
The point was not that you should ignore BC. The point was that BC should be a byproduct of sane designs and process. It shouldn't be a first-class goal. The first class goal should be to build things today that won't become BC issues tomorrow... So the effect of BC is a good one, it's just the cause (the reasoning behind it) that's painful...
If you're using WordPress, why not use a dedicated wordpress host? They take care of managing the server aspect of it. I'm using http://zippykid.com/ for a current project and have been pleased so far. Not sure what their upper limit for file uploads is though...how large a file are you uploading?
No. You would do this: for ($i = 0, $len = strlen($string); $i &lt; $len; $i++) This way strlen() will be called just once instead of *strlen($string);* times. That saves some CPU cycles. But I think it really doesn't matter, it won't have a big impact on speed.
Can't stress #1 enough - you should *never* change code directly on the production server, or allow anyone to deploy code/html/css that doesn't go through your VCS and deployment process. Yes, designers may complain and beg for direct FTP access, but then one day you're working 16 hours because the changes you've been making, got approved, and are ready to deploy won't work because the files on production were edited and don't match what you started with. 
Hi judgej2, UserVoice will not replace bugs.php.net, it is just a low-entry barrier way of getting feedback and people reporting issues. Anything serious will be logged in bugs.php.net, this is just an additional tool that's more relevant for website feedback, there are no process changes here, thank for your feedback!
Hi TheJulian, UserVoice is just for easy feedback and reporting issues. Anything serious will go into bugs.php.net and go through the standard process.
In that case, I think you need to call out more why the reasoning behind it is painful (as opposed to the practice of it). BC is a big reason why PHP is successful, and WordPress's BC is another reason why PHP is so entrenched. As to the specific example, it makes it harder to document with existing tools and, IMO, doesn't really improve on allowing additional arguments with sane defaults after the list. You just have a growing list of array keys instead of a growing list of parameters, and I'm not sure that it's a huge benefit.
&gt; So am I correct that installing an extension really is as simple as putting an .so file in the correct folder and adding a line to .ini? Yup. Some package managers will even do that for you, by dropping a file named `&lt;extension&gt;.ini` under the `php.d/` directory, depending on your chosen PHP distribution. &gt; I just wondered if it is normal to run an app under different PHP versions to see how it does, like running a site under different browsers. Yes, this is normally done via a continuous integration platform. Front-end testing (various browsers) may also be automated using tools like Selenium and related testing frameworks. Generally though, the goals of front-end testing are different than the goals of back-end testing and there should be no need to perform front-end testing using several PHP versions unless you're just a completionist. Either your back-end produces the expected output or it does not; this is something your unit tests should determine. The front-end tests should determine if that expected output renders correctly.
I like this approach. It makes things much clearer, I agree, to know that use statements only refer to namespaces. 
I suppose it's really about a mechanism for managing duck-typing in a more formal and automated way - replacing any `method_exists` calls and the like while still having some capacity for limited scope type-hinting. It does seem to result in a proliferation of partial interfaces, as the `HttpKernelInterface` &amp; `HttpKernelInterfaceForClientIp` example suggests - but this limited pain would be worth it in this case if you don't have to couple your class to most of Symfony just to declare implementation of an interface. That's a clear win, I think. My main concern is about readability and discoverability. It may not be immediately apparent what problem is being solved by the use of the protocol type hinting in the given code, and by design it hides other parts of the interface that are currently not of interest - but may be in future.
Yup, the fact that it's a constant is a little php-style magic and can be inconvinient for people who already have a constant named "CLASS".
I would agree, but at the same time, im sure many people recognize that the significant amount of backwards compatibility maintained in *Windows* over the years is responsible for its downfall.
"Backwards compatibility is for suckers" approach is why I gave up on Rails several years ago when things broke between minor versions. I came back to it recently and it's like learning a whole new language *again*.
Just sent a request to my manager to attend DevOps on the 16th.
 php &gt; echo sTrToUPPER('foo'); FOO
Change wherever you're linking to it? You're being pretty vague, and this is not the place for code support. You should really post on [/r/phphelp](http://reddit.com/r/phphelp) or [stackoverflow](http://stackoverflow.com/questions/tagged/php).
Puphpet looks awesome. I'm still kind of a beginner with knowing what packages I need to install from the beginning, I'll do some more reading. Thanks!
I've been working in PHP for nearly 10 years now and honestly the best info is typically on their site. There's some good info about what PHP is and how to get started here: http://php.net/manual/en/getting-started.php With regards to 1, there is a pre-compiled version that most folks stick with but you can also compile it yourself. If you're learning, I would stick with the pre-compiled version. For 2, since you're learning, try to stick with one PHP version. I'd set up 2 servers with matching versions initially: one for Production and the other on your machine for Development. Let the Production server determine your version but try to stay current with them both. Match extensions, packages (like PEAR or PECL should you choose to use em), and frameworks(Zend, Symfony, Cake, etc) as best you can since it's likely your Production won't be a Mac. Once your doing stuff professionally, you will want a Testing server that exactly matches Production or matches a future upgrade to your Production server. Your version of PHP, generally, won't have much bearing on browser testing (IE6/7/8/9) as that's more client-side stuff (HTML/CSS/JS). For 5, sounds like you might've ended up with some Windows-compiled PHP stuff. I code in Linux, so the Mac specific stuff is a bit lost on me so I'll defer to the Mac pros for that.
I think a lot of people here would cringe, but our process is pretty simple and still gives full control over the release. First, we don't do direct releases from any automation tools. We do keep everything in version control however. We have 3 stages of servers (dev/test/prod) that all match the same directory structure, just with different vhosts. I build local and dev test in the Dev server. When the PM approves and is ready to go to Test, I tar up the changed files from my home folder on Dev. I then move the tar to my home folder on Test. I take a backup from there with the same tar command, then untar the release files to overwrite the existing files, and run a script to normalize all file permissions. The Prod deployment is the same. So yes, I do have FTP/SSH access to all servers, but I never leave my home folder except for when config file changes are necessary. Database procedure changes are a bit different, but operates in the same fashion where I run a script for backup, and another for release. Edit: I forgot to mention that we have several Prod app servers. I release to a primary and an rsync process deploys automatically to the other servers.
Phing is more for builds, but it can deploy. Capistrano is more for deployments, but it can build. 
That's what Semantic Versioning is for. They're not using that? à² _à²  
This is an utterly ridiculous article. Despite the monopolistic practices of Microsoft, developers and businesses have loved Microsoft forever because you could always count on backwards compatibility. You knew your software would work in the next version. Apple has never kept backwards compatibility. And developing for Macs is a fucking nightmare. Despite the success of iOS, Mac's have never broken 10% market share. And it's not all because they are more expensive. iPhones have proven that notion is not true. Backwards compatibility is for people who want the customers to be happy. Yes, it's more work. But it's also why you can open a word file written in Office 97 in the latest version of Office 2013. On Mac's you can't even open programs written 2 years ago.
Awesome, looking forward to having you there.
I use rsync in a similary way. You don't need to go so far as having automatic deployements with git hooks or whatever. I would strongly consider automating what you are doing manually now, because manual deployments are error-prone. So that when you need to, you just run ./deploy.sh or whatever (or anyone else on the team can do it)
Thanks for the info. My PHP level is actually not bad (although I'm coming from more front-end stuff)... but so far I've only worked on Wordpress projects and a few Codeigniter projects for small clients. But so far my work has been pretty much "on the page". Just code. I haven't really had to worry about any server setup, or installation, or environment questions.. and that's where my knowledge falls down. I wanted to "up my game" a bit .. but as soon as I tried to install Laravel, I start coming up against problems.. missing extensions etc. And just knowing where stuff is, what files are created, what files need to be monitored, what happens with installs or uninstalls, etc etc (.. the "backstage stuff") is just pretty tough to figure out when you are approaching it through Terminal and all of this text is flying by, and it's coming down to command line mojo, binary installs (I just fake this 'make install' stuff), and having to futz around in arcane configs. Now I've spent the whole afternoon now trying to get Vagrant up and installed on my system and again I'm coming up with errors related to a previous aborted install that I did. So I started off my day just wanting to get Laravel running, and now here I am reading the docs of Virtual Box so I fix some error so I can then get Vagrant up, so I can set up some kind of stable, reproduceable PHP environment with everything I need so I can finally run Laravel without headaches. I don't feel like I've accomplished anything except futzing around in DOCs and config files.. and it's still not working! aaaaaaar. That's what I mean about "environment". I'm fine at tracking down PHP errors.. but it's this meta stuff that I find really frustrating!
Downfall? Are you serious? It still owns over 90% of the market. What fucking downfall? And backwards compatibility is the reason it does. And if you're talking about to mobile like iOS and Android, then get the fuck out of here. Try doing any real work on your ipad. Not possible.
Not sure if you read this, but here's the justification about the design of `password_hash`: [Designing the simplified password API](http://blog.ircmaxell.com/2012/11/designing-api-simplified-password.html)...
PHP 6.2: "We've rejected all suggestions for unifying underscore/2 separated functions and have opted for BOgoCASe after much deliberation"
I have thought about writing a script to handle all steps of the deployment. I haven't gone that route though because once every so often (maybe once a year), I see an issue during the backup process, and only seeing the output of that lets me know to halt the release. I'm afraid of automating because of fringe cases like this. As for being error-prone, it's not that bad, but maybe I've been lucky. When I do the initial release packaging, I take my changed file list from source control, and feed it into a program that I wrote that builds the release for me, with all commands to run. So during deployment, I'm just cutting and pasting from a release document. I have actually never had an issue with this part.
Old school but it's robust. * We have 3 servers. Dev, Test and Prod and we use SVN for version control. * We obviously dev on Dev and then when testing we pull changes from SVN into testing and do QA there. * When we're ready to go to prod we svn cp trunk into a tags dir - rel1_2 and then create a patch using svn diff to a patch file like rel1_1-rel1_2.patch. * Whoever is doing the release will then sftp the patch to prod and --dry-run the patch first. * If everything looks good we run the patch to live. If prod freaks out we reverse the patch. I've never been a huge fan of pulling updates straight outta of a VCS. Someone can pollute trunk after you've tested, if you pull your updates directly from a VCS and it's on a different server connectivity issues can completely fuck your site and directory full of patches gives me a sad sense of accomplishment.
Regarding your first question - a single ticket to watch the webinar live, as well as have access to the recorded video afterwards. About past summits, I don't think we have access to recordings from past summits. I will check, we (musketeers.me) acquired the php[architect] brand in January. 
The one that happened in frighter's imagination. You can't explain that!
Not if you are using lftp and scripting it. Sometimes all you have is FTP access.
Perfect. I'll have my company purchase me a ticket.
&gt; Vagrant is great, and I use it heavily in my workflow. However, if I didn't understand how to install PHP and configure extensions, how could I be expected to use Vagrant and write Puppet or Chef configurations? Why should I use Vagrant, other than because some random person on Reddit was upvoted for linking to it? Reading OP's post shows a lack of experience in exactly the areas one would need to be successful in integrating Vagrant into a workflow. &gt; Let's stop throwing Vagrant at people like it's the solution to every problem. It's not, and simply linking people to yet another layer they'll have a hard time fully understanding (especially without explanation) just discourages people who are genuinely interested and willing to learn. That's why I made [PuPHPet](https://puphpet.com)
&gt; developers and businesses have loved Microsoft forever because you could always count on backwards compatibility. You knew your software would work in the next version. I dig your dry, dark sense of humor.
Thanks for sharing, would you consider also writing plugins for template engines like Twig, would make the library more useful when define assets in view and not controller code.
Twig is definitely on the short list. We're going to be using it in a Twig-based project later this summer, and plan to make a plugin available.
I haven't done any speed tests so this is just a suggestion, but perhaps try [cURL](http://php.net/manual/en/book.curl.php)? If that's still slow, it might be faster to call an external program from within your script to download the file somewhere instead, such as [Wget](https://www.gnu.org/software/wget/).
mod_pagespeed is a great "set it and forget it option". QuickAssets is best for situations where you want finer control over caching.
This is the kind of thing I really miss out on attending. Convincing them to release funds to register is hard enough but getting them to let me attend one during work hours just isn't going to happen and it's so damn disappointing.
Why would I need a finer control over time stamping modified JS/CSS? The only use case I can see is loading assets from another domain but that does not make much sense.
Did you read the article? Properly?
Fair 'nuff! If you don't think you need it, no worries :) It's certainly not for everyone!
&gt; On Mac's you can't even open programs written 2 years ago. How do you figure that? The intel rollout was 8 years ago and the vast majority of Mac software switched to universal binaries in the first six months. If you're still using PPC only binaries today then perhaps you should have stuck with an OS that's as old as your software. If the platform change isn't what you're referring to, then the only other software breaking change was the switch from OS9 to OSX, 12 years ago. Most software written for 10.0 still works today (assuming it's recompiled for Intel). Apple deprecates APIs, but they've never removed any to my knowledge.
OK, whatever you say Apple.
Semantic Versioning was codified by someone working often in Ruby. I'm almost certain it was because of Rails' and Ruby's refusal to adopt any sort of sane versioning. All of my RubyGems broke one time when I upgraded one bugfix version, because they changed the path for installed modules. In a bugfix release. Fuck that.
This is fantastic!
Uh, I can't think of a single language that could (or more importantly, *should*) cache the results of a function call for a comparison in a loop. That would just lead to *so* much badness all over the place.
It is the magical computer thingy that makes Neopets work.
When deploying how do you handle database passwords and connection info? Do you use the same database passwords for all 3 environments or is there different ones and they have to be updated manually?
This all depends on the size of the jump. If too much of my code breaks with the new version I will just keep putting off an upgrade which will only make it worse as the versions continue to diverge. I would say this was one of the huge things that caused the Python 2.7x vs 3.x war. 3.x broke too much code. It even broke basic sample code that people had out there. People are starting newer projects using 3.x but it is taking time. Learning a new language can also be killed by too much divergence from one version to the next. If I am thinking about making the leap to a language and the Hello World(for the previous version) that I just copied and pasted doesn't work then my frustration level will go up. A few more frustrations like that and I will move on to one of the other 10 languages claiming to be the ONE. C++ has managed this quite well. You can use fairly old syntax and the only complaints might come from your coworkers. My present day C++ hardly resembles my creations from 1996 but those old ones should compile with little or no fiddling. That's pretty good to have nearly 20 year old cringeworthy code built for 16 bit systems by a newbie programmer that will probably work on a modern 64 bit OS. But one of the best major migrations I have seen in a while is jquery. They killed a boatload of stuff in 2.x but they have a migrate plugin that gives you back all your old goodies. Training wheels for your old code. In an ideal world you upgrade with the migration in place, and then when you have time you start pulling the old bits out. Then you take the training wheels off. So if you want to seriously damage your language then ignore the reality that you will break up your audience into warring factions by releasing a new version that breaks too much existing code. 
Thanks. I saw this when I was googling earlier but have to wait until tomorrow to try. I've also thought about adding it to our scheduled task and pulling the data ever 5-15 minutes into a table and just performing a db call when pages are loaded. This should also help bypass issues if the resource is unavailable and decrease strain on the resource.
We have several devs with identical environments to our production server (nginx, PHP FPM, MySQL). Sometimes the local environment is through a Vagrant box or sometimes it's just the dev's local set up -- kind of depends what they're using. I'm attempting to get Vagrantfiles in each of our projects at the moment, just folks can get up and running easier. Everything is version controlled with git and we use git to do deployments as well. We do the typical branching workflow: master is (generally) fairly stable, and we have "release branches" that freeze work after a point release so we can do hot fixes and such, and the topic branches for new features, bugfixes, etc that get merged into master when ready. We use [Fabric](http://fabfile.org) to help with automated deployments, which is really just a series of `git` commands on the server and a `composer update` (sometimes). I also tend to use this to generate DB backups and such. One thing that has been amazing in the past month or so is keeping a dedicated database server in the office. No importing crap for people, just give them the hostname and a db user/password and you're good to go.
At best, using rsync would be faster. You don't have to remember what files/directories need to get uploaded.
I'm going to see if they can foot the bill - currently working with a pay cut. Damn, as I read these posts I start to wonder what I'm doing there...
The API design and core technology in iOS is 24 years old. Android is based on Linux (22 years old) and Java (18 years). There is plenty of backwards compatibility and legacy in both those platforms. So no matter what platform is winning or in downfall, it doesn't matter. 
Syntax doesn't matter right now you fuck. Stop diverting.
When you break BC, you fork the language and community around that language. You effectively create an entirely new language different from the past language. This has happened time and again in projects. It happened with PHP. PHP 4.x/5.x was the slowest most painful adoption process that has ever occurred in PHP. Python 3 hasn't replaced Python 2 -- they now operate in parallel almost as individual languages. If you break BC and create a new language there is no reason to call it PHP. There's also no reason for a PHP programmer to adopt it over Python or Ruby. 
I constantly install brand new version of Python apps which still state they don't support Python 3. I don't think the move has been successful at all. Maybe it had to be done but it's been years and the move still isn't complete. I think PHP has done a decent job of removing features by disabling it by default in the config but still allowing those who need it to turn it on.
&gt; The first class goal should be to build things today that won't become BC issues tomorrow... This isn't really, in my opinion, been a problem for the PHP project for quite some time now. But you mention technical debt, version 1.0, and string and array functions, etc. There isn't any indication how one would resolve that problem. The most graceful way to fix those issues is not break backwards compatibility to do it, don't you think?
Very interesting, the private, public, static syntax is a bit extreme and makes it harder to read. The biggest issue I see for many people isn't php's core language, its the horrible naming scheme of functions, and classes. So while not removing them, it would be nice if POD allowed "Hello World".split(' ').pop() to be turn into array_pop(explode(' ', "Hello World")); That at least lets the mind think forward, rather then from the inside out. Also unify the damn naming of functions. PHP has one the best set of string / array functions but its impossible to know what to lookup or even remember the function name. The auto htmlentities is nice but some applications want UTF8 support and that isn't a default parameter until 5.5, so maybe a way declare the encoding, plus a way to escape htmlentities. The "." vs "+" in PHP is one of the few things it got right, which is making it very clear on concatenation versus arithmetic operations, so always using '+' is a mistake to me. Lastly removing the dollar sign "$" make me wonder how constants will be handled...
The best way to approach this is to have a separate configuration file for each environment, e.g. development, staging, production. Things like database settings, mail settings, etc. go into the configuration file. You then set environment variables for your servers (check *mod_env* for apache) that load the appropriate configuration file. This way you don't have to make any changes manually when running your application on different environments.
I'm glad you brought up Puphpet. I had never heard of either that or Vagrant and have been writing something similar to fill my needs with co-workers and contractors needing exact environments. Looks like i just saved a couple of months worth of work. 
I was like you just two months ago. Give Git, ST2 and DeployHQ a try and you'll never look back.
 &gt;On Mac's you can't even open programs written 2 years ago. What? à² _à² 
I guess our development/deployment process looks like this: * Front-end / Design creates static html documents showing the design, usually this isn't in any kind of version control except possibly a local repository on the dev's machine. * Fork the repository of our CMS from bitbucket (we use git) * Clone that repository onto a local development machine for development and get a copy of the static html from the front-end. We develop using a local database. * Typically site is developed by one dev working locally and pushing to bitbucket. The main CMS repository has a lot of feature branches, but individual sites usually just have their one master branch unless we're adding a new feature to an already deployed site. * When the dev's decide the site is ready for staging, we create a release commit and push that bitbucket and then clone that repository onto the staging server (currently doesn't exist because the old one was horribly out-of-sync with the production server). Images and the database are kept outside of the repository so they have to be copied over via either a quick mysqldump script and scp. * Development is tested on the staging server with a lot of either development directly on the staging server or a lot of pushing/pulling back and forth to local and staging until it's deemed good. * Production is running cPanel. Everyone has root access to everything, so cPanel helps encourage devs from being too creative with their deployments ( I have seen zone files that boggle the mind ). Essentially, create a new account for the site with an htaccess file blocking public access to the site, ssh onto the server as that account and then clone bitbucket, and run the mysqldump script / scp the images over. Delete all the lorem ipsum out of the database and hand the site over content writers to fill in the blanks. Each environment is responsible for handling it's own backups.
Actually, there's ErrorException made for just this. http://php.net/manual/en/class.errorexception.php This will give your handler more info if it needs it.
You could use multiple databases and multiple domains if you'd like. It does exist even though I have never implemented it (yet). Take a look at [Yii - Multiple DB Multiple domain](http://www.yiiframework.com/wiki/78/multiple-databases-and-multiple-domains) In addition, if you have user creation that is under a company, you could very easily run a create DB script and then add some DNS entries or modify the config file to allow the user creation to be seamless. Hope this helps. Edit: added last few sentences.
Which one do I signup for!!! http://phpweekly.info/ or this one?
Thanks, I'll look at that now. I have a dozen sites that are static html, and I have about another dozen that were using separate modxcms installs. I'm looking to consolidate them all under one installation, with different themes and manage them easier that way from here out. I thought there might be an existing solution, but haven't ruled out using a framework and whipping something up to handle it. I had thought about using wildcard domain configuration to point the domains at one folder. 
I would recommend setting up an Ubuntu or CentOS VM and then installing PHP on there that way you have LAMP experience, and also means you don't have to mess up your Mac trying to get PHP to work
You're being more than a little dramatic about php4 -&gt; php5. Transitioning really isn't as bad as you're making it out to be.
May I ask for a clarification? When you say to set up a VM do you also mean that I'll do my development stuff in the VM? That is, should I install my IDE/text editor there? Or are you referring to deployment?
No, that's (hopefully) not what he meant. He means that you should keep your server environment in a VM. You can develop the code in your Mac just fine.
&gt;iPhones have proven that notion is not true. No, they have not. If you couldn't get an iphone on a 2 year subsidized contract through a carrier, most of the people who wanted one wouldn't have one. Apple laptops/desktops are 2 - 3 times more expensive and require expensive financing if you don't want to buy it outright. You really can't say cost isn't a major factor in a purchase. Nearly everything you say in your post is complete bullshit.
Let's take a step back first and ask: Why are you reading content from a text file?
I don't know. Seems very specific in terms of use, and it raises the issue as it would in a statically typed language. You can just as well drop the typehint and pass in anything; I don't see it as important as I would see typeclasses in Haskell or protocols in Clojure.
Setup a VM using vagrant. You should get in touch (at least a little bit) with vagrant and puppet. Start the right way! It's easy to setup a Vagrant-PHP-VM because of this: https://puphpet.com/ You share the folder with your project-code on your host (mac os x) into the vm (linux), so that your webserver/php interpreter can reach your source code and execute it, while you have the code itself on your host (mac os x) and can edit it with the IDE of your choice (i heavily recommend you to look into PHPStorm). You configure the said shared-folder here: https://puphpet.com/#vagrant (search for "Shared Folder Type"). That's the way it works. If you use vagrant, puppet, you have a very good "base" for developing and you also gain a little bit experience in "server administration". Phpstorm is a lovley IDE and will make your work easier. I used Netbeans, Eclipse and Zend Studio, and PhpStorm is by far the best. Oh.. and if you have your project running, take a look into composer. It makes using frameworks and other libraries very very easy to you. It looks like a lot of work and technologies, but the initial effort is it worth. Now go, learn, and have fun!
You should be using a [proper deployment system](https://github.com/capistrano/capistrano/wiki), shell access, and a [proper version control system](http://git-scm.com/). You should never be uploading directly. Instead you should only be pushing to your repository. In a proper deployment system, it would shell in, pull from your repository in to a new directory, then symlink that directory back to where your webserver expects to find it. There are several reasons to do it this way, here are a few: * You can keep several revisions deployed at once, and issue rollbacks in the event of a catestrophicly bad deployment. This is extremely fast since it's only writing a new symlink. * Your update is nearly instantanious - users won't get caught in situations where you're still uploading files and have some old versions of files there along side new versions * Downtime for deployment is minimized since you often don't have to take the site offline during a deployment. * Deploying to multiple servers with different roles becomes trivial * Issuing batch commands to multiple servers at once becomes trivial * Environment specific configurations can be pulled in depending on the server's role making it easier to differentiate between development, staging, and production environments * Large changes can be deployed far faster - FTP is slow as fuck
Why is everyone telling you setup xampp / a vm / another operating system? OSX Comes bundled with PHP, Apache etc.
I think this is a good idea but I'd find it much more useful and consumable if it were a cache-busting filter/extension for an existing asset manager like Assetic or Basset or something along those lines. As a stand-alone library I probably wouldn't use this. You should really look into implementing what you've got here as a filter. Most of the asset management packages I've seen use a filter type solution and you could likely implement your cache-busting strategy inside one of those.
It's always good practice to separate your development environment from your server environment. It's fine to have a local Apache/PHP stack on the OS you're developing on, but if you're going to do testing on a VM or other 'emulated' server environment anyway, why not just set up Git or some other VCS and do testing in the emulated server environment?
You are only randomizing $class once in your script so it will only ever be one value. Diatribes about randomization aside, you really just need to move your "$class = rand(1,5);" directly before your "$thelist .= ..." statement.
While the other comments are valid, they can be overwhelming to a beginner. If you're just starting out, just install MAMP. It lets you run PHP and MySQL on your Mac. In fact, you can run PHP without installing anything on your Mac. Just go with MAMP for now - it's the quickest way to get started without getting your hands dirty. There are plenty of resources that show you how to get up and running with MAMP - Google it. Yes, eventually you'll need to learn how to set up VMs and environments and all that. Baby steps. Some resources (off the top of my head): * [PHP Website](http://php.net) * [PHP The Right Way](http://www.phptherightway.com) * [Stack Overflow](http://stackoverflow.com). Great place to search for solutions and ask questions. * [MySQL Resources](http://www.mysqltutorial.org/mysql-resources.aspx). PHP and MySQL go hand in hand, so you need to learn the basics. Tools: * [Netbeans IDE](http://netbeans.org/). Some people may recommend an IDE, and this is a good one (plus it's free). I'd personally go with a simpler text-editor. See below. * [Sublime Text](http://www.sublimetext.com/). This is a very popular text editor with a lot of cool features. * [Sequel Pro](http://www.sequelpro.com/). A free database management tool. When you're comfortable enough with coding, you'll have to learn how to write queries and mysql commands. 
As an alternative for those IDE's I'd suggest instead he takes a look at Komodo Edit. While there is no direct debugger (only in the IDE version), I do not find that an important factor in my environment.
One suggestion with the new 5.5 release. Try as soon as possible to implement the functions to operate with yield, or create a separate namespace with functions that use yield instead of intermediary arrays.
I just checked MAMP and (surprise: newbie question!) it says that it supports PHP 5.4.4. http://www.mamp.info/en/mamp/index.html Will that be ok? I'm asking because I know that 5.5 is the latest and I'm not sure how it goes.
Sublime Text 2. I've used Notepad++ for 2 years and I can tell you it's alot better than Notepad++ with correct plugins and theme options.
The mac comes with Apache and PHP installed on it already, I just use that. PHP needs to be activated, which you'll find instructions for online: http://php.about.com/od/phpbasics/ss/installMac.htm One thing that most people use is a database such as MySQL, you'll need to install one separately. But if you're just starting out, I'd suggest get PHP working first, then add a database a little later. PS. lamp and mamp are just a nickname for the collection of common tools. L/M/W = Linux/Mac/Windows A = Apache M = MySQL P = PHP 
5.4 is fine.
Exactly correct...I've done this a couple of times in the past and I always have that forehead smacking moment when I realize I've only randomized once because it was outside of a while function.
I prefer this too. The biggest drawback is the lack of PHP 5.4 / 5.5, but homebrew solves that easily for me.
You could always run them each on a vhost with apache. I assume you don't have a lot of familiarity with it, but if you rent out a vps, and look up apache vhosts, you should be on your way. That or apache aliases.
I was a graduate when I started with a few sites under my belt. There was no code sample needed and no code test either. With my company it was more about fitting in with the team and having a good work ethic. I didn't lie either. If they said have you done much sql I was honest and said basic queries but nothing to write home about. They liked that I was honest and didn't feel the need to exaggerate the truth. 
a good job interviewer will look for your experience, not your "knowledge" thus preparing usually doesnt help much as they can look through whethere you are telling something you memorized or telling something you used. its better to be HONEST! if you are showing a willingness to learn and invest your private time to get better in areas where you lack, there is no reason not to take you other than that you'D be really bad. If we hire someone, we allways have them come in for a day to show how they work after the interview, or send them classes / have them make a little homework ... so if you're not honest within the interview about your knowledge and experiences its VERY LIKELY that this gets back at you. If you want to prepare for an interview: research the company, what are they doing, what are their customers or projects, what software are they using (a lot of companies are very open about it) Look at you rown CV ... what questions will most likely arise, prepare for those etc ... but dont try to make your knowledge/skills seem better than they are, its not worth it, in ideal you're going to work with them for a long time, they WILL notice very quickly how good or bad you really are, just be honest!
&gt;If you've ever interviewed for a PHP position and gotten hired, what was it about your interview that you think made them hire you? Attitude. Interview them. At least I did. "Yeah im here for a job, but the important question is X about your company". Put them on trial. Unfortunately you cant really fake this, either you are interested or not. &gt;How should I dress? Ask the person who requested you come in. Preface it like "I assume dress code is business casual, but I wanted to make sure so I didnt look out of place" &gt;What is the bare minimum of tags/functions/queries/etc I should be able to use from memory I am a lead developer and I cant recite shit. Who the fuck can? This isnt a test, it's FAR more important to know how to solve problems, how to use the internet to look up answers, and your problem solving process that counts. Any monkey can remember functions, only people worth a damn can explain their throught process of how and why. &gt;If you've ever interviewed for a PHP position and did not get hired, to what do you attribute that failure? Office culture. I am kind of an asshole, so it takes a certain kind of person or types of people to work with me. I wasnt going to change, so I went through a few interviews before finding a great team that my asshole traits were at home.
Cheers. As a side-question, would you roughly suggest the same thing to a Windows user (but to look for WAMP instead)?
Maybe they'll let you use Google?
Well, I've been through about 7 job interview for PHP roles now, ranging from the beginner (on my University placement) to the intermediate, to the advanced. I'd say it's very varied from one company to the next, with some not wanting code samples at all, some doing 'tests' on the day and so on. So the key for me has always been to be myself, but to also research the company a little too - what sort of work do they do, how big are their projects and how complex do they seem? At the end of the day, they're hiring for an entry-level role - they aren't expecting you to blow them away with your technical skills - and in fact doing so might even hurt your chances because that's not what they're looking for. And worse still, you'd be getting paid for the job you applied for - not the skills that you have. For a beginner role, they'll be more interested in your drive, ambition and willingness to learn - after all, if you're never going to get any better then you're not much use to them! There's plenty of developers out there with the same skills, better skills and less skills - so you've got to come across as willing to learn and smart enough to do so, because they'll then see how you have room to grow within the company (and from their point of view that's a much most cost-effective thing to do, because whilst you may get a pay rise, you'll very rarely end up on more than you would if you went to a fresh company with your newly-improved skillset, and you'll of course be more experienced with the company and their systems and ways of working). To answer your questions, though: 1. String, number and array functions have come up quite a bit for me as well as general syntax questions, just to make sure I knew the basics. Try to remember the basic ones, but PHP can be a bit of a nightmare because it's very inconsistent. If you don't know - say so, but you can recover by saying how it takes 10 seconds to look it up in the manual, and more importantly that you know what the function does. I can't remember the syntax for any but the most frequently used functions - but the manual is my friend, and I know what the function does, and more crucially what I want to do with said function. For MySQL, HTML and CSS - just remember what you can - there's a whole lot of nuances you'll pick up along the way no matter how good you are 2. Future-proofing is good - tell them about the direction each technology is taking and why that's a good thing. That shows that you're aware of what's going on in the industry and are keeping on top of changes - so your skills aren't outdated from day one! I don't think they're expecting to be wowed by your incredible knowledge otherwise you'd be applying for a more senior role 3. For me, it's always been my honesty and my personality. I'm a damned good talker - and that's always been a big help. Interviews don't scare me, they don't phase me and I don't get particularly nervous. Largely because I am the foremost expert in the World on the topic of me and my skills. So what is there to be afraid of? My skills of course come into question, and so you do need to have a grasp of the languages that befits the role you're applying for, but be natural and get your personality across - you're not a robot. 4. Never happened - I must be doing something right 5. Always a suit. You're a professional. You're going for a professional job. You're looking to start your career. Dress like it. Even if the company has a relaxed dress policy (we do here), it's just par for the course to look smart. Lastly, don't be nervous - even if you don't succeed a few times, it's more likely because of your interview technique than your skills, so don't get downhearted. You just have to be the right guy for the role is all, and that's all down to who **you** are. Like I said, there's thousands of people who can do what you can do. There are thousands of people technically better - same with me; I'm not the best developer in the entire world either. But I take pride in my work, actively try to improve, and I try my best. Those are qualities that a company wants. The skills you can pick up along the way but you're not likely to have a personality transplant any time soon, and it's that which will have a massive sway in their decision. Sure, advice like this is great, but please, please don't go in there with a memorised list of things such as the way to speak, the way to act, the way to sit and all that - it'll make you more nervous, add more pressure and more importantly it'll be rigid and false. You need to be yourself. Concentrate on that - you've got the skills already. Be confident, and good luck! Let us know how you get on! 
The reason for your empty class is that the variable $class is inside of single quotes (e.g. '). Only double quotes will parse for variables. You will have to escape and concat the variable like below just like you do for the $file variable: &lt;?php $class = rand(1,5); if ($handle = opendir('.')) { while (false !== ($file = readdir($handle))) { if ($file != "." &amp;&amp; $file != "..") { $thelist .= '&lt;div class="box"&gt;&lt;div id="' . $class . '"&gt;&lt;a href="'.$file.'"&gt;'.$file.'&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;'; } } closedir($handle); } ?&gt; Best of luck, I know it's always the simple things, just remember KISS.
Minor nit - 5.5 is actually a full public release - June 20th.
I use Windows and XAMPP. I use PHP5.4. Anything after 5.3 is fine to be honest. You need to remember that this is your local environment. It doesn't matter too much as long as it is running smoothly. Something to be aware of is differences between your local environment and the server you are deploying to. There may be a difference in modules or PHP configuration which means what works well locally only partly works when pushed live. You will learn how to cope with this with experience. I have an area of my server for testing before pushing things fully live. I also have tweaked my set up over time to more closely match what is running on my server. Some people set up a VM to fully match their their server environment. It is preference really.
It should be noted a class cannot start with a number. I am unsure if it is the same with id's.
It is the same with id's, yes.
Stupid question, I guess, but I want to ask because I have no idea. What's a general spread for salary in an entry-level PHP job?
Noted! Thanks
I also recently inherited a Yii project and I do see Laravel as being simpler and cleaner. In my book, Yii is the "framework that does it all", so you won't have to wonder if you can do something specific or if it has a specific feature. It's also well documented, but with a much steep(er) learning curve. Yii has more configuration, more modules, more folders, more files, more of everything. Laravel on the other hand... it just seems... what you'd want for most normal sites. Yii seems like an enterprise framework where you sacrifice development time/speed for... (insert good argument for using Yii here). I am very new to Laravel so don't just take my word for it, but with L4 you will get a great ORM, that's easy to use and make coding much more fun, unlike anything I've seen in PHP before.
It all really depends on who your interviewer is. If you have a business person, it's one thing. If you have a developer, that's another. When a manager interviews you: 1. know the technology you'll use. For example, don't focus on knowing what exactly an "array_intersect_key" function may do but rather focus on "I can build a basic CMS from scratch, learn quickly, and can help you manage/develop what you need). Focus on cross-browser compatibility rather than "I know how to CSS3". Refer to prior projects. Also, KNOW your interviewer, research them on linkedIn etc. 2. Learn about their business. This is crucial. 2. I was hired because I was able to connect with people. I landed my first interview because I demonstrated how I fit into the business. It was a media agency, I knew media and worked with Wordpress (their main platform of CMS) and told them, "If you ever use anything else, I'm confident I can figure it out" 3. Usually I was unfit for the position in some way. I was always glad I didn't get that position because it would not have worked out. I usually attribute this to "developer mills" (places where they hire large amount of entry-level devs for small tasks), and places that were not entirely sure what they wanted. 4. Business casual. Basically, formal pants and a dress shirt but no tie However, if you get interviewed by a developer, it's different 1. demonstrate basic knowledge of all those. Show them by referencing sites you've built, refer to your portfolio and refer to projects and technology you've used. Not "cross-browser compatibility" but stuff like, using LESS CSS, and technology you've tried and hope to use in the future. It demonstrates your eagerness and ability to learn, and that's a huge deal 2. Try to learn different controversies and stances on development and be knowledgeable of your choices. Why PHP? Why not? What about MySQL? Do you use Javascript? Are you using any frameworks? Have you heard of RoR? 3. Quick fit with others as a team (make jokes, be comfortable) and demonstrating I can learn and expand as a developer and that I'm not stuck. 4. With developers? Developers are much easier to deal with. They understand what you know and if you're interviewing, they already want you. However, there are times where developers WILL assume you do something better than something else. For example, they may thing that you're more front-heavy (HTML/CSS) and assume you can't do the back-end. Or vice-versa. Try to show you know everythign well :) 5. Again, business casual. Good luck!
Are you me? I cannot emphasize enough on 3. I also got hired as PHP programmer although I don't consider myself programmer at all which I also told them. I know programming and done smaller projects in school but again I don't consider myself remotely close to being a programmer as I'm telcom engineer. The same goes for design patterns and MVC. Nothing I've ever used before this job. I just told them I am willing to learn and take on challenges that might appear. So motivation and showing the skill to adapt will definitely place you higher on the list versus a narrow minded technical person.
The symlinking of directories sounds like a great way to do this. Can anyone else weigh in on this practice?
\#3 - Aside from being technically competent, I was confident, friendly and generally came across as someone they would not mind sitting in the same room as, day in, day out. \#5 - Wear a suit (or smart lady wear if you are a lady)! If I was interviewing (which I don't), if an applicant couldn't be bothered to dress up then I would assume they couldn't always be bothered to do their best work. I can't imagine a situation where you wouldn't get hired for looking too smart, but I can easily imagine the opposite. 
Your advice is priceless. Thank you very much!
Why not? The HTML 4.01 spec says that class is cdata-list [CS], so a starting number is allowed. Mind you, you *do* need to specify the class in **CSS** using an escape sequence (\31 for 1).
It's not even one day old : http://www.reddit.com/r/PHP/comments/1h41tv/what_is_your_php_developmentdeployment_strategy/
Check out this project... https://github.com/progrium/dokku and by extension this: https://github.com/dotcloud/docker If you're going to be using Laravel then this might be of interest: https://github.com/Anahkiasen/rocketeer
I've interviewed for some php positions. One of them had me take a written test, write some basic php code and mysql queries on paper. If you have been doing php for a year or more, this should be really easy. The other one talked to me about my development process and trusted my confidence. The problem I had with php interviews is the salary they offer is too low, 40-50k. Php seems to pay less than any other technical skill for some reason.
I've actually only recently starting going to these meetups and conferences. I've met great people and learned so many things! Definitely a big plus!
As /u/NPHisKing said, it entirely depends on location. In Toronto, Canada, PHP programmers are a dime a dozen as well. I did a 4 month unpaid internship followed by $15/hr, which works out to CAD$28,800
Interesting and stupid of them. I've let Hostgator know.
We did this at a startup I worked at last year. Where I can, I do it on any project. If you're using WordPress, Drupal, or any other CMS you probably can't do this. Also if users (even admin users) are uploading files, you'll have to find a way to serve those from outside your deployment directory. Either another server/S3, or a local path outside where you deploy. For the latter, you can get creative with Apache aliases to make it seem like they are being served from the same DocumentRoot. Edit: better explanation at end.
you probably don't need to pull data. Store the last know value in a DB with a timestamp and set up a expiration mechanism, that is: query your remote resource only when the cache copy age &gt; 5min.
Don't be blinded by the possibility of fulfilling your dream. Be sure to find out as much about them and their environment as you need to be sure you won't hate working there. Don't come across as desperate. also. A good interview is about finding if you will fit in the company, both technically and culturally. It's not just the company that needs to come out of the interview believe it's a good fit, it's you too; don't forget that.
Deployment systems are an industry standard practice. There are many to choose from, but they do very similar things.
I think you mis-read (or I didn't make my point clearly enough). The point I was trying to make wasn't that you should break BC all the time. Or even often. My point was you should be religious about designing forward and anticipating BC needs ahead of time (sounds trivial, it's not). BC should be an effect of good design, not a goal to justify bad design... So break BC when it's justified (when it really will make a significant difference), but in general don't because you plan for it better, not because you restrict what you're trying to do... It's a subtle difference, but a VERY important one...
First hash urself a new md5 pass. Msyql -&gt; "mysql -u root -p" for p = your msql password "use (name-of-database)" (select your phpadmin database) "show tables;" (you're looking for a table name with "users" at the end) "SELECT ID, user_login, user_pass FROM (name-of-table-you-found)" (this gives you an idea of what's going on inside) "UPDATE (name-of-table-you-found) SET user_pass="(MD5-string-you-made)" WHERE ID = (id#-of-account-you-are-reseting-password-for)" (actually changes the password) "SELECT ID, user_login, user_pass FROM (name-of-table-you-found)" (confirm that it was changed) Finnaly (type Control-D, to exit mysql client) Edit: formating Edit2: You have to fiddle around with the column names do not have access to php admin atm
Hang on hang on how do I do this again? I quite the noob so could we explain exactly how to use this skipping of grant tables stuff?
When I interviewed for my first (and current) PHP programming job I was a basic level developer. Knowing what they meant with the basic "Gang of 4" design patterns was very important during my interview. While I don't like their use as a "golden hammer" they are an important part in the development world, plus they sorta count as interview buzzwords. You generally don't have to have all of them memorized, but be able to identify a few of them and why/how they're used. I'd also like to second the aforementioned tip to know a few basic MVC architectures by name, and the gist of how they function and WHY they're useful in a production environment. That was important for me as well. Usually I find in interviews (I sit in on most of them now that I'm one step shy of being a senior developer) that being able to look at a problem, and figure out HOW to solve it is far more important than being able to rattle off a lot of function names and syntax by rote. You can always google the name of a function if you draw a blank on it. What you can't google is the "what is a good way to fix this problem?" aspect of it. You might also want to bone up on the philosophy of "unit of work" in programming methods, the basics of OOP (why it's useful + it's relationship to MVC structures) and unit testing/TDD. You don't have to be an expert in their use since you're entry level, but being able to talk cogently on WHY you'd want to use them and how they affect the development process is always a good thing. Good luck to you!
* Stop the server * Go to the server configuration file * Add the option to the configuration file * Start the server * Log in as root w/o password * Find the entry(es) for the root user in mysql database and update them with new password * Stop the server * Remove the option * Start the server I am deliberately skipping the specifics so that you learn how to look them up in the manual. Hint: google "skip grant tables" Grant tables are the internal MySQL tables that store users and their grants - that is, permissions.
Just lucked out and found a way around it. Thanks, all!
There's a lot of other great answers, so I'll toss in a few points I haven't seen yet. * Know how to program [fizz buzz](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html). In my current position, they had us code a function to calculate mode. * For bonus php points, check out [what's new in 5.5](http://www.php.net/manual/en/migration55.new-features.php). Generators and password hashing look interesting to me. * Read about [Maria](http://mariadb.org/) and [Percona](http://www.percona.com/software). Don't even install these dbs, just read up on why they exist. * I helped my friend switch careers into development. He missed a couple of jobs because he didn't have any side projects. He DID have side projects, but was embarrassed and wouldn't talk about them. Anything you've coded, regardless of how trivial, is worthy of mentioning. * Dress is completely subjective. If they didn't specifically tell you to wear a tshirt, slacks and a button-up shirt (maybe tie) are the norm. 
Find out _everything_ you can about the company. Be polite and answer questions, if you can lead onto some more complex question if you know how to answer them. Dress casual if nothing else is specified, just a button up shirt and if the company, if the company is very formal and handles daily meetings with external customers maybe a tie could pimp you up.
We run our four sites all off of the same codebase. There is a main database that holds user information, domain information (site name, seo, etc.) and style information. Each site also has a respective database with their own information, but our user class creates sessions out of the main DB. It sounds confusing, but it's really easy for us now, all logic is split up into their own directories: controllers/domain1/postjob controllers/domain2/applyjob etc. This is all our own infrastructure though, a base we began in 2006 and have adapted through the years.
"That's the first thing that's ever gone wrong..."
Thanks for the suggestion! We use Ruby-powered asset managers, which is partly why we built this, but I'll look into what it would take to integrate with some PHP solutions. Thanks!
I *still* have a few sites currently running PHP4 that are impossible to move over to PHP5 without effectively re-writing them -- I think it's that bad. 
This is one of the phrases from the Simpsons I use a great deal at work. That and "Willie hears ya. Willie don't care."
Central NY here, anywhere around $15-$20/hr, $30-40k/yr.
&gt; What is the bare minimum of tags/functions/queries/etc I should be able to use from memory, for each of the 4 technologies mentioned above? Generally be *aware* of most of the language and *know* the structure and concepts. E.g. you don't have to remember whether a particular function in PHP is needle-haystack or haystack-needle, just know (a) the function is available to you and (b) that the needle-haystack ordering is a problem you need to be cognizant of. **A bit of advice from a guy who's been both interviewer and interviewee** you're not expected to have memorized the manual. The single best thing I could hear from a candidate in an interview is "Honestly, I don't know, but I can look it up and learn it". They need to know you can shift and evolve to meet their needs and that's all that you need to demonstrate. &gt; What are some quick things I could learn about these technologies that would impress in an interview setting? PHP: Talk about new features to show you're keeping up to date (closures and namespaces, as well as generators in PHP5.5). HTML &amp; CSS: Learn some CSS3 transitions and animations, those are always a crowd pleaser. MySQL: If you want to show off practice your aggregates and joins. Really if you know the difference between a Left Join and an Inner Join that's a winner. &gt; If you've ever interviewed for a PHP position and gotten hired, what was it about your interview that you think made them hire you? &gt; If you've ever interviewed for a PHP position and did not get hired, to what do you attribute that failure? Eh these questions are hard to answer, I don't know what to tell you. Just relax and do your best and be friendly. &gt; How should I dress? Ask the people you're interviewing with. "Just curious, do you guys have a dress code for interviews?" They will usually respond with "No, but we'll be wearing casual/formal/togas" and you can judge from there. Period end of story: no printed t-shirts, no sandals. 
Nobody's born a security expert. You shouldn't let your fear of messing up prevent you from learning something. Hell, I've learnt more by making mistakes than reading textbooks. Go ahead and learn PHP; build something that interests you, and get it running first. Then try to break it; feed it input that a malicious user might use. You will learn a lot this way. Oh and make sure to read other people's code to see how they do things compared to how *you* do things.
If you want to clear a forest you'll have to cut down some trees. If you're going to cut down some trees you'll likely use a chainsaw. Chainsaws are dangerous things but that doesn't stop tree-fellers from using them. The same can be said about php. The utilization of any tool can expose the dangers of that tool. Don't take on a giant redwood / Don't start with personally sensitive data. Cut up a little firewood and see if you like the way the saw jiggles in your hands.
In all honesty, I'd rather see something like: usort($array, function($a, $b) { return strcmp($a['name'], $b['name']); }); It's clearer, and far easier to debug... At least my $0.02...
Just don't store passwords in plaintext and sanitise database inputs, and you'll be fine for the moment.
Your post has little to do with PHP because we could replace the general contexts in your post with different things(backend person wanting to do more frontend, etc etc) and end up with the same end result. You're holding yourself back with having any fears let alone PHP security fear. You are letting fear run your life career choices instead of yourself making these decisions. You're answering your own question stating, "I like programming". Do what you love and don't let anyone else tell you different. You don't need to start utilizing PHP in customer projects but instead just start on something on the side. Fear tricks us into thinking we have to do everything at once but instead just pick one thing &amp; start there, start a small PHP project for your own personal use and then move forward with time. Highly suggest reading this excellent book to reflect on yourself and hopefully push through these: http://www.amazon.com/Start-Punch-Escape-Average-Matters/dp/1937077594 If you honestly feel like the book was a waste of your time &amp; doesn't help you message me &amp; I'll straight up paypal you whatever it costed. disclaimer: I am in no way related directly or indirectly to the author, publishing company, the above link isn't an affiliate link, etc etc. Simply put I'm a software developer who has read this book and can relate to the real problem here. 
Gentlemen, it is SOLVED! Thanks for the help. I'll try to post the finished product of what I am making once I finish it so you can see what you contributed to.
For any interview, the interviewers are basically looking for red flags, and to answer 3 basic questions: * Skill: Can you actually do the job? * Motivation: Are you motivated to do the job (i.e. more than just a pay check)? * Attitude: Will my team be able to work with you without personality conflicts? Since you're interviewing for an entry-level PHP position, I wouldn't sweat too much on the actual skill qualifications. If you don't know any answers, make sure you don't just give a one word answer and tell them about how you would find the answer. Most of the questions should be testing your problem solving skills, so you don't know make sure you keep your cool and talk about your thought process. &gt; What is the bare minimum of tags/functions/queries/etc I should be able to use from memory, for each of the 4 technologies mentioned above? You should know what basic HTML tags look like (what's a table, div, ul, dd, h1, p, etc..). For functions and queries, I would expect you to be able to write basic pseudocode and write a basic SELECT query. You should know basic class and function definition. If you want to impress them, be knowledgeable about JOIN (inner, outer, differences). Beyond that, if they start asking you trivia questions (e.g. what's the difference between echo and print), I wouldn't worry about it too much. If they actually think shit like that is important, it's very likely that you shouldn't work for them. &gt; What are some quick things I could learn about these technologies that would impress in an interview setting? There are very few "quick" things. Mostly, you either know it or you don't. I wouldn't stress out too much about it. In general, the following things are "cherry on top", but make sure you know the basics. It doesn't do you any good to spout about query optimization if you can't even write a string comparison function in pseudocode. * You know Design Patterns (bonus for something other than Factory or Singleton), and can provide a reasonable example of when you've used it. * You know what MVC is. * You are familiar with some Frameworks (jQuery, DOJO, Zend, Symfony, KendoUI), and actually give examples of their usefulness. * You know unix bash shell. * You know JOINs. * You can give some reasonable answers about optimizing LAMP apps. * You know something about apache configs. &gt; If you've ever interviewed for a PHP position and gotten hired, what was it about your interview that you think made them hire you? Mostly, just stay calm and be honest. Be prepared to answer questions like: "What's your greatest weakness?" or "Describe a time when you've had a disagreement with your coworker and how you resolved it?". Yes, they are retarded, but you need to be able to answer them without sounding bad. If you're the sort that gets nervous, it might be a good idea to practice answering questions in front of a mirror or (even better) get a friend to mock interview you. &gt; If you've ever interviewed for a PHP position and did not get hired, to what do you attribute that failure? A couple of times, I've flubbed an interview and I knew it. Most of the time, if I didn't have the skillset, it was obvious to both me and the interviewer. A few times, I had interviewers ask me some silly trivia questions and I didn't get a callback. &gt; How should I dress? Research the company. If they're a big company or a government sector place, you will probably have to do at least business casual. Tie and a suit might be over-kill for certain companies. You're not a salesman after all. If you have time, ask your interviewer. They will appreciate your asking.
Well that's entry level. Philly cap is around 120-140k. 160k if it touches anything financial in nature. But yea. One thing I would love to do at some point in my life is telecommute a silicon valley job while going around Europe with a laptop. Save money while traveling. (Whole cost would be less than mortgage / apartment in the valley).
Go for it, just keeping security in mind, we are all constantly learning how to write better more secure code, and you will not get anywhere until you start. Just don't get in over your head (if you don't feel comforable with it, just say no, better to have lost a project than to have a data leak associated with your work), if you need to secure some information, do some research, you will probably find several nice libraries that you can use, (i.e. password hashing, use [phpass](http://www.openwall.com/phpass/) )As far as credit cards goes, my best advice is just don't do it, there are several options that will securely store them and provide you with a token that you can use with their api to re-charge them if you need that. ([authorize .net cim](http://www.authorize.net/solutions/merchantsolutions/merchantservices/cim/) is an example, and there are a lot more.) The other thing that you can do is if you aren't sure how to secure a part of a project, you can look at how other frameworks/cms solutions do it, its the beauty of open source! (keeping in mind that if you just copy paste the code in you need to properly license/attribute it, etc etc) Also I understand the whole not being worried about smaller clients, but I would avoid that thinking, its easy to get into that mindset, and then it just kind of travels with you, I have seen some large projects lacking even basic input sanitization because "its just going to be used internally" or md5 password hashing because "who would want to hack X company" If what company was getting hacked was predictable, it would have been avoided, you really should treat all projects as targets that you need to do you best to protect!
Ok, let's look at his "complex" one: usort($data, make_comparer( ['number', SORT_DESC], ['birthday', SORT_ASC, 'date_create'] )); Or you can use: $sortFunc = function($a, $b) { if ($a['number'] &lt; $b['number']) { return -1; } elseif ($a['number'] &gt; $b['number']) { return 1; } $aDate = new DateTime($a['birthday']); $bDate = new DateTime($b['birthday']); if ($aDate &lt; $bDate) { return 1; } elseif ($aDate &gt; $bDate) { return -1; } return 0; } Sure, it's slightly more complicated. But it's also a lot easier to see what's going on and debug... Additionally, what are the use-cases for doing this style complex sorting in PHP. That instantly makes me think that perhaps you should be using your database more effectively... 
&gt;Additionally, what are the use-cases for doing this style complex sorting in PHP. That instantly makes me think that perhaps you should be using your database more effectively... In our case, prices for the products in our database change every day depending on fuel costs and various other factors. We pull items that match the user's search out of the database, add on extra / fluctuating costs using a couple external APIs, then need to sort the final result based on the total cost. There's not much purpose in storing that information since it will be different for each search. Of course, for each product the total cost is only one of many indexes inside a multidimensional array, so I was looking for a good way to sort. I was impressed with this guy's solution because it was well-designed, thorough and versatile, and because I learned a lot about sorting by reading it. That said, in my project I ended up just using uasort().
I live in Vegas and I just got my first PHP job. I'm not really 100% sure if it's really classified as entry level, but I am getting $50k/year base + up to 50% bonus at the end of the year. Seems like I am getting above average pay, especially for my location.
&gt; Sure, it's slightly more complicated. But it's also a lot easier to see what's going on and debug... I agree with your first sort example but I disagree with this one. It's actually very subtle in your code that it sorts by number descending and datetime ascending. Where as in the `make_comparer` example it's actually pretty clear (and explicit) what the operation should produce. 
At least I'd suggest Komodo Edit. Free and with a very good auto-completion system.
Hmmm.. I don't know. I'm not a fan of stored procedures or triggers. I find it hard to maintain in a big application environment. It's also non-portable, a bitch to migrate, hard to test. How do I version control a trigger or a stored proc so that my coworker can get it and use it? Wouldn't it be more maintainable to execute an event on update? The performance hit shouldn't be too big as prepared statements are getting faster. ----- edit: I just reread the article to really understand what you were trying to achieve. So basically, you disabled DELETE on that table and you don't let anyone update the values unless it's the column "to". I think you can prevent delete with MySQL privileges. Pretty sure you can do it per table.. but I'm not a fan of DELETE, I prefer soft-deleting stuff. As for the update thing, couldn't you just update the 'to' column without touching anything else? like UPDATE tbl_user_status_history SET to = '2013-01-01 00:00:00' WHERE id = 3 AND to IS null 
I wrote a tutorial for setting Xdebug up, using PhpStorm: https://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/
Nice tutorial, but this would probably mean that I would have to switch to PhpStorm? Using PhpStorm only as a debug client seems kind of overkill. Thanks for the suggestion though!
It would mean you would have to stop using a text editor to get IDE functionality.
Point taken. You're absolutely right about IDE functionality in Sublime Text. Maybe it's time for me to look around and try other editors. Thanks for the suggestion. 
That's what I was talking about. In stead of needing a timestamp we already have minute crons that run so I can just do a mod 5 on current minute and then update from source. Then perform call from there. That's actually what I did today. I got our homepage load times from 1.3 seconds down to 0.16 seconds. Gotta love the external sources.
When you load a file with file_get_contents() you're essentially loading the file twice, from the end user perspective. Think of it this way. You want to serve FileA which is stored on ServerA and the user is on a site that's server by ServerB. So, you request the file contents From ServerA with ServerB and download the file into memory. The file contents are then sent from ServerB to the user. So this file has hopped from ServerA to ServerB and then finally to the user.
* Vagrant for local development * Chef for server builds * Version control in git, hosted in Github * All config stored in Chef data bags * Capistrano to deploy * Database migrations handled through Laravel * Backups done manually for now (automatic once we switch to RDS)
I recently tried to get XDebug into my workflow, and basically ended with the conclusion that without an IDE that has good XDebug support it's hard to do. I tried the Sublime Text [plugin](https://github.com/Kindari/SublimeXdebug) (my editor of choice), but it felt really messy. Good on the developer for creating it, but for me it wasn't quite polished enough for day to day use. I also messed with [Codebug](http://www.codebugapp.com/), which is a nice looking Mac app, but I didn't like having yet another application running. I also couldn't figure out the path mapping, because the program gave no feedback as to what I was doing wrong, so that made it pretty much useless. I also tried, [macgdbp](http://www.bluestatic.org/software/macgdbp/), but it kept crashing on me. I've heard many folk recommend XDebug, and I would love to use it, but i'm not sure I'm prepared to drop my text editor at this point. Maybe I gave up too quick.
Interesting, glad that can be done in windows as well. I'm pretty sure OP was asking about the interactive debugger, as opposed to the profiler though ;-)
Debugging is not IDE functionality, only for you new-fangled kids who never knew of a better time ;-)
The compulsion to solve a a domain of problems instead of your immediate problem seems very strong in most programmers. The hardest skill to learn is when to ignore this impulse. 
The reality is that for PHP development, there's few non-IDE editors that can work perfectly with XDebug. I've tried both Sublime Text 2/3 and Notepad++. I tried with vim. None worked as well as an IDE.
I completely agree that the current state of existing programs is that IDE is the only way to get xdebug functionality. I'm also saying that anyone who has used GDB knows that IDE !== Debugger(although it can). What this means to me is that i *should* be able to use any editor i darn well please, and i should be able to use any debugger with it. Unfortunatly developments in the last number of years has only seen work done to debuggers that were buried deep within programs that have only a tangential relationship to debugging.
I'll reiterate what sidscorner said, as I agree thoroughly with this. I spent many years doing dev on windows, and found the mac environment surprisingly good. One thing I'd recommend is MAMP Pro (as opposed to the free version of MAMP) as it has some really nice features for handling more than one site. It's certainly the most useful and intuitive way of running a development environment that I've found. Macs have PHP and Apache built in, but they're not particularly new versions, and the configuration is a pain in the ass. Things like MAMP simplify that. Vagrant is a lovely solution and all, but find a workflow that suits you. One of the major problems I have with the PHP community is that almost any simple question results in a response of **"you're doing it wrong change your entire workflow"**. It's frustrating and unhelpful. One thing I will disagree with sidscorner on is that you'll eventually need to learn how to set up vms and environments and all that. I don't necessarily think you will. In my case I work exclusively on virtual hosts on MAMP Pro. I deploy to cloud based servers and everything works like magic. The only thing I'd add is that you should learn Git. It's pretty much how things work now. Also Composer. I don't want to add too much to your list of shit to know, but these two tools are rapidly becoming fundamentals.
mac xampp's version of php is so old it doesn't support composer. **do not use**
Above and beyond is not always the best. I always ask myself, what else could I be programming? Does it function?
Wordpress is not great at security as well. As an upcoming developer you should start to learn what is the best way to store data in databases. What is the best **data** to store in the database as well? I recommend taking a database intro class and attending some local PHP groups so you can ask questions to seasoned vets. Look on www.meetup.com for a local PHP user group. Also look at www.phptherightway.com and start by using existing frameworks. Good luck!
It only tells you to purchase licensed version time to time, you'll barely notice it. That's the only difference between paid and free version.
In denmark php-programmers appearantly are few and far between, I just got another $700/month which brings me to $63k/yr. I've seen postings for php-programmers, offering $875 in reward for whoever refers the right candidate.
I got Â£34k here in Denmark straight out of school. they hired me because Idemonstrated I could javascript/jquery/ajax too
What do you mean by overkill? You're presumably working on PHP websites, and that's what PhpStorm is for. Are you using a really slow computer or something? It's written in Java, but it's way faster than Netbeans or Eclipse. Over time, you'd probably slowly start to use and appreciate some of the more advanced functionality that an IDE comes with. 
[Tsuru](https://github.com/Xanza/tsuru) works very well for application deployment. It's very similar to the AppFog or phpFog method (minus the custom CLI apps). You could also dabble in [Factor](http://factor.io/) for triggered deployments. Ex, when you update a GitHub repo, your local server pulls the chances and deploys them.
Hmmmm... yes, in retrospect I may actually be wrong here. I had trouble with mine, but my install was quite old, so I had an older version. Upgrading the version is a bit of a dick. That said, when you run php on the command line you don't necessarily get the version of PHP you expect (just type "php which" and/or "php -v" to find out). That was a bit of a gotcha for me, and one that maybe I can help you skip over.
Yeah, replied to him above :)
I meant it in the way of using Sublime Text as my editor and using PhpStorm solely as a way to use XDebug on my system. So having two editors running when you can do it with one is overkill.
For the profiling part use [webgrind](https://github.com/jokkedk/webgrind) That's all you need.
I would use [cURL](http://php.net/manual/en/book.curl.php) over the base file access functions. But more importantly, I would not spend much time trying to optimize that kind of things. The bottleneck is in the network, not in your PHP code...So your best bet will be to either upgrade your network, or cache the file locally.
[Nevermind](http://stackoverflow.com/questions/4024230/strange-user-agent-with-google-chrome)
To understand this, you should take a look at the [history of the browser user-agent](http://webaim.org/blog/user-agent-string-history/). Basically, browsers started using adaptations of user agents belonging to other browsers in order to get around any blocks on content / features that they could support.
That's the spirit!
Thanks onefingerattack, I'll give that a read
You should think of using your database as a computation engine, instead of a simple data store. That calculation you're doing is usually better served in the DB. Also, didn't your mother ever tell you to never calculate Money in a language that converts everything to float?
It's worth mentioning how. So people might use this thread as a referance.
That's what I love about SO. The guys over there go out of their way to assist newbies with their queries and expect nothing in return.
Could just be based on an image?
Let's make it about PHP. Check out [this Stack Overflow](http://stackoverflow.com/questions/3899631/how-can-you-read-qr-codes-in-php) post. It's a PHP module: https://github.com/mkoppanen/php-zbarcode Otherwise you are sending off to third-parties, and the OP hinted he did not want to do that. and it wraps around the ZBar QR reader: http://zbar.sourceforge.net/
Yes you can easily do all that. Examples of your first requirement: {% if Company.address is defined %} {% include 'map.html.twig' with { address: Company.address } %} {% endif %} You can also use {% if Company.address is not empty %} ... Use the first if you never even pass the variable, or if it might not be available. Use the second if you're supplying it but it might be empty . I also used an include there as well, so you could reuse the map template. When you use the "with" it allows you to pass variables into the scope of the template you're including instead of relying on the global address being the same every time. You should also look into [Twig Extensions](http://twig.sensiolabs.org/doc/advanced.html) which allow you to add your own functions / filters to the language. You can even add your own tags that compile with the templates. To answer your second question you could just do something like this: {% if Post.content|length &lt; 300 %} ... extra content ... {% endif %} If you really work at it you can add whatever to the language you need. It's usually not totally necessary though, that just means you should have done it before you sent it to the view. The most important and time saving feature I've found with Twig is template inheritance. Definitely take a look at that. 
Somehow I can't image that happening. :) , but thanks!
Thanks man, that's a helpful response. I was nervous about giving specific examples since I don't really need answers to those specificallyâ€”I can look at the documentation. I more meant, in general, what do I do in those edge cases where Twig doesn't have something built in, and you've made it clear I have two choices: extend or do prior sending to the view. Thanks!
It's a bot. No point in trying to communicate with it.
I assumed that would be all the action I got. I guess it is kind of like my version of talking to Wilson in Castaways. Or I'm just a meme from one of his other films. Edit: I guess you were wrong!
I like to push the responsibility on the caller. It'll have to handle any exceptions caused by its crappy input anyway so why not keep all that handling it one place. 
I'd say the first one mainly because type hinting lets functions validate their inputs. public function myArray(array $array) { print_r($array); } The code above forces the parameter to be an array. You could do the same thing in your example instead of checking it with an if/else statement.
If they agree to use this cover, I will definitely buy this.
I was using Sublime Text for my PHP dev for a little while and I agree that the SublimeXDebug package isnt ready for day to day use yet. I decided to get a license PhpStorm when they had their end of the world sale in December (it only cost me something like Â£30) and honestly I've not looked back, its awesome. It integrates really well with Xdebug. There is a neat [chrome extension](https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc) as well to save you having to create bookmarklets that I like.
print or electronic (or both)?
It's just electronic. To keep it a very low cost book.
Nice, it's helpful to know that Twig is being used on large scale website. It should work for me then. ;) I was curious to what it would take to write an extension, so I thought I'd try solve a problem I deal with dailyâ€”cache busting site assets. With little effort I wrote an extension. I can now do this in my Twig templates: &lt;link rel="stylesheet" href="{{ asset('/css/all.css') }}" /&gt; Which automatically generates a timestamped url: &lt;link rel="stylesheet" href="/css/all.1370379876.css" /&gt; Very, very cool.
Symfony2 does a really similar thing with Twig as well. You can optionally provide a second argument so the asset will come from a CDN as well. Also, something worth noting is that you can integrate [Assetic with Twig.](https://github.com/kriswallsmith/assetic#twig) Which is REALLY awesome. You can use it to combine stylesheets / javascript, or to compiles SASS / LESS etc. 
&gt; Separation of Concerns This really doesn't mean what you think it means. Exactly what concerns are you separating that weren't possible to separate before? &gt;It's impossible to use PHP in Twig templates, and that's appealing. The only time this is appealing is when you have no trust. Ex: when outside users are submitting templates. &gt;It has a simple, well documented syntax that our front-end designers can easily work with. You mean like PHP? If your designers can't understand basic PHP, they're going to have a hard time with twig.
Dude, thanks for your input, but my goal wasn't really a discussion on using a template engine vs not from a theoretical perspective. Rather, I'm more after whether or not I'll be limited/frustrated going with Twig specifically.
I have you all beat. We treat servers like filing cabinets for websites. 6 servers with live sites on **all of them**. We develop a site on any server with enough space and resources (no one really knows how much resources the live sites are currently using. deploy now, upgrade RAM/CPU later). When we deploy, we just switch the DNS. I'm a senior developer but nobody listens, fucking kill me.
This perspective isn't theoretical, and this relates directly to the questions you're asking. Before you can make a decision on whether to use something or not you need to understand if your motivations are actually justified.
So, what would you /u/thecarpcatcher pay for something like that, it's a little over 50 pages?
It completely depends on the situation, I'll try to cover some quick use-cases. These are from experience and are more rules-of-thumb than anything, but they've served me well: 1. Public methods -- If you have a public API, then you should validate the inputs on every public method of the API. This is because you don't know how the user is going to be calling the API, and you need to catch mistakes as early as possible. E.g. it's better if they clear, concise error in the immediately-called API method rather deep in the internals of your hidden methods. This is because those internal methods usually spew errors which require knowledge of the internals of the API to understand, which will be most unhelpful to someone new to the code. The public methods are the gatekeepers so to speak. 2. Protected/Private methods -- anyone calling these methods will be working directly on the internals of the code, and thus should know more about how the code works internally. As long as you abide by rule #1 above -- and you don't do any wild type-shuffling yourself -- then you should have an implicit guarantee that these hidden methods will never receive unexpected inputs. I try to focus these types of sanity-checks for runtime code; during development, of course anything could happen, but the code is being written for runtime use and so baking in a lot of extra checks for the runtime will only slow down and complicate your production code. If you really want this level of control, then I'd suggest that unit tests are much better for the job, as they can guarantee correctness to a level that simple checks inside of methods cannot, on top of moving unnecessary code (cruft) out of your application and into tests. Through a good enough suite of unit tests, you can ensure that all internal code (from #2) is adequately handling parameters and such, and thus that task shouldn't be a concern at runtime, where all you should really be concerned with are the external inputs (whether they be from a user, an external data source, etc.).
That is for profiling and not interactive debugging.
Nothing, I'd google it the same way I have been doing for years.
I'd read any book with this cover. Just sayin'.
I haven't needed a PHP book in years, but I would buy this book if this was on the cover. Tell your publisher that if they don't use, they will lose a sale. Edit: I will not edit these sentences. They are bad enough that they will stay. 
You can use a ORM layer. Like http://propelorm.org/ I'm in the process of building my own PDO wrapper for a personal project, not quite an ORM, that takes PHP arrays and does simple CRUD with them. I may put it on GitHub at some point.
I think $4 is a fair price. :-) https://ganxy.com/i/80815/sam-hennessy/php-array-filtering
I don't know if the author is being humble or what, but you can buy it here, for the fair price of $4. - http://developerpress.com/en/php-array-filtering-1 - https://ganxy.com/i/80815/sam-hennessy/php-array-filtering 
You can get it for $2.99 from http://www.amazon.com/PHP-Array-Filtering-ebook/dp/B00CYGY5GS
I was just posting for fun, I didn't want to look like I was spamming. You can actually get it for $2.99 from Amazon - http://www.amazon.com/PHP-Array-Filtering-ebook/dp/B00CYGY5GS
I use http://mardix.github.io/VoodOrm/ it is simple and straight forward. $pdo = new PDO(); $db = new Voodoo\VoodOrm($pdo); $myUserTable = $db-&gt;table("user"); $totalUsers = $myUserTable-&gt;count(); $oneEntry = $myUserTable-&gt;findOne(124); $allUsers = $myUserTable-&gt;where("status", "active")-&gt;find(); 
the page doesnt actually says in 15 mins ,it is more cheat sheet for PHP than anything else. so this thread == flamebait.
&gt; I want to be up in running in under half an hour but CakePHP looks really complicated SYMFONY and DOCTRINE can do that but you need to learn SYMFONY + DOCTRINE like you did learn DJANGO. You did not learn Django IN 30 MINUTES did you ? What you are asking doesnt make sense. PHP is not magic. You say you dont know what PEAR is so i assume you are a beginner in PHP. If you dont like it stick with what you know. 
The name of the site is Lean X in Y minutes. Where X = PHP and in Y (15) minutes you can grasp it... 
PHP sucks as a language? Why are you using it then? Go back to C/C++ or go learn Ruby, Python or whatever. Don't jump on the bangwagon that PHP sucks when you don't know PHP that well. Then coming here asking for help, then turn your back right back and bash PHP. People like you are what's wrong with the community. Help make it better, or shut up and walk out. 
then go back to Django.
You might want to get yourself a book on English language, though ;)
Derp. That's what happens when I get interrupted mid sentence 3 or 4 times. 
I truly like this idea. And the cover alone would force me to buy it. They need to make this the cover. Do it!!!
Da kan de besten overkomen, maat!
&gt; I actually do know php, I was playing dumb to get the widest range of responses, just like others do. you mean you were trolling...
So why are you here for then? Trolling I guess...
&gt; I cant.. marketing signed the contract already. lamest excuse ever. since when does the marketing dep make technical choices ?
Well I'm using PHP 5.4 on centos, and I do this to install php-devel yum install php54w-devel Just so you know, I followed the instructions to add the PHP 5.4 packages at http://www.webtatic.com/packages/php54/ For PHP 5.3 http://www.webtatic.com/packages/php53/
It's not Linux only, nor do you have to use pear. Anyway, you should consider something like [Vagrant](http://www.vagrantup.com) so you can setup a development environment that is common between developers and similar to your production environment.
I mistyped that, I'm trying to install APC. I have a functioning php 5.3.10 install I just want to add APC so I can start caching some of my DB queries. 
I'm in the "validate as close as possible to the where the data is used" camp. 1) If the method responsible for working with the data doesn't validate it, you risk unexpected run time conditions, so you should be validating here anyway. 2) If validation is done where the data is being used, it is easier to sync validation with actual use. 3) If validation needs to change, and it is validated in the calling code, you could potentially be changing validation in multiple areas. There is also a great(er) risk of missing a validation check, leading to errors. Your calling code should be responsible for evaluating errors returned, and presenting them in an appropriate manner.
It's very simple to extend Twig, one file 15-20 lines type simple. I made a thumbnail generator using syntax like {{ imagepath|thumb(x,y,constrain) }} while never having made a twig extension before in less than 20 minutes, basically tying Imagine and Twig together for a Silex-based project. It is extremely simple and examples are all over their site. It really not only simplifies what you have to do in the end, but nine times out of ten you'll use whatever you made for more than just one project, so it's well worth the time investment.
I'll give you tree fiddy 
I can understand where you're coming from but I don't think it's a good conclusion. Twig is not significantly more complex than PHP when it comes to basic output, loops, etc. Having them (your designers) improve their limited PHP skills makes them much more useful as PHP is general purpose, where twig is specific use. Additionally if they know a little bit of PHP, but nothing about twig, they're going to have to spend time learning anyway. Even with limited PHP knowledge they're one step ahead. A lot of the "good" you hear about it comes from people who haven't lived the reality of such tools. One such reality is that PHP-based templating is never going away. It will always be supported. It will always work. I'm not saying twig is going to disappear tomorrow, but attitudes change over time. New tools get made, and fads come and go. Another is that there is always going to be significant overhead with domain specific languages that have to be translated to another language - especially if it's at runtime. Instead of looking at how popular something is, look at the problem it's designed to actually solve. Twig is a tool which is supposed to be easier to template with, but it doesn't really do anything that PHP's template system doesn't already do. Template engines aren't a bad thing, but template *languages* are a terrible idea.
It worked! I've leaned PHP!
You'd be surprised. I've seen it happen.
I've always struggled to read camelCase, especially methods with 3 or more words. So I've taken to underscores for my own projects. In the end, it's a choice and debates about it are just a bunch of opinions being thrown around.
apparently there's a study that indicates camelCase results in better comprehension: http://whathecode.wordpress.com/2011/02/10/camelcase-vs-underscores-scientific-showdown/ although personally I've used underscores_like_this for years. [From the research paper](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.9499): &gt;Results indicate that camel casing leads to higher accuracy among all subjects regardless of training, and those trained in camel casing are able to recognize identifiers in the camel case style faster than identifiers in the underscore style.
I love the Amazon review from MrSherrill
I'm going to assume that was a redditor as that has only just shown up. It did make me laugh also. Edit: typo
Man, first it was Learn X in 7 days, then 24 hours, now we're down to 15 minutes? Is everyone around me getting exponentially smarter?
Now if only you had Learn To Spell in 15 Minutes!
[PHP OSX](http://php-osx.liip.ch/) is really useful for newer PHP versions, also. And comes with a ton of useful extensions already. I've been happy with it for my local environment, which I use for quick projects that don't need a VM.
This is exactly what we use. The deploy process automatically smushes each Twig templates required JavaScript files into one file and its CSS files into one file, then minifies it. So we end up with a bunch on JS and CSS files with filenames similar to yours. Twig extensions are great because you get to jump back into PHP. Also, we have noticed that our custom extensions scale MUCH better than doing the same thing with Twig includes and macros. For example, showing a login box or a "My Account" section on a page. We were using Twig to do it, but we saw it was slow to render. We assumed it was due to the Twig not allowing Symfony to optimize it. So we rewrote it as a Twig extension which would render a different Twig template depending if the customer was logged in or not. It was much faster.
It is also worth noting that the author of the post discussed a similar study with different results in [a follow-up post](http://whathecode.wordpress.com/2013/02/16/camelcase-vs-underscores-revisited/). I personally believe consistently applying a personal, team-wide or organisation-wide convention is more important than adopting a new style for, let's say, marginally improved readability. Seeing as both studies produced slightly different results, I do not believe there is sound evidence for a *superior* style yet.
Use the session API to hold a user object. Have a hook that gets called in the controller. Do a header redirect. if(!$user-&gt;logged_in()) header('Location: ./login');
But thats not what it says :( I really just wish I could define the object once, and be done, without needing to version db's. This is pre-alpha enough that migrations dont matter as none of the data is valuable. 
stackTrase, I believe that the solution I'm looking for involves OAuth2, tokens, and APIs. I also believe that the URL that would get generated would have a long random element to it. For example, instead of: www.john_smiths_website.com/sports_scores.html The URL would look something like this: www.john_smiths_website.com/asd979sJFdK382mfJS201J/sports_scores.html 
Sure if you want to overengineer the shit out of it. The session API takes care of tokens. Have you used anything with $_SESSION before?
No, not if they are used properly. But they aim to solve a completely different problem - reducing the number of HTTP requests.
Having not used Homebrew to manage PHP, I can't compare the two. Just offering another option I hadn't seen mentioned yet. Having PHP and common extensions all mass installed at once is very handy (but I'm sure it has its caveats, as I'm sure Brew does as well). :) Use what works best for you.
Books that go out of their way to put focus on a language rather than programming concepts are useless. A language should be used to relay concepts. It shouldn't be the concept. This is why I will never buy a book that puts "PHP" in the title.
I can see how maybe they could be useless to you. I hope someone will find it useful.
Or a generous tipper.
&gt;I added *.wordpress.com to the filter. thanks.
&gt;I believe that you believe this, but your statement doesn't speak much about how your life was made easier by means of something that adds an extra layer of complexity. Template inheritance: 1. By shifting the act of composing smaller templates into a bigger one, from my controller to the template layer itself. 2. it made my life easier by only having to look in one file to find out how a template is being composed as opposed to looking at my controller and my template when using plain php. 3. It helped me remove spaghetti code from my templates to include many conditionals; by splitting different cases into different template files and using inheritance to connect them. This split is abstracted away from controller or php code so it deals with only one template file at a time, which really helps. &gt; Now, I'm careful to examine the longevity of something before selecting it as a solution. Twig is not only unnecessary, but in some ways detrimental. You shouldn't have to invent a new language to template. I don't know about twig. But I think the concept of template inheritance will stay. As it is derived from OOP, which has stood the test of time. 
You don't need twig to perform template inheritance. At its core, template inheritance is just block (re)placement. This is not a very challenging problem, nor is it one that twig makes *easier*. Basically, this is much the same as partial templates. The only difference is where you define your inclusion. Template inheritance and OOP inheritance *are very different things*. Not to mention, in OOP, [composition is generally favored in many cases over inheritance](http://en.wikipedia.org/wiki/Composition_over_inheritance).
&gt; You don't need twig to perform template inheritance. At its core, template inheritance is just block (re)placement. This is not a very challenging problem, nor is it one that twig makes easier. I don't this it is as easy as you put it to be. At least for me, I think there are many edge cases to be taken care of. &gt;Basically, this is much the same as partial templates. The only difference is where you define your inclusion. Exactly. But that is all that matters, I mean where you define your inclusion. I dont want that detail to be in controller or php code. &gt; Not to mention, in OOP, composition is generally favored in many cases over inheritance. Yes. while that is true, you better keep your designs inheritance only, (You only need to do composition when single inheritance cannot fit your model. If your model is simple enough then you wont have to use it). Unlike, in the business domain, where you have no control over how the entities are related, you can structure your templates anyway you want. 
&gt; I don't this it is as easy as you put it to be. At least for me, I think there are many edge cases to be taken care of. Actually, it'd be pretty darn easy. I'd just use DOM and define replacement based on IDs and classes. As each template is executed, output buffering can catch each of the overriding blocks and render them in to the parent creating your composite. Inheritance, even at multiple levels, would just be basic DOM manipulation. Inheritance doesn't necessarily make anything easier to understand. It just means that instead of tracing forward from the parent to the child, you trace backwards from the child to the parent.
Thanks for making me feel far less stupid for replying to you!
Worst idea I've seen in my whole life. I've been involved with PHP since 1998, and believe in me: I've seen some nasty shit in my carreer. But this tops the list. I use CDNs for everything, because the price p/GB is much better, even for small sites. I would like to see how this scales up for even bigger websites... CPU usage, ouch...
When I said "I can see how maybe they could be useless to you.", that's because I instantly know what kind of programmer you were. You're a low level guy. I have a copy of "Algorithms in a Nutshell" (http://www.amazon.com/Algorithms-Nutshell-In-OReilly/dp/059651624X) but I never finished it. My favorit programming book may be "Patterns of Enterprise Application Architecture" (http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420). Neither of these books are language specific, but I don't think they could be further apart in every way. Both are very valuable and I appreciate that they both exist. There is a good number of reasons that you should maximize your use of the built-in PHP functions (http://webandphp.com/5reasonstomaximizeyouruseofPHP%E2%80%99sbuiltinfeatures). My book is an attempt to come up with a system that will help you learn all of the built-in PHP functions by giving a realistic use case that could be applied in your everyday work. Being a PHP programmer, it is much more useful to know what functions PHP has for array sorting, than it is to know how to implement array sorting in PHP code.
A1: That code is only there to prevent errors. Adding the check for empty string would not really change anything and it makes for a use case with fewer lines of code. I can see that if you were expecting lots of empty string you could reduce lines of code executed if you had a check at the very beginning of the function that returned false on empty string right away. A2-1: When it comes to reports that display data over a time period and you have gaps in the data, the best thing to do is fill the gaps. What you fill it with depends on the audience and the data, in my use case I would just have text like "Missing" or "N/A". This often happens with databases where there was no value recorded on that date (like no sales on 4th of July) in that case it's not truly missing it's just that it implies zero. A2-2: Here is what I would do to show weekly sales using the data we have in the use case. I would take the week chunk and pass it to array_sum (array_sum will be in an up coming book) this will give the the sum of all the values in an array. You could display it at the end of each row like a sub-total. I hope that helps. Feel free to ask more questions.
On a related note, [PuPHPet](https://puphpet.com) now defaults to PHP 5.5
It looks great like a great resource with an in depth focus on one topic. I appreciate you don't want to look like a spammer, but sometimes in the coding community i think we are too modest. Its only $3 so i just brought a copy to read on my kindle during the commute to work. Great stuff mate!
Why should I buy this over reading the manual?
May I ask why? I'm on Windows 7 and really content with Vagrant.
Hey, up yours too, pal.
Only a special version of VM works, than after downgrade, it worked like two? times than kept crashing without a message... 
Please can you explain why? 
I think it's really cool that there are options for localized development environments if the time comes, but I have yet to be in a situation where I don't have a development server of some capacity at my disposal. I also come from a systems administration background so I may be a bit biased. What is everybody else's take on it? Do most use a VM to test on?
Thanks! Your answers make perfect sense.
I've only just started trying it; I'm still on Snow Leopard, and I don't want to risk exploding my machine, so it's easier and safer for me to use a VM to dev with php5.4 and 5.5.
Hmm.. Have you tried using render_esi and putting vary: cookie on the response from the controller to utilize the http cache? And making your own extension to inject the security context was faster than say {% include is_granted('ROLE_ADMIN') ? 'sidebar.html.twig' : 'login.html.twig' %}
I feel the same as you, I have quite a few different development environments at my disposal. One thing I did realize would be useful is that if I make a package or library and I want to test it in different versions of PHP that I don't have on my existing servers, it's a nice and easy way to do that without potentially breaking existing projects.
I think the manual does a good job of telling you what a function does. This book tries to tell you why you would use it. I also give use cases (which are like examples) for not only the function but also how to use all the parameters and options. Does that help?
The author is super sexy on that cover! Meow! 
You should have added syntax highlighting to the code samples; always makes code easier to read.
Systems guys will generally have a much easier time getting a dev server, but sometimes coders will find this easy too and I used to spin up VMs on an internal/external cloud cluster when I could. That's not as good as this though. With this, the vagrantfile is going to build your machine for you. It will be the same as everyone elses machine, rather than you finding a solution to do this yourself. Obviously you can automate your own dev servers, but is that as simple as keeping a single file in git? Will all the new guys/devs get access to their own dev servers, as many as they need, as soon as they ask, without waiting? Will the new guys be instantly familiar with your setup, is your process a standard setup that everyone should instantly be productive in? I imagine the answer to all of those questions is no but maybe you run a really tight ship and your setup is per project is as easy as typing "vagrant up". It's possible though I rarely seen it done. But if you're not working on a local VM, can you work on the train or do you always need a network connection? Basically, you can probably do it better and you might as well use the same tool everyone else does because you'll be able to hire people who are familiar with that. Vagrant is great, you should be using it unless you can argue that your way is superior.
&gt; In 100 lines, youâ€™ve installed several server tools Well, if you discount all the lines from the modules you used...
VMs are nice because you can make a snapshot, tinker with it and if you break things, just revert to the snapshot. And they are portable, if you do your development work on multiple machines, you can put it somewhere in the cloud and then download it locally when you need it. I'm in the middle of a weekend project to overhaul my development workflow to fully use git and vagrant. Vagrant is great and [Puphpet](https://puphpet.com/) actually makes it usable if you're a developer and new to it, but even with the great GUI that /u/jtreminio has created, expect some headaches + time getting everything running properly. Depending on how you deploy from dev to testing, you will probably end up having to make some fundamental changes to your workflow. But when you do get things working, and create a disposable development VM with 'vagrant up', it's kind of magical.
What are you using to read the book? I'm not sure how well it will look on a gray scale Kindle. I will talk to my publisher, they set the style of the book.
Thanks! I'll let my wife know someone agrees with her.
That's great! Let me know what you think of the book. 
Wow , that was great! Thanks!
Excellent points. I am a windows user most of the time, so just setting up a samba share out of the webroot directory makes short work of having to 'upload' the file I'm working on, aka ctrl-S. You can setup different php versions and their ini's in different vhost configs. So yes I see your point, but it can be achieved without having to install a whole new server. Makes sense if you're not very versed in apache vhost configurations. 
Everything I've read about clean code says that methods should only do one thing, so that's why I've strayed away from doing validation inside the method. Whatever is calling the method is responsible for sending good data, and any validation that needs to be done should be done at that layer, throwing an error of some sort before sending it to the method that is going to perform work on it.
I have been using Netbeans (for various unrelated reasons) for several relatively large projects and have been utilizing XDebug without any issues for about an year or so now. 
That you didn't have to write. Just as a basic Silex application can be written in less than 30 lines of code, there's still hundreds of lines that are being run through in the background that you do not see.
[Jekyll](http://jekyllrb.com/) is a static site generator, might be suitable for you. EDIT: sorry, it's not PHP, my mistake. Alternatively you could knock something up yourself without too much hassle. Get Laravel or CodeIgniter, add [PHP Markdown](http://michelf.ca/projects/php-markdown/) and for each 'page' just get it to read the appropriate MD file and output HTML.
Your comments form if broken so I'll ask here. Why did you create the password_hash functions as multiple functions in the global namespace? Surely at a minimum it should have been one static class i.e. Password::hash() / Password::verify() ? Don't really see how adding more functions to the global namespace is good for forward compatibility at all.
/facepalm I should have actually *read* the page I linked! I haven't used Jekyll but I was under the impression it was PHP. Fizl is probably a better option then.
That does look kind of hairy. Are there cases that something like the below wouldn't work for? (I mean, unless someone was implementing their own iterators from scratch). function is_iterable($a) { return is_array($a) || is_subclass_of($a, 'Traversable'); } 
I fight with that as well...especially if you're doing some really extensive validation. Sometimes I'll include a validation method in the class, then call that at the beginning of whatever's doing the work. I always liked the quote (Larry Wall, I think): "be generous in what you accept, and parsimonious in what you return." (Sounds like backward life advice, now that I think about it :) ) I've taken that to mean "your method should be able to handle whatever some dumbass throws at it without vomiting on everything."
I like puppet in production, which involves custom manifests for your specific service needs and using a puppet master. I think this tool has a great use case for PHP developers who are not skilled or have no interest in maintaining servers. It allows them to get up and running quickly. I would be concerned though if people tried to replace system administration with these auto generated manifests in production.
I actually was looking at the Amazon preview.
Don't get me wrong, jtreminio has helped a lot of developers get up and running. However I would liken PuPHPet to those CRUD applications such as those auto generated by the old symfony applications. Do they work? kind of, but useless for anything other than the most basic of use-cases. My experience is the same as yours rq60, if you do use an existing module and you have a decent sized application, you will need to have good knowledge of puppet and make the neccessary changes, there are limits to an auto generated manifest.
Thanks
FuelPHP has a decent Markdown engine
I'd give you reddit gold for that comment if I actually had money to spend on the internet right now.
Have an upvote. I don't understand why people would downvote you for explaining what happened in your case.
We use VMs so everyone on our team has the exact same work environment and we don't have to tailor our deployment tools or waste time having someone install solr for example on their desktop.
Yes we were using render_esi. We utilize caching at every opportunity. We wrote a handful of extensions to perform different things such as "You may also like" and "Customers also bought" and "Recently purchased" HTML blocks. Writing them all as Twig extensions gave us a huge gain in page load times. I'm talking about halving page load times. We didn't really have the time to investigate into why Twig was slower. It's possible that a Twig update has fixed our issue. This was six months ago now.
How about [Anchor](http://anchorcms.com/)?
I'd recommend Piecrust. http://bolt80.com/piecrust/ Has built-in Markdown processing as well as YAML for metadata, templates are mustache-like, and it's pretty good both for static sites as well as dynamic PHP hosting. Documentation is a little incomplete, but there's enough there to get up and running.
I've never used it for Markdown, only HTML -- but [Wolf CMS](http://www.wolfcms.org/) is PHP and has Markdown parsing automatically included. You'd probably have to get a plugin for the image manager, unless you're happy with the default file manager.
There's no reason not to learn it, certainly not out of fear. PHP sec is relatively simple for a small app. Essentially, anywhere there's foreign input being supplied, or foreign input being echoed out, you have a vulnerability. You also have a vulnerability in the way your passwords are being stored. Is it plaintext? Very bad. How about hashed with a little salt? Now you're getting somewhere. Your app is very unlikely to be hacked if you use some very well known precautions for these. Of course, as you sites get bigger, there will be a bit more to think about, but there's nothing to be afraid of. Even if you don't use PHP to implement your own credit card system (and honestly, while understanding it is great, you probably shouldn't write your own script for something that's been done well already) the more you know about it, the more you can spot vulnerabilities in others' code. The internet is littered with examples of high profile websites being breached because simple security protocols weren't followed. Grab a beer some night and take a read through these: [PHPass](http://www.openwall.com/articles/PHP-Users-Passwords) [PDO](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/)
Found those for you... http://stackoverflow.com/questions/15708638/xml-pagination-with-php http://pastebin.com/Mc3kbuvZ
You're not seedfeeder are you?
If I recall correctly you can use dokuwiki's parser standalone. It's a slightly different version of markdown but very similar if not identical 
[Phrozn](http://www.phrozn.info/en/) is another static generator in PHP similar to Jekyll
[Kirby](http://www.getkirby.com) is a file system-based CMS that uses PHP for the back-end on a clean jQuery UI. Markdown is used to add content. Super light-weight and even more versatile. Edit: I recant this, as it's not free. Apologies, OP.
Save yourself the trouble and learn C# or Java or Python if you want to do a desktop app. If you still want to go ahead with that, there's a couple of things, ranging from PHP-GTK to PHPDesktop. See this http://stackoverflow.com/questions/14114604/create-a-desktop-application-using-php for more info 
square peg meet round hole.
You're attempting to modify an automobile into a boat. Sure, it's an interesting project, but at the end you're all "Cool. I have a very expensive boat that took far too long to make and is only JUST as useful as a real boat..." Do yourself a favor, just buy a fucking boat.
http://i.imgur.com/miW7Hmj.jpg
This is real? Whaaaaaaat?
Thanks for the help everyone, you have convinced me to use Java instead.
Fair warning, Java isn't exactly a smooth road either. I've spent most of my career writing desktop applications and I still find Java's layout engine to be really confusing. My recommendation is C#. Thanks to the wonderful folks on the Mono project it runs on damn near everything.
&gt; HTTP/1.1 301 Moved Permanently &gt; Location: http://www.reddit.com/r/im14andthisisfunny 
Actually it's a general-purpose scripting language, to which most of your points still apply.
[Pico](http://pico.dev7studios.com/) popped up in my feed the other day and looks fantastic. Open source, fast, and simple.
Java? What platform are you developing for? If the answer isn't all-of-them-but-poorly then don't use Java. 
This is terribly horribly wrong: public function doSomething($string = "", $array = array()){ $string = (is_string($parms1) ? $string : ""; $array = (is_array($array)) ? $array : array(); You're not validating the inputs, you're completely *swallowing* potential errors! How do you know if you have a bug if your program continues to run but incorrectly! It should typically fail as soon as possible. If not checking the inputs causing your function to fail immediately then you don't need to do anything. Otherwise, test the values and throw an exception. But either way don't just have accept any value without error. 
You should have this in your code: function errorToExceptionHandler($errNo, $errStr, $errFile, $errLine) { if (error_reporting() == 0) { return; } throw new \ErrorException($errStr, 0, $errNo, $errFile, $errLine); } set_error_handler('errorToExceptionHandler'); One error handler to rule them all. 
And in addition to that: If you are careful and validate every input and sanitize output properly, you have eliminated about 99% of the more severe security problems. I know a lot of devs which never produced a security vulnerability in their careers.
Amen.
I would not use php for desktop either. However, you can use your web development skills for a desktop app by using javascript : adobe air or node-webkit are pretty easy to begin with.
Yup. There's been a push these last few years for a desktop focused implementation of PHP. Even as a full time PHP engineer &amp; evangelist, I'm not sure why. You don't use a screwdriver to drive in a nail...
It takes some time to adapt yourself, read Twig documentation/tutorials, but Twig does have all the logic you need in views. I'm looking forward to see Twig implementation in Magento.
I can believe in using Java for Android or web development, but you're going to have to try harder to make be believe that its got a viable desktop development story.
ruby ruby ruby ruby lalalalalaaa
The dollar sign actually goes *before* the amount, not after. (Note that some Frenchies in Canada do not follow the same convention as the rest of the world. If you are a French Canadian, please do not bother replying to this auto-generated message.)
Just to answer the actual question posed here, you can use [Titanium Appcelerator](http://www.appcelerator.com/developers/) to make an 'app' so to speak. It wraps all the dependencies and what-have-you into a neat little bundle that lets you design whats essentially a website into an application. It's up to you to make it look native though. It's also aimed at tablets and shit but you can build a standard PC app with it as well.
I made a couple of pretty powerful applications in php-gtk back in the day - honestly it's the fastest I've ever been able to write the business logic for a desktop GUI app. Memory stayed at .NET-like levels at all times. With the addition of threading and a drag+drop GUI editor php as a desktop language has fuckloads of potential 
Just to piggyback on your original question, is it possible to pack an Apache+Mysql+PHP application into a portable exe? I just finished a project where the data entry was done in an intranet web app (using XAMPP) and the output (for TV Graphics) was done in Unity3D. More than half the deployment time was spent installing and configuring XAMPP, and I was required on site to do it. It would have been nice If I could have just given them the web app as a stand-alone preconfigured package.
That is pretty insane. 160k base? You work for a bank? Most banks as far as I know don't use PHP, usually using java or .net.
I know the feeling, believe me. Unfortunately, PHP is moving rapidly to a place where command lines have become routine. I'm not a fan, myself. But that's just me. I strongly recommend Composer. It's become a best-practise workflow for PHP, and it really is pretty good. The command line stuff is simple, and if you want I can give you a plain-english runthrough of what it actually does.
Basic knowledge of HTML/CSS(2/3)/Javascript, basic knowledge of the array_* operations, the sort operations. the correct library to use for databases *cough* PDO and the why's behind it. Knowledge of SQL injection &amp; XSS. CSRF tokenization. Knowledge that you're using a good IDE--this usually helps devs write less error-prone code. I think usually getting hired is often times showing enthusiasm for your craft during your interview and how much enjoyment you take doing what you do. At least to me, I believe that is why I've gotten hired in the past. Failures have usually been attributed to being asked offbeat questions about non-domain-specific stuff that may have entered into mathematical challenges, or even into how you don't socially drink etc. Keep it as professional as possible. Dress casual. Software companies these days, especially if they are big-blue, they will let you know what atire to wear, but don't go in to your interview in beach-wear sporting a wife-beater w/ your chest-hair dangling all man-like out of your shirt. Also biggest turnoff I think, atleast to new employers is to not show arrogance during an interview if at all possible. This can foretell that you may not be a good team-player, or be a good teammate when it comes to working with others who may know less than yourself and helping bring up the whole team as opposed to helping only yourself. Especially if you are a junior developer. 
APC is not a bad api, unfortunately it's lived beyond it's maintainability lifecycle. the zend optcode cache is replacing APC for code-optimization. This is well and good, however, one of the most useful parts of the APC library was for the user caching, which is far faster than memcache. If you are in a distributed environment, and have many nodes, it might be more suitable to use APC user cache than a memcache solution due to cost contstraints. More nodes with minimal amount of ram vs super expensive node for memcache distribution. Also you will rarely see issues with apc not loading a cache where memcache may fail on a page-load due to timeouts. APC uses the shared-ram resource of apache or process via php-fpm proc manager.
I played with it a few years ago. At the time it seemed like it might be a decent way to make a basic desktop interface to a web application but with HTML5 and other advances in web technology it seems kind of pointless now.
[Jeff Atwood on Ruby]( https://mobile.twitter.com/codinghorror/status/301763927434461184) 
When developing anything, always ask yourself if you're using the right tool for the job. PHP is awesome for web applications...but be weary of using it for something it's not used for. PHP is similar enough to C/C++, Java, C#, etc that you shouldn't have a hard time learning one of those languages to make a desktop application. Java was my first language and I was building fairly complex desktop apps when I was in highschool. C# is so easy because you can use XAML to create the interface.
Also, I believe you can make desktop windows 8 apps with JavaScript and HTML 5 nowadays.
If all you've got is a hammer, every problem looks like a nail.
Use kirby: www.getkirby.com Here's the finished page: http://www.incendiary.ws/kirby/towns/city-moat Here's the markdown source: http://www.incendiary.ws/kirby/content/01-towns/03-city-moat/page.ktxt
[TideSDK](http://www.tidesdk.org/) - It's been open sourced and handed off.
&gt; You don't use a screwdriver to drive in a nail... Oh you'd be lying if you said you never have though, haha
Correct. But OP specifically stated how to build a dapp using PHP 
You can do general purpose scripting with it but that isn't its intended purpose. At least that's according to Rasmus Lerdorf the languages creator. **[EDIT]** [Here is the link](http://www.youtube.com/watch?feature=player_detailpage&amp;v=mQ-O9W4lks8#t=1060s)
Why would you want to do that??? Use C++ or Python with Qt, multiplatform GUI lib.
Make sure you're familiar with how to do pagination. I had an interview and they asked me to write a simple pagination script to show ten pages with ten numbers on each page. 
&gt; TideSDK AHA! I wondered what tidesdk was - saw it in April, but didn't quite make the connection, and it wasn't that obvious from poking around there. Thanks for the notice!
Yes, but you will struggle. **Native PHP Desktop** Most of the solutions support php 5.2 or 5.3, but not 5.4 or 5.5. I assume the need to use PHP in these types of environments has died out which is why most of these solutions stopped active development since 2010. Threading is very important and PHP doesn't have great support for it, PHP can parent / child process forking, but limited to posix based system (not windows). Without threading it makes UI hard to develop. There has been a threading pecl for some time but really buggy, and linux only. Even with PHP GTK you don't have threading, just an event loop. * **[PHPGtk](https://github.com/php/php-gtk-src)** - Last binary was for 5.3, building binaries in PHP much less phpgtk is a huge pain. Building on linux is easy compared to windows. * **[PHPQT](http://sourceforge.net/projects/php-qt/files/stats/timeline)** - Again you need to build the binaries. * **[WinBinder](http://winbinder.org/)** - Very outdated, last build was 2010 **HTML PHP Desktop** There are so many things you'd still want, Apache, MySQL, Gearman, Redis, etc? These need to be coupled with your application and all ran. The obvious issue are existing ports being used, and how to recover crashed processes. This is the better route to go, but still a pain. On linux you can use something like supervisor, windows you can use services. Each additional system you add the bigger your application is, for example mysql is 150+ MB when packaged, while PHP is already 20+ MB. I made a small project, still incomplete but targeted for windows, and primary purpose is to find open ports and allow you to run the processed based on those ports. [Relative-Deployment](https://github.com/joseph-montanez/Relative-Deployment) * **[TideSDK](http://www.tidesdk.org/)** - riddled with bugs, use to be Titanium Desktop, stops at PHP 5.3 support. Still a great thing, just sad that development had stopped. * **[Adobe Air](http://www.adobe.com/products/air.html)** - Not really php specific, but you can call command lines to a PHP executable. Downside is it requires Adobe Air on each computer, and discontinued linux support. * **[XULRunner](https://developer.mozilla.org/en-US/docs/XULRunner)** - Mozilla's attempt at Native UI, but you can wrap a &lt;browser&gt; tag and spin up a local webserver. So much like Adobe Air, you get a targeted browser. Also as long as you package XULRunner, you don't have a a requirement like asking each user to have Adobe Air. Plus if the user has Firefox, then they don't need XULRunner. The biggest issues with Desktop development and PHP is the unavailability of binaries beyond linux. There is [Windows PECL Binaries](http://windows.php.net/downloads/pecl/releases/) but its still a very limited set compare to what is on many linux distros. Also threading is too important to forget about. You can try using shared memory in PHP [Share Memory Libraries](http://php.net/manual/en/book.shmop.php) to communicate between processes, but in any language its still a very hard alternative to program with. Also the performance of shared memory between different each OS is unreliable. I can promise you corrupt data, if not crashing processes. Your best bet is probably python, and is the best example of a language that has everything you need to deploy an application. For example cx_freeze lets you package your application as a static build. On top of that python can compile and run its own byte code, .pyc so your code is safe. PHP has similar byte code compilers but again doing so makes you have to go through unnecessary pains.
I'm only restating what Rasmus said in a talk I went to a few weeks ago. Honestly I would trust the language inventor more than anything else.
i know... i don't like ruby myself, it was just in my head... this song -.-
I've went down this route with my project [Relative Deployment](https://github.com/joseph-montanez/Relative-Deployment), you use a json configuration file and the compiled exe to start everything up. It's helpful, but not that great, since you get a terminal window show up, and closing something like XULRunner wont stop everything else. Effectively the process is, you download the exe as a stub, use a resource hacker to add a custom icon, and rename it to whatever you want. Then create the command lines in the configuration file. You still don't get a single exe file, but at least that is all they need to click on to run the application. You download a better example via [link](http://shabb.com/relative-deployment/relative_deployer.7z) and then look in "examples" folder.
I agree with "Learn another language that does this better." . . . but then you follow up Python? /me confused . . .
I recently did something similar by having a menu builder service, that dispatched an event. Other bundles hooked into the event and added their menu items in with a specific priority. It also made use of SplPriorityQueue rather than going with something bespoke for the ordering. Seems to work quite well.
[PyQt](http://wiki.python.org/moin/PyQt), [PyGTK](http://www.pygtk.org/), and so forth. Especially PyQt, as Qt 'blends in' and integrates with various desktop environments and operating systems better than GTK. I presumed he wanted to know another scripting language (rather than a more complicated compiled language like C++ or Java), so I presented Python.
There might be people who missed it, since the solution was commented out. :-)
Mac is officially a Unix system; the differences between running PHP on it and a Linux system are quite small. There is absolutely no reason to install a VM if your purpose is just to learn.
Last time I tried it they weren't pushing their desktop publishing capabilities but it was still there. I don't know though, it's been at least 6 or 7 months since I've played with it.
In case you mixed the [reply in this very thread](http://www.reddit.com/r/PHP/comments/1h3vgo/backwards_compatibility_is_for_suckers/caqtxbn), I blogged about it here: [Designing The Simplified Password Hashing API](http://blog.ircmaxell.com/2012/11/designing-api-simplified-password.html). Basically, there were many reasons behind it. 
The [Zeus IDE](http://www.zeusedit.com/php.html) supports a host of languages including PHP.
Are you trying to connect before you've defined the variables in your connect string?
$con = mysqli_connect('localhost', 'my_user', 'my_password', 'my_db'); E: mysql_connect is old, you should use mysqli or PDO
Let me put the variable at the top...
&gt; $con = mysqli_connect('localhost', 'my_user', 'my_password', 'my_db'); Thank you so much!!
Actually now it's saying I have an error, I used it on my test host, I switched it over to the actual one and now it's giving me an error
what is the actual error? That mysqli looks correct.
http://i.imgur.com/aSDNpUs.png and http://i.imgur.com/GoiRDdn.png
It's using mysql_connect... :) Aside from that you've got a lot of really messy code here. For a start... **Do not use mysql_connect.** It's out of date. You're doing it wrong. Seriously. Wrong. Use mysqli at least, PDO preferably. Mysql_connect is no longer available in many installations, and should not be used. Secondly, you need to have your variables declared BEFORE you use them. Thirdly, you have no errors set up. So you can't see what's happening. Fourthly, your spacing is terrible. This makes everything harder to read. Fifthly, you're declaring a variable, then hardcoding it anyway. $host='184.168.194.134:3306'; $usr='myusername'; $db='mydatabase'; $pass='myp@ss'; $con = mysql_connect($host, $usr, $pass) or die('Could not connect'); mysql_select_db($db, $con) or die('Database could not be selected'); That will work better with one exception: **do not use mysql_connect**.
That error means php couldn't connect to a mysql db at that IP
It is old but simply saying to switch to mysqli doesn't fix this issue. It just means that in 3 - 5 years when he upgrades to PHP 5.5 (he's using Dreamhost so this is a realistic timeline) he won't have to rewrite.
Just like you can store passwords in plaintext with valid code. If you're using mysql_connect, you're exposing yourself to a lot of potential problems by using an old and inferior solution. Yes, you *can* use mysql_connect but mattaugamer is right that you **shouldn't**.
 $pdo = new PDO( 'mysql:host=hostname;dbname=database', 'username', 'password', ); $sth = $pdo-&gt;prepare('SELECT id, user, pass, email FROM users'); Then just use prepared statements to execute and pull information from the database. If you feel like getting snazzy, you should use [Flight](https://github.com/Xanza/flight) as a framework. It makes PDO pretty simple. Here's an example of something I whipped up really quick using Flight: https://gist.github.com/Xanza/5898981 Keep in mind, it's pretty rough.
You know there's sites for this sort of thing that aren't reddit.
try /r/forhire 
It's a technique and methodology that is very much out-of-date. It's deprecated, superseded, and not recommended for a number of reasons. This includes that the methodology of it is "old school" rather than the more modern OOP styles, the fact that the methods are needlessly tied to a specific DB vendor, the fact that mysql_ methods **do not support prepared statements** and are thus less secure by nature, the fact that the extension is **by default disabled**... There is absolutely no way in which they are optimal, there are many ways they are a very poor choice. I couldn't think of a better definition for "wrong" in IT.
I don't think mysql isn't used at most databases anymore. The latest release of PHP in which mysql is stated deprecated just got released a few weeks ago. The only thing PDO can do better than MySQLi is the multiple driver support. And if you are using mysql you can ignore that. But if you want to start learning one of these PDO would be the better choice for the future.
No.
Yup, so either OP has the IP address wrong, the database isn't running, the database is running on a non-standard port, or the database he's trying to connect to is configured to reject connections from his server's IP address range. That last one can happen if you're trying to use your free database from one cheap host from another cheap host that didn't come with a database, in order to save money.
To generalize what you're saying: It would be great to have these primitives operate on `Traversable` and produce a new lazy `Traversable` (could be an iterator or a generator) that only fetches one element of the chain at once. An example of how powerful this is are is Clojure's lazy sequences. EDIT: You inspired me to make a small [proof of concept](https://gist.github.com/igorw/5899819) of lazy map/filter.
One thing I noticed is that `to_html_list` is very specific and contains a lot of boilerplate looping. If you make a more primitive `map` that operates on `Traversable`s then you can just do: function to_html_list($input) { return "&lt;li&gt;".$val."&lt;/li&gt;"; } $html = map('to_html_list', $data); This decouples the transformation logic from the iteration logic. Here's a [proof of concept](https://gist.github.com/igorw/5899819) for higher-order `map` and `filter`.
I'm in the same boat. I can tell you there's a VIM plugin, which is more-or-less usable, though far from ideal. [https://mutelight.org/minimal-guide-to-debugging-php-with-xdebug-and-vim](https://mutelight.org/minimal-guide-to-debugging-php-with-xdebug-and-vim)
There's lots of things in the world that "work" but are still doing it wrong. You can use a sledgehammer turn off your TV. But if you are, you are doing it wrong.
Sort of off topic but have you ever tried using this setup with Laravel? I'm on 3 at the moment but will soon be jumping into 4. I assume it's the way the framework jumps around in the code and Xdebug is unable to follow but I'm also curious if there's maybe some configuration I'm missing in Xdebug to allow it to work. Essentially what happens is, the index.php file gets captured but no further breakpoints are ever found.
I have some time, send me a private message if you need some help. (5 years private enterprise experience, 3 years part time).
It isn't fix for the problem but I like to guide people in the right direction.. As he is clearly a beginner I think it's better to learn to use the right extension(s) from the start instead of learning the old ones first and new ones soon after.
http://learnxinyminutes.com/docs/php/
&gt; When regular expressions are overkill, just use this function that uses several times as many functions just to end up using regular expressions anyway ... fixed that for ya. I guess it was too long for the title field.
Or just [fnmatch](http://us1.php.net/manual/en/function.fnmatch.php)...
I misspoke when I said "moving towards an OOP structure", I wasn't implying that a static class is OOP. But it's much closer than global functions.
Just because you can doesn't mean you should. Using mysql_* is wrong and there are a tirade of reasons, you can either research and understand those reasons or you can accept the advice given. :)
Except that by using that you're automatically implying "\^$teststr$"... so it doesn't do any good when testing strings for matches unless you add \* to beginning and end.
If there's a test, ask if you can write pseudo code that way you can focus on demonstrating your overall knowledge, rather than PHP specifics.
Yeah, there's no way that blogspam written in Italian would have received 5 upvotes within 50 minutes of it being posted. 
I love the beta site design--*ESPECIALLY* the white space. Most of the white space naysayers have offered no reason whatsoever for their preference of information overload. On the other hand, the use of white space is based in real science: the eye needs white space as a rest; design principles, people...it improves readability. Click a button to get to the information you seek, rather than bombarding everyone with information overload. Nerds!
&gt; **Whatever is calling the method** is responsible for sending good data You mean another *method*? So the calling method has to collect, validate, and send the data? That doesn't sound very clean. If you just encapsulate the validation code in a third method, it won't clutter the code no matter where it's called from.
 protected $_bucketA = array(); protected $_bucketB = array(); protected $_bucketC = array(); protected $_bucketD = array(); protected $_bucketE = array(); protected $_bucketF = array(); protected $_bucketG = array(); protected $_bucketH = array(); protected $_bucketI = array(); protected $_bucketJ = array(); protected $_bucketK = array(); protected $_bucketL = array(); protected $_bucketM = array(); protected $_bucketN = array(); protected $_bucketO = array(); protected $_bucketP = array(); protected $_bucketQ = array(); protected $_bucketR = array(); protected $_bucketS = array(); protected $_bucketT = array(); protected $_bucketU = array(); protected $_bucketV = array(); protected $_bucketW = array(); protected $_bucketX = array(); protected $_bucketY = array(); protected $_bucketZ = array(); protected $_bucket0 = array(); protected $_bucket1 = array(); protected $_bucket2 = array(); protected $_bucket3 = array(); protected $_bucket4 = array(); protected $_bucket5 = array(); protected $_bucket6 = array(); protected $_bucket7 = array(); protected $_bucket8 = array(); protected $_bucket9 = array(); protected $_bucket_ = array(); protected $_bucket = array(); Oh, come on. If you want a container to store your objects/values and prevent re-instantiation, take a look at Pimple: https://github.com/fabpot/Pimple It's less than 100 lines of code.
Maybe I'm missing the point (and don't want to totally trash your work), but this really feels like a wrapper around array with some syntax sugar. If I wanted to store a very large amount of data per request I would be more likely to turn to memcached/Redis (even tmpfs/disk) for this task - rather than bloating a PHP process itself.
Valid points. The goal of the class is not to replace memcached/Redis systems. that would be bold, and futile. The utility is to use phpLC when: - You need to store large amounts of data (hundreds of thousands, to millions) for a particular process in your application without taking a performance hit in terms of access, worrying about setting appropriate expiry times, and/or having to delete these cached values once the script finishes executing - for any given reason, APC, Memcached, or any other caching system is not available in the current environment A basic example could be if you had a long running script that dealt with a large amount of fetched data that it needs to reference several times. You could use established caching systems, but they require you to provide expiry times. You could set a very high expiry time or none at all, but then you need to delete those values once your script is done or having lingering data using memory long after the script completes running. This isn't a use case for your average app, and phpLC wasn't made to be used for the average app (though it could be if necessary, of course).
I wish /r/PHP users would stop downvoting people they disagree with. (and reddit in general). I don't see how any of SkepticalMartians replies in this thread warrant a downvote.
[PuPHPet](https://puphpet.com) is written on top of Silex.
&gt; packaged, full-fledged SFTP client in PHP Lol
How so? If there's a full-fledged FTP client, how can't there be an SFTP client?
Look through Wordpress' code. They have a feature for you to supply sftp information to update your Wordpress install. There aren't any packages available for SFTP/SSH. You need to install the extension and write the wrapper yourself or use the functions from the PHP manual.
I know why it is better, I'm just saying it's not "wrong."
+1 This one doesn't require ext, pure PHP implementation.
The internal implementation of PHP array is a bucket hash table already, so building a bucket on top of bucket is not much of use. However, I do see the value of having expiration on in-memory cache tho. I don't really see the performance is better than plain array, do you mind to elaborate? See http://nikic.github.io/2012/03/28/Understanding-PHPs-internal-array-implementation.html Hashing key into bucket is a lot faster than using regex and put them into a finite set of buckets. Plus, Your implementation will have a lot of hash collisions.
It's not that there can't be...but you're introducing pain and suffering having PHP processes stay alive for the duration transfers, as well as possible security issues if you remain rigid in the belief that **PHP** is the language you *want* to use to transfer files over "**SSH** File Transfer Protocol". To give you an example of the differences, use telnet to connect to an FTP server over port 21. So long as your credentials are valid, you can feed it a few strings of commands to get to browsing files/uploading/downloading. It's really easy. Now try this and establish an SSH connection via telnet...it's not going to be pretty. That's what PHP essentially has to do to "mimic" SSH. Anyway, it's do-able, but if you want my honest opinion a really poor practice to implement so many abstractions just to transfer files. If you are going to use SSH...why not just use SSH? Rsync is spectacular, mature, fast, and secure for file transfers. The best method will vary depending on a number of factors and what options you have available to you.
No, this entire code concept it silly. While regular expressions can technically be fast they still have to be compiled on the fly. This means added execution time. The additional mass of declared buckets is silly as well. If they were really needed they could be dynamically generated at class construction. Even then this concept falls apart the moment a non-Latin alphabet is introduced.
I've used Yii with 2 big projects and it was a blast - the CRUD + gui generator you're talking about is a godsent - speeds up developement sooo much. Having said that, I've been looking into Laravel 4 and the speed of developement while writing medium-small apps is even better. Not saying that it's not OK for bigger apps, just haven't writen anything bigger in Laravel yet :) 
Just for the record first off, I live in South Africa here we do what ever job we can get and secondly the employer knows I have no PHP experience I am applying for a intern position.
hahaha oops, Thanks
That is a dam good idea. thanks 
Awesome!
Will take a look thanks!
 Thank you!! 
Thanks!
I've been using Yii for about 2 years and it's made it almost effortless to create simple websites quickly and more complex ones efficiently. Recommend DAO for data intensive sites, but ActiveRecord has many advantages if you're not overwhelmed by volume of hits. I can't wait for Yii 2.0 . I wonder if it'll be revolutionary... I admit I'm jaded as this is my first Yii Framework, but I'm really happy with it and everything I read about it, makes me glad Yii is my go to Framework 
TL;DR: Do it with nginx. 
This will break as soon as you try to store birth dates for anyone older than 43. MySQL DATETIME can be set to UTC, and between MySQL and PHP's `DateTime` class you can easily do calculations and timezone transformations.
Can someone give me a ELI5 TL;DR?
What happens to user generated content, like uploaded avatars?
I started on a project using the built in ssh2 functions and this is 100% easier.
Presumably they won't change or move, as they will be under a different root to the code that is switched over.
PDO is the standard API for interacting with databases in PHP. You really should use it, for just that reason.
Thanks for your advice. I wanted to set up an online file manager (which would simply SFTP localhost) for the benefit of people hosted on the server who can't work proper clients like FileZilla, but if it's impractical I'll just create a tutorial instead. Would a language other than PHP be better suited to this sort of thing? Something like Perl or Python?
To expand on #4, essentially when files are included via PHP, they are actually included via the full-path to the physical file, not via the symlink. This way, when you move the symlink to point to a new directory (a new deployment), any requests that are already in progress will continue to use the full path to the old deployment (therefore not possibly breaking any functionality caused by incompatible changes between versions), but any new requests coming in will use the path the the new deployment.
*You* make it do something interesting.
Small nitpicks here. As a Kohana developer I can tell you we intentionally kept templating out of our framework. We offer a view class which provides all the abstraction you would need. PHP is a templating langauge at it's core, it never made sense to us to recreate that with some unusual custom syntax. That said, third party modules exist for all the actual templating languages out there(mustache, twig, smarty, etc). Also the [benchmark results](http://systemsarchitect.net/performance-benchmark-of-popular-php-frameworks/) are not fair to the other frameworks. For example, both Kohana and Symfony have ORM. We have no idea which ORM is faster. It says kohana is faster on a basic static page load, but honestly how many people are doing basic page loads? How do we know the guy who wrote the benchmark didn't forget a performance based setting? Exactly what version of these frameworks did he test? FWIW, any framework you use will be "fast enough" Unless you're creating a site as popular as google or facebook, these benchmarks are worthless. If you are truly creating one of those, and this will really eventually matter to you, then you can add any sort of custom modification to the framework you need to cache whatever is CPU intensive... though I'd be willing to bet that kind of a performance tweak already exists in these frameworks along with a setting to enable/disable it. If one must chose a framework, find one that matches your own ideals, and has a syntax you enjoy. The rest really doesn't matter. 
Well said. Hell I am still using the Seagull Project lol. I have been looking at all the different frameworks for awhile now just reading about them and seeing which ones are most kept up to date. And it all comes down to which one of them is the style of coding that I do (or the closest).
Check out http://phpixie.com .It's very Kohanish =)
additional braces mean that that paerticular part of the url is optional: e.g. the above rule would match: /forum/view/1 =&gt; controller Forum, action: view, url parameter "id" 1 /forum/list =&gt; controller Forum, action list /forum/ =&gt; controller Forum, default action (in our case 'index' is default) Using brackets you get more flexibility
I've been using yii for a couple years on some huge projects. Unfortunately I didn't initially learn to use it correctly and only caught on to some huge time saving/powerful tricks in the last year. Rules in models are phenomenal, as is the chtml class, authentication, relationships and the general logic of it. I have never used such a powerful framework before and I 100% recommend it.
Actually I used to like Kohana a lot. I made http://phpixie.com as an updated "spiritual fork" of it. But I must say thatusing php as templating may have its drawbacks: mostly because of includes. Some template engines generate merged PHP templates (which means only a single file read). I've seen when people had about 100 includes in the templating only. It's actually very simple to do: foreach($buttons as $button) include 'button.php'; This would render all buttons in the buttons array. But the buttons.php file would be read from the disk a lot of times.
Sorry, my bad :)
So your preference would be to put the entire Symfony framework in the same namespace? All third party bundles in the same namespace? Just your entire application in the same namespace? What?
That isn't true. a read file is cached in memory for the life of a request, it doesn't go back and re read from the disk until the next request. I may be mistaken on where it's cached, but I'm pretty sure it's done at the OS level. *nix OS doesn't have the same file open locking that windows does. You can in fact delete a file that's open, due to the fact the file is in memory and isn't being read from the disk until the next process that needs it begins. Granted this may not apply to windows, but who actually runs php from windows anymore? Also kohana lets you include a view from a view... whether that is proper MVC or not is up to the dev to decide. foreach ($buttons as $button) View::factory('path/to/button',array('button'=&gt;$button));
FYI - Symfony and Silex have MIT license
PHP is a shitty template language, and a shitty language overall. I use a DSL to make templating less miserable. &gt; This mad dash to use DSLs in template engines is misguided Yes we should never strive to improve and accept a bottom line template engine, anything else is misguided. &gt; The only time a DSL makes sense is if you're taking on user input from an outside source that you have no control over. DSLs are used in all parts of software You aren't going to convince anyone with such moot points.
I wonder why the huge performance difference between Symfony and Silex. What makes Symfony so much slow?
&gt; PHP is a shitty template language, and a shitty language overall. The issue here isn't that php templates are particularly bad, it's that you don't seem to like PHP very much. Not liking PHP doesn't instantly make your points valid, but it's plain to see that you'd probably be happier with a different language. Nobody is going to fault you for using something else. &gt;Yes we should never strive to improve and accept a bottom line template engine, anything else is misguided. I'd generally agree with the thought you're trying to impart here through the thick sarcasm, but DSLs in template engines aren't actually improving anything. They're just adding an extra layer of complexity with no real gain. &gt;DSLs are used in all parts of software I'm arguing very specific DSL usage, not general DSL usage.
Is the file really cached ? Ive never seen that documented anywhere, ill run a quick test when im home
Kohana was a juiced-up version of CodeIgniter up until Kohana 2.x Kohana 3 is a total rewrite and it's nothing like CodeIgniter. IMHO it's a much better framework, in fact, anything is better than CI nowadays... 
Also, the comparison chart is a little bit miselading, becasue Kohana has CLI tools, it's called Minion
i've been seeing Laravel a lot lately
Have you taken a look at laravel? It has gotten a ton of momentum behind it in the past year or so. http://laravel.com/
Laravel is the best PHP framework I've used. It bears some similarity to CodeIgniter and is well-documented, but unlike CodeIgniter it has tight integration with PHPUnit, and is designed with newer versions of PHP in mind. It also has a decent ORM and migration support.
if you have too much work, your prices are too low. how much do you bill hourly?
Well, considering how big of a beast Symfony2 is, and the fact that Silex is a **micro** framework, I'm not surprised by the difference.
&gt; For a project that is single purpose and does not need to accept different database engines or anything, I think this level of abstraction is ridiculous. Yes you are correct, it is ridiculous. However, Symfony2 is not a single purpose framework. It has a lot of features and flexibility. So I guess it makes sense to use namespace in situation like symfony.
&gt; As a Kohana developer I can tell you we intentionally kept templating out of our framework. We offer a view class which provides all the abstraction you would need. PHP is a templating langauge at it's core, it never made sense to us to recreate that with some unusual custom syntax Thank you
Rightfully so, Laravel 4 is incredibly slick and has already gained a lot of traction.
You must be a "designer"
Not sure if its any help. But I wrote a basic PHP router. You can find it on GitHub: https://github.com/LiamChapman/Router There are some basic instructions. I haven't got around to properly documenting it yet. But feel free to review it if you think it will help. From looking at your post. It's hard to tell how your building your router. Post more code :) Also, try out stack overflow lots of tips in there! 
 &lt;?php echo htmlentities( $value, ENT_QUOTES ), 'UTF-8', false ); ?&gt; &lt;?= html\escape( $value ) ?&gt; {{ value }} The decision is up to you, but i know which one makes it easiest for me to visual parse a template file.
Symfony family? Don't see Laravel there.
For me the interesting takeaway here is the difference between APC and the new Zend based Opcode cache and how inodes are no longer used for referencing cached scripts.
https://github.com/bryannielsen/Laravel4-Vagrant
Composer just installs everything in to a /library folder. Run composer in the root of your project. It will also have an autoloader add an include the autoloader file somewhere in your project. Then just scp the whole lot over. Does that make sense? Note: On my phone
The terminology is a little disingenuous, but I think that because the standard library does everything needed to make a website, it counts as a framework for the purposes of the test. Note that Java, which requires additional components to serve web pages (I suppose technically you could write your own HTTP server, but that's a little unreasonable), do not appear as a framework. This is how it should be done IMO, as it gives us a good idea of what the performance penalty of frameworks over raw PHP. Which is mostly abysmal, which is disappointing. I would have thought that Nginx + PHP-FPM + APC would have kept the caches warm and minimized the effects of expensive frameworks since the PHP process stays running all the time.
That helps a lot.. I'll give that a try.
Set up Composer locally (it's just a [phar you can download](https://getcomposer.org/composer.phar) if you don't want to run the "install" script) and use it to install Solarium. You'll `require 'vendor/autoload.php';` in your application. Then you can upload everything to the server. If you really want to skip composer, you'll need to download [symfony/EventDispatcher](https://github.com/symfony/EventDispatcher) since Solarium depends on it. `require` Solarium and EventDispatcher classes explicitly or setup an autoloader. As for "why not Pear/Pecl", [Phil Sturgeon touches on it in this video](http://www.youtube.com/watch?v=ZUz8tfqxIT4), but I don't really know how solid his argument is because I've never really looked into Pear/Pecl aside from a few random things (mostly xdebug).
this is very cool.
That's because it's part of a DSL. If you're looking at a DSL for the very first time, it's kind of *expected* that you shouldn't know exactly how the syntax works. If you're looking at that PHP for the first time, I wouldn't expect you to know what that funny "ENT_QUOTES" constant is supposed to be doing, either, or what the fuck `false` is doing at the end. (If your answer is "read the docs", why was this a hidden impossibility when you made the claim that the DSL was non-understandable?) However *having seen a few templating languages in my time*, like most competent web developers, I can tell you that I expect {{ value }} to interpolate the value of `value`, and output it safely for the format of document it's appearing in.
It's because, if I remember correctly, the creator of the *benchmark forgot to include bytecode caching support for their php install.
do you have source on that?
Would be nice if the [original post](http://systemsarchitect.net/performance-benchmark-of-popular-php-frameworks/) was still up...
TIL that the Open Source License (Codeigniter) is proprietary, which was written by Larry Rosen, who according to wikipedia: &gt; He also served as general counsel and secretary of the Open Source Initiative, and advises open source companies and projects, such as the Apache Software Foundation, Python software, and the Free Standards Group. http://en.wikipedia.org/wiki/Open_Software_License Those proprietary licenses always ruining open source software!!!!
OK, so your logic here is that a DSL may be easier to learn. That's fair. I would counter that argument with PHP being more useful. If you're really worried about stuff like parameters that don't make sense (and really, you could use the "doesn't make sense" argument with anything - if reading documentation scares somebody, they're in the wrong line of work) you could easily abstract the calls in any number of ways - you don't have to invent a new language. It's overkill. htmlentities() options may not make immediate sense, but you can at least tell it has something to do with entification without ever touching a manual. Sure you expect {{ value }} to interpolate, but it's *still not very obvious what is being done to the value during the interpolation*. I mean, what if you get { value }, {{ value }}, {\*value\*}, {!value!} in the course of a single template. What do they mean? What filters or validations are being applied? Who the hell knows? Point is, if you're going to have to read a manual to figure something out, it may as well be the PHP manual. That knowledge is far more useful than any template DSL. Just look at the utter mess twig makes out of *date formatting*. {{ post.published_at|date("F jS g:ia") }} which is hitting the point of being simply nonsensical when the equivelent PHP is so very close: &lt;?=date('F jS g:ia', $post-&gt;published_at);?&gt; ...and then the twig documentation [forces you to read the PHP documentation anyway](http://twig.sensiolabs.org/doc/filters/date.html) in order to discover the format it uses. So much for not being exposed to php.
That's a fair enough response, and you're very fortunate to have that much demand for your skills in your area of the world. To be honest, if people are having that response, I really wish they'd say it to our face instead of making silly excuses. How else would you propose that I allow someone to prove that they aren't incompetent? Remember, I'm *only* issuing this task to people that don't publish code samples.
I wouldn't really change much. Despite my personal feelings that almost any use of OO in the above is wankery, it looks fine. Don't force it during the interview because then you're just wasting everyone's time by bringing in people who can't complete it. Just count yourself lucky that the filtering is working.
My main concern with giving them a flawed copy of the code is that it might not really let us get a feel for what *their* code is going to look like. A lot of people are *really* good at quietly and surgically changing code to suit their needs, but we've found a lot of them that do *only* this and can't really design things on their own. We actually tried moving the test *up* from after the first interview to before the first interview to see if it impacted the flake rate. Still a bit early to tell. As edited into the post, we're also likely to just move the entire thing (or at least the first two bits) to happen during the interview itself.
I think you would find most will flake since this is just asking too much of a coding test for someone applying for a role - rather they will just move onto one of the other opportunities offered on other job boards. &gt; Between the phone screen and the in-person, we issue a coding task if the user doesn't have any published code samples. I would be sticking to this, looking for people that have GitHub/Bitbucket accounts and actively contribute rather than this long winded test.
&gt; Are my expectations too high? Is this task really that demanding? No. Is your company really that good that I should give a shit about completing your tasks?
We have a thorough interview process that weeds out the dingbats and fakers very quickly. If we get someone in that writes sloppy code, we yell at them until they stop being bad. Don't over-think it, writing software isn't that hard--find someone adequate to do the job and hire them. The cost of missing market opportunities with your products is too high.
I would also tell you to get bent and take one of the other ten opportunities available. Technical interviews rarely produce quality developers. I always felt these types of questions were just a way to look down at other programmers. 
Ah, but in our case, our product is the ERP/CRM/CMS that *runs the business*. Getting it wrong doesn't just piss off customers, it can actually produce a measurable impact on the company, in both time and money. I suppose part of the problem is that we've been able to be picky in the past. We can't be picky this time, yet we're still in that mindset... We've never had to let a developer go due to bad code. I'm not sure what I think about needing to do that...
I dislike coding tests. If you want me to code, pay me.
Yes it is cached as long as you don't use a different relative URL to access it
the test doesn't seem too hard. Are your wages high enough to get people to really care enough vs something easier to apply to?
^(edit: I hate to be *that guy*, but please be sure to review reddiquette before downvoting me further on this one. All it does is hide the rest of the comment tree, and that's not productive.) We actually ended up implementing that rule because of me. I was hired seven years ago, and I used an early dev version of the Zend Framework in my test. They'd never really seen anything like it, and had to install a newer version of PHP just to get my code running. They were impressed by my initiative, but weren't sure how to actually judge my code. In the next hiring round, we decided that asking the applicant to forego third party code would give us a better idea about their *coding skills* as opposed to their knowledge of a specific framework that we may or may not actually use.
you want to see something actually useful?.. One of the things you didn't mention is did you give these people a list of data?.. Something you wanted them to translate into a database and to make use of some dataset?.. Coming up with a dataset at least for me is the most unpleasant part of your whole exercise. Beyond using ajax without a framework, that is preposterous. Using XHR manually just shows that you have knowledge of the main API, but usually when you are building applications / utilities, your objective is to use your time and mental focus to get tasks done within a timely fashion. If you have the knowledge to use jQuery.ajax() method or YUI/Dojo/prototype etc you are competent enough to use XMLHttpRequest. Building a facade pattern as elegant as jquery on the other hand is a totally different story. Of all the libraries to use though, what made you guy's think to use prototype? Even after it's general dimise. It has fallen wayside during the last 3-4 years as an inferior library to jQuery and other utility libraries such as underscore which supplement much of it's shortcomings. Also lets not forget that as browsers have gained more functionality prototype has actually stood in the way of users using jQuery &amp; prototype together. Granted there are noConflict() mechanisms for jQuery to play with prototype, but it's a very greedy library. If you use prototype today, it will actually interfere with JSON.stringify().
There are a lot of really bad webdevs out there, but this kind of overkill is more likely to chase the good ones away for more laid back companies. Simple things like asking them to draw out a database schema on a whiteboard or solve a single problem in PHP or JS while in the room with you achieves the same thing in far less time. This also allows you to follow their train of thought and problem solving process (and weeds out the CTRL+C/V webdevs). Or if you are still adamant that you need to see their code before you hire them just make published code a REQUIREMENT.
Agreed 100%. And it's counterproductive, those types of questions will drive away the good developers. 
&gt; One of the things you didn't mention is did you give these people a list of data? The test as summarized here excluded stuff. We ask the user to either create a small set of fake data or use things from their own collection. &gt; If you have the knowledge to use jQuery.ajax() method or YUI/Dojo/prototype etc you are competent enough to use XMLHttpRequest. Demonstrably false. Hang out on Stack Overflow for a while if you want to be depressed. :) &gt; Of all the libraries to use though, what made you guy's think to use prototype? It was picked back in 2006 before jQuery took over the world. We have a few big chunks of *very* important code that are inexorably tied to it. A complete redesign of that code is already in the pipeline, and we'll probably make the switch to jQuery at that point. jQuery *isn't* the best, but the huge variety of decent-quality plugins make it a no-brainer.
I think there are much faster ways to weed out undesirables. Ask questions like (just a few examples, not by any means an exhaustive list): * What is inheritance? * How is inheritance different from encapsulation? * What does O(log N) mean? followed by this if they get it right: * What is an algorithm that is O(log N)? * What is dependency injection, and why would you use it? * What is an ORM? * Why does floor((0.1+0.7)*10) equal 7? * How would you store a date/time in a database? * How would you encode a monetary value in a database? * What is a unit test, and why would you use one? Weeding out the horribles doesn't have to be a very time intensive process. After about a dozen or so questions like that you're going to have a very good idea of whether or not they know anything about anything. If you want a more thorough idea of how they would approach a problem, just get them to explain how they'd solve something. Writing code on command during an interview is nerve wracking even for people who know what they're doing. You shouldn't be concerned with writing code though, you should be concerned with how they approach problems. Save code review for their trial period. After a few weeks it should be pretty obvious if the code they're writing is up to your standard. If not, let them go. Keep in mind that how much you pay has a big impact on things. You won't get experienced rockstar applicants at a codemonkey wage. Adjust your expectations accordingly.
Our wages are competitive (up to $100k for low-senior), but we've been hesitant to publish numbers. A possible problem is that a lot of our leads come from recruiters. Because of the way our budgeting works, the effective yearly wage for a candidate found through a recruiter has to include the finders fee. Around here that fee is 20%...
&gt; Or if you are still adamant that you need to see their code before you hire them just make published code a REQUIREMENT. I really want to be able to do this, but so far only two or three candidates have bothered. Thank you for your other feedback, we're almost certainly headed in that direction now.
&gt; Are you hiring through a recruiter? Of course the candidate will not want that confrontation We did have to get recruiters involved, yes. One of the recruiters started asking really good questions about the test, why we have it, how we judge it, etc. The other doesn't give a damn. You can guess which one we prefer working with... &gt; A coding test that takes less time. At our office we do a small coding challenge [...] It's worked very well for us. Would you be willing to share the general gist? &gt; Do you honestly care about inconsequential things like whether they use jquery or prototype? A little bit. We care more about knowing something *other* than *just* jQuery. If you know one, the other isn't going to be hard.
ye-e-s. I think this is important. An afternoon is not 2 hours. I would not be surprised by 4. (7 is out though :) ). The test itself is pretty epic, each of the pieces are fairly simple. I'd have to work out the xmlhttprequest solution because I've been relying on jquery for so long.
Has it produced excellent talent in the past? It sound to me like there should be other ways to find competent people who you can then train to work as you'd expect after they're hired.
Sounds more like the judges shouldn't have been in the position to judge if they couldn't look at code that wasn't in their own framework. Exact programming accuracy shouldn't be the goal of a coding interview, but rather the concepts associated with the problem being solved and how they solve the problem. Most companies will accept pseudocode for answering these kinds of problems. Dictating that they must have a runnable application without using any third party libraries only makes the task arduous and irrelevant to what they have been doing and would be doing if they got the job. The best developers are lazy by nature and wouldn't put up with a test like this, especially since this is such a simple (but relatively time consuming task) that they would have repeated over and over throughout their career.
We've never hired a dud. We've hired people that didn't end up being good fits for *upper management*, but never someone that couldn't code at the level they were hired to code at. It's pretty clear that either the test is working too well or it isn't working at all for this round of hiring, with regard to filtering for competence.
If you've been giving this test for seven years, you've got way more statistical evidence than I do. Given that, do you seriously expect that this will be a two hour test, though? That expectation alone would make me run. It's not hard - everything you've outlined is strictly junior dev level. But the time investment if you're going to do this right - and as an applicant, I'd be wanting to show you code ready for testing before deployment - is ridiculous. Based on that alone, I would expect to be working death marches.
&gt; To be clear, nobody has ever "passed" the test (not even me!), because we aren't looking for pass/fail. We're looking for people that think the problem through and design sane code. The way that their schema is designed is a huge tell. Potential candidates don't know exactly what you're looking for and most developers need an end goal. You can't expect someone to want to attempt it if they know they couldn't fit basic criteria. Not to say your test wouldn't work but by the nature of the question, you're already barring a large number of people from even trying. People that would rather their first experience with you not be seen as a failure to complete a project within an agreed timeframe. Give them something a little more sane for 2 hours worth of work but still look at the points you were checking for. Way less stressful and you'll get the answers you were looking at already. This isn't a career choice for someone who would spend any deal of time doing something in a super huge rush all the time, i know i wouldnt want that.
I'm curious, did you point out any of the testing criteria BEFORE the test, or is this kept entirely hidden, and only used for evaluation afterwards? If it is pointed out BEFORE the test, and they still failed at it, then you're getting some pretty shoddy coders. If it ISN'T pointed out before the test, then you're not properly evaluating your candidates. You're giving them a *very* rudimentary set of instructions, likely no sample data sets to work with, and a time constraint. That is going to generate sloppy code done in whatever method they are most comfortable with (likely what they've most recently been doing, if I've been working with procedural code for 3 months and someone tells me to write them some code, it's going to be procedural code, even though I'm fully capable of writing OO). You're going to get little to no commenting (commenting, especially in a readable way, can be pretty damned time consuming, I can often write a function faster than I can explain what it is doing to a novice). As well, jQuery is a fair bit more popular than Prototype, so you're going to likely be getting people who's most recently used library is jQuery, and they're going to find it easier to write in that than in Prototype. If you say "preference for Prototype" but not "requirement for Prototype", you're going to get jQuery more often than not. Added onto this, what is your starting salary offer? If it's not stated up-front, or not on the HIGH side of the average range for the position, I think most people would just flake because, frankly, when I see tests like this, with tonnes of restrictions and expectations (and I bet you're wanting someone with a BSc in CS as well!), I can almost guarantee the salary is going to be BOTTOM end ($30-$40K/yr range), which isn't worth my time. If you're up-front offering $120K+/yr and you're still getting half-wits and incompetents, then maybe you're wording your position poorly?
I'm really confused on why you're getting downvoted.
I might need to tweak the wording on the summary. We allow jQuery and all other libraries that do XHR, we just discourage jQuery in favor of *anything* else. The wording in the actual task is more clear about this.
I've never been hired to just be a coder (I did some work for my current company earlier on but I'm way tok good at sales to waste my time coding) but personally I wouldn't want to have to spend a couple hours writing code for people for each interview without being paid. Even if it was just 1 company, I'd opt for other opportunities. You're not in they Bay Area are you? Just curious because I was trying to develop a CRM for my own company for a long time in my own time but eventually started using Zim wiki to track everything which works great. Every CRM I've tried sucks so I've got a lot of opinions on how they should be designed because all the ones I've used are way too slow for a fast paced sales environment where you constantly have calls coming in.
Honestly I do not see anything to difficult in your code request. I think the tough part for me would be loading the tables with sample data. I hate data entry. Whole reason I have a great program for organizing all my dvds yet never really used because I have way to many frekin dvds to enter. 
If a book can have multiple authors and publishers, then your questions don't make a whole lotta sense. 
The market isn't that crappy for the people you're hoping to find.
Exactly, that's the whole point of a probation period.
Unfortunately, this is very much rooted in CS theory rather than actual practical coding. To be perfectly honest, it doesn't *matter* whether a candidate knows exactly what "O(log N)" means and whether they can come up with an algorithm using it - it matters whether they can complete a practical real-world task. There are great coders out there who aren't book smart - I'd rather see someone actually create something real and tangible than explain bubble sorting or b-tree searches to me. It's way more important in my eyes to be able to explain what you're doing and why you're doing it. If that involves algorithms, sure, no problem. If it doesn't and a candidate can explain why they're using a given approach, they deserve credit too. I wouldn't use questions like the above to weed out candidates for a CMS-type job.
&gt; It sucks but its part of managing a team. In fact, thus might be the crux of your inability to hire. I think there's way more truth there than you might realize. Thank you for helping *me* realize it.
About a year ago, after 5 days of ping-ponging with a HR flunky who kept demanding code samples, I finally told some company who seemed interested to hire me to go fuck themselves. And they were located in a lousy area where I would have had to bring my lunch.
If it runs the business, do you put the business logic in the database? (Hard to do with MySQL and it's lack of triggers...)
These type of tests are horrible at picking good developers. All you are going to get are people who are good at taking tests. My preference for finding good PHP developers are to ask them what they hate about PHP. A seasoned developer will have a laundry list and people who aren't so good with PHP will have a hard time naming a lot of them or try to pretend PHP is the greatest programing language ever written.
Na, we're up in Seattle. Our thing is a sorry excuse for CRM. None of our salesfolks have ever worked with "real" CRM before, so none of them really know what it's all about... and they steadfastly refuse to change *anything* in their process to, oh, I dunno, actually document their incoming calls and customer conversations in anything *other* than email. We just get BCCs of each outgoing mail and attach it to the customer account. It's freaking *infuriating*. We recently gave our systems analysts more political teeth, so we hope to crack that nut next year...
Just out of curiosity, what does this job pay?
I spent 12 hours applying for mine. And for the job before that i spent a complete weekend. And for a job i turned down i spent another 10 hours. Sorry, if you do sub par assessment, you get sub par people. He's completely right. CV's do almost always lie, code doesn't. I don't know in which country you live, but in germany this kind of assessment is absolutely normal. I would become suspicious if the company i'm applying to would not test me to the shit if i'm worth it. Also, this gives an opportunity to people who aren't good at selling themselves. I know a lot of great coders whose CVs and applications are absolutely horrible. With a test like this, you are very likely to find the gems.
&gt;Not having published code - even if it's just on github - is usually not a good sign.. As someone who is looking to move on from my current job (some bad decisions on the business side have led to my hours being cut), I find this quite disheartening. For my current employer, I have built a custom shopping cart with PayPal, USPS &amp; FedEx API integration; an order management system; a pricing system that scrapes our supplier sites, as well as several of the sites on which we advertise to keep our prices competitive; data feeds for Google, Bing, and a couple of other sites, and a bunch of other automation scripts. I have also delivered a number of websites (side projects) with some custom functionality beyond what the popular CMS platforms offer. Long story short, I can deliver a product. I have exactly 0 published code on github or any other sites. None. Why? Because my work is for clients or employers who don't want to give away the code they paid for. I understand that I can work on some open source or personal projects to get some work out there, but honestly, I just don't have much time outside of work for that kind of thing. So my resume contains a description of my skills, and links to a few of the projects that are most relevant to the job being applied for. No calls or emails so far. I have been doing this kind of work for almost 13 years and can't seem to get anyone's attention. To be fair, it could just be my resume, but from what I have read here and in some of the job descriptions, I need to have some published code to get noticed.
I would hardly consider this a 2 hour task. The queries themselves should only take a few minutes to write, though I see an issue with question #2. the issue is that grouping by genre without displaying the genre is a bit useless. from a UI perspective, it makes little sense. what would make more sense would be to order by genre, group by title (to merge multiple authors without listing the book multiple times), then display author(s), book title, and genre (so a user could see the genre of each book). The second part should also not be very difficult. You can put the queries in a PHP function and use JS to pass a variable to the file containing the function and display it via AJAX. Honestly, I've taken much more difficult tests than this with less than an hour to complete them and without being able to do a Google search to help me. However, in all fairness, I've also given tests to lots of people and watched them fail miserably (in one case, 19 programmers, some who had multiple years of experience, none of who could pass a slightly more difficult test).
Node.js or ruby. Why? Many people are looking to hire devs with node.js or ruby experience. I dont like ruby tho, but just because of the fanboys who down flame php
*Just* jQuery? I might not want to work for you guys because you're using prototype. I decided years ago (2007?) that jQuery was better, since then it's become the standard, for good reason. If you chose prototype over jQuery and are too stubborn to **a.** admit you blew it, and **b.** just let people use the tools they want, you're probably not going to be fun to work for. Also I've had two programming tests, the first had a range of questions about general programming ideas and terminology and maybe a simple function design question. I got the job and ended up leaving 6 months later because the CEO (who issued the test) had his head up his ass. The whole company turned over about 6 months later, either fired or walked out. The next was on a whiteboard with markers that were bone dry and that was the one interview I didn't follow up on. I'm over these proficiency tests, because the work is plentiful and results speak for themselves, and unless you want to pay me my short term hourly rate to solve your puzzles then it isn't worth the effort. If it doesn't work out the first day, show them the door.
That's fair, they were meant as *example* questions, not a definitive list. On the other hand, this is very basic stuff and it has big implications when selecting the method of attack for certain problems. I might let someone applying for a junior programmer position get away without knowing, but I would not take on anyone claiming to be a senior programmer who couldn't answer basic shit like this. I don't want people who just make shit work kludging things together any way they can. I want people who understand the implications of their choices.
&gt; if you do sub par assessment, you get sub par people and &gt; I would become suspicious if the company [...] would not test me to the shit Very true! I completely agree that companies should test their hires well. Of course, everybody does. Where we disagree is that a long code test is a good assessment. I would be very happy to spend two hours in conversation with an employer, where we can both gauge the merits of the other. Those same two hours finishing a contrived test? I think the employer learns less about the candidate, and the candidate learns nothing about the employer.
I have this problem - a lot of developers do. You get into coding because you enjoy it, and then spend all your days coding for other people and the last thing you want to do in the few hours you get off is code.. Is there nothing in your portfolio you can show? Bear in mind that if you've worked on live sites you should be listing them for sure - the client pays for the code, they do not pay for the right to deny you worked on it. Sure, prospective employers can't see the magic, but if you're listing the things you worked on with live links, then that's something. Also, for me experience working on a live project is better than personal projects that might have taken you years to perfect. The other thing you could try is to find personal time to code small snippets that you know you're going to need again and again. Any developer has tasks that drive them nuts - my personal least favourite is UIs needing both RTL and LTR languages. Build out some tools that help you with these areas and put them up - small and agile is always interesting, and they'll show of your coding style. If you've worked with other devs, you'll know you can tell a lot about a coder within a few lines.. Good luck with the job change, the markets getting better! I just jumped; job, country, continent. Took me over a year to find, but it's awesome - you'll get there! :)
Or stacey cms.
**Non-technical advice:** I've learnt from my past to avoid small companies that don't respect their employees personal time. So I'd avoid your company purely on this, even though it might not be the case when they get the job. This test also screams micro-management to me. Expecting applicants to spend hours building an application just for a job interview is actually just shooting yourself in the foot. You're left only with candidates that are desperate to impress and have nothing better to do with their time. It serves as a warning to most people with experience. I've found that the application process is usually a good indicator for what working for the company will actually be like. **Technical advice:** Tasks 1 &amp; 2 (design schema &amp; queries) aren't so bad, because they're quick and also are a good guide of "sloppiness". Although then of course the test is biased towards SQL over PHP. I've got 15 years experience building a shitload of different systems in PHP, but I had to look up what XHR was, because as it happens nothing I've worked on so far has used it. I've heard of it before of course, but the test would take me longer than 2 hours if I've also got to learn some new technology that I've never used. I'm assuming your job ad specifies that you want somebody with XHR experience? Regarding all the items your wrote in point form, I wouldn't do most of those things in something that's supposed to be a quick test of ability. Doesn't mean I wouldn't on a real life system that I assume isn't expected to be built in 2 hours. &gt;OO-wankery So basically the correct amount of OO is exactly what you would write, no more no less? Reminds me of a guy I once worked with who thought he was super-duper at OO, yet all the code he ever wrote was basically procedural code in singletons. I stayed for 3 weeks then made a hasty retreat. Anyway, best of luck. You don't necessarily have to give up on the test idea altogether, but it should be a 5 minute test like writing a single function. i.e. about 2% of what your current test involves. And perhaps try just taking new employees on as a contractor first to test them out. You code test could find someone with k-rad skills who's retarded on the job for other reasons anyway.
I would find the challenge fun though I can say right now I'd say screw OO, go straight to procedural since it's a singular task and I don't ever expect to expand upon it. (*nor would I care too*). I haven't attempted to go for a job in the area though so maybe that'd be a mark against me. EDIT: BTW this isn't a very good test of skill. I could easily do all of these things and I'm a horrible webdev. 
&gt; A seasoned developer will have a laundry list and people who aren't so good with PHP will have a hard time naming a lot of them or try to pretend PHP is the greatest programing language ever written. Yes, this is one of my favorite questions, precisely because no self-respecting PHP developer actually thinks PHP is a good *language*.
I suspect there are a couple factors that play a role. 1. There are many more bad programmers than good ones, and the good ones tend to be already employed. You'll have to decide whether you want to hold out for the best (and scoop them up fast) or hire someone a bit green but shows potential to learn (hard working, passionate about the field, etc). 2. If you're going to expect someone to invest time into this, then you need to entice them. A great way to accomplish that is to list a potential salary figure (many job listings don't). Otherwise, the job might be $15/hr for all I know. Dangle a carrot for motivation. EDIT: &gt; Better yet, did they ask about that oversight [multiple authors and genres] in the spec? (Never) This part is probably expecting too much. An interview coding test is *supposed* to be watered down. Otherwise I might also ask: What if a book has multiple publications? What if a book has been translated into other languages? What about hardcover vs softcover vs ebook? But I'm not going to ask about any of that, nor about multiple authors or genres, because this isn't meant to be a real application.
Depends on experience. Junior level starts at 50k/year, with the current cap for the position at 100k, where we can expect to find low-senior experience. We're in Seattle, so adjust cost of living accordingly. Put another way, we have a cap of 150k worth of yearly salary for two devs.
Just saw the answer to my other comment here, thanks.
&gt; Also, does this mean you gave it for the first time in seven years recently and had the first problem with it? To resolve any ambiguity, we've given this code test during five hiring rounds, including the one that I was hired in seven years ago. This is the first time in any hiring round where we've had *most* candidates completely flake out when issued the test. We've had people withdraw before, but never at this rate. We only issue the test when the candidate does not have any existing sample code. &gt; Are you the only person that's sat it? I'm not sure what you mean by "sat" in this context. Can you clarify?
I tweak the resume a bit for each job I apply for in order to highlight relevant projects (including a description, what languages, frameworks, etc were used, and a link). The idea of writing some snippets to publish is actually something I had never thought of. I may even be able to pull a few bits of code from existing projects to put out there. Nothing proprietary, just things I have reused in various projects. Congrats on the new job! I know things will turn around eventually for me... it's been a rough couple of years and I can get a little discouraged at times. Just gotta keep pushing forward. :)
I tried to invite you twice... The whole exercise seems like a struggle. Is the REAL right person for the job the one who has a good enough attitude (or is masochistic enough) to complete the challenge? Coding should be fun, not painful.
I'm not saying it's not worth it. I'm just giving a dollar value to the time invested. 
Wow, you need to defend that statement. If jQuery "isn't the best", what is? Man, just reading your comments in this thread, I would NEVER work for you or your company. Honestly, you don't sound like someone that should have any hand in a hiring process. Maybe, in person, you come across a lot different but I doubt it. 
Why not java?
We've pondered "try before you buy" style stuff in the past. Our codebase is rather immense and has a non-trivial learning curve. A day or two wouldn't be very productive.
I was given the task to write a twitter clone without user management as a task. The task itself was 3 lines long, but i spent 12 hours doing it because i wrote a small MVC-Framework and DB Abstraction layer to show off what i would do if it would be a real project. Additionally to the frontend stuff. It paid off. Sure, the task shouldn't be that long, but it should ideally cover every skill necessary for the job. I think we mean the same thing.
I was going to suggest bits you've already written - usually there are lots of little bits that aren't project specific; but you have to make the determination yourself. I've used the same time formatting script in every project I ever did - I wrote it about a month after starting PHP and it still serves, though it's been through some changes! I can empathise with having had a bad run - before this job things were pretty unpleasant. You have to stay positive, as clichÃ©d as that is. I stopped applying for things unless I was likely to get at least a response - too much rejection can destroy your chances. It also helped to keep putting myself in recruiters shoes; a mountain of resumes and a shitty boss pushing them to get it done in half the time they needed. It's not you they're turning down, it's just another bit of paper in a huge pile of paper. In the end, I found this job through an old friends recommendation - I was offered it in a bar after way to much vodka. Things arrive in the most unexpected ways! You'll get there - just keep going!
I was told to write a class (any class) on a whiteboard with a whole pack dry markers with someone looking over my shoulder. It was so awkward and painful. With headphones on and my trusty text editor with customized tab completion I am fully capable of building whatever you need. And I'm going to compare it to other's work and google research while I do it. The idea that you can assess someone as a programmer this way is ridiculous. 
FWIW regarding Prototype vs jQuery.. the decision to use it was made in 2006, and there's some *very* critical code that builds on top of it. We're already planning on refactoring the insanity away, have been for a while now, just haven't been able to get to it. It hasn't hurt enough to overcome the "if it's not broken, don't fix it" thing. We're very aware that Prototype is no longer a thing worth using for new code, but it's a thing we're stuck with for now... well, at least as far as what `$` is on any given page. 
I also experience that kind of opportunity and I have done a programming test once and I failed. It was a shit situation and I'm never going to do it again. Well now I'm still a very successful programmer with experience and earn probably double the salary from I would get there. Did that test show that I was a bad programmer? No. I didn't care then about that interview (didn't sleep all night) and I don't care today. What you should do is to ask for their github page / other code from personal projects. Look at their code, how is it? Maybe tests isn't the most common thing on weekend stuff but nevertheless you'll realize pretty quick if that person is worth having.
I also agree. I consider myself to be a pretty good developer and today I would never go to such an interview. I could link them to my github page / other projects that I have collaborated on. But I'm never going to do a humiliating test.
What are they using to get the data out of the database? PDO or Mysqli? Do you see PDO boilerplate all through the code? Ugh. It would take me at least an hour to write up a half decent abstraction library around the PDO code so I could write nice queries.
While I wouldn't say the test is necessarily difficult, based on your gripes, I think you may have your expectations too high for what you will get in return. Say it was me taking the coding test, I would think of it as just that, a coding test, not a full-fledged application. Frankly, two hours of time for a full-fledged application without frameworks is a bit low. Partially because I use frameworks for the express purpose of getting through the easy, time-consuming stuff right away. That's what we're supposed to be doing as devs. I *could* do them all from scratch, but why would I? So some of these may be issues of the applicant considering it a test, and not a shippable product, and there's a big difference there. In response to some of your gripes: Sure, I looked at it and immediately thought about having multiple authors, but I didn't think about multiple genres. Am I going to get a lower score because you have a bad spec? Certainly you want devs to be proactive and have a good amount of foresight to bring these things up to you in the real job, but a bad spec is still a bad spec. You can't always blame the devs for that. I'm absolutely not going to be writing unit tests for a test application that I'm not getting paid for. If the code is mostly procedural, I personally would be very concerned for that. Procedural, in my experience, a lot of times means they aren't forward thinking, or aren't thinking about the full scope, just individual problems at a time. If someone is using what you perceive as "OO-wankery", they may just be looking at it as setting up a properly scoped application that is modular and portable. (Of course, there are bad examples of OO usage, and I'm not entirely sure what you're classifying as wankery). And lastly, as a lot of others have pointed out already, you need to ditch the no-jQuery thing. I could do an XHR in pure JS, but I'd have to go look it up because I haven't done it in years. For the very simple reason that I don't have to anymore. Someone who had no idea what you were talking about could just as easily go look it up. If Prototype is a requirement in your job listing, it's reasonable to expect them to do it in that, but I wouldn't mark off points for being able to do it in jQuery. This is an area that a dev could memorize any form of doing the request without knowing what it actually does, so what does it matter if they've memorized the jQuery way, the Prototype way, etc? They can just as easily memorize your way of doing it. If you want to know if they understand the concepts behind it, this is not the way to find out. Truly good schema design takes a good deal of time, and a lot of interaction over the requirements. I don't think there's anything wrong with that. Dropping a short description in their laps and expecting a perfect schema makes no sense, and as an application test I'm not going to put forth that much effort to hammer out the details of it with you ahead of time (unless I really, really wanted the job). Some of your others are the correct things I would say you should really be looking at, like coding style, commets, and so forth. You really should be able to identify their dev personality pretty easily by looking at a much smaller sample than this one. My suggestions: Just expect published code somewhere. Lots of other job listings already do this, and most devs I know already anticipate it. Cut down the test to a smaller task, lose some of those DB fields, drop one or two the queries (maybe just use the third one), and lower your expectations to understand that it's just a test, not a finished product. And I think you are underestimating the job market right now, and how many other opportunities most of these applicants are pursuing at the same time. Of course, just my opinions for what they are or aren't worth.
Hmm. I understand how asking for a code test might give the impression of a bad work/life balance. As it happens, this is pretty much straight up 40-hour-week stuff. If OT is being done, we did the scheduling wrong... and devs are almost always the ones setting the deadline. We do usually make this clear during the actual interview. &gt; So basically the correct amount of OO is exactly what you would write, no more no less? Yes, exactly! ;) We've seen four types of OO code come in for this test. 1. Someone laid out a typical framework-style directory structure and did very light-weight OO MVC by hand. It was simple, sane, obviously named and easy to follow. Would have hired on the spot, as it went way above and beyond. 2. Someone had written their own framework, before 5.3-era frameworks became popular. They bundled it with their test, as we didn't know he had sample code in the form of that framework. It was horrible, horrible code, and while the test worked and wasn't too bad in and of itself, the rest of the framework code that was submitted made us a bit cautious. Voted to hire anyway. 3. Procedural code inside of singletons. \*cough\* This is a forgivable sin, if we're expecting it given the experience level. 4. Procedural code that mixes both presentation and business logic, wrapped inside one and only one class for no specific discernible reason. The real answer is not to use OO on this task. Nothing there calls for it. Most of our business logic is wrapped up in objects, but what I suppose we'd try to call "controller" code is procedural. It's not bad code, it's not offensive code, it's just *old* code, written before the PHP community got its act together and started thinking about being real developers. Procedural doesn't bother us. OO when the complexity of the thing being done requires it doesn't bother us. OO for the sake of using classes and objects, that bothers us. (For a long time, the group considered modern frameworks to be OO for the sake of OO. The group has been ... re-educated.) &gt; Anyway, best of luck. You don't necessarily have to give up on the test idea altogether, but it should be a 5 minute test like writing a single function. Honestly, I'm probably just going to boil it down to the schema design on a whiteboard and walking through the queries. That's most of the stuff that *matters* from a technical point of view. &gt; And perhaps try just taking new employees on as a contractor first to test them out. The codebase is rather large and has a *huge* learning curve. We're not sure how productive short-term would be. We've been pondering it.
&gt; We've been used to relying on that answer being "yes." Too bad, the tables have turned. Now it's our time to ask questions.
Multiple authors, ok that would be normal for textbooks etc. Multiple publishers hmm...
We don't specify which API to use to pull results in the code test, and using any of the three (yes, including `mysql`) is acceptable because it opens up followup questions. Of the candidates that submitted in this round, two used PDO, one used mysqli. Honestly, I think the boilerplate for one is about as irritating as the other. Like everyone else, we have an in-house adapter with convenience methods for the various variety of query-bind-execute-fetch operations. It can use any of the three backends (and Postgres' stuff), but actually uses `mysql` in production because we're stuck on sub-5.3 and need persistent connections to work around an unrelated architectural bug that makes TCP connections *randomly* take exactly three seconds to go through from our app server to the database server. Oh, and I'm actually official IT now, so that three second bug is *my* problem now! Yay! Maybe I'll find time to get to it in three years or so...
&gt; I like the idea of being able to program a desktop application Maybe Python is a good choice?
&gt; Of course, just my opinions for what they are or aren't worth. They're worth a lot, thank you. A lot of the criticism is fair. FWIW, a *lot* of people are misunderstanding or misreading the whole jQuery thing. The intent is "do XHR, please use a third party library, bonus points for not just using jQuery or for using Prototype (which is what we use in-house)"
&gt; Between the phone screen and the in-person, we issue a coding task **if the user doesn't have any published code** samples. Your Github page might be enough for OP.
For someone who doesn't know, is it expensive in Seattle compared to perhaps California? 
Gotcha, that makes more sense. However, I'm still not sure what you're hoping to glean from that. I think my other point still stands that looking up how to do it in Prototype doesn't translate to knowing what's going on. As a test, I just looked up the Prototype syntax for the request, and I'm pretty confident I could get it to work quickly if I were taking your test. That doesn't mean I know anything about Prototype or XHR. I've never even used Prototype before (admittedly I know XHR pretty decently, which may help). Maybe that is what you're looking for? Ability to adapt and learn quickly? Of course, I've got some published code, so I wouldn't be taking your test anyway if I applied :)
&gt; So you are willing to treat me like shit during the interview, you think - mistakenly - that devs dont have options, and you want me to work on a "legacy" code base that is full of anti-patterns, bad code, and offshore curry that I'm not allowed to fix? I never at any point said that... especially those last two. *Especially* the last. Seriously, 2/3 of our entire freaking backlog is refactoring the idiocy out of this thing.
I don't think so. We earn less than americans for example, after taxes. But in germany, it's still a habit to question and prove everything. Most germans are very cautious when hiring people or buying stuff. Most people fear to loose money. Education is important, but very few employers trust education or job history alone. Edit: A well filled github account does save a lot of work though.
Depends on where in California. Compared to, say, San Jose, most costs are similar *other* than housing. 3br 2ba houses go for 250-350k in the surrounding suburbs, with a similar drop in apartment rents. Seattle proper also doesn't have *insane* cost spikes as you hit downtown in the same way that San Francisco does. 
&gt; Most people I know who are "sr" get at least 160k/year. That sounds like a New York or SF wage. This is Seattle. Our actual senior candidates are asking for 110-120, which we can't *quite* swing right now. The budget itself is $150k for *two* positions, and we haven't found a junior cheap enough that we could afford more room for the senior. Our recruiters are worthwhile, and understand when we have to decline a candidate because of the price range. They are representing their clients well.
If only I had that luxury. Given everything that's been said tonight, I'm going to be brow-beating my boss into letting me set mandatory code samples as a requirement from now on... well, at least for the folks that come to us through recruiters.
python + gtk if you want to make linux desktop apps. But you definitely can make desktop applications with php, check out php-gtk which is not so bad in my opinion. The desktop is a lot more os oriented than the web, so for example it is often easier to make an windows application in C#/C++ and .net than python/php-gtk, and linux desktop applications are often C/python-gtk oriented, but you have much more room to play around with different tech on linux desktops. Remember, desktop apps are event driven and threaded and have a lot more state going on compared to the web, you have to think twice when you implement things as it often is easier to "cheat" you way out from a problem relying on some global state or singleton. I doubt it will be any problem for you but just keep that in mind. Also you do not need to move away from php/web if you want to get better at CS and programming you can pretty much do anything with any language as long it is turning complete. 
I was given a test when I joined my current company, expected to take around 5 hours and at first, I didn't want to bother, but in the finish I figured I'd give it a try, but wouldn't spend too much on it - I finished it in 94 minutes, so it wasn't that bad, but I still begrudge doing it - I charge for my freelance time usually, if I didn't want to leave my job at the time so badly, I wouldn't have bothered! Also, your test is quite thorough, but your criteria are a bit specific. EG, your comment about books having multiple authors - only book readers would know that - I had no idea books would have multiple authors, but I could write you a damn good query given that information... In fact, if I did your test, I'd have been a smart-ass and not bothered with that whole section, and just say "I don't have a book collection - why develop something that doesn't have a purpose?"
&gt; Maybe that is what you're looking for? Ability to adapt and learn quickly? And to RTFM. That, and you should never underestimate the power of knowing how to Google a thing. I've interviewed people that don't understand that they can just *search* for a thing that they don't know and actually find an answer.
&gt; My minor beef with libc is that it's become the kitchen sink and everyone now basically considers it mandatory. ... nah, just kidding. OTOH, I was a prototype guy for a few years until it became apparent that jquery won. If you asked me to do stuff with prototype now, I'd be basically starting from scratch again ... it's been that long.
Published in 1993 by Foo, Foo gets bought by Bar in 1995, Bar puts out a second printing in 1996. Bingo, two possible publishers for "one" book. Oh, wait, I put publishing year in the schema, didn't I. Books aren't actually the thing being worked on in the real test, so I guess the example doesn't actually work as given here.
&gt; We're very aware that Prototype is no longer a thing worth using Based on what? 
If it makes you feel any better, I wouldn't tell you to get bent. I'd just politely thank you for your consideration and walk away. Developers are very fortunate now that the world happens to be shifting to a digital infrastructure, there's a lot of demand for us. Also our time is valuable too and that test is just wasting it. The only developers you're gonna get with that kind of test are newer developers straight out of college that don't yet realize how much they're in demand, or developers with no college and who are lacking in skills.
I think looking at actual code they've written is the best way to decide if they can write code. If you have a test there is thousands of reason not to even do the test and another thousands why someone might fail. It all depends on a lot of stuff. But the more important part is, imo, if the person can learn quickly and if the individual will fit into the team well. Of course you need a good coder, but that's what code samples are for. Not from tests, but from their own projects that they've done because they want to.
MySQL supports triggers. What are you talking about?
Do yourself a favor, assume any developer you're interviewing is MORE than competent until he proves otherwise, and pay him the respect he deserves as if it were an opportunity to make your business MUCH more profitable (which it is). You can skip the test by asking for previous projects or code samples (like Github) for him to show you in person. You wont know what the code means but he wont know that, and if you see awesome finished products then it'll give you a good indication of the quality and scale of his work. It's mostly a way to feel him out and see if he's BSing you or not.
I hope you're trolling us. If you seriously accept the test using the ext/mysql extension for the test you have no business judging it or altering the questions.
Yeah, we do too in the northen Europe. But I guess we have a lot more taxes too and for a good reason. In northen europe, on all the jobs I've ever applied for I've just once written code before I got the job. I never had to link to my github page either, neither I have documented my education. Just said I went there and told my life story, why I like programming, shown off some weekend projects (not the code, just the result). My education probably helped me, but I think it was not necessary to bring me where I am today. I just needed the time to learn programming. I didn't even finish my degree. 
It lost the library war and then stopped being updated while there were still irritating bugs afoot. Other tools specialized and continued to evolve on their own and become useful, while better patterns emerged to do advanced stuff in Javascript itself. [To coin a phrase](http://en.wikipedia.org/wiki/National_Bridge_Inventory#Structural_evaluation_scale), it's functionally obsolete.
You say in the instruction that they must include "at least" certain things. It is not unwise to create a minimal design. Worst case, a minimal design can be expanded upon later. Anyway, later on you admit that you secretly want them to over-design it for a given set of edge cases. For example, multiple authors and genres. Yeah, that happens, but how many systems in the real world allow multi-pathing like that? Can you imagine if B&amp;N had to have all of Mystery, Horror, Mystery-Horror, Horror-Romance, Mystery-Romance, Mystery-Horror-Romance sections? Or stock the same book in all applicable genre sections? Well, they don't -- there is always a primary genre. And for multiple authors, even if there is not per se a primary author, there are conventions for choosing one, usually alphabetically (see e.g. MLA citations) or order listed (English is a 2d system). &gt; Better yet, did they ask about that oversight in the spec? (Never) OK, that's admitedly poor. &gt; Did they use foreign keys? (Almost never) Yeah, there's a trend where PHP coders these days know fuck all about database design. Of course, the rise in the establishment of the DBA role has obviated that (along with a lot of need for developers to be designers). Time and time again I see in this subreddit people asking PHP questions that are actually SQL/RDBMS questions, but they don't seem to recognize the difference between data and business logic. &gt; What's their PHP look like? Well, that's subjective as all fuck. &gt; Did they pull off the third query without resorting to doing a loop in PHP? (Never) After explicitly telling them not to use DB-side capabilities to do it? They must assume that you don't want them to take advantage of the programmatic tools available to them to make the task simple because you specifically tell them to avoid it. It's reasonable then for them to assume IMO that you also don't want them to take advantage of functionally equivalent PHP-side programmatic tools. What are you looking for exactly? A complete (redundant, inefficient, slow, and wasteful) load of the database into program memory to then be fadiddled with by array_reduce or something? I would be tempted to shoot that person through the head. After all your talk of leveraging useful RDBMS concepts such as FKs and normal form, you pooh-pooh in-DB aggregation because........ ***why?*** &gt; Did they use OO or did they keep it procedural? (Usually procedural, sometimes OO) Are you looking for OO? You should specify you want OO if you want to get OO. &gt; If they used OO, did they do it for the sake of OO, or did they do it because the application demanded it? (50/50 useful vs OO-wankery) I appreciate that you recognize that distinction, frankly. But it seems like you want OO, so, what's the difference? I mean, either: a) you want this done in OO b) you want this not done in OO c) you want the developer to be able to decide when and when not to use OO, which requires presenting the candidate with more than one scenario (e.g. an OO-suited example versus a not-OO-suited example, assuming such suitability is clear cut and objective [which it ain't! There's nothing novel about programming demands in the post-OO world that has introduced a single scenario that *requires* OO]) in order to determine that. &gt; Did they create unit tests? (Someone did this once!) That is a post-design and post-development task, unless you are looking for TDD, in which case, you should *say* you are looking to implement TDD, because TDD is an organization-wide paradigm and isn't just something the developers can decide will be The Way We Do Things. If PM/PO is not prepared to provide the materials required for TDD, and especially if you have no QA/SDET to generate said Ts to drive the D, it is reasonable to not expect that you you expect unit tests as a part of design.
Man, you make it sound like it's 1999 all over again. You have ten opportunities lined up? I need to get my SDET ass back into PHP devving then.
Yes of course, I agree with you. But if you have a lot of experience in other companies maybe you can be recommended or allowed to show off at least a result of what you've done there? It's hard for an employer to know if you can write good code. The job I got now I got just because I already worked at a company, had good reputation, could show off stuff. If that's the case, maybe you don't need side projects, even if I personally do have some. If I were an employer and you couldn't bring me any evidence of your quality as a coder I would not hire you. Of course, you could do such a test like they are doing if you don't have anything. My statement is not static.
Oh man, if you thought that was a troll... You know what version of PHP we're *stuck* on until we can complete all of the testing? 5.0. No, not 5.x, five point *zero*. I couldn't make this shit up *if I tried*. We're jumping straight to 5.5 in a few weeks if all goes well. Purging the code of all the deprecated *crap* has been very cathartic. And irritating. Fucking `ereg`. It took a long time to get there, as we had an extension that we relied upon that stopped working in later versions. So yeah, if someone *does* submit something that uses `mysql`, the very first thing I'm going to ask them is what version of PHP they're using, what they're targeting, and then what they know about 5.5. Because seriously, if they *don't* know that then they're probably living in a hole.
Well, you would use SPs and your code would use the SPs instead of relying on DDL triggers... I mean, it's a six-of-one sort of thing. Hell, these days, anyone who actually uses DDL for their CRUD seems to be considered too stupid to live in some cases. (I don't see the point of the aversion, well other than injection concerns, but it just seems stubbornly avoidant to say "They provide a way to do this. Don't use that. Instead, construct and use something more complex [and error prone]. Because reasons.")
Man, you think a two hour dev interview is long? Don't come to my current shop. And then there's places like AMZN...
Experience in other languages *totally* counts. However, we've been slightly burned by that before. One of the devs came from a heavy Perl background. A lot of his code was basically procedural Perl written in PHP. It took us a long time to fix that little problem...
&gt; Developers don't need to know raw JavaScript anymore but it makes a developer much more competent and efficient at fixing bugs if he does. While this *can* be true, there are a *lot* of devs out there that basically only know enough Javascript to use jQuery and jQuery alone. If there's no plugin for it, it *must* be impossible, right? So far I haven't encountered any of these unfortunate creatures in person, only over the internets...
OTOH if you have nothing to show for your ability to code, why should anyone offer you money to do it? I mean, if you have a portfolio, well... you either have a fortunate amount of spare time to do more programming than what you do for work, or else you manage to find work that isn't tied up in NDAs. Or you violate them like mad, in which case, I guess you're not worried about companies that care about them.
&gt; It lost the library war There's no war. They are just tools. I haven't heard a good reason to assert that it's useless. Bugs? More specialized tools, what? These are not reasons to throw away a tool or not choose one, unless they directly affect your needs.
The test is good but too long. As others have said, the SQL tests are good, because they are quick to do but demonstrate knowledge. Not allowing the use of a framework or library is overly onerous. Writing a good php framework, even a micro one is very involved, with security considerations, separation of logic, re-usability etc. I wouldn't expect someone to do this in a couple of hours unless it was something they were doing every day, especially as most developers these days work within a framework and don't have to think about this all the time. You would be better off providing them with a cut down framework and expecting them to fill in the gaps, eg templates of a controller class, model class, routing config. Each template could have a simple explanation of syntax, but no definition of what the file does. This would be much quicker for a dev to complete, and would more accurately reflect workflow. The same goes for the client side, building an interface without a framework is a big job. Personally I would tell them that they are through to the final interview round (flatter them), ask them to come in for the interview, letting them know that there will be a coding test, but not telling them the details. Then I would set them a similar task, but provide a very cut down framework with templates that include inline documentation (They should definitely know what an MVC framework is, and have been exposed to more than one to recognize what each template does). Let them know they have two hours to start the task, that they are not expected to have a polished product at the end, but you want to see how they go about tackling it. Let them know they can critique the framework in comments if they want to (You can include some deliberate mistakes that expose security concerns etc, but make sure you inform them of this, or it will put you in a bad light to a good candidate). Then see how they go about it. This will get any viable candidate into the interview without putting them off, plus you get to see how long it actually takes them, and the process they go through in writing the code. Spotting the framework issues is a bonus and how they communicate them tells you about how they work with others.
Most devs fall into the "I mostly only know jQuery category" hence why I said if you find one that knows raw JavaScript he's like a rockstar to you. Also if a dev knows jQuery there's no reason in the world why he shouldn't be able to pick up additional libraries like Prototype if it is required for a project.
That's about $80k high in my frame of reference. Seriously, are we talking USD here? And are we talking 2013 not 1998?
&gt; small companies that don't respect their employees personal time Formerly known as a "startup" Currently known as a "large company with a 'startup feel'"
&gt; and devs are almost always the ones setting the deadline. As long as the dev who will do the work is the one setting the deadline for said work.... what's your name again? I know some people.....
WTF? How can you say you have 15 years of experience and never heard of XHR? You sir are a liar. A fake. A dud. As an employer, i would never hire someone without a test. A test like this is 45 minutes for a good 15 years experience dev like you. 
&gt; Anyway, later on you admit that you secretly want them to over-design it for a given set of edge cases. Kind of. I really want someone to realize that the given requirements don't meet reality and to ask for confirmation that the wrong thing is the thing to be done. The actual document we hand them repeats on multiple occasions that they are more than welcome to ask for clarifications. It becomes a discussion point in any case. If the final design was other than requested, why? If it was exactly as requested, did you notice that it might not model the real world? &gt; Well, that's subjective as all fuck. The *entire thing is subjective as fuck*, outside of the queries operating correctly. We've had candidates come in with entirely un-normalized schemas that we actually considered hiring because in the inevitable followup, the candidate was able to realize and correct the mistake. On the other hand, if they pick the wrong brace style, they're totally not getting hired. ;) &gt; Are you looking for OO? You should specify you want OO if you want to get OO. I answered the OO bits [over here](http://www.reddit.com/r/PHP/comments/1hjnb9/trying_to_hire_lamp_devs_and_theyre_all_flaking/cav25l4). &gt; [Unit tests are] a post-design and post-development task Yup, and we don't ask for them. One candidate went way, way above and beyond and wrote a test suite for his sample app. It was unexpected and *almost* unwelcome given the mundane nature of the task.
Well, if your judging guidelines are completely opaque, expect a large percentage of applicants to completely miss the mark. As I said, for most coders, if they're not *told* the extraneous stuff is judging criteria, and they're on a time crunch, it's NOT going to get done. If you give basic points of what the criteria is (ie - reusable/manageable code with adequate commenting), you'll get it (and if you don't, it's a pretty crystal clear sign not to hire the person). Your salary base is a bit on the low side, also if you're advertising this as a "junior" position, you're going to get a lot of what *you* would consider incompetents. This is a mid-level/senior position from the sounds of it. You're looking for people with a *minimum* 5-10 years experience, likely with a fair bit of *real* training. When you say "junior", most people are going to assume that rudimentary PHP/MySQL/jQuery is the most that's going to be asked of them, something like tossing together a small business eCommerce site. $50K is about what a junior position like *that* is worth, but what *you* are calling a "junior" position should be starting at about $80K. DOE is irrelevant here because you're clearly needing *any* applicant to be quite experienced before they should even get an interview. If you clearly state what the job is (ERP/CRM/CMS), that it is at least a mid-level position, requires 5-15 years professional *related* experience, and pays $80K - $100K/yr, you'll start getting qualified applicants. As well, *drop* the recruiter. Mid/Senior-level coders aren't going to recruiters who are going to get them $30-$50K/yr jobs. All the recruiter is going to do is send you junior coders who have no practical experience or qualifications, and they're going to cut into your salary offering.
nothing special here you can do the same with any MQ server.
On top of that, since when are these things the coder's responsibility? Isn't there a development manager/producer who is supposed to be bringing up questions like this? Coders are going to know coding, not the ins and outs of book publishing.
with more than 5000 native functions , yes , i think you can consider PHP as a framework itself.What other language has direct support for HTTP in its core ? templating ? database access ? none except PHP ( nope , nodeJS is not a language ).
&gt; Well, if your judging guidelines are completely opaque, expect a large percentage of applicants to completely miss the mark. And that's fine. Expected, even. Nobody *ever* "passes" this test. &gt; also if you're advertising this as a "junior" position, you're going to get a lot of what you would consider incompetents. We've had *very few* junior applicants. We're pondering creating different job postings for the different levels, to see the spectrum of talent we can attract. We think that might be one of the problems we've been facing. &gt; $50K is about what a junior position like that is worth, but what you are calling a "junior" position should be starting at about $80K. I think I might be giving the wrong impression. If someone came to us with minimal actual LAMP/JS experience, and they had no sample code and did this task, I'd expect them to have *huge* flaws in the resulting code simply because they might not know better. And that's fine, if they're applying as a junior. For example, we have an internal candidate for the junior spot. He really doesn't like his current position, but he likes the company. He's been doing code for years now... on a MUD. Never touched anything PHP, doesn't understand relational databases, barely knows Javascript. It took him a month to finish the test. He said it was about 12 hours coding and about 40 hours in Google and RTFMing. I gave him some leeway because I like him. The code that came back was simplistic, but functional. Way over commented. No database design at all, just everything stuck in the same single table. Had a huge, glaring security hole, etc. You know, the usual things. But he's still hireable (if not for politics) even though he's *awful* right now, because every time I pointed out a flaw, he went and did research and understood the problem better. You are right, though. The base competency skillset I am looking for really is better suited to a 70-85k mid-level developer, and the 100k-ish cutoff for senior is below market average.
&gt; How can you say you have 15 years of experience and never heard of XHR? Ah, but if I'd said "ajax," would the answer be the same? Or what if I spelled out XMLHttpRequest?
&gt; If OT is being done, we did the scheduling wrong... and devs are almost always the ones setting the deadline. We do usually make this clear during the actual interview. Cool, that sounds good then. &gt;We're not sure how productive short-term would be. I don't mean plan to use contractors, but just trial new employees on a contract so it's not too hard to get rid of them if they've bullshitted their experience or something. But I guess that's kind of the idea with probation periods with companies that have such a thing in place anyway. 
Hi jterminio, thanks for the awesome tool! I tried using it to setup a LAMP for my dev environment but when i do "vagrant up" towards the end when puppet is kicking in, there are some errors and then once the machine is booted, there is no apache or sql etc like I chose. The errors are most likely something that i did wrong but im unsure where to ask for help as im entirely new to vagrant from discovering this post, but it looks great! Are you able to shed any light on what could be going on here? Here is a link to a pastebin of my "vagrant up" [http://pastebin.com/JFYC3bq9](http://pastebin.com/JFYC3bq9)
I would never do this. Most people wouldn't react kindly to this kind of criticism, even though you may. Someone risks burning bridges or alienating themselves because they don't know who your connections are. 
This should be the top comment. You they want to test real-world abilities but without allowing people to use real-world resources. It's absurd.
I have done more challenging projects to score gigs before but only when the work was very interesting to me. Recently I started working at a company who make online gambling games and my task was to recreate one of their existing slot machine games in javascript. It was really fun and the work is very interesting and cutting edge so I enjoyed doing it. If the job was just standard CRUD stuff, I probably wouldn't have the motivation to do that much work.
I received something like this a few months ago through a recruiter. (Senior dev with 10 years experience.) I took one look at it, laughed, and moved on. Before the interview? Not a chance. I don't even know if I give a shit about that company yet, why would I spend hours creating what is essentially a *blind bid* before hand, since I don't know how good the other ones you *have* received are, and thus should logically put a ton of effort into the code itself. You want a coding test before hiring? Fine. Do it *after* you interview them, so they have a chance to ask *you* questions too. Your company is not worth anything to them, part of the interview is your chance to make it worth something to them. Additionally, I would break this out into some smaller tasks. Have a few quickly completed tasks, or even pseudo-code tasks, or even just have them submit architecture docs instead of the actual code for one of the questions. When I got something exactly like this several months ago, I essentially decided that there was no way the job itself was worth that much effort when I hadn't even sat down with them yet, and that my time was literally more valuable than that.
&gt; Dude, we all work on code that is critical to our respective businesses. No, really, not everyone does. There's a difference between an internal monthly report taking an extra 5 minutes to run, or rounding a number incorrectly, on a system that 6 people see quarterly, vs production code break and showing error messages to hundreds or thousands of paying customers. &gt; And you damn well better be ready to shitcan someone who isn't working out. Yes, people should do that, but there's often a process that has to happen, and the person may challenge or sue for wrongful termination. The potential long-term costs of 'shitcanning someone who isn't working out' may be quite high in certain industries. There's also team morale issues to consider in hiring bad/wrong people. I get your point, but it still makes sense to try to avoid bad hires in the first place. 
Seems like a test that should take up half an hour. I feel bad that this is the level of competence.
Turing complete.
Came here to point that out also. Not that it would make a difference anyway, CI is already the big loser in that infograph.