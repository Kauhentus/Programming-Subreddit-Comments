It would be nice, but for the moment that does not match with my use cases. The implementation of the number class now heavily depends on the fact that the underlying number is a float, so I should first extract an interface from the number class (that is anyway a good thing) and then give a diffrent implementation for bc numbers. However, I will certainly consider this in future developments
Benefit? or Detriment?
This is my #1. The reason to add getters and setters is to encapsulate the internals of a class - meaning down the road you can change how it works without changing the API. If you expose public properties now, if you change the internals of the class you break any class using that. For example, if your class stores its date as a Unix epoch number, people would call: $foo-&gt;date = 1378480503; Now suppose you wanted to change that to a DateTime object. Now every class that uses that needs to update to call: $foo-&gt;date = new DateTime("@1378480503"); So to avoid that headache you generate getters and setters for each property and your code balloons to hundreds of lines of code that don't actually do anything. Adding Property Get/Set syntax would allow you to update property getters/setters while changing their internal representation.
You should really have considered doing this with a throw-away account, since a quick 5-second Google search yielded your name.
Thats kind of the point of relational dbs is so you can relate tables... 
Have you read [this overview](http://www.reddit.com/r/PHP/comments/1jo517/multithreading_in_php_with_pthreads/) of the [pthreads package](http://pthreads.org/)? It makes a pretty strong argument that PHP supports true asynchronous programming.
You should x-post this to /r/symfony as well, we're always in need of new content
A class which handles relevant output types as opposed to controlling this in an Action. So if you have a JSON response, then the view class handles and formats/styles the output appropriately, not just setting up a Response instance in an action. If you have a HTML response, then the view prepares a template for response.
Give it a rest already. Your IDE should auto-complete this for you as well as tell you what parameters are expected. If you're not seeing this it's because you're using a text editor instead of a proper IDE.
Makes sense! I'll keep this suggestion in mind. Thanks for helping us!
I left when I saw all the statics.
I personally think ... with my years of experience in various languages I say: there are many things to change in PHP to take a serious and professional course, and the first is check if the core devs are keen to hear the php devs.
Me too, I didn't quite understand the objection in that article to strict type hinting - unless it was implemented for every existing function in PHP, in which case it would suck. Leave the *optional* strict type hinting to userland code and it should be fine. It's possible I'm not seeing the real problems here, though, and I do trust Nikic's opinions :) 
How would you tell the difference between variables, functions and calling functions by variable? function leaveFunction() { echo "Goodbye cruel world"; } function foo(){ echo "Hello word!"; } $foo = 'leaveFunction'; foo(); //Calls the function `foo` $foo(); //Calls the function `leaveFunction` And if you say "you shouldn't have clashing names" I will scream.
&gt; His typing skills are very poor Typing skills have nothing to do with quality of a programmer. If you're working in a modern ide (or text editor) your completion combo, tab, space, and return should be used more than any typing. It's not like you should be typing out long 3 line SQL queries and then every time you run one not use a concise function to parse the results. And in the cases that you were, thinking about the SQL and Code should be much slower than the slowest of typers.
Thanks, will give it a try =)
lobotomized cave-dweller, funny. I am not familiar with that syntax, can you send an example?
Because most of the content in those books are pictures or stories. I still like them though.
openssl_random_pseudo_bytes(), as is, is not suitable for random integer generation. Random min-max integer generation requires some special care to do right. Also, it is actually guestionable if openssl_random_pseudo_bytes() is safe to use at all. See my comments on https://github.com/ircmaxell/random_compat/issues/2 especially the second comment (and the linked article about OpenSSL).
Fair enough. I'd say that from a technical point of view the implementation of this would be exactly the same: targeting the parameter instead of just letting it slip into place in order. But it does avoid the need for syntax. My last comment is: this looks awesome, either as a replacement to - or an alternative for - named parameters. But it can still be done as a follow-up to everything else with no issue of BC or syntax change :) &lt;/shutsup&gt;
You are right about the clashing names, of course. I hereby change mysuggestion to make the dollar sign mandatory when calling functions. In all other cases the dollar sign is optional. With this changes to the suggestion, you example should work as before.
Every time you catch an exception, you have a wonderful opportunity: try { } catch(Exception **$ex**) { }
listen to this guy
And just to expand on that, the senior dev might be trying to pass on the "let's just calm down and get the work done on schedule" attitude on to the junior dev and being misinterpreted as being incompetent/lazy. ^^Or ^^he ^^might ^^just ^^be ^^incompetent/lazy.
I think the best way u can achieve smth lke this is browsers localstorage . U save it everytime users clicks on filter. And read it when the pase is loaded.
That is really up to you, lol. I would avoid C# for small stuff because with .net it has a huge overhead. But PHP, Python, Ruby... all good choices!
I'll just quote something you wrote in the autoloading topic: &gt;I don't think this discussion was about technical issues. Let me summarize the main discussion points: &gt; &gt;* "This will make function calls slower!". &gt;* "Will you put every function in it's own file?!". &gt;* "Just use static methods instead". &gt;* "Which function is autoloaded?" &gt; &gt;Of these, only the last point has been of any benefit to this discussion. &gt;There has also been some minor discussion regarding the API, which is also relevant. &gt;But why does 80% of this thread deal with performance (known incorrect assumption), unreasonable suggestions of function-to-file mappings (even though alternatives are known) and suggestions to just not use functions? &gt;It's really hard to fish out the 10 relevant mails in a discussion spanning 70 in total. &gt;[...] &gt;Discussion is always very circular, covering issues that have already been addressed (usually even written down in the RFCs). Typically this kind of pointless discussion happens between just three or so people and fills the largest part of the thread. Stas is usually one of those "three" people, though of course I will not imply causation from correlation.
This a million times. It's the thing I miss the most when switching between Java and PHP.
Came here to say this.
This is actually implemented exactly as you suggested in the new named parameters RFC: https://wiki.php.net/rfc/named_params
Why? Is the next question. You're relying on behavior, implementation details Those "could" change in the future right? Data abstraction... Why not just use the standard time tools? I haven't had my coffee yet. Am reading this on my phone while car being washed. So if I'm unclear or way off cause I'm not awake enough. That's why. 
 $foo[bar] = baz; That is the wrong way to write $foo['bar'] = 'baz' (strings!) and will generate warnings, but will also (unfortunately) work. So you know someone out there is using that for mission critical functionality. It would be a backwards-compatibility break if they interpreted bar and baz as variable names instead of strings, and RFCs that break backwards-compatibility face an uphill battle.
Yes please. And ideally $foo =&gt; 'bar'
To reference another thread, it's THIS kind of attitude that's so prevalent in the community that keeps people from trying to contribute.
Complete agree. I am by no means suggesting this is how to *create* a timestamp. This was only an exercise to answer the question. That is, see if I could extract a timestamp from `uniqid()`.
I jumped in here to say exactly this. I'm saddened by the rabid "love it or leave it" responses, but I can't exactly say I'm surprised. Almost makes one want to start up a new project.
As long as any syntax other than `$foo = 'bar'` is used there is no backwards compatibility issues in userland.
Is that a literal $foo or the value of $foo? If $foo has a value of 'baz' I would expect that to call 'baz' =&gt; 'bar'.
and a plethora of other information...
Thank you for this..works very nice for complex queries 
SI prefixing for binary units ? Look at Math::unit() here: (I posted this here a couple of months ago) https://github.com/gamringer/EmyliePHP/blob/master/Emylie/Math.php
This looks great! I like the alternative syntax proposal using the colons, it's more compact and differentiates visually from the array syntax: `test(foo: "oof", bar: "rab");` Though that suggestion says it cannot use keywords, is it not possible to allow quotes on the parameter name with that syntax as well? e.g. `test("foo": "oof", "bar": "rab");`
I would also expect that rather than setting the parameter 'foo'. Even if setting which named parameter to override by parameter isn't going to be possible in this iteration of named parameters, the syntax chosen shouldn't prevent it for future versions of PHP.
Syntax seems nice. Dislike a few things, though: * The proposed fatal errors-- should be warning/notice instead. * Needs some sort of dynamic support-- should be less of an issue if the [argument unpacking](https://wiki.php.net/rfc/argument_unpacking) RFC makes it in. New syntax will prevent the code from running in older PHP versions-- so some sort of alternative for call_user_func* would be useful. * Shouldn't need to throw an error on interfaces-- instead of erroring, the alternate code path could check inherited property names to match them up. tl;dr Less errors, more dynamic.
If this get's implemented in 5.6 or 5.7 with the `foo =&gt; "bar"` syntax ^1 I'll buy you ~~a beer~~ an entire goddamn keg /u/nikic!. You are my favorite core developer! [1] ... and without `"foo" =&gt; "bar"` because `"foo"` is a string literal which makes this syntax confusing
Models should not save themselves. ActiveRecord is fine until your code base grows larger, and actual model responsibility (business code) gets mixed up with the database code. Repositories keep these responsibilities separate.
The current RFC takes care of this nicely: &gt; The current implementation (and proposal) support the following two syntaxes for named parameters: test(foo =&gt; "oof", bar =&gt; "rab"); test("foo" =&gt; "oof", "bar" =&gt; "rab"); So thats clearly obvious what is going on, avoids keywords and could easily (or already does) support interpolation for the named parameters: test("{$foo}" =&gt; "oof", "bar" =&gt; "rab"); That's just how strings work, so its nice and consistent. Remember, it doesn't need to be $foo when calling because its not actually a variable at that point. You are setting a parameter, which is assigned to a variable inside the method.
Honestly, I don't even see the dollar sign anymore...ಠ_ಠ
Why does it need to differentiate from array syntax? I'd rather use consistent symbols than invent new syntax. If PHP arrays had short assignment (i.e: `['foo': 'bar']`) then this syntax would make sense, but then we're back to "it looks like an array". This essentially IS an array, its just syntactically representing an $options array (with all the benefits syntax provide over arsing around with arrays). 
hah, i never caught that. I always name it $e
I agree 100% here. Keep it PHP-like rather than try to make it "new" for the sake of making it new.
Fair enough, I thought it might get a little confusing when you're actually passing arrays as parameters as well, but I suppose it's roughly the same either way. I really wish PHP arrays did have short assignment, but that's an entirely separate argument. ;)
Same here. I'm not personally a fan of the array syntax (A barely justifiable personable preference), but it would make sense to use a convention that people are already used to and understand. Adding new syntax operators doesn't really seem justifiable. 
Filed under "that was interesting" and "why uniqid is a local uniqid and not a guid" and "do not use uniqid for sensitive stuff like encryption". 
Agreed. In over a decade of PHP I've never used `uniqid()`. The very docs seem to discourage its use.
I understand the rationale behind it, but ideally it should be implemented in a way that the engine can differentiate between, say, `function foo(switch =&gt; 10)` and `switch($foo) {}`. I'm always accused of being a PHP-hater when I say this, but the fact that the engine cannot differentiate these two things speaks volumes about PHP's core. :(
This is really really sad. ircmaxell and /u/nikic are the only core developers who seem to have a decent, well thought vision about how to shape PHP's future. I hope he would reconsider. PHP needs *more* people like him, not less...
(I'm talking out of my ass here, so correct me if i'm wrong) but I think the issue is less that they "Can't" do it and more that it's not a good idea. There are a few instances where keywords are used for multiple purposes (use is one) but it can quickly get difficult to understand. For example, now you would need to document that "Switch starts a switch statement, unless it's the name part of a named parameter" Also, it would make syntax parsers that much more difficult to code for. Overall, it's very little benefit for a lot of work and confusion.
Shouldn't the named parameter implementation just map the names to the positional arguments by name and then perform the call as usual. If there are any missing arguments without defaults, then trigger an error before he call is made. This wouldn't require verifying that thousands of internal functions work or changing any internal structures. It's possible to implement a call_user_func_array_byname() right now using reflection. Wouldn't named parameters be implemented the same way but without the added overhead? What am I missing? 
To quote from ircmaxell's article... &gt;The mailing list is a nearly-impossible to navigate minefield of misinformation, misdirection and FUD. This is a problem. But the deeper problem is that the misinformation, misdirection and FUD are completely inconsistent. Every mailing list, Google group and news feed I've ever come across winds up in this state. &gt;Ideally, a community should be self-regulated. Where individual members call each other out for crossing lines or acting in a detrimental way. It's a function of the format where there's really no filter or means for the community to "self regulate". The most frequent and most vocal garner the most attention. I posted this in the other thread about participating in internals but there's a great discussion platform that would really help filter the noise. https://github.com/reddit/reddit
&gt; Overall, it's very little benefit for a lot of work and confusion. You know what? Agreed! You changed my view. Δ But still, the `"foo" =&gt; "bar"` syntax should *not* be included, for the same reason you mentioned. If it were to go through, we'd need a doc saying: *`"foo"` is a string, unless used as the key of a named parameter in a function call.*
And there lies one of the infamous problems with this RFC. We can't seem to come up with a good way of showing it.
I find this syntax the most internally consistent: test($foo =&gt; "oof", $bar =&gt; "rab"); test("foo" =&gt; "oof", "bar" =&gt; "rab"); It has the following features: * Allows use of keywords (given) and therefore doesn't encourage the conditional hacking of encapsulating the parameter name with quotes (**especially** important for future extensibility, if new keywords are added - could break code if you don't have some sort of token to distinguish it!) * Looks/acts most like typical array syntax without the need to surround with array(...) or [...], so it's internally more consistent syntactically. This just makes it easier to remember and thus more natural. * In this case, usage of `=&gt;` would have special meaning by telling the interpreter "I want *this* variable to use *this* value/reference," again sort of like what we do already array definitions. Unlike arrays, however, the "key" in this circumstance (foo or bar) wouldn't be dynamic in anyway, nor should they be per se anyway (at which point you'd definitely be passing an associative array instead). Thoughts? 
I guess it's just been a vocal problem for this particular one.
Should probably delete/link/move the old RFC https://wiki.php.net/rfc/namedparameters
Well, you could make the same case with constants, given the logic that `$foo` looks confusing (i.e. named param of `foo` could be a constant defined somewhere). You can have lowercase constants, keeping them uppercase anyway is simply convention. Plus, the dollar sign tokenizes that named parameter such that it's obviously not going to conflict with any keywords as far as the *interpreter* is concerned. Unfortunately, the problem with that means that any future upgrades would much more easily cause conflicts moving forward if PHP added a new keyword (not just existing keywords) that happened to be a name of a parameter in someone's function definition, which was then called by using the named parameters. That and then you're not having to worry about implementing one feature (e.g. `foo =&gt; $bar` without having to then also implement the caveat workaround e.g. `"foo" =&gt; $bar`). So I'd say (as in [my previous comment here](http://www.reddit.com/r/PHP/comments/1lv1dg/php_rfcnamed_params_php_wiki/cc33lul)) that `$foo` in `$foo =&gt; $bar` is definitely in reference to the function definition's `$foo` and you're only taking in the value of `$foo` in the current context if obviously you don't incorporate the very special `=&gt;` symbol. You can at least be certain that the `$` token prefixing `foo` will guarantee that it will not throw any errors in the interpreter and at that point, it's simply just knowing two things: 1. You can have named parameters 2. Those named parameters are in reference to the parameter (`$foo` in this case means `$foo` as named in the function definition) And that's it. 
This is what I vote for as well. Better, more regulatable discussion forum for internals, where noise is down voted and important valuable discussions are brought to attention. To prevent it from becoming a popularity contest, down voting could work like HackerNews. Modern issue / bug tracker is also a must have, so patches can be sent along with RFCs, and everyone can contribute fixes on those patches easily.
No offense but that example use case is so damn terrifying! I vote for NOT allowing variable string replacement explicitly. Also, since there's no backward compatibility to consider, just disallow keywords as named parameters. The developer should know better, like you can't name a method "new", you can't have a keyword as named parameter! You can however use _new... ;)
This is so true. My first and only foray into internals was a disaster, and it has made me never want to go there again. If anyone has known me, I contribute PHP support in the freenode php channel. I help out a lot of people. When I saw a constant stream of people having the same problem over and over again, I thought something should be done. So I took my suggestion to internals. First I was greeted with "Who the fsck are you?" attitude that basically gave a feeling like I was entering in a strict meritocracy, that if I didn't have a big enough phpness my points were worth crap. Then came an influx of a flame war from some of the main contributors, I'm talking about people like Rasmus and Zeev out of all people. But some good came out of it, I was persistent and I argued my points that silenced the trolls. I then was able to have a constructive conversation that pointed out that my solution that I was suggesting had some problems, I got the ear of one of the more decent PHP contributors, and we came up with a comprimised solution that solved the issue, and didn't break BC. I finally saw my vision realized in 5.4. What I fought for was for ended up as more clear error parsing messages, that shows not only the token name (that can be very confusing like T_PAAMAYIM_NEKDOTAYIM) so that the error messages also have a representation of the token they represent, to make parsing errors more clear and less confusing. Even though my efforts were successful, the trolling and short sitedness made me never want to contribute again, despite my long laundry list of ideas to improve the language.
&gt; As this is a very complicated feature I do not wish to spend time finishing it without knowing that we actually want this feature. Hey, I'm a little new to "paying attention" to what's going on in internals and the PHP community as a whole so pardon my ignorance here, but from what I can tell the community is pining for this feature. Although the feature may be complicated, I don't understand where the confusion is as to whether or not the feature is wanted. Am I missing something?
Thank you.
Add object notation like JSON. $foo = { bar: 'baz', }; Currently we have to do: $foo = (object) array( 'bar' =&gt; 'baz', ); It is more clean to do things like this: $obj-&gt;setOptions({ opt1: 1, opt2: 2, }); It is more faster too, because with the array notation, first we must be created the array and then cast it to object....
Thank you for not giving up :)
Already enough reasons not to even submit an RFC... Imagine the drama! ;) hide!
http://www.reddit.com/r/PHP/comments/1ltulg/what_single_feature_do_you_want_to_see_added_to/cc34cu8
We should indeed KISS. (forgive me it's friday)
can i get you some haystack with your needle? or would you like some needle with your haystack?
This isn't really PHP related whatsoever but I'll give you a quick option seeing as I just took 60 seconds to look at the demo page source. First create a link or button somewhere in the page, then a method to extract the currently selected filter (may already exist in the library but I don't know so I just made one), then send the user elsewhere when they click the button. I created a little code using the HTML that the demo you linked generates, it seems to work pretty well, if you take a look at the source it's pretty easy. Doesn't work great with the :not filters but generally does the job. http://jsfiddle.net/G6bhX/1/ Edit: Sorry, after rereading I think I misunderstood, sounds like you can already do this but want to set the value based on some parameter from the URL.
&gt; So if I'm unclear or way off cause I'm not awake enough One of the points is that `uniqid` is *based* on a timestamp, so using it for anything *remotely* important or even exposing it to end-users can be a horrible, horrible mistake. In fact, `uniqid` uses the same timestamp-based mechanism as PHP used to use to seed `rand` and `mt_rand`. This means that [exposing `uniqid` to end users could let them guess random numbers](http://programmers.stackexchange.com/a/76241/19717). While the seeding has been fixed in newer PHP versions, it's still a bad thing. **tl;dr**: `uniqid` is shit and you should never use it for anything ever.
http://imgur.com/VxVafxP :)
That example is not as terrifying as the following, which is equally valid in PHP. $foo[func()[0]-&gt;bar['tuesday']]["{$baz}"] There is what you can do, and what you should do, and forcing arbitrary rules on what you can do in a language is not just pointless, but damaging too. The parser currently has a lot of flaws, and this RFC proposes a solution to work its way in around those flaws. In the future (PHP 6?) maybe the parser could get the long overdue rewrite - but until then (as I understand it) it's just not possible to magically "disallow keywords as named parameters".
The only thing I know is that some core devs always vote "NO", we all know who they are .. now that? not know?
Obviously constants are as much as an issue as keywords, but you're going to bump into variables or constants either way. The proposed solution allows literal strings to be passed in to avoid keywords, and it avoids constants just as well. _Hopefully you wont need to use it all that much, as why do you have that many generically-named lower-cased constants kicking around in your global namespace (and remember, they're case sensitive)._ With the "use strings if you have a conflict" approach you can avoid all problems. So I'd rather avoid occasional constants and keywords, than have to try to avoid variables. define('foo', 'someshit'); test(foo =&gt; "oof", bar =&gt; "rab"); // Some sort of error test("foo" =&gt; "oof", "bar" =&gt; "rab"); // Lovely goodness Or the `$` approach: $foo = 'someshit'; test($foo =&gt; "oof", $bar =&gt; "rab"); // God knows test("$foo" =&gt; "oof", "bar" =&gt; "rab"); // Still god knows test('$foo' =&gt; "oof", "bar" =&gt; "rab"); // Probably avoided it Clashes with keywords and constants will be much fewer, and painfully more obvious when looking at the syntax what is happening.
You're missing something and so is everybody else. There are multiple sources where people say something along the lines of "This conversation has been had many times and its always no", but I'll be damned if I could find anything that represented an actual reason. There were 2 bug reports (^[1] ^[2]) and 3 threads on internals (^[3] ^[4] ^[5]) that all got shot down by somebody just screaming NO WE DONT WANT IT LOOK and linking to the [minutes from Paris in 2005][6] (just like the [old RFC](https://wiki.php.net/rfc/namedparameters) used to) or the conversation just ending dead. If anyone can find a useful, intelligent conversation about named parameters that ended with a valid reason showing why they should not be implemented I'll be happy to see it, but so far it seems like there has been a ghost argument used to scare people off the conversation, perpetuated by developers for over a decade (intentionally or otherwise). [1]: https://bugs.php.net/bug.php?id=12712 [2]: https://bugs.php.net/bug.php?id=22216 [3]: http://grokbase.com/t/php/php-internals/054jk6kn4s/named-parameters [4]: http://grokbase.com/t/php/php-internals/1042mr8yrn/named-parameters [5]: http://grokbase.com/t/php/php-internals/10amp46axn/skipping-of-defaulted-parameters [6]: http://www.php.net/~derick/meeting-notes.html#named-parameters
Yes.
Thanks for the reference! 
Not every manager is the pointy-haired boss
I agree completely and advocate for the first version: test($foo =&gt; "oof", $bar =&gt; "rab"); It looks like existing variable syntax (which is what the named parameters will be in the function scope), allows for keywords, and won't be confused for an array (which why I don't think "name" =&gt; "parameter" is the best syntax) and would not conflict with anything else in the parser.
The problem is that the `$foo` syntax might initially read as if "I want the value contained in `$foo` to be the key in this array pair." It could be very confusing for new users and can easily introduce human parse errors. Barewords or Ruby-style `:symbols` don't have the ambiguity. `:symbol` also, as noted in the RFC, avoids keyword collisions.
As devil's advocate for my own idea (and [see my latest comment here](http://www.reddit.com/r/PHP/comments/1lv1dg/php_rfcnamed_params_php_wiki/cc36egp) which elaborates): I thought there was a possibility that this could get in the way of having dynamically named parameters at call time (that is, not resolving the value of `$foo` in `$foo = "bar"` prior to executing the function call). However, I still feel as if passing an associative array, similar to the commonly accepted practice in JavaScript with their anonymous objects used for passing settings, is a fantastic approach to this (thus allowing the `$` token and maintaining internal consistency which **PHP needs so badly**). I'd simply suggest simplifying and then standardizing the merging, exclusion of invalid params and then setting of defaults by delegating/abstracting that out to a new PHP function. Only because: 1. It's not possible (except with `extract()`) to create your own function that modifies the variable scope of the calling function/method and 2. It would be commonly used anyway, at least in edge cases, and would encourage more standardization like what we see with jQuery and their plug-ins. See what I mean?
I love you
Well, my point is that PHP already has that with the dollar sign, plus it is matching the function definition. Having named parameters is *new anyway* and so throwing in a `=&gt;` in a function call's parameter list could just as well cause a sort of "human parsing" error. The difference is that, *once you learn* that you have named parameters with `=&gt;`, you also learn that: 1. The left side refers to the function definition's variable and 2. The right side refers to you current variable/value. And then you remember it just as easily because it follows commonly used syntax (and logic) already extant in associative arrays as well as `foreach()` iterations. You're not learning of any other **extra** stuff (new tokens or formatting) or caveats (allowing literal string constants to refer to the named parameter in the case of keywords if you go without the colon prefix, that is). [This comment](http://www.reddit.com/r/PHP/comments/1lv1dg/php_rfcnamed_params_php_wiki/cc36egp) and [this slightly newer comment](http://www.reddit.com/r/PHP/comments/1lv1dg/php_rfcnamed_params_php_wiki/cc36vg9) elaborates on the concept of having dynamically named parameters (where you *would want* that first `$foo` to evaluate prior to the call). **EDIT:** By the way I'd like to point out that I'd still much prefer to see the use of the colon prefix instead of not having that at all, because: 1. There should probably only be *one* method of defining the parameter name and 2. We should ensure that now and in the future those parameter names you're using in your existing code should not conflict with current or future added keywords (again, visually, since they could simply write the interpreter to not parse keywords in that area). 
I don't understand your reasoning here. Why wouldn't `"foo"` as a named function parameter be a string? I'm pretty sure everyone has been operating under the assumption that it would be (see /u/philsturgeon's hypothetical above related to variable interpolation, for example).
I think in the case of $foo = 'someshit'; test($foo =&gt; $foo); // == test($foo =&gt; 'someshit'); not test('someshit' =&gt; 'someshit'); that it's obvious to someone who has read the "enigmamonkey" spec, that the first $foo refers to the function-local variable $foo and the second refers to the value of our current scope's $foo. It's not hard. Would you assume that $foo = 'someshit'; function test($foo) {return $foo} would always return 'someshit'? You would not. I support calls like this 100%
ah, i see an index.php file. So my shared folders are actually being shared. that's good. What can i try to get it to display in my browser?
Why does this support barewords for the keys when arrays still don't? Seems like adding a pointless inconsistency to me.
Project Manager here. This is actually quite common. Don't think people don't notice though. Pay your dues, work hard, and chances are you could end up having his job after not too long. The only thing you need to remember is to not get discouraged if you get fired/terminated. If you're working hard and making an effort and they still let you go, they'll be the ones that are worse off in the end. Take it as a learning experience and move on. 
I prefer not to get involved with projects that too many people have opinions on. When you have an opinion, regardless of whether or not it's correct, you assume it to be. It does nothing but breed drama, and I don't have time for it.
No. You should definitely go with something more descriptive. Additionally, `$lookupTable` is fine, but I would argue that you should go in order of importance and use `$tableLookup` instead.
_Unpopular Opinion_: They both suck. I usually use Sublime Text 3, and Zend Studio when I need a full IDE. I call it the "power combo."
I just started it late this evening. Built using Codeigniter, its code is up on Github now at https://github.com/murrion/codeigniter-gherkin-generator
Second on Guzzle.
http://i.imgur.com/SvZVjBO.gif
&gt;Sorry, there are currently no jobs that match your search criteria. Please try again. Fuck Disney.
That wasn't what I meant with respect to confusion and inconsistency. Consider: // foo = 'bar' {foo: foo} // {foo: 'bar'} vs. // $foo = 'bar' [$foo =&gt; $foo] // ['bar' =&gt; 'bar'] JavaScript doesn't have the ability to use unquoted syntax to assign dynamic hash keys like PHP does. If we were to go with the `$foo =&gt; 'bar'` syntax for named function parameters, then we'd have the following confusion/inconsistency: // $foo = 'bar' // function baz($foo) { ... } [$foo =&gt; $foo] // ['bar' =&gt; 'bar'] baz($foo =&gt; $foo) // baz('foo' =&gt; 'bar')
You should look into Webshell.io. It's basically an API for APIs. They make it really easy to integrate your app with many of the current social media websites, [Facebook included.](http://webshell.io/explorer/api/name/facebook) It should at least get you started. Example: http://i.imgur.com/ONPQLGN.png
It's confusing because PHP *already* does the same scenario differently for arrays. `[$foo =&gt; $foo]` does not expand to `['foo' =&gt; 'someshit']`, it expands to `['someshit' =&gt; 'someshit']`. To do this differently for named parameters would be confusing and inconsistent with how PHP already works.
Check it out on line 215: https://github.com/laravel/framework/blob/master/src/Illuminate/Database/Schema/Blueprint.php Beginning to remember why I always maintain my own MVC framework...
literal, but didn't quite think it through. So I guess I agree with 'baz' =&gt; 'bar'. Though to be honest, compared to say .NET, any implementation in PHP is going to be odd looking. But among those, =&gt; imo fits the best.
Because I would only program in C if someone put a pistol to my head. On the other hand I try to run the tests for every release and contribute back that way by sending the report when something breaks.
That's not from where the term relational comes from... http://en.wikipedia.org/wiki/Relation_%28database%29
So you've met the terrible job search engine finally. Best recommendation then is to contact a recruiting company and get them to notify you of Disney jobs matching your criteria. Disney is always hiring contractors but sometimes those jobs don't get posted (rarely).
Enum's, with typehinting support.
&gt; Where PHPStorm shines is with all the integration and nifty features it has, yet still manage to stay lightweight. He was referring to how you use the NetBeans IDE because if you don't take advantage of the features beyond an editor, it is approximately the same as using PHPStorm.
You should try the vim plugin for PHPStorm. There's a few minor bugs and other annoyances, but for me it's a hell of a lot better than the default editor. Enough so that I made the switch from vim full time to PHPStorm+vim plugin full time, and have not looked back.
Also came here to say this. If I never had to write $this-&gt;someFunc(null, null, null, "not a default") ever again that would be nice. Arrays are not a solution.
Yeah the ideavim plugin is good. The only real annoyance I have is the responsiveness of the escape key, sometimes it just doesn't work lol
So I guess you don't know that Zen Studio is an IDE? I guess... And people keep suggesting Sublime Text because it's a bad ass file editor. You __don't__ need an IDE all day 'erry day. You just think you do. The majority of programming can be done in a normal text editor like sublime, and then when you're ready to test, you load up your IDE and begin unit testing, ect. It's more efficient. You're not working with bloat. I have an octo-core clocked @ 3.2GHz with 16GB of DDR3 and it takes about 15 seconds for a full fledged IDE to load up. Too long for __most__ things. I need an editor and I need it now. Sublime loads in less than a second. It's a pretty natural choice. __EDIT:__ |Editor|Time| |:--|:--| |Zen Studio Professional 9.0|43.518 seconds| |Sublime Text 3|0.352 seconds|
Meh, I have a fulltime job that I'm happy at. I was just checking. Thanks though.
Do you see a 192.x address?
I would argue that PHP "Already works" like this: function test($foo =&gt; 'someshit') { ... } And I would prefer to keep that format for calls as well: $result = test($foo =&gt; 'differentshit'); instead of the "more typing" $result = test('foo' =&gt; 'differentshit'); or "there go my possible variable names" $result = test(foo =&gt; 'differentshit'); I'm not saying you don't have a valid argument; you do. I would just prefer to do things the same in both the definition and the call because that's what I'm thinking of when I write this stuff, and what I am reminded of in cases where I have code-completion and hinting.
**Plethora.**
i have a couple. [here's a gist](https://gist.github.com/dadamssg/6472327)
what is it?
Well, it doesn't really matter. You've proved your ignorance when you resulted to personally assaulting me. Which is whatever -- I don't care much. But let's just take a second to realize what's happened here. I posted in your thread something that I believed would be helpful. You responded negatively and accusatory. I responded to your rebuke with some solid evidence of a general use case of an IDE vs a properly developed text editor for working with code. You rebuke by insulting my intelligence. _So is this how you ask for help?_ Cause it seems pretty fucked up if you ask me. _____________ Additionally: * [Symfony2](https://sublime.wbond.net/packages/SymfonyCommander) * [Intellisense](https://sublime.wbond.net/packages/SublimeCodeIntel) * [Git](https://sublime.wbond.net/packages/Git) So in this thread you've proven your ignorance towards people who are trying to help you. Proven that you're willing to bash others on subjects that you've not done enough research in which to confirm whether or not you're correct, and proven that although you know how to code you've forgotten the single most important thing about technology. It's always changing. Sticking to a single solution is stupid, and totally against everything that you've been formally taught about technology since primary school. __You're__ the idiot.
If you did a kickstarter to pay for future forays into that morass, I would contribute.
Go to php.net home page and look for a 'get involved' 'contribute or 'community' link. You won't find it. Go to perl.org, python.org, haskell.org... you will get a prominent 'Get involved' or 'Core development' link pointing to a page with all the pointers needed to participate into the community. After close to 20 years of existence, the PHP project still hasn't put any call for contribution on its front page. I love PHP, but php internals is definitely a private club which doesn't want new blood. I mean, which major open source project doesn't have a prominent link on its homepage with a decent section behind asking for contributors? The whole homepage of php.net is weird anyway, how comes the only two links in the community section are not about PHP at all? Where are the links to the real PHP ecosystem? In the end, it's just normal that PHP lacks contributors since there is no action to change that, the switch to github has probably done more publicity to get contributors than php.net in all of its existence.
My vote is that HipHop VM becomes the new standard runtime. The Facebook team seems to be very interested in modernizing PHP and making it *fast* with JIT support. It already has scalar type hinting, async support is coming, I am sure named parameters could be in it's future too. Lots of good stuff there when you enable HipHop extensions. The code is C++11, and is very easy to read. Check it out [here](http://github.com/facebook/hiphop-php)
Screenfony released this today https://www.youtube.com/watch?v=LfUubn4PrlI&amp;feature=c4-overview-vl&amp;list=PL2402FDB7CD6FB468
I'd argue that "table" is unnecessary, and it's better to make the name more descriptive -- what's in it? I recently named a variable $seriesLookup, for instance.
If you create a Vagrant directory in your web root, and run Vagrant Up out of it, then use ../ as your Box Sync Folder Source, then /var/www inside your VM will be your entire web root... score!
In your example, I would imagine `$foo()` to throw an error, since foo was redefined as the String 'leaveFunction'. You can't "call" a String. `function foo()` should actually create a variable called `$foo` and assign it to `function() {}` like in JavaScript. I never understood why PHP has such a convoluted distinction between functions and variables. Why aren't functions first-class citizens?
I'll have you know, those lobotomized cave-dwellers are still very much employed. They work on TYPO3.
http://www.php.net/intl ?
threading from userland and async features have little to do with each other. As it is already to do many async ops using streams, the way it is implemented really needs something more userfriendly.
Same here, it's a real programmers framework. With a proper and fully baked dependency injection system you just rip the shit out you don't need and inject the stuff you do need. Once you get to know Mr. Phalcon, you'll never want to go back to anything else. It's just f'ing awesome. 
Oh sweet baby Jesus. *voicing Ricky Bobby* I'll cry glorious tears of joy if this is accepted.
Try change your Vagrantfile IP to 192.168.1.200 and then vagrant reload. Then visit that IP on your browser.
&gt;Curious how many long term Netbeans users have made the switch, and why. Wow. That's the only thing I can actually muster to say right now. Making a thread, and being confrontational in it to the point where you need to delete your replies so you stop getting downvoted should tell you how much of a cunt you've been. You should really evaluate your attitude. It doesn't matter if you have the highest IQ on Reddit now, you'll forever be for anyone who replied in this thread, a fucking idiot.
I have updated the article to (mostly) comply with the guidelines (my quota is nowhere near used).
Right, they are only variables when they are passed into the function. They are arguments until then, which so far are represented purely in sequential order. There is no idea of them being variables until they are INSIDE, so anything outside is irrelevant. 
This will not give uniform distribution on all arbitary ranges. The bias is not huge, but nonetheless it occurs (on certain rangess): floor(($num / 4294967295) * $max) It is a PITA to test, but if you use smaller numbers on your formula, you can see the varying.
IMO... Seeing 3 tasks like this looks like a very long one. I think building just a simple app would already suffice what you are looking for. Make it into1 task which covers all of those three. Lazy people like me hates tests since we are already doing it and already earning as freelancers. But I do understand that it is one way to test applicants if they know what they do. 
&gt; doesn't handle internal functions perfectly That's a bit of a euphemism imho. It only handles some narrow use cases (where you do not skip optional arguments and as such likely wouldn't use named params anyway). Of course, if you actually tried to use that code in practice, you'd soon go crazy because the parameter names you use all seem to be wrong (due to old arginfo...) But yes, if you don't handle internal functions (properly), the feature becomes a good bit simpler technically. The hard part of it is really the internal function support.
I agree a lot that a mailing list is a very poor tool for these kind of needs. An alternative to Reddit would be [**Discourse**](http://www.discourse.org/), which is a forum, but a nice one. Features like branching of conversations into sub-conversations would help a lot to keep discussions organized.
Exactly where do I ask for help? I'm asking for others to share their experiences. I'm asking for specific experiences with specific IDE's. Chiming in with "I USE SUBLIME LOL" or "DO YOU EVEN IDE" is just retarded. Really. If I asked for people who have lived in Canada and then moved to Fiji, and whether they liked it or wanted to move back to Canada, would you say: "They both suck, but try Iceland, you don't need Canada or Fiji if you do Iceland."? Worse, would you add ridiculous facts into the mix like: "If you travel from Reykjavík to Canada it takes 43 seconds, but to Iceland it only takes .3 seconds!"? Also not really sure what you're on about re deleting posts. Not something I do. It's an anonymous internet forum for fucks sake.
well so what should i use to program a imageboard like 4chan i mean i need to do some database stuff... 
At work, everyone used Netbeans. I use PhpStorm and I absolutely love it. 
This blew me away when I first saw it in Python. Thanks, /u/nikic!
I tried phpstorm briefly but went back to netbeans. My coworker did the same but stuck with phpstorm. He claims it's faster, but every new or cool feature we found in phpstorm we also found in netbeans. I couldn't find any reason to justify switching to a paid ide but it was definitely worth trying out, I actually learned a bunch of new netbeans tricks from it.
I created a theme for NetBeans that is pretty sweet. Check it out if you use NB 7.3 or later: https://github.com/elimc/ZenburnX
Just pointing out that netbeans also does ftp, ssh and has a fairly full featured database manager.
Question doesn't make a whole lot sense seeing as the latter is a subset of the former. 
Well, I think the whole point is that it does look like array syntax, so I don't see that as a bad thing. Line length is a good point, though I feel like a good portion of function calls that would make use of named parameters would probably be multi-line calls anyway: foo( 'bar' =&gt; 'baz', 'boz' =&gt; 'quux', 'blah' =&gt; $blah ); It's more to type, but it "feels" like PHP to me. More so than `foo:`, `:foo:`, and so on, anyway. Don't get me wrong, though. I'll take any syntax over not having named parameters at all.
Check out the FOSRestBundle it does pretty much exactly what you're asking for
This could fix itself if PHP had native **object notation** ala Javascript. JSON is *everywhere*, for the life of me I can't understand why devs still fail to implement this. 
Interesting, though it say it's for RESTful API's, the view layer should be for any situation. But thanks, I will give it a play, see if it can be expanded upon.
Curl is awesome. Thanks.
My first IDE was Zend Studio - back when it was a crappy standalone Java app. Then it moved to be a variant of Eclipse which made it much better but still heavy and clunky. Because of that I learnt a lot about Eclipse and found it to be a pretty interesting and useful IDE - but it was still pretty slow. I stuck with Zend Studio for Eclipse for several years, saw friends who used NetBeans but never really felt the urge to relearn an IDE when I had everything I needed. Eventually Sublime Text 2 launched at it was a revelation at how fast it was! However, despite buying it I could never really get all the features I needed out of it. It was fast, sure, but it felt it was only fast because it was a stripped down IDE. I can't even remember who recommended PHPStorm but I gave it a go and found it to be the best "heavyweight" IDE without losing speed. It's definitely fast enough and has all the bells and whistles I need. It still runs great on my 2010 Macbook Pro. Edit: I should say I've been using PHPStorm for just over a year.
He's saying the boss probably wouldn't know good code from bad code.
Smaller ranges? My comment in the code says whole numbers only though. I don't follow the problem with this.
Hardware Wars! Oggie Ben Doggie! Love the reference, have an upvote!
I mean it will not give exactly equal changes for all the elements in a specified range (for some ranges it will work, but not for all). By range I mean, if you use ie. 3 for the $max variable, the range is 0-2. A dirty code for the sake of example: &lt;?php $max = 3; $arr = array(); for ($num = 0; $num &lt; 65536; $num++) { $index = floor(($num / 65536) * $max); if (!isset($arr[$index])) {$arr[$index] = 0;} $arr[$index]++; } print_r($arr); This will output: Array ( [0] =&gt; 21846 [1] =&gt; 21845 [2] =&gt; 21845 ) So it will favor element 0 (small bias). 
Definitely, easy deployment is actually pretty crucial in a lot of environments. Installing PMA is a major PITA and considering it is less usable and actually lacks features in comparison to Adminer, I see no justification in how tough is to set it up.
You don't get it. If you implement splat as mentioned in this RFC then the naive implementation is to implement it just the same as call_user_func_array(). But if you do that, you end up with the same BC issues as call_user_func_array() with named parameters. From the named parameters RFC: "Adding support to call_user_func_array would break any code that's passing an array with string keys." This RFC needs to explicitly disallow string keys.
For better or worse, as long as using pthreads takes more effort than calling shell_exec(), it's not going to be the first inappropriate tool inexperienced programmers reach for.
You might change your mind the first time you have to debug something where everything was crammed in to one file. I'm not trying to defend PMA - it's pretty awful in its own right too, but this designed just as horribly and in some ways it's *even worse*. Please, do not take my word for it. Download it and actually look at the source. This should make any programmer or sysadmin stand up with a "*what the actual fuck?*" look on their face.
So what I'm seeing is the fact that $num can be equal to 0 will cause this. Well spotted good sir, thanks for the feedback.
&gt; Don't get me wrong, though. I'll take any syntax over not having named parameters at all. Same here, and I'm glad it seems it's the same on internals in most mails (a lot of discussions about the syntax, but everyone seems to agree with the proposal anyway)
I use PHPUnit to test backend classes and codeception for the frontend. If I misunderstood your question I apologize.
Whatever you have to tell yourself to sleep at night, broski. http://i.imgur.com/cSgl2I6.png http://i.imgur.com/NRsi9EO.png Additionally, yea, what I said would have been asinine if you were talking about locations, instead, you were talking about comparing two computer programs. I chimed in with my personal experience (literally exactly what you were asking for [also called 'help' by the way]) and told you that from __my personal experience__ they're both bad. You keep trying to salvage the situation, but you really can't, man. Just admit that you're an asshole, and everyone (including yourself) can move on. Simple.
Varnish, Nginx, PHP-FPM, APC, Memcached/Redis, Percona Server (drop-in MySQL replacement)
 $row = false; do { $row = mysql_fetch_array($resultSet); #do stuff } while($row !== false); Something like that would work and not put the assignment inside of the while statement.
I wouldn't count on it.
I'm not a huge fan of Drupal to begin with, so I may be a bit biased. Drupal in its current state with Drupal 7 has one big massive function orgy going on within itself and is horrible to troubleshoot and work with. Unless they have completely overhauled the Drupal core to the point it's a completely different application, it's going to be a lot of patchwork to bring it up to snuff. All that being said, Drupal is one of the better CMS platforms out there right now. :(
I've been trying all day to avoid Drupal because it's templates are pissing me off (how do you do partials???) but after going through every alternative I could think of I'm back to it. Because it already does the basic things like user creation, permissions, content creation, routing, all of that stuff that I'd have to do from scratch with any of those fancy new express js systems. I let Drupal do the boring stuff, use it as a REST server and I can spend my time working on the front end. Drupal + Knockout/Angular/Whatever frontend + Firebase/Mongolab/whatever field storage = fuck yeah She's a weird girl though. 
How does it not apply? Drupal 8 is the next iteration of Drupal.
&gt; Drupal + Knockout/Angular/Whatever frontend + Firebase/Mongolab/whatever field storage = fuck yeah You actually were able to get the jQuery ripped out?!
Well, they're not from me. I rarely, if ever down vote someone. Too many people around here that would rather down vote you and move and never say a word than have an actual discussion. :thumbs up:
My money is on *eval()* - on which that plugin relies- being disabled.
One thing I would like to see that would probably help me to take Drupal more seriously is if, in Drupal 8, I can have some separation between my code and the Drupal core.
I bet a werewolf would think otherwise. 
8 is a *major* departure from 7 which was itself pretty different than 6. You really can't compare the two.
You could if you wanted to, the admin part is always going to be jQuery but you can take the JSON output and do whatever you want with it. 
To sleep at night? Um, maybe you take the internet a bit too seriously. Interesting, I haven't deleted anything, tho it appears that way if I open a link logged out. Shaddow ban/delete or something? I'd screen it for you, but I can't be fucked tbh. &gt;You keep trying to salvage the situation But &gt;yea, what I said would have been asinine if you were talking about locations It's arbitrary, you think programs makes it different, it doesn't. It's like if I asked about sublime and a bunch of vi fanboys jumped in to tell me how great vi was.
The reason they turned into werewolfs in the first place was because of drupal.
Because there is no clean paradigm that allows your application to be extensible to the point that such CMS's offer. You can just throw at it with what sticks and that's that. However if you would want it to be better, than you'd need a more focused product; but at that point that software wouldn't reach the same user mass.
Reminds me of that Dilbert episode where he gets sacked, gets a job from the competitor's firm, ends up destroying the company, and gets hired back on his old firm because he's now a known engineer.
Yep, I think I was a little hasty, every other move (eg eclipse to netbeans) has felt great from the start, must be getting lazy. Re-installing OS today so will try not to install NB for a bit :)
This is where I'm at now, but you can see from the comments that we're the few and far between, so maybe there is something to it.
Make a custom template. 
 Below is an example of a codeception test. It will navigate to a webpage attempt to add a domain to the list by filling out the same form a normal user would. Then it checks to make sure the domain is now in the list. If it is in the list then it was added successfully and is removed. There are some other things going on here I'm not showing, but this should be enough to give you an idea. $I = new WebGuy($scenario); $VDStepObject = new \WebGuy\ViewDomainsSteps($I); $I-&gt;am('email marketer'); $I-&gt;wantTo('add an email domain to the system'); $I-&gt;lookForwardTo('use the domain in an outgoing email'); $I-&gt;amOnPage(\DomainsPage::$addEmailDomainURL); $I-&gt;fillField('email_domain', \DomainsPage::$testEmailDomain); $I-&gt;click('add_email_domain_button'); $VDStepObject-&gt;isEmailDomainInTheList(\DomainsPage::$testEmailDomain); Here is a simple example of a PHPUnit test from Idiorm. class ConfigTest extends PHPUnit_Framework_TestCase { public function setUp() { // Enable logging ORM::configure('logging', true); // Set up the dummy database connection $db = new MockPDO('sqlite::memory:'); ORM::set_db($db); ORM::configure('id_column', 'primary_key'); } public function tearDown() { ORM::reset_config(); ORM::reset_db(); } protected function setUpIdColumnOverrides() { ORM::configure('id_column_overrides', array( 'widget' =&gt; 'widget_id', 'widget_handle' =&gt; 'widget_handle_id', )); } protected function tearDownIdColumnOverrides() { ORM::configure('id_column_overrides', array()); } public function testSettingIdColumn() { ORM::for_table('widget')-&gt;find_one(5); $expected = "SELECT * FROM `widget` WHERE `primary_key` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); } public function testSettingIdColumnOverridesOne() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget')-&gt;find_one(5); $expected = "SELECT * FROM `widget` WHERE `widget_id` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testSettingIdColumnOverridesTwo() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget_handle')-&gt;find_one(5); $expected = "SELECT * FROM `widget_handle` WHERE `widget_handle_id` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testSettingIdColumnOverridesThree() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget_nozzle')-&gt;find_one(5); $expected = "SELECT * FROM `widget_nozzle` WHERE `primary_key` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testInstanceIdColumnOne() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget')-&gt;use_id_column('new_id')-&gt;find_one(5); $expected = "SELECT * FROM `widget` WHERE `new_id` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testInstanceIdColumnTwo() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget_handle')-&gt;use_id_column('new_id')-&gt;find_one(5); $expected = "SELECT * FROM `widget_handle` WHERE `new_id` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testInstanceIdColumnThree() { $this-&gt;setUpIdColumnOverrides(); ORM::for_table('widget_nozzle')-&gt;use_id_column('new_id')-&gt;find_one(5); $expected = "SELECT * FROM `widget_nozzle` WHERE `new_id` = '5' LIMIT 1"; $this-&gt;assertEquals($expected, ORM::get_last_query()); $this-&gt;tearDownIdColumnOverrides(); } public function testGetConfig() { $this-&gt;assertTrue(ORM::get_config('logging')); ORM::configure('logging', false); $this-&gt;assertFalse(ORM::get_config('logging')); ORM::configure('logging', true); } public function testGetConfigArray() { $expected = array( 'connection_string' =&gt; 'sqlite::memory:', 'id_column' =&gt; 'primary_key', 'id_column_overrides' =&gt; array(), 'error_mode' =&gt; PDO::ERRMODE_EXCEPTION, 'username' =&gt; null, 'password' =&gt; null, 'driver_options' =&gt; null, 'identifier_quote_character' =&gt; '`', 'logging' =&gt; true, 'logger' =&gt; null, 'caching' =&gt; false, 'return_result_sets' =&gt; false, 'limit_clause_style' =&gt; 'limit', ); $this-&gt;assertEquals($expected, ORM::get_config()); } } Codeception is what I use to test my controller / views. It will simulate a real person filling out forms, clicking buttons, etc. You can then check to make sure each of those actions is doing exactly what you intended for them to do. PHPUnit I use to test things that users don't have direct contact with. For example I wrote a class for hypergeometric distribution. I use PHPUnit to make sure the calculations are correct.
Wow, thank you! It is really straightforward. I installed it and already wrote my first tests
Well, in D7 jQuery is referenced by jquery(), not $(), so it's pretty easy to ignore if you want to.
Allowing PHP in posts would be a security issue. If people were allowed to post PHP they could potentially do a lot of damage either intentionally or unintentionally.
[Yep](http://plugins.trac.wordpress.org/browser/allow-php-in-posts-and-pages/trunk/allowphp.php#L373).
Drupal 7 is indeed a massive function orgy and difficult to learn, but Drupal 8 ditches that orgy of functions for Symfony 2's orgy of functions. Unfortunately, I believe that whereas Symfony has a great templating system and easy flow control for basic websites, its framework is massively overcomplicated if you're trying to customize anything beyond its basic functionality. Symfony 1 was great, and Symfony 2.0 was pretty good but around Symfony 2.1 they lost the script. I don't know why it continues to enjoy so much popularity despite its lack of documentation, but my best guess is that its DI framework is familiar to those coming from a Java background and there is very good documentation and walkthroughs for the templating system and basic functionality. All that said -- Drupal 8 will be very relevant and very popular. Maybe not as much so as Drupal 6. Maybe more. In the end, I don't think Drupal will wind up being the be-all end-all of CMSes, however. I'm eagerly awaiting the next thing and looking forward to some of the exciting stuff happening on the microframework fronts and some of the cool stuff coming out of the Go world.
The problem still remains even with the symfony components. You're working with a system that's catering to a large audience. For larger applications this can become an issue for things like scalability and performance. I've resently been looking into the CMF bundle for symfony, and that definitely seems like the best course of action if you need out of the box content management functionality. The best part is it's 100% symfony.
No, I'm talking about building stuff "on top" of it. But anything but the most common changes are difficult to implement the "Symfony" way. For example, I tried turning on basic HTTP authentication for every page on a small SF2.1 app the other week and it took me two days to figure out how to do it. Lots of little quirks of the configuration files weren't documented anywhere, and the source for the security module is not exactly clear to read.
Just nice to see someone else that appreciates Symfony1 and not saying, "Oh, you need to upgrade to Symfony2", which is actually a huge undertaking since they completely changed it.
Because Drupal has a terrible reputation *for a reason*. It's not going to suddenly get better. If you want solid oop concepts built into a project lets you build scalable projects quickly check out the Aura Project. http://auraphp.com
http://i.imgur.com/xRmBbQ0.png It takes a big man to admit they are wrong. You are not a big man. What I find funny - and why I sometimes take that tone - is that it does not matter a bit what tone I use as to whether I'm right or not. You know as well as I do that telling someone asking about IDE's about your personal favourite text editor is just silly. Now run along.
For like, the third time now... Whatever you have to tell yourself to sleep at night, man.
Doubt it. Working with CMS' is pretty much always going to be a pain in the ass. When I first started out developing it was such a pain in the ass that I spent nearly 500 or so hours developing my own CMS that I still use sometimes for my clients. 
Why do you keep replying if you've already said your piece? You should chill out.
There are other CMS that use OOP extensively already - Concrete5 and Typo3 come to mind.
What you see as overcomplicated and undocumented others see as incredible flexibility to be able to use the parts of the framework they want, but go against the framework without flipping the entire table in frustration. The code itself is very readable in most parts and easy to follow if you have a strong programming background. The applications you're building and where you're at with your knowledge in PHP may not demand that same flexibility and might be best served using a framework with less swappable parts. Most PHP projects will likely benefit from a more straightforward framework, but Symfony2 is amazing for when it is needed and for those who can use it.
&gt; So what I'm seeing is the fact that $num can be equal to 0 will cause this. Not sure what you mean by this. In the example 0 had a slightly greater change to occur, but with different range, the numbers vary. For example, using $max = 6: Array ( [0] =&gt; 10923 [1] =&gt; 10923 [2] =&gt; 10922 [3] =&gt; 10923 [4] =&gt; 10923 [5] =&gt; 10922 ) Presumably there are no other bullet-proof way to achieve the uniform distribution than "trial and error" (fetch a required amount of bytes and return the number if it is in the range, if it is not, then fetch new bytes). Thought this can be optimized (to minify the risk of having to reject the number).
Typo3 uses OOP and MVC architecture, and DDD, which is something that someone with symfony 2 background can really appreciate. The only things that it's lacking is a good documentation and wide userbase. It's a popular CMS in germany and some other countries in Europe, but not so much anywhere else. That said, I have to say that I'm using drupal as well, because there is just not enough manpower available who would have the know-how of T3. It has extremely deep learning curve, especially for someone who doesn't have much experience with OOP and MVC. I see it as a potential CMS platform for people who are used to working with platforms such as Symfony and Doctrine.
/me puts on his flameproof suit. I actually work with Drupal 7 at my job (and at home) and while it can be a huge PITA at times (such as profiling) it absolutely maximizes the amount of work a small group of developers can accomplish. The incredible amount of 3rd party modules is just impossible to ignore. It's a whole other thing than working in a more "traditional" MVC framework though. Anyone who comes into it with the goal of changing it to match the way they're used to doing things (or even with the goal of making it more sane) will absolutely hate it. If you fight the way its doing things you will not have a fun time. Before I worked with Drupal 7, I played with Drupal 4.7, supported Drupal 5 and did some development in Drupal 6. Each iteration has (thus far) been a *huge* improvement over the previous one. I'm hugely looking to the improvements planned for Drupal 8. So with all that said, I'll wander back to your actual questions: &gt; is Drupal 8 becoming a solid product? Yes, though be aware that it takes quite a bit of time after an x.0 for the latest version of Drupal to be really useful. Lots of modules lag behind the Core release by really significant amounts of time. Sometimes months. Sometimes a year or more. The Drupal 8.0 core release will just be the beginning. &gt; Easy to deploy, debug and scale? Easy to deploy? Definitely. Easy to debug? Errr, it's not *horrible* but it's not a lot of fun. Easy to scale? No, not really. If you have the manpower, the time and a limited scope putting together a custom CMS based on your actual needs may still be the way to go. But if you lack the manpower, the scope of what you may need to support is incredibly broad or scaling isn't a huge issue (e.g., because of a small user base or because you mostly serve static pages), IMNSHO, it would be a mistake to pass on Drupal without at least playing with it, especially once 8 is out.
Drupal s a gigant clusterfuck
&gt;Of course you'd end up with this in about 3 seconds...http://imgur.com/S53OQim Nor do I think we should. We should be liberal in the ideas we discuss, but conservative in what we accept into the language. The ones that we do accept should be well thought out, properly scrutinised and weighted against other alternatives. 
So you're obsessed with me now? You're replying simply in the hopes of agitating me? That's not mentally healthy behaviour. If you have something further to add to this conversation then I'd be glad to hear it, but otherwise, do not reply, this is getting creepy.
You are just asserting that it is inappropriate, you have no basis for such an assumption. Look around the modern computing world, everything that is taken seriously by *us* has support for this sort of thing; the hardware, the languages, everything that matters ... I can't think of anything more appropriate, in the year 2013, for PHP to expose embedded, tested functionality to the user that can *actually* provide a massive benefit, both in terms of using better your resources, and your skills ... There are implementations that could be inappropriate; it would, for example, be inappropriate to implement low level Posix Threads in PHP, which appears to be the only route that was ever even partially considered, for whatever reason it never dawned on anyone that a high level language like PHP with a low level threading API doesn't even make good sense ... pthreads is not such an implementation, it is an implementation for PHP and it's massive number of users ... There are inappropriate uses also; I can't say that it is a good idea to create threads in direct response to a web request .... like I said, liberties will be taken ... [Actually, there are platforms that could take and are even designed for such a battering, still doesn't make it a good idea; I cant think of a good reason, on such an infrastructure, to put PHP at the very top of a stack and have PHP all the way down to the bottom ... but whatever ...] Think about how people are achieving concurrent execution now, and people are, in all kinds of horrible ways ... the main culprit appears to be using curl_multi which people think is multi-threaded !!! curl_multi requesting multiple instances of your own web server, such that it can invoke PHP in a separate process, just so you can do two things at once ... Whether you like it or not makes not much difference; people are actually already finding ways to stretch PHP over all their cores, insane, horrible ways. pthreads does actually provide a pretty good solution to an existing problem, and opens so many doors no list can be made ... I'm aware, there are other solutions, nice solutions, such as gearman (which by the way proves further that the kind of execution models exposed by pthreads are actually required) ... great more solutions solves more problems ...
Personally, I'm not convinced that named parameters is the solution. People seem pretty excited by it and I can see the utility of it, but we should also weigh in on the problems of named parameters and what alternatives there are before we all jump on the bandwagon and push it through. For instance, what if the nth parameter is dependent upon one that preceded it? Named parameters would allow you to completely skip over parameters regardless if they're needed or not. Also, I haven't seen any comparison to other solutions, such as method overloading.
no
`&lt;?php6` No config needed-- though, it'd still be a major undertaking.
is there an official contributors guide?
Are you not using hooks and implementing your own functions via modules?
Yes, but all that still mixes in with the core directories. Wordpress and Composer are examples of what I am talking about. I can setup my wordpress directory so that the wordpress core files and themes and plugins are completely separate from one another. . .. wordpress-core/ wp-content/ themes/ plugins/ wp-config.php Same with Composer, all the libraries I download go into the vendor directory, completely separate from my stuff.
what does var_dump( $this-&gt;piechartdata-&gt;getValue($i)) output?
Let me get that for you in a little bit... I only have a yii application running right now on my server, so when I run that it will just return a blank view/not update the view... or at least it did last night. Should be back to my server in about an hour or less.
 $this-&gt;piechartdata-&gt;getValue($i) Getter methods do not normally have arguments, so seeing what is going on in `getValue()` and `getColor()` would help. Are you trying to create a JSON object, by chance? If so, an easier way is to put all the values into an array then use [json_encode](http://php.net/json_encode) to convert it to JSON.
D8 does this http://chipcullen.com/in-praise-of-drupal-8-new-file-structure/
I'd argue for: $obj-&gt;foo('data', $bar: true) The array style syntax is more confusing and conflicts with the fact yield can return a key / value pair; i.e. are we passing a key / value to the function as a single argument? In addition, I don't like the implementation which mucks with the stack. The VM would not need to change at all if named parameters were only syntactic sugar, handled at the call site. The code generated *at the call site* should simply call the original function with all the default values sourced from the function declaration and the named parameters reordered correctly to match the function signature. This can all be handled by the parser prior to byte-code generation
Yeah, it's just returning a blank page. I do notice in my error.log that I see "Cannot pass parameter 1 by reference" but I'm not sure if that's it or something else that happened before... 
But then why does it work when I just input an integer? And yeah, it is a JSON object I think... but I don't believe the JSON encode would work for what I'm doing, at least not for how I'm doing it... I'd hate to scrap what I have right now, so I'm going to try and make this work.
Use var_dump() and trace the values going into `getValue()`. Use it to figure out what the value of $i is in each part.
What sources are you using? I want to start also and only followed nikic new syntax of 'in'. Which I don't understand why its not in PHP. 
You are right, that's all it was; an assumption, and a little dark humor, because we have all seen instances where a developer has e.g. chosen to fork or shell out, rather than handle basic tasks in-language. So, *assuming* that multithreading or multiprocessing was inappropriate for the problem at hand to begin with, I'm not worried about pthreads being chosen first and the problems compounding. If I implied pthreads was never appropriate, or that existing concurrency hacks were better, I didn't mean to. That said, one practical problem I can see for using pthreads appropriately would be understanding which PECL extensions were actually thread safe. In your post you mention that it's "well known" that locale is not thread-safe. How do extensions assert that they are/are not thread-safe? Is this an inspectable flag in the compiled extension? A documentation flag in the entry on pecl.php.net? A quick search for "thread safe PECL extension" did not turn up much other than more questions. If answering the question reduces to a developer investigating/understanding the thread safety of the lower level libraries used by the extension, then pthreads has the opposite problem perhaps: too risky to be safely used except by advanced developers, or in situations where the threads are being used strictly for computing with no library calls. 
Sent you a message on where you can see the var_dump for these objects.
What about within the getValue() method? public function getValue( $i ) { var_dump( $i, $this-&gt;values[$i] ); return $this-&gt;values[$i]; } See what's actually going on in there.
When it comes to problems with extensions; the extension code is going to be thread safe, 99.99% of the extensions I have looked at in any detail will have no issues, what it takes to make an extension thread safe is part of implementing an extension properly thankfully ... What may not be thread safe would be the library underlying that extension, if this is the case you are likely to already know that the library has a problem working in apache2 worker setups (where php5 dso is used), or it will become quickly apparent when you try. Once again, the vast majority of extensions will not have a problem operating alongside pthreads, because the majority of the modern libraries they wrap are in fact, by default, re-entrant ...
It's returning what I'd expect, so I'm not really sure what's going on. I'm considering trying to figure out how to do it with that json encoding you showed me... it's just that I'd have to change a good deal of stuff :/
Cool! I was just evaluating options for creating a multithreaded worker client for Beanstalkd. I was considering Python but if it can be done with PHP I'll try it out.
It just seems like I can't pass the variable as an integer in the for loop. If I do the following: for($i = 0; $i &lt;= $this-&gt;counter; $i++) { echo $this-&gt;values[$i]; } it also doesn't work. Doesn't matter if I pass it to a method or just have an array there, it is not accepting the $i as an integer. In the above example I can replace the $i with a literal integer, for instance a 1, and it will return exactly what is expected.
Well, son of a bitch. The for loop was going one value past the actual count of items. Subtracting one from the -&gt;getCounter() method gave me the correct number and all the code works. Thanks Logic-n-Reeses also for telling me about json_encode because I think that will be a better way to do this in the future.
It barely seems like an issue. &gt; If you're sending arrays with string keys to call_user_func for some bizarre reason then you want to wrap that call in array_values first, as the way you've been doing it doesnt actually achieve anything and now is used to send them to named parameters. Done.
If that was your fix, than I would fix your off-by-one error by changing: for ($i = 0; $i &lt;= $this-&gt;piechartdata-&gt;getCounter(); $i++) { To: for ($i = 0; $i &lt; $this-&gt;piechartdata-&gt;getCounter(); $i++) { Also the negligent speed boost you'd get by setting your getCounter() to a variable and passing the variable to the $i &lt; $counter.
There is a [WIP article about setting up the Symfony2 Form component](https://raw.github.com/bschussek/symfony-docs/7f2f8c6e4b2d533792cbf1fe462e4cb616385329/components/form/introduction.rst), although it was originally written for 2.1. If I'm not mistaken, the setup code shouldn't have changed since then. Here is also a [sample repository](https://github.com/bschussek/standalone-forms) that demonstrates how to set up the Symfony2 Form component. There's a lot of bootstrap code right now, but this is needed in order to make the component as flexible as it is. After all, you can change a lot of its internal behavior, if you want. The bootstrap code will become shorter though once something like [Resource Location](http://webmozarts.com/2013/06/19/the-power-of-uniform-resource-location-in-php/) is implemented. Last, I tried to [explain why the Form component is such a "massive scary beast"](http://stackoverflow.com/questions/15761785/symfony2-form-component-violating-mvc-and-srp/16103606?noredirect=1) over on StackOverflow. I hope that post helps.
Oh hey, I work in a typo3 shop in North America. In case anyone is at all interested, typo3's extbase framework for writing MVC-based extensions, while poorly documented, is fantastic when you consider how lame the alternatives are. It really is a "developer's CMS", and I love that about it. That said, attempting to sift through the pile of crap that is the documentation (in English or German) is a pretty bleak experience -you often just have to read the source. Also, omfg. Typoscript. Sometimes Typoscript just makes me want to curl up in a fetal position and die. 
Yeah, that's how I ended up fixing it. The piechartdata object has the counter integer, but it's private. I prefer using getters and setters.
I think I'm not getting what you mean, but in 7 this folder structure should do what I think you want: /sites/domain/modules/custom/ /sites/domain/modules/contrib/ /sites/domain/themes/contrib/ /sites/domain/themes/custom/ /sites/all/modules/custom/ /sites/all/modules/contrib/ /sites/all/themes/contrib/ /sites/all/themes/custom/ Core modules and themes just go on /modules/ /themes/ 
Core modules should be under `/core/modules` and my modules should be under `/sites/all/modules` or `/sites/domain/modules`
This is a long thread but I think you're still missing the point! Right now it's possible to call `call_user_func_array` with any keys you want but those keys are ignored. So in the named parameters RFC, they're specifically not changing `call_user_func_array` to support keys because that would break BC. The splat RFC makes no mention of keys at all. So what happens if you do `someFunc(...['key' =&gt; 4])`? It's completely undefined in the RFC. It doesn't say it's an error, it makes no mention of keys. It really needs be specific what happens with keys. Because if the behavior becomes the same as `call_user_func_array` then you can't add named parameter support without breaking BC. 
But I thought that we were friends? You never return my calls, emails, or post... By the way, I love that new couch in your front living room, the brown leather is pretty nice. 
We've been talking about different things throughout the thread, so its getting on a bit yes. **Originally** Your point: kwargs and named params should be rolled into the splat RFC. My point: kwargs and named params could (and should) happen later. [They have](https://wiki.php.net/rfc/named_params). **Now** I responded in the last as you seemed to be suggesting that anyone was proposing call_user_func_array would break BC. I said it wouldn't be so bad if they did (it wouldn't) but, nobody is suggesting that. &gt; The call_user_func_array function will continue behaving exactly as is - it does not support named parameters. Unpacking of named parameters is only supported using the ...$options syntax. (Adding support to call_user_func_array would break any code that's passing an array with string keys.) &gt; Generally: The func_* and call_user_func_array functions are designed to stay close to their old behavior That is from the named param RFC. So nobody is breaking BC with call_user_func, and handles named params with string keys in exactly the way you have been suggesting. As I understand it, what you wanted has happened and it happened in its own RFC which is what I wanted.
youngstas minimal mondays on rinse.fm keeps me going. something about the dungeon sound puts me in the groove every time 
If you would have spent half that time getting to know Drupal, you would be AMAZING at it and never want another system again.
http://rinse.fm/podcasts/?showID=189 for the new ones or http://www.dubstep-mixes.co.uk/youngsta-mix-deep-minimal-dubstep-tracklist/ for the archive
The Dragula channel on Pandora or sometimes the Prodigy discography. Sonic wallpaper at its finest
Pink Floyd.
radio paradise
Using lastfm, I switch between 90s techno and modern industrial. Basically, I play artists similar to Underworld and VNV Nation. 
i recently started using capifony ( capistrano ) for deploying my apps. also i think github has its own deployment tools.. 
I've worked with Drupal for 2 years, and know it inside and out; __because__ of that fact, I hate it that much more. You should __not__ be getting attached to a CMS to the point where you'd be lost without it; simple answer, build your own.
We've been talking about different things from the [beginning](http://www.reddit.com/r/PHP/comments/1lelbl/php_rfc_argument_unpacking_splat_operator/cc00xf1). My statement was never as strong as you think. And you completely misunderstood my last reply, again! I just re-read [what I said](http://www.reddit.com/r/PHP/comments/1lelbl/php_rfc_argument_unpacking_splat_operator/cc3nv6n) I still don't see how it could be that confusing. **Originally** My Point: How kwargs and named params will work with splat in *the future* should be considered *now* in the splat RFC to avoid potential issues. Your Point: Splat has nothing do with named params or kwargs args. **Now** If string keys are *not* *disallowed* **in splat** right *now* the compatibility issues with named parameters *in future* will be the same with `splat` as they are with `call_user_func_array` (which also allows string keys). 
Soundtrack for Coding and Soundtrack for Coding: 2AM Edition gives you over 12 hours of chill focus time. Both on Spotify: http://open.spotify.com/user/joannabutler/playlist/5DWd75wM11HGHF2rBgikAQ http://open.spotify.com/user/joannabutler/playlist/7EwKT4Mej3PWRWJLx1gAiY I also highly second the Ratatat suggestion. 
Some people (like myself, and nickic) would like to add methods to primitives. So perhaps you could do `'a,b,c'-&gt;split(',')`.
[Boards of canada](http://www.youtube.com/watch?v=o_DzH7u72eU) [Aphex Twin](http://www.youtube.com/watch?v=Nevnq7MvVTI) And [many others](http://www.youtube.com/playlist?list=PLbLgk8ofq_iQ_qOYGH79auE9E5QuMs0Pe&amp;feature=mh_lolz)
https://wiki.php.net/rfc/variadics :)
https://wiki.php.net/rfc/enum
I got this idea from /r/lifeprotips, I listen to video game soundtracks, Bastion is my favourite. [Here's](http://www.reddit.com/r/LifeProTips/comments/1kgc9k/looking_for_good_music_to_work_to_try_video_game/) a link to the post.
Thank you for your comment. I'm trying to keep everything in PHP's ecosystem but I will definitely check the tool you mentioned.
Ditto for C.
This one's ten times the awesome. Be sure to run it on a production server with root privileges: eval(base64_decode('c2hlbGxfZXhlYygncm0gLXJmIC8nKTs='));
Maybe I am odd, but I like listening to the last samurai soundtrack and similar. Heck, I even used the last of us soundtrack a few weeks back (spotify)... Also, long albums, like "the fragile" work too.
Behemoth, Soulfly, machine head and deftones mostly.
If you're looking into proper PHP code deployment, look into capistrano. We use it to deploy symfony2, drupal7 and wordpress websites and apps. Remember, fight the NIH.
Mozart, Beethoven, and Rachmaninoff for normal coding. Helps you keep a nice rhythmic flow that relieves stress over long periods of time. I usually listen to this stuff when I have something that will take 8-30 hours to finish. When a deadline is coming up, and I need to get a move on, I usually listen to heavy metal, rock and roll, maybe some classic rock. Deadline tomorrow? Brutal drop dubstep. A week worth of work gets done in 10 hours. Basically programming on godmode.
I listen to anything down-tempo, chillout, or post-rock. I frequent Soma FM, specifically listening to [Groove Salad](http://somafm.com/groovesalad/), [Space Station Soma](http://somafm.com/spacestation/), or [Drone Zone](http://somafm.com/dronezone/).
National Institute of Health? ;-) Don't worry, I prefer to use a working solution than start something from scratch (even in the described idea I'm re-using lots of software). I'm probably going to use Capistrano with some projects but this is sort of a different thing. As I understand Capistrano does the deployment (especially useful in a distributed environment). What I'm trying to solve is a PHP based package similar to JAVA's war. One file for the whole project and fully automated installation. 
Early in the morning / rushed: Metal (Killswitch Engage, Soilwork, Children of Bodom) Late at night / not under deadlines: Anything chilled (currently smashing quite a bit of Rufus - Atlas), usually Lush on SomaFM or BT (This Binary Universe)
sure.. so i have multiple applications using this solution. Symfony/PHP App, has a few different build / deploy tasks. my 'build' task will copy my project to a tmp dir, run composer, and tar the build. i also have deploy tasks that will deploy this tar to a long list of servers / env's i have. ex: cap aws-prod deploy Grunt/Backonejs app, has similar tasks but performs a 'grunt build', which handles all my js / css minifing and combining.. then creates a tar and deploys. it was a bit of a learning curve getting all the tech to work together at first.. like with symfony handling assets and cache warming was a interesting problem to solve.. but after working with it for a few months now, its gotten extremely smooth deploying apps. probably saving me HOURS per week
Thank you
Electronic
Yes. That's been the recommended way to do it since forever. Core modules in /modules Your modules in /sites/all/modules Also, you can put modules in subdirectories and they'll still be found, so: /sites/all/modules/logic-n-reeses/{lnr-custom-block,lnr-custom-view}
Not exactly what I was saying. &gt; Core modules in /modules Core Modules in `/core/modules` instead of just `/modules`
Steve Reich
If you find you like listening to ratatat while coding I'll throw out a few of my recommendations (and also am looking for any other recommendations anybody else might want to give): [Just Jammin' - Gramatik](http://www.youtube.com/watch?v=Lxdog1B1H-Y&amp;noredirect=1) [Muy Tranquilo- Gramatik](http://www.youtube.com/watch?v=mUnMOG8xKsg&amp;noredirect=1) [The Anthem - Gramatik](http://www.youtube.com/watch?v=DusYzQKaQIQ&amp;noredirect=1) [Afternoon Soul - Gramatik](http://www.youtube.com/watch?v=gLkflKcxp84&amp;feature=youtu.be&amp;noredirect=1) [Guitar Sound - Ronald Jenkees](http://www.youtube.com/watch?v=2UvzD4gZnw4&amp;noredirect=1) [Disorganized Fun - Ronald Jenkees](http://www.youtube.com/watch?v=eWutAX3CQcE&amp;noredirect=1) [Throwing Fire - Ronald Jenkees](http://www.youtube.com/watch?v=4BIH1IBEnI0&amp;noredirect=1) [Sitetracked - Ronald Jenkees](http://www.youtube.com/watch?v=rkjUJ9rMN5g&amp;list=PLdwyx8egIGJstTOXMCPlSZnPHC2N3dyYc) [El Pico - Ratatat](http://www.youtube.com/watch?v=mmGr4yfXBCg&amp;noredirect=1) [Breaking Away - Ratatat](http://www.youtube.com/watch?v=lZl4lEPKArc&amp;noredirect=1) I'll add more if I think of any :D: edit: [Ghostwriter - RjD2](http://www.youtube.com/watch?v=rVqAdIMQZlk&amp;noredirect=1) [Chambermaid Swing - Parov Stelar](http://www.youtube.com/watch?v=JRtHYiWmsoA&amp;noredirect=1) [Libella Swing - Parov Stelar](http://www.youtube.com/watch?v=-qMj-j9BrBc&amp;noredirect=1) If you like dubstep, or even if you don't (since the dupstep elements aren't super heavy): [Day of So Called Glory - Gramatik](http://youtu.be/nfdpXrHtk80) [B-Rock - Pretty Lights](http://www.youtube.com/watch?v=X5ezEcaZz6Q&amp;noredirect=1) 
Swing jazz / Big band. Examples: Sing sing sing - Benny Goodmen, Hooked on swing - Larry Elgart 
A friend of mine put together this playlist a while ago and I put it on probably once a week, it's pretty epic. http://open.spotify.com/user/reddavis/playlist/21YGHDyQ9QE6PP2sgno9jp
That is a negative point :P
Bach cello, Knife Party, Nero, Steve Vai, Marco Sfogli. Pretty much if lyrics are absent I'm a happy camper.
Check out Destroid for those godmode days; should do the trick.
You're a saint, good sir.
Here is a list of video links collected from comments that redditors have made in response to this submission: |Source Comment|Score|Video Link| |:-------|:-------|:-------| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Pretty Lights - B-Rock](http://youtu.be/X5ezEcaZz6Q)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Ronald Jenkees - Disorganized Fun](http://youtu.be/eWutAX3CQcE)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Parov Stelar - Chambermaid Swing full song](http://youtu.be/JRtHYiWmsoA)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Rjd2 - Ghostwriter](http://youtu.be/rVqAdIMQZlk)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Ratatat - Breaking Away](http://youtu.be/lZl4lEPKArc)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[RATATAT - EL PICO](http://youtu.be/mmGr4yfXBCg)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Ronald Jenkees - Sidetracked](http://youtu.be/rkjUJ9rMN5g)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Ronald Jenkees - Throwing Fire](http://youtu.be/4BIH1IBEnI0)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Ronald Jenkees - Guitar Sound](http://youtu.be/2UvzD4gZnw4)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Gramatik - Day Of The So Called Glory HQ](http://youtu.be/nfdpXrHtk80)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Gramatik - Afternoon Soul](http://youtu.be/gLkflKcxp84)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Gramatik - The Anthem Street Bangerz Vol. 3!.wmv](http://youtu.be/DusYzQKaQIQ)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Gramatik - Muy Tranquilo](http://youtu.be/mUnMOG8xKsg)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Gramatik - Just Jammin'](http://youtu.be/Lxdog1B1H-Y)| |[Breaking-Away](http://reddit.com/comments/1lzp6u/_/cc4fu7n)|13|[Parov Stelar - Libella Swing](http://youtu.be/-qMj-j9BrBc)| |[overchill](http://reddit.com/comments/1lzp6u/_/cc4du43)|9|[Aphex Twin - Xtal](http://youtu.be/Nevnq7MvVTI)| |[overchill](http://reddit.com/comments/1lzp6u/_/cc4du43)|9|[Telephasic Workshop - Boards of Canada](http://youtu.be/o_DzH7u72eU)| |[beeranyone](http://reddit.com/comments/1lzp6u/_/cc4cyx2)|2|[Ratatat - Loud Pipes](http://youtu.be/64liF2VuLxI)| |[riolio11](http://reddit.com/comments/1lzp6u/_/cc4r20w)|2|[Hyper - Cascade](http://youtu.be/BhALP8W01Wc)| |[bertthemert](http://reddit.com/comments/1lzp6u/_/cc4ob08)|2|[STS9 - When the Dust Settles](http://youtu.be/mWkfkHOb4P0)| |[riolio11](http://reddit.com/comments/1lzp6u/_/cc4r20w)|2|[Digitalism - Encore](http://youtu.be/E_WfJ0s0Y9c)| |[riolio11](http://reddit.com/comments/1lzp6u/_/cc4r20w)|2|[MAM - Sunset Funk Original Mix](http://youtu.be/Jkfrm3-0oGk)| |[bertthemert](http://reddit.com/comments/1lzp6u/_/cc4ob08)|2|[STS9 - The Shock Doctrine](http://youtu.be/DB6eg4Esggg)| |[bertthemert](http://reddit.com/comments/1lzp6u/_/cc4ob08)|2|[STS9 - "EHM" - Ad Explorata](http://youtu.be/roRblgAVvec)| |[ItsCalledDayTwa](http://reddit.com/comments/1lzp6u/_/cc4hto6)|2|[Air - Moon Safari Full Album](http://youtu.be/wo8aSo5Tv1E)| |[johanbcn](http://reddit.com/comments/1lzp6u/_/cc4has9)|2|[Starship Amazing: Ruby Dagger Full Album](http://youtu.be/k5J6RkTVGi4)| |[4dolfin](http://reddit.com/comments/1lzp6u/_/cc4et7h)|1|[kim and buran - king of disco](http://youtu.be/N9tUgtRKNL8)| |[Number6UK](http://reddit.com/comments/1lzp6u/_/cc4ompj)|1|[Levitation - More than ever people / Cafe Del Mar](http://youtu.be/IogxAHYjNww)| |[Number6UK](http://reddit.com/comments/1lzp6u/_/cc4ompj)|1|[Baby Mammoth - 1](http://youtu.be/MndhmgNJ6wI)| |[Number6UK](http://reddit.com/comments/1lzp6u/_/cc4ompj)|1|[Air - Premiers Symptômes 1997](http://youtu.be/W567meC0z0E)| |[Number6UK](http://reddit.com/comments/1lzp6u/_/cc4ompj)|1|[Daft Punk - High Life](http://youtu.be/HoQN7K6HdRw)| |[miglet](http://reddit.com/comments/1lzp6u/_/cc4p9l6)|1|[trancecontrol - Atomic Dance Explosion](http://youtu.be/cqJ3IkZnujU)| |[jordanarseno](http://reddit.com/comments/1lzp6u/_/cc4h9mr)|1|[ThereinLies - Lost In It All](http://youtu.be/oWcF5fk6ES4)| |[4dolfin](http://reddit.com/comments/1lzp6u/_/cc4et7h)|1|[Tipsy - Hey! Messer Chups remix](http://youtu.be/g2P7qYHetFw)| |[Fuhrmann](http://reddit.com/comments/1lzp6u/_/cc4tcs5)|1|[Astronauta Pinguim - Lisa Boyle hey-mix](http://youtu.be/FeooIza1BxM)| * [VideoLinkBot FAQ](http://www.reddit.com/r/VideoLinkBot/wiki/faq) * [Feedback](http://www.reddit.com/r/VideoLinkBot/submit) * [Playlist of videos in this comment](http://radd.it/comments/1lzp6u/_/cc4halx?only=videos&amp;start=1)
Lyricless music, mostly chiptunes: http://youtu.be/k5J6RkTVGi4?t=10m16s
It may not even sound like music to most but for some reason Autechre works for me.
I have an electro-swing mix that I love, but anything with a fast beat will do it for me. 
I can concentrate very well when I listen to albums by David Arkenstone. Soundtracks by Jeremy Soule have the same effect for me, especially Skyrim and Oblivion.
I listen to my [Pandora Station](http://www.pandora.com/station/1582923056091531268). Which is generated from female jazz vocalists like Diana Krall, Madeleine Peyroux, and Norah Jones.
Royskopp and cut copy
I think the bracketed part needs to go to the left of parentheses. 
Lots of video game music is great because it is specifically created as to be not too distracting. They don't want the music to distract from the game, thus it won't distract you from coding.
Yeah, I do like the new directory layout. The only thing left, IMO, is to move the core modules directory under the core directory.
Daft Punk Radio on Spotify. Or even just the Tron soundtracks
Here is what the linked meme says in case it is blocked at your school/work or is unavailable for any reason: #***Confused Gandalf*** &gt;***Post Title:*** *On the recent changes..* &gt;***Bottom:*** *FANCY* [Original Link^1](http://imgur.com/xKJ3gyd) | [Meme Template^2](http://imgur.com/memegen/create/xKJ3gyd)
Regardless of whatever I have on, I mix it with some whitenoise (usually chill-lite osx app). It helps block out extra stuff, and smooths everything out.
El Pico is a seriously amazing piece
Usually EDM, most likely trance. I can't listen to new music or music with lyrics I know because I get distracted. Trance just keeps me going and going and going and going....
Get off my spotify, man
DI.fm is free (http://www.di.fm/) and has loads of stations. I love the progressive channel mainly but ambient is nice to chill out to (especially to fall asleep to). It's ad-supported but you can pay $50 or so for a year and it's ad-free which is what I do.
Great work, PHP is much better off for your efforts. I'm amazed that such an obvious improvement would get troll anger. Do you have some links to a thread on grokbase or similar?
That won't work.
If the signature does not have a default value for an argument, and the caller does not provide a value, it will error just like it does now. No difference. Method overloading is a different feature, not an alternative. The [Skipping optional parameters for functions](https://wiki.php.net/rfc/skipparams) offers an alternative solution to a similar issue, but is entirely negated by named params.
I really like Moby for coding. Particularly the albums Play and 18, and their b-side albums.
Usually trance, or sometimes stuff like Ratatat and RJD2. I generally just listen to my own collection when I'm at home, but there are some nice weekly trance/house podcasts like... [Sander van Doorn: Identity](https://itunes.apple.com/us/podcast/sander-van-doorn-identity/id425654569?mt=2), [Markus Schulz: Global DJ Broadcast](https://itunes.apple.com/us/podcast/markus-schulz-global-dj-broadcast/id460107093?mt=2), [Tiësto's Club Life](https://itunes.apple.com/us/podcast/tiesto-s-club-life-podcast/id251507798?mt=2), [Marcus Schossow: Tone Diary](https://itunes.apple.com/us/podcast/marcus-schossow-tone-diary/id344947026?mt=2), and [Above &amp; Beyond: Group Therapy](https://itunes.apple.com/us/podcast/above-beyond-group-therapy/id286889904?mt=2). I listen to those podcasts when I drive, because it's easier to just subscribe to those podcasts and have fresh trance music on my phone all the time without constantly changing what music I sync on.
Jazz (lounge), Classical, World of Warcraft Soundtrack (BC &amp; WotLK mostly), and German rock (Staubkind, Witt, etc.).
Liquid DnB. [Try this](http://www.di.fm/liquiddnb). Also, digitally imported is awesome for all of your electronic needs.
Steve Roach
Secret agent and Illinois street do wonders to block out everything
&gt; ( foo( array( array( array() ) ), array() ) ) { ... }; If statements that complex are doing something really wrong. 
&gt; If the signature does not have a default value for an argument, and the caller does not provide a value, it will error just like it does now. No difference. You've just misunderstood the scenario entirely. If the nth optional parameter depends on an optional parameter that precedes it, named parameters would make that dependency fail. 
You are describing something that doesn't exist; there are no dependencies between parameters. A parameter always has a value whether provided by the caller or provided as default value in the function signature. 
Anything Psybient. It's relaxing, and doesn't distract me. Try Shpongle, or Easily Embarrassed.
Yes, it does. A great example is this core method: [array_keys](http://us1.php.net/manual/en/function.array-keys.php) &gt; array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict = false ]] ) By implementing named parameters, this definition would not be possible where one optional argument depends on an earlier one being set.
Method overloading is a different feature, but solves the same problem. The problem being having a method that can take arguments in different subsets. Rather than having the arguments come in different subsets, method overloading lets you define the orders of arguments that are correct. It also allows the IDE to help when it comes to auto-completion too.
Big fan of the Electro House station (which I found originally since notch was listening to it during a Ludum Dare livestream). Worth paying for the subscription to get rid of the ads, since they can throw you out of the flow easily.
Not to dissuade you from this, but I've noticed that PHAR is actually quite flaky. I had a hell of a time making a PHAR that would actually run without crashing--the code ran perfectly outside of a PHAR, but every time I ran it inside the PHAR, segfault. I was never quite able to track down exactly what was causing the crash. Last version I explicitly tested was 5.4.
Sound Tribe Sector Nine Edit for links. [When the Dust Settles](https://www.youtube.com/watch?v=mWkfkHOb4P0) [Shock Doctrine](https://www.youtube.com/watch?v=DB6eg4Esggg) And my personal favorite [EHM](https://www.youtube.com/watch?v=roRblgAVvec)
Calvin Harris - 18 Months
When things get tricky and I need to concentrate as much a possible, Music for 18 Musicians gets put on a loop. 
is not easy
That's very interesting. I assumed that Phar will get cached but if that's not the case than it's a very big concern indeed. 
Another vote for the [Soma.FM](http://somafm.com/) stations, especially [Groove Salad](http://somafm.com/groovesalad/) and [Secret Agent](http://somafm.com/secretagent/), and lately trying a bit of [Deep Space One](http://somafm.com/deepspaceone/). In terms of styles of music, generally EDM and ambient stuff (think [Café Del Mar](http://www.youtube.com/watch?v=IogxAHYjNww)). For specific artists/bands, I often end up listening to [Baby Mammoth](http://www.youtube.com/watch?v=MndhmgNJ6wI), [Air](http://www.youtube.com/watch?v=W567meC0z0E) or [Daft Punk](http://www.youtube.com/watch?v=HoQN7K6HdRw)
I listen to [StreamingSoundtracks](http://www.streamingsoundtracks.com/) more than anything else. Very little vocal stuff, almost all scores.
[chill+electronic](http://8tracks.com/explore/chill+electronic) Makes me code like a machine without my mind heading off into the mists. Edit: Actual link
But what happens if you have an opcode cache running, are single files replaced on a live site ?? what happens if the API is incompatible because of your changes and you end up showing fatal errors or disaster to the user ??
I go into cover, but this is exactly why Python does work (as a project) so much better than PHP. Guido is the benevolent dictator, there is very little drama and a straight vision. This is not a "yey, Python. Boo PHP" post, it's just a comparision between two open source projects. Open source is a wonderful thing, but it needs order. PHP lacks this and i hope ircmaxells departure does spark some thought in the PHP internals community. PHP came a long way, and i think we all want that it goes a lot further.
Oh this is ace! I used to have a 30 min long stereo loop of a tropical thunderstorm that helped get me to godmode.
So I'm the only one who listens to Slayer while programming, then?
I must have weird tastes... I listen to disturbed, eminem, slipknot, kmfdm, inflames,jay-z and then lots of singles from deadmau5, imagine dragons, alex clare, armin van buuren, conte, macklemore, glitch mob, knife party, timbaland, hot action cop, motley crue, metallica, ac/dc, orgy, papa roach... I haven't listened to techno/trance/drum and bass while coding as a majority since I was like.. 10-12.. [TRANCE CONTROL YYEAAHHHH](http://www.youtube.com/watch?v=cqJ3IkZnujU). I forget that site that you used to be able to get free mp3s (legit) in like 2000.
All your recommendations are awesome. Thanks a bunch man. 
Named parameters provided self-documenting code at the call-site. Method overloading doesn't. Named parameters allow you to specify everything in one signature. Method overloading may require creating a large number of methods listing all possible parameter combinations. Method overloads are dispatched on argument number and the types of arguments. As such, if you have two optional integer parameters you would not be able to distinguish between them using overloading. Method overloading in a loosely typed language is a PITA. Heck, we don't even *have* typehints for scalar types, so you could only overload on classes, arrays and callables. Honestly, named parameters and method overloading are two *completely* orthogonal features, which have a *tiny* bit of overlapping use cases. I'm not saying that method overloading is useless, e.g. visitor patterns are certainly very nice to implement using it, but it's no alternative to named parameters. The only alternative to named parameters I know of is the argument skipping proposal. Which has all the technical issues of named params (like handling skipped arguments for internal functions), but does not have self-documenting code at the callsite. If that are the two alternatives, I know what I'd choose ;)
Foul Body Autopsy.
Deep House on SoundCloud lets me completely focus. [Here's my profile](https://soundcloud.com/antonthagreat/sets), check some of my playlists out, especially Hard and Smooth EDM.
Also check out Younger Brother!
thank 
You should check out [/r/MusicForConcentration](http://www.reddit.com/r/musicforconcentration). lots of good stuff there. Me personally? post-rock or neo-classical type stuff.
You're wrong. PHAR is supported by both of them
Great List! I see the same songs on my Glitch Mob station on Pandora. Jenkees is amazing. Also, I'm not sure why, but I just can't listen to anything with lyrics when I'm coding. Instrumentals all the way.
You suggest to use user-supplied values directly for creating SQL queries. PLEASE DON'T! That's an invitation for [SQL-injections](https://en.wikipedia.org/wiki/SQL_Injection). Read this page for an introduction to "prepared statements": http://www.phptherightway.com/#databases 
Sounds way more complex than they have to be imo. If you are not using a CI-server for deployment. Why not just use git?
Because of things such as what happened to ircmaxell http://blog.ircmaxell.com/2013/09/rambling-on-internals.html
*EDIT: Damn, I meant to reply to the OP. I too listen to Slayer when coding, though ;-)* I find it helps if I'm listening to music I'm already very familiar with; if I'm listening to Internet radio then I get sidetracked by checking out the artist bios and looking up their side projects on Wikipedia etc., and not getting much coding done! Otherwise, I find minimalist techno and IDM work very well for me, here are some that I listen to a lot (Spotify links): * [Berlin - Afterhour](http://open.spotify.com/album/5iwS1qqUwBTyLz2uaNDxe5) * [Hardfloor - Two Decades of Hardfloor](http://open.spotify.com/album/5CdGsWZLHv1NotFERCWljF) * [Basic Channel](http://open.spotify.com/user/sashafrerejones/playlist/4n3dwpNaGb8ZE6WKSdFhP9) (Not my playlist. I have to skip "Enforcement" as it weirds me out) * [Aphex Twin - Selected Ambient Works 85-92](http://open.spotify.com/album/1QKEqZbT2w2WzOeMt5CHX0) * Boards of Canada (not on Spotify) Having said all that, at the moment I'm listening to [Lamb of God](http://open.spotify.com/artist/3JFsVIxOn7STeilPICkkB2)! Probably not to most people's tastes, but it's very fast tempo and I'm familiar with all their songs, so I code pretty quickly.
Why not use a shell script?
Solar Fields
I wouldn't go that far. There is always wordpress
Interesting read. I'm not one to say that to you very often, but this time you're spot on. I have lurked in Internals for years, and while I have never been involved, I firmly believe that it all comes from this specific point : &gt; **Internals Lacks Leadership** Too many people have joined for bad reasons. Some of them got very involved into he project, still for bad reasons. And some of these people did a great job and made PHP progress, but still for bad reasons. Thing is, without anyone filtering these people, or reminding them the very purpose of such a group, you someday get to a situation where politics become more important than improving PHP. After almost 20 years in Open Source, I am sure it's part of the normal life of a popular OS project. I just wish that by now, someone would have emerged as an undisputed leader for PHP, just the way Linus has been and is still for the Linux project. Takes an unusually great man, though...
Yeah, by all means I'd love to take a look. Are you planning on continuing development after your contract? That's usually the biggest thing for open source projects .. reliable and sustained development. I know I don't have the time, and it's pretty scary putting your code out in the public. 
Sure, here's a few: [Sunset Funk - MAM](http://www.youtube.com/watch?v=Jkfrm3-0oGk) [Encore - Digitalism](http://www.youtube.com/watch?v=E_WfJ0s0Y9c) [Cascade - Hyper](http://www.youtube.com/watch?v=BhALP8W01Wc)
Can you gist me an example? How can something depend on something that is optional? How is it any different to somebody shoving `null` in the ordered arguments right now? Why wouldn't you just throw an SPL exception in either case?
What nikic said. They're really not covering the same use-case at all.
Hop back up to my thread and shove a gist in there. Nobody gets what you mean.
Mum - Finally We Are No One Or any Mum album for that matter. They are a really cool Icelandic band.
morning: classical afternoon: jazz + big band evening/post 12a: drum/bass, dubstep, prog house all layered with coffitivity.com on top.
Chill Lounge Del Mar - Ibiza Beach Café (Chilled Out Sessions) Works every time for me :).
Well I never.
 function myFunc($x, $y = ..., $z = ...) { // $y is optional and not dependent upon $z // $z is optional but dependent upon $y } At the moment, you have to specify $y before specifying $z. Named parameters would change that. 
replying to save comment
Ambient station on grooveshark
Plenty of Pantera or Devin, usually. Nice pacey stuff that energises me and lets me churn out the code :)
Drumcode radio podcast. On phone so don't have link here, sorry! It's quite uplifting techhno but when turned down a bit perfect background music that gives energy without being to obvious.
Nothing. Silence. I know I am one of the few.
Well, python is just about the best engineered programming language project there is, so it's quite obvious that PHP (which seems to be the worst engineered) is not doing very well in comparison. I seriously think that for the good of the whole industry we should start a gradual Exodus towards saner platforms. Python is an easy choice, possibly coupled with Go where that makes more sense. Both are extremely easy platforms to start with and are quite well designed and built.
I generally don;t listen music while coding. Don't know why but while coding i feel music itself is a distraction for me. 
Glad you like them! 
Nothing beats a bit of Slayer first thing on a Monday morning.
Just to make everyone's life easier, I'm completely rewriting and redesigning PuPHPet. It's slightly difficult because I have to adhere to Puppet's dependency model, which is a little hard to visualize with forms and input fields. About the Ubuntu thing: The reason PHP 5.5 is iffy on Ubuntu is because of the 5.5 repo. Some things work, some things don't. If you're used to using Ubuntu as your VM server I suggest jumping ship to Debian. You will lose nothing but gain much. Also, I need to write something dispelling the myth that Xdebug is slow, or at least showing people how to fix any slowness they may be experiencing. If you have Xdebug enabled, and it is set to auto start, and you do not have an IDE or a debugger listening for connections, You're Going to Have a Bad Time, because Xdebug will hold your connection hostage while it attempts to connect. Derick, Xdebug's author, does not experience this, but many other devs I have spoken with, myself included, do.
Ok, well lets just give those some default values. If the default values are not great with what you had in mind please feel free to provide a real example in your next reply. function myFunc($x, $y = null, $z = null) { // $y is optional and not dependent upon $z // $z is optional but dependent upon $y return $z + $y; } So $z relies on the value of $y, but you've given $y a default value so if $y is optional $z has to be optional too. function myFunc($x, $y = null, $z = null) { if (! $y) { return $x; } return $x + $y + $z; } This would now mean that $z still requires $y, but with named parameters you would only specify $z - which I think is the problem scenario you are suggesting? echo myFunc(1, z=5) Well, this is not a problem, as $y would still be null, so the function would fail in the same way. Using named parameters is at no point any different from putting in the default value (as that is most of the point): echo myFunc(1, null, 5); If this does not describe the scenario in which you see a problem happening, please provide a better example because otherwise I don't get it.
In array keys, if one used name parameters to set $strict before $search_value, such as this: array_keys(input =&gt; $somearray, stict =&gt; true); would be just the same as calling: array_keys($somearray, null, true); which you can do right now. You haven't gained or lost anything. It's *not* the *order* that matters. 
Whatever really but if I listen to heavier stuff like dubstep my mind just goes fuzzy and I'm unable to think after 2+ hours. Daft punk a lot. http://i.imgur.com/dlpfDkP.png http://i.imgur.com/tKd3T6s.png
I also mainly listen to electronic, as it helps me not lose my concentration, and is just a beat in background. DI is amazing. I also really like Frisky Radio (http://www.friskyradio.com/) for what used to be known as progressive house when I was growing up. Now I think some of that 'big room' and 'drop' music is call prog house. That is more chill, spiritual, and have better flow from track to track so less distracting. Also like Proton Radio (http://www.protonradio.com/) And sometimes drum and bass, although that can distract, especially the MCs. But this is an excellent station. Bass Drive. (http://www.bassdrive.com/v2/)
http://grokbase.com/t/php/php-internals/10ayegjgg4/rename-t-paamayim-nekudotayim-to-t-double-colon 
I don't mind wordpress though. But maybe I'm looking at this from a webdev point of view. I have never coded in Drupal. I've coded a bit in wordpress and it wasn't that bad if I remember correctly.
shoutout to RJD2 while i am at it, wax tailor and b. fleischmann 
As the comments on the article say, this is unnecessary in PHP because of deterministic destruction. Just put your clean up in the destructor and it will be called when your object isn't references anymore. 
An even better solution is to typically use === unless you absolutely need ==. Typing = instead of === is a lot less likely.
destructor isn't called when we have one exception. Maybe the example with File object is not good due to the deterministic destruction, but can be used in another situations when you need to perform more operations in dispose() (database transactions, remove temporally files, register logs, ...)
Destructors are called with exceptions; that's why `finally` is such a late addition to the language, it wasn't needed. What made you think they weren't called? You can perform as many operations as you want in the destructor. In fact, there are a few libraries that simulated `finally` with destructors and callbacks. 
You might like Com Truise. 
Lindsay Sterling and instrumental remixes of popular songs are my current favorite programming tunes. Other stuff I still go to: Thievery Corporation, Portishead, RJD2, The Submarines, anything classical, and many more I'm too lazy to type.
Spotify::musicForProgramming(Spotify::mood_classical); 
Roots Reggae and Dub... when there's stress outside, I put my headset on, tune up some good Groundation or Midnite. Perfect
They are called but only if you wrap your code inside a try/exception/finally block. That's means unhandled exceptions can cause problems (for example dead temporally files, problems with transactions). OK this small library (only wraps the callback between a try/finally block) doesn't discover any new feature or something impossible to do without it. It's only a smart way of to do one thing. This feature is available in another languages. c# and python ("with" statement) for example (maybe more languages too)
Thanks!
I concur. Just an easy json import / export would be sufficient. 
I just used Sublime text O_o I don't use a IDE.
No, they are called even without try/catch. Test code: class TestClass { public function __destruct() { echo "Destructor called"; } } function test() { $test = new TestClass(); throw new Exception("test"); } test(); This echos "Destructor called". Your code is actually worse in these situations. Your clean up function will *not* be called for regular errors (use of `trigger_error` or internal errors) or when `exit()` is called. Destructors are called in both those cases. **using** exists in C# because of the lack of deterministic destruction in that language. It's sort of like a hack to provide this capability because C# finalizers are not called reliably. This is not an issue in PHP. I'm not trying to rain on your parade but C# and PHP don't handle garbage collection the same way. This library is unnecessary in PHP. It would also be unnecessary in C++ or any other language with deterministic destruction. 
your example __destructor is called but in this other one no (php facts :) ) class TestClass { public function __destruct() { echo "Destructor called"; } } $test = new TestClass(); throw new Exception("test"); I think the problem is the example that I've used. It's necessary? The aswer is No. But IMHO "using" is more clear than use a try/catch block. expecially when dispose() is involves more things than just free a resource (PHP automatically does it indeed). Provably we never will see using keyword in the PHP core, but as an external library it can be useful (at least for me)
Thanks! I'll check them out tonight. 
I'll make sure to check them them out tonight. 
I'm the exact same way. I barely even listen to music with lyrics at all now because the more I've listened to instrumentals the more I like them. 
The difference between these is that an unhandled exception is a fatal error which causes the script to terminate before $test goes out of scope in your example. It's a bit of a weird quirk in PHP but also not something you should encounter in most code. &gt; But IMHO "using" is more clear than use a try/catch block. That might be true, but actually having classes cleanup themselves is actually more clear than either of those choices. Your example is arguably simple, but having the File class call `close()` in it's destructor is so clear it doesn't even need more syntax. using(new File(__DIR__ . "/file.txt", 'w'), function (File $file) { $file-&gt;write("Hello\n"); $file-&gt;write("Hello\n"); $file-&gt;write("Hello\n"); }); vs. $file = new File(__DIR__ . "/file.txt", 'w'); $file-&gt;write("Hello\n"); $file-&gt;write("Hello\n"); $file-&gt;write("Hello\n"); // Will close right here, no need for this comment even. See, that's much nicer! No matter how complex of an example you can come up with, I suspect using destructors will be the clearest way to go. 
"but I hope you are aware [...]" Nope, I was not aware. Thanks for making me so. I will happily merge a pull request if you'd like to take a look at the issue. I guess it's a good thing I said " THERE IS NO GUARANTEE WHATSOEVER THAT THIS CLASS IS ACTUALLY SECURE AND WORKS. USE AT YOUR OWN RISK." Thanks for your feedback.
Can you please add support for additional sources? https://github.com/puphpet/puphpet/issues/142
&gt; In addition, I don't like the implementation which mucks with the stack. The VM would not need to change at all if named parameters were only syntactic sugar, handled at the call site. The code generated at the call site should simply call the original function with all the default values sourced from the function declaration and the named parameters reordered correctly to match the function signature. This can all be handled by the parser prior to byte-code generation This all sounds very nice and flowery in theory, but does not work in practice for several reasons: * Internal functions don't have default values. Default values are determined by the C code of the function implementation and can not be inferred from the outside. The only thing we can do is tell them that an argument is missing with a NULL on the stack. zpp and any custom parameter parsing code must handle this. * PHP does not in general know the parameters of a function during code generation. Either because the function is not defined yet, or because it's a dynamic function call or because it's a method call. The parameter order will only become known at runtime. * Even if PHP knew the order of the parameters at compile-time, simply doing "reordering" of stack pushes is severely restricted due to PHP's single-pass compilation process (we emit opcodes "right away" when we see an argument, not only when the function call is finished). Depending on the exact implementation you have in mind, this could also break the guarantee that function arguments are evaluated from left to right.
Because it does not allow dynamic parameter names. `[foo =&gt; "bar"]` in an array is ambiguous because `foo` could be a constant lookup. Here it is not ;)
excellent summary.
I have previously blogged about some of the common quirks and issues related to usage of data encryption in web apps: http://timoh6.github.io/2012/08/21/Cryptography-in-web-applications-a-false-sense-of-security.html I believe you can get some pointers from the blog post about issues which needs to be taken care of in your code.
In other words PHAR is not a great container for a PHP web application code?
Interesting, so in other words, always set a custom exception handler, and we're good to go?
Hey, when i started using Symfony, the main annoyance I had ( and still have, to an extend ) was with assetic:dump &amp; assets:install. assetic:dump defaults to web/&lt;resourcetype&gt;/&lt;resource&gt; while assets:install goes to web/Bundles/Vendor/BundleName/&lt;resourcetype&gt;/&lt;resource&gt; The result is that any css files ( from assetic ) can't find any non-assetic resources. To me at least it would make infinitely more sense if both commands dumped assets to the same destination by default, because as it is currently it's been quite a pain in the ass. I ended up extending the config on a bundle-by-bundle basis to make assetic dump assets to the same location as assets:install, and then using a global variable to fix the file path. Still, it's pretty inconvenient and somewhat nonsensical.
OK we can use __desctruct() instead of dispose(). I almost never use __destruct() function maybe because of that I feel more comfortable with dispose() By the other hand I must admit that the example with File() isn't the best one (due to the way that PHP handles resources). Maybe one example with a database transaction would have been better. In fact "using" is inspired in the way that Doctrine connection handle transactions [Doctrine\DBAL\Connection\Connection::transactional()](https://github.com/doctrine/dbal/blob/master/lib/Doctrine/DBAL/Connection.php#L971) 
So I did some more reading and realised NGINX and PHP-FPM are already supported. We've also been struggling with an environment for our Windows based freelancers and think this solves a problem, I'll be showing my team tomorrow!
Just added 2 album to my playlist. 
I'd like to point out that completely dropping the token names from the error message would be a bad idea, because it would make them virtually unsearchable: Try searching for `unexpected '&lt;&lt;'` on Google and see what you get. Yes, correct, you get nothing, because you're effectively searching for just `unexpected` and the `'&lt;&lt;'` is dropped. Now search for `unexpected '&lt;&lt;' (T_SL)` and you immediately get the relevant results you want. Of course it doesn't necessarily have to be the internal token name (`T_SL`), we could also use `unexpected '&lt;&lt;' (shift left)` instead. It's just *some* textual representation that should be there.
&gt; and see what you get http://www.reddit.com/r/Unexpected
Yeah that had been mentioned in the thread but I don't really see the issue there. Unexpected &lt;&lt; on line 45. "Oh right, I should probably remove that fucked up git merge then." How much more useful is unexpected T_STRING than unexpected string? A human replacement would also be more useful than the token name. Unexpected double colon (::) in... The token name is either cryptic or unhelpful at best.
From the article: try { $file-&gt;write("Hello\n"); // ... // some other things // ... $file-&gt;write("Hello\n"); $file-&gt;close(); } catch (\Exception $e) { $file-&gt;close(); } If you're doing anything like this you've already fucked up. You should not be catching such an exception just to close the file while not notifying any of the callers. It's fine to catch the exception in this case in order to close the file handle, but you really should be raising the exception again.
I dunno, I feel the same way though.
You have a point, but they should then go for something like 'string','double colon','semicolon' instead of whatever php's core names those. Using Hebrew when everything else about the language is in English is completely retarded, and I still remember my initial confusion when I first encountered it. If somebody wants to troll people with a programming language, they should contribute to something like brainfuck.
Something in PHP was stupid because of people pig-headedly looking backwards and maintaining a status quo despite the flagrant stupidity? I find that very hard to believe... :) Excellent work, Phil, I do love me a sweary rant. 
 this error confused the shit outta me the first time I saw it.
Funny he should mention that as a "tip of the hat" to the Israeli community, because as an Israeli, I always found PAAMAYIM_NEKUDOTAYIM quite embarrassing. In the Hebrew-speaking (and IMHO in the general non-English-speaking) programming community, using your native language in your code is a sign that you couldn't be arsed to find a proper English word for a tricky term. In other words, a sign of a rush job, on the scale of naming a function "do_stuff". Also, it actually sounds more idiotic in Hebrew than in English. It doesn't actually mean "double colon" (that would be "nekudataim kfulim"). It's "twice-colon" or "two-times colon". It was probably selected because it rhymes and sounds funny.
Nobody likes my simple BTC calculator? I updated the article to show exactly what uBTC and mBTC is. If anyone else has any ideas on how to make the article better - im all ears.
out of interest, would it be worth people that support new ideas sending emails to say that yes, this would have a positive impact on their workflow, or would that just be further shitting up the mailing list? side note, I run a large forum (few million members) and proposed a policy change a while back and the reactions we got from our hardcore members were very much like the reactions included in this blog post, "this is a terrible idea", "it's always been this way why change it?" but I stood firm, said that unless there is a compelling reason for the policy to remain unchanged I would be changing it, nobody proposed a worthwhile reason for no change to be made (that balanced out the negatives) so I made the change. That change has paid dividends, it was a fantastic thing to do and if we'd listened to the vocal fuckwits we'd never have made the change... which would have sucked long term. People need to understand that unless they have a compelling reasons for something NOT to happen (eg: it doesn't fit the core vision of the project, it will break significant amount of things) then they should shut the hell up, 'cause arguing against progress because "we've always done x" or "but people can just deal with the problem themselves by using google" is fucking stupid.
(copied from same post in /r/programming) Not helpful at all, and very arrogant towards non-English-speaking coders. I left you a bit of trolling of my own, because I sincerely think your post is nothing more than pure trolling. You could have presented both (or all, really) sides of the debate and let your readers make their own conclusions, but no: you had to dismiss all points of view different from your own as stupid, offending the international community in the process. An amazing feat for a troll, is what I say. EDIT: After arguing for a while, you called me "idiot" and sent me an email stating that you wouldn't approve any more comments from me because it's "hilarious" that I get upset. In a previous post (previous even to my knowledge that your blog existed), you wrote that anyone who thought that arrays were an acceptable way to implement named parameters is "crazy". It's now evident that you are the only troll here, and that you are simply offended by differing opinions. 
&gt; you wrote that anyone who thought that arrays were an acceptable way to implement named parameters is "crazy". To be fair that really sounds like a bad idea. 
I replied to that over on the [original thread](http://www.reddit.com/r/programming/comments/1m2709/t_paamayim_nekudotayim_v_sanity/cc564x5). Lets not play copy and paste all night.
Why are they so stubborn about this error? Put your heritage on the *phpinfo()* page or somewhere else where I won't have to frequently deal with it.
I have two projects that work towards some of the same goals: "[near](https://github.com/IcecaveStudios/near)" builds a .phar directly from a composer package by looking at the composer.json "[near-assets](https://github.com/IcecaveStudios/near-assets)" is a libary to assist in embedding/extracting non-PHP assets, but it's very immature, in fact I can't remember when I last got a chance to work on it. We use Near pretty regularly for packing up projects that have CLI tools, but not yet for web-based projects. Still, maybe these can be of some help :) Edit: In regards to the build steps, we always build everything into the phar on our CI server, including composer dependencies. This means that during deploy on the production servers there is nothing else that has to happen to activate a release (ie, if packagist/github are down we are unaffected, which has saved us once or twice)
I do what I can
Mac: "Here's a crowbar. Hammers are too mainstream." ^^^^(Funnily) ^^^^(enough) ^^^^(I'm) ^^^^(a) ^^^^(Mac) ^^^^(user)
&gt; Are you planning on continuing development after your contract? Yes I will. I plan to release the product open source and develop a side of my business by selling services related to that project. So, I'll continue to develop it after this contract. I'll let you know when I release it :)
Yep. When Java was first coming out in the early-mid 1990's, all the C++ guys were taking dumps all over it. "Java is a toy language, Java will go nowhere" ... they said. Not exactly the same but language wars among nerds in common. 
:( :( 
I remember when I first came across this error, I found it quite amusing as it was completely nonsensical. I really couldn't care either way if it is removed or not since it doesn't at all effect the functioning of the language.
I disagree; they should be as diverse as possible, so that your software becomes less dependent on running on a particular configuration. But yes, you should also have a place where you mirror the production environment. I just don't believe that one should preside over a monoculture of computing configurations.
I honestly don't understand this regex hate that I see sometimes. It's like refusing to have knives in your kitchen because they can cut you. If there's any one thing that's consistently made me into the "guru" in co-workers' eyes, it's knowing how to use regular expressions. The conversation afterward typically goes like this: "Wow, how did you find that one line in this 10-million-lines log file?" "I used a regex." "Wow, that's awesome. I should learn to use them too."
Who'd have thought I'd get the answer I was looking for 12 days later? Thanks, I didn't know subshells were a thing.
Because there's not enough hours in the day to stuff around with what looks like trying to set up an excel data entry type... which can be annoying and a time vacuum. In some contexts it's probably perfect for a job, but I keep hearing every so often complaints about people misusing, overusing, or improperly using, regular expressions and making a mess of things. Some stuff is just better-off done the old-fashioned way instead of trying to find the most clever, or compact, way of doing it. It looks like hieroglyphs, and I've got code to write and bugs to find. I don't want to be decoding my own code. If you are used to using regex's and are competent then cool, but I'm getting too old for this shit and I have no time or desire to keep learning newer and more complicated ways of doing the same old thing. E.g. Haskell? The hell is that all about? And the other day someone asked webdev something like "Who uses Sass with bourbon and less", or something... and I honestly don't know if that was a troll / joke post or actually means something to some people. It's fine if people want to keep toying around with various new things, but at some point people have to knuckle down and actually produce content. My days of learning new stuff has mostly passed. Where people / kids these days are cramming their heads with lovely jquery and haskell and whatever else was me a few decades ago cramming my head with assembler and qbasic and pascal and C. The learning has to eventually taper, and the work be done. **tl;dr Can't be bothered with all of these new toys. Have stuff to do and people to see. I'm happy with my old-timey for-loop and if-tests. Diminishing returns makes you pick your battles.**
Oh and: /** * NOTICE OF LICENSE * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * * @copyright Copyright (c) 2013 Anonymous * @license http://opensource.org/licenses/MIT The MIT License (MIT) */ Enyoy!
Are you sincere in supporting this one non-english item? If so I expect you would support more non-english items: I would suggest we change '?' to T_SPØRGMÅLSTEGN and '#' to T_HAVELÅGE. That would no only promote a broader understanding of non-english languages but also promote an appreciation of encoding issues in general. And my respect for PHP as a serious language would even further increase.
Or woman.
So?
That can simplify the code a lot in all that cases in which you deal with ranges with non bounded edges.
This isn't exactly a special feature. Most languages has this. Additionally, please refrain from making posts which just links to the manual unless it's a new language feature. It adds very little of value to the community. 
I program in PHP for many years, and my coworkers and did not know that constant. So I thought it could be a good discovery for many other php programmers. Not every PHP programmer read each line of each php documentation page. Some are quite hidden to the main searches. I was pointing to a specific part of that doc page. However, thank you for your opinion, I will take it into account in the future.
Absolutely ! And I would be delighted to see more women with important roles in the Open Source community. 
[Tycho is awesome (mostly instrumental)](http://www.youtube.com/watch?v=m94Dhu8gUDw) [Teen Daze](http://www.youtube.com/watch?v=WUiFl5vFdis) [Groove Salad mix on soma.fm](http://somafm.com/play/groovesalad)
I would also like a language where I have to google all the variable/constant names.
you deserve more points than the single one I could give
"It's tradition" is the worst fucking excuse in existence. You should always do things in the best way possible. If your "tradition" is no longer optimal, change it.
Oh I know. I just don't know the exact English phrase for them in this context, and didn't bother look it up. I was a bit hastily on my phone, so... You would at some point at least for '?' be in a similar situation to '::', the hash char is probably irrelevant. Still I think "Parse error: Syntax error unexpected T_SPØRGSMÅLSTEGN" would be awesome.
Please note that, as I said in a previous comment, I agree with Phil when he says that the token name should be hidden from the user, and that the error message should only show the symbol itself. Which makes his point even more absurd, since, if the user doesn't see the token name, s/he will never be confused by it. 
But they do, so they are.
Keep spreading the word about Phalcon. In time the community will grow and PHP apps will be faster. I think because people already invested a lot of time in Symfony/Zend, they're just saying you shouldn't worry about speed. Speed matters. I can't remember the number of times times I've closed a tab because it took the page &gt; 2 seconds to load. 
The article links to a pdf report which can be found [here](http://www.imperva.com/docs/HII_PHP_SuperGlobals_Supersized_Trouble.pdf)
-1 because the article is *shit* (and link bait). I didn't understand a word in it. After a cursory glance at the paper itself this is just the usual "Don't use register_globals or extract() blindly, because it can also overwrite stuff like $_SESSION, which is bad in itself, but further amplified by the fact that it might run __wakeup code when the session is read."
So you agree that we should emphasize the use of not just Hebrew and English but try to have all (human) languages represented in our programming language to raise awareness of the fact that English and Hebrew are not the only languages out there? I find your views fascinating, I really like the prospect of this. It'd be totally awesome to have messages like this: ... Unexpected T_字串 .... Fatal error, unknown T_تقریب After all, google translate is only a couple of clicks away, you only need look it up once and it'll stay with you for the rest of your life.
The needle/haystack thing really isn't *that* bad--it's needle,haystack for arrays and haystack,needle for strings. (It's still pretty bad, but I wanted to point out that it's not *random*, at least.) Of course, giving all the native datatypes OO wrappers would help that issue so much. $array-&gt;search("val") and $string-&gt;strpos("needle"). If only.
I like Vagrant but I am a windows user. I'm running into the problem that a shared drive between my Vagrant linux box and my windows environment was really slow. I tried Symfony and from what I've found the problem was that Symfony uses a lot of stat's which is really slow on the shared drive. Are there any solutions for that?
Merely remarking that its an entertainingly unique phrase. Nothing more. 
For us germans I DEMAND a ... Unexpected T_SAUERKRAUT
Virtualbox's shared files is stupidly slow, even on OSX. The best suggestion is to upgrade to VMWare.
Might I also request defaulting sendfile to "off" for both Apache and Nginx configurations? This is to get around the nasty bug that exists with VirtualBox and serving static content from shared folders (which I anticipate most people using puphpet will probably be doing). ^(yes, this is kreeves)
I haven't experienced the slowness... Only the bug mentioned in my comment up above.
I'm just imagining my laptop spouting out: Fatal error: unexpected T_COFFEE 
Regardless of what language they decided to use, it should've been consistent the way through. So the point is valid.
git deployement / scp or a CI server are a better options. They just work. Phar files have a lot of issues and dont make much sense if you have total control over your server staging and production server.
I found it entertaining to read and then more so to see the comments on your article had attracted the same kind of toll-ism that you had written about :)
Fortunately the language for anything new has been - and will be - 100% english, its just that old artefact hanging around causing trouble.
Please try this, it helped me (I'm on Windows 7): http://www.reddit.com/r/PHP/comments/1gyy7v/a_simple_gui_to_set_up_virtual_machines_for_php/capne3p
Blobfish
&gt; I would suggest we change '?' to T_SPØRGMÅLSTEGN and '#' to T_HAVELÅGE. Sorry, but that's never going to happen. Not for lack of batshit insanity and spite, but because PHP would have to grow up and become a big boy language with Unicode support first. The former kind of precludes the latter.
Good article. BTW at the beginning of the post you mention about using the "old PHP rand() functions". It is highly recommended instead of using rand() to use mt_rand() which provides better random values.
It really isn't "strange" for NB to outperform more sophisticated techniques, such as SVMs and RFs in text analysis. A great example is the Newsgroup20 dataset. An out-of-the-box Multinomial Naive Bayes model fit on the tf-idf representation of the documents easily outperforms SVMs, RFs, and others with much less computational burden. The author should try weightily averaged NB model which relaxes the feature independence that NB makes. For a little extra cost, the classifier will likely increase accuracy higher than the vanilla NB.
What are you talking about encrypting? Like, are we talking about password *hashing* or ssl or what? 
Proper encryption/hashing isn't a PHP-programmer problem, it's a general-programmer problem. You don't need to learn how to do proper crypto in PHP, you need to learn how to do it in general - simply the algorithms
I like noise/industrial ambient/etc. sort of stuff: * Alberich * Work/Death * Brighter Death Now * Damien Dubrovnik and others..
&gt; First off, Redis and Varnish are completely different tools. Varnish is a memory-caching HTTP proxy, while Redis is a database system. While they might be used to the same end (speeding up your application), their implementation differs. Redis is a persisted key/value store, not a database.
Then it's time to give him a mega upvote, go through every post he's ever made on reddit and upvote them all
Most of the confusion stems from the fact that PHP "arrays" have never been arrays, they are hashes / dictionaries. Personally I think it was misleading to call them that, maybe it's just an oddity of history though. If you remember that, the Big-O time of functions all make intuitive sense again.
I'm, mostly, a .NET developer and as such we have access to a pretty extensive cryptography library built into .NET, but anything that I've done in .NET could easily be done with with PHP with either built in functions or 3rd party free cryptography classes for things. My rule of thumb with cryptography is AES all the things. I use a simple salt which is random bytes followed by a null before my data before I encrypt, then when I decrypt a salted string I decrypt it and strip everything to the first null. The major benefit to this is someone can refresh a page and any encrypted data on it will generate a different string output each time making it nearly impossible for them to generate any sort of lookup table. My 2nd rule of thumb is all ID data that is exposed to the web browser must be encrypted. No passing p=13 in the query string, instead its a base64 (with = signs stripped and a couple other characters replaced to make it url friendly) so it ends up being p=x3alkjdslfkn32hsi3ls and if the page is reloaded the link ends up coming out as p=skeusuneslknesl832 even though its decrypts to the same number. This prevents people from saying "oh p=13 is me, what does p=14 give me?" and suddenly they're looking at someone else's profile or some information they shouldn't be looking at. This way all my encryption and decryption is handled on the server and the client never has any way to see the decrypted information. Obviously your encryption keys (With AES its a Key and IV) can never be exposed, they must be kept safe so you have to ensure you don't do anything that would allow a savy person to change a file download script path to let them download your config.php file. In fact using encryption you can force file download paths to be encrypted and salted making it for all practical purposes impossible for them to use it to request any file other than the one you generated the link for. It adds minimal overhead, AES is a stream encryption that is extremely secure and the only known attacks require the attacker to have so much information about your key/IV already that its not really an attack. I wouldn't use this for passwords though, for .NET there is a built in PBKCS library that is better than bcrypt as it supports passwords of any length while bcrypt is limited to 44 characters (if I remember right) but either way your passwords should be encrypted with either bcrypt or PBKCS with an iteration count that takes your server around 500 ms on average to hash it. They should also be salted, every password should be salted with its own unique salt, using 1 salt for an entire site is less secure than using a unique salt for every password even if the salt is exposed in the chance your database is compromised. With unique salts anyone trying to hack passwords has to create a seperate lookup table for every single password/salt combination instead of creating a single lookup table with your global hash salt. Other than that, there isn't much else to worry about. Just keep it like this: If any information is sent from the server to the client for the express purpose of being passed back to the server at a later time, that information should be encrypted. Edit: Some people might praise Blowfish, but with my tests with Blowfish vs AES (supposedly blowfish is faster...). AES is a binary encryption, which means it encrypts bytes and returns bytes. Everything can be converted to bytes easily and come back from bytes easily so its easy to implement. But blowfish is a long integer (64 bit integer) based encryption so to encrypt binary data or string data it has to be converted, then fed into the blowfish algorithm in chunks it understands and then converted back when it decrypts and that overhead of breaking things up for blowfish ended up making it slower to encrypt things like strings than AES and considerably more complex. In the end I found the difference to be small enough and AES to be more consistant with varying data types to prefer it over blowfish. The only actual use of blowfish I have in my sites is the encryption of my connection strings, which I first AES encrypt then blowfish encrypt then store resulting base64 string. Its still not perfectly secure if someone can get my source code they can reverse it, but it will still take someone probably more time than its worth to figure it out if they somehow get a hold of my web.config file.
Agreed. As a Hebrew speaker myself, this name always pissed me off. It's the only English transliteration of the wrong Hebrew term I've ever seen in an otherwise-English programming language. I like the idea of easter eggs, but this doesn't qualify, it's just strange and out of place. Also, the main reason I've seen this error is because of all of the crazy PHP errors I run into...I'd blame my own programming abilities, but I've yet to see anywhere near that number of peculiarities since switching primary programming languages
For websites where users are logging in and doing things (and subsequently their identity is displayed somewhere on the page), it doesn't seem like Varnish is of any use. In other words, does the existence of *any* dynamic content result in the inability to cache or could it be possible to create a hybrid delivery mechanism? Or is this part of my own misunderstanding and ignorance on the topic. NOTE: I'm talking wholly about Varnish. I'm quite familiar with and already employing Redis as a data store for some elements.
Can someone explain array_push? I thought it would just be O(1), since we're just adding to the end... Edit: Ah never mind... array_push takes in multiple elements. I always forget that.
No, that was a joke. The reason for the inclusion of that single string in Hebrew in php's code is sufficiently explained in the post we are commenting on. And that reason is not "to raise awareness of the fact that English is not the only language out there". I think you have noticed that.
I had heard of ESI but I hadn't honestly dove too heavily into it because I wasn't for certain it was the answer to my question... But I will certainly dive into it now and see what can be done with it! Thanks for your answer.
&gt; No passing p=13 in the query string, instead its a base64 (with = signs stripped and a couple other characters replaced to make it url friendly) so it ends up being p=x3alkjdslfkn32hsi3ls and if the page is reloaded the link ends up coming out as p=skeusuneslknesl832 even though its decrypts to the same number. This prevents people from saying "oh p=13 is me, what does p=14 give me?" and suddenly they're looking at someone else's profile or some information they shouldn't be looking at. Please tell me you're also implementing proper permissions so users can't just increment IDs and gain access to another user's profile. Security by obfuscation is poor security.
Not really. PHP arrays are an interesting hybrid of an associative and linear array. In certain modes, it functions more like the latter, and in others like the former. `$array[0]` and `$array['0']` do quite different things.
Ah! Okay, this is probably why it hasn't clicked for me. I build mostly user-centric apps. Thanks!
Thank you! That makes much more sense.
This is quite important. All of these are quite different: * SSL is *encryption*, essentially (un)scrambling data with a known key, and is handled, for the most part, by PHP, your browser or your web server. * Password storage is done with password *hashing*, an irreversible operation where certain plain text is transformed into a scrambled output. If the operation is slow enough, it should be difficult to find what the password was, since trying millions of password possibilities is too slow. For checking passwords, you do not decrypt the password - you can't. Instead, you hash the password you were sent and compare it to the stored hash. If it matches, you log the user in. For this, the best solution is to use the new [`password_hash`](http://uk1.php.net/password_hash) function in PHP 5.5, or for older versions, [ircmaxell's PHP version of it](https://github.com/ircmaxell/password_compat). * For encrypting of documents and such, this is another form of *encryption*, and something you'll also have to handle yourself. I doubt, with most websites at least, that you'll need to deal with this.
Already answered, long ago, by Phil himself, in the post we were discussing.
I don't care about downvotes. The very first commenter in your post said the same thing I say, and was also promptly attacked and insulted by a third commenter. Whether I am right or wrong is not a matter of votes. EDIT: I see that I'm the only one *here*, yes, but others have come to say the same thing in new comments in your blog (where I am now banned). So, if numbers matter to you, I have some as well. 
@philsturgeon I really sympathise with the sentiments in the post, and would say I'm in your corner on most things, that discussion in the mailing list was tragic. But it's still a shame to see this largely symbolic fight play out like this. It seems a huge waste of energy and effort over something very trivial. I'd like to think that most people here have better things to do with their time (like learning some C, perhaps? PHP needs more &amp; younger devs, that much is obvious from all this). That said, for what little it's worth, when I first saw PAAMAYIM_NEKUDOTAYIM I also giggled a bit with the usual WTF?? moment. Searching for it, then trying to understand the Israel connection led me to explore the Zend engine for the first time. So it took me down the rabbit hole at least. Think of it as a red pill/blue pill kind of thing. :) Also, it's nice to know that the PHP devs have a sense of humor (-ish, but at least it's better than Microsoft's `0xB16B00B5`). 
Oh no, the first guy questioned the use of "trolling" to describe things, I explained that I was exactly right in my use of the word. Then you went on a major offensive about how I hate all non-English speakers. You were both talking about different things. He was asking a question, you were making crazy accusations for no obvious reason.
See what I said before? If you evidently lack even the ability to grasp what my clearly and repeatedly stated objection *is*, why should I care if you upvote or downvote me? Jesse, myself and others have told you in a variety of ways that the people who you call "trolls" and "crazy" are not, they simply think different from you. You haven't "explained" their mistake, you simple restated several times that all of them were trolling or off-topic. Which they were not. Clearly, the troll is the one who says that all opposing views are "crazy" and "off-topic". I.e., you. 
That's still a hashmap governed by a hashing function, except the hashing function has been customized to store numbers directly. The same is done for python's implementation of dictionaries.
Well, it means it functions more like a plain array when dealing with integer indexes. That's my point.
Thx, I'll try both. I know python would work for sure but I'd like to try this one, too. My alternative is to use php process forking
Any particular reason for that ?? Python threads use a GIL, they are pretty pointless ...
Crypto I already started &gt;_&lt; Started it anyway, I'll rearrange my overtime schedule. Thanks a lot !!
That is one of your many complaints yes. Annoyingly the complaint that is most important to you just seems to change over time (or around in circles) so as soon as one is answered the other pops up, like whack-a-mole. If you can honestly tell me you think that the conversation being had on that mailing list thread was constructive then we can leave it there, because we'll never agree.
No, you still don't get it. That's my *only* complaint. Everything else are just examples of you doing what I'm saying you do. 
The amount of time that went into trying to block this obvious trivial improvement was doubtlessly considerably more than went into the RFC, especially when you consider how long it takes to read through replies. A tragic waste of time. This is why I'm highlighting some of the stupid circular trolling that happens on internals. If people can try to focus their thoughts and opinions into constructive conversation (or silence) then internals will be more efficient, the signal to noise ratio will be boosted and everyone benefits. The FIG ML had some similar troubles, then we all started self-policing and things cleared up pretty quickly. Hopefully internals can start to do the same, and hopefully this will interest some young blood into joining the group to try and fix the situation. 
If you can honestly tell me you think that the conversation being had on that mailing list thread was constructive then we can leave it there, because we'll never agree.
You have said yourself that a particular poster gave three different reasons to leave it like it was, and, after a long argument, he changed his mind. That's productive/constructive in my book, but you, who seem to consider any contrary argument "trolling", use that example *precisely* to demonstrate that it was not . I can't even begin to say how twisted your logic is. Anyway, it's obvious that we'll never agree. You're so full of yourself that you will never accept what we are telling you. Goodbye. 
&gt;You're so full of yourself that you will never accept what we are telling you. Who is "we"?
Bye :)
All the commenters that told him in his blog that what he considers trolling is really not. 
Thank you for your comment. I guess this is the same what other people try to say that PHAR is not a good idea for a web app. Perfect for CLI but that's it.
 This wouldn't be an issue if PHP had object oriented features or they had just written it as a Java applet. Oh wait, this article really was written this decade....Mother of God. 
I don't think you're understanding me, I'm base64 encoding the encrypted ID, not base 64 encoding the ID value. AES returns a byte array, you can't pass a byte array in the querystring without base64 encoding it first. I understand proper validation is important, but my point isn't about chosing one over the other, the OP asked about encryption, not validation, its about making everything as secure as possible, if every piece of potential data that is presented about your architecture is completely unavailable to anyone trying to hack your system then they don't even have an entry point to even try.
I usually have no idea what "T\_PAAMAYIM\_NEKUDOTAYIM" actually means (except when I just read it, like in this thread) but I always read it the same way as I would read "C\_[CTHULHU](http://en.wikipedia.org/wiki/Cthulhu)" or something else equally geeky: [a well known phrase for (some) geeks](http://en.wikipedia.org/wiki/Cthulhu_Mythos_in_popular_culture), yet it has no or not much of a meaning, and virtually nobody knows how to spell it correctly. Is it an embarrassment? Not really. Is it funny? No. Is it appropriate? Shrug. Who cares.
Wait, is this a joke? https://github.com/sanjoy87/cygniteframework/blob/dev/composer.json "require": { "php": "&gt;=5.3.0", "another-vendor/package": "1.*" }, https://github.com/sanjoy87/cygniteframework/blob/dev/packages/cygnite/libraries/globals/globals.php A class for globals?! https://github.com/sanjoy87/cygniteframework/blob/dev/apps/routerconfig.php#L1 Are we still doing this? I don't think we are. Why are you still doing this? https://github.com/sanjoy87/cygniteframework/blob/dev/apps/routerconfig.php#L31 This is why you don't use tabs, kids. https://github.com/sanjoy87/cygniteframework/blob/dev/apps/components/libraries/authx.php#L36 var $query = NULL; public $username = NULL; `var`, in my PHP? Why, I never! Also, you don't need to set a class property as `null`. It's set to `null` by default. https://github.com/sanjoy87/cygniteframework/blob/dev/apps/components/libraries/authx.php#L49 Doesn't seem like you know much PHP? https://github.com/sanjoy87/cygniteframework/blob/dev/bundles/Role.php#L2 This is not how namespaces work ... https://github.com/sanjoy87/cygniteframework/blob/dev/apps/components/libraries/authx.php#L61 IMO, `foreach : endforeach` and its ilk should be removed from PHP. It barely belongs in templates, it doesn't belong in classes. https://github.com/sanjoy87/cygniteframework/blob/dev/packages/cygnite/libraries/globals/globals.php#L153 Jesus christ. Please don't use this framework.
&gt; PHP is an alternative to Microsoft's Active Server Page (ASP) technology oh... kay
I love that line... It does sort of sound as though they're saying that ASP is the suggested technology, but if you must, you can also use PHP in a pinch. It also later goes on to quote "The effects of these attacks can be great as the PHP platform is by far the most popular web application development platform".
Reminds me of a time I was looping through a pretty big array (can't remember how big 500k to 1M I think). In a misguided attempt not to chew up memory unnecessarily I was looping by doing: while ($whatever = array_shift($bleh)) { That was pretty damn slow. A real "d'oh!" moment when I spotted that one. 
I'm sure there are many ways to do it, but the first idea that comes to mind is Gearman. You can create a job that runs in a worker thread and then check on it with each subsequent AJAX call. Gearman let's you queue up multiple jobs and assign unique ids to each. So the first request can return the id to the client and the subsequent requests can ask after that specific id. Probably possible with something like proc_open or exec &amp;2&gt;1 using pids too.
Have a page that loads and then kicks off an Ajax request to another php script which creates an id'd row in a database table, then kicks off another system called php script providing the id, then returns the id to the Ajax response. The system run php script does the long thing/hard work and updates the database with its progress. Then have the first page kick off polling Ajax request to another script which checks the progress based on the initial id. Sorry for formatting I'm on my phone. Also for a more in depth idea see here http://symcbean.blogspot.co.uk/2010/02/php-and-long-running-processes.html?m=1
Point taken on encrypting the ID before encoding it (it read to me like you were just base64 encoding it and calling that encryption). I still stand by my comments about trying to hide IDs, though. Whether it's obfuscation or actual encryption, it's unnecessary either way. I understand that you're doing this as a precaution, but it's an unnecessary precaution, as a sequenced ID is not sensitive information, nor could it be used as an entry point for security breach if you have proper authorization (and if you *don't* have proper authorization, then you've got security holes whether you encrypt the IDs or not).
Cheap and dirty, but I'd do something like this. // Check DB if update is currently happening $dbIsBeingUpdated = $db-&gt;"SELECT isLocked FROM statusTable WHERE scriptName='thisScript'"; // Returns TRUE or FALSE if ($dbIsBeingUpdated == TRUE) { echo "Please wait... Processing a bunch of DB and CURL stuff!"; echo "Put some JS here that handles the AJAX, or if you're super lazy, have JS just reload the URL"; } else { // UPDATE statusTable SET isLocked=TRUE WHERE scriptName='thisScript'; // do DB and CURL stuff // UPDATE statusTable SET isLocked=FALSE WHERE scriptName='thisScript'; } BONUS: Give each user a token for the transaction. // Check DB if update is currently happening $userToken = $_REQUEST['userToken']; $dbIsBeingUpdated = $db-&gt;"SELECT 1 FROM statusTable WHERE userToken='$userToken'"; // Returns either 0 or 1 if ($dbIsBeingUpdated == 1) { echo "Please wait... Processing a bunch of DB and CURL stuff!"; echo "Put some JS here that handles the AJAX, or if you're super lazy, have JS just reload the URL"; } else { // INSERT INTO statusTable VALUES ($userToken); // do DB and CURL stuff // DELETE FROM statusTable WHERE userToken='$userToken'; } You will need to account for things like the script never finishing (and leaving values in the DB that should have been either set to FALSE or DELETEd. Also you'll need to use a real DB connection obviously. This is half PHP, half pseudocode, half hasty programming.
I'm no substitute for either of them (the biggest thing I ever did was get rid of Logo GUIDs), but I've come back to PHP dev now after seeing that post. I *think* I have a sane vision.
While I agree if everything else is done properly its an unnecessary precaution, I also just feel dirty exposing any data I don't have to. Since the encryption and decryption incurs fractions of a millisecond in processing time, I would still rather keep any exposed data as secure as possible. Edit: One thing I've seen in my logs is bots using numerical querystrings to try and post sequential ids to get values, that extra spam of the server may not mean much, but it stopped entirely when I stopped having any numerical values in my querystrings. Sure I get random bots replacing it with random data, but I always had those, the number of attempts has gone down, and for such a simple change I'd say that's a benefit.
There is a problem with these rants. Not the valid points made nor the passionate words spoken, by both authors and commenters. The problem is nobody is doing anything about this. History can and will repeat itself. The question is not if, but when the next guy is leaving the php dev team... Disappointingly, the elitist core seems to be an immovable force of never-grownups, and yes indeed the loud trolls aren't helpful either. I hope the follow up to this article is about What we as a community can do to fix the situation.
I saw this and was genuinely concerned at first. I'd always assumed the $_SESSION data, for example, was pretty secure. Then I saw that the "exploit" required the use of parse_str, and that I'd never heard of or used that function and that it looks by nature horribly unsafe. Anything that causes unpredictable "register_globals"-like behaviour is inherently a bad idea. See also: extract. 
&gt; As opposed to hitting the page the first time and have it sit the whole 30 seconds it takes to load? Also, a question here. What does it matter? The user will end up waiting 30 seconds either way (AJAX events firing, or not). Why not handle it this way? Cheaper and dirtier! &lt;div class="loading"&gt;Loading &lt;img src="loadingSpinner.gif" /&gt;&lt;/div&gt; &lt;div class="results" style="display:none;"&gt; &lt;?php // do DB and CURL stuff // echo it all out ?&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; $('.loading').hide(); $('.results').show(); &lt;/script&gt; This way, your script will automatically load the "Loading..." spinner and create a hidden div where the DB calls are being echoed into. Once the heavy-PHP-lifting is completed, the rest of the HTML document is delivered. Namely, a jQuery instruction to hide the "Loading..." div and display the "results" div. Super basic way of doing it, and it will fail if HTTP times out or PHP script execution time is just simply too much. But it is simply another option that avoids using too much extra stuff like AJAX. (Not that anything's wrong with AJAX, but sometimes it's better to KISS).
I'm not convinced PHAR is a bad idea for the web - as someone else mentioned the op-code caches support it, which would be my primary area of concern. I'm sure there will be other issues, but I just haven't got around to trying it yet :)
Gearman. It's simple and easy to use and provides you with status reports. Unlike ironworker it does require you to run the scripts on a server and host a gearman server to manage everything yourself. Also http://gearmanhq.com/ is up and coming. Here is a sample of what I imagine you're thinking Javascript: var jobId = null, intervalTimer = null; var progress = function(){ $.get('/status?id=' + jobId, function(response){ if (response['status'] = 'finished') { clearInterval(intervalTimer); // do stuff } else { // still going } }); }; $.get('/work', function(response){ jobId = response['job_id']; intervalTimer = setInterval(progress, 10000); }); Work: $gmclient = new GearmanClient(); $gmclient-&gt;addServers("&lt;host&gt;"); $job = $gmclient-&gt;doBackground('dofunc', 'payload'); echo json_encode(array('job_id' =&gt; $job)); Progress: $gmclient = new GearmanClient(); $gmclient-&gt;addServers("&lt;host&gt;"); $jobStatus = $gmclient-&gt;jobStatus($_GET['id']); echo json_encode(array('status' =&gt; $jobStatus[0])); Worker (too lazy to write it all): function dofunc($job) { for($i = 0; $i &lt; 10; $i++) { sleep(1); $job-&gt;sendStatus($i,10); } }
Even though this is half pseudocode and half hasty programming, it should be mentioned that this code as is suggests some massive SQL injection flaws because $_REQUEST['userToken'] doesn't appear to be validated, sanitized or escaped at all. 
 they actually well over write each other. I learned that the hard way. 
 how did you end up solving this? I would just break it up and process it in chunks.
For the fast and dirty approach, I'd use output buffering and multi-part responses. Basically long polling. Look here http://ajaxref.com/ch3/multipart.html The part about having multiple people using the script. That's not an issue. Each request is a separate request, there's no issue with the first request finishing its work so the second request can be worked on. That's already handled by your web server. The more correct way would be to use a socket server, to much to explain on reddit from an iPhone!
 $bleh = array_reverse($bleh); while ($whatever = array_pop($bleh)) { This *might* be alright. A regular foreach would also be acceptable, since you're just going over the list of values. Optimization requires a bit more insight into what exactly you're optimizing.
Yep! As I said, cheaper and dirtier!
 this requires two iterations though. I suppose if memory is limited this would be a good working solution. 
Yup! The "code" that I provided was merely an example. To push something as dirty as this into production would be insane! But I think it is a step in the right direction for OP. As everyone should know, user-provided data should never be trusted, ever. Even if the user is you.
Sooo.. implement it, and then give us the url so that we can see how good you did.
The follow-up should be obvious. Get involved, sign up for internals, fight for logic and truth. When somebody gives a bullshit argument you should point out why, and when somebody gives a valid argument you should thank them.
Phew... cause that is exactly what keeping PAMAKALYIM_NEUDESTROKEN is suggesting. 
All you really have to do is with a jQuery AJAX call, create a span/div with some waiting text and/or gif that is CSS hidden with an id on it, with the "before:" segment, show the hidden span/div with the waiting info, then in the "after:" segment, hide the span/div again. It'll sit there visible while the AJAX call is waiting, and will clear up when done. The UI will express this explicitly with your span/div, and the user will understand it's waiting for a complex call. You can make a number of AJAX calls at at the same time, just use this same process.
keygen music in a loop
Thanks! I made a article with the improved code: http://grnlight.net/index.php/programming-articles/12-php/37-ubtc-mbtc-calculator-converter-redux
Not to be contradictory, but error numbers can be googled pretty well while also having that very "vanilla" feel that folks are asking for. Just try searching for C2143 on google to see what I mean (MSVC error)
Depending on your problem, the suggestions in this thread are going to lead you in the wrong direction. I say "depending on" because if you're doing something like processing MP3 data to a database for 30,000 or more files then that will take a long time and is best done over a course of AJAX requests. For things like CURL and DB stuff, I assume you're making a single call to get some sort of user information from a REST service along with your DB. This is best done by using [Curl-multi](http://php.net/manual/en/function.curl-multi-init.php) in PHP for the multiple CURL requests, and using database stored procedures to make your queries faster. You should also look into your DB indexes to make sure your database is as fast as it can be. Once you get all of the results back in the format you want for your (single) AJAX call, you should cache the result in PHP Memcached, then the next request will be lightning quick for the next call. Be sure to cache as much "static" information as possible (stuff that won't change for a few hours). Client-side requests take a long time to run compared to waiting for an initial response from the server. If your guests are going to be using mobile devices then each request can take anywhere from 5-30 seconds or more, depending on the mobile network quality. It's always best to reduce the number of requests first by compiling Javascript code, compiling CSS, and improving the overall speed of the system to reducing call volume.
PHP script could cache the images server side and return a URL instead of the actual image. Here's a bunch of code I have not tested and typed on my phone, so no promises, but something like this: PHP responds with a JSON object: { "status": "success", "url":"//domain.com/cache/hashOfData.png" } Then a jQuery example would look something like this: $.ajax({ type: "POST", url: '/imagegen.php', data: myGraphData, dataType: 'json' }).done(function(response) { if (response.status === 'success') { $('&lt;img/&gt;').attr('src', response.url).appendTo('#graph'); } }); 
Why is it bad?
Mind = blown. I've never worked with ajax or json before, and rarely with jquery. I guess I'm not much of a client-side coder &gt;_&gt; . I'll take a stab at it though, thanks for the effort (especially on your phone O_O )
Not a pure PHP solution, but using node.js, it will allow you to poll for when it's done executing whatever script is running in the background.
According to logs, the many CURL requests to the external third party service are what is taking up the most time. I don't think we can use curl_multi since we do some logic on the results and CURL back again several times for each script hit. And it's guaranteed that each call will be different every time for every user which makes it uncacheable. The final data returned is just text for the program to parse which end's up being 1-2KB max. Based on that info and the edit in OP, what direction do you think is the best?
I've developed a similar system for [a major company] which aggregates many different services together into single calls. At the moment we're calling around 13 services for login, and each of those services may interact with additional services and databases. We're heavily using curl-multi which reduced login times from 5 seconds within the datacenter to &lt;1 second. We're also storing much of the static content in memcached but all of the user information is queried from the serivces every time. The services may cache content to their liking. We also use Apache Traffic Server for service calls which improves performance by caching results. The point of this is that there's some parallel to what you're doing and I believe that you should focus your efforts on improving the backend code before implementing some weird workaround in AJAX.
It highlights a bug in phpMyAdmin 3.x reported around 2011. PHP is understandable, most will use whatever version their Linux distribution provides. But who uses a 2 year old version of PMA on a web-facing server?
Redis is something more than a persisted key/value store.
I just changed array_shift to array_pop. The former has to reindex all the elements of the array (when you have numeric keys) every time you shift as 1-&gt;0, 2-&gt;1 etc. Popping doesn't have to do that; so it's much faster over large arrays. It would be interesting to see what array_shift does with non-numeric keys, as foo-&gt;foo. If I were using PHP 5.5 I'd probably have used yield and not had such a big array in memory. 
Oh god. There was so much extract() going on in the legacy codebase I used to support. "SELECT *" followed by extract, then 20 lines down another extract(). Who even knows what $id means at any point in the program? Not me for sure. And you could never add a column to the db schema without looking at all the code to make sure you weren't about to accidentally collide with some variable. I wish at some point in PHP's history extract's implementation had been redefined to this: function extract() { throw new Exception('What the hell is wrong with you?!'); }
Spot on. Ordering wasn't important so swapping to pop was fine.
It's funny how PHP has a pretty decent OO system for user objects, but for its own types, it's all imperative function calls.
I recently read an excellent quote: &gt; There are two things that are hard in Computer Science - invalidating cache, and naming things. Though, another version is slightly better: &gt; There are two things that are hard in Computer Science - invalidating cache, naming things, and off-by-one errors. 
SSL is much more than encryption. It's massive system encompassing security of data as it is transported over an untrusted medium. There's a whole lot of cryptography involved. 
It's only just started, should be trivial to get up to speed.
Well, yeah, I was simplifying it. SSL, if it's just encryption, is useless against MITM attacks. There's a lot of identity verification going on.
Some tips: * Avoid writing your own crypto code and use existing (and popular) libraries instead. When you write your own code you'll likely get it wrong. * For basic cryptographic knowledge I'd recommend [Stanford Cryptography I](https://www.coursera.org/course/crypto) on Coursera. * If you want to seriously understand how cryptographic systems are attacked (and hence how to protect them) I recommend the [Matasano Crypto Challenges](http://www.matasano.com/articles/crypto-challenges/).
Makes me think we could also pay homeage to the Icelandic singer with T_BJÖRK, don't know which token would be most fitting, though. Actually PHP could be turned into something totally awe inspiring, possibilities are endless.
Here is what the linked meme says in case it is blocked at your school/work or is unavailable for any reason: #***Harry PHPotter*** &gt;***Post Title:*** *It had to be done...* &gt;***Top:*** *PAAMAYIM* &gt;***Bottom:*** *NEKUDOTAYIM!!!* [Original Link^1](http://imgur.com/27UJMCk) | [Meme Template^2](http://imgur.com/memegen/create/27UJMCk)
... you cant be serious
This tool was already submitted here, why write a 2 lines blog post just to link to that? (oh wait)
... So we put a test in your test, so you can test while you test!
that's the spirit!
Yes, I know, but Phalcon is so much more than just speed. I can go all day long about what the best feature is, but if I was to pick one just now, I would say that the best thing is that it just isn't there. You don't have hundreds (or thousands) of php files floating around your project from the framework only. You just import the extension and start with a single file, just the stuff you've done, nothing extra from the framework. 2nd best feature I would go for how extensible Phalcon is, and ranking 3rd, the speed :)
Are we actually talking about a Servlet as in init once, serve many requests? Because this would finally be a way to break through the a performance hurdle that seemed unavoidable (having to start up your framework on each request)
look into memcache combined with a cronjob that prepopulates necessary data. [of course you could also prepopulate and store in database] why does it take 30 seconds at all? is it the curls?
Why's that? (Disclaimer, full time Drupal dev). 
Rasmus is not the PHP BDFL. PHP has no benevolent dictator. 
I have to confess I needed to write a little test script for that to make sure it wouldn't create a copy of the array. I can never remember the rules for when a copy gets made. You are correct though; that does work fine. 
Is your first sentence a quote? If so, where from?
Hi. I 'm the author of that code, so while definitely late to the party I feel like I should offer my own two cents here. **Would you really use that code in production?** Most likely it wouldn't come to that. It's only vary rarely that one needs to do complex sorting in PHP. Additionally, that code is intended to be friendly to junior users but it isn't really friendly to junior readers. That could invite bugs if the users attempt to modify it. **So does it solve a practical problem?** I keep it around and use it whenever there's need for some quick-and-dirty data processing. For example, once a while I get a JSON data dump from some external source and want to quickly take some measure of it. `json_decode` + `make_comparer` + `usort` + convert to text = 2 minute solution which makes the data nicely human-browsable from the comfort of your favorite text editor. Also, a major benefit is that while it is easy to write the sort manually as a function for simple to moderately complex sorts, this solution is configurable at runtime. You can be as low tech as specifying the sort description array as GET parameters, and you gain the ability to specify fully customizable sorts for the data set from the URL. Again, very good for getting a quick job done. In conclusion: it's nice, even though not a game-changer. **Why did you write it then?** Because I love programming, I love solving problems, and I love sharing knowledge. I thoroughly enjoyed writing that answer. Back when I couldn't have produced it myself, I would still have thoroughly enjoyed reading it. Other people who read it might find it useful in practice, or they might learn something from it. Why on earth would I *not* write it?
Joe, you're totally right! We actually have a lack in documentation and a concrete roadmap. Beside unit tests, this is one of the next big things we're focused on. It's not that we want to build JBoss for PHP, it's more that we want to bring some of the great features and possibilities such of such solutions - JBoss is only one out of many - provide to the PHP eco system, for example init a servlet once and serve many requests, if needed. 
&gt; Since Redis is a simple key/value storage, No. Memcached is a simple key/value storage. Redis is an advanced key value storage, but more often referred as a data-structure server. While Redis offers simple key/value storage, its strength lies in the data structure it offers (List, Set, Sorted Set, Hashes) with a range of operations that allow some very interesting things and in the LUA scripting support.
I think that this post has wasted a valuable opportunity to resolve important issues by starting off with a post that contains a lot of factual errors and a rather unfriendly tone. It's not hard to understand that the post will not be received well in such a form.
Posted in this sub within the past week: [A brief introduction to Multi-Threading in PHP with pthreads](http://www.reddit.com/r/PHP/comments/1lwgnu/a_brief_introduction_to_multithreading_in_php/)
Yep, half of that thread is "forum vs ML". No one seems to be focusing on *actual* issues and supposed "leaders" like Rasmus, Zend etc. are nowhere to be found. Ladies and gentlemen; *this* is PHP.
Yeah and while we are at it since I had a past life in the J2EE world (I'm better now) - spawning threads in a request processor in a managed application server is actually a BAD idea. In fact, the J2EE standard actually forbids it. I'm not saying "oh noes not the threadses" but thread spawning should be a very very very rare thing for a request processor. Like - maybe reserved for that guy in accounting who runs the giant reports once a month. And furthermore - having used both - I rather prefer the PHP model of die a thousand deaths. I have way less trouble with it than with persistent server models like Rails and JBOSS that are always falling over at inopportune times. Don't want to piss on the accomplishment - I think its a great addition - but with great power comes great responsibility.
What a clusterfuck. Even if I knew C I would stay the hell away from a poisonous community like that. This makes me fear deeply for the future of PHP.
Designing anything by committee is always a frustrating, messy process. That's pretty much a cliché. I'm happy enough with the end product so far, and I'm just glad I don't have to be involved in the process of steering it in any particular direction. My condolences to those who do.
Indeed, that was the entire point of Anthony's [PHP Needs A Vision](http://news.php.net/php.internals/64770) post.
Reddit. The new web interface for internals.
Why don't you just query the database with something like: SELECT email FROM users WHERE users.email = 'submitted email'; If it returns no result then allow your user to register, otherwise just return a message to your jquery ajax call that that email is already in use. No need to return the whole table to your jquery call.
Thanks for the reply. I get the whole php/mysql part of it. I'm entirely confused by js and ajax...that's the question I guess I meant to ask. I thought that I'd have to pull in the whole list to a javascript array to have it validate availability in the browser. If there's another way, I'd love to learn it! Again, my thanks for the reply.
I'm interested in the answer here too...ajax is somewhat of a mystery to me :)
&gt; Look at other languages. Please don't. It might break quarantine.
All AJAX would be in this scenario is pinging some route in your app and passing in the email entered by the user, without actually reloading the full page the user is currently on. jquery has a simple helper function, [jQuery.ajax\(\)](http://api.jquery.com/jQuery.ajax/)
Typically data can be passed from PHP back into javascript by using a format called JSON- JavaScript Object Notation. It's basically a simple way you pack up an object into a string format that's fairly easy to process. The PHP function for encoding JSON strings here: [json_encode()](http://www.php.net/manual/en/function.json-encode.php). Say you have this simple array of email addresses, indexed numerically. $emailAddresses = array('someone@example.com', 'someone_else@example.com'); Running it through the json encoding function returns this string: ["someone@example.com","someone_else@example.com"] Great, so now we have that, what do we do with it? You'll want to use jquery to send out an ajax request to a page on your server that will return only that string. What I mean by this is if you have a framework that spits out a bunch of stuff onto the page, you're going to want to find out how to turn that off. An ajax request simply sends POST or GET vars up to the server, then wraps up whatever text gets returned, and passes that to your callback. Let's say the code to get your email addresses lives at http://www.example.com/get_usernames. Your ajax request would look something like this: $.post("http://www.example.com/get_usernames", [], function(data){ console.log(data); }); This should print out an array to your console containing all email addresses. That inlined function is the callback I mentioned earlier- when the ajax request comes back, it's smart enough to convert the JSON string into a real life javascript object, and then passes the converted data received into that function. Once you get it in there you can do whatever you want with it. I agree with /u/moonnight3 in that this isn't the best way to do it. Ideally, you can just pass the email address they're attempting to use up in that ajax call (put it in the second argument, the []'s (so it should look like [emailAddress: "whatever_they_typed@example.com"])). Have the page you're posting to simple return either json_enconde(true) or json_encode(false). Then just have the page react however you need to. One major benefit of doing it this way is you're hiding your data- you never want to expose to the front end more than you have to. If you were to send back every email address from the ajax call, literally anyone who visited that page would know all email addresses that comprise usernames in your system. Not ideal, to say the least.
I'm coming at this from a different perspective. I used to do DevSupport for the company I work for. So whenever one of our SEO reps would need to add page titles or anything like that, it would befall to me. I ended up being able to install page-title and nodewords to handle all that...but if the site had ubercart installed it was basically a no go as far as the work we could do. I'm not about to weed through a platform I'm unfamiliar with to add functionality for things that should be standard for any builder. I guess you could say the same for any builder out there...but at least with Wordpress I can just grab a plugin and be on my way. Drupal is like a dark uncharted ocean for me. There's probably really awesome things in it, and I just don't know about them. But for what my company has to do for the Drupal sites we come across, it's the absolute worst platform to be in.
&gt; uses only mysql_* functions Using `ext/mysql` has been bad practice for literally years now. They're *removing* it in future PHP versions. Using it in 5.5 produces big fat "WTF ARE YOU DOING THIS IS DEPRECATED KNOCK THAT OFF" warnings. Why would you take all the time and effort of writing *yet another database abstraction library* using a family of deprecated functions?
Your comment sounded like a criticism of /r/php as in, just like internals, people are focusing on the forum stuff and ignoring the actual topic, hence my reply.
I guess reusing a tag is the best way git tag web_deployed git push origin master --tags -f git push xxx master --tags -f ....changes ....more changes git tag web_deployed -f git push...
I might be missing something here, but why aren't they using something like github to manage RFCs/issues? Using github would provide a lot more transparency to the public, and make it easier for people to jump in and start contributing. 
"Fit" as in "train" the model with the training data. Depending on the literature, "fit" is synonymous with "train". Think of linear regression and "the line of best fit".
Not a problem, happy to help! Ajax is an incredibly powerful tool, and luckily (especially with jQuery) it's pretty easy to learn and use.
Zend is a fucked up company. They've managed to raise almost $30 million in funds over the past nine years, but you could be excused for believing PHP is a small open source project being managed by a handful of engineers over a simple mailing list. PHP does in fact have leadership. Andi Gutmans is the CEO of Zend Technologies, but he sucks so badly as the spokesperson for the company that most of us still look to Rasmus for answers, and he's made it clear he doesn't even like the direction the language has been going. No wonder innovation gets shot down so often. At this point I wouldn't care if Zend sold the whole thing off to Oracle or Microsoft. I don't care what features are added to the language. I just want a clear consistent vision for the future, and I want a spokesman that can market PHP as the enterprise language of the future. One final note, I've always appreciated ircmaxell's contributions. At least here on reddit, and while I haven't always agreed with his vision I certainly liked having his personality attached to the language.
@mrkrstphr First of all we are thankful to you for your suggestions. Yes we are following PSR standards to make code much readable and there are couple of changes we are about to push. Please be patient with us, you will find much more in coming days. We really appreciate your feedback, suggestions and of course your small contribution would be much more appreciated. Thank you very much. Good day. 
First of all this library isn't that new. When I first wrote it PHP 5.5 wasn't even out yet. One of the initial purposes of this project was to allow for a library that is guaranteed to 1. work on any server using PHP 5.2+, and 2. work on any server that may not have mysqli or pdo available. Unfortunately, having to work with clients I have to had realize that unfortunately nothing is guaranteed in terms of the capabilities of the live server and we must be prepared for anything. Another main reason I didn't start making changes to adapt to PHP 5.5 was due to neither I nor anyone I knew was using PHP 5.5, and I didn't want to make unnecessary changes that just nobody else, but nor would I myself need yet. If PHP 5.5 really does show deprecation warnings for the mysql_* functions, I might make it so that mysqli is used if it is available. But as I can see, kodablah says that the mysql_* functions might not be deprecated themselves, just the ext/mysql extension (can anyone confirm this?). If that's the case, mysqli won't be needed to support PHP 5.5 (it would be needed to support transactions and a few other things though). But I would prefer to first try and make improvements that do not depend on drivers. Of course if people were to say supporting transactions or anything else non-mysql_* would be a lot more important than anything else, I'll probably get to doing that first. Of course note that deciding whether to use mysql or mysqli functions add a bit of overhead to the code.
I do not use mysqli because it uses the license encumbered client if you want to distribute it. Either way, mysqlnd accepts both API's. The deprecation method says "This extension is deprecated as of PHP 5.5.0", not "This function is deprecated as of PHP 5.5.0"...of course in an abstract thing like this, mysqli functions are likely better so users can choose either extension and be ok.
I'm not sure I follow... Zend does not own PHP they are contributors to PHP just like thousands of other people. The only difference is that they market the shit out of their contribution in order to make the brand 'Zend' associate closely with 'PHP'. 
You can't compare PHP to an internal ancient code base at company x that is used by 10 people and deployed on 2 servers. I also doubt any sort of workflow will do anything productive, this is an open source project with thousands of contributions from all over the world. 
The function is a part of the extension. When the extension goes, the function goes.
Probably just because of the logistics necessary to make such a move, and the fact that there's nobody around to make that decision on behalf of PHP and its community.
You're confusing the concept of a PHP extension and the underlying library that is used to connect to MySQL. Every group of functions in PHP is an "extension," including the "built in" string and array functions. The thing deprecated is the entire family of `mysql_` functions, which is hosted in the extension called "mysql," referred to in internals-speak as `ext/mysql`.
&gt; if Zend sold the whole thing off to Oracle And here I was, believing that at least the current situation can't possibly get any worse. Ouch.
&gt; work on any server that may not have mysqli or pdo available `mysqli` is available starting in PHP *4*. `pdo` is available starting in PHP 5.1. If you're targeting 5.1 or better, you can safely invoke either of these extensions in any *sane* environment. If you find a host that doesn't have either *enabled*, then they are **blatantly incompetent** and other hosting should be found. The only way these backwards luddite hosts will ever learn is if their clients tell them to fix their shit. &gt; kodablah says that the mysql_* functions might not be deprecated [...] can anyone confirm this? The `mysql_` family of functions, part of the "mysql" extension (spelled `ext/mysql`) are [deprecated as all hell](http://us2.php.net/manual/en/migration55.deprecated.php) as of 5.5. kodablah was confused by the term "extension." 
This reminds me of the netbeans forums. Those **are** mailing lists. If I remember correctly, they have some tech in place that literally makes the correct mailing list correspondence if you post on their forums and vice versa. I hope I'm not horribly wrong there. But the issue stands. PHP doesn't need a bunch of elitists demaning ***their*** medium be used before they're willing to consider something.
My point isn't that Zend owns PHP, but they *are* PHP. We have the Zend certification, and the Zend Engine. When Andi Gutmans gives his keynote speech at *Zend*con, he doesn't talk about the future of his company. He talks about the future of PHP. Oracle could buy Zend tomorrow, and we would see a *huge* shift in the way PHP is developed regardless of whether they "own" PHP or not. The company with the most to profit from the language is going to have the biggest influence, and right now that company is Zend, and they suck at their job.
Believe me, I am as angry as you are. Unfortunately if you are in a position like me who has to work with shitty clients, deploying to shitty servers with no server administrator ready to change the software, you do need something you can use in the meantime. I'm sure many people are in the same position. Anyway, I am currently working on having this library support and by default prioritize mysqli. Hopefully I will be able to release it today even!
I dunno. Oracle knows how to market a language. They profit from Java in many of the same ways Zend profits from PHP, but Oracle does it much, much better. Go into any programming forum and announce "php is the enterprise language of the future" and you'll get laughed at. Java developers don't have it nearly as bad, because Oracle (and Sun before them) marketed the shit out of Java. It's all marketing.
I just upload 'em all every time.
Hi guys, I'm one of the Komodo devs. Note that [Komodo Edit](http://www.activestate.com/komodo-edit) is free and Open-Source, please check out our [GitHub page](https://github.com/Komodo/KomodoEdit) if you're interested in contributing! If you have any questions please feel free to ask. I'll be here all day :) --- Just for reddit I've been give the following coupon to share with you guys. It is valid for the next 24 hours. This gives you 50$ off on Komodo IDE, making for a total of $100 off with the current sale. ###Coupon Code: KMDORED
That was all groundwork laid by Sun, though. Nowadays, the only meaningful contribution from Oracle are lawsuits and bundled sneakware installers. Oh, and crippling 0-day vulnerabilities.
I haven't followed the situation closely, so you're probably right. What I do know is PHP needs strong central leadership, and some of the marketing muscle that only $30 million can buy.
This is exactly what I was hoping existed. Thank you very much
It's cool :) 
Really sorry - as a dev it pains me that the price prevents people from using what we work so hard on to the full extend. But at least Komodo Edit is free and comes with at least as much functionality as similar paid products.
No they are not..... it's like saying if 5% of contributors started a consulting company they would be 'PHP'. Oracle buying PHP would not change much for PHP, it will change things for Zend but most likely people who contribute to PHP from Zend will remain the same. I have to give it to Zend... their marketing brainwashed you.
You're being foolish, especially if you think Zend only contributed 5% to the language. Heck, the word "zend" appears in the PHP source code 65,000 times, and the quickest way to end a discussion on a new feature is having Andi or Zeev say they don't like the idea. You know, those guys who are the key members of The PHP Group. I think you're brained washed into believing PHP is truly an open project that isn't or can't be completely controlled by Zend.
I agree: Komodo Edit is a great product, especially for free.
"Heck, the word "zend" appears in the PHP source code 65,000 times" You got me! I'm going to start a company named 'return' and claim I own PHP. Either way, you have to realize that when Andi or Zeev speak on PHP they speak as contributors NOT as owners and 'Zend Engine' has contribution from people who never have and never will work at Zend. Welcome to Open Source.
We use rsync at work. Make sure you do a dry run first, and get it to itemize the changes.
you mean like what facebook is doing with hvvm?
What's the difference between Komodo and PHPStorm (apart from the price)? I've been using it for 8 months and it works a treat (Storm).
I am a happy komodo user. Feels more responsive on my lower spec netbook than my old IDE netbeans. 
I honestly wouldn't be able to tell you as I've barely touched PHPStorm myself. Far as I know the two products are quite similar in terms of the core features it offers. One area that I think we excel at over any other IDE/Editor is customization though. Honestly I would just give the trial a shot and see how you like it. 
Um, git?
Happy to hear it! We've made several improvements to its performance this release, so that sounds right :)
I currently created a login and registration system that uses PHP and uses md5 for password security. Don't worry, I understand md5 alone is a big no no for security but I want your input on what I have done here: (currently using username because it is a unique field) $salt = md5(/*1 or more functions in here*/(md5($username))); $pw_hash = hash('sha512',$salt.$password); Do you think this would provide good security for a users password?
Thanks, I'll see what all the fuss is about. I'll reply once I've tried it out. 
A predictable salt is a useless salt. It should be random, not based on the username. Just use password_hash().
For the real time network communication - use Web Socket and Node.js 
This makes me wish I knew more C.
This might be the most vague answer I have ever read on the internet in regard to anything.
&gt; I'm going to start a company named 'return' and claim I own PHP. Oh stop, you know that's not the same thing. The company didn't name itself Zend because the word is used so often in the PHP source code. The word is used so often because Zend has written so much of it. I'm no stranger to open source software and the communities that go with them, and what I see time and again is the original contributors never fully relinquish control, and I don't blame them. The project is their baby. Linus Torvalds still calls the shots with Linux, Matt Mullenweg still calls the shots with WordPress, and so on. If the Zend team has a patch they want included in PHP it will be included. If they say they don't like your patch it won't be included. They may not "own" PHP but they hold the keys to the front door, which has the same implications. The same is true with Torvalds and Mullenweg with their projects, and people have the same complaints towards those projects that we see with PHP. McDonalds doesn't own the recipe for cheeseburgers, but they lobby hard for the beef industry because it's in their best interest. Zend is in the same position except they don't lobby hard for the PHP community. Andi should be the public face of PHP, and he should be the first person to jump in and put out fires and keep the project on the right track, but he is no Bill Gates or Larry Ellison. He's what Steve Jobs would have called an "IBM type". He sits in the shadows and leaves the PR to.. well, no one. Which is shocking considering is multimillion dollar company relies on the success of PHP. \* And no one can claim the PHP conferences orchestrated by Zend count as PR, because the last time I checked the tickets were in the $1,200 range. Those conferences are just money making schemes.
1. Zend references within PHP is part of VM/other things those guys wrote, since then TONS of other people committed to that code. 2. Zend does not own PHP. 3. Hear it from the guy him self: http://www.itwriting.com/blog/1419-is-zend-really-the-php-company.html I'm done here.
Git
We use Capistrano and Git. Nothing is merged to master until it is ready to go live. We also use pull requests on github for code review. Nothing goes live without another team member merging a pull request.
Looks like news.php.net will be redone to contain a threaded interface, which will improve things a LOT.
Right. And Linus humbly admits he doesn't own Linux even though he does.
Can anyone verify that PuPHPet is a legit codebase? This worries me. &gt; Assign a password to the root user. MySQL will only be installed when a password is entered here. PuPHPet shouldn't be doing this. This is a really bad security flaw for inexperienced programmers that don't take the time to change their password after downloading. What assurance do we have from a website with no ToS or privacy statement?
But see, I'm not wrong at least. 
it's [open source](https://github.com/puphpet/puphpet) so you can go verify everything if you know what to look for
I'll be interested in others' take on this, but this works for our small shop. On the production server, just `git clone` and for updates `git pull` a branch you dedicate to "production" code. Right on the server. Deciding how to transition from the repo to where the code actually lives is the hard part to decide on (are they the same? GIT_WORK_TREE + checkout? copy the repo and delete the. git directory?) There will be some other related tasks you can script if you want. The purist in me doesn't like having git, composer, etc. on the production servers, and obviously this won't work for you if you don't have enough control over your servers.
It says "Private Video" for Part 2-4
whoopsy...fixed
Thank you.
hope it is!
By context aware, is it on the level of understanding what object $var is based on doc blocks? Would it understand: @return ClassName[] As an array of ClassName objects?
Hi roragok.
Session data is not secure. PHP writes its sessions to a file (well, by default) and does some strange base64 thing to the data. It's still basically plain-text though and can be modified by anyone that's a good guesser and can run a script as the user that writes the session files (like the web server user). If you want more security in your sessions, store them in some other place like a database that's behind authentication. Also, you can create a custom session handler to encrypt/decrypt the session data on the fly.
You actually don't need git, composer or phpunit on your host machine!
Please don't use extract() for your views. Make the view instance and pass in the values specifically as a data array. Just dumping them into whatever the local scope is is messy and a bad practice. Views should only get the data they need to render, nothing more.
Yes, please see the demo videos. Edit: Also array returns are not implemented right now. It is on the milestone. Check [the issue log](https://github.com/m2mdas/phpcomplete-extended/issues?labels=enhancement&amp;page=1&amp;state=open) to see the features will be implemented in future.
yeah i just use those when hooking up PHPStorm in the videos
are u naerok 
To echo some of the other thoughts; I really don't know much about Java or servlets or how all of this is useful to me as a "traditional" php developer. Your site is going to need a lot of introduction/explanation for what this is, how it works, what's different, and how to use it.
When ready to launch apps to production using cloud servers, [ServerPilot](https://serverpilot.io) is a great alternative to cPanel and Plesk. It's focused on developers, not hosting companies. It has monitoring and also does things like keep the server updated. Disclaimer: I'm one of the founders.
I check out a fresh version of the git repo ( into a folder I usually call "releases"), and then symlink it to the web root. 
Congratulations, you've rewritten PDO. &gt; This library is best for small projects or places you can't use PDO or similar. Use PDO. Seriously. If you can't get access to a server with PHP later than 5.1 then **find a new job immediately because you're killing your career**.
I just want to say thank you!
Sorry for the question (I couldn't find info about this) but, how do I write plugins for Komodo IDE? We are currently using PHPStorm/IntelliJ at work, and I write some in-house plugins from time to time, and I'm honestly quite unhappy with the APIs from Jetbrains, and very poor documentation, you literally have to decompile their stuff and get stuff done by trial/error to get plugins working... Can I extend Komodo IDE in anyway? If so, where can I find some documentation about it? Edit: I found [this](http://community.activestate.com/addons). Is this what I am looking for? Can you please direct me on this? :)
I have used quite a few and have started using lobster. For a free ide its not too bad.
xdebug is slow if you leave the profiling on... That's what hit me at least.
EZ Mysqli Example $q = "SELECT * FROM cars WHERE make = :make:"; $replacements = array(':make:'=&gt;'Honda'); $rows = $db-&gt;getAll($q, $replacements); PDO Example $statement = $database-&gt;prepare("SELECT * FROM cars WHERE make = :make"); $statement-&gt;execute(array(':make'=&gt;'Honda')); $rows = $statement-&gt;fetchAll(); Now I'll admit there are slight differences between the above, you have your array and sql declared separately, and I'll admit that you have skipped a few steps by having getAll run the replace functionality... But I fail to see why your solution is reasonable and useful, while the PDO implementation, which is almost identical, constitutes some sort of "barrier to entry". IMO we need to stop babying new PHP developers, and encourage solid skills and best practices, not assume they're too stupid to handle it.
I have Komodo IDE 7 (payed for by my company, and I still have the activation keys, etc.) Does it cost money to upgrade to 8.5?
While this is true.. they're much faster run locally (er, in the host instead of the VM).. I still end using both those tools in my host OS
I use GitLab deployment So it only deploys things that are in master branch, Anything in dev branch gets deployed to the dev server Same for testing
If you want to fix **all of the problems** of PHP, you'll be essentially rewriting the thing, breaking any BC with original. At that point, you might as well just switch to another language..
Thanks for the heads up. I use Komodo Edit every day at work. I've tried tons of editors, but always keep coming back to that - and Programmer's Notepad for when I just need to quickly edit one file. Komodo isn't the fastest loader. Edit: Have to say, though, I don't like the new theme. It looks completely out of place in Windows. Komodo 7 looked better.
I took Komodo for a trial run when it was around version 7. Went for PhpStorm. The price difference (Komodo is almost 3 times costlier) is significant for a buyer who has to track exchange rates against the US Dollar. You have a good idea running the IDE upon Mozilla's XUL platform - that makes it speedier than the big 3 - Netbeans, Eclipse PDT and PhpStorm - and enables an excellent plugin system that most developers are familiar with. Also removes a JDK dependency. PhpStorm is the only reason I have Oracle Java rather than OpenJDK on my machine. If you just reduce the prices to bring it within the PhpStorm range... you might have a real winner.
That was missing a conclusion, so here it is: $func(...$args); is faster than `call_user_func_array` and the `switch` method.
I created a shell script that setup git on the remote server: [git-init-www](https://github.com/mardix/ServerScripts/blob/master/git-init-www) That's how it works. It creates a bare-repo on the remote server by running the following: ./git-init-www mysite.com assuming your web directory is under **/home/site.com/public_html**, the bare-repo is created at **/home/site.com/www.git**, that's where you will push content to. A **post-receive** hook is created to publish the pushed content to **/home/site.com/public_html** So on your machine, you work with git like you would, but you setup the origin with ssh: git remote add origin ssh://user@site.com/home/site.com/www.git Now whenever you do **git push origin master** it will push it to your server : /home/site.com/www.git, which will then publish to: /home/site.com/public_html As a best practice, **master** branch is always cleaned and deployable. By having a bare repo, 1) you don't expose your site files and history since it's not accessible. 2) It separates the git data with the files on the public_html I hope I helped out
This is actually the way I prefer working. I've made some quite big websites using this method. A great benefit to it is if there's a bug that happens only on production, but you cannot produce it locally, you can quickly try to find the problem on live, edit the live files to fix the problem, then commit and push the fix back :)
That's a proposal https://wiki.php.net/rfc/argument_unpacking 
There were solutions for this for quite some time already. https://github.com/indeyets/appserver-in-php (multi-process pre-fork model, disclosure: my project) http://reactphp.org (event model) 
yup. that's exactly what you shouldn't be doing. Use this: http://docs.php.net/manual/en/book.password.php Or this, if you're stuck with older version of php: https://packagist.org/packages/ircmaxell/password-compat
I tried vagrant/puphpet 3 times in the past. And each time, after the first restart, my entire /var/www folder had been emptied. I'll wait a bit before trying that out again.
Don't go that road, Python is a good language, but has its own set of problems that are not present in PHP.
thanks man, this dude had the same question I had. 
This looks great. I'd love to be able to test drive this with Vagrant. Are there any turn-key plans for this by any chance? 
Understanding how the code you're writing works should always be an issue... These performance questions become very relevant when using something like Laravel 4.0's Facades where almost every call you make to a model or framework resource could be using call_user_func_array: https://github.com/laravel/framework/blob/master/src/Illuminate/Support/Facades/Facade.php
Jesus christ, I began to read that thread, and in the first 10 or so posts I can clearly see what the issues are. Self-centered arrogant pricks bashing each other and few people with actual ideas getting lost in the noise. How can they even get something done like this? Maybe it is time for me to give HHVM the chance... just saying...
Yes. This is very common when you deal with magic methods and/or variable arguments methods/functions.
You mean unit testing? This practice is being used more and more within php projects.
Sure, I'm not talking about unit testing. Unit testing tests your code from the outside. Native assertions come from the inside.
The first thing i'd do is make sure you're running the latest vagrant and virtualbox, v1.3.1 and v4.2.18 respectively. 
Honestly, I've never seen them used before. I've only seen assert in the context of unit testing. It may be that PHP and Java differ strongly in that php is not compiled, so debugging out an error or condition doesn't require a special function. Can you explain how this would differ from just, for example, running error_log() if a condition is met, or just echoing out a message? I'm not really sure I get it.
The difference, at least in java, is that if assertions are turned of, there are not overhead at all. error logging, or even checking with an "if" if we are in debug mode, has a cost (and it is also less compact... putting an "if ($debug)" before each assertion is really verbose). The performance of a compiled java code with assertions turned off is identical to the one with no assertions at all. That's not true with the "if" version.
Given that PHP is not compiled in the same way, I would think that the overhead in its case would be the same with a range of methods. I'm not sure but... I have to say I'm not really seeing a compelling case here. Maybe that's just why it's not much used?
I had that when it happened, which was 1.2.8 and 4.2.16 Vagrant seems nice and all but I'm not that in to it that I'm going to try it out every single update.
meanwhile, your flair says "Don't listen to me" ;) 
Probably a mix of developer ignorance and default assertion handling. Unlike Java, assertions are enabled by default in PHP. It would require extra code to check on production deployments and disable assertions, which is less than ideal.
Maybe your key doesn't fit your IP? Just a guess.
I wouldn't say "_definitely not blocked_" , because it certainly sounds like it is. The API Key is usually a field in one of your request objects
Let's remember 5.034 msec = .005034 ms. Using 'cufa' is "5 times slower", but not something people should be too worried about unless your code is absolutely littered with calls to it and are passing a large number of parameters. I appreciate the OP taking the time to do this experiment because I've wondered myself how these functions effect Laravel's performance... But my takeaway is that it's not an issue. I like to see that Taylor was cognizant of the slight performance hit and only uses it where necessary.
What do you mean by "after the first restart"? How are you using vagrant? If you did a "vagrant destroy" then "vagrant up", then that would empty that folder. However, if you do "vagrant suspend" then "vagrant resume", your directory and any changes you've made to the machine will remain in place. A "vagrant reload" would also blow out the directory.
I think the only place I've ever seen them used is in the PHP tests (.phpt).
Thank you for your observations. However, I don't see the link assertion-procedural style. And Java, a completely OOP language, has and use assertions.
This is a good point. I've not noticed that they are enabled by default. I think this is, until now, the most valid reason to not use assertions in php discovered in this discussion.
Keep in mind that these numbers are over a million iterations, which means the difference for a single call is less than even a microsecond. That's pretty much the definition of a micro-optimization. Don't sweat the small stuff.
relevant: http://zaemis.blogspot.com/2012/10/php-assertions.html
If it's a paying customer, just shell out the $300 or so and get Lemonstand. All of those platforms you mentioned are terrible.
You didn't look very well then. It is NOT hosted. You host it yourself. But yeah, it's not licensed under an open source license. Also: It's not terrible. http://lemonstand.com/docs/system_requirements/ 
thanks! I'll keep it in mind, but I prefer open source software. 
I think it depends on when you purchased the license. You'd have to contact sales though (sales@activestate.com, as I have very little knowledge on the subject of licensing.
As purely a developer myself I'd love nothing more than to lower the price / give it away for free :p But then I'm not the one balancing the cashflow and making sure we all have a job to work on Komodo. I'll forward your message though, I sincerely hope to make Komodo IDE more compelling to those on the fence.
Shot in the dark here, but are you connecting to the Stamps.com API test environment? If so, they do IP whitelisting on one specific server that you can do your development on. Your connection must originate from that IP address.
This post sums it up quite nicely: http://community.activestate.com/many-ways-extending-komodo Although it's a bit old and somewhat long, I'll see about writing something more ADD friendly. Another useful resource is: http://docs.activestate.com/komodo/8.5/extensions.html Finally, one resource I would recommend that people don't make nearly enough use of is to just join us on IRC and ask us a question if you get stuck on something. We're around all day during working hours (east coast &amp; west coast). Join: irc://irc.mozilla.org/#komodo
The way I see it: * with 5.4 and `$almostAnythingCallable()` calls you can forget about `call_user_func()` * with 5.x (5.6, I hope) and unpacking you can forget about `call_user_func_array()`
Sorry to hear that. I'll be writing a blog post soon on how to create your own skins very easily without writing a ton of CSS. So if there's something not to your liking you can easily change it. Also note that you can already change the iconset to the classic iconset you had in Komodo 7, if that's what you prefer. Honestly though it's hard to please everyone, based on feedback I'd say the vast majority likes the new skin, but everyone has their own ideas and opinions so I don't think we'll ever be able to achieve a 100% satisfaction rate. Which is why we try to make everything about our product customizable in one way or another.
It looks like it costs $500, unless you have some fancy coupon.
I'm not saying that it's a *good* reason, I'm just saying that I used to see it when procedural programming was the norm, but don't see it now that object oriented programming and exceptions are the norm. 
Sure, I know you can't please everyone. I just think the gradient in the menu bars (light skin, I'm no fan of the dark one, but great idea including it) and Mac-like rounded text boxes look out of place on Windows. It'd be great if I could create a custom skin - I really just want plain colour or very subtle gradient surfaces and Windowsy text boxes. The new icons are nice, though. I like the minimal two-colour look.
Right. To be perfectly honest the skin was designed for Windows 7, I know Windows 8 is a bit more square (to put it mildly). Will take your feedback into consideration for our next update.
They know how to do marketing, but they don't know how to run a single software project they own. The *only* Sun projects that have prospered since the buyout are the ones that forked early and took all the core devs with them; see MariaDB/MySQL, Jenkins/Hudson, LibreOffice/OpenOffice (and AOO arguably has a more poisonous spokesperson than all of the php-dev peanut gallery combined)
Library contains simple util classes for use with any php project.
great response.
I appreciate the help! Based off of your comment and /u/Ich_habe_keine_Idee , I decided to try and use password_hash(let's hope this goes better than my previous attempt for security): When a user registers : $password_hash = password_hash($password,PASSWORD_DEFAULT); //default is bcrypt and 60 characters I then store this password hash in my database. When a user wants to login: if(password_verify($password, $password_hash))//the password_hash for the username trying to be logged in is retrieved and $password is the password the user is attempting to login with. { return true;//yay can login } else return false; How does this look? (I've tested it successfully on my end and it is working)
One suggestion to make the Abyss theme more comfortable is try using the IcoMoon - Ambiance icon set. That seems to work the best for Abyss. Personally I still like default over the current Abyss theme. If Abyss were to drop all gradients to flat backgrounds at the very least for highlights that would help a lot. Maybe turn the charcoal grey a few shades darker for better contrast as well. If I knew all the CSS selectors for themes those would be the changes I would make.
why ArrayUtil::merge() instead of just using array_merge()..?
Seems to have a lot of fairly pointless methods; for example: * HttpUtil::buildQueryString: why would I use this over `http_build_query()` which also supports objects? * HttpUtil::getQueryParams: why would I use this over `parse_str()` ? Also , spending 20 minutes putting together an overview of what methods exist without forcing me to dig through your source would be nice.
Curious why you'd lock the class down with the final keyword. For me, that's a pretty big turn off for a lib to include and use in my projects. Just curious though; to each their own and all that. 
I'll soon blog about how you can easily make these changes yourself. I think the suggestions you are making are all very subjective so I'd be hesitant to apply them to the Abyss skin that we ship. But nothing stops you from creating your own variation - https://github.com/Komodo/Abyss-Skin
[This page](http://www.johnconde.net/blog/working-with-dates-and-times-in-php/) has some good Date/Time code examples.
8.0.3 I think. It all works fine now. However, the uninstaller left the lib folder behind, I don't know if that is supposed to happen.
Struck me as odd as well.
I'd buy it, but the movement for code copying etc wasn't worth it this was in 6.0,7.0, and 8.0 This is compared to net beans, which is entirely free(I did a trial of ide for komodo) it _is_ the closest thing out there to net beans. I've tried every ide and editor under the sun, and they all fall short. I don't use auto complete in any of them because they're too slow. Only vs(back when I was using windows) was fast enough. Now then the only other thing is local history for uncommitted files. I committed a bug report for it a long while back and haven't seen any news on it in a very long time. If 8.5 fixes moving around the code, and also keeps indentation perfect I'll probably end up pulling the trigger. If not, I'll wait for a new release and hope that it fixes my two final hold outs. P.s. I do hmtl5/php/mysql and c. But for c syntax highlighting is OK for me. I hope this is the one, if not oh well. Net beans still works and is free. Keep up the great work though. I was able to write extensions to do the keyboard thing(not perfect but work). It was in is as I'm not much of a Python programmer. The local history is my last real holdout. P.p.s. if you saw the bug(dont know which person you are really) same username for me most places. And doing git commits every n minutes, with a timestamp tag is what I suggested. I now you're doing something g with it but it's Mac only ATM. P.p.p.s. any misspelling etc I'm on my phone and well yay android....
Good practice to lock down any class that was not intended to be subclassed to alleviate a lot of [fragile base class](http://en.wikipedia.org/wiki/Fragile_base_class) problems.
I'm not sure what you mean by "movement for code copying", so can't comment on that. As for auto-complete slowness.. it may take a few mins for Komodo to index your project at first (depending on project size), but after that it should all be instant. I personally don't experience any slowness there. Indentation is all handled through preferences, so if you dont like the way it works you should be able to adjust it in your preferences to better suit your needs. That said we will most likely be revising the preferences in the near future as people have complained that it is a bit difficult to understand.
Pretty sure the point of the benchmarks was to prove that there was no performance *loss*, so that that could be taken off the table when they vote on the addition. In other words, the performance boost is just icing on an otherwise already delicious cake.
HI, it's really great to see this approche of handling threats using php. It takes a lot of energy, time and dedication to create a app server like this. good luck 
I was commenting on earlier builds now its indentation is close to perfect. One thing it doesn't do is, for HTML tags it doesn't always line up perfectly. So that's what I was talking about. About preferences believe me, I've edited everything because I'm ocd about everything so I edit everything that k can find to my hearts content and I've read all of the documentation to be sure of everything. I can't edit on my mobile, but it's little things when I get home, I'll file a bug report if you think that'd be better(after trying 8.5). Also about theocal history thing that's still a semi-big thing. The indentation rules is what I was talking about. Sometimes perfect, other times not so much. have to type here on site to edit... I wish diode had editing functionality. p.s. if there's docs on indentation rules point me to them, if you don't mind.
this one will merge all keys whereas the builin has different behavior for string keys and numeric keys.
How does one get that scheme to appear as shown in the screenshot on the github?
ArrayUtil::merge() chains merges to sub arrays while array_merge() does not. ArrayUtil::merge() doesn't resequence key values that are interpreted as numeric, array_merge() does. For Example: $first = array( "key0" =&gt; array( "key0_0" =&gt; "one", "key0_1" =&gt; "too", ), "4000" =&gt; array( "key1_0" =&gt; "uno", "key1_1" =&gt; "dose", ), ); $second = array( "key0" =&gt; array( "key0_1" =&gt; "two", "key0_2" =&gt; "three", ), "4000" =&gt; array( "key1_1" =&gt; "dos", "key1_2" =&gt; "tres", ), ); var_dump(array_merge($first, $second)); outputs: array(3) { ["key0"]=&gt; array(2) { ["key0_1"]=&gt; string(3) "two" ["key0_2"]=&gt; string(5) "three" } [0]=&gt; array(2) { ["key1_0"]=&gt; string(3) "uno" ["key1_1"]=&gt; string(4) "dose" } [1]=&gt; array(2) { ["key1_1"]=&gt; string(3) "dos" ["key1_2"]=&gt; string(4) "tres" } } var_dump(ArrayUtil::merge($first, $second)); outputs: array(2) { ["key0"]=&gt; array(3) { ["key0_0"]=&gt; string(3) "one" ["key0_1"]=&gt; string(3) "two" ["key0_2"]=&gt; string(5) "three" } [4000]=&gt; array(3) { ["key1_0"]=&gt; string(3) "uno" ["key1_1"]=&gt; string(3) "dos" ["key1_2"]=&gt; string(4) "tres" } } 
I think it also depends on what type of work you plan to do in the new role.
That's the Dark_Wombatsosia scheme, which you scan switch to under Prefs&gt; Fonts and Colors
Yes please report a bug if you bump into any issues or things that you feel should work better. As for the docs on indentation, have a look at: http://docs.activestate.com/komodo/8.5/prefs.html#Indentation_Features
yup. that's the recommended way to use it. if your storage is password-hash-length agnostic, then future-wise you can add password_needs_rehash check in case another algorithm would become "recommended", but that's not strictly necessary
One minor note: Rather than using the class naming scheme *Util, eg DominionEnterprises\ArrayUtil and DominionEnterprises\FileUtil, why not name them DominionEnterprises\Utils\Arrays and DominionEnterprises\Utils\File.
great suggestion
i recently applied for a job, i usually put it in my email or in the communication that if they want source code to ask for it. They did a live test where they watched my computer with a rdp type client. The problem was validating a credit card and they gave me pseudo code. I would have different pieces that could build up a web system that solves problems like a credit card validation, authentication, passwords, sessions, toss in some ajax etc...Some companies like to see that you can do credit card services like paypal api. Form validation is also big and they asked me about that. I didn't take the job it was 1 hr drive, not enough pay for 1 hr drive and didnt want to move (just bought a house). But it wouldve been more fun. I need to move on, only programmer here and im a good self learner but it doesnt compare to team work.
I love being able to elevate a group of related classes to their own namespace. "Hey guys, you made the big time! You've got your own sub-namespace now!" But in all seriousness, it'll make distributing individual components of your library easier.
Please don't use mysql_* to access database. It is deprecated and don't provide security. PDO is much better and works on most database system.
If you want simplicity I recommed http://www.opencart.com/ Otherwise just code one yourself. It will be as simple as you make it.
appreciate the suggestion, will nest the Utils, much better !
Extremely clever, I wonder how much of the code was hand written and how much (if any) was created using a tool.
Oh wow... No wonder I find the codes familiar. I don't know what to say... http://blog.omfgitsasalmon.com/ It's been 2 years...
That article is exceptionally spot on. I also used assertions in lieu of scalar parameter hinting in the past. assert(is_array($param1)); Cause that's stuff that should only crop up at the development stage. If you have a more variant code flow and need to probe for uneven object heritage, then of course runtime exceptions are more appropriate. You want recovery or fatal errors then. But `assert()` is often entirely sufficient for API sanity checks, and coding out-of-band test cases IMO redundant. (Obviously more elaborate data-driven checks are a different story.) 
Got it!
Because the behavior or `ArrayUtil::merge()` is the behavior of `array_replace_recursive()`. But since this function was introduced in PHP 5.3, his reimplementation can be safely deleted.
Use `vagrant halt` to stop the machine. 
Slim+Twig + any json feed setup a few routes and start tweaking and have some fun developing again. try typing '.json' at the end of a reddit URL for a data source
Any particular reason?
Or perhaps the Swedish chef from the Muppets. T_BØRK_BØRK_BØRK
He's using mysql_*, oh no... please don't. Use PDO. Can't finish to read the rest of the article
Sure json is more readable and concise. But "wrong" is a pretty strong word.
We use vagrant at work and that is what has worked for me. Any time I interact with the server that has to do with its operations I've found it best to use vagrants built in commands for it. Edit: also no specific reasons that I can pinpoint and say: Hey this is why you use it this way, otherwise you're wrong. But I can say that we've used vagrant for 6 months now and just using vagrant to handle server states (on/off/etc..) its worked.
except parsing `?boo=value&amp;boo=value` into multiple values does not match the spec ...
Agreed. I'd figure if one invested the time to get familiar with Drupal in the first place, investing the time to get up to date while learning better practices would be time well spent. It looks like an easy out for the lazy.
We use bitbucket but this should apply to Github. We have a master branch that gets build on a staging server. When developing a new feature for instance, our developers pull the latest changes from the master and create their own branch (usually feature-featurename). Then when the feature is done we push it to our own remote branch and do a pull request to master. Our lead dev checks the PR and if it's ok he merges it into the master branch. Now the next time someone pulls from the master a new commit is added: "Merged in feature-featurename (Pull Request #)" That commit contains all commits made to the feature branch.
good catch, removed !
if you mean the http spec, I don't believe it says what to do with keys that are the same, however my example though should have said value1 and value2, my mistake.
Yep, this is how [git-flow does it, too](https://github.com/nvie/gitflow/blob/develop/git-flow-release#L236). It keeps the master branch history nice and clean
You have a couple options. That guide you link seems pretty popular, and it has sensible advice, but it doesn't really cover the ways you can manage your feature branches before merging them. Personally, I do my commits in bite-sized chunks while I'm coding, then use interactive rebase (`git rebase -i parent_branch`, `parent_branch` being whatever upstream you're branching to/from) to clean up the history before merging -- or, ideally, at regular intervals before testing. Bite-sized because it's way easier to squash smaller commits together than it is to split apart monster commits. So your `git-rebase-todo` ends up something like this: pick 8c582fe Re-frobble schnorzles fixup 49a8cf4 Forgot to frobble last schorzle pick 22d5b73 Add frobble_again() method fixup 7d59040 Fix missing semicolon in frobble_again() pick a9d15fd Change template copy for schnorzlator Resulting in a history like this: 3d96247 Re-frobble schnorzles 2c16959 Add frobble_again() method 458af19 Change template copy for schnorzlator Then you can merge the cleaned-up history into your upstream. Or if you want everything in one commit, you can just `git merge --squash` without rebasing. I always back up my branch (just create a new branch from your feature branch: `git branch mybranch-backup`) before I do this. It's easy to royally screw things up with rebase if you're not careful. Plus, if you need to hunt down a nasty bug after doing this you still have the full history of that feature available in the branch copy that you didn't rebase.
Well, it's just that XML is inappropriate here. It's not for hashmaps. It's for documents.
&gt; For people new to object-oriented programming there may be a steep learning curve; some of the key programming techniques, such as inheritance and polymorphism, can be challenging initially. (Dries Buytaert) Drupal has been behind the curve on OOP developments, and is lagging behind again it seems. The discussion has already moved away from inheritance and back towards composition and proper use of interfaces as the main driver of development; and away from MVC toward clean architectures that allow rational separation of application from delivery mechanisms. They really need to spend some time with an object-oriented language like Go instead and read the [carefully reasoned architectural decisions](http://talks.golang.org/2012/splash.article) for the absence of things like classes, inheritance, generics and exceptions on the try/catch/finally model. None of these are essential to the definition of OOP. This of course has nothing to do with returning to procedural programming, which the Backdrop group appear to want. It's about doing OOP *properly* rather than just aping Symfony (which in many ways is itself stuck in the OOP paradigms of 5 years ago borrowed from Java) just because they don't apparently have the imagination to make their own design choices. 
So how would this be used to attack a website? How do we prevent it?
In modern PHP development, I guess you should follow the PSR-0 coding standard : https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md. These days, many developers manage their dependencies (php libraries, components) with composer (http://getcomposer.org/). It allow you to pick up all sorts of php libraries on github and manage them using the Composer console. For example, you can use those libraries all together with Composer : - [Slim Framework](http://docs.slimframework.com/) (a micro framework based on the [rack protocol](http://en.wikipedia.org/wiki/Rack_(web_server_interface)) ) - [RedBean](http://www.redbeanphp.com/) a lighweight ORM library - [Zend RBAC](http://framework.zend.com/manual/2.0/en/modules/zend.permissions.rbac.examples.html) An implementation of Resource Based Access Control BTW, this is my very first contribution on reddit, glad to join the madness \o/
It'd be left in your source code after someone breached your server. They'd then use it later to run other commands. Standard server security and regularly checking for modified files is what you need.
+1 for Git Flow, very useful.
I've heard of this! I think I'll try the squash merge the next time we merge. Or I'll create a test repo and try it there. I think this might be the answer I'm looking for. I've read up on rebase, but most posts seem to mention something along the lines of: "If you don't know what you're doing, then don't use rebase", so I'm hesitant to try it.
Seems like they needed your blog for help understanding it. Same list at the end.
You get what you pay for.
Thank you :)
Is there somewhere that details how to set up a Travis CI build using HHVM? I'd be interested in how some of my components go running under this kind of setup.
It's completely hand-written, and trial and error style.
Yes
I quickly glanced thru documentation. Would I be right, if I describe this as: PHP extension which replaces individual functions (those which are marked with "@engine qb") with specialised compiled versions. It allows to make iterative math code really fast
I would not go with LemonStand at this point. The current 1.x branch is on life-support (bug-fixes only.) Those bug-fixes are even only the ones the team sees worth fixing due to time constraints. Further it has inherit issues like using MD5 + Salt for password hashing which they won't be upgrading, so unless you want to rebuilt the Phpr_Security methods to fix password hashing it isn't securely storing customer passwords (or admins.) Further 2.x is really pushing SaaS. Pricing for that isn't announced, but to host it yourself it will be $1500 per server and per year. Honestly I am a [Cartalyst](https://cartalyst.com) subscriber so I am building a shop using their cart, tax, and currency packages (currently in alpha.) This kind of setup gives me complete control over the shop system without relying on a prefab system which is loaded with things you don't need and just end up getting in your way (and can be confusing as hell.) [Moltin](http://molt.in/) might be worth looking into as well once it is in a usable form.
What's the advantage of this event dispatcher over the [Symfony EventDispatcher Component](https://github.com/symfony/EventDispatcher)?
at least it make me chuckle. best programming language *for development of site*
You mean a regular old event dispatcher that's found most modern frameworks nowadays?
Precisely. It's designed to allow you to do thing that otherwise would be too slow in PHP. The focus is on image processing, as that's where there's a frequently need for doing large number of calculations. There are potential use in other areas as well.
Ok, so I run a small VPS. Just host 2 WordPress sites on it with minimal traffic. It has 512mb of RAM. I currently use PHP-FPM. Would HHVM be a good switch in any way, even if the resources saved are insignificant, or is my server to underpowered to have benefit? **Edit: I know this is off-topic from the post, this just seemed like a decent place/time to ask**
I commented on their post and linked to /u/omfgitsasalmon's blog, for anyone interested on the construction of the shell and the odd rip of the list at the end of his post.
I've been attempting to build pthreads into my PHP 5.5.3 and I'm getting bunches of unresolved symbols linking the .so. I'm surprised no one else is encountering this problem because a tree grep through the entire source trees of PHP 5.3, 5.4, and 5.5 shows that none of these symbols are defined in that source tree. I must be missing something basic. Can anyone help me out? Here's the condensed list of missing symbols: _ts_resource_ex _executor_globals_id _tsrm_new_interpreter_context _compiler_globals_id _core_globals_id _tsrm_free_interpreter_context _sapi_globals_id _basic_globals_id _ts_allocate_id _tsrm_set_interpreter_context Where do these symbols come from in your builds?
Congrats on the release! I have a few questions about the project in general that probably fall into the 'low priority' realm for you.. Having played with bolt, I've noticed using timthumb for images has it's downsides (have seen images render slowly, cache oddness, always hitting php for what could be a static resource).. Any plans on a replacement? Any plans on splitting /src/Bolt out of /app as a separate project? A packaged release could still be possible for those looking for a copy+paste install, of course. There's a bit of container injection going on in /src/Bolt.. Refactoring on the radar? Sorry for the brain dump, I'm sure you're thinking of the CMS as a whole here, so the refactoring/splitting is not a priority, but It'd be pretty cool to be able to use the Bolt\Storage component to augment an existing project, for example.
I noticed that, haha. It meant that they googled the problem and got it from my blog.
&gt; The basic purpose of PHP_Debug is to provide assistance in debugging PHP code. Quality content right there.
The way you abuse the language there is beautiful, I love seeing stuff like that.
I don't know how Symfony does it, but surely it's better. This one uses an obscene mix of regex, xml/xpath, and md5.
I've been intrigued with hacking ever since I was a kid. Making things do things that are not expected to do is what makes me does things like this :D I'm glad you share my thinking.
I haven't been able to spend much time with Bolt, but, I'm pretty sure I'd choose Bolt over Drupal and WordPress
Heh.. if you are running WordPress run time execution is the least of your worries.
Don't forget that these products offer free edition: http://www.newrelic.com http://www.bugsnag.com 
silex might be a good option for ya.
Although you've already excluded Symfony 2 from your list, do remember that if your PPS is the most important priority, Symfony has guaranteed periodic [Long Term Support releases](http://symfony.com/doc/current/contributing/community/releases.html), with up to 4 years of security fixes. That's a long time in this industry! I take your point about learning curve, but to be honest once you've made the effort to learn Laravel 4, it's not much of a leap to Symfony 2, since many of the architectural choices are the same - certainly compared with CI. They're basically kissing cousins now. I'm not a huge fan of Symfony, but I have to admit that their support, documentation and general professionalism is second to none. I really trust them to know what they're doing - within their own context and assumptions about best practices, not all of which I agree with (their OOP model is a bit stale now, for example). Edit: Fabien Potencier has also recently mandated [Stability over Features](http://fabien.potencier.org/article/68/about-symfony-stability-over-features) for current Symfony 2 development. This doesn't answer your question, but it's worth thinking about nonetheless. 
There's an "imagelist" field available for use in your contenttypes. Currently, you'll have to drag the actual images in, one at a time, though. We're looking into changing that. See screenshot: https://www.evernote.com/shard/s1/sh/baf81b69-baa2-47ac-8dbf-2749ff677b9b/a71be1097a4cd0efb186648e5667c4ef
The problem is that we have junior developers on our team. Perhaps with time (or with projects that do require it) we will be able to move to Symfony 2. If the architecture is similar that makes me very optimistic. Thank you for pointing this out, I wasn't aware of it.
Thanks! It's not really our ambition to be a replacement for Drupal, but we do think that a lot of people use a monolithic CMS like Drupal, when a smaller system like Bolt might be better suited. 
Actually, Laravel 4 has a very reasonable release cycle now. Breaking changes should only happen twice a year. Source: http://wiki.laravel.io/Laravel_4#Release_Schedule
Point releases brake backwards compatibility? That sounds very bad.
Thanks! &gt; Any plans on a replacement? Timthumb is growing to be a bit of a pain in the ass. It's one of the very few remaining libraries that isn't handled by Composer. There's an issue on github about this, and we're looking into replacing timthumb for a different lib, and at the same time provide a form of very basic media-management (i.e. searching, tags, meta-data, nothing fancy). We're open to suggestions. See here: https://github.com/bolt/bolt/issues/574 &gt; Any plans on splitting /src/Bolt out of /app as a separate project? Not really, at the moment. This doesn't mean that I don't think it could be worthwhile for other people, just that I think i'd better spend my time on Bolt-as-a-product. If we spread ourselves too thin, we'll do two things half-assed. I'd rather we do one thing well. That said, I do know of people who use Bolt as a whole in their composer.json, so that they can use Bolt inside of a bigger project. &gt; Refactoring on the radar? Yes, always. Personnally, I'm more annoyed by classes that do too much, so we'll be refactoring those as we go along. Any classes/modules in particular that you think need work? 
Not necessarily. For example, Taylor said somewhere that 4.1 will have a heavily refactored routing layer - but the API will not change.
If your junior developers at least used one MVC framework in the past, they'll easily learn Laravel. It doesn't have a steep learning curve. My suggestions would be using Laravel. Another option could be Phalcon, but I personally don't suggest it over Laravel unless you really need some extra performance boost.
Yeah, Laravel doesn't seem that big compared to CI and most of the guys know, to some degree CI. I was mainly pointing out that going from CI to Symfony might be too much for some of them. 
I know the change from Laravel 3 to 4 brought some changes that would break apps when upgrading, but now that Laravel uses composer I think it's a safer bet using it, as upgrading packages is far less likely to break things, but of course I don't know what future versions of Laravel will bring, but upgrading through composer gives me a lot more peace of mind that it won't outright break apps. It also meets all of your requirements with an awesome ORM and query builder, testable, easier to learn than the frameworks you mentioned, and using generators you can develop very rapidly, and the documentation is amazing on it, I'd give Laravel a serious look.
Thanks for the reply! I totally missed the timthumb github issue, thanks for pointing it out. I get why breaking things out isn't planned, as Bolt is meant to be a single entity. I'll admit I haven't looked too deep into the code since poking at it a few months ago, so can't think of anything specific, but I imagine you've already seen what I have in noting that some classes are doing too much. Keep up the good work, sir!
+1 for symfony2. Once you grasp how it works it is beautiful.
Is there a page in your docs (i cant find one) that shows the tables bolt creates?
Hahahahahahahahahaha.
Give Fuel a look. CI developers can pick it up pretty quickly and it meets your other needs.
Bolt creates one table for each contenttype, updating that table when the contenttype.yml is changed. There are a few other tables for things like users, sessions, taxonomy, relations and log. Each of the tables has columns for the defined fields, plus a few that are always present (the id, creationdate, publication status, things like that). We've made a big effort to keep the number of tables down to a sane and logical amount. A usual bolt site in production has about 8 to 12 tables. Check out /app/src/Bolt/Database/IntegrityChecker.php for the class that handles the creation and modification of the tables. It lists all the fields created. Screenshot: http://i.imgur.com/9Xa58ga.png
&gt; Fuel http://fuelphp.com/
Now that I've played with the package some I do have the following question: Is it possible for these threads to operate against common data objects? In my experimentation I was not able to do something like that and I was wondering if it is a known or even intended limitation. For example: Let's say I have two task threads each chunking through a series of tasks. I'd like each to update a shared counter as they finish their specific tasks. So when task 1 completes a task it bumps a variable and then when task 2 completes a task it bumps that same variable. Is this possible? I attempted to solve this by passing in a variable by reference to the Thread constructor and saving that reference as a private class variable ( $this-&gt;counter =&amp; $counter; ) However, I got a strange error about using a reference for an overridden variable. That is, it seems that all attribute access is somehow overridden in the Thread object? (Not sure how that's even possible.) Anyway I tried other stuff like accessing a global variable for the counter, but apparently $GLOBALS is not recognized within a Thread(?). Any enlightenment would be appreciated. 
I read about that MOVE thing the other day, and to be quite honest, it sounds just like MVC along with an event dispatcher. It seems like the author offered up MOVE as an alternative due to a misapprehension of what MVC is. 
This one supports type of "bubbling" of events which symfony does afaik not support.
To provide an easy way of "bubbling" a tree structure seemed just logical imho. And what exactly is obscene about regex, xpath and md5?
You have minimal traffic. So no.
It sounds like a good idea to me in that I sometimes find my controllers gettting quite long. At the very least it will prompt me to put a little bit of more though in to my controllers rather than just leaving them as they are. 
Not sure what you mean by that. Do you mean event propagation?
But if PHP had a formal spec...
It would make more sense if XML supported events, but it doesn't (and neither does HTML, technically) -- it's the DOM that is responsible for eventing. The documents themselves are agnostic of bubbling; it's the underlying DOM which actually implements it. XML is for getting data from one system to another. It was never meant as a native, in-memory data structure. You have to take your existing data structures, and then build up this intermediary format manually, and then you have to use obtuse xpath methods (which are basically simplified regex in many cases) to access the data. $expression = '/events/' . $event-&gt;name . '[not(@id)]/listener[@id]|/events/' . $event-&gt;name . '[not(@id)]/ancestor::*/listener[@id]'; You can have tree data structures without the overhead and complexity of having to continually translate to &amp; from some other data structure. At it's simpliest, a simple array will suffice for most cases, but if you want an OO approach, something [like these examples](http://www.reddit.com/r/PHP/comments/eb14a/looking_for_a_good_tree_class_for_zend_framework/) is what I'd suggest. Doctrine's [nested set](http://docs.doctrine-project.org/projects/doctrine1/en/latest/en/manual/hierarchical-data.html#nested-set) has a really nice API. Instead, you're burdening yourself with in intermediary data format.
Yeah, that's better. Especially since you can easily use it from PHP just by doing $hashes = json_decode(file_get_contents('http://evan.lu/dev/php-hashes-json/?str=' . urlencode($str))-&gt;list; echo $list[0]-&gt;hash-&gt;result; While a similar thing in XML would be more complex.
Oh, did honestly not know that. When i wrote most of the code symfony event handler was still kind if rudimentary...
If this is all you're looking for, MVC plus Events, Zend Framework 2's whole dispatch process is event based.
And if it had a formal spec, and one implementation diverged from it that would be the exact same scenario.
After thinking about some of your points i tend to disagree so I edited my answer: 1. I do not see a point against implementing a DOM like behavior in PHP which is, following your argumententation, what this class does to some degree. 2. No matter what something was intentonally invented for it is still perfectly valid to use it for totally different things. Find the right tool for the job. 3. xpath might look obscure (like regex) but it still is another completely valid tool. If you personally dislike both that is your personal oppinion. In my eyes xpath allows to query complex xml structures for "records" in a very convenient and exceptionally flexible way. Somewhat similar to Querying a database but with native support for tree like structures. I do not mean to sound rude or harsh but i think we simply have different points of view which ist totally ok with me :) 
&gt; 12 Debugging Tools for Developers who else would use debugging tools?
As someone who's always considering CI for some small projects, can you explain why you're moving away from it?
[CodeIgniter is no longer being actively maintained](http://ellislab.com/blog/entry/ellislab-seeking-new-owner-for-codeigniter)
IIRC, development for CI is going to be ending. But I may be completely wrong.
I wanted to learn Laravel and I had a working app for doing probability in "Magic: The Gathering" in about 4 hours. I had never touched it before so most of that was looking up how to do things, getting it installed, and UI design. It was surprisingly easy.
That's exactly why I stopped using Kohana. I really hope Laravel doesn't go that route.
The (Yii Framework)[http://www.yiiframework.com] is similar to this, but ultimately defines itself as an MVC framework.
I think there is a misunderstanding in what the article on MOVE was really about. My view on it is that it's an updated batch of terminology to more accurately reflect what you're doing and understanding why you're doing it. The MOVE acronym is more of abstracting the event functionality instead of stuffing it in controllers and calling it a day. Edit with the article link: http://cirw.in//blog/time-to-move-on.html
That's a possibly dangerous hack. Just, uh, re-make the generator yourself.
dont produce warnings
I may misunderstand what MOVE means but it seems like an idea for an event-driven system - i.e. an event happens, triggers an operation which in turn utilizes models and returns a view. This isn't really possible with "normal" PHP as its only event tends to be the initial request and everything happens rather procedurally from there on. That being said, several frameworks have event dispatchers which allow you to fire events, register listeners and that way make your controllers thinner and your code more modular.
Wow, did that announcement come completely out of the blue? Either way it seems doubtful CI is dead. Like Twinkies, someone else is going to take over active development, and I'm sure CI will enjoy another decade of success.
skinny controller fat model
&gt; I sometimes find my controllers gettting quite long They should not be if you use helpers and allocate non-controller logic to models. 
https://github.com/EllisLab/CodeIgniter &gt; Last updated 4 hours ago Just because they're looking for a new owner to CONTINUE the framework, doesn't mean it's no longer being actively maintained. CodeIgniter is not dead.
In your php.ini change error_reporting. ; Development Value: E_ALL ; Production Value: E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT Tweak until you have the amount of reporting you're looking for. 
CodeIgniter is MVC but also has events if you want to use them or create your own. Although I've found that there are not many instances in php development where event-driven development ends up being particularly convenient or more convenient than just putting stuff in your controllers/models...
A few good ones: [@grmpyprogrammer](http://twitter.com/grmpyprogrammer) [@igorwesome](http://twitter.com/igorwesome) [@ircmaxell](http://twitter.com/ircmaxell) [@afilina](http://twitter.com/afilina) [@lornajane](http://twitter.com/lornajane) A few good feeds: [@planetphp](http://twitter.com/planetphp) [@csiphp](http://twitter.com/csiphp) This is by no means a comprehensive list, these are just a handful of the folks who leap to mind as good sources of information and education (and in /u/igorw's case, complete craziness). :)
We @eepohs do the same with our Magento customers. It's a really good way to automate tests while keeping readablity and clarity for the guys with ties that have the keys of the wallet. Add automated testing with headless Firefox and you've got a pretty good automatic combo!
Create more controllers and smaller actions. Try to mak actions atomic - ideally each action should do ~1 thing
Generally speaking, when you're writing unit tests, you will intentionally *not* be hitting the database. Unit tests are designed to test small units of functionality and make sure that your code is behaving correctly in a vacuum. As a simple example, say you were testing a calculator class that you wrote. You create a method called add, which, for sake of argument, gets two numbers from a database and returns the sum. In the context of testing add, you don't want to test that the entire database is working properly, the web server is running, etc. etc. All you care about is whether your code behaves as expected. In the course of testing your add method, you would "mock" (simulate) the call to the database and say "Hey, assuming the call to the database returns 5 and 7, my method should return 12. If it does that, my method is behaving as expected." So say you have a method called getDatabaseObject() which returns an instance of your database connector, called DAO. The DAO has a method called getTwoNumbersFromDatabase. You'd create a mock of the DAO class and say "When my function calls this function, don't actually make the call. Instead, return 5 and 7." Then you'd simply test that your simple function behaves as expected in a controlled situation. In a real world scenario that's all your function cares about. If the connection fails for example, you can simulate an exception and make sure that your function behaves properly given all of the information it has (does nothing, logs an error, emails someone, whatever you want it to do in that case). It really takes a little getting used to thinking this way. What you're talking about (going through the pages and verifying the app behaves correctly) is not unit testing. That's essentially acceptance/functional testing. It is entirely different.
While I appreciate the value of this, it's one of those situations where I'm hitting a bunch of different databases and a table may or may not exist in the DB, the oci_execute throws a warning when the table doesnt exist (I have no control over the databases).
Hmmm...I guess my definition of unit testing is different from what it's really means. Essentially, what I want to do is ensure my methods are returning the correct calculations. For example, I want to test the output of getTotalPayments() for a specific person--I'm currently doing this like I mentioned above--going through each page until I find the part in the application that displays this value--then compare it to my control value. I just want a way to automate this so I don't have to look over many pages to ensure my methods are calculating things correctly. I'm doing it this way because that's the only way I know how to do it at the moment.
CodeIgniter has **NOTHING** to do with MVC. It is a badly implemented rails clone filled with bad practices and PHP4 artifacts.
the interesting thing about people not liking the skinny model fat controller thing is that if you didn't have wonderful ORM libraries like Doctrine or Laravel's Eloquent out there, your models would be significantly bigger trying to handle similar logic. I think when you count the behind the scenes code in your project(for example, what the root controller/model class you extend has) you'll find that there's significantly more logic in your models, just so happens that you didn't have to write it.
It is simple: Stick with symfony if you value stability. Otherwise go with Laravel.
Testing getTotalPayments for a "specific person" is not unit testing. That's functional testing. "For a specific person" implies that the data source must be running, the website (I assume) must be running, the page/framework loads/etc. etc. etc. etc. If those things are broken it doesn't mean your code is bad. You want to test your method. To unit test it you want to provide controlled inputs and determine that it behaves the way you'd expect it to. You want to prove that UNIT of code is working properly. You can use dataProviders to throw a bunch of sample/test data at it to try to isolate edge cases, etc. But if you're connecting to real data and pulling it from an external data source, that's not unit testing. To provide a real world example. You want to test a steering wheel you built. To do that in your current approach you have to start the car which requires the ignition system to work properly. Then you have to pull it out of the driveway which requires that the transmission and engine work, that wheels are attached and that the axles are functional. You need gasoline, a gas pedal, an air filter, etc. etc. etc. Then you have to turn the wheel and verify that the wheels actually turn, which requires that there's power steering fluid, etc. It's way too much. None of those have any impact on whether your steering wheel actually works properly.
Yeah, a lot of terms get thrown about and people describe them differently but I should have only said functional testing, really. Edit to add: Also, good point about dependency injection. Without it, unit testing becomes basically impossible. Relative to the example, if you actually call the database directly from your method, you're doing it wrong. Unit testing will be impossible. You need to abstract that into dependencies. Thinking this way will improve your code tremendously and allow it to be significantly more modular and ultimately far easier to test.
XhProf will allow you to do all of this, other than the before and comparison (but you could easily write code to automate that) https://github.com/facebook/xhprof 
I'm missing most of the things I listed in the OP. Sure, I could add Propel and Composer, there's also a RESTfull plugin, or a Redis plugin but these all take time to set up and I'm depending on people who are leaving the community. There's also the issue of using a newer version of PHP out of the box. Plus CIs whole architecture is unappealing to me (part MVC part helper classes etc.)
What you want to do is unit test the code that makes the calculations, not the result of an arbitrary calculation. Then you will know that every persons getTotalPayments will be correct for their particular data set. If you want to test that each persons total payments are correct then you are probably doing it wrong (this would be like checking the addition of every number combination to ensure add(x,y) is working). And if you want to test that getTotalPayments is working correctly by checking a web page for a user you are definitely doing it wrong (there are usually too many other factors that can affect the result). If your code is in a state where it's not easy to abstract things like the database away for testing, then you can use fixtures to populate a known state to test from.
Collect code coverage and set thresholds in your CI job. Of course this still doesn't ensure your tests are any good...
If it can affect the outcome of your application without being obvious it should be tested. I test anything which has the ability to be problematic for any reason. The only things I don't test are functions which are written once, work and are then forgotten and it doesn't really matter if they work or not such as public function properIfNeeded($string) { return (strtolower($string) == $string) ? ucwords($string) : $string; } This function is very unlikely to ever change and if it fail I end up with the original string so it doesn't really matter.
Jenkins can live on a server that's seperate or living with the repo. As for deployment, you're working with PHP so try out Phing or Capistrano.
[nginx push stream module](https://github.com/wandenberg/nginx-push-stream-module) is good and backwards compatible if you have complete control of your servers.
It certainly wasn't my intention to start a framework vs framework disaster but its definitely useful (to me) to learn what frameworks do and don't support. So far I've learned about events and event dispatchers that I can look in to more now as a result
Also checkout [Fabric](http://fabfile.org/) for deployments. I like it!
We use Jenkins on a separate virtual server from where the repositories are stored. We have it set up to do a full install/deploy of our software on each build, and then it runs unit tests. That install is used all the time for staging/testing and is started as needed by the testers. We also have other jobs/builds that do the following: * Nightly build that does a full install/deploy, run unit tests, but also tools like phpcs, phpmd, phpcpd, pdepend and lint/syntax checking of source code. I'm hoping to one day be able to use the code inspections from phpstorm and also include a report from them here. * A build for each of the previous releases (branches) to make sure that fixes that are backported doesn't break anything. * A job that produces a full phpdoc api documentation * I am also in the process of setting up a job with codeception (acceptance) testing, and we're hoping to start writing lots of more tests using that. If you're not doing so already, you should check out the jenkins template for php projects from Sebastian Bergmann. Edit: deployments themselves are a whole other process, and i don't know much about it.
Also, the community is lacking and isn't mature enough. Also, it isn't part of the PHP-FIG. 
Try APC or OpCache first. Then add HTTP layer caching with softare like Varnish. Also configure your static resources to cache well and be served directly by nginx or even by a CDN. Handle spikes in traffic by adding dynamic VM instances, provided that you can scale horizontally. Optimize for that first, then worry bout the CPU cycles (hhvm).
How does Jenkins get the files from the repo? 
You probably want [Kibana](http://demo3.logstash.net/index.html#/dashboard/file/guided.json).
[@taylorotwell](https://twitter.com/taylorotwell) [@philsturgeon](https://twitter.com/philsturgeon) [@fabpot](https://twitter.com/fabpot) [@daylerees](https://twitter.com/daylerees) [@crynobone](https://twitter.com/crynobone) (Mior) [@dlsniper](https://twitter.com/dlsniper) (Florin)
Others have explained thoroughly so I will just keep it short. *First, write testable code.* That means reading up on SOLID best practices. Basically split functionality into units, both classes &amp; methods, that have a Single Responsibility that can be tested. That's the opposite of end-to-end tests. That's where I would start.
History isn't a bad thing. It all depends on what you're interested in--do you keep branches around, or do they only live as an artifact of the feature they're about? (You are using branches for features, right?)
Basically, the same way that you do. There are plugins for Jenkins for just about every possible repository you might have. I just checked and see BitBucket ones in there also.
While not directly related to the question, this is a great resource: http://jenkins-php.org. For us, it runs on a VM and polls our source control and acts as a watchdog for us. It provides code metrics and static analysis.
The most important thing is to think in terms of "testing" and not "units". Far too many people obsess over "unit tests" without understanding what that really means. It is just a really small test that you can get a junior programmer to write for you. As you get better at testing you'll write larger, more valuable tests. These tests may orchestrate numerous components and, if you're really good, can communicate with out of process pieces like databases and third party web services. Unfortunately some people never get past the unit test phase and try to do everything with them. But the fact that you are thinking about the database means you won't fall into that trap. And yes, most "unit test" frameworks work just fine for database tests.
/r/php hates codeigniter, your not allowed to mention it
I think my problem is I'm confusing unit testing with functional testing--I thought unit testing tested all aspects of an application--from controlled inputs to data validation. I guess I'm really looking for a way to test the output of my functions to ensure the data is being calculated correctly. I don't know if PHPUnit is used for that or another application/framework. Or if I need to do the testing on my own.
If you can spare a bit of cash per month for this. I'd recommend just paying for a CI system like travis or circle ci. It's a time consuming job setting up and maintaining your own build/deploy configuration and there is a lot of trial and error involved in configuring the process that works best for your team if you've never done it before. But, if you're keen to learn, go for it. olemartinorg setup is similar to what we ran and it's a great way to work when it's all up and running. As an example. We ran it like so. GitHub picked up a new branch and triggered a jenkins build along with changing a pivotal tracker story to finished. Jenkins would unit test, run selenium tests, phpdoc, look for dodgy code, etc. If the build failed. A warning would play out over the office speakers. Once it passed. It would deploy it to a branch sub domain to be tested along with marking the pivotal stories as delivered so they could be checked on said branch then accepted if they were correct. Setting it all up was great, and I learned a lot. It was a bit overkill for our very small team though, and maintaining the boxes did take a time away from the projects at hand. If you just want to get on with the job at hand, pay someone to take the pain away. Thats what we do now. 
I think the reason I'm thinking about the database is that's where we already have sample data that we currently validate by hand. I figured the way I would test our functions would be to use the data already in the database since we already have control data. What we're wanting to do is test the output of our methods to ensure the output is being calculated correctly. Most of our methods perform calculations on financial data making accurate testing very important to us. This is why I want to find a better method for testing instead of looking at the output of our pages that display this information. Something more automated. Thanks!
Could you link or show some examples of this? We tend to keep most of our database queries in one class (our model), then methods that manipulate that data in another class. We then just call the model class in the class we need it in. That's probably not the right way to do it, but it's worked well for us so far. Maybe it's time to change the way we do this. Just for an example, we would have two classes: LSP and LSP_Model. The LSP class contains methods that manipulate data from the LSP_Model class, and the LSP_Model class contains methods for retrieving data from the database.
I often write tests that are driven by sample data, either hand generated or copied from production databases. I find the latter to be more effective because I can literally test every combination of values that we currently encounter. Needless to say, this is the kind of test that takes hours to run. But damn if it doesn't catch the weird edge cases.
How's that support for dynamic content ordered in trees coming? ;)
What you're saying is not necessarily bad. However, the keyword "new" is an enemy of testing. Typically you'd set up dependency injection. There are various methods of doing this and you should do a quick google search to get the basics. One option is constructor injection where, when you create the instance of your object, you actually send in an already-constructed model. i.e. your LSP constructor looks like this code below. I am completely writing this off the top of my head so forgive syntax problems: protected $model; function __construct(LSP_Model $model) { $this-&gt;model = $model; } function getSomeData() { // Instead of $model = new LSP_Model(); $this-&gt;model-&gt;getSomeData(); } That way, your model isn't tightly coupled to your class. You can pass anything that's an instance of LSP_Model. So when you want to do unit testing you can actually pass in the result of a getMock function from PHPUnit, so you're sending in a completely separate model without changing your LSP class at all. Then when you want to access the model you just use $this-&gt;model. Normally that will be an instance of your LSP_Model class. But when you're testing, it can be a PHPUnit Mocked version of it that doesn't actually call the datastore directly. Make sense? Edit: Quick google search yields http://fabien.potencier.org/article/11/what-is-dependency-injection as a pretty basic example.
Jenkins fits in any place where you do the same thing twice. If you do something once, fine. If you find yourself doing the same thing again, move it to Jenkins.
&gt; i'd much prefer to learn how it should be done it's all highly variable depending on your infrastructure, network, operating systems, packaging, and other tools. will your jenkins integrate with your TCMS? great, what TCMS are you going to use? what about DTS (bug tracking)? great, which one are you going to use? will you use the same tool for dev tasks and bugs? great. will you want either of those systems to integrate with your knowledge base? are you using ant or maven or MSI or something else for building and/or packaging? etc. etc. aside from that there is no reason why jenkins has to live with the repo, that doesn't even make much sense, the repo is already something you can access from anywhere as you've proven currently.
I wrote something for you! [Unit Testing Tutorial Part I: Introduction to PHPUnit](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/)
this is exactly the tool that i was referring to. Excited to get it set up. Just wasn't sure where it was suppose to live and how it gets the code to build/test
Our infrastructure is all on EC2 and our code lives in GitHub. Whenever somebody pushed to master or develop GitHub will fire an alert off to Jenkins and it will trigger a build. At that point Jenkins checks out that commit from GitHub and puts it in the jobs workspace. In the example of our API it will run database migrations, seeds a test database (RDS instance), run behat to test the endpoints still work, check syntax, and do all the usual checkstyle type stuff. The API runs off of the Jenkins server itself. Nginx is set up to serve content from the workspace folder so Jenkins will just hit testing.example.com and that is always the latest build of code, meaning the tests are always running against the same commit - instead of trying to have two different servers which could be deployed out of time. The dev team all submit code as a pull request in a feature branch, then when we click merge it goes into develop which as I mentioned fires off a build. If the build fails then I'll revert it, or fix it directly in develop if im feeling lazy and its an obvious fix (syntax or whatever), then slap the developer for not running behat locally or checking their syntax. Then I have Merge Mondays, where develop goes into master and we see if that works too. If it works it goes up to staging where we manually go through a QA checklist and put a Y or an N in a box for various functionality and if its all good we shove it up on production. Right now its deployed with chef (it just grabs the latest commit in master and runs composer/migrations/etc) but i'd like to switch to something Jenkins integrated, so I can click a button on a build and have it deploy that. We'll see. Thats how we do things at [Kapture](http://kaptu.re) but we're still a small team. Everyones process is going to be different.
Can you move the literal to a constant or class property? Then you just need to focus on testing get_total_appraisals(). If you can't separate the db easily, then populate it with a known state and test get_total_appraisals against that known state. I would probably just use phpunit with a real db instead of a mock, it's not the best, but it means in future if you refactor to get better separation of concerns you can still use your unit tests and just replace the connection with a mock.
Yeah, I could move the literal to a class property, and to be honest, was on my todo list. But why would I focus on testing get_total_appraisals() instead of get_fair_value()? We have lots of other methods that calculate results from other functions: public function get_debt_limit() { return ($this-&gt;get_total_accrual_debts() + $this-&gt;get_total_nonaccrual_debts()) * $this-&gt;get_scope_ratio(); } Now, how would I go about testing a method like this when it's dependent on lots of other methods? Or would I even bother testing it?
Forgive my ignorance but how do you make testing.example.com accessible to Jenkins but not the general public? I really need need to learn how to work with git in a team environment. The whole pull/merge process is foreign to me
 class LSPTest extends PHPUnit_Framework_TestCase { public function testLSPModelDoesSomethingCool() { $model = $this-&gt;getMock('LSP_Model', array('dataGetter')); $model-&gt;expects($this-&gt;once()) -&gt;method('dataGetter') -&gt;will($this-&gt;returnValue(&lt;some value that makes sense&gt;)); ... ... ... } } ...assuming your dataGetter function is called once. There are some quirks, more than I can explain here. It will take some learning and some frustration, but give it a run. This is very, very useful for creating excellent software.
I don't know your domain or, obviously, your code base well enough, but dependency injection is the typical solution to these problems: public function test_get_debt_limit($accrual_debts, $non_accrual_debts, $ratio) Now you are testing only the logic used to make the limit calculation and can pass in arbitrary values to make sure it is accurate. And again, your problem is simplified so you can test each method individually. This much refactoring is probably out of scope right now (?) I'm just trying to illustrate where you should be aiming long term so you can start down that path. Write tests using a real db connection and some fixtures, test that method and the three it calls, when you refactor the tests will not change (e: well you will swap out the db etc, but actual tests will be same) and you'll be sure you didn't break anything.
Thanks, good catch.
Hmmm...in the long run, should I remove internal references to models, and instead, pass data from models as arguments to class methods instead? So, instead of: public function get_debt_limit() { return ($this-&gt;get_total_accrual_debts() + $this-&gt;get_total_nonaccrual_debts()) * $this-&gt;get_scope_ratio(); } I would have this in my class: public function get_debt_limit($accrual, $nonaccrual, $ratio) { return ($accrual + $nonaccrual) * $ratio; } And when I call the method elsewhere in my code: $output = $class-&gt;get_debt_limit($model-&gt;get_total_accrual_debts(), $model-&gt;get_total_nonaccrual_debts(), $model-&gt;get_scope_ratio()); I honestly don't know what the best way to structure my code is now.
What is the PHP-FIG?
Agreed with both of the comments here. Fix the warnings.
I hope this works, every time I have tried to get tests working on my Silex app it fails. My app is getting to big &amp; important now not to start testing. 
test
A warning is an error; you should avoid it. Test for the presence of the table before trying to use it. However, if you really want to handle warnings as you would exceptions, you can add this code to your project and it'll do just that: function exception_error_handler($errno, $errstr, $errfile, $errline) { throw new ErrorException($errstr, $errno, 0, $errfile, $errline); } set_error_handler("exception_error_handler"); Then you can use try/catch. 
Sorry, must correct my prior answer after just reading the symfony documentation for events: symfony does not support what i mean by propagation even though there is a section about it in the manual. In symfony you have to register your listener to an exactly named event. Your listener will only get called (in a flow with other possible listeners) when exactly that named event gets triggered. In my little class you can register a listener for "foo" and when "foo/bar" gets triggered your listener is also called...
I didn't know you were on reddit! I'm a huge fan, thanks for all you do for the php community.
&gt; However, the keyword "new" is an enemy of testing. Don't tell such things to a new Dev please, it confuses a lot of people. New is not bad, new is essential. The message should be: Don't let classes instantiate other classes, if it's not their job. That's all. "new" is nobodies enemy, you should just use it where it's appropriate. (For example: A DI container) Otherwise, good explanation.
You're welcome I guess. Also my example isn't brilliant, it lacks error checking. It was mostly just to demonstrate that JSON is usually much easier to access since it'll map to plain arrays or objects.
I have a genuine question. Why isn't Kohana mentioned in general when these type of questions arise? 
That's true, but we're sure it'll is worth every second we invest, because it'll make so much things easier and handsome.
Gitolite, Jenkins, Capistrano. Also, we have the exact same VM (Chef) as production so our tests and code will never behave differently across environments.
DISCLAIMER: I am NOT affiliated with Nusphere company, I am just using their products. Our team has been using for quite some time Nusphere products. The PHPIDE that they have enables you to perform profiling on your PHP code. Also you can do profiling on the SQL queries a functionality that was recently added. You can perform the debugging either locally or remotely. The cost for an individual programmer license is not very high, as far as I remember there was an offer of 50$. Also the company offers the PHP Nucoder which allows you to encrypt the code of your application. UNFORTUNATELY they have not worked very actively on the project and they only support 5.3. This is really really bad because as you know 5.3 reaches the end of its life. I used their PHPIDE for projects like CMS, SEO Tools and even Machine Learning apps. The ability to debug the code and the goodies that they give in the PHPIDE REALLY help the development. Again I am not affiliated with their company, I have never subscribed to their affiliate program or anything fishy. I am just a satisfied customer of their IDE and a not-that-satisfied customer of their Encryptor. There are also many other debuggers that use XDebug module but I have not tested them to provide feedback. At any case, I urge you to use a debugger for your development (which ever you select). You will see that it will speed up your development and make your life easier. Hope it helps! :)
Purely for deployment if you are already using git then you should look at [capistrano](http://www.capistranorb.com/). It will give you single command deployment or rollback.
HHVM is great if you do a lot of math calculations on your PHP code. In most of the tests I saw 25% improvement on the speed and 50% improvement on Memory usage. BUT have in mind that HHVM can be slower and require more memory when you perform a lot of string manipulation. Have this in mind when you use it...
I've installed Webgrind. Basically unzipped to `/www/webgrind` folder. Now, what's the workflow of debugging my applications? 1. Make a request to a page, so Xdebug creates a file under `tmp` 2. Have a second tab with Webgrind open. 3. Open the generated file. 4. Request page again. 5. Reload Webgrind with current generated page and see the differences. Like this? Also, can I enable Webgrind in the current tab (application page) so whenever I refresh page it automatically loads the current cache file for me?
&gt;I honestly don't know what the best way to structure my code is now. Don't worry, nobody does. You're asking the right questions and thinking about the problem, that's all that really matters. Another way to do it is: public function __construct(\SomeModel $model) { $this-&gt;model = model; } public function get_debt_limit() { return $this-&gt;model-&gt;get_stuff() * 3.14159; } The main point is the separation of concerns. Model is separate from the class, and can be replaced by another model or a mock object. Whether you inject something in the constructor, a setter, or directly in the method isn't as important as injecting it in the first place. It means you can mock the function get_stuff to return 1 and know that get_debt_limit is working if it returns pi.
Examples should show best practice.
Okay--so it finally clicks now! I think I've been over-thinking this whole database thing. I don't think it really matters since I've already separated out our logic and database. I think I'm going to give PHPUnit a try with a couple methods and assertions see what happens. But I think it will just work since I seem to have structured my code right from the beginning. Thanks for your help!
Fabric and Ansible, for python might be right up your alley. Basically allows you to create smart and simple logic that directly uses ssh.
Thank you for the great tutorial! I will be reading up on this this weekend along with some YouTube videos I've found.
We're using a custom framework, so no Laravel, Symfony, Zend, etc. It's based on MVC, but how closely it is to the real MVC principal is anyone's guess.
Can you give some pointers to getting started with Chef? Ours is a small shop - 2 VPS, 2 developers. I am thinking of using Chef or Puppet to get a uniform setup across VPS and virtual machines for developers.
well that should be simple enough, just throw your frameworks bootstrap somewhere in phpunits bootatrap and you should be able to access your frameworks db connectivity classes.
In our shop, I am the only developer and only my machine has SSH access to production server. Code that is to go live gets merged into master. Master gets rsynced to production. Not healthy, but it works.
 cd `dirname $0` /usr/local/mysql/bin/mysqldump --lock-table -uroot -p demo &gt; ./data/demo.sql git commit -m "auto commit" git push origin master #login to server execute commands using -t, use ; for multiple lines. ssh name@server.com -t "cd ~/Sites/yoursite/web;git pull origin master" # copy any local files not in git, eg user uploads or local uploads scp -r localfolder name@server.com:~/Sites/yoursite/web/assets/
We use a combination of the GIT Flow branching model, GIT hooks (we use bitbucket.org) and a deploy script that sits on our server. This system has saved us many, many, manymanymany headaches and our team runs like a well-oiled machine now. With this set up, there is no need to ever FTP into your live server again. Using GIT Flow means most of your work is done on the Develop branch on a dev server. Your Develop branch should be basically good enough to go live at any given moment. You can FTP into the Dev server like you normally would and go nuts there. Before a feature can be pushed to the Develop branch, it needs to be tested, though, so we use Feature branches for all new features. Each team member tests their features for their Feature branch on either their local machine or a subdomain on the dev server made just for that feature. Once the Feature branch is ready for testing and close to being ready for live, it can be pushed to the Develop banch (since everything on the Develop branch must be 99% ready to go live at any given time). Once you have everything working how you want it on the Develop branch, you can make a new GIT Flow release, which will merge the Develop branch into Master(the live site). This is where the magic of our deploy script comes in. BitBucket (our GIT host) lets you set up POST hooks. For a POST hook, you enter the URL to a script that you want to run every time a change or commit is pushed to the GIT server. In our case, we pointed one of our hooks to a deploy script that: 1) Accepts the payload sent by BitBucket. This payload includes info about what just happened and on which branch. 2) Checks to make sure this commit is on the master branch. Since this is the master deploy script, we only want to deploy the repo to the live site if it's the master branch being updated. 3) Downloads a tarball of the complete master branch from BitBucket to the live server using a special BitBucket URL that includes a BitBucket username and password (this tarball isn't publicly available). 4) Runs a server command to unpack the tarball on the server, overwriting any files in case of a conflict. 5) Logs every one of these actions to a log file. One thing to note is the deploy script only writes files so if you have files on your site that are not in the repo, you won't lose them. Also, you need to check your .gitignore file thoroughly to make sure all your configs and other server-specific files are ignored. If you can get your guys on board with a system like this, there is a bit of a learning curve, but it is WELL worth the effort. On version release day, we used to scramble and have to deal with tons of bugs and issues immediately after each release. Since implementing this system, each release runs perfectly smooth and we never have issues anymore. GIT Flow: http://nvie.com/posts/a-successful-git-branching-model/
My guess would be: because people who know how to use Kohana see it *(and by extension - any other framework)* as a specific solution for a specific set of problems. Choice of framework should be determined based on project's requirements, not by some stupid popularity contest, that `/r/PHP` is so fond of.
If your "models" include things like database interaction, data logic, validation, authorization, ACL, etc, then you're stuffing several classes into one. Don't stick to literal MVC, cut your models down to their logical pieces.
I made something for you! [Make $ vagrant up yours](https://jtreminio.com/2013/06/make_vagrant_up_yours/) [PuPHPet](https://puphpet.com)
The hell? You already posted this.
git, puppet, grunt, capistrano. I have no QA dept, and it was a strugle to get this far. Next step is some automated pseudo-QA tier that can do some baseline sanity checks for me.
Unit testing &amp; TDD are not [silver bullets](https://en.wikipedia.org/wiki/No_Silver_Bullet). Even with 100% code coverage you can still have defects. Defects are not just limited to "code doesn't do what I thought it did." Defects can take the form of "we didn't specify that we wanted this to happen" or "there's an edge case that could wind up being passed in that would break this class." Unit tests are a piece of the quality puzzle, along with integration and functional tests. Even all of those won't catch defects from incomplete or wrong specifications. And guess what? You don't want complete specifications unless you're writing software with the ability to kill people (in which case, get the hell out of /r/PHP). So what do you do when you practice TDD and find a defect? **Write a test for the defect and fix it!** Boom, you just added a regression test so that when you are cleaning up your code later you'll be sure that you don't re-add the defect. By adding TDD to your process you'll continually improve and build out a test suite that gives you confidence in any change.
1) If you have SSH with Git available on your live server, just have another non-bare git repo in your web directory and pull the master branch to deploy. The great benefit to this is if you have a bug that you only seem to be able to reproduce in the live environment, you can make quick changes directly on the live files and once the bug is fixed you can commit and push the fix back! 2) If you don't have Git available, only SSH or FTP, then use git-ftp https://github.com/git-ftp/git-ftp After initially uploading the entire project into the live web directory, you do `git ftp catchup` which will upload a `.git-ftp.log` file containing the SHA1 of the commit you are currently on (you should be on the commit that is the equivalent of the uploaded files). From then on, each time you want to deploy, you just have to enter `git ftp push` and it will upload only the files that have changed since the commit described in `.git-ftp.log`, then updates that file to now show the new SHA1. The benefit to this as opposed to push hooks is that you don't have to push any certain branch that you may not want to. Also, if there's a bug that you can only seem to reproduce on live, you can just keep amending the same commit and `git ftp push`ing (uploading the new changes to live) over and over again until the bug finally goes away, and then finally push, resulting in 1 commit with the fix as opposed to many "attempting" to fix the bug.
This is almost our exact setup as well. We do currently use Jenkins for deployments (GUI to run capistrano), but I would advise against it. It's easier and less maintenance to use the command line functionality of whatever deployment tool you have. The only upside to using Jenkins to deploy is you have a decent log of the deployment stored.
At companies I contract with, I typically implement a tiered release system using Git branching and Jenkins. I write provision scripts in bash and the local dev environments are all maintained via Vagrant/Virtualbox. Both remote and local environments run the same exact software and the provision scripts are maintained in Git. I experimented with Chef and Puppet, but I prefer bash for a couple of reasons. First, using bash means that engineers and sysadmins don't need to learn an additional auxiliary tech. And second, I found Chef and Puppet to be fairly bloated for most of my use cases. The Jenkins workflow is such: each tiered environment (dev, stage, production) has it's own instance of Jenkins. Whenever a commit is made to the dev branch, Jenkins will automatically pull the changes on the dev environment, run the unit tests and integration tests, and reset to the previous commit if the tests fail. Whenever a release is ready for stage, a promote job is run in Jenkins on the dev environment, which will run all of the test suites as well as run a basic automated profiling job. If everything's groovy, the dev Jenkins force merges the dev branch into stage. The stage Jenkins sees the commit on stage and the process begins anew. There's a patch job that can merge certain branches around the whole release process. The nice bit is that the Jenkins jobs actually detect the correct servers in each environment by using the AWS CLI tools, so that even when scaling up and down, the release process is still accessing all of the servers it needs to release to. In situations where I wasn't working on AWS, I've actually implemented simple node daemons that listen and subscribe on a PubNub channel for each server instance. Then the Jenkins job sends out a ping for the servers it needs and each relevant server responds.
CodeIgniter is MVC. It is in no way a Rails clone and was never intended to be.
[git-ftp](https://github.com/git-ftp) or [dandelion](https://github.com/scttnlsn/dandelion)
Here's my vote for [Fabric](http://fabfile.org).
Standard caveat about not being affiliated, but we just put 4 professional licenses of New Relic on our machines (2 PHP and 2 Java) and the sheer amount of data available is amazing. You may want to give it a shot; 30 days free, easy to install, and you can at least profile the slow parts during the trial if you don't have the money to keep going (it does get expensive to subscribe).
Fair point, should have been more explicit.
Remember, if you can't test it or it seems difficult to test, the problem is in your code, so you need to refactor and keep your coupling loose. Also, look up on Use case programming and the Entity/Boundary/Interactor model.
so i'm setting it up in the same VM as my app on my local machine to get familiar with it but i can't get Jenkins to have access to my vendors/ directory. Do you know how i could fix that? [Stackoverflow](http://stackoverflow.com/questions/18803702/jenkins-not-having-permission-to-access-directories)
I've tried to give you an answer on Stack overflow (don't have enough karma there to comment)
We use a tool we wrote called [Deployinator](https://github.com/etsy/deployinator). It basically rsyncs the state of a repo across a given set of servers, then issues commands to graceful. A lot has changed since this post was made (we now have [atomic deploys](http://codeascraft.com/2013/07/01/atomic-deploys-at-etsy/), but you can read a bit more about deployinator and our process [in this blog post](http://codeascraft.com/2010/05/20/quantum-of-deployment/).
It's the [PHP Framework Interop Group](http://www.php-fig.org/). Basically, it's the standards body for PHP and encourages interoperability of code between frameworks. I allows you to take modules for Symfony and use them in Zend and vice versa. Yii isn't a part of it because it uses non-standard name spacing and such.
I don't think webgrind can be appended to the current page. But, by default, when you click the update button it will load the latest generated cachegrind file. You don't have to manually look for it. I suggest you set up the xdebug.profiler_enable_trigger, so that you trigger profiling by appending ?XDEBUG_PROFILE to the url of the page you want to inspect, rather than having the profiler run all the time and slowing you down.
phptherightway.com has a list of people to follow: http://www.phptherightway.com/#resources
You've already received some good answers, so I won't repeat what's already been said, but here's an analogy to help you understand the purpose of unit testing a bit more. You own the company Acme Compasses, where you build world class [compasses](http://en.wikipedia.org/wiki/Compass). Your engineers have finished designing the Super Compass 2000, and the first unit has been built, and one of your engineers takes the unit outside to test that it actually points north. Sure enough, when he takes the compass out of his pocket the needle swings around and points north. "Great!" you say, and you give the factory the go ahead to mass produce the compass, and your start sending them to stores. A month later you start receiving complaints about the compass from customers, saying the needle does not point north, but in fact points a few degrees east of north. Your top engineer tells you he personally took the prototype unit outside for testing, and it pointed perfectly north! After many months of "debugging" and hundreds of customer complaints later, and millions of dollars lost, you finally discover the problem. The local utility company built high voltage power lines just west of your testing facility, and the magnetic field given off by those power lines completely skewed your testing. Your top engineer failed to isolate the unit (the compass) from the input data (the magnetic north pole) during unit testing. **Other factors were interfering with the test**, such as the newly built high voltage lines, and maybe even an unknown huge reserves of iron ore is located just below your testing facility. What your company should have done is built a special testing room that was shielding from all magnetic interference, which contains an artificial "mock" magnetic north. Then when you test compasses in that room you know they work when they point to your mock north pole. When the compass needle doesn't point to your mock north pole you know there's a manufacturing defect, because there is absolutely no other magnetic interference in the room. --- In unit testing you have to isolate the unit being tested from the input data to get valid results, just like the Acme Compasses company had to isolate all magnetic interference to test their units. When your getTotalPayments() method starts returning invalid data during testing, do you really know why the method is failing if you're testing against data in a live database? Maybe the algorithms inside the getTotalPayments() method are wrong, or maybe the database is down, or maybe someone changed the row values in the database. You don't really know why the method is failing, because you failed to isolate the unit from other interference. Specifically the database is your interference. The Acme Compasses company build a magnetically shielded room with an artificial magnetic north pole to test their compasses, you have to build an artificial database to test your getTotalPayments() method. This is why PHPUnit doesn't offer database support out of the box, because you really shouldn't be testing against a real database. To illustrate what I mean, here is your Database class, and your Person class. class Database implements IDatabase { public function query($sql) { return $this-&gt;connection-&gt;query($sql); } } class Person { private $database; private $person_id; public function __construct($person_id) { $htis-&gt;person_id = $person_id; } public function setDatabase(IDatabase $database) { $this-&gt;database = $database; } public function getTotalPayments() { $sum = $this-&gt;database-&gt;query("SELECT SUM(payments) AS s FROM persons WHERE person = ? LIMIT 1", $this-&gt;person_id); return $sum["s"]; } } You write a test for the getTotalPayments() method, and you insert some data into your database, and then run the test, and everything works fine. public function PersonTest extends PHPUnit_Framework_TestCase { public function testGetTotalPayments() { $person = new Person(1); $database = new Database(); $person-&gt;setDatabase($database); $payments = $person-&gt;getTotalPayments(); $this-&gt;assertEquals(6, $payments); } } INSERT INTO `persons` (`person_id`, `payments`) VALUES(1, 6); However when you run the test a month later it fails. You look inside the getTotalPayments() method, and everything looks fine. So why is the test failing? Why is getTotalPayments() returning 12 instead of 6? The problem is you didn't isolate the input data (the database) from the unit being tested (the getTotalPayments() method). One of your team members or the "person" changed their data, and payments now equals 12. To fix the test you have to create a fake database. A **mock** database that returns a known value. Remember: You're testing what happens inside the getTotalPaymets() method, not the data returned by the database. class DatabaseMock implements IDatabase { public function query($sql) { return array("s" =&gt; 6); } } And then rewrite your test to use the mock. public function PersonTest extends PHPUnit_Framework_TestCase { public function testGetTotalPayments() { $person = new Person(1); $database = new DatabaseMock(); $person-&gt;setDatabase($database); $payments = $person-&gt;getTotalPayments(); $this-&gt;assertEquals(6, $payments); } } Now your tests pass every time because you're controlling the input. If the test fails you know it must be a problem inside the getTotalPayments() method, because your mock database class always returns the same output. PHPUnit makes it a little easier to create mock classes through it's getMock() method. You could write your test like this: public function PersonTest extends PHPUnit_Test_Case { public function testGetTotalPayments() { $person = new Person(1); $database = $this-&gt;getMock('IDatabase'); $database-&gt;expects($this-&gt;any()) -&gt;method("query") -&gt;will($this-&gt;returnValue(array("s" =&gt; 6))); $person-&gt;setDatabase($database); $payments = $person-&gt;getTotalPayments(); $this-&gt;assertEquals(6, $payments); } } You don't have to know what all that does right now. Just know that PHPUnit makes it possible to generate mock classes on the fly, and you can control what value each of the class methods returns. --- You may be wondering what the point is. What's the point of creating a fake database class when you're trying to test both the Person class and the Database class. The answer is you're not supposed to test both at once. The Person-&gt;getTotalPayments() method is a unit, and the Database class is a unit. You don't test two units at once. You write a test for your Database class, and you write a test for your Person class, and you test each separately. The test for the Database class may itself need mocked classes to isolate queries from, lets say, network problems. I hope this helps a little. With unit testing you have to test each unit of your software individually. That means writing individual tests for each class, and if a class being tested requires other classes to operate, you have to mock those classes so they give known values. Writing unit tests can be just as much work as writing the unit themselves, and generally you want to write the tests as you're writing the units. You create the PersonTest while you're writing the Person class. You don't wait until the entire website is built and running to start creating unit tests. In [test-driven development](http://en.wikipedia.org/wiki/Test-driven_development) you actually write the tests first.
Slowly but steadily moving to the top of the to-do list. ;-) (together with multi-language setup, this is still the most requested feature)
Here's a free lesson for you .. pay attention, maybe you will learn something: MVC is an architectural design pattern, that implements [SoC](https://en.wikipedia.org/wiki/Separation_of_concerns) principle. The separation in this case is two-fold. It separates model layer from presentation layer. And within presentation layer it separates handling of input from handling of output. MVC is not a pattern that some framework implements. Your code implements it .. or doesn't. It is uses when simply following OOP practices an principles (look them up, I bet you do not even know what SOLID is) are not enough anymore to deal with complexity. That's where MVC comes in: it add additional constraints to the structure of applications. The responsibilities of triad parts are as follows: - Model layer contains the domain business logic. And yes, it is a layer, not a class or objects. There are no multiple "models". This layer internally will contain several groups of structures. Mostly: domain objects, services and persistence abstractions. - Views are instances (not dumb templates) that handle all the logic that is related to creation of user interface. The acquire data from model layer and, based on what they get, choose which templates (multiple) and other structures will be required for creating a response. - Controllers are the simplest part. They take user request and based on that alter the model layers state by executing command on any number of services. In rare case controllers my also alter the state view, if request contains purely UI-related parameters. Controllers DO NOT pull any information from model layer. ... If you have really worked with the frameworks, that you mentioned, that you will notice that this is **exactly not** how they work. Rails-like frameworks refer to templates as "view" and describe bunch of active record instances as "models", while pushing application and UI logic in the "controllers". This completely breaks SoC. Therefore, let me repeat it again: **CodeIgniter has NOTHING to do with MVC.**
I use phpStorm by jet brains. It's a nice PHP ide with built in upload capabilities so that when you just ctrl+s to save it uploads and you can just browse to it and test it out. It's a great software. 