This is a great post, and I bookmarked it for later use. The one thing I dislike about the whole process though, is you can't do any of this from an extension. If you ever wanted to give some PHP source using your new statements to someone else, you would have to give them your PHP binary/source too.
Another excellent article, no surprise there. Thanks :)
TBH it was at an alumni event at my college and I don't remember much more than that.
BTW you should read about Dependency Injection pattern. What you have is not Dependency Injection at all, this is Service Locator
Hey you could be interested in these [dompdf](http://code.google.com/p/dompdf/), [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/) , [princexml](http://www.princexml.com)
... why?
It's worth noting that as time goes on frameworks are starting to be developed with more of an "Open-System" design making it easier to fix mistakes in component choices. PSR-0 to the rescue! It's not always X Framework vs Y Framework. It can be parts of both when you reach X Frameworks' shortcomings. 
That's a whole lot of straw man arguments to support a largely vacuous point. &gt; It [a framework's initial phases] implies that those first three phases of application development aren't important. No, Maxwell *thinks* it does. I don't think it does. Some frameworks do, some don't. Some are stricter about how they want to bootstrap the code, some go out of the way to allow you to customize and bootstrap your own initialization. This is just a bad generalization that only applies to some strict frameworks, particularly something like RoR. &gt; As anyone who's done a lot of prototypes will tell you, often enough what starts out as prototype code very rapidly turns into production code. Although this is listed under some kind of flaw of frameworks, I can't see this as anything but a strength. It means that the prototype, which "oh no" might turn into a large production project, is backed by *great, well tested, well-supported, good quality code* (assuming that's the general profile of a framework, contrasted to pure off-the-cuff prototype code). If the project turns into something large, it's already got a lot of support and updates for it that *comes standard*. Security flaw? *other people in the community* are helping to patch it for you! &gt; And to the point of this post, the assumptions made by a framework may not be wrong for an application (and hence won't have a significant long term increase in cost). Here, you admit this. You want to warn about *the great dangers of blindly following a framework*, because apparently blindly following something being a bad thing, is a new concept to people??? I don't see what novel idea you're trying to put forward here. Apparently a framework can result in some sort of architectural flaw in your code that can cost you heaps of $$$, or apparently it makes a project *less-maintainable?* These are vacuous assertions, and you need empirical evidence to back them up if you ever want to put forward a concrete point that I'll listen to. &gt; So while there are more people who say that they have experience in a particular framework, a non-insignificant percentage of them are really just weak developers who are looking for a crutch. And a non-insignificant percentage of developers *in general* are weak developers. You have absolutely no evidence to suggest that the stat for weak framework developers should be higher than overall, but yet you wish to somehow claim that as a negative point. But while weak developers might be writing stuff that's completely unmaintainable (hopefully we've all visited thedailywtf.com), at least a weak developer that has shown he knows a framework is writing stuff that can be maintained by others. His damage will be somewhat partitioned and limited by good structural code surrounding his work. If your argument is "don't hire framework developers because they might be bad!" then I guess we should forget about people like fabien potiencer. Trying to apply a generalisation to an issue that always gets a case-by-case treatment (i.e individual interviews) is downright stupid. &gt; But The Framework Developers Are Smarter Than You! No one ever says that. That's why they're all open source, and you can contribute to them yourself if you want to make the code better. It's the *code* that's "smarter" than *yours*, purely because it's been looked over by 1000 people instead of 3. But frameworks also attract a lot of coders, and by averages, *some* of them are bound to be smart. And while writing smart code can be difficult, *recognising* smart code is less so. So smart code is likely to get commited into a well-managed framework, and at a higher rate than your own projects. *That's* why people use them. &gt; With the increasing focus on frameworks instead of core code, I really wonder what will happen to the ecosystem... There never was an ecosystem to begin with. You're idolising lost days that never were. The reason is that PHP always always been web-focused, not general purpose. You get *tonnes* of awesome libraries with Python and Ruby because they are general languages, and they are built to solve *heaps* of problems, and surprise surprise, a shit load of them are focused on a web server (which is 99% of PHP), and so people create solutions for these, that *happen* to also be able to be pulled into a web context if you want to make your project available over port 80 for whatever reason. I love both PHP and Python, but it's not that PHP has ever lost any focus; it just has a huge game of catch-up to play. &gt; And that's going to be far more valuable to the developer (and to the world) than just learning how to write code in a single framework... If a programmer doesn't set about his learning in terms of general concepts, then he's never going to be a great programmer full stop, whether using a framework or not. None of this is the framework's fault. ----------------------------------- All in all, it seems to me that you've got some sort of *angst* against frameworks, and you're *looking* for faults to assign to them. Problem is, pointing out general things and saying "Oh but this is *framework's* fault now!" is just stupid. 
Indeed, there is no solid evidence behind any of the flaws. It's all just speculation about what *could* go wrong, incidentally with any software project, framework or not.
Not enough. - Employed and freelance - 3rd year student at a private university for Comp Sci (20 yrs old) - Mostly PHP involved, do a lot of DB and jQuery work too - 6.5 years (working with PHP, 3.5 years professional) - Location: Rochester, NY
You really need to add location to this. Speaking from experience, you can have the same exact education (BS), experience (0), and be living in Harrisburg, PA making 40-45k, but move to Philly and make 65-70k. Myself: 100k+ * employed * BS in Computer Science * Whole stack knowledge, work on what I want, Java/PHP/JS daily * Depends on the part of the stack we're talking, but I've been out of college for 6 years. * Philly
EDIT: Sorry I didn't follow the format: * Freelance * Associate Degree * PHP, MySQL, Memcached, jQuery, JavaScript, CSS, Sysadmin, PCI Certification, Biller (Merchant) Intergration, NGINX, tons of other things I can't list at the moment. * 15 years, 10+ professional * Texas but I travel all over the world for various clients. 6 figures but I've built up my client base for over 10 years now. I've been coding for about 15 years now using various languages, I stuck with PHP because I began making money using it. I also offer a variety of services besides PHP such as sysadmin, db management, jquery, javascript, css, biller integration, system/biller security, PCI compliance, etc. I've also had the opportunity to travel the world free of charge helping setup customer support offices, training outsourced employees to use custom CMS and CS systems I've built. I started (making money) at 17 years old and in college when I saved up about $1500 got myself an apartment and decided it was time to make real money. I finished my Associate Degree right after I turned 19 however by that time I was spending a lot of time in Asia helping various clients setup their offices. I couldn't tell you the "right way" to do it I just kept working, got lucky meeting the right people and always produced a quality product.
thanks, added
As someone who has run into the same situations, no, he didn't make them up.
It's just how the tokenizer is written - there are tons of languages that don't need semicolons either, but PHP still uses them. They could remove it for PHP 6 and there would be no loss of `function`ality.
Please stop and go away. You're not a professional and you're not an expert. **Please stop giving bad advice to people.** You also really need to **stop spamming** this subreddit and **asking people for money**. I don't see *anyone* else out here asking people to pay them to impart knowledge. What's worse is that the quality of your lessons do not reflect your claim that you're a "PHP Veteran"... and you have the audacity to demand money for this poor knowledge? I mean, [this](http://www.reddit.com/r/PHP/comments/wuhvl/phpu_lesson_more_secure_php_sessions/) was what you posted last and it was poked full of holes; I have very little faith in your claim that you can teach people how to do PHP right. You haven't learned how to do it right yourself.
Not doing PHP these days. My last PHP gig got me $110K/year (this was about 4 years ago now...). Doing better than that now with Ruby on Rails. * Employed (with sidework, but not counted in the $110 figure) * BS - Biology, plus a master cert. in C/C++ programming * Mostly PHP, some DB work ... leadership type stuff too. * 10+ * Near Boston. EDIT: I should point out that I haven't totally abandoned PHP ... I still maintain some client sites that were built on PHP. However, I generally won't start a new project on PHP anymore. 
This is so awesome! I wonder how easy it would be to add annotations to PHP like how Java does.
Never seen it used but I think it's a good idea.
 $words = ['hello', 'world', 'foo', 'bar']; var_dump('hello' in $words); // true var_dump('foo' in $words); // true var_dump('blub' in $words); // false I love everything about this. No more trying to remember in_array param order.
Really? Which startup? 
I'd rather not say.
&gt;"off the cuff production code" Well there's your problem right there. Don't write production code off the cuff. Spec it, plan it, design it, then code it. Much of the "frameworks are the only way" crowd seem to be people that just assume all developers are incapable of writing original code that doesn't look like it was written by someone who had a gun to their head telling them to go as fast as possible. Well, I assure you that is not the case. There are two main cases I have seen where frameworks are a BAD decision: 1. When the database (and thus the model) are very complex. 2. When the application needs to be optimized in both memory usage *and* database load. In case #1, even with a framework you know very well, it often involves changing non-trivial portions of the framework while remaining locked in to whatever assumptions the framework made, which can spawn bugs much more reliably than "custom code". In case #2, you are defining a goal that specifically is rejecting a general case solution, as you are seeking to highly optimize the queries, perhaps the order they are done in, the time that information stays in memory, etc. Now of course, both of these are mostly complicated because of database interaction. And, one can point out that many frameworks (most in fact) offer just about any possible access to the database (no matter its design) that you could want. But this means you are usually performing all of the model's work in the process space and treating the actual model like a Database Abstraction Layer. He is saying that a framework is not the solution 100% of the time, and that he finds it strange that some developers seem to think so. I for one cannot fathom that any developer with actual experience would disagree with that statement. No method or solution is ever correct 100% of the time, and he is literally saying nothing other than this while supplying the things that contribute to the fail cases. You can debate angst and get into debates about the idealized cases all day long. Anyone who has worked as a developer for any length of time in a professional setting will recognize that his very, *very* modest statement of qualification is nothing but plain common sense, and I think that the fact it even needs to be said is stupid.
Ballpark figures from personal experience, job offers and hiring. Junior - Senior ranges. * Midwest: $50k - $80k * SF/NYC: $80k -$120k (plus usually stock options or various incentives) * Portland: $70k -$100k
It's not just messing with the statistics. That's what most php jobs are, low paying php jobs. Silicon Valley is definitely one of the extreme minorities. I would wager to say that it is the ONLY place where that kind of thing is normal. Even out here where I am, in Irvine, you're not going to find a ton of php jobs that pay more than about 75K. (And those are usually mid-to-senior level)
unhelpful, other than tooting your own horn, also nobody will take you seriously claiming 6.5 years "work experience" at 20 years old.
How did you go about finding a company that would even *look* at a resume without a degree?
£30k - Full time - No Degree - 2 years experience as an employee, did freelance during high school from the age of 15 - Was in London UK, now I get to work from home up north
* $40K * Freelancer * High school * PHP / mySQL / Javascript / AS3 * 11 years of experience * Central Europe (Czech Republic) 
Good call. 
Yes as long as things keep functioning, not a problem. Plus my editor colours things based on the word so thats handy.
In my case, there's a password required on both hops. On the first hop, I just add the credentials, but I'm wondering if there's a way to input a password on the 2nd hop. If I just ssh_exec('ssh user@host') then it hangs (presumably because it's waiting for password input)
$10-$15k/year * Some college, but no degree. * LAMP stack websites * Phoenix Arizona, British Columbia, Portland OR. I've been an admin and developer stretched between a seasonal ecommerce business and freelancing for 10+ years. I have one partner who handles the bulk of the store, while I handle the geekery. It's been part time work, which you just can't get anywhere else, but, being self-employed, it's been a lot of feast-or famine nail-biting, especially recently. It's a balance - it's frightening to be so poor and uncertain about the rent (I've been semi-homeless, couchsurfing, but still in business), but I have worked from home, part-time, with a lot of freedom (save being broke) for a decade. 
I actually don't include my degree on my resume, find it hurts, emphasize accomplishments and portfolio.
$70K * Full time * No Degree - Maybe 30 credit hours * PHP, HTML, CSS, JavaScript, Wordpress, Drupal, mobile, mid-level design * 7 years experience, all self taught * Washington, DC I should add that I don't work for a start up, major company or the government. I work for an association that has +-35 employees.
It's possible but not easy. `ssh2_tunnel` can be used to create a socket that arbitrary data can be passed over. Unfortunately `ssh2_connect` wants a host/port to connect over. In order to over come this problem, you will need to pipe all the data from the tunnel socket and a `socket_listen`. That easy right? Wrong. PHP doesn't allow threaded execution so you'll need to `pcntl_fork` a proc off to do the piping. If this doesn't sound like you're cup of tea, find another way to do it.
I must be looking in the wrong places then. I've met quite a few higher-ups who say they throw resumes in the trash if they don't see higher education listed.
I see what you did there.
You can't check for that - the user is logged in via a cookie.
Salary is currently at ~$70k/yr + bonuses + 401(k) match + expenses + health insurance Freelance rates are between $35/hr and $100/hr depending on the client. * I've been doing (and still occasionally do) freelance for 10+ years, but have been on salary with my current employer for the last 3+ years * Took a handful of classes in college that barely contributed at all to my education in this field; Java Programming and whatnot. * Lots of PHP, but these days it seems like it's more jQuery and interface design. MySQL/Apache/shell scripting are frequently used as well. * ~12 years experience; started when I was about 15-16. Been paying the bills with these skills since about 17-18. * I work remotely from wherever I happen to be with a high-speed internet connection (yay for tethering on a 4g network!). My company is based on the east coast, but I'm about 2000 miles away at the moment. I have never actually met anyone I work with face to face. This is easily the coolest part of the job. A few of my friends keep trying to get me to come work for them in the SF Bay area with a starting salary in the $120k range, which sounds nice, but I'm not sure I'd be okay with giving up my freedom. The amount of autonomy I'm given in my current position is absolutely ridiculous. I'm not sure that a 9-to-5 job would be okay with me packing up and leaving the office for weeks on end.
Fucking hell, I knew I was underpaid. The job I left/was laid off from: * Employed full time * High school dropout, spent most of my time in between that and finding a job reading through and auditing university CS courses and practicing. * We were the only shop in the area doing any custom PHP - the others just offered installed open source products. I was the only PHP programmer. Was also sysadmin for nearly a dozen servers (including a bunch of client ones), IP phone admin, network admin (for us and cilents), alarm technician, mechanic, plumber, electrician, mover, janitor... On call 24/7/365. * At the point I left it was ~4 professionally. * Saskatchewan, Canada They paid me ~$34.5k/yr. Way below what it needs to be for cost of living here - it's not uncommon to see a bachelor suite for $1200/m in the suburbs, and a one bedroom downtown will run you several thousand a month. You can move into a small trailer in a trailer park for a little over $100k. For reference, minimum wage is about 2/3 of what I was paid. Meanwhile, they billed me out at $120/hr+.
Your editor likely does it based on context, so ditching the word would just require a minor tweak to the coloring code.
ouch
No because POST data can still be forged. You could use a dynamically generated secret key, and store it in the session however.
~$58k/yr + bonus up to ~$8k + freelance * Full-time * BA in Poly-Sci, minor in Business, Masters in IS by Dec '12 * PHP, JS/jQuery, MySQL, CSS * 6 years PHP experience, 14 years website/programming experience (almost all self-taught) * Reno, NV
40k * employed at firm minimal freelancing * some college, no degree * PHP, MySQL, JS, jQuery, CSS, HTML, Photoshop (I do mostly 3/4 backend work with about 1/4 frontend) * 3 years firm based (1.5 at this firm) and 4 years freelance * US - Pacific Northwest 1/2 way between portland and seattle I know I could go out and make much more money than I do at my current firm but I love the company I work for and there are a lot of perks that don't translate to $$$ including a VERY flexible schedule, getting a say in what clients we take on, and working for a company where the owners allow the developers to pretty much run everything as long as we don't run the company into the ground
Of course you can. Check that they are logged in via a cookie and make sure they have access to perform that action. edit: I just read what you wrote again and it makes more sense now. ir8prim8's suggestion to use a hashed key in a form makes the most sense.
&gt; freelance ... recruiters How does that work if you don't mind me asking?
My thoughts exactly.
Because I'm a good programmer?
That could be true for larger organizations, I've never worked for one.
A lot of the people reporting higher annual figures are freelancers. Someone who knows their shit, and has a good network and a good track record, can name their own price.
Freelancers pay double (if not more) tax rate than the rest of us. They're also on the hook for their own health care, retirement, and other things. Also, not sure if that's counting expenses like equipment and utilities used while working at home all day. So, that's why those numbers look high. If I factored in my work's contribution to my health care, retirement, and equipment, I'd be making six digits, too. I tried freelancing for a while. It was way too stressful. 
Where do you live? I know for a fact Phoenix has tons of well paying php jobs available.
What made you switch from PHP to Ruby?
I'm using the code sniffer in Sublime Text but haven't dared to use the auto fixer yet.
£24k ($38) Another UK developer (Struggling, but a job is a job at the moment!) * Employed full-time (40hrs/pw) * No formal education / self taught * PHP, Kohana MVC, Wordpress, Javascript, jQuery, Objective-C (iPhone development), Managing LAMP environments * (6 Years commercial / 9 Years informal) experience * Manchester / UK
About $65k. * Employed * Some college, no degree as yet (though I work on it in my spare time) * Pretty much full stack. * 1.5 years professional, plus 15 self-taught as a hobby * NW Alberta, Canada
About $85k * Employed, but I freelance in addition for $75 - $150/hour depending on the work. I generally charge lower rates for good people or template cut-ups, and higher values for proper headphones-on-and-code work. * No formal education for programming. Did a digital media course that focussed on UX and design, but I was learning QBASIC at age 6... so problem solving is innate at this point. * PHP primarily, but also: JS/HTML/CSS, server setup (Linux and Windows), system planning/design, database design, etc End-to-end web, basically. Also, depending on staffing, I do the iOS projects. Like I say to people I hire: "I do about 20 things, but all pretty averagely. I need you because you're a specialist." * 7 years commercial experience this year. Noone ever likes to hear about how much I did at uni (while at uni), even if it's "write a small CMS in PHP to manage our annual audio festival" * Sydney, Australia The market right now is paying upwards of $100k-150k for properly senior devs, but these are mostly financial institutions. I'm sticking with lower pay to stay in a really cool environment at an advertising agency where I can actually play with things like Node.js and ZF2 in a production environment.
This is also not possible, as this is automation that can happen on many machines which can and will be reimaged regularly. I have, however, found out recently that the first hop machine has expect on it. I plan to try to use that to get to the 2nd hop!
Like I said I was lucky and met the right people. I had done some free lance work for a guy with a ton of link farms before search engines frowned upon this. He wanted to expand told me to apply for a passport. I went to the post office filled out the paper and supplied a passport photo of myself he had some connections and 2 days a later my passport had been delivered to me. A few days after that I had a first class ticket to Hong Kong. We hopped around a few countries for a few weeks looking for a place to setup an office. He was a very picky person. Shortly after that I was in Asia working/traveling/enjoying myself at least 2 weeks out of the month sometimes I stayed for a month or longer at a time. I also spent some time in Europe dealing with hosting companies, Canada and more recently a lot of time in South America. All of those contacts from people I met traveling/working in Asia, at the time a lot of people were setting up in Asia since it was cheap and a lot of fun.
I never said I had 6.5 years of working experience, I've been programming with PHP for 6.5 years with 3.5 years actual working experience. I'm barely tooting my own horn... I started working as an intern as a junior web developer when I was 16, was hired shortly after, went to college at 18, found another internship as a web developer in the city, was hired then and moved my way up to that company's CTO, and only recently have I been employed at a new company as one of their PHP/web developers. Apparently I can't be 13 and learn how to use a programming language. Whatever.
For some reason I have you RES tagged as "Don't listen to me".
Out of curiosity, how's the job market for webdev in Utah? Been considering moving out that way for some time now. I'm assuming you're in the SLC/Provo area?
We can't find competent PHP developers in Baltimore for almost double that...
- 65k plus full benefits in San Diego, CA. - Full time senior developer for a small company (less than 10 employees). - Mostly self-taught. Some college, trained for CS degree but never completed, found the classes very boring - PHP, JavaScript, HTML &amp; CSS, MySQL DBA, some sysadmin. I basically do everything but graphical design, tho I do design the admin interfaces. - Developing for the web for 16 years, almost 10 of which were with PHP
ctrl+spacebar
Unintentionally isn't the problem.
Suburbs.
Gotcha. Could not figure out what he'd done to lose my trust!
Spot-on. I think /r/php suffers from the exact problem that the author is talking about: The first [and sometimes most upvoted] comment is almost always "dude, just use a framework". This is extremely harmful to people who aren't PHP veterans and don't fully understand what/how PHP really works; much less how a complex framework operates. 
50K, but it's not my only job, as I am also a food writer/local food infrastructural coordinator, which adds on a variable amount of money * employed fulltime, was in academia until earlier this year (NYC), now in a small IT company (Chicago) * BS in Agricultural Economics * Some PHP (mainly as part of Drupal), some ruby, some sysadmin, some security, a lot of front-end stuff (CSS/Jquery/etc.), being tracked into project management * 3 years experience, but for almost all of it I have had food-related side jobs * Chicago, IL I feel like I could make more and also become more skilled if I didn't do other stuff on the side, but programming wasn't my original career goal and I like that I have the option to work on my main passion (food) and make a good living. * Oh, I guess it's relevant how I got into this. I was an Americorps volunteer and they didn't have a real IT person, just a bunch of unreliable volunteers. I hated my original duty, which was grant-writing, and was thrilled that they were perfectly happy to let me take over IT instead. I had a little bit of an IT background, as a "network technician" in undergrad, but I just taught myself stuff as I worked on it. Their website was in PHP. And I'm just into tinkering with computers. I went to a lot of tech meetups and met some interesting people. I got freelance work and was eventually offered a full-time position as a junior developer. 
Wow I'm in PA also (Near State College). Good to hear you can make decent money here... Been coding in C++ on and off since I was 13, but never held an actual programming job. Freelancing + a full time management job now and I'm no where near what you're making. Time to start looking ;) 
Queensland, Australia. 75k full time or $70 an hour contract. 7 years professional experience. Done a lot of framework development and API integrations
&gt; Freelancers pay double (if not more) tax rate than the rest of us. Which country is this? In the USA they pay about 5% more tax, but on the other hand they get to write off all sorts of expenses (including health care), and sock away huge amounts of money in an SE401K, pre-self-employment tax. Here in the Netherlands freelancers pay considerably less tax than employees. My direct costs are trivial. A computer every 3 or 4 years, broadband which I'd have anyway, a desk and a chair. Remember, we are talking about programmers, not plastic surgeons. Even at the same income I'd be about as well off as a freelancer. Given that the pay rates are typically about twice as much, it's a slam dunk. The downsides are the lack of stability during the period you're establishing your client base, and the lack of support staff for ordering office supplies, chasing down late payers, etc. But in the wallet? No way.
I'm in this general area too. (Reading, PA) You say, you've been coding C++. Do you code PHP? Do you have experience with WordPress (setting it up, custom plugins, etc)?
&gt; But this means you are usually performing all of the model's work in the process space and treating the actual model like a Database Abstraction Layer. This is only a problem with old-style DBAL/ORMs that force the "relational model" layer to be pretty strongly tied to the "object model", e.g. Doctrine 1.2 i.e.: http://doctrine.readthedocs.org/en/latest/_images/relational-bounds.jpg Modern ORMs make very, very few requirements on the model layer, and are very loosely coupled with it: there's absolutely no need to perform complicated database access anywhere near your model.
Approximately $150k per year and steadily increasing. Just over 4 years of PHP experience. But I'm a self-employed entrepreneur and most of what was written was between years 1 and 2.
Chicago. 110k. 
&gt; Even just looking at the ones that are - code on github, etc - doesn't mean they'll take your patches back Yeah, but that's significantly ameliorated but being able to easily fork and maintain a rebased branch with your patches.
I've only taken four CS classes, so yeah, mostly self taught and learned on the job. I do appreciate and use the CS theory knowledge I have, though.
90k employed no formal education JS/CSS/HTML5/PhoneGap 8 years experience Work Remotely
What you're asking about, if you don't know, is known as a **CSRF** attack. CSRF standing for **C**ross **S**ite **R**equest **F**orgery. As other's have mentioned, there are two main things you should be doing to protect your users against these types of attacks. The first, is of course to use POST. HTTP has several verbs, with GET and POST being the two most common. GET is for fetching data, POST is for the manipulation of data (to put things simply - REST lovers don't get upset at me for simplifying.) Secondly, you should generate a hash that is attached to the user via their session. This is generally called a "CSRF token." It should be relatively unique, and should expire after x amount of uses (called "hops"), where x is a very small number (best security uses 1). Additionally, this is thankfully *very* easy to do in Zend, so long as you're using Zend_Form models. `$this-&gt;addElement('hash','csrf',array('ignore'=&gt;true,'salt' =&gt; "delete-user-{$userID}"));` The salt will allow for different CSRF tokens within the same form, and the forms will automatically be namespaced. Security is of uber-importance in the developing web - and remember, ***NEVER TRUST THE USER***!
&gt;NEVER DELETE DATA OR MAKE SERIOUS DATA CHANGES VIA GET!!! There are a lot of web accelerators and search toolbars that will pre-fetch GET URLs for you. I'd just like to say this is a really underrated problem. Most people here don't run sites that achieve serious traffic and likely won't see the issue - but it is an issue that can escalate in to a serious problem.
I'm in the midwest, self-taught, self-employed (didn't start learning to program until I was in my early 30's... before that I was a photojournalist), and I make in the higher portion of your midwest range. tl;dr: accurate
&gt;Toss a resume my way when you're serious about moving, eh? This makes me smile.
$30k-$40k Self taught. I build full websites with PHP, MYSQL, javascript, etc. Full-time freelancer for the past 2 years, but I've been programming off-line and on-line for the past 12 years. I have experience in C, C++, VB, and Perl too, but very little professionally. I'm in York Pa, USA. While my only job is my freelance business, I try to keep my workweek under 30 hours. 
I think you could mockup your structure in html table with dreamweaver or such as first, then just go dynamic with it filling the SQL data and then make a proxyfying button to download "print.php?data"
edlin1 nailed it on the head. Stick with it, make mistakes, and don't let the fact that you really don't know anything get you down. I'm a firm believer in "It doesn't matter if you think you can or you can't, either way you're right". Don't be afraid to ask n00b questions. "Ask a question and look like a fool for a few minutes, don't ask and remain a fool forever." Best of luck!
I recommend (in order): * Read (or skim) [PHP: The Right Way](http://www.phptherightway.com/). Even if you do not understand it all, it will help you later. * Find a tutorial to create something simple (guestbook or blog perhaps). But make sure you will have to do a little database work too. * Use PHP's wonderful [php.net/docs.php](documentation) site for inspiration of what you can do next. * Read "PHP: The Right Way" again, it will make more sense now. But in my experience, learning a language happens fastest when you have something you really want to create yourself - then just get going and don't be afraid to break it on the way there. If you use something like Git to commit on every change, you can easily revert back to your last working version.
I have one that runs a perpetual motion machine. The code works fine, it's just the random black holes that I have a problem with. So after awhile of being sucked into random universes I gave up.
47-50K GBP Per Annum Mix of employed contractor and freelance. Computer science related degree Mix of PHP, HTML, CSS, Javascript, MySQL 4 Years experience UK
You use a form which triggers a POST request, yes, but that's only part of the story. You see, a third-party website can trigger all sorts of request to yours, including post request. For instance, this could be done by triggering the submit action of a form with JavaScript, or the user clicking something which he/she thinks does something else. What a third-party website *cannot* do is read the contents of another website due to the same origin policy. We can therefore use this and implement a hidden input field containing a generated token which we then match against on the next POST request. To implement this in general PHP, it would look something like this: if (isset($_POST['csrf']) &amp;&amp; $_POST['csrf'] == $_SESSION['csrf']) { //valid request, proceed in processing it } $_SESSION['csrf'] = $csrf = generateCsrf(); Then you print out the $csrf variable in a hidden input field called "csrf". Zend Framework handles this automatically for you through the use of their 'hash' element. You simply add it to your Zend_Form as follows, then you check if the request was valid as normal: $form-&gt;addElement('hash', 'csrf');
sounds like a fifth world problem
Move to London...lots of jobs here.
27k EUR 1) Employed 2) None, dropped my IT studies 3) Mostly pure PHP, some CSS+HTML work 4) 2 5) Malta
£45K * Full time - at a digital agency * BSc Information Systems * PHP, MySQL, Basic Sys Admin, small amount of JS, I've done some Objective C (1 iPhone App) * around 7 years * London I've been thinking about going into contracting - seems like you can easily make around £350 to £400 per day. 
Please DO get a good book. Design patterns are pretty damn important and don't let some nobody on a random forum tell you how and why and what. The internet is full of tutorials but also full of crap. Start with a book, get into design patterns and create your own standard to work from.
This is true. Took me 6 months to hire our last PHO Engineer. 
This. I learned the hard way :( In my noobish PHP years, I made a shopping cart for a client... and then one day, half of their inventory was gone. My stupid mistake, deleting data on GET request. It was some Alexa Toolbar or something like that which fetched the deletion URLs from administration interface. Also, thank God for backups.
Wait until your kids have to go to university, or you need health care while chronically ill and working part-time, those taxes will seem like a bargain compared to the US.
Plenty of jobs in MKE for 60k+! Check Waukesha area. 
* 60K * employed fulltime * self-taught * php js sql coldfusion photoshop * 4 yrs * Denver
Will do! Thanks for the offer and information!
I gotta learn some Ruby soon. I focused on mastering Python but I never, ever see a Python job posted around here (some jobs mention Python as a plus but that's it). I've seem some good RoR jobs around me lately that pay well enough to be willing to switch. Would you say learning RoR is as important as just doing Ruby with some other framework such as Sinatra? Or is it better to learn/master RoR itself?
My CS degree got me a wife and 80k of debt. I'd be resistant to not go if I had another chance, as I love learning and loved college, but yeah, it hasn't really helped me much other than meeting the best woman I've ever had the pleasure to date (and marry). 
It is recommended to at least dive into *Ruby* itself a bit before confabulating yourself with a framework. It's useful to know exactly where Ruby ends and the Framework begins. That said, you don't need to spend a *lot* of time doing that, just enough to know the lay of the land. After that, I'd definitely get into doing some small Rails projects, since Rails really is the elephant in the room. Once you're at least basically familiar with rails, you can begin looking at some of the Rails alternatives to round out your skillset. This is not critical, but definitely "nice to have". With the scarcity of RoR talent on the open market, many Rails shops are willing to hire folks who don't yet have RoR experience. If you can show that you have the ability to gain mastery of multiple languages, and preferably have some MVC framework background in *any* language, as well as familiarity with modern tools such as Git, and various backend technologies, that's usually enough to get your foot in the door. Then you can learn Ruby on *their* dime!
$40K - $60K (varies wildly depending on landing a couple large contracts or not) $50/hr - freelancer since 2006 - bachelor of arts, no certs - LAMP + frontend + sysadmin + DBA = (LAMP, end to end) - since 2000 with PHP. 92 - 97 netadmin, 98-now programmer - east coast usa 
55k * Employed * Self-Taught * PHP, jQuery, Memcache, Sphinx, Nginx, Apache, MySQL, general sys/db administration.. load balancing and system scaling for HA basically jack of all trades when it comes to LAMP-esque installations. Also know a handful of other languages, but I won't bore you on those) * 10 at least with PHP. * Brisbane, Australia Would be getting more, but no degree, no big $$$. Which makes me cry when I see Uni grads come in and totally screw systems royally, then demand respect and a higher pay grade..... aaaah I won't start as I'm guessing most here are probably Uni grads, and I don't want to make enemies.... *haaaai*
You can't let a user do anything like that without checking that they are logged in, and you should not reference the database ID, when it comes to user profiles I use a hash, which lets me have url's like /user/a2hB94/ etc
$81K a year to be exempt from overtime? Where'd you get that?
It's the United States. We only get paid in USD. Only Americans I know that get paid in anything not USD is when they work for a company over the internet based elsewhere.
Hi me.
80 killion Rupees per half hour. He said he lives in PA - it should be obvious to anyone that he means 80,000 USD per year.
I live in PA and work in DE. I do a lot more than just PHP, but when I was initially hired 5 years ago, all I did was LAMP, and I made 75k. I make significantly more than that now, but I mostly do native iOS and Android stuff. If you know native mobile development and are provably good at it, you can basically name your own salary because the demand is so high.
110k * Employed * BS in Business * PHP/Python/Java, build manager, systems architect * Professionally, 5. Been programming since I was in high school * Midwest USA
Similar situation here. Working for $90/hour on 40 hour weeks in Adelaide. Seriously I'm looking through these figures on reddit and realised 2 things: 1) Americans get shit pay 2) Maybe the people in America making good pay don't spend their entire time on reddit?
Yes, and? I was describing the idea and function of the protection. Just because he's working in CodeIgniter doesn't mean he shouldn't know how to do it in general PHP. Understanding the problem and how to solve it is more useful than simply switching a flag in a configuration file. That way he'd be able to transfer those skills outside of CodeIgniter. Furthermore, there are other readers around here which might stumble upon this post and describing the process might benefit them as well. As for Zend Framework, OP said the following: &gt; Bonus round: Simplest ways to solve this in a.) CodeIgniter **and b.) Zend**
Yea, this is huge. Pretty much consider yourself local only without a Bachelors. Developed Asia is pretty much a no go, as well as it being really hard in Australia/New Zealand (Not an absolute deal breaker in the last two though). 
And also "Not enough" is completely shit, it doesn't tell us anthing.
&gt; So the correct way of going about this is creating a button that is part of a form that submits a POST request to /user/delete with the parameters id=1? This will solve for the first point of preventing accidental deletions, but you also need to include CSRF protection on your form if you want to address your main point. POST request to /user/delete id=23 csrf=wo8h9238hfewjnw (my hashed value)
Actually it's not obvious. As a European I've never heard of PA. No reason to be condescending.
70k * Full-time * Self-taught (no college degree) * Full stack. PHP (Kohana), MySQL, JavaScript, jQuery, HTML5/CSS3, Sysadmin, and much much more. * 7 years * Snohomish County, WA (north of Seattle) working remotely for a company based in Salt Lake City, Utah
Yep, working less than 30 hrs really gives you a chance to live life. I take less pay and only have to work a half week.
Why would you want to do that? That just sounds like a terrible idea all around. &amp;#3232;\_&amp;#3232;
Sure thing, I started with HTML and table based layouts, then moved on to CSS. I began by contributing to the open source community (openwebdesign.org, oswd.org) to get my name out there, and the sites provided an awesome platform to learn from designers better than I through picking apart their code and messaging them directly with questions. That's how I got into front end dev, and how I learned how to design good interfaces. From there I taught myself JS, then PHP and MySQL. With those skills I freelanced for 5-6 years, constantly improving and (over time) increasing my minimum hourly from $30 to $80. My next phase was working at startups, where I charged less but made tons of industry connections and gained a lot of experience that freelancing doesn't get you. The best advice I can give you- - You can be a jack of all trades, but pick something very specific and become very very very good at it. Be an expert, and make a name for yourself. - Charge what *you* think your time is worth, not what the competition charges. People *want* to pay more for higher quality work. At 15 years old I charged minimum $70/hour, and had several extremely satisfied clients for it. - Find work that you honestly enjoy, and do it exceptionally well. If you like what you do, it will reflect directly in the speed and quality of your deliverables.
For me anyway, it was a situation where I had to get a job to get insurance ... now that things are settled I'm out on the prowl for a new place
The above snippets generate a new token upon every request, so no replay here.
It's not a terrible idea once you understand the use-case; at my old company (and a few others that' I've worked at), we have central development servers - all developers SFTP into a dev machine, which has the web server running on it. Since everyone is working on discrete parts, it makes it easy. It's done this way because of the amount of data that's stored, the number of other products that are accessed that it's unfeasible to install the entire suite on a developers machines. At my current company, stuff is intertwined, and I use multiple virtual machines and we've set it up so that things are done that way. I work this way personally on my projects, I have a server up on Slicehost that I have setup for vhosts etc for stuff I'm working on - maybe about 15 different "sites" and projects; and since I use multiple machines, SFTP'ing into one development server makes it easy to not have to sync multiple copies across multiple places, that might include databases and other files.
It doesn't belong on a login form in the lessons. That'd be sending the complete wrong message to the people trying to learn this stuff. 
As the only bisexual PHP expert, I find this to be beneath my expert PHP knowledge.
I agree with what you've said and have thought this way myself for a while. From my view there's a definite benefit to using a solid library like Zend and pulling in other classes that you need, then just writing a small front end controller, router, MVC layers, database abstraction etc yourself and coding your website with those. The advantage is you know exactly how it works and can rework it if it's not working the way you want. I've used a few PHP frameworks as frameworks for various websites and it really just makes life more difficult. It really is like using a black box and having no idea how the thing actually hangs together. If I was to read the source code I'd be going round in circles completely lost as it's usually poorly commented, there's thousands of files to sift through or there's no in depth architectural diagrams to explain the design of the thing. The only people that really understand how the framework operates are the people that wrote it. Everyone else is using a magic black box. A library on the other hand works great as a black box, send it some data, get some expected data back out. It just works, I don't need to know the intricate details of how it works internally. I use a library for certain functions and write my own mini framework (ie the front end controller, router, MVC layers, database abstraction etc) for the website then I know exactly how the majority of it hangs together and can fix it if something goes wrong. Also my documentation serves a lot better for me as I'll make some nice diagrams for the application architecture. If I had to get a few more people on board to help me code, I'm pretty sure understanding the 5-10 key 'framework' classes I've made along with the diagrams and documentation is not be much of a learning curve. Then as the website grows and if the application architecture needs to adjust then we're able to readjust the framework code to do it. There's a 1:1 design and maintenance relationship with my code and the framework. Now try doing that with an open source PHP framework. These framework people love making backwards compatibility breaks which break every website using the framework. E.g. try going from Symfony 1.4 - Symfony 2. It's not going to happen without significant overhaul of your entire project. All those websites out there are now going to be 'unsupported' with dated code and they'll have to spend significant time and money to rewrite it. The question I have to ask myself is, do I want my project to be subjected to the whims of random framework developers on the other side of the world and have to rework my code every month or year because they changed things. The answer is a solid "hell no". Most of the time if I'm supporting my website, over the years I can make the architecture changes myself or upgrade it for major versions of PHP that come along. I don't trust handing off the most critical part of my website and leaving it in the hands of random framework developers who have no interest in the future maintainability of my website. Ideally developers especially in r/PHP should learn to write their own framework, ideally in an MVC architecture as well. I'd rather see more tutorials about the best way to write parts of your own framework, the decisions about why your should do it this way and give examples. Then people can start writing their own code in the project. Sure you can use some generic components like the Symfony ones. However I doubt you'll be understanding exactly how they work or be able to maintain them. That's why it's often better to learn how to build them yourself and you can customise these classes and match them for the functionality your website needs. Using an open source one that caters for every different use case isn't very efficient if you don't need half that functionality. I wonder, what do the big name companies use for their website? I would bet Facebook isn't run on a big, bloated open source PHP framework, It will be all custom written. That way they know exactly what's going on, they can optimise every part of it and maintain the core of it as it grows as well. My theory is, if you're making a brochure website or slightly more difficult and you're under client time pressure then maybe a framework makes sense. If it's a big custom "software as a service" type website that may potentially have millions of users one day then you really need to understand your architecture so I wouldn't be using an open source framework.
instead of 'var' you now are required to use visibility modifiers, so you've swapped one token for another in that instance. I agree, 'function' should ideally be removed. Explaining to people that we refer to it as a 'method' when we use the keyword 'function' is... annoying.
To be honest 24k is a good salary and it will only go up from this point unless you make bad decisions, if you have a job where you are happy then that's worth a small fortune in itself so keep at it, stay current and a good salary will follow.
Yeah I pulled $100,000 routinely at Dallas jobs. Houston it's a lot harder, but doable.
1a. A good example is when you put your session in memcached, which can be spread out across many servers. If one of these is compromised, then at least the session is encrypted.
&gt;I also have an OCD about making sure every function/method has a properly annotated docblock regardless of visibility. Chances, are, you don't have OCD
Better alternative is HeidiSQL
You didn't answer what kind of data that was. Was it pure white clean data? Or dirty black data? I figure you might be a bit biased towards black data. THANKS!!!!
I use CodeIgniter a lot, probably doesn't qualify for micro but with the selective library loading it is pretty lean. For smaller projects you can just use the URI routing and Database helpers and get a nice development boost! The documentation is also great.
Very nice!
Depends, generating a cache can sometimes be slow. If you launch a website or clear the cache with a lot of visitors the it's going to take a while to warm all the caches. Some people like to write a tool to pre-cache the items after it's cleared just so there isn't that bottle neck when visitors hit the website.
&gt; Apparently a framework can result in some sort of architectural flaw in your code that can cost you heaps of $$$, or apparently it makes a project less-maintainable? These are vacuous assertions, and you need empirical evidence to back them up if you ever want to put forward a concrete point that I'll listen to. While I don't necessarily disagree with your overall point about the article, this particular point of your is glossing over a lot of things. A framework tends to make a lot of simplifying assumptions about how you want to do things. Assumptions can be your best friend or bite you in the ass. Sometimes these assumptions are not optimal for what you're doing. On a related note, this is why (imo) the best libraries are the ones that let you throw away the abstractions and work 1 layer below (abstraction wise). A good example would be an ORM that allows you to hand it raw SQL and map it to a model. Sometimes it's the simplest way to solve the problem (even though it has it's own set of pros/cons), and if you instead try to solve the problem using the set of assumptions and abstractions built into the ORM, the problem becomes a lot more complicated. And complexity is rarely the friend of maintainability. &gt; But while weak developers might be writing stuff that's completely unmaintainable (hopefully we've all visited thedailywtf.com), at least a weak developer that has shown he knows a framework is writing stuff that can be maintained by others. His damage will be somewhat partitioned and limited by good structural code surrounding his work I __really__ don't like the 'weak developer' argument. I think it implies an ego-centric view point on your part. That 'weak developer' may be more aesthetically inclined than the guy who could write a reddit clone in the course of a few days, but if you put them together and let them play to their strengths, that reddit clone will be superior to anything they could do separately. Or that 'weak developer' may have a flair for extracting what the user __truly__ wants, rather than what he says he wants. Both of these are invaluable skill sets that could bring a lot to a project, but said person would be dismissed because they're 'a weak developer'. Get rid of that argument, it has no place here. We build software, and that requires skill sets beyond simply being a developer. 
&gt;Counterpoint: Wordpress. &gt;It's a great theory. But in practice, just because it's open source it doesn't make it good. Out of the popular PHP frameworks, almost every one exhibits critical architectural and structural flaws. Sure, it's good enough for most uses, but saying that the code is smarter is a rather bold statement... You're ignoring a lot of things when you say that. Wordpress was designed to be blogging software and has started shifting over to be a more general CMS. This is bound to cause issues, but it works well enough. This would be the case whether Wordpress was a framework or a custom grown solution, and it's unfair to lambast Wordpress for that. I agree with ivosaurus in this case. Software requires specialization, frameworks bring a lot of specialization together. By using a framework, you have an opportunity to benefit from the judgements of a web security expert, for example. It's not perfect, and it doesn't mean you can safely ignore web security as a whole, but along with that framework comes community knowledge. It's fine if you prefer not using a framework, there are certainly pros and cons to both approaches, but this point is clearly a __pro__. 
"Model" in MVC doesn't have anything to do with databases. The misinformation on the website and bad taste in the API would drive me away from it. Sorry.
Looking over the examples, I don't like this framework. I don't want to have to edit a buried config file just to change my default controller. I would rather have to explicitly define each route and the appropriate controller. If you're asking about TinyMVC because you're looking for a lightweight framework, may I suggest [FatFree](http://bcosca.github.com/fatfree/)? It isn't a strict framework, so you can deviate from the default setup without an issue. I use it for any project that doesn't already have a defined framework. EDIT: typo
I had to replace old config file in pear directory in order to fix it
That could work. I was thinking of just populating/creating HTML tables dynamically using a FOR loop. Put the SQL query into an array and loop through the array to output the table code and data values. At then end of the loop you just echo the closing tag for the table. Should work, no?
"Model" can refer to one of two different things: * [Domain model](http://en.wikipedia.org/wiki/Domain_model) - something that describes the data and operations you can perform on it. * [Data model](http://en.wikipedia.org/wiki/Conceptual_schema) - something that describes how the data is organised. Either way, there's still going to exist some kind of [data access layer](http://en.wikipedia.org/wiki/Data_access_layer) which has to deal with storage, and how that works is dictated largely by taste and culture.
Actually anything that gets the job done for you should work. These ones that I mentioned are ones I use myself and they render stuff 1:1 to pdf, so thats why I sometimes use print.css's and proxys for print"views". Experiment, your solution sounds just fine. Just remember don't try to reinvent the wheel, such as these html-to-pdf renders I myself almost stumbled to DOM-to-PDF building, that would have cost'd me so much time.
Can we get a live running version or some examples or something? I'm not even sure what this does having read the description.
I added a few examples to README. With default settings the passphrase could be for example like: **Alter Berlin Paint meaning**
This is really cool. I'm going to read through the code and might actually use it on a site tomorrow. I'll let you know if I do. :) Thanks!
Nice, thanks!
&gt; A good example would be an ORM that allows you to hand it raw SQL and map it to a model. Which could then create a whole lot of problems, if say you want to migrate from one db to another. I dunno, maybe MS paid you to move to MSSQLS, and now instead of easily flipping a driver in your ORM layer (which is one of the reasons you had the abstraction in the first place), you're faced with checking through all your custom SQL mappings. There aren't many arguments for abstraction layers which let their implementation details shine through; in fact you'll find most CS academics specifically tell you never to do that. It creates hidden contracts (of code saying that it's using an abstraction, while relying on implementation details so the abstraction can't be changed) which can come back to bite you. So I think that's a non-argument at best. &gt; I really don't like the 'weak developer' argument. I'm just talking within the context and generalizations that ircmaxwell initially used. If you don't like that context, take it up with him, not me. However, while of course generalizations are never good descriptors when you look at an individual, as you point out, I think they're still valid to use for the sake of argument here.
IDE's are great, but if an improvement can be made (we agree that this hypothetical change would be an improvement I'm sure?) then what is wrong with that? There was no complaint, just a valid note that this would be better. Here here!
Your sexuality has nothing to do with this article.
Sure, I'll absolutely let you know. (Obv, gotta test it some and dig into the code, but the example looks nice!)
Session wise, it should be up to the developer that's implementing your class. It could be useful for the developer to pull that information from data storage, look at the IP address the request is coming from, or the languages the browser accepts. I'd just remove the session idea completely since you can set the degree type when you instantiate the class.
Probably your server setup. Check the appropriate settings in your php.ini and test if you can send email via the cmd line on your server. If that works write a one line script with just the mail function call and test running that script via cmd line.
Just for clarification, keep all the data in variables inside your Google_Weather object. As Plornt wrote your API should only do what it says on the tin, that is contacting Google servers and returning a parsed reply - anything else would be unwanted behaviour and this includes writing to any global variable and otherwise manipulating things outside your class (for example, don't perform ini_set() inside your library)
thanks it was the way the way the server was setup
Having a default location doesnt really make sense. I would probably change make `getWeather()` require a location. ---- `setIcons()` doesnt make much sense either. Supplying the images makes sense, but adding that to the API doesnt. the develoepr could easily use the `condition` array item to retrieve the icon. ---- `displayError()` shouldn't be in there either. API wrappers shouldn't handle view logic. You shoudl let the user handle that.
Use wamp or something like that? Sending e-mails from localhost wont work unless you set up smtp and yada yada.. I've found that this tool is pretty good for testing mail from localhost: http://sourceforge.net/projects/phpmailtools/
I would suggest using namespaces. Something like: namespace Geczy\Weather; class GoogleWeatherAPI { ... } instead of class Google_Weather { ... } Also please have a look at [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md)/auto loading. Your class should go to eg. /&lt;somelibdirectory&gt;/Geczy/Weather/GoogleWeatherAPI.php or /&lt;somelibdirectory&gt;/Google/Weather.php if you stick with the &lt; PHP 5.3 "namespacing".
[Success](http://d.pr/i/x3eu)!
It looks like your question was already answered, but I'd really highly recommend *not* using this code on a production server. This would be easy for any spammer to exploit to send messages through your code to anyone they want. :/
Ok, never mind, I can see you're more interested in being correct than having a discussion. Good luck with that, I suspect the ability to see only what you want to see will put you ahead of the pack.
Forget about "classes" folder
roger that, good on ya.
Usually Google but then I look for StackOverflow links in the results.
I do get a lot of answers on stackoverflow, but not every answer is there...
This is my primary concern. It's no problem if you use it (as long as it's legal), I just wouldn't depend on it long term for production use on a live website for a client. 
I've used it in a production site before and had no problems with Google making changes to it. However, it's still a concern. Also, I've found it to be too unreliable- the service often appears to drop out, and sometimes there can be long periods where the data doesn't update. It's better to get data direct from your country's Bureau of Meteorology if possible.
Thanks for pointing about the symblog tutorial, more resources for learning! Here's the link for anyone interested (hope this is the one that you meant): http://tutorial.symblog.co.uk/
I personally haven't found anything more reliable than bom.gov.au, which is free, and which is pretty much where all the weather sites get their Australian data from anyway. I'm not sure about the US and other countries though.
I believe in .NET, it's a complier gimmick or something. When you're using User.FirstName or User.LastName, you're actually accessing it via a getter or setter method and not really accessing it directly.
Exactly, like this apis http://googlecode.blogspot.mx/2011/05/spring-cleaning-for-some-of-our-apis.html
how old are you now ?
Oh well, You have a good year or 2 to switch to a different data source. It's not too hard to adapt if the new sauce also uses xml.
No, they just need to go to Stack Overflow
Most of us are pretty capable of searching for specific solutions, and more than often, I find myself just searching for the better solution nowadays. If I can't find a better/solution I'll often venture to #/r/webdev on freenode.
They welcome beginners quite well. They don't welcome people who don't use search and google. 
I wish I didn't feel as much of an arse for telling people to just damn well google simple questions, but really, if someone isn't going to try and help themselves then there's not a great deal of hope.
Basics might not be exactly the right word as it doesn't teach you about if statements and other day-one concepts, but there are a bunch of tutorials and this shows you how to install, build an environment, use stuff like DateTime, etc. It has a fair amount of beginner content and will have more and more as time goes on. For example: http://www.phptherightway.com/#date_and_time That is something a beginner can use, instead of messing around with the date functions like most people already do.
Congratulations. You managed to completely ignore point as soon as you saw "wordpress" mentioned. Maybe you should read the whole conversation, so that you grasp the context.
What company do you currently work for? Sorry for being nosy, but I am in the Dallas area and am always curious which type of companies pay well for PHP positions. I'm at $60k, but obviously have probably been undervaluing my skills.
104k * fulltime * Working on masters in Computer Engineering * Custom mvc using php and also bits and pieces from ZF / javascript / ms sql / all running on windows * Started in php 12 years ago running my own company, am a partner of 2 successful startups too. * Location: Detroit Metro Area in MI Also do freelance but haven't done any of that in almost a year.
Will these talks be made available online afterwards? As a student in Australia there's no chance I'll be able to make it there in person and am very keen to listen to some of those talks. Edit: just saw at the bottom of the page that they will be made available online. Can't wait!
Ironically, we deal with some weather data at work. Wunderground was just purchased by The Weather Channel [source](http://www.wunderground.com/blog/JeffMasters/comment.html?entrynum=2143). Then late last year The Weather Channel killed off their free API services [source](http://twcweather.com/twc40/wmws/TWC/1318544970034_971/w26988.php?custcode=TWC&amp;bid=66962991&amp;pbid_=66962991). Niether company has said if Weather Channel is going to leave Wunderground's data feeds intact. I realize it's ultimately the responsibility of the developer implementing the class to mitigate any risk of using a third party service. Nor, can anyone see the future. But it's always nice to know that type of information.
25 - C++ use has been on and off since I was 13. Had classes in High School, then went to school for Simulation Programming, but have yet to go back and finish (financial issues took me out of school, now I'm in a cluster with loans... Someday I'll finish!) If you lumped my 'experience' together, I'd say I probably have about 5-6 years of solid use. Sorry to write you a book, but I figured it'd sound weird having someone with '12 years' of C++ experience not having a programming job. 
I find stackoverflow or any number of irc channels are best. If you're having trouble getting answers in irc though, just claim that "php sucks because x isn't possible". Someone will respond with how it's done.
I will always argue for [Symfony 2](http://www.symfony.com). It is not the fastest, but it is probably one of the most feature-rich. This, on top on being very well designed, using the latest features that PHP 5.3 offers, makes it a great choice for seeing "how it should be done". The documentation is arguably not the best, but since you've already got a foothold in OO design, it shouldn't be more than a somewhat mild learning curve.
I'll provide an argument against Symfony 2: It is actually a pain to get working out of the box. Following the instructions on their site to get it setup does not work on many systems without having to fix a few things. Documentation is poor and the internet is littered with lots of posts and content referencing problems and issues people had with Symfony (1) so when searching for help with Symfony 2, you will have difficulty weeding out what is current and what is not. While Symfony 2 is definitely feature rich, it is written by a company that works on the framework, not a computer who actually uses it for real world projects. This means somethings were written for the sake of the framework and not real-world use. As an experience senior level developer (14 years), I've found Symfony to be more of a hinderance than a help. I'd go so far as to call it bloated rather than feature-rich. A good framework is one that lets you just write your code with as little extra framework-related work as possible. I found with Symfony, I was doing more with the framework than my actual application to get things working. The command line tools are nice to have, but Symfony's CLTs are quite clunky and don't always work properly. If you truly want to learn the MVC design pattern, I'd recommend doing some reading about design patterns and then go with something like Silex or Limonade. Ultimately, it doesn't matter which framework you choose. Its going to take a while to get used to it and learn the ins and outs. Symfony is going to take longer than the rest if only because its so much bigger and there is more to learn. If you go with Kohana, FuelPHP, or even Symfony 2, I urge you to embrace the crap out of it and learn as much as you can. Once you get started, be committed and don't quit when you run into problems. Fixing problems is one of the best ways to learn. Decide whether or not you like your framework only after you've mastered it.
forums.devshed.com One of the best dev forums IMO. The founder of Java would hang out in the Java section.
The poor sods building distributable applications are the unlucky ones requiring PHP 5.2, and therefore require a PHP 5.2 framework. Another few months and the numbers will be good enough for me (and many in the same position) to upgrade to PHP 5.3 while in development I am using PHP 5.4 and really wishing I could upgrade to PHP 5.5-dev. Tempted, very tempted.
No need for framework for this simple thing. Don't use GET Basically you use POST and then add sha1 uniqid in the form field as a csrf token then verify its token upon post 
Well, I was at Ciconf UK early this year, and they did tape everything and published it online. So my guess is that the same will happen on this one.
Yes we'll be recording them.
Keep it simple for your first one. I would recommend small frameworks so you can get accustom to another programmers way of doing things. I suggest something like Fat Free Framework, or TinyPHP. Do a small project with it and get the gist of it. Then move onto something more significant. This is the hardest part in my opinion, not just because of the learning curve, but because of the style differences between frameworks. Try multiple frameworks. One will fit with you more than the others. Use that one. Use the framework you are most comfortable with, which may not necessarily be the easiest one to learn. Mihaly Csikszentmihalyi's idea of flow is based on the idea that to grow you must be sufficiently challenged. Do not choose something too easy, do not choose something too hard. 
I'm using Laravel more lately, where I would have used CodeIgniter. Doesn't matter... the [program](http://ciconf.com/program) ought to be interesting and relevant for any php developer. And you really can't beat the price.
Having used both, I agree with you 100%.
I've actually been thinking about writing something like this for a long time now. I'll have to check it out.
I don't use a full blown IDE to program in PHP. I must say that it really helps when I want to search for a function and I can use "function function_name" as the search term to look in all the source code. The opposite situation I see in the C language.
Sounds to me your on your way in building an online time machine? 
Exactly right, the skills will be mainly transferable and we're all PHP developers anyway. We nearly had Taylor come along to give a talk ;)
riddit does not speak on behalf of CICONF. Or at all by the looks of it!
This is great for quick server side edits. On my mobile so don't have time to read through the docs - does it contain all the features of Scss? 
CodeIgniter is pretty cool
I could not possibly agree with you more. Switching to nginx from apache was one of the best decisions I've ever made in terms of my mental health.
You, sir, are awesome. I have been using an isolated ruby instance (on Windows!) to process my scss files. It will be very nice to dump that. Thank you!!
&gt; From what I've seen the leading contenders are FuelPHP and Kohana and where did you see this? &gt;but I really don't know how to judge one over another eh, the people here don't either. fyi, asking which is best will get you bullshit answers. 
And the most annoying thing about open source is that people use "Well, the great thing about open source is you can fix it yourself" as the go-to response when called on their utter half-assedness. Sorry, no. "It's Open Source"(tm) is not an excuse to be broken. It doesn't mean you don't have to make something that freaking *works as advertised*. What about that poor noob who isn't familiar enough with PHP to be mucking around in the bowels of someone else's broken code? If he can't fix it, what then? "Sucks to be you"?
Hey now Teresko, I'm not gay, put that cock back in your pants.
Another question, if I use the compile function directly, what directory does it use for imports when the paths in the scss are relative? Is there any way to set this directory? Basically is there any way to get the equivalent of: require "scssphp/scss.inc.php"; $scss = new scss(); echo $scss-&gt;compile('/css/styles.scss'); And all @imports would be relative to the same directory as styles.css. I would want to be able to manage the caching myself instead of having to use the provided scss_server class.
Thanks for this as well as the advance notice. I'll be watching 
I started directly with Symfony2 and their official [cookbook](http://symfony.com/doc/master/cookbook/index.html) really helped me much.
Cool, now integrate it so that users can log in via their facebook or twitter credentials and have it pull in their status updates from those as well.
Actually the first part isn't too bad, facebook makes using their authentication system fairly simple. [this](http://developers.facebook.com/docs/guides/web/) might get you started.
Sorry if this is a dumb question, but when you say "authentication system that stores some personal data and data about purchases" What am I authenticating? for password as a key, you mean (Using salt as an example) something like this? $code = $_POST['password']; $password = 'pass'; $password_array = str_split($password, 2); $hash = sha1($password_array[0] . $code . $password_array[1]);
Yeah more or less. But you have all your passwords and usernames stored in an SQL database, along with user specific data. Your users will need to log in with a userid of some sort and a password, and all the data about the user needs to be kept encrypted, especially personally identifiable stuff like email addresses, phone numbers, and what have you. Also, you should be able to encrypt any other potentially useful user data. I have personally been working on such a system. My goal is to discover the absolute minimum that you need to keep in plain text, basically you need the salt, some unique user identifier (like a user number or name that they log in with), and the user's public key.
I recommend this for any language. There's a site, projecteuler.net, that's got several hundred mathematical problems that you can solve in any way you want with any language. The only rule is the program must execute in less than a minute. This should help train you in the logic aspect as well as help you learn to write simple code. TIP: In bash shell, run using the 'time' command to watch your execution time
On the design end of things, that's a really slick page.
A really great way for me to learn PHP (in progress) is digging into the mechanics of WordPress. It's all PHP, and it's extremely well-documented.
I just wrote some documentation that explains how this works: http://leafo.net/scssphp/docs/#import_paths
...and will teach you really bad ways of doing things. Don't take your cues from wordpress - its design is horrible.
Take a look at r/dailyprogrammer too.
What, in particular?
Is it only *because* it is spaghetti code that it's horrible? So what's a good example of something *not* using spaghetti code, for comparison?
Thanks for the recommendation. This is really great for some mental logic flossing.
Do something small. Do it really fucking well.
Good! I've gotten through 14 and I'll give you some advice: write algorithms in functions that you can copy and paste, there are some recurring things like prime numbers.
Glad to help.
You can also specify public keys for SSH via command line. Go nuts: http://unixhelp.ed.ac.uk/CGI/man-cgi?ssh+1 public key = identity file
projectEuler is also really great for optimizations. I''ve had php timeout or run out of memory on me, which forced me to optimize my solutions to solve the problems whithin the confines of php (as opposed to switch to c#.net instead)...
Yeah, they're [open source](https://github.com/symfony/symfony) and you can learn even more by contributing than by doing everything by yourself. Why did you decide to make an own project in the first place?
My response was not to the OP but to someone commenting about pear not using php 5 and so on; who seemed to know what they were writing about. If you find something wrong in an open source project you don't need to know exactly how to fix it, a concise bug report to project would very helpful.
Just dropping in to tell you to not use SHA or MD5 for password hashing. Do a little bit of research (it has been a popular subject in this subreddit and /r/webdev lately) and implement another solution. Should be a one or two hour project for ya. :)
To be fair, that's a large restriction of writing pre 5.3 code in an environment where a lot of different programmers and functionalites will collide. Lack of namespaces means you_have_to_write_like_this();
Symblog is everything but complete. Actually we are waiting for the next part of the tutorial for about a year.. So yeah...
I don't really think that project euler is good for learning how to make stuff in php. It has a lot of math related stuff, which is good but has little impact on web development.
Make something that deals w/ image manipulation. Take um, imgur.com for example.
I've used that a couple of times, and then got shouted down as being too sarcastic. After that, I stopped helping learners. Well, online, at least.
The point, though, is that if I can search and find the answer on the first page of Google, then anyone else can as well. Just because the top link might be irrelevant doesn't mean every other link is as well.
Thanks for that. Zend Framework seems to be one of the ones people cite as being very hard work to learn, and rather bulky. Is that the case? Is it suitable for smaller projects as well as large-scale ones?
Thanks! I'll take a look at Yii. I'm certainly not just looking for simplicity, no, and I'm not going for a job. This is for a personal project, and I want to be as sure as I can that I don't spend ages learning a framework only to realise it's not going to scale well, or it's not future-proof enough. For example, all of the comments here and elsewhere about some being php4 compatible or not 5.3 compatible tend to put me off looking further. I don't really know if that's going to mean I'm limiting my options unnecessarily, which is why I'm asking you all for your opinions. :)
Sure, but in replying that you found it when searching, but not linking to the result you found, you're potentially pushing that result down even further in the long run.
No, you absolutely SHOULD do it once or twice. Why? because that is how you learn that you know nothing about security and need to use a library that does it for you. Of course, you should never use it for an actual project, but you should definitely develop it.
Symblog has more than enough information to get any developer up to speed on SF2. What it is missing can easily be found elsewhere, but what it offers in a single package cannot (except for this tutorial).
How is funcname(){} not clear ? and anonymous functions could be changed into (){}, something that dart does well.
Checkout hybridauth.
The shortcomings of the Wordpress code are understandable, for when it was written and the way they project developed, but it's not a good example at all for modern PHP. Any new project, unless you're prototyping something very small, should probably be object oriented at least.
+1 to your reply. Just wanted to add that they just released 2.0.0rc1 http://devzone.zend.com/2437/zend-framework-2-0-0rc1-released/
Config files? That does not make any sense! Customizing the way elements are displayed? Use CSS and work with displaygroups. If complicated forms tend to get messy, you are obviously doing something wrong.
Honestly, what's the point? I don't see how the wrapper adds anything of value when you could just as easily do the following: $db= new PDO($dsn, $username, $password); $db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $db-&gt;beginTransaction(); try { $db-&gt;exec($sql1); $db-&gt;exec($sql2); $db-&gt;commit(); } catch (PDOException $e) { $db-&gt;rollBack(); } I mean, the code doesn't make the process any simpler either, it just wraps the native functionality which is already there.
You're right, but boy is the coding style awkward. The [original implementation](http://www.kennynet.co.uk/2008/12/02/php-pdo-nested-transactions/), from which OP got 75% of the code from is heaps better. 
Symfony 2 and Silex are both made up of the Symfony 2 Components. Silex is lighter and takes less code to get started, but if you are already into OO, Symfony 2 might be more intuitive and has more documentation to help along the way.
No, don't be a dick. It's not like r/php gets a ton of new threads anyways.
I like the Decorator pattern too, but it's gone in ZF2.0.
I read it three times wondering why German tasks would need to be handled differently than anyone else's tasks
Well, heres a broken version. I don't have the htaccess file up, so the names in the post don't go to a correct profile (You can go there if you really want by putting profile.php?u=username-of-whoever), and the RegEx goes to my old testing URL, but other than that, I think it works fine and dandy. http://apexdigitaldesigns.com/microblogger/index.php
Not sure I've ever met a PHP engineer. You might have better luck with a PHP programmer :)
Hey, I'm RhodesianHunter. Now you have!
Not a bad idea, though I was hoping /r/php was a large enough community that I might pick of one or two of the really competent people i see around here, since I'm in a major metropolitan area.
Ah cool. What city are you in?
Can you post what the job might entail? If you would rather not would you PM me and let me know? I might be interested.
Oh, well, wow.. Seems I was horribly wrong. Nice to meet you!
We allow job postings here as long as remote work is allowed, mainly because this is a very global community and we don't want it littered with posts that require your body to be in a very specific location.
Baltimore
Ah, good to know. Unfortunately that doesn't apply to me. Thank you for the info.
That's what I was thinking...
A [growing company](http://www.bizbrag.com) needs a growing team. We're looking for someone/some people with experience scaling a PHP application. Unfortunately they do need to be local to Baltimore or DC.
The more you know.. Thanks for the clarification.
Can I recommend updating the FAQ with this information? I sometimes need to hire PHP developers and while I haven't done it here yet I would definitely have thought I could.. :-) Thanks for the information!
I doubt you will find a site where **every** question gets answered. Stackoverflow is your best bet. 
Personally I think you were downvoted for being pedantic (at least that's why I downvoted you). Everyone knew what OP meant by "PHP Engineer", and I'm guessing you did as well.. Sometimes trying to be witty doesn't add anything to the conversation, ya know?
Hehe.. The Reddit lifelessons. No I genuinely didn't have the thought that he was looking for a software engineer (or similar) who specialized in PHP, I guess I just assumed that he was a normal dude looking for a developer, and got his terms messed up. I've been self-employed, dealing with CTO's and clueless clients for too long. It was a silly post of me, I realise that, but well meant.
Hi I think writing small projects will help only to a point. In the end your project may work but will it be readable, easily maintainable, extensible and so on (to anyone but you).... If you are looking to improve your programming skills and not just php I highly recommend Clean Code http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882, there is another book as well called the Clean Coder which is also excellent. Reading other peoples code is also very helpful. Check out the code base for http://laravel.com/, http://kohanaframework.org/ and https://github.com/sebastianbergmann/phpunit/, they are very high quality php code.
Thank you, that was more of a response I am looking for. And I am slightly lost, but learning.
I use macports on mountain lion. I used it to install PHP5 with pear, gd, curl, etc. MySQL, and I use LigHTTPD. Everything works flawless for me and I have no issues with any php related extension.
I like $string = print_r($var, TRUE);
Freelancer here - I provide people with 2 months free support after a major project (full website or full redesign) - this support includes security updates, fixes for any bugs and (limited, subject to AUP) text/image changes. It's actually not that hard to convince people to shell up 10-50/USD per month to continue this after the 2 months have passed (as long as you provide the service), you can even write in your initial contract that you will continue with the support billing automatically and bill them a year in advance. Price is a difficult one, which is why I have left such a big range above. You need to gauge how much support the user will need (based on his/her skill and size of project) and bill thereafter. PS. It can be hard to change the support price if you write it into the contract, so make wise choices! :)
No - this is not necessarily insecure. I have worked a lot with the DIBS API, let's look at one of your linked images that uses it: http://screencast.com/t/9LtzWBiQaS See the md5key value? This is a validation value that makes sure the form was submitted properly. It uses hashing on the server side and salts with a secret key that is shared between the merchant and the payment provider (DIBS in this case). md5key is only calculated for some of the form values - price is one. That means you can't manipulate the price, currency etc without altering (and invalidating) the md5key - it won't be the same at DIBS end and it will throw an error. Hope this clears a couple of things up and let me know if you have any questions!
Some ideas: Minimalistic blog, reddit-like site, todo list or build a simple API for a service (maybe allowing developers to scrape weather.com or the latest stock market quotes)
We need to know a little bit about you - what server-side languages do you code? If it's PHP - are you familiar with setting up Wordpress or Drupal? Creating a personal portfolio for yourself is always good - if you currenty have a blog you can use that resource or create a brand new page for your portfolio, and you'll learn a lot in the process. Craigslist probably works if you have next to no experience, but be prepared to do a lot of work for low payoff. Local businesses can make great customers, visit them, be prepared (research their business) and offer them a homepage. Many can be persuaded easily, especially if it seems you understand their business. You can also apply for a job at a webdevel firm, but you'll need a portfolio for that. tl;dr - Portfolios are good!
I think you are not familiar with some of the concepts being used, but i'll try a swift explanation the best I can: - You can alter your -own- cart and change the merchantid and md5hash to match your account, then when you click Pay you will start a payment to your DIBS account (However, your dibs merchant name will be clearly stated, and most firms have customized their DIBS payment pages anyway so this is pretty glaring) That being said, for this to work you need a way to manipulate -other- users cart accounts. This can be accomplished by: Man in the middle attack if the original merchant does not use SSL or XSS injection vulnerability on the same page as the checkout is happening on. As for the extension, it sounds like you are writing a malicious piece of software (let me know otherwise) so I won't elaborate further.
Then i would suggest you go the Portfolio + Local business route. Drupal is by no means required but I am partial to it over Wordpress for larger projects.
For DIBS, the setup you showed is the recommendation as per their documentation. Like I wrote earlier - you can change your -own- values with for example Firebug, but if you'd like to steal money you need to be able to change -other- peoples form values (and also expose your own merchant secret to calculate your new md5key clientside before submitting the form to your DIBS merchant page), You can technically do if the user installs a malicious extension in their browser. The bug on Auth.net was probably made possible by either not requiring an md5key (or similar test value) or if there was a bug in the form validation - while bugs do exist the presence of md5key can in theory always secure form values from being manipulated. There are alternative ways of integrating payments with your site that only go through your merchant server (end-user never communicates with merchant), but this is usually more difficult and requires you to have a valid SSL cert for your site (that many Small-medium businesses do not have or need). Hope that clears some stuff up, cheers!
In Sydney, Australia *alone* on a single recruiting website there are over 500 full-time php developer job postings this month. If you open r/php up to localised postings worldwide the job postings (esp given they dont cost recruiters anything to make) would drown out everything else. Telecommute jobs are of interest to most of us, and they don't come up often enough to drown out the rest of the community - but otherwise I'd strongly encourage you to either find another subreddit more suited to recruiting. Baltimore doesn't appear to currently have a jobs subreddit, if you regularly have job postings maybe you could start one?
var_dump()'s primary use is for debugging. Dumping values to the screen so you can see what they are at the moment you are using it.
You guys should put up a hiring page maybe? I had lots of luck posting positions on Krop, AuthenticJobs, and StackOverflow jobs. They're expensive but well worth the money.
That's the idea. I'll probably flesh it out more this weekend.
Tried SO once with no luck. I'm guessing Baltimore is a difficult market. I'll have to check out the other two, and will definitely get a hiring page up.
Yeah, it is pretty tough. I'm a little south of DC and it took us a long while - but we did get better candidates overall than other places we posted.
I believe the devs made it a point to call it Symfony2 (without the space) to aid in searching for documentation.
I'd gladly consider such listings on a situational basis. If your company has an *interesting* job offer (say, a lead developer position), and they're willing to relocate, you can always send us mods the information and we'll let you know whether it's okay. We're not trying to keep people from listing their jobs here. We're just trying to keep the quality of content high and interesting to a majority of our readers.
But why exactly is it neccessairy to have that data client side in the first place?
How about a /r/phpjobs and a link on the sidebar to keep both communities linked?. /r/forhire is a spamfest of shitty jobs and any other general jobs subreddit would lose the appeal to php devs.
Great, thank you.
Alright, that makes a little more sense looking at the php site. Thanks!!
Thanks for the recommendation. I've only been following the WP path because it's what I started on (plus it's very popular). I'll definitely give Joomla a go.
That is my feelings exactly.
Love netbeans, can't live without it. The only complain is that sometimes it's slow even on my mbpro 16gb ram, i7-2640m, hybrid drive
stick with sf1.4, since sf2 was written to create a consulting business not a framework the regular folks can use.
Try ampps from softacalous
Hiya, and thanks for the link. I've read through a few of those (am on 5 of 12) now and they are an excellent primer, many thanks! Now then, on to read the next one...
Can you show me the code snippet that generates the md5 key? I am pretty sure it's security through obscurity and if it's out in the open it's unsafe.
If you need to get a quick project out then use whatever you know best. If you have a little more time then learning the newer technology is a good idea.
This is the correct motorcycle.
If this is the api http://tech.dibspayment.com/dibs_api/payment_functions/capturecgi/ then it seems to be implemented well enough if this is how the md5 key is implemented: MD5(key2 + MD5(key1 + “merchant=&lt;merchant&gt;&amp;orderid=&lt;orderid&gt; &amp;transact=&lt;transact&gt;&amp;amount=&lt;amount&gt;"))
Good idea thanks for posting.
PHP *engineers*? haha, how cute.
Nearly everything in Symfony 2 supports YAML configuration, including validation, dependency injection, and Doctrine 2 entities. Even almost all third party bundles support YAML configuration.
I could fill at least two dozen php roles
I haven't insulted him, I simply can't make sense of the question. If he knew what output buffering is, then he wouldn't ask why it does what it does. What he is asking is "Why is A an A?", not "What is the purpose of A?". The question is nonsense in every form it can take. To illustrate "Why is a car a car?". While this might be a semantically correct question, it doesn't mean anything at all. The question doesn't make sense. 
I haven't belittled him. I'm just honestly flabbergasted at the question.
Most people, *especially* the ones who know what they're doing, have stuff they need to get done now. They don't have time to take something that's fundamentally broken and rewrite it. It's less hassle to *start with something that isn't broken*. Little bugs, yeah, they're worth fixing; huge glaring errors, though, are worth jumping ship for...cause you know damn well there will be more of them, if a project of any noteworthy size even lets such errors creep in.
&gt;"you can create a stack of directories to search by using the setTemplatePath() method" Well, then that method name is a misnomer. Surely it should be named "addTemplatePath". &gt;"Views can be either associative arrays or objects. For objects, any public member, either a property or a method, may be referenced in your template." Another misnomer. Normally, the template would be considered a view. If you're accepting objects which handle data binding, like in the example code, then it is a view model, meaning this class (ply_mustache) supports the MVVM-variant of MVC.
Some people object to "engineer" being used to describe programmers or developers because technically, "engineer" is a professional designation meaning you have an actual engineering degree of some kind. But in software development the term has become widespread and mostly interchangeable with programmer, depending on who you talk to.. In this case the downvoted comment was, in my opinion, making a lame stab at OP over this distinction (with the smiley at the end etc).. I guess he got enough downvotes to decide to just cancel his account.. yikes.. didn't quite mean for that one to happen. 
I'd wait until the long term release of Symfony2 is out. At the moment there are backward compatibility problems between 2.0 and 2.1, and you can expect further changes in the near future. 
I would say software is the exception to that rule though. Computer engineers get an engineering degree, but most software engineers have a computer science degree (which is not a BE) even though the curriculums are very similar. However, most computer science programs are within the school of engineering (if there is one). So yeah, I would say I am a software engineer (graduated from a school of engineering in computer science with a BS).
I know. I was the one that suggested that to them :-) It didn't work that well though
Silex is lighter weight than Symfony2 (the bloatedness is my primary complaint) Also, I'm not saying you will drop the framework once you've mastered it. I'm just saying wait until then before you judge it :-)
&gt;You implied he was completely lost to the concept of programming. That's rude. Well, he is. He even confirmed that. I wasn't intending to be rude with that comment. &gt;He's learning, he came here to ask a question and you chortled rudely to him for asking. Nope. And I'm sorry you've interpreted it that way. The question just doesn't make any sense to me. 
Check the reply of thestandardtoaster: http://www.reddit.com/r/PHP/comments/xh3m2/does_anyone_else_think_this_is_a_highly_insecure/c5mil4q
The word "dump" is asking that you dump the data out. This is like asking why print() sends to the browser, or print_r(). These are output functions, for... you know... writing output.
That's not even remotely similar to what I said. 
Because otherwise you'd need to handle customers payment information (like #CC numbers), and you would also need to make templates for all the possible payment systems you want to handle, in your store. If you handle that kind of info, you need top-notch security (SSL cert, always upgraded software), which many Small-medium businesses don't have the resources to do.
Okay, you've obviously misinterpreted me completely. I'm not wrong, you've just misinterpreted me in a way that's wrong. But whatever, I see no point in continuing this conversation. 
&gt;He's not asking why the ob functions do what they do. He's asking why do we need to use them to capture the output of var_dump (instead of var_dump returning a value). I definitely didn't get that out of his question. At all. Hence why it didn't make sense to me. Obviously, other people found his question nonsensical as well, otherwise I don't know where the downvotes come from. 
It helps if you're good at translating noob. With questions like this you have to read between the lines a little.
These are pretty simplistic examples (and might even encourage bad practices) but I could see how these would have been valuable when I was first learning PHP. With that in mind, I appreciate someone collecting these examples for the new guys.
Looks like you have no idea what is the difference between "dependency injection" and "dependency injection container".
Yes, DateTime is great and all, but the examples used to prove that point doesn't appear to be real-world examples, just worst case scenarios. In the real world, I'd expect seeing code with strtotime, rather than parsing the date manually. If we are going to argue against points, we should be careful not to create strawmen.
You don't sound pompous, you should be compensated fairly for your time. Here in Texas, entry-level developers can expect to earn in the $18 - $22 range. That said, the best way to get a raise in this profession is to jump ship. If you plan to become a developer you'll need to know this as a truth.
Well first example can also be done in one line, date("Y-m-d H:i:s", strtotime($strDate)); Also third function can also be accomplished by [DateTime::Diff](http://bd.php.net/manual/en/datetime.diff.php#example-617) method. That said, this is what I like about php. There is many ways to skin a cat. Same is true for array_* methods. That said DateTime::* methods are huge improvement over normal date functions, especially in manipulating timezone.
It's funny Phil, you author PHP the Right Way (which I think is great) but you are an advocate for CodeIgniter (which I think is sad). CodeIgniter = joke lol
It's kind of silly to write something like this for anything other than a learning exercise, but additional optimizations you can make is storing the coordinates in radians directly, so you don't have to convert from degrees to radians for each query, as well as calculating the bounding box first (and using something like `WHERE lat &gt;= min_lat AND lat &lt;= max_lat`, and having an index on the lat/long columns. That way you can convince MySQL to do a range query on the index before having to apply the [great-circle distance formula](http://en.wikipedia.org/wiki/Great-circle_distance) on every single row in your table.
I know, I just didnt know where else to post :P
USPS lets 3rd party companies provide the APIs for the zip+4 and they are just horrible. ooh, I'll look into that! sounds like an awesome way to structure things. Thanks a lot!
strangely enough, this touches on another issue that I was having. although your suggestion does not break things into areas, just compute the shortest way for the driver (which is also needed btw). so thanks :D
Jump ship or move in to a new position in the same company. But don't continue in your current programming career and expect a big raise. 
I cannot find an API that provide such data :/ I found PDF files with the break downs but no API with data that I can look up! do you happen to have such a resource? thanks!
Between is inclusive of both parameters as well.
Yeah, the issue had nothing to do with BETWEEN... It's that if you omit the time, MySQL inserts '00:00:00' automatically, so you were looking for midnight from the first day, until midnight on the last, which excluded the entirety of the last day.
I'm not sure what the example application you listed does, how many users it must service, etc.... but it looks pretty damn over engineered to me.
This is good advice. I have always been a do-everything-from-scratch kind of person but I do feel my self drifting toward the frameworks for everything approach. I think largely because it seems to be the trend these days. Recently, I very nearly rebuilt a perfectly good ui using twitter bootstrap because everyone seems to be using it - luckily I caught myself early on and stopped. Thanks for the reality check!
&gt; reddit like site. Good idea! The blog format won't be new, but the voting system will be something I've never done. So what do you think it will need? Registration, accounts, subreddits, upvotes, downvotes, create a link, create a subreddit, comments, subreddit subscriptions and some sort of algorithm do determine what is on the front page. This'll be tricky 
I find Microsoft servers to be like a never ending view of options and dialogs that don't really relate to each other. I'll take a unix os if I have a choice
Why not just trunc the date times to get the whole day or substr out the month
Glad you liked the idea! Reddit is open source, so you can always check their source (it's python though). Here's a good starting point for the ranking algorithm, examining Reddits own implementation: http://amix.dk/blog/post/19588
Alter the user_id column to bigint. Done.
&gt;From what I've seen the leading contenders are FuelPHP and Kohana, but I really don't know how to judge one over another. How are they leading contenders? Kohana is terrible at documentation, but the framework is decent. Don't pick that as your learning platform because you'll spend more time searching for documentation than learning. If you want to learn I would learn with the Zend framework. It's well documented for someone new into the MVC world.
I would say start with CodeIgniter, it is the least like a framework, and you'll be familiar with the style of code, while still following the MVC design pattern. Then you can move onto FUELPHP, which is the best framework I've seen so far, and once you learn how to use them you'd see why. 
Upvoted because this is actually insightful. I must agree that a redesign is probably in order though :)
Right, that's what I was confused about. I didn't know the proper procedure, if it was too late, or whatever. 
I store all values using the web server (or database server) local time. Adjustments can be made in the output to reflect the local user's timezone as needed. The issue in the past with using web server (I run systems that have load balanced front ends) is that sometimes a box gets off ntpd and starts inserting skewed dates. Using db server with time() in the insert would prevent this.
thanks for the links. I'll check them out right away!
That isn't the issue. If a user enters a date in CST as their "local" time, it has an offset of -5, but then the timezone changes to CDT (which is -4) and their "local" time is now an hour ahead of what it 'should' be because they entered say 8PM "local time", which is now 9PM "local time" because their timezone changed. If you had something stating that it was 8PM CST, you can detect that it's now CDT and subtract an additional hour from their time to keep the time the same (8PM). We currently store all of our dates as the server local time (gmt) and just use GMT offsets, but the issue occurs when a user inserts a time in CST and the timezone changes to CDT and you want to account for that hour difference but can't.
All times, regardless of time zone, should be GMT. I don't see the issue.
I use (date&gt;='2012-08-01' AND date&lt;'2012-09-01')
Thanks a lot! Helped me!
Start working on some open source projects and throw them on github. This will show your coding skills along with your ability to use revision control software and that you can work in a team.
Don't know what IDE are you using but I recommend PHPStorm. You would notice right away that XMLReader class is not defined (included) anywhere.
Right, but when the local timezone changes, it changes the conversion. If I live in the midwest and I'm in the central timezone, and I want something to happen at 8 PM in 2 days and the timezone changes from CST to CDT tomorrow and I added the timestamp today, then it'll happen an hour off from when it should. This is solvable by knowing that the original stamp was stored as CST or CDT, since I would be able to account for the timezone change...
I thought N-Tier Architecture was all the rave in .NET about 5 years ago but they all use .NET MVC now. But as we're talking about infrastructure layers here I see it makes a little sense still. However that "real example" diagram doesn't make any sense, why is there 3 levels of cache feeding back into PHP???
The benefit is that it handles the rollback internally. The problem with the code snippet here is that if another kind of Exception was thrown within that code block, the database wouldn't have been rolled back. Seems like a solution solved by catching everything, but that's often not what you want to do. You can also use the transaction function without the anonymous function: $db-&gt;transaction(array($object, "save")); 
I hope so. That can cause you all sorts of headaches further down the line. As a simple example, an application I've worked on used INT UNSIGNED to store the manufacture date of a vehicle. No problems... until someone tried to add a classic car manufactured before 1970.
I think the best thing to say is "$50 USD for 4 support hours a month" or something.
http://xkcd.com/376/
How does this handle NULL values? I'd like to do this the oposite way, something like: WHERE (NOW() BETWEEN `date_start` AND `date_expire` But date expire can be NULL, indicating that it does not expire. Does this work the way I expect it to? 
Sometimes you can get away with pre-1970 dates if you use negative numbers, though it's not something I'd recommend. The 2038 issue is less of a problem if you use 64 bit timestamps.
The famous first words of a project on the road to a death march. "our company's needs are unique" For someone who's newly minted (or... did you mean you're just new to the company?), stating that "no ERP system is capable of exactly what we need" is pretty short sighted. My experience has been that most companies would do better to mold their processes around existing systems then tweak as needed vs. writing custom systems to support workflow that evolved adhoc via paper over years of personality-driven-development. You would *still* be wise to review systems out there to see how they accomplish certain things and understand *why* the 'bloat' exists. Seldom do systems have actual 'bloat' - more often its functionality that is not understood by someone as to why its necessary. Bypassing that 'bloat' will get you done a few days faster, and will lead to months or years of hurt over the life of the project. You say elsewhere you don't know if you want to go in to this profession. I understand personality/trust may be playing a role in this, but why a company would ask a noob who doesn't even have a desire to stay in the field to overhaul the entire business' workflow is frankly a bit beyond me. You'd be well off to ask them to bring an external consultant in on a part time basis to help guide you, offer some review/support, and act as a mentor while you learn how to do this and decide if you want to stay in this field or not. If you decide you don't, there's at least someone else who understands some of the processes for the company to tap when you decide to leave (the company or that role). 
Check out this link: http://www.quintcareers.com/action_skills.html. Helpful. 
These dates have no need for being passed through mysql_real_escape_string. They are from the result of a previous query.
The function basically builds an array of data from multiple tables to display in multiple pivot tables that represent each month. Each table is broken down into weeks of that month beginning on Sunday. It is to show customer loyalty statistics and revenue by month/week, basically.
Ya similar but different project. Was playing with the Google Maps API and figured it out. Could help but take a read on it. They provide a lot of info that depending on your specific needs may help you.
not exactly the same, since yours would include '2012-08-08 00:00' whereas the OP's wouldn't
Using LEFT will also prevent mysql using an index. 
Until the day they aren't.
Wat?
Imagine someone change the function and suddenly the variables aren't from a result set. Or imagine someone copy/wasting the query/function, change it, and don't bother with cleaning the variables. Or imagine someone else thinks thinks this is the standard and when implementing something else also doesn't bother cleaning the variables. There are many ways this could go wrong but variables should always even from other resultsets be cleaned.
Well that's a rookie move. Correct way would be signed 64 bit integer. Then that'll get around the [2038 bug](https://en.wikipedia.org/wiki/2038_bug) and you can also store dates from before 1970 as it will use a negative integer. Works fairly well for timezones as well, you just have to convert to the timezone when you display it in your app.
Or you can just declare your classes in namespace (if you plan on supporting php 5.3+)
I have to say that the stuff that comes from JetBrains is awesome. I have used IntelliJ IDEA, WebStorm, and PHPStorm and they are all just great. By far the best IDE's IMO.
Haha, same here. I was like eermmmm... German tasks? I thought it was a localization issue!
This is great work man!
I have no idea why *anyone* would hire you after seeing crap code like that.
&gt; Jealous much? People don't post their own stuff primarily because they haven't created stuff of value. Bullshit argument. Do you have any proof for this? Just because someone doesn't post something doesn't mean they have nothing of value. The only thing you can be sure about is that *you have no idea if they have stuff of value or not*. It's an *ad hominem* argument, because you're not concentrating on his argument; you're attacking him to invalidate his argument. As far as "stuff of value" goes, do you mean [your stuff of value here that was torn to shreds](http://www.reddit.com/r/PHP/comments/wuhvl/phpu_lesson_more_secure_php_sessions/)? Your code is universally panned and shown to be crap. I honestly don't know why you can't take the hint. Seriously your account is at -7 comment karma. Take the hint. &gt; Case in point, I'd be shocked if you had a dedicated career page with a source code gallery of your own works. Another bullshit argument. Having a code gallery or not doesn't invalidate his argument. Case in point: you have a code gallery, yet your code is shit, and it's obvious that you have no clue what you're talking about when it comes to software-design principles. His argument is that all you do is peddle your bullshit PHPUniversity shit over and over again. You claim that you're an expert but your code shows an amateur/novice level of experience that's on par with someone who has been doing PHP for *maybe* 2-3 years. You get downvoted because your information is bad and you are leading newbies astray with your bad and dangerous information. So **tl; dr** having or not having a public code gallery doesn't invalidate his argument that all you do is spam this subreddit with your bullshit code. Moderators should really take note and ban this account for spamming.
Why didn't you post this as an example of a good portfolio????
No HTML need for downloading files on android. Just simply link to the file you want to download and in the folder your file is located create a .htaccess and type the following: AddType application/octet-stream .pdf Replace '.pdf' with any other file extensions you want. As for file uploading on android I believe all android browsers 2.1+ Support File Uploading from browser so you don't need to write anything android specific. Overal, the project you have in your hands isn't hard at all. It isn't even time consuming. Infact the whole file uploading field is very well documented. Since your new start by following a tutorial like: http://www.youtube.com/playlist?list=PL10C2E583722F66E7
This is great, but one quick question: this may not be a question of PHP as much as Java, but the only issue I'll have now is sending the necessary data to the PHP script. In the example, the form seems to do all the work with one line of code. I'd like everything to be done within my app, no browser-opening. So what exactly does the form send to the script and how? Is it just the filepath as an HttpPost? When I did the login script, I was sending name/value pairs in an HttpPost in Java to the PHP script and I would refer to them as $_POST['variablename'] in the script.
Not to be rude, but I'm not concerned with downvotes. I asked the question on here because I'm new, and *I don't know what to Google*. If people don't want to help, that's fine. If, as a community, they want to shoo people away from learning something they know, they're free to do so. I know I've helped out plenty of rookies on /r/Java and /r/Javahelp. It's usually something they could Google, but we were all new at one point, didn't know the terminology to describe what we were doing, so I upvote and leave a reply with necessary information and sources that could point them in the right direction. I do thank you for being so kind as to provide me with such a source, but I've come across this documentation recently (shortly after I got my first reply), and my question from above still stands. I thought I had gotten just what I needed when I saw the "POST method uploads", but I'm still not sure what to send in the post. Is data sent in an HTTP post automatically placed in the FILES array? That seems like it would cause a lot of problems and leads me to believe something needs to be done or some criteria needs to be met, so I'm wondering what information you would need to send through the HTTP post to get the FILES array to read it.
For the love of god, don't do this kind of thing without using [escapeshellarg](http://us3.php.net/escapeshellarg)
Some people don't post their own stuff because they could care less whether people online worship them. Your username is a prime example of the egotistic mannor in which you post. Not only is it egotistical, it is flawed due to your lack of understanding of anything more than conditionals and variables. That does not make you "pro" or "expert".
You're trying to post a file to a form programmatically using java so enter "[post file to form programmatically java](http://lmgtfy.com/?q=post+file+to+form+programmatically&amp;l=1#seen)" into google. 
&gt;Is data sent in an HTTP post automatically placed in the FILES array? Yes. &gt;That seems like it would cause a lot of problems and leads me to believe something needs to be done or some criteria needs to be met [Kinda.](http://www.php.net/manual/en/features.file-upload.post-method.php#example-341) 
Sorry for double posting but I also found a tutorial and a Stackoverflow thread that might be of use to you: http://twigstechtips.blogspot.com.au/2011/10/android-uploading-files-from-phone-to.html And http://stackoverflow.com/questions/4126625/how-to-send-a-file-in-android-from-mobile-to-server-using-http
compare the last 3 lines of the first example on php.net [link](http://php.net/manual/en/function.imagegif.php) to your code. You're destroying the image before you display it
This is pathetic. [phpexperts_pro](http://www.reddit.com/user/phpexperts_pro) deservedly gets his spam downvoted to crap and so now he's depending on others to peddle his crap for him? meemao, I'm being honest. If you want to learn good PHP or just good programming in general, you will *not* listen to phpexperts_pro. He is neither an expert nor a "pro". He is a novice/amateur who has delusions of grandeur. Just take a look at his comment history; it's in the negative range. If you're going to say that "karma doesn't matter", well, guess what... it matters in a programming subreddit because it's a direct measure of the community's trust in your ability to contribute to the subreddit. For someone who claims himself to be an expert, he should have a high karma-rating that would show that his information is good and useful. For an example, take a look at [ircmaxell](http://www.reddit.com/user/ircmaxell), who is well-respected in this subreddit. That's because he knows what he's talking about. Again, do not learn anything from this guy. Head on over to PHPMentoring.org for some *good* advice. Good luck!
Do you even understand the criticisms leveled against you?
His karma is a direct representation of how much he is valued by this community. What do you think a negative karma represents? His code is bad. Just look at his submissions and his comments. He has no idea what he's talking about. He's a textbook example of the [Dunning-Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect).
You are not a bad person. His code is bad. You're right. :)
What happens if $service is null? Are you simply passing null into UserAuthenticator? That's just bad. If you have a default provider, call the no-args constructor when $service is null. Although I don't have too much faith that this code would have any sensible behavior like that, having seen the quality of the code that comes from "PHP University". What are you doing with $errorMessage? 
it's good for all updates for one year.
First, master your search engines skills. They are your key to solving problems, finding tutorials, and answering your questions. Master your development environment. If you use VIM, learn all the shortcuts, if you use an IDE learn the best workflow for your projects and the IDE. The goal is ability to develop as fast as you can conceptualize code. As far as starting projects, I suggest using professor Mihály Csíkszentmihályi's concept of "flow". Don't dive in too deep, don't dive in too shallow. Find your sweet spot, zone in, and challenge yourself into growing. This will help keep you properly motivated. Keep an ear to the ground. Don't be afraid to learn new emerging technologies and frameworks, but also don't take their pragmatism to heart.
*facepalm* that was the first thing I noticed: Headers sent AFTER image sent to browser
Warning messages are just that, warnings. They indicate something isn't correct about your code. They are non-fatal errors but errors non-the-less. That said no site should be running with E_ALL in production so for the most part they are irrelevant in that regard. Personally I consider warning messages to be indications of possible bugs so I try to solve all warnings which are usually trivial to get rid of in the first place.
There is absolutely a performance penalty for emitting any kind of error. There's overhead for a lot of the internal calls, plus any I/O that takes place for logging. Clean file with no warnings: &lt;?php // clean.php $array = array ('exists' =&gt; true); for ($i = 0; $i &lt; 1000000; ++$i) { $var = $array['exists']; } Run it with time: $ time php clean.php real 0m0.219s user 0m0.192s sys 0m0.024s And a file with warnings: &lt;?php // dirty.php $array = array (); for ($i = 0; $i &lt; 1000000; ++$i) { $var = $array['exists']; } And the results: $ time php dirty.php 2&gt;/dev/null real 0m3.849s user 0m1.852s sys 0m1.996s So you have a performance penalty, plus flooding the logs makes it difficult to pinpoint real errors later. And no, filtering the error level is not an answer, since a bug may log at the filtered level. 
You admit that you don't know anything about the application, and then go on to say it's over-engineered? Really? But if you must know, it's built to handle 50 million active users (active meaning each visiting the site at least once per week) in something akin to a social network (*lots* of user generated content). Additionally, the 3 backend systems are all re-used in other applications. So consider them service providers...
Not sure if this is a troll post (because, seriously, what professional programmer argues against code quality) but here goes: Yes there are performance issues with having errors. Demanding others provide proof is just argumentative and juvenile. Want proof? Be an adult about it and write up the test you said your people didn't want you to and check for yourself. Is it a big penalty? Nope. Not even a little. But there are penalties anytime you access the filesystem (which is essentially what happens with logging) as well as penalties for the PHP parser. That's not the argument to use here though. You should care about warnings and errors because, big fucking surprise here, *quality matters*, and, more importantly, things change. When you deploy error and warning ridden code to production you're effectively running broken code so when something on the server changes and things break how can you, with any confidence, know what's going on or how to debug? Further, what does it say about the programmer that they write errors ridden code. It's be like an author not knowing how to spell and use proper grammar. Think of it this way: web developers used to think of HTML in much this same way. "HTML is very forgiving so what's the problem if a closing tag is missing." Do you know how that worked out? It works in FF2, Safari, and IE8 but it's absolute shit in IE9, IE7, FF3-14, etc. Basically, what's a warning on your specific version(s) of the LAMP stack could be a deal breaker issue on another. Not to mention the security side of things where displaying errors effectively details how a system is setup. In short, write error free code or stay off the playground.
Absolutely. And if you've never worked on a large scale system, it's very hard to appreciate the difficulty and challenges of it. For example, most people here could probably setup and run a site that gets 100 requests per second. But how many would even know where to begin with a system that needs to *process* 100,000 requests per second (process meaning log and aggregate data from)... It's only three orders of magnitude bigger, but the problem set is SO much more severe. For a reasonable application, 100 requests per second is easily doable on a single server. But 100k requests per second for a simple script may take several hundred servers. And trying to coordinate the data aggregation in real-time between them is a challenge that not many have the pleasure of solving...
Being an adult means being able to back yourself up. Which is another way of saying, __they__ should be writing up the tests, or __paying__ for the OP to write them up. And really, there is no 'adult' thing about it, you're asking the OP to give free time for an issue that someone else has with his work. I would refuse to do it as well unless I was billing for the time. That's just how it is.
A warning is just an error that doesn't *force* PHP to stop executing the script. Calling a non-existent function or something leaves PHP unsure of how to continue. Trying to read a non-existent file does not present the same uncertainty, however it usually represents an error. PHP will try to continue although at the risk of unexpected or undefined results. Don't think of them as 'warnings', think of them as 'recoverable errors'. They still need to be handled. Code that outputs a whole slew of recoverable errors paints the picture of really, really shitty quality code. I would absolutely complain of I was delivered code full of errors, as would anyone else. If you don't understand this, you should not be developing professionally or semi-professionally at all.
Sure, except the OP had his own theories that he didn't bother trying to prove. Instead, he came to /r/PHP and asked everyone else to do his legwork for him. You can't have it both ways. I'm not asking the OP for anything outside of what he asked all of us to do. And, yes, being responsible for your own answers and queries is an adult thing. A child asks for answers; an adult finds them. 
Yeah, pretty much came here for that. I generally agree with the comments regarding r/PHP, however equating an IDE with "professional" and vim with "single files full of messy procedural code" is just ridiculous.
First, I strongly believe that the 'community' of r/PHP is not the 'noobs' (for lack of a better term). Looking at the submission and post history of a user who has an "I'm new, help!" post on the front page right now (first one I clicked, even), we see: * "I'm new, help!" * "I'm giving away a game on Steam!" * "What's this kind of graphic shader called?" * "How can I keep insects out of my pool?" * "Here's my unfunny meme." * "Searching for a Wordpress plugin..." * "Could someone help me with a Wordpress theme?" * "Could someone design me a logo?" * "Here's a repost of something from a few weeks ago." * "What should I call my website?" * "Help me with my Minecraft server" * "How do I start my own Minecraft server?" * "What jQuery slider should I use?" * "Hey guys, Facebook sucks! M I RITE?" * "Hey guys, look at this idiot on Facebook." * "What's wrong with this generation?!" * "Live updates from PHP/MySQL with Ajax" * "I want to write something. Give me some ideas." * "I have a health issue. Can any of you non-doctors diagnose it for me?" * "Can you name my game?" * "Here's another meme." * "What do you call this style of image? Where could I find a generator for it?" ... You get the point. Most of these are self posts with engaging content along the lines of (an actual post): &gt; How could I manage to do that? Could anybody help me? Thanks! These are not the community, they are leeches on the communities. Intentionally or not, these people treat reddit as their own personal audience, their own personal support. These people do not contribute or participate except when they need something. The real question is not 'what kind of community' we want to have, but rather whether we want to have a community at all. I, for one, am not necessarily opposed to questions around here if the user has done the required background work first - tried Google; broken it down to a specific, succinct use-case; checked StackOverflow; etc. That alone should cut the number of questions down to a point where it's possible to find the interesting discussions and news on this subreddit. The issue is not questions. The issue is questions asked by people with no investment in the community and no will to put in a bit of legwork before asking. Posting and telling people to use StackOverflow or r/PHPhelp is useless. Usually you're downvoted and never seen. Even if your post hangs around, someone else will step in and answer and just continue to encourage the behaviour of asking questions with no real thought put into them. This is not something that the community itself can effect. All it takes is a couple of people voting and answering questions to continue to encourage this behaviour and continue to develop r/PHP into this kind of subreddit. It doesn't matter if twenty people downvote a post and it sits at 0... The asker got their answer. Why wouldn't they come back and try again? The only way we could bring about this goal is with the active participation of the mods which have been quite absent through all of these discussions. A few of those guys mod several subreddits, some aren't terribly active. None seem terribly interested on growing or molding this subreddit into a community so much as just hanging around and letting garbage hang out at 0 on the front page. "The mods would have to do work." is not a reason to let the community fester. If the community would like some active moderation and the mods are not willing, I'm sure they can drum up some volunteers. I spend enough time on here as is, I'd be happy to start deleting non-contributing posts and PM'ing the posters with a link to StackOverflow (which, by the way, has way more traffic than this subreddit). So again I pose the question: Do we want a community or not?
Learn the right stuff first, find a framework and work using it. 
Decide on a project and build something. You will learn so much by actually creating something that works. It'll also dramatically increase your self-confidence when you see what you have created. My advice is to use a framework to help you get started. I use Drupal but it's up to you if you want to use this, or even anything at all
I know, far be it for anyone to ask on /r/PHP as a part of their 'legwork'.
Holy SQL Injection batman! When oh when will people start using parameterized queries?
&gt; I'd like to see examples of a more simple and similarly powerful system. I don't think one exists. [HybridAuth](http://hybridauth.sourceforge.net/index.html). 
Maybe if I see it but I will always do it nicely if you are receptive to help :)
I lol'd!
I agree with everyone else. The common practice is to develop with all warnings, and then in production log just what you need. If your code is developing a lot of errors, YOU are doing something wrong. PHP is telling you the code is wrong and needs to be fixed. If you write code that has no errors then when something happens you are in a better situation to handle it. It's the difference between making something good enough and taking pride in your work to do it correctly. It bugs the shit out I me when I pull down code and find someone is generating warnings that can be fixed quickly and easily. 
So in reality we use strotime() most of the time and handle stupid date formats as an exception. Nobody is going to use a ridiculous amount of code when 99% of the time strototime() *just works*
It can take almost as work to figure out more involved WP themes and how to tweak/customize them manually as it would otherwise take to code your own stuff from the ground up. I'm currently dicking around with a site that uses a theme that is WAY too involved. It's a headache...the theme alone has 65-70 separate files. For an independent coffee shop. 5 pages of actual content.
I'm gonna hazard a guess that it's either a permissions problem or an environment problem. Permissions: The cron job is probably being executed under a different user (I'm assuming Linux here). Try running the script from the console as you will probably get some error output then about being unable to write to the directory (chmod 777 it for a test). Environment: It may be the cli config for php doesn't have access to the GD libs. Again you'll be able to tell when you run the script in the command line as above. Hope that helps.
Cheers, I'll run with this. Appreciate your help
The key bit almost works now, but not quite how I expect it to. I'd like to be able to replace the contents of the textarea with my own key; however when using textarea, the send functionality does not the work the same as the input type stuff... Any ideas? Feel really close with this :D Thanks for all your help.
I've been tearing my hair out. I haven't been getting any errors at all! Every 5 minutes it's supposed to run [this](http://pastebin.com/zGM5Rs9y), which calls the img.php script. Is there any problem with echoing from cron? Why would it work in a browser, but not run locally?
You cannot always assume that whatever comes out of strtotime() is correct, especially when dealing with messed up date formats in feeds. Look at the PHP.net page itself: &gt; Dates in the m/d/y or d-m-y formats are disambiguated by looking at the separator between the various components: if the separator is a slash (/), then the American m/d/y is assumed; whereas if the separator is a dash (-) or a dot (.), then the European d-m-y format is assumed. &gt; To avoid potential ambiguity, it's best to use ISO 8601 (YYYY-MM-DD) dates or DateTime::createFromFormat() when possible. 
I must say I'm usually lazy and fire Zend_Date, I should think more of DateTime directly. When dealing with a date/time from MySql, I usually convert them to timestamp with UNIX_TIMESTAMP().
Looks like a [spam account](http://www.reddit.com/user/tomskireddit). Especially considering that all domains are registered to the same person. http://whois.domaintools.com/clonescriptsdb.com http://whois.domaintools.com/houseplanshut.com http://whois.domaintools.com/timerbot.com
If you are "Utter newb", please ask your question on http://www.reddit.com/r/phphelp. It is a more appropriate subreddit for this kind of question.
When I originally created the library, I was not using a stack. I've kept the naming of setTemplatePath() to keep backwards compatibility; I'll remove that in the next major version (2.0). As for the verbiage of "View": yes, Mustache is an MVVM variant. However, the terminology I'm using is from Mustache itself, not something I've created. As such, it makes sense to be consistent with the upstream project. If I were to call them view models in phly_mustache, people familiar with Mustache would be confused; on the flip side, folks learning Mustache via phly_mustache would be confused going to another variant (e.g., JS). I will make a note to discuss MVVM in the docs, however.
Assuming my code is of subpar quality, I would **LOVE** to see an example of better code, so that I could better myself. Now you guys on here, and only here, like to spout nonsense like "OW! IT HURTS MAH EYES" but none of you have EVER linked to any code of your own for anyone else to learn from. http://repo.phpexperts.pro/source/store/annotate/head:/CashRegister.inc.php How can you possibly say the above code is ugly? I'd like to know.
I know about composer and phar etc but I don't wan't or always have access to shell like a root or all the resources. So, I want to use reactor like any other standard library system.
Just as you said, looks like explicit type hinting doesn't work. /** @var $em \Doctrine\ORM\EntityManager */ $em-&gt; // No autocomplete
Would it still slip if it was made of the correct material? Or maybe a slightly different (still non-circular) shape? At any rate, you missed the point.
The "working more with framework than with application" is a somewhat made up problem. As your application gets more and more complex, amount of time you spend "on the framework" proportionally decreases compared to implementing the actual required features, while still saving you significant amount of time by managing low level stuff. Also this problem goes away almost entirely as you get experienced enough. Silex is awesome, but only for minor projects.
I'm laying out what may be effectively 'worst case scenarios', but we/i didn't have enough info to go on anything else. I'm not suggesting that they won't/don't like what you've got now, but when the primary criteria is how someone feels about something, it's just as easy for them not to like it 6 months from now, regardless of if anything substantive has changed. Still so many odd things there - you're given 7 months of paid time to build something, but the idea of using something off the shelf and customizing for 6 months is not given credence (or, you don't think they would give it credence). Still seems out of whack, and again, I understand we're only getting a small portion of the story here. Again, good luck to you. If you ever need a review of things from an outsider perspective, feel free to ping me. 
Great point. That is the way I used to think and I coded everything in VIM for 8+ years. Then I switched to the IDE/VPN/SFTP and it completly changed my work flow. While I still held my knowledge on code, I was handicaped and production was reduced dramatically until I adjusted. My main point is that your development environment is important. I agree that it does take a backseat to proper techniques and practices.
There are times when you don't have shell access or very restricted access, example shared hosting accounts etc. I am not denying what you are saying.
Where the fuck did the word "primary point" come from? You clearly aren't reading jack shit in the article or in these comments. Fuck. Literacy.
Who said there was power being applied to the square wheels?
Nobody said power and neither did I. There is load.
&gt;Unfortunately they do need to be local to Baltimore or DC. Probably the only reason why r/php might not be the best place for it.
I have no problems with reinventing the wheel as long as you make a better wheel, or you make the wheel for educational purposes. More often than not, people reinvent the wheel because they're just not aware there is a better wheel available, or because they just don't understand how little they know about wheels in general. You see it all the time with authentication systems - people make their own, screw it all up and then wonder why they're getting hacked left and right.
Great, a whole site dedicated to the concept of micro-optimization.
Tried the demo out and it seems to be incredibly flawed. For a library that manages to weigh in at several thousand lines and whose sole purpose is is to log people in, I'd expect it to actually work. If you select the wrong option and want to go back, you can't because unless you clear the cookie it'll keep redirecting you to a login page. The fourth option just left me staring at a blank page with no way of going back, even the browser controls were rendered useless. Even if you do manage to login, you'll get "The user is logged in via .".
you could put all of that in an if statement like &lt;?php if(!empty($_POST['number_one'])&amp;&amp;(!empty($_POST['number_two']))) { if (isset($_POST['number_one'], $_POST['number_two'])){ $number1 = $_POST["number_one"]; $number2 = $_POST["number_two"]; $operation = $_POST["operation"]; } /addition/ if ($operation == "add") { $answer_add = $number1 + $number2; echo "$number1 + $number2 = "; echo $answer_add; } /minus/ if ($operation == "minus") { $answer_minus = $number1 - $number2; echo "$number1 - $number2 = "; echo $answer_minus; } /multiply/ if ($operation == "multiply") { $answer_multiply = $number1 * $number2; echo "$number1 * $number2 = "; echo $answer_multiply; } /divide/ if ($operation == "divide") { $answer_divide = $number1 / $number2; echo "$number1 / $number2 = "; echo $answer_divide; } } ?&gt; if(!empty($_POST['number_one'])&amp;&amp;(!empty($_POST['number_two))
thanks alot! working now :D
The important thing is do you understand 1. why it wasn't working before, and 2. why it *is* working now?
Thanks!
extend the isset to encase all the operation variables: add, take, minus and multiply whereas before I was trying to just define the operation by itself ignoring the variables it contained. also learn to use pastebin lol. thanks again :D
The including of the arithmetic operations inside the parent if statement wouldn't have fixed the "Undefined index" error. That error occurs when you try to access an index in an array that doesn't exist. For example, given the array: $array = array( 'foo' =&gt; 'bar', 'fuz' =&gt; 'baz', 'abc' =&gt; 'def', ); this would result in an undefined index: $value = $array['badIndex']; because 'badIndex' is not a proper index in the array. The proper indexes, in this case, are foo, fuz, and abc. So, I'm fairly certain that your calling of $_POST['operation'] was causing that since you weren't checking for its existence first (using isset, like you were for number_one and number_two). Does that make sense?
TL;DR 1. reinvent the wheel if you want to learn about wheel invention 2. reinvent the wheel if you want to improve the wheel Why did you use so many words?!
Wow i'm impressed with this, cheers mate 
Sorry, I have to mention this: Every time I see the thumbnail generated for links to your site, I laugh. It looks like you are wearing an umbrella on your head. If you have thumbnails disabled, [this](http://c.thumbs.redditmedia.com/16BSjTTxoZHGZIqt.jpg) is what I'm referring to.
You defeated yourself with your own examples. Rewriting code does work out pretty well. Nginx replaces Apache, MySQL is an alternative for many many previous SQL engines and PostgreSQL is a pretty rock-solid alternative to MySQL. I'm pretty happy with all of these improvements.
phpexperts_pro == hopeseekr (your "apprentice" meemao messaged me and told me this). Funny how you accuse people of being sockpuppets when you're doing the same. **edit:** The point of the comment is to show that your "feature" about supporting billions of users is irrelevant. It's like making a simple site and claiming that you can support "billions of users". What do you mean by support "billions of users"? Can they all hit your site at the same time? If you're not even persisting the users, then what the fuck does that even mean? If you *are* persisting the users, then what Dunhamzzz applies: the PHP layer has no impact when you have a billion users in your database. Essentially your claim that your framework supports "billions of users" is superfluous and pointless.
&gt; It can take almost as work to figure out more involved WP themes and how to tweak/customize them manually as it would otherwise take to code your own stuff from the ground up. Then I would say that he shouldn't start by playing around with WP themes :) 
When a textarea is sent to PHP, the whitespace around it (due to code indentation) gets sent too, so you'll end up with a lot of whitespace on both sides of the string - use trim() on the variable before trying to use the value.
My experience is that Zend gives a lot of code overhead, especially if you use their ORM implementation. While it may be suited for larger projects I would not use Zend for smaller project. (&lt;200h work)
&gt; Now you guys on here, and only here, like to spout nonsense like "OW! IT HURTS MAH EYES" but none of you have EVER linked to any code of your own for anyone else to learn from. One doesn't need to show their *own* code to prove that your code is crap. One only needs concrete examples of *how* your code is bad. I believe people who have criticized your code have already done that. &gt; How can you possibly say the above code is ugly? I'd like to know. Can you tone down the arrogance? I'll show you how horribly designed your code is. Maybe you'll learn something, but I doubt it. First of all you use floats for currency. No precision problems there, right? Then we get to this beauty: /** * Attempt to purchase a product. * @throws MoneyStoreException * @return boolean true on success */ public function purchase(Product $product, MoneyStore $money) { // Make sure that we're not robbing ourselves to pay for the product. if (spl_object_hash($money) == spl_object_hash($this-&gt;money)) { throw new MoneyStoreException(MoneyStoreException::IDENTICAL_PAYEE_PAYER); } $productCost = $product-&gt;exposePrice(); $this-&gt;money-&gt;addFunds($money-&gt;removeFunds($productCost)); return true; } I had to sit and scratch my head to figure out what the hell you were doing. It's terrible design and it's easily shown by the fact that you have to check to see if you're removing money from yourself. First of all, **no one** should have access to the *$money* instance that is inside your class. One of the most important rules of good design is to favor immutability. You're violating that by providing a *MoneyStore* instance into your class, one that can be modified by anyone. And you probably think "anyone" means hackers or something, but no that's not it. You want to favor immutability not to protect your code from hackers, but from *yourself* or *other developers* who use the code. Essentially it's to stop you from shooting yourself in the foot. It's funny because later on you have this: public function exposeBalance() { return $this-&gt;money-&gt;exposeBalance(); } Which, presumably only exposes the balance, but that's pointless because anyone who constructed the class already has access to the *MoneyStore* instance that was used in the constructor. The correct thing to do is not to provide a *MoneyStore* instance to the constructor **at all**. The correct thing to do is to simply provide a value to the constructor. The constructor will then create a *MoneyStore* instance internally and assign that to the *$money*. This way no one has access to the *MoneyStore* instance that's inside the class, other than the class itself. If you do this, you don't even have to check to see if you're taking money from yourself because there is no way the *MoneyStore* instance you're passing in will ever be the same as the internal instance. Secondly, you shouldn't even be passing *MoneyStore* instances around. Presumably it's an object that keeps track of money held by someone. Do you really want to pass that raw object around? It's dangerous and anyone could easily mess with it and fuck it up. That object should *always* be encapsulated inside something that controls all access to it. The *purchase* function shouldn't even be taking in a *MoneyStore* instance. It should be taking in a *Customer* object (for example) that has an internal *MoneyStore* instance. This way no one is messing with the **actual** *MoneyStore* instance other than the class that it belongs to (as it should be). So the function should look like this: public function purchase(Product $product, Customer $customer) { $productCost = $product-&gt;exposePrice(); $customer-&gt;removeFunds($productCost); $this-&gt;money-&gt;addFunds($productCost); return true; } **But wait!** What if the customer doesn't have enough money? Looks like you didn't even check for that in your original code. So the code needs to be like this: public function purchase(Product $product, Customer $customer) { $result = false; $productCost = $product-&gt;exposePrice(); if($customer-&gt;exposeBalance() &gt;= $productCose) { $customer-&gt;removeFunds($productCost); $this-&gt;money-&gt;addFunds($productCost); $result = true; } return $result; } Ideally *CashRegister* shouldn't even have any business logic. That should be inside a service. Another problem is this: $this-&gt;money-&gt;addFunds($money-&gt;removeFunds($productCost)); Oh wow, a one-liner. How clever. Why the hell is *removeFunds* returning the balance? A function should do *one thing only and nothing else.* Returning the balance is a side-effect. Side-effects are bad. Use another function, like *exposeBalance* to check the balance. Honestly, *this* is what you call beautiful code? Your arrogance demonstrates *exactly* what we've all been saying about you: you're not an expert or a professional, and your code is sub-par. I found the above defects after looking at your code for not even 30 seconds and I don't even consider myself to be an expert. It's funny that you're telling us that we're "spouting nonsense". Is my analysis above what you would call "nonsense"? I've systematically shown you what's wrong with your code, just like what others have done with all of your other examples. Do you listen? No. You call us sockpuppets, trolls, and tell us that we have no idea what we're talking about. That's not the behavior of an expert or a professional; that's the behavior of an arrogant amateur. It's even worse because you're imparting this poor knowledge to novices **and charging them for it.** The "Bank" or "Cash Register" is typically an example for novices to learn about basic OOP concepts and you can't even get that right. Then you have the gall to claim that you're an expert? If you can't even get this right, how can you claim to be an expert? How can you claim to understand security? How can you claim to understand design patterns? **This** is why people say that your code is crap and that you're not an expert. Please, go away. I hope that from this exhaustive post you at least learn *something*. **EDIT:** I asked you some questions regarding your multiauth framework in the other thread and you didn't even bother to reply. Others also posted issues with your code, including one user who tried it out and found a lot of flaws. Yeah, makes you seem like a real expert and professional. **EDIT2:** Here's some more stuff: What if you wanted to use some other form of *MoneyStore*? What if the money information was not available locally, but remotely? Now you're tightly-coupled to a particular implementation. So you should be using an **interface** instead of a concrete type. Now if you want to swap out the implementation, you're in a world of hurt. Next, you have no idea how to use exceptions. **Exceptions should not be used for business logic or as a form of flow-control.** In your original method, you return a boolean and you throw an exception. I don't see any case where you even return *false*. You **always** return *true*. If that's the case, *why return anything at all*? The correct thing to do is to return *false* or *true* depending on whether the operation failed or not. Looks like you're having a hard time getting even simple things like this right. I also took a look at your *MoneyStore* class and it looks like you're throwing an exception when there are insufficient funds. **You should never be doing that!** Not having a sufficient amount of funds is an *expected condition* and not an *unexpected one**. It's only in the latter scenario that you would use exceptions. Instead, you should either be returning a boolean (acceptable in this case), or have a state-inspection function that tells you if there are enough funds available. You can't even get simple things like this right. You have no idea how to use exceptions correctly, and you don't even have a consistent mental-model of your code, which is why you're doing dumb things like returning *true* all the time. Expert indeed. **EDIT3:** Thanks for the downvote. Funny, because I thought you wanted to learn. Guess it's more important that you fool people into thinking that you're an expert, than actually trying to become an expert.
Why not paste what you have already? It's absolutely possible to do. The only slight pause is if they use captchas, which are easy enough to bypass with crowdsourcing or captcha recognition libraries.
&gt; Get some modesty, man. You are not the #2 in Texas so take that off your site. You were the 2nd best who willingly paid for some ridiculous test that nobody else cared about. You know what they say... the quality of a developer is inversely proportional the the number of certificates they have. Bad developers need certificates because they don't have any other way to convince employers that they're worth it. Their code certainly won't speak for their abilities as a developers. Then you have the employers that hire on the basis of certifications... they'll figure out their mistake sooner or later.
Your coworker *might* be right if you *never ever* intend to search that data based on its values, and don't care about the values themselves. But tables exist for a reason. The second you have an SQL query having to read every row, decode the JSON, and compare values, a proper table with indexes and such will blow his JSON mess out of the water. Also, putting each field into its own column gives you the ability to do other stuff, like setting constraints (unique keys? foreign keys? value ranges? enums?). You know, all that stuff that makes relational DBs worthwhile. **Short version:** Friends don't let friends put important data in JSON fields. Perhaps in the case of, say, preferences or something (that if the field's invalid, the code using them just uses some reasonable defaults), i might consider it. But if the data will need to be searched or constrained, or has to be valid...no.
Consider the following example. Table users has what you would expect a user table to have. Table library has a fk uid to user.uid and another column with json data The json data contains all of the individual libraries, genres, and songs belonging to user.uid Php grabs the data, decodes json and displays for the user. When the user makes changes the json is encoded and updated on the library table. His rational was that we reduce time from the database by pushing and pulling json data instead. 
I definitely agree with this sentiment -- especially the point about their ORM -- since I tend to opt for pure sql anyday. For a project that will support a large user base (100k+), Zend is a no brainer for me, but I have recently started work at a small startup, and we went the micro-framework route. We are using [F3](http://bcosca.github.com/fatfree/). At first, I was very turned off by the lack of features, but after working with it for a few months, I actually really like it. There is no fluff (and also very few features), and it has taken me back to my early days of writing everything myself. I would recommend it for beginning, unknown projects if you are comfortable writing a lot of code. 
Yeah, *if* you never need to pull just part of that data, and don't care about constraints, it could conceivably be faster. But if i understand it, you're gonna be pushing and pulling *a user's whole library* each time. If you don't need all that, you're wasting bandwidth (and, of course, the time you spend waiting to transfer all that data for you to pull out 2 things out of, and the time parsing all that). So unless a "library" is one chunk of data you'll never want pieces of separately, the performance argument is bullshit. 
I typically configure IIS with the command-line. I'm so glad that PowerShell has taken off on Windows.
&gt;This code still misses the point Not really &gt;Neither the rollback nor the commit are called in the case that OtherException is executed. No shit. Code execution ends at the point where the exception happens. The exception will be caught by the first block that matches the exception type, and will not be handled by other blocks. If yuo want to handle rollBacks or commits in the OtherException clause, then *handle it*.
There are so many articles on this already... [Jeff Atwood](http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html) [Mark Ashley Bell](http://markashleybell.com/articles/why-we-should-reinvent-the-wheel-occasionally) [Lea Verou](http://lea.verou.me/2012/04/in-defense-of-reinventing-wheels/) [more](http://pabdulin.blogspot.com/2012/04/why-you-should-reinvent-wheel.html) [and even more](http://www.mostlymaths.net/2010/03/8-reasons-for-re-inventing-wheel-as.html) 
if only there was some way to found out.
That's not intended to be a docblock. It's an inline type hint for situations where the IDE can't infer the variable type from context. 
Fundamentally speaking, OOP in PHP is no different than what is available in Java and C#. As a CS major, I would assume you already have the academics of OOP grasped. Just apply these design methodologies using PHP syntax.
Not sure, but maybe you mean this article: http://blog.ircmaxell.com/2012/07/oop-vs-procedural-code.html It's about OOP and procedural though (functional is a different concept yet).
If you are using PHP for webdev: Remember that the web is stateless. So it is really hard to work with objects as if you were working with them in JAVA, C# or some other language. So my advice would be to look into programming your own OOP lightweight MVC. That's a good place to start practicing OOP PHP! :)
According to the linked site, foreach is the slowest.
Maybe this will get you started: http://en.wikipedia.org/wiki/Comparison_of_programming_paradigms
It's ok, [PHP 5.3 introduced goto](http://php.net/manual/en/control-structures.goto.php). 
First, thank you sooo much for the quick reply. I take the SQL query into my phpmyadmin and it runs successfully, so I don't know why once I put it into my php file it fails. If you can't tell I am not a php sql person :s
mysql_query returns a resource, not the first column selected. Please see http://php.net/mysql_query. There are examples there. Note mysql_query() use is not recommended. I don't see $UserQuery defined anywhere and assume that it's not defined. The following is untested but is just about right. I reformatted your code to be a bit more readable &lt;?php include 'conn.php'; $UserAlias=$_POST['UserAlias']; $UserNumber=$_POST['UserNumber']; //CHANGE DATA BASED ON WHERE THE USER WANTS TO PLAY if (isset($_POST['PlaySeed1'])) { //UPDATE MySQL DATABASE WITH USER DATA` mysql_query("UPDATE rng_table SET r1m1_a_user = 'STEVEN' WHERE table_num = 1"); mysql_query("UPDATE rng_table SET r1m1_a_num = '7' WHERE table_num = 1"); //CALL DATA THAT WAS JUST UPDATED AND SAVES AS VARIABLE TO BE DISPLAYED ON FOLLOWING PAGE $result = mysql_query("SELECT r1m1_a_user, r1m1_a_num from rng_table WHERE table_num = 1"); if ($result) { $row = mysql_fetchrow_assoc($result); var_dump($row); } else { throw new Exception("Query error: " . mysql_error()); } } ?&gt;
The book that helped me grasp OO the best was actually the "Gang of Four" book.
Good catch! I didn't see that originally as I understood the issue was that it was not updating the table correctly.
You're wrong. The type hint *is* part of phpdoc: http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.var.pkg.html
Goto gets an undeserved bad rap. For contrast, see [what Linus thinks of it](http://webcache.googleusercontent.com/search?q=cache:AfUzQhqtmO4J:kerneltrap.org/node/553/2131). And a great explanation by Scott Ladd: &gt; Your attitude against "goto" is perhaps based upon an excellent but dated article, "Goto Considered Harmful", written by Edsger W. Dijkstra, and published by the ACM in 1968. (A recent reprint can be found at http://www.acm.org/classics/oct95/.) As you can tell from the date, this article predates modern programming languages and idioms; it comes from a time when Fortran ruled, and before Fortran 77 provided significant tools for avoiding spaghetti code. &gt; A "goto" is not, in and of itself, dangerous -- it is a language feature[...]. Like pointers, operator overloading, and a host of other "perceived" evils in programming, "goto" is widely hated by those who've been bitten by poor programming. Bad code is the product of bad programmers; in my experience, a poor programmer will write a poor program, regardless of the availability of "goto." &gt; If you think people can't write spaghetti code in a "goto-less" language, I can send you some *lovely* examples to disabuse you of that notion. ;) &gt; Used over short distances with well-documented labels, a "goto" can be more effective, faster, and cleaner than a series of complex flags or other constructs. The "goto" may also be safer and more intuitive than the alternative. A "break" is a goto; a "continue" is a "goto" -- these are statements that move the point of execution explicitly.
Did that work? I wasn't 100% certain it would. My experience with Composer is fairly minimal, and I've never used it in any environment where I don't have the ability to run it as intended.
A little late to the party, but the reason they couldn't just switch back was because they made an architecture change. They switched from using a traditional relational database to Cassandra (iirc). Python vs PHP is a moot point when your old application just wont work with the new infrastructure you have installed with out considerable revamping.
sorry, I have been slacking off and got deviated to some nodejs experiment :-), will do it on Monday.
Words of wisdom. If you build a large php web application like you build a large java application, your memory usage and page load time may cause your application to run as slow as extra thick molasses in february. IMO objects are to be treated as a luxury in php... not as an excuse to practice design pattern-itis.
Agreed! Although objects have their place. For instance, in an MVC framework, a controller is to be treated as an object. One thing that I personally like doing is to build classes as containers for functions. For instance, I have an input validation class that contains different functions for validating different input fields, imageresizer class for image manipulation, etc. OOP in this case is used to structure your code/application and have some of the code become reusable. 
&gt;So there you go, you don't know everything about IDE feature sets. Wow, way to be an ass. Okay, so that's a feature of Zend Studio 9. What relevance does it have to PHPStorm? PHPStorm's website clearly states the following: &gt;"PhpStorm editor respects PHPDoc in your code and provides appropriate code completion suggestions based on @property, @method and @var annotations." If you want type hinting, then you gotta adhere to the right syntax. If you're using the wrong syntax, then you can't really complain that type hinting doesn't exist, because it does.
The easiest way that I know of would be to have the individual pages as HTML then use wkhtmltopdf or something similar to put together the selected pages as a PDF. 
If you're going to use LMGTFY then at least do it right... [Like so.](http://bit.ly/OBQJ9S) Plus, you don't even need html2pdf. PHP (since version 4 I think) has PDF abilities built in. [The docs are quite verbose too.](http://php.net/manual/en/ref.pdf.php)
We use [pdflib](http://www.pdflib.com/) at work. I was not there when they made the decision, and there's probably a better package out there, but it does work.
This is the way we've done it in the past at my workplace. Works well, no crazy "drawing with code", just make a template and hand it over to wkhtmltopdf to do the heavy lifting.
If you're pushing the load linearly via an actuator (think of a hydrolic ram on one side), then it will work better than a round wheel. The reason is that the horizontal load generated by the square wheel is absorbed by the actuator. Since horizontal "sliding" is not possible due to the actuator, the square wheel will always orient itself such that the axle is at the lowest possible position. Therefore, the square wheel will provide a perfectly smooth transition. Any deviation from the animated course would therefore be counteracted by the minimal position (by the force of gravity). So the original point stands. The wheel is only perfect for the preconditions that it was designed for. We can create other conditions for which the wheel is indeed very ill-suited, and other models (like a square wheel) are ideally suited. That's the point of the whole post. Not that a square wheel is going to be better in all (or even most), but that some problem sets are better solved with one (no matter how narrow, the point is that they exist)...
You can use just the Zend Library and not the entire framework. Even just use the classes that you need.
I think it's more sad how many developers are willing to jump on a bandwagon to sound knowledgeable, without and real understanding of the underlying argument or how/why/when it's applicable. 
We use [TCPDF](http://www.tcpdf.org) for our PDF needs. It might be getting a bit long in the tooth and we haven't really looked at the alternatives, but it's served us well. 
What's wrong with using while($cnt &lt; 3)?
If you run a LAMP server, you could install [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/), then execute that to concatenate pdf files. $yournewpdffile = shellexec('pdftk file0.pdf file1.pdf file2.pdf cat output newfile.pdf') 
If it is being pushed (rather than the wheel being rotated at the axle), there will be nothing but friction and rotational momentum to help it rotate when it is "straight" (at a peak). It will rotate less than required and will smash into the next bump.
The general idea is to make code reusable if you can. Obviously some code (if not most) will never be used out of the original website, but if you can extract the code that does the most generic work into a class and have the ability to reuse that class in other projects then you've done yourself a huge favor. You'll commonly see this with things like User classes and Database wrappers. I've done this with a cURL class that has been incrementally extended to do almost any php cURL call with one line of code (multiple lines if you break it up).
Why can't this be done using functions? Why classes?
I highly recommend PHP Cookbook by O'Rielly. They give solid examples of OOP techniques put in practice in PHP.
We've used ezPDF at our office. ( http://sourceforge.net/projects/pdf-php/). It was a bit difficult to wrap my head around at first. 
To my knowledge, nothing, except that an index with a .html extension will take precedence over a .php, so if you have both in a directory, the .html will render if an extension is not specified. For example http://mysite.com will render mysite.com/index.html, not index.php.
The main difference is that one is an HTML file, the other is a PHP file. For the most part, HTML files are static markup, while PHP is used for dynamic scripting files. You configure your webserver to run PHP files through the PHP parser and output HTML, which is sent to your user's browser. HTML files, on the other hand, are served directly to the user, without being ran through any parser. You can customize your webserver to do anything you want, but in general, what I've described is, at a basic level, how it works.
Produce each page as a HTML template, then concatenate the ones which are checked and process that HTML with dompdf - http://www.dompdf.com/ It supports HTML and most CSS features, including the ability to force a page break (page-break-after: always).
This tutorial really cleared up how OOP works in PHP when it comes to making a website. 
FPDF.org 
sorry if i was a little confusing...i was just referring to the ability to select text for copy/paste in the PDF, not necessarily editing the document itself.
One is (presumably) a PHP file and the other is (presumably) a HTML file? If you're asking why one is parsed as PHP and the other one isn't, that's up to your server configuration. In the case of apache, for instance, it binds the extension to the PHP module. Typically, you'd want to bind .php to that module, but you could technically bind any file extension you want to it, including .html files (though, I'm not sure *why* you'd want that). As for which takes precedence as a directory index, that's also up to your server configuration. 
I can also recommend Prince. Easy to use, with beautiful results. 
Zend Framework doesn't ship an ORM.
I would argue that if you want a "good" job, you'll want to master the patterns behind the frameworks rather than the frameworks themselves. This allows you to see right through all of the marketing BS that in the end is more of a liability than a useful feature. Once you learn the patterns, the need to ask "which framework should I..." will slowly fade away. That being said, the source code of frameworks are excellent places to learn some of these patterns. In that case, I highly recommend Symfony2 or ZF.
Note that the "free" version of FPDI doesn't work with all PDF documents. If the PDFs you're manipulating are all ones that you created yourself you may be in the clear, but if you're dealing with PDFs created by newer versions of Acrobat and Office you could run into problems. I've found [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) and/or ghostscript to be much more reliable at merging/concatenating PDFs than any of the free/open php classes out there.
If you already have the PDF and you want to make fields fillable you should look into using FDF files. It combines with the PDF file with the data from the FDF. You can just save these FDF files if it's locally but if your letting people download them then there's a bunch of libraries that will combine and just return the final PDF. This is probably the best way to go if you already have official forms created and just want to insert the values instead of finding all the x and y coordinates you can edit the fields right in Adobe. 
It is also not a relational database management system. Zend_Db is an abstraction for accessing and manipulating the RDBMS. The difference is that one is responsible for your data storage, the other is responsible for allowing your application to access that data storage.
Ive been developing software for 25 years, I dont need any bandwagons. My point was, whilst GOTO is not always evil, its a language feature thats not needed, and more often that not, using GOTO suggests you needa to just modularise your code a bit more. Lets not forget that when you strip away all the theory, the whole POINT of OO methodology is ultimately to aid in managing and developing increasingly complex software, and GOTO does nothing for this goal
Check out http://opendevice.blogspot.com.au/2007/03/merge-pdf-files-on-linux.html
Unless done in very elaborate fashion, this is hell on people who work in multiple tabs/windows.
No, it's terrible. It's very superficial and doesn't actually cover what OOP is. This isn't OOP, it's just using classes to group tentatively related functions. They very briefly give a passing mention to some concepts such as abstraction and encapsulation but they don't do them justice at all. They don't talk about dumb classes or dependencies or structure at all. The example they give for classes are down right bad contains quite severe errors. For instance what happens when a developer forgets to use setPage? Class csite depends on cpage being set so it should require this in the constructor and fail if it isn't present.
Could you possibly recommend something along the same lines that does a better, more thorough/accurate job? Criticism of things like this is welcome and useful, but even moreso when an alternative/improved option is presented. I'm a newbie myself, and self-taught, so any direction from somebody experienced and knowledgeable is appreciated.
Another vote for Zend. I just use it to create custom certificates from a base PDF file. Very easy if you look up an example.
pdflib is def a good solution. But.... it is expensive. And for that reason I'd go with fpdf which is essentially the open source version of pdflib.
Princexml is $3800 for a *single* license. Crazy stupid
Seems perfect. Bookmarked for when I need to make PDFs again.
If I could I would have. I used to have a bookmark I sent to people but it looks like the site is no longer online.
I don't think anyone's going to pay that for a 5-page site about their pet massage service, but if it's an elaborate site with high uptime requirements that would otherwise require them to hire/train someone in-house to manage, it's well worth spending a comparatively small sum to have an outside expert do it.
WTH does OOP on websites even mean? 
Interesting. Could you give me an example of a website like that? It doesn't have to be one you made, a popular website would do
Very elaborate? Just create an array of valid nonces in the session. Then check if it exists in the array on validation (being sure to remove it when you check). Easy as pie...
It almost seems too simple...
I can't even find anything on "dumb classes" when I google it. Instead of decrying this tutorial, link a better one. It's a BASIC tutorial, I probably should've mentioned that. More or less, it helped me piece together information I've learned on other tutorials and examples that didn't make sense at the time. As a new guy to OOP, this tutorial cleared up a TON of stuff for me. You're nitpicking about what's wrong with the site. I can just add a function that the constructor calls to check if cpage is set, would that fix the issue that you have there? Of course it has a passing mention of some things, I consider this a beginners tutorial.
One of my favorite parts -- the [constants](http://www.php.net/manual/en/class.datetime.php).
[Slim ](https://github.com/codeguy/Slim)looks alot like [Silex](http://silex.sensiolabs.org/). Well, no surpise, since both seem to be inspired by Sinatra. But I think Silex is superior in the way it builds on the solid Symfony2 components.
One doesn't need to be superior, and you'll never work out which is right for you by guessing. Silex uses lots of common code. Slim uses less code. Thats a pretty big difference already.
look up on "model view presenter" what you really wish to accomplice is to separate the gui and the business logic 
Can't tell if sarcastic or not.
You do understand that the client-side and the server-side are two distinct domains, right? You cannot read the client's DOM tree from the server. You need to post data from the client to the server in order to make client-side data available to it. 
PHP is a server side language. It's usual output is HTML in text format. This HTML is then rendered on the client side by browser to produce visual elements you see. So PHP will have no idea how page actually looks, so there is no easy way of doing that. Technically you can install rendering engine on your server (say WebKit) then use php to feed some html to the webkit, and get the rendered image back. Thou I suspect that this might be a bit above your skill level ;) 
When its about saving an Image, I would recommend using the HTML 5 Canvas to work with. All the coordinates and their attributes can be sent to PHP wich in turn can create you an image with the GD2 Library.
I take it this may be way beyond your skill level, here is another way you can do it... 1. Use something like http://code.google.com/p/wkhtmltopdf/ to generate the DIV in a PDF. 2. I'm not sure if there is a lighter-weight PDF library, but you can use the OpenOffice CLI to generate a screenshot of the PDF.
 &lt;?php for ($cnt = 0; $cnt &lt; 3; $cnt++) { $d = file_get_contents($url); $return = json_decode($d); if ($d !== FALSE &amp;&amp; json_last_error() === JSON_ERROR_NONE) break; error.log('failed to get location data!'); } 
exactly what data do you think you'd pass to GD Lib to process? therein lies your problem...
I do work for a company where our interface stacks png images to allow customers to design custom rings. We were able to just save the image names when they paid, but recently we implemented a dynamic text feature and now use ajax to pass the image and text data back to a php page on our server to render an image so that we can send it along as a proof in the client's email receipt.
Ok, you have two options... You implement the text editing using canvas. Basically an absolutely positioned div acts as the trigger above the canvas. And then you write the text to a canvas object. However, this means everything else needs to be passed back in the canvas object as well. Luckily, canvas has a function [that makes this easy](http://tutorials.jenkov.com/html5-canvas/todataurl.html). Now, the other method, and what I would do, would be to convert all information to a json object. Basically, you have modules defined, so you know the size. Something like this : [ { name : 'mod1', content:'sometext' } { name : 'mod2' } { name : 'mod3' } { name : 'text', content : 'some content', top : 30, left : 40 } ] This could come from something like &lt;div id='content' style='position: relative'&gt; &lt;span class='module' id='mod1'&gt;Sometext&lt;/span&gt; &lt;span class='module' id='mod2'&gt;&lt;/span&gt; &lt;span class='module' id='mod2'&gt;&lt;/span&gt; &lt;span class='text' style='position: absolute; top : 30px; left: 40px'&gt;some content&lt;/span&gt; &lt;/div&gt; You could use this to get the data back up to your servers. To make an image of it, write a simple service that you can then target with a screen scrapper. So, either you make everything canvas or you pass back a template you can then render. Only two options.
If you're trying to grab a div as an image, you're probably taking an inefficient approach to the task you're facing. What is it that you're trying to accomplish and why? If you can answer us that, we can help you come up with a better, more efficient solution than running a browser engine on your server to grab screenshots.
CTRL+F, "Canvas", Upvote. Moving on... Edit: Since I'm getting downvoted, I guess I'll elaborate. You can export whatever is going on in Canvas as an image. Try it in Firefox, right click and save. With a little form element, some javascript, and a little PHP you could save it and upload it. You people need to think outside the box ;) Edit 2: From 3/6 up/downs to 7/6. Sweet, sweet vindication... &lt;3 /r/
Use canvas, draw the div using its X,Y, W,H coords and send the data:source to the server where you can save it with PHP. Capice?
excanvas my good friend
Haven't heard of it.
http://excanvas.sourceforge.net/ while you are at this, look into this as well http://css3pie.com/
Thanks man, I'll check those out.
Kinda off-topic, but I don't understand why people make their websites rely on Javascript this much, and for no apparent reason. The formatting of phpmaster.com is really screwed up if you have JS disabled.
Augh! Do not make separate methods for each attribute for getters and setters. PHP has a magic __get and __set function allowing you to create fake public accessors. For example: class a { private $_attributes = array(); public method __get($field) { if(isset($this-&gt;_attributes[$field])) { return $this-&gt;_attributes[$field]; } else { return null; } } public method __set($field,$value) { $this-&gt;_attributes[$field] = $value; } } // usage: $a = new a(); $a-&gt;anyAttribute = 'blah'; // sets private $a-&gt;_attributes['anyAttribute'] to 'blah' There are ways to abstract this even more but this is way cleaner and way easier to deal with.
The magic __get and __set methods make your class interface unclear/obscure. I never use them. Plus they are slow.
I think you need to go back to basics and get a basic understanding of how PHP/HTML/Javascript work, particularly in regard to server/client-side.
I've been looking for a way to do this for a while, thank you. PhantomJS is working perfectly.
"Encrypting a directory" is quite broad. Could you be more specific with what will happen? Basicly, if you can do something in commandline then you can do it in PHP, as long as you have the correct permissions and you are very careful with your variables. Please see [escapeshellarg](http://php.net/manual/en/function.escapeshellarg.php) and [escapeshellcmd](http://php.net/manual/en/function.escapeshellcmd.php) . Also look at system,exec,shell_exec, and understand the differences between them. TLDR; http://us2.php.net/manual/en/ref.exec.php
The contents of a &lt;div&gt; can be "sent to PHP" as well. You would just use the innerHTML of the parent div and the CSS applied to each element. Granted, it's much more data, but we don't know what his system is, but it sounds like they are manipulating the DOM which is a huge difference from manipulating a canvas, and switching systems may not be a possibility.
Very cool! I never would have seen it buried away there. I'm going to get it setup on my intranet right now. I could probably think of only 1 or 2 times in my code career that this would have been helpful, but it may be a case of finding the tool before the task.
If you can just pull the user's password out of the database, you're doing it wrong and any form of encryption is completely pointless. What I've done for a similar project in the past is to store the user's password hashed in the database (look into bcrypt), and when the user logs in we take their plain-text password (this is the ONLY time you should have it) and derive a key with it using PBKDF2. That key is then used to encrypt/decrypt the user's data. The caveat here is that if the user changes their password in the future, the key will change as well and you'll need to have a process in place to re-encrypt their data. 
I would check the annotations (oh.. no source control?), then bring it up to a engineering manager (oh, the manager has never written code?), and finally schedule a meeting to discuss removal and what is causing the error log to fill up (oh.. not important enough since it 'works'?). Screw it, I'd quit. The industry is ripe for anyone who knows what they are doing.
yes the passwords are stored as a hash, and yes they want to encrypt and decrypt the directory as the user finishes using his own files. I, personally don't find it extremely efficient either but it's what they want. :/
Hmmm that does sound like a good plan, the passwords are stored hashed, so no plain-text passwords will be extracted. So basically what these guys want is to extract the hashed password, use it to encrypt the user's directory which contain the user's files, then when the user tries to access it, decrypt it with the same key, allow the user to continue his work, then when he finishes, encrypt again. It's a very inefficient process from what I can gather, but as I said, this is really what they want and I, unforunately, don't have enough of an authority to challenge their opinion :/
Sorry for the vagueness, what they want is to extract the hashed password of the user that owns the directory (the users basically modify pdfs so in this case it would be the document "owner's" password), use it to encrypt that user's directory, and in the same way, once the user tries to access any file in that directory, decrypt it with the same key. 
&gt;Yes you can. No, you can't. That's not reading the client's DOM tree from the server. Your example is posting data *from* the client *to* the server, which I addressed in the **last sentence of my three sentence long comment**. Did you even read it? 
This sounds like a recipe for disaster. I realize from your other comments that you have no real say in the matter, but someone needs to tell your client that this approach is not only insecure, it is un-secure. The perceived security benefit here is nominal at best, and opens up your server for some serious DOS attacks. Encrypting files is computationally expensive as hell, and should not be done on the fly. Why not just store the PDF files in a database as BLOBs? If your client is insistent on this approach, just be sure you are clear of liability when it blows up.
This is not an easy wheel to re-invent. Secure file management is not a strength of stateless architecture. There are third party packages for online file management. I can't recommend any offhand - It's been a few years since I needed to do something like this - but there are probably some decent ones out there. I suggest you look into those.
What is their reasoning into removing the error log? I can't wrap my head as to why they would. 
You need to plant your foot in their asses. I'd revoke shell access for any dev that committed something like that.
Why should he quit? Its the other people who don't know what they're doing... 
If it were me and I could demonstrate that the poorly written code affected the company's bottom line, then I would absolutely put my foot down and provide a detailed explanation of the hows and whys. If it's purely a philosophical difference of how to code, I'd probably just bite my tongue and enjoy the cushy job. :)
Pair a userid, password and a totally unrelated key in the database. Use the same key to encrypt the data all the time regardless if the user changes the password many times a day. In other words, don't use the password to encrypt the folder, use the key.
It's also going to wear the disk unnecessarily and bottleneck the I/O more when turning off logging will have the same net effect.
Yeah, if they own and pay for disk replacement, showing them the stats on the excessive wear that writing and erasing excessive data will cause cost-wise over time might get their attention. But still, just turning the error writing off is still not the proper way to fix this. Using the error log to track down the offending code and fixing the code it the correct way to stop this.
In the modify loop, yes. Not the read loop.
Omg omg! Are you all serious? file_exists and filesize are I/O operations what means they are quite expensive. The best part would be to cleanup/backup log file outside php application, e.g. write cron script which compress log and moves to some directory. Run it daily.
I don't think they're serious, mate. :)
&gt; when the app is in production they need to be turned off It is definitely *[not](https://github.com/php/php-src/blob/master/php.ini-production)* standard practice to turn error reporting or logging off in production. You might be thinking of `display_errors`, but it's hard to say.
Errors should still be *logged* in production, just not displayed on the front end.
Isn't this just a POST - Redirect pattern? It's checking that all the forms are valid, if they are then I assume 'do stuff' saves things to the database, then you get redirected to the results page. This allows the user to fill in a form, hit save and then hit F5 F5 F5 and everything works. The browser doesn't keep POSTing the old form details when you refresh the page.
That is because CodeIgniter does its own logging for some reason. You'll also notice on the front end any PHP errors are displayed with their own style - CI basically intercepts all errors and does custom handling.
That doesn't make sense. But without seeing the rest of the code all I can assume is that it has been refactored from some old code and that is a line that snuck through. I've seen people loop over the $_POST and escape items and take them out of $_POST and add them into something like $_SAFE (which is retarded - escape at the last possible moment) ... but this stupid way of doing things could have been the norm, then they got more educated and moved to ZF but part of the old code got left in. I don't think this required a post to /r/php, you can just fix the code and get on with your life :)
 display_errors should be disabled in production as it can expose vulnerabilities of your software (i.e sql injection). Disabling error_reporting is usually counter productive as it makes it impossible/difficult to diagnose problems including possibly security vulnerabilities. If somebody does find an exploit in your application you want to use the logs to assess this. As others have mentioned, logrotate (a linux utility) is the usual way of handling log file size. You can configure it to archive old logs for a certain period of time whenever they reach a certain size/age, and purge extremely old logs. A side note of advice - choose your battles and be careful how you phrase your suggestions when dealing with your employer. Politics is unfortunately a reality of any job. Telling your boss he's a terrible coder and doesn't know what he's doing (true or not) or alluding to that is not in your best interests. Clearly the guy who wrote it that way in the first place didn't understand WHY its a bad idea so you need to first convince them that it should be done differently without being patronising. Also be careful with the kinds of comments you make online, would be very unfortunate if your employer frequented /r/php and your comments landed you in hot water. **EDIT:** Updated to remove incorrect advice about error_reporting 
Assuming you're running on *nix. Having every script you run check for the logs and deal with them accordingly is totally unnecessary when the host environment already has a mechanism to do exactly that.
Didn't know you could use while on a array. Anyway I'm not sure what this code does better than the standard if (($this-&gt;getRequest()-&gt;isPost()) &amp;&amp; (!$form-&gt;isValid($_POST))) { /* herpderp */ }
Then you're in a perfect position to demand something better :) Outgrowing a position is *extremely* satisfying :D
Apologies, you're correct - I'm thinking of display_errors(0); I'll update the original comment
rename it to size_and_delete_log_check_error(), write it in C and make it a core PHP function, then include 3 aliases to the same functions, two of which have arguments in the wrong order, include it as two different options in php.ini by default, throw a warning if it is called after any output
I did, but then I'd assume you'd actualy use it to loop through it, instead of just running it once if there is a post.
Removing their shell access is why someone would write crappy code like this in the first place.
Yeah, you'd think it would iterate, but it doesn't because it either breaks if the form isn't valid or it redirects if the form is valid. So in this context, while($_POST) is exactly the same if($_POST)
I would explain to them that logs are there to help you eliminate errors. They won't fill up if you remove the reasons for them filling up. They're a symptom, not a problem. 
This is a really great idea. If anything, I'll have incentives to not only fix, but stop causing, errors just to avoid having the tickets pile up
I hope so :-)
It can be used so that instead of too many nested ifs, you use break to act as kind of a goto while($_POST) { if (!condition1) break; //something if (!condition2) break; //somethingelse break; } //something that runs regardless of $_POST or failed condition1 or 2 echo "dont care if it was post or get, this gets run" the break acts like a return statement. 
The logs filling up are the symptom of a problem that isn't being addressed by simply deleting the log. Since this particular check is based on the size of the log every time that script happens to be logged, it's going to be called more frequently as more error-triggering code and the traffic brings them is introduced into the system. You're going to take a performance hit from all the disk writes, and as /u/JordanLeDoux pointed out, you'll thrash your mechanical disks.
TIL
like PHP in the garbage
To be clear, I'm not in favor of permanently shutting off error logging - it's a valuable tool to have in debugging code. But if you delete the error logs every few minutes, I can bet money there's no process in place to ever *review* the logs for issues. But, if you never look at them, and they're gone every 5 minutes, there's pretty much no point in logging.
No, I unfortunately can't say that I have. You might check out Zend_PDF (from ZF1) or Zend\PDF from ZF2 https://github.com/zendframework/ZendPdf
The script does an API-call for every single word. That does not seem, eh, efficient. 
You need to have a talk with the sysadmin about how they set up their servers, in addition to the devs about ignoring errors.
Will check it out. Thanks.
My question is how do you up the pay grade from that $20 area? 
You want a "storage key" and a "session key" (call them whatever you want). Randomly generate a storage key; use that to actually encrypt data. Generate a session key from the user's hashed password (and other relevant information). Use the session key to encrypt the storage key and store it in encrypted form. When the user logs in, you generate the session key again, decrypt the storage key, and then decrypt the data for the user to work on. If the user changes their password, all you need to do is regenerate the session key and the encryption of the storage key; you don't need to redo the encryption of the data.
the thing is though, this isn't an official API
well, because it is much easier to use, archive etc ...
But while($_POST) won't loop through the post variables. The while loop expects an expression, and for that expression to evaluate to true or false. In this case, since there's always a $_POST array, regardless of the request method, it will evaluate to false if the array is empty (as all php arrays will do) and true if it's non-empty. So, it's just a dumber way of checking the request method. So, really, it should be more like if(strtoupper($_SERVER['REQUEST_METHOD']) === 'POST'){ } 
Wouldn't it be better to have a downloadable file with all the "profane" words? Anyone know of any website that has something like that? Something that can easily update in the future with just a file download.
 while($_POST) Doesn't loop through an array. while() expects an expression and will loop until the expression evaluates to false. That's why there's breaks in there. Empty arrays in PHP always evaluate to false and non-empty arrays evaluate to true. (usually) But you're right, it's just plain bad coding. The author likely came from perl where such an expression wouldn't be nearly as bad as it is in PHP.
I've said it elsewhere, but I'll repeat it since I'm not sure if you'll read all the comments. while($_POST) won't loop through the post vars without setting an iterator or something along those lines. while(expression) will loop until "expression" is false. Empty arrays evaluate to false in PHP, which is why your author put the "break" statements in there. To stop the loop from running forever. You can feel confident refactoring that code to something more stable, like testing for the request method. 
There are people who will argue that it is broken to send HTML to the client, instead of just sending data and having the javascript structure that into an HTML page.
I'll concede to that point. Sometimes the best solution is the one that currently functions when money is involved.
Oups you're totally right. I was thinking of something like "while(value = each(array))" that I read about earlier, not the same thing at all.
There are I believe 18 different numbers that would be added together. All this would take away from a total budget. Really straightforward internal app. **EDIT: Thank you for pointing me towards the right direction. I was not asking anyone to program anything. This explanation was exactly what I was looking for and you are very helpful.**
Do you know what guidance means? Did I ask you to build anything? No. &gt; but we're not going to build the application for you Didn't asking you to. &gt; Check the first few results in google and check the manual before posting questions is all I ask. Surely that's not demanding too much. You know... Web development is kind of special in that it involves a lot of different standards. HTML/CSS/jQuery/Javascript/mySQL/PHP etc. So, for all I know, what I explained could be easily accomplished with a common Javascript feature or something like that. Yes. I have googled about. If you didn't like my post, then downvote it and move on. No need to get on your high horse. &gt; until you do me the courtesy not going to lie, I'm a bit offended by your tone. 
&gt;not going to lie, I'm a bit offended by your tone. My tone is fine. Yours, however, is a hundred times worse. I mean, look at that snarky response of yours. &gt;Do you know what guidance means? Yes I do. It means pointing you in the right direction. However, that's not what you're asking. You're asking us to pave the road for you. A question like this doesn't need guidance, as it's trivial and extremely easy to find out on your own. Here, let me show you: https://www.google.com/webhp?hl=en#q=php+mail &gt;No need to get on your high horse. High horse? Do you even know what that means? All I am doing is asking you to pay the common courtesy of not wasting our time with trivial questions. Again, it's the top result in google for goodness' sake. 
The drawback to this methodology is that you have to *lots* of hooks all over your code to account for practically every single step of the process, and you must call your callback-checker at every single event. This means you end up with a lot of extra overhead and wasted CPU cycles - APC or other caching is a good idea in these systems. I also highly recommend coming up with some sort of faux-namespacing of your events to avoid collisions. Wordpress uses this sort of event-driven system for its plugin architecture, and it's actually one of the few pieces of the system that works really well. Unfortunately, they don't have nearly enough hooks in place for every single place that it would be useful, so you still end up mangling things to achieve your ends.
Drupal does a similar setup with their hooks and it works very well. The syntax is very different, but the essential concept is the same. Edit: Whoever downvoted this should come back and speak their mind.
I agree, asking how to mail something in PHP is really trivial. Especially when the manual for mail() is the first result on Google for "mail php". I think maybe we expect people trying to get into a language to at least attempt to Google their problem first before asking for help.
Either that, or add hooks at the most basic level. Symfony 2 operates with an event system, but there are only a handful of events that allows very, very powerful customization because they are so low-level.
Don't look at mail() directly - look for a tutorial on Zend_Mail or some other mail class that can deal with html, attachments, bcc, smtp settings, etc all in an OO fashion. the mail() function is extremely barebones, and may leave you open to a security hack if you use it or configure it wrong. there won't be much of a backend beyond taking values from a $_POST or $_GET ($_POST would probably be better) and mailing them. I'd suggest you'd still want to log the values and email for your own analysis later.
It really doesn't make sense unless you're writing some kind of processor/library. The visible side of PHP *is* the browser. If you don't want to code the front ends, grab some kind of boilerplate like HTML5 boilerplate or Twitter bootstrap, it's got most of the front end elements you'll need. I would spend some time at php.net. Their documentation is pretty comprehensive, and the community is very active. You will still have to learn how PHP elements interact with the HTML stuff, but that shouldn't take you more than a couple of days.
This is why I'm hoping PHP gets a proper native AOP implementation. But I'm not holding my breath.
Thanks for the reply (and happy cake day!). That's kind of what I thought. I've been looking into PHP because I see a lot of job for junior developers and although I'm only minoring in CS (math major) I thought it'd be a good way to get a summer/part time job (since math doesn't have many opportunities at the undergrad level and C programmers are usually required to have a lot of professional experience). I might just use HTML5 boilerplate or the Twitter bootstrap to get the design out of the way while I focus on the PHP behind to build a few projects I could show. The language itself is fairly easy, it's only a question of getting used to web. I guess in the industry it works a bit differently. The programmers receive the front-end and add the code to it, assuming the team is big enough and they don't have a few guys work on the whole thing. Having most, if not all, of my experience writing low(ish) level stuff in C made me forget that in other fields the user interface is pretty important. Thank you!
Cool. thanks for all the info. very helpful.
Check out an MVC framework, such as Zend, CakePHP, CodeIgniter, or one of the other 10,000 others out there. MVC separates the logic into models (handle the database back end), Views (handle the display of the information to the user) and Controllers (handle the logic). you will like the models and controllers. Don't worry, you're not the only one, I'm more of a back end person myself (my "designs" look like they're from about 2005). Also, find a person to team up with who is good with HTML/CSS, and you've got yourself a winning combination to freelance. The designer gets to design, and you get to program!
Lots of good work for WordPress developers. Consider using WordPress and dig into the plugin API to create a plugin of your own.
Twitter Bootstrap is nice because it's very flexible, but all the tedious shit is already done for you. You can quickly customize global colors and such in the .less files and recompile the CSS, and then you never have to worry about it. When you code the HTML, you can just quickly add styles by writing things like &lt;div class="span3 offset4"&gt;&lt;/div&gt; rather than dealing with positioning divs manually and all the other banal CSS design bullshit that most programmers don't care for (including myself). This will greatly expedite your front-end development while still leaving it in a state that's easy to tweak and customize style-wise in the future if you feel the need. Here's a quick blog post about taking a site from dev to live using bootstrap: http://blog.kippt.com/2012/04/26/building-with-bootstrap/
That's... just... horrible - lol. Sorry - I'll be helpful now: I usually write my own, as I've done it for so many years now it's just second nature. Couple things that could be improved on your snippet: - (as zapt0 said) The sessions are insecure. I would suggest storing the user's ID, and a checksum (I like to make mine using a combination of the User's ID, name/e-mail and a salt.). Then, each time you check the session, make sure the checksum is valid. - For simple things, I like to make a "Active_User" object, that way I can easily reuse the code, and it makes it easier for anyone who has to handle my code after me. Something like the following: if($Active_User-&gt;is_auth() === true) { $user_info = $Active_User-&gt;get_this_dudes_info(); } else { // Handle the error however you want die($Active_User-&gt;auth_error()); } 
There's a phpDoc tag specifically for adding "magic" properties to a class's documentation. The unclear interface argument is a bit weak when you can generate documentation at will. Frankly, though, if you have dozens of getters and setters, you're doing something wrong anyway. "[Tell, don't ask](http://pragprog.com/articles/tell-dont-ask)". Those objects should be doing stuff for themselves, not passively sitting there waiting for you to perform some procedure with their guts. The sole exception would be types whose whole purpose is to ferry data around...and magic properties can actually make that easier.
This isn't true. I've worked on several large projects where the front-end is essentially completely separated from the back-end, and I've needed to do absolutely zero HTML or JS. On small projects they tend to be more intertwined, but with large projects it's entirely possible (and encouraged, for good low coupling) to have them almost completely separated.
Not really when said person is doing this specifically for a summer job for experience. Wordpress and Drupal are probably the two best things you can learn if you're purely in it for a summer job.
This may not be something you're into, but check this out for a fun project to learn: http://www.elated.com/articles/cms-in-an-afternoon-php-mysql/ Basically runs you through building a basic content management system. 
Or a career.
As others have said you need to get over your aversion to HTML and CSS if you're going to do any kind of web development. Honestly while HTML and CSS have their issues, so does PHP itself. There's no sane reason to embrace one but detest the others. Man up. ;)
How are the sessions insecure? They are server side cookies storing that value, not $_COOKIE. How could a user possibly use that as an attack vector? You call that code horrible and then you produce code that uses die()? Is that some sort of joke? Please stop using die(), it produces un-catchable, un-logged, abrupt ends to PHP scripts.
True, and you SHOULD have your project wide command line scripts written in PHP, to take advantage (for example) of the logging capabilites, db connections, etc from the framework you are using. But, PHP was, and is primarily for the web. And the web is browsers, so even if you don't write a ton of HTML/CSS, that is the end result of everything you're doing; you're thinking about it all the time.
I might be over-analyzing, but if you don't have an interest (or beginner's knowledge) in how classes, id's, or even how div's are used, you won't get bootstrap. Initializing a class through jQuery may seem trivial, but to a C programmer with zero front end experience; gruesome.
&gt; The original programmer is still in the picture but it a moron ಠ_ಠ
lol thanks
That code and those comments are making me cringe.
Besides the fact that the "api" isn't really meant for this, you can still do a _lot_ less calls, by dividing the text into segments. It's not unlike the '2 eggs, 100 floors' problem: http://stackoverflow.com/questions/6547/two-marbles/6871#6871
 &lt;script type="text/javascript"&gt; function printDiv(divName) { var printContents = document.getElementById(divName).innerHTML; var originalContents = document.body.innerHTML; document.body.innerHTML = printContents; window.print(); document.body.innerHTML = originalContents; } &lt;/script&gt; and then wrap the area you want to print in: &lt;div id="printableArea"&gt; &lt;/div&gt; And lastly give a nice "print me" button: &lt;input type="button" onclick="printDiv('printableArea')" value="Print Me!" /&gt; Hopefully this helps you, when you click it will come up with the default print dialogue so the user just clicks okay and you are done =]
Yeah, I know. It just puzzles me to see a loop that doesn't loop (due to implementation)
Or use preg_replace to check for word boundaries.
Ruby is still a toy/niche language but Python is the real deal. You can work with python and never ever touch HTML. But to your question check out tutorials on the Zend framework. Using their strategy of coding php will allow you to better separate your back end code and so if you meet a designer or html guy you can never even think about html again. Coming from c, the framework should make a lot of sense to you.
Why are you still on about teaching? This is NOT about teaching anything, this is about which piece of software is most likely to get the dude a summer temp job. Are you really that incapable of reading?
You might say PHP is *catching* on...
When did it become about getting the dude a summer temp job? I re-read the OP and this sequence of comments and I cannot see the word summer temp job until you threw it out there.
I was focusing on his want to avoid front end development, which can be done fairly well using WordPress themes. Also, not sure what you do for a living, but lots of people are making a great living doing WordPress setup and development. From 2011: http://www.reddit.com/r/PHP/comments/xui24/i_hate_designing_frontends_with_htmlcss_but_i/c5pp8he Updated numbers should be coming out soon. I do primarily WordPress development and the work is rolling in. The consensus among developers is that there are not enough quality developers to go around. WordPress is an actively developed CMS. You can always attack an 9 year old code base. It gets the job done really well.
Yeah, this nearly went there, but I decided that I was more interested in what PHP developers wanted than necessarily what their sysadmins gave them :) Probably worth cross-posting.
I use cakePHP for pretty much everything. The [Auth component](http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html) is good. 
I did something mildly similar last week. I had a thermal printer that needed to print tickets when a new order had been filled. I had php generate the page, then I used window.print js and coupled that with these two config items in Firefox. print.always_print_silent = true, and om.allow_scripts_close_window. So PHP would generate the page, window .print could print without the dialog, and js could close the tab.
Asking questions a form of helping themselves.
Why not just use `while(true)` ?
I wasn't correcting your typo, I was disapproving of your lack of public respect for someone you are actively working with and, from the sounds of it, probably has seniority on you. It's one thing to criticize a developer you no longer are involved with, and quite another to criticize someone currently your colleague. Especially on a public and frequently trafficked forum like this where he could read your statements.
Spam.
&gt;Ruby is still a toy/niche language but Python is the real deal Ignorant.
How much would RAII help in PHP? Since everything is managed by the garbage collector and PHP processes are almost never long running, I think that `finally` would be sufficient in handling clean up.
What do you mean how much would it help. RAII, when implmeneted correctly, almost completely removes the need for `finally`. See: C++.
The speed of the language isn't really going to make or break your website, the architecture is. If you got a solid architecture, then it doesn't really matter much what language it is written in.
I am not really offended, but yes, you're correct that I'm insulting you. The reason you're being insulted is because your methodology for determining the overall speed of a language is to cherry pick the things php is bad at. This article again deals with arrays. A language is more than echo statements and arrays. While nobody here is claiming that php is the alpha and the omega, you're trying to judge an entire language based on two things. Either you don't understand how language benchmarks work, or you're trolling. In either case, it doesn't make you look very smart.
No, it's not ignorant. Take for example twitter, while the front end is still a Rails application, it couldn't run the back end because of it's serious performance issues with high traffic, high availability applications. Stuff like being able to have static typing when you need it, good thread support, a decent garbage collector etc. It's my opinion, but it's not and ignorant one. I should point out that I love Ruby, but if you're choosing to learn one or the other, I'd choose Python in a heartbeat. But then, I do a fair amount of development with Google API services and the appengine, and you can't run Ruby there yet, so that'd have something to do with my decision. Plus, python is easier and faster to work with for me. Again, it's just my opinion, but it's not formed from being ignorant of either language. Not a fanboy either, as most of my work involves more Java these days than anything else. 
Observer approach is different from Events. Also, observers aren't flexible as the article.
I know this thread is old but I wanted to share with you that it's easy to remember the order goes SELECT - FROM - WHERE - GROUP BY - HAVING - ORDER BY If you just remember that **S**exually **F**rigid **W**omen **G**enuinely **H**ate **O**ral.
It's a niche. It does some things really well. In particular, it's a good UI development tool. But it's not a really good language for someone coming from C who says "I hate designing front-ends", and so that was more my point. In addition, I don't know many people using Ruby outside of the web development field. I know it's possible, but it doesn't seem like anyone's first choice for stuff like system management and application design. Perhaps "toy" wasn't the proper wording and so I'm sorry if that offended your sensibilities. 
Bit sensitive. No names are involved, and he/she might well be a moron. If they recognise themselves well that's awkward, but hey that's real life sometimes. 
http://www.tizag.com/phpT/ should help you out w/ basics
Ah, thanks! That's all good things, most of which I should have thought of! I've fiddled with fcgi and cgi before to manage 5.2.x to 5.3.x migrations (and it's how that other 1% works :) ) but I've really not looked at nginx or any alternative to mysqli... Have you any reccomendations of news sites or mailing lists to follow to keep track of new fashions/methodologies/workflows that people are using? Thanks!
Well a lot of it isn't specifically new... fpm was new and exciting a year or two ago, for example. I don't really follow many PHP specific news sources, apart from this subreddit. Looking at conference talks is a good way to find out new ways that people are improving things. People's blogs involved with PHP frameworks (and their conferences also) also tend to be good sources. http://www.youtube.com/user/linuxconfau2012/videos for example. Just searching 'php conference' in google also brings up heaps of results.
I recently switched from a hosting account to a VM and as a php developer, a whole new world of extensions and customization opens up for you. I really suggest people wanting to get more out of PHP to just get a VM (I heard amazon's cheap), because it's just a lot of fun - and like you said - you'll have to solve your own customer problems. No curl support? 'sudo apt-get install php5-curl; service apache2 restart'. done. It saves so much time for everybody and it's rewarding and a lot of fun (for me it was) to fix your own problems.
Thanks for your explanation! If I'm understanding correctly, RAII, as far as PHP can support it currently, is able to be implemented in the userspace, like wrapping a file resource in a class with a destructor that handles releasing the lock. But the problem is that there are scenarios where destructors are not called such as Fatal errors, including unhandled exceptions. Is that right? 
Also if you're looking for security and not just optimization, suPHP can be really useful especially if you're providing VPS. fcgi + APC/xcache etc can also be a serious memory hog. I'm not sure what your typical client is allocated or how many sites they run but I've run into issues with this. It can cause lots of other stuff to stop working (my mail kept shutting down)
I've been able to print standard text files to a network printer using fsockopen(). See if that works for you.
It's not technically a php based programmatic UI generator, which I think is what OP is asking for, even though it's cool.
I should have been more clear. The order interface was already running in Firefox, so it was already open. The script opened in a new tab and performed the operation. To the end user they had no knowledge what happened, but it was actually opening a new tab, printing silently, then closing that tab. 
I came across this while researching my print issue. I had a USB printer connected to my dev machine. I was able to go into print properties and select printer pooling to print to it like it was LPT1. From there I could print via the command line (or PHP exec()) using print /d:LPT1 filename.ext. This would unfortunately depend on the server being a windows machine, but I'm sure something similar could be done on other platforms.
&gt;I'd much prefer packaging the query process into a function that having to write 6 lines every time... There's your solution... wrap it up.
While you can certainly say that you also have to consider that not **every** feature another language has makes sense in PHP either (or would have made sense at a certain point). In all fairness, PHP is a pretty **massive** language and has an equally massive *user base*. That means lots of users are always requesting lots of new features. The inherent problem with that is you have to be careful about which features you introduce so that we don't end up with a lot of bloat. This was one of PHP's problems early on, and for *backwards-compatibility* reasons a lot of that bloat is difficult to remove now. So the PHP core developers did not find a significant justification at the time to implement finally (for whatever reason). It's not incredibly difficult to solve the 'finally' problem in user-space code, but a lot of users have asked for it over the years and given that it doesn't carry too much overhead and wasn't too difficult to implement one developer in particular took interest in implementing it. That's the beauty of OSS :)
This is especially good if you have a background in Sysadmin.
Well if its just for fun, pick a task then find a suitable OO-based framework. And that's it. Trial and error.
someon posted this link a while back [basic oop](http://www.tuxradar.com/practicalphp/6/19/1) also I'd just look through [php manual](http://www.php.net/manual/en/language.oop5.php) too see what I know and dont know hope that helps! 
It would be cool to have proper background queue facilities like Zend Job Queue, ActiveMQ or MemcacheQ available. It's more efficient than queues using Cron Jobs and DB, plus the programming interfaces are nicer in my opinion. Speaking of Memcache... that would be an awesome service for hosts to provide. PHP doesn't have anything for persistent data between requests (well there's apc, but it's a pain in the arse). Caching data from the DB in memcache is by far the easiest and most effective performance booster I've found for PHP apps.
Are you absolutely positive these viruses are from looking at porn? I worked in porn building websites either for big name company, or for myself selling porn for roughly 10 years, and I have YET to run into a porn site that gives out viruses.... Not saying they don't, but 9 times out of 10 naive people blame porn for the reason that they received the virus. Also, your co-worker is not good. Fire him.
ya its the only site that he went to besides email and local server... 
Because RAII reduces the need for finally. Both PHP and C++ support RAII and neither has finally. 
Offer Nginx with PHP-FPM. It's a very fast and efficient HTTP server (hosted 10,000 connections in an hour; 1k connections at the same time during peak) on a $20 VPS myself.
He's wanting the server side application to be able to initiate the print jobs from the server - as though someone was sitting at the server and hit File-&gt;Print from an application. 
Or want to learn... I find that a lot of people (mostly beginning developers) are scared of mucking about in the internals of their server environment, when it's really the perfect opportunity to learn some cool stuff.
It's not all that hard to print a page on an iPad. http://i.imgur.com/GgcKx.png Tell him to accept loading a "Printer friendly page" so when they do print from an iPad it actually prints out nicely. **EDIT** just for grins, I tried the `window.print()` and it does the same thing on the iPad it does on computer browsers, loads the print dialog.
There seems to be a lot of mistaken information about PHP's garbage collector works. It's reference counting. The *instant* an object is no longer referenced anywhere, the destructor is called and memory is released. The GC is deterministic. I use this for transactions: I have a transaction class that calls rollback in it's destructor. I create an instance of it and store it in a local variable. If I fail to commit by exiting the function early or by thrown exception then my transaction variable goes out of scope and the transaction is rolled back automatically. You can use PHP destructors to fully simulate `finally` in PHP as done [here, for example](http://athos.blogs.balabit.com/2011/02/try-catch-finally-in-php/). Having a proper `finally` syntax, however, is a welcome addition. But RAII and the concept of finally are linked: the fact that PHP has deterministic destruction is the whole reason why `finally` wasn't introduced with `try`/`catch`. 
I'd bet he opened a spam attachment that had a virus in it, over a porn site. If he DID get it from a porn site, not only is your co-worker bad, but he's also visiting ILLEGAL sites on company time... They're normally the type of porn sites that give viruses.
Can you be more specific? What are you looking to achieve exactly?
My website will allow a use to search for a specific item that they are looking for and that will be queried against my database which has all of the locations of this item. This all works fine. My trouble comes when I am trying to display my results on my page. I am not sure how to take the results and put them into a table that is formatted and looks like it fits the rest of my site. I don't just want a simple boring HTML table but one that goes with the theme of my site.
&gt; In this example http://codepad.viper-7.com/6MUzGf the destructor does not appeared to be called. That's a very interesting example! If you change your code like this: function test() { $example = new Example(); throw new \Exception(); $example-&gt;write(); } test(); The destructor is called called before the fatal error/exception is displayed. Or alternatively, if you add the following line to your code at the top of the file, the destructor will also fire: set_exception_handler(function () { echo 'handled'; }); There are two issues here that prevent the destructor from firing in your example: First, destructors don't fire if the script terminates from a fatal error. And secondly `$example` is a global variable and is therefore available right till the end of the script even during shutdown handlers (which are still called after a fatal error). So what happens here is that when the exception fires `$example` doesn't go out of scope. And it remains in scope until the fatal error is triggered because of the unhandled exception and then the script forcefully terminates without executing the destructor. That's an unusual set of circumstances for most code. 
It sounds like you simply need to style a table, perhaps try http://twitter.github.com/bootstrap/ as a starting point for a professional looking table.
&gt; You fail to realize the differences between a routine level cleanup mandate and an request level cleanup though. Destructors aren't request level cleanup though. They cleanup when the variable goes out of scope and that can be at the end of a routine. This is what my transaction class does and what the finally simulator class does. &gt; Is not a reason to mandate that the two not coexist or that one should be superior to the other. They can be used to solve different problems. I agree fully. But mentioning RAII in comments on an article about finally is totally appropriate. The existence of deterministic destructors does *reduce* the need for finally. &gt; The reason PHP never got finally is because no one took interest in implementing it before. Actually, it was discussed on the mailing list and rejected because it wasn't "needed". I personally don't agree with that either but it's not out of character for PHP developers. 
If you're able to successfully output your records in an HTML table, check out /r/webdev or /r/css or /r/csshelp for styling (CSS) assistance. If you'd be willing to link to your site (or to a look and feel that you want to mirror), that would definitely help. Good luck!
&gt;Destructors aren't request level cleanup though. I never meant to imply that they were. However, how often do your objects get used specifically for a routine call and not for the entire request in PHP? In my experience, hardly ever. &gt; They cleanup when the variable goes out of scope and that can be at the end of a routine. This is what my transaction class does and what the finally simulator class does. Yes, **can** be. Where **can** is the operative word. While you *may* use objects as routine calls, that is not always the case. You very well may want your object to be passed around to several routine calls and that makes your assertions overly complicated for what finally is meant to do. Additionally, why do you assume everyone writes their routine calls as objects in PHP? I don't know about you, but I have plenty of PHP code where objects aren't involved in routine calls that require cleanup (thus making finally pretty useful to me). In other words your claim of... &gt;The existence of deterministic destructors does reduce the need for finally. is simply not true. Essentially, what you're saying is that if everyone where to write PHP code under the assumptions that you're making then there would be no need for finally. However, since not everyone writes their PHP code under these assumptions there remains a need for finally.
@Nicoon Thank you for your comments. can you point me the other 3 post of Aura.Filter? I am interested to see. Wondering where the other 3 posts as you mentioned went for the Filter is just now published :) . Have a look into the commits :) . Also its a nice component, if you are interested to learn . I will not force you or kill if you don't use. Just thought if some one needs . Thank you
&gt;I will not force you or kill if you don't use. O_o; Whatever possessed you to write something like that? &gt;can you point me the other 3 post of Aura.Filter? Well, maybe not that particular component particularly, but this is your fourth one about Aura. More if you count the comments. 
Puppet's what we're using now for config management on the clusters; we looked at chef but none of us liked it so that didn't last very long :) Capistrano rings a bell, I think I've argued with that one before...
Looks interesting. As a Symfony2 guy, it would be even more interesting, to create a configured [Symfony-Console-Object](http://symfony.com/doc/current/components/console.html) from such a piece of documentation. What I really don't understand, why the lib does not follow the [PSR-0 standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md). I can't see any reason why you need to have this library in one file, and even then. Just bundle a PHAR, and include this. Same result, but using and contributing to the library gets much easier.
Pick yourself a project you will enjoy making, something you have always wanted to make like a personal blog or a game, choose a framework or not if you prefer and get going!
Have you thought of [Google Cloud Print](http://www.google.com/landing/cloudprint/index.html)? There is an [API](https://developers.google.com/cloud-print/), which you could access with PHP. And maybe there will be a Clound-Print-Button in [Chrome for iPad](http://www.google.com/intl/en/chrome/browser/mobile/ios.html) one day. (I checked, there is no such thing at the moment) 
@Nicoon :) . Man its a different component ie why I kept it here. If say, I have kept the same component again and again, yes I agree with you that I am spamming. I felt this is something good. Sorry to spam you in the name of aura for 4th time , but probably you have been spammed by PHP many times :) . Thanks Hari K T
Keep them away from stackoverflow.
Here's how I do it. Two tables: First is "users", stores the users' data. Second is "sessions", stores session information. It is necessary (see I say necessary, because it is..) to hash your users' passwords before they are stored in your database. I generally hash my passwords using an algorithm known to my system so that the passwords are more secure - what do I mean? When you MD5 a password, it's more secure - but not that much more secure; any MD5 checker can crack most medium security passwords within a couple days. That said, when you hash an unknown value with an unknown value, and combine this with multiple hashings, it makes it nearly impossible to unhash because the person doing it now has to know how the password was hashed in the first place. But enough about hashing, it's important and you need to do it! Once the user is registered and you want them to be able to log in, you should do a few things before you allow them in. When a user visits my site, regardless of whether or not they are registered, they are assigned a session ID. I've created a function that does this without using PHP's session methods, so that I can control the length of the session hash, etc. The session token is a randomly generated string of alphanumeric characters that represents a user, logged in or not. When the user chooses to log in, we check their credentials against what is in our database. If the credentials match up, we assign their session token to the corresponding database row ID of the credentials they entered and pass it to the sessions table. So now we have a session token that we can actually securely store as a cookie on a user's machine. This cookie represents the user. Now every time the user navigates to a different page, you call the cookie and check it against the sessions table in your database. If it matches, we can continue serving that user - if it doesn't, maybe they've tampered with it, who knows; we serve them a new session cookie and let them log in again. My method removes sessions entirely (I'd like to know if this will place a bigger toll on the database) and will make your site more secure. One thing to remember though, is that these session cookies identify the user. If they're stolen, any person can identify as the user. To avoid this I generally store the IP in the sessions table along with the other info and check if it is the same with each page load (not too useful on unsecured networks, but will work if the user is tricked into handing over the session token to someone in a different location). Looking for suggestions from experienced programmers, let me know what you guys think!
Just thought I'd mention it in case anyone is unfamiliar, Bill Karwin did a great job with [Zend_Console](http://framework.zend.com/manual/en/zend.console.getopt.rules.html), which has been ported to [Zend\Console](http://packages.zendframework.com/docs/latest/manual/en/modules/zend.console.introduction.html).
So don't use bind_result for fetching data. $result = $statement-&gt;get_result(); while($row = $result-&gt;fetch_assoc()){ print_r($row); // a row's worth of columns in an associative array } 
The problem is that get_result is only available with the mysql natural driver installed, which is unavailable on the local server I'm running (MAMP). I don't **want** to use bind_result, but I have to since get_result is unavailable to me (see [man page](http://php.net/manual/en/mysqli-stmt.get-result.php#refsect1-mysqli-stmt.get-result-mysqlnd)).
Also, it escapes characters with a backslash (not forwardslash) i.e. don't becomes don\'t "Quote" becomes \"Quote\" it doesn't just put a slash before and after.
You got up votes (by non programmers I guess) but an empty array is false. So as you: &gt;take them out of $_POST and add them into something like $_SAFE $_POST gets smaller! Until....!!!! It is false. I'm glad I had to explain that twice. Can we stop talking about silly code that no longer exists :)
i'd suggest defining a constant with your environment somewhere (like in index.php maybe) and then wrapping any of your enable_profile calls in a check to confirm you're not in production so you can't ever get the profiler in production if ($_SERVER['DOCUMENT_ROOT'] === '/var/www/dev/public') { define('CI_ENV', 'dev'); } elseif ($_SERVER['DOCUMENT_ROOT'] === '/var/www/test/public') { define('CI_ENV', 'test'); } elseif ($_SERVER['DOCUMENT_ROOT'] === '/var/www/prod/public') { define('CI_ENV', 'prod'); } and then in your controller where you want to enable profiling if (CI_ENV != 'prod') $this-&gt;output-&gt;enable_profiler(TRUE);
Make sure your application and system folders are moved out of the web root as well.
The htaccess file is something I've been meaning to watch some tutorials on. I see a lot of copy/paste stuff on the internet, but I don't like adding things unless I know what they do. I'm not sure how to check if my webroot folder is browseable or not? Could you explain? Thanks for the suggestion!
If not heard of the profiler or enable profiler. If I haven't made any calls to it, do I not have to worry about it, or is it something that is enable by default? Thanks!
if you don't explicitly call it you should be fine.
Terrible advice. Stackoverflow is awesome.
yep, that's definitely an option, too, but it allows for user error. if someone isn't properly defining it, it's easy enough for the dev environment constant to make its way to prod. the way i suggested just eliminates the user error possibility from it.
Define the $found variable before the loop, maybe a simple $found = false; would do the trick.
Well, if you're just using raw php and no frameworks (codeigniter or the like), then I'd go for the [PDO_MYSQL](http://www.php.net/manual/en/ref.pdo-mysql.php) stuff which is for the [PHP Data Objects](http://www.php.net/manual/en/intro.pdo.php) extension. [Here's a fairly good tutorial on its benefits.](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/) You can easily used prepared statements with unnamed placeholders (parameterized queries) to make your queries a little safer with regards to sql injection.
Yep. And since found is initialized to false outside the loop, there's no need for the else statement resetting it every single iteration. $found = false; while(!feof($fileTwo)) { //Read lines $server = strtolower(trim(fgets($fileTwo))); if($masterList[$i]-&gt;getServer() === $server) { $found = true; break; } } if($found == false) $masterList[$i]-&gt;setFound("No");
This is essentially partial rendering which is used by some frameworks. Not a new idea, but it seems like a fairly lean implementation. I'd probably still use classes and objects for something like this, because it's easier to extend the renderer through composition and inheritance.
Yes, but it isn't set up in the way ughblah describes it. The way it's set up now, you need to define it statically; ughblag's code would make it easier to only have one version of index.php to handle all possibilities. Adapt it like so: if ($_SERVER['DOCUMENT_ROOT'] === '/var/www/dev/public') { define('ENVIRONMENT', 'development'); } elseif ($_SERVER['DOCUMENT_ROOT'] === '/var/www/test/public') { define('ENVIRONMENT', 'testing'); } elseif ($_SERVER['DOCUMENT_ROOT'] === '/var/www/prod/public') { define('ENVIRONMENT', 'production'); } if (ENVIRONMENT != 'production') $this-&gt;output-&gt;enable_profiler(TRUE);
I'd add to not forget a robots.txt file, a sitemap.xml file (if you need it) and a favicon.ico file
And a humans.txt file too! Robots get their own txt file, I don't see why humans can't.
Did you disable database errors? And set your log level?
What is the best way to solve the logout issue?
Thank you. I meant more like, are there any examples of command line php apps used in production? Why use PHP on the command line, when already proficient in Python, and when Python is that much more suited for it? Perhaps it's leaving the context of this topic, but I'm genuinely curious about this facet of PHP I have never explored.
You can also use the shorthand if(false) syntax: if(!$found) $masterList[$i]-&gt;setFound("No");
I've got a sitemap.xml and favicon.ico but I don't have a robots.txt file. Should I have one even if I don't have any pages I necessarily want to block them from?
Haha, good catch. I actually caught it right after I submitted it but haven't uploaded my new files yet that enable editting your posts. So I'll have that soon. I could just go in the database and do it, but I figure I'll save that one as my first update test.
1. echo (get_rand_id((($_GET != null) ? $_GET['len'] : 16 ))); I think it should be: $_GET['len'] != null, or using the isset function would probably be better. 2. Somebody mentioned that you probably just make this one function instead of 2, which I definitely agree with 3. Add comments, haha
or if you can manage it, the actual configuration file.
Ahh, I understand. I don't think the discussion is out of context at all. The CLI is an under-explored (and in some ways under-developed) area of PHP and the more people aware of it, using it, and consequently demanding it be a first class citizen is a great thing for PHP. If I'm starting from scratch to specifically write a CLI app or a daemon, I usually choose Python. But that's not always an option. Say you've got a PHP web app built and structured nicely, with a full set of models, a bunch of helper classes, some configuration that sets up your database, and what-have-you. Now you discover your web app needs something that runs in a cron job, or something that watches your work queue, a daemon, or even a quick-n-dirty problem solving script you want to run in parallel. But it also needs access to the resources and logic you've already coded for the PHP app. Python isn't nearly as attractive a candidate when you're in this situation because you would have to start repeating yourself - you either have to duplicate your models and helpers in Python (shudder), or hack together a script that does everything in the quickest and dirtiest way imaginable to bypass the need for them (which will break the second you try to refactor your app and forget about it). Believe it or not, PHP really isn't all that bad on the command line. As long as you have the pcntl and posix functions available, you really can get along just fine. I've got about a half dozen PHP daemons running in production, and Zabbix tells me it has been a long time indeed since one of the ones I coded went down.
Secure, for various definitions of secure... [Javascript Crypto Considered Harmful](http://www.matasano.com/articles/javascript-cryptography/)
Really everything but the front controller and static files should be moved out of there.
Or at the very least a shell script.
Under your authors page '../' is listed under '#'
 function get_rand_id($len){ static $c='abcdefghijklmnopqrstuvwzyz01234567890'; //shortened for display $s=''; while($len--) $s.=$c[rand(0,strlen($c)-1)]; return $s; } Edit: added s=''. forgot about the warning.
Thank you, I ll look into Capistrano !
I did find help from someone who refuses to let me send him some money, so that's great... I haven't bothered him too often, but when I have he's been helpful... The framework is great, but there is a steep learning curve to be sure. Your first project in it will likely be a mess unless you're patient and good about reading documentation thoroughly and doing so prior to the "I just want to get some stuff working!" stage... that's something I have difficulty with ;-)
Sure. I have an OK grasp of basic procedural PHP and have built a few sites that have basic account functionality. I have no familiarity with OOP (except from using jquery). So that's not much to work with. I'm curious how you would incorporate a command-line interface into a PHP script, since I associate the command line with DOS and UNIX.
I've used quite a bit of your code in my re-factor tonight. Although I did replace the for loop with a while($length--) as [Laziness](http://www.reddit.com/user/Laziness) suggested.
You are doing it wrong. - Where did `$clients` come from ? It's an undefined variable. - Why are you trying to prepare new statement for each loop ? - What's with the `execute(array( $clients ))` ? It should be something like: $sql = 'SELECT `id`,`name` FROM `db`.`clients` WHERE `client` = :client'; $prep = $conn-&gt;prepare($sql); foreach($_POST['clients'] as $client) { $prep-&gt;bindParam( ':client', $client, PDO::PARAM_INT ); $prep-&gt;execute(); // edited , tnx @scootstah } Also in this case it would be smarter to select all the clients at once, using the `WHERE client IN( .. )` construction. And you should also make sure that you are not using emulated prepares, which are the default mode for `PDO_MYSQL` driver. Otherwise your queries are vulnerable even is your API look correct.
If you mean “filter” as in to protect against SQL injection then no, there's no need. 
&gt; $prep-&gt;bindParam( ':client', $client, PDO::PARAM_INT ); $prep-&gt;execute(array($clients)); This is redundant (and incorrect). It should either be: $prep-&gt;bindParam(':client', $client, PDO::PARAM_INT); $prep-&gt;execute(); Or: $prep-&gt;execute(array(':client' =&gt; $client));
Yeah ... my mistake .. bad copy-paste. Updated and +1. 
Depends on what you intend to do with the data. If you mean protecting against SQL injections, then no. Prepared statements are immune against SQL injection. 
PHP is actually quite capable as a command line scripting language in both DOS *and* UNIX :D As I alluded to in [this comment](http://www.reddit.com/r/PHP/comments/xwzwa/php_port_of_pythons_docopt_create_beautiful/c5qssi8), I often find myself wanting to supplement my web applications with some command line functionality. You can run php scripts from cron, turn them into daemons, or just use them as regular tools like anything else in your unix tool set. Running a PHP script in the CLI is really no different from running it through the web - the canonical `&lt;?php echo "Hello World!"; ` script will run just fine when invoked on the command line: `php hello_world.php`, just like it would if you ran it from the web server.
Thanks, good stuff. We never used daemons or anything that's constantly running, but we do use crons which simply CURL-ed the URL to the desired controllers. This was the way our senior did it long ago, and it just stuck. I'll definitely find some resources and check it out in some more depth then.
**I know how it works** , but using this way the values are always assigned as `PDO::PARAM_STR`. Please do not insult my intelligence !! Also , I find it stupid to make an array of single value just so you could use an inferior method of binding. 
This. Hate it when data is html encoded in the database. Sometimes you need to output to something other than html (xml, csv, whatever).
Why exactly are you using shuffle and mt_rand? Seems like a pointless redundancy. Also, what precisely are you using the random string for? If it's to generate unique IDs, you might be better off using something like [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier). A standard UUID has 16^32 (that's roughly 340.28 undecillion, an undecillion being a 1 with 36 zeros) possible combinations, and can be easily done using the [unix command line tool](http://linux.die.net/man/1/uuid) or with a [php library](http://pecl.php.net/package/uuid) that wraps libuuid.
Something in the lines of: function getRandomString($len) { static $set = 'abcdefghijklmnopqrstuvwxyz.....etc'; $charset = str_shuffle($set); return substr($charset, 0, max((int) $len, 5)); } edit: The problem with this function is that the requested length can only be as long as the charset. The second problem is that you never get duplicate characters unless there are duplicates in the charset. The upside is: it's much faster than the other code snippets. 
If you don't have short tags enabled the output for all examples would be blank. I thought it would be preferable to print an error rather than having the user trying to figure out why the examples aren't working. I understand your point, but this is more of a prototyping tool than something you'd ship (although it's possible with some small modifications!).
Immune may overstate it a bit
lol, np. Keep posting to /r/php and keep being nice to people, we need more niceness in here :)
Always filter, validate, sanitize your variables. ALWAYS!
I cringe when I see functions that strip or encode html tags on all incoming data. They just fuck with the integrity of the data before you've even received it.
Yeah that would be best I was just thinking of a implementation I have personally where I have to use it on most pages to stop people being linked to things they don't want to be or accidentally refreshing the page. To be honest though creating a random key each page load and storing it in the session I wouldn't think is too intensive to cause any noticeable affect on the server.
Then I'm afraid you don't understand prepared statements. Prepared statements *are* immune to SQL injections. When you write a prepared statement, the statement is sent to the server and is compiled. You then bind the data to the slots you've specified. You can't break out of an expression because there's no expression to break out of. In contrast, *_real_escape_string isn't immune, merely protected by the means of sanitation (which could, in theory, fail).
&gt;just because u cannot come up with one doesn't mean there isn't Yes there is. Prepared statements are pre-compiled, meaning there's no SQL expression to break out of. You literally *can't* have an SQL injection with prepared statements. 
It's ok to strip if you know the stuff should never have HTML tags. If you don't, your marketing department will inevitably be creative as they are wont to be and figure out how to embed &lt;h1&gt; and &lt;img&gt; tags into the the username of various fields they shouldn't be, and then it gets really bad really fast.
You shouldn't use short_tags.
I didn't downvote you. T__T
ok, I retract that :) 
That depends on what you're working with. If you're looking for good clean data, then you should attempt to clean it, or have the user clean it, before you insert it. In other words, there's no reason to have HTML in a phone number. There just isn't, and you should clean that data, or have the user clean it, before you save it. That's just common sense. This applies across the board. If you're expecting a string for say a first name, you don't need to have HTML in there, or to have a javascript alert box code. It's a case by case basis, obviously, but saving data that you know is dirty and not typed is foolish.
Two more relevant points: 1. I DO think prepared statements are a great idea, I use them all the time and encourage everybody to do so. It reduces the risk of human error a great deal. 2. But: I _also_ think that if you know what you are doing, simple escaping is equally secure; provided that there are no bugs in _your_ code. So please everyone: use prepared statements!
&gt;I believe it's theoretically impossible. You'd be wrong. It's more than possible that some bug might exist which breaks it. Be it an implementation bug or otherwise. Not saying there is, but it could. &gt;Any exploit found that may affect escaping, is one the same level as prepared statements. That's blatantly false. Again, prepared statements are pre-compiled. &gt;Back to the 'immume' point: Why do you keep calling it 'immume'? It's '[immu**n**e](http://en.wikipedia.org/wiki/Immunity)'. &gt;Prepared statements traditionally have often been emulated Emulated prepared statements are not the same thing as prepared statements. It's not actually prepared, it's just rebuilt to create a regular SQL statement. The point is irrelevant. &gt;There are still lots of cases where you still need to escape within prepared statements, because not every type of query is possible with just parameter binding. I take it you are referring to ORDER BY and LIMIT, and it's an irrelevant point. Prepared statements are synonymous to parameterized statement. The fact that you can inject stuff outside of a parameter does not speak against the security and effectiveness of prepared statements. 
/r/php seriously! you always always filter and sanitize your inputs there is never a good reason not to.
Yeah, I had a couple guys from here going in and testing injection hacks. Glad they did. I just have anything non-alphabetic dumped there at the end under #. I'll go in and clean up the database every now and then and delete that kinda stuff
Lol yea ;)
I'm a little confused as to what the logout issue is? I currently have sessions saved in the database. When the user arrives at the logout page, it destroys the entire session. You're saying there's a way someone can sign out another user?
To provide some context, most frameworks do something like this: $form = new Form(); $field = new Field('myfield'); $field-&gt;addValidator(new Validator_Is_A_Number()); $field-&gt;addFilter(new Filter_Trim_Result()); $form-&gt;addField($field); if ($form-&gt;isValid($_POST) { // now you can get the trimmed result which you can // assume is a number with trimmed whitespace by doing something like this // (still treat it as "unsafe" user input as far as sql injection / etc, // but your application will be much happier with clean data) $myfield = $form-&gt;getValue('myfield'); }
And the answer is no, as far as PDO is concerned. There is no danger to your DB from not sanitizing inputs. The only danger would be to your application, should you choose to re-use that data later (such as to present to the user); however, that's _not_ a concern of PDO.
Yes, as with the vote-button as long as I get a user to hit the logout-url with a GET request (ie. image), I will sign out the user. &lt;img src="http://yourpage.com/logout"&gt;
If you put those annotations in your source would something like PHPDocumentor or PHPDox be able to read them and automatically generate them into your API documentation?
Do you freelance at all honestbleeps? Do you mind what I ask what you're working on? Feel free to be as vague as you like. I just ask because I'm looking to meet Symfony2 developers in Vancouver and for some reason I think that's where you live.
Exactly. Preserve the data going in, clean it going out.
Cool man, thanks for the feedback. Much appreciated.
sure thing. feel free to PM me or whatever if you have more specific questions than that!
If you're an unemployed PHP dev, you should check out the open positions we have at Bronto. I work at this company, and really enjoy it; the work is interesting, the environment is fun, and the amount of free beer is above-average for the industry. https://careers-bronto.icims.com/jobs/search?ss=1&amp;searchKeyword=&amp;searchLocation=&amp;searchCategory=&amp;searchRadius=5&amp;searchZip Tell them Jeremy sent you.
I'd disagree with working on freelancer or odesk or any of those sites if you're a Westerner. I did it last year when times were tough and it was a disaster. The majority of employers are idiots and will pay you crap. 
There is a massive glaring omission here. **Talk to other developers.** The absolute best way to find jobs, is to talk to the people that already have them. Find any industry related events going on in your area and attend every one of them. Chances are, when you tell people you are seeking a job, they will know where to find them. Plus recruiters often attend such events.
God damn that website, the background made me think my monitor was dirty.
 What's with all the beer shit, did the majority of the people in the industry just turn 21?
Truth. I would say that it's useful if you're in school - I did this kind of work (RentACoder, actually) during my summers and made decent money.
The reason I omitted that is because at the time of writing the article, I did not know any designers/developers who could help me get work or that I could connect with. The best way for me to find work was via those (listed) methods. Right now, I've got a pretty cool deal going with a couple of friends (an ex-boss actually). But yeah, someone commented about meetup.com and stuff like that. I just never did any of those things. That said, I do communicate and get critique from designers/developers in my field often. I'm there for help as well, just never for work.
I'm not sure what you're referring to. Devs who do this longer usually ask for more. o.o 
I'm not in the business of getting hired but want to elaborate? :)
Much nicer, I think f.lux made it stand out more that usual. 
I did it just to get some experience and (little) cash. I wasn't in too much of a bind and appreciate the extra ($100 in the end -.-) so that was cool. I still refer back to those three projects I did: * excel parsing with a custom login and data insertion/updating into an enormous ecommerce database (for $30 bucks -.-) * reverse engineering proprietary software from Zend to custom compiled PHP (did some troubleshoot, syntax help, and decoding) * first work with PHP template files (redoing a huge portion of a site for a guy. Wasn't worth the $20 I guess). :)
 doctrine:schema:import doctrine:generate:entities Will accomplish it in Symfony2
Fiverr is also a good place for practice, but they pay so much less that it's humiliating.
Need some more info. Is it for an authentication system? Do you need to be able to display it to the user?
It is sort of for authentication, it is part of a system to prevent scamming. The company wanted to store the entire social security number as well as the drivers license number, but I was able to talk them down to last four (even though the last four are the most important) I can't really go into details as I am under an NDA. There is no real way to get around it. But when basically john does comes in he is going to apply for something, but this is for multiple organizations and they want to be able to search by information such as a name, address, phone, and ss. As a way to verify the person isn't fraudulently trying to get something on top of what they already have. These are searches being done in an admin system that approximately 5000 people will have access to.
It's the whole "scratch my back and I'll scratch yours" thing. I find that most of the people in the development industry get hired via referrals. My last two jobs were from referrals, and the last 8-10 programmers at my workplace were all hired via referrals. The jobs they filled were never even posted externally.
I would then store the last 4 digits as a salted hash then when you need to authenticate the customer get them to enter the last 4 digits of the SS number then hash it and compare it to what you have in the database. There are lots of guides on hashing available if you need some help with that part.
Ah. See, I only got referrals from recruiters. I keep in touch with a good number of them via LinkedIn and when I apply via their account (LI allows this), they appreciate it and find me for the best jobs they have. :) 
&gt;during my summers Summer of what year? 
Here's a PDO wrapper I've worked on. https://github.com/ellisgl/x1022_pdo
As far as I know, $_GET can never be null unless its being called from cli. Personally Id opt for echo (get_rand_id(isset($_GET["len"]) &amp;&amp; (intval($_GET["len"]) &gt;= 0)) ? intval($_GET['len']) : 16 ))); 
We are in baton rouge, la. There are very few php devs here. We need entry or mid level folks. We use yii, but folks with this experience are even harder to find locally. We realistically don't have any place for lead devs at the moment (even though we appreciate them - we are stocked on that front!). We are a middle sized fish, so we don't have a comp package like google but we aren't bullshitting anyone with 60 hour workweeks and disrespecting the dev process. Best case scenario, if you like the area, there are advancement ops. Worst case, we pay you to learn a new framework and look good on a resume if you decide you don't like us or the area. Is that helpful at all?
I would recommend using a unique salt for each entry. People can have the same last four digits and brute-forcing SHA1 with a single salt is only 10^4 and you have 100% break. With everyone having a unique salt and lots of rounds, you buy some time in terms of security because it would go from 10^4 to 10^4 * N(customers). Since it is for verification only (much like a password), using php's crypt() is most likely the best solution, but overkill imo. Edit: It seems that AES-128/256 is the most common for storing this type of data.
LinkedIn can work well for freelance jobs, just join and participate in groups. 
The rule you list there does the opposite of what you're asking. If you are trying to parse the value s in the query string and redirect, you do this: RewriteCond %{QUERY_STRING} ^s=([0-9]*)$ RewriteRule ^server\.php$ server/%1/ [R=302,L] More examples [http://statichtml.com/2010/mod-rewrite-baseon-on-query-string.html](http://statichtml.com/2010/mod-rewrite-baseon-on-query-string.html)
Tech people are notoriously bad at estimating their own value.
Try using http://flourishlib.com/ It is a really easy set of functions, so you can begin with projects, and then mayb you can move on to a framework.
That could get out of control once your script is powering many high-traffic sites, I'd moderate the traffic to your server by doing something like this: if ( rand(0, 50) == 25 ) { $icon_url = 'http://star-icon.com/icon.php'; } else { $icon_url = '/some/local/image.png'; } You could also just skip the star image and do it fully server-side: if ( rand(0, 50) == 25 ) { file_get_contents('http://yourlicenseserver.net/check.php'); } I really don't recommend doing it every pageload though, it could end up as an unintended DDoS if one of your customers gets lucky, or even if they're DDoSed themselves.
Random per-account salt + many iterations of bcrypt is all you need. Fancy storage schemes won't do anything to prevent hash-collision attacks if you leave the hashes easy to crack (single-pass SHA1 or MD5, no salt).
write a blog platform while blogging on said platform about your writing of a blog platform
The basic components you need to make a decent MVC application are: - Request (create from globals _GET _POST _SERVER etc.) - Response (optional but very useful if you want to set headers etc in a standard way and make it simple to cache responses. Can just have a body - the html output - and headers) - Front controller (responsible for loading controllers etc.) - Router (responsible from comparing the request uri to your routes and returning the name of the controller and action to load. It may also allow you to specify which parts of the URI should be added to the request as inputs. E.g. in your example :id) - View (responsible for combining a template and a set of variables created in the controller. E.g. if you call $this-&gt;view-&gt;foo in the controller the View should provide access to $this-&gt;foo when in the context of the template) - Abstract Controller (this won't end up doing much but is useful to have anyway) I'd advise against building a database layer system from scratch. If you do want to build one build it on top of DBAL or similar as it will save you a lot of headaches. I favour the row/table gateway style of database layer and this is the simplest to implement also. The basic idea is that when you ask a table for some data it returns each row as an instance of your defined row class. Some implementations like ZendDb will also allow you to define a RowSet which is the container all the rows are inserted into. I don't find these that useful but they're easy to implement.
I was unemployed for a year right after college. It was 08 and we had already moved for a job that didn't pan out and the wife landed a job she loved so I was forced to look locally. 
i think it's alright if your scripts to occasionally phone home to check its license, but don't do anything stupid like wipe directories if they are using hacked copies. not only will that piss people off, they will probably retaliate too. also, don't provoke the hackers who nulls your stuff. you really don't wanna mess with those people. if you do, they will trojanize your stuff and spread it around thus ruining you name.
Beware the group concat.... character limits abound!
You dont really see many PHP scripts floating around on warez sites, tbh. And most developers wouldnt be downloading from there in the first place-you couldnt ever be sure that its not doing something **really** malicious like stealing card numbers. Honestly, the bigger challenge to your revenue stream is that there's a free package for just about everything right now- you'll have to be pretty damn good for someone to pay for off the shelf php software these days. Magento's pricing model is kind of interesting, and seems to work for them.
If you're doing work for the U.S. government, you have to use a SHA hash, which means you can't use bcrypt. In general, I recommend using (salted) SHA-256 with PBKDF2 and a large number of rounds. PBKDF2 also has other benefits: you can specify rounds with more precision than bcrypt, and it can be used with any hashing algorithm.
Free beer is an excellent perk. 
Minimal static methods
Haha you'll probably never forget the order again too!
That's why I was asking, I think it was easier to get good contracts a couple of years ago but now there is way too much competition from workers who can afford a lower pay because the cost of living of where they are is much lower.
Fuck. I wrote this huge thing and I hit back by accident :/ But yeah, I agree. the CV is a huge helper. My resume actually had a certain (awesome) structure that I frequently got compliments on by recruiters. Here was the structure: * 1st page was a splash page. Minimal design, some GREAT typography (nothing TOO crazy). It contained my name, address, email, etc. my objective, and most importantly, what I'm doing right now and what my skills are * 2nd page contained my "portfolio", my professional and personal projects * 3rd page was "work" page but instead of just listing my employers, I described what I did there (think LinkedIn style) with a few sentences (I did this and that for there and where) and then I listed the skills I employed there (CSS3, Wordpress Development, jQuery development etc.) * 4th page was skill-list. Listed all of my major skills and my experience. This was important as hell and while it seems strange (it was just a table with a skill and corresponding "beginner", "intermediate", "advanced"), it was the best feature. See, Monster and other sites like that parse your Resume and make it searchable! This was like Keyword stuffing ;) on top of that, a lot of recruiters ask "how would you rate yourself at HTML5?" and you already have the answer for them. Interviews are important too. And I completely agree with how you approach them. It's what i did, and I never got turned down after an interview. I actually turned companies down and had choices (important as hell, and very luxurious). I think your advice is fucking awesome!
elaborate on that. I use groups to mainly gain traffic for blog posts, and to discuss certain philosophical question. Basically like reddit but without a "downvote" button ;)
Recommended by Steve Gibson on Security Now http://crackstation.net/hashing-security.htm edit: I just re-read what the OP wrote, this link is probably not what they were after, but all the same there are lots of good options for best password storage.
You'd probably be okay with a large random string. But, you can also use some unique details of the user... such their name, email, IP address, etc. A salt doesn't necessarily have to be hard to crack, it just has to never occur twice.
I do ppc management, by participating in ppc groups you are branding yourself as a professional. When someone is looking for a ppc solution on Linkedin, then if you have built your relationships you will show up in search results. Just it as social networking + personal branding
oh god. I took my resume off those sites and for months afterward, I kept getting calls and emails. 
Ahhh, I see. Okay, sweet :) I'll look into that.
You mean [this one](http://www.opine.me/a-better-way-to-store-password-hashes/) (comments [here](http://www.reddit.com/r/programming/comments/w9ll8/a_better_way_to_store_password_hashes/))? That's a stupid-ass way to do it; please don't take his thought for serious advice.
This should work: $bookingCount = count($user-&gt;booking); for ($i=0; $i &lt; $bookingCount; $i++) { if ($user-&gt;booking[$i]-&gt;class == $useract &amp;&amp; $user-&gt;booking[$i]-&gt;day == $userday) { unset($user-&gt;booking[$i]); } } But I haven't tested it. unset() is the key to removing a node in SimpleXML.
Would you care to elaborate?
I'm hoping that the IN clauses are a set of values of classes_info.inc_no from somewhere else, in which case (on second look) this should also be able to combine $session1 and $session2 into a single list of items to do away with that OR statement. But, yeah, if $session1 and $session2 are being populated by another SQL query, that is totally ripe for a JOIN against the classes_info table instead.
Static methods make automated testing more difficult and very often overused. http://stackoverflow.com/questions/5521831/when-to-use-static-methods-fields-in-php Just something I found that gives a little more detail on when to use it.
If you want to maximize the learning/training effect, I recommend that you publish your framework on github. Might also get you some harsh comments, but if you can ignore those, you can get some actual tips/help :-)
dont have sex with homophobe walrus with chicken mask
You might consider using a search server like sphinx or solr. Sphinx is fairly easy to add to a lamp stack.
I would love for a more in detail explanation of this. How can not an AR be used as a model? Can't SRP be achieved with AR as model? Would you rather se a "classic" model but attributes are "extended" by AR?
Already done! :) Github is also awesome for dev on more than one computer. No need to fiddle with moving files etc.
Probably wont get any comments on github
Active Record by design combines two responsibilities: - domain logic - storage logic There is no way you can have an AR instance which would not violate single responsibility principle. As for model .. well. There is a misconception, which has been popularized by RoR framework and it's acolytes. If you have studied MVC by reading materials from PHP frameworks, you probably have got it wrong. MVC is a design pattern, which is composed from two layers: presentation an mode layer. Model is not any single instance. Instead it is a mental construct. Just like there are no `LoginPresentation` classes in MVC. As for the structure mode layer itself, some time ago i wrote a [post](http://stackoverflow.com/a/5864000/727208) in StackOverflow about the subject. It might be useful to you .. or it might be not.
I was considering recommending Sphinx too. But Im not entirely sure whether its possible to do 'sounds like' matches, without predefining synonyms. I know you can do infix, but thats not quite the same
Some more information might be nice... Size of the project? Budget? Time-frame? What is required? (Design/implementation/UX Design/etc) Do you have a detailed specification?
whether or not case sensitivity plays a role in a match is determined by the collation. Any collation ending in _ci is case insensitive.
I didn't know that. Thank-you.
I will give it a shot. Thanks
will look into. thanks
I will keep this in mind
That's because you've outputted data before sending the headers. If you put it further up, before you've sent any of the HTTP body, it should work just fine. 
Sometimes when I do that it gives me some weird ass errors, but I don't think I explored that enough. Thanks a loot dude, even though I didn't try it, greatly appreciate the response.
Yeah, nah. PSR-1 and PSR-2 have some stupid rules: 100 errors: **Spaces must be used to indent lines; tabs are not allowed.**
If you're doing this in WordPress, you shouldn't be doing this kind of logic in your theme header, you should be hooking it in the functions.php to an action that fires before anything else occurs, likely on the 'init' action. 
I have no clue how to do this.. I'm unfortunately working on a very old theme framework. Should I just find the "get_header" function and put that code in there? Lol. As of yet, the code above hasn't worked at all. Really, if anyone could offer advice as to just not make it loop infinitely with the original code, it'd be justt fuckin fine lol. It just refreshes over and over.
I used to do a brace right after an if [`if (true) {`] but then started moving it to the next line after a job switch. It's actually pretty nice after a while.
[I made this](http://i.imgur.com/zOiUY.png) just for you mate.
I'll use tabs the day that the entire team agrees to show tab characters in their editors and can answer this: class Foo { public function bar($reallyLongArgumentName, $otherReallyLongArgumentName) { ... } } How do you indent line 4? How do you make sure the new guy indents it correctly? Who wants to maintain the editor rules to make sure that newlines indent correctly (most don't distinguish between indenting for alignment and indenting for scope)? Tabs are more "correct" but that doesn't make them better. Constantly stumbling on the code where line 4 is indented entirely with tabs is far more annoying than semantic impurity. But, of course, this is a religious debate and I'm not likely to change anyone's mind.
Doesn't support php 5.4. Getting a parse error on the new array syntax. Also, there's a lot of PSR that I don't like and don't adhere to. My code is clean and readable, but I want to setup my syntax the way I have for years. Not your fault, but I'm gonna stand on my soapbox anyways.
It expects an opening &lt;?php tag
Me too, but in the past 5 years my PHP syntax has evolved slightly (I'd be surprised if yours hasn't also). But I'd also argue that a developers time is too valuable to be trawling through source files, fixing up spacing and trivial cosmetic issues. So long as the code is readable and the formatting isn't completely out of whack, seriously lifes too short. If people insist on a standardised coding style, then just write a git hook and automate the hell out of it (people do use git right?)
Sure, it definitely has. And even if I kept my preferences the same, the evolution of the language (with anon functions, new array syntax, etc) would change how it looks and works. I was just referring to my preference for this: if(...) { } rather than this: if(..) { } Also, I'm stuck with SVN because job. :-/
It's important that your code be readable to *ANYBODY* that comes along behind you to be able to understand it. That's why standards are in place. With that, I will say that some of the PSR standards are a bit too trivial.
The same argument ( hehe ) georgehotelling is making can be made when you use a lot of arguments, instead of just two long names.
SVN also has commit hooks.
Just indent wrapped lines by a single tab. No need to make the wrapped text line up with the text above.
And that problem can be solved by writing better methods (accept arrays or--even better--objects as parameters, or further break down your methods into other methods).
I agree with you on if { But "else" will look redundant } else {
Ugh back to the tabs vs spaces bullshit like always. Ugh I'm so tired of this particular discussion. It doesn't matter if you use tabs or spaces, and I'm a tabs guy, but I really would like to point out that everytime I code a tool I use a simple regular expression to not give a shit about tabs or spaces... Why is this so hard? Every tool that complains about tabs is space biased!!!! Almost all tools that accept tabs don't give a shit about spaces and move on. Come on people...
Same here it was likely tested on Unix/Linux/Mac and doesn't expect basic input from files that have touched a windows system.
His braces go to 11
Why is line 4 on a new line anyway? Put it on line 3, shorten the method name and/or buy a widesceen monitor so it all fits nicely.
Yes, that's it. It sounded like a good idea at the time, but now I see that to be viable (disregarding the possibility of hash collisions), it has to use Terabytes of data. No thanks. I'll stick to Phpass.
Use the PDO extension's fetch(PDO::FETCH_ASSOC) method to store each row in an associative array
Don't forget the point of those standards, they aren't to force everyone to do things their way, rather they are to encourage interoperability. Also note the fact there are 2 standards, you aren't required to follow the second. Every dev has their own preferences, and probably changes them as often as I do, there is no right answer for some things.
So, is everyone in this thread using notepad to edit their code? So much hate for PSR-1/2, but every decent IDE supports the formatter out-of-the-box, and every modern framework implements it.
dunno. saves an extra if and break I suppose. I wasn't advocating the practice, just offering a potential explanation
What a pointless piece of shit &lt;?php echo "hello world"; ?&gt; 1 1 End of line character is invalid; expected "\n" but found "\r\n" 3 1 Expected 1 blank line at end of file; 0 found 3 1 A closing tag is not permitted at the end of a PHP file
And yet puts the "//enter your code here" comment outside of one. Last I checked comments didn't work outside of the &lt;?php ?&gt; tags.
&gt; So, is everyone in this thread using notepad to edit their code? After reading through most of these "comments" I think the answer is a resounding yes.... 
You can change that in my.conf
Arrays have the same problem: function foo() { $myStuff = array('uno' =&gt; 'dos', 'tres' =&gt; 'quatro', 'cinco' =&gt; 'six',); } In order to indent lines 4 &amp; 5 you need to indent 1 tab followed by 11 spaces.
Actually it still makes the tabs camp sad. The argument for tabs is that if you have one person who likes tabs set at 6 spaces and another likes 2 spaces, they can both have their editors set to display them at those widths.
The file might be empty. [open_basedir](http://www.php.net/manual/en/ini.core.php#ini.open-basedir) might be set. You should find an error message in the log file (of course not, if the file is empty).
me: oops, two-second memory strikes again
Happens to the best of us :)
Answer: function foo() { $myStuff = array( 'uno' =&gt; 'dos', 'tres' =&gt; 'quatro', 'cinco' =&gt; 'six', ); } I'd rather have array data closer to the left side of the screen than closer to the top. Never understood why people put the first item on the same line as `array(`.
Open base dir isn't set in php.ini
Startup company, 60k, few benefits but one month's paid vacation * Full time employee and freelance in the evening * HS Diploma / no formal education * PHP is our bread and butter, but frontend (html/javascript) is a must know (actually, I'm the only programmer) * 5 years paid experience, could say 12 years+ if I counted when I started learning as a hobby * Orlando, Fl
TIL there is something called [Code Smell](http://en.wikipedia.org/wiki/Code_smell). 
That's odd. I was going to suggest checking the permissions and is_readable(), but then you said it was readable. Does it work with some similar function like file_get_contents() ?
Yeah, but I feel like with PSR it was almost as though someone simply codified their style preferences because they were the first ones to do it and they could, rather than actually having a purpose behind everything. Nobody actually thinks that spaces v. tabs matters, or that it matters if you write your brackets on the same line as your declaration or a new line. It's best as personal preference. PSR could be great for things like teaching people that nested ifs are bad, that variable names should be useful, even things like standardizing filenames and underscore v. camelcase have their use because it helps to be able to predict that when you're writing code. But instead all that seems to get talked about is the most trivial, pointless shit.
And what happens when you hit backspace after a "tab"?
if it's smart like sublime text, it will delete the 4 spaces it just inserted
Your answer is correct, but I'm not the one confusing the issue. I understand it enough to pose problems for people who confuse them. I work with some extremely smart people who spend a lot of time customizing their editors, and still see tab characters when they're forbidden by our style guidelines. If that's how it is when we completely forbid tabs, what chance do we have when we mix them? I think we're in agreement that knowing the difference between indentation and alignment is "super secret", otherwise why would so many editors make it so painful to do correctly? Until the majority of editors used support a feature "indent for scope with tabs, align with text beyond that with spaces" it will be a constant minefield of code breakages. Right now most editors will treat the current tab width as a tab character for alignment, which is because the super secret ingredient remains super secret. Note that this only applies in team environments where multiple people have to work with a codebase. If you're a lone coder, and arguing over spaces vs. tabs with yourself, you have larger issues to deal with.
Granted, I have only ever worked in small teams, but it seriously has not been an issue before. People are smart enough to know the difference.
Enjoy militantly rejecting those rules for the rest of your career. That'll definitely be more fun than just casting aside your quibbles now and making the conversion.
ITT: People who don't match PSR-1/2 and therefor think coding standards are useless.
In the projects I'm developing alone or as the lead developer, I'm going to use the rules I want to use. When I'm working at a company/organization that prefers different rules, I will defer to them. That doesn't prevent me from doing what I want with my own code, though.
I'll never understand why people upvote worthless crap like this.
See my first post: &gt; Who the fuck is anyone else to tell me how I should format my code *as long as I am consistent in how I do it*?
The article is deceptive, since the much harder part is understanding what the databases do with your data and how they do it. It's not just a hole you shove things into, y'all. 
You aren't really required to follow either one. They're more like guidelines than standards. Sort of like "well, if you can't agree, we've spent a lot of time thinking it though. Here's what we use already drawn up and detailed". It's not like they can take away editor and ban you from in the internet if you choose to have your own standard.
Using 'ugh' like that makes me think of [kevin the teenager](http://www.youtube.com/watch?v=KI5BXf-uPoQ#t=1m42s)
 if (condition) { // this } else { // that }
phpdocumentor? I am pretty sure you can run it just downloading the source and you don't need to go the pear route.
You can check projects in composer, like this: http://packagist.org/packages/asar/anodoc
You sounds like a frustrated man, consider perhaps it's by your own making!
Doxygen, phpDoc, or ApiGen. You don't need root access to install any of them.
So many suggestions :P I thought that most of these required root access. Apparently, I was wrong. thanks guys, I'll try them out! 