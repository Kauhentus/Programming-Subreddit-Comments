Aha okay. Happy coding.
Twig
Tank
The link above is the second in the Google search for me when I google "password verify and pdo". May be you indeed should improve your google skill a bit. Say, if you cannot find an article that is using PDO, may be it's worth to be added to the search query? 
PHP &amp;#x200B;
Also using smarty. Our company's actively using it for new projects too. Seems to work well but I have no experience with other templating languages to compare.
I like the general idea, I even made something like it for my own usage. What I couldn't see on the examples: 1) how do you manage "weird" where/having clauses like "SELECT \* FROM table WHERE id=1 or (id=2 and type='admin' OR type='admin-ish') 2) I didn't see the actual query generated and what connector are you using (mysqli? PDO?). I suppose you are using prepared statements? 3) Do you offer the ability to disable autocommit temporarily so you can "abort" operations?
I don't really get how do you get the error message from PDO. There is an empty catch (which is questionable by itself) in the `execute()` and a comment that we will check elsewhere but I cannot find where it is. What is the scenario when an error occurs?
Rock
Twig
Helmet
Thank you for the question, this is definitely something I should document. `p810\MySQL\Query::execute()` may throw a `p810\MySQL\Exception\QueryExecutionException` which will have the message of the `PDOException` if one was thrown. Looking back on it now, I can't remember if I chose to do it this way just to have an exception named relative to the library, or if I planned to use `QueryExecutionException` elsewhere. Maybe both.
From your readme: &gt; and plan to expand upon the query builder to support things beyond basic query syntax (e.g. JOIN clauses). JOINs *are* very much basic syntax. Also I note there is no way to set the parameter types, nor is it possible to set the charset in the dsn.
I'll work that in, thanks for the suggestion. Can you help me understand some scenarios where you'd want to mock parts of my code? I haven't considered this before and it's new to me so I'd appreciate it. I was inspired by Eloquent and ActiveRecord. The model class is still a big work in progress, which right now only really functions as a wrapper to make some of the core functionality more convenient, but my eventual goal for it is to be somewhat of an ORM.
What do you mean by setting the parameter type? That's a bit lost on me.
Twig
Umm, I don't really get how it works. As far as I can tell, on error there will be just a silent empty catch. What is the output in case of error if you don't catch it?
On error it will raise the exception I mentioned in my previous post. 
I'm kinda jealous. That is where I would be if it didn't require so much untangling of deeply cooked spaghetti (code). Going to do a full-from-the-ground-up re-write with that exact structure though.
Why does anyone need a template engine when we have php?
Still use it in all my projects. Wont change it because it's to much code. And same for new projects. Can someone point what I miss because i can make everything with Smarty. 
Twig
Pdo can let you to [set the type for a bound variable](https://phpdelusions.net/pdo#methods). I must admit though that there are only few rare cases when you would need anything other than string. Still, it's worth to keep the possibility.
Am I really the only one that doesn't like twig at all? I think it's really strange that I have to add all the standard functions back into the framework again. 
Me to DJ. Me too. I don't use any of these fancy things.. just my fingers and a text editor
&gt; t really get how it works. As far as I can tell, on error there will be just a silent empty catch. What is the output in case of error if you don't catch it? By default all params are a string. With your library there is no way to e.g. bind the limit or offset clause (as it expect an integer instead).
I've gone through that a few times. What I've found works well is writing an event emitter on the client side, that lets you render one component at a time. This way you don't have to replace all the page at once. E.g. you call `&lt;script&gt;MyApp.emit('page.users.load', &lt;?= json_encode($users) ?&gt;)&lt;/script&gt;`, and put a listener on the client to fill in the user component when it gets that. You'll eventually start passing back that data from a restful/graphql endpoint, but for now you can pass it all back from the server. 
Twig
Personally, most of the design is in the CSS anyway, so that takes care of that assuming your layout is structured well enough. But I do have a simple template system which is just a function that pushes an array at the template file and renders it in PHP. I hate the JS/AJAX-abusive template systems I've come across, they run so slow compare to straight PHP and then AJAX for updates. The speed difference between sites I've replaced with what I've coded to replace destroys the previous versions.
You can make a case for vscode when dealing with javascript. But for php, phpstorm is the only game in town really.
&gt; it uses less resource and its easy to program That's incredibly subjective.
I think there are two main reasons to keep two front end applications in the same repository: * they are sharing components (let's say you have an application for two differents users but with same UI) * they are sharing business logic together or with a backend in same repository and it's easier to commit on one single repository (you don't have to maintain depencies between two repositories) I guess it depends on how big your project/team is :)
I'm sorry, I was mistaken in my implementation. I don't know if this is because of my misunderstanding of how exception chaining worked or if I just forgot. The message is supposed to come from the previous PDOException. For some reason I thought I'd written a test case for this scenario. Thank you for pointing this out.
In your opinion is this something that should be up to the user to determine, or could it be reliably done dynamically? Like, if I were to use some solution to determine the argument's type (let's say with gettype() for a trivial example) and then called PDOStatement::bindValue(), would that be sufficient or is there a case to be argued for in letting the user explicitly set the type? I imagine it could go either way, i.e. in lieu of an explicit type, letting the library determine it. But I'm still going to pose the question just because I want to get a better understanding of what would be best practice here.
https://codepen.io/collection/AKkZro/
Laravel will run multiple template systems, so plugging twig in is a cinch.
Then when you want to run the same templates on back end to build an initial page, and front end for your dynamic pages, then PHP is not a clever thing to use for your templates. 
I work in WordPress mostly, with WP, I prefer to go in bareback, um hmm.
ob\_start() ob\_end\_clean()
Symfony Templating component. https://symfony.com/doc/current/components/templating.html
The `Query` class is where I'm seeing some weirdness: 1. It has a mix of stateful static methods, instance methods that depend on the static state, and pure static methods. This tells me it's doing too much, or has an unclear responsibility. The static state mixed with instance methods is a potential footgun, and creates an awkward API. 2. The pure static methods that return new `Builder`instances tells me that part of this class wants to be a BuilderFactory of some kind, but it's mixing those methods in with the notion of query execution. These are DEFINITELY separate responsibilities. 3. The `execute()` instance method is awkward. You have first call `::setConnection()` and then `::setQueryString()` before calling `execute()`. If you don't, it bombs. Typically, good OO design does not have this sort of temporal coupling. An object is not valid unless it is constructed with everything it needs. So to me, this part of the class should really be an instance rather than a pseudo-static/instance hybrid thing. $query = new Query($connection, $queryString); $query-&gt;execute($bindings); But it might not be great to have to pass in the `$connection` every time, so perhaps there is a better way of constructing new Query instances. Maybe the `Connection` can be a factory? $connection = new Connection(...); $query = $connection-&gt;newQuery($queryString); // internally it returns new Query($this, $queryString); $query-&gt;execute($bindings); Or maybe that factory method doesn't have to live on connection, but the point is that you should probably be working with instances, here, rather than statics with global state. 
I am trying to learn MySQL, PHP and I am on Windows 7, I decided on EasyPHP but when I go to download it, there are choices that I don't understand. Which do you think would be better for my situation? I know HTML, I use an FTP program, so I am kind of tech savvy, but not to the point where I have a Linux machine etc. Thanks!
I have fond memories of Expression Engine. It helped me break away from the drudgery of wordpress development and I actually managed to build a fairly complex site for my job at the time. I gave spotlight a search and low and behold I found a screenshot of the site I developed with it. I was able to build some complex relationships between content. Little did I know at the time it was really the begining of my Journey to finding Laravel. LMAO it will be ten years since I built this this coming January. Screenshot: [https://imgur.com/a/wu55v7k](https://imgur.com/a/wu55v7k) &amp;#x200B;
Hey, bayareawebpro, just a quick heads-up: **begining** is actually spelled **beginning**. You can remember it by **double n before the -ing**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/JfKKrW1.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: The spelling hints really aren't as shitty as you think, the 'one lot' actually helped me learn and remember as a non-native english speaker. They're not *completely* useless. Most of them are. Still, don't bully somebody for trying to help. Also, remember that these spambots will continue until yours stops. Do the right thing, for the community. Yes I'm holding Reddit for hostage here. Oh, and while i doo agree with you precious feedback loop -creating comment, andi do think some of the useless advide should be removed and should just show the correction, I still don't support flaming somebody over trying to help, shittily or not. Now we have a chain of at least 4 bots if you don't include AutoMod removing the last one in every sub! It continues! Also also also also also Have a nice day!
hEy, BaYaReAwEbPrO, jUsT A QuIcK HeAdS-Up: **BeGiNiNg** iS AcTuAlLy sPeLlEd **bEgInNiNg**. YoU CaN ReMeMbEr iT By **dOuBlE N BeFoRe tHe -InG**. hAvE A NiCe dAy! ^^^^tHe ^^^^pArEnT ^^^^CoMmEnTeR ^^^^CaN ^^^^RePlY ^^^^WiTh ^^^^'DeLeTe' ^^^^To ^^^^dElEtE ^^^^ThIs ^^^^cOmMeNt.
dev server is the one you want - thats how you can run the WAMP stack locally and develop websites on your own computer - in other words, the outside world will not be able to see them, just you. webserver is to turn your actual computer into a server for the web - i wouldn't recommend this. just use normal hosting options (godaddy, digitalocean, etc) to host your website when you're ready.
I am talking about syntax. There is no much difference. I don't even like or don't like smarty but of course I got downvoted. smh
&gt;beginning ... actually it's spelled the way I want it to be spelled. I'm a human being. NOT a machine.
I still don't know why as haven't had time to dig deep, but I found out WAMP ([http://www.wampserver.com/en/](http://www.wampserver.com/en/)) works way better than EasyPHP. It is quite noticeably faster as well. Also, you can install more versions of PHP, Apache, or MySQL/MariaDB if you need to without a paywall like with EasyPHP. [http://forum.wampserver.com/read.php?2,138295](http://forum.wampserver.com/read.php?2,138295)
Thankyou! I don't need webserver if that's the case.
That face though 😂
Windwalker Edge. It's fully Blade compliant and comes without the overhead and some extras 
What's the project it is? I thought you are learning. But for whatever project why would you write from the scratch instead of using an existing solution?
&gt; I know HTML, I use an FTP program, so I am kind of tech savvy
While Query could be a factory but Connection surely not. 
Blade
There is. Comparing a string with an int in the query would be a disaster. And sometimes PHP converts your strings to ints, in array keys for example. So the best solution is to keep your current approach but add a possibility to set the type. 
You could run linux in a virtual machine. Tons of tutorials out there for setting up a LAMP stack on linux... even some scripts that install it all for you. Easier than setting up in windows imho. :)
Google is free. 
Or vagrant. Or docker. Or...
XSLT. It’s fast and secure. And because it’s strict, it doesn’t allow you to make dirty hacks. That results in clean code.
That just made me violently ill
I use plates from phpleague.
Yeah, I can second it. Been using Laragon for years, nothing beats it IMHO.
Twig
Because it comes prepackaged with Laravel, and people can't be assed to switch to the superior templating engine.
Thanks for your reply! PHP has an extra ini directive to turn off opcache for CLI, and the generated script will show an error if you are trying to warm up the cache via CLI and opcache for CLI is disabled. Webserver and CLI share the same opcache, so you can cache in CLI and the cache will be valid for web server as well. 
Imagine I have a class that needs access to the database, a repository for example. I would like to test if my repository works properly. But I don’t want to perform actual database communication during unit tests. The way to still test my code, but not actually use the database, is to mock the database communication. In the approach of your library that becomes really difficult due to the static way a query is created.
 $greeter-&gt;greet(null); This is obvious. $foo = processSomeUserInput(); if ($bar === "someString") $foo = makeSomeOtherUglyThingsWithFoo($foo); $greeter-&gt;greet($foo); This is not so obvious and i bet that there are examples, where phpStan can't tell you if $foo could possibly be null. The problem is not my type hinting, the problem is that defaultGreeter serves two interface-implementations over the same function, dependent on the input. class DefaultGreeter implements Greeter{ public function greet(string $s){ echo "Hello, ".$s; } public function greetTheWorld() { echo "Hello world"; } } In my opinion, this is cleaner and harder to misuse.
Does anyone know a WAMP stack (for development) with Apache (x64), MySQL (x64), PHP 7(x64) and XDebug (x64)?
Most people can't use those acronyms in a sentence, so that's something.
Or just install Linux and get rid of Windows altogether. It's one of the best tech decisions I ever made.
You can use Twig in Laravel projects.
They deleted GTK theme from appearance =\\. Reverted to 2018.2 
Phptemplate and twig
If you only require the basics to get up and running, XAMPP I've found works very well and is very easy to use. Its only problem comes when you require more PHP packages, it's not very user friendly to install them. But as far as a basic WAMP server I've found it to be very good for basic test usage. 
WAMP has yet to fail me. Add my vote to this one.
Probably not the answer you want but consider dual boot! Run ubuntu, easy to install, easy to use, install lamp locally, and use your own machine as the server. You'll gain familiarity with the server side environment your code will eventually be running on as well. And Ubuntu has a graphical installer to ensure you don't accidentally erase win 7 or any other partition. 
Me too
This article discusses two different concepts: - Immutability - Having a concrete API In both cases, it misses a couple of fundamental points. On Immutability. In PHP, by default, arrays are passed as copies so when you pass an array around, any changes are local which avoids most issues surrounding mutability. They are basically immutable outside of local scope. On having a concrete API, it really depends on how the array is being used. You still have a contract, whatever is reading the contents of the array is presumably reading specific keys for specific purposes (e.g. reading `$config['dbServer']`, `$config['dbUser']` and `$config['dbPassword']`. If someone has arbitrarily extended the array to contain additional options, unless there is code checking for it, it's irrelevant and will have no effect on the program. If a key is missing, the person reading the array needs to code defensively and account for that. As a rule of thumb I would actually argue the opposite of this article: Unless your object has some behaviour you should be using an array. If you are exposing public properties (or just getters), you should be using an array instead. 
I had a load of fun setting up vagrant for this (mind this was probably nearing 3-5 years ago now). You'll find running servers in Linux is a lot easier in the long run and you get the Linux knowledge along with it.
Agree. I build a small blog for myself and plain PHP is enough. I also use Blade when work with Laravel and Twig for other apps. “Depend” is the right answer.
use vagrant
It's docker now, and it'd SO much easier then dealing with vagrant... 
Bladeone https://github.com/EFTEC/BladeOne It's the same syntax than Laravel's blade minus Laravel. So it is possible to create a slim project. 
I use Lando these days. Flexible, and faster and easier to use than Vagrant. Also has presets for several frameworks and CMS's.
The problem with Vanilla PHP is it requires some extra job and discipline. Example: https://github.com/EFTEC/BladeOne#security Vanilla PHP: ``` &lt;input type='text' name='field' value='&lt;?php echo $field;?&gt;' /&gt; ``` If the field is not sanitized, then it's unsafe (a user could inject a javascript). So, the vanilla code must be as follow: (and it must be done almost everywhere) ``` &lt;input type='text' name='field' value='&lt;?php echo html_entities($field);?&gt;' /&gt; ``` However, using a template is: ``` &lt;input type='text' name='field' value='{{$field}}' /&gt; ``` 
Yes, and it is one of the reasons why I prefer blade. For example, to write with uppercase ``` {{ 'welcome'|upper }} ``` while with blade ``` {{ strtoupper($welcome) }} ``` So the learning curve is lower. 
Which one?
Twig
from what i understand, php 7.4 only lets you specify one php file for preloading. it looks like this project generates one file per composer project - are there any plans to somehow be able to combine multiple projects into one combined file for php 7.4? eg, one laravel project and one zend project
You are right PHP 7.4 has support for just one file. The preload command has a CLI and composer. json option `no-status-check` that removes some boilerplate code (there in place to fail l the script if opcache is not available) on top of the output file. This way, you can create a new PHP file and `include` all generated `vendor/preload.php` files. 
I stick to the php built-in server \`php -S localhost:8000\` most of the time. tired of trying to install and make \[X|Y|W\]ampp work. That, and a database inside a docker it's really easy to setup any project. 
I get your talking about syntax but what's happening under the hood can't be ignored. If syntax is all you care about its prudent to never use smarty, which was why I explained what your comment didn't: why smarty is worse than blade, because of how it works under the hood. 
Query should not be a factory. Query should be the object a factory creates. Objects should not create themselves. Thus something *else* should be a factory. Short of going overboard on responsibility splitting, I don't see any problem with the Connection having a simple method to spawn new Query objects. It doesn't do much else, and hierarchically, I see things as: Connection |-&gt; Query Queries cannot exist in a vacuum. They are dependent on having a connection, so I view the connection as the "root" so to speak, and thus I can rationalize it having the responsibility of spawning new query objects (especially since in this case it's a simple pure method). But to be fair, this is all of 5 minutes of backseat thinking regarding this design. I'm not dedicating too much time to thinking about this problem.
exercism.io There are some numeric ones, but there's other stuff too.
&gt;installing NPM `sudo apt install npm`...
This this I agree. I just was rather baffled by `new Connection()`in the Query's constructor.
I learned to program Commodore 64 BASIC when I was around 13, so 1984ish. Later I learned Hypercard scripting. Those were easy, because there was a cable access TV show that covered the BASIC language and computer concepts. I could buy a Compute's Gazette and learn more stuff. Where I fell behind, was when PCs came out. I never learned how to build my own, and then once that became the way to go, it was hard to learn because it's kind of "rest of the owl". Trying to ask someone about DOS, they are like a math whiz explaining math, they can't explain it, but they can do it. 
I could, that was one of the things suggested in the book I have, and it sounds like a good skill to have. But I have a Windows 7 computer and I would rather do that with a newer machine that has more power.
I was mostly disagreeing about 1 and 3, however I still think it's useless to mention resource usage given the impact it has on the overall application performance. I also believe that you're downvoted not because there's a cargo cult, but because you're *claiming* there is. It's completely fine to have a different opinion, but don't state it as a fact. 
Not be that simple. Especially when you work with javascript and php at the same time. I'm not sure what's wrong but there is something what confuses php storm a lot coming from javascript. Even though it supports it very well (phpstorm = webstorm + php + sql). I find myself switching to VS code at times especially when dealing with AngularJS. And this doesn't seem to be effected by hardware stats.
I suggest to get VS code and use that as your default file opener for shit fixes and edits. And while I still prefer phpstorm to develop javascript, vs code comes in handy.
Nevermind. Reading Reddit from mobile is pure evil. Completely misread your code. I actually agree with your previous comment
Geez, you commit to full-time 8-5 work for them for a full 22 weeks as "training," and they charge you $15k for the privilege. Sounds like bullshit to me.
[But it creates a cache file in the process](https://twig.symfony.com/doc/2.x/api.html#compilation-cache), which I didn't want cluttering up my filesystem. My project sends out thousands of unique emails a day, so I can't have that. I am aware that you can the `cache` option off in the `Twig_Environment`, but someone else in the future who doesn't know about that option could inherit my code, and then mess something up pretty bad.
Sorry no, at least it was an orm and not raw queries though haha
setting a field: ``` $object.var= value; ``` simple, 1 line of code. versus ``` $object.setVar($value) function setVar($value) { $this-&gt;value=$value; } ``` Without a setter, we are free to create a function and we don't need to call the function. So, it is **cargo cult** unless it involves logic but most people don't add logic there. :-P 
the use of `toList()` is to follow Entity Framework. However, it's practical. I can use `toList` (array) or `first`() (returns a single value). The where is different. This library uses or relies on a single comparison. My library is close to the sql, so it is possible to do -`&gt;where('field=1 or field2=? and month(field3)=?',[$v1,$v2])`, so I don't need to specify a command for "`and`" and "`or`" (or for any other case). What I learned is: SQL is hugely flexible (unless you want to return a pivot table), so it is the reason why most ORMs fail, they are less flexible or they try to reinvent the wheel. &amp;#x200B;
Thanks for that explanation, I see what you mean. 
I‘be worked a lot with Akeneo a pim build on top of the oro core. The php part is nice, a more or less standard symfony application. The JavaScript fronted part works ok, but feels very outdated (jquery and backbone) and is a pain to develop and to extend 
Could the Connection instance have an instance of a QueryFactory class rather than implementing the factory functionality within Connection itself?
I‘be worked a lot with Akeneo a pim build on top of the oro core. The php part is nice, a more or less standard symfony application. The JavaScript fronted part works ok, but feels very outdated (jquery and backbone) and is a pain to develop and to extend 
Doesn't work for rendering email templates. &amp;#x200B; But yes, this is the best way when possible ;)
jQuery is considered outdated now? :S :S
&gt; They are basically immutable outside of local scope. That's why you should have an `add` method for arrays inside an object. &gt; whatever is reading the contents of the array is presumably reading specific keys for specific purposes Ok, so what? What's your point here? You can do the same accessing `$config-&gt;getDbServer()` when using objects. &gt; Unless your object has some behaviour you should be using an array. It's all about maintainability. Sure it's more work and code using classes, but still you don't end up in an random structure. You can even reuse your structure using Traits, or Inheritance.
The react won't (without some server side rendering that negates any convenience), but a lot of mail services have pretty nice APIs now. Focusing on your server's data model first will make sending off some call to MailChimp/etc easy. 
I think PHP is going down slowly, but i will be not for tomorrow, maybe in the next 10 years, i dunno but it feel like the job market is evolving and PHP job offers are decreasing slowly. Also, today, there is many choices when it comes to starting a new project and PHP tends to be not the first choice anymore. &amp;#x200B; I love PHP, but i think that everyone should learn a new language, cause PHP will be more like maintaining legacy market stuff in the futur. I could be wrong, but that's my opinion right now based on my observations. It's just hard for me to see a bright futur of PHP when there is no native async implementation when other like C#, NodeJS and Golang already have.
Thanks for this. It’s good to know you find the php part decent, I haven’t touched much Symfony yet, hoping to get a couple hours in this weekend, mostly Laravel and other frameworks previously. The JS ‘situation’ was immediately obvious, a world way from React and other frameworks and paradigm. It’s the side I’m most concerned about.
Ok, first, you are right: calling a function uses more resources, of course. This is a fact. You should always keep resources and performance in mind. But, unless you are working in an industry where every µs counts, it's totally fine for the average PHP application to use methods. I mean, what's even the whole point of using PHP: when you are worried about performance and resources why not using C++? Or any other low-level language? C? (Looking at JavaScript developers I don't see a hint of anyone is concerned about performance or resources. But that's another story.) You should write source code for humans, not for machines. The compiler will do his job. And he will do it even better than you are afford to imagine. PHP 7 is already very good at performance. (I like it.) Didn't you hear it? PHP 7 is twice as fast as PHP 5 is. Unless you are having a loop with billions of iterations, it's totally fine calling Getters and Setters. And if you don't use Getters/Setters at all, using a class is still better than using plain old arrays. **The point in my article was about the maintainability of complex data structures and big unmanageable code blocks.** &gt; $object-&gt;getCompany()-&gt;setAddress("sunset blv"); is ugly because it's using a get to set a value And no, in your example you are not using a *Getter for setting a value*. You are using a Getter, to first get the Company, and then set on that (object) a new value for the Address.
Writing testable code requires a different mindset. And the mindset of many developers is that they can throw it together much faster by just hacking it. Remember "weeks of programming can save you hours of planning"
That's my experience too, docker(-compose) is great for development, but not so much for production. We used ansible for deployment to aws-instances. We should have used kubernetes... 
Some people like talk, others prefer to code.
For me it took a while to get it, I was getting in the weeds of "How do I test (enter scenario here)?". The next thing that most people complain about is the time to code tests. While up front it takes more time, but in the long run you end up saving lots of time, specially if you practice TDD. People like instant gratification of seeing something happening.
It is a skill that takes a long time to develop. You code style will change, 98% of the time, if is for the better. It helps when you have a mentor to learn from. 
I would never hire someone with that attitude. Spaghetti madness. 
Good job I'm not looking for a job then.
I've never really understood this debate. I don't get how you can launch a script or an update without thoroughly testing it first. 
Would you dismiss a candidate if the developer didn't know how to test ?
Testing has become like something that clients are offered or requested. Its like SEO, most dont need it, but Firms will offer it on the menu cause its good for business. See? So basically testing is great for business if you can afford it or need it. Big clients and apps that are in widespread use do need it as it reduces the bugs in production , and lowers the down time or bad press. To a firm like Facebook time is money so testing is needed. &amp;#x200B; So for a developer who wants to work for a major league player development firm he HAS to have testing abilities and skill in his toolbox, why? Its smarter. &amp;#x200B; So testing, yes or no? BOTH. Depend on who you are, your priorities, where you work or want to work. 
Oops sorry. 
No way. I'd dismiss a candidate if they weren't willing to learn how to test. I had only written a few tests before I worked where I do now, and now I don't write code without writing tests first. Even in my personal projects.
Probably queue the lookups in 10k batches? How accurate would this be if you ignored the 4th octet? i.e.e cache the country for 192.168.1.* instead of full IPs.
I'm sorry, but I feel like we're missing some context here. What's the basis for assuming that "most developers don't talk about testing"? If we look at some actual numbers, among the respondents to [JetBrains' 2018 developer survey](https://www.jetbrains.com/research/devecosystem-2018/), 70% either write unit tests themselves or use tests written by someone else, and only 30% don't have unit tests at all. Those seem like pretty good numbers, accounting for the fact that there's always a lot of people who're just starting out and haven't gotten around to figuring out what the whole testing thing is all about yet, and a lot of other people are in situations (untestable legacy codebases, hectic work environments, etc.) that don't allow them to write tests whether they want to or not. 
I probably would, but that depends on the experience level I'm looking for. If it's a junior developer, I wouldn't consider that a red flag - juniors are mostly there to learn. When it's someone with 5+ years of experience, that's an automatic "No" from me. Not because the candidate doesn't know a specific technology, but because of the mindset. I only want to work with people who really care about the quality of the product. Testing is a very important part of that.
Probably, since you would be looking for a long time in that case.
100 percent agreed. I don't want to work with people who don't care about the quality of the product.
as long as someone is willing to learn and can show that they are willing to try and escape their comfort zone, the absolutely not. If they actively dismiss testing and call it a waste of time or useless, etc, absolutely yes.
There's running a script to see if it works and there's writing a set of tests for your code to pass.
He means automatic code testing such as unit or acceptance testing. This does not mean manually going through and clicking and making sure your code works. 
I see what you're saying. 
To be honest, I think that most developers either suck or don't care about the quality of the product enough to object to management who want to ignore testing to reduce the development time. One of the questions I ask in the interviews is "What's your favourite testing framework and methodology and why?". If the candidate can't answer to that, it's pretty much an automatic "No", unless he / she is interviewing for a junior level position.
I would imagine most people using IntelliJ software probably are in it for the profession and probably write unit tests. I couldn’t imagine dealing with all that manual work just so I can brag about the fact that I use sublime text or visual studio code.
I'm open to learning it, and i did some testing within symfony, behat testing that is; However as someone who is trying to land a role as developer with no prior professional work experience, I feel like it would be a good way to stand out from the other candidates. 
There are PHP implementations.
Used it with [jigsaw](http://jigsaw.tighten.co/).
This comment just feels OT, creating automated tests is coding. I don't really get what the talking refers to planning? Giving input on overall architecture?
In that case you'd definitely have an advantage. Not because you know how to test, but because you care enough about the quality of your work to learn that.
I see now, thank you for your feedback. 
Some developers write quality code, but most don't.
Sorry, I tried to make a joke :(, a bad joke... [https://media.giphy.com/media/mxQUQbIjXMSwo/giphy.gif](https://media.giphy.com/media/mxQUQbIjXMSwo/giphy.gif)
&gt; 30% don't have unit tests at all I'm one of those. I have a full suite of acceptance tests to check that my code responds to spec. It's slower to run but when I'm refactoring I don't have to change my tests, they're still catching any mistake. The only time old tests have to be updated is when specifications change, not when some application code do. Code coverage you'll ask ? [Codeception](https://codeception.com/docs/11-Codecoverage#Remote-CodeCoverage) with [c3.php](https://github.com/Codeception/c3) will make awesome graphs to show to management. And you'll see what part of your code is useless because "I can't get there with E2E tests".
Is there a case in which not having automated tests lowers overall development and maintenance cost of software?
Since the lookup is the slow part - how is the \`geoip\` function implemented? Looking up 30k keys in redis (with an entry pr. ip - 4 bytes key, 1 byte result) with MGET should be fast-ish. But the country mapping doesn't change very often - so by keeping a live data set with counts per country in memory and then updating that for new ips - instead of building it from scratch each time would do fine. If you're seeing a billion ips each day you've probably got bigger issues than asking here, but in that case parallizing based on ip range across multiple servers (i.e. send each subnet of a given size to a dedicated server). &amp;#x200B;
Twig
&gt;learning resources are bad (including paid stuff) It's obviously Laravel focused but [Test Driven Laravel](https://course.testdrivenlaravel.com/) is an excellent course that starts from the basics a d goes into depth on solving more advanced situations by building an entire application. I provide it to every junior develooer I work with that's not had much experience with testing.
I almost always start a project with 100% test coverage. As the project moves along and deadlines need to be met sometimes writing tests are not the top priority. Of course I always tell myself I will go back and add the tests later but that rarely happens once a project is stable and my work priority moves elsewhere. Generally though all critical mechanisms of an application are always covered (payment code, other server dependancies, file storage etc.). I would say this can be a cultural thing as well. Some workplaces practice strict TDD and others may not run any tests at all. 
Easier to throw back an energy drink, crank out some meh code and let your QA department be your testing.
Because we're pieces of shit. 
Adam Wathan is a great mentor. [TestDrivenLaravel.com](http://testdrivenlaravel.com).
Several reasons, really. Developers are pretty irresponsible about the consequences of our code. We're also not generally paid for it. It requires a mindset shift from the team to do well. It's hard. That's not how it should be but that's how it do be.
How easy is it to disable html encoding, or is that disabled by default? That's one of my biggest annoyances with HTMLpurifier and causes a lot of double encoding problems with template libraries like twig or blade.
Oh I absolutely agree. I just was thinking 70% for overall devs is really high. 
There are environments where you have short lived projects. A smart thing might be to reuse stuff, but that kind of optimization is not in the interest of the developer. In the end their job can be automated. Sometimes developers make them irreplaceable this way. Nobody understands the code. Nobody else can verify a change. The developer can't be replaced. In those cases above the needs of the individual developer ("want my job") and the company ("need results in good quality efficiently") probably aren't aligned. Then in some cases you have a large legacy base and leadership is weak and wants to continue shipping features instead of taking time for introducing testable structures. This is where developers might push, but leadership uses wrong pressure. And then there are cases where it's all beyond repair.
Do other people not test their code as they are writing it? Every time I implement something that does *something* I build and test it's working properly.
As most thing in programming, it depends on what application you are going to build. There is no need for a generic blog app or a small forum to have a huge set of unit/feature tests. On the other hand, big distributed apps with great amount of programmers working on it could be broken with any change.
You should see red first. Hehe. Now there is TCR that i havent teied yet. https://news.ycombinator.com/item?id=18096511
Hah. Not quite. Also be more flavour specific. I’ve just set up an 18.04 Ubuntu server and it definitely wasn’t as simple as sudo apt install npm .. 
Writing tests or not writing tests are often part of a corporate culture. This makes the rule of when to hire/no hire difficult. For me, it's subtle, if the candidate mentions they haven't written tests professionally but have tried in some side projects then I'm cool. But yeah, if they are an intermediate/senior dev and don't discuss testing at all then it's a no.
Yeah, throwaway code. I'll be honest, while I test like a demon in a REPL, I do not like the formal test frameworks and I find mocks to be more work than they are worth. Use real data and real (sandboxed if necessary) services. I have worked with so many people who produced shit mocks that were so far away from actual data that the tests were essentially overhead and noise. I have also worked with people who proudly showed me automatic coverage tools and reams of tests and the app couldn't pass an actual smoke test. You have to exercise the real code with real data now and then too.
What went wrong? I've setup systems with `apt install npm nodejs`, followed by `ln -s /usr/bin/nodejs /usr/bin/node` because a lot of scripts expect that.
Time consuming. Usually there isn’t enough time given deadlines. Upper managements fault, honestly. They already cringe at the hours I estimate, let alone padding for writing test cases.
I object. They don’t care. Promise.
Many developers who adhere to TDD still write shit. But now their production code is shit and their tests are shit and the smart people get to spend time debugging about 3x as much bad code (2x tests for 1 production code). TDD isn't a magic "be an awesome programmer" tool. Bad programmers also write bad tests that fail intermittently and drag a project into the weeds.
Sorry to hear that. With all that context switching between apps it would be even more valuable for you to have tests to ensure you haven't broken some functionality that you wrote 6 months and 4 projects ago. I'd suggest automating some smoke tests to start. It would provide a level of test automation that you may be able to do on a quiet day. The smoke tests don't require code changes to your codebase which is nice.
Those 30% actually have a social and family life and don't work overtime to increase software quality by a trivial margin.
Those 30% actually have a social and family life and don't work overtime to increase software quality by a trivial margin.
The reason jQuery took off was mostly cross browser code and easy dom interaction, with a side of simple ajax. In the age of evergreen browser, cross browser code is almost a non issue anymore (at least compared to 12 years ago in 2006), querySelectorAll is available everywhere, dom direct manipulation/source of truth is slowly loosing speed vs javascript source of truth/declarative rendering, and fetch/axios do the ajax perfectly. Node tooling also changed the way people package their app, allowing you to easily compose from small package what jQuery would carpet bomb for you. Also, jQuery callback hell and imperativeness is way less attractive in the days of Promises and async/await, es6 goodness and functionnal pure js, spa and web apps. Some things definitly make jQuery still relevant thought : the amount of plugins (not the original point), legacy browser support (lookin at you IE11), and non-node server rendered html. I'm pretty sure that if jQuery somehow got created only today, noone would see the need. Does a plugin that does what I want exists only in jQuery ? If yes, I'll use that instead of reinventing it. Otherwise, I don't use it anymore. Not by hatred or disgust, just because it's not needed anymore, and unecessarily heavy
I’m sorry for misjudging you, but you’ve got to admit the way you worded it was pretty strange
The MaxMind GeoLite2 free country database has 303,230 IPv4 subnets defined. 5 bytes per subnet key (4 bytes for the IP and 1 byte for the mask size; is there a better way?) and 2 bytes per ISO code makes each record 7 bytes, or about 2MB of memory for the whole dataset. If I had to look up the country code for thousands of IPs, I'd probably start with loading the entire 2MB dataset (sorted by subnet) from cache at the start, then binary search through that for each IP. Could optimize further if necessary.
That’s not the problem. The problem occurs when parts of code depend on other parts. So while you add this new functionality it’s possible you destroyed a use case elsewhere.
If you store them in an array that is indexed by IP, as the key, wouldn't that be `O(n)` lookup time?
That all makes sense. I guess I've never worked on a large enough project to warrant such a structure.
You probably didn't, but did you mean https://github.com/Ayesh/PHPTemplate ?
"I wrote my own template engine": https://github.com/Ayesh/PHPTemplate
Serious question: May I quote you in one of the talks I'm preparing to make? 
We use blade for static and react for interactive.
What do you mean? Elaborate plz.
I've worked with developers that didn't bother with tests, they also didn't want to hear about the benefits of an IDE over basic vscode plugins. Perhaps there's a link between the two mindsets
One issue is management. Do I want to test? Yes. Will management approve it? Usually no. A literal quote from my boss: "Just write better code, do it once. I dont want to come back to it."
Simple answer is don’t do one cache lookup per loop iteration. You have an N+1 problem, and that requires structural change to fix. Even if the cache is instantaneous, the network time to reach it won’t go away. Without knowing more about the data I can’t suggest a whole lot, but you need to avoid calling `geoip` 30,000 times. Some sort of batching or grouping will be necessary. Paginating requests from the front end is probably going to be necessary regardless at a certain scale just for UI practicality. 
Well, there’s a lot to unpack here, and this succinct reply won’t cover 15% of it. From what I’ve seen in my ~20 years it comes down to two questions: 1) Who’s paying for it (time or money) 2) Do they understand the cost and value of quality It has nothing to do with stereotypical concepts of sizes of projects/clients/companies... it has everything to do with the client/PM/dev enforcing quality as a measure of acceptable work.
&gt;Sign up to get four free preview lessons on faking external services with custom test doubles. This is the Laravel ecosystem. The Laravel ecosystem is bad and should be ashamed of itself.
You'd still get close to city level with that.
I'm a freelancer developer which means I code for lots of different people on lots of different projects. Whether or not I spend time doing any sort of formal testing is ultimately up to them. My largest client starts all conversations about development with "How quickly can you ____?" Coincidentally their entire codebase is a house of cards built of hacky solutions to today's emergencies. As a result they spend 20% of their development budget on new features/improvements, and 80% on just paying for the daily maintenence it requires to keep the whole thing on the rails.
This become a problem in larger systems where you can’t keep a mental picture of the whole thing in your head. Basically you have a function that calls another function that calls another function and so on. You decide you need you modify one of the functions to do something slightly different for a certain case. You make the change and test it, it works. You give a cursorily test to other parts of the system and everything appears to work great. You push the change. A few days later you get reports of a bug. A great example is this bug I found in Cordova a week or so ago. https://github.com/apache/cordova-android/pull/539#issuecomment-440853211
Similarly we have a monolith application that has almost no tests, just on some core functionality like purchases. We are breaking there monolith into smaller services and testing is a requirement on all new services. At first it was just test something and now it won't even deploy unless it has 80% coverage.
Your post says it takes 1ms per IP. That's about 3.000.000 processor cycles. That's very slow for what looks like a lookup in memory and appending to an array. &amp;#x200B; I'd look into why it's so slow. If it's the geoip() call there's a better way to structure the IP to ISO mapping. Some sort of B-tree. &amp;#x200B; For more optimal speed code the tree in C++ or D or Rust and expose it as a PHP extension.
Sorry I don’t think you understand my comment, perhaps I wasn’t clear. I don’t plan on writing a Symfony app any time soon. I wouldn’t expect to be able to jump into that after only a couple of hours with a language and or framework, and understand it. I would expect to be able to pick up the general design patterns, thought process behind the framework, and write some basic CRUD style functionality after a weekend however.
Thanks for this, really appreciate it. The two things you highlighted are definitely two things we’ve already noticed just trying to get the application running. I was surprised by how much of a pain the cache was to sort, that might be coming from someone with limited knowledge of the CRM however. The entity management business is more terrifying. All our current database schema changes need to be ran past multiple departments before we get the sign off for one, not to mention the rollback steps and procedures we need in case it goes wrong. The fact a user can circumvent this worries me. In general use, is this a feature you’ve found users needing? My first thought was to disable this functionality asap, but not sure what the knock on effect of this would be. I’m hoping this will be clarified when the client goes into a little more detail as to how the system is currently used. Thanks for the information about the slack channel as well, I had no idea, I’ll make sure I join that as soon as I can.
People have a hard time rationalizing the value/costs of tests. It can be a large amount of upfront investment in time/learning for what seems like zero return. I was like this for awhile. But once you start writing tests and once they start saving your ass you realize how amazing they are.
Use iterators to avoid loading the entire thing into memory.
Agreed. We have a few projects at my workplace that have high amounts of unit tests. I can't remember all the requirements, but my tests do. I routinely catch bugs myself with tests before I pass the code off for review. It's wonderful. And then there are all the other projects...
Tell me how one would fail when writing tests. I'm interested in the mindset you've got going here.
why should it be ashamed of monetization?
I really don't think that's a positive attitude for great application development.
Yep, same situation for me. We have mostly manual testing, which takes a lot longer and always misses edge cases.
You create mocks that don't accurately reflect reality. You write tests with intra-dependencies that fail sometimes but not always when executed in random order. You write tests that make use of async code with race conditions that sometimes fail and sometimes succeed. You write tests that rely on network services that sometimes produce different than "expected" results. Lots of ways. I just wrapped a project where the tests were more trouble than they were worth because the developers wrote stupid fucking tests that had interdependencies or used data nothing like production data. Total negative value.
Go nuts.
I feel like this is a copypasta at this stage. The amount of times I feel like I've read this comment. 😂
Well I was just wondering if you were saying bad devs are bad devs. Cause that's apparent. So what would you say I should do to not be a bad dev? And what choices leads someone to become a bad developer?
What? 'Tell me how one would fail writing tests'? Tests aren't some magic spell that makes a bad programmer good. They're still just code, written by the same developer who wrote the shitty code they're testing. You're literally just asking how one would fail writing code at all.
Tests can help you logic and reason through things better though. Unless you're shoehorning in things aren't real world cases.
If I had to guess, I'd assume that it'd involve the test writer not adequately considering the edge cases and/or writing tests in such a fashion that even though the tests seem to operate correctly they don't actually ensure the tested function's proper operation. Since tests are basically code, if the hypothetical terrible programmer can write normal code in a broken fashion, they can likely write test code in a broken fashion using similarly flawed techniques.
We usually end up disabling the entity management section for any accounts we create so we can avoid the issue entirely. Any schema changes then usually need to be submitted to us and we make via migrations, none of our clients have had any issues with it as of yet though so I guess we'll cross that bridge when we come to it. 
A floppy? 10 years ago? Do you mean 20? It is seriously not a complicated endeavor. You burn the iso file to a USB drive, boot the USB and follow the graphical prompts that explain what you re doing and how. You wouldn't be learning anything, unless you wanted to. Ubuntu has the instructions on their site, if you've installed Windows you can do Ubuntu. You need to learn php and mysql for WordPress though? So this is a good place to start. If you are wanting to learn back end you are going to have to deal with Linux btw. Once you deploy that is the system you'll be ssh'ing into to work on the site. When you need to trouble shoot your configuration you'll want to be familiar with at least where your Apache log files are... As well as where to deploy your framework/files and why it is going there. Worries me to see people having an aversion to using Linux while learning to code. Either way good luck with your journey! 
Nothing wrong with monetisation, but there's something wrong with the Laravel ecosystem and this is a great example: a guy plugging paid video (ffs video?) tutorials as a way to learn TDD. 
Looks like you can't get a faster implementation. assuming the geoip function is constant \`O(1)\`, there is anything you can do, your loop always gonna be \`O(n)\`, so, there are some tricks you can use, like using \`SplFixedArray\` instead of a common array. This will help you a lot, since PHP internals has a fixed length for \`$highmaps\_array\`, when you use the \`\[\]\` operator to push elements in your array, you're making it grow, and array fix the length of dynamical arrays to the powers of 2, so, an array with 30 elements, has an internal array of size 32 (the next greater number who is a power of 2). If you add 2 elements to your array, its length is 32, and the internal array size if 32, if you add another element, the array length is 33, but your internal array size is no longer 32, it has grown to the next power of 2, who is 64. you have to pay for that resize operation. You know the size of your array before starting your loop, so, use a fixed length array and avoid those resizing operations. Then you're left all alone to the geoip implementation and how fast PHP can loop your ip list. This totally depends on the architecture you wanna have, and how your system works, but, if speed is a problem in this code, I would try to use another language, just to calculate the geoip of all the ip's. There are a bunch of ways you can connect PHP to another language, you can add your own extensions, spawn a process, etc. TL;DR; You have plenty of solutions, but I think it totally depends on the architecture you wanna achieve. * Try using a fixed array (\`SplFixedArray\`) * process in the background * implement this bunch of code in a compiled language like C &amp;#x200B;
&gt;Don't touch working code to make it "cleaner". I really disagree with this. If you're working with legacy code, one of the best ways to learn wtf it's doing is to refactor it to be easier to read, writing tests for it along the way (even better if it already had tests to describe the intentions). And generally those refactorings are a benefit unless you're just a useless developer.
Where do these bad devs get jobs? Are they entry level? Asking for a friend.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I disagree on both points. Books are a thing. This is basically just a digital book with videos. Better content density than books. It's pretty good value. And I disagree about Laravel being hard to test. I think it's quite the opposite, it literally adds helpers to make it easier to test things that would often be harder to test having chosen a different framework (without complex abstractions). Mocking dependencies is really easy, selenium/browser testing is easy with Dusk, etc. And if you really think this guy is a hack, check out his free content, for example http://www.fullstackradio.com/ as proof that he knows what he's talking about.
When you remove the last octet, you can still geolocate to within a couple cities. It could cut down the list of IPs he needs to process, without sacrificing much accuracy. 127.56.87.* might be 255 apartments across a couple buildings in a single complex, for example. So in this case leaving off the last octet wouldn't affect location accuracy at all.
I hate how he dismisses valid arguments and issues coupling tests with the framework. His attitude seems to be, if you are in the Laravel ecosystem, who cares if you are coupling tests with Laravel. Who cares about all the issues with Active Record over an Entity Manager. I love Adam, I think his podcast Full Stack Radio is one of the best developer podcasts and I’ve listened to damn near every episode. I wish he realized more that he has a lot of impressionable junior developers following him and learning from him. He shouldn’t just dismiss an entire argument as stupid (Entity Manager; models saving themselves, framework coupling) I guess he is all in on Laravel and makes his money that way. Him, Jeffrey, and Taylor are getting more and more $$$ from that framework as the days go on. Good for them, but seriously if Adam is going to be a teacher and trying to set good practices for younger devs, you can’t just dismiss huge and valid arguments from the other side because you want to keep people stuck in your framework. 
Ding! I think you are on to something!
Agreed. Jaded dev here. 
No it's from Drupal https://www.drupal.org/project/phptemplate
&gt;Books are a thing. This is basically just a digital book with videos. I'm not against monetization, but laravel seems to be based on money over anything else. &gt;I think it's quite the opposite, it literally adds helpers to make it easier to test ... Mocking dependencies is really easy, selenium/browser testing is easy The only reason it adds helpers is because it made it hard/impossible to unit test in the first place - test code should not be in the core. I'm still not sure it's even possible to unit test a model as you need to boot it and just do a partial stub. Mocking is anything but easy with Facades and global calls to env/services. Browser testing is really nothing to do with laravel. &gt;And if you really think this guy is a hack It's less about him than it is the way the community thinks this is normal. It's not. People that are driven by money in an ecosystem like this are rarely the experts you think they are, if they were they would be making enough consulting etc, and this sort of thing would be given away free as marketing.
I was laughing because 4 languages in 13 years means you don't actually branch out much, but you're under the impression that it's impressive. I'll use more than 4 languages on any given day, much less for 13 years. There's an adage about someone having 10 years experience and having 1 year of experience 10 times. I think it applies here. IOW, don't try and give yourself authority you don't have. Having an opinion is one thing, trying to lend more weight to said opinion with something like that is another, and is hilarious. 
&gt; laravel seems to be based on money over anything else Sure, Taylor Otwell has found a way to monetize his work. Why is that such a bad thing? He needs to make a living. By doing so, he has the funds to hire developers to help accelerate development of the framework and ecosystem. Most of it is open source, only optional nice-to-haves are locked behind a paywall (Nova, Spark, etc). I think it's absurd to say it's only based on money when everything is there to support the open source parts. &gt; The only reason it adds helpers is because it made it hard/impossible to unit test in the first place You're probably talking about facades. Those are optional and have obvious tradeoffs. A bit harder to test, in exchange for an easier to use API. I'd say some parts are ridiculously easy to test because of the level of abstraction provided by the framework, and it's just a consequence of those abstractions. They're not meant entirely for testing, they're just good abstractions to have. See https://laravel.com/docs/5.7/http-tests for example. Dead easy to test your controllers and assert the results. &gt; if they were they would be making enough consulting But this isn't about the money. It's learning materials. It's like paying for a class in college or university.
And you break it in production and everybody gets pissed. The open closed principle is there for a reason. &gt;"Clean code" isn't some myth. "Clean code" is often a matter of opinion. Working code is not. Let me put it another way, you don't know everything the original developer did when he wrote it. I'm not talking about serious stuff like refactoring where maybe you break large blocks into tighter functions. I'm talking about developers who don't like ternary operators and instead decide to use explicit 'if' statements to make the code more "readable" and in doing so, they flip the condition or something. The little code golfing edits that don't substantially improve quality, but maybe do eliminate a line or two here or there...at the expense of sometimes getting it wrong. I understand the temptation. I used to be that guy when I was young and excellent. And I introduced bugs doing it. I just wrapped a project with a guy who is like younger me. He introduces bugs too. And he writes copious tests and TBH, he's a bit more of a hotshot on this particular language/stack than I am and writes elegant code. But he still introduces bugs at times. I write more pedestrian code because I tend to work on a lot of different stacks and I'm kind of a generalist. Its not quite as slick as what he writes. But it works and doesn't use all the clever corner case operators. He loves to replace my "klunky" working code with his tricky special case operators and in doing so, he sometimes breaks my shit and I FUCKING HATE THAT. So, don't.
&gt; Sure, Taylor Otwell has found a way to monetize his work. Why is that such a bad thing? Because it becomes the focus. Fabien, Rasmus, Beberlei, Igor, the Redis guy, Linus ... loads of others seem to be able to manage this without money becoming their focus. A good example would be that the keynote of laracon was about Nova. Nothing more than why you should buy the new shiny tool. Laravel is open source, but the entire ecosystem is based on selling subs to laracasts, that tdd one someone linked, envoyer, nova, etc. I just don't think it's a good thing when the solution to learning how to test is to buy laravel videos. &gt;You're probably talking about facades. And app() calls, and the Eloquent models. As a side note, did you know it is impossible for these models to maintain integrity? &gt;Dead easy to test your controllers and assert the results. It's the same elsewhere, but just because it does one thing well ... &gt;It's learning materials. It's like paying for a class in college or university. For 1, have you noticed how many free online learning resources there are, even from Universities, and for 2, even if I agree it would be worth paying for, it would be incredibly hard to argue that a video teaching code would be the best format. Don't forget that almost every piece of tech we use on a daily basis is free and open source.
You would be surprised how high bad developers rise. Some are in business for themselves as rather expensive consultants and contractors.
Volt (~ twig)
&gt; you should have a more explicit review process before changes go through That's lovely. Unless you are working with limited startup money. I should probably mention that I do NOT work for established well funded companies these days. I almost invariably work for startups with angel funding that need to get the most done for the least $. These apps definitely do go into production, but there is no extra $ for extra steps and the team sizes are on the order of 3-4 people. We do use CI and we write some tests but sometimes we just cannot afford to do all the automation we would like.
This here: The Mozilla Secure Open Source security review (Page 7) https://wiki.mozilla.org/images/4/40/Cakephp-report.pdf#page=7 
&gt; If I wrote it last week - leave it the fuck alone. I generally agree with that. (But no absolutes because it always depends on the situation or reason for the change)
Nothing went wrong. From what I read, there was an error in the latest npm release meaning you had to manually change the version of a dependency. I can’t remember which one. I also had to install it via NVM as composer and node wouldn’t ‘work’ properly. This process didn’t take long to complete or figure out, I’m just saying installing npm isn’t as simple as running one command. Or even two. 
I have been giving a bot that was written in node. The bot started by node bot.js --param-one --param\_two &amp;#x200B; I have to build a web interface to start and track different instances of this bot. Also, each instance needs to be restarted with updated params when params are updated. I'm stumped and need pointers as to how I can approach this.
Write some documentation?
Have no time fot testing
What the fuck go you even mean? Can we please have some moderation in this sub?!
10% gets you a rubber stamp. Not really that useful and lots slips through.
I created a bot using php which works on cli interface. A part of my bot is seen by the web interface written in php so i will try to help as much as i can. 1. All the data output and input needs to be in db or a file readable and writeable at both the levels like bot and web 2. You can execute shell scripts in web interface using exec command. Just pass all params like you would normally do in cli 3. Permissions are important. Make sure your web server or php server has permissions to execute cli commands Since I don't have access to your code, I couldn't be more specific but ask questions if you want. 
No, they won’t. You need ways of tracking the processes. You can read about PIDs ([Process Identifiers](https://en.m.wikipedia.org/wiki/Process_identifier)), that might give you some pointers. Start a process, record it’s process id, keep track of it, do whatever. I would recommend sticking with node, though. You don’t need to mash multiple languages at this point, I think.
Laravel Horizon is maybe a good example to look at. It launches multiple queue worker processes and stores their IDs in Redis. The web interface pulls up that list of processes and gives stats on each one.
Thanks. I was more concerned about tracking the process. bmwparking's answer sheds more light on my concerns
&gt; That's what staging environments, testing, and code reviews are for. It would be insane for that code to go straight into production. A friend silently broke the production site for a major web company the other day. Despite them having a fairly exhaustive testing and code review process, a typo meant certain anchors ended up linking to `undefined` and it wasn't caught, leading to thousands of users hitting the error before it was noticed and corrected. When you have a very large, complex codebase these things happen, no matter how well you structure your processes or design your architecture. &gt;Not if standards are followed (e.g. PSR-2) or some guidelines are set in the org. Those can be used to update old code gradually and consistently. PSR-2 doesn't cover the myriad of subtly different ways to structure code and it's often those that more junior developers think to improve, without realising that every time you do that you increase the chance of introducing subtle bugs into working code. I'm completely in favour of a continual process of refactoring code when it is needed and when there is a good justification for it, but /u/cyancynic was giving advice aimed at a junior developer wanting to improve, and trying to clean up code for the sake of cleaning up code is a really common trait that can introduce many more problems than it solves.
&gt; can introduce many more problems than it solves IMO the problem it solves is poor maintainability. That's pretty important in a long-term project. If a bug is introduced, it should usually be quite easy to fix (just revert the commit or just take a second look), and with proper testing, should be caught very early anyways. Just this week, I was doing some cleanup and broke something, but it was caught in our beta environment during code review, so we were able to fix it quickly. I think the long-term benefits are definitely worth the short-term risks from cleanup. &gt; temptation to refactor stuff like this while working in the same file, but really these kind of refactorings should be part of a well structured process Yeah, we usually require that any cleanup changes are in their own commit, separate from feature/bugfix commits, so that it's easier to review.
This is the kind of pointer I was looking for. Will look at the horizon spource code Thanks.
XAMPP with multiple PHP
&gt; Just this week, I was doing some cleanup and broke something, but it was caught in our beta environment Nifty. But given the choice between not "clean" that nobody can see and "broken" that everyone can see, I'll take the working but ugly. One more time. "Clean" code that doesn't work isn't "clean". Do you even "open closed principle"? 
Technically yes, but that would involve expanding each subnet, resulting in a lookup table of up to 4b entries (exact number depends on how complete the database is). That's up to 16GB of 32bit keys alone. Add in the fact that each is actually 64bit and the php array overhead, and the actual country-code payload, and you've suddenly got a massive amount of ram dedicated to holding a lookup table that would itself take "a long time" to build, or even to deserialize if prebuilt.
I couldn‘t find any, but it‘d be really nice to see a implementation for php. Maybe I‘ll look into it.
Hello, PHP Reddit community. I just published my book titled \[Functional Programming in PHP\]([https://leanpub.com/functionalprogramminginphp](https://leanpub.com/functionalprogramminginphp)). Please check it out.
Great answer! Thanks!
&gt;I was laughing because 4 languages in 13 years means you don't actually branch out much, but you think it's impressive Where did I say I thought it was impressive? Are you having another conversation with someone else somewhere? The job market in my area is heavy in PHP and C# with some Python, C and more recently a little bit of GO. I can only work professionally with languages that have paying jobs for them. &gt; I'll use more than 4 languages on any given day This sounds extremely unlikely unless you're counting using things like JavaScript and CSS as languages. What line of work are you in that uses 4 different languages in a day? I've never been in any industry that would have such a diverse use of languages in one department, seems like a costly business decision to have so many applications written in many different languages. &gt; IOW, don't try and give yourself authority you don't have. Having an opinion is one thing, trying to lend more weight to said opinion with something like that is another, and is hilarious. Again..... where did I give myself any authority? I gave my opinion and gave real concrete factually examples of where it happens in the PHP standard library. You still haven't said why my examples are factually incorrect, like I said I'm welcome to have my mind changed on why the random naming of functions is a good thing but you've yet to give anything other than a rant and how you find everything 'hilarious'.
Yes, but the people who wrote this stuff originally 10 years ago didn't. So it needed refactoring.
The testing is the first step for more important things of good project development: code style -&gt; **testing** \-&gt; continuous integration -&gt; fast delivering of the product -&gt; the best product.
You can write tests when you have clear requirements. Usually, you have to code so the client can see something so you can have clear requirements.
I think a lot of developers don't understand what testing is for. And you won't be able to understand it unless you work in team which consists of more than a dozen people. 
Nice little rant but that fact that php 4 had objects sort of spoils it right from the beginning.
Hello PolarZoe, thanks for your feedback! I'm not sure what you mean by disabling HTML encoding but for many security reasons, it is important to keep text and attribute content HTML encoded, one way or another. This is why the sanitizer HTML-encode the content it creates wherever needed and it's not possible to disable this behavior. However, using it in Twig for instance is as easy as using the Twig extension provided by the bundle (if you don't use Symfony, you can extract it in your project): https://github.com/tgalopin/html-sanitizer-bundle/blob/master/src/Twig/TwigExtension.php. This Twig extension tells the Twig engine that it is able to return safe HTML (`['is_safe' =&gt; ['html']]`), which let Twig know it does not need to re-encode it. I suppose Blade has the same feature.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tgalopin/html-sanitizer-bundle/.../**TwigExtension.php** (master → 27e48c7)](https://github.com/tgalopin/html-sanitizer-bundle/blob/27e48c7176b7835b835de8e4e6e428d0c2100bca/src/Twig/TwigExtension.php) ---- 
https://symfony.com/doc/current/components/process.html
Three years ago I had never written a test. Three years later I'd have problems putting mission critical code into production without them. You can start small, writing tests for only new code. For untested code, write tests when a bug comes up and you'll slowly start getting better coverage. It's actually not that much more development if you do it that way. Learning it is easy, you can install a small code-base with composer and play with their tests. Or you can create a small library of your own and write tests. You should be able to learn it in a few hours just by looking at other peoples code.
I doesn't even take that much more time.
Pretty simple. They rather hack code together.
Some developers who can write quality code, don't always write quality code.
Thanks, also TIL about `#page=`!
What's wrong with raw SQL? Every web dev understands SQL but ORMs give you another domain specific language to learn and understand.
Nothing's wrong with raw sql. I just mean the type of sql mixed with business logic and presentation markup that was so common of older php sites. If you put sql away into a DAO or an orm method, or even a simple static GET method, i think it's fine. But if you have business logic and sql together, things smell bad
You don't have to work overtime to add tests. If you do, you fucked up with the estimates anyway.
I get you and agree!
&gt; $v = 1; &gt; $o = $v; &gt; $k = &amp;$v; &gt; $v++; &gt; echo $o; // 1 &gt; echo $k; // 2 &gt; &gt; We can see that $o = 1 since we assigned it to the value $v but $k = 2 since we assigned it as a reference to $v. Once we changed $v, we also changed $k. and when did you change v? When you make v++? v is 1 in that code... 
Hi tgalopin, Thanks for the explanation, I know that it's usually wanted to keep everything encoded. But some times I just want to get my html stripped and not encoded because I don't always know the source of the content and rather just always use the encoding feature of twig, blade or vue. Most of the times I want it encoded anyway, but it's nice to sometimes disable it for some reasons. 
freelance software developer, one of my clients is a hosting company in which I'll touch C/C++, PHP, C#, Bash, Powershell, Javascript, and I'll do it across both windows and linux servers. And that's one client. I also do work in Ruby and Python. &gt; You still haven't said why my examples are factually incorrect ah yes, the ole sealion... I was quite clear in stating my issue was the way you tried to give yourself authoritative weight to your opinion, not the opinion itself. The very fact that you couldn't imagine someone working in more than 4 languages supports my point.
If I understand correctly, you would like to allow some HTML tags and get them not encoded, and have the rest of the content HTML encoded, right? If so, the sanitizer is doing exactly this: encoding argument content and raw text but outputing unencoded allowed tags. What your templating system does with this afterwards is not an issue of the sanitizer :) ! Don't hesitate to ping me on the Symfony Slack (symfony.com/support) if you need to discuss it more or have more questions :) .
Yep time is ticking and here I am having to try and force feed my Luddite boss info on why we have to do this and wy it’s not a simple straight forward flick of a switch. We have over 15 sites that are built on 5.2 that need upgrading and the server needs upgrading to easypacahe 4 as well in the process.
I would probably go wide and parallel process the request across several servers with the full database, the lookup time for a single ip is still o(n) but if you do it 3 or 4 times at once you saved yourself quite a bit of time even with the few extra ms of additional overhead. 
Hehe, people trying to convince PHP devs to be more spiritual, and we're all dead inside since like 5.2
Don't need much power to run a VM. Just memory. Ubuntu server is one the lightest OSes out there.
Makes more sense than most of the comments on the site.
&gt;The very fact that you couldn't imagine someone working in more than 4 languages supports my point. I was referencing in a business setting (read above) not a freelance position jumping between jobs. I didn't/wouldn't count Bash, Powershell or Javascript as development languages, I was in the context of application languages (although the start-up craze is to build everything in JS now I suppose but I've always been in the corporate space), in that case, I have worked with 7 languages professionally. &gt; you tried to give yourself authoritative weight to your opinion It was to put my point into context, if I just said 'The PHP standard library is shit' it's not very informative or has much merit. Being able to compare it to other languages standard libraries and give an example of where it falls short in comparison to others from personal experience. 
&gt; And the mindset of many developers is that they can throw it together much faster by just hacking it It's probably worth mentioning the mindset of management also. If you're in a business environment business minded people don't see the value in developers writing code that isn't adding a feature. The majority aren't even interested in improving performance unless it's something that starts costing them money. My current role is different, the CEO was/still is parttime a developer. He understands the value of good tests and allows us time to add to the test suite when a new feature is requested.
Summarise the country activity in time buckets and store them. 
No worries
That's just the kind of thing I was looking for, thanks. Gotta say I'm a little disappointed in their approach to modeling the buildings, though, since according to the README, "you cannot compare two cities relative to each other." In my opinion that is kind of the whole point. At least they've got an MIT license on there, so I guess I'll fix that myself. Curious about what other kind of code metrics you generate? 
I thought Phan came from Etsy, not PHPStan.
Yes
Depends on the volume you expect. In general, you would have a play history table that's simply a list of all the music played by each user. Depending on volume, you can partially denormalize the table rather than performing a join from the play history table to the music database. Basically, for every song played, insert the music name, user, and datetime for the play time into the table. From there, it's something like select \* from playhistory where user\_id = :user\_id order by playhistory\_datetime desc limit 8 For giggles, you can make assumptions about an auto-incrementing primary key integer ID, and order on the primary key descending rather than datetime, since the key would be a proxy for ordinality, rather than inspecting the datetime specifically. That should get you to thousands or low tens or tens-of-thousands of users, even on a relatively small server, assuming you index the tables reasonably.
I love this
Blink.exe
Please send a request to slack \[at\] oroinc.com and we'll invite you to the slack channel. OroCRM has [entities](https://oroinc.com/orocrm/doc/2.6/dev-guide/entities) schema migrations and data fixtures support and if you are planning to keep your schema under versions control it is definitely recommended to use entity definitions and migration files instead entity management UI. Also with our Cloud offering we provide optimized environment for your CRM hosting and [maintenance tools](https://oroinc.com/b2b-ecommerce/doc/current/cloud/maintenance) that simplify day to day operations.
I wouldn't call ORM's another language. They are usually just a normalised version of SQL. 
&gt; C#, NodeJS and Golang It's with languages like these that I myself truly believe PHP won't go anywhere. But yeah, it's all speculation on both sides. I'd rather use PHP while it lasts instead of worrying about it dying.
It is clear that there are many WebSocket libs out there, e.g.: nodejs - socket/io, Golang - gorilla/websocket, but what if U have only php7 and other std tools? Then u probably need something like this.
&gt;Fastest setup for dev server for php on windows and can even install popular frameworks in one click How does that then work in production? As in how do you ensure a reproducible build on your live server?
&gt;Dunning-Krueger happens to everyone at some point or another, it just happened a bit earlier for this guy We all started somewhere, probably with HTML and FTP just like him.
Idk why a lot of developers, even good ones, write code as if they'll change the framework tomorrow. Honestly, how often do you change the framework? &lt;o&gt; I still have projects that run laravel 4.0 and they generate enough revenue for me to , you know, not bother changing framework or modernizing the whole thing. It just works. And most libraries are module in and out of themselves so I reuse some of them in laravel 5.x projects. 
&gt; But then there's still some php4 code in the product so eh... Uphill battle Where are you working at? Just asking so I would know what I should avoid as the plague.
&gt;Because it comes prepackaged with Laravel, and people can't be assed to switch to the superior templating engine. I've used both and never been left wanting by either. What makes it 'the superior templating engine' over Blade?
To head off the immediate knee-jerk question at the pass... ### What does this have to do with PHP? A lot, actually. PHP 7.0 introduced a well-designed CSPRNG interface (thanks to Sammy Kaye Powers), and libsodium (PHP 7.2) is leaps and bounds better than the mcrypt or OpenSSL extensions when *usable security* is the end-goal. This delves into some of the reasons one might prefer PASETO over the JOSE standards (JWT, JWS, JWE). The main reason has less to do with one-off vulnerabilities and more to do with design philosophy that has real world security consequences. However, the general recap of it all is: * The blame game doesn't solve insecurity * Prevent developers from rolling their own crypto by giving them tools that are hard to misuse * Your API should be simple to understand * Every asterisk is a disaster risk * Prefer versioned protocols over *cipher agility* 
So many questions. Why would you need ubuntu to run PHP? Which dev is "confused" by config settings? This is a great example of over engineering a non-existent problem. And in my opinion the cons of using this repo outweigh the pros by a lot. Pros being: I have to edit a Dockerfile (or .env file) instead of an ini file to change the config.
Or just include that as part of the quote for the work - in the end it's more for you to deliver a quality product and support it later. Clients rarely understand it up front. It will click down the line when things come to iterating on the products.
Thanks for your honesty, you have much bigger balls than me. Fine for personal projects I suppose. I've always wondered when developers mention things like Laragon (and similar) how they are reproducing the build in a live environment and I've yet to find anything concrete. Most people who do respond or blogs writing up about it are actually deploying on a totally different stack on a live server to their dev environment. Seems an unnecessary risk given Docker is a thing or even build automation like Puppet and Chef to spin up a repeatable VM.
&gt;Yeah, I can second it. Been using Laragon for years, nothing beats it IMHO How are you reproducing the build on a live server? I've yet to find any information about doing so. Since you've been using it for years I guess you have something in place?
As a terrible non-professional developer, I see red 10x before green, then I get suspicious about why it's green, and worry that it mustn't be working properly.
In case it's not obvious, this is not an email validation bypass (the email is valid), this is an example of how "is a valid email address" does not imply "does not contain special HTML characters". This is one of many examples of why you should always be using context-specific validation and escaping. Do not make assumptions that because something is valid in context X it does not need escaping in context Y. If you always escape things in context Y for use in that context, you cannot run into issues with your assumptions being wrong.
\&gt;escaping user input before running queries You're doing better than 90% of the developers I know.
Aha lol :)
"Worse" you meant? ["escaping user input" is a horrible bullshit.](https://phpdelusions.net/top#escaping_user_input)
I totally agree with you. It's important to filter/validate the input AND to escape the output according to the current context (e.g. html encoding etc). To be fair, this is a valid email address according to the [Mail::RFC822::Address](http://sphinx.mythic-beasts.com/~pdw/cgi-bin/emailvalidate). The PHP email address validation returns a correct result here.
There is a site dedicated for this kind of questions, https://codereview.stackexchange.com/ That said, there are no apparent errors in he code, but you should really use [prepared statements](https://phpdelusions.net/mysqli#prepare) for your queries. Also, do HTML escaping *before output*, not after input. 
Really ?
Yes, $v++ will increment $v by 1. That's the change I was referring to. So we do start $v at 1 but then it is 2 after $v++. It's shorthand for $v = $v + 1
Hmmmm are short tags being deprecated or something? ;0
&gt; I was referencing in a business setting (read above) not a freelance position jumping between jobs. I've had several of my clients for 5+ years, including the aforementioned hosting company. It's all a business setting, this distinction between business and freelancing is something you made up to feel better about not having much width to your experience. &gt; I didn't/wouldn't count Bash, Powershell or Javascript as development languages Your arrogance knows no bounds. They're programming languages, period. It's obvious you've never really worked in an environment where you need to pull in tools from various sources to keep things working well. this hubris that only something like C or C# are "real" programming languages is why PHP dev's will use cron and ruby dev's had to go and invent an entire infrastructure to mimic cron (as did Laravel...). &gt; It was to put my point into context, if I just said 'The PHP standard library is shit' it's not very informative or has much merit. Being able to compare it to other languages standard libraries and give an example of where it falls short in comparison to others from personal experience. That's not even close to what you did. let me quote you. _I've programmed professionally in 4 different languages over my 13 year career and I've never seen anything quite like the PHP standard library, **it's a complete joke** and **I can not for the life of me think who the hell allowed certain things in**._ You did **exactly** what you claimed would be a bad thing to do, and you tried to lend weight to that by claiming a vaunted 4 languages over 13 years experience. Which is why I laughed and asked if that was a serious post. As if 4 languages in 13 years was impressive, lol. But now let me explain why certain things are the way they are in PHP. PHP was originally just a very thin wrapper around C, so the order in many of it's standard library calls are in the same order that C calls are in. At the time this was useful because many people were coming from C and were already familiar with the API's. And this is why, to this day, many of the API's tend to mimic C API's. strlen is a good example: PHP: https://secure.php.net/manual/en/function.strlen.php C/C++: http://www.cplusplus.com/reference/cstring/strlen/ it's also why things like count are free functions and PHP wasn't originally an OOP language, because it was highly influenced by C early on and code written in it was done in a very C-like manner. Over the years PHP has evolved, and some of the newer API's were done differently as PHP turned into a more OOP like language. When you see these things in the standard library, what you're seeing is the history of PHP, and every language with history has these sorts of things. PHP is not special in this way, it's just what you're familiar with. For example, C# async/await can cause race conditions in Asp.Net/Mvc if you're not very careful. And it'll catch out anyone who isn't aware of the why and how of it. And the reason is because async/await is new and it interacts badly with the older tech. Whereas it works beautifully with Asp.Net Core. You give me a language that's 15+ years old and I'll find these sorts of problems in that language as well. Is PHP perfect? No. Is it very productive? yes. and who gives a fuck about the standard library parameter ordering, really. no, it's not optimal, but neither is it that detrimental considering how good PHP documentation is. &gt; If you truly are proficient at a professional level, keep up to date with standards and switch between C, C++, C#, PHP Javascript, Ruby and Python on a daily basis then you're way ahead of me and anyone I've ever met in the industry You've just never met any successful freelancers before. I've been doing this shit for roughly 20 years, after a while you've seen enough that nothing is truly new anymore. I've been doing work in C and C++ for 20+ years now, C# since the 1.1 days, PHP for longer than that, and javascript for so long I remember why IE won the wars (their DOM was sane compared to Netscape Navigator). Ruby and Python I'm not sure how long, but atleast for as long as Ruby on Rails has been alive. so 13 years give or take?
 The idea of Safex is to turn e-commerce into c-commerce, where c stands for crypto. [https://cryptpresso.com/future-of-cryptocurrency/](https://cryptpresso.com/future-of-cryptocurrency/) &amp;#x200B;
&gt; Which dev is "confused" by config settings? Did you read the github issue?
I guess this doesn't use [logistic regression](https://en.wikipedia.org/wiki/Logistic_regression), does it?
&gt; Anyone with at least a little bit of knowledge would probably say something like "PHPUnit because it's the industry standard, duh" Sure, but how is that different from any other question about the candidate's skills or experience? If a candidate is pulling this stuff out of his ass, it's fairly easy to figure it out with follow up questions. If you can't do that, then why the fuck are you even interviewing someone? Even if a candidate gets past this step, he'll have do a simple coding test. If he it turns out that he can't write good tests, it's going to be a waste of his time, not mine. &gt; Are you bulshitting your candidates mate? I'm not bullshitting anyone, so you can piss the fuck off.
That's odd to me, one of my favourite things about PhpStorm is you just install it and with no configuration it's immediately useful. No plugins to install, cryptic settings to update, etc. Can you elaborate on what you mean by you can't get it to work with Laravel?
&gt; This is a known limitation of file-mounts and is not fixable. And you suggest, that your approach is a solution to this. It isn't. In fact you still have to restart your container(s) for changes to env variables to propagate. Now think about this for a second: Are you ready to maintain this list of config variables, deprecated and new, for the next, let's say 3 years? For all major and minor PHP versions? https://github.com/jtreminio/php-docker/blob/master/Dockerfile-env A 700 line Dockerfile should set off a few alarm bells. Look, nobody forces you to take this repo down. I'm just telling you the flaws I see here. Just the fact that you're using an ubuntu image tells me, that there's something inherently wrong. Probably start with this: switch to smaller images (one for php, one for web server, one for cache and so on). Do not use "one for all" images.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jtreminio/php-docker/.../**Dockerfile-env** (master → 45f7da0)](https://github.com/jtreminio/php-docker/blob/45f7da04348663a0a9b06801ff2c03236eba3f5a/Dockerfile-env) ---- 
https://www.phoronix.com/scan.php?page=news_item&amp;px=PHP-7.3-Performance-Benchmarks
&gt; Are you ready to maintain this list of config variables, deprecated and new, for the next, let's say 3 years? Yes, I did this with my other FOSS, https://puphpet.com &gt; A 700 line Dockerfile should set off a few alarm bells. Due to a missing feature in Docker itself; The Dockerfile could also be 5,000 lines long, it won't actually increase image size. I could also have simply targeted the top 100 INI settings (or even 20) and still covered the vast majority of developers' requirements. I slapped that full list because I already had it written out in PuPHPet. &gt; you still have to restart your container(s) for changes to env variables to propagate. Only for FPM. For CLI it's all env vars. Granted, the var names are invalid in Bash, but that's a minor issue. Simply removing a file that needs tracked and maintained separately is a win. &gt; Just the fact that you're using an ubuntu image tells me, that there's something inherently wrong. It's nice to get image sizes down as small as possible, but two things to keep in mind: * Alpine is _not_ the same as Ubuntu (duh), which means things like `adduser` do not work the same (Try adding a high-value user ID to an Alpine image via `useradd`. It's missing the `-l` flag and will most likely freeze. See https://github.com/moby/moby/issues/5419) * How much does image size _really_ matter to your build/deploy server? The compressed image size is 99MB. The benefits a proper repo-versioned application ala Ondrej's PPA provides vs a harder-to-track compiled install via Alpine or the official PHP images far outweigh the, in all honesty, small image size. It's not _tiny_ but it's not ridiculous. For the record, the official MySQL 5.7 image weighs in at 124MB. It's really not as big a deal as you're trying to make it.
&gt;cool, let's talk about it. but I said syntax is very similar and I got downvotes, I hate reddit for this. exactly why I replied rather than downvoting, per reddiquite. I know exactly how you feel, when not discussing programming i tend to discuss politics and this exact thing happens to me all the time.
Enough that I know I don’t want my code and tears coupled with the framework. It is so nice writing code in PHP rather than in Laravel. I can coast through my updates of the framework because none of my business logic or tests are coupled to the framework’s global functions. Also I do really enjoy Laravel for the most part; I have used it in many projects and even convinced my work to have our API http layer using Lumen. All of our business logic and tests are written in PHP7 and PHPUnit. One sure reason why you might want to upgrade your PHP version is cause the end of life for security updates for PHP 5.6 is approaching pretty fast.
If I use PhpStorm with a Laravel project, I'm inundated with errors as it doesn't recognise Laravel's methods. For example, if I were to have a blog and a PostsController.. ```php public function index() { $posts = Post::latest() -&gt;paginate(10); ``` PhpStorm flags `latest()` and `paginate()` as `Method 'latest' not found in \App\Post` The method is a Laravel one, and the code would work fine. 
Repo size matters. The fact that you should separate concerns matters. Being able to surgically upgrade only one small part of your application is absolutely 100% key and one of the main points of actually using something like docker. If you're using CI with various environments all deploying in parallel all day by different people, you'll notice an increase in productivity even if your pipelines are only 10 or 20% faster. The example with the 700 line Dockerfile was not about size. It was about the ridiculousness. And what you're doing is basically taking all the information from one file, and put it in another. This is bad. Make of my opinion what you will.
right. It doesn't use logistic regression. It is based on some fuzzy-logic principles. 
Sounds like a bug in Laravel, perhaps a magic method that's not documented in a docblock, or something like that. Switching to Sublime is just ignoring a whole load of errors during development. But I see where you're coming from, I believe Laravel is not well suited to static analysis
Version 3 taught me what it means to need to pray.
How often do you end up just straight up re-inventing the wheel? Because I don't know if you remember but that's what frameworks are for. To stop re-inventing the god damn wheel. The 5.6 is already updated, thank you for your concern but before it was, it was/still is blazingly fast. Seriously though, if you write using the DD design pattern in which you encapsulate your website's modules, and you don't use the underlying framework that connects it all through some sane interface, how do you not repeat your code in every module? Or are you implying that your in-house framework is better than a framework pushed to the limit on a daily basis by thousands of users and developers? I don't know, I'm sorry if I sound too aggressive. It's just, in the past I've dealt with some really bad code, the writers of which were very proud of themselves. They were clowns though.
Could you elaborate on that? I read through the README, but am not getting the underlying concept behind this library.
&gt; Seriously though, if you write using the DD design pattern in which you encapsulate your website's modules.. This is exactly what I am doing, thus why I don't want to couple my tests and code to the framework. I want my code and tests to work regardless of the flavor-of-the-day framework. If you are using Laravel helper functions to test your domain logic, you are doing it wrong.
vue.js
Are you aware of https://github.com/ratchetphp/Ratchet?
They sound like workarounds for the problem though. The issue is how Laravel is written, it's not declaring the available methods for one reason or another. But I can see Taylor not being open to applying static analysis fixes so people have had to create workarounds.
Blade === PHP with alternative syntax, it's not stopping you from writing spaghetti. Twig requires separation of functionality from view more. For example ``@unless (Auth::check())`` vs ``{% if auth %}``, with ``'auth'=&gt;Auth::check()`` being passed to the rendering function. The fact that ``@php`` exists is telling too. When using Blade you might as well just use plain PHP and not have to learn any new syntax.
I just make sure the PHP and MariaDB versions are the same and deploy via PHPStorm, sometimes with ``/vendor``, if there's not too many packages, sometimes I SSH into the server and run ``composer install``. For the database I just export the local db's structure to SQL and run it from an ``install.php`` script that gets deleted afterwards. If that's what you meant, that is 😄
Even if they are more options isn't a bad thing!
[Relevant xkcd](https://xkcd.com/2023/).
Yeah I blame Google Sheets default settings LOL
I heard that ruby is losing market share at a good rate. I find php7.3 and 7.4 to be very exciting, even after writing web apps in this language for almost 10 years now. I think the barrier to php in the future is that programmers are increasingly using design patterns that are overly complex, and also relying on javascript a lot for interactivity. The idea of using less languages is appealing, which explains node.js' popularity. But i feel like node.js is a less intuitive way to write server side code, but using big design patterns and frameworks in php is also less intuitive. php's main flaw is that it still supports simple legacy ways of doing things and has not implemented common stuff in frameworks, so most programmers today will be forced to use a framework, which makes php significantly more complex to debug, since big frameworks like laravel are super high level abstractions which do a lot of 'magic' things that are hard to trace/debug. Many large projects hit a wall because of this. That being said, no other language really appeals to me for backend server stuff still. I think php can be done better, bot nobody has accomplished that yet.
Yeah but I'm just wondering what differences there might be, what this does that could be better than existing options.
I've updated the charts on that post with correct axis labeling now :)
Just want to mention, that Go provides an executable, so you don't need anything just the executable to run it on the server. Ratchet, Swoole WebSocket and this library are best if you feel you self most comfortable with PHP or you work with a team that contains mostly PHP developers. Learning a new language or train a whole team an other language can take a long time. And don't get me wrong I really like projects where people play with the limitations of languages and break out of them.
Thanks for the link, I've added it to my post
FUCK YEAH!!! PHP is becoming more and more friendly for OOP..
I think it remains a problem unless you can document and record the time spent manually testing code, having someone else manually test my code, and then show the time spent on bug related tickets. Without this it becomes a harder case to push for it. By the way, I once worked for a startup that is founded by a former dev who graduated in Computer Science. However, the codebase does not have any tests, documentation, and for JavaScript was pretty out of date with its spaghetti code of JQuery and no modules. So we cannot guarantee that a technical founder will always have the best practices in mind.
 $username = "loeblcom_lcspm01"; $password = "password"; I.. I feel like if you just switch them this would be better. I'm also not clear what this article offers that the [official documentation](http://php.net/manual/en/function.mysqli-connect.php) doesn't?
A comparison to a 5.6 version could be nice to see :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Parent probably meant an intermediate query language used by some ORMs, like Doctrine's DQL
Did PHP 5.6 when I compared PHP 7.2.0 last time [https://community.centminmod.com/threads/php-7-2-0-ga-stable-vs-php-7-1-12-vs-7-0-26-vs-5-6-32-benchmarks.13590/](https://community.centminmod.com/threads/php-7-2-0-ga-stable-vs-php-7-1-12-vs-7-0-26-vs-5-6-32-benchmarks.13590/) didn't this time as pretty much everyone knows PHP 5.6 is roughly 1/2 the speed of PHP 7.0.x branch.
What is the point of this? There’s nothing in this article that is not in the existing documentation. Beyond that, this is quite possibly the worst way you could consider handling your database connection. Low-quality blog spam is low-quality
Thank you for posting this. We all learn a little from the useful feedback of others :) Skimming through your code I encountered a funny use of namespace addressing in your src/Builder files. e.g. &lt;?php namespace p810\MySQL\Builder; class Delete extends Builder { use \p810\MySQL\Query\Where; use \p810\MySQL\Query\From; ... I thought the use statements are meant to be outside the class scope at the top of the file, as namespacing statements are resolved at compile time rather than at object instantiation?
Thanks for continuing to make PHP more awesome /u/MorrisonLevi!
what are the arguments against it?
This is a conversation I've been wanting to have for a long time, but I've never gotten around to it. Let's have a go. So return **covariance** makes perfect sense to me, because Liskov's Substitution Principle (LSP) basically states that if S is a subtype of T, then S can be used anywhere T is used. For example, in PHP you can expect an Exception and use its subtype, RuntimeException, knowing that it'll be compatible (no weakening of postconditions, etc.). There are so many use cases where this is applicable. The parameter **contravarience**, though, is where I have my doubts. I don't know how other languages get away with it, and I know it doesn't inherently break LSP (when preconditions aren't strengthened), but how the hell can that be enforced, especially in PHP? I'm assuming it just won't be enforced. There was an [example in the RFC](https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters#examples) about allowing a derived class to have less derived parameters, going from an `Iterator` to `iterable`. So, if I understand correctly, it will be fine to pass an `array` (i.e. `iterable`) to instances of `Concatable`, which can in turn call `Iterator`'s public `key` method but actually we'll be greeted with a very "fun" to debug run-time error. **How will this be mitigated?** By having a more educated community? Yeah, fucking right. I mean I'd love that to happen, but there's a vast amount "PHP coders" out there that don't know that PHP has type hinting, or what composer is, or that there are PHP Standard Recommendations. Granted, this RFC is not for those people, but there's a wide spectrum in between, and I can totally see someone violating LSP (and creating debugging hell) with the addition of parameter contravariance. Having said all this, I'm still completely sure that this is the right direction to go down for PHP. Some more questions/notes regarding parameter contravariance: • Type hinting will be a bitch without union types and we'll have to rely on docblocks even more. Any remedy? • Is it possible to go even further from object to scalar? I don't imagine so, but there something like going from `Decimal` to `int` or `float` • Is it possible to go from one scalar to another scalar with strict types set to 1? e.g. from `float` to `int`, or from `string` to `int` (bcmath comes to mind)
php started as a template engine look at this [example #1](https://secure.php.net/manual/en/history.php.php)
me too, i always do small project and smarty is capable of doing that so i don't see the need to learn new engine
&gt; So, if I understand correctly, it will be fine to pass an array (i.e. iterable) to instances of Concatable, which can in turn call Iterator's public key method but actually we'll be greeted with a very "fun" to debug run-time error. Fortunately, your understanding is not correct. `Concatable::concat` still needs an `Iterator`, but a `Collection` will accept any `iterable`, including `array` and `Traversable. Make sense?
&gt; That's why you should have an add method for arrays inside an object. PHP arrays have value-type semantics. Value-type implies immutability. The whole point of immutability is to workaround type systems that don't have value-type semantics. In PHP, that would be objects, not arrays. &gt; Ok, so what? What's your point here? You can do the same accessing $config-&gt;getDbServer() when using objects. OP is saying the same thing. What is the point of turning an array with value-type semantics (which implies immutability) into a reference object, when there is no behavior to encapsulate? 
Seriously. Please **do not share your tutorials**. To face the truth, you don't know PHP, you don't know programming in general, you don't have any practical experience in developing and maintaining any real-life applications. Your code just screams for that. As a result, your "tutorials" will just make people who have the same zero knowledge. 
Seriously. Please **do not share your tutorials**. To face the truth, you don't know PHP, you don't know programming in general, you don't have any practical experience in developing and maintaining any real-life applications. Your code just screams for that. As a result, your "tutorials" will just make people who have the same zero knowledge. Beside trifle things mentioned in other comments, your code suffer from real errors. For example, connection encoding is not set, which will lead to the broken data in the database. Had you knew that from the practical experience, not a toy one, you'd knew that by heart. And there are other problems, like... wait. This is just a blogspam. WTF?
I think it has very different meaning 
you can use this library for making any kind of decision which have some predefined criterias 
AFAIK, the main problem has always been about how to handle autoloading. Let's say, for example, you have classes: ``` class A { } class B extends A { } ``` Now, if you would also have the following two classes: ``` class C { public function foo(B $foo) { } } class D extends C { public function foo(A $foo) { } } ``` This would be permitted by LSP, since the parameter type `A` is "wider" than the parameter type `B`. However, how would PHP know that? Right now, loading a class does not trigger autoloading for anything else than extended/trait/interface classes. For the class `C`, PHP doesn't need to know the definition of `B` for the perameter type hint, since it can verify it during runtime from passed values. However, if contravariant parameters are allowed, for class `D`, PHP needs to know if class `B` extends class `A` (so that that it knows if the type is contravariant or not). So, now PHP would also need to autoload the parameter types in some cases. We can make this even more complicated by adding circular dependencies: ``` class A { public function bar(D $bar) { } } class B extends A { public function bar(C $bar) { } } ``` Now there is a circular dependency. Class `B` needs to know the definition of class `D` &amp; `C` and the class `C` needs to know the definition of class `A` &amp; `B`. It gets a whole lot more complicated when you remember that autoloading code is actually PHP code that is being executed, so you also have to think about how to handle incomplete classes in these scenarios. I believe that not many are opposed to including covariance and contravariance in PHP. It's just that the implementation gets tricky when all the class definitions are in different files.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Interesting, I didn’t think of that.
CRM is not ORM.
Normalized version**s** of SQL. An infinite number of "normalized" versions, each "normalized in its own way" - to learn and understand.
I'm just so happy with the direction that PHP has been going the last year(s). It's thorough, it's modern, it's fast. So awesome.
Is Lando only for MacOS?
I get an annoying pop up asking for subscribing and I don't see an X symbol to close that thing. 
&gt; FIG is bad because they ejected its creator, Paul M. Jones Removing someone who was hell bent on pissing everyone off was a good thing, since he left the drama in FIG has been minimal. He had good intentions to begin with, but he's incapable of working with others. Much like his attempts at opensource frameworks/packages, his FIG replacement hasn't exactly taken off, precisely because many people just dont want anything to do with him. 
&gt; something that didn't belong to them Don't invite people to the party if you don't want their opinion.
You can just click anywhere off the pop up. I wouldn’t bother though, you aren’t missing anything.
Would it make sense to support contravariant typed properties?
&gt; What's the sane™ approach? Don't share files between host and guest. Consider the guest as an autonomous server and deploy your files there. Most IDE can be setup to auto-deploy files when they change so why would you make your life harder with file permissions problems.
just click any where in the display it will close
Contravariant typed properties would not be sound. Quoting from the [inheritance and variance](https://wiki.php.net/rfc/typed_properties_v2#inheritance_and_variance) section of the RFC: &gt; The reason why property types are invariant is that they can be both read from and written to. The change from int to ?int implies that reads from the property may now also return null in addition to integers. The change from ?int to int implies that it is no longer possible to write null to the property. As such, neither contravariance nor covariance are applicable to property types. Covariance could be supported in conjunction with `readonly` properties.
No, because properties can be both written to and read from, so either kind of variance would break either writing or reading the property in certain contexts. Contravariant property example: ``` class A { public DateTimeImmutable $datetime; } class B extends A { public DateTimeInterface $datetime; } // passing an instance of B to this function would error function (A $thing): DateTimeImmutable { return $thing-&gt;datetime; } ```
Sorry buddy for making you so upset. It was not about being stressed. Just to correct your spelling. Cheers.
I never said he didn't contribute, his contributions were undeniably some of the best, with early PSR's being absolutely pivotal to improving php for all of us. That's got nothing at all to do with what I said though. The way he conducted himself towards the end of his time there was the ultimate reason he was asked to go. 
&gt; mysql_connect still works No. No it doesn’t. 
I recommend https://www.codewars.com 
Right, thanks for the answer! I see how covariance could work with `readonly` properties 👍
Can you use a Geo spatial database: https://en.wikipedia.org/wiki/Spatial_database To give you the count of each country to you in PHP? 
Which one?
I need to develop a web app with user sign up and log in. And then users can purchase digital goods(PDF documents). The thing is, we need to resell this system to other companies so that they can put it on their site. When people use it on one of these other sites we want it to still use our back-end(user system, document store and payment processing). But when people use it on another site we don't want them to know that it is powered by a different company(us) - so the front-end sign up, log in and cart forms etc. should never redirect to our services but when those forms are used they should always hit our back-end. &amp;#x200B; So is there a way to do that securely? Or must the user sometimes come to our front-end and then be redirected back to the re-seller's site?
Twig
This is just a crappy advertisement
Still, it explains well how to setup SSL on Magento 1.x
What exactly would an SDK provide that using Guzzle with the API doesn't?
As would any simple Google search. It’s blog spam to sell SSL certificates
Yet another problem looking for a solution in PHP. &amp;#x200B; This could be resolved with duck-typing, which would be historically idiomatic. &amp;#x200B; Instead, we get the stink of strong typing. I think the RFC author should just consider using Java.
Wut?!
#I NEED TO DEVELOP A WEB APP WITH USER SIGN UP AND LOG IN. AND THEN USERS CAN PURCHASE DIGITAL GOODS(PDF DOCUMENTS). THE THING IS, WE NEED TO RESELL THIS SYSTEM TO OTHER COMPANIES SO THAT THEY CAN PUT IT ON THEIR SITE. WHEN PEOPLE USE IT ON ONE OF THESE OTHER SITES WE WANT IT TO STILL USE OUR BACK-END(USER SYSTEM, DOCUMENT STORE AND PAYMENT PROCESSING). BUT WHEN PEOPLE USE IT ON ANOTHER SITE WE DON'T WANT THEM TO KNOW THAT IT IS POWERED BY A DIFFERENT COMPANY(US) - SO THE FRONT-END SIGN UP, LOG IN AND CART FORMS ETC. ON THE 3RD PARTY SITES SHOULD NEVER LINK/REDIRECT TO OUR SERVICES. #&amp;X200B; #SO IS THERE A WAY TO DO THAT SECURELY? OR MUST THE USER SOMETIMES COME TO OUR FRONT-END AND THEN BE REDIRECTED BACK TO THE RE-SELLER'S SITE?
"Our back-end" as in SaaS (code is on your company servers) or On-premise (code is on that other company servers)?
This makes it syntactic sugar. Strong-type fetishism has bit itself in the ass in PHP. These are the kinds of problems that have been solved for years in a practical sense.
I don't understand, how is it resolved with duck typing? 
You say that as if he is suppose to know what guzzle is. 
Do you want to act as an eCommerce API? So basically you need a API, which provide the interfaces to "buy/sell" (and everything that is important). And you also need the Core Client (call it whatever you want), which uses
I see what you're getting at, I assumed Guzzle was well-known but maybe not. (It is easily Google-able though.) Anyway, the point is you don't need a special reddit-specific library to use an API. An API is just a bunch of URLs that return data, there are many ways to achieve that.
WHAT???
Absolutly, just checked I mistaken this library the hole time :o
Well, more and more friendly for typed programming in general regardless of OOP/FP/etc... 
More abstraction? Isn't that always the answer?
Buy different domains for the same server? :-)
Just to chime in on contravariance/LSP: LSP is about behavioural subtyping and in general undecidable meaning that it's akin to the advice of: "always write terminating programs". It's a "good" advice in the sense that it captures a desirable property of the program but you can't provably adhere to in general which renders it less useful than a provable property. Covariance/contravariance on the other hand is independent of LSP and has its roots in type theory/category theory. To really understand whya function is contravariance in its argument and covariant in its return type you'd have to go somewhat deep in the math but rest assured it has sound foundations. So while contravariance is counter-intuitive to our minds the theory behind it is sound.
Thanks! Some testers are now on the list. But we need a lot more if we want a beta period as short as possible.
You could make an argument in that designing a type system piecemeal, like is currently being done, won't guarantee the best result (e.g. how does mixed/any fit into this system) and that we should be doing bigger steps at once. I won't make this argument because it's really hard to design complete systems in one go.....particular when some of the people who vote on RFCs either don't understand type systems, or don't think they are useful. So you have to show "this next bit provides this value" in a way that is hard for them to refute.
Answer first question: &amp;#x200B;
Answers second question: &amp;#x200B;
Imagick Contained: Help wanted Do you use Imagick? Do you use containers? Do you want to limit the chance that a hacker uses Imagick to steal data from your server? Hello, I'm Troy McClure^H^H^H^H Danack, the maintainer of the Imagick extension. It's been my recommendation for a while that people don't run Imagick inside their webserver, but instead run image processing as a separate background process. This is quite a bit of work for people to setup, and so I don't think many people are doing that. To make it easier, I've started making a project that has two parts: i) a container that runs Imagick. ii) some library code for interacting with that container via Redis. The current status of it is 'working, but only as a proof of concept'. Does anyone want to contribute back to Imagick by helping me get that project into a state where it's ready and easy to use? The project is at: https://github.com/Danack/ImagickContained There are multiple things people could help with such as: * What is an appropriate way of passing in arguments to configure the container? * Making the code easier to use. * Writing better examples. * Configuring seccomp-bpf to prevent data exfiltration. The end goal for the project would be to have it be part of the Imagick release, rather than a separate project, so that people can use Imagick in a safe way easily, rather than it having to be a separate thing.
http://homestarrunner.com/sbemail51.html
[/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/) 
/r/redditsilver/
Indeed, a lot of nice things can come from an SDK. API rate limits and throttling are probably the biggest things I usually wish I could get for free (after authentication).
https://phpunit.de/manual/6.5/en/fixtures.html
Yet another low-quality "tutorial" made up of code snippets copied from google searches with nothing added except for ad content. Can you at least learn how to format code blocks your your blog, OP?
How do you mean?
Can you be more specific? Is this some sort of weighted average score using user-defined scoring functions for each feature or something else?
Perhaps if can automatically retry if a certain request was refused for having reached certain limits. It can be done in multiple ways.
Yes, I've seen SDKs that will do the right thing for responses like X-Retry-After. Same sort of thing for authentication; if a request fails with the existing token, it will reauthenticate and then try the same request again with the new token. All transparent to the user.
I have an array of $_POST data that I am looking to update a JSON file with. Elsewhere I've used a foreach loop to iterate through each individually. But now I need to essentially loop through each simultaneously and I'm finding that to be a bit more difficult than I expected since I can't (to my knowledge) combine a foreach statement and trying to iterate through each (with a regular for loop) has been unsuccessful (even when my code seems to match similar examples I've found online).
Maybe if it's too much to process you need to break it down into smaller chunks and then try and build up your understanding from there. Do you know what the MVC structure is for?
What most people todays think of OOP is basically java. If It looks like java It's OO and reverse. One of main problem with OOP is that It doesn't have a mathematical/clear definition. Although there is Alan Kay's definition But It's not widespread and is rejected by popular OO languages like Java/C#. When people talking about OO they usually mean putting things in class, inheritance, public static final f\*\*k, casting , ... . not message passing or even objects . There are problems with Java style OOP and already covered. We should ditching It for functional or even procedural programming. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Are you using a good MVC framework? You really should :) If it has good documentation, you can learn how it works gradually. My favorite is the Yii Framework, but CakePHP is also really nice. They are very close to the heart of MVC.
Yes, I do know it. I purchased the MVC course from Traversy media. He does not explain why he is doing the way he is doing. I have been just copy pasting code.
I am learning how to build my own MVC. What do you suggest shall I jump into Laravel or should I learn my MVC basics first ?
For starter, MVC is itself a structure. Model, View and Controller. As a rule of thumb, your model should only contain business logic. Your View should only contain presentation logic. And your controller should only contain the request logic. In short, your controller should not process data or render anything. It should just establish the basic logic behind the request and organise what the request should return, grab the data from the Models, then assign the data to the view. I know it's a simplistic answer. Maybe it's not what you were looking for. 
Don't.
I never really understood MVC until I started working with a Framework. I'd suggest maybe trying that. I'd suggest Laravel.
I'd suggest picking up Laravel and learn MVC that way. Start here: https://laracasts.com/series/laravel-from-scratch-2018
Indeed, watching the series will help him a lot I think!
I do not know anything regarding Traversy Media course. From experience these online course assume the viewers have some extended knowledge and don't require explanation of the semantic. I assume you are looking for a ELI5 MVC course? In my opinion, if you understand the basic that the model handle all t he data processing, the view all the presentation and the controller ties everything together. You should be ready to work with any of the popular MVC framework. While working with these framework you'll get familiar the basic and get a better graps at the whole MVC concept. 
The really basic structure is 3 folders: Model, View, and Controller. The controller controls what you get as an output from the server, basically it gets data from a model , if needed, then passes the data to a view and the view displays the data to the user. Like everyone else said Laravel and Symfony are a greate start but their structure is really complex for a new starter. I learned the MVC design pattern from the more strictr C# language. The ASP.NET Framework has a really good implementation of the MVC if you have time you can try it, but if you want to learn PHP fast then start with Symfony.
i see what you're saying, thanks for your feedback, now i have an idea. 
From what I see OP doesn't do a dependence injection of class Db into class User, he extends it and makes the connection in the constructor. So this in order to work he needs to remove the extending of the Db class make it as a dependency, and use a mock library or the mock features of PHPUnit. For making the connection he can do it when creating the new instance of a the Db class.
That's akin to "what does guzzle provide that curl doesn't?"
I think even if you don't intend to use Laravel, learning MVC within the context of a framework like that will be easiest. I suppose there is a chance you will get bogged down in the Laravel-specific details, but I think you'll also learn a lot from that as well.
But why reinvent the wheel when someone else has likely already done this work? 
Twilio was the easiest (cheap, but not free) way to do this that I've found. This was a very easy to use package for Laravel (not sure if it's Lumen friendly ootb) and the Twilio API: https://packagist.org/packages/aloha/twilio
This [Symfony article](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html) walks you through the process of setting up a basic MVC app and compares it with a more traditional flat file approach.
&gt; backwarts 🤢
Right, so then you should pause the videos and do some reading on MVC and figure out what you don't understand, and go from there. 
Few bad practices in this article, just tweeted the author hoping they'll take my advice into consideration. in short: `getenv()` instead of using config which can be cached, using old array syntax, not using dependency injection, no tests.
It sounds like you want to build an API. That way you can interface with your core application from multiple different clients (frontends). What's your level of experience?
Doing a couple tried with laravel might give you a good grasp and make it easier to try and do your own from scratch. As mentioned, laracasts is very helpful. When going for your own thing, I think I remember a series of blog from symfony lead dev for "building your own framework" (can't link it ATM I'm on phone in commute) might be helpful.
For Symfony plugin in gifs see https://www.tomasvotruba.cz/blog/2018/08/23/9-features-of-symfony-plugin-you-should-not-miss-in-gifs/
IMHO, you're no longer unit testing, as soon as a database (not mock) is involved. Fixtures would provide some *data* but if you really tried to have a database connection involved, you're testing on a functional or integrational level. 
https://github.com/codewizz/laravel-reddit-api
Maybe you should try to explain what this is and why I and others should apply to test it. Is it easier for new devs? Better then running docker? Ext.
I used to read this articles a lot in the past and they were totally responsible to my learning.
Oh, yeah. I was more pointing that one person to a library that does do logistic regression. Your thing and regression are two very different things.
&gt; someone else has likely already done this work What work? There is no work to `$guzzle-&gt;request($url, $params)` Personally I’ve never had problems dealing with API changes. In my experience either it’s a dead simple change, or it’s large enough that the SDK changes and you’d have to rewrite your code consuming it anyway.
To me that seems like something that should be a generic ‘API consumption’ library, not part of a site-specific SDK.
For php. A language built for the request/response cycle of the internet. More abstraction? Seriously? https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/
Appreciated. I knew it was something simple. I found it in the [Documentation](http://www.php.net/manual/en/language.types.string.php#language.types.string.parsing.complex) in case someone else finds this post via search.
but I have one another example in README about basketball players , does it look unclear? P.S thank you so much for your reply
Seems to be some sort of Cpanel / WHMCS alternative for PHP. Not sure why anybody is still using these types of tools.
 EasyPHP Devserver is the first WAMP package ever published (1999) - www.easyphp.org A new version is in progress. The first beta should be available at the beginning of December. What's new ? * last version of PHP 7.2.x * last version of Apache 2.4.x * last version of MySQL 8.0.x * new tools * bug fixes and cosmetic
And those things are not in guzzle. Why? Because every site specific API is different.
Use docker with `-v`. 
Unit Testing is not a silver bullet. In fact, Unit Test is close to "pivot testing", where some functionality is kept during the time versus to do a profound test. So, if the developer is disciplined, then he doesn't need a unit test. &amp;#x200B; Also, some people play unit-test as a game, the goal is to obtain the green icon no matter if the test is useless or not. &amp;#x200B; For example, things that ARE CHEATING and they are not a proper test: &amp;#x200B; \- Testing a database, a remote service or a file creation without a database, a remote service or a file. (i.e. most "mocks"). \- To do a trivial test. For example, let's say that we have a function that divides two numbers. To test divide(20,30) and divide(10,20) while it's fine, but it is not a proper test. A proper test is also to push the test until it fails. In this case, is to divide by zero (also, to divide big numbers). \- Testing the model class (a function-less class). Why some testers do that? for more coverage?. That is insane. &amp;#x200B; \*\*Anyways, Unit Test is not a free pass to avoid QA.\*\* &amp;#x200B; &amp;#x200B;
Right, then you have a blob of data of some sort or another and have to do something with it. An SDK would put that into a more usable form (depending on what you're grabbing). A lot of APIs are also behind auth of some sort and an SDK would bake that in. If you've never had problems with API changes I'm guessing you don't do a lot of work with APIs. Where I am we went as far as creating an API aggregator for apps we run so when APIs change we likely only need to update in one spot. Saved our rear a year ago when an internal API revved and deprecated and now dropped old version support. We'd have had weeks of work to make changes in the couple dozen apps we run, but instead were able to update one location and carry our old abstracted structure through to the apps like nothing changed.
If you don't write unit test, then your code is spaghetti?. It is not how thing works!. &amp;#x200B;
I'm working on a big project where these features would be useful, I'm just not ready to try them out yet. But I like what I read. I'll try to revisit when I start to work on data import.
I agree, It is possible to write a quality code without unit test. &amp;#x200B;
Count 
In SQL it is: SELECT COUNT(*) FROM Database.Table; In PHP, use PDO or MySQLi
It’s probably a good idea to use indices on large tables 
For passwords everybody just sends them over HTTPS POST but what you really actually technically want is a Zero-knowledge password proof (https://en.wikipedia.org/wiki/Zero-knowledge_password_proof ) For credit card forms you'd want to support third party credit-card payment processor(s) because its obviously not your personal proficiency. I am confused as to how you would think people send credit card data over the internet **without** using HTTPS POST. There is never going to be a more secure method than HTTPS POST because if you can defeat HTTPS you can man in the middle everything from the beginning. Log in and session management is very subtle and complicated and again you'd want to delegate as much as that stuff to a library because it's not your core competency. I am really confused as to whether you are attempting to program an e-commerce frontend for showing to customers or an e-commerce backend that actually stores the transaction data.
count(1) is better
dont know what sourceset is but image magick is usually the best option. if you dont have it there are some native image functions in php. or you can try an old library I wrote called easyimage, which makes and edits images, pds and animated gifs.. you can search for it on github.
I've been thinking about this for a while and I think really the only rock solid way to put dynamic data into webpages is to use an XHR request and JS to put it into the HTML. Basically document.getElementById('commenttext').textContent = dynamicContent; It's probably just simpler to shove dynamic content into a sandboxed iframe of a different domain though. Everything else really is just too easy to break.
It's PHP, look at the comment section. Everybody rolls their own solution. This person wanted an integer from a statement, and I delivered that. If you want perfectly optimized, future proof code, you're not paying enough.
&gt; Covariance/contravariance on the other hand is independent of LSP and has its roots in type theory/category theory. Thanks for the insight. I've never dabbled in category theory, but I'll add it to the list of things to peruse sometime. &gt; So while contravariance is counter-intuitive I wouldn't say it's counter-intuitive, per se, because obviously there are use cases for it (ones I've personally felt the need of in the past), but - to put it shortly - I had a misconception pertaining to parameter contravarience eventually opening up the possibility for parameter covarience through inheritance, but I discovered that wasn't really the case. It does, technically, allow room for bad programmers to violate LSP by strengthening preconditions through inheritance, but that possibility was always there to begin with and it wouldn't be due to the signature change.
I've used ImageMagick the most (but with Java) it works with PHP though, you have a lot of control over the output. I.e stripping meta info, color space info, chroma sub sampling - everything possible to minimize file size. PHP has the GD library as well which I've used a lot http://php.net/manual/en/function.imagescale.php 
Have you ever tried working with Laravel collections?, they give you what you want. There are other libraries too. I know, is not what you want. I would love to see an object-oriented alternative right inside PHP standard library, it would be great. Anyway, it looks like little people are worried about this, In my personal opinion, I think there is no interest in implementing this on PHP, but I'm not sure, you could go and take a look at [https://wiki.php.net/rfc](https://wiki.php.net/rfc) , there is where people discuss and do a request for change for PHP. \-&gt; [https://wiki.php.net/rfc/howto](https://wiki.php.net/rfc/howto) &lt;- recommended reading to understand how rfc works.
I really like the php community, plus Laravel is my fav framework. If I were to move to another language, there are a lot I would choose before Java.
Thanks for this! I do use Laravel collections and use DTO objects whenever I can. Still, there is an extra step involved in wrapping an array in a collection. I'll check out the rfc links.
Check out something like imgix or cloudinary. You‘ll never want to go back.
It's an attribute of the &lt;img&gt; tag that is used for implementing [responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)
why not just work in Ruby then? I mean no hard feelings, use what you love you know?
Because OP loves Laravel, and having Object Array's could make OP loves PHP more than Ruby. I know your comment doesn't have any bad intetion, but, PHP has evolved a lot thanks to people proposing new things instad of just "using another language". I think we have to encourage this kind of request.
...wow. Serious business. It wasn’t a joke. If you like the general syntax of PHP but want to call methods data type objects, then Java might be something to check out. 
they change the behavior of 'count' and create a new functon 'is\_countable' to save the ass
I think your comment sounds sarcastic because: 1) OP clearly stated: "I love working with Ruby and Javascript who does this". He already knows two languages who satisfy OP needs. 2) OP never asked for a language.
I like [immutable.php](https://GitHub.com/jkoudys/immutable.php). Handy for all those methods, and keeps immutability. It's basically the exact gripe you describe - it wraps SPL with these methods. 
I don't know where did you get that, but it makes a nice addition to my collection of PHP delusions, thank you!
sorry for inconvenience. I will check this and give assurance this will not happen in future. Sorry once again
Or probably not
&gt; In PHP, use PDO or MySQLi You must be very careful giving advises like that. People may take it the as though it's the API function returning the number of rows should be used. So I would make it as *In PHP, use PDO or MySQLi to run this query and fetch its result.*
The fact that there’s no array_key_exists for iterables is wholly frustrating.
That could be a bit problematic. In order to tell whether the key exists, it would need to actually iterate through the iterable. And in the case of non-rewindable iterables, that could have bad side effects.
A good rebuttal you meant?
Individual variable operations are absolutely minuscule compared to the overhead of compilation and runtime linking. If you're having to re-use a large quantity of rarely-changing data on each request you might instead want to look into a userland caching solution such as APCu or serializing the data in and out of a local Redis instance. Now if you're asking for something like APCu to be moved to the core and made always-available, that I would absolutely agree with. 
MDN has an article on the subject, [MDN Responsive Images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)
What the "best way" would be depends on your circumstances. One way is to have a bash-script using ImageMagick "convert" to create several images with custom sizes for each image. Or create a set of images having well-known sizes, same set of sizes for each source image. Another option is to dynamically create the images needed, with custom sizes, using (PHP) server-side rendering of new images. The image link then looks like this: "image/car.png?width=500&amp;height=500&amp;crop.to-fit". One option for server-side rendering is [Cimage](https://cimage.se) which is PHP/GD (I'm the author).
It is not clear from your answer, whether the same SQL should be used with PDO or MySQLi. It can be read as "In SQL use this query, in PHP use PDO or MySQLi". And gets understood the wrong way.
Yet another blog post on how to use a third party API. 
you could have a build script which generate a PHP file with "variables" ( they would not change so they would be actually constants) before preloading, but userland cache would already be good enough in most situations, I doubt it would save so much time.
i had some hope wirh nikic's scalar objects (https://github.com/nikic/scalar_objects) but it doesn't seem anyone is working to make it land in core. In part it's because it would leave PHP with 2 versions of the same functions because they would NEVER remove array_map, so at what point are you fixing things or just throwing more noise to the already complicated standard library
[Glide](http://glide.thephpleague.com/) Is worth a look. 
On the client side is one aspect. Most PHP developers do template rendering on the server side (Plates, native PHP, Twig etc....). The problem with the email RFC is that an valid email address can contain dangerous code. You always have to validate and escape/encode the entered values according to the context. This means that if you are using Plates or native PHP templates and you "forget" to html encode the email address, your application is vulnerable to XSS. Therefore, it is important to use the correct HTML encoding by default (like Twig does).
So many assumptions. So much bad advice. I cringed when I saw the access control headers.
"Scheduled task", not "cron job". Windows does not have cron tables as far as i know.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [doctrine/dbal/.../**MasterSlaveConnection.php#L68** (master → 9dbec4b)](https://github.com/doctrine/dbal/blob/9dbec4b53988676ce2385e679612fb0e15583171/lib/Doctrine/DBAL/Connections/MasterSlaveConnection.php#L68) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply eamqg6q.)
Thanks! I'll have a look at this
I would use RabbitMQ for this.
Probably , getting back in PHP
There is a chance, but this would be a major change to the way types in PHP work internally as far as I know. This means it would take loads of work to make happen.
In PHP or in your IDE? It is not clear from your question
PHP
I think the best way to go about this problem is to use machine learning, maybe something like [Google's Vision API](https://cloud.google.com/vision/). I don't think PHP is up for such a task.
Code igniter is very easy but certain things u have to do it again and again it is better to try Laravel it is super fast and highly structured it force you to follow the structure.
Ironically, using QR codes would be a lot simpler, as there's already plenty of libraries available to process QR codes: https://github.com/khanamiryan/php-qrcode-detector-decoder If you don't want to use QR codes the only way I can think of reliably doing this without using AI is to make sure all the markers are in one colour, take all the pixels out of an image with that colour then look for all of the markers using brute force from each pixel. Not easy and not fast, but it should work.
Here are two major libraries that provides pretty good abstraction over database: [https://www.doctrine-project.org/projects/dbal.html](https://www.doctrine-project.org/projects/dbal.html) (+ orm if you need one: [https://www.doctrine-project.org/projects/orm.html](https://www.doctrine-project.org/projects/orm.html)) or [https://github.com/illuminate/database](https://github.com/illuminate/database) &amp;#x200B;
I always see the lack of context information in posts like these as a need for attention... I bet OP was waiting for this question.
is that you, common sense? wow. the most obnoxious guy on stack overflow is now on reddit. luckily, my suspension ends a few months before yours so I'll have some peace and quiet for a little while.
why is the water foamy?
And exactly what is wrong with the help you're getting over there?
it's because they've pissed in it isn't it
I think Google Vision API and similar machine learning is overkill for the purpose. There's nothing to learn once the application understands what to look for. No evolution necessary. and I dont wanna be tied up with subscription fees or requiring internet to function. I'm developing a completely offline System. &amp;#x200B; I was hoping PHP had something but if not, phyton perhaps? or C?
I actually have an actionError() method in SiteController.php
No offence but nobody's else fault but JS Developers. There must be something wrong with your development flow when you have to relay on 3rd-party package that is responsible only for adding left padding to string... For some time I'd been involved in nodejs app development and each time I requestes any new feature I heard: "no problem, there surely is already a package that handles this".
Yeah, saw a post in one of the JS thread where they were pointing this out. An example was a one-liner package, I can't remember what it did, but was quite trivial. Yet the package is being downloaded is used in thousands of projects.
i'd do it this way... if($water-&gt;getSource() == 'tap') die(); :D
Still a waste of energy to use water from the fridge if you want to heat it.
From the sidebar: /r/PHP is not a support subreddit. Please visit /r/phphelp for help
Why would you do Yoda-style? Especially in that comparison above, you'd never have a variable assignment anyways, even when using a single equal sign. And then most professional IDEs point out accidental variable assignments in functions. And even _then_, programming PHP for 12 years now, it never happened that I accidently assigned a variable in a condition when I didn't want to. Did you? Yoda assignments are cancer. They completely break your flow when reading code.
I feel you and would never use them either. But I must also say it's personal choice if you'd do.
This exactly :)
Or you just clean it with vinegar occasionaly. The cost in energy/greenhouse-gasses would be less than the continious opening and closing of the fridge.
Maybe I exaggerated a bit, don't take it too seriously :-) &amp;#x200B; (in general we adopted the Symfony coding standards that use Yoda when assigning a value to a variable only, so this rule wouldn't apply here; I'm not the biggest Yoda fan and wouldn't force it onto others, but defining exceptions to standards is something we'd like to avoid)
You're probably thinking of the is-odd package. It's saving billions of node developers from the horror of writing a modulus line!
In the photo on the left, the pile of white at the bottom of the pitcher, that’s lime scale from tap water. 
What I wanna know: is compromission actually a word..?
It gets worse.. is-odd depends on is-even and just negates it (or the other way around) and on is-numeric. All of them are one-liner libraries from the same author.
101M downloads for this: return (n % 2) === 1; and it uses another package to check if n is a number. I don't know if it's "no need to reinvent the wheel" or laziness...
I think your earnest comment struck a cord because it addresses the elephant in room, Symfony is like a sub-par Java, and as a community we've put all our eggs into it Remember PHP developers get a lot of flak for coding in PHP, being able to point to objects and say "well actually PHP uses objects like all the other grown up languages" is a welcome relief The problem is that the object foundation introduced in 2005 is unsound, and when it's complete we'll experience PHP as Java (enterprise verbose indirection hell) In my experience devs get very angry if you point out the influences of their frameworks i.e. laravel convention over configuration from rails and claim that their framework is their own thing like they haven't been re-inventing the wheel for years So be careful not to suggest Java to a Symfony developer they're doing their own things and definitely not re-inventing the wheel again, they're definitely not comparable in anyway or influenced from one another /s :| 
https://github.com/nikic/scalar_objects
&gt; return (n % 2) === 1; Slightly offtopic, but that returns `false` for negative numbers. `(n % 2) !== 0` works for all cases.
Yeah, I’m a little surprised by the downvoted and weird list of inferences someone else pointed out that they took from my comment. OP’s question to me sounded like, “do you wish PHP wasn’t PHP?” We use PHP in a lot of apps at work. And we don’t use it in other apps. I’ve got nothing against it. Hell, in a lot of ways I wish Rails was more like Symfony. I forget this sub can be fanatically defensive. I didn’t mean to put PHP down. It just seemed like a logical answer to me. 
Make sure you put that in a package so others don't make the same mistake! /s Seriously, though, this is part of the problem. Even trivial problems can have weird edge cases that need to be considered. A lot of ~~lazy~~ overly cautious devs would just prefer to grab a package that did all that pesky edge case consideration for them.
LOL....sounds on-topic to me
Are you looking for Software As A Service?
I dare to say it's not only lazy or overly cautious, but also uneducated. There's a large portion of js devs that have learned js as their first and so far only programming language, either self taught, or through a bootcamp and are sometimes missing a basic understanding of how programming works. I believe the main reason for the popularity of such packages isn't "oh, all those edge cases I'll have to consider, rather include a package", or "writing this line everywhere is too much work, i'll just use this package". It's "I have no idea how I check whether this number is odd, ah, there's a package for that". The js ecosystem makes it pretty easy to just `import solution from 'does-something-i+dont-understand';` 
I used to work in an office where the tap water would make for terrible tea. Tasted fine mixed with squash. Tasted fine plain. But made for muddy tea. Terrible. I used to fill the kettle with water from the water cooler.
 if ($water-&gt;getSource() === 'tap') There
The real problem is that the JS language is just too damn thin. All of these popular smaller modules like \`left-pad\`, \`isodd\`, or \`iseven\` should just be goddamn methods in the language itself.
&gt;I have no idea how I check whether this number is odd, ah, there's a package for that This is the main problem, and the worst part is that they go on to make tutorials which use these practices and worsens the situation.
You can't be serious
yeah, I thought that was ice cubes!
Heh.. I am. [is-odd](https://github.com/jonschlinkert/is-odd/blob/a80ee0d831a8ee69f1fad5b4673491847975eb26/index.js) [is-even](https://github.com/jonschlinkert/is-even/blob/585f8002bb16f7bec723a47349b67df451f1b25d/index.js) [is-number](https://github.com/jonschlinkert/is-number/blob/98e8ff1da1a89f93d1397a24d7413ed15421c139/index.js)
ding!
And the implementation also sucks. This is better: return n &amp; 1;
It doesn't end there - [is-primitive](https://www.npmjs.com/package/is-primitive) and [isobject](https://www.npmjs.com/package/isobject) are also made by the same author. One of them even has more than 1 line of code!
These things are sane compared to the emoji packages. https://www.npmjs.com/~joshhunt This guy put packages for emojis. ONE PACKAGE PER EMOJI. 
And gives no big benefits besides a slightly more beautiful syntax. 
It does. It dives too quickly into specific details. Spend a little more time up front giving the high-level overview of what's going on and what problem is being solved.
Shameless self plug: https://GitHub.com/Ayesh/Composer-Preload This plugin can build a preload file easily by scanning directories to your spec. I'm having good results with Drupal at the moment. 
Holy shit. 1342 packages. I guess the good news is that it can't get any worse?
You mean like `String.padStart`, or just using the modulo operator? That's not a langauge issue, though JS has plenty, that's lazy developers.
Hello [colshrapnel](https://www.reddit.com/user/colshrapnel), sorry for the very late reply! Great questions, I'll try to reply as intelligibly as possible. * *By whom? How? –* Potential Validators must have their skills evaluated at "expert level" on Indorse. In other words, they submitted their repository (e.g. GitHub repo) &amp; 10 Validators assessed it. After this process, Validators will either *indorse/validate* or *flag/reject* his claim of possessing the specific coding skill in question. As you probably understood from this document ([AIP](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c)), the voting system works by consensus: if the Validators reach the consensus, then the claim is validated. * Correct, Validators get rewarded for all their votes. If you visit the [Leaderboard](https://indorse.io/validators-leaderboard) on our website, you'll find a button to become a Validator, there you'll find the necessary information regarding the financial incentives. For example, two of our Validators earned \~500 USD$ last month. * If you become a Validator, you are free to vote as many times you want. Right now, we have Validators who vote once a week and others every day, etc. It all depends on your motivation, job, etc. As you'll see in the articles I'll share bellow, expert programmers are developers with a job/freelancing, etc. * Now, the feedback we received from the PHP community (this subreddit) inspired us in explaining further who these Validators are and how a programmer can join the community. Here are two different articles written for this purpose: \- [A programmer that became a Validator](https://blog.indorse.io/an-expert-javascript-coder-on-the-indorse-platform-6649dadfb5b6) \- [An interview of a Validator](https://blog.indorse.io/meet-your-validators-athul-tuttu-11a902f237e2) * Chatbot, yes you're right. For the moment, the chatbots are more suitable for beginners and programmers that want to check some fundamentals. Finally, I'd be glad to further assist you . Did you try to submit your repo?
I agree with isodd and iseven, but padStart was added a year ago. Left-pad is 4 years old and optimised beyond the point where it's fair to compare it with a modulo operator. 
The comment I replied to made the argument that those things should be in the language, they _are_ in the language. And a year is a long time in the JS world. Is it PHP's fault if people are on version 7 and introduce bugs because they're not using return types? No. Is it C++'s fault if people introduce a memory leak because they decided to use `malloc` instead of `unique_ptr`? No
I think there's an aspect to this which is often overlooked: sometimes it's not about the implementation but about the standard. jQuery is a great example of something that started as an implementation of "how do we find things and manipulate them cross-browser"; and turned into a standard [the implementation no longer essential] of "how should we find things and what is a good way to manipulate them". Another way of looking at this is not "should I use lodash or implement my own simple functional primatives?" but rather "let me use lodash because it is documented and understood and a complete stranger to the project can make a valuable contribution in less time". Obviously, a one-line library costs more in risk and maintenance than that same one line of code copied into the project. But, 3 lines that establishes a standard? Axois instead of Fetch because examples and documentation? 
Hello again [Tetracyclic](https://www.reddit.com/user/Tetracyclic)! Just wanted to share these two articles we wrote after receiving these questions from the PHP community: \- [A programmer that became a Validator](https://blog.indorse.io/an-expert-javascript-coder-on-the-indorse-platform-6649dadfb5b6) \- [An interview of a Validator](https://blog.indorse.io/meet-your-validators-athul-tuttu-11a902f237e2) Let me know if you have some further inquiries! 
&gt; And a year is a long time in the JS world Until very recently, a year meant nothing to which browsers needed to be supported. All I'm saying is left-pad existed long before padStart, and it'll take time for it to die. But, one can understand why it was created, and why people who _used_ it two years ago might not have been lazy...
This particular issue happened in the node ecosystem, which is irrelevant to browsers. I don't get your point about left-pad existing for a while? Yes, `padStart` was a direct reaction in the language to support it at a language level. That is what should have happened and it did happen. That's completely irrelevant to the issue at hand which is that the facilities _I was replying to_ do, in fact, exist in the language. There is no excuse for a developer using `isodd` or `iseven` package, and it's certainly not the language's fault. And when the original left-pad catastrophe happened everyone should have rushed to `String#padStart` as fast as possible, anything else is laziness.
&gt; This particular issue happened in the node ecosystem, which is irrelevant to browsers This is telling. &gt; that the facilities I was replying to do, in fact, exist in the language. They do now. &gt; And when the original left-pad catastrophe happened everyone should have rushed to String#padStart as fast as possible, anything else is laziness. Absolutely! I don't disagree with much of what you're saying. Just wanted to say that comparing left-pad to modulo is apples to oranges. Don't think I have anything more to add to this...
&gt; left-pad to modulo I didn't compare left-pad to modulo. I said modulo could be used instead of isodd/iseven. You for some reason thought modulo would somehow apply to padding strings
&gt; How do you talk to people you don't know like this? It's pretty simple when they try to speak authoritatively on a subject they obviously aren't in a position to.
That's what php developers would do in the 00's. Those who survived have evolved from that.
I agree with /u/colshrapnel, but although I've never done anything with them I wonder if linux environment variables might give you what you're looking for?
If you want almost-impossible-to-fail you probably want to store your data on more than one machine. From the rest of your post it sounds like you want a simple solution for a single machine though? Any cache is going to store the data in memory or on disk* so you either need to worry about disks filling up or running out of memory. Typically if you want a cache with high availability you use something like [Redis Sentinel](https://redis.io/topics/sentinel) and have 3+ machines running, possibly in different data centers. If you just want something that runs on a single machine look into the [APCu extension](https://secure.php.net/manual/en/book.apcu.php). APCu stores data in memory so it is possible to run out of space, but I imagine you aren't storing a ton of data if it's just for rate limiting. It's not built in since you need to install the extension but it's pretty close. The [Shared memory](https://secure.php.net/manual/en/book.shmop.php) extension _might_ be built in if you compiled PHP with the `--enable-shmop` class. It accomplishes the same thing but it's lower level and harder to use. *A nifty way to avoid this is to store the data in a cryptographic token and have the client send it back to you with every request. [This article](http://lucumr.pocoo.org/2013/11/17/my-favorite-database/) is a pretty good introduction to the concept. You won't have to store the data but you will need to spend CPU time verifying the token.
I drilled down a single dependency path to see how deep it would go, in a project I inherited. I didn't map it out "horizontally" too because I was doing this by hand and iont have time for that, but still: aneurysm warning ahoy: https://twitter.com/eyebrows360/status/1050767261559083008
A package for each possible combination?? 
huh?
I would be happy to help with any effort. I never said, would someone please make an RFC for this. I was just hoping some people more in the loop with php internals than me might give some insight on why this hasn't happened yet and if it will happen. People have given good reasons why scalar objects haven't been implemented yet on this thread. Others have provided some history on past efforts. That's all I was looking for. I think expressing opinions is healthy, and discussion can be a catalyst for action. If you read "someone do this for me", you inferred something I never meant to communicate.
Yes maybe https://github.com/BitOne/php-meminfo 
oh oops - i didnt mean the people in the OP photo - i mean people and tap water drinking in general
I never said "do you wish php wasn't php"... That greatly exaggerates my point and motivation. I love lots of things about php. It's one of my favorite languages. Every language has it's pros and cons. IMHO, one of PHP's biggest opportunites for improvement is to fix the inconsistent built-in function names and signatures. I've seen RFCs that attempted to address that, bit I've been discouraged that they haven't been approved. Scalar Objects is the best solution in my opinion. They would provide a built in opportunity to create a new consistant API, and would allow for fluent method chaining. I'm just discussing a potential improvement, not trying to trash the language. 
lol. fair enough
In my experience, the only "bit itself in the ass" that I've seen was always due to a lack of types, not the other way around... Also, this RFC solves an issue for a missing possibility in implementation. I would have already used it in my current projects if I could.
Completely dismiss the part about apache/nginx going down? The point is, everything can go down/fill up.
So APC will work for you but memcache wont, because... memory can fill up? Logical.
&gt; It's probably just that OP reads like, "Someone do this for me." The OP isn't the first one to ask about it, since it exists in other languages. It doesn't sound like a beg at all, but a nice form of "is this going to be a thing?"
I highly recommend you take a look at the Laravel framework which implements that Illuminate/database package mentioned above. It has a whole host of helpful things to work with databases. What style are you writing in? Procedural or OOP? Laravel is a OOP and implements the MVC architecture pattern so everything is wonderfully laid out and easy to follow. 
It's a lot easier to detect when Apache/Nginx goes down entirely. There are plenty of ways of doing that reliably. It's a lot harder to detect when you get a rare/obscure error.
Memcache requires running a separate service. From what I've read, APC does not. Look, you don't know me, and you don't know my application. Quit trolling, you are just coming off as an asshole.
You did first, which is why I’m trying to show your logic is silly.
My personal favorite is the "[is-thirteen](https://www.npmjs.com/package/is-thirteen)" package. They are so petty that there is [an issue](https://github.com/jezen/is-thirteen/issues/640) on their github page that is constantly being closed and reopened to try to keep the number of issues divisible by thirteen.
Why are you using dev dependencies in production? The difference in dev vs non-dev dependency graphs in Node is huge, if used correctly. Like, our dev node_modules is ~500mb, our prod one is maybe ~30mb Learn your tools.
I bet nobody wants to risk hosting a php4 application 
The amount of tutorials I've seen with "how to ___ with Vanilla JS!" that then start with "ok, so first, install this package with `npm install ___` is insane too... Then the stackoverflow answers "oh, just use jQuery!"
&gt; inherited I'll tell you this bit too: the node_modules dir is *in the repo*. But like I say: &gt; inherited and sadly I've had far more important things to do than tidy this particular mess. In any event there are other non-dev paths nearly as deep as this, and many many instances of the same sub-sub-sub-dependencies included over and again by other sub-sub-sub-dependencies.
What do you need PHP4 for?
You need to include the code above the else. It's likely to be something there that is causing the error.
Where is the rest of it? If this is all, it should be extremely obvious why this results in an error for the language parser. If this really doesn't make sense to you, take a step back and try to look at some programming basics, to get a better understanding of programming.
Please have a look at this part of the manual: http://php.net/manual/en/features.gc.refcounting-basics.php It explains how your problem comes into existence and shows what functions you can use to analyze the problem.
&gt;`else {` &gt; &gt; `$sql = "INSERT INTO users (uidUsers, emailUsers, pwdUsers) VALUES (?, ?, ?)";` &gt; &gt; `$stmt = mysqli_stmt_init($connection);` &gt; &gt; `header("Location: ../signup.php?error=sqlerror");` &gt; &gt; `exit();` &gt; &gt;`}// end else sql stmt` &gt; &gt;`else { //hashing password` &gt; &gt; `$hashedPwd = password_hash($password, PASSWORD_DEFAULT);` Don't forget to use the inline code markup to make your code more readable. &amp;#x200B; Anyway, your problem is here. You can't put `else{}` blocks back to back like that.
what do I do then?
DigitalOcean, Vultr, EC2. Any VPS/Cloud/Dedicated server. Install it yourself. I don't think any hosting company will even send a space probe to investigate PHP4.
I doubt there are any who support that. It's being EOL for 10 years. If you really need PHP 4 I'd suggest you get a cheap VPS and install it yourself.
[removed]
Most water from the fridge is filtered, not distilled. But good on you if you get distilled.
If you can't even google webhost php4, nobody can help you.
Procedural but I can OOP. Thanks will take a look
any company that does support php4 should be shutdown....
I would be happy to for the right price :)
Sorry, responded to the wrong post :)
Sorry, responded to the wrong post :)
Modern systems can't even compile PHP 4 anymore... Your best bet is to try find Redhat 6 somewhere and install it via docker...
You could use "Hamming Markers". I have used this library https://pypi.org/project/ar-markers/ by calling OpenCV/Python scripts via PHP.
Any information on how APCu is unstable? I have just started using it, but might back track if that is the case.
1und1 (oneandone) still has it as part of their extended support. They are a shit hoster, though.
I see. I guess I am underestimating it indeed. However online connectivity is not an option so there goes machine learning :( But your idea of fixing the markers on exact location is doable. In fact, to explain what im trying to get at. Ultimately it's for obstruction detection. I need a way for my php application to process a bunch of pictures of a subject and determine if something is blocking it or not in order to separate the images accordingly. So the setup is that I have a camera with fixed position and angle, and it take pictures, for example, of book shelves in a library (to set the complicated scene example) . The camera takes pictures every 30 seconds or so and sends it to a folder on the Web Server, where the php application must put images of the scene with obstructions in one folder and the ones with obstructions (people walking in between the camera and the shelves) in another folder. So the challenge is how can my web application tell if there's an obstruction to the view? &amp;#x200B; The simplest solution I had in mind was to stick markers horizontally across the shelves at around 1 foot apart. And once the cam is setup, tell the application how many markers are supposed to be in view to consider the scene unobstructed. So, if a person walks by he will be sure to cover 1 marker and that's the logic my web application will base it on. &amp;#x200B; &amp;#x200B;
Veloxy, thank you for your reply! Could you help me understand what are the advantages of services like imgix/cloudinary and self hosted ones like imaginary/flyimg over creating needed sizes before hand and than just serving static images from server or cdn. I see this will be more performant. If you know the size before hand why you want to cut images each time you need it?
toooni, thank you for your reply! Could you help me understand what are the advantages of services like imgix/cloudinary over creating needed sizes before hand and than just serving static images from server or cdn. I think this will be more performant. If you know the size before hand why you want to cut images each time you need it?
mikael-roos, thank you for your reply. In what cases dynamically creation if images makes sense? 
There are constants for all formats, why is there no format (Y-m-d H:i:s and Y-m-d) for the most commnly used database with php?
Because not every application uses MySQL.
This can be said to all date formats. Some constant are even very exotic.
Are you looking for the format string to pass to `DateTime-&gt;format()` or `date()`? If so, I think you can use `c` (which formats it as ISO-8601): (new DateTime())-&gt;format('c'); // or date('c') I usually work with PostgreSQL, but I did some brief testing just now with MySQL and it seems to handle ISO-8601 dates and datetimes.
That would be a good reason, except that the vast majority of applications use some form of SQL, and `Y-m-d H:i:s` is the ANSI SQL standard, its not unique to MySQL. Given how widely it is used, and the inclusion of ATOM and RSS formats, it is odd that the ANSI SQL standard doesn't have a constant.
Because PHP doesn't include those kind of things by default. There's definitely an argument for including it in the MySQL extensions though.
As nobody that down voted understood, that constant is being used in the Hashtag Framework... available directly as a "Variable Context" that can be used like this: my_variable as datetime That context is automatically applied to the default system variables for current time when they are created. For more information about Hashtag Variable Contexts, [read the Reference Guide](https://hashtagfoundation.org/framework/reference/#contexts)
`Y-m-d H:i:s` you learn it after awhile.
The saddest part is is-odd doesn't even work correctly. 0 is apparently an odd number.
Why would you need it to? If you're pulling it from MySQL it's a string, so you cannot format it unless you drop it into `new DateTime($yourMysqlDateTimeValue)` and it doesn't need to know what format it is in to construct the object correctly and you can format it to whatever you want.
Might be a simple addition to the source? 
Dude, totally agree. You should make an RFC to php for this
Throw it over to the PHP internals guys, it'd probably pass an RFC in a heartbeat. 
You can pass the value MySQL returns directly to PHP's DateTime constructor. If you'd rather use PHP's date function, you can also pass the value from MySQL to \`strtotime\`. You don't need to tell it what format you are passing.
But then I have to install MySQL to get this ISO 8601 compliant date/time format constant... Or just create my own constant somewhere in my code base.
If the cameras never move you could setup bright green or orange markers and check the color of a pixel at that location. You'd have to give it a range of acceptable values due to changes in lighting, but getting the 0-255 RGB values should be easy using PHP image libraries. &amp;#x200B; That said, if the goal is to detect people walking into frame, there are pre-trained models to detect that. Check these out: [https://medium.com/@schuman.zhang/detecting-people-in-real-time-using-deep-learning-84859c9682d2](https://medium.com/@schuman.zhang/detecting-people-in-real-time-using-deep-learning-84859c9682d2) [https://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/](https://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/) &amp;#x200B; &amp;#x200B;
Does anyone know what theme that site uses? That looks the same as [Joel On Software](https://www.joelonsoftware.com/).
Assuming you count the iso in the end to generate the circle. You could have a Redis hash, with its fields set to the iso_codes. Everytime you encounter an IP, you lookup its iso_code and increment the hash's iso_code field value using `hincrby`. This way you won't have to lookup every ip every time. If you have to plot different charts, just create as many hashes as you want. Maybe more context would be helpful.
This is unrelated to the question, but why not just use unix timestamps?
[Chronos supports it](https://book.cakephp.org/3.0/en/chronos.html#formatting-strings) as `$chronos-&gt;toDateTimeString()`. Working with PHP's native `DateTime` is a PITA, so Chronos is almost always one of the first things I install in project that is going to work with dates.
Not every API, SQL server, User reading your site, third party tool etc. supports unix timestamps. (I'm not even sure MySQL allows you to pass a unix timestamp as a datetime field's value. TBF I haven't tested it or bothered to look it up.) How would you store dates before 1970-01-01 00:00:00?
&gt; How would you store dates before 1970-01-01 00:00:00? With a negative time stamp. I stuff my timestamps into int(11) so I was just curious why people would store them as something else. 
My guess is existing database, or database that interacts with other systems needs a specific format. Definitely could be pulling data from the database and wanting to format to a unix timestamp with `date_create_from_format($timestamp, $format)` where instead of putting $format every time (`Y-m-d H:i:s` in this case). A constant like `define('DATE_SQL', 'Y-m-d H:i:s');` could be useful.
Sure MySQL's datetime can be parsed. But in the case of DBALs that return a `DateTime` object, for example, how can I easily format it in the same format for the front-end or API response? Do I need to call `$date-&gt;format('Y-m-d H:i:s')` every time I render a timestamp? Seems it would be annoying to change if requirements ever shift.
Fair enough, but then you can't store dates before roughly 1901 on a 32 bit system. And yes, I know most systems are now 64 bit which renders this argument useless, but at the time the code was written, they weren't.
Oh interesting. I never knew that, and I have been lucky to have never come across that issue before.
imgix and cloudinary both act as a cdn. Once an image is generated it is very fast too. So only the very first request will take some time (not very much) to have all images loaded. Also your appliction gets much simpler: - You work only with originals - If your layout changes, you can just switch to other sizes, easy - Having a responsive design with multiple srcsets, no problem ;) - Image types are automatically optimized. Browsers which supports webp are getting webp images. (Be aware imageMagick or gd are not even optimizing images, only resizing) We are using imgix for ~13k original images and a few 100GB per month and are paying less than before with cloudfront and an own high maintenance solution.
I might do that actually... But I have this damn format memorized at this point
Most likely you would want to use a view helper to format your date consistently across your application. Personally I am a fan of formatting date/times via JS, though, so you can let the client side convert to the user's timezone and locale. I am not sure how a built-in PHP constant would help you if functional requirements were to ever shift—you'd still need to go update all of the places that use the built-in constant if requirements were to ever change. A view helper would allow you to change this in one go, unless changes to requirements require different formats in different parts of the app. But this discussion is turning theoretical. Is there a practical issue you've run into we can further discuss?
I understand what you mean, but in that case shoudln't we remove this ? const string [RSS](http://php.net/manual/en/class.datetimeinterface.php#datetime.constants.rss) = "D, d M Y H:i:s O" ; It seems to me like it was added just for the sake of having the RSS datetime format as a constant. I'm fine with both, but it doesn't make sense to me to have the format for RSS and not for SQL.
This is something I never knew I wanted but at this point it's now a constant in my muscle reflex.
Yes, I agree those don't belong in PHP itself. I don't think any of the DateTimeInterface constants are appropriate, frankly - except perhaps COOKIE due to PHP supporting header output natively.
Good luck with timestamps on a 32-bit system after January 19, 2038 03:14:07 GMT ;) [The year 2038 problem](https://en.wikipedia.org/wiki/Year_2038_problem)
That wasn't OP's question.
I'm not worried about it to be honest. I haven't worked on a 32bit system in years. That is something one should know about however. Thanks for sharing.
I can't remember the last time I needed to manually format or parse and date string from the DB, I always end up using an ORM or query builder that does it automatically.
Try calling \`**gc\_collect\_cycles\`** on your own, sadly you cannot rely on PHP collecting the garbage :(
I've been thinking to get into php-src development a bit too, to familiarize myself. If you'd like, I'd love to collaborate. 
Okay, so you've inherited a mess from someone who used their tools erroneously. And perhaps an old version of `npm` where deps are much deeper than they need to be? This is `npm`s fault - how? Since the the `node_modules` dir is _in the repo_ as you say, I reckon that's one of the reasons you hate it so much, because it's millions of little files everywhere. Well again, it's your repo and your CI pipeline - your inherited mess has used their tools totally wrong. I've worked on checked in `node_modules` (in `svn`...) in the past and it sucks, but I don't go blaming `npm` for that mess. The thing is, Node _has_ a module system - PHP does not. This is why dependency X often can use dependency Y in version 2 while another dependency Z uses dependency Y in version 3. That's impossible in PHP due to everything just being copy-pasted into a large mess with "namespaces", unless you change namespace between versions (which few libs do). This causes their own dependency hells, that in my experience are much harder to get out of than Nodes'.
You can use this one http://php.net/manual/en/class.datetimeinterface.php#datetime.constants.atom
For those wondering about the differences between this and league/period or CarbonPeriod: both implementations only support one-to-one comparisons of periods. This package allows to compare severals periods at once. 
Yeah I have been burned by that. The only thing to do is setting your format in a common file in your codebase (I set it on a caching functions file)
It's Node's fault as much as it's JS's fault as much as it's "the community"'s fault. It's all of it. Also, I didn't state anything about PHP. All I said was "haha look at this mess of modules". In any event, sure, I can see how "have 15 copies of every basic sub-sub-dependency if every sub-dependency in a project imports them" can avoid the problem PHP's namespaces *can* cause, but still, having 15 copies of the same depended-upon code is *also* a problem. And JS has *so little* built in that there's lots of dependencies, which is kinda the point.
I just use epoch format, Storing the datetime its self can cause issues especially for client facing data. As the datetime will be in your servers configured timezone. I just use epoch for everything since its easily translatable to what ever your needs.
This is easily achievable in user land, why not make an implementation instead?
Wouldn't it fuck up the whole database anyway ?
Since you've mentioned databases go down, Memcached goes down, I can tell you that servers can go down as well, so everything in APC will be gone. So how is APC any better than any of other suggestions you've received? Instead of having that arrogant I-know-it-all asshole attitude maybe listen to what others have to say, or just don't even ask the question in the first place if you think you've got it all. If you need persistence, you need to use something that will persist stuff on the disk (write directly to filesystem, database, redis, whatever?). If you want it all just in memory and don't care about losing data if shit happens, then use APC or memcached or in-memory redis. Stuff DOES go wrong, hardware stops working for XYZ reasons, it's how computers work. There's nothing bulletproof or impossible to fail. You just have to account for failure beforehand, so when failure happens you don't lose any data.
"Hey database, show me every order that is made on a Thursday" Good luck with that by using timestamps ;)
I don't see what the issue would be tbh. Youre just querying for a number that falls inbetween numbers. If that kind of query is done often it would make sense to store the day of the order.
What I dont get is why do the dev of PHP make extentions for this stuff rather then just adding it to the language.
Oh for sure. I did say if this is kind of query that is done often it makes sense to store that kind of data. But its not difficult to compute the timestamp for the beginning of a day and the end of day and then add/subtract a weeks worth of seconds to or from it and then build a query that grabs anything that falls between those numbers. Tedious to do this kind of thing often though.
100% agree, It would also solve the whole needle-haystack inconsisties in some of the functions that PHP wont fix because of BC.
tnx for this suggestion.. so how does this work? phyton is the engine to detect the markers? and it feeds true/false flags to php? &amp;#x200B;
I'd have tried a quick composer search first: https://github.com/majkel89/dbase
&gt; Modern systems can't even compile PHP 4 anymore... Hah, that's a really good point.
Don't see much point in some of the helper functions as their operations can be performed directly on the object variable rather than passsing it to a function to which will perform the operation.
On what purpose? Do you intend to convert an old web application that can't run on php5.3 to latest version?
10 years ago was the last release of php 4.3. Why on earth are you tring to run a php 4 app. You understand you will need an old likly vulnerable OS to run the vulnerable php 4 which has alot of RCE and BOE bugs. Your site would be a playground for hackers. 
Hey, DrWhatNoName, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
hEy, DrWhAtNoNaMe, JuSt a qUiCk hEaDs-uP: **aLoT** Is aCtUaLlY SpElLeD **A LoT**. yOu cAn rEmEmBeR It bY **It iS OnE LoT, 'A LoT'**. HaVe a nIcE DaY! ^^^^ThE ^^^^PaReNt ^^^^cOmMeNtEr ^^^^cAn ^^^^rEpLy ^^^^wItH ^^^^'dElEtE' ^^^^tO ^^^^DeLeTe ^^^^tHiS ^^^^CoMmEnT.
hahahah
\- Installation and usage missing. \- What is the purpose of this package / use-cases
Psr2 and we'll talk
I'm curious why `\Spatie\Period\Period` doesn't extend from `\DatePeriod`- I'm suspecting cleaner preference for for `DateTimeImmutable` ?
[removed]
&gt;having 15 copies of the same depended-upon code is also a problem Yep, and for that there exists various techniques and strategies to dedupe. Often it doesn't matter, though, because the disk space isn't a real-world problem. Unless you're bundling for a browser, then you should look into tree-shaking etc. &gt;And JS has so little built in that there's lots of dependencies, which is kinda the point. Building a Node application 2018 gives you a pretty rich stdlib and you'll usually just pull in libs for talking to other servers, Lodashy things and date libs. But if you're talking about the _browser_, that's a whole different story of course. Lots of polyfills etc. Also: It's bs that npm packages generally are of worse quality than Packagist packages. Try auditing some. Both communities have low barriers and quality problems. /Kind regards, PHP dev since the late 90s
`DateTime::createFromFormat("Y-m-d H:i:s",$mysql_return)`
:-) :-)
I'd raise the bar to PSR-12 even though it's still a draft I'd love if the future PSRs say don't leave any details left to the coder (such as for example space between type conversion operator and expression like `(bool)$foo` vs `(bool) $foo`).
I'd raise the bar to PSR-12 even though it's still a draft I'd love if the future PSRs say don't leave any details left to the coder (such as for example space between type conversion operator and expression like `(bool)$foo` vs `(bool) $foo`).
PSR-2 is without question the least interesting and important of all PSRs. It has no external visibility beyond that already defined in PSR-1. Rejecting a package for not complying with PSR-2 is literally saying "I can't cope with knowing the wrong pattern of whitespace exists somewhere on my hard disk". Having a consistent coding style is good, but this sub's members' obsession with PSR-2 for packages that they aren't contributing to is a barely concealed admission that they have nothing of any practical value to add.
sure, thanks!
&gt;Having a consistent coding style is good, but this sub's members' obsession with PSR-2 for packages that they aren't contributing to is a barely concealed admission that they have nothing of any practical value to add. I totally agree with that. 
thanks a lot. I will add them asap
Have you considered implementing this in one of those packages instead of inventing a new package or is this something the maintainers have dismissed?
The ATOM constant is useful because the ISO8601 constant isn’t actually ISO 8601-compatible while ATOM is. Dumb, but there it is. Check out http://php.net/manual/en/class.datetimeinterface.php#datetime.constants.iso8601 No argument against the RSS constant.
I dont know if it is a good idea to force developers to do this. Personally, I think it is much more readable with a blank between bool and $foo. Same also for curly brackets: my personal opinion is that it is ugly if there is a newline between the bracket and the class name.
I don't say that there shouldn't be more diverse ways of doing things. Everything has an opportunity cost: if I choose A it means I don't choose B and C. I am just pointing you to this fact and suggest to keep it in mind when presenting/developing a tool if you want to get traction for your product. You tell me about your product and it tells me it's good for X, Y, Z. I tell you I have a product for X and another for Y and Z. You have to make your audience worth their time to use your product. I am just voicing these concerns. You do what you think you need to do.
Totally agree with you
I'm all for the space, not against it. Regarding the class name, think of long interface lists: class Foo extends Bar implements \JsonSerializable, \Countable \IteratorAggregate { ... } than class Foo extends Bar implements \JsonSerializable, \Countable \IteratorAggregate { ... } but it would also be more consistent with class Foo extends Bar implements \JsonSerializable { ... } than with class Foo extends Bar implements \JsonSerializable { ... } I actually do apply some of these PSR rules to my own hobby project code in other languages
&gt; Almost everywhere operators and values are supposed to be separated by a space, so `(bool) $foo` leads to more consistency. Well, but other unary operators are typically without a space (`-$foo`, `!$foo`, `@$foo`, `++$foo`). Or, at least, most of them. It seems that most agree to be inconsistent here. I often see `! $foo`, but barely `++ $foo`. 
Neither of those can be dropped into existing code that depended on the built in dBase functions, and really, I was bored, and needed a break from some other things, so it was a fun exercise.
It’s not a MySQL date. It’s a standard date format defined by multiple international standards.
Is period overlap lib the new "guestbook/todo list" of the PHP world? :D 
Can you give some examples of existing libraries handling multiple overlaps and diffs? I'm perfectly fine using a battle-tested solution, but couldn't find one..
Yes, the use of `DateTimeImmutable` is a deliberate design choice of the package.
Good point, missed that.
At this point we might as well have _format-on-save_ and simply have our editors format the code to a certain standard so _we_ don't have to bother with it. Sort of like `gofmt` for Golang.
The methods inside `Common/Util/Comparator.php` are really weird: Your equals method doesn't do a strict comparison resulting in weird behavior because of type juggling. These second `if` cannever be hit: if (\is_object($that)) { if (\is_object($other)) { return $that &lt; $other; } return false; } if (\is_object($other)) { if (\is_object($that)) { return $other &lt; $that; } return false; }
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt;But honestly, I just find it pretty amusing that there's a date period library post on /r/php basically on a weekly basis. 1/ Maybe this means that there's a issue with the current solution offered in the PHP ecosystem around intervals &gt;I mean, is it so bad to improve Carbon or any of the other alternatives? 2/ I believe OP uses Carbon a lot so if he could have done it using Period or Carbon easily I believe he would have done so. Where I do agree with you is that collaboration between packages to provide a unified solution (which is not the goal of PHP-FIG by the way) would be best so that we don't go the JS way. But sometimes competition is healthy too. &amp;#x200B;
I know that this is confusing. But the class is necessary on exactly this way. I had issues with Binary Search, where public function search($value): ?BinarySearchNode { /\*\* @var BinarySearchNode $node \*/ $node = $this-&gt;getRoot(); while (null !== $node) { if (Comparator::equals($value, $node-&gt;getValue())) { return $node; } else if (Comparator::lessThan($value, $node-&gt;getValue())) { $node = $node-&gt;getLeft(); } else if (Comparator::greaterThan($value, $node-&gt;getValue())) { $node = $node-&gt;getRight(); } else { throw new InvalidSearchComparisionException("no comparision returned true. Maybe you passed different data types (scalar, object)?"); } } return null; } &amp;#x200B; resulted in a infinite loop. Reason was the strict comparision with objects: if you make === for objects, it has to be the exact same instance otherwise it returns false!
php\[architect\] still has the Purple PHPwomen ones: [https://www.phparch.com/swag/](https://www.phparch.com/swag/) 
Yes you can, they are stored as negatives.
&gt; Reason was the strict comparision with objects But you [do](https://github.com/doganoo/PHPAlgorithms/blob/master/src/Common/Util/Comparator.php#L65) it for all [types](https://github.com/doganoo/PHPAlgorithms/blob/master/src/Common/Util/Comparator.php#L161).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [doganoo/PHPAlgorithms/.../**Comparator.php#L161** (master → 96a5d66)](https://github.com/doganoo/PHPAlgorithms/blob/96a5d663614fdcaed6af2b49d05baa1b6de048a1/src/Common/Util/Comparator.php#L161) * [doganoo/PHPAlgorithms/.../**Comparator.php#L65** (master → 96a5d66)](https://github.com/doganoo/PHPAlgorithms/blob/96a5d663614fdcaed6af2b49d05baa1b6de048a1/src/Common/Util/Comparator.php#L65) ---- 
 $image-&gt;more(12) &gt; will make a mask of pixels greater than 12 Is that vips having an insane API or your wrapping library. How do people know what that method is going to do by looking at the name?
You completely did not understand my message. I didn't tell him to use carbon instead, but to improve on it. 
Because no one has needed it, figured out how to submit it and added it to the codebase.
If anyone creates an RFC for this please post a follow up.
\DatePeriod supports \DateTimeImmutable but only if you use getStartDate()|getEndDate() will you get your \DateTimeImmutable back, but if you do -&gt;start|-&gt;end you'll get a \DateTime object, I think If I was subclassing \DatePeriod I think I'd use __get() to call the getStartDate because I think you should get the implementation of the interface out as you put in..
I think that's something that [https://github.com/phpstan/phpstan](https://github.com/phpstan/phpstan) could find. Or any decent code editor?
Phplinter on vscode handles arguments and more
There is one in every PHP coder's head. It's name is "Y-m-d H:i:s" ;-)
Wrap that wrapper in Imagine. https://github.com/rokka-io/imagine-vips to get a more intuitive API. 
&gt; awhile 🤢
Xdebug now supports memory allocation output (again). There’s a flag for it in the config. You can check it with kcachegrind or the like.
This will not clean up circular references. Their ref count isn’t zero and they aren’t deemed fit to be collected.
&gt; But then I have to install MySQL to get this ISO 8601 compliant date/time format constant Huh? That's already built-in.
`DATE_ISO8601` `Note: This format is not compatible with ISO-8601, but is left this way for backward compatibility reasons. Use DateTime::ATOM or DATE_ATOM for compatibility with ISO-8601 instead.` Cue Yakety Sax music.
Why not? How can my API create a Braintree transaction?
&gt;What I dont get is why do the dev of PHP make extentions there is already an answer from nikic in the issues [https://github.com/nikic/scalar\_objects/issues/20](https://github.com/nikic/scalar_objects/issues/20)
Did you read this? [https://developers.braintreepayments.com/start/overview](https://developers.braintreepayments.com/start/overview) Braintree and Stripe create a unique token related to the card. Your site will trigger some javascript to create a lightbox which iframes their site. The customer enters the card info in that box (you have no access to the card details.) Once they save it, it will send your site the unique token relating to the card (and potentially user.) You transact against that token. 
Don’t - have your front end create the transactions and pass the transaction ID to the API on authorisation. That’s the generally accepted flow if you want to stay away from PCI anyway
Because you're handling the credit card number and CSC directly, then *transmitting*, which requires another round of vetting to ensure that you don't accidentally leak it and dispose of the CSC as soon as the card is committed or leak it with say an XSS. Or let's say your git repo gets compromised and code is injected to sniff the card number or you don't properly dispose of the card number and leave it in a session on /tmp...
&gt; But honestly, I just find it pretty amusing that there's a date period library post on /r/php basically on a weekly basis. There was a post about `league/period` two weeks ago, but that's the only one I've seen (or can find by searching) and as the OP mentioned, it doesn't support multiple periods. Are you aware of any others?
Right on, useful stuff when you run into some really old apps that need updating. I can't believe there's still some dBase out in the wild though. Woo, NoSQL!!! Heh.
&gt;do you wish PHP wasn’t PHP? &amp;#x200B; &gt;weird list of inferences someone else pointed out that they took from my comment Looks like you were the one making wrong inferences about someone else comment OP's question is clear, you didn't answered his question, your initial comment started inferring things OP's never asked for. That's enough for me to downvote somebody else comment, unless the comment add value to the discussion or point out something interesting. What bothers me about your comment \[1\], it feels like, when somebody ask: "Hey, I don't know how to achieve X, how can I do it?", and there is a lot of devs waiting to answer: "google it". that kind of comments are rude and completely lacks of value, OP's clearly stated: "I already know other languages who does what I want", so, your answers lack of value too and feels like you didn't read OP's question at all. Also, there is something else that annoys me: &gt;I forget this sub can be fanatically defensive. I didn’t mean to put PHP down. It just seemed like a logical answer to me. People down voted your comment argued about it, and the only thing you could see was: "people is fanatical about php" ?, really dude?, don't victimize yourself and try to find a better reason. by the way, I would have love to read other people reasons to downvote your comment, there is high change they're different to mine. I would love to see a board where people should comment the reason they're down voting something. I've also had a lot of down votes in the past whose reason was never said. It's a shame. So I know how you feel, but, don't victimize yourself. \[1\]: This is all about "how I interpret your comment", and if it wasn't your intention, well, I'm sorry for the downvote, but the only thing I can do is read your comment, as the law of poe point's out, this is Internet, and you need to make your intention clear.
&gt; /Kind regards, PHP dev since the late 90s Ditto
Why would that be hard? `select foo from bar where from_unixtime(time_order, '%W')='Tuesday'` Avoiding UNIX timestamps because it's slower than DATE or DATETIME is a bad advice. Generally it doesn't matter. Or you can use cast() before sorting to achieve similar performance *if* you require conversions on the data regardless of which type you use.
The full one is, yes. But ISO 8601 defines or permits multiple formats.
You're looking for Rector, a tool for AST instant upgrade. What exact PHP code is causing this?
thanks for your reply, our goals are as follows:- \- migrate our legacy PHP4 crap code (circa 60% current monolith application) into cake application (currently the cake app is injected into the legacy application which contains the frontends layouts for our shops - it's a horrid idea, so our thinking was to simply spend the time and unify the codebase into one expected output (CakePHP) which already had circa 40% of the codebase transferred). \- then move on to microservice architecture and basically start pulling apart the monolith into services (which in some obvious instances we are doing that now) obviously it makes sense to just do this now, but with a small team and tight time frame to turn this around, this was the suggested roadmap. &amp;#x200B; for this situation it was a suggestion to use traits in this way to be able to move all of the custom logic out of the cake models allowing us to bake them all on the fly without having to manually go through and compare the differences between the model that previously existed (with all the business logic) and the newly baked model with the correct properties. &amp;#x200B; &amp;#x200B; 
If you can translate from Russian there is article of how to write simple mechanism of getting "image hash code" in PHP: [https://habr.com/post/55926/](https://habr.com/post/55926/) &amp;#x200B; The mechanism divide image into N segments (reduce in size) and then define code for each of the segment like nX where "n" is segment number and X value calculated based on average color/brightness of the segment. &amp;#x200B; At the end you get something like that: 0A 1F 20 30 4H ... &amp;#x200B; You can even search by similar images using something like FULLTEXT. &amp;#x200B; For something more sufficient you have to use ML and proper image transformations. 
Crystal also has a similar tool built-in (`crystal tool format`). I feel like having a defined standard allows the developers focus on what really matters instead of bickering about tabs vs spaces and similar crap.
IMO that's the problem. There's no defined standard by the language itself, so everyone invents their own. I hate reading code written by other people with different formatting preferences and I'd very much prefer a built-in tool like Crystal and Go have.
Nevertheless, the package looks good and offers something that as far as I am aware is unique. Kudos to you!
To be honest I don't know the answer to those questions off the top of my head because I'm not well versed with the legal side of things. 
You can think a strategy as an object that provides a method that executes a specific algorithm. [https://sourcemaking.com/design\_patterns/strategy/php](https://sourcemaking.com/design_patterns/strategy/php) Mr Okhravi talks over the patterns explained in the book 'Head first design patterns': [https://youtu.be/v9ejT8FO-7I](https://youtu.be/v9ejT8FO-7I) I really advice reading the book.
[http://php.net/manual/en/class.argumentcounterror.php](http://php.net/manual/en/class.argumentcounterror.php) &amp;#x200B; Looks like arguments count mismatch in a call.
I would stay away from traits. The binding is too strong. Have separate classes for your business behavior that accept the model to work on. 
While technically yes, you can be PCI compliant while doing it this way... ... you would have to spend a few thousand man-hours reviewing the PCI standards (itself a very dense and difficult to understand set of documents), reviewing your code against the standards, reviewing your network against the standards, reviewing every little minutiae of your servers against the standards, and on. It's not an easy task. The general rule of thumb is, unless you have a few teams of seasoned developers, network engineers, and IT professionals who are all very security conscious, and you are a financial institution or a company working very closely in financial fields (just being a retailer isn't close enough), then never handle a credit card number directly.
There's nothing wrong with that setup. You already placed business logic into a model, so moving it out to traits is a good first step to moving it out completely.
Iframe is no longer allowed under the latest PCI rules...
Is this running on Platform.sh?
phpstorm does this. 
No, don't do it this way. Do it the way Braintree recommends.
`foreach ($arr as $obj) {` You're overwriting the `$obj` variable `as $obj` and then setting `value` to "world".
Fuck me, all this time I thought I had to update the element. Jesus.
There's nothing worse that getting pull-req review comments about code standard "remember brace on new line" and "please use 2 spaces, not 4" - as a human, I don't actually care to write it, but I see the benefit in reading properly formatted code - this is where automated tools come in!
Why hitting a database should be "significantly slower"? What is essentially slow in this process? Especially compared to the actual execution.
Nah, I'll update the sample. hang on.
Actually, he don't
I mean, don't you have to send and retrieve data from the database through the network connection each time a query is made? Like, you have to get the result of the query (which will be empty because it's just updates, inserts, and deletes, but may sometimes return an error), and *after* you get the results of the query, you have to send over the next one. Shouldn't that slow down the process?
For scalars - yes
http://php.net/manual/en/language.oop5.references.php
Well, if you *have* the network connection - then yes. Especially to a server on the other side of Earth. But if a database is on the same server, there is no network involved. I don't really know why your stored procedures are slow. And I am not trying to answer this one. Just trying to get understand the reasoning behind this idea that a roundtrip to a database is slow. Thinking this way, Memvache will be slow as well. Do not use memcache?
Thanks, the database *is* on the same server. That may be why there is no delay. Splitting up the queries in PHP isn't *much* faster. Less than a microsecond, it seems, and maybe it's just variations in the cases I tested.
Only if PSR-12 gets rid of the 80 char limit. Once you're two levels of indentation deep, you're forced to compromise readability by splitting the line or using a less descriptive variable name.
Tbh psr2 is so ubiquitous now it just feels a little jarring reading code that doesn't conform
There is a LOT of it, in the context of ShapeFiles. The .shp files themselves only contain geometries. Any attributes they have are stored in an associated .dbf file. ShapeFiles still seem to be the most popular way to share GIS data. Would be nice if ESRI would open up the GeoDatabase format.
It feels nice to know I'm not the only one having to put up with the pain of still having to face a CakePHP2 codebase every day. Sorry, nothing productive to contribute but sharing pain eases it.
Just did a search for `Y-m-d H:i:s` in the code base I'm currently working on. 269 results in 94 files. I was thinking about making my own now() global.
Fell you; could be worse I suppose, our legacy code is circa late ‘90s - horrid stuff! Just released a microservice wrapped with create-react-app and redux - which was pretty sweet to work on 😍
Yeah it’s really fast
Then you should contact Visa, Mastercard, AMEX and Discover to report Braintree, Stripe, Paypal, [Authorize.net](https://Authorize.net) and essentially every gateway provider. &amp;#x200B; In all seriousness, iFrame is allowed: [https://www.pcisecuritystandards.org/pdfs/best\_practices\_securing\_ecommerce.pdf](https://www.pcisecuritystandards.org/pdfs/best_practices_securing_ecommerce.pdf)
Unfortunate name...
&gt; Just released a microservice 👍 That's also how we moved on with some parts: we started an "API" project based on Laravel, naturally its scoped expanded and whenever implementing new stuff, we try to do it in Laravel.
Key part st the bottom &gt; We are making these open source runtimes available today: &gt; C++ &gt;Rust &gt;We are also working with our partners to provide more open source runtimes: &gt; Erlang (Alert Logic) &gt;Elixir (Alert Logic) &gt;Cobol (Blu Age) &gt;Node.js (NodeSource N|Solid) &gt;PHP (Stackery)
Adding C++ and COBOL is going to be huge for traditional finance,FinTech, and transportation industries
Waoow. I am speechless. I really love php and its Community. Thanks Nat! :)
You're right that a roundtrip to the DB fro the PHP process (through shared memory if it's on the same server) should take more time than a simple batch of queries, sent all at once to the DB server. I suspect that the queries are subtly not equivalent. Would you like to share (anonymized) queries before and after the transformation?
The simplest form of strategy pattern is collector pattern. See this intro post with examples https://www.tomasvotruba.cz/blog/2018/06/14/collector-pattern-for-dummies/
Cost. I run a photo-centric website with millions of photos on it. I'd love to be able to use something like cloudinary, but when I looked into it the cost was prohibitive.
It's possible that the stored procedure could be slower vs PHP. It depends on the connection settings like connection pooling, transaction isolation level(MVCC), caching, indexs. Also multiple runs should help with some of those.
I didn't think about application data. I was just thinking of business applications. Yeah, that makes sense. Thanks for your contribution to OSS! 
You have to use Jquery setInterval function. And within that function request the content and refresh the div. 
The smallest regular QR-codes are 21×21 squares (not counting microQR) Just print those at a reasonable size.
Have a look at Braintrees hosted fields: https://developers.braintreepayments.com/guides/hosted-fields/overview/javascript/v2. It gives you lots of control over layout and keeps you PCI compliant.
In terms of projects, I can think of a couple more. * Convert a bash script to PHP. Not because it _should_ be done, but because it's a decent way to learn some of the PHP arcana. * Learn a dead simple framework that will teach the basic premises and not much more. That background is very useful in learning more complex frameworks. * Test a website with Selenium (There is a docker standalone Chrome image that just works). Doesn't have to be _your_ website, just has to be a website. Take some screencaps. Handle some exceptions. Move some screencap files to a web directory. Etc. I don't disagree with your description of 'most projects'. I ran into that wall when I was first learning. I started out making small, careful, incremental changes to a throwaway wordpress install. I'm by no means an expert, but I have automated the hell out of both my work and personal life with PHP. Diving into something more complex than a form/list/form/api paradigm is a great way to learn. Especially since VMs and docker images are free and quick to stand up. Break something, either learn to fix it, or burn it down and respawn.
I would say get away from traits. Create class entities that have your business logic inside. 
If you want to do something and there are various ways it could be done then strategy is the pattern. Examples: Authentication, Deployments. You could look at OAuth libraries on Github, they usually follow this terminology. 
Wow. Thank you for this.
You use traits when you need to share a behaviour across classes that need not necessarily be siblings. For example, a User model needs to send notification and so does the Order model. They aren't descendents of the notifications class. You could inject a notification class as well, but your notification sending process is pretty standard, you could benefit from a trait. In your case, you should rather inject your business logic into the User model or maybe find an appropriate design pattern. 
How do i get wamp to test my php files without deleting the other www files? &amp;#x200B;
I was just moaning on about this yesterday, any ideas why they didn't choose to integrate PHP out of the box? seems like a no brainer
This is huge news, I’ll be working on updating Bref (https://github.com/mnapoli/bref) to take advantage of that as soon as possible!
Also, it's usually a good practice to merge such `if`s
If you don't mind, let me recommend Symfony as well
Fine. Picking out the postcard...
If you need localhost to point to your project folder as default, then you need to set localhost root path to the location of your project folder. Google 'how to set localhost path'
It needs a standardised runtime and PHP relies on too many extensions
&gt; Isn't this dependency injection? from SOLID principles. The concept of dependency injection is being used here (the body of the function depends entirely on the inputs), but generally dependency injection refers to the constructor getting all the class dependencies inside it via the outside rather than `new Stuff()` inside the constructors. 
The tap water where they are located has hard water. (The water in this case is literally forming a new rock out of the minerals in the water in the pic on the left) So it's better to use filtered water. (Not distilled water, never drink distilled water because it can kill you if you drink enough, i.e: https://www.youtube.com/watch?v=J3HivpHP-5I)
Eh. For normal prose texts it's suggested to cap out at around 55 characters. Most of the time readability improves with shorter lines (much shorter than 80 even).
IIRC SensioCloud was, so as this is an evolution of that, I assume it still uses [Platform.sh](https://Platform.sh) under the hood.
okay. Thank you
/r/PHP is not a support subreddit. Please visit /r/phphelp for help (or take it to /r/javascript , since XMLHttpRequest isn't a PHP thing anyway, it's a javascript thing)
Twig
Yep that's why I'm asking if it's the same here, I assume the same but it'd be great if they confirmed officially.
I forgot to mention something, since has to be in PHP since it's supposed to be a weekly routine launched from a server running PHP.
it's when you want to do something, but either you dont know how the user wants it to be done, or you want to provide multiple ways for it to be done. so you provide a way to do something though a method, but how it is done is left to the caller of the method. you are effectively extracting logic out of the class, and providing a way to inject/substitute that logic. a good example is sorting of a collection, there are many sorting algorithms, and their efficiency depends on the type and size of the dataset. so you have a dataset class: class DataSet { private $data; public function sort(SortingStrategy $sorter) { $this-&gt;data = $sorter-&gt;sort($this-&gt;data); } // other methods available on the dataset... } so now you can have a SortingStrategy interface that defines the contract, so the user of the dataset can decide what sorting strategy is used based on his knowledge about the data in the dataset: interface SortingStrategy { public function sort(array $data): array; } Now you could create `BubbleSorter`, `QuickSort`, ... `WhateverSort` you like, the dataset doesn't know or care how the sorting is implemented: $dataset-&gt;sort(new BubbleSorter());
You won't beleve me but you can run mysql console commands from a server weekly.
&gt; For some reason I can't add a body after this post's title... No wonder as you don't bother reading the sub's rules. &gt; so far my search has been unfruitful. No wonder as you seem to be unable to enter your search phrase, escaping quote characters sing PDO, into Google. Honestly, nowadays such questions should be considered no better than "how to use a subway" or "how to eat a soup with a spoon". Google is essential for everyone, and for a (wannabe) programmer tenfold.
The Serverless framework is a CLI tool capable of managing deployment of your Lambda functions (among other stuff). For example, a Lambda written in Node.js would be built (e.g. npm install) and packaged (e.g. ZIP) prior to deployment to Lambda. This all happens by typing a single command - after one-time configuration, of course. So I’m assuming PHP support was not implemented by AWS in a janky way, the same sort of process could apply.
Looks like you have an SQL injection waiting to happen
This is good news. Can't wait to try it.
You need to escape the values that go into the query. I also second the comments that this is not exactly the preferred way to do it, but if you escape the values, and use backticks on the table and field names, you will be fine.
Thank you for your kind reply, I know I'm not doing things properly here but for now I really have no idea how to escape the string. See some values contain both single quotes and double quotes, so I've put the whole values statement into backticks, but it still doesn't work.
So you are actively refusing to use Google.
So many new features, no breaking changes. I absolutely love the backwards compatibility promise by Symfony.
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help. I'm certain you'll get more replies over there.
If you are using multiple joins/complex queries, it might be faster to fetch and do the logic in php. It all depends on your queries.
Look, first I'd like to thank you for your condescending reply. Reddit is always my last resort when looking for something. I'll let go of the fact that you assumed I was stupid to go straight to my point : yes I did look it up on Google using every possible search term I could think of. I'v found two possible ways of doing, whether mysqli or pdo prepare/quote. Every exemple I've read was simplified to the extreme and did not fit my situation for the reasons I've explained. If my case was as simple as using PDO quote, I'm sure my post would have been deleted because I'm certainly not the first one to ask the question. Now I'm not looking for you or anyone else to give me an exact answer and do it for me. But I'm certainly not looking for the classic "Google is your friend line". If you know more than me, and that' the case, please provide clues or explanations. I'm still a beginner as you've all noticed, and I'm sure, unless you're born with thr whole php language in your head, that you too have asked stupid questions when you were learning. If you have the time to tell me to go look it up on Google, surely you have the time to some something more helpful. 
Thank you indeed I think I'm not in the right sub.
I like your style. Anyway, I've posted my code in the first commentary of the thread. And I do echo the resulting query.
I said I tried, but would you like to see every version of my code with every solution I've tried? Or just keep yelling that everything is simple and make people feel stupid instead of explaining anything?
&gt;Tbh psr2 is so ubiquitous now it just feels a little jarring reading code that doesn't conform I don't want to rule that out. But it is not for me.
There's always something that breaks, but those are usually untested edge-cases. There's a lot of regression fixing and test-adding to fix those cases. All in all I would say that Symfony minor patches are backwards compatible. 
Symfony experts: does the framework has a built-in solution for paginated forms, or I still should use a bundle for that?
Thank you for the detailed description. I admire your ability to orientate in a such a mess and have a plan how to get out of it. In such a case I would not be afraid to use Traits. I work on a tool that speedups such migrations, but it uses [nikic/php-parser](https://github.com/nikic/PHP-Parser), that only works on PHP 5+. But traits are PHP 5.4 features, so you can use it from then on - it's called [Rector](https://github.com/rectorphp/rector). At the moment he's able to automate over 120 cases in Symfony 2.8 → 4.1 upgrade. But the most favorite set I'd say is PHP 5.4 → 7.4. Typed properties already supported. In your case, I'd use it to identify most repeated patterns - e.g. controller = not just a call that ends with "Controller" and is part of the CakePHP framework, but anything that looks like a callable even from a far distance + then write custom rules to speedup migration. I'm about to start such migration from own PHP framework to Symfony next week for one legacy company myself.
this is my understanding of it (might be wrong) but it's a core tenet of oop. program to the interface, not the concrete class. then you can choose the strategy (i.e. the concrete class) for the job you kinda get this for free if you're programming against interfaces and not concrete classes. 
Awesome. When I open the example via [https://gitpod.io/#https://github.com/symfony/demo](https://gitpod.io/#https://github.com/symfony/demo) I can see that composer already pulls in the 4.2er version of symphony. I'm sharing the link because I believe that's the quickest way to look at, poke with, and run (!) the new code.
I'm working on a project that I thought was pretty boilerplate: Vue CLI 3 front end, PHP 7 back end. I've been running into some issues though. I'm using simpleSAMLphp to auth through Centrify. When I start the dev server for Vue and run code that does a simple get to the back end, the redirect from the simpleSAMLphp requireAuth() method causes a CORS issue in Chrome. Missing "No-Access-Allow-Origin" in the redirected page's headers. It sounds like Centrify doesn't really want to do anything to help me manage that issue, so it seems like my only option is to host the front end on the same server as my PHP api endpoints by combining them. This might have been okay, but I'm trying to develop the front end separate from the back-end distinctly because of a migration schedule. I should be using an older, PHP 5.6 back-end until the front-end is done, and then switch over to a PHP 7 back-end once that's finished, but I need the PHP 7 server to run the auth code. If anyone knows an easy way around the CORS issue, besides asking all my users to simply deactivate CORS browser-wide, that'd be great.
I've used https://packagist.org/packages/sylius/flow-bundle before to create forms with multiple steps. Not sure if that is what you mean by paginated for not.
Very informative, thank you for your comment.
Unit testing is about testing units in isolation, so you test individual classes, not endpoints. So you want to perform a *functional* test, which requires kind of a different approach. In this case you just perform a HTTP request and check the response (like the status code, if it contains a certain text, etc.). As far as I remember, PHPUnit has not that many features out of the box to do it. You may want to check Codeception for this kind of testing.
A DDD approach will make easier the testing of your logic, and after that you can make some acceptance tests on your endpoints 
added: [https://github.com/doganoo/PHPAlgorithms](https://github.com/doganoo/PHPAlgorithms)
To fix your issue with the errors make sure you load your files correctly with composer, your bootstrap class to load correctly your index.php file and run your slim application. I've set up a micro service with Slim 3 like 2 months ago, had no problem setting up the PHPUnit framework. What exactly is your exception message? About testing, the other commentators are right. Don't use unit tests to test endpoints, this is a job for functional testing.
If I do more than one test. I get undefined on every setting. It seems like phpunit clears out global variables and then won't rerun require statements to load them back again between running different tests. If I only test that I get a slim app created and test that is has functioning dependencies all in one single test then that 1 test with 5 assertions clears. Once I do another test is when I start having problems. Things like logins and specific details between servers have to be set in a setup script.
dbase , thats a blast from the past, dont think ive heard that one since 1993
DDD is Domain Driven Development? Since I am doing the backend api would I do Domain testing? I figure that would come along with the front end projects. Essentially all I am writing is interface between random website/client and our databases. Client asks this question (url) and system returns this data set type of a thing. Please correct my logic if I am wrong. I feel like I am in over my head at this point.
Hm... from what I remember my bootstrap file only loads composer autoload and slim application instance without calling the run method, this means that in my unit test I have the application object set with all of the configurations and services. Then I can just star testing isolated code, I didn't had those issues that you are describing, is your code public, is it on github?
not on github. Doing it for work. Have to see how they feel about sharing it. Mostly think they'd have an issue with exposing any business logic/secrets than the code itself.
I think they've been saying that for a year or more
No problem, unfortunately don't know what else you can check to fix your problem. 
My problem is more to do with me not knowing what I am doing than anything wrong with PHPunit. I am looking into feature and domain driven testing like others have suggested. Kind of feels like I am learning to mountain climb so I walked off the top of a mountain and have to learn to climb before i hit bottom. :D
It kinda makes sense that everyone should write code in the same style though, doesn't it? To alleviate some of the cognitive overhead of reading someone else's code. 
It's used to access methods or variables of classes. So when you're doing `$dd = new DB()` or something like that, you're creating an instance of the `DB` class in `$dd`. After initializing, you'll be able to call methods of the `DB` class like so: `$dd-&gt;someMethod();`. It'd probably be a good idea if you'd read some tutorials about classes in PHP, you can do a lot of things more efficentltly.
It’s the object operator. It’s used to access properties and methods of an object 
Just run it like `exec("./detect-markers path-file-file.jpg", $output)` and $output will be an array of x/y width/height markers.
It's the arrow operator, which allows you to access members of the preceding object. Some may call it the dereference operator, some call it the object operator. Essentially you are getting the property's value or a function's return value and then passing it into the expression that it resides in. Normally, it's written without spaces but there might be some rare style guides that prohibit zero spaces around it. For instance, `$obj-&gt;get('someprop')` would call the `$obj`'s stored value's `get()` function with the arguments, and will return the value of 'someprop'. If 'someprop' is an object, you can also chain those operators together, like `$obj-&gt;('someprop')-&gt;delete()` and use it anywhere, like assigning the ultimate output to a variable to use it in an `if` block like above.
It’s a `member access` operator. 
Incorrect. It does not directly access methods of classes. The only directly accessible methods on a class are statics, and you run those using `::`. You're thinking of objects, which are instances built from classes.
First thing it does is ask for access to my GitHub account. Which is likely why you're being downvoted.
Means each element of SQL query ( field ) returns an error connect error according to the example I gave
I've always used https://github.com/craue/CraueFormFlowBundle with a lot of success.
Interesting. Will take a look. Strange they don’t have a Python api. Python is soo good do edit videos
what is Symfony and how hard is it to get started? Interesting way in making a website using straight php, html and css.
Depends on the use case really, If you have a CMS or user uploads that you need to crop and resize - I'd do it on the fly with a CDN in front using either a custom PHP script or one of the services (self-hosted or not) mentioned. If you're working with a lot of content, it could save you a lot of disk space as the resized image cache expires for things like really old news posts that people don't read anymore. It's also trivial to make a cache warmup if that's really needed, just make your CDN call the necessary URL's. &amp;#x200B; If I'm just serving static images, I'll just crop and resize it myself for the required sizes or have some webpack loader to it for me when I'm building my assets.
The API just uses JSON so for front end applications you can use any language. PHP is the first maintained SDK (composer package) though right now while I try and find some use cases for it. Disclaimer: this is my side project, the backend is built using C++, also good for video editing.
Yes, DDD is Domain driven design and I would never leave my business logic in the front (or presentation layer). If you want to know more about DDD you can begin here: https://www.amazon.com/Domain-Driven-Design-Distilled-Vaughn-Vernon/dp/0134434420
Thank you. I was trying to verify the name but couldn’t find that. 
Thanks. Maybe I don't have the right definition of business logic. I don't have any clue about the front ends that will be using this only the requirements for the api.
i see. alright i'll add to my list of options. tnx mate!
Good stuff 
I see a couple of use cases, but mostly commercial or enterprise in nature, like adding watermarks, audio marks, company logos and leaders or intros and outros to meeting recordings and stream recordings. With a bit of audio analysis it would probably be interesting to automatically cut up hours of footage into byte size chunks (around 15 minutes). All of the above can be turned into services. E.g.: fetch a steam from twitch, create 15 minute chunks with a margin of a minute to prevent cuts mid sentence. Then add an intro and outro, render, wait and upload to YouTube. That's probably a service streamers would gladly pay for, given the time it saves them and the amount of content they generate that way.
You can take a look at [https://github.com/symfony/demo](https://github.com/symfony/demo) which is a simple blog application created following all the best practices recommended by Symfony. It's been created as a learning resource and the code contains a ton of comments explaining it.
Found the recruiter.
**1)** How long you've been programming ? **2)** Are you programming in the field that you wanted to work in when you were a kid if not why ? (let's say you wanted to be a game programmer and now you do webdev etc) **3)** What you prefer in your field of programming compared another domain of programming like game, database, system or webdev programming ? **4)** Which kind (or field/domain) of programming you think is the hardest ? 3d graphics ?
1) 14 years with PHP, 9 years with MVC 2) yes, still PHP, just not GET/POST forms and algorithms but AST/CLI and algorithms :) 3) I prefer no forms, no database, no application → CLI gives me instant feedback with minimal dependencies 4) scalable organic open-source - to lead an open-source project in a way people understand the code, find it useful and contribute more and more; it's very rare, usually 95 % of work done by the maintainer Btw, are you doing some research? What are your goals?
I agree, I think it would be used commercially for many of the use cases you outline. I also thought now or in the future that AI/visual recognition/face detection etc.. could be used to extract sections from one or more longer videos and create a succinct edit. A few people I have talked to have mentioned Twitch, will need to investigate that a bit more.
1) for almost 9 years, starting from i was 8 or 9. Have 2 years of real job experience, but I never did not program for longer than a week 2) as a kid a made a lot of 2d games with a very simple syntax thats how i got into programming. Was around 8 or 9 and my english sucked and I knew so little yet. I am now 18 and am on a study called Application and Mediadeveloper (basicly webdev) because i was under 18 so i wa smandatory to go to school. I managed to work at the company where i was an inter first in summer vacation For the rest PHP was a huge hobby of me but the 2 years at that company I learned a lot and about DNS and domain names too (basicly hosting) 3) what i like about webdev is alao creating functional tools for companies. Something they will need to help themselves running the company. But i dont have a favorite as game dev is also cool and did some C++ occasionaly. 4) i think game dev is ultimately one of the hardest with the 3d worlds, thinking about calculation for shadows etc (i think thats done with Sin Cos and Tan not sure) but thats looks to me a pretty hard field.
Can you give a real life example? Can't one unset($varWithCircularReference) and then call the gc\_collect\_cycles?
[removed]
For those who want to learn fast :)
1. Hobby 35 years, first language: Basic. Professional 28 years. 2. No. I imagined system-programming Basic languages into computers. Or systems like traffic lights or factory control. But that did not happen. 3. I love web games but I cannot score much work in that (JavaScript typescript php NodeJS Angular) Instead I mainly build boring WordPress stuff because people know "I can do PHP". It is the most boring 2 years of my career. Am tired of it and doing just another career switch as we speak. :) love to program C#, Xamarin and Windows programs. 4. Trust me, there is no hard programming. It depends on the time and dedication you invest to learn new techniques. But for me visual design is the hardest. Once I have the flow of screens setup, I have my client consult a designer for the visuals. 
Yes, I've also used this. While I had no issues with it, I'd prefer an out of the box solution more
Is this compatible with Symfony 4?
Just a reminder: dependency injection isn't tied to constructors, or even classes. It's more just a general principle of, well, injecting your code's dependencies into the code in question rather than relying on that code to create its own. That holds true regardless of where they get injected (constructors, setters, other methods, functions, ...) or what those dependencies happen to be (objects, resources, other functions, ...). Also, injecting all of a class's dependencies at construction is something of an anti-pattern. Don't get into this habit. Pay careful attention to what the class does, and whether the functionality of it as a whole relies on the dependency, or whether only a piece of its functionality does. The latter may actually point at potential SRP violations (i.e. the programmer is using the class as a package or namespace, grouping lots of very thinly related functionality together when it should really be in separate classes).
1 - Since 2005, I've started at the end of my first graduation 2 - Well, when I was a boy I couldn't imagine that I would be a programmer... but yes, I'm happy doing what I'm doing now 3 - 4 - Gaming. Gaming is more than just writing a bunch of code and see things happen. That involves hard work, blood, sweat and pixels ([there's an interesting book talking a little bit about it](https://www.amazon.com/Blood-Sweat-Pixels-Triumphant-Turbulent/dp/0062651234)).
I love this diff guy
Who keeps sticking commas at the ends of lists?!?! I want to meet that guy...
Yeah, I don’t get it
Mainly it helps with diffs. When you add a new item to a list, without trailing commas, the diff looks like: [ 'one', 'two', - 'three' + 'three', + 'four' ] With trailing commas, it looks like: [ 'one', 'two', 'three', + 'four', ]
I'll tell you a secret, you can land a job without having a GitHub account 
The '+' and '-' should be git diffs but reddit messed up with the linebreaks. If you have trailing commas and add a value to an array, you only have to change one line instead of two, which looks nicer in a diff. 
Or one can run a couple of composer commands and not risk compromising credentials 
How?
Code generators? If you're generating a function call it's easier to put a comma after \*every\* parameter without worrying about knowing when it's the last parameter and leaving it off, or going back after to remove it.
That couldn't be farther from the truth. Symfony is **totally** different than other frameworks, it takes months, more likely years to fully learn it. MVC is less than 1% of what SF offers. For comparison: Symfony forms documentation is bigger than documentation of entire Laravel. And not all features are documented, but you figure them with autocomplete and reading docblock in code. The list of features is almost infinite, yet, because of compiler container it will not slow down. You can put 1000 services, it will not affect the speed (at least measurable diff).
\/6\/6\/6
I always, pure for diffs xD
I do it, but it's mainly a habit I've gotten into. As noted below, it makes diffs look better, and it's a habit I had from working on a team where nobody used IDEs and there were barely any tests, so it was one less thing to break when someone missed a comma when adding a new array value :p Now it's just force of habit mostly, and slightly nicer diffs.
I love to the point articles. But only 4 changes? I’d expect a lot more. Those were all very minor at that. Felt like satire. 
I see what you mean, but that seems rather silly in my eyes to pop a comma at the end just to have a prettier diff. To each their own. I have my own code style anyway, I don't follow PSR. I'm sure if anyone sees my code they have strong opinions over trivial things too.
That seems really lazy if a code generator does that. Just create an array and implode with a comma separator, no worries.
Apparently, not doing it is punishable by downvotes. Sigh, relax people.
good point :( The Github username and password actually go to GitHub directly and not to Gitpod. You can see that in your browser because the address bar shows "[GitHub.com](https://GitHub.com)" as the domain and the connection to be secure (https). Gitpod or TypeFox never see the password. The mechanism is called OAuth and it is provided by Github so that other products (like Gitpod) can be granted a small set of permissions in your name. By default, Gitpod asks for username and email address only. It's not asking for write-permissions and it's not asking for permissions to access private repositories. After giving permission, you get an IDE running in the browser. You can edit files have all kind of language smartness in the editor and there is a terminal running bash. PHP and composer is pre-installed of course. You can even run the symfony example form there and open it in a new browser tab. &amp;#x200B;
Easy, you'll meet hem here: https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/2.13/src/Fixer/ArrayNotation/TrailingCommaInMultilineArrayFixer.php
There was a tough time limit ;). Which one do you miss?
I understand how it works. But I still don't want to give it access to my private repositories.
Flexible heredoc/nowdoc, SameSite cookies and PCRE2 (mainly faster regex and future scope) are nice.
Beautiful 
Just be thankful php does not have a culture of using preceding commas. That stuff just makes my eyes hurt.
It's called applying. Source: have job, no github. 
I've had this argument too many times. It is silly (in my opinion). Fortunately I'm the Snr Dev and what I say goes. I put the rule in the code sniffer :) 
Pretty minor but slimmer diffs can cut down on merge conflicts. I think the main benefit for me is you can copy and paste without having to worry about adding or removing the comma.
https://derickrethans.nl/circular-references.html
https://derickrethans.nl/circular-references.html
yeah, but forcing blank between (bool) $foo or not is kinda too much
True, but these days having open-source contributions almost always helps your chances. Not a requirement, but it does tend to get your resume more attention. Of course, if your code online sucks, it can work against you. 
&gt; request header changes will logout the user and need re-login (such as accept-language changing in request) You are missing the requester IP address. It's basically the only thing that cannot be faked. Will this be inconvenient for a lot of users without a static IP? Yes very much so, but if you ask for something pretty much impossible you will have to trade off some convenience.
You're not giving access to your private repositories The Github page with the "Authorize" button also lists what permissions Gitpod would receive. Gitpod will get to know your email address and your GitHub user name. No access to private repositories. No write permission. You user name is public information since it's shown in your profile. And your email address is visible everybody who can git-clone one of your repos and look at the commits. &amp;#x200B; &amp;#x200B;
IP address would be quite useful indeed, that's the first thing that comes in mind. Unfortunately many users are on dynamic IP addresses, especially nowadays with mobile connections - so they might refrain from using the application. The user impact is simply too high.
&gt; Trust me, there is no hard programming. I humbly disagree with this statement. Mission critical stuff that can be the difference between life and death for the people who are relying on it, is incredibly hard. Automated driving is one such example where you might encounter edge cases that have no good solutions and no amount of domain expertise or software skills will help. Imagine a scenario where a car is driving through a busy intersection with a group of people waiting on the corner for the light to change. All of a sudden a group of kids run into the street. The car instantly knows it has only 3 options, all of which will likely end up in a fatality. 1) Swerve right into oncoming traffic and risk the lives of unsuspecting drivers. 2) Swerve left into the group of people waiting for the light to change. 3) Drive straight through and hit the children. What should the car do? Some will say that it's not the engineers responsibility to make that decision, and that is true, but you still have to make sure the software responds according to spec. Then you read in the news a couple years later, that the edge case was realized and your software worked perfectly, but people died. That's hard. 
Yes, but as said that's the only thing you can actually trust to be correct / not faked. That would only allow physical access to the location of the user (coming from the same outbound network). So if it (the security aspect) is really important to you forget about the idea of long lived tokens. &gt; you can't have your cake and eat it too The are ways to detect stolen long lived tokens after the fact (series identifier), but nothing prevent an attacker from using the token until the legitimate user logs in.
If an attacker has at-will access to the user's browser cookies, then the only defense mechanism you can implement is ip-based sessions. If, instead, they only have one-shot access... roll your session ids at various points. This is a good idea to do at any point where the user's privileges change (either upwards or downwards). You can also do it when their last activity exceeds a certain window of time--just be aware that you would need to do it on the next time their session is active, since there's no way to hand them their new session id without activity.
Great comment, thanks. There is enough food for thought, such as a time-based protection of some sort. Regenerating session id periodically, such as each 10 minutes might also help, we're working on that but still looking to understand what would be the right mechanism here. Another thing we're considering is using a geolocation module, so when IP changes, if the new location is in a different geo then we might force a new login. It would have to be quite fast though, looking for ways to improve that as it's quite cpu intensive. 
&gt; So if it (the security aspect) is really important to you forget about the idea of long lived tokens. Good question. Our app is some sort of web statistics, NOT banking or such. Security - hell yes, but the tough part is always not to alienate the user. The only data available in the app is numeric and or traffic-related (such as ad groups, urls, etc). Nothing else can be accessed about the user via the app, not even the name etc. We're using a 30-days lifetime for long lived token, we think it is reasonable in the context, but I'd appreciate any comment on that. &gt; Also: does your service implement hsts and if your target is browers is your side added to the hsts preload list? Otherwise your users can just be captured before ever even getting to the tls version of your site. Yes we use hsts, but we're not on hsts preload list. It's a new app, not much usage yet. Getting there.
Nice update
1) 17 years 2) I wanted to be a circus clown or acrobat as a kid so uh... no 3) I like web programming. I do web programming. 4) IoT - internet of things. 
I like the way you think 
What did you need to change on any of this?
Thank you!
Thanks :)
Thank you! What exactly do you like? So I can have inspiration for next posts
File sync is just one time. What It annoy me is autocomplete 
Looks nifty. Do you have anything in mind for structure validation (thinking about something like [https://json-schema.org/](https://json-schema.org/))?
Closing PHP tag makes me sad. 
1) At least 30 years, starting with Basic on C64. Been working with PHP for 16 years, professionally for 10. 2) When I was a kid, I wanted to be a Cop or a Fire Fighter. Then I discovered The Internet ;) 3) Having worked in e-commerce, games industry and most recently finance, last two making internal tools, I definitely prefer not having to make public facing websites! 4) I've never done it but I imagine physics simulation, A.I etc. Basically anything that goes into modern video game development. 
No, not doing it isn't punishable by downvotes. Acting like nobody else does/should do it on the other hand...
Highly recommend you look into SQL escaping or prepared statements to make sure the input data is safe. Otherwise: https://xkcd.com/327/
Yeah fair I'd agree with that. Most important part for me is linebreaks in the right places.
! $foo because exclamation point is a narrow character in non monospace fonts, so it's easier to miss without a space if you're skimming over the code.
That's why we have style standards :tada:
Actually 80 is soft limit and 120 is an optional hard limit iirc. Pretty sure the spec doesn't use words like "must" for line lengths. 
I was just hoping for an explanation. I genuinely don’t get it. 
The way you think.
 - I like the way you think + I like the way you express changes with diffs! 
Why is this version 70 if its the initial release? 
&gt; Your csv file is sent to a folder on your website, so the path on the remote computer needs to have Linux 777 permissions to add a file. Eh, no?
Only guessing but: &gt;Notes for this release: &gt; * Embeds Chrome 70.0.3538.102
Stop spreading this trash.
Using on windows, previous version. Is amazing.
I never heard of it. Could anyone tell me a use case? 
Want to develop a desktop app for Linux without learning languages such as C, Java, and GTK, et al? This seems like a very similar thing to Electron (for JavaScript). Basically: make a webpage, wrap it in a web browser / interpreter, and ship it. It looks like an executable, acts like one, but you program it like a web page.
There were explanations given. Mainly that it makes diffs far easier to read (and less likely to cause merge conflicts) and that it makes it slightly easier to add more elements.
So this is electron but with PHP instead of JS ?
The example is not very explicit because the interface declare only one method. Usually the point of the strategy pattern is the interface define multiple methods. Then implementations of this interface can be injected in a class performing an algorithm using those methods. Let's say we can have an interface with read() and write() method. We can have implementations for filesystem, database, etc... A class can take one implementation of this interface and have a method which read things, apply a transformation, and write the result. This is the strategy pattern: one algorithm, multiple strategies implementing some part of it.
Having a github account with a bunch of awesome projects to show is nice. In the hiring I’ve done, though, there’s very few people who have anything public worth looking at. Code challenges/technical interviews are pretty commonplace which is what a lot of companies do to vet candidates. I’ve done a bit of hiring and honestly of hundreds of applicants I would guess that less than 5% of applicants had meaningful github accounts. Sometimes it was nice to look around at some code before hand but some good experience and a nice resume tend to get people to an interview.
To understand, does this not take us further away from using the right tool for the job concept?
You can find People who hate every language. I think most of the php hate is due to old php 4 style code like Wordpress. Php7x is very good. 
Further away from God’s light
As @nexxai suggested. Major version is the same as version of Chrome embedded.
Basically yes.
Would it be possible to use Firefox/Gecko instead?
I have no idea?
Thanks! Windows version has the most features since it is developed for so many years. Hopefully we will get Mac support soon and then it will become cross-platform.
It makes it easy to convert web apps to desktop apps by just copying your scripts to the www/ folder. It's up to you to decide which tool is the best for the job. Sometimes you just want to get things done quickly and use the tools (web) you already know, or use apps you've already created for the web and reuse them on desktop.
I HATE interview challenges. Had one recently where they slide me a piece of paper and a pen and asked me to write down code to solve a ridiculously complicated problem in a language. But my process doesn’t work that way. When I program, I close my eyes and think about the problem and conceptualize ways to go about breaking it down, then scribble some notes on paper, google a bit to see how other people solved it, type out some code, forget a certain syntax and go look it up, run the first bit of code, wonder why it didn’t work, google some more, copy and paste a few lines from stack overflow because someone already figured out the part giving me trouble, code some more, test and debug, code some more, now that the program is taking shape maybe go back and clean the code up a bit, and if I’m lucky I only have minimal debugging to do after that. Doesn’t really work with a sheet of paper, 3 mins, and a group of people glaring at me. 
Aye. I hear you. We personally don’t do challenges like that. Our challenge is basically a prompt to build some theoretically real feature. We try to make sure it shouldn’t take more than 4 hours and we pay the dev $200 for their time. We don’t expect the result back for a couple days either so technically they could take longer. That way we get to see real code and even if you don’t get hired you at least get paid for your time. FYI if you ever get a challenge like this don’t copy and paste code from some tutorial :) you’d be surprised how often people do that. 
Yes, it's possible, but there are no plans for it currently. The Windows version supports Chrome and Internet Explorer engines, although the version with IE embedded wasn't updated for a very long time since most people want to use Chrome version.
There are php frameworks that I hate, but I do not hate the PHP language. That said, I do enjoy working in C# more. And although I would not say they are better languages, JavaScript (&amp; TypeScript) are also more enjoyable than php projects. But it is hard to compare because (for me) C# is tightly coupled with the .Net framework and JS/TS with Nodejs and Angular. With PHP I have multiple cms'es, frameworks, etc. I am supposed to be familiar with. Writing plugins for WordPress for example is more hacking than engineering.
Two main reasons, number one being that PHP didn't start as a programming language. It started as a framework for C to create dynamic HTML pages easily. Over time, it evolved into a fully fledged programming language, but it was a long time before it got a "proper leadership" and as a result, has been mired in bad programming paradigms and poor decisions for a long time. While there are some remaining issues, in recent years it's become a very powerful and well run language. The second reason is that because PHP has little barrier to entry compared to other languages, it is extremely widely used. It's supported by 90% of all cheap webhosts and anyone can pick it up and make something really really shitty with it that sorta works. Because of this, the PHP ecosystem has a wide reputation as being absolute shit among other web developers.
See the project's README file to get a better understanding of how PHP Desktop works: [https://github.com/cztomczak/phpdesktop#php-desktop](https://github.com/cztomczak/phpdesktop#php-desktop)
I have a simple PHP file on htdocs, where I have folders for different projects, often using some framework. But this is a file .php alone sitting on the htdocs folder. The problem is when I try to run it I go to localhost:8888 there is a display of the folders I mentioned above, plus my .php file. When I click on the file there is a page gives me an HTTP ERROR 500. Is that normal? where should I place the file? Any hint is very appreciated. Thanks in advance
I have a simple PHP file on htdocs, where I have folders for different projects, often using some framework. But this is a file .php alone sitting on the htdocs folder. The problem is when I try to run it I go to localhost:8888 there is a display of the folders I mentioned above, plus my .php file. When I click on the file there is a page gives me an HTTP ERROR 500. Is that normal? where should I place the file? Any hint is very appreciated. Thanks in advance
There are still some oddities/annoyances that still live on in 7.x though, see [http://phpsadness.com/](http://phpsadness.com/). I know there have been efforts to fork PHP to fix these issues, but hell if I can find them.
Check your error log, it should point you in the right direction.
Yup, checked the logs and it pointed to an error on the script. Fixed the error and now MAMP runs the script normally. My bad... Thanks for the advice!
4\. Yup 5\. Less so, but basically yup 7\. Not really (although it's far from perfect)
PHP is very easy to pick up. As a result, thousands of people without any education consider themselves programers and start teaching others. (for example, only yesterday there was two links submitted to /r/PHP to articles that are literally shit). This makes a very bad ecosystem where only 1 of 5 people using PHP do it to the modern standards. So, although there is a lot of perfect PHP code which is no worse than code in any other language, but *en masse*, an average PHP code is very bad. Hence the hate from people who don't care to look closer and separate the sheep from the goat.
These issues are not the reason why PHP is hated. ANY language has such a list. There is no golden pill. It's a circlejerk of people teaching each ether the bad code is the real reason.
Sphism is correct it was from the old php4 days that had some (still available) badly designed and formatted language calls. I also doesn't compile so people think it is slow (and it is relatively). But it is good because you get a tight feedback loop. Code, run, break, fix, code ...
I suppose it being ported to Linux will mean a Mac version will be following fairly soon
Haters gonna hate 
 CodeIgniter # 🤮
The closed source Google browser that sends all your info to Google.. for desktop apps.. no thanks.
Similar questions like this pops up every now and then. The fact that you question the question says a lot about PHP. There's nothing with it in your view and that's all that matters. Until your use case changes, PHP all the way.
I may give it a try but won't it use a bit too much memory as Electron ?
Yes, you pointed out the main reason, but people will hate for the small things too. Yes, no language is perfect, beceause perfection is in the eye of the beholder.
It's Chromium actually that is embedded in PHP Desktop. It doesn't send anything anywhere.
I built an app with this years ago for my company that now 10 people use. This was way before Electron. Hats off to the creator 
Is this a single page app? Have you considered setting up a handshake and storing a secret in localstorage, so that every request can be signed by a custom header, on top of the cookie? Since you use HTTPS, the handshake can only be intercepted when the attacker is also a man in the middle.
Anybody know how this is done in PHP programs (maybe WordPress , Joomla, Laravel)?
Thanks for the idea. I was wondering about it but I find it double-edged. Validating json as such, and not the parsed data, would add a bunch of functionality and code jumps into the core parser. I am afraid it would slow it down noticeably and it would be a trade-off for something only few would use I guess. I would rather work harder on efficiency. However there is still the possibility to validate the structure of an item as you get it in the `foreach`. But who knows, maybe some good opt-in implementation idea comes up. What I plan next is not to throw Exception on any json decoding error, but rather providing some kind of error object to the `foreach` for a corresponding item that has an error within it and cannot be parsed. Probably only error in scalars could be handled this way. That would allow you to just skip malformed items rather than be blocked by an exception to parse further. The other core functionality I find appealing is being able to iterate many sublevels, not just one. For example all books of all libraries. It would be specified something like this: `/libraries/*/books`.