This isn't really about login security, this is about safe password storage, just a small piece of the application security. How about just using one of the thoroughly vetted standard libraries for bcrypt and select a appropriate number of rounds? What's your HTTPS situation like? Session invalidation?
md5 is good enough as long as you salt it, I use a stronger encryption (because why not). But what I do is hash it with its own database id as a salt and another string. hash('sha256', $_POST['password'].$id.$salt); The only thing that is tricky here is you need to fetch the user info from the database before checking the hash against the hash created above. Read on php.net about the available algorithms)
ty for the link :)
Yeah, your right. I did put that up wrong about security... We WERE using HTTPS for development (unsigned, so you got a nice warning when going there the first time) but ppl thought it wouldn't be worth it to actualy get a signed one... So back to http it is.... I was hoping to use bcrypt but that's also a no-no. Too many things running on the server atm.
My problem with md5 and sha* is that they are meant to be fast, so anybody who wants to try to bruteforce it, will have it easy because it can use a very fast algorithm. So I chose crypt instead, it's slower. (it also saves me the effort of saving the salt in the database since crypt choses a random salt by itself) That combined with a pepper containing all the 'weird' characters I could find on my keyboard, should make it quite annoying to bruteforce.
There is no way to stop anyone determined enough, but I would say that using the unique salt from each database row makes the the rainbow table they would have to create multiple in size by the number of users you have. Slowing people down by a fraction of a second with each php function is less effective in that goal.
Beats me. You want security but you don't want a SSL Certificate... I don't see the logic either.
You could always write a basic queue system that runs a forked request that is not affecting the person loading the page.
It's even easier to replace eval with echo and return all the source. :)
This is going to be your best solution to the problem. hands down. 
Like how meritt_zare said, I would recommend using PSR-0 by default instead of your sed rewrite sh file. The reasons I say this are because there's a few PHP devs that aren't going to pick up on this without a full explanation, some devs are only working with Windows, makes it easy to add to composer, and allow developers to easily extend on it. That said... you should reply with "fork it or fuck off". haha. Anyway, the overall library looks very sound. It does require PHP 5.3+ which isn't noted anywhere. (as PHP 5 supported can mean a lot of things now) There are some bits of code that make me cringe, but it's mostly personal preference or unneeded optimizations. You do have a print_r right here though: https://github.com/AlekseyKorzun/Twilio-PHP-5/blob/master/Package/Twilio/Api/Resource/Listing/Page.php#L45 You could also take advantage of using traits (effectively making this 5.4+ requirement) with the _loadIfNecessary() function (and others) in the Resource Listings. Overall, very nice library. I will be forking it soon for one of my own projects. :)
Agreed, a lot of systems I have to maintain use a single md5 or sha1 hash for passwords, whenever I can't find cms login information right away I just go to the database and fetch the passwords myself. Very convienent, very wrong. Crypt, I think, is mostly better because it's slower, it takes longer for crypt to hash. The free salt (as in, I don't have to implement any salt myself) is a nice bonus. That, combined with a system with pepper containing 'weird' characters, should be enough. I'm also wondering where the attacker would first get in.. the database or the filesystem? If it's the database, then the filesystem is still secure and there is no way of knowing the pepper. But vica verca and they only have to figure out the salt crypt() generates. :/
You should read more about [crypt()](http://en.wikipedia.org/wiki/Crypt_%28Unix%29). A random salted md5 with a fixed number of iterations has been standard for quite a while (over a decade irrc, we're talking [Red Hat 7.2](http://www.centos.org/docs/2/rhl-rg-en-7.2/s1-users-groups-shadow-utilities.html) days). Modern versions can use more sophisticated algorithms like bcrypt or a more sophisticated SHA2 that appears to be more similar to PBKDF2 than to usual salted algorithms. More likely than not, your system version of crypt() will generate a random salted md5 which is more secure than md5(). If its really new (Latest Debian, Ubuntu, and RHEL iirc), you'll likely get bcrypt or Red Hat's sha2-based one by default (which does have dynamic number of rounds among other things). Modern versions of PHP use their own version of crypt, so you can get the the bcrypt or sha2 from just about any system. In fact, that's exactly what systems like PHPPass do (check for bcrypt support and forcing crypt() to use it, if its available). Edit: It was documented in Red Hat 7.2, not 7.1
Me too. Something like: $dom = dom_import_simplexml($xml); $dom-&gt;parentNode-&gt;removeChild($dom);
Yeah http://www.openwall.com/phpass/ is my personal preferred solution. You can adjust the amount of resources it takes to hash the password to what you can afford. 
[StartSSL](http://www.startssl.com/) has free certs. They're [supported by](http://en.wikipedia.org/wiki/StartCom#Trustedness) Windows and OS X, as well as Firefox.
Give each individual user a unique salt. Add a "Salt" column to the user table. Then each password has it's own salt so anyone who obtains the user table information needs to generate a rainbow table set for every individual account if they want to crack the whole thing. This makes it so you're not playing a game of trying to hide the salt data. It doesn't make a difference if the attacker has the salts or not, he still has to generate a rainbow table for each individual account. 
If someone is going to go that far the extra computation time probably won't deter them much. 
Interesting... I'll check it out, that looks great. I did not expect to be able to use blowfish here... Yeah, I know it's a terrible excuse, but what can you do...
MD5 is not satisfactory as all for login security. What other comments haven't explained is that there are two different types of attacks you are trying to defend against with password storage: * Attack 1: Somebody gets the password hash and reverse-engineers the hash to get the password. * Attack 2: Somebody gets the password hash and tries every possible password until the hash matches. Both scenarios are important to consider. The first attack is known as a preimage attack, something that is easy to carry out on MD5. With the weakness of user passwords nowadays, reversing a simple MD5 hash is rather easy. This can be easily fixed by using something from the SHA-2 hash family (SHA-256, for example). If you use SHA-256 for your hashes, you are pretty much guaranteed protection against preimage attacks (unless the hash function is exploited). Attack 2 is just a brute force attack. The only way to guard against brute force attacks is to delay the attacker, i.e., make sure their guessing takes as long as possible so that the amount of time it will take them to guess the password will not be worth it. For this you need something called a key derivation function (KDF) that makes use of key stretching. For this I recommend one of two options: PBKDF2 or scrypt. The former is preferred as it is NIST certified and it can be implemented in pure PHP. The latter is much more secure, but it is very difficult to implement in pure PHP. IMHO I would go with scrypt (you can use the php-scrypt extension for this), but if your application needs to be just PHP and portable, then stick with PBKDF2.
Thanks for the advice, I'll look into PBKDF2, it sounds good and portability is pretty important.
I'd rather lannor wrote it with the ability to swap in any ORM layer. I think that gives you a lot more practice for building modular code than writing it around an ORM layer that you wrote.
StartSSL certificates are free only for personal use. Any type of commercial use requires you to purchase a certificate.
A decent domain-vetted certificate should only run you $15 - $30. The pricier certificates are for organizations that need their own organization name to be included in the certificate, or for e-commerce stores that want to use the "green bar" features of extended SSL.
Sort of. You have to pay for Class 2 validation if you want the organization name to show up in the certificate, but there's no restriction on using an individual cert for commercial use, as long as you don't mind that [your name will be showing up](http://www.startssl.com/?app=25#2).
That's how I checked it, actualy, after that I checked the version :) I found the PHP only version here: http://php.net/manual/en/function.hash-hmac.php Gonna implement that, thanks for the advice :)
Upgrading is not an option, unfortunatly, there are a lot of sites running on the server and checking for backwards compatibility would take up quite some time. Thanks for the article link, gonna read that and hopefully implement what I learn from it :)
You can still use the crypt() function with SHA1
A tiny bit more info: http://news.php.net/php.internals/62127 TL;DR: The votes are in and the patch will be mereged into the trunk :) Edit: A hacker news link: http://news.ycombinator.com/item?id=4375791
I would use the php crypt() function as normal and let it generate its own salt. $hash = crypt($ssn); Then store $hash in the database. To check it, pull the data from the DB (it will be referenced as $stored_hash in this example) if( crypt($input_ssn, $hashed_password) == $hashed_password ){ echo 'Password is correct!'; } In PHP, the crypt() function is smart enough to parse the salt out of the hashed password, so you can just slip it in and you don't need to deal with anything. --- The other solution would be to look at PHPass and implement a blowfish/bcrypt solution.
A link to the actual article might help...
WOOPS! [Link](http://perishablepress.com/stupid-htaccess-tricks/) Sorry bout that 
If you scroll up, they give a pretty good example of when it is useful. The tl;dr is that 'finally' allows you to _always_ execute code from a try/catch block even if you return in the try or catch. so if you catch and return something, your finally still gets called prior to the return of the catch.
My god we need LESS Java in the world not more! Someone kill this idea with fire before it breeds! Edit: Didn't mean to stir up this much dust. But I fully I deserve it since I'm posting things I have little to no knowledge about. I got misguided by my experiences of JVM on the personal computer, and the fact that JVM has "Java" in the name - thus thinking JVM depends strictly on Java.
Hmm.. scroll up you say? I knew it was a dumb question lol. Thanks though
1. this is a PHP subreddit, not an [apache subreddit](http://www.reddit.com/r/apache). 2. If you want accurate, up-to-date information, why not go to the [source](http://httpd.apache.org/docs/)? 
Seriously, I read the StackOverflow post a couple of times without 'getting' it, you did it for me. Follow up; can you have ARs as part of your model class collection and not violate SAP? TBH I don't know if I totaly get tereskos point with AR and SAP. 
Noted. No static method calls unless in a factory/singelton-pattern
Thanks for your reply. Good points!
While I wholeheartedly agree, PhpStorm isn't actually that slow (at least from my testing). I've used it for a month now, almost daily, and I haven't had it take too much memory or crash.
SHA-1 has weaknesses and shouldn't be used anymore. SHA-256 is what's currently recommended (at least until they finish making SHA-3). Also, crypt doesn't serve any useful purpose if you're planning to use PBKDF2 (which you should use for all SHA-family password/secret hashes). crypt is just a somewhat clumsy and limiting interface to other hashing functions, plus some packaging that you don't even want when you're putting it through PBKDF2.
You are correct, I expressed myself unclearly. JVM is what I have issues with. PhpStorm is by far the best Java app I have used too, but try as I might I cannot use it for over 24 continuous hours. It just slows down to a screeching halt. This happens on OSX mostly though - it will last much longer on Windows and Ubuntu, tried and true. Related: http://www.reddit.com/r/PHP/comments/y5biu/phpstorm_professional_php_ide_review_and_license/
I have reproduced the unreliability of the JVM on 4 Macs so far. An iMac from 2011, two Macbooks (plastic whites from 2010) and a Macbook Pro from 2011. I can say with certainty that the JVM is completely broken on OSX from version 10.5 to version 10.8. I would love to change the JVM, alas: http://stackoverflow.com/questions/4007252/need-guidance-on-alternative-jvms-for-apple-os-x
Unreliability of the JVM - that is a laugh. If you are hitting issues they are with the application running on the JVM. Let me see: ArrayList&lt;Object&gt; x=new ArrayList&lt;&gt;(); while(true){ x.add("Hi"); } Oh dear, my program hogs resource - must be the JVM! 
&gt; You can replace it with a JVM of your choice since the MS implementation is broken. What? There has been no Microsoft JVM since Windows 98. The Microsoft JVM was incomplete, so [Sun sued them over it](https://en.wikipedia.org/wiki/Microsoft_Java_Virtual_Machine#Sun_vs._Microsoft) and won, leading to the early discontinuation of Windows 98, Office 2000, and part of Visual Studio 6 (Visual J++).
&gt; Hell, it's time to stop making any desktop application in java, at least if you want to appeal to Windows based developers. No, application developers just need to stop using Swing. [SWT](http://eclipse.org/swt/), while harder to program, gives a far better user experience, even if only because [non-native UI sucks](http://codinghorror.com/blog/2007/02/non-native-ui-sucks.html). The language itself is largely fine and the JVM, despite your apparent distaste for it, is far better on Windows than Mono is on Linux or Mac OS.
I've had Eclipse run for weeks without restart on all three of the major desktop operating systems. I've never, ever heard of anyone having this mysterious 24 hour problem, with suggests a problem somewhere in your specific circumstance. Generalizing it to the entire JVM is a bit ridiculous.
The RFC doesn't specify behavior for what happens when the runtime is supposed to gracefully exist from within a try block, so what makes you think that exiting from within a try block doesn't trigger a finally block? 
None of this matters for long-running server-side applications.
Like I said, it's fine if it's already spun up on a single-purpose server (cluster) (in this case, long-running server-side applications). However, let's not forget that a big chunk of PHP's popularity came from Facebook's persistent use of it - if it goes JVM (and thus in a big part Java on the server side), it will contribute to the prolongation of its lifespan.
&gt; If you want to do both mac and windows right, you're going to be doing it twice. ^ this, well said
I should clarify, by "appeal to Windows based developers" I meant "appeal to Windows based users". But the point remains, what is the point of developing once for three (or more) possible operating systems, if the product is going to be twice as slow and/or twice as cumbersome to use? You're basically reducing the awesome-level of your software in exchange for not having to develop it more than once, for more than one platform. I'm not trying to say all Java desktop apps are totally crap, there is certainly a place for them. But that place is not heavy lifting monolithic software suites like IDEs. And of course java is an awesome back-end for web applications.
The version you reference is included in ColdFusion and some other packages. The JVM that's issued for windows (with standard Java or J2EE or Jetty or Tomcat or whatever container you choose) is now HotSpot. I still prefer JRockit but Oracle has been moving to combine features from both, which basically is going to make an inferior JRockit (because of the hotspot runtime "optimizations"). A couple modern JVMs are listed here: http://www.quora.com/How-many-JVM-implementations-are-there-What-are-their-pros-and-cons 
I agree that Java is sub-optimal for windows development, which is basically intolerant of average Java performance (regardless of the "java can be fast" rabble rousing).
&gt;What was the last Java app you opened that loaded up in less than 20-30 seconds? My main IDE is Eclipse with PHP Development Tools. With an SSD, it starts up and is completely ready to use in 5 seconds flat. I don't see that as being a problem. 
There are more than a few votes against this. Out of curiosity, what are the disadvantages of this merge?
How well does the IDE work for those with visual impairments? What advantages does it provide over say NetBeans....which I could also aford?
You don't use the '$' within the square brackets of the $_GET[] function. It would also be more efficient if you assigned the value of GET variables to local variables, so you don't have to keep referencing the GET array. $cust = (isset($_GET["cust"]) &amp;&amp; $_GET["cust"] != "") ? $_GET['cust'] : null;
Who is Alex Turner, and why should I care what he has to say?
&gt;Not to mention the problems OSX has with managing memory when JVM is active. First off, facebook doesn't use macs. Second off, OS X is piss poor as a server. This is an operating system designed for users, not serving sites. Even if your idea that it performs poorly on a mac is true, it is still irrelevant in this context.
The JVM is not Java. Java compiles to JVM bytecode. Facebook will make PHP compile to JVM bytecode, just like Scala or JRuby. Not PHP -&gt; Java -&gt; JVM. This is a good move. The JVM is wicked fast, way faster than that the PHP interpreter. They have millions of man hours invested into JIT/hotspot compilation. A better garbage collector. Like HipHop, you won't see wide-spread adoption as it has a niche user-base (really large sites).
&gt; But since Java is typically compiled to bytecode that is run on the JVM, they kind of cannot exist one without the other. Um no. The JVM can exist perfectly fine without Java. It doesn't *need* Java to exist. This is why you have numerous languages that compile into bytecode like JRuby, Jython, Groovy, Scala, and Clojure. Also, Java compiles into dalvik bytecode and runs on the dalvik-vm as well. The JVM and the language Java are separate.
PHP to C++... + ?
Thanks for the clarification, edited original comment to reflect my misconceptions.
I think the issue is in your double if in the first line. Also, you need quotes strings, not variables, as keys to the $_GET array (unless your variables $cust and $fn are set prior to this bit of code). Finally, you're missing some closing semicolons. Try this: &lt;?php if ($_GET['cust'] == 'yes') { echo $_GET['fn'] . ' ' . $_GET['ln']; } else { echo 'Customer'; } ?&gt;
Too lazy to try it myself... what would the following code print? function test() { try { return 1; } finally { return 2; } } echo test();
&gt; What was the last Java app you opened that loaded up in less than 20-30 seconds? Netbeans. Launches in about 10 seconds on my machine. &gt; Not to mention the problems OSX has with managing memory when JVM is active. Try leaving a Java app open for over 24 hours in OSX and then try using it. You'll have a blast. If your OS has issues keeping a JVM running for &gt; 24 hours that sounds like a bug with the OS, not Java. &gt; I would love to be proven wrong, though, so if you have any responsive and snappy Java apps to show me that don't get stuck after 24 hours of continuous use, I would love to give them a go so I can stop preaching antiJava. Sure. How about Tomcat?
Yes, engineers I've personally encountered and engineers at huge FOSS organizations such as Apache or VMWare. The tendency to abstract and abstract and abstract things is just frustrating. One random example is: org.springframework.ws.soap.server.endpoint.AbstractFaultCreatingValidatingMarshallingPayloadEndpoint Ah, yes, Annotations. A lovely to way tack on 25 lines of configuration before your class declaration because Spring or Hibernate sucks. Yes, it's better than XML, but it doesn't fix the core issue. If you note at the bottom I said "Java can be an amazing language" but to the popularity at ~~degree farms~~ universities the behavior I cited rings true. To the end, I absolutely agree with you, I just think Java has a substantially large share of extremely shitty engineers due to a strong focus on OOP and Java being the de-facto language.
&gt;DOM, DOM XML, SimpleXML, XML Parser, libxml, XMLReader/XMLWriter, etc. It's all the same shit. Most certainly not. They each perform reading, writing or manipulations on SGML (or XML specifically) in different ways. I do a *lot* of XML work in PHP, and I mostly use DOM, but there are cases where DOM was just too strict to work, so I had to fall back to another extension. Could they be consolidated? Maybe some of them. But not all of them, or even most of them.
Seriously, I would suggest trying something like the reference glass fish app server and put load on it using jmeter. If that chokes up that there is a JVM bug. Open Office, and Eclipse use a lot of native code wired in with their JVM code and are not nice to memory. I am not sure about the other two you mention. But it does seem to me that you might be in a bad luck streak because all the programs you mention are not the sort of thing which is designed to stay open for 24 hours non stop. If you were having these problems with java server stuff (where it excels) then I would be much more concerned.
&gt; Yes, engineers I've personally encountered and engineers at huge FOSS organizations such as Apache or VMWare. The tendency to abstract and abstract and abstract things is just frustrating. Exactly my point. You can't generalize it to all engineers. &gt; One random example is: org.springframework.ws.soap.server.endpoint.AbstractFaultCreatingValidatingMarshallingPayloadEndpoint And for that random bad example, there are other good ones. So it's not a universal truth. &gt; Ah, yes, Annotations. A lovely to way tack on 25 lines of configuration before your class declaration because Spring or Hibernate sucks. Yes, it's better than XML, but it doesn't fix the core issue. If you have to tack on 25 annotations to your class or method then there must be something wrong. I've rarely had to tack on more than 2 or 3. &gt; If you note at the bottom I said "Java can be an amazing language" but to the popularity at degree farms universities the behavior I cited rings true. To the end, I absolutely agree with you, I just think Java has a substantially large share of extremely shitty engineers due to a strong focus on OOP and Java being the de-facto language. I completely agree with you. I call those engineers "cookie-cutter engineers" because they all know the *same* basic stuff but **nothing** outside of that. If you ask them about data structures or polymorphism they will rattle off definitions but very few of them actually know how to code. It so happens that right now Java is what is mainly being taught in colleges. In 10-15 years it would be language X and the conversation would be about how so much code in X is so bad :) But yes, there's a lot of shitty OOP code out there written in Java. 
No prob! BTW- I do agree w/ your original point (although unrelated to the OP), that Java on the desktop is a terrible experience. 
Great language, great language.
First, Dreamweaver is a WYSIWYG, not an IDE. IDEs are not nearly as derided as a WYSIWYG is, although there are still differing opinions on whether the extra features are worth the weight. A few PHP IDEs would be Eclipse, ZendStudio or PHPStorm. Second, Dreamweaver is crap and he is wrong. The "wizards" are probably things like a GUI dialog for adding an image tag that prompts you for the URL, size, etc., and then makes the HTML. It would be useful for someone who knows absolutely nothing about web development, but anyone who has the slightest interest in learning properly would find it cumbersome and unneeded.
SublimeText2 is amazing, use it almost exclusively. If you want a more full-fledged IDE check out PHPStorm or Komodo.
Because I know C and how to read the patch. I've participated in the discussions (this point was explicitly brought up). I've played with this feature prior to it being proposed (when it was in discussion phase). Additionally, I know how `exit()` works internally, and it would be a very large engine modification to get exit() to execute all of the `finally()` blocks in the stack... I understand that the RFC doesn't indicate such, but the code definitely does. 
I second sublime. Also checkout gitbox, it is simple enough to get you started with git.
Hmm. I'm not sure I see *much* use personally for this. Guaranteeing that you free network resources (or just memory / resources period in C) is the main usage I've had in Java. In PHP I tend to use a DB connection so that's a possibility although I don't really write the sort of app which is under the load for which PHP's 'self-kill' at page-end isn't good enough. Are there any other design patterns where finally is useful? Also: is anyone else having issues with the link (SSL_PROTOCOL_ERROR).
Completely agree with the article. Up until recently the biggest reason why people have been against declaring random functions is polluting the global namespace. Now we can simply have: namespace Vendor\Utils; function awesome_sauce() { ... } I guess the main issue is getting your PSR-0 autoloader to load non-class files. 
same error on the link. In all the excitement they must have overloaded their SSL instances of apache because http://www.php.net still works 
Change your file-name convention to YYYYMMDD.txt and the ordering approach will be substantially easier. Once you do that: $files = glob("*.txt"); usort($files,function($a,$b) { return strtotime(substr($b,0,-4)) - strtotime(substr($a,0,-4)); }); print_r($files); 
Don't like it? Don't use 'em. Some of us have to deal with very large PHP code bases and features like `finally` ease the pain just a little bit.. `finally` isn't for code reuse it's for code clarity when handling exceptions and ensuring that resources are gracefully cleaned up. In-band error codes (return codes) without multiple return values is not ideal and `finally` is just a way to properly leverage the exception support in PHP5.
How many languages from 15 years ago had package managers that you access libraries written only for C? Back in the day many libraries, such as imagemagik, where not bundled with PHP. PHP even had [dynamic loading](http://php.net/manual/en/function.dl.php) abilities. But both those things turned out to be terrible to work with in practice. It's a big library of functions. No different if you had included all those libraries in a C project. PHP doesn't even have strong dependencies on then; you can choose what you want build in. Building in everything, however, makes the most sense. 
Flash.
PHP has huge legacy issues; pretty much all the big problems with the language are the result of decisions made over a decade ago. But the absolutely massive integrated function library made of existing C libraries did give PHP a big advantage early on. Python is much older and it made no progress in web development during those early years. I have this subreddit in my list still even though most of my work is in other languages. For the most part, the problems in PHP are minor and my work isn't terribly different across different languages and frameworks. Getting back to this topic, the addition of finally shouldn't at all be controversial. I think it's a mistake to lump in the core function library with the actual syntax of the language -- they are two different things. 
I will have to check that out. Thanks!
I remind you: `Don't like it? Don't use 'em.` is ***NOT*** a valid argument, and it will never be. You could approve of every single feature with it. (I won't comment on the rest, just pointing this out.)
For Windows I'd recommend [NuSphere PhpEd](http://www.nusphere.com/products/phped_features.htm). Runs natively and feels like Visual Studio. I particularly like that it uses its own debugger/profiler DBG which is far better than XDebug. They offer a [free accelerator](http://www.nusphere.com/products/phpexpress.htm) which boosts performance significantly in my testing. Has its own web server for people too lazy to install one. Yada yada yada. It's not free either, but its worth checking out if you develop on Windows or are comfortable with Wine. The only thing I feel it lacks is Git integration though you can sort of fudge it with macros. And their phone support was... weird. And they took a month to respond to an email. Actually two emails. But the situation was resolved eventually.
I hear you, and I agree. It's too easy to fall back on it when trying to deal people arguing from ignorance. My rephrased retort would be something along the lines of "It's OK to have a feature that isn't applicable in every situation."
And yet I wish they had more, because I hate writing if( stripos('string',$variable) !== false){
(Just a few) things PHPStorm does better than Dreamweaver or SublimeText: - [Code completion](http://www.jetbrains.com/phpstorm/features/index.html#PHP_code_completion) - [Visual Debugging (like with Xdebug)](http://www.jetbrains.com/phpstorm/features/index.html#Visual_Debugger) - [Profiling](http://www.jetbrains.com/phpstorm/features/index.html#Profiler_integration) - [PHP5 Language Support](http://www.jetbrains.com/phpstorm/features/index.html#PHP_54_Language_Features_Support) - [PHPDoc Support](http://www.jetbrains.com/phpstorm/features/index.html#PHPDoc_support) - [Version Control](http://www.jetbrains.com/phpstorm/features/index.html#Version_control_systems_integration)
I store the salts in the database next to the passwords. I also use a pepper which goes with the password in the function but is a global 'secret' existing on the file-system. The pbkdf2 function I found looked relative simple, it's found on php.net though that doesn't mean much, http://www.php.net/manual/en/function.hash-hmac.php#109260 for a non-expert like me, it looks solid enough.
No.
&gt; finally isn't for code reuse it's for code clarity when handling exceptions and ensuring that resources are gracefully cleaned up. } catch (e){ do x do cleanup y } catch (e2){ do z do cleanup y } Finally is for code reuse finally { do cleanup y } . Finally has nothing to do with "graceful" cleanup or code clarity.
Hey, regarding the port bind, I would check if you have skype, it usually binds at 80. I don't use Windows as a development platform, but that is what usually happens. The second error, is on the phpmyadmin config, the config.inc.php would have a root password that isn't working. Did you try using the mysql shell using the password that you defined for root ? Edit: if you can post your config in private, we can go to pastebin or something like that, and please, do not use the root account if you are intending to put this in production. 
It is Skype that is conflicting. That's why I changed the port. Apache starts fine now that I've changed it. However, phpmysql wont allow me access. &gt;Did you try using the mysql shell using the password that you defined for root I'm not sure what this means. I'm new to PHP &amp; MySql and. My level of knowledge at the moment is that I can publish a site that uses HTML, CSS &amp; Javascript. I'm trying to begin learning PHP &amp; MySql but I cant even get them functioning so I can start.
PHPed works better via wine than Netbeans does natively. That's how bad Netbeans + Java are.
Look into [iCalendar](http://en.wikipedia.org/wiki/ICalendar). Basically it's a standard data format for dates, recurrence and the like. It's pretty widely supported across multiple platforms and there are a few third party PHP libraries floating around for it as well. http://phpicalendar.net/ http://bradym.net/php/creating-icalendar-ics-files-with-php/ 
You can stop skype using port 80 by going to Tools&gt;Options&gt;Advanced&gt;Connection&gt; and uncheck 'Use port 80 and 443 as alternatives for incoming connections' I feel your issues route from you changing the port.
this is incorrect. the finally block will _always_ execute after the try /catch, even if there is a return in the try catch. Here's an example in JavaScript: &lt;http://jsfiddle.net/P87yd/&gt;
Destructors do run when calling `exit()`.
http://www.apachefriends.org/en/faq-xampp-windows.html#password1 &gt;**How I can set a "root" password in MySQL? (method 1)** &gt; &gt;The easiest way is to use the security console, which you can access at http://localhost/security/. &gt; &gt;This "console" creates a password for the MySQL user "root" and is adjusting the phpMyAdmin configuration. &gt; &gt; **How I can set a "root" password in MySQL? (method 2)** &gt; &gt;With the"XAMPP Shell" (command prompt) you can also change the password. Open the shell and execute this command: &gt;mysqladmin.exe -u root password secret &gt; &gt;Of course, your password should not be "secret", too. In the next step you must adjust the phpMyAdmin configuration for this new password. In the file "\xampp\phpMyAdmin\config.inc.php" change the lines: &gt; &gt;$cfg['Servers'][$i]['user'] = 'root'; &gt;$cfg['Servers'][$i]['password'] = ''; &gt;to: &gt;$cfg['Servers'][$i]['user'] = 'root'; &gt;$cfg['Servers'][$i]['password'] = 'secret'; &gt; &gt;Instead in the XAMPP Shell, you can also change the password with phpMyAdmin, and then adjust the phpMyAdmin configuration.
Thanks for the reply. The reason he uses the cloud as opposed to installing locally is because "it's easier". Easier from the standpoint that he won't have to help students configure LAMP/MAMP/whatever. My school is not exactly top tier [2 year community college] and a large portion of the classes are fresh out of high school students who are too hung over/stoned to know what the fuck is going on or 30-50 year old people laid off from a large local factory who may also meet the aforementioned criteria. Long story short, they don't really know what they are doing and the instructors in my program spen a large portion of their time helping students who "don't get it". In my command line/registry class, there were people who took over a week to figure out how the Windows copy command worked to copy a simple text file from My Docs to the Desktop. Some people just aren't cut out for the academic life...
Oh yeah :) I love that, right? "Need a clone of reddit. Budget 30-250. Need someone dependable. Future work possible" Idiots &gt;.&gt;
My site uses Redis, and I have some legacy code that expects database #0 to always be the currently selected database. I have some newer code that uses other Redis databases. Because the newer code is working along side the older code, the newer code always has to select database #0 when it's finished, to ensure the older code isn't "querying" against the wrong database. I can write code like this: try { $redis-&gt;incr("foo"); } catch (Exception $e) { $redis-&gt;select(0); Logger::error($e); } $redis-&gt;select(0); Or I can use a finally to write code like this: try { $redis-&gt;incr("foo"); } catch (Exception $e) { Logger::error($e); } finally { $redis-&gt;select(0); } I currently use [this finally hack](http://athos.blogs.balabit.com/2011/02/try-catch-finally-in-php/) to accomplish that goal, but would much prefer an actually finally block.
This sounds correct. I'm pretty set on not using Dreamweaver at this point, I'm just wondering if I will be able to keep up with the rest of the class. When he tells the class "create this button that does this action" he may have them use a wizard for that, at which point I will have to figure out how to actually code it. Challenge accepted.
As a note for OP and others, this can literally be done by adding ?v=1 to the inclusions for the style and JS, it's treated as a separate URL to =2, =3, etc when caching.
Dreamweaver? Seriously?
Not exactly a good example, considering if Logger::error($e) returns or exits then the second code is not equivalent, or if it doesn't, the first code at first glance is more confusing; its a new language construct so some people will not know it, having it indented in most cases means "do one of these" (if, switch, even try since catching means it failed at some point to finish the first part), whereas finally means "always do this". I consider the second code much better for your example, and marginally improved for the examples in the link. 
Please think twice before doing this. Many proxies and corporate firewalls handle caching of content with query parameters in the URL so that it will likely never be cached, or the wrong version may be displayed. Instead I prefer to use something like styles.[timestamp of mtime].css for example.
Pretty sure this makes browsing anything useless, since showthread.php?t=8304984 and showthread.php?=483983 would come up the same.
Yup, that's their original library that has a lot of issues.
Your instructor has probably never left the walled garden of Dreamweaver. Someday, an employer will sit you down in front of a text editor and tell you to write up a program. Dreamweaver is OK for learning/beginning web design, but it does fuck-all beyond that. 
You definitely will, as long as you cover some basics beforehand on your own. Keep in mind though that DW might insert some extra code alongside those buttons and layouts - CSS mostly, to place them exactly where the rest of class drags them to. If you'll be evaluated based on having the exact same code in the final task as the rest of class, that probably won't work out so well. I've had university professors that simply refused to transfer to modern technologies only out of fear of not knowing them by heart like they do the software they've been working in so far. I've had bosses like this too, and let me tell you, there is nothing more discouraging than being "taught" by a carriage driver in this modern world of cars, if you'll pardon the analogy. I say just go for it - show him it can be done as easily in any modern IDE/Editor. A large part of the class will probably also consist of FTP and remote servers, as well as editing files directly on the remote location, so I suggest you get familiar with that in whichever editor/IDE you choose.
[Here you go](http://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/)
PhpEd is nice but it doesn't support any of the new features that are available as plugins in many other IDEs: yml, twig/smarty/whatever, are two examples off of the top of my head.
That is way too complicated. You really just want: * [serialize](http://php.net/serialize) * [file_put_contents](http://php.net/file_put_contents) * [file_get_contents](http://php.net/file_get_contents) * [unserialize](http://php.net/unserialize) Then to save it, just use: file_put_contents('filename', serialize($data)); Similarly, to read it back in you can use: $data = unserialize(file_get_contents('filename')); Of course you'll wanna add proper error handling, like the file not existing, etc.
Yup. I was going to say the exact same thing. If you have access to json_encode and json_decode, you could also use those and the file would be a bit more readable. 
[This should help.](http://bit.ly/NywGMb) Research is good, and this is a subject you should definitely read up on. Especially if you're using this to release a product that other people will use and depend on.
I'm pretty sure it has Smarty support. But regardless I agree that NuSphere really should include syntax highlighting/intellisense for more document types. Or at least give users some way via plugins or whatever to add support themselves. I think adding this and a plugin interface and Git support would bring them out of obscurity.
When working with php, most people start with 'dynamic' websites. In this regard I can agree with your professor recommending something like Dreamweaver because of its WYSIWYG. He's not interested in teaching/debugging your html code, he's trying to teach you php. Manually create a table in html is a hassle for people who 'aren't cut out for the academic life' and he probably doesn't want to deal with it. That being said, if you're up for the challenge, you can get by with something like NetBeans without any major issues. Chances are, the parts you'll need help on will be the HTML bits anyways and there's plenty of tutorials on that.
Good point, just because I might not be able to use it now, doesn't mean I shouldn't check it out :) Thanks for the advice!
Sorry, i dont understand still, why not do try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { Logger::error($e); } $db-&gt;disconnect(); thats even less then try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { Logger::error($e); } finally { $db-&gt;disconnect(); }
you can convert the tags to the html format, look here: http://www.ascii.cl/htmlcodes.htm like turn all &lt; to &amp; #60;
Yeah, these look like standard POST/GET examples, nothing fancy. You will definitely be able to build all this in any text editor, but unless you know HTML well it'll be faster just to drag and drop it from a WYSIWYG editor. I guess the final question is - what do you want to get from all this? If you want to learn PHP, don't use DW and make it an effort to learn HTML right now so you'll be ready when time comes (it takes a couple days tops). If you just want to go through the class and get it over with, then go with DW, follow instructions and forget everything the moment you get graded, then proceed to learn whatever actually interests you.
This can be done with HTML Entities: http://php.net/manual/en/function.htmlentities.php
I've always said: if there is an else-if, consider using a switch. I think Kernighan/Ritchie say that in one of their books.
I like switch for the stacking. /me nods @joellarson. The "fall through" you can get is nicer than if/else statements as far as readability goes, plus I think it's simpler to write when adding in new priorities. Plus, since you can put function calls as case items it's just handy. (Just be sure the function actually returns a value of some sort.)
I haven't used WAMP but I can't imagine anything easier than MAMP. You literally just run it. 
I already have it set up...was quite easy [although it was even easier on Lion].
Thanks :)
Good Idea. Thanks. Didn't think about that.
heh, yeah my foundations are definitely ZF, which is pretty much exactly what you see there.. I've mostly moved to the world of python frameworks lately, though. That said, this sort of pattern is pretty standard across frameworks.. you have a form which has one or more fields, and your fields have zero or more filters and zero or more validators.
Why do I feel as if I've seen this post before? Yes, there's a point to it, and no, it's not equivalent to an if-statement. This post is completely superfluous as you could easily have found the information by performing a simple google search. Frankly, it doesn't warrant an explanation. You can read about it for yourself: http://en.wikipedia.org/wiki/Switch_statement
If you want an easy way to set up the stack on Mac I would suggest [MAMP](http://www.mamp.info/en/index.html). It should automatically set everything up properly for you and allow you to start / stop server as you require.
Already done sir. =]
Or any number of a million other options. json_encode / json_decode, for example.
It does, for 5.3, not the most recent version.
When you get into bigger projects, text editors simply get lost in the clutter. I work on several 10k+ file projects and without proper project management and the assist tools that modern IDEs like PhpStorm offer I really wouldn't be able to work. Although PhpStorm is not free for commercial projects, here's a review of it anyway in case you're interested: http://phpmaster.com/phpstorm-review-and-give-away/ Basically, it comes down to managing your clutter efficiently - you need solid autocomplete, you need more detailed syntax checking, and you need code reformatting and refactoring on a project-level, not only file level. Not to mention visual version control integration and graphical diff included in the IDEs is a priceless feature to have when working in teams, especially telecommute.
The example I gave wasn't very good.. This is more realistic. try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { $db-&gt;disconnect(); Logger::error($e); return false; } $db-&gt;disconnect(); return true; Or possibly: try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { $db-&gt;disconnect(); Logger::error($e); throw $e; } $db-&gt;disconnect();
&gt; I much rather return and handle the disconnect based on a complex return object or disconnect on any return. Can you explain that or give an example?
wheres the finally command?
A lot of it can - I have used ST2 on my travels to conserve battery and laptop resources. The plugins handle most things nicely, there's even some that add functionality like "move line up / down" (albeit buggily) which, by now, is absolutely essential for me. If you don't intend to go into professional php development on large scale project, I'd say ST2 is more than a decent companion.
Functionality wise it works but code wise I did not like it that's why I rewrote it in the first place. It seems like they accept requests from any developer who does a pull without checking the code.
It would look like try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { Logger::error($e); return false; } finally { $db-&gt;disconnect(); } return true; or try { $db-&gt;query("SELECT * FROM foo"); } catch (Exception $e) { Logger::error($e); throw $e; } finally { $db-&gt;disconnect(); } 
Dang I feel for you - writing an app that must work round that sort of mess. I completely see how it arises - those optional link parameters on mysql_query :/ Long live OOP mysqli. I do think this kind of fits with the idea I was making earlier - you're doing DB resource cleanup even if that's a little screwy sue to the situation you're in. Does anyone have any experience of 'pure' PHP logic based stuff which uses finally?
No, it's not OK to strip the real data without a solid *business* reason for doing so. To do it because you're afraid of having HTML tags in the output...that's not a business reason. IMO it's a sign of incompetence and a lack of foresight. **Consider:** If you strip data coming in to the DB, then from that point you're going to assume it's safe. And you're almost certainly going to print that "safe" data straight to the browser without encoding it first. At which point all i have to do is find the one spot where you forgot to strip tags, and i can get my script tags and such on every page. That one little hole...and every one like it? They're all now *huge*. If you encode the data as you print it, though, that same data that caused such a problem before is *expected* to be raw. Since we encode the outgoing data, though, HTML would be harmless everywhere except the couple of places you forgot to encode. That's a much smaller area than "the whole freaking site". :P Add to that...if you always print out *exactly what was entered*, the field becomes visibly non-magic to users. There's no reason for Marketing to assume that they can do some dumb stuff like sticking HTML tags in usernames. Added bonus: you get to ridicule them for trying. :)
Because the database should be storing the data, not some half-assed rendition of it. Add a short named function to encode the data, and it's not a big deal. Seriously, something like `_($data)` is not exactly going to break your fingers. And yes, you should be at least a bit paranoid about data in the DB. It *is* to some degree still user input, after all.
You need autocomplete and the ability to "click into" functions, instead of having to navigate through your files. There are definitely some things you can do with just a text editor, like prototyping of HTML layouts, but as soon as you import any PHP framework, there is suddenly tens of thousands of lines of code, even if your actual project is very small. I think a lot of people who say IDEs are bloated don't understand you can remove all those pesky buttons and panels, in Aptana, it's as easy as double-clicking on the current tab, and you get this view, which frankly isn't far off from Sublime Text 2, but with a lot more features: http://i.imgur.com/zcgxP.png
Unless, say, you're "preparing statements" consisting of your cobbled-together self-built SQL query with data already in it, expecting them to do some kind of magic safety thing. Or unless you have a query where...i dunno...the "sort by" field is selected by the user. Prepared statements normally can't accept identifiers as parameters, so it's back on you to escape the name properly. Or *you can end up with an SQL injection.* ***With prepared statements.*** There's using prepared statements, and then there's using them *fully*. Where you use them fully, they help. A lot. But they're not a silver bullet; there's cases where you simply can't use them to the extent that they'd prevent SQL injection, because the injection's already potentially there before the statement's even prepared.
I will give this a look. Looks interesting. I suppose my OP was a bit off base...my problem is with Dreamweaver, not with IDE's in general. I am looking mainly for a CLEAN solution that isn't a resource hog. Edit: Installed Aptana, seems pretty good. Uses about half the RAM as Eclipse, but still over 100MB. Not too bad, I will have to check this out more for sure. And more to your point, debugging and code completion are definitely plusses, but these are things I think can be done in Sublime Text with plugins. Either way, thanks again for the reccommendation!
*I assume you mean for each of those catch blocks to be for a different exception type. Otherwise I'm sure you know only the first catch block would run.* This is kind of a cool old school approach that's more suited to funcational programming, where you're likely to pass a resource around from function to function. Disconnecting from the database outside of a doQuery method of a database class would not be such a great idea, as it breaks encapsulation. The doQuery() function also needs to catch every single possible type of exception that *might* be thrown, which would probably mean always catching the Exception type. Otherwise you risk an exception being thrown by the function, and you're not catching them on the outside. Once you're always ending all of your try...catch blocks with an Exception catcher, you might as well just use finally.
lol. Yes, actually that is where I began. Oh, but let me add something . . . [spoiler alert] . . . [the use case](http://www.reddit.com/r/PHP/comments/y6iga/what_are_best_practices_for_sanitizing_user_input/c5t3q0k) is a little different than the generic sanitization advice.
This isn't a profanity API. A profanity API would generate random strings of profanities.
&gt; because you have to anticipate all possible catch blocks This is the wrong way to look at exception handling. Code should throw often and contain a small number of catches. A finally block just allows you to run code when the stack unwinds due to an exception. And it's normally used to provide cleanup for anything that might have been done in the try block before the exception is raised. It's perfectly reasonable to have try/finally without a catch. The alternative here is that you simply don't get to run any code during the stack unwinding at all. 
I find it immensely useful to implement database connection management in a singleton.
Like I said. You're a solo developer. If you code consistently, but it's consistently not the way the rest of your team does it... You're being a jerk.
This again? We've already been through this. If you're building the expression yourself, i.e. adding the data to the SQL directly, then that's not utilizing prepared statements (aka **parametrized** statements).
On the flip side, I know plenty of programmers who can hold great arguments and seem to know a lot, but totally fail at coding. Similar to computer scientists that can't code.
&gt; The very concept of prepared statements is precompiling a statement to bind data to it. The very concept of prepared statements is precompiling a statement. ***Period.*** Whether or not you use parameters. Whether or not you, say, use a variable as the field name. *Whether or not you've already suffered an SQL injection from doing so.* &gt; GO READ THE REST OF THE THREAD YOU _\&lt;i'm a potty mouth!\&gt;_ &gt; &gt; We (as in the people of reddit) has been over this. I did. And what i've seen is you -- and pretty much *no one else* -- repeating that same thing about being "immune", and arguing with anyone who calls you on it by...oh...by saying it afreakingain. Guess what? Saying it over and over doesn't make it sound any less naive. In fact, it makes you sound a bit dogmatic and unable to respond with anything but stock phrases and insults.
Not even going to bother reading your bullshit responses anymore. You're obviously just here to troll.
I've been working as a programmer for almost 2 years and have noticed this quite a lot. It does have it's downsides though. Someone who is better at communicating than they are at programming can, as [anarchy8](http://www.reddit.com/user/anarchy8) said, convince you that what you are doing is wrong and that they know what they are talking about, when in fact the opposite could be true.
You're not very nice are you ? Maybe not everyone knows about this.
&gt;You're not very nice are you ? What an awful thing to say. &gt;Maybe not everyone knows about this. Posts like these doesn't really inspire any conversation. They're utterly useless. Let's leave the posts to stuff which are actually useful, such as new changes to the language, developments and help posts. Basic language features do not need to be posted on. It merely lowers the quality of the community. Furthermore, traits has been reported on thoroughly when it was first announced. It's no longer news.
This "design pattern" also allows you to provide an interface in a library (configuration managment) and give default behavior but still allow for strict type checking on method parameters without breaking the main inheritance chain which is not possible using only traits. This is more of a combo of two language features. Also I was using modules (which are basically traits but more flexible) in ruby long before php had traits. The concept is not foreign I was just experimenting with combining language features and found a neat combo which could be useful to some peoples.
Tnx for suggestion. Will rewrite it.
Last four digits of SS number just doesn't have enough entropy in them. Just only salting and stretching won't help you much. You need another server or hardware etc. to do the actual hashing. This another server contains a secret "local parameter" which is used as a secret input when doing the hashing. In other words, your app server must not have access to this local parameter, but your app server sends the SS number to this "key server" (using a secure channel), which in turn returns the final hash (and now you app server can store/compare the hash etc.). You could store and operate per-hash salts for each SS number in you app server (as already recommended), but make sure the secret local parameter can not be never directly reached from your app server (or any other server at all). The "key server" could receive SS number and a salt associated with it and perform hashing using this information plus the secret local parameter (which only the "key server" knows), could be initially somethig as simple as: // $local_parameter can be versioned, say, 128-bit crypto-strong random number. // You can also stick some kind of "version identifier" to the hash, // to make it easier to know which algorithms was used etc. $hash = $version_id . '$' . hash('sha256', $ss_number . $salt . $local_parameter); There is no need for stretching, since the initial entropy is too low. But the hashes should be safe as long as your "key server" stays untouched (only your app server has a limited access to communicate with the "key server").
I like to see use-cases in OOP with patterns. Traits examples in combination with Singleton is real word scenario. In many blogs and even at php.net we can see simple examples, this is different and better approach for non-beginners. ircmaxell : Why you don't like examples with Patterns and OOP ? msvrtan : You are on the right track, keep up. 
I have not moved away from programming being just a hobby of mine, but recently communication has proved to have been of great importance for me. This kinda scared me at first, since constant communication has prevented me from working on my personal projects and have been forced to spend more time communicating concepts and issues. However, it has made me realize that it is simply the icing on top of the cake. It makes the whole project more manageable and fun. Kinda like writing long reports at school, find it quite enjoyable. At the end of the day, you learn something new by being criticised and ridiculed, which has proved to be of great importance in my field of interest, database architecture and design. You don't make mistakes here.
I am not sure that I would trust uniqid for that. The documentations doesn't explicitly guarantie randomness, only uniqueness. Also, the md5 step is kind of pointless, since it will actually decrease the randomness (md5 is not injective).
Looking for people to work with on a group project.
C Super Plus
 &gt; The ability to say `DB::getInstance()` (rather than, say, `$app-&gt;getDB()` or `$GLOBALS['db']`)? &gt; If you're so sure there will only ever be one, why not just go all the way and make it a static class, and not need an instance at all? Because my singleton can wrap around a PDO instance. I guess that's about it, really. All of my DAOs are static.
I crash and burn! But seriously, for a basic webapp, you rarely need more than one, and were I building something more than just a basic webapp, my connection management would not be a singleton. IMHO, it's a matter of choosing what's appropriate for the task at hand.
If you want any half decent PHP developers to take you seriously, you should make use of that description box up top. Details, designs, concepts, ideas, pay, ownership, etc. should all be listed or at least what you can without giving your entire concept away (assuming it's something new to the web). 
I can't wait for the day that I meet them. lol
I disagree. Real getters and setters allow you to do what you like with the data and make it conform to your will. They are also easier to test with unit tests (essential), and make for much clearer, more verbose code. I try to keep away from using these particular magic methods.
Isn't PHP packaged with SQLite now? Seems like that would be a better solution than Gladius.
This is the pattern I prefer and I honestly don't see what you can't do with this that you can do with "real" getters and setters. http://emr.ge/classes/ActiveRecord/__get/ http://emr.ge/classes/ActiveRecord/getValue/ http://emr.ge/classes/ActiveRecord/__set/ http://emr.ge/classes/ActiveRecord/setValue/
But say you want to take an email address, and throw an exception or return false if the email address is not correctly formatted, then say you have a rule about how a name should be formatted (you want to capitalise the first letter and leave the rest lower case), then you have a different rule for say a person's post/zip code etc How would you do all that checking using magic methods? I also don't like the idea of being able to dynamically set anything at run time, because I consider it hard to test for such things. If at a later date you decide to add a bunch of new fields on a certain page and then another few more pages end up relying on these new fields, what happens if you forget about the dependency at a later point and end up breaking stuff? It'd be really hard to debug. I just prefer stuff to be clear and upfront from the get go. A nice set of unit tests will ensure that you don't introduce regression errors when updating things, and it's all so much easier to do if you're not relying on unpredictable 'magic' methods like that. 
Silly, but awesome. I'm impressed. Lots of rules I'd never even thought about trying to program before. 
I understand your reluctance but this class isn't designed for interacting with the client in any way. It does not access $_GET, $_POST, $_REQUEST, $_SESSION, or $_COOKIE in any way at all. The only dependencies is the database class and the framework's Site class which houses a small utility function called prepareOptions. This function could easily be part of the main class. Again since this class isn't designed for interacting with the client there's a separate controller class that wraps around the model and provides CRUD functionality with higher level validation: http://emr.ge/classes/RecordsRequestHandler/ http://emr.ge/manual/controllers#4
Dreamweaver will help out a *lot* with quickly getting a user interface going. That's probably the number one benefit of it.
You should have just forked his repo and made the changes.
I about stopped reading after "When I first started my journey to become a professional programmer almost **2 years ago**".
in what way would a class help?
You know what I just realized, because I did locate that $naughty variable, but I was still having the problem because I have elements that are modified with style attributes. I will have to look again for that line. Thanks though!
What duplicate code would a class eliminate?
holy crap that is a horrible solution.
I thought this was about an actual versioned database, not another schema manager. 
Yeah, that's a good point, 5 times in 5 seconds (or something similar) and you're on the bot list! Gonna remember that :)
Thanks for the link, looks usefull :)
Why do they acknowledge that "When we develop an application on a local machine, it’s easier to make changes directly in MySQL than creating changelog files for each change" But then instead of providing a feature which can convert MySQL statements into a changelog (which might have been useful), you have to go through this ridiculous process of backing up and restoring your database, then comparing them. 
This is just plain bad. If you're using PHP, you'd be better off to use [Doctrine for migrations](http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html) (my personal fav) or something similarly mature and less hack-ish.
I don't think it matters what language your database migration tool is written in, whether you use DoctrineMigrations or Rails Migrations. I also prefer to write the actual table creation/alter statements in my migrations myself so I see exactly how the table will be created.
[The Zend Framework. That's the answer.](http://framework.zend.com/)
Well my point is, if they've set out to make a tool which is designed to make is easier to manage schema changes, then why add to the workload by requiring you to do all this changeset stuff in addition to the DDL you just want to add. (and yeah, I do realise this would mean adding different support for MySQL compared to MSSQL etc). Maybe there's already existing tools to generate the xml from DDL, but if so, I dont know about them.
LiquiBase supports many DBMS like MySQL, Oracle, PostgreSQL etc. So for each of them you don't need to use/learn different tools. Its not uncommon that developers use different DBMS while developing different applications. When creating more generalized system there is a trade off between what I need and what most of the peoples need. It may not fit or will be a overkill for our simple requirements. But we can use it in any cases. 
Awesome timing, thanks for posting. Reminds me of the .NET WSDL web interface (.asmx) that lets you test SOAP calls.
If your looking to study a application to see how it works a framework is a poor choice. It is like asking for somebody to show me a well made sandwich. Instead of showing me a sandwich you just made you instead show me the topping available in the cabinet at subway.. Yes they will make a great sandwich I still do not know how it should be assembled.
I found it easier to install Virtualbox and an Ubuntu VM. You can set it up so the important directory structures, etc. exactly match what's available on your hosting solution.
I'd like to point out, if you're looking for a really good example, look at Zend 2 rather than Zend 1. The constructs are more modern.
That's what I got from the question too, that this was about a completed application. Still, that doesn't make a lot of sense either though because I ask myself.... what KIND of application?
Poor analogy. It's like somebody asking how to make a sandwich and then showing them how a Subway shop works. You'll learn how to make the sandwich AND how to prepare the ingredients. Have you studied the Zend framework at all? Trying to be a pedant and pointing out the semantics in the name leads me to believe you haven't.
I fully agree. Also take a look at Fabien's Sismo project. This is an actual application he uses. https://github.com/fabpot/Sismo
Well then I definitely feel bad for the rest of the class, because they use Win7. =/
What do you expect? Look at the post history of anyone that links anything from phpmaster.com and you'll see they only have their account here for shameless promotion. Only rarely does a random person submit something from phpmaster. EDIT: I was going to reply to zaemis until I saw that he was exactly the type of poster I was talking about with 14/22 links submitted being from phpmaster, and only 8 comment karma in 8 months clearly his purpose here is promotion.
I would like something like this as well. I have this book: http://www.amazon.com/Beginning-PHP-MySQL-E-Commerce-Professional/dp/1590598644/ref=sr_1_2?ie=UTF8&amp;qid=1345132864&amp;sr=8-2&amp;keywords=php+ecommerce It is an entirely oop ecommerce site built from the ground up. However, not being well versed in OOP design I cannnot vouch for the quality of the code. It might be a good start though
No books; use the net. The reason for this is that you'll be referencing sites and other programmers on the web for the rest of your dev career so you should get used to it. There are a plethora of tutorial sites out there. Go find'em!
but there's lots of bad advice and outdated examples out there. Can you mention a few trustworthy resources?
This is my personal experience, and if you are willing to relocate, this would be my recommendation: Move to the NYC metro area (I would imagine out in SF it's very similar). I'm within a 25 mile radius of NYC. Went on 4 interviews upon graduating in 2009 and got offers for all 4 jobs with competitive salaries. I continue to receive e-mails on a daily basis from recruiters and HR managers looking for developers in the area. The job I took right out of college (Job A) had me for 18 months before the company I had my internship with (Job B) stole me back. 21 months later, Job A stole me back from Job B at a 20% salary increase. Not sure what the situation is like in other parts of the country/world but in this corner it's not so bad for us developers.
Murach's PHP and MySQL. They have examples with the use of HTML and CSS, so you're good to go.
Or just use Chrome, and view the Network tab which shows all requests. No real need for a proxy 
ideally you would have a bbcode type function, sanitize on the way in to the db and run through the function on the way out
As a non-UX guy who got dumped in the UX deep end, I found Bill Scott &amp; Theresa Neil's *[Designing Web Interfaces](http://shop.oreilly.com/product/9780596516253.do)* a good basic introduction and an even better reference work. It describes different interface elements in detail--how many milliseconds do you pause on mouseover before you launch the tooltip? that kind of thing. There isn't any code, just description of interface elements.
thanks, I was actually subscribed to their youtube channel :)
Hey good on you or writing tests!
This was the book that helped me learn a lot of what I know [http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0672329166](http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0672329166) It's probably considered somewhat dated with all the current obsession with OO, MVC and "unzip and run" web apps. I'm not sure though as I had the first edition, years ago. But it is one of the best PHP books out there for beginners.
In this case you should store it in a second column in the db. Processing the BBcode with every display is horrible.
Or just use Wireshark, which is meant for packet monitoring.
&gt; If it's only intended to be displayed on a web page That's what you think right now. &gt; Ultimately it's up to you to do what you think is best. There is no "best practice." Bullshit. Separation of data and views is a rather fundamental lesson.
There is no such thing as a best practice. Just because you believe something is best done one way (MVC is not the only way development should/will ever be done) does not mean that is the only way that works or that it's "best." As long as the code you write is clean, efficient and bug free then there is *no* wrong way to do it. If everybody conforms and only does what other people think is best, then there are no innovations and no new development paradigms. But yeah, just blindly do what everybody else does and then come on reddit and circlejerk about it, if that's what works best for you. I won't be one to judge.
This is completely unrelated to PHP. What is this post doing here? * [Don't Make Me Think](http://www.amazon.com/Think-Common-Sense-Approach-Usability/dp/0789723107) by Steve Krug. * [Rocket Surgery Made Easy](http://www.amazon.com/Rocket-Surgery-Made-Easy-Do-It-Yourself/dp/0321657292/ref=pd_sim_b_2) by Steve Krug. * [About Face 3](http://www.amazon.com/dp/0470084111/) by Alan Cooper.
[Don't Make Me Think by, Steve Krug](https://play.google.com/store/books/details/Steve_Krug_Don_t_Make_Me_Think?id=g1QBFJxB_eEC) This is a fantastic book, highly recommended.
"Best practices" do not preclude innovations. Usually, there are many ways to solve a problem. Often, several of those solutions are generally accepted as being inferior to other solutions; thus, we have best practices. Innovation is inventing *new* ways of solving a problem. Using an old broken way is not innovating.
Packet monitoring is a bit extreme for just seeing requests made in the browser, I would recommend just using Tamper Data or HttpFox for firefox, or using the Network Tab from Chrome, as carpii mentioned.
Try putting `exit;` after the imagejpeg() at the end of the if statement. You've got blank lines after the ?&gt; that are probably corrupting the image.
&gt; mac address checking on the server side No, no they don't.
You should look into bitmasks... (on the phone, so no ~~soup~~ link for you...)
This is an interesting idea. I will look at ways for allowing this.
Bismasks are for managing user roles in the application. I'm talking more about storing that user data in the database for different user types.
Could you give some examples?
&gt; used codeigniter auto clears data.
This should be in /r/webdesign
Your way is probably more efficient, if you have a high transaction rate. If you want to be as agnostic to the data as possible, you could have a key/value table alongside your user table: **user** * intUserID * strUsername * strName * ... **user_meta** * intUserMetaID * intUserID * strKey * strValue 
Or simply look at Yahoo's [Best Practices for Speeding Up Your Website](http://developer.yahoo.com/performance/rules.html), which you can test for automatically using [YSlow](http://developer.yahoo.com/yslow), which is an established tool for these sort of things. Also, I don't see anything which pertains to PHP in that post, so it makes me wonder why you submitted it here.
Its not hacky. Denormalization is what you do to a database. Its common to join the user to another table (or several) based on a user ID.
This looks like the party system from the "universal data model". I would link to it but on my phone. 
What you've got is a 'discriminator column' - it's a common pattern in the Hibernate world. Whether you think it's hacky or not may be beside the point. Knowing there's a term for what you're doing can often help you find more info on the pros and cons of its usage (and the comments here may have helped too).
Ah yes. I never thought about this and it does seem like it would scale pretty well. You could essentially have all the fields in the user_meta table including username and password.
As I mentioned up top, i'm not talking about user access levels. I'm talking storage/retrieval of user info from the DB where different types of data needs to be stored about different types of users.
Well for the isValid, I mean conventionally it should be used to check true/false then do something in it. Like if ifValid() return false, then do another function that appends the errors to the render(). I'm not sure if it makes sense as I'm going through this with logic rather than relooking at your code, but that's what would make most sense to me. :)
Ah thanks, i'll take a look at that.
Yes but I'm joining to another table, and that table is based on the value of a column. So not a standard join, more like a dynamic join. That's why it feels hacky, maybe because i'm mixing the model and the data.
Won't help with https.
Implementing __call in every class to support this would be terrible. If you're injecting dependencies already, just code to an interface. If your object has a dependency on the interface and you only use the methods defined on the interface, you will never have issues with undefined methods in production.
If you feel the need to catch calls to undefined methods in PHP, I think you need to reexamine your architecture.
You could make your function append something to the end of the string it returns.
Thanks for the comments.These are all good ideas. I will certainly be implementing multiple validators per field and the ability to render fields individually or out of order. 
Nvm. I'm not sure what I changed, but I eventually managed to get ini_set("session.hash_function", "whirlpool"); working. now my session ids are a longer length that is much more noticeable. like 7KCDQkmnf7-QLeknnyQieRR1JDTzzBhdZpYg3kdYPrXSZ57HCI,GwtzVAqfyiPYvZUXKkPXcEhT2AKinKgNSv3 ljdra5jWfBC-86b7lw1SAcvRk,SidHRcXuzDEodrFGEjvfo,J,BWKohnhr2rKGyqF7iv,3lMaleKkDT3vxLE23 tkX,7LzAposUrOsw1RcxbVZ2wt,Jqcb662ZfMzNPqC3j-,1qYVIQUBZueL0OTR672wx1Uk0LQypMPd40gNvf,0
It's called [Role Based Access Control \(RBAC\)](http://en.wikipedia.org/wiki/Role-based_access_control) if you're interested. There are numerous articles about it, as well as more robust data models out there on the internet if you're interested in expanding your system. 
This is a data model called [Entity-Attribute-Value](http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model). (EAV) It's what the Zend Boys love to use. 
EAV
Check out webid. You can configure that to 'buy only'(not an auction) and I think a percentage for the owner is easy to set up. It's free, too!
__call() is really useful in some cases - particularly if you're defining classes that may require dynamic methods, such as in the case of an ORM. Implementing it in every class is pointless though.
Oh wow, I completely skipped over webid when searching around as I was sure I had looked at it before and thought it was rather expensive non-OS. DERP!
The other solutions here are complicated because they require you to: * Decode the Javascript to send the right arguments, * Deal with persistence (cookies). You can write a bot using [Mink](http://mink.behat.org/) which controls a real browser. Now this code was written for the purpose of integration testing websites, but there's no reason why you can't use it to create a bot. You can the full power of Webkit and you've saved yourself a load of hassle. If you're worried about needing a desktop environment for running a browser, then don't be. There's a few headless solutions on offer ([ZombieJS](http://zombie.labnotes.org/) and [PhantomJS](http://phantomjs.org/) come to mind) PS. You can go further and use [Mink](http://mink.behat.org/) with [Behat](http://behat.org/) so you can write your bot "scripts" like this: Scenario: Login and then logout. Given I am logged in as "user@example.com" And I am on "/logout" When I press "Yes please" Then the response status code should be 200 And I should not see "Account Settings" _The "Given I am logged in" step is a custom one._ 
I seem to remember something called ilance from back in the day. I don remember pricing but i remembered it seemed like a decent software. I hope that helps
Depends. For content management systems, HTML in the DB is just fine.
Thankfully its not - 35 employees. He had me worried. 
Organization really needs to start at the planning level, before anywhere else. Use a bug tracking/management software such as [redmine](http://redmine.org) or [trac](http://trac.edgewall.org/) (there are others) to keep what you need to do organized, and to create milestones for yourself. A milestone is a selection of features, tasks, and bugs that you want to finish within a given time period. Tickets you enter should start out as general if you're adding something to remind you that stuff needs to be done, but should be broken down in to component parts before you add that ticket to a milestone. Make it a rule that you do not touch code without first filing yourself a ticket, and that you do not touch tickets unless they are a part of your current milestone. Also, create a regular release cycle for yourself where features come out of . Some people like 2 week release cycles, some shorter, some longer. You'll have to decide for yourself what sort of timetable is good for you. I agree with others when they say follow up on re-factoring opportunities. This goes a long way. However you want to put refactoring of specific things in as tickets also, so that you're not spending so much time on refactoring that you're getting nothing else done.
I'm going to start using version control and unit testing soon. 
Someone would post a link on reddit to something that they've written and/or find interesting!? Perish the thought! ircmaxell better stop posting his blog entries. philsturgeon better stop posting his blog entries. instapunish is getting cranky! * http://www.reddit.com/r/PHP/comments/xr7ra/writing_a_restful_web_service_with_slim/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/xtu7g/an_article_on_phpmastercom_on_how_to_generate/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/re3w3/continuous_integration_with_jenkins_part_1/ - not submitted by the author * http://www.reddit.com/r/coding/comments/rw9kq/using_explain_to_write_better_mysql_queries/ - not submitted by the author * http://www.reddit.com/r/coding/comments/q2rid/observer_pattern_publishsubscribe_pattern_in_php/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/ps6u6/autoloading_in_php_and_the_psr0_standard/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/sgbio/an_intro_to_virtual_proxies_part_1/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/tyyzi/using_spl_iterators_part_2/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/qnd6g/taking_advantage_of_phps_builtin_server/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/s2dbt/bulletproofing_database_interactions_with/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/odvec/zend_job_queue/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/ps6u6/autoloading_in_php_and_the_psr0_standard/ - not submitted by the author * http://www.reddit.com/r/PHP/comments/qd5k7/working_with_dates_and_times_in_php_and_mysql/ - not submitted by the author Yep, instapunish is right... only rarely will random people find something on phpmaster.com worth sharing. I'd like to apologize for trying to publishing articles that are relevant and interesting to PHP developers. 
I miss a short 'motivation' as why to read this. What is Laravel, can you give a 10-code line example of what it does and why it is useful?
http://laravel.com/ &gt;**A Framework For Web Artisans** Laravel is a clean and classy framework for PHP web development. Freeing you from spaghetti code, Laravel helps you create wonderful applications using simple, expressive syntax. Development should be a creative experience that you enjoy, not something that is painful. Enjoy the fresh air. The documentation is great, but you might find the bullet-points in this section particularly enlightening if you're looking to get an idea about what makes it different. http://laravel.com/docs#laravel-is-different
the laravel documentation looks comprehensive on first glance, but very incomplete. for example there are no docs for helpers. the documentation for unit testing does not address routes so you have too look at the source. its not perfect sure, but development seemed to have stalled or something..
I recently started using Laravel to write a new version of my company's proprietary CMS. So far it has been a pleasure to work with. I don't care much for the Blade templating system, but the Eloquent ORM is orders of magnitude easier to work with than Doctrine. The routing engine is intuitive, and the whole thing is fairly lightweight.
Great question! Upvote for taking the time. Firstly, excellent work identifying the problem. I often find when I have the right question the answer is obvious. Second, thank you for being brave enough to put your question out there. I find that *asking* the question, especially in public, saves a hell of a lot of time. So, on to the meat &amp; potatoes. Coding before you have every detail worked out isn't a sin. No matter how good you are you will always be learning something new. Start by writing more comments. I like to write the comments to describe what I'm trying to do and then fill in between the comments with the actual code. It helps me get my thinking straight. I love using autodoc comments so all my methods are nicely explained and my poor old brain doesn't have to try and hold it all in my head. I have a tab open to php.net all the time while I'm working on a site. When I was 15 I didn't know the methods existed. When I was 25 I knew them all by heart. Now I'm 34 and all I remember are the method names, I have to look up the syntax for all but the most common stuff. (On the other hand, I'm now fluent in speak 6+ computer and two human languages, so it's a trade off.) Don't worry about reusable functions, they'll happen on their own. "Hey, I can put that other code I already wrote in a method and call it from here." Some of my methods are only a few lines long. Each method I write encapsulates one idea, one atom. I give each one a highly descriptive CamelCase name. Sometimes I find the wording of the method name is the same as the comment I wrote. That's about the only time I'll skip a comment for redundancy. Use version control all the time. Nothing sucks like finding out you went down a blind alley and you have to rip out a week's worth of work. Commit after every new feature. Writing a description for your commit that does 5 new things is ... awkward. Use bug tracking. New features go in there, too. Anything on your todo list goes in there. I want you to be able to turn off your screen, walk away, and let yourself *not think about it*. Go enjoy life! Work on your business plan, talk to that girl, whatever. If you have to remember shit all day long while doing something else it's like a process on your server that never times out, it just keeps eating cycles and haunting you. It's the mental equivalent of [dangerous juggling](http://www.youtube.com/watch?v=CRPpLmoia6U) all day long. When you're planning to write some new feature, remember the [Golden Rules](http://www.robinsweb.com/inspiration/golden-rule.html). Write your mysql_query(), your mysql_free_result(), then the part in between where you use the query results. Write the pair of braces {} before you write what goes inside and you'll never lose track. There's an old saying, "When you're 90% done, there's only 90% left to go." Where you want to stop and where it's done are two very different ideas. When I was younger I'd think "oh yeah, just snap these few parts together and it's done" only to discover that there was a whole world of bug fixing, usability tweaking, "oh shit we forgot something important", "can you add one teensy weeny more thing?", and the ever faithful "This is not what we asked for. Your vision and ours are completely different. Redo it." (This is one of many reasons you [always have a contract and stick to your guns.](http://vimeo.com/22053820)) By far the best thing you're doing is always learning, always looking for the most efficient way forward. I don't mean "efficient for the server", I mean efficient for you. Planning a giant engine or framework so you can save time at some mythical point in the future? Time you could have spent billing your client. Using an untested thingimajig because you hope it will save time? Gonna have a bad time. Taking an hour to automate a task you might do 20 times in the next year? Hmm... depends. I wish I could keep writing about this but I have go bike to the store before they close. AMA related and I'll answer it tomorrow.
Why? Applications are architecured so some things can be independent. I'm not saying that this is silver bullet but why should request die in pain if there is a missing method but not if there is a missing property (only warning)? 
&gt; Well what I lack in experience, I make up for in enthusiasm Good luck. Tab closed.
"Stop making frameworks, Ruby is better because everyone rallies around Rails, if you're too stupid to understand symfony's DI go play with Wordpress." From memory, of course.
Yeah that pretty much sums up what was there. 
I created the site today.. it really isn't meant to do anything more than it does right now.. maybe I can find a better way of making it look, but the idea is raw text goes in raw text comes out.. no fancy UI .. nothing, quick and easy. (maybe a copy to clipboard button for the URL).. suggestions .. thoughts? Thanks
I started off as a procedural style PHP developer.. just small things with loops and if statements in the HTML.. I then started learning the OO side of it and found that it was very easy.. and there is just a ton of help on the internet for just about anything. I have since graduated to C# for big elaborate projects but still love my PHP for anything web driven. Today I was board and decided to make a simple paste bin website like imgurl but for text.. I have a need for it for remotely hosted text for another project I'm working on. Anyways in the stretch of 4 hours I was able to stand up a database, develope a schema, implement a business layer and minimal UI for a proof of concept. It was a fun project to excessive my brain with PHP since I haven't used it in a while. Now I am shamelessly trying to promote it to see if anyone might find it useful. If you would like to see the source for it all, I'd gladly share it. http://txtbin.us
Nope, not stalled at all. In fact, they're releasing v4 soon.
I'm going to try and make one like that! Thanks for the idea!
Under what circumstances would your code attempt to call an undefined method? I hope you're not executing any user-submitted requests directly.
There is one thing I would add, especially as a lone wolf developer - don't worry about being perfect in iteration 1, 2, 3 or more. Simply getting the job done and working is often 'good enough' to test whether the site works as a concept. Once it's working, things are going well, traffic is on the up, then refactor IF it's worthwhile to do so. What I'm saying basically is that if you have a site thats complex, a bit spaghetti but it's not worth your time to refactor for refactoring's sake, then don't. Spend the time working on your next project, and implement what you learned there instead. I have personally found that trying to get it all completely oop etc from iteration 1 is a recipe for frustration. In the early stages, to me at least, it's simply more important to get the product 'finished' and out there, than worry about whether I could have done function blah in 10 lines instead of 20. 
Of course not. Most often when adding new feature to some class I add new methods to some classes that are being injected in but not all :( Lets say I have a small component for giving thumbs up/down on article and product detailview page. After adding new feature to that component I did add needed methods to article but forgot/didnt know that products also use same component. Yes I know I should have added interface 'votingXy' and could then locate those classes easier but if I forgot it this stunt would have started throwing fatal errors everywhere. Not only here but everywhere. Of course having 90% code coverage and running unit tests would prevent this from happening but this was not the point of the post. 
Using an array to pass parameters defeats a very important purpose of a method or function signature. Readability for the user of the function, without having to read the code of it.
Idea of post was to see it there is broken logic about throwing exception instead of getting a fatal error. I hate the idea of adding __call to base classes all around but I see it as a quick and dirty fix for possibly broken PHP behavior. 
I personally prefer using myFunction($arrParams = array()) as it's neater. However you'll still want to enforce default values and required fields. Here's my solution to that. Check out _default() and _required() below: class Photo { public function resize($options = array() { if (!self::_required(array('file','widith','height'), $options)) throw new Exception('resize() requires file, width and height parameters'); self::_default(array('width'=&gt;800,'height'=&gt;600)); // do code here, making use of a sanitised $options $result = ImageCreateTrueColor($options['width'], $options['height']); // ... } /** * _required method returns false if the $data array does not contain all of the keys assigned by the $required array. * * @param array $required * @param array $data * @return bool */ private static function _required($required, $data) { foreach($required as $field) { if (!isset($data[$field])) return false; if (isset($data[$field]) &amp;&amp; ($data[$field] == '' || strlen($data[$field]) &lt; 1)) return false; } return true; } /** * _default method combines the options array with a set of defaults giving the values in the options array priority. * * @param array $defaults * @param array $options * @return array */ private static function _default($defaults, $options) { if (is_array($defaults) &amp;&amp; is_array($options)) return array_merge($defaults, $options); } } $photo = new Photo; $photo-&gt;resize(array( 'file' =&gt; 'coolstorybro.jpg', 'width' =&gt; 1920, 'height' =&gt; 1080 ));
Why do you need three arguments? I'd *generally* rather compose operations in some other way e.g. `$f-&gt;red($param1)-&gt;green($param2)-&gt;blue($param3)` or `$f-&gt;fun(red($param1) + green($param2) + blue($param3))`, but it might be helpful to see a more clear example of what you're thinking.
Problem with this code is that if I want to use your class to resize and image I have to either check the source code of the class or the documentation to know what to pass into it. That's a severer disruption of work flow that could be prevented by simply making the function resize($file, $width, $height) Arrays have their uses, but using them to obfuscate a function is a bad use.
I usually use setters with one param and fluent interface. Makes things easier for unit testing.
I agree. If you must pass in a data structure that would be too large for a list of parameters then an object can be the best solution (unless you are specifically passing in a list of ints or strings or something). This way you can check if the object is what you are expecting (if (get_class($Param) == "className")), now you just have to make sure that you are using a class that actually has an interface that has been enforced properly with the right data inside. I personally end up passing multidimensional arrays a fair bit but it's usually data that needs to be iterated over and displayed.
I know. Google. Soon. &gt;supposed so bossy.
You definitely can set defaults with an array. function set_defaults($input, $defaults) { $data = array(); foreach ($defaults as $d =&gt; $v) { $data[$d] = isset($input[$d]) ? $input[$d] : $v; } return $data; }
That looks way more complicated to decipher than any other suggestion in these comments
Good advice. The only thing I disagree with is comments. You should write code that explains itself. When you need to write comments, it means your code is not self-explanatory enough. // fetch user info Should probably be a `fetchUserInfo` function.
Yes you make a good point. Modern IDE's (Komodo/Net Beans) will solve this by pulling through the comments as you auto-complete but that is not an ideal solution for all cases. After reading some of the comments in this thread the better solution seems to be [define a class](http://www.reddit.com/r/PHP/comments/yfa8a/whats_the_best_way_to_do_this/c5v0ze3), much like a struct and pass that to your function e.g. resize(ResizeParams $options). This seems particularly useful if your function has a lot of params.
Good idea, thanks
I completely agree, and this is also the reason why I don't like the over-use of closures.
No, but that's because of a complicated method not because they didn't use an array. Shit code is shit code regardless of whether you pass it explicit parameters, arrays or objects.
I would only use an array of parameters if there are optional parameters, such that you can do 'x' =&gt; 'y', 'z' =&gt; 'a', etc. instead of $x, $z, $etc. I think that would be more readable (at least in most cases) than myFunction('y', , 'etc');
I would rather merge defaults in the function like: Function test($params){ $default = array( 'var1' =&gt; 'a', 'var2' =&gt; 'b' ); $options = array_merge($default, $params); // continue with $options }
&gt; plus you can't set defaults when using an array You can use: $args += [ 'default_value_1' =&gt; ..., 'default_value_2' =&gt; ... ]; Or even a recursive version: $args = array_replace_recursive($defaults, $args);
Look at the source code?
I think the best solution for that would be to put the filter check in your base controller, e.g.: public function __construct() { $this-&gt;filter('before', 'auth'); parent::__construct(); } To override it except for login, in your login controller, you'd have to do: $this-&gt;filter('before', 'auth')-&gt;except(array('login'));
I find there's a happy medium in between. Explicit parameters are nice, because they are automatic documentation. IDEs parse the definitions, and can use it to provide advice when calling the function. For short argument lists, I keep things explicit. When a function can accept a bunch of *optional* arguments that override sensible defaults, then it often makes sense to stick them all into some container. Imagine you're writing some code that supports some kind of drawing functions (maybe you're using GD, or some PDF stuff, or whatever). You might have a function that draws a line of text: /** * Draw $text into $document * @param resource $document the document to write on * @param string $text the text to write * @param int $x x-coordinate * @param int $y y-coordinate * @param array $opts options for drawing the text * * Valid options are: * - font (default: helvetica) - a reference to a ttf font * - font_size (default 12) * ... (some other options, maybe...) */ function drawText($document, $text, $x, $y, $opts=null){ ... } So, my rule of thumb is something like: if there are more than three or four *optional* arguments, I collapse them into a single $opts argument. Required params never go into such a thing, since they're required, and you might as well be explicit about it.
I had a decision like this a year ago. I decided to use a function with ($param1, $param2, $param3). Now, after going through the hands of 4 different programmers and a year of expanding requirements, that same function call takes 13 parameters. I really wish that I had used an object.
&gt; I only ever use an array as a param when the data is explicitly grouped, such as a list of email addresses. I also group (optional) params into a single (optional) argument if there are more than a handful. This gives your users the benefit of named parameters so they can just pick on to set, instead of counting out "null, null, null, $theOptionIWantToOverride". In other words: myFunc($requiredParam, $requiredParam2, array('some_option'=&gt;false)); is better than myFunc($requiredParam, $requiredParam2, null, null, null, null, false); 
Here's my take on it! Overall time, about an hour. http://testing.apexdigitaldesigns.com/paste/
The array keys can help you keep track of things if there's a large number of parameters. For example, trying to figure out which of the umpteen parameters you skipped.
Some people just want the karma. My goal is to make /bestof as often as possible. Oh and if your method is more than a page long? I'd start questioning your method. Pun intended.
An array should only be used if there are a very large number of parameters or optional parameters -- think cURL. In that case you need to make sure you document everything **very** well, because otherwise you'll wind up with a shit sandwich.
Well, if it is a function which may need to change in the future (expandability/flexibility etc), use a value object, e.g. class Point { private var $x; private var $y; public function Point( $x, $y ){ $this-&gt;x = $x; $this-&gt;y = $y; } public function getX(){ return $this-&gt;x; } public function getY(){ return $this-&gt;y; } public function toString(){ return sprintf( '[ %d, %d ]', $this-&gt;getX(), $this-&gt;getY() ); } } myFunction( Point $p ){ echo $p-&gt;toString(); } otherwise myFunction( $param1, $param2, ... ){ } is fine
The call doesn't match the declaration in argument or type (non-static and static) so that's not a great example. Also (as an aside), personally I'd add Content as well as the additional class (you can do multiple class CSS e.g. .class1 {background: #00000; font-size: 10px;} .class2 {font-size: 12px;} &lt;div class="class1 class2"&gt;&lt;/div&gt; will have a black background and 12px font. Passing large blocks of text in strings is also bad practice in my view. Personally I designed my system so I'm not passing much. Stuff from the database are built into objects. I mainly pass objects and string params. Options are set into the output rather than passed at render time. The biggest problem with both array and value approaches is the tendency to mis-order parameters and be at risk of bad data input rather than catching the error. Associative arrays solve the problem, however they don't look at the reason why you are passing the data in a group. Normally this group is an object which has defaults and properties of it's own. Creating class can remove duplicated code from elsewhere as well. Mostly it's because you're actually passing related data to the other items which if redesigned would eliminate them. In the system above there's only Content + 1 actually, so it's not a big deal. 
I prefer passing an associative array. It makes the function more future proof, because you aren't going to have to fix a bunch of code that throws a missing parameter error wherever the function is called.
While I do agree, I seem to recall from the documentation that PHP doesn't use overloading in this manner Edit: [PHP's interpretation of "overloading" is different than most object oriented languages. Overloading traditionally provides the ability to have multiple methods with the same name but different quantities and types of arguments.](http://php.net/manual/en/language.oop5.overloading.php) PHP uses the magic methods to accomplish overloading, while most other languages do it with the same function name and differing numbers and types of parameters.
"The call doesn't match the declaration in argument or type (non-static and static)" I might not have explained this well enough... in my dbObject class i have this function: public function __call($Method, $Args){ //Copy this object to the args array $Args = array_merge(array(&amp;$this), $Args); //Call php function to call this function call return call_user_func_array($this-&gt;Table.'::'.$Method, $Args); } This calls the static constructor in Content when using the dbObject... As in static function Content::View(dbObject $Content, $Options=array()) is called from dbObject-&gt;__call(string $Method, $Args=array()) The class option I passed in wasn't really the only example I should have given, these can also be objects or arrays...
Your URL fragments aren't case sensitive. e. g. http://txtbin.us/LCG1Gt and http://txtbin.us/lcg1gt Assuming this is MySQL and your table is called *pastes* and the field is called *paste_url* you can fix this via: alter table pastes modify paste_url char(6) character set latin1 collate latin1_general_cs;
nice catch thanks... I thought about that .. but forgot to test it.. Fixed
doctrine's dbal? It supports mysqli and pdo, but not mysql.
I was just trying to show a case where you might have a long argument list where the order and number of arguments is not important. In those cases a single associative array might be easier to read than many params. A better example might have been: searchUsers($username=null, $address=null, $age=null, $dateCreated=null, $phone=null, $category='someCategory'); vs. searchUsers(array( 'category' =&gt; 'someCategory', )); 
I'd avoid using cURL directly, since not all servers are going to have it, and there numerous things with cURL that you have to worry about. Personally, I'd leave it to a library such as [Guzzle](http://guzzlephp.org/) or [Requests](http://requests.ryanmccue.info/). (I'm biased towards the latter, as it's my library. ;) )
Datfeel.png Hopefully it gets better. I normally take out a pen and paper to take notes on the side if I need to or try to graph how different pieces interact with each other. I try to mentally run the code as I'm sure everybody does. There isn't much you can do if another programmer thinks in a different way, you have to adapt and get into their mental frame. I think reading code if often harder then writing it because like you said, another tries to be clever or is a much more advanced programmer than I am. This is all very frustrating often but it can also be very rewarding. There's not enough stress on documenting though but there's not any real way to enforce it.
Darn - I had hoped for "pretty" solution like Route::anyExcept('login', array('before' =&gt; 'filter', function() { auth... }));
you could cache results. all depends how much html is needed as well, if its just simple stuff or going in to more complex tags.
break it down line by line working out what each line does
So how would the payment provider store the details? And what about any other type of details you want to be able to store securely but retrieve (in a readable format) later? I guess my question is if there is any way to store something securely but with the ability to read it back later somehow, preferably without actually hard-coding any decryption keys?
&gt;I agree completely, but honestly I code like a 5 year old. Simple, nothing "clever". :) That's how you're supposed to code. To quote Leonardo Da Vinci: &gt;"Simplicity is the ultimate sophistication."
When trying to get into a large object oriented PHP application, it is often hard to know what variables and objects actually contain during a request - I often perform a print_r() or Zend_Debug::dump() of variables followed by a die() statement. Then I add a comment of what the object contains, check its functions if necessary and continue on to the next row.
Print_r() is pretty useless if you don't know what variables are available. get_defined_vars() and get_defined_constants() would be the first step.
similar to what gchucky said, but with slightly less code, just add this to your base controller (base.php) and it'll force auth on all controllers extending Base_Controller with the exception of any 'login' methods: public function __construct() { $this-&gt;filter('before', 'auth')-&gt;except(array('login')); parent::__construct(); }
Why not just use [google](https://www.google.com.au/search?q=php+user+management+system)? Honestly, a user system is such a basic component of most service systems these days that I wouldn't expect there to be much that are "stand alone". They'd all be part of something else. You can have an extremely simple user system, or a very complex one with dynamic properties and role-based ACL. Moreover, they're likely to be specifically customised to the needs of your own overall system and integrated. And they're not that hard to write. Secure is just following good security practices, which you should know anyway. Why not just use a CMS' user system, like drupal 7's? Also, all the frameworks you mentioned *are* likely to have existing code or components to A) make it very fast to write a system and B) follow correct practices while doing so. http://www.hotscripts.com/category/scripts/php/scripts-programs/user-management/
That sounds like a very roundabout and inefficient way of mimicking what Xdebug does. [Maybe you should look into it](http://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/)?
For functions and methods with more than 4-5 parameters, I usually go with a parameter array. I usually provide a default parameters array at the top of the function for defaults as well as a reference for the parameters. function foo ($params = array()) { $params = array_merge(array( "param1" =&gt; true, "param2" =&gt; false, etc... ), $params); } Clean and readable enough for me, and of course very flexible. When you call this function, you can just copy and paste the defaults and modify them. Missing the interface bit and code hinting in your IDE is of course a big drawback, but then again, a function call with named parameters is clearer than this: foo::bar(true, false, false, true, true, true, false, true, false, true); Of course, an IDE with good hinting can help with that. I'd say it's all down to your coding style, your coding tools and any coding standards you have to follow. Pick one solution and stick to that consequently, and you should be fine. I guess named parameters would be a big help here, but I don't think I've even seen a proposal for that in PHP.
Thanks for the link to Requests, looks like it could end up being very handy for some stuff I'm working on at the moment.
ahh might work now.. had a form with a submit button, but I was using a jquery onclick even to submit it.. changed button type from submit to button. Browser was submitting before JS evaluated the click, a null submit redirects back to the start page.
There is nothing unfair about asking a question. I didn't downvote. But honestly. If you write code with many arguments then you probably need to refactor your code to be simpler. 
I didn't mean the question was unfair to ask. I mean the comparison is a bit unfair. Even if you refactor your code from few function with many arguments, you end up with more functions with fewer arguments. The needs for looking up things in the documentation or source code doesn't really go away.
I like redbean. There is a 'freeze' feature that will prevent it from altering your schema once you roll to production. My only problem with it is that commits cascade through related object. Lets say you have a User object with N Child objects related to it. If you set data in the User object and save a Child, the change to User gets pushed to the DB as well, even though save was not explicitly called
And then once you've finished looking at each individual line for a section, piece those together to figure out a slightly bigger picture. Repeat. I find commenting anything I had to think too much about to be helpful; otherwise, I'll often forget what something was a few minutes later.
If you're running php5.4 you can look into [Aura.Sql](https://github.com/auraphp/Aura.Sql)
I'll second this. The Doctrine DBAL is quite nice, and is maintained wholly separate from the ORM (so no lugging around dead ORM code). Docs are decent. If you can live without the 'mysql' driver (but you've got PDO and mysqli), it's certainly worth evaluating. 
I think you missed the point completely.
&gt;Da Vinci could write things very simply, but couldn't understand what other people wrote? No, that's not it at all. Da Vinci's point was that of Ockham's razor, namely "entities must not be multiplied beyond necessity". To put it in simpler terms, if you could construct a simpler mechanism which performs the same operation than a more complex one, the simpler one would be preferable (e.g. less stuff that can break, easier to understand and repair etc). Now, the same thing can be applied to code. While you can write code which is shorter, that's not always preferable if it is complex and hard to understand. If you can create a solution which is simple, straight-forward, and performs the same operation, then that solution would be preferable. 
Thanks, this is something I have been meaning to do. I run Aptana 3 and can't find much information on getting Xdebug to run there - your tutorial suggests PHPstorm but I'd rather not switch IDEs if possible. Thanks!
Works great now! Edit: and you really don't need jQuery to perform form submits unless you are going to dynamically show an error, and even then at this level it'd just be easier to header()-redirect to an error code (like txtbin.us/?errorcode=101) to display the error, no jQuery needed!
If I'm looking at someone else's code, chances are other people will have to look at it, too. So if something doesn't make sense, I write a comment that explains it for the next guy. ...which might even be me. I can't hold a whole program in my head, I can only do a piece at a time.
I'm not sure what clever code is but if this is in a work place you should call for unified standards and documentation.
Phpstorm :-)
What's the purpose of that? 
&gt; Now, the same thing can be applied to code. While you can write code which is shorter, that's not always preferable if it is complex and hard to understand. Whether code is complex or hard to understand is subjective to the person reading it. Just as with the English language, there are some with a higher level of reading comprehension than others, so goes the same in PHP. As an example, just because I need a dictionary to read Noam Chomsky doesn't mean he is doing it wrong. It also doesn't mean that he should simplify his writing just for the sake of simplicity. So while I do agree that you shouldn't write convoluted code just for the sake of it, if it is shorter code and effective, then the person reading needs to up their reading comprehension, and not expect the code to be lengthened just to be more readable in their case. 
Perhaps you can give an example of where shorter is not simple? I'm actually just curious, because I tend to be from the school of thought that shorter is simpler. PHP short tags, ternary statements, these seem better to me. I'm just curious where shorter wouldn't be simpler? Maybe we are using different meanings of simple. If you write the least amount of code possible to create a solution, that to me defines simple. If simple is defined as greatest chance to be read and understood by a majority of others, then perhaps I could see your argument, but I would say that the burden is on the majority of others to learn to read simpler code :)
Eclipse. 
Netbeans does it. You also need to install a debug extension into php, Xdebug is pretty popular.
I did read it, it was simply irrelevant. You told me I misunderstood you, so I asked you to be clear. Why do you think that is? Because I don't think Da Vinci would have trouble reading someone else's work?
So you say without evidence or example. Prove it.
I speak from 8 years of experience in PHP, kid (and even longer in other programming languages). Shorter is not always simpler. I don't have an example readily available to you, but you could just look at any of those programming challenges which strive for accomplishing something in the smallest number of bytes, and it'll illustrate the point perfectly. Now, you claim that shorter is always simpler. How about *you* prove that. (You'd have a hell of a hard time doing that, by the way).
Just voting for netbeans, I've used eclipse and far prefer beans. No idea about phpstorm. Of course YMMV, but there is only 1 out of 20 devs at work that choose eclipse :S.
&gt; I speak from 8 years of experience in PHP, kid (and even longer in other programming languages). **Shorter is not always simpler**. … accomplishing something in the smallest number of **bytes**, and it'll illustrate the point perfectly. Which is why I said "[symbols and words](http://www.reddit.com/r/PHP/comments/ygqb7/advice_on_how_to_read_other_peoples_code/c5vncyv)" and not bytes. For example, look at [donut.c](http://a1k0n.net/2006/09/15/obfuscated-c-donut.html) -- admittedly obfuscated, but also note at the end the great deal of wastage. In fact, if you run it through GNU indent, even you can see plainly it is easy to remove some unnecessary code - especially noise comments used to pad it out. For another example, look at an IOCC winner, like [the one by Ian Phillipps](http://udel.edu/~mm/xmas/): 771 words "obfuscated", but only 221 words when "de-obfuscated" by [Thomas Ball](http://research.microsoft.com/en-us/um/people/tball/papers/XmasGift/). Since obfuscation is the injection of noise and complexity, it should follow that *de-obfuscation* is the removal of noise and complexity. To that end, here is Arthur Whitney's entire [in-memory SQL92 database](http://www.kx.com/q/s.k) written in K. Since you've been programming for eight years, you obviously know better: Make that file obfuscated and shorter.
I didn't say obfuscated, I'm talking about real code here.
very carefully... -_-
Optimum number of method/function parameters is 0. If your method needs more then 3, it means, it probably does too much (single responsibility principle). More then 3 parameters and it's becoming very hard to maintain. Using arrays is not a solution. And please no Joomla examples as the only example it is good for, it's how NOT TO PROGRAM. edit:typos
&gt;Do I have to instantiate an object within the same file? No, you don't. &gt;But how will the form know what to call? The form doesn't call anything, it merely posts data to the page. It's your responsibility to handle that data. Just grab the right fields in the post data, and deliver it to the login mechanism. E.g. $result = $auth-&gt;login($_POST['username'], $_POST['password']); &gt;And what if I leave everything in another file? Then you leave it in another file. As long as the code is invoked, I don't see what difference it makes. &gt;How will my script know which method to use for which form? That's usually determined by the form's action (that is, the target page of the form) as well as the POST data. &gt;And should the form itself be generated by a method? I've seen solutions which does this, but I'd advice against it. While it does simplify handling error messages and the like, it also severely restricts how you can structure your forms. 
You're treating classes like they're just containers for functions. This is not good OOP. 
OOP is not "a way to handle a login form". It's a design and architectural methodology during the construction of an entire application. If you try to go about doing OOP like that, you'll probably end up writing procedural code inside classes (hint: not really OOP). You're asking "how will x know ...?" questions. Answer: because you tell them. It's your code! I'd suggest you go read the [Java tutorial](http://docs.oracle.com/javase/tutorial/java/javaOO/index.html) on this. Not because I love Java, but because it's a good, generally applicable explanation of OOP, and better/more comprehensive than 99% of any on-the-spot comments a redditor could post here.
Because it could all be in functions without any need for a class, and you'd hardly have to make any structural changes. If that's the case, then yes, you've hidden it in a class, but it's not object-oriented in any true sense. What the heck is a "login" object? For one thing, "login" is not a noun in any sense, so having it as an object hardly makes much sense in the first place. What dudeface_man *is* doing is manipulating a user account, so at the least you'd want to start with a User object. But a whole user and login system is generally not something that can be written easily as a half-page example (at least not without a web framework), so it's not a great example to start off with anyway.
For starters, classes should never access global scope. Writing OOP isn't just for the sake of writing OOP, it's to make every single class/method testable. public function __construct(array $session, PDO $pdo) { $this-&gt;session = $session; $this-&gt;pdo = $pdo; } But this is still bad, because *createLogin* (and probably all login/register functionality) should be handled by a controller action call, otherwise it would instantiate a class (User class in this case) inside a method call, which is bad OOP. There is not a single OOP characteristic in the above example.
I think you need to take a step back to think about what you're trying to accomplish. It's not as simple as "how do I make this into objects" - in this case, you probably want the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) pattern to solve the problem in the typical OO way. Read up on that, and maybe have a look at one of the popular frameworks to see how it's done. [Symfony](http://symfony.com/) and [CodeIgniter](http://codeigniter.com/) are good places to start.
If you use login as a noun and an actual object then fine. Then it's an object that holds a user/password example and which have actual actions such as hash() and does validation on the inputted username. It's not something that creates a user account or even something that executes a login.
&gt; Now how does this process work in ~~OOP~~ a framework? 1. Browser is like *knock* *knock* is "GET http://www.domain.com/post/1 HTTP/1.1" home? 2. Framework hears knocking, "Hey [Front Controller](http://en.wikipedia.org/wiki/Front_Controller_pattern), get the door!" 3. Front controller peeps through eye hole, and picks up a controller. However, the controller isn't loaded yet. 4. Using [namespaces](http://www.php.net/manual/en/language.namespaces.php) and [autoloading](http://php.net/manual/en/language.oop5.autoload.php) front controller readies his response. 5. Door flies open and the browser gets blown full in the face with "HTTP/1.1 200 OK", "Connection: close", a response body full of HTML/CSS, and dies. 6. The end.
you can do something like this though foo::bar( $param1 = true, $param2 = false ... );
I should say that you're missing out [CUBRID](http://www.cubrid.org), a much better alternative to MySQL than Firebird and BerkeleyDB. The great thing about CUBRID is that it provides over 90% SQL compatibility with MySQL. All your existing PHP apps can work seamlessly using the PHP API for CUBRID. All of its PHP functions are compatible with those of MySQL. Very convenient for developers when switching to CUBRID. Check it out, you may want to include it in your list.
Think of OOP like this: I have an object called cup. It has methods Hold_Tea, Keep_Coffee_Hot, Break. All these are actions that the cup, as an solid object, can do. Login is a process, similar to Break for the cup. 
Most of all that information is irrelevant to your initial question. The question you *should* be asking yourself is "Do I *want* to carry on with my current project?" Answer that question, and you'll have your answer.
If it's something you are passionate about then continue to do it, but try not to let it adversely affect your college studies. One thing you may not have realised is: &gt; It is open-source and hosted on Github It's open-source. So get other passionate developers and designers who are interested in a side-project involved. This helps take the workload off you somewhat and should improve design, performance and features with extra minds working on it.
I do want to carry on, since I really enjoy it! I think what I was trying to ask (but may not have done that well) was if it was a good idea portfolio-wise, but at the end of the day, what's the point in stopping a project I'm loving?! Now I have my answer, thank you.
When I do start my course I will ask any friends I make if they want to help out, good idea. I hope someone who is good at design helps out; that's my major weakness!
I think that depends on the types of comments. Comments describing what the code is doing is superfluous. Comments explaining briefly why or pointing to further documentation is great.
I find reading process backwards is more useful. Completely understand a single process even if you need to jump between files/classes to do it. Don't just sit down with a class and look at the methods. The former allows you to see why methods were written - the latter asks you to imagine usage.
This is why during interviews I don't ask "How do you do X?". Instead I ask "What's your favorite way to do X?". It lets me gauge a person's experience. Especially if they answer with different answers for different situations.
So it'd make more sense to make *user* the object, and have login as a function within the user object, and all the user data variables within the user object?
... saving some googles, a "code smell" is a clue that you're doing something wrong.
**tl;dr** It turns out having your framework written in c and loaded as a php extension makes it fast as truck. Other than that, smaller frameworks tend to have faster load times and smaller memory footprints.
You're right I'm [sorry](http://jream.com/learning/videos/php-oop).
It's worth noting that this post is several months old (if you couldn't tell by some of the framework versions). So while it may still hold some relevancy frameworks like Laravel have undergone significant changes. 
A few things. First... &gt; For all intensive purposes My wife says this, too, but its actually "For all intents and purposes." Just an FYI, not trying to be a douche or anything. Moving on. Learning PHP (syntax, basics) isn't hard. Learning which php functions to use at which times, learning any specific frameworks you might use, etc. is what takes time. You can make usable code in the process, but you *will* look back at that code in the future (1 week, 1 month, 1 year, whatever) and ask yourself what the hell you were smoking when you wrote it. There's a saying, I can't remember who said it, that basically says whatever time you think it will take to develop something: double it and go to the next unit. Think it'll take 2 weeks? 4 month. Think it'll take 3 months? 6 years. Obviously, in many cases, this is a bit of an exaggeration but holds a truth nonetheless. IMO, 3 months to develop a game like that, with one person with no experience, isn't realistic. I'm not saying it couldn't be done. However, likely the code will not be good or maintainable, and will likely have a number of bugs and security holes in it. You'll want to test your code. If you use classes and such, you'll want to do unit testing; otherwise you'll need to do functional testing. Either way, automated testing will save you time and trouble later on. I can't estimate how long it will take because I don't know your skill level, the ins and outs of the game, etc. 3 months just sounds like way too little time. That said, don't let any of that scare you away. If nothing else it will be an excellent learning experience. Also, you don't really need to "teach yourself ajax". Ajax is just javascript.
Wow great benchmark, I always wondered which framework I should use for my huge and complex projects. Can someone explain the results a little bit more for me? I didn't get the part where to put the hello and where to put the world...
I work in many languages so i tend to think in the way that works no matter the tongue. in_array and foreach don't exist in most of the systems I work with. You're correct that I forgot the @return, I typed that code in reddit in about a minute and didn't think to 2x check it. Yes, mysqli is the new hotness. I'll be thinking of you when I'm working on the next website for a multinational. Unfortunately, your example is a bit of a backfire. You broke the method. return $leaf is wrong. How do you intend to show good commenting in a method if you've removed all the comments in the method? My style is not like yours because I think about things in a different way. There's nothing particularly egregious about it. To call it "totally awful" and then screw up the counter example... ouch. Maybe less hyperbole next time? Upvote for relevance.
It depends. In a couple months, you can probably push out some 'functional' prototype, that _mostly_ works....but only when run in your local dev environment, with the specific browser that you tested with, and only following the most common code paths. However, it **will** have bugs, and probably lots of them. There will be edge-cases where you'll say, _"oh I didn't think of that!"_. You'll also learn the hell that is cross-browser compatibility. The code will also most likely be a security nightmare, and likewise, it'll have a hard time scaling to support more than a few users simultaneously, at which point the server will croak. Or after a week, your DB will run out of disk space and/or your queries will start taking minutes to run. For you, learning all of this on your own, it could take years. But that's if it's successful, in which case if it is, you should be able to hire out help for some of the more advanced problems.
I completely disagree with you. cURL is among the most common PHP modules that is installed. If your server admins would prefer to rely on user-level variations of existing technology instead of open-source, extremely widely-used and well-tested platforms (e.g. cURL) then you need to find yourself new server admins. That's simply not an excuse for justifying your reinventing of the wheel. You've made a great library that does serve a purpose but suggesting that everyone rely on user-level code instead of modules, for the reason of being "portable", is just absurd. Are you going to implement the MySQL API in straight PHP next so people can avoid situations where php-mysql(nd) isn't available?
Forms can be made into objects to clean up a lot of the code surrounding the request (validation, writing to db). Turning forms into objects isn't necessarily OOP, but it's still very nifty. A simple example of what I would do in Zend Framework for a form submission would be: $form = new Form_Login() if($request-&gt;isPost()) { if($form-&gt;isValid($_POST)) { //code used to log in the user } } In ZF, when the object is echoed, decorators are used to build the html for the object, and the inputs and any validation errors are displayed. Creating these form objects is really handy because it encapsulates all of the responsibilities of the form and makes reusing the form require much less work. You could even add a method to the object for logging in the user so that doesn't need to be redone in each action that it's used. 
100% yes. However, my employer may feel otherwise hahaha Edit: I am technically an unpaid intern. This is my dream job, and I'm loving it, but they really want a product out there, and I'm using that as motivation to go further!
I don't want to have to hire out for more advanced problems, but that might be an inevitability. I realize I will probably get it wrong a few times, and that a lot of what I do now will change in the future, but I'm okay with that. I love what I'm doing =]
Just ask yourself if any of the following apply to you: * I use the project * I enjoy working on the project * The project generates enough revenue to justify itself If you read these and answered "yes" to one or more, then you should continue.
I prefer queuing for better prevention of failure. If I have a script that is supposed to call mail(), but for whatever reason mail() is hanging, the script hangs as well. So if someone attempts to spam with it, it could turn into a DOS issue while the server is overloaded with too many mail() requests. Alternately, I queue each message up, and send them out in, say, 100-large batches every minute or so. This way, if for whatever reason the script wants to send 5,000 messages, it can do so in 50 minutes, and the call to store the data in the db when the request is made is much faster for the end user than waiting for mail() to do its job.
Scumbag Framework-Speed-Test: Spends time loading all the helpers … uses non of them.
cURL has been the fastest in benchmarks I ran a year back and IMHO it's pretty standard part of PHP stack. I don't see the point of using Requests other than that it adds another unneeded layer for cURL interaction and provides a slower fsockopen support. Just my opinion. 
havent really looked into them. I'll check into them now tho... thanks for the links :)
They should test my friends framework http://sonicframework.com. On another note, this seems like benchmarks might be flawed.. requests per second do not mean anything if 80% of requests is an exception of some sort. If for example framework is unable to handle load (open files etc.) it will return exception and will be extremely fast while recording as completed request.
Hi, I'm here for the circlejerk.
I just ran into this a week ago on our customer mailing list and had to rewrite a portion of the system to accommodation a queue system. Apparently CI's mail class doesn't like to send out 1100+ emails over smtp, or at least that's what I ran into. Ended up sending the outgoing list to a pivot table with the user ids and the message to be sent ids then processed via a cron.
He ran one pass of the url to access before benching it, but I'm not sure if he employed an opcode cache. On some later consideration, it's not too worrisome since this is such a feather-weight application that you'd expect the call graph and usage to change heavily, and perhaps the autoloader fade from significance as the framework is actually used to do some heavy lifting.
Some kind of collective effort for a really simple CMS might be more useful I guess : use a db with at least a select with a join, some formatting on the view, some kind of cache strategy etc Not even sure it's possible without endless arguing on the coding style ... 
What you're describing is basically a very minimalist ORM.
Also, Resque, Kestrel, and Gearman are worth checking out.
For sure no, it's an excellent framework for complex applications.
and in 95% of all cases you can apply caching to increase your speed to "basically zero"
~~[W3Schools is a great place to learn HTML, CSS, and PHP (as well as JavaScript and several others).](http://www.w3schools.com/html/default.asp)~~ EDIT: Okay, apparently I'm wrong. I used this to get a basic start on things mainly because the "try it as you go" feature was very helpful, and I've turned out fine so far, but incorrectness at W3Schools is apparently a problem.
Pretty much. Most websites don't get enough traffic that a modest VPS running varnish can't handle it. Every time someone wants to do something which prevents caching I always advise them to think twice.
Yes, but it would make even more sense to have a User and a LoginManager of sorts and you use the LoginManager to see if the password submitted matches the password stored for the given user. This way, the LoginManager can have knowledge about configured hashing algorithms, etc, and the User remains a "stupid" data object.
[No, it is not](http://w3fools.com).
&gt;To start, I have no experience with web development. Don't apply for web development jobs until you have experience. You'll wind up producing crap and your co-workers will hate you for it.
I can has hard?
&gt; Sonic let's you specify
5,620 function calls to render “Hello world”? I don't think that's going to even out no matter what you're doing.
I like how also EVERY fucking example I find for doing trivial shit is so overly complicated that it takes the next 3 hours just to barely get it working. 
Y U NO TEST LITHIUM?
&gt; hello world I winner.
Even though this is blatant sarcasm, I find it shockingly close to the state of over-engineering in PHP.
It depends on your situation, if your stuck on shared host or pay is poor use a database queue, like [Zend_Queue] (http://framework.zend.com/manual/en/zend.queue.html) in an afternoon you can have the job done. Advantages * No extra dependencies to manage. * Work in a shard host environment * Quicker to implement. While the queue won't scale as effectively as the other suggested platforms if your traffic is not going to exceed the capacity of single server your database queue will be fine. 
Scalability could mean different things from different perspectives. You are thinking of scalability from a non-engineering point of view; but that does not mean that it does not apply else where. If you have a low demand of resources at run-time NOW() will function fine but as soon as your load increases you will be having issues with implementation in question. With this interval class you will be successfully handling larger load without suffering from un-cached NOW() look ups. As I noted, caching is the obvious solution but this is not possible or simply is not a requirement for certain applications. And to drive the point further, even if you are caching your application when cache expiration hits you might have multiple NOW() look ups during the application run time and will benefit from this approach while rebuilding your cache. You will also will benefit from this if your cache servers have issues and other cases of cache misses. When I wrote this to optimize one of the largest web sites we saw saw faster cold cache rebuilds and stayed up longer when cache pools were saturated. So it does help and might help you even more if you have a very date intensive application. TLDR; don't write something off because you don't see a benefit of it 
Like this if you came from reddit!
&gt; Scalability could mean different things from different perspectives. You are thinking of scalability from a non-engineering point of view; but that does not mean that it does not apply else where. No. I'm specifically not. Scalability deals with **scale**, queries that cannot use the query cache because of a function call does not deal with scale, they deal with performance. There's no question of perspective here. &gt; If you have a low demand of resources at run-time NOW() will function fine but as soon as your load increases you will be having issues with implementation in question. With this interval class you will be successfully handling larger load without suffering from un-cached NOW() look ups. Yes. Thus improving your performance, not your ability to scale. &gt; And to drive the point further, even if you are caching your application when cache expiration hits you might have multiple NOW() look ups during the application run time and will benefit from this approach while rebuilding your cache. IF cache expiration hit. You assume that only TTL caching exist, but this is not the case. It's not exactly easy but intelligent caching based on invalidation when data is stale is not that hard to do. But okay, lets assume that we use TTL based caching and it expires. Here's what will happen: One query[1] will be sent to the database, lets assume that the data didn't change in the mean time and you get a cache hit. Awesome, you've just saved yourself 0.03 seconds at the expense of having every insert and update slowed down. If the application cache wasn't there then you could start talking cost/benefit of where you'd rather have your performance expense, but in this scenario there's really no realistic way to argue the query cache in useful. &gt; You will also will benefit from this if your cache servers have issues and other cases of cache misses. But at a way too high cost. A situation where my cache servers have issues is rare and it doesn't justify reducing my database write performance constantly. I have not had a memcached crash in the last 3 years. And if you use APC then the cache is in-process and would necessitate a PHP crash, in which case the MySQL query cache is of little use. &gt; When I wrote this to optimize one of the largest web sites we saw saw faster cold cache rebuilds and stayed up longer when cache pools were saturated. So it does help and might help you even more if you have a very date intensive application. I'm really not trying to just be a critic here but it sounds like you just didn't have any cache warm-up code in place? The query cache might have helped you solve the stampeding horde problem but it does so by locking and this is really a suboptimal way to solve this problem. &gt; TLDR; don't write something off because you don't see a benefit of it. I didn't. I wrote it off because I've spent years of my career working on caching techniques for a high traffic site and the MySQL query cache is probably the last thing I'd recommend based on my experience. I realize that working sets and usage patterns are different and require different caching plans, but there really aren't many cases where application caching isn't a better fit. I would only ever recommend the query cache as a temporary crutch if your application caching is poorly executed. [1] You can use the stampeding horde argument but MySQL solves this with a lock, you can do a lock in PHP as well until you have filled the cache.
I wish PHP were alone in this, but I've worked with 'enterprise' Java, and (barely) lived to tell the tale.
cURL is definitely the fastest, because it means you're working in C (and hence, compiled code) rather than userland. The problem with "pretty standard part" is that it's not universal. I've seen the percentage of hosts with it installed vary from 60% to 80%, which is still not high enough to be a dependency.
Every. Single. One. The forums are post after post of "oh god help" sprinkled with the odd post of godawful code and ESL. They give away the software and sell support; that should say something.
I've built in both and also love ZF and hate Magento. Magento is like some bastard step-child when compared to a "real" ZF based site. 
In response to "it looks like an insurmountable task from so far away": Sometimes coding is no different than any other big project. I like to break things down from a really high level first, including (and ignoring deployment, version control, testing, communicating with art studios etc. All of which will take a frustrating amount of time.) * User management. * Facebook API interface. * Notifications. * Cron jobs for processing content when users aren't logged in. * Item management. * Battle engine. I've never built a mafia game, but that's where i'd start. Then I'd try to break each of those down into smaller components, and further down into byte sized, 1-2 hour tasks, and put them on your calendar. Todo lists stay full or are empty quickly, a calendar will tell you how far off your predicted completion times you are. As others commented, a "1-2 hour task" is usually 4-5 hours at best. Just because you can "see" how you're going to it, doesn't mean that you won't be tripped up by some bug, language quirk, or sometimes your code just gets away from you. TL;DR - break your project into tiny pieces, give yourself more than 3 months.
You don't even need to close PHP tag if your PHP file is just echo-ing hello world, you lost.
The WSDL file appears malformed. It's defining &lt;?xml version="1.0" encoding="utf-8"?&gt; twice in the same document, and the schema should not be defined inside the WSDL file (it references the schema via external link). PHP may be having problems properly parsing this.
**&lt;sarcasm&gt;**Oh look teresko is an internet *badass***&lt;/sarcasm&gt;**
Basically this is the default response I've come to expect from the people who don't know anything.
There s no "over-engineering" in PHP. Our main problem is how susceptible the users (i cannot make myself to call those people "developers") are to the latest hype. Instead of studying and trying to become better at programming, they just look for next best/fastest/most-sparkling framework, where you don't need to know anything.
How are those function call maps generated?
yaf framework. Love it.
Yeah? Well fuck professor Xavier.
You can say this exact line to every type of benchmark also if you compare db-benchmarks there is often the problem of some configuration-tweaks.. So a hello-world is the most basic benchmark which can already tell you much about a framework because every page is basically hello world + some additional stuff.. Here is the explaination (at the paragraph "Why Hello World") from Yii-Framework why they chose a hello-world example.. also note that this is a very old benchmark: [here](http://www.yiiframework.com/performance/) That said - I wouldn't follow blindly some benchmarks.. but at least I will see which framework cares about performance and which frameworks are too complex
I am sorry about the designs, I have spent lot of time making that documentation. I dont really know how to make it look better. I am not at all a design person and no matter how much effort I spent on it, it is not going to look better. I have tried to make it easy navigable as I could. *What this framework offers is a way to arrange the code of a project as modules, models and views and straight forward methods to connect these entities. *It also provides extending functionality of existing modules by using events. *It also enables one to use HMVC pattern to reuse existing code. The reason I haven't really mentioned these things is because most frameworks out there offers these functionality. What I need feedback on is the the way those features are made available by this framework. For example. Is my method of loading a view better than the method of loading a view in codeignitor, that is the kind of feed back I need. Thank you.
I am always amazed at how many people dive at anyone doing benchmarks like this with hatred, anger or sarcasm. Let's get something straight: PHP Benchmarks have their place. If you're the "hilarious" guy that says &lt;?php echo "Hello World!" ?&gt; for the 100th time then please read this. These benchmarks test the bootstrapping process. How much is going on in the background, BEFORE you get to the controller output. That is not going to be the one and only factor anyone ever looks for when deciding anything, but it can still be useful to know. If you test the bootstrapping process yourself, then you can benchmark the internal operations of your controllers and work out the difference. Obviously a framework could have a really damn quick bootstrapping process by loading essentially nothing, but have a really slow autoload system that overuses file_exists() and has a bad order of precedence for the filepaths it hunts through. It could be the fastest bootstrap test turns into the slowest framework to load a few classes, and the slowest bootstrap might add only minuscule overhead thanks to some smart class-map. Either way, this is benchmark #1. From there you can start to test your slow queries, work out what indexes need to be used, see if your ORM is throttling your CPU and all sorts of other things. These benchmarks should be treated with "huh... ok". And not "Oh my god I hate you for even wondering about this stuff". If anybody suggests these are amazing then they are just as much of an idiot as anybody suggesting these are pointless. They have their place, they're just not the most useful thing in the world. That's ok, not every test can answer every question ever.
&gt;Did anybody say it was? Are you seriously going to claim that there wasn't an implication that one framework is superior to another based on the speed it executes a **hello world sample**? It's the worst kind of metric ever and doesn't even remotely translate to how well a framework handles a real-world website. &gt;When you consider the speed of your website you have a LOT of things to think about. That's my point. Did you miss where I outlined the importance of the website architecture?
&gt;You can't just imply random things to an article. Then you're deceiving yourself if you think that's not the way it's going to be interpreted by clueless readers. All too many times I've seen people been taken in by these kind of benchmarks in deciding what framework to choose, not really taking into account the other, more important factors. That's why it is important to point out how little these benchmarks mean in the real world and that they should be taken with a hefty pinch of salt. &gt;Architecture is one, the number of HTTP requests for assets is another, your DB structure, your indexes, how you write your CSS selectors, EVERYTHING is a factor. Those are all part of the architecture, silly. &gt;Don't draw your own conclusions then blame the author for them, he didn't say anything was better or worse, he just demonstrated some benchmarks. Stop attacking me based on strawmen you've conjured up, Phil. I haven't said anything of the sort T__T 
Thanks
Are you sure $result is absolutely empty? Can you post a print_r() or var_dump() of it?
&gt; to carry a pizza with icecream toppings from europe to america. Wait, are you saying that you are withholding information about icecream toppings for pizza? Delivered? You bastard. The sms thing is reposting/retelling that is a 5 year old story about sms costs. /r/karmaconspiracy researches these and similar important topics.
These kind of "benchmarks" are really annoying, Writing hello world in all the frameworks and then comparing is really no comparison at all. Frameworks are built to do a certain amount of things (Including but not limited to, Persisting information to a store , Rendering views etc) There are different design compromises are made in order to keep the frameworks useful. Those design decisions probably affect performance in some way or another. A more "fairer" and reasonable comparison is testing the same app built with each one of these frameworks. Instead of plonking a "Hello world" in a 100 frameworks the guy would have done everyone a huge favour if he sat down and wrote a very basic app that touches the db and benchmarked that. /incoherent rambling over 
have you ever used the other frameworks? I ask this because I too am working on a framework. However, I wouldn't be working on my framework if I could say I can't say anything special about it "because most frameworks out there offer this functionality". What makes your framework special, or are you just playing around? Is the API the only thing that makes it special?
Ehh ... there is one every damned week. Here we go again: - multiple classes per file - global state **everywhere** - methods with high cyclomatic complexity - `if(1){` ?!? - doesn't actually implement MVC - error suppression - uses `eval()` - uses uncached reflections - depends on 3rd part JS lib - weak and failure-prone routing - no code comments 
What does the following return: var_dump($client-&gt;__getFunctions()); 
Thanks, I'll go check it out.
That wouldn't surprise me.
Too add to this, your framework comes broken out of the box. Even without any configuration added, you should still be able to access some sort of instruction page. Warning: Creating default object from empty value in E:\Programs\xampp\htdocs\moduleR\moduleR.php on line 361 Fatal error: Method name must be a string in E:\Programs\xampp\htdocs\moduleR\moduleR.php on line 366
&gt; but at least I will see which framework cares about performance and which frameworks are too complex Unless you are doing something where it's really important to have, say, really good support for multiple languages. In which case, which ones are too complex?
I don't think I understand the purpose of this. What is the difference between using this plugin/event infrastructure and just calling a class method when you want the event to trigger?
The reason we switched to this for something like our cart infrastructure, is that it is much easier to manage all things tied to a particular core structure by modularizing the extra functionality. For example, in our case we have several things that could happen when a user adds an item to a cart: * is there a promotion involved that I need to add another item (like buy one get one free)? * if I trigger that buy one get one free, is there any more items available to fulfill? * Cascading possibilities. The code to handle such a complex system that is in general unrelated to the core structure of the cart without separating into a module is hard to maintain. The other benefit is that you can create unit tests on the modules that are much easier to test the entirety of its functionality without having to mock everything in the cart-&gt;add method. 
So I was expressing my opinion on why hello world-projects are a useless metric for comparing frameworks, Phil Sturgeon decided to barge in and accuse me of things I never said, then called upon his twitter followers to downvote me. Not cool.
I never understood his propensity to be an argumentative asshole. He damages his credibility as community member when every fucking thing he disagrees with turns into a fucking bitchfest.
I mean honestly speaking throwing out % numbers is a bit silly since it will always be different. I personally think that cURL is pretty standard and if its not installed it's not that hard to install it or request it to be installed (I'm pretty sure Cpanel has cURL installed by default in EasyApache so that's a huge coverage right there). I would support sockets but at the end of the day I'm doing work for something that's way slower, don't see a benefit of doing that. Thanks for constructive suggestions, they are always appreciated. 
No I'm stuck in the "You're giving bad advice about how to fix common problems and you shouldn't do that." But it's pretty evident that you won't actually reply to any of the arguments I have provided so I'm done arguing this and just wish you the best of luck in your future.
None of those things happened. You live in a fantasy world.
The link is right there, in your twitter feed. You can pretend it's not true, but we both know it is. 
I'm not giving bad advice, I'm giving a solution to a specific problem that people might have. As stated in the very first post, if you have good cache coverage and proper caching in place this is not for you, it's pretty simple. Your approach is 'oh hey I don't need this and don't see a use for it, let me tell you how you should cache things because what I'm doing is obviously what you should be doing or you are doing it wrong, etc'. 
No way! Did [Phil Sturgeon](https://twitter.com/philsturgeon) reply to my comment? Did I ever tell you I am a huge CI fan? BTW, &lt;?= is still not widely available on all PHP installations but hey Phil Sturgeon replied to my comment!!! Last year [Zeev](https://twitter.com/zeevs) replied to my tweet. I just missed chance to interact with Crockford. 
&gt;I was calling you weird for saying things like: Oh, TIL you're a troll if you use "silly" and "shame on you" in a sentence. Get real, Phil. Stop kidding yourself and man up to what you've done. Or continue lying to yourself and everyone around you. Your choice. 
Why do you say it does not actually implement MVC? Eval functionality you mention is not part of the framework. But it is present in one of the default module for evaluating php code fragments in the context of frame work. For example, you can test a model function using this interface. Regarding uncached reflections, I never heard the term before. I tried searching, but couldn'nt find anything in PHPs context. Can you please give me some info regarding this? Regarding 3rd party JS Lib, I think you are referring to JQuery included with the trace module that is used to view data generated by the profiler. Again, it is not part of the framework. Regarding weak and failure prone routing, I am not claiming it is not, although it will be helpful if you gave me some example cases that this implementation of routing will not be able not handle. Thank You. 
I am not really completed with the framework..
Do you know what the differences are between Maria and Percona? I'm watching MySQL slide and have been trying to figure out just what to replace it with. So far, I like Maria, but don't know anything about Percona.
I deal with a little bit of SQL in my current job, although I'm not sure how much would transfer. I've heard good things about Ruby and I plan on learning about that a little bit. Same thing with Python. Thanks for the info. 
_see also: [Event-driven programming](http://en.wikipedia.org/wiki/Event-driven_programming)_ _see also: [Observer pattern](http://en.wikipedia.org/wiki/Observer_pattern)_ Evented programming is used extensively in NodeJS projects, and is the paradigm that powers all events that occur in the browser. That alone doesn't make it "good", but does hopefully give some credibility to the technique. Using the same techniques in PHP is not as natural since events are not 1st class citizens in PHP (and thus why we have libraries like this one, implemented in userland code). This type of programming can be very useful (for the reasons the OP gives below), and is one technique that you can use to implement a sort of dependency injection.
I keep hearing this Clay Shirky person's name being mentioned. This looks really interesting right from the outset. It's also 6 years old which indicates that I'm seriously out of date in my thinking. Thanks for the background reading. 
Ah, yes, I remember this from [the last time it was mentioned](http://www.reddit.com/r/PHP/comments/tisaj/does_this_look_like_a_good_place_to_start/). Or any of the [other times](http://www.reddit.com/domain/killerphp.com/) it was mentioned. The consensus is that the site isn't a good place for learning.
Even better: hello world Perfectly valid php document.
Does it support autoloading?
Why does crap like this get upvoted?
This seems way too convoluted - what am I missing? You don't need a new Vagrant container for every web project you do, in fact my production web server hosts two dozen homepages, all on the same apache install and modules. If I understand correctly that'd mean I'd have to constantly provision new VirtualBox images with my VPS host? Also, I think the authors of Vagrant have never tried to run Eclipse or Aptana via samba shares, especially in conjunction with SVN or git - it's basically broken, i got corrupt project files and folders, svn not updating all the time when using that setup. Am I getting the idea of Vagrant wrong?
Sessions are created and stored on the server. What might be happening is the session cookie is expiring "too soon" from the client. Instead of debugging this you should probably just store this data... even temporarily.. in a flat db.
Thanks to you I've found out about vagrant, and I've opened /r/vagrant . I have no freaking clue how I missed vagrant until now, and as usual it's past 2am.
&gt; You don't need a new Vagrant container for every web project you do, in fact my production web server hosts two dozen homepages, all on the same apache install and modules. You're right, if your production environment is shared across your projects you won't see much value in vagrant. But what if you have many clients with different requirements? Different database, different versions of the same database, different versions of PHP, extensions, apache etc... PHP provides no way to safely and easily virtualise these things within the same system, but at the same time you want to develop against the same software you'll be running on in production, take advantage of new features, performance improvements and avoid bugs. This is where virtualising the entire system for development pays for itself in spades. Even for languages/environments that handle seperate environments fine (like RVM or virtualenv) sometimes your application will rely on external software (e.g. db, memcached, beanstalkd, whatever). Which is when virtualising your entire dev system really makes sense.
I started with Vagrant I tried both chef and puppet but just don't have the time to learn how to fix problems with code libraries I was facing and ended just using script provisioner. I put a copy of my [provision bash scripts ](https://gist.github.com/3080128) on github gist 
How does this different from [symfony2 event dispatcher](http://symfony.com/doc/current/components/event_dispatcher/introduction.html)? Your event manager uses static var to store events, bad mojo these days with rise in package managers and components. 
Can you provide a link to the github repo? EDIT:I didn't read that wouldn't be providing a link.
The other huge value is if you combine Vagrant with a provisioning system for each site. Where I work we have something along the lines of "site provision SITE_NAME" and it grabs the production database and repo and spins up a new instance of the site in less than a minute. If you take that extra step you will be able to recreate your entire production server on your home environment in very little time. I think this is very valuable when you want to do something like switch machines, bring someone new on in a project, etc.
Sorry about being a bit rude, but this reads like you are just parroting a lot of different, more or less useful advises regarding different usage of encryption without setting any context and without really mentioning in what use cases a certain choice could be bad or good and then finishing off with “it's hard, ask someone who knows what they are doing”.
How are you setting the session? Is there a mobile version of your site that's loading up a different bit of code, which perhaps doesn't include your session functions?
So they're making an unpaid junior do intense and apparently profitable work for them by taking advantage of his enthusiasm for the field? Nice... Real classy employer! Take my advice. You have the enthusiasm to go it alone. Don't spend your life lining someone else's pockets. 
Vagrant is an overkill for simple local development, simple LAMP package or WAMP package will do the trick. Vagrant is a good tool to use in teams, and even better tool if you use same provisioning on your production servers. But beware.. a poorly managed vagrant deployment will drive your developers nuts so know what you are doing before jumping into this.
We have a cloud solution where I set up a server with the base configuration for a web server and take a snapshot of it. For every dev/qa/stage/prod server, I spin up a new instance of the snapshot and download the websites using Git. Then I use [GitHubHook](https://github.com/ajbogh/GitHubHook) to deploy the new code changes directly from GitHub. If I want to create a new environment based on a running instance, I'll take a snapshot of a server and spin up a new instance for a new environment. Then I only have to change the GitHubHook config to look at a different branch. As far as local development, I just run Zend Studio's Apache server on my local machine and when I'm ready I deploy to the dev server I simply push to GitHub and GitHubHook does the rest. If the dev server complains then I fix the problem locally and push again until the dev server works. That way I'm confident that I can use the code in any type of OS (I use Windows to develop at work).
Another vastly simpler option: https://github.com/igorw/evenement
It'd be nice if the library followed the Cloud Servers Bindings guide. It's a draft so it's not strict, but the code would be much better overall. http://www.rackspace.co.uk/fileadmin/uploads/involve/user_all/cs-bindguide-20090916.pdf
I had to make the config.php and routes.php as .template files for sake of mercurial repository. This is to ensure that local changes to config and routes does not propagate to other users. I think I ll have to figure out a way to make it work with out config files.
@Brillegeit: I see your point. I'll crarify a bit. My post was mainly targeted for developers who has already implemented crypto in their software. It was never ment to be so called "tutorial". There is already a lot of information about engineering and implementing crypto where one could start. Hopefully people see the broad point and question themselves and starts to figure out if they have made the rights choices regarding the code they wrote to deal with cryptography. @philipwhiuk: I'm aware of the "password hashing situation" there is and has been, but this post was not about password hashing (btw. md5 is not "totally broken" when it comes to password hashing). *Secondly using the wrong algorithm and implying its not obvious that the results will differ is silly.* - I didn't get this, could you explain this a bit further? The blocking nature of /dev/random is a very real problem on web applications (as you see, it is not a problem when you use it to generate your personal secret key on your own computer, but the post was about web applications). I didn't give a "solution" to this specific problem because I wasn't writing a tutorial.
You should check if the method exists first, then log the relevant data. 
"Have you considered gardening?"
You don't. You say, "Try doing it this way, it works better, for these reasons."
In what sense do you mean horrible? If it's buggy or glitchy, there's no problem in marking against the bug report what exactly was wrong. You can then let them know that, "hey, did you know that if you use $Properties-&gt;FindAll(), you have to tell it whether you're excluding archived properties". For unreadable or weird code, you have to decide whether it's actually badly written, or just that you don't yet have the experience to fully understand what they're doing. Try reading it, stepping through it, following the variable values, and compare what they've done with how you'd do it. Remember that everyone's code is perfectly legible, and everyone else's is a spaghetti mess.
Good catch :)
&gt; Secondly using the wrong algorithm and implying its not obvious that the results will differ is silly. - I didn't get this, could you explain this a bit further? You say “Rijndael with 256bit block size does not give the same result as AES” which is silly since AES is Rijndael with 128bit block size, so not the same Algorithm.
It depends what sort of system you're setting up. For really simple stuff like just running a PHP/MySQL CMS based site locally you can probably get away with MAMP or WAMP as you can expect that the CMS developers have done enough portability work to make it function nicely on Windows, Mac and Linux, but for anything else using Vagrant is a life saver. As soon as you start trying to use Rails, Memcache, Redis (two projects might use redis on different ports), etc it can be so much better than trying to install everything on your local machine. But I agree, it can drive devs nuts if they're not familiar with it.
First, be *extremely* sure that you're right. What do you mean by "horrible"? Is it copypasta? Poorly commented? Or is it just structured in a way that you wouldn't have done it? Second, understand the context: all those exceptions for special cases are likely bugfixes that have been layered onto the code over the years. Sometimes people do things the quick way instead of the right way even though they know it's not the best thing to do, because they just have to get it done to the deadline. People in this situation *know* they are not delivering gold-plated code, and probably dislike that fact. Third: does it matter? Is the code actually doing the job it is intended? Because if it is, you need to have a *really* good reason to change it. I worked somewhere where the code for dealing with millions of GBPs of transactions every month was horrendous, and no-one liked touching it, but it was successfully doing the job of bringing the company revenue, and that's what was important. Fourth: lead by example. Write the best code and ask other people to review it for you. If you really are a better coder than them, you'll help them learn something -- if they're better than you then *you'll* learn something. Fifth: if you do have to actually pick a piece of code and say "this sucks" then make it *about the code not the coder*. It is never "*you* have done this stupid thing", it is "Hey, I saw this thing in the code and I think I can make it better, what do you think?". Be very explicit about what you think is wrong -- if it is clearly not going to do the job for which it is intended, then you've spotted a bug and that needs fixing. If you think their choice of algorithm is slow or incorrect, say exactly that and be prepared to present a better version. If you think their structure or architecture is poor, be able to say exactly why you think that (is it hard to maintain? hard to extend?) and have a suggestion on how to improve it. Sixth: you can't win every battle. Some people are just too stuck in their ways, and are not sufficiently engaged with their job to want to improve. And that's okay, actually. Maybe the day job is just a day job to them, to get the cash to raise their kids or to go to motor racing rallies or whatever. If you're an enthusastic and switched-on coder then that's great, and you'll reap the reward from that without necessarily making everyone's code into shining examples. Seventh: be sensitive to the political situation. It is emphatically *not* worth losing your job because you told your overly-sensitive douchebag of a boss that his code sucks. Better to do a great job yourself, get a decent raise, then move on to another company with a great reference. It's usually not worth going over your boss's head with complaints about his coding quality; his boss likely doesn't either understand the problem or particularly give a toss. Eighth: process and institutions matter. If there is a broad understanding that there's a lack of code quality and that is hurting the business, then there are a bunch of well-understood measures that can be brought in to help. Code review of all new commits raised quality, at the cost of the time commitment to do it. A bug tracking system with version control hooks will get people practicing better commit hygiene and combined with automated unit tests on a build server, people breaking tests can be required to make the fixes in a way that doesn't personally assign blame to them. *Crucially* all of the remedies for raising code quality require broad buy-in across not just the development team but management and whoever the customer is (internal or external) because, honestly, coding things to a higher standard takes more time and therefore money. It is up to the people running the business where on the scale from "ad hoc write patches onto live server oops it fell over again" to "we prove every line of code with unit tests and formal methods because otherwise it will explode" the business needs to lie. Honestly, if a lot of the developers aren't that great but the business is rolling on, then the developers are *good enough* for the business and it's saved dollars on not hiring more expensive ones. Not everyone can be John Carmack, and not everyone *needs* to be John Carmack. **tl;dr:** it's complicated. 
The other replies are all spot on, but to add to your comment about samba: you don't need to. In that PyroCMS example you will see that you have a folder called "www" and that is shared with vagrant, so /vagrant/www in the server is looking at that code. That means you edit the code in your environment, and it will run on the server. You can use Eclipse, Aptana, Netbeans, Sublime, Text Mate, whatever.
Interesting alternative to the event side of the project, although limited to php 5.4.
Second point is super important. A lot of people including myself will hack together something because a deadline is pretty immediate and it's actually counter productive to build the elegant solution...in that case, don't take it out on the coder. Assuming some technical debt is sometimes worth it...as you can always pay it back in the future.
&gt; btw. md5 is not "totally broken" when it comes to password hashing So a Cambridge security researcher, the US-CERT, Bruce Schneier and others are all wrong? &gt; US-CERT now says that MD5 "should be considered cryptographically broken and unsuitable for further use." - wikipedia.org &gt; "Google as a password cracker" - http://www.lightbluetouchpaper.org/2007/11/16/google-as-a-password-cracker/ &gt; "no one should be using MD5 anymore." - http://www.schneier.com/blog/archives/2008/12/forging_ssl_cer.html (over 3 years ago) &gt; "We also hope that use of MD5 in other applications will be reconsidered as well" - Security researchers investigating Flame I really wish [amateur sites](http://www.gohacking.com/2010/01/what-is-md5-hash-and-how-to-use-it.html/comment-page-1#comment-22375) wouldn't continue to propogate the myth. Sure it looks safe because it's a bunch of letters and numbers and you can't easily work it out by hand. But the [Vigenère cipher] (http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher) is pretty complex looking and that's trivial. 
&gt; It is well studied. I disagree here. Do you think there is a direct relation between the security scrutiny AES has and Rijndael when used with 256-bit blocks? &gt; Block size relates to the size of the chunks - larger blocks are better from a security point of view. I'm afraid it is not that simple. Are you sure the "AES security" directly translates to Rijndael with a different block size?
I wouldn't say "always". In fact, it's usually pretty rare that you'll get to pay back the technical debt you take on because there are other priorities. But there are definitely times when it's worth it get something (especially fixes) out the door quickly.
I'm taking programming in college in January hopefully. I've been a freelance ever since I started with PHP. Are a lot of companies and management like this? As in, easy to upset with criticisms on their code?
I am not sure you get my point. There are two files config.template.php and route.template.php. you have to rename those to config.php and routes.php. then you have to enter the path to your documentroot in config.php base_url variable. Then you are good to go. This is done to keep config.php and routes.php from version control. Adding a flag in bootstrap wont work as bootstrap file is tracked by version control and if i set dev flag on it, it will get to production when i push to production.
This is a fantastic answer to the question. It's worth emphasising that you shouldn't feel dejected by the disinterest of others in your corrections. The best revenge is to code well!
I don't see the problem though... Why would version control prevent you from doing this? Just set a variable in the bootstrap file to use the development configuration by default in config.php Then when the developer comes in to use it, they can change it the arrays to their own settings. Once they're ready to publish they can change the variable to 'production' from 'development' to use the second set of configuration elements.
Well which one do you personally prefer?
PHPStorm. I'd bear its children (I'm a man).
I think if you tell anyone that has written code that it's terrible, you need to follow up with a why. If you just insult somebody they'll be upset, but they might well know that its a terrible hack, laugh and agree with you.
This is extremely good advice. 
True. I just hate office politics. I'm there to code not argue or get into a pissing contest... You know what I mean?
You mean you can have a local folder that is "synced" with the Virtualbox machine? You say "shared" but what does that mean? How is it shared?
I find my own code magically turns into a spaghetti mess when I'm not looking! Many is the time I have exclaimed to myself "which idiot wrote this??" only to discover it was me.
It's shared using Virtualbox's shared folder functionality. The folder is in sync on your local machine and the VM at all times. Do all of your editing and coding on your local machine and just use the VM for what it should be, a clone of your production environment.
I'd say so. I am at least. I know if I've written bad code, I don't need somebody pointing it out in front of my boss to get brownie points. Though, if they're just curious as to why something is the way it is (not trying to get brownie points) then all is well. 
Because, if they are instead thinking of "solar system domination" or "galaxy domination", then the first logical stepping stone in that path is "world domination"... and they just dropped that.
Putting it off until 5.6
You'd be surprised what ends up in most databases. Its not an expensive or fragile resource but a very powerful convenient way to store data.
We are at war against JSP/JSF. JSP/JSF have always been our enemies.
 &lt;?php $earth = new world(); $earth-&gt;dominate(); 
Yeah that's good. I always try to approach it like: "I think we can do better here by (insert what we can do to improve the code)." Doing whatever possible to make it about the code and not the coder as you had mentioned. At the end of the day the software is a team effort and we all have our deadlines to meet. :)
What about... foreach($world-&gt;notDominated() as $target) { $world-&gt;dominate($target); } return $world-&gt;dominated;
DominateWorld must be ubiquitous and therefore a Singleton as philipwhiuk coded it. Or wait ... that's outdated pattern, it needs to be a service !
You mean foreach(Worlds::notDominated() as $target) $target-&gt;dominate();
This is why I love freelancing. But I know the good money is in government and corporate senior areas. It's a shame really because I just want to be around a bunch of awesome coders and we just code. No bullshit, no whining just enjoyable coding.
I know what you mean. I worked in big pharma and govt. here and it's all the same. Although, I lucked out as both places also hire freelance devs so I spent a lot of time just hanging out/talking with them. They didn't have to subscribe to office politics. The place I work at now is essentially a start-up. Small, close employee's. No ones trying to step on anyones toes as there's more than enough room for everyone.
Why is this being voted down?
File permissions? Make sure this file can read the other file.
Ehh ... this is the second this week! Here we go again: - multiple classes per file - global state and procedural code everywhere - tight coupling - methods with high cyclomatic complexity - MVC is a design pattern, not an acronym for *My Very Code* - no code comments - just wtf : `/system/core/database.php` - hides warnings
PHP is a good language but... The main problems with php is, it mixes html and server logic. It don't have data types like int, float, string etc(loosely typed language). So, It is hard to read others PHP code. 
Look at this: php &gt; echo gettype(10), PHP_EOL; integer php &gt; echo gettype("hi there"), PHP_EOL; string php &gt; echo gettype(.05), PHP_EOL; double I think I just found your lost data types ;)
I hope to find a place like that myself. :)
Haha nice. I like that explanation; thank you for that.
This is also relative to the quality of the software and how it's organized. Sometimes you can go back and clean up easily if you're using a framework or code which is organized well. However, if all the code is messy, procedural, not well documented, etc, then it can be a very colossal task.
&gt; The main problems with php is, it mixes html and server logic. That's due to bad developers mixing view and application logic. Sure php will let you, just as gun lets you shoot your own foot. You can also use typecasting, but there's no real reason to do so unless you're dealing with a bigger problem: http://php.net/manual/en/language.types.type-juggling.php
Ah okay that makes more sense. So far what I see OOP being is like one wrapper over another over another. There is always some larger construct. Like how Yii has services, components and modules which are used to build the actual app. Neat.
I get very irritated when I see methods or variables named with "info" or "data". They make for bad names: everything's "information" and "data" -- I was just making another point. As you should know, *old man*, naming is critical and one of the most difficult tasks in programming ;-) ^PS: ^They ^actually ^pay ^me ^to ^get ^near ^computers, ^so ^go ^figure ^;-)
Because we have something silly in the TODO list? That seems a pretty minor reason for other programmers to consider us 'fucktards'
 mysqldump [database_name] &gt; dumpfilename.sql
It looks like there is a maximum execution time in phpMyAdmin: `config.inc.php` $cfg['ExecTimeLimit'] = 300; // seconds http://wiki.phpmyadmin.net/pma/Config#ExecTimeLimit
Regarding the solution - I really hate short open tags `&lt;?` because they still look valid in editors. It's pretty pointless because it's only three letters and so hard to debug.
This. 1. ssh into box 2. mysqldump -u [username] -p [databasename] &gt; filename.sql 3. download it using scp or filezilla 4. ??? 5. profit Also, I had problem once with "MySQL server has gone away" message, because of a large sql file. I had to edit my.cnf, `max_allowed_packet`= to fix it.
Who cares what others think?
This is an outrage, how dare they remove such a crucial function!
My thoughts exactly.
What's wrong with the replies? Seems like developers enjoying a little joke. I don't think that makes anyone a "fucktard". 
ACHIEVEMENT UNLOCKED
JSP/JSF have always been our enemies.... That is wrong. They are good alternatives to PHP. A programmer should learn and use more than one language. 
Poetic.
Anything *except* dreamweaver. It creates bad habits. * [notepad++](http://notepad-plus-plus.org/) * [Sublime](http://www.sublimetext.com/)
PHP dev 1: what do you want to do tonight? PHP dev 2: The same thing we do every night, try to take over the world! 
I'm pretty sure that Terra is a singleton and looking around I'd say it's already instantiated.
I find it best that the container object is never used beyond either your Symfony2 Controller or Command. Going beyond this is passing framework dependancies to your business logic, which should be unaware of its framework context.
I can't help but laughing every time I read a post where some one says something about it being the end of PHP.
And even then, you can inject dependencies directly into both Controllers and Commands and remove any knowledge of the DIC. Commands take an extra bit of work to do so in the registerCommands method of a bundle, but nothing terrible.
I'd like the point out that Symfony 2 is not an MVC framework. 
I know. That's obviously the stupid part. Make every token English except one.
Yeah, because people making programming examples of world domination is childish... Get over yourself man.
It really depends how you are architecting your web app. Often times, completely scaleable PHP apps can be built on in the cloud on Heroku or PHPFog without the need of dedicated servers and the sysadmin headaches associated with them.
"4. Store passwords hashed" .... and close the tab. This can't be said enough, if you don't know anything about security, don't write about security. Lets just share the actual [OWASP page](https://www.owasp.org/index.php/Main_Page).
In all honesty, enygmadae, based on what you write (noticed several problems) and how your ["security-minded PHP microframework"](http://www.reddit.com/r/PHP/comments/x8rx2/shield_a_security_minded_php_microframework/) had quite a few security issues, it does not seem that you know an awful lot about web security. Web security is serious business, and if you don't know an awful lot about it, I'd advise you from advising on it. Doing so would only perpetuate misinformation and bad practises, which would only result in hurting the web rather than helping it. You're better off simply referring people to proper sources.
Well, what aspects of an application's architecture do you think would disqualify it from a platform like Heroku or PHPfog?
Just for the record, I wasn't saying that you should use a framework, I was merely pointing out that many frameworks advise placing the code outside of the www-root so it's not directly accessible. You can do the exact same thing with vanilla PHP if you'd like to. 
There's been some [discussion](http://www.reddit.com/r/PHP/search?q=host&amp;restrict_sr=on) but I would say it's more centered around what people are using than what the differences are between modern PHP hosting environments. My friend, a RoR developer, was going off about the merits of Heroku the other day. I'd like a discussion about when to use something like that.
no need to use a framework to do what he's suggesting. just have a config file containing the credentials outside of your web root and then include that file from your controller in the web root. here's a dirty example: **/var/www/library/db_config.php** &lt;?php $db_config = array( 'host' =&gt; 'localhost', 'db' =&gt; 'database_name', 'user' =&gt; 'username', 'password' =&gt; 'p45sw0Rd!' ); **/var/www/html/index.php** &lt;?php include('../library/db_config.php'); $con = new PDO('mysql:host=' . $db_config['host'] . ';dbname=' . $db_config['db'], $db_config['username'], $db_config['password']); if php for some reason stopped rendering your pages, the most a user would see is the content of index.php
 ^ this AWS is very much a "pay for what you use" model. Start off with an m1.small instance and see how your app runs. Too slow? Upgrade to an m1.medium or c2.medium machine. Unless you're a large business/enterprise customer, committing yourself to an entire server (or servers) for any given length of time is just a bad idea, and a waste of money. Bonus: are you going to serve up assets, such as MP3s or very large images? Drop them into S3 and you only pay for the diskspace and bandwidth used. Really, AWS will let you grow your app in all sorts of cool an interesting ways, once you discover the power behind the service.
What about uptime? For me downtime = lost sales. Do you think it's worth paying for a dedicated for the extra stability or do you think you would make up the savings in the amount the AWS service would save you vs. dedicated hosting costs? How long does it take to get up and running in AWS? I imagine it's a complicated beast to tackle at first.
There's 8 Gigs there (4x at the front)
Ah ok, I misunderstood your question, I thought you were looking for a good dedicated hosting provider that let you run PHP. Sounds more like you are looking for a provider that will do everything for you but write your php code :) Heroku actually looks like a pretty cool product, too bad it doesn't seem to support php. And for that, I don't know. I'm more of a "do everything myself and get out of my way" type person. I don't trust service providers more than I can throw them, which isn't very far because servers are heavy!
Well, there's an argument to make for putting the source outside of the www-root as well, just not the config files. You might not want to expose the underlying mechanism which powers your website, as it could lead to people stealing the code, finding and exploiting security holes etc. 
oh for sure, this was just a dirty example on protecting the database credentials but can easily be expanded to other code as well.
for IDE's I've been pretty impressed with PHPstorm. Although if your code base is large and horrible horrible, you might need a few G's of ram to properly index it all. Ctrl+click on functions and phpstorm will usually take you to the declaration if it can find it. I also like to stick error_log while debugging over xdebug. So something like error_log("Function 1 " . print_r($someVariables,true) ."\n",3,"/my/log/file.txt") That usually gets me through unexplored code areas.
"Work efficiently" is a little vague. Are you talking about understanding how the application is working? Or are you looking for tools to work with for development? 
Wordpress' templates are actually one of its strongest points - they're really, really easy to create and edit compared to the other CMS of that level. The design pattern of its development doesn't really factor high among the reasons people pick it. 
Oh okay that's a bit better but for 300 bucks a month I seriously think it's underpowered unless they are offering some really good SLA.
It's very competitive, at least for managed hosting, it's cheaper than any other managed hosting provider I've checked out. They do offer fully managed hosting but only for the cPanel LAMP stack and it's becoming time to begin moving away from that, at the very least cPanel.
I'm not sure if you've said elsewhere, but what are the specs of your current server? I've got one of these on trial right now and with four TF2 server instances running simultaneously, it's not even breaking 30% average CPU usage. i3 or not, it's impressive.
The specs are in the post's text field at the top (where you got the name of the CPU in the first place). 
If your app is developed properly, you will have close to 100% uptime, unless the entire region is destroyed. If you host in VA, this basically means if the Eastern Seaboard is wiped out, so will your servers. Similarly for San Fran or NW servers. The idea is to have at least 1 server each in two different zones (think like data center). You can also do this with your database as well. AWS will guarantee way more uptime than a single dedicated server hosted in some colocation rack. Take a look at this nifty 3D diagram that Amazon developed to describe a web application hosted on their servers. http://media.amazonwebservices.com/architecturecenter/AWS_ac_ra_web_01.pdf Edit forgot to add link
Oh yea i got that, thanks though
Oh, I misread and thought you meant those were the specs of something you're considering moving to. Sorry.
My bad, I will make it more explicit
I want to add.. for learning a new codebase.. it might be a good idea to use phpstorms static code analysis ("inspect"). With this you will improve code and also learn a bit about the authors ideas.. Also if you say the codebase is horible, phpstorm allows to reformat the entire code like you want it.. to configure your own codestyle is very easy.. I don't use phpstorm as an ide but as a tool to get the above two things done.. the static code analysis is also good for your own code ;)
What are some reasons why PHP would stop rendering your page and can any of them be produced artificially by somebody with malicious intentions?
a misconfiguration in your web server could prevent `.php` files from being processed or even a user error of incorrectly naming the file something other than `.php`, like if for some reason you put a php file out as `.html`...not sure why/how that'd happen, but it's a possibility. a poorly written script could easily do this. for example, let's have a script that tracks a requested text file and then displays it... &lt;?php $file = $_GET['file'] // do some logic here to track the text file displayed echo file_get_contents($file); now you could request `file.php?file=file.php` and you'd be able to see the source of the file.
Looks interesting. Yes, I will definitely try that.
Is this tutorial writing any HTML markup for me after I type in that SQL, or do I define that myself somewhere else? Or do I need to override the default views if I want custom HTML? Also curious if you chose a template language, plain PHP, or what.
Wordpress has been fairly successful as a way to delay the introduction of a proper developer / designer into the website creation &amp; maintenance process. So the templates have to include the kitchen sink. They're painful to create and annoying to sell, because you are literally dealing with the cheapest of the cheap customers. On the other hand, if you know what you're doing and can maintain WP sites, it can be an appropriate tool for things like blogging, writing blog posts, and maintaining a blog.
March 22 &amp; Jun 29 were two completely different types of outages. I think everyone can agree that 3/22/11 was disastrous. Multiple AZ's went down, so even with a HA solution, having multiple EC2's and RDS's in separate AZ's wouldn't have helped. On 6/29/12, only one AZ went down - and it was a power outage of all things. Each AZ has 2 separate utility company feeds, backup generators and UPS battery backup - and for some reason they all failed. The odds of this happening are something on the lines of winning a lottery jackpot twice. The reason why instagram, Netflix and others had issues coming back up is that the disks were put in Read Only mode. Additional instances in other AZs weren't able to come up. Amazon doesn't offer availability SLA's (just durability), but even with the 5hrs downtime, they still have provided 99.9% uptime. &gt;WiredTree's goal is to maintain 100% uptime on all of our VPS and Hybrid hardware nodes. In the event that a VPS or Hybrid hardware node does not experience 100% uptime in a given month, you are eligible for a prorated credit equal to ten times (10x) the amount of time that the VPS or Hybrid node was down for. Even with WiredTree's goal of 100% uptime, you aren't guaranteed that you will actually get 100% uptime. However, even with the prorated credit you would receive in downtime, would there be any cost savings? You have to weigh the values and make a decision. Personally, with the services provided and the requirements, I'd go with AWS over WiredTree. 
I don't care about WiredTree. I just know Amazon has essentially guaranteed outages. The types of outage don't matter. In the end, it affects customers using EC2. They claim to have multiple pipes, multiple electric feeds, etc, all coming from geographically disperse providers. The odds of it all failing at once is slim to none. It's more likely that the redundancy doesn't even exist.
Just an FYI, both Heroku and PHPfog are built on Amazon AWS. I don't use Heroku (we don't have a huge web presence), but one of my friend's startups uses it. From what I hear, a lot of startups and members of Techstars, etc use it. If you don't have a development team or operations team to manage the scalability of your services, I'd say at least Heroku would be worth taking a look at. I have zero experience with PHPfog, so maybe someone else could chime in.
OP was interested in using WiredTree - its the only reason I mentioned it. Two outages in six years isn't bad. There is plenty of redundancy at Amazon. Did anyone lose any data during either outage?
1) http://php.net/manual/en/function.debug-backtrace.php 2) Get a good IDE that can do 'search for text in files'. If it can index the files as it steps through them, even better. Otherwise, (re)aquaint yourself with grep, awk, find, sed. You are using a 'nix environment, right? If not, why not? Command line piping is reason enough to me, development wise. You can do amazing things with grep, awk, find, and sed. 3) get_defined_vars() + get_defined_functions() + get_defined_constants() will sum up your situation at any point in code, along with (1) debug_backtrace 4) When you are navigating the spaghetti, don't be afraid to refactor as you are doing it. Comment everything you do. Make backups before edits. 5) For object/variable inspection: get_class(), get_class_methods(), get_class_vars() 6) Make a function that does a print_r() to a log. This is all you should need to find your way to and from any point in the code. Any tool that you use is basically using these or replicating them in some fashion. Good luck!
Those were just the two most recent major outages. There are plenty more. I lost data due to EC2 related corruption, but thankfully, I back up information off site. If I lost data, so did many more.
There's a couple of reasons the blunt approach doesn't work as well as you'd think: * People tend to get defensive easily when you're effectively saying they don't know how to do their job. Doubly so if you're mean about it, and quadruply so if you happen to be the new guy. * You don't know why they wrote that code the way they did. I've seen a few things at my current job where i was like, "WTF?! Why are they doing it like *that*?", but when i asked about it, the explanation made a lot of sense. Sure, in hindsight it sucks...but sometimes getting stuff done is more important than doing it elegantly. * Unless someone's seen your code *and realizes that it's better*, your opinion of theirs doesn't mean a whole lot to them anyway. If you're gonna be like that with the boss, or with all your coworkers, heh. Be sure you don't need that job afterwards. 
&gt;FusionLeaf is new and exciting. Do you need another reason other than that to try it out ;-) Um, yes. There's like 20 billion php CMS's ... and your example counts more as "reason not" than "reason to".
Thanks for all the help!
Cool! Also checked out Amend - it looks nice too. Anywhere I can look to see an example of using Amend in a "real world" scenario?
I have been happily using netbeans to navigate legacy php with ease.
PHP 5.4.6 is also available through MacPorts - this would be faster than compiling it yourself like the article suggests https://trac.macports.org/browser/trunk/dports/lang/php/Portfile I've always had good luck using MacPorts - the article suggests using Homebrew but also says that PHP is not yet available through it. MacPorts seems to have a better selection of common software, although Homebrew has a lot of Ruby-related stuff.
What kind of info do you think would be nice to see? I covered everything I could in the [wiki](https://github.com/kherge/Box/wiki), but I agree that it would be a good idea to add a synopsis in the README.
Heh. Guess they've never heard of logrotate...
This, I have saved tens of hours in the last three months since I started using xdebug together with phpstorm.
If there are other user accounts already created, sure. But creating a user @localhost will limit it to local connections only.
I guess the most important thing would be a usage example for a really simple, common use-case. Simple enough that you get the general idea of how to use it, and not too heavy on information. So maybe, an example to package a CLI php script that prints "Hello World" or something? Maybe just copy+paste one of the more simple examples from the wiki? Here's an example of the [readme](https://github.com/eloquent/cosmos) from one of my projects that's quite simple.
Thanks! Although, this installs a new PHP on your machine alongside the old one, instead of upgrading the native one, no?
Why not MAMP? it comes with PHP 5.4.4...
Like most security solutions I've seen for PHP, it solves one problem, then opens up another.
The aim is to teach how to do it, in order to break dependency on such packages. The aim is also to upgrade the native PHP, not install a new one beside it, and it is to have the absolute latest version, something an *amp package will never have. I agree that MAMP and similar packages are just fine for most use cases, but the article aims to teach something useful alongside having a practical result.
Here's what I think OOP is. I think it's a way of designing code that divideds main parts of an application into classes each with its own functions so that they remain independent from one another, easier to understand, and allow the programmer to reuse specific functionalities where needed. That being said all I wanted to know is what I should do so that &lt;form action ="form_processing.php"&gt; knows what method to call within the form_processing class.
Please read this tutorial : http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers As for user's ability to read the source (and your DB access credentials), it can be mitigated by placing the application code outside the web-root. Then only way for someone to read the PHP source will be by either injecting a script or gaining direct access to server. And, if that happens, the sanctity of your DB password would be the last thing you worry about.
One thing to note. With that connection, you're potentially vulnerable to SQL Injection, depending on the version of MySQL that you're using. You *must* pass the `charset` parameter to the construction (if you're using PHP &gt;= 5.3.6, otherwise you can't protect it). $con = new PDO("mysql:host=$host;dbname=$db;charset=UTF8",$user,$pass); Even prepared statements can be vulnerable depending on configurations since PDO will emulate them. So without properly setting the charset param, there's a chance you're vulnerable. Another way of solving it (that works on all versions) is to set PDO to not emulate prepares: $con-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
The to www rewrite is a 301 and thus creates an entirely new connection. All the rewrites should run again after that as HTTP is stateless and remembers nothing.
That's the question. How does the OP *know* the rewrites are causing the slow load times? Before sending us on a wild goose chase, we need more evidence of what has been tried so far.
No, the `L` (`last`) flag acts like a "break" keyword, meaning "stop processing rules if this one matches." Without it, the rewrite engine will continue to check rules for a possibly better match.
I'm running Windows 7 with XAMPP and var_dump() is populated. I used your code exactly.
Forgot the @, but still no change. I can execute queries on windows, but it always returns null.
What version of xampp are you running, because i'm also using xampp with windows 7
3.0.12. I updated last week.
&gt;&gt; What would convince more startups and web marketers to use me? As superficial as it seems, for me if your portfolio site doesn't look pretty, or it doesn't engage me, or there are any rendering or feature bugs, it just gets closed. Make a real effort to make it slick, since thats the reason people would be looking to hire you Secondly, be upfront about your pricing. The temptation is to get people to contact you for a quote, but people can be reluctant to spend time doing this if they really have no idea whether its going to cost $200 or $5000. Show some sample work and display what the cost would have been. This may even result in more people contacting you for a formal quote, since they at least have a point of reference
error_reporting was already set to E_ALL, but updating xampp seemed to solve my problem :)
I was running 3.0.2, and updating to the latest version seemed to solve my problem
I'm not a developer, but a network admin with some experience in cloud architecture. For the nuts and bolts, it comes down to utilizing load balancing and monitoring systems. You basically have a base instance with static php, java or other server side processing code. Create an image of that instance and when a memory or cpu alarm hits, you tell another instance to fire up from your image. This is where load balancing comes in. Load balancer will then spread your load across multiple instances. You have to have your database on a separate server for this to happen since your database is what drives the dynamic content. Now where Amazon is nice, you have managed MySQL for your database, Elastic Load Balancing for your instances and S3/Cloudfront for your static content (images, js &amp; css) and streaming videos. You also have Cloudwatch Alarms &amp; Simple Notification Services for the monitoring.
Could you explain how PDO is vulnerable to a SQL injection?
Softlayer allow you to set up various monitoring and alerts, and leave instructions for the support staff in the event an alert is triggered. Ive disabled these and just deal with it myself though. Mostly because a) My website isn't 'mission critical' in the business sense., and b) Apart from the odd time I've caused it myself while Im ssh'd into server, I haven't had an unexpected outage in more than three years If it ever became a problem, Id just outsource it to some Indian team, there's many that will do it
I just don't see how this CMS gives me any advantage over using Drupal + the right combination of modules. I glanced over the website but nothing seemed to make it stand out against the sea of other CMS's. I don't have time to just try random CMS's. What does your CMS do right that others (particularly drupal) do wrong? Your example lost me when you had me copy pasting SQL &amp; PHP. I expect a CMS to hide that from me &amp; my clients (but still let me get low level if I need to). Best of luck to your project anyway.
I didn't say it **is**, I said it *can be*. So, PDO does not use real prepared statements unless you tell it to. Normally, it "emulates" them by calling `PDO::quote()` (which in tern calls the C api version of `mysql_real_escape_string()` on the variables. Now, to understand how we can inject, you need to understand how MySQL deals with connection charsets. In older versions of MySQL (5.1 and below for sure), the connection charset on the client side is **only** set by calling the C api `mysql_set_charset()`. Where the server side is set by either that function, or a call to `SET NAMES`. So if you don't call `mysql_set_charset()`, the client can think it's on a different character set then the server is expecting. Now, to see how the attack progresses, check out [why addslashes() is bad](http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string). The main reason is that addslashes doesn't take into account the connection characterset. But neither does `mysql_real_escape_string()` if you don't properly set the connection character set! So, we can create a connection, call `SET NAMES GBK`, and be 100% vulnerable to SQLI (because the client still thinks it's UTF8). Where-as if you had passed `GBK` to the DSN parameter, all would be right because the client would know how to escape properly... With that said, if you turn off emulated prepares, it will do true prepared statements and all of this is moot anyway. Note that in newer versions of MySQL, calling `SET NAMES` does trigger a client side charset change as well. So against 5.5 this won't be an issue. But that's no reason to not do it right in the first place...
Agreed, I made this mistake in the past. I tried to think ahead and bullet proof everything for the future, but what I really did was make the whole thing a lot less simple. Going back to it a year after I created it, I don't know my logic behind half of the things I choose to do. Keep it simple stupid. 
Sorry I misunderstood, you are right I was focusing on the aspect of blocking any access from the outside so even if password for a user with extra grants is leaked via raw code they will not be able to get in without access to the server.
I think it's because it's a repost and almost exactly from a year ago... So.. Yeah... Still funny though.
Yeah, that's way too ambiguous. Facebook is a full website, so is my geocities page from the 90s.
So you're changing the connection charset server side? (`SET NAMES GBK`) and not enforcing it client side? Well yeah that's stupid. But the answer is not to mess with the charset server side. 
Great advice, hurts my feelings every time.
error_reporting was set to E_ALL, but did you have display_errors enabled? Aren't you curious as to the root cause of the problem that just happened to be fixed by upgrading?
 what_about (£variable) { perhaps £possibility: //Code here splendid; perhaps £other_possibility: //Code here splendid; on_the_off_chance: //Code here splendid; } As an Englishman I full heartedly agree
this got me. perchance (£condition) { // Code here } otherwise { // Code here }
D'oh
I must say it's refreshing and so much easier to follow along than switch/case, I think. 
Might be downvotes from people who are anti-fun in r/php on principle. I am not one of those people but I do believe they exist.
Page loads needs to be less than a second, 1.5 is still acceptable but pushing it. Just build it first, you'll have enough to do in that regard, without adding unneeded optimization. 
I think if I could write cheerio($message); instead of die($message); my day would be a lot more fun.
It's getting downvoted because it's not funny, and I say this as a fellow Brit. It's just far too on the nose and reads more like "what an American thinks Brits sound like". I'm quite surprised the author that wrote this is British himself.
As a fellow brit, and therefore an arbiter of comedy apparently, I liked it. It is now officially 50% funny. Pip pip.
 function cheerio($message) { die($message); }
Awesome, I love it!
You'll get no complaints from me :)
In all my years of searching for php tutorials etc, I have never come across this site. Thank you!! 
I will definitely sign up for the book! Thanks! 
Well, I feel I have stumbled across a undeveloped idea, so I'm not just going to spout my idea on the internet, now am I? :D I mean no offence! 
Good ol' NHS!
Glad I could help. That site was a big help for me when I first stumbled upon it. :D
I agree. I don't like switch/case at all. Especially missing breaks which screw up everything. Golang rightfully inserts breaks automatically before each case.
I bet someone comes up with a &lt;60 character regular expression to handle this :V
 function cheerio($announcement) { die($announcement); }
Those are not real downvotes. That's reddit downvotes system to prevent scammers staying at the top. In fact those upvotes aren't real either. There's a post on reddit blog explaining this system. Cue MorpheusWhatifItoldYouMemeHere.jpg
I like the breaks, you can write shorter code in some cases by omitting the breaks and letting the rest flow vs a million conditional statements.
We're not *that* verbose. But I would like to see `whilst (expression) { statement; }`
It's $39.95 for the beta! 
I don't get this, but it sounds clever, so I laughed. 
It's ok, took me a few minutes of looking at it too. 
I'm an American and absolutely love jokes that poke fun at us, maybe areyouready is the sensible one and is rightly offended? Hard to say, it is possible he just takes himself too seriously. Very American of him. 
Nobody really needs an ass. Just install a colostomy bag.
Well yeah, something I often see is an interface's method that defines options. Implementations need to be able to accept any number of options that the interface can't know about. So you end up with things like this, from Symfony's Form component: interface FormTypeInterface { /** * Builds the form. * * This method gets called for each type in the hierarchy starting form the * top most type. * Type extensions can further modify the form. * * @see FormTypeExtensionInterface::buildForm() * * @param FormBuilder $builder The form builder * @param array $options The options */ public function buildForm(FormBuilder $builder, array $options); // ... } It's a valid "pattern". I think the only consensus we'll see about documenting it is that you should document available options *somehow*. In your docs **and** in your code, hopefully.
Yeah, very dumb. You're triggering both the error for an undefined constant, but also the 'error ignore', which actually costs more runtime than just logging (or not logging) the error in the first place. "Looking stupid" is not a good excuse to write bad code. I'm surprised Rasmus would suggest that, seeing how performance-minded he tends to be.
Nobody should really be using emulated prepares in the first place. Still good for people to know all the same.
 splendid;
Hey man, this is very cool and much appreciated, took me a little while to go through all of the info so that's why it took me a day or so to respond to this. I keep reading about how an instance might just "disappear". What do you do if that happens? I have a bunch of cron jobs (which are stored in my project's git repo) I am getting the feeling I would have to set up some Capistrano/Phing recipe or something for redeployment. Obviously not all aspects of a project can be set up by just cloning a git repo (hence why Capistrano/Phing was created) so I'm guessing before I could move to AWS I would have to engineer a deployment strategy? What about my Apache and Mysql setup (httpd.conf, my.conf) where do these configurations go? What about custom software? I have a Jenkins CI server installed right now. Also a Sphinx fulltext search engine. I also have a bunch of PHP related installs (phpDocumentor, phpUnit...etc.). The list goes on. I would want to install that stuff at AWS (the Jenkins CI server could be moved to another instance but you get the point) what happens if I lose the instance? Do I have to reinstall all that stuff? Any insight much appreciated.
Where would you look for these teams from India?
"I think we could do this a lot better... (list out things you believe to be broken with solutions)". The trick is not to say the code is bad, but to suggest there may be ways it could be improved. If you attack someone, they go defensive, but if you show them you're on their side, they'll be more receptive.
Since when does Canada use US English? We have our own dialect.
Im not sure right now, I've not looked for a while because I dont yet need them. Ideally I'd opt for a US team, but they're usually expensive which is why I'd probably go to India. Softlayer advertise a number of technology partners here.... http://www.softlayer.com/partners/marketplace Try some other hosting providers too, they usually have a bunch of partners (although dont make the mistake I made, and assume because they are listed, they must be good). I did hire a team in the past, which was Bobcares.com. These presented as if they were American, but are actually Indian based. Avoid BobCares at all costs. They were atrocious, and in the end it almost felt like I was paying to coach them, on how to administer postfix. They took 2 weeks to install a DKIM milter, with several days unexpected downtime. I think there are some decent India/Asia server admin teams out there though, its just a matter of finding them. 
Cool, thanks for the reply.
Note for others: This works because "case possibility:" is followed by one or more statements, and the C parser recognizes { ... } as one statement.
I think you misunderstand the docs. The L flag works exactly as as I described. There is a caveat in that IF the newly rewritten URL results in a redirect, AND the redirect triggers the same Apache configuration section, THEN the rules will be run again. Since almost all rewrites result in either an internal or external redirect, I can see where what you're saying is effectively true. However, this is a side effect of HTTP being stateless, not of the L flag triggering another pass. If your rewrite triggers a different Apache config section (rewrite to another vhost or directory), then the rules will not run again.
Each amazon instance is basically your own VPS. You can install any software you want on pretty much any flavor of Linux you want. Amazon doesn't touch to anything beyond the hypervisor level, so its up to you to do what you want with it. They do have controls and watch for port scanning, penetration testing and other hacking type activity though. As far as deploying instances, I know puppet &amp; chef are often used. I guess Capistrano or Phing could be too. You can and should bootstrap your images to run any sort of script/deployment technique. It could even be as simple as basic shell scripts. Your apache/nginx conf files are stored wherever your distro puts them, most likely /etc/httpd or /etc/apache2. If you are going to scale, use RDS MySQL instance(s). You also have the NoSQL alternative SimpleDB as well as DynamoDB for fast caching DB's you can leverage. You could also take a look at Amazon CloudSearch instead of using Sphinx. There are plugins for Amazon SQS and Jenkins CI. Take a look at the diagrams at http://aws.amazon.com/architecture/ to get an idea how to create your infrastructure. Also read https://s3.amazonaws.com/cloudformation-examples/BoostrappingApplicationsWithAWSCloudFormation.pdf for information about bootstrapping. All your configs are written in JSON for easy deployment. The only time an instance will "disappear" is with Spot instances. These are typically cheaper than a reserved or on-demand instance, but you bid for the pricing and take the risk of a server being terminated at any time for no reason and with no warning. Typically these types of instances are good for batch processing. Make sure to backup whatever you do on spot instances and make sure to take snapshots to back up your other EC2 instances Netflix is one of Amazon's biggest customers and are very open on how they use AWS. Take a look at their techblog http://techblog.netflix.com/ for some interesting info. Take a look at the calculator and the architecture diagrams and get a feel of what your costs are going to be. Let google be your friend, chances are someone has done something you want to accomplish already on AWS.
More links: [/r/programming](http://www.reddit.com/r/programming/comments/tt97y/phalconphp_a_web_framework_delivered_as_a_c/) [hn](http://news.ycombinator.com/item?id=4431154)
This looks really good. Can't wait to try it out. 
I'd gladly take development advice from anyone who has managed to build something of even one tenth of the scale of digg. 
Yeah, I'm learning that this is not a friendly community. Are you still looking for such a script?
&gt; becoming more and more of a CMS This is still fundamentally incorrect; Wordpress **is** a CMS. It is actually one of the two most popular opensource CMS available today (along with Drupal). As I said, thinking it's just for blogs is both outdated and wrong. Seriously, have a look at the custom taxonomy and post type features. To your latter point, you've nailed it - ease of use, and freely available themes and plugins make this the obvious solution for most sites at small to medium scale. 
The idiot move is changing the charset halfway through a connection. Who the heck creates a connection and then thinks, wow I should try out a different charset despite the fact that all my script is in a different charset (the file itself). :/
i wrote a really simple lightweight caching class the other day, do you want that?
I'm well aware what singleton is, if you don't want your class instantiated via a constructor you need to throw an exception there. Making it private is a bush league move. The private constructors is something you would use as a hack in old PHP revisions that had ghetto OOP and it throws an unhandled error now. 
Sure - my first thought before reading the article was "do I really want that advice?" But it's actually very solid - I recommend bookmarking it.
"Some food advice from a McDonalds employee." ... uh. No thanks.
I figure it's because everyone in this section is either a fan of frameworks or non-assisted coding. In any case, writing your own wouldn't be too hard, and would probably require no more than 4 php files total. Post this to /r/learnprogramming if you really want help ;)
If it's just that you need the key to be present, but not necessarily non-empty, then what you can do is have a map of keys that you need like this: $expected = array( "key1" =&gt; null, "key2" =&gt; null, "key3" =&gt; null ); And then you can take the user's input array, check that it's an array, and use array_merge to merge the expected and input arrays.
There's also the part where we now have /r/PHPhelp. You remember the red text on the submit page that told you to go there?
It looks hackish to me too. But I understand the syntactic appeal, coming from another language. With more Perl background and knowing what it actually entails, it confuses *me* more than it explains. Right now it's just the notice and error suppression syntax, but I wouldn't mind it becoming a proper decorator operation in one of the PHP derivatives. That being said, it *does* have a functional advantage, if you want to log such occurences. While the default error handler may not output anything, @ can aid debugging. Which is precisely what it is for; surpressing notices live, but allowing to recover them as needed. (The obsessive microoptimizers shall cry now. I'll keep actually profiling.)
Except that prior to this being disclosed, almost every framework worked in this exact way (calling `SET NAMES` after connecting). Note that I'm not saying changing charsets half way through. Even changing it right after connection will do it. What matters is not when the charset is changed, but how...
Yeah they're not the best. I did start out writing them but in the end I was spending so much time just messing about with markdown the tests weren't helping. I hope to improve them shortly.
Index is definitely on the todo list. The quoting is just my attempt to make it readable. It's pretty hard to make a nice document with the limited features of markdown and I felt indenting things would allow me to give it a hierarchy which I couldn't achieve with text sizing etc.
Or uses that pattern in many places, or has a high traffic site? Triggering an error is 7 times slower than simply doing the assignment. Suppressing the error is 12 times slower. If you have an error handler, even if all it does is *return without doing anything*, the error is 11 times slower, and suppression is 15.
.. we haven't had one for almost 24 hours. 
i am curious what was the cause, but the i gave up and upgraded. EDIT: display_errors was enabled
This looks great for a smaller web sites, I'm a little put off by the fact that you can extend to an 'API' class but can't really see what you are extending to. Definitely something you should play with, but I would stick with HipHop for now.
The framework as a PHP extension idea is nice, but doesn't make much sense unless for some reason you only want to work in PHP. The first argument is that it does no class loading from disk. The problem with this is that's a moot argument if you're using an opcode caching extension to solve the same issue with PHP files. Just uncomment the APC extension in your php.ini and this argument is mostly null and void. The second argument is that it's faster because you get to run C code rather than PHP opcode to do your application logic. Firstly, for most webapps that don't turn out to be huge, business logic done well will not be a primary consideration for the scaling of your app. It's much more likely to be something like data storage (i.e databases, distribution assets). Secondly, if you do need performance in your application logic, you probably just shouldn't be using PHP full stop.
It's relevant, especially when the company flopped because of the design decisions made by the person giving this advice.
I'm always impressed with how codeigniter performs against it's more mature brethren of the framework community. For all it's shortcomings, you can't knock it for it's simplicity and performance.
"== is bad. Don’t ever use it. On everything else about the language, you’ll run into differing opinions." ... what's he advocating instead? ===?
I've only started using them (did not do a full rewrite of something since 5.4 is not yet supported everywhere :( ) and I like them a lot. but ... They are not meant for increasing performance, they are meant to help us do DRY (Dont Repeat Yourself) and to ease maintenance or adding new features. 
Edit and Create both need to display the edit form.
I moved over to 5.4 this week. I was surprised how many times I wrote part of a class and thought "I'm gonna do this a lot, I should make it a trait". I'm also loving not having to write "array()" any more. 
and yet, "design decisions" != "coding advice" in fact, it's the most common for good programmers to be terrible designers.
Sometimes I forget when I'm in /r/PHP ... it's like the special kids class room here.
Let's see... For $100.00/mo, my server has: 1. A control panel capable of letting me install other OS'/distributions, backup my entire hard drive, restore a backup, reboot, etc., without needing to file a ticket. 2. 8 Core Intel Xeon CPU E31270 @ 3.40GHz 3. 8 GB of 1600MHz DDR3 4. 2x 1TB 7200 RPM hard drives. 5. 1 Hardware RAID controller (defaults to RAID-1). 6. 100 MBit port. 7. 10 TB of xfer each month. 8. Access to KVIMip. What more could you ask for?
The failure of DIGG came from their designers, not their programmers. This is solid advice.
Here's another tip: value user content. Your users have spent a lot of time writing content (in the form of comments, and pithy article descriptions) and submitting links. If you delete everything at the drop of a hat, then you discourage every other user from placing content on your site. The content is king: you are making money from the content submitted by others; treat it with respect.
If you can't describe the features you are trying to create it is silly asking this question.
Saw what you did? I liked it : good advice.
... I got it. ._. And I have a reason not to: I just prefer an if/else block to a ternary. 
Everything you need to know about traits can be summed up in one sentence: &gt; Traits are **literally** compiler-level copy and paste. There is zero performance gain from using traits. Traits are a *development* tool. They help you organize and re-use your code better. **However** PHP 5.4 *is* much faster than PHP 5.3 (anecdotally, 5.4 is more faster than 5.3, than 5.3 was over 5.2) There are very few new features in 5.4 (other than traits) that I think are useful in a lot of use-cases. - The new array literals (`['foo', 'bar' =&gt; 'baz']`) syntax just makes your code less searchable (try and grep for it!) - Dereferenced arrays (`functionCall()[0]`) is only useful when dealing with things like data-trees, otherwise it's a sign of poor design. - The new object-instantiation access (`(new foo())-&gt;bar()`) is also a sign of poor design, why instantiate an object only to throw it away? - Access to `$this` in closures is good, being able to re-bind it, is bad (see [this blog post](http://daveyshafik.com/archives/32789-the-closure-puzzle.html) for details) - Array callbacks are nice (`$foo = array($obj, 'method'); $foo();` or `$foo = array('className', 'staticMethod'); $foo();`) - The built in CLI-server is nice - php-fpm improvements are welcome I have a very comprehensive slide-deck on PHP 5.4 that [you can see here](https://speakerdeck.com/u/dshafik/p/lonestar-php-php-54-the-new-bits). I've given this talk 4 times this passed year (PHP UK [twice], Dutch PHP Conference and Lonestar PHP), and won't be giving it again, but if there is enough interest, I'd be open to recording a screencast...
If you're doing it for performance reasons, you're going about it all wrong. Traits aren't for performance. Traits are for reusing functionality you find yourself implementing almost identically over and over again, without forcing every class in the app to inherit it from some uber base class. Consider something like trait EventSource { private $listeners; public function watch($event, $callback) { ... } private function fire($event, $params) { ... } } Now, you could do this by writing it over and over in each class that fires events, which is just plain wrong and masochistic. Or, you could have a single global class (or object!) handling all events. I'm not even discussing this one further. Or, you can use inheritance, and force anything that wants to fire events to extend this class. Except that the `fire` method can no longer be private; otherwise it's useless. Oh, and that class you inherit from is never going to be in the right place -- it'll be either too high up in the inheritance tree, making it so that nearly every class in the app inherits this functionality it will never use; or too deep, making anything that wants the functionality shoehorn itself into an unnatural place in the hierarchy. (Which, if you find yourself having to do either one, means you're abusing inheritance. A generic ability should not require reworking half the type hierarchy, and should not be forced on types that don't need or want it.) Or, you could "favor composition over inheritance" and have a private object that handles the actual subscriptions. Only now, you have to write facade functions to pass the `watch` call off to the real object. In every class. Weren't we trying to *avoid* repeating ourselves? Or, you can use traits. Any class that wants to fire events can just `use EventSource;`. Inheritance isn't being abused, and yet you have one standard way of subscribing to and firing events, and you don't need some Utilities class to do something that by all rights should be part of the class's functionality (but can't be, because inheritance or whatever makes it painful).
No REST support. Meh.
So does something like $myArray = array(); echo $myArray['non-existent key'] ?: 'default value'; work without throwing an error about the key not existing? I don't have my PHP environment set up right now so that's why I'm asking and not trying it out myself.
That's not a bad thing in itself. I'd much rather be generally supportive of people contributing new code than generally negative towards it.
The problem is that A) if you do *truly* want a very simple user system (which is like, close to never), it really isn't hard to implement your own. If you know the in's and out's of any particular framework, it can even be a 2 minute job, since this would be one of *the* most common systems for a framework to target simplifying the implementation of. Ever meet a framework *without* some sort of built in authentication component? B) If you want your user system to integrate into your overrall app (like 96% of any web application which has users, which is most of them), it's the integration that's the hard part, and usually unique as well, not the fact that a user system within the application exists in the first place. Integration is usually quite necessarily highly coupled and complex, given the fact that user accessing can be a big performance hit if highly decoupled (due to the fact that it's one of the core parts of the system). 
well, if you write `$x = isset($x) ?: $y` if isset returns true $x gets typecast to (bool)true so its not that useful.
But you really, really shouldn't.
&gt; The fact that 6 characters is transformed into one, for one of the most used basic data types in php, is far more advantageous than an loss in semantic recognisability. Just out of curiosity, why? For me, that doesn't follow intuitively, and I'm having trouble figuring out what the payoff is for you.
I wasn't being negative. I agree with your statement. I'm just remarking that there is another framework. :)
Yeah, exactly. I wish PHP had something similar to Ruby's `||` operator, or just, you know, return `null` instead of throwing a goddamn error when accessing a non-existent array field.
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet
You can check the HTTP referer, but that can be easily faked, and not all clients send a referer. I've found the easiest approach is a [nonce token](http://en.wikipedia.org/wiki/Cryptographic_nonce). Your form would look something like this: &lt;?php session_start(); $_SESSION["nonce"] = md5(rand() + time()); ?&gt; &lt;form method="post" action="/"&gt; &lt;input type="hidden" name="nonce" value="&lt;?=$_SESSION["nonce"]?&gt;" /&gt; .. other form elements .. &lt;button type="submit"&gt;Submit&lt;/button&gt; &lt;/form&gt; And the script processing the form would look like this: &lt;?php session_start(); if (empty($_SESSION["nonce"]) || empty($_POST["nonce"])) { die("no nonce"); } if ($_SESSION["nonce"] != $_POST["nonce"]) { die("bad nonce value"); } unset($_SESSION["nonce"]); // Process the rest of the form
This looks very impressive! I have a question about the Facebook component (which I guess extends to all the API components) - does it simply wrap Facebook's PHP SDK, or is is a new implementation? We've had a lot of trouble with the official SDK, it's the number one source of strange errors in our logs, and an alternative to that would be reason enough to start using Eden.
Facebook itself is rather inconsistent in what its API returns, for what it's worth. We've been having lots of problems with it returning stale or incorrect results, even using straight calls to the Graph API.
looks like my summation above :) . I'll try it, looks nice. Thank you
Yet another horrible piece of code that gets advertised on `/r/PHP` ... Singletons, singletons and other bad practices [everywhere](https://github.com/Openovate/eden/tree/master/library/eden)!
https://github.com/Openovate/eden/blob/master/library/eden/authorizenet/customer.php Pretty much sums this library up. The code for API looks like it has been pulled from other open source projects there is no consistency of any kind. If you need to use somebodies API get a stand alone PHP client for it that is properly maintained and use it. 
While I like the massive amount of different supported apis/toolkits/etc. I don't really like the way eden works/integrates into a project/or can be extendend. **usage concerns:** - Why have different calls doing the same? Taken from documentation-page: //Generic new Eden_Session; new Eden_Session(); Eden_Session::i(); //Used outside of a class eden('session'); eden()-&gt;Session(); // alias eden()-&gt;Eden_Session(); - require_once throughout the library, instead of a solid autoloader (for high-performance scenarios one could use a classmap loader) - Related to require_once: no PSR-0 compliance (you can think of PSR-1 and PSR-2 what you want, but PSR-0 is a good thing IMO) - no [composer](http://getcomposer.org)-support **architecture concerns:** - Unit tests! Where are they? If I want to use such a large scale library in a serious project, I want to make sure the code used adheres to some quality standards. Unit tests are a part of this. - Singletons! [Why are singletons evil?](http://c2.com/cgi/wiki?SingletonsAreEvil) - [GodObject](http://en.wikipedia.org/wiki/God_object)! - So many static methods! [Why do you have to be careful about using static methods?](http://kore-nordmann.de/blog/0103_static_considered_harmful.html) All these points lead to tightly, tightly coupled code ([Why you want loose coupling?](http://www.thesoftwaredevotional.com/2009/02/loose-coupling-is-good-tight-coupling-is-the-devil.html)). A library which is developed with [Seperation of Concerns](http://en.wikipedia.org/wiki/Separation_of_concerns) in mind, lead to an easier to maintain code-base, and are usually easier to test/qa. Edit: Looks like it took me to long to write this post. Many of the concerns are already here now :-) 
It depends on which stage on development I'm in. If I'm researching, e.g. looking at the code base or API, then I usually don't write much code, but I will sometimes experiment with tweaking the code just to make sure the code really works like I thought it did. At lot of times I'll have a sandbox page just to load and execute code snippets.
its an easy mistake to make. I tend to use `@$var ?: ...` - perfect use of the @ operator unless you really need to know if it's false vs null vs 0 vs... lots of other stuff.
I think both your approach and mine would be susceptible to race conditions when several ajax requests are sent at once. A situation could arise where ajax request #2 sends an expired token, because request #1 changed the token after #2 read the token value. You would probably be better off only generating a new token on each non-ajax page load. From there have each ajax request send back the same nonce with each request. That approach is still plenty secure, but doesn't have any of the complexities that comes with managing asynchronous requests.
What is the definition of a singleton in layman's terms?
* you kind of got me on the lack of unit testing, we had them originally setup but they just got outdated. * We had require once setup on the root level components because some CMS' and frameworks required some extra steps to work with eden, otherwise i would be getting complaints about integration. The requires are specific to the component and doesn't load anything else unnecessary * You made great valid points and i thank you for expressing your thoughts, will take them to heart
class which enforces the uniqueness of it's instance
could you provide an example?
I fold this time into my estimate. Project X will take 6 hours, and that's 1 coding, 3 thinking, and 2 tweaking (so 3 coding). Before you ask "what happens if...", this is years of experience and confidence in my problem solving abilities. If you blow your estimate then you'll know better next time, I've blown enough to have a good idea, lol. Specifically, any parts of a project you've dealt with before doesn't need rethinking. Focus on the hard/new shit, you'll remember the answers to old questions, trust yourself, and keep a blog of your travels. 
This is one of the reasons I don't like charging an hourly rate. When I'm facing a design problem that I need to spend time thinking about, I'm usually not actually thinking about it while at my desk. I'm thinking about it while I'm driving, taking a shower, eating a meal, or laying in bed trying desperately to stop thinking about it so I can fall asleep. How do you bill that? I don't feel like I can conscionably charge a full hourly rate for that time, given that I'm busy in other activities, and my thoughts can be fractured by my surroundings and distractions. Anyway, I digress. To answer your question, it entirely depends on what I'm actively working on. I'm a full service dev, I do everything from the database and project architecture planning on up through the design implementation and javascript elements. In the early stages of a project I may be spending 80% of my time just planning and researching, but in the later half I'm 90% coding.
Sorry, but this is the baddest advice one can give ! "Write your own login system" is exactly why websites are hacked. When it comes to security issues people should always use the best thing on the market or the best free script. The question is very good, as even after 10+ years of PHP, most login tutorials/script are extremely shitty and would fail totally in real world situations.
Thanks for your comment and I commend your work. I've written a very similar system but did not release due to the reasons you advertised. Basically, more often than not, there are a TON of variables (features/environments/requirements) with login systems and I didn't want to deal with feature requests or benign risks. If someone wants to walk the walk instead of just bitchin they can fork and build from there.
How many hours a day do you work or do you type really, really slow? Are you documenting what you are doing or is this just "blitz" coding where you code and maybe throw in some comments in the code?
&gt;We had require once setup on the root level components because some CMS' and frameworks required some extra steps to work with eden, otherwise i would be getting complaints about integration. The requires are specific to the component and doesn't load anything else unnecessary Just create a correct [composer.json](http://getcomposer.org) including a working autoload-setup, then noone can complain about integration. Composer turned to the de-facto standard over the last months.
Singletons ensure that there's only one object of that class available to the whole application, meaning that every time you try and create an object of that type, you'll simply receive a pointer to the shared object. It's usually done by simply having a private constructor and adding a static method that returns the shared object (or creates it first if need be). They tend to be used as an easy way to have shared state across an application, such as for loggers, preference sharing, etc.
Switching the periods to commas in the echo statements above would actually be the best option - no need to concatenate if you are just echoing it all in that order.
Some time before the user is sent to PayPal, generate two pseudo-random pieces of data. One is a session ID stored in a cookie and your database. The other is a secret ID that you also store in your database, but never expose to the user. Put the session ID &amp; the secret ID into a reversible algorithm to generate a unique download ID (part of the URL). The URL with the download ID gets sent to PayPal as the successful transaction return URL. When the user comes back from PayPal, they will have two piece of information, the link ID, and the session ID. Put those into an algorithm that regenerates the secret ID. If it matches the secret ID in your database that's paired with their session ID, they get the download. The problem I see with this however, is that there's no way for a user to redownload if he suddenly loses internet or otherwise has to download again. As an alternative, I would have users create an account if for no other reason than to have that ability. With user authentication, there's no need for unique download URLs. Disclaimer: I am an amateur PHP coder. I've never thought about this problem before. I came up with this method in 5 minutes and haven't thought through all of the security implications. There could be some risk that your algorithm would be discovered, so you'd want to make it complicated. Can any one else poke holes in my idea? EDIT: I missed the first sentence with the link to some code and the last sentence asking for someone else to do the coding.... All that typing for nothing. Oh well. If anyone wants to pokes holes in my idea anyway, I'd appreciate it.
I worked in a company where we had our application. we didnt build web sites. we imroved, rebuilt, and debugged one system built in php. i would say at the beginning of projects, more time would be in the board room in mass discussions, putting stuff on whiteboards. We would convene one day a week after that, do no coding on that day, eat, drink and discuss the project. As the project neared its deadline it was all hands on deck, sometimes overtime, fulltime in front of a screen. The lesson i learnt was plan to fail, dont fail to plan. You ALL need to be on the same page. Even coding by yourself. Know where you want to go. Three rules. 1. Whats the end goal (lots of people concentrate on the middle) 2. How are you going to get there, and what mistakes have you made (meetings) 3. Get there. or repeat 2. id say your heading in the right direction.
They're generally used as an easy way to share data across a program. Consider the case of a user preferences singleton. You might have a whole bunch of objects that need to read and update the user's preferences. If you make a preferences singleton, you can simply grab the instance, update its members and now you'll be able to access the updated values from anywhere else in your code after grabbing the shared instance. Keep in mind that it's generally considered to be bad style, although there are a few reasonable use cases.
programmers are jerks (most anyway). We're hard-headed and always think everyone else is 'doing it wrong'. I think what he was trying to express was that e-commerce websites (at least, in the sense we're thinking of an e-commerce website) can be a big beast and security is priority. Not only for end users but card companies and government as well. Also, with the complexity of security needed, if you're asking basic questions as above, that maybe this is a little over your head. I'm not saying you can't do it, I applaud your enthusiasm and you're using a good method to learn, but you're putting your customer's identities in the hands of rookie mistakes. Write some code, look back at it 6 months from now (assuming you keep programming) and you'll see how 'horrible' the code is and wonder 'what in the hell was I thinking?!' The security and encryption must be pretty advanced to protect yourself from data leaks which *will* result in lawsuits and what not. He's just trying to say that maybe an e-commerce website may be a little "much" for a "newbie learning experience". Unless you're just passing cart information to a 3rd party website for CC processing (such as paypal or authorize.net). That way there's not as much responsibility on your end but still no reason to slack off. My personal opinion is to get a working site up, have your CC transactions running in a test mode, and let us know and see if we can exploit your code. I assure you, there are people here that will spend many hours to "make you look stupid" per say. If an exploit exists, /r/php/ will find it.
I am the designer, the programmer, the manager, the database administrator, and the answer boy. The company is 5 people.
everytime i encounter the eden library i just see jquery written all over it. :) anyway for all the negative comments out there, or suggestions - please take note that it's more of a library, so feel free to use or not use. just like any library you will still have to study it to feel at home with it.
so you don't like the -&gt;setThis-&gt;setThat ? well eden was supposed to make things easier for the average developer
Thanks for the concern, but as you mentioned i am just passing cart information to a third party payment proccessor, because i dont think i can handle secure cc proccessing. 
In that sense, yes, that can be true. However, many people don't like being constrained to a certain login script, and most login scripts require you to acknowledge their license when you distribute it, so with that sense, you can't exactly use it the same way you would if you were to code your own. You basically repeated what I said, if you don't have the experience, don't do it, otherwise, have a blast doing what you want. 
Wow, so many things wrong with this. So you're saying that because a soulless multi-billion dollar corporation charges other million dollar corporations extra, I should do the same for my small time businesses. Or, you're saying that because a massive corporation has stupid bureaucratic policies the encourage employees to report extra hours, I should also report false hours. Sorry, but I don't work that way.
That situation is very common. Try and find the method that suits you the most. After a while you'll either get the hang of it or you'll feel that some changes are needed. You'll work it out :)
From you design goals: &gt; Toro should get out of the way - developers should not be locked into any specific framework and allowed to use their preferred tools and methodologies. Why do you do the exact opposite thing you write? The static method calls couple the client's code tightly to `Toro` and `ToroHook`. Especially when you encourage users to put them in a constructor. &gt; Toro should stay lean - a small codebase is predictable and easy to test. Where are those tests? Additionally: You call Toro a routing library, but all the routing logic is inaccessible (stuffed into one long method with other things), because you provide a very simple FrontController. Essentially "serve" is a dispatch-call. A router should be setup wit the routes and then return the callback when you pass the request-uri/headers etc. Smaller concerns: - All the events don't get passed any params. A listener to the before_handler might be interested in the chosen callback. A listener on after_handler might be interested in the current response. - Why do you force application/json as content-type? There is also XML. And every other content-type one could serve via XHR. - Sending headers which assume a valid response when you detect XHR is a bad idea. The "controller" might fail. And then the users is stuck with all those headers already sent. 
agree :/ 
So you revert back to session wide nonces (or multiple nonces). This problem is even more difficult to workaround in single-page style ajax-apps.
The reason most people use singletons is because it's much easier to write code when some objects have global scope. The problem is that regardless of how global scope is achieved (global keyword, static methods, multi/singletons) it's still bad from a testability point of view. 
Macports does not touch the installed software which comes with OSX. It installes them in a separate sandbox like location and sets the environment. but if you use macports you need to disable the provided Webserver / Apache / PHP stuff. Otherwise you will get conflicts, since both want to use localhost
Since I am a lazy (and got some work to do) I'll just quote [the blog of Scott Densmore](http://blogs.msdn.com/b/scottdensmore/archive/2004/05/25/140827.aspx) which pretty much provides a direct answer to your statement: *They're great for a simple way of making configuration or state available throughout the application.* &gt; True, they do this, but at what cost? They provide a well-known point of access to some service in your application so that you don't have to pass around a reference to that service. How is that different from a global variable? (remember, globals are bad, right???) What ends up happening is that the dependencies in your design are hidden inside the code, and not visible by examining the interfaces of your classes and methods. You have to inspect the code to understand exactly what other objects your class uses. This is less clear than it could be. The urge to create something as a global to avoid passing it around is a smell in your design; it is not a feature of globals/singletons. If you examine your design more closely, you can almost always come up with a design that it is better and does not have to pass around tramp data to every object and method. 
The problem is that at this point they already fucked up by not architecting a proper foundation. What they did is got couple of clients and mashed it up together under single directory with an autoloader/etc. The only way OSS can help is by blowing everything away and starting over. You can make your own Eden by taking other PHP 5 API clients and adding a wrapper and autoloader on it, does not change the fact that the clients will have a completely different architecture/code/approach.
&gt; entity versions of these two, \&amp;test1; and \&amp;mantra\. When these entites [*sic*] are expanded In the above, test1 is surrounded by punctuation *ampersand* and *semi-colon* whereas mantra is surrounded by punctuation *ampersand* and *period* Usually punctuation characters are pretty critical in this kind of context (xml document) Has there been a transcription error? Because that makes it quite.... not useful. Except at the end: the recommendation is to use php::libxml_disable_entity_loader() 
Here just a few days ago we were bashing websec.io for not being a reliable resource and now look at this gem. I didn't even know about XXE or even the entity feature of XML. Great information.
Agreed, now that I am a master of php date and time functions, I'm getting paid big bucks (read: $$$).
What a horrible website
I've added a new post trying to explain little bit better what should be done : http://www.mirosvrtan.me/blog/2012/08/php-fatal-errors-into-exceptions-natively/
So far I only tried testing out the TUmblr API, and no luck got an error right from the start. include('eden.php'); $key = 'RANDOM LONG KEY'; $Secret = 'blah blah'; $auth = eden('tumblr')-&gt;auth('[TUMBLR_KEY]', '[TUMBLR_SECRET]'); I couldn't even get past that line. I followed those direction I couldn't get past that line so no Token or nothing to move to the next step with. Can you give an working example script? 
You know, I pretty much just finished writing some code that logs a user in... I'm planning on getting it on github soon, I can send it to you if you'd like? I'll have to get home and get off of work first. I planned on posting it here when it's complete so r/php can rip me a new ass hole too.
I can see your point. But I think what I'd rather see is a traditional framework cross-built between the two platforms. That's something I'm disappointed in Zend with. If you want to make a framework, make it in both PHP and C, using the same test suite for both. That way, if you can use the PHP version for dev and testing, and swap out to the C version if you need the added boost. &gt; I'm not that bothered about understanding exactly what the framework is doing just as long as it works and behaves in a predictable manner. How often have you had to go look at the source of a particular class or method because it wasn't doing exactly what you expected??? I know for me, that's quite a bit... &gt; If people started to see Controllers, Views, Routing, Requests etc. more like base components on the same level as a PDO I think the general level of PHP development would improve. The only reason that I would be 100% opposed to this is that there's no standard way of implementing MVC. Each framework has their own spin on each, with different functionality and implementation architectures. If there's a reasonably common pattern (like PDO implemented), then great! But for things as fluid and changing as the ones you listed, I'm not so sure...
&gt;It shouldn't be any concern of yours how the framework operates. The framework publishes an API, and you should program to that interface, and shouldn't be concerning yourself with the internal details. Wrong. It should be a priority to understand how your chosen framework operates. *Intimately*. If something unexpected happens, being able to easily trace execution is a big issue. People often blindly trust frameworks and libraries to do things with no understanding of what they're really doing. Then when bottlenecks, vulnerabilities and other issues crop up, they are powerless to deal with it. The point of a framework is not so you can stay ignorant of how things work. It's so you don't have to do the work again and again which is a big difference. &gt;Again, you're getting into territory that's really none of your concern. If you experience bugs that you think may be attributed to the framework code, then submit a bug report the framework developers. Other devs that are comfortable with C will also be submitting patches. You can keep saying this, but it most certainly is your concern if you're going to dedicate money, time, and resources to it. Most shops employ system administrators who (if they're doing their jobs) keep a very close eye on what the things that run on their server are doing. but I think it is important that the programmer have a decent working knowledge of how the libraries they use work at a lower level if they are to use them optimally. Yes, this means PHP's C libraries as well. You may think it doesn't matter, but this is one of the major differences between the amateur/intermediate and the seasoned professional. Having your library in PHP means it is easier for more of your team to interpret, and therefor easier for them to use optimally. &gt;Why would you want to fix it yourself? Even with traditional frameworks you shouldn't be changing the core code, as you risk breaking upgradability. Because sometimes showstopper bugs in libraries can mean the difference between launching on time and putting things off. Asking yourself why you'd want to "fix it yourself" is really silly. *The whole point of opensource is to empower you to be able to fix, change, and extend things as you require*. I'm not even going to bother with the rest of what you've said, because preaching ignorance as acceptable is downright stupid. You don't have to know everything, but you shouldn't purposefully shut yourself off from things either.
You're doing something wrong if you're concerning yourself with the implementation of a class or method. You program to the interface. Period. That's a fundamental aspect to object oriented programming, and it doesn't require further debate. As already stated, you fix show stopper bugs through inheritance or decoration. Modifying the source of a framework module is simply foolish. Have fun upgrading the framework in the future without losing your changes, or manging patches. Your whole comment feels argumentative for the sake of being argumentative, and I feel dumber for having read it.
You're totally unspecific, what you want to accomplish, what you want to read about. Therefore there is solely one answer: http://php.net Seriously, what do you want to learn about - PHP and (Console-Programs|Design-Pattern|Databases|Web-Frameworks|Webservers|Hiistory|.*)? And please: If you expect over people to donate time in answering such broad questions, take the time yourself to fix **obvious** typos in your post. I mean, we're not the PHO-subreddet, right? ;)
Thanks for taking the time to write such a lengthy and useless reply. I'm sorry my typo while walking n typing on iPhone offended you so much. I got 'beginning php and MySQL from novice to professional'. Maybe I'll have more specific questions later; when I do I invite you to correct any typos I make.
I will, thanks. 
Ya? Alot of people recommended notepad++, what are the major differences?
Thanks, I'm goin to look into this. What are the major advantages? I'd prefer a program that does not complete tags or add any code
[this](http://text-editor.pikimal.com/vs/gedit/notepad-2#side-by-side-comparison) is the best comparison I've found... personally though it's a taste preference. I got used to gedit from years spent on a linux box.
I would consult a Vietnamese cookbook
I see the point in using any template engine that doesn't allow PHP in templates, that it will be really hard to put business logic in the views. That was the main reason when I decided to use [TWIG](http://twig.sensiolabs.org/) for the project.
Oh dear... Code doesn't become beautiful just by formatting it in a more appealing way.
They (most likely) don't hash them See [this page](http://stackoverflow.com/questions/8226887/password-systems-which-ask-for-individual-letters-what-do-they-store) for someone else who asked this question, and someone who gave a much more comprehensive answer than I can.
So do they leave them as plaintext? Isn't that incredibly insecure?
See my edit. I guess banks trust their own security and hope they won't get hacked. 
When I made the form I had to download a load of files to put it on my site. The thankyou page is it's own file. I have pasted the contents to pastebin: http://pastebin.com/H2bevvxn
I guess they could just hash each character individually but I imagine they don't and either just 2-way encrypt the password or store it in plain-text (which is very doubtful).
Your response text is in a &lt;pre&gt; tag, which is for preformatted, displayed-as-is content (no HTML tags rendered). Get rid of the &lt;pre&gt; tags, or if they're part of the results from the service, unformat your response content and just save it as a plain text file. Also, since this content is being dynamically included within another webpage, you do not need the HTML structure tags, just the content formatting ones.
If you store credit card data on your server for E Commerce, the amount of security you need requires encryption. I can't imagine the same laws dont apply to the password storage for online accounts.
I would say that they do encrypt the passwords (this is different from hashing)
Please make sure your 'Thank You' page ends in .html. As in, re-name it from 'Thank You' to 'Thank You.html' I just submitted the form again and I received a 404, it's attempting to look for '/Thank You'. This is why it shows up as plaintext.
They probably don't hash passwords with soemthing that most novice developers use like md5 which is only one way. They probaby encrypt the full password with a two way key and salt and go about that way. This allows them to pull the password and select letters to use to check. Keeping some data in plain text would be a horrible idea and I highly doubt any bank is using it. If someone grabbed their data base, it would be easy to keep refreshing the string until the letters you have fit the password
Sorry but I'm in over my head here. When you say the &lt;pre&gt; tags, are you referring to the &lt;h1&gt; tags in the Thank You file? 
Okay, no problem. Did you have to write any code at all for this form to work? Or was it all auto-generated/given to you to upload to your website? How is it attempting to show the 'Thank You' page in the 'contact.html' page (when a form is successfully submitted)? Is it using PHP?
I would prefer my passwords to be hashed and salted using a strong algorithm (e.g. bcrypt) so that it is much harder to recover them if the bank's databases were to be leaked. However, encryption is much, much better than storing them in plaintext. EDIT: Changed SHA to bcrypt
The contact form is the only part which is called into the contact.html and it is done so using: &lt;iframe style="margin:auto auto auto -30px;" src="contactform.php" width="700" height="1000" frameBorder="0"&gt;&lt;/iframe&gt; The rest is all automated, the form is scripted to display certain php files (in this case the Thank You.php).
While you're here, I'd like to thank you for Laravel. Its rad as shit.
I just submitted the form directly via contactform.php and it still shows up as plaintext. Also, it took me to " http://www.md-auto-tech.co.uk/Thank%20You". Again, no .html or .php extension. Are you 100% SURE that the 'Thank You' file has an extension? It not having an extension WILL cause what we're seeing to happen. If thats not the case, this is definately something that is being caused by the form script. To be able to further help you, I'd have to see the contents of 'contactform.php'
thank you kindly
Encrypting passwords is almost useless. All you need to do it get the key that will be in multiple places and very accessible. EDIT: I forgot I was in /r/PHP. No use in trying to tell anyone here about good security.
If you want I can take a look for you. I'd need access to the source code though. Send me a message if you want me to have a look.
It's best to use an [Iterator](http://php.net/manual/en/class.directoryiterator.php) rather than glob()
I can confirm this. Worked at a credit union for a few years and hardly anything was encrypted and what was encrypted was never properly encrypted. People would shit if they knew how vulnerable their financial data really is.
Agree with the sentiment but SHA was not made for password hashing. Something like Blowfish (bcrypt) is a better choice.
Could you explain why SHA-2 is worse than bcrypt?
Sure, I have added them to pastebin, I appreiate the help. contactform.php - http://pastebin.com/pgtTZuNs contactform_process.php - http://pastebin.com/F9wHxAFs 
I've just uploaded the site directory to a filehosting site in a zip. Hopefully you will be able to have a better look at the problem this way, thanks. I'll pm the link to you.
Probably not. The credit union I worked at was _very_ small. We had about $40 million in customer deposits and less than 5,000 customers. The software we used was one created especially for credit unions by a super small shop in SC with the original version coded by two guys. It was shit, trust me. Overall, credit unions are awesome. NONE of the problems associated with bank, better customer service, not contributing to the financial collapse, more honest, etc. I'd recommend it.
Is bcrypt still better than hashing multiple times using SHA-2?
Can you explain why?
Yes. The SHA family of hashes were designed as message digest hashes; that is, they're for verifying that a string of data was not altered in transit. They are designed to be very fast (we use them to check the integrity of several terabytes of data at a time). A modern GPU can crunch millions of SHA hashes per second ([oclHashcat-lite 0.10b10 x64 is capable of 267.1M SHA512 hashes per second](http://thepasswordproject.com/oclhashcat_benchmarking)), so the number of "multiple times" you would have to use for SHA hashes is ridiculous. The bcrypt algorithm, however, was designed from the start for password storage. It is designed to be relatively slow (target 1-1.5 seconds per hash, but even 0.5 is good for most use), but not so slow as to be unusable. The algorithm is also very difficult to implement in GPU, and even then the gains are negligible. Other benefits of bcrypt are built-in per-hash salting and variable rounds.
So, say I did 267.1M hashes using SHA-2, that'd be in the target 1-1.5 seconds per hash, so would protect against rainbow tables?
It's not because multiple times of SHA (512 or another strong encryption) is bad. It is definitely better than a single time, as it can't (as easily) be cracked from rainbowtables as well as taking longer time to compute (good against bruteforce). But the thing is, that you're trying to make your own encryption scheme, and you could run into weaknesses in a version of SHA/MD5/whatever. It's like building your own cryptographic algorithm. That's where bcrypt is better than any homemade construct: bcrypt has been published and in use and presumably inspected for flaws by many people over quite some time. This is basically the only hard measure of security that you can get in cryptography. The generic advice of "do not define your own algorithms" applies here too.
So the problem with using SHA is that it may have a weakness in it?
What is the value of $success_page in 'contactform_configuration.php? I recieved your PM but cannot view the zip at work. I saw your files via your pastebin links below.
Rainbow tables are something else entirely. Variable rounds are mostly for defeating brute-force attacks by increasing the amount of time it takes to generate a hash. If you insist on using SHA-2 in this manner, be aware that there are possible attack vectors which might greatly reduce the time it takes to brute-force. While some operating systems use SHA-2 password hashing techniques, none of them use straight hashes and mostly rely on the HMAC variant of these algorithms. But really, as simple as bcrypt is, why not use it?
I guess, I was just wondering if SHA could be secure.
I just downloaded the file. I found the problem. * 1) Please open file 'contactform_configuration.php' * 2) Go to line 19 * 3) Change the value of '$success_page' from 'Thank You' to 'Thank You.html' * 4) Save file, re-upload to server * 5) Re-name "Thank You" file to "Thank You.html" Your problem should be solved now. 
You can get the key if you own the whole website and access the salts but for simple dumps, you wont be able to do much vs a plain text database.
I do this when I migrated a project so the people didn't need to change their passwords.
Doubtful, they'd probably encrypt it in a way that it can be decrypted. ROT13 anyone?
Haha, I'll rephrase, I was wondering if just SHA functions can be secure
Well, actually, they really do want you to phone up for password resets. In any IT industry that deals with password resets via phones, they're always the most common type of call. Ergo, they're the most profitable type of call.
Fair enough. I actually expected you to come back at me with, "Well, yeah, in a *perfect* world, that's how you would do things, but we don't work in a perfect world." I understand there's a difference in point of view between the theorist that sit around talking about how things *should* be done, and the men and women in the trenches actually doing things. Honestly though, it's been *years* since I've had to touch the core of any framework I'm using. There are better ways of getting the behavior you want. Git is no magic fix either. It's easy to think you can just merge framework upgrades with your branch of the framework, but in reality things are often not that simple. There's nothing worse than trying to pull changes, and seeing a dozen different merge conflicts. I'd rather just not touch the core code in the first place. As far as "The Root Of The Problem" goes, we're talking about different things. There's a **big** difference between understanding the architecture of the framework you're using, and understanding how a method is implemented. You absolutely should understand the philosophy upon which the framework is built. You're not going to get the most out of the framework if you don't, but there's no reason to concern yourself with how Web::fetchFile() works. Whether it uses curl, or fopen, or raw sockets, it's not your concern. I'd be lying if I said I never looked at the source code for a framework though. I've ~~stolen~~ borrowed plenty of code from Zend Framework, but I don't program to the implementation, and I still don't change the source. &gt; What if the bug is in a named function? Now, you need to wrap that function in another, and then do a grep through the entire codebase to swap out the usage You may be using a poorly written framework. Patterns like dependency injection solve those kinds of problems, and some frameworks (Spring comes to mind) handle those types of problems very well. The framework classes shouldn't be calling another class method directly. It should be getting the class from the dependency container, which itself should be easily configurable. Listen, I've sat on both sides of the "in theory" argument, and nothing irks me more than brash young kids trying to school me on theories they read in a book. It's easy to say, "Use dependency injection!", but it's much harder to actually do that. They've never had to deal with budgets, or deadlines, and that's where a lot of that theory goes out the window, and you find yourself doing whatever it takes to get the job done. However I have found with a bit of patience, and thinking you can correctly apply programming theories and design patterns, and your work will be much less of a headache. One of those practices for me continues to be "don't hack core". If you want to look at the core code, fine. If you want to play around with it, fine. But in my working life I don't concern myself with it. Ultimately 50% of the modules you use every day aren't open source, or they're written in a language you don't know, and you are stuck working around the module API. Surprise, surprise, the sky hasn't fallen down because of that. As for SkepticalMartian's argument above that these frameworks are open source, which means you're supposed to hack away at them, I think that's just nonsense. PHP frameworks aren't exactly open source by choice. If you're going to write a PHP framework, you really have no other option but to make it open source, but that doesn't mean the devs have purposely made it hackable. I'm sure those devs strive every day to make sure you don't have to hack the framework code. Finally, I always enjoy your blog posts, and right now your posts are really the only ones I take seriously. But I did see in another thread someone asking you to write a post about PECL frameworks, and *blamo* less than 24 hours later you had a post written. I think though you may have rushed to judgment in order to get the post out there quickly. Many of your arguments could be easily applied towards using a memcached lib written in pure PHP vs. using one of the PECL extensions, and I'm sure most of us, including you, are using one of the extensions. The face that frameworks are bigger than simple libs doesn't change the rules.
I know a store that stores credit card numbers on their email account, in plain text. Are there actually laws that regulate this?
Hashing is a one way process. You can't unhash a password except by using a rainbow table or a brute force attempt to hash every possible password which could take decades or centuries depending on which hashing algorithm they use, whether they used a salt, how long the password is etc. Less secure hashes with short passwords could be brute forced very quickly though. They are likely encrypting the password, which means it could be unencrypted. They would use an encryption certificate and store the certificate and certificate key somewhere.
Yes, PCI compliance. expanding on this, I was on my phone earlier. Basically, PCI compliance is something a company will follow to be able to take credit cards. Here is the wikipedia: http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard There are a number of things they have to do to take credit cards correctly, or they can be fined.
I'm very cynical, so I'm open to the possibility that many banks do something insecure, like encrypt (not hash) the passwords with a "master key" that they try their best to keep secret. That said, it's possible to design a secure encryption system that meets the requirements you posted (only entering a subset of the characters when logging in). ##Prerequisites: 1. You need to know enough algebra to know how one solves a polynomial equation of degree n, e.g. y = ax^0 + bx^1 + cx^2 + ... 2. You need to know how to store arbitrary data as a number (e.g. take its binary representation and think of it as just a really big number, with millions or billions of digits) ##Explanation: As you should know, the degree of the polynomial is one less than number of points you need to uniquely identify the polynomial. For example, a 0th degree polynomial (i.e. a constant function) needs 1 point to completely specify it. The point (1,3) uniquely identifies the 0th degree polynomial y=3. A 1st degree polynomial would need 2 points to fully specify it (for the same reason you need 2 points to specify an arbitrary straight line). A 2nd degree polynomial would need 3 points to fully specify it, and so on. Let's say you form a secret club with 10 members, and the biggest secret of the club is a secret polymonial. No individual member knows what the polynomial is, and even if two members conspired together, they still would not be able to discover what the polynomial is. You want it so that you need 3 members collaborating together to uncover the secret polynomail. How do you do this? Just randomly generate a 2nd degree polynomial, and give each member different random single point on that polynomial. Since it's a 2nd degree polynomial, if you only know 1 point, you have no idea what the secret polynomial is. And if you and a friend share your points with each other, the pair of you still don't know what the polynomial is. But as soon as three of you get together and share your points, you can uniquely identify which 2nd degree polynomial was chosen. Hopefully you can see how to easily extend that for any number of members (not just 10), and any number of minimum collaborators (not such 3). So now you know how to have a secret polynomial with a minimum number of collaborators; how do you use that to have secret data with a minimum number of collaborators? Just represent the data as a number and call that number d for data. Now when you generate a random polynomial, just make sure it passes through the point (0,d). The only way to retrieve the data is to uniquely identify the polynomial, then solve the polynomial at x=0. Okay, so now you can secret store data with a minimum number of collaborators, how do you use that to implement the above password system? Instead of having 10 friends, of which at least 3 of them need to share their points in order to retrieve the secret data, imagine you have a password that's 10 characters long, and you need 3 of those characters to retrieve the secret data.
Sending the new password through email just makes email the weak link in the chain. I can't think of any major email providers that offer two-factor auth by default, and people probably aren't going to pick the most secure password when it's "just email". Sending it through postal mail isn't going to work when I need to transfer $200 into my checking account tonight or face eviction. While I agree a one-way hash &amp; reset is much, much more secure, more companies &amp; government agencies work this way than you'd think. They've chosen to take on a little risk -- well, more accurately, their customers take on the risk -- in exchange for lower customer service costs or what they think is a better customer experience. All security is about trade-offs in the end. It's why we use padlocks instead of armed bodyguards to secure our gym lockers. If you believe strongly in security above all, then please make a career out of it and make the case to companies like this. There have been way too many password leaks and security breaches in the news lately. I'm not defending the state of things by any stretch, just trying to shed light on why things are they way they are.
Slow is good when it comes to hashing. Very good. The faster the algorithm, the faster a bruteforce attack will succeed. Ideally, a hashing algoritm for passwords should be very computationally expensive, as a legitimate use of it is only done very seldomly (on password changes and logins), while a non-legit use would require it to run billions of times in a loop.
&gt; Slow is good when it comes to hashing. Which is why I said bcrypt is better
Perhaps they hash it per-character.
What do you mean by security token?
If they're charging for support calls, sure. But if it's part of customer service, then it's a cost to the company.
&gt; There's nothing worse than trying to pull changes, and seeing a dozen different merge conflicts. I'd rather just not touch the core code in the first place. I'm not arguing that point. In fact, I agree 100%. That's why I advocate a guideline to never modify 3pd code. But it's a guideline. Sometimes there's no alternative. Sometimes, it is the best option. And in those cases, it may be better, faster, more efficient and more responsible to edit the 3pd code than not to. But that's a judgement call that needs to be made... &gt; Whether it uses curl, or fopen, or raw sockets, it's not your concern. That's very true. The point that I was making is that needing to go deeper happens often enough where the inability to go deeper is seen as a problem (to me at least)... &gt; You may be using a poorly written framework. Almost all of the PHP frameworks fall into this category in at least one part or another. DI is still a very new concept to most PHP developers, and the first generation implementations leave a lot to be desired... &gt; As for SkepticalMartian's argument above that these frameworks are open source, which means you're supposed to hack away at them, I think that's just nonsense. I partially agree. For the argument as written, I definitely agree with you. But I think the truth is somewhere in the middle. One of the powers of open source is that the community as a whole can make it better. So if you're working on an edge case that nobody has encountered before, it may be worth while (to the community) for you to edit that functionality into core (or fix the bugs) and submit it. Obviously there are fine lines there, and there's no golden rule, but it's very much a gray area as to the benefit... &gt; Finally, I always enjoy your blog posts, and right now your posts are really the only ones I take seriously. Thank you very much! It's very encouraging to hear words like that. &gt; I think though you may have rushed to judgment in order to get the post out there quickly. For the details in the post, perhaps. But for the main concept, I've been thinking about it and discussing it for quite a while (months at a minimum). My position on it is pretty well developed. The post itself was put together quickly, and some of the points could have been better developed... &gt; Many of your arguments could be easily applied towards using a memcached lib written in pure PHP vs. using one of the PECL extensions, and I'm sure most of us, including you, are using one of the extensions. Well, this is where I would disagree. I think the requirements for a library are very different than a framework. The library doesn't impact your architecture. The framework does. The library doesn't couple you to it. The framework does (to some extent at least). If I wanted to swap out the memcached library for the memcache one, I can just write an adapter. If I wanted to swap out Zend for Symfony2, it's a much bigger task... Additionally, memcached has a significant and measurable performance gain over doing it in PHP. That's because all of the low level network operations and wireline format parsing that happen are far more efficient in C than PHP. For cases like that, I'm 100% fine with using a PECL extension. But in cases where the performance gain is negligible for a real-world application, I think the downsides outweigh the importance of that gain for the vast majority of use-cases... PS: It's nice having a real conversation on Reddit, instead of the normal mix of ad-hominems and Dunning-Kruger arguments... So Thanks!
Yes but why even address them? It's a never ending circle.
Misleading description. The PHP 5 wrapper is not used on CollegeHumor, Vimeo, etc.
They may hash different combinations which are all predetermined at the same time it hashes the original password. But I wouldn't give them that much credit.
* Loose typing means requests can take up 80+ MB each on the server. * Not good for web sockets since they keep streams running constantly. * Built in language functions are not OO. * There is no standard naming convention for function names. I learned PHP inside and out. I loved it. It was the first language I really mastered. But now I realize aside from it's popularity its not that great.
No, it's simply too fast to decode to ever be secure on its own.
Decode via brute force / rainbow tables? What if you rehashed millions of times?
Slightly off topic, and in no way answering your question, but if you're new to ZF, any reason why you're not starting with ZF 2.0? If it's all new to you, might as well grab the updated one.
&gt;It includes time-saving functions like usort(), file_get_contents(), and other functions which in C++ would take pages of code This guy, this guy is funny. Pages of code? Haha, no. Both of those are maybe 10 lines tops.
I was initially writing an in-depth answer to each of your points, but I started to go in circles. So I try to take a another approach. I'll talk about different design flaws separately. **1. Singleton** - Why are you going this route in the first place? Is there a resource which can only be used one time in the runtime environment? **No!** There could be multiple independent Memcached-objects at any given time, and each could use an independent instance of your Wrapper-library. One could argue, that you do not want to have multiple of your Cache-Layers around the same Memcached-object. But this is a user's configuration-problem and would not even lead to bigger problems. Some memory wasted on duplicate local objects, maybe. But this is the only thing I can see so far. And even if that is of your concern, make it a Multiton at least. **2. Static methods** The reason to go the Singleton-route in the first place, that there is only one single **instance**. So if one wants to do something with this instance, e.g. retrieve a cached value, he will go and **get the instance** and get a cached value from the **instance**: $cache = Cache::getInstance(); $cache-&gt;get('foo'); Now, you argue "Well, but i need to pass my configuration at some point". This is also done on the instance: At one point you have to call: $cache = Cache::getInstance(); $cache-&gt;setup($configuration); If one tries to get a key from the cache, before any setup is called, get should throw some kind of LogicException: "Please set me up first!" This example also shows the reason why a Singleton is bad in the first place (see 1.). In case you are tempted to pass the parameters to the `getInstance()`-method: Don't! This makes `getInstance()` look like some kind of [factory-method ](http://en.wikipedia.org/wiki/Factory_method_pattern), which might be backed by a Multiton. If I call getInstance() for the 2nd time with different parameters I would not expect the first object to change. **3. Conclusion** class Cache { public function __construct($servers, $prefix) { ... } public function get($key) { .... } .... } What does look so bad about it? - I can use the caching-layer with its anti Dog-Pile measurements with as many independent Caching-Pools as I like. **CHECK** - I can still cache keys "locally" in each Cache-instance. **CHECK** - I can easily use it with any dependency-injection container **CHECK** - I have no tightly coupled calls to the class-name, and can change the implementation as long the new one sticks to the same interface. **CHECK** - It's easy to read and understand. **CHECK** 
Database connections cost a lot of resources. So instead of creating db connection for every sql statement you want to run. Using a singleton could insure just one database connection and you use that single connection to run all of your sql statements.
Do collisions significantly reduce the security of the system?
&gt;Loose typing means requests can 80+ MB each. That has absolutely nothing to do with loose typing and everything to do with memory management. If you don't handle your memory properly, your application will leak regardless if it's written in a strongly or weakly typed language. &gt;Not good for web sockets since they keep streams running constantly. Don't be silly. [It](http://code.google.com/p/phpwebsocket/) [can](https://github.com/ghedipunk/PHP-Websockets) [handle](http://www.htmlgoodies.com/html5/other/create-a-bi-directional-connection-to-a-php-server-using-html5-websockets.html#fbid=jPxUCnOdVmh) [websockets](http://net.tutsplus.com/tutorials/javascript-ajax/start-using-html5-websockets-today/) [just](http://socketo.me/) [fine](http://srchea.com/blog/2011/12/build-a-real-time-application-using-html5-websockets/). If you're going to argue that it eats up the memory because it's long-lived, then you need to realize that you'll have the same problem in any language if you don't handle your memory. This is the same argument as the previous point. &gt;Built in language functions are not OO. Uhmm... http://php.net/manual/en/language.oop5.php http://www.php.net/manual/en/book.datetime.php http://se.php.net/manual/en/spl.files.php etc. &gt;There is no standard naming convention for function names. http://www.php.net/manual/en/userlandnaming.rules.php http://svn.php.net/viewvc/php/php-src/trunk/CODING_STANDARDS?view=co &gt;I learned PHP inside and out. Somehow I doubt that.
If they occur frequently then yes, they do, it makes brute forcing easier. However, I don't know if this is the case with SHA-2.
From [Wikipedia](http://en.wikipedia.org/wiki/SHA-2#Cryptanalysis_and_validation): &gt;Some of the applications that use cryptographic hashes, such as password storage, are only minimally affected by a collision attack.
&gt;PHP chews up more memory. I can write code in C# and let the garbage collector do its thing. It can hold thousands of records and still be using less than 50MB. PHP can also handle thousands of records using less than 50 MB. C# can also leak massive amounts of memory provided you do not handle your memory as you should. There's no point in lying about it. &gt;Its the weak typing. This article shows how an array of integers will take up 18x more data than other languages http://nikic.github.com/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html Are you serious? Like said, you'll leak memory if you do not handle it properly. Arrays isn't some container you should just casually throw data into. You should mind your data structures *in any language*. If you want to code like a \*bleep\*, that's certainly your prerogative, but don't blame the language for you doing so. Also, this is a comparison between apples and oranges, as it's not even the same type of data structures. PHP arrays and C# arrays are not really comparable, as they are fundamentally different, both in function and design. Also, PHP is an interpreted language, where-as C# is a compiled language. &gt;do not. This is a common theme that you see with variable orders in functions as well. Did you not *read* the two links I posted in my response, addressing this? As for "variable orders" (or *arguments* as the rest of us call them), yes, they're inconsistent, and that's the only real argument here. Aaaaand, I think we're done here.
How do you know? Is their source available somewhere?
Ruby and Python are both OO interpreted scripting languages that aren't as sloppy and use much less memory. My first project in Ruby was to make a blackjack simulator that would play thousands of games of backjack instantly. It didn't use much memory. Is is not as dynamically typed as PHP but I think it is a good trade off.
&gt;How do I launch the website from within PHPStorm and use the debugger to step through all the code? 1. First you need to set up PHP. Install PHP, then add it to PHPStorm via *File &gt; Settings &gt; PHP*. 2. Then you need to set up [Xdebug](http://xdebug.org/). Check phpinfo() so you know it works. 3. Then you set a breakpoint in your index.php, right-click and click *Debug 'index.php'* 4. Once debugging, use the "step"-menu in your debug pane to step through the code. 
These articles that bash php are rarely of quality. If you don't like it, go back to your fanboy language of the moment and leave us alone.
Really, really great advice, thank you! I love the talk outline you suggested. I am not sure though what you meant by these two sentences: &gt;There is no Microsoft Research behind PHP who are able to craft a set a languages and a few exhaustive APIs out of thin air. &gt;Everybody knows the blogs. Lastly, could you expound more on the last paragraph? I do understand it but I believe you have more insight to share about it, which would be invaluable.
So you're saying memcached can only be run once in a single instance? What if I'm using PHP FPM/FastCGI and create multiple Memcached instances for several requests in the same process? Boom??
This belongs in /r/phphelp.
I'm seeing people talking about handling memory. As a newer programmer, what do you mean by this and how do I accomplish it?
BASE ENCODE
"retrieve your salts from files" is the second part you seem to have missed and has nothing to do with SQL attacks. 
1.1) PHP does not seem to have the manpower to design a great language and comprehensive API from scratch. Many competitors do, e.g. ASP.NET or Java, which even include nice IDEs and stuff. Python, Ruby and PHP are a lot smaller than these 'enterprise' products. 1.2) Due to the particular community that PHP attracts, bad coding practices have remained common. On top of that, PHP has always had a legacy-friendly approach (opposed to Python 2-&gt;3 or Microsoft's huge .NET transition), which helped keep a ton of language flaws alive. Read PHP - A Fractal of Bad Design if you haven't already, and the follow-ups on hackernews, codinghorror and by Fabien Potencier. 2) No, I can't. I'm no PHP professional, I don't know the industry. I just read too much Hacker News, Stackoverflow and job offerings. I'd actually like to have this backed by a few professionals, still hoping for them to jump in :-)
Honestly? I would bet they don't even hash them. Also, I think that given A, B, C, f(X+Y+A) and f(X+B) and f(Y+C), you'd still have a decent chance. I'm not a cryptanalyst though, so I wouldn't implement it - it's not positively known secure, so it's not secure.
I was adding to your previous statement. If they've got all of your banking information, you're already royally fucked. Access to your email is nothing compared to what they just got. And yes, they do have to trust their security. They do things like store everything in different tables with IDs that only match through a hash that's not stored in the same place, and probably varies depending on other seemingly unrelated variables The security is insane, and enough to make your head spin. It's crazy shit like junction tables that join tables using indexes that are encryption keys randomly generated on the fly so that you can't just download all of the tables, you can only see which username belongs to which account and which password belonged to which login name if it's ON the server, so that if someone exports it all and downloads it, it'd be useless information. You'd have a list of usernames and a list of passwords, but nothing telling you which one belonged to which.
As usual, he's a voice of reason.
Meh. Not great. 
The top replier's [link](http://stackoverflow.com/a/8228314) answered that question: basically, that would be better than plaintext, but still much less secure than standard hashing. The reason is that if you have a database of hashes of three-letter combinations, those are very easy to crack if compromised. Assuming (as is standard) "the enemy knows the system", and they know which combinations are hashed (i.e., the 1st/2nd/5th, then 3rd/4th/8th), then that has made their password cracking job much simpler, because brute-forcing a three-letter string is easy, and because it gives you their positions, it reduces the effective password length by that many letters. Worse, the more hashes they store (and less overlap between them), the more insecure it is. Let's say they require 9-character passwords, and store its hash plus the hashes of three non-overlapping 3-character substrings of it. Well, now you really only have to brute-force three 3-character passwords, which is exponentially simpler: if n is the password length, and you store the hashes of k equal fractions of it, then you have `n! &gt;&gt; k*(n/k)!` i.e. it's easier to guess all combinations on the right-hand than the left-hand side above.
Depends on your approach, this approach once loaded will keep settings for faster execution during the run time. Look more into Memcached::DISTRIBUTION_CONSISTENT or Memcached::OPT_LIBKETAMA_COMPATIBLE. This dude above has no clue what he is talking about, I let him rant for a bit but it's just getting ridiculous.
Completely different, my wrapper is optimized and supports some of the techniques that larger sites use to scale. 
You're talking about two-factor authentication. The REAL two-factor. Many banks claim two-factor but are not. That should give you a term to Google to see what it's about and why it's good. As someone else said, your bank is doing things right. Kudos to them.
&gt;As for SkepticalMartian's argument above that these frameworks are open source, which means you're supposed to hack away at them, I think that's just nonsense. At no point did I say that. Stop trying to put words in my mouth. I said the whole point of *open source* is "[..]to empower you to be able to fix, change, and extend things as you require.". Of course you don't randomly edit everything. However, if there is a critical issue in a library that leaves the company at risk, I'm not going to let it sit there until someone I don't know finds the time to deal with it. I'm going to do something about it.
PHP is easy to pick up and is really fast for time to market. It was born of web apps and is well suited to them. It's also incredibly fast to start (a novice can install WAMP and have hello world on a fresh computer in minutes- try that with C, java, etc. It's got all kinds of free/open frameworks. Stackoverflow WILL have a quality answer to your question. FRAKING FACEBOOK is written in it!!! Uni students will love that. It's easy to debug- and easy to deploy.
So, in that case, is it ever possible to implement a secure solution using 2-way encryption? What if the decryption key wasn't stored on the server but only memorised by authorised users?
http://imgur.com/JLyWL.jpg
Thanks man, great reads. Do you have some recommended readings as well about the opposite, i.e. the good aspects of PHP?
Other good alternatives are Mercurial and Bazaar. I'd say Bazaar is easiest to get started with. Edit: subversion is very old. I don't recommend it.
Yeah...subversion kinda sucks, really. Especially compared to most of the decentralized stuff (Git, Mercurial, Bazaar). But it works, and it's relatively simple. Git gave me migraines for a while, then stuff finally started to click. Like i said, learning curve. 
Can you clarify which files you're talking about? Are you creating an application which provides an interface for managing files that change periodically, or are you just attempting revision control (history, ability to diff and roll back) on the source files for your PHP application?
I think you are describing the state of Javascript right now.
You forgot- open the command prompt. Today's kids want to write cool web based things- not console based utilities
Good question, and given that others have already pointed him at RCS systems like Git I will answer how to do an application that provides revision history for files the application itself generates from user input, which seems like the question he's trying to ask: 1) Don't try to store the diffs only, this just complicates things for a storage benefit that is almost always not worth it. 2) So, store each entire document for each version you want to save in history. Then if you need to show the differences between them just diff the different versions. to show changes. Basically you seem to be going about trying to store diffs in order to generate documents when it's much easier to store the entire documents and then compute the diffs between them when needed. This is how mediawiki (wikipedia) works for e.g., they use mysql but there are other wiki software examples where flat files are used and you can probably just use one of them (a good one I used many years ago is https://www.dokuwiki.org/dokuwiki).
Then why even mention C or Java? I just gave the "hello world" for C... that's what was requested.
tl;dr PSR-0, PSR-1, PSR-2 compliant CLI library. Support defining/parsing arguments and flags, data validation (w Closure support), perform map operations on input, define descriptions, and get pretty help pages right out of the box.
I wouldn't worry too much. /r/PHP is well known for its crab mentality.
There's also [docopt](https://github.com/docopt/docopt.php) for PHP.
I especially hate the load times for enabling/disabling modules. We do a lot of custom modules and during development have to disabled &amp; re-enable them constantly. Sometimes it can take 3-5min to enable a module. Which adds up when you do it 20 times in a day.
Xdebug!!
If you don't want to force GIT/VCS on your codebase, just store the full text of every revision. When you want to show the differences, just use a diff engine to do so. Here's one such package: https://pear.php.net/manual/pl/package.text.text-diff.php just google "php diff" for more, I spose. It's not DB efficient, so keep that in mind -- but unless they are editing the library of congress, it's probably not something to worry about right off the bat.
I forced myself* to adopt Drupal. I hated it at first, but the more I used it the more I liked it. It's not for every project, but for anything that is even vaguely CMS-y, it is my preferred platform. I love how you don't ever have to hack the core. The hook system is robust enough to have smoothly been able to handle everything I needed to do. And if you are having trouble with keeping instances synced, I must ask - are you making use of the sites directory to its fullest? Each URL can have its own sites folder and use its own modules / themes / assets, or rely on sites/all for shared modules. That should fix your problem if I understand it correctly. *I forced myself because I was trying to get the Zappos front-end developer position and zappos.com is run on Drupal. I knew nothing about it but wanted to have a little experience during the interviews so I could at least give some basic thoughts on it.
PHP is not limited to basic web apps. There was a post a few months ago about PHP scripts that went beyond the normal scope of PHP http://www.reddit.com/r/PHP/comments/s9t3k/im_trying_to_find_really_unique_mindboggling_php/ PHP hasn't come close to achieving it's full potential. There are only a few instances where you can't yet do something with PHP (like device drivers, 3d game engines, real time video decoding/editing/processing, etc.) but many things that aren't possible with PHP alone can be enabled by writing an extension.
About the only thing that makes me looking alternatives to PHP (for server-side web development), is the lack for persistent connections. This makes writing next generation so called real-time web applications impossible with PHP. I'm not sure how this can be fixed? Some options are: 1. apache mod_websocket module and ability to use PHP as a handler, or something like mod_php_websocket. 2. cgi, and fcgi to support this too. Are any of you aware of such projects that are trying to solve this? Right now it seems people are implementing this with embedded web servers (node.js for example), but that's a problem too.
Follow [these instructions on how to set up the debugger](http://blog.jetbrains.com/webide/2011/02/zero-configuration-debugging-with-xdebug-and-phpstorm-2-0/) exactly.
yup. install git. go to the root folder of your files and type "git init". bam, you now have version control on your local box.
[Here you go buddy](http://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/).
Well not exactly Java. They push for the inclusion of [invoke-dynamic](http://de.slideshare.net/buzdin/invoke-dynamic) into the JVM, so they can "compile" PHP for the JVM. Java != JVM
It's not just as capable as PHP. You can't disable PHP on your browser, or have a browser that doesn't support PHP. You can disable JavaScript in your browser or use one that doesn't support it (text-based browsers). It's because it's client-side and not server side. You can only do so much client-side, eventually you'll need to do something involving the server (such as accessing databases, or modifying server-side files), and JavaScript simply can't do that.
I disagree with using classes sparingly for all but the simplest of projects. Organizing your code now can save you a lot of headache later.
Using classes sparingly, thus preferring functions, is not in itself mutually incompatible with good code organization; there's nothing stopping you from grouping your functions properly sans using classes. Testability is also another concept OOP proponents like to boast, as if functions couldn't offer the same level of testability as objects. On the contrary, I've seen many projects with an explosion of classes and objects, with objects using and abusing other objects endlessly down the rabbit hole, ad nauseam, that a simple glance of your code is insufficient to examine just what the hell is it's doing. More often than not, writing it is another level of WTF; you see endless questions from developers -- sold on OOP being The Only True Way -- on what goes where and which does what. This trend towards class orgy in PHP is mind-boggling to say the least. 
I appreciate your no nonsense application of critical thinking in answering OP's question. We shouldn't always assume OOP is the right tool for the job, nor assume we need a complicated ORM for a simple application. I'd also like to add that PHP has a wonderfully flexible and versatile array type that often could be, and should be used in place of objects. However, functions don't really have a place in a system designed on OOP principles. I *might* be okay with my classes calling functions within the same name space, but even that's debatable. I like my dependency injection too much, which until recently would be impossible to accomplish in functional PHP.
Also... there are actual debuggers that will show you code running in real-time, like xDebug.
I love when articles or speeches have a tone of "it's easy, don't worry, you can do it" so I think it would be cool if your talk made the students realise PHP is accessible and for every skill level. (Some of the students probably hate programming and think it is difficult).
I prefer the [Symfony Console component](http://symfony.com/doc/current/components/console.html). It doesn't seem "OOP bloated" to me. It's a single line in your composer.json: "symfony/console": "&gt;=2.0.10" And it looks something like this: class Build extends Command { /** * @see Symfony\Component\Console\Command.Command::configure() */ protected function configure() { $definition = new InputDefinition(); $definition-&gt;addArgument(new InputArgument('path', InputArgument::REQUIRED, 'The path the namespace can be found in')); $definition-&gt;addOption(new InputOption('title', 't', InputOption::VALUE_REQUIRED, 'An alternate title for the top level namespace', null)); $this -&gt;setName('build') -&gt;setDescription('Processes a directory of PHPDoc documented code into ReST') -&gt;setHelp('The process command works recursively on a directory of PHP code.') -&gt;setDefinition($definition); } /** * @see Symfony\Component\Console\Command.Command::interact() */ protected function interact(InputInterface $input, OutputInterface $output) { // Do some optional interactive question-and-answer type stuff to fill in arguments } /** * @see Symfony\Component\Console\Command.Command::execute() */ protected function execute(InputInterface $input, OutputInterface $output) { // $input-&gt;getArgument('path') // $input-&gt;getOption('title') } } Edit: [example simplified from here](https://github.com/varspool/sphpdox/blob/master/lib/Sphpdox/Process.php) - that's about as complicated as it gets.
I know it is mentioned (and some people don't like it), but you are kinda describing JavaScript here. * This point does maybe not apply to JavaScript; it has the best features of JavaScript at least ;) * With Node.js and a framework like Express.js writing a backend in JavaScript is just as easy as using e.g. PHP and Slim. * Did someone say Node Package Manager? "npm install ..." * Kinda agree, JavaScript is definitely "in" right now. A lot of great minds are working on great frameworks, both on the frond-end and with Node.js back-end. * True. And using tools like jslint you can get syntax checking everywhere, including Emacs :) * This doesn't apply to JavaScript at all :P * I think so. I know, JS sucks for many reasons, but so does PHP (the inconsistensy, jesus, have to look up argument order/return values for built in functions all the time). There is of course no perfect language, but JavaScript is at least moving towards a _complete_ web-language, as it is used all the way down, including databases (document based JSON-formated NoSQL anyone?). 
&gt; not to an exact line but same concept So, yes, you admit that they didn't use that library, so you are intentionally mispresenting. "Same concept" is not the same as "XXX is using this library".
&gt; Due to the particular community that PHP attracts, bad coding practices have remained common. I can *assure you* this is not specific to PHP. At least 90% of the ASP.Net code I see in the corporate world is absolute shit. Just as bad and often worse than a lot of PHP code out there. edit: *typo
Protip: Don't say plox. You are not on teh chanz. What do you want the plugin to do? What do you mean by "sweetest?"
I am interested in this as well, ideally non branded.
Nice one.
I'm a big fan of Pagoda Box
I am hoping that multiple MVC libraries pop up and show their power, there is no reason why Javascript can't load a HTML template into a variable and modify it. There shouldn't be a need for a separate web server, and even PHP is proving this, they have that functionality built in now. Most PHP best practices these days use seperate templates, I don't know why you would need to do the whole &lt;?=$this?&gt; when you can do a .replace("%this%", "Text that should be there"); (Just an example) The above example should be cleaner, and requires the same amount of ram etc.
Thanks. This is useful. I edit the OP to show the reason for the app and what kind of data i'm storing.
I edited the OP to show the reason for the app and what kind of data i'm storing. 
It's not a no-brainier. The server is not hooked to the public internet. Edit: Also I will not be able to easily get any other sotware installed onto the server. I had to push for months to allow PHP to be installe.d
&gt; It doesn't seem "OOP bloated" to me. Was that a joke? The OP's post is 100x's less "OOP bloated" than the gigantic Symfony example you posted. Extend a class, override a method, and then implement using 3+ different classes just to create a single option? I'm not trying to discredit the Symfony component, if that's the kind of flexibility that you need then it looks great for that; but, your argument that it's not "OOP bloated" seems really poor.
It's not terrible, but like everything if it's not the right tool for the job there will be ridiculous headaches. Keep in mind that working with Drupal is very different than working with most other CMS solutions. They do things a little differently so if you find some things don't make sense, just post in the Drupal forums and ask about. The Drupal community is quite great. source: at a previous job I came in without any Drupal experience and was thrown in to developing an intranet solution with drupal6. Without the community and the Drupal book I bought I would have been confused for a lot longer.
Although he didn't exactly state it, I assumed he was talking within the context of web apps.
And this is where I've lost a tiny bit of love for PHP - there's too many places where the equivalent Bash or Python script for such-and-such functionality can be written in half as many lines, and in a less-clunky fashion. There are some obvious high-notes with PHP: quick to deploy, and good devs can develop good products with it... but then you see stuff like Fabric, or BeautifulSoup, or the CSV class, or GTK, just to name a couple Python examples, and you realize - there's no way anything of that caliber is getting written in PHP. So when you say that PHP hasn't come close to achieving its full potential, I would agree, but I'd also state that I don't foresee that ever changing - anyone who's clever enough to use PHP to a higher potential will likely shift off into a different language, or a different tool. But... that's just like my opinion, man. All I'm speaking from is my own experience. It's been good to me &amp; it's paid my bills, but every chance I get where I'm not writing code that's gonna directly result in a web page - I'm writing it in something besides PHP.
Re: Node.js - any solutions for embedding code in HTML with something like &lt;? ... ?&gt; ? Not untested third-party, but something solid, efficient and well supported.
&gt; Symfony 2: The Orgy of Objects 
What you're doing should work. If it doesn't, there could be a bunch of issues, either with your PHP setup, the server, mailservers in between spam filters and whatnot. If it doesn't work out of the box, i'd strongly recommend using [Swiftmailer](http://swiftmailer.org/), because it abstracts away a lot of the hassle. 
[sending text messages with PHP](http://davidwalsh.name/send-text-message)
Yes it might not include some of the internal logging that we used and statistic stuff.... Keep on trucking. 
Basically it was just a pre-caution from people extending to the class and doing something weird like over writing get/set for example. If you know what you are doing feel free to remove final keyword and extend to it (for example to wrap get() with statistic stuff) But if you would extend to it and wrap get() without checking local storage or doing unwrap() etc while set() remained original then there would be some issues with data integrity that I wanted to avoid. Perhaps a better approach would be to make specific methods final but I figured if you already know what you need to do, just remove final from class and do whatever you want.
Really? I actually like that website quite a lot. Are you on a phone or something?
Well, this is the PHP forum. If you aren't here to support PHP, you're a troll. There's the door.
My point is, if you use the logic of "If I get hacked, my salts are taken anyways so I am not going to bother encrypting anything", you completley open the door to easy database leaks. SQL injection is one of the easier things to do so if you aren't encrypting, anyone can paste a exploit code into your form and dump your database. If you encrypt user data, at least they can't do much with this data. Yes, if someone finds a way to own your server and get your PHP files for example, they are going to see your salts if you do it with a static salt string in your functions but to obtain these files is much harder than dumping a database using a simple SQL injection attack. Goes back to locking the door of your house. It will keep the simple people trying to turn the door knobs out but if someone has a battering ram, they still can find a way in. As for myself, I have built things with both. If its a customer data website, I encrypt traceable user data with salts like emails, passwords, and personal details. If its a beefier system with more processing power, I use different salts stored for each user data set. 
Google-fu?
The best VPS host I know of is [Linode](http://www.linode.com/). They have a lot of documentation on how to set up servers and everything. I've learned quite a bit by switching to Linode. [My Referral Link](http://www.linode.com/?r=f8a4a023534052e01f0add10131116499b81607a) if you go with them.
Crap, I was here for the free beer and the ladies, you sayin' this isn't the place?
I've opened my first Linode account yesterday and man it feels good! Full control! So long CPanel!
&gt; Zend Framework2 Lol: * Clean Code: yes * Convoluted Code: yes * Half Finished: yes * Pissing on their own userbase: priceless
 It sounds like the problem you are having is that you have a bunch of CSS with relative image paths. The easiest solution is to make your CSS use absolute paths.
&gt;Problem is, I need the CSS and pictures included as well. What does this even mean? CSS and images are in the domain of the browser, not PHP.
Thanks, I think I was originally going to use PHPMailer but it was a such a simple form that I thought it might be overkill. I'm a PHP noob though so I could be looking at it the wrong way. I ended up just using, mail($textrecipient, "", $textmessage, "From: $email\r\n");
I'm a little confused about what problem you're trying to solve. Is dot syntax not an option? i.e. include('../navbar.php') will grab navbar.php from the parent directory relative to the current file.
The fastest that I know of is the default PHP [XML Parser functions](http://php.net/manual/en/book.xml.php). They use the SAX parser, and are extremely fast. They take a little while to get the hang of though. It also works well with partial XML documents, which it sounds like is something you require.
What this sort of thing makes me wonder is, what are all these big frameworks bootstrapping that's making them load so many files, use so much memory and serve so little page requests? Wouldn't it make sense for them to be as modular as possible and most stuff turned off by default? Then the person who is developing the website can decide what stuff they need turned on. Why would you turn on everything and the kitchen sink for a base install?