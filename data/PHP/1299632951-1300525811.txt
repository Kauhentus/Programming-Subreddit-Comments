PHP's built-in autoload function might be the best option (fast, least overhead, no code to write) if you can conform to the naming convention. That used to be a chore before namespaces came along. But now all you have to do is mimic your namespace structure in your file structure and you're set.
I recommend trying Symfony. It is built to be data-driven, and since it uses Doctrine, your model is mostly done for you. I'm primarily a ZF coder, but I know enough about Symfony to get me by. AFAIK, there are some scaffolding functions for automatically generating an admin also. The point is there are some great data-driven tools. Symfony is built to make some decisions for you, and it has some great modules included like sfGuard for permissions/acl, and Doctrine for the Model/ORM. If you've never used a 'magic finder' with an ORM like Doctrine or Propel, you're really missing out. The api is really nice.
Valid questions Martel and we're all around to help eachother out, so no worries. Famousadphilosopher did not set up a true singleton, but rather designed a class with all static methods and properties. This means that essentially it is to be used as an all-static class of which no object is to be constructed. [Static](http://www.php.net/manual/en/language.oop5.static.php) members are shared throughout all instance of that particular class. Whether you use an all-static approach or stick to the singleton design principle, is up to personal preference. One thing to note, is that it is impossible to pass 'Base' around, since there is no object reference. This is where an actual singleton would come in useful. You are completely correct about the storage of the database instance. It does indeed get added to the associative array. There are two reasons why your proposed alternative would not work out: 1) Since 'Base' is not an actual object instance (but rather to be used as an all-static class) using the -&gt; operator will throw a fatal error. There are two operators for objects: the [scope resolution operator](http://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php) (::) and the arrow operator (-&gt;). The first is used to resolve static members of a class, beit methods or properties. The last is used to resolve instance members. Recapping, 'Base' in the example is not yet an instance, therefore the arrow operator can not be used. 2) The associative array $_classes is actually defined as a static private property, meaning that from the scope of your example you will not be able to access it. If you had made the $_classes array public like so: public static $classes = array(); And then attempted to execute: $database = Base::$classes['Database']; That would have succeeded. Although, note that famousadphilosopher deliberately sealed off this property, and 'promotes' use of the get() method so the class is capable of handling any exceptions. As for a true singleton implementation: class Singleton { /** * Holds a reference to our singleton instance (if any) */ private static $_instance = null; /** * Ensure the constructor is private (or protected) to prevent external instantiation */ private function __construct() { } // Example method public function mowLawn() { } /** * Retrieves an instance of this singleton (constructs one once if needed) */ public static function getInstance() { if(self::$_instance === null) { self::$_instance = new self(); } return self::$_instance; } } And the above Singleton class in practical use: $singleton = Singleton::getInstance(); $singleton-&gt;mowLawn(); 
Generally, singletons in php are static, so you wouldn't call it with the arrow. In order to keep anything in Base::$_classes[], it would need to be stored in a session or cache object. Base is basically a factory pattern. It might be a good idea to separate the factory methods into its own class. Also, if you're going to roll out your own db adapter, I would strongly recommend extending PDO.
Email: http://www.phpexperts.pro/images/email.png I'm on FreeNode #phpexperts almost all the time.
The thing about Prepared Statements is that it is not so much a method of *[preventing](http://en.wiktionary.org/wiki/prevention)* SQL injections as it is a method which is *immune* from it. [SQL Injection](http://en.wikipedia.org/wiki/SQL_injection) attacks work by breaking out of an expression and injecting additional predicates into the SQL statement. Prepared Statements instead pre-compiles the statement. The external parameters are then assigned to the compiled SQL statement using bind variables. Because the statement has been pre-compiled, the malicious code cannot break out of the statement because there's no statement to break out of. Prepared Statements are therefore immune from SQL injection attacks.
Something like this? http://gluephp.com/
&gt; You are right, there is no such thing as classful design. It is called Object Oriented Programming. Object oriented programming isn't what the web acts like it is. It's two different small, simple things, depending on which crowd you ask. The original crowd wanted it to be asynchronous unguaranteed messaging to interfaces. You see systems like that in Objective C, Erlang and Smalltalk. Bjarne learned it in Smalltalk and wanted something like that with compile time safety and efficiency, so he made C with Classes, which became C++. Because C++ became so visible, most people in the era learned OOP from C++, and therefore the world was given what most people think OOP is, the C++ model. Mind you I'm not criticizing that. I prefer it to the original. The points are varied: 1) They're two very, very different things. 2) Neither of them are particularly important. They're convenient, and in some cases can help you avoid some classes of error, but all things equal, if they disappeared from history, we wouldn't be all that much the worse for it. I do a fair amount of OOP, don't get me wrong; I'm not saying it's a bad tool. I'm just saying it's not a particularly big deal; it's convenient and it's easy. People who are deeply fascinated with it are usually either rank amateurs with golden hammer syndrome or language designers looking to change how it works. 3) What you probably think of as object orientation isn't even normative. There's a third kind - prototypical orientation - available in JavaScript, ActionScript, et cetera. There's a fourth kind - declarative typing - available in Mozart, ADT, Coq, and I think maybe OcaML or Eiffel or maybe Haskell. Then there's all the ML stuff and the ... I'm not even getting into haskell, thanks. Pain in the ass language. There are class systems in cross-language loader interfaces like COM, CORBA, etc. There's a good argument for calling .DLL and .so class systems, or maybe even kernel modules and blah blah. &gt; I do not think I was trying to be clever. You're trying to make a class and use autoloading to get around require_once(). That is *the* *definition* *of* unnecessary cleverness. Just remember one thing and you'll be fine. Cleverness is where almost all of your difficult bugs come from. If you want to be clever, do, but it comes with a cost; you should use it sparingly, and always have A Good Reason (tm). Just fucking require a require list. &gt; am just trying to design a system correctly. The first steps, in being an amateur, of designing a system correctly do not come in the form of trying to get around basic system affordances. Do you have a project specification yet? Do you have a functional specification yet? Is your timeline realistic? Do you have a deploy scenario? A deploy environment? A testing environment? &gt; I want to build something that is easily maintainable and configurable. Then say that. http://www.amazon.com/Continuous-Integration-Improving-Software-Reducing/dp/0321336380 &gt; The tone of the response almost made asking the question not worth it. Then you're in the wrong line of work. There are two echelons in this occupation: the meritocratic group where every "do it right" is a learning opportunity to be appreciated, or the "you didn't have to say it like that" types who don't get help a second time and end up maintaining web pages for a living. &gt; Here is a picture of how I felt after reading your response. &gt; &gt; http://i.imgur.com/ho9O4.png That's the purpose. That way you won't make this mistake again. Software development is critically sensitive to Doing It Right in a way that almost no other field is; when you combine that with the sheer amount of logic and complexity we face, about the only peers we actually have in terms of the criticality of non-failure are doctors, mathematicians and life-critical engineers, and even then mostly only in the extreme cases. And even in those cases, the only people who deal with the sheer volume of trivia we do are medical doctors. We don't tolerate failure for one very simple reason: we *cannot*. What you are receiving is not a shame or an insult. It's a gift phrased in the only way that'll make it stick fast enough that it'll matter. Software is a meritocratic occupation by demand. You either look at that as "holy shit, i fucked up, thank you" or you take umbrage and say "maybe it's not worth it." If you're the latter class, it isn't, because if you aren't a self-oriented perfectionist, you can't climb very high in this line of work. Real engineers believe every fault belongs to them. RAND has a fairly famous story in their basic training, which is given from everyone from the CEO to the janitor. Really, the janitor gets two weeks of mindset training, just like everyone else, and it's been shown to pay out. One of their very important ones is about a guy from one of the Los Alamos testing sites who bracketted a wing brace on upside down. The result was that the wing fell off in flight, and several tens of millions of hardware were unnecessarily destroyed. Most places someone would get fired for that. At RAND, it was officially not the grunt's fault, for specific reason, and a manager got promoted over it. What? No, seriously. What happened was the guy's manager came in and said "wtf, you're triple-fired yesterday." That manager's manager came in and said "well slow down, what happened?" The engineers there were following standard practice at the time: if you have four bolts, put them on in a rectangle, because that's the most rigid basic arrangement available. This second tier manager took RAND philosophy to heart: "if a problem happens, it is the fault of the process. Change the process to make the problem impossible." So he mandated that one of the bolts be offset from the rectangle in every design his team produced. This meant that bolting arrangements were 5-10% weaker on average. However, this also meant that it wasn't physically possible to put them on wrong. RAND had to use slightly heavier duty bolts to compensate, which are slightly more expensive, but eliminated an enormous class of error in response, saving them anusloads of money. And then the second tier manager fired the first tier manager for almost throwing away a very valuable learning opportunity because he was angry at a big money loss and needed to scapegoat some grunt who was following an imperfect process to the best of his ability, and whereas grunts do their job, managers are expected to understand the process, and RAND was structured specifically to prevent that. And that's why RAND makes so very fucking much money: their shit always succeeds, because in a very serious sense, there are no faults there, only learning opportunities. That sounds like glib bullshit, but if you stick to it, you get a very different outlook on life and projects and how hard-asses respond to you. Why? Because they're expressing annoyance that you missed one, and treating you like you should hold yourself to a higher standard. Why? Because it's the only way you'll succeed. I'm not being mean to you, and neither were your professors. This profession is a meritocratic austerity for a reason: because it's the only way you'll ever succeed. We're trying to give you the way of the samurai. Stop being so god damned butthurt, accept that a learning opportunity is worth any amount of egg on your face, and stop being so whiny in your thank yous. &gt; None the less, thank you for it. You're welcome. ---- TL;DR: would you want me to not break your arm to re-set the bones, if it had set wrong, just because it hurt?
might help for yii http://www.larryullman.com/2009/06/18/introduction-to-the-yii-framework/
CodeIgniter's documentation is excellent, and it's very easy to read from the start right through to the advanced stuff. I started learning CI about 3 weeks ago and I'm very happy with where I am now, and it's all from just reading the documentation.
Sure.
I use [PHP Fat Free](http://fatfree.sourceforge.net/). Pretty straight forward, lightweight.
I'm not taking offence, nor are my sensibilities hurt. I'm just saying it's not the right place.
Thanks again!! :) I will certainly sit down with this.
Full of BS you are. http://fullof.bs/john-haugeland/
noted. will bookmark. thank you!
Thank you, I will continue to focus on CI. 
I like ezSQL, I've used in a few projects. 
It's probably due to copy+pasting this from the live page, but `&lt;table&gt;` and `&lt;/table&gt;` are missing. IE really hates that. It shouldn't affect form submission, but this is Internet Explorer we're talking about. It might inject `'&lt;/form&gt;&lt;table&gt;'` somewhere. Try installing the official IE developer toolbar from Microsoft. It should/ might show you the HTML as IE interpreters it. It might also help to try IE8, which is a fair bit different than IE7. The cache headers may work better when you get your server to send them, as opposed to META tags: &lt;?php header("Pragma: no-cache"); // etc. Are you developing locally? IE has different 'zones' and might behave differently when it thinks your site is an intranet page.
Well another approach which has not been mentioned is [output buffering](http://at.php.net/manual/en/function.ob-start.php). Basically, you buffer everything that your script outputs instead of sending it to the client. When the script reaches its end, you fetch the output and wrap your thing around it. See the following example: // this goes at the start of your script // any output made using echo will be held back ob_start(); /* your script here */ // stops output buffering, fetches the string $myOutput = ob_get_clean(); // now you can do whatever you want with it, i.e. // prepend your header, and output the result echo add_header_and_stuff($myOutput); If your concern is related to html and template manipulation afterwards, you might want to take a look at i.e. [Smarty's way of template inheritance](http://www.smarty.net/inheritance).
Most tutorials about CI 1.7 shoud apply to CI2.0. http://codeigniter.com/user_guide/installation/upgrade_200.html basically these are two things You should change in 1.7 tutorials: Step 6: Update Class extension All core classes are now prefixed with CI_. Update Models and Controllers to extend CI_Model and CI_Controller, respectively. Step 7: Update Parent Constructor calls All native CodeIgniter classes now use the PHP 5 __construct() convention. Please update extended libraries to call parent::__construct().
I went through framework selection a few weeks ago, and settled on learning Yii until I know enough to decide why I would need something else. It's fairly new, but seems to be backed by some smart and hard working people. Here is my Yii bookmarks folder dump: [Yii resources](http://www.yiiframework.com/resources/) [Yii tutorials](http://www.yiiframework.com/tutorials/) [Yii playground demo application](http://code.google.com/p/yiiplayground/) [The Definitive Guide to Yii](http://www.yiiframework.com/doc/guide/) [Larry Ullman Yii tutorial series](http://www.larryullman.com/series/learning-the-yii-framework/) [Building a Blog System using Yii](http://www.yiiframework.com/doc/blog/) And I'm a sucker for dead trees so I bought this book: [non-affiliate amazon link](http://www.amazon.com/Agile-Web-Application-Development-PHP5/dp/1847199585/ref=sr_1_1?ie=UTF8&amp;qid=1299675123&amp;sr=8-1) [amazon affiliate link](http://www.amazon.com/gp/product/1847199585/ref=as_li_ss_tl?ie=UTF8&amp;tag=henrygis03-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1847199585) ninja edit: formatting
Heh, that's kind of my point. You have to use the parameterized interface, because stripping "known bad" characters and escaping can be worked around if you forget to use single-quotes, and planning to never forget to use single-quotes is just planning to fail. I guess I should have been more explicit. Always use the parameterized interface, kids!
This has to be the most over-the-top reply - mind you, not necessarily incorrect - I have read in a while. Then we get to the point of whether the OP actually gains anything from your response, which is a definite no. Hats of to you, kind sir.
Yes, it's searching the current directory for "resources/connect.php" but when you're running from cron, the current directory is your homedir rather than the web site's root. Either provide the full path in the require_once() or have your cron job cd to the right place first: (cd /path/to/script; php scriptfile.php)
That, or let the requiring PHP-file (in your example cron.php) change the working directory itself through use of [chdir](http://php.net/manual/en/function.chdir.php): chdir(dirname(__FILE__)); The actual argument being the target working directory (in this case, the script's directory) Personally I'd go for crackanape's approach, as PHP is known for throwing permission-fits.
You can use echo $_SERVER['DOCUMENT_ROOT'] to find out the absolute path from the OS root to your file to work out what the include path needs to be.
Still hate the form handling, but what are you gonna do...
I have reason to believe he will.
http://lmgtfy.com/?q=php+nginx+tutorial
I didn't know redditmirror was yours :) I've often wanted stats. Do you publish them anywhere?
Not sure a cron'd PHP script will have a $_SERVER variable, afaik that's only when it runs through a webserver, vs commandline.
I tested it out, it didn't have $_SERVER available. Currently playing with getting chdir to work correctly.
I was able to do a chdir(www/jobsearch) and am getting it to work. When I tried doing chdir(public_html/jobsearch), everything broke. Any idea why?
The [unofficial wiki](http://kerkness.ca/wiki/doku.php) is a great resource for Kohana. The API Browser is surprisingly helpful as well because the code is documented so well. There is also a [tutorial](http://www.dealtaker.com/blog/2009/11/20/kohana-php-3-0-ko3-tutorial-part-1/) I've used as well.
Since those are both relative paths, it will depend entirely on what PWD is when you run it.
I meant run it through your web browser first to get the path, then use that path in the code that will run by the cron... I've done it many times.
Awesome. What is the least intrusive way to contact you if i have any questions?
I did....until I learned about frameworks.
yes.
At the end of the day I think it just depends on what your goal is. Straight PHP, Framework, or CMS they all fill a purpose and why try to recreate a CMS from scratch if you need one for example.
Yup. Or I use my own custom framework.
I use a hand-rolled "framework" for most of my projects. It's really just an organization tool for me to build out an application (i.e. separating templates, utilities, and procedures by function). It's worked well for me and gets the job done.
&gt; provide the full path in the require_once() This is the best answer. 
I use my own for new projects. Personal ones I always try to use something new. Working on other projects it more or so depends on what the client is looking for\needs\has.
I use a framework, but it's an MVC framework I created myself that I use for all my personal projects. It was sort of created unintentionally, as it started off as a simple project for me to improve my skills in writing OOP PHP, and slowly transformed into something I can deploy and use easily.
I didn't until one of my websites was hacked and used to host a phishing site.
It depends of the project. Sometimes when I don't use a framework I end up writing so much code that I reuse in other projects and it's the same like creating your own framework.
I don't, but then again I also drive a manual transmission car so YMMV.
I use my own framework; the last big project I started was when PHP5 was released and PHP5 specific frameworks were extremely immature. I had even written my own frameworks for PHP3/PHP4 before that since when I started frameworks for PHP were almost non-existent. I tend to find that most frameworks solve some of the easiest problems (routing urls to code, for example) but don't tackle the hard stuff very well (or at all). And then there's the Zend framework which is over-engineered crap. I'm currently working on a new framework, based on all the work I've done before, that makes heavy use of post PHP 5.3 features (namespaces, closures, etc). 
I have my own framework for a specific type of web site that I tried to generalize for all kind of uses, but if the client's requirements aren't close to what I got, I shop and cherry picked a CMS or framework for them, create a demo app, and let them decide which one they want (good to embed sense of responsibility for technical decision to client as well).
As long as it doesn't involve writing unnecessary code and being redundant, yes. Sometimes for a small component a couple of classes are all I need.
For large projects, I almost always use a framework. For smaller things, I find that it's not really necessary, but framework components sometimes come in handy. For example, if I have to work with a database, I'm probably going to bring in Zend_Db.
Funny, I *did* until one of my websites was hacked and used to host a phishing site.
It's good to hear the docs are improving. That's the primary reason I haven't tried Symfony yet, and I've heard some really good things about it.
I found myself with so many startups that I wanted to unify on a single codebase, so I built my own little extensible framework. Frameworks are great but as I've said before, if you intend to build an actual *system* rather than a site, then you're better off with a dedicated and optimized application core than a mangled framework that's been crammed full of plugins.
simple google search for "-your framework or CMS here- bugs or exploits etc" can give you numerous ways to hack into any framework. premade frameworks are a bad idea from a security standpoint.
&gt;I meant run it through your web browser first to get the path You can't add the file to your crontab without knowing its path. Maybe I'm missing something..
Me. I build all my stuff from scratch and if I need something advanced, like ACL-based permissions, I use the parts from Zend Framework and ezComponents.
Every project I do I weigh learning a framework vs just doing it myself. As my projects are usually small and easy to implement using my existing code the framework has lost each time. Eventually I'd like to get around to learning a good framework but only when I've got time.
Don't wait too long (I'm 35 and still have to start learning/using a framework properly, because I know it will save me time in the long run)
this is nothing to do with frameworks, you just don't know how to code. yeah I expect downvotes.
I'm considering doing this, I just don't see how MVC is such a nice thing. Maybe I'm missing something. Edit: Wish I didn't get downvoted for saying I was ignorant about something. :\
This is a great point I didn't even consider.
MVC is not some new-fangled "way", it's how computer technology should and has worked for decades. It's just a separation of responsibilities to manage the inherent complexity. 1980's ATM machine for example... your bank info is accessed through some "model" of it, the little screen (and push buttons) are your view, and the circuitry that translates the buttons what you push into the right course of actions (including access your bank info and updating the screen) is a controller. This is how you SHOULD be thinking about so many things in software engineering at a primitive level. So that's why its not just nice. Granted, there ARE other structures that work too, but you should apply SOME method of separating the behaviors of any program.
Often, yes. Sometimes the web server is running in a chroot, or you want your PHP package to be portable and not tied down to a particular directory.
Sometimes, I work iteratively - so the first iteration is the most basic, untidy solution to the core of the problem. Then the next iteration will add missing bits, clean up a little. I have a tiny Registry-Template-Model framework I usually start with. Unless I decide to reinvent the wheel and grow a framework porting to Zend or Symfony comes at about iteration 10.
I'm curious. Do you think you would have gone with an actual framework if one that was really lightweight existed?
Driving manual is so much more fun any way, the whole automatic transmission thing is mostly an American thing.
Zend_DB isn't really that great. I build projects using the full zend framework structure, and for my models I've discarded Zend_Db and now use Doctrine. Check it out: http://www.doctrine-project.org/
PHP 4.0.2 - 5.3: define('PATH', dirname(__FILE__).DIRECTORY_SEPARATOR); require_once PATH.'foo.php'; PHP 5.3.x: define('PATH', __DIR__ . DIRECTORY_SEPARATOR); require_once PATH.'foo.php'; 
If it is a small, uncomplicated project a framework is just unnecessary overhead.
I disagree. I'm building a large scale web app for quite a large company at the moment, and I'm doing it all using the Zend Framework + Doctrine. Zend is a 'use at will' framework, which means you can take what you want from it, without the unnecessary baggage. What you're saying about a unified code base is surely a strong argument in favour of frameworks? I can go to a company I have no association with, but if they tell me they've implemented such-and-such a thing using Zend_Controller then I'll already know how large chunks of their code works. I tend to work the other way, and be quite suspicsious of people who seem to think they have to re-invent the wheel. They usually end up making square wheels, too.
Exactly. You don't have to adhere to the strict concepts of the MVC design pattern (like using three distinct tiers for everything you develop) but you can help yourself by applying some degree of separation. Even just putting all your database calls inside functions in an include file is start, saves them being scattered far and wide in amongst all your business logic code. Even my framework isn't true MVC, but it's a flavour of it that works well for me.
this. At least I think for most developers who have both,...freelance and part-time works..is the way to go
So, you're advocating security by obscurity?
I've used Zend Framework on a 'large scale web app for quite a large company'. And I've also been part of the team that gutted our usage of it and replaced it with a 'optimized application core' that was far more efficient.
I guess it depends on which components you were using, and what you were using them for. My app is running along just fine.
what role does age play in this? As a developer you should always be looking to expand your skills...no matter the age.
I prefer CMSs built upon frameworks; because it means I only need to learn one thing and then just build on that a little. Apostrophe for symfony is very, very cool.
You are running PHP via the command line, which may be different that running it through Apache.
How are you using Zend_Db and Doctrine? As a data abstraction layer, I think Zend_Db does just fine. If you used it as a DAL, what didn't you like about it? If you were trying to use it as an ORM, then yeah it's extremely limited compared to Doctrine.
All goes to hell with symlinks. For example, I have a directory with library files and reference classes and I symlink from it into per-project directories. But __DIR__ and __FILE__ point to the link target rather than the link itself.
Just suggesting he do it sooner rather than later (I was/am way too late).
Correct, DIR and FILE point to the target, but, the PATH definition shouldn't happen in a lib file (JMO), it should happen per app root (or config), or in OP's case, per cron script. Then it should include from the slink, which works fine as part of a full path. define('PATH', dirname(__FILE__).DIRECTORY_SEPARATOR); require_once PATH.'symlink/foo.php'; Right? 
'security by not having a million extra features that you weren't using anyway' or 'security by intimate knowledge of the codebase so it's easier to write secure code'.
For smaller personal projects, I typically start out with straight HTML. If I get past a form post or DB query or two, I'll move up to my own framework. I only start with a framework when I bother to design the whole app first. At work I need to support each project long term. Those are exclusively Symfony.
I think you convinced him.
Most likely, but it's possible that the problem require_once() was in a library file. Who knows? It's 7am. I'm going to sleep.
I just have a bunch of utility functions/libraries I've put together over the years, and expand/add/delete as needed for each project. I've found most frameworks are overkill for 99% of the projects, and for the other 1% I'll probably end up using a pre-built CMS or a system like Drupal. So by-and-large I find most frameworks out there totally useless, since I already have the written code to accomplish most tasks. Also I find OOP in PHP adds way too much unnecessary overhead and complexity, so all my libraries are written procedurally. It's rare for even the most complex projects of mine to take more than 0.05 seconds in processing on each page load. I'd like to see other frameworks/CMS's beat that.
Zend is great for big projects, some people do choose using some of its libraries in their projects. The whole MVC is kind of confusing there, though. I think the most important thing about using any framework is that you're actually familiar with OOP, otherwise all frameworks are gonna look pretty confusing. Zend has some major advantages if you're comming from PEAR and have to do something big. I've read Yii is the framework with the easiest learning curve though... give it a shot and let me know if that worked for you
what benefit do you get from using a custom made framework over something already created. I know there's a learning curve, but a publicly available and popular framework stands to have more people then just you who are familiar with it, which means more users are finding, reporting, and fixing bugs in the framework. What do you see as advantages of a custom build framework rather then an open sourced one with a community backing it?
any software that isn't properly maintained and updated can be bad from a security standpoint. You need to make the same decision about a framework you make about every other piece of software used to run a website. Since this is /r/php, it's safe to say for most of us, the entire stack down to the operating system itself is all open source, and is all just as open as a framework is to vulnerabilities.
You are indeed correct. It's been a very long while since I've programmed anything using straight functions. The actual code I have (that I generalized (incorrectly!) from) was more similar to this: **a.php:** class A { public function loadFile() { require('b.php'); } } $instance = new A(); $a-&gt;loadFile(); b(); **b.php** function b() { echo "Hello!"; } The require/include in a function **inside a class** will put it back in the parent scope. Thanks for pointing out the error. I'll edit the original post to make sure it's obvious that it's incorrect.
I don't, but then again I only do tiny personal projects with PHP and actually enjoy reinventing the wheel as it often helps me understand and appreciate other implementations.
You're indeed correct that it's not a true singleton - it's kind of a poor man's singleton. I don't enforce it as a singleton from the class itself, but just from how I access it. I'll only ever have one instance of the Database class in my code as long as it's always retrieved with Base::get(). It still leaves open the option of instantiating another one if you decide you really need to. (For instance, our application here always uses the get() to retrieve an instance of the Database layer, except in one segment of code where we need to access another MySQL server - it creates a new instance to use for that segment.) The reason I made Base all static in my example had little to do with the idea of a singleton, and more for convenience in accessing the methods (and thus accessing your Database layer) from various scopes.
There are lots of potentially serious edge cases around this. Remind me why we aren't require_once()ing a file called requires.php which contains a bunch of other require_once()s again?
Well, just to clarify, I'm not claiming that creating custom-made frameworks is the answer, I completely agree with using solutions that are already out there rather than reinventing the wheel every time. But as I said, my framework came out of a culmination of various scripts I developed whilst I was training myself on more advanced PHP techniques and use of OOP design patterns. So, in summary, I personally would not outright build a framework from the ground up when I know it's been done countless times before.
&gt; security by not having a million extra features that you weren't using anyway A framework isn't about providing features (although many do). A framework is just a series of conventions to group and relate common components to web applications. Any additional "feature" is not the framework. Kohana, which is relatively small, has a large number of components that do incoming and outgoing path and url manipulation to "assist" in using the framework. This never sat well with me. Everyone can benefit from a framework (reuseable namespaces are a defacto framework) because collaboration requires that we follow some patterns to minimize duplication.
If by project, you mean small, one-off script to do data-munging... yes.
The only reason I haven't tried Doctrine yet is because all my old projects are rather heavily invested in Zend_Db. I definitely plan to check it out for future projects though. Edit: that being said, it does have its limitations. It can't handle a lot of more complex queries.
Basically, it's a time-saver. It keeps me from having to write SQL myself. Plus, it's well-tested and has been reviewed by a lot more people than any code I could write.
Could you show us the contents - or an extract - of text.txt and what you would like extracted from it?
I see. Your original post led me to believe you were treating Base as a singleton instead of Database. My apologies :)
I have obviously missed something very important, as both your original explanation as well as your example seem to be spot-on: variables (or the actual symbol-table) are scope-bound (and thus are influenced when inclusion is used), while definitions such as functions/classes are global regardless of scope. How was your original post incorrect? I would appreciate it if either of you could enlighten me. Thanks! :)
Sure thing, forgot about that( badly translated and shortened but it's this in essence) Mr/Mrs. *Name of the person* Declaration: For "tax purposes", according to the the "general tax law", article 170º, "Name of the Law", we declare that *name of the person* with SSN #########, has made payments related to school expenses that amount € ###,##. Director of the Department (some legal jargon here) Name of the Director [Signature Space] Mr/Mrs. *Name of the person* Declaration: For "tax purposes", according to the the "general tax law", article 170º, "Name of the Law", we declare that *name of the person* with SSN #########, has made payments related to school expenses that amount € ###,##. Director of the Department (some legal jargon here) Name of the Director [Signature Space] (...) 
What if you run into two people with the same name? 
well technically, all security is through obscurity. But it certaintly helps to not have bugs and security flaws published on the framework's official website/forums/bugtracker. Additionally when you use a framework you have to trust that the framework is using best secure practices, you can't really modify the framework or you won't be able to update the website when the framework is updated. When you don't use a framework then all security is on you.
Never happens( It's the person's full name), and the names match exactly - the data comes from the same place, some issue happened with the addresses though( lack of foresight I believe...)
Just to make clear, my main issue is with extracting the values from the text. And I don't want to have someone make all the work for me, just some help :) I need to hit bed now, I'll continue to work over this tomorrow.
Thanks for the sample. Am I correct in thinking that you want to extract just the pieces of information? So, a name associated with an amount (in euros)? If so, try the following regular expression: that ([a-zA-Z ]+?) with SSN (\d+?), has made payments related to school expenses that amount € ([0-9]+(?:,[0-9]*)?) To ensure this works within PHP, ensure you are using [preg_match_all](http://php.net/preg_match_all) (preg_match simply halts after a single successful match) and ensure you have enabled multi-line detection using the 'm' modifier. Edit: Modified the regexp once again, since the 'we declare' portion is not really needed.
&gt; yeah I expect downvotes. Why? You're exactly correct.
I've only just started looking at it, but is anyone else put off a bit by the verboseness of everything?
Thanks for the reply. Ran it trough [http://gskinner.com/RegExr/](http://gskinner.com/RegExr/), seems to work, I'll try to run it over the file tomorrow(2am here). Thanks again. 
More than welcome. And whoa, awesome link there! :o Also, I would recommend - like Nicoon in a now-missing post suggested - to do a triple-check on the actual data in the file and ensure that all the captures work as intended (names with initials and such for example)
There is something to say for us old guys being set in their ways. I'm 30 but in internet years that's like 70.
PHP semi-noob here. What exactly are these kinds of frameworks for? I've used Wordpress, but that's about it. Are frameworks all CMS's? What's a good place to get started, and where can I learn more?
A framework is like a library of common functions and snippets that save you time and a lot of lines. You are probably familiar with WP's functions like the_header() and get_post()? A framework can be similar - you can use the same function, fed different arguments, over and over again. ps: you can check out Kohana - CodeIgniter - CakePHP, and many more
So like the PHP equivalent of jQuery?
What this dude said. when I develop, I have three folders I base my project in: Logic, HTML and Classes. Most of the stuff in classes just handles the DB for me, the logic directory handles what happens when a user actually makes a request, and the HTML holds all the nasty stuff you don't ever want mixed into your php. MVC just kinda congealed for me, I dont really like the current name, it makes it scary for the unfamiliar.
If you've ever had to take over a project for someone else, trying to weed through procedural code can be a nightmare. Typically, frameworks remove this headache by allowing you to extend rather than replace. Additionally, having everything in a very organized and structured form keeps everything tidy and easy for everyone to maintain and build on. Just my $0.02.
I use my own framework if you can call it that. Its got a few core things that I feel every site needs. router.php is the only entry point you hit from the web, its htaccess rewritten so that /content/whatever rewrites to router.php/content/whatever, allowing me to keep $_GET without clobbering anything. I separate the db access, logic and html into three folders, and use straight up procedural code for almost everything but the models. I'm thinking about adding something to let me handle forms easier.
Why did this get downvoted, this is a VERY real concern. If you are going to use software, at least find ways to plug the holes before you go live.
Yup, just not as easy to setup. It's not hard, but it's not as simple as calling in a single file then going from there.
I like it because I can jump into a Rails/CodeIgniter/CakePHP project and have a good idea of whats going on straight away.
When I think a project is too small to merit a framework I just use CodeIgniter, because it's lightweight and still allows some organisation that developers will understand.
Sort of. This site explains it [What is a framework (php)](http://symfony.com/symfony-at-a-glance)
jQuery would be one set of a framework's features. A framework is also as it says a framework: a standardised way of organising a project. I'd check out CodeIgniter if I was a newcomer to frameworks, its simple and well documented. You might find you come to meet its limitations on huge projects. http://www.codeigniter.com - Have fun :)
I just need to sit down and study some working examples of how MVC is helpful. I understand how it breaks up everything, but everytime I've tried to implement it, I always end up falling back to procedural.
I've seen plenty of hacked sites built on frameworks and custom code, probably more on the custom code side actually.
I had no idea frameworks were so good until I played with CodeIgniter 'having read about it in a few places', and haven't started a proj without it since. It worries me a little tbh :/
I'll take Kohana over CI any day
I would too, but it isn't a lightweight almost frameworkless framework, read the OP.
It depends on if I am the only programmer, or if I have to work around someone who knows very, very little programming. If it's just me, I'll most likely use Codeigniter. I really love OOP, but I tend to do procedural code if I don't use a framework. I've only ever written one class myself (outside of a framework), and it ended up not getting used. :/ When I don't use a framework, I have a very strict directory structure I stick to. It helps keep things organized.
You're probably already doing MVC in your own code and don't realize it. The idea of having a model class for each table of a database is a pretty basic concept. The general web app just uses 4 db commands: insert, update, select, and delete. A model class is meant to wrap around the database, and will have a function for each of the main 4 db commands. A model class usually stores each of the fields of a database table as a variable. Between the variables and the functions (members and methods), you have a set of tools for interacting with the database by just using a code api.. So that's the M in MVC .. The Controller is basically the main script that runs and calls the Model and the View. The View is essentially a script that only deals with html and variables. Hopefully, that's straight-forward enough.
i never said "rolling your own" makes you maggically immune. I just said your bugs and exploits aren't published on the official website for your website's framework.
No, because I wrote my own database classes way too many times, and I always separate my code into modules based on the related database table. Also, I got sick of doing category_add.php , category_update.php, category_remove.php .. I use controller actions now. Also, I can't stand to see html too close to database code. It just stinks of rotten spaghetti.
Very much so, thank you. I think the only part I could use elaboration on is the Controller. Especially when it gets into controlling routes and shit - God it gets overwhelming.
I just commented further up the thread about how I used to have user_save.php, user_list.php, user_remove.php , etc .. Now I have UserController with save(), list(), remove() .. and each action works exactly the same as they did in their own file. The usual controller action eg user/save is usually a big if,else statement where you're either handling a form or displaying it.
I don't, I like the challenge and creativity of it. 
I tried installing it on 21guest.com but am having an issue. I have HostGator "Business" shared hosting. I made a database and the username and database name is 'hotspot_kwolla' and the password is 'kwolla0'. I'm not begging for free support, but this is an issue I thought I'd share (I haven't heard many other redditors posting their install results). Compatibility Page Here: http://www.21guest.com/kwolla-compatibility/kwolla-compatibility.php Configuration File viewable here (This is a duplicate of configure.php) http://21guest.com/configure.php.txt Kwolla is installed here: http://www.21guest.com/ I get this line in my error_log file every time I try to open the site (index.php): [09-Mar-2011 22:33:42] PHP Warning: PHP Startup: Unable to load dynamic library '/usr/local/lib/php/extensions/no-debug-non-zts-20060613/ixed.5.2.lin' - /usr/local/lib/php/extensions/no-debug-non-zts-20060613/ixed.5.2.lin: cannot open shared object file: No such file or directory in Unknown on line 0
In the sense that jQuery provides a ton of great javascript functions, as well as a semi-formal way of doing things according to a standard, yes. It's not as complicated as it sounds. If you code enough php apps from scratch, there are patterns that emerge..
you can also just use zend as a library ;)
Since you know what you are looking for, you can start by chopping the text. Simply read the whole file in as a single string variable, then start grabbing parts of the letter using strpos() and substr() eg ` $whole = file_get_contents('letter.txt'); $nameIndex = strpos($whole, 'Mr/Mrs'); //comes right before name $nameChunk = substr($whole, $nameIndex, 20); //20 characters enough? $ssnIndex = strpos($whole, 'SSN'); //comes right before SSN $ssnChunk = strpos($whole, $ssnIndex, 16); //16 chars enough? ` .. eventually you'll get it down to just trimming spaces .. 
the router is separate from the controller, and basically just manages everything getting passed through a single url on the backend. In alot of frameworks you mainly putting special mod_rewrite rules in there.
He asked a yes or no question.. and got an answer.
&gt;what benefit do you get from using a custom made framework over something already created. It does exactly what I want, how I want it and it doesn't contain bloat. Zend is the "it does everything" framework. As a result, it's slower. Yeah yeah, unit tests, blah blah. If you're not building a super-heavyweight framework it's not that hard to have bug free code... especially if you build it properly.
Only one curl library on CI's site. It doesn't have the features I need, but looks like it would work for your code. http://codeigniter.com/wiki/Curl_library/ $this-&gt;load-&gt;library('curl'); $this-&gt;curl-&gt;http_login('username', 'password'); $post = array(); $this-&gt;curl-&gt;post($post); $response = $this-&gt;curl-&gt;execute(); if (!$this-&gt;curl-&gt;error_code) { //do stuff } 
The MVC framework is just about the only way I do large projects these days. If a nice clean MVC framework already exists in a language much the better, if not then I have to create/use what I can to make the language conform as if it had one. Which is why I like asp.net mvc infinitely more than coldfusion for web programming. While I spent almost a decade programming in coldfusion (ive only spent about a year in asp.net mvc so far) and had a rudimentary method of using coldfusion as if it had an mvc framework using a real in language mvc framework has no comparison. 
I haven't personally used this yet, but wouldn't this do the same thing: http://php.net/manual/en/class.httprequest.php ?
Because this way is more OOP-y and class-based and provides the 'loader object' the OP asked for? *shrug* In my case, I do it this way for a couple of reasons. (I saw 'this way', but my actual code is barely recognizable from the example given.) First, convenience. Given a reference to my 'Base' object, I'm able to access the currently open database connection/already loaded configuration/etc. from any scope without resorting to global variables, static classes, etc. This allows me (when necessary) to actually instantiate multiple copies of the application and work with them simultaneously. Second, (and this isn't empirically tested, just a guess) with the size of the codebase and the amount of traffic, the speed difference and processor usage in parsing everything versus parsing only the required files would probably be noticeable. Out of curiosity (and if you don't mind), what particular edge cases are you thinking of? I wouldn't mind them to chew on to make sure I won't run into anything with my current codebase.
&gt; "How was your original post incorrect?" I actually ran code similar to what I posted on my work machine and the method from the required file was indeed non-existent. Of course, I don't have access to it right now (at home) and trying it again on a different machine it works (same version of PHP even). o_O If I remember I'll look into the script I was using at work and see what exactly is going on.
Yes, but it requires a PECL extension which he may not be able to install.
Okay, now that the framework circle jerk is over, back to the discussion... Whatever frameworks are about, they're typically generalized. A generalized framework will use more lines of code to solve problem $X versus code written specifically for that purpose by virtue of it being generalized. More code, more complexity, more generalized = more risk for a security vulnerability. And my point that using an external framework means you're less familiar with the codebase, and that this increases the likelihood of you writing in a security vulnerability still stands.
Lol...i am 29 and i hate your comment...
Not disagreeing about zend framework but there are lots of other choices besides zend
True. This is a fair point. But regardless if it's OOP or Procedural; organization and well-commented code is the key in a team environment. You can have an awesome framework without using objects. Personally I find people over-use OOP in their frameworks, which ends up adding a huge overhead in both speed and ease of use. That's just my opinion, though. Every programmer has their own preferred style.
I'd be interested to know what your definition of a large scale web app is. I'm talking about things like reddit, Digg, Facebook, Twitter, etc. I find it counter-productive to start a system only to replace its foundation later as it scales. I'd rather "re-invent the wheel" if it means a little more development time up front for much easier growth down the line. I basically view framework use as a bell curve. Super lightweight projects may be better off with a few scripts, mid-range sites benefit greatly from the use of community-driven one-size-fits-most frameworks, and large apps really are better off being optimized against their weaker points. I approach my systems from the mindset that they should and will be wildly successful (even if that doesn't turn out to be the case) just to be safe when it comes to scalability. Not everyone needs that mindset, but I think it's important not to blanket-apply framework use to every possible scenario.
Probably not, but my adoption of a custom framework came about because I had been evolving a set of reusable classes over the years. Every time I started a new project, I'd start by duplicating the last codebase, removing any project-specific classes, and adding new code as needed. Obviously, the issue became keeping all of those versions up-to-date. I ended up just creating a main branch as a standalone framework that can be managed and upgraded independently of projects running on it. It's become fairly elegant over the years, and I really enjoy using it. I also have to point out that half the reason I didn't use a framework in the first place (or never transitioned to one as they became more popular) is because I like to know how everything works. I learn by doing; so while I could have gone and acquainted myself with Drupal's code, or any other framework's, I was more interested in actually writing things and learning by trial and error. I honestly think it's a huge problem these days that people will pick up a framework, learn just enough to skin it and apply plugins, and market themselves as freelance developers. I've had to fix a number of such projects in the past and it's not pretty. Yes, poorly implemented systems on frameworks are marginally better than poorly implemented systems from-scratch, but those framework-backed disasters-waiting-to-happen are so much harder to spot and vet up front. I'm not saying that all people who use frameworks suck, and I'm not saying that all projects that are powered by frameworks are coded poorly, but I think core development principles should still be learned whether a framework is in use or not. Using a framework just makes it easier for a developer to distance him/herself from important considerations. 
Crontab creates its own shell environment when executing its targets. Please read crontab(5). 
I use my own libraries, I dislike being constrained to a framework, and I don't like doing stuff the way other people do it. I think code re-use is very important and thus I have my own library which has routing, mapping, containment etc, but every component is optional - if I want to do a tightly coupled site with it, I can, if I want to do a loosely coupled, mapped, MVC site with it I can.
I used to and I dont really see the point anymore except maybe when learning the language. Even for a "small project" (very blurry definition) it feels like taking a step backward.
Hi, I'm not sure what the ixed.5.2.lin extension is. You may want to contact Hostgator about that. I absolutely know that Kwolla works on hostgator. The screencaps in the install guide were taken using hostgator and http://kwolla.net/ is hosted there as well. Perhaps they're using a different webserver like http://forums.buyscripts.in/installation-support/5319-upload-error-connection-reset.html suggests? Not sure if this will help either: http://www.phpbb.com/community/viewtopic.php?f=46&amp;t=2020405 Regardless, it doesn't appear to be an issue with Kwolla itself but the way PHP is configured on you server. I'd contact HostGator with the issue and see what they say. Please let me know what the outcome is, I'm interested in seeing what they say.
For such projects I use [flourish](http://flourishlib.com/docs), it's a bunch of helpful libraries that you can drop into your script.
Agreed, automatics make driving boring. You can't double-clutch, gearbrake, or any of the fun things
That looks useful. *saved*
That sounds like a perfectly fine way to cache your data :) Is this user/session-specific data? If so, you could theoretically utilize [session-support](http://php.net/manual/en/intro.session.php) which would allow you to cache this data between requests per-user. Once the session clears - beit forced by your script or when it expires regularly - the data will have to be recalculated.
All of which are to do with good practice, and nothing to do with frameworks.
nope, the same data is available for everyone, and it can remain the same for long periods of time. i was mostly just worried that reading from a file would be much more intensive than the calculation itself.
Ayup.
Nice man. I think I have a really solid understanding of MVC now. :) This is wonderful!
&gt; Because this way is more OOP-y and class-based This isn't a technical argument; it's a religious psalm. &gt; and provides the 'loader object' the OP asked for? If a man who doesn't know how to fish is trying to fish, and asks you for a refrigerator door, because he thinks that's how to catch fish, and you have both a fishing rod and a refrigerator door, which do you give him? Saying "both" is a cowardly way out. &gt; First, convenience. The object has already been gotten wrong twice - your new mechanism falls afoul of more bugs, and is likely to generate still more in php6 when the object model is extended again. It's more work. It's more code. It's obviously more defect prone, and it's going to be more maintenance. Convenience is a noble goal. I do not believe it is correctly noted here, however. &gt; Given a reference to my 'Base' object, I'm able to access the currently open database connection/already loaded configuration/etc. Yeah, or you could do that given a reference to anything that isn't an object, too. For example, an array, or a primitive. Or hell, even a global. Of course if this was the actual goal then you'd make the loader a singleton, but on making the loader a singleton it'd become obvious how silly this was to self-manage as an object, since loading files is not conceptually an object. There's also that god-awful autoloading system. &gt; from any scope without resorting to global variables, static classes, etc. The class system is not what allows this. You may do this with any reference. Therefore holding this up as an advantage of the class approach is inappropriate. I'm also not sure why you're holding up ease of reference as a way to choose how to load files. &gt; This allows me (when necessary) to actually instantiate multiple copies of the application and work with them simultaneously. You don't need classes for this. &gt; Second, (and this isn't empirically tested, just a guess) with the size of the codebase and the amount of traffic, the speed difference and processor usage in parsing everything versus parsing only the required files would probably be noticeable. No. It's going to be sitting in OS cache, if the guy hasn't set up APC. &gt; Out of curiosity (and if you don't mind), what particular edge cases are you thinking of? I wouldn't mind them to chew on to make sure I won't run into anything with my current codebase. Autoloaded classes in there will break. Nested classes in there will break, since nesting isn't arbitrary depth. There are several different ways this can break namespaces, which excludes most well written libraries. This loses the primitive benefit of require_once vs require. This is unsafe around lambdas which use references. This is unsafe around code which keeps state outside of procedures, which is a surprisingly large slice of real world PHP. This breaks basically every binary cacher's ability to predict the binary, meaning that if you're running APC, this loses most of its ability to cache the app, meaning your 5000% speed boost will be more like a 250% (yes, magnitude and double) speed boost. Plus, look. You're playing the Acura game. Joe goes to the store to buy his first nice car. He trolls the used car lots, and finds one. It's an Acura. So after buying it he bumps into his friend Bob, who points out that for the same money, Joe could have gotten a used Lamborghini, which was available at the same store at the same price, and asks Joe why he chose the Acura. Joe responds that the Acura is pretty, fast, impresses shallow women and performs well in drag races. All valid, if in my example stupid, criteria for choosing. (This isn't a subtle way to call you stupid, I just don't really know much about cars.) At this point, Bob knows that Joe isn't evaluating the choice he made; instead he's trying to defend it. One of the signs of maturity in a car buyer is that on being presented a comparison, instead of arguing for one, they compare the both. Yes, the Acura is fast, pretty, impressive and drag-winning. All those four things are true, and if those are the choice criteria, the Acura is a good choice. The Lamborghini is prettier, faster, more impressive and more drag winning. By the stated criteria, it is the better choice. That the Acura is a good choice is immaterial, and presenting the virtues of the Acura outside of comparison leads to the wrong choice being made. A one-liner require reference to another require evaluates under those criteria thusly: 1) Writing a class and maintaining code and looking for bugs is not more convenient than having a file to require which lists your requires. It is in fact substantially less convenient. 2) Full requires will be substantially faster than a decision based hot-loader because of the speed of the disk bottleneck. On the one hand, yes, loading less is faster. On the other hand, no, a partial load will actually load substantially more data in a tuned production than a complete load, because partial loads generate different binaries each time, which defeats binary cachers, which means that a partial load rate of 20% or so is actually much larger than a total load rate of zero. 3) Stuffing something that has no meaningful class structure into the OOP system to make it, and I quote, "more OOP-y and class based" is a sign of golden hammer syndrome. That the syndrome belongs to OP is not germane; you are a more experienced developer, and it is your duty to say "no" when the correct answer is to say "no." It doesn't matter that he asked you for a refrigerator door; he wants the fishing pole. By the by, please don't consider the above list of edge cases exhaustive. It's what I noticed off the top of my head at 8 in the morning on zero coffee. There should be, gut estimate from PSP/TSP data, something in the neighborhood of 80 of them total. There is no value to this mechanism which cannot be found in superior value form in the radically simpler approach. Look at that sentence carefully. See if you can find a concrete counter-example. If you cannot, your path is clear. To be clear, I think that that this choice required more than thirty seconds - that is, that one did not default to the fast, simple way using language-level, long standing, well understood tools - is evidence of technical bikeshedding. There is more important stuff to be thought about than stuff like this. Your new quality razor is "how does this save me work in the long run, when specifically compared against the lazy way." Never forget that amongst programmers, laziness is a virtue. That's not glib. That's true. Less work means less opportunity for error. Few people understand the true depth of that value.
How much time calculation is taking ? And the size of the data that you want to cache ? I cache about 1kb worth of serialized php data and take me about 2 to 3ms to read the data and unserialize it. In this type of cache most of the time is spent on I/O. So try storing the file in /dev/shm (virtual memory storage).
Have you thought of using something like memcached or APC for things like this? Actually I highly recommend APC as an opcode cache if you aren't already using it. That will save your server from having to recompile your PHP every page load.
Just finished looking at Flourish and Kohana. Flourish makes sense to me, but Kohana is very confusing. Don't they operate under the same principal? Like you can drop bits from either library into a project?
why bother storing it serialized. If it's a simple array just store it using var_export as a php native array.
Oh, good, wasn't familiar with this function.
How often does this need to be run? You could set up a cron job to run it weekly, monthly, whatever and cache the results to a database table.
it needs to update whenever it's changed, since it's dealing with prices i don't want the prices to stay out of date.
If you're worried about file IO, maybe redis or memcached would be worth looking into?
BTW, Linux file I/O is awesome -- far more impressive than Windows. You'll find the caching on file I/O works through RAM on frequently accessed stuff.
Ok, so you could rebuild your cache when prices change instead of on every page load - that seems like the most obvious approach. Or maybe there's a way to use a database view to keep your calculations up to date, but in an easy to read manner. If your logic can be done entirely in SQL, you could also set up a trigger to run some queries whenever the prices table is updated if you feel the view would be too heavy.
it's not that the calculation is taking very long, but i find when that particular piece of code runs, my sys memory jumps up 3-4mb and doesn't drop after running, and it does this every time i refresh. it's not the most optimized piece of code, but it does what it's supposed to, and if i can cache the data then it doesn't need to be. i doubt the website will ever hit levels where the current implementation is ever a problem, but i still rather fix it now then later. i reduced the memory jumps to about 1 - 1.5mb by cutting back the amount of data it processes to only the relevant bits, i didn't expect causing it to loop twice rather than 8 times to be a big deal but apparently it was huge. edit: not really an edit because i didn't post this yet, but while writing about inefficient pieces of code i realized there was one incredibly inefficient bit of code that i removed and got it to consistently increase load by 1mb rather than variable between 1-1.5 which is still down from 3-4. i'll probably still cache it, but i'm going to take another look around to see if there is anything else i can adjust to further reduce the load. edit2: correction, it now increases mem usage by 500KB to 1MB each time rather than 3-4MB
i didn't know i could do that, thanks :)
i don't know what either of those things are, but i'll definitely look them up, thanks :)
Thank you! Would you mind if I send you some php code to review? I'm working on something at the moment and could have it ready to peruse this weekend.
i've thought about storing the new data in a table, but i wasn't sure if it'd be more complicated than just using a file, and if the differences would be worth it.
A simple way to do it is to wrap your calculation code in an if statement that looks for the file. If the file is not there, calculate and write the file. if ( !file_exists("file") ) { $calculations = doCalculations(); file_put_contents("file", $calculations); } else { $calcuations = file_get_contents("file"); } On Linux, file_get_contents is really fast. I've written a caching system based on it that outperformed shared memory thanks to the filesystem keeping files in RAM. It's not a replacement for memcached for really high loads, but it'll do for small sites or when not caching huge amounts of data.
You are correct, at that time I did not how to code securely. But that event got me looking for better ways. Finding a framework and learning it inside and out as well as participating in the community has helped me become a much better programmer.
It's really going to depend in whether or not you need to parse through that data to get specific data points, or if you just need it all in one go. If it's just a matter of storing an array, it's pretty safe to stick with tossing that sucker in a file. You could always test it - pulling the same data out of a table vs pulling it out of a file and go with whatever's faster. It's really going to depend on the size of the dataset, and how much parsing you need to do.
Use a caching solution, like APC, memcached or XCache.
Sounded like memory leak to me. Use memory_get_usage to nail down area in your code where memory isn't returned.
You need an upvote.
I do not use frameworks. I find that every one I've tried seems great in the short run, but ends up costing more work than it saves, in repairing cases they hadn't considered, moving towards portability, bringing in reliable test cases and just plain fixing bugs. Things that try to solve every problem rarely solve any at all.
i thought that too, but it starts to unload memory just fine when it's nearing system memory limits (i'm running in a vm so i can artificially adjust that limit, and when i set it to 128mb for testing, i filled it up, then it started unloading it just fine for new content) also every page uses a minimum of 100kb. so if there are leaks, there are multiple ones. it'd have to be something very common in the system.
Hopefully [array dereferencing](http://schlueters.de/blog/archives/138-Features-in-PHP-trunk-Array-dereferencing.html) will be available in a release soon, it's already part of the trunk.
This was what I was thinking. I'll be glad when it's fully integrated into a release.
Um, call me insane if you want, but if you are calling a function/method and it returns an array of values but you only want a particular item from the set, isn't array dereferencing considered wasteful? Your method/function should be extended to accept a parameter instead and return only the value associated with it: function foo($bar=null) { //do something if (!is_null($bar) &amp;&amp; isset($myarray[$bar])) { return $myarray[$bar]; } return $myarray; } You could even extend that to return false if the key isn't found so the following would work: if($x = foo('key')) { // $x == data I want } else { // Something fucked up, deal with it... }
APC does a couple things. First, your PHP code has to be converted to a form executable by your server. Normally this happens every time the PHP file is called. APC caches this executable form so it doesn't have to happen every time. I think more importantly for your case though is the second thing APC does. It allows you to quickly and easily cache any data in memory and retrieve it later super quickly. apc_store('dataKey', $yourdata, 3600); // Caches $yourdata for 1 hour $fetch = apc_fetch('dataKey'); // Retrieves $yourdata later
This would certainly be an option if I had created the function returning the array. I completely agree that the function returning data itself should allow a parameter to specify the specific data to return, but it's not always an option.
This is a really subjective question, and there is no real answer to this. Just use whatever you feel comfortable with...
This question needs to be bookmarked. This exact question pops up many times a month. I like CodeIgniter because it was a great way to introduce me to the concept of MVC and frameworks in general. I am now moving on to Yii, simply because I like the documentation on it, there's no YAML, it's PHP 5.3, and the authors have a ton of experience with these sorts of things.
This is a very subjective question. People like and use Zend, Symfony, CakePHP, Yii, Lithium, Rasmus' No-Framework Framework, ... Which one one of those is better than the rest or CI? No idea. I use Limonade and Lithium because I prefer micro-frameworks or Sinatra style frameworks. I don't think either one is the best, they're just my preference.
&gt;You don't have to adhere to the strict concepts of the MVC design pattern So you basically saying this is just a TLAization of what any organised developer has been doing for years?
You're very likely going to get more bang for the buck by **benchmarking and profiling your code**. Look into [xdebug](http://www.xdebug.org/) and [xhprof](http://mirror.facebook.net/facebook/xhprof/doc.html). Premature data caching in a complex system can cause unexpected side effects and should only be looked into *after* you've positively identified data access as a bottleneck.
do you know of any tutorials on using xdebug? i would like to follow your suggestion but i've never used xdebug.
[The xdebug documentation on profiling](http://www.xdebug.org/docs/profiler) contains pretty much everything you'd need to know in the form of a walkthrough.
You can create your own function to do it, this is mine: function i($array, $key) { return $array[$key]; } Then you can do: $x = i($obj-&gt;functionReturningArray(), 'key') 
Pacman?
sun pac
Dessert should be in the title. It's Cake DC, by the way.
There's something about "taking ownership" of a folder in win7 that I have messed with but I forget exactly what. Give it a google.
That's exactly what I've done, just wasn't sure if there was some other way.
&gt; APC does a couple things. First, your PHP code has to be converted to a form executable by your server. Normally this happens every time the PHP file is called. APC caches this executable form so it doesn't have to happen every time. Ehh, not directly executable by the server. PHP operates by loading the source file, compiling it to PHP opcodes, then executing said opcodes. APC steps in and caches compiled opcodes so PHP can skip the compile process. But you're still correct on everything else, I'm just being anally retentive here ;)
Thought that was pretty much what I said, only not using the word "opcode" 'cause I didn't want to confuse him.
i didn't know you could sponsor a vast plot of land...
Make the function return an ArrayObject instead of a normal array.
I use something similar, just extended a bit to account for missing keys and getting default values: function aget($array, $key, $default = null) { return array_key_exists($key, $array) ? $array[$key] : $default; } 
Same here with the exception of using isset() instead of array_key_exists()
Good suggestion, and I completely agree, but if I'm faced with the limitation of not being able to modify the internals of the function in question, I have to go another route. What I've been using, as it seems that many others are, is a util function to perform the dereferencing: function dereference(&amp;$array, $key) { return isset($array[$key]) ? $array[$key] : null; }
Watch out for isset() on arrays as it may yield results you are not expecting. If the key value is null, isset() will return false, while array_key_exists() returns true.
Yes, I know, However, in my situation, I don't really need any other default value other than a null, so the default case returning null will catch just fine. Edit: return isset($array[$key]) ? $array[$key] : null;
Ah. Seen that too. As `d()` function for briefness. It's probably the next best thing for the time being.
There really needs to be a web dev help reddit (or is there one?) for posts like this that aren't PHP related.
`webdev` is fairly dead ... `web_design` doesn't really fit my question, although it could possibly work. I guess the reason `programming` doesn't allow non-link posts is to prevent stupid questions like this one taking over the page?
Yep, that'd be awesome. I'm actually looking for one or two more PHP projects to help someone out on, yes, for free, even if it's commercial/proprietary. I try to avoid GPL-licensed stuff, tho.
http://www.redditmirror.cc/stats/
Speaking specifically of a sub-component, Zend_Db_Select, instead of writing any actual SQL, you can do something like this $db-&gt;select()-&gt;from('table') -&gt;join('table2', 'table1.id = table2.id') -&gt;where('field1 = ?', $value) -&gt;orWhere('field1 = ?', $value2) -&gt;order('field1 ASC') -&gt;query()-&gt;fetchAll(); which would translate into this (unless I'm mistaken) SELECT * FROM table JOIN table2 ON (table1.id = table2.id) WHERE field1 = '$value' OR field1 = '$value2' ORDER BY field1 ASC For simple queries, it can save the headache of silly syntax errors in your SQL, and as long as you configure Zend_Db to use PDO, it'll do parameter binding for you. For more complex queries... well, you should just write them yourself. You can't currently do something like this (as far as I know): SELECT * FROM table WHERE (field1 = 'a' AND field2 = 'b') OR (field3 = 'c') You can get more details about what it can do [here](http://framework.zend.com/manual/en/zend.db.html) and, more specifically, [here](http://framework.zend.com/manual/en/zend.db.select.html). It works pretty well as an abstraction layer, but if you want to do any ORM, the recommendation I've heard from most people is that you should look into Doctrine (which I have yet to work with, but plan to).
I'm going to downvote and report this because of the \&amp;amp; in the title. This should signify that a script had submitted this link under the name of arvind07, not a real user. Hopefully the OP or mods can find otherwise.
Not sure how many ZCEs are here, but I figured I'd submit anyway. I've heard a lot of people talking about quality issues with Zend Studio, but I've also heard some good things about it, so I think I'll probably at least give it a try.
Wolfram?
i've taken full ownership of the file, and i still can't access it. i've been trying to google the answer to this for like a month. I'm thinking about just giving up on it, but i really don't want to do that because i'm really interested in making multimedia sites.
What is it that you're calculating, and how are you calculating it? The suggestions for caching should definitely be followed, but I'm a bit concerned by [your comment](http://www.reddit.com/r/PHP/comments/g14yp/reduce_load_on_server/c1k5n7b) about memory usage. Are you pulling down a bunch of data from the database, then using PHP to process it? Is it possible to put more of that work on the database? Maybe do something like a materialized view? Otherwise, I can't really imagine what could be causing a memory jump like that... third party web services? Whatever it is, I'd say you *need* to get a decent caching system set up (filesystem, memcache, even storing the results in the database) and once you have that done, reevaluate how it is that you're doing whatever it is that you're doing. I can almost guarantee that you don't need to be using that much memory for any task remotely like what you might be doing.
cakePHP?
what is the minimum php version is needed for Kohana? Can't find it on their site.
 $arr = $obj-&gt;return_array('key'); Within the object: function return_array($key) { return isset($this-&gt;array[$key]) ? $this-&gt;array[$key] : array(); } Or fancier: Within the class: function __get($var) { return $this-&gt;array[$var]; } Usage: $a = $obj-&gt;my_key; Will invoke __get('my_key') and return $this-&gt;array['my_key'];
I wonder what Zend Framework would taste like...
it deals with bed and breakfasts, they have a property, which has multiple rooms, each room can have multiple rates (ones for different holidays, some sale rates, etc) so i need to calculate the rate for each day and for each room, i go through all the rates and find the highest rate that applies to the given date (or if there are sale rates, the lowest), then i move on to the next date. i'm still not sure why the simple script is causing such memory problems, but i did reduce the load by quite a bit already. my problem is the memory usage doesn't go back down after execution. I'm not sure what's not getting cleared out and why it's not getting cleared out.
I built [UberGallery](http://www.ubergallery.net/) completely framework free. I did this mostly because I felt that a framework would overly complicate what was supposed to be a very simple web photo gallery. Also, I feared (not much) for unnecessary overhead.
So, are you making calls to third party services, or is this all in/from your DB? In general though, it can be worth it to run unset() at the end of each loop iteration to help free up resources. Beware of deep linked objects (objects that have other objects as properties).. I'm not sure how well that's been cleaned up in recent releases, so you might need to explicitly unset some of those properties. But, yeah... cache it. As much as you can. And if it's changing more than every five minutes, don't ever bother trying to update it on page load.. make it a backend process that just updates the cache.
&gt; You don't have permission to access /photo_gallery/public/admin/action="photo_upload.php" on this server. That would be an invalid filename. If you read it carefully you'll realize what's wrong. Chances are your thing isn't called action="photo_upload.php" on disk, rite?
Dude, did you even read the error message? Screw google. This has nothing to do with ownership.
it's all from my own db, i set the __destruct of every class to go and destruct all the objects that are properties of the first object. so if i have $object1-&gt;object2; when i destruct $object1, it's destructor explicitly destructs object2. i don't know if makes any difference though, because it didn't seem to affect my problem. 5.3 is supposed to have a better garbage collector, but the place im hosting on uses 5.2
If it's all coming from your database, you can most certainly put most of that work on the database server. Whatever DB you're using is much better at crunching data than PHP is. No matter what. Look into using a stored procedure to crunch the data and populate a table with the results. Then you can just do a basic select from that table and be done with it (though you should still cache elsewhere too)
It's just the way I prefer to do it. It's an easy abstraction of PDO. As with any sort of abstraction, it does add some overhead, but it really helps when I work with developers who aren't as familiar with SQL. TBH, I never actually spent the time to learn how to use PDO myself, since there are so many abstractions available. If you're still using the old mysql extension, I highly encourage you to look into PDO or at least mysqli.
I literally wrote one of these just the other day when I came across exactly the same problem. I also found in some instances that I wanted to access a value from a function that returned a multi-dimensional array, so I ended up making my function call look like: $value = valueOf(functionReturningArray(), 'key', 'subkey', 'subsubkey', etc, etc) and inside the function I was using the PHP get_func_args() to detect all the additional params and use recursion to keep drilling down until I got to the level I needed. Ended up working quite nicely.
Zend is the "end-all" of all senior programmers I've met; it's almost an obsession. As for other frameworks such as CI or Drupal.. they do things in ways I don't like... but that's not really the point.. I prefer my method of coding over these other ways, and I've build a toolbox that I like...
If you want to get crazy with eval() and don't mind the isset() stuff, you can try something crazy like this: function aget($array, $key, $default = null) { if (($pos = strpos($key, '[')) !== false) { $index = '[\'' . substr($key, 0, $pos) . '\']' . str_replace(array('[',']'), array('[\'','\']'), substr($key, $pos)); eval('$rc = isset($array' . $index . ') ? $array' . $index . ' : $default;'); return $rc; } else { return isset($array[$key]) ? $array[$key] : $default; } } You can then call it like this: $value = aget($array, 'some[key][that][you][want]'); 
I think it's 5.2.10 . I had one project where we used 5.3, but I don't think it requires 5.3.
Well, comparing MVC frameworks can get to be like comparing apples and oranges. They do use the same MVC principles for the most part. If you're just learning MVC, you might want to go through a few tutorials. Also, if you look at my comment history, I've explained MVC in simple terms a few times.
Don't you just love those epiphany moments.. :D I remember when I first learned ajax and css in 2006 . It was like 'you mean I use id="myStyle" for both innerHTML in javascript and #myStyle in css ? .. head asplode .. :D
Using a file based cache is probably the easiest thing to do. I agree with others that say use APC, profile your code, etc. The main question with caches is how do you invalidate it? For instance do you need a method to flush all your cache for a certain day? Does the cache need to rebuilt every day, every other day, etc.? I have used cache lite with great success. http://pear.php.net/package/Cache_Lite You could go even simpler and say once you calculate a Month object for a given day you serialize it and save it as room_2001-3-10.obj . The next time that room needs to be loaded it checks to see if that file exists, reads it deserializes it and then displays it. Otherwise it chugs and chugs, and creates that file after generating the data for it which it then also displays. You could then do things like manually delete them when they are invalid or do it automatically. Supposedly php 5.3 has much better garbage collection which could be related to memory usage issues. 
Glad I haven't run into any of these "senior" programmers you speak of. I would have a huge list of "WTF is this and why do you think it's better then that?" conversations with them. I don't see Zend as an end-all, sure it has the most libraries but it also the most bloat. I don't really consider drupal a framework but more a CMS with an API. Real frameworks would be like Symphony, CakePHP, Code Igniter or Kohana.
Yep.
Two S's in dessert because you want *two* servings!
each cache would be refreshed on user update. when a user adds a new item, deletes an item, or edits an item, the cache would have to be rebuilt for a specific subset of data, but the updates are done infrequently. i could also do a backup where it does it every week or every other week. this wouldn't affect actual prices for transactions, only what gets displayed on the website. transactions are processed separately and would get the proper rates.
Googled "php parse xls" and this is the first result that comes up for me: http://vrypan.net/log/2004/11/10/parsing-xls-files-with-php/ At any rate, I shudder to consider what you are actually doing, it sounds fairly horrifying and like there should be a database in there somewhere ^^
Sorry I'm not really English speaker and when it comes to "technical language" I suck. And I guess transforming the xls to something else is probably the way to go.. I just don't know how to do that...I'll check the link though, thanks
did u meet _nate, that bastard
Can you convert the XLS to XLSX? The latter is XML, and perhaps parsable with the XML parser.
Good work. Seems pretty useful and I may check it out. FYI - [this](http://i.imgur.com/qLDWv.png) (the white code with black background) is KILLER on the eyes. It's really tough to read. Maybe less contrast will help. I'm slightly drunk, so that may have something to do with it, but all other text on any website is fine. Just a curious question... why'd you create that for the public. I don't see ads or any way that you could profit from this. Are you profiting somehow? In any case, good job. It looks pretty solid.
Disclaimer: I use Git, not Mercurial, but a quick Google search reveals that Hg has hooks that I'm going to assume work like Git's. http://mercurial.selenic.com/wiki/Hook The way you'd do this (in Git, at least) would be to set up a post-receive hook (which should be fired on the server when it receives your push). You could set up this hook to be a Python (or bash or whatever) script that can do whatever you need server-side.
I AM AN IDIOT! Thanks for pointing that out. I usually work on it at night, and i guess i just wasn't paying attention. I'm still a noob. The problem was that in the form i had action twice... good ol dreamweaver auto complete. so it said &lt;form action action ="photo_upload.php"&gt; But thank you guys anyway for pointing that out. hopefully now i can move on and get better at this.
Please be very, very careful taking this advice. While it is sound on the surface, you're going to see race issues if this code is executed by users visiting a page. For example: Time Action 0 User A loads page, no file 1 User A starts doing calculations 2 User B loads page, still no file 3 User B starts doing calculations As you can see, you've now got two people causing your server to do the work twice which you only need done once. While this is better than having every single person cause the work to be done, it's still not very efficient. And later on, if you do this with something that is more sensitive to being worked on simultaneously, you will have weird problems. I would recommend one of three ways of dealing with this: 1. Locking 2. Queueing 3. Scheduling If you want to this to be user driven via a page load and you want to keep it pretty simple, use Locking. What this means is you use something like APC to cause one of the executions to get exclusive rights to execute the calculating code. If works something like this: if (getLock()) { docalc() storeCalc() } else { dealWithNoData() } This works great because for 99.99999% of users they will get a fast response with either "Hey, here's the data because it is cached" or "Sorry, we're putting things together, one moment". However, for that one user it really sucks. This is where Scheduling can come into play. You do something more like this: if (cacheExists()){ serveData() } else { markForUpdate() } marckForUpdate() simply means you make a quick call to the file system, APC, database, etc which simply makes a quick note that the calculations need to be updated. Then, on the backend, you have a crontab that runs regularly and executes a script. The script will check for the "updateme" flag, and if it's there you do the calculations. This method works pretty well, but you have to learn how to do background processes. Finally, if you don't want users to drive the "initiation" of the calculation process, you do the same thing as above, however you do the checking of whether the calculations need to be run in the background script instead. Some things for you to look into: * Gearman * php.net/apc_add 
[Bam?](http://mercurial.selenic.com/wiki/FAQ#FAQ.2BAC8-CommonProblems.Any_way_to_.27hg_push.27_and_have_an_automatic_.27hg_update.27_on_the_remote_server.3F)
You did it wrong.
Use [xls2csv](http://search.cpan.org/~ken/xls2csv-1.06/script/xls2csv) to convert the excel file to a csv. Open with [fopen](http://php.net/fopen) and use [fgetcsv](http://php.net/fgetcsv) to load the file line by line.
&gt; FYI - this (the white code with black background) is KILLER on the eyes. It's really tough to read. Maybe less contrast will help. It looks okay on my monitors. That's not to say it doesn't look bad on yours (one of the perils of web design). I'll take that into consideration though. &gt; Just a curious question... why'd you create that for the public. I don't see ads or any way that you could profit from this. Are you profiting somehow? I originally created this for a personal site of mine. I needed a simple photo gallery and there were none out there that fit the bill, so I created UberGallery. I open sourced it in the hopes that others would find it useful and perhaps even commit back with updates and/or bug fixes. I don't make any money on it, though I considered putting basic Google ads up. &gt; In any case, good job. It looks pretty solid. Thanks! It always feels good to get a compliment. =)
Like I said you create a cache key based on that combination of data. Like user id _ date _ other query values . You're on the right track! Good luck! 
seems cool.
I'm not sure how that's making php cool... They're just running a nice EC2 stack similar to what Aquia does for drupal. It doesn't really have anything to do with php per se, the same setup could run a rails app or a java app or whatever... You could also easily set this up on your own using EC2, of course you need the knowledge to do so which is where companies like this come into play (outsource your IT basically). I'm a little skeptical of their claims though, they mention that any PHP app will work seamlessly, however they're using Varnish as a caching reverse proxy. This is problematic with some apps like Drupal6 where it sets a cookie on every request, as varnish does not cache any response that issues a cookie (to avoid a static cache of a per user personalized request). Not quite sure how they get around that, typically to use a Drupal site with Varnish you either need to run Pressflow (high performance fork of Drupal) or Drupal7...
First let's get something straight, PHP never lost it's cool to hipsters. It has been a very appealing and well used language in enterprise and government for years. As for phpfog, it looks to me like it's just a hosting platform (not unlike services from Media Temple, Rackspace, etc) with a deployment process built in. I think most shops doing enterprise work (PHP, Ruby, Python, Java, or otherwise) will have their own build/deployment process already. There's nothing new or exciting about it if you're programmer. I'm sure the script kiddies and hobbyists will love it though and any service that helps them grow is a good thing.
I'm not bashing php at all. I actually love php and I use kohana regularly. This being said after working with ruby for 2 years. It just seems like since phpfog there has been a lot more buzz regarding things php. Buzz may be just that, buzz. Personally I feel phpfog is gre at for the php community in general.
First time I hear of them. But I guess that adjoining "cloud" to "php" makes it cool.
All I know is that I've been staring at a half-loaded page with a spinning wheel and "waiting for www.phpfog.com..." in the status bar for over 2 minutes now.
From the phog site &gt;You can create a new site in seconds. You do not even need to know how to code. Yes. They are surely aiming at enterprise right there. 
You should NOT be using Dreamweaver for PHP code!!! Consider PHPed, NetBeans or PHPStorm (in that order), but not Dreamweaver!!!
CakePHP is not a lie. &lt;3
Awesome, thank you!
Looks like you were right about there being a hook for this. Thanks!
thanks, I'll be trying that later
Hah yeah. No links and no content; fail.
Thanks, (wo?)man :D
Is it really that bad? I mostly like that it links all of the connecting pages to the page that your working on automatically at the top of the toolbar. It feels like it streamlines the process of going back and forth. Autocomplete sucks sometimes for obvious reasons. I'll gladly look over the editors that you suggested.
It can't even get form actions right.
The Sahara being the largest desert probably has the most to blow on supporting programming conferences for no apparent reason, so I'm going with that one.
There was never a lack of faith in PHP at the enterprise level. Several genuinely large sites are built in PHP - Yahoo and Facebook, famously.
Really? function from_array(&amp;$array, $key) { return $array['key']; } And, as such, usage: $x = from_array($obj-&gt;functionReturningArray(), 'key');
Just write a wrapper function.
Cake is delicious and features an MPTT class I'm quite fond of, but it's a lie.
Astroturfing despite the disclaimer?
Which frameworks do you use?
Touche!
Cleary, sand is better than a cactus. It's the poor man's pop rocks.
Currently Yii and Code Igniter 2.0 (Reactor) Yii is more robust but Code Igniter is better to learn how MVC works. 
It may have some sort of XML elements embedded in it, but to say XLSX is XML is far from the truth.
This is what I've been looking for forever. Other frameworks are too much "LET ME DO IT FOR YOU." I want something that doesn't hold my dick while I piss.
i use flourish quite a lot, and it's really held up over the years. it's fast, incorporates smart security models, and Will, its main developer, is really attentive on the forum to issues.
Is it used often in production projects? Also, it seems [here](http://flourishlib.com/docs/fActiveRecord#RelatedRecordsOperations) that its creating functions based on table names, is this the case?
I need to revisit this. I incorrectly remembered it to be GNU GPL covered, so avoided it. (He should stress that more on the homepage.) But it's really nice that it follows the library approach, does not use the creepy namespace syntax and doesn't attempt to follow the misguided pseudo-MVC schemes. The documentation looks excellent. Some classes are redundant though.
http://www.phpexperts.pro/images/email.png 
yes on production (after using it for a few years, it's much less "beta" than Will likes to say it is, imho). those functions are routed to the __call() magic method of the base class. the table/column/etc name after the verb are matched automatically to your schema (using translations laid out in the [ORM conventions](http://flourishlib.com/docs/OrmConventions)), or you can [alter that behaviour in the model](http://flourishlib.com/docs/fActiveRecord#CustomClasstoTableMapping).
I wish people would stop putting time into libraries like this and just contribute that code to PEAR. There is no more convenient distribution method out there, and it is designed to accomplish exactly what these "unframeworks" are setting out to do. The biggest problem with PEAR is the lack of contribution to it, and libraries like this are a huge reason for that.
The creator of Flourish is a redditor. http://www.reddit.com/user/wbond/ I've been poking into different parts of Flourish for helping me learn how to do things correctly, super helpful.
Also that not all servers allow PEAR.
If you don't have access to a PEAR installer (which is absolutely ridiculous these days, but that's a different issue), you can still use PEAR components. It just means you have to download the component files manually rather than using a convenient command line installer.
Didn't downvote you, but here's my issue with PEAR: I am on a Windows machine, and I use XAMPP as my local server ... but XAMPP has terrible problems with PEAR. Hell, installing PHP-Unit is a hit or miss operation, and sometimes I have to reinstall XAMPP several times to get it to go through. If I have the option of simply downloading this package instead of PEAR, I'm all for it.
Did you include() it in another file? That changes the working path to that of the original calling script.
I wrote Flourish, so I'd be happy to explain why I did not invest my effort into attempting to improve PEAR. PEAR, or any well established project has quite a lot of momentum, and it is very hard to redirect that momentum. In addition, the project most likely made a conscious decision to behave the way it does. PEAR is designed to work with PHP 4. It isn't easy to install packages with all of their dependencies if you don't have command-line access. Many packages are unmaintained. Most packages have lots of unresolved bugs, that are often years old. I'm interested in PHP code that only requires the standard PHP extensions. I'm interested in PHP that has the same functionality on Windows, Linux and Solaris. Basically there is a lot of things that I personally think need improvement. I'm sure some packages are great, but there is no way I could even begin to make any sort of difference that would help me achieve my goals with using PHP. While I'm quite sure I've ended up duplicating quite a bit of functionality in PEAR, I have a particular interest in class APIs and documentation. Basically, I'm interested in the usability of code. But Flourish doesn't just re-implement functionality in PEAR or elsewhere - it also has a lot of code that is not available in any other major libraries. Things like arbitrary precision math without bcmath, full UTF-8 string function support without mbstring, backports of PHP 5.2 features to 5.1 and a standardized dialect of SQL that works across all major RDBMS (including DB2 and Oracle). Related to API and code usability, let's look at PEAR's MDB2 and fDatabase. This is not about picking on MDB2, it is just probably the closest thing to fDatabase. With MDB2 you have to manually check for connection errors. fDatabase throws an fConnectivityException. With MDB2 you can either use the static ::factory() or ::connect(). If you use ::factory(), do you have to manually connect? For fDatabase you can use very simple sprintf()-like placeholders to properly escape data by its data type. With MDB2 you have to concatenate SQL strings together with the return values from MDB2::quote(). As for documentation, I've gotten lots of feedback about how the documentation for Flourish is easy to use. Like the code, I know there is still tons of room for improvement, but I get the sense I am going in the right direction. http://flourishlib.com/docs Basically, if you want to make significant changes to an existing project, you have to start from scratch. A number of the big frameworks (ZF 2, Symfony 2) have done this recently. You also need to have significant influence over the other developers on a project. I instead opted to write a few classes and release them as open source. Over the past few years I've kept up with it and that is where Flourish is today.
echo "".dirname(\_\_FILE\_\_)."/resources/templates/file.txt" and make sure that path/file actually exists. 
d'oh. the change made since then and now is i renamed the files to make a little more sense in the context. thanks.
Thank you so much for fMailbox.
O my god. Is there any way we could merge our two DB classes?!?! Mine uses PDO on the backend and supports *implicit* replication (just by adding new servers to the config file) among many other things and is also licensed under the MIT license...
And this is _exactly_ why I made this comment in the first place. I'm absolutely certain that you are doing stuff in flourish that doesn't exist in PEAR, just as I'm absolutely certain that you're doing stuff in flourish that does already exist in PEAR. Did you get in touch with the MDB2 maintainers to discuss your ideas? Did you consider writing your own proposal? Pear2 is getting off the ground, why not be one of the first database packages in there? My beef isn't that you wrote your own code, and it certainly isn't that you open sourced your own code (thanks for doing that, by the way). My beef is that good developers are not even attempting to work into PEAR these days, and the end-result is a million frameworks out there that all try to solve similar problems in different ways. PEAR is by far the best and easiest way to deploy components across every single installation of PHP out there, but it will only ever be as good as the people that collaborate on its components. When good developers like you forego contributing to PEAR because you can't be bothered with the extra work involved in collaborating with existing projects, then the whole community is fragmented that much more. I'm glad you released all of the components that you've worked so hard on, and I hope they are extremely helpful to many people. I just think that if more developers dedicated time toward collaboration rather than setting off on their own to solve existing problems, then the whole community would be better for it. And PEAR is the only really ubiquitous php component system out there.
"MIT License? SWEET!" \*steals code\*
I think we just have a different opinion here. Sure, it would be great is everyone just worked on one system and it was perfect, but everyone has different goals, so that is impossible. Yes, I do lots of stuff done that exists in PEAR, but it is so different I would need to scrap the core of PEAR. I don't believe in using errors, only exceptions. Code should be as noisy as possible if something goes wrong. You should never have to check for error codes. MDB2 requires PHP 5.3. I would have to ask them to rewrite it to be compatible with PHP 5.1, but they just rewrote it for 5.3, so that would be a waste of everyone's time. I have no interest in Pear2 because PHP 5.1 is still alive and kicking, even on a server I run. My opinion is that PEAR is not the best way to distribute code. SVN externals, git submodules, downloading a zip with all dependencies and whole host of other ways are completely valid. I've had in mind to set up a PEAR channel to host Flourish, but then I ran into issues where I need to version in a specific way to get it to work properly. I version based on my SVN repository revision number. Their documentation and code browsing sucks. To make it better you'd have to write a new system that is backwards compatible with everything there. I just wasn't interested in that. I'm sure PEAR is great for lots of people, but there are clearly lots of issues. If there weren't issues, then so many developers would not be bypassing it. My opinion is that it is too far off from what I want that I don't want to waste my time on it. Fragmentation is going to happen because people have different goals. I wouldn't have built Flourish if anything was even close to what I envisioned back when I started back in 2007.
Hey, I wrote it to use in commercial applications. Why should someone else have to rewrite the same functionality for the same purpose? In fact, there are at least a few commercial products out there that use Flourish.
I'm using Yii at present. What would I gain from using flourish instead? What would I loose? Would it be worthwhile using both?
I believe adding ob_start() to your script might help. 
If you echo or print anything before session_start() you're going to experience problems like this.
As an old school PHP fanboy, I agree completely. But it's not like PHP has really gotten all that worse, it's had a number of great additions. Python and Ruby just had extensive plans from the beginning.
I love the MIT license for that exact reason. I have every intention of reworking your fImage class for use in my own [inferior framework](https://github.com/ChiperSoft/phPit), which is also MIT licensed. :)
Hm I'm not using session_start(). I have an index page that contains both a login form and a list of links as a "control panel" to CRUD blog entries. If no cookie is set or the cookies are wrong, it loads the login form. If the cookie is set and it checks out against the db then the "control panel" links are loaded. I could move the set cookie to the top of a separate control panel page, but the control panel page would be checking the cookies against the db before it would load the functions available to the user. So it doesn't make sense to me to setcookie and then check the cookies on that control panel page. Do I code a setcookie page between login and controlPanel? I apologize because I'm sure this is a dumb question but given that I didn't run into this on my home servers and I'm now on march break I can't ask my teacher. 
Ditto Zend Framework. This is the most pertinent question. I think it's great that Flourish exists and I encourage the dev(s) behind it to go for it but at the same time, from a practical "I do this for a living" point of view how does developing with Flourish compare to developing with Yii or ZF or even Symfony 2? I just don't have much time to play around with everything that comes along (no matter how interesting it may be and how much I want to... I have to pick and choose with the limited time I have) so I would love a quick comparison. Something practical like: create a page that securely handles login and authentication of a user, retrieves some data via an ajax call and renders it in a view. Add some navigation, throw in some javascript visual effects for good measure and show me how the bootstrap would be setup for all of this. Or maybe compare creating custom routes or non-trivial forms or whatever... practical, real world comparisons of platform X and platform Y.
I work on a vmware guest which i have installed ubuntu-server on. Installing Apache, MySQL and PEAR is extremely easy. And you can make snapshots to backup.
I like Linux. In fact, I wish I could use Ubuntu, but I have 3 widescreen monitors attached to a single computer via a single video card, and Ubuntu started freaking out on me and not displaying everything correctly. Thus, I'm on Windows 7, which has problems with PEAR and XAMPP. I'm not sure about installing all components separately (Apache, PHP, etc), but I'd rather not go that route. The point is moot, anyways. PEAR is known for being a repository of old, unmaintained code. I can fiddle with setting everything up until PEAR works, or I can simply download a single ZIP file and start immediately.
Oh. You don't need to run Ubuntu on your machine, the trick with VMWare is that you can run guest OS'es in parallel with your host operating system. You code on Windows 7, you boot up into Windows, you start VMWare and boot up Ubuntu inside a window. Now you have your development environment on the VMWare guest, and your text editor on your Windows host. You really get the best from both worlds out of this! :)
&gt; PHP never lost it's cool to hipsters. I wouldn't necessarily say that. My project manager at work is a die-hard hipster and wanted to build a little personal project site. We're primarily a PHP web development shop and he *insisted* on doing it in Ruby. PHP just wasn't hip enough for his tastes. Luckily he got a few days into Ruby with his tail between his legs and is now almost finished with the site in PHP ~_^
My guess is that, on your home server, you have output buffering enabled in the php.ini file but on the server it's not set. You have to set any headers (including cookies) before you send any output; this should make sense, they're not called "headers" for nothing. It should be possible to do all your checks before you render the content of your pages. You might also want to consider using sessions instead of cookies. 
I think it's just you.
It depends on the case, I suppose. I use Yii primarily because it does everything I need to do, and the Extensions are constantly added to. But I've done some smaller projects where I used Yii simply because I knew it inside &amp; out. And on reflection it was overkill. To me, this is where Flourish would shine. Like if I was going to build a pet project that I knew was going to be small scale, but needed the basics of a framework, I'd look at this first.
I love how it describes itself as object-oriented and then the example code is as far from object oriented as you can get.
thanks that's what I was asking
no astroturfing. Just curious. I haven't used it yet. 
If you include a php file in your header that has a closing php tag at the _bottom_ of the file, and there's as much as a space or a new line after it, it will output the space before any of your header, which will throw an error before you can set a cookie . tl;dr - don't use closing php tags if your php file ends with php code (not html/js, etc)
I ask for the reasons why the writer dislikes PHP and the reasons they prefer another language, and try to learn from their opinion. It has its strengths and weaknesses as all languages do, and as I tend to be pragmatic and am relatively inexperienced I want to know what those are.
The numbers speak for themselves: http://w3techs.com/technologies/cross/programming_language/ranking PHP is fun. The reason that I find it fun? Its so easy to just get something up and running. That's why I picked it up in the first place. If you download a package like MAMP or WAMP, you can up and running your first PHP code in 2 minutes with PHPMyAdmin right by your side. Until you find the fun in programming, you will probably not have the patience to work with the "complex"/low level languages. There are many nuances to the php language that people will point out, but by the time you come across those you will probably have a good enough understanding under your belt to just shrug it off and give it a laugh. PHP.net is an awesome resource. I write some C# and I find MSDN a nightmare in terms of usability compare to PHP.net. The amount of resources that are out there on the net for PHP is un-matched IMHO. Blogs, forums, frameworks, open source projects, the list goes on and on. I think PHP is what the internet is all about. Its very accessible to techies and non-techies alike, open sourced, utilitarian and community driven. It provides a solid toolbox to build your idea. If you are looking to get caught up in the nitty gritty of programming, maybe its not the language for you. But if you have an idea and want to make it a reality, PHP is a great place to start. C/C++ programmers will be toiling in the basement of their mother's house calculating memory allocations, pointers, and obtuse 'make' error messages while you are thinking about the next feature to add to your idea. Once your idea takes off, maybe then you can come back and revisit the question of PHP being the right language for the job, but till then, lets worry about whats really important. There is a theoretical boundary where PHP might not scale to. But i would argue that 90% of the websites out there wouldn't come close to pushing PHP to its breaking point.
I tend to say something along the lines of how easy it is to bash **the single most popular** web development language in existence. It is a big target after-all. No one would bother to bash it if it weren't so popular. This invariably leads to the question, "why is it so popular?" and the answer being: despite it's many flaws, it's good for a lot of things. Follow that immediately with a succinct "STFU" and end the conversation.
I do not use frameworks. Well except for the occasional wordpress install. I do use MVC though. My data lives in a php file that throws it into an array and outputs it in JSON. Makes code re-usability very easy. My projects are typically reports or a GUI interface. Most of that is done with jquery though. I find frameworks overly complicate projects, take longer to code, and slow the page loading time down. BUT, if I had to work with more than 3 or 4 developers I would be on the framework bandwagon.
&gt; There is a theoretical boundary where PHP might not scale to At that point the developer just converts PHP to C++, problem solved.
Will not sort the issue at hand, but might tidy stuff up a bit. Double-check that in your production file you are using the right function definition. You seem to be providing argument 'r', which is regularly used in an fopen() call. file_get_contents() however takes a boolean (use_include_path) as the second argument; 'r' translates to a value of true when type-juggled.
Exactly! I feel like PHP is just like any other language. I don't understand how people can bash php when syntactically javascript is very similar but no bashing. Perhaps it's the .method approach. But hey both make use of ; and {}.
Good point. Hopefully I build a site one day that needs to make use of php -&gt; c++ compiler. :)
FWIW JavaScript gets bashed quite a bit too though usually for different reasons. It was basically seen as crap until jQuery and Ajax became popular.
Exactly. That's what Facebook did with HipHop and they are the most visited site on the internet.
It's alright. Just misses a few things here and there but frankly I'm only to blame since I could contribute. There are definitely some very cool aspects in terms of very frequent functionalities like cookies, session, etc. It's definitely lean, but I did notice that the include time is pretty heavy. I don't know why, but including Flourish takes significant chunk for a request (based on profiling with Zend Debugger). I really like that you definitely can use only a small portion as needed and ignore the rest until it's needed. For that, it deserves many thanks.
&gt; When I upload it to a remote hosting provider though it throws an error that cookies must be sent in headers before anything else Please provide the actual error output. Also, check the PHP5.2 -&gt; PHP5.3 migration incompatibilities at http://www.php.net/manual/en/migration53.incompatible.php Do you use any of the following in your code: $_COOKIE, setcookie, $_SESSION, $_REQUEST, etc
Some people are just infatuated with whatever the hot new thing is, and quite honestly it frustrates me. From the products like WAMP / XAMP, to tools like Netbeans, CMS like Drupal / Wordpress, every host on the planet supporting it etc, I feel like everything I learn is well supported. I feel like I'd be throwing a lot of that away if I went for say Python or Ruby, and I cant quantify why I should. Why are other languages better at processing a form than PHP? At the end of the day, so much of what I do is no more complex than dealing with some forms etc. I'm all about using the right tool for the job, but there is this point where its "good enough" and PHP hits that point for a lot of things no matter how much people try to bash it.
I'd agree and say that its closer to 99% of websites though. Some people are just hipsters. They have to have their Macbook air, and must use Python or Ruby. MySQL is a dirty word, and Apache is like a stupid cousin. Their blogs must be done in style, god forbid it be a wordpress blog.
Like everything else: [citation needed], followed by a nice hot cup of STFU if they can't provide it.
Flourish looks like a nice library, from which you can pick and choose components. From a ZF perspective, you could do things like: - Use Flourish's Image-manipulation functions to stand in for the non-existent Zend_Image. - Replace Zend_Db/Zend_Db_Table with Florish's activerecordy-ORM library. - Perhaps fMailbox is easier for you to use than whatever ZF provides (I didn't bother to check if ZF even has components for dealing with POP or IMAP). In that use case, it's very much like ZF if you use ZF while ignoring the Zend_Application and Zend_Controller stuff. I've used various ZF components (Zend_Cache, Zend_Mail, etc) for support roles in projects that are already built using some other (often in-house) framework.
I usually agree with them. PHP is an awful *programming language*. The standard library grew in a haphazard, unorganized way. The fact that it became wildly popular was what undid it. They *can't* fix all the little idiosyncrasies without breaking backwards compat, and that's their holy grail. There's a lot of powerful features in other languages that PHP doesn't have, and given the attitudes of the core team, we'll probably never see them. That criteria alone makes pretty much every other language possibly a better experience for experienced developers. But PHP is basically guaranteed to be on every single shared hosting provider and is dead simple to get working. Ask a normal end-user to install a Ruby or Python web app on their shared hosting account. Go ahead. The host almost surely won't have the required environment for them. It does the job, and well-constructed PHP applications can do anything that any other language can do. It just might take more work to get there, and the code might not be as elegant as in other languages.
That, along with a plug for it's accessibility &amp; extensive documentation. Plus PHP frameworks have grown substantially in the past few years, so there are lots of strong libraries available.
It does indeed get the job done. Of course, most of the complaints that people have against php are perfectly valid. I use PHP quite a lot, because deployment is easy, 3rd party libraries are numerous and often high quality, and it gets the job done. At the end of the day though, if I'm doing something personal for fun, I'll probably use Ruby. I have nothing against PHP and don't bash it, I just find Ruby more pleasant to work with. We all have our opinions. The python folks bash ruby and I look at python code and think it looks like a mess :) At the end of the day, they'll all do the same job. Some might do it in fewer lines of code, some might do it in a more readable way, some might do it with less hassle to deploy. Pick what you know and like, go with it, and don't worry about what other people think. 
Good points. Actually I have need of an image manipulation library right now so I will check it out (I was using SimpleImage but need more). ZF's mail component (Zend_Mail) is solid but I would certainly consider Flourish's ORM over Zend_Db (though I am leaning towards Doctrine as it will be in ZF 2.0 and is in Symfony). 
really cool
&gt; Typically, frameworks remove this headache by allowing you to extend rather than replace. Which would only add to the problem for people taking the project over from you - not only training developers on this new or updated framework, but deciphering your own personal extending classes or wrapper functions. Bottom line - keeping it simple and heavy documentation are key.
&gt;They can't fix all the little idiosyncrasies without breaking backwards compat, and that's their holy grail. I don't understand this argument. Why does the new version have to support the old crud? Libraries wont work? Fix them or switch to something that's maintained. Your code wont work? The fix it or stick with the version where it did work. I'm not advocating massive changes for the sake of it but really, how long should the language carry the baggage of the past?
People who bash any languages are grossly ignorant. To say that 'language X is better than language Y' is so vacuous it's absurd. PHP has it's strengths, as does Ruby, Python, Scala, ad nauseum. The same goes for weaknesses. It boils down to the work at hand, and the people that need to get that work done. Anyway...when I hear people language-bashing, I write them off as a moron.
I have learned to ignore them, and make a mental note that they are ignorant and closed minded. People always bring up the same lame ass arguments like the == vs === operator and dynamic typing. And every time, what it comes down to, is that they know absolutely nothing about the language, and have only used it twice. You cant reason with these people. They have made up their mind, and are on a holy crusade to liberate us poor PHP developers.
It's a tool in your metaphorical belt. Use the right tool for the job. For web stuff, which is my bread and butter, I use PHP. If I were to try to write a desktop app or use something for data analysis, I'd go for Python (still learning it).
I used it because it was the fastest, and simplest way to get done what I wanted to get done.
You can only have one instance of `mod_php` enabled in Apache at once. You can't have both PHP4 and PHP5 installed, for example. `mod_php` is the big reason that PHP became ubiquitous. PHP via FastCGI used to be fragile and quirky. It's much better now thanks to FPM and all of the improvements Microsoft contributed to FastCGI support in general. However, FastCGI is not a popular option in the realm of shared hosting, and that's again where PHP wins out huge. Remember, it's shared hosting that is the juggernaut here. If you upgrade PHP and break a client's site, you're in it deep. This is one of the many reasons so many people are stuck with old versions.
Perhaps the new version could have a variable to chose whether the new or old library is used, with the old being the default. That way it wouldn't affect any old scripts, and new scripts would just add a line of code to the start.
That's how I feel. In a day an age where we preach racial, ethic, sexual, religious equality its still taboo to love php. Amongst my coding buddies they are like what???? You like php???? Why???? I choose php for my personal projects too. Utter horror for my friends. 
It is usually ruby/mac fanboys that are doing the bashing. So im not offended.
Syntactically JavaScript is a can of worms.
&gt; keeping it simple and heavy documentation are key. That is ideal, but unfortunately, keeping it simple isn't always an option when customers require a variety of features.
*covers ears\* "LALALALALA I CAN'T HEAR YOU!"
&gt; I don't understand how people can bash php when syntactically javascript is very similar but no bashing. PHP feels really hacky as opposed to "less hacky" languages like C#. There's object support similar to Python, but the language isn't based around it; objects are really no different than dictionaries. There's nothing to say that an object can only have some properties, and there's [nothing different](http://codepad.org/cBNmeBe9) from an anonymous object with some properties and a named class instance with the same properties. There's no *great* IDE for PHP like there is for C#, and the language has a host of other problems. 
&gt; There is a theoretical boundary where PHP might not scale to. But i would argue that 90% of the websites out there wouldn't come close to pushing PHP to its breaking point. That percentage would be much closer to 100%. There aren't many sites with more traffic than Wikipedia. Most of the time, scaling issues are related to database access anyway.
I like bashing in PHP - even have a couple of deamons running, written in PHP.
&gt; There's no great IDE for PHP like there is for C# You will be amazed when you try out Jetbrains' phpStorm. It's not exactly comparable to a decent Java IDE like Netbeans, Eclipse or IDEA, but still - try it.
This is exactly where I am at.
I join in. All languages have good aspects and bad aspects. PHP *does* work and get the job done, but it also has cringe-worthy inelegance and bad design going on as well.
Javascript seems like a great idea. The problem is that it's implemented differently in every browser. It can also be a pain to debug. So, there's some core set of Javascript that can be used without worry. But, then there's the other 90% that can't really be used. I personally enjoy writing PHP, but I spend my time writing C# (thick client) or Objective C.
True. As with every language there are quirks. DHTML was a nightmare really. jQuery makes a huge difference for cross browser compatibility built right in, and many other frameworks are also taking out the headaches of JavaScript. On topic, someone just yesterday gave me this link to a page about JavaScript's quirks and how to overcome them - http://bonsaiden.github.com/JavaScript-Garden/ Crockford's JavaScript: The Good Parts is also amazing for "unearthing the excellence in JavaScript". There are some amazing folks who make JavaScript worth using these days, such as the people who run the JSMentors mailing list - http://blog.reybango.com/2010/12/02/why-we-built-the-jsmentors-com-javascript-mailing-list/ But yeah, I wanted to say it's oversimplifying some to say "but the language gets the job done, don't bash it!". Better to understand the quirks and intricacies and use the best tool for the particular job. After all, context is everything.
Why do you prefer PHP over C#? Just curious. I was a hardcore PHP fan when I had to take courses in the .Net framework, ASP.Net, and C#, and was impressed by a lot of the built in and pre fab stuff Microsoft has done. I still like PHP myself but I'm not experienced enough to say one's better or the other; I just want to code. I'll use whichever one best fits the required platform for my employer.
phpedit from experience is damn good and support is top notch.
&gt;Why do you prefer PHP over C#? I use PHP for client-server applications and C# for thick client Windows applications. The .Net Framework is very nice. I just never build web applications with it, because I don't want to build web applications with managed code, and I don't want to run MS web servers. Building websites that work well requires knowledge from the HTML to the database, and to more. If you try to abstract away part of that, you are going to get stuff that just doesn't work correctly in all cases. But, I've never built a web applications with C# or .Net, so take what I say very lightly. I'd just much rather not have a web application use managed code from a company that seemed intent on destroying the Internet at one time.
Netbeans for PHP works like a charm.
* PHP is very widely deployed, and comes pre-built with a large standard suite of Web-relevant modules. This provides consistency when deploying PHP apps, often without requiring system administrators to make any changes to their server configuration. * Most PHP apps can be installed on a server without any access to the command line. * No manual compilation step is needed, and performance is good in spite of that. With APC, which is soon to be included in the PHP core, we can lose the overhead of the (automatic) compilation step, keep all the opcode in quick-access memory, and even perform some automatic code optimizations. * Built-in and module-provided functions are written in C/C++, and thus most of the heavy-lifting you do in PHP scripts actually runs as fast native machine code. * A regular HTML file is a valid PHP file. * No downtime is required when launching a new version of a PHP file, even on a single-server single-app-instance setup. * By disabling shell-related functions (via configuration options) and setting the PHP open_basedir option in Apache's virtualhost configurations, it's possible to effectively sandbox PHP sites to specific areas of the filesystem, without dealing with messy chroots or other side-effect-laden approaches. This is a huge plus for servers that host lots of websites, as it can prevent an app-level security exploit on one site from affecting the others. * Although PHP wasn't exactly a "designed" language, and suffers a large number of internal inconsistencies as a result, it has continued to evolve to meet the needs of the time.
I've been using eclipse for php development and have no complaints.
I've been doing this web dev nonsense for over 12 years now. Javascript was maddening before jQuery. There were other frameworks, sure, but they tended to do too much for you. It was kind of like you had to do everything with jQuery UI whether you needed all that or not. But, like so much in front-end web programming, the problems were, for the most part, not really Javascript's fault as a language but the browser implementation vendors provided for it. Also, it can't be stressed enough how much better and more uniform web browser behavior is across the board now then it was in, say, 1998.
There's a lot of ways to do things in PHP. Some people need more structure. Syntactically it's a little ugly at times with all the dollar signs and arrows. String concatenation with periods instead of plus signs is a little irksome. Type juggling seems convenient at first until you realize you're writing a lot of validation and type casting code that could have just been caught as an exception. PHP 5.2 has filter_var, which will help a lot in that. And it didn't have very good OO support until relatively recently. Also placing included file paths in parentheses is weird. But my biggest hangup is PHP is practically all I ever get to do.
I would love to live in their world of never having to integrate with existing technologies or support real, paying customers.
Zend Studio here and VIM(with NERDTree YAY). Personally I would say Zend Studio is a pretty full featured IDE for php.
That is the "SourceGuardian" loader. That the guy who wrote this app won't even take the time to google that to figure that out is ... concerning. If Kwolla is packaged with SourceGuardian, this is the app vendor's problem. If not, this is your ISP's problem.
That is the "SourceGuardian" loader. That the guy who wrote this app won't even take the time to google that to figure that out is ... concerning. If Kwolla is packaged with SourceGuardian, this is your problem. If not, this is his ISP's problem.
I agree C# is nice for windows apps, however C# + ASP.NET is something of a nightmare. You should see the HTML code Visual Studio generates especially if you start dropping on controls etc. I feel I have a lot more control over the code with PHP and my own HTML/CSS.
By bringing up the facts, then getting downvoted for pointing out that PHP scales circles around the competition, and that there isn't anything important written in (pick the toy language of the week.)
I would find a sales data graph or table easier to digest, especially if the graph was marked on the dates where you change pricing. Thank you for all this information :D
Headers are before body content, and by default, nothing's caching body content. Therefore, you can't use headers after anything - even whitespace - is sent. &lt;?php header("foo","bar"); echo "quux"; ?&gt; // fine &lt;?php echo "quux"; header("foo","bar"); ?&gt; // breaks Look for whitespace before your script starts, or echo()s that run before your header is emitted, or stray empty space around scripts you're including; things of that nature.
Unsafe. Better to fix the problem than to nail one server down with an undefined buffer size.
&gt;The numbers speak for themselves: Best selling book of all time: the Bible followed by Mao Tse Tung quotations. best selling song of all time: Candle in the Wind by Elton John. Popular != Good. 
I'll probably do this for the next one when I have more data.
I like a lot about PHP, it is very well equipped with functions, I hate that when I'm using javascript/node.js, that for example the date class can't show month names. That said, as I've said many-a-time on here that PHP needs to purposefully move forward soon. Set a date or version in the future that they're going to drop a lot of deadweight and fix a lot of the weird messiness of the language. But to be honest, I just don't think PHP can do it with their current approach. Look at how namespaces was implemented, it was crazy. Maybe that isn't what PHP is, maybe PHP is just a tool for dirty work, just to get the job done. I'm not sure if that is a philosophy that will lend itself to retaining a market share in the long-term. PHP is suffering a serious brain-drain problem, as Perl did in the late 90s early 00s.
I tried it a couple of times, it felt like bloatware. As for the reviews I've found, most people said it's not really that good, and it's based on Eclipse (which is not a bad thing by itself, but you're PAYING for the software..). Also, phpStorm (which is IMHO superior - you don't have to take my word on it, try it for 30 days) is 100$ (I paid 50$ on January 50% off sales) while ZS is 300$ which is 3 times as much. Just my 2 cents.
Aptana? So have I, for months, almost years; I've switched to phpStorm a few months ago and although it isn't free like Aptana, I haven't looked back since. But don't take my word for it, try it, it's free for a month.
"/dev/null is a good database from what i've heard"
Mostly just ignore them. I've also been looking into other related languages though, just to see what other alternatives are out there.
It's definitely not the fastest ide, but it has quite a few features that are really nice. It shows you warnings/errors with nice little markers right inside the ide. The debugging tools are also quite good, and obviously the integration with zend framework is very nice (which is the framework I use atm). I've never used phpStorm, maybe I'll take a look at that. I do have to say though, since being shown some of the cool plugins for VIM, I find my time spent in an IDE less and less.
I tell them that it's supported pretty much everywhere, yes it is shitty in comparison to something like Python, and that much as I wish I'd spent the last 9 years developing in Python, PHP has landed me a fair few jobs and jobs pay the bills.
Don't echo $numbers; It's still an array: echo $numbers[0];
What exactly was wrong with namespaces? I hate PHP as much as the next PHP programmer, but namespaces seem fine.
magic_quotes_gpc(), register_globals(); DIEDIEDIEDIEDIEDIE
but won't that only echo $pic1?
TBH it's more likely to be your DB or IO that's blocking than PHP itself, especially with APC and FPM.
Theoretically speaking that should not throw any errors, it will not function like you would like it to either. Let's take a step back: * You want to pick a random JPEG out of your array * This means fetching a random value from that array * To fetch a random value we have - for simplicity sake - two options: * Shuffle the array and grab an entry (for example, the first using array_shift()) shuffle($numbers); $randomJPEG = array_shift($numbers); // or $numbers[0] if you prefer (see BTMPL's post below) * Let PHP grab a random key for us using array_rand() - just like you mentioned in the thread title. Note how you do not need to shuffle, array_rand() takes care of randomization for us. $key = array_rand($numbers, 1); $randomJPEG = $numbers[$key]; 
hey it works! thanks friend
If you think warnings/errors with nice little markers are an advanced feature, well then you definitely need to check out phpStorm because that's just really one of the countless tiny details that make it great. ;) Anycase, I hope you have fun using it. And be sure to change the default theme, at least to turn on antialiasing if it's not on by default. You can change the theme from the default to a native theme (Windows if you're using windows, etc.).
I have a very practical relationship with the language (I use it to make money) and while it can be crude and less sophisticated than other languages it is possible to use safely and securely while at the same time being easy and pervasive to hosts worldwide. People kvetching about it usually make the same set of points over and over and frankly these points are mostly non-issues if you know what you are doing. Unless they are offering a realistic, practical solution along with their complaining I simply ignore them.
The function shuffle() will re-assign new keys. So the first index (0) might point to $pic1 or $pic2, dependent on the result of the shuffle() operation.
No point shuffling an entire array. `echo $numbers[mt_rand(0, count($numbers)-1)];`
This applies to all languages: Every language sucks. At some things, PHP sucks less than the others. 
I just figure they are butt-hurt and/or a 15 y/o script kiddie and dismiss what they say offhand. Everybody has their opinion, it is the loudmouthed annoying ones I just ignore. Calmly and maturely discussing the "Cons" of a language isn't "Bashing" IMO, so YMMV. 
I don't like the separator character for namespaces.
Get over it? I didn't like it initially but PHP is far from a pretty language anyway.
Yes, if you wish to display all you can: foreach($numbers as $item) echo $item;
Agreed, that's the best solution. Shuffling is O(n), the above code takes O(1).
I show them my paycheck stub.
Possibly a better solution if you're dealing with non-numerically-indexed arrays: echo $numbers[array_rand($numbers)]; 
I agree.
I've just been using the just base install with PDT and Zend Server CE installed in the background. For a free environment it's pretty decent, and nice seamless debugging capabilities.
PDT? Wow, when I had *that* installed it was basically a glorified Notepad. When I upgraded to Aptana, and especially Aptana 2, now *that* was a great experience. However, some things were still missing, like decent refactoring. With phpStorm I'm pretty much reborn. :)
Yeah, I'm using doctrine2 in a couple of ZF projects currently, and it's a joy to work with. I much prefer it to anything activerecordy. For image libraries, I'll be looking at flourish's stuff for an upcoming bit of work. There's also [WideImage](http://wideimage.sourceforge.net/), which seems to have a nice feature set. 
That looks interesting. I've also wondered about the code in the [Apache Zeta Components](http://incubator.apache.org/zetacomponents/) (formerly ez components) set. I've not used it but it is backed by some good programmers (Tobias Schlitt for example) so I am looking at it.
Hey man just an update. Yesterday I finally managed to create all but a few letters successfully :) We checked several letters and the values, names &amp; addresses match. Ended up using: that(.*) with SSN *([0-9]*) *, has made payments related to school expenses that amount to € *([0-9]+(?:,[0-9]*)?) I was having problems with Latin characters and even after writing something like: ([aªáàãâbcçdeéèêfghiíìîjklmnñoóòôõpqrstuúùûv-zAÁÀÂÃBCDEÉÈÊFGHIÍÌÎJKLMNÑOÓÒÔÕPQRSTUÚÙÛV-Z \n]+?) I couldn't match them all. Only after some tinkering I understood what the output of *preg_match_all* is, its much a more powerful function that I thought - I wasn't comprehending what the output of print_r($matches) was, or how to grab the capturing groups. I then crossed the values by SSN number with my other table and created the letters in word xml (easiest way to write them with formatting). Thanks for your help. 
I've heard this repeated on here a lot, but it isn't the whole truth. The PHP documentation says that ["the closing tag for the block will include the immediately trailing newline if one is present"](http://php.net/manual/en/language.basic-syntax.instruction-separation.php). It is true though that you can't have spaces or several newlines after closing tags, and especially not before opening tags. However a few third party libraries (e.g. EZ components) have closing tags followed by a single newline - those are fine and won't break anything.
I completly agree. Last month I also implemented a websocket server in PHP for one of my client. It was going to run internally as a RIA, and I was pretty much in control of their environment. Chrome browsers for everyone :) Furthermore, I've also got some backup script running with php, as well as some log rotation.
I would also like a pack mule sir!
&gt;I don't understand how people can bash php when syntactically javascript is very similar but no bashing. Uh, this comparison doesn't make sense. With server side scripting you have a choice, and it is more open for debate(or bashing). With javascript everyone is stuck with it because thats whats implemented on the browsers. I wish it wasn't the case and you could choose your browser scripting language, but you can't.
Node.js? I like javascript too. I use it like everyone else. Just people seem to accept javascript for its faults a lot more than they accept php. If you didnt know ssjs is the next big thing.
I don't like the $ they use before variable names, it's ugly and I think they should use butterflies instead.
This is my usual answer: http://stackoverflow.com/questions/2302933/asp-net-vs-php-performance-future-proofing-ease-of-development/2303675#2303675
And watch your server get blacklisted pretty fast.
Let the money talk. 
I tell them my salery.
It hasn't happened in 4 years...
Ƹ̵̡Ӝ̵̨̄Ʒtotal = Ƹ̵̡Ӝ̵̨̄Ʒquantity * Ƹ̵̡Ӝ̵̨̄Ʒvalue; Dunno, it doesn't feel right.
I just take a break from Reddit.
So you're cool with VisualBasic then? ;)
I usually join in. 
Once you feel a bit comfortable in Python, you'll think, "This would make a cool language replacement for PHP!" At that moment, go directly to [web2py.com](http://www.web2py.com/).
There was a point in time where I would have chuckled at this comment, but I realized it's no better than the language-bashers. I'm sorry friend, but I'm going to have to downvote you.
Um, that was my point. I don't like javascript, I wish you could choose your browser scripting language, but you can't so there is no reason to complain. You *HAVE* to accept the faults with javascript. With php, you don't because you have choices between arguably much better languages, so people will bash it. I have no idea why you brought up node.js, that is irrelevant to what I was saying. I understand people use server side javascript, but 99% of people referring to using javascript are using it in as their browser(client side) scripting, and there is no other choices. 
You can go there to get simple sample code. http://www.gotapi.com/php
Not necessarily correct. You can have multiple versions of PHP running as separate shared objects, but you can only have the .php extension mapped to one of them. Then again, depending on your hosting environment, you can tell it to use a different version per different virtualhost. Semantics...a bitch, I know.
To be fair, no self respecting admin has that turned on in php.ini
The question is, why is it no better than the language bashers though? I see people constantly talk about using something else, but rarely do I see anyone attempt to provide a well thought out reason for their opinion. Its not up to me to prove someone else's assertion that a different language is better, or that PHP is unsuitable. I just use whatever gets the job done. When I was just learning javascript, I got introduced to jQuery, and immediately started using that too because it was easy for people to demonstrate its value. jQuery went so far as to make it EASIER for people to use competing products, yet it has seen widespread adoption. I have yet to see an eye opener like I did with jQuery. Right now I'm not even sure about PHP frameworks because they can be as restricting as they are helpful (or so it seems) and there are so many of them that are on the edge of a major overhaul. At least Python has a "winner" in that respect. Give me a language that is *TRULY* better, and I'll adopt it in a heartbeat. Its important to note that better is NOT just about academically superior. I need to be able to run it on major hosts, it needs to have products that compete toe to toe with Drupal / Wordpress, I need to easily be able to hit Google for example code, *and* it needs to be clearly superior in PHP in a way that actually effects what I do. Otherwise, I'd just be making the switch to make the switch and whats the point of that.
My comment was directed towards your generalization of hipsters. Maybe I'm just sensitive because I'm a newly-converted Python user. ;)
Just to be safe use `rewind` - `current` or `array_shift` because maybe one day you'll change them to associative arrays. echo array_shift($numbers);
I think its an accurate comment, for the most part. Substitute the word "Non-conformist" if it makes you feel better. I don't really mean it as a harsh insult, its more of an eye-roll, and only when I encounter opposition to PHP in an evangelistic condescending context. For example, when you say "I use Python" all I think is "Must do what he needs it to do". Its when people start bashing PHP without even knowing what I am using it for that I typically get snide, and that's the type of person my comment is aimed at. If I search for [Python vs PHP](http://wiki.python.org/moin/PythonVsPhp) I get this kind of stuff. Cmon don't we have anything better to argue about than curly braces vs indenting? I look at that list and don't see anything that really stands out for me and says "Oh shit, I need to use Python" or "Damn, I'm glad I'm not using Python". All of my commentary on this subject is just driven by a level of pragmatism that is an important context. I just want the job done, and I don't care which tool I need to use to do it. When a certain tool is too hackish for a job, I go find another tool. If PHP were a car analogy, it would be a Honda Civic for me. Some cars are much faster, others are much more expensive to maintain, some get better gas mileage etc. By no means could you consider it a "superior car", yet I own one and I'm completely happy with it. It does what I need it to do.
It's hilarious that you have been downvoted, Flourish is just procedural code and uses classes as "namespaces". Apparently some people think that OOP is just that.
I understand, but I don't like that generalization the same way I don't like the generalization that all PHP developers are inept at security and have no idea how to write proper code. edit: forgot word
^ Another generalization that I'd have to agree with though, and one I'd expand to include more than PHP devs.
I'm using Symfony2, so yeah, I'm also using their DI.
It should happen with Lamp as well, but make sure that the files are encoded without BOM.
You are right. In end I think we agree on the same thing. I was going the wrong route with node. :)
Surely you wouldn't say that *all* PHP developers aren't versed in the basics of security?
It looks extremely useful, especially for a project that requires unit testing. I recently worked with a test-driven Kohana project where we implemented a similar DI container. I know from experience that having a DI container is a great feature. I'll definitely be checking this out.
Its a generalization not a fact. I don't know of any generalization that says "all".
A PHP interpreter. Compile PHP with PHP!
When did they fix this?
Well you could write a string manipulation library or something like that.
e-democracy go!
Could you elaborate on this? Or is it just a joke?
Not the PHP community, but... How about a skinnable fan community site. It would need news/blog, login integrated with phpBB forums, MySQL database tables for members, events, event attendance, costumes, staff, merchandise, and would need a complete back end for administering such, so non-techies can run it. Integrated photo gallery would be great too. Each event having it's own gallery. Any member could upload pics, but staff would have to approve. Maybe even an API for local chapters and parent site to share data (bidirectional). I know there are lots of solutions out there for this part or that, but trust me when I tell you a lot of fan communities out there would love one single package. ...or you could do that string manipulation thing.
A script that tells me, which classes and methods in my projects are lacking proper docblocks.
Unless they change the way shuffle works theres no need for it: &gt; Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.
How about this small code? Twittee A Dependency Injection Container in a Tweet class Container { protected $s=array(); function __set($k, $c) { $this-&gt;s[$k]=$c; } function __get($k) { return $this-&gt;s[$k]($this); } } //i modify it class Container { protected $s=array(); function __set($k, $c) { $this-&gt;s[$k]=$c; } function __get($k) { return $this-&gt;s[$k]; } }
Can't use something like [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer/)? If all you want is docblock syntax checking, you can create a custom set of sniffs that just run the standard docblock checks.
democracy *is* a joke. unfortunately, e-democracy is pointless without a slew of engineers and your own country to use it. basically, the reason why democracy never worked is that it requires the entire city-state/country to all be physically present to vote on everything at the same time. this is no longer necessary with the state of technology being what it is. we could conceivably have mob rule.
What things would you want from a string manipulation library, out of interest?
A mysql diff utility to sync multiple db structures. the only ones out there are old or expensive.
A cool website that is kind of like a cross between Facebook and Twitter, and also includes news, and will be worth ten squidillion dollars this time next year. I'll give you the details after signing this NDA.
I'm not surprised. The number of programmers who think using objects makes it object oriented programming is rather high. Even smart people don't understand.
You don't need root access to use PEAR. You can just as easily install PEAR for just you as a user. You can also run your own version of PEAR outside of the servers default copy.
Do you think you could provide an example on your front page that actually shows off some of the object oriented parts of your framework rather than something purely procedural? I just have a hard time taking a project like this seriously when the first example of something self-described as "object oriented" and it's all essentially a bunch of static function calls - basically, not using anything remotely object oriented. Just seems to be so much confusion with people assuming that putting things into classes or objects instantly makes it object oriented programming. Using classes and objects as namespaces does not OOP make.
Unless of course, you're inheriting a load of sites built in early 2000, and are so sprawling you don't have the time to convert them.
Your only option is to do as you suggested and provide enough ?s for each array element. You can avoid a loop using str_repeat if you wish: $sql = 'SELECT * FROM items WHERE category IN ('.rtrim(str_repeat('?,', count($categories)),',').')';
How do I respond? echo "stfu"; die();
You'd have to dynamically generate the query, then generate the array for the binding. So something like: &lt;?php $in = array(1, 2, 3, 4, 5); foreach($in as $n) { do { $hash = crc32($n); } while(in_array(':' . $hash, $fields)); $fields[] = ':'. $hash; $binds[$hash] = $n; } $binds = implode(",", $fields); $sth = $pdo-&gt;prepare(" SELECT * FROM items WHERE category in({$binds}) "); $sth-&gt;execute($binds); Personally I abstract the SQL through a [PDOQuery](https://github.com/radiosilence/core/blob/dev/core/storage/pdo.php) class, which uses [objects](https://github.com/radiosilence/core/blob/dev/core/storage.php) to describe filters, joins, etc. But this level of abstraction may not be necessary for what you're doing. I personally avoid using "?" in queries as it's very easy to mix up, especially if you're generating queries.
This would do something unexpected every couple billion queries because of CRC32 collisions. (Not downvoting though. It's an interesting example.)
Aye, you could always have it check that the CRC32 is not in the array. I'll update the original code.
The function/method I use: function placeholders($number) { if (is_array($number)) { $number = sizeof($number); } return join(', ', array_fill(0, $number, '?')); } Pass your bind array or a number to it and it will generate the number of placeholders needed.
Touché
[Zend_Db_Select](http://framework.zend.com/manual/en/zend.db.select.html#zend.db.select.building.where): $select-&gt;from('items') -&gt;where('category in (?)', $categories); 
Crud generators for code igniter 2 (like cake php has bake)
And to be slightly more serious then the rest of these weekend comedians... Don't build just for the sake of building, and don't build someone else's idea on your own time. You'll lose interest if it isn't something you're passionate about and end up leaving yet another dead project out there. Instead, contribute to a project you do use. Fix a bug in Wordpress, patch up Drupal, contribute to any of the umpteen million frameworks out there, fork something on Github and push back a fix. There's tons of work out there that needs people helping out with it.
[Propel ORM](http://www.propelorm.org/wiki/Development/Criteria#NestedLogicalExpressions) : ` $items = ItemQuery::create() -&gt;add(CategoryPeer::ID, $categories, Criteria::IN) &gt;find(); `
Its arguable that PHP *is* a string manipulation library...
Call it 'ignition'.
Proper support for 64 bit integers.
A simple bugtracker that dosn't require registration, is easy to translate (i18n?) and change themes.
an xls parser! lol...no, seriously,...a good xls parser is definitely missing. Having to move it to xml and then parsing it and then doing whatever you have to do with it is...a pain in the ass
I'll give you the whole haystack/needle , needle/haystack mess with string and array functions, but php5.3 brings some cool stuff to the table like lambda support and namespace. Also, there are some great frameworks built with php that will help you forget about the spaghetti code problem. If Symfony2 or ZendFramework+ORM isn't good enough for you, I would wonder what is.
Alright, so an array cannot be passed. I didn't know about str_repeat. very elegant, thank you
Here's a list of ideas, you could pick one and work on it: - [http://wiki.php.net/ideas](http://wiki.php.net/ideas)
We've got a homebrew one at work. It's very handy.
This is a PHP thread, what the fuck are you talking about?
A decent (updated) writer would be nice too.
You can also use filterbyid and propel will use an in if the value is an array. 
What you call elegant, I call hideous.
Good to know! Propel really needs to document their api better. They're using a wiki on the site, and it leaves a lot to be desired. 
Could you join the phpBB developers team? Lord knows they need a good programmer or ten to [accelerate their development](http://tracker.phpbb.com/browse/PHPBB3#selectedTab=com.atlassian.jira.plugin.system.project%3Aroadmap-panel). They've got some very good ideas to improve phpBB, but need more programmers to contribute the code. If you can help *in any way at all* it will be of great benefit to hundreds of phpBB forums (and potentially millions of people who use these forums) around the world.
CodeIgniter "Reactor" has a CLI in the works. Hit up @philsturgeon for details as he is on the team.
I was thinking of building a simple one for [Pancake](http://pancakeapp.com) this coming week. I'd be interested in sharing what I have and helping out in any way I can.
&gt; ten squidillion dollars So the future of unit nomenclature is ocean life-based? It all makes sense now...
Application deployment framework that uses git? Modern (PHP5.3+) ORM? Some sort of database schema/data version control?
Brilliant!
[XPS](http://en.wikipedia.org/wiki/Open_XML_Paper_Specification) output and editing. *Imagine there's no PDF.* *Everyone happy for the day*
A drag and drop templating system for dynamic PDFs. They have em for theming (for WordPress for instance), why not for dynamic PDFs. You drag and drop, tell what information from a form goes where, and bam. Instant styled and pretty PDF. Too small of a niche? 
Short version. No: either generate a baseline query with the correct number of question marks, or hand-fill that part of the baseline query. Long version. You shouldn't use in anyway. It's a performance nightmare. The better approach is to use union to generate a temporary table containing the IDs you want, then to join that against the source table to filter.
I know you're joking, but if someone did want to then half the work is [already done](http://php.net/manual/en/book.tokenizer.php).
Have you ever considered releasing it?
$categories=array(1,3,'tractors','apples'); $query="select * from items where category in (".implode(",",$categories).")";
A comparison of frameworks... BUT.... It must be something that compares the practical implementation of the same sorts of common, but ideally not trivial (no pointless "make a blog in 5 minutes using a scaffold that you should absolutely never use in production!" examples) tasks in a variety of frameworks. Things like creating and validating forms, handling user authentication and access, bootstrap and configuration, routes, handling response and request objects, cacheing, implementing site wide navigation, etc.
And this code in the view.. &gt; $fruit_options = array(); foreach($fruits as $fruit){ $fruit_options[$fruit-&gt;id]=$fruit-&gt;name; } double ಠ_ಠ 
Lexer/Parser generators so we can write compilers for domain-specific languages in php. Seriously.
eval()
I understand.
Well, they chose this solution because it was faster than rewriting Facebook. In most cases, PHP to C++ is not the solution. My hope as a PHP developer is that HipHop will never make it, otherwise it will become the lazy solution for a lot of people, instead of writing proper PHP code. It's a nice idea, but only applies to Facebook pretty much.
can you write me a php script that will check if another php script has an infinite loop in it?
I'm guessing by the term "at work", it's not really his to release.
That doesn't mean it can't be released, and that there won't be benefits to doing so.
Checkout [http://www.phpactiverecord.org/](http://www.phpactiverecord.org/) [https://github.com/kla/php-activerecord](https://github.com/kla/php-activerecord)
Asking him to solve the [halting problem](http://en.wikipedia.org/wiki/Halting_problem)? :)
Or as strings and use custom math functions because this is still 1995. &amp;#3232;\_&amp;#3232; 
Fucking hell... you framework guys redefine the word 'lazy'.
A twitter app.
Are you being sarcastic?
I don't think we have, proprietary or something like that. I'll bring it up at some point though.
We prefer 'efficient'
And that answers a question about parameter binding how, again? I take it you aren't worried about how injection safe that isn't?
You can help me build my social network Kwolla - http://kwolla.com
Yeah good idea. I couldn't find anything free &amp; PHP based that worked properly when I needed this. Ended up using this command line python script: http://schemasync.org/ 
Your résumé says you're willing to relocate. If you're willing to go as far as Delaware, give me a holler. I'm a senior dev at a rapidly growing agency, and we do a wide variety of tech from PHP to iOS to .Net. We're always looking for talented motivated people. Check us out [here](http://www.archer-group.com)
Well, you certainly have a great heart but you really need some confidence. I don't think that any idiot really know they are idiots, otherwise they would not be idiots. So stop calling yourself an idiot because you are not. BTW, cool tire website you have there. If I would be an employer, I would probably hire you and give you self-esteem training. Good luck, sir.
I'd be pumped about moving out to Delaware (I'm from Kansas). I just sent you a PM.
I Lol'd !
Move to California, you'll have work.
This is a common problem of many repute-ted web sites. Is shows server error. If you want to learn more or like to see more funny error images look for this site http://www.blog-not-found.com/ a good collection of lots of error pages.
Yep, that is the lazy solution. It's also an already existing way to interpret PHP in PHP. Inception, yo dog, and so forth.
Emailed you with some job details here in KC, MO. Would be much closer of a relocation for you.
Yeah, I thought that tire site was way fly. Getting a job is like 80% talking yourself up, even if you don't really believe it. So start practicing dude, it's the only way to make it happen. 
I've hand-written a few lexers and parsers in my day in a few different languages (including PHP), and could probably handle writing the PHP code to generate one. I've not used any of the existing tools for C/C#/Java/any other language, though. At a high level, what exactly would the 'generator' do? What's its input and output? Input is a BNF/ABNF grammar and output is the PHP code to tokenize and parse that grammar into a parse tree? This sounds like a really fun project, and I'd actually be interested in doing it as long as I can get a good idea of what exactly is needed, so it's actually useful.
Not sure if the tire website is current, but you don't have any way to undo a decision without starting over completely. It'd be nice if you could click "Make" to return to the screen where you choose the make, etc.
You are completely misinterpreting what I said. It is quite obvious that stealing code is bad, so I assumed it went without saying. It is by no means the only option though, so why anyone would assume theft is beyond me. Releasing code that was developed for someone else is pretty easy- you explain the benefits to the owners and release it if they give you permission. As a consultant I've done this many times- in fact, I even offered a discount to people who let me open source the code I built. This in turn meant that they got 'free' updates for the code after our contract was up, since other clients would often pay to add features they wanted or needed. Now that I work for a company that hasn't changed- the benefits of open sourcing non-core software are big enough that the people I work for are happy to release it. Recently we needed a php wrapper for a graphing library, which we outsourced to a consultant but released open source. No theft needed- it was something that we would never be able to sell, needed only because there wasn't an equivalent, and could be useful for others. The same thing seems to apply to this database script. I doubt this is part of their core business model, so they're probably not going to sell it any time soon. There is a good chance there are situations they haven't accounted for, simply because they don't use them (yet!) in their business, that others could fix. There may well be enhancements that they just haven't thought of. There are a ton of benefits, and no real downside- I honestly believe that any rational company wouldn't see a problem with releasing it. If it's an irrational company than davethegr8 will know not to ask again.
No browser actually interacts with any server side scripting language. They send GET and POST requests and receive HTML and files referenced by said HTML. PHP scripts, and therefore Symfony, gets rendered down to HTML or somesuch. Pull out the IE web developer toolbar or a packet sniffer, like Wireshark, and get a look at your POST request when you submit the page. Whatever's going wrong will leave its traces in that.
Upvoted. PDO is the only way to go if you're not using a framework or somesuch that does prepared statements itself. This isn't a work-heavy or lazy way to execute statements. This is simply The Way. Train yourself to it and you'll find it as easy as any other method.
Seriously, I work for a very quickly growing media company and we're looking for php devs. If you're interested OP, PM.
So do you just suck in interviews?? Your resume is actually pretty impressive and you shouldn't have too much of a problem finding work in Atlanta (the only market I know...).
If you're willing to relocate to Seattle, I think you might fit [this position](https://home.eease.com/recruit2/?id=548297&amp;t=1) we're hiring for. Let me know or PM me if you want to chat about it.
Thanks for the tip, but I don't know .NET, C#, MS SQL, or Java. I guess I should get busy with that.
Good advice. I'll add a back button.
It's so impressive seeing fellow Redditors giving him great input on his resumé and basically offers him a job. It just keeps surprising me how kind people can be.
OP wanted a suggestion for an application to write in PHP. I suggested he write a program to help facilitate the democratic process, or mob rule. *This is kindof like what reddit does*, except instead of pointless pictures of your f'cking cat and liberal memes, the voting occurs about some important legislation or laws in a specific region. Is that really so difficult to understand? I really shouldn't expect anything less from reddit should I?
Great, I appreciate it! Thank you.
Great, I appreciate it! Thank you.
Like you said, you could always just wrap the function in another custom function... function getFirstMatch($pattern, $value) { preg_match($pattern, $value, $matches); return isset($matches[1]) ? $matches[1] : null; } echo getFirstMatch('/([a-z0-9]*)/i', 'tes t'); // tes But this would require creating a function for every single wrapping case you would need throughout your code. You could wrap `call_user_func_array` to handle any function at all like this, but there would be issues with any variable references. Bottom line, this would be another language feature saving users from maintaining their own wrapping library, while being completely transparent to anyone not using this feature. For precedence, the use of objects already has this feature: `doSomething('bla')-&gt;inception()-&gt;crap('asdf')`. &gt; if the key isn't found Woops! This is where the problem happens, and this is where the "good idea" starts to fall apart. Assuming dereferencing against a non-existent key doesn't lead to a catchable fatal error, you'd have to catch the notice by checking `error_get_last()` every single time. You will have to be very careful which function you use dereferencing with and know exactly what value to expect for that particular array key in every single use case. So you're back to assigning a function return to a local variable, then checking if the array key exists, then if it does, do something with the key you wanted in the first place.
Great, I appreciate it! Thank you.
How about this (no code container): $container = new stdClass(); $container-&gt;db = new PDO(DSN); Or array container: $container = array(); $container['db'] = new PDO(DSN); Or ArrayObject container... at least they all do the same as Twittee.
You could debug Magento that can't properly do e-commerce core things (VAT, discount ...).
Loved the tire site. Good look on the job hunt, it looks like you shouldn't have too much trouble. Unrelated question: what drew you out to Asia and what brought you back? What was your familiarity with the language before you arrived in South Korea and China? (I'm debating heading to China for a semester to teach English.)
Take a look at [PDO](http://php.net/manual/en/book.pdo.php) if I remember right it will do that for you.
Check out [fNumber](http://flourishlib.com/fNumber) for arbitrary precision integer support. It uses the bcmath extension when available, and drops down to pure PHP when not.
On this note, anyone looking for an intern for the summer, preferably in the northeast US?
Okay, next time you give insecure code, since you downvote instead of saying thank you, I'll just warn the person in private and let you stay insecure.
Can you [and would you want to] do HTML/css/frontend stuff too? Are you willing to relocate to NY? My company is [hiring](//www.reddit.com/r/forhire/comments/fudv2/hiring_fulltime_front_end_developer_in_nyc_some/).
I feel your pain and see where you are coming from. As an IT professional from the mid west I understand what it feels like to look for work and see nothing available in your field or worse submit hundreds of resumes and get back exactly nothing. I can't tell you everything is going to be all right and I'm not going to give you the disservice of lying to you and saying it anyway. What I can do is wish you the best of luck and I hope one of these opportunities that have been presented to you results in gainful employment. Please give us a follow up when you can.
I wouldn't hire you based on your own view of yourself. 
That's elegant *for PHP*. Personally I prefer `join(', ', array_fill(0, count($foo) - 1, '?'))`
I didn't downvote you. http://imgur.com/qmlXI Thanks for the assumption. 
It is only injection unsafe if it is taking user input. The OP says absolutely nothing about user input.
&gt; I didn't downvote you. You didn't upvote or thank me either. &gt; Thanks for the assumption. And yet elsecomment, &gt; &gt; It is only injection unsafe if it is taking user input. The OP says absolutely nothing about user input. The difference is, my assumption doesn't give an amateur code which is probably unsafe, for something which, looking at the query itself, probably actually is about user content. But yes, lambast me for an assumption while arguing that your own, significantly more dangerous assumption, is just fine. Like I said: you showed no gratitude of any kind. Therefore, next time I will just let it go, and leave the insecure code in your hands. Maybe you don't need the help. *shrugs* Nevermind that almost every programmer does, though.
This from the guy who just tried to yell at me about assumptions.
Wishful thinking here, but I'd love some math libraries on par with SciPy for PHP, particularly the statistics module. We're using PHP for business intelligence here, but even the most basic of statistical methods would be useful to build out that capability more. I've looked around for some stats libraries, but have only found half-finished and abandoned projects, rather than something that looks like it'll get into the PHP core.
I think that Reddit will now produce a liberal cat meme, inspired by, or in spite of, your comment. Jokes aside, some form of distributed democracy in which people vote on independent issues as they come up, rather than simply for a representative, would be fantastic. The problem with electing a representative and leaving that individual to represent you is that the representative is effectively a platform of issues, some of which you will inevitably disagree with. Kind of a bundle deal. So the whole process is inherently inefficient. Bust that bundle up into individual planks that can be voted for or against, and we'd see a better representation of what people actually want. But, alas, I digress. Where is my [hope poster](http://en.wikipedia.org/wiki/Barack_Obama_%22Hope%22_poster) with a kitten's face?
[Maatkit](http://www.maatkit.org/) is definitely worth checking out.
&gt;The difference is, my assumption doesn't give an amateur code which is probably unsafe You can't just go escaping every code example you give. Otherwise it is messy and verbose, one assumes the developer will use their initiative and apply any measures relavent to their specific case. 
&gt; You can't just go escaping every code example you give. You can't. Mine, I get mine right. &gt; Otherwise it is messy and verbose Yeah it's completely impossible to use parameter binding clearly, oh wait.
1. Nope. You don't really need to understand every single file (unless you want to). As a Zend Framework user, I find that it's frequently helpful to look at the code, especially for components that aren't as well documented. If you're using one of the major frameworks you mentioned, you don't really need to know about a lot of the low-level stuff, as they probably do at least an okay job of it. However, a responsible developer will have a thorough understanding of the framework on a high level, as well as the design philosophies behind it. 2. Depends on what their job is. I would never hire someone for a programming position if they couldn't get by without using a framework. On the other hand, I would have little problem hiring a designer who needed a framework to get by. To answer the question your title poses, **under no circumstances** does framework usage make you a better developer. Being familiar with a framework (or several frameworks) can increase your value and versatility as a developer, but they're just tools in your toolbox. You can still use a framework to write code that is slow, insecure, or otherwise shitty. Overall, figure out which one(s) you like, pick one (or a couple) and learn how it works on a high level. Don't become dependent on a framework, and (perhaps most importantly), know which tool to use when. Don't use a hammer to drive a screw. **Edit:** To clarify, when I said "under no circumstances," what I really meant was that just using a framework won't turn a bad developer into a good developer.
1. I guess my problem is control... it kills me not knowing what everything does. 2. It happens. I know someone that works with a few "web developers" that uses the old dreamweaver developer toolbox and can't code shit without it. He bitches about it all the time. LOL. But I rather hire someone who can code without a dependency to a framework... if he can do that, he can learn how to use a framework. 
1. Think of it this way: you're already using PHP. You don't know how the core sorting algorithms are implemented unless you look at the source, but you don't need to know that for most use cases. Frameworks are the same way; it's just another layer.
&gt; does using frameworks really make you into a better developer? No. **Knowing *when* to use a framework and when not to**, that makes you a better developer. Many of the people that make these frameworks are pretty smart, and sometimes it would be silly to write code that does the same thing when they already did all the hard work for you. Personally, I detest code generation in a framework and I tend to shy away from those that force it upon you. Let's take Zend Framework as a good example -- you can do it by hand, or you can let the code generation tool do everything for you... or you can entirely ignore their (needfully) over-engineered and burdensome MVC parts and just use the other worthwhile bits. &gt; do you understand what each and every single file does Generally I only read the code if the manual and API documentation don't tell me what I need to know, but you can bet I've read the manual inside and out for the parts I'm using, and have at least skimmed the manual for the parts I won't need. Some frameworks have some very well-hidden gems. This obviously requires quality manuals, a thing sometimes missing from certain frameworks. &gt; do you have people at your company that's good with a framework but can't code without one? I see a strange trend of people that use shit that generates code for them and are not capable of coding shit from scratch. I'm seeing this too, but I think it's just an extension of the cargo-cult copy-paste-from-a-tutorial mentality that some people have when they don't actually understand how all of the parts fit together and/or don't understand why they're doing what they're doing.
&gt;Generally I only read the code if the manual and API documentation don't tell me what I need to know, but you can bet I've read the manual inside and out for the parts I'm using, and have at least skimmed the manual for the parts I won't need. Some frameworks have some very well-hidden gems. And sometimes the documentation sucks ass.
And when the documentation sucks ass, chances are that the code isn't going to be worth using. The *entire purpose* of these frameworks is that they're reusable by third parties. If you can't adequately tell that third party how to use your code, you probably shouldn't be in the business of producing libraries.
I don't agree with "under no circumstances". Your point is well taken that you can write crap code with any tool. But I find that using and studying well-written code (which doesn't apply to all frameworks, but most are fairly well written) does make me a better developer. Whether or not I end up using a particular framework, I've learned things that I now use in my own code. Plus, using a framework in the right way can sometimes make you into a more efficient and productive developer, which is certainly a part of being a "better" developer.
Sometimes I don't know!. 
Maybe I'm nitpicking here, but: 1. I usually prefer to use constants when defining my DB connection info. I mean, it's not like you're ever going to change those variables during execution. 2. Maybe after being up to my neck in frameworks I've picked this up, but I don't think passing a function your strings is good practice. Where are you passing those strings from? What if, in the future, something changes in your database tables that requires you to go through all your files and change out those strings? I think a better method would be to create files that contain all your possible SQL statements, per table, and this way you'd only need to change it in that one file (Model). Your current set up doesn't look like it would easily accommodate JOINs: public function select($table, $select = '*', $conditions = array(), $get_var = false) { $query = "SELECT $select FROM $table"; how would you do `JOIN table AS tb ON tb.id = xxx` ? edit: Of course you can simply pass the JOINS via the `$select` but I think this would get messy very quickly in longer statements. 
Better developers often use frameworks. (After all, better developers know which tools are useful and when to use them.) But using frameworks won't automagically turn you into a better developer any more than using Henckel knives will turn you into a better cook. "if p then q" doesn't mean "if q then p". A bad programmer who begins to use a framework will just use the framework badly. For example, if you don't know how to normalize your database and write efficient queries in the first place, and you learn to use an ORM (which most frameworks come with these days), you'll just keep writing crappy queries. If you don't know how to sanitize user input, you'll get hacked whether you use a framework or not. No framework is idiot-proof. Frameworks make it easy for good developers to do what they're good at. Which is awesome. Frameworks also make it easy for bad developers to do what they're bad at. Which is disaster. 1) Understanding the framework's source code is a bonus, but I don't think it's necessary. 2) This happens if you learn to use frameworks using nothing but those "Create a blog in 20 minutes" video tutorials. Edit: clarity.
I suppose it depends on how you define "better developer." I definitely agree that efficiency and productivity are important qualities. What I was really trying to say is, under no circumstances will the use of a framework alone turn a bad developer into a good developer.
Sometimes it's mentally freeing to use one of the more mature, stable frameworks because you can trust that the code is already rock solid and fit for its purpose. It's comforting when you can trust the higher level abstractions provided to you by a library, not that this doesn't come back to bite you sometimes. (Tracking down bugs in someone else's code isn't always fun.) A good developer will understand what a framework is doing for them behind the scenes, without having to look at the framework's code base.
I remember a few years ago I tried creating a class very similar to this. In the end I came to the conclusion that this restricts your code rather than being helpful. Take any SQL SELECT statement, sure initially you only want to return data where col1 = "foo" and col2 = "bar", but eventually you're going to need different comparison operators, such as col3 &gt; 5 and col4 &lt;= 10. Then comes OR's instead of AND's, and you'll need LIKE's and IN's, JOIN's, GROUP BY's combined with aggregate functions like COUNT and MAX. The list goes on. Don't get me wrong, what you will work fine for INSERT's UPDATE's and DELETE's, as *most* of the time these actions are focussed on just the one table. It's the SELECT's that require more flexibility, as there's a countless different ways of getting information out of a database.
1. Yes. However I'm a developer with the Kohana project, so it's important to know how things work so I can fix problems. But honestly, with any framework, the best thing you can do, is instead of expecting "magic" things to happen, is follow the request down the line until it reaches "your" code, and see exactly what is happening. I haven't used all the frameworks you've mentioned, but I'll bet the process is practically identical: index.php funneling all requests, bootstrap comes in next to "load" the framework, routing to figure out what request means what controller/method, call controller, call method. 2. I've yet to see this, however I haven't professionally used frameworks besides Kohana, which as a principle doesn't do any code generation for you. I have seen a brand new developer who wasn't to good with MySQL ask stupid questions regarding it when using ORM. The reason I chose to use a framework is because it makes basic design decisions for you. The ideal framework should make some basic decisions such as file placement, and logic separation. Those are things I find very hard to keep consistent when writing a site from scratch. For example, day one I start the basic structure of my site, deciding on things like how MVC will work, a database library, etc. Day 2(which is almost always a friday for some reason) I am super inproductive, don't get much work done. Day 3(after a 3 day weekend of course) I've pretty much all but forgotten about some of the unfinished pieces of my framework, leading me to go in a direction that isn't as good as what I had initially thought up. You may say the solution to the above problem is "well spend time in written discussion about what direction to go" Well that's great, but now you're basically writing your own framework rather then using something that already exists, has tons of people who use, break, bug report, fix, and stress test for you. It's about time as developers we accept that we are not the absolute best developer out there, and that there are huge pools of combined talent poured into these frameworks, which we can benefit from with out having to pay people any money, or contribute any time what so ever for the privilege.
You don't really need to understand the code, you just need to understand all of the functions and how to use them... that being said. It can take months, maybe even a year or 2 before you really learn all of the ins and outs. In my experience people are either die hard "always use a framework or CMS" or they are diehard "make it from scratch". There is this tale that using a framework/CMS will save development money and time. In practice this is rarely true though. Usually what happens with a framework or CMS is that you fly through the first 90% of the project, then that last 10% takes forever as that last 10 percent is always doing something that the framework/cms doesn't actually support and you have to hack something up to get it to work. When looking for a job,you rarely see anyone ask for just a developer, or just a PHP developer or web developer. They want developers who do very specific jobs (Make drupal modules, knows everything about CodeIgniter so you can fix all the bugs in the website, etc , etc), which is why I did freelancing for a couple years and then stopped. It takes a lot of time and effort to learn all of these different specific projects and they come and go like shoe styles. The amount of time you'll spend learning these frameworks is never going to be worth the amount of money you'll get paid. Combine this with the fact that any project you work on that has already been started by a different developer is probably using a framework or CMS that is not ideal for the website but theyre using it because thats all they know. It's real hell.
Why don't you just use PDO directly? You can create a static function or lazy loader for the connect call, but I don't see the point of select(), insert(), get_var(), etc. unless you are using a full blown ORM.
&gt; Application deployment framework that uses git? I have an idea of what you mean by that but can you explain further?
&gt; What's the best way of making sure the database doesn't get called for every instance of the object? You will need a static class acting as the container for the collection of all database connection objects - complete with `add`, `delete`, `getConnection` methods. By "static class", I mean a class intended to be called statically. You can define this static array "collection" property and static methods directly in your PDO extended class if you like to save on having to define a completely new static class. Sure, you could add a check on the __construct method of your PDO extended class to see if that connection already exists in the collection, but there's no way to switch out to that existing connection object mid-construction. Even if you add a way to clone all the existing PDO object's private properties into your newly constructing object to at least try to reuse the connection, you can't assume there's nothing in PHP backend sourcecode that will trip you up.
The first point you have here is the reason I kind of can't get into them. I've tried out Zend, smarty and some others, but never gotten into them. I'm trying to use the experience from each of them and create my own though, kind of like "best of both worlds". I hardly recode stuff though, I mostly just do classes that I use for later on other projects.
select * is bad.
Yes, I actually enjoy doing front-end stuff. However, I'm not very artistic so I couldn't replace a designer. But if the design concept is there and you just need someone to turn it into a functional web page, I can do that.
In every case?
that's just not true.
In the event of high traffic selecting all of the columns could cause major networking issues, like swamping the switches/uplinks... I've seen it happen numerous times...
Shouldn't be a problem if it's a small table....
Defining them as constants prevents you from using the class for a second database. You may think you'll never need this, but a common method of scaling is sharding, which you would need it for.
Nice. IE7 hadn't even been released when this article was written.
Here's an idea... why doesn't the poster put together a script that does the CRUD generation just like bake does, and submit it to the CI codebase? Or would he/she need a framework to do that too? 
It's those blobs, text fields, and tables pushing the maximum column count or row size that'll do it. And then there's column name length, joins, indexes, etc.
Or a single record... as long as an entire novel isn't contained within that blob or text field.
So essentially deploys/updates an application from a git branch, configures it, etc, at the push of a button.
Regardless of the data type, retrieving columns that you don't need is unwise.
I too have researched many frameworks over the time (cake, ci and yii esp) but till date I have never incorporated any into my production sites. Yes, I have made blogs, guestbooks, even a social app using these frameworks but so far it has been only to learn it. My biggest problems is also that frameworks is the insane amount files to keep track off and also the fact that may occasionally have to fix some vulnerabilities or patches when using big frameworks (but this is only hearsay). So I guess while using a framework like Yii may be good for huge project, a regular site with a simple front-end and back-end you can easily do without it. Also [SimplePHP-Framework](http://clickontyler.com/simple-php-framework/) and [PHP Fat-Free](http://fatfree.sourceforge.net/), the no-framework Framework method, may be more suited for most developers. For my personal use so far I've had best results using php directly, using my own version of *flourish* library that has functions for mostly everything now (from user signup, login, member's area, to SEO optimization). I think it is more important to use [better coding practices](http://programmers.stackexchange.com/questions/46716/what-should-a-developer-know-before-building-a-public-web-site) like using prepared statements (instead of mysql_real_escape_string), etc which make you a better developer (and a more happy webmaster in the long run) IMO.
Love the tire website (will keep this bookmarked, possibly my new favorite resource for easily finding tires), I was quite surprised you were able to go down to 1989, that's my year. You're pretty much a saint under your professional experience working with students from a foreign country, that's great. Like everybody else is saying, you gotta find that confidence boost. If you don't know a language, but you think the job is right for you, learn the intermediate steps on how it works. Do whatever is takes to add that one thing to your resume, even if you can only label it as basic experience, because then: you have actual experience with it. I'm only 18, but it really just takes time and effort to find a job in the right place. I have 2 years of professional PHP experience behind me already. I found an internship in December looking for a web developer, I had no clue they had wanted a Ruby developer and I had never worked with it, but it only took a few weeks to work with their current developer to learn the fundamentals of Ruby and since that I've created some pretty elaborate applications. Just give yourself a name that people won't necessarily recognize, but they'll appreciate.
Say what? Hi Gordon!
Yes. You learn technique and to force yourself to follow "rules" and structure. Following these rules will make your code more accessible long term to both yourself and other developers. (unless you are under some delusion that you'll never want to upgrade your code)
&gt; My biggest problems is also that frameworks is the insane amount files to keep track of It's a learning curve. Once you learn that particular framework it's not bad, and you certainly learn ways to stop repeating yourself.
I'm not a PHP guy and I logged in to post exactly what you had.
I don't know what the state of the art is, but I would have been delighted the other day if I had something roughly equivalent to lex &amp; yacc. Exactly what you imagined, BNF goes in, lexer and parser in php come out.
Frameworks are training wheels. Learning curve and lack of documentation are excuses though. If there is something valid to be learned from an architectural standpoint, absorb it for that. See how things are done, do a few sites in each, then go your own way. 1. In my own framework, absolutely :) In someone else's, no; but abstraction is the point of having a framework. 2. Yes, very common. Learning makes you a better developer. The individual frameworks might be a good or bad example, and as your experience grows, you'll be more able to file things away as "good things to do" or "bad things to do"
Well this is just a wrapper on my most commonly used functions for PDO. I'm building a tool to facilitate our data entry. So the get_id function is the real meat of what I'm trying to accomplish. You'll notice everything contained within gets used by it. That one function drastically cuts down on my code reuse in my tool, and simplifies everything else. When I need to do any more complicated queries, I do just use PDO directly, but for 90% of my queries, get_id does exactly what I need.
It's more of a default. It's currently not being used that way, but of all of the ways to use a select statement that seemed the most generic way of doing it. I always like to default whatever parts of the function I possibly can, just on the off chance it can come in handy.
I definitely agree with you on this. You can check out my [post below](http://www.reddit.com/r/PHP/comments/g3uhd/first_attempt_with_pdo_and_looking_for_feedback/c1krbwl) but essentially, it's just that the use cases that I need right now, this will cover 90% of them. For the others I will directly be using PDO.
Again, [see below](http://www.reddit.com/r/PHP/comments/g3uhd/first_attempt_with_pdo_and_looking_for_feedback/c1krbwl) but basically, this is just something to cover 90% of my use cases, and in the cases it doesn't I just run PDO directly, without this extra layer. This just cleans up my code and reduces duplication. Plus it was fun to write and taught me more about PDO.
Well for what it's worth, this code will be used in a tool that gets run maybe once in a blue moon, and mostly locally. So any performance hit, no matter how bad, is pretty much ok.
Depends. Better programmer? Maybe not. Better developer in a shop that spits out 10+ projects a month? Yes, definitely. Hand writing code at that point would be stupid. Using your own framework would be fine, but then it is still a framework and you'd be a better developer because of it, wouldn't you?
Just read up on php.net. The concept is amazingly simple. You have a key and you have a value. You store values by keys and you fetch values by keys. That's basically all there is to it. There are some more advanced features such as CAS, increment etc but the php.net does a good job of explaining those and most likely you won't really need them. The only thing that'd really be worth looking for a 3rd party tutorial on would be things like implementing namespacing or tracking cache state across an application. This is because this is stuff memcached does not implement itself so you have to hack it together - often in ways that sacrifice performance or memory space.
I don't mean to discourage, but for that 90%, you have to be absolutely sure that 400-line class will be worth it to replace something like the following 5-line generic Mysqli insert example: $m = new Mysqli(/* connect info here */); $s = $m-&gt;prepare('insert into some_table (columnA) values (?)'); $s-&gt;bind_param('i', $v1); $v1 = 5; $s-&gt;execute(); Or the following 8-line select example... $m = new Mysqli(/* connect info here */); $s = $m-&gt;prepare('select columnA from some_table WHERE(ID = ?)'); $s-&gt;bind_param('i', $id); $id = 1; $s-&gt;execute(); $s-&gt;bind_result($v1); $s-&gt;fetch(); echo $v1; You might think that `$s-&gt;bind_param()` line sucks and just always gets in the way of achieving some elegant bit of code, but it has some hidden auto-conversion features you might not all be aware of. And I'm not talking about strictly generic PHP type casting. As a universal database administration api, your universal class may come in handy. But for day-to-day use you'll likely find it'll bite you back, especially when it comes to validation and overall data integrity requirements unique to each field and table. I guess I should know - I just spent the last month trying to reinvent the wheel.
Class will be more flexible for lazy loading,etc. stdClass and array seem not enough.
tl;dr: no.
That's always been the case. Of course, I come only from an apache background, so it may very well be different for other web servers, but you can specify file handlers in various places...and when you build php (I compile, I dont do it from repositories, so YMMV there as well), it just makes a php5.so, which you can run along php4.so
What sorts of aspects of a project are you looking to manage? Your requirements are awfully vague... Are you looking for a bug tracker? Task management? Budget tracking? Time tracking? Document management? Source control integration? Test suite integration? Invoicing? Reporting? "Project management" encompasses a wide swath of tasks, and is usually team-oriented - which is why a lot of PM software is very generic, and heavy on the features, and would seem "bloated". However, there are lots of tools that excel in a couple of those areas - if you let us know what exactly you're trying to do with a PM tool, we can better direct you to appropriate options.
Ugh...yea, you're right...I still remember when old versions of OSCommerce and other apps required it to be on. Was the bane of my existence...but luckily, you could just do set_ini() in the header file for just the sites that needed it...or set it in .htaccess
Task management &amp; Document management mostly. Also something that allowed for easy brainstorming would be cool. Basically I have an almost unending list of projects, but still sit down occasionally and can't get started. I'm looking for something that I can use to track my progress and keep me motivated.. I just installed phpcollab and I think it may have a lot of what i'm looking for. 
While what you say has a certain element of truth to it, its also worth considering that a lot of clients don't have the time or money to have a site written from scratch. You could use something you wrote, but at that point you are still using prior work to help you turn a project around more quickly (which I'm not saying is an issue). When a client wants the ability for multiple users to login, granular permission control, the ability to enter their own content (multiple forms), etc... and they are willing to pay 1.5k for what they want to be the next Facebook, you can turn them down sure but that does not put food on the table.
&gt;You didn't upvote or thank me either. How petulant. Every time I see you on this subreddit, you're being overly agressive and argumentative. You'd do well to tone it down.
[Open Atrium](http://openatrium.com/) is what I've always used when I need simple project tracking.
I don't have anything job-wise to offer you. However, I just wanted to wish you the best of luck and hope things end up working in your favor. Also, I encourage you to be more confident and proud of your work, by looking at your work experience, you owe yourself much more credit.
It takes a considerable amount of time to become adept enough in any given framework to create a complex project. If your contract calls for the use of a framework, and you hire someone who codes well but doesn't know how to use said framework, then you have to budget time and money for him or her to get up to speed. Which isn't a problem, if you have both time and budget. 
For mind-mapping I found VUE the best. Google Draw is catching up though. Try both. For general project management I think the best is RedMine. It's a Ruby on Rails based software, so setting it up can be a bit tricky, but just read a few howtos. After all it's simple enough even rubists get it :] (And there's a Debian package of it too.) It has a nice Issue Tracker with the ability to generate Gantt diagrams, it gives you Projects, Sub-projects, Sub-subprojects and so on, great Wiki, you can upload Files and Documents, it has a Forum and the Google Calendar and TODO plugins are nice. It works well with Git (and SVN, but that's irrelevant, since everyone moved to Git, right? :P), hm, what else, well, it does a lot of other stuff too, but we haven't used them, because it just works well with the "defaults". And it's not as easy as, say, registering at code.google.com, but you won't really find something simple and completely fit to your exact needs.
I wrote something on this a while back, might help you to begin? http://techportal.ibuildings.com/2009/02/16/getting-started-with-memcached/ I haven't experienced odd issues, seems like it's pretty reliable.
Sorry for coming late to the party, but feeling the need to respond regardless and thus trying to be a kind reddit citizen: I'm an "opportunistic" coder, i like to slip in programming tasks into my daily work but it is not part of my job description. I'm choosing my tools as seem fit for the task at hand, and thus had the chance to do "relevant" development work with Turbo Pascal, dBase, Excel 4.0, C, Visual Basic, Java, MS Access, VB.NET and MS SQL (came a long way the last 20 years). I currently develop two web applications with CakePHP + jQuery, and I rather like the way I get things done inside these frameworks. I chose CakePHP and jQuery because documentation and community support (shown by the number of additions / plugins) seemed outstanding, and I suggest that if in question you should always walk the trodden path with nice company in favour of walking alone on some obscure, esoteric albeit "superiorily conceived" oddity. But I digress. 1. NO, I don't know what every file inside my framework does. I don't have to - that's what frameworks are for. If an error pops up from inside that code, I can easily step through to the relevant line with a decent debugger (or examine memory when breaking at the point of failure). It's usually a misconception on my part on how to use the provided interfaces / ressources. I've written a database abstraction layer in java once, I don't need to go there again, and I explicitly don't want to know what is happening inside CakePHPs dbo_source.php with it's almost 3000 lines of ingenious madness. 2. I guess I belong into the group that is useless without a framework. I just wouldn't want to do work without one. I have tight schedules to meet, and can't possibly maintain something with the technical granularity of a framework. If a database connection for my clients database is not available with the framework at hand, I'd rather shop / look around for a solution that fits better. Now flame me.
Redmine, freedcamp
You should look at the active record pattern. Basically instead of wrapping PDO, your classes model a table and get a db instance passed in. It's kind of similar to what you have, but the logic/validation/etc lives in the model. At any rate, most important thing is covered (from your post above): &gt;Plus it was fun to write and taught me more about PDO
fun talk
If "better" means "more productive", then, yes. 
You know you could just try it, but yeah you can do this without problem. Also you can do this with SPL iterators. $folder = '/path/to/folder'; $directory = new RecursiveDirectoryIterator($folder); $iterator = new RecursiveIteratorIterator($directory); $files = array(); foreach($iterator as $file) { $files[] = $file; }
Thanks, I bookmark to read.
Yeah, it looks pretty simple. Are the key/values similar to sessions (tied to a specific domain) or are they cross domain? Example, if I am storing a twitter API response in memcache for site X, can I use the same key for site Y and it not overwrite the information on site X? Hopefully that makes sense.
The definition of a recursive function is that it calls itself, so yes, it is absolutely possible.
I currently use [Podio](http://www.podio.com), it's kind of new and I guess it's only invite-based registration for now. I have my own company but also manage projects on the side with other people. I find it cool, easy to use and very promising. Take a look and if you are serious about using it send me a PM and I'll be glad to send an invite your way. PS. I have no relationship with the company ;)
If you don't call the function in it's own definition, then it's not a recursive function.. This is exactly what a recursive function is, so, yeah, you can do it. Also, see [here](http://www.reddit.com/r/PHP/comments/g4ctu/can_i_use_a_recursive_function_while_im_defining/c1kt7my)
http://www.taskfreak.com/ Is super simple, and awesome for personal projects, and also multi-user projects. I would have suggested open atrium, but that's pretty hefty.
The key/values are global, there's no sort of user segmentation. And only very recently did they add SASL support. Usually you have to make sure the Memcached port is restricted in a firewall such as iptables.
Mmm, I was thinking about getting the Zend Php certificate myself... is it really worthless? I've seen a couple of companies in my country asking for it
Your point is valid to an extent, but I think it's too strongly worded. It's not true that frameworks do not make a developer better "under no circumstances". The Zend Framework has made me a better developer in my opinion. I learned quite a lot about how design patterns can be used in practice by looking at some of the source code and by the frequent use of some of the classes within it. I'm the kind of person who needs to do something in practice in order for it to "sink in" - that is, if I read up about the theory of design patterns for example, I tend to struggle to imagine where I might use a particular pattern, or just not quite understand the real advantage. However, when you use a class that uses an abstract factory pattern for the first time, and begin to realise WHY that's so useful, it starts to click. I've learned a lot about oo design from Zend, so in that regard it has made me a better developer. Zend also has some php unit stuff built into it for testing your code. I've never used php unit myself but I plan on learning it soon, and I'm sure the stuff within the zf and the examples I'll find on the zf site that explain how to use it will help me there as well.
I don't think you'll find a PM tool that does mindmapping well - I use [FreeMind](http://freemind.sourceforge.net/wiki/index.php/Main_Page) for that. It's very simple, but works extremely well. Some people even use FreeMind for managing tasks.
Really? I usually get it from the .NET camp.
Yo dawg, I heard you like recursives in your code, so now you can recurse your code while you code your recurse.
&gt; Is it possible to use the function while you are defining it? Yes... that's the definition of a recursive function! :D
http://www.redis.io As somebody who has been dealing with memcached for years on massive scale, i'd really recommend Redis instead, much more modern and powerful. Plus if you have a good understanding of data structures, it helps a lot getting started with Redis. As for Memcached, it's a pretty basic key/value volatile store, just remember that Memcached only guaranties one thing : that your data while be gone when you told it too, don't expect anything else (like for the data to be there ...). One advice though, if you are using Memcached extension (not Memcache), be careful with the size of the data you are storing, the automatic compression can be a killer for your webservers :)
I'm working on redeveloping my project timer. It's the original project timer from SourceForge that I developed back in 2001. I'll be opening it up for enterprise customers, but I will need testers too. If you want to help out or get a free account for testing, let me know. The next version will be a similar layout but newer styling and more features, like reporting. The link below is to the new development, it may go down at times. http://opencodeproject.com/projects/login.php
Lazy loading? Here you go: $container = array(); $container['db'] = function() { static $pdo = null; if ($pdo == null) $pdo = new PDO(DSN); return $pdo; }; What's next?
Oooohh shiny :) I'm going to have to look into this...
Oh, well if a stranger whose total karma is almost half that of my this week's high point and has named himself after a founding father who would never criticise someone for being argumentative, and thus has probably never actually read any of his work, says I'd do well to tone it down? Well let me get right on that, gov'nor. Pro tip: when you misuse relatively simple words like "petulant," which means wanton, saucy and insolent - none of which apply because my writing has no moral overtones, is not sexualized, and is not speaking to a social or industrial superior - then you basically get laughed at and written off as a clown. Mind the floppy shoes on your way out the door, there, Jack.
While the basic key-store is easy to get help to on the internet. I still have problems finding a good tutorial or explanation on how to use Memcached as a full page cache. 
The question looks to me like this: Can I call a recursive function **while I'm defining it**. To which the answer is **no**, you need to define it first before you can call it. Whether it's recursive or not does not matter. *Note: You may create something which may look as if you would achieve calling it, but you will not get around the issue that you must define any function before using it.* // define it .. function foo() { foo(); } // .. call it .. foo(); // .. have php crash because of infinite loop in the example function :) // Edit: Of course, you have to place meaningfull code in the foo function.
You want to store your html output in Memcached? 
Yes. This is what the y combinator is for (the startup group took the name from software, huge surprise.) http://php100.wordpress.com/2009/04/13/php-y-combinator/
No. No matter how hard they downvote people who disagree, fanbase and claims of productivity don't create large software out of one-size-fits-all code.
nobody understands what every single thing does man, I am using zend framework right now, and while learning was a pain in the ass at first, the more you get into it the more you realize how many cool conventions it has. The code is kind of self-explanatory in most cases and there's always a class for whatever you're looking for. It's just useful and when you're comfortable using something it makes your working time more valuable. You don't "waste" that much time. 
If you like Zend_Http_Client then use it. ZF is portable to any projects, even if it's in a different framework
I'm surprised nobody's mentioned [basecamp](http://basecamphq.com/) yet
Thanks, that makes sense that there is no user segmentation. Are the key/values global (even across instances of the memcached object)? If I use "twitter_feed" as the key for website X, will I be able to use the same key for website Y and have different data? Or will it overwrite the data website X? I am trying to see how detailed I need to get in the naming of the key so I don't overwrite data on different domains hosted on the same server.
Memcache isn't really the best option for full page HTML caching... that's more for storing data to access quickly so you don't have to keep querying the database for the same data. Look into Squid.
Because the free plan is crap.
If you use the same key on the same server or cluster of server it will return the same data. There is **no** segmentation done at all, ever.
I will check it out. Coming from a relational databased background, key/value stores on a large scale kind of scare me (3NF was beat into us in college). Memcached will just supplement our relational DB and caching third party API responses (twitter feeds, etc.). Figured it would be a good place to dabble in key/value stores for now. None of our sites really get a lot of traffic, so this is kind of an experiment for me.
I published a sample Nginx configuration which will read from memcached and pass to PHP if no cached version exists: http://blog.martinfjordvald.com/2011/02/implementing-full-page-caching-with-nginx-and-php/ It's somewhere half down the page.
Thanks again! Exactly what I needed to know.
Slightly related: in an anonymous function you must "use" a reference to a bound name to make recursive calls: $factorial = function($x, $acc = 1) use(&amp;$factorial) { return $x &lt;= 1 ? $acc : $factorial($x - 1, $acc * $x); };
Perhaps you'll find the answer to your question [here](http://tinyurl.com/4ay9flg)
Check out http://www.apollohq.com. We've been using it for a couple months, and it rocks.
Where do you live? I learned a lot by studying for the test, but it's never helped me get a job.
&gt; And on reflection it was overkill The only situation that comes to my mind where Yii would be overkill is a static html page. Seriously, everytime I'm dealing with customers who want features added I'm happy I used Yii.
Not entirely sure what you are looking for, but for the billing and time management aspect of things, I cannot recommend freshbooks enough. http://www.freshbooks.com/
&gt;Oh, well if a stranger whose total karma is almost half that of my this week's high point Are you actually using reddit karma as the basis for an argument from authority? petulant means "childishly sulky or bad-tempered" - concise OED.
What you said is true. I don't think my wording was very clear. What I mean is that you can use a framework without learning how it works, and you can gain very little from it. It's not *using* the framework that makes you a better developer, but the *understanding* of how it works. Following this premise, the framework doesn't make you a better developer - you do that yourself. When I said "under no circumstances," I was trying to point out a logical flaw. The statement "using frameworks makes better developers" is a non sequitur because framework usage and developer skill are not causally linked.
I've been using it for over a year now. It's totally worth it.
&gt; Are you actually using reddit karma as the basis for an argument from authority? No. Don't use phrases you don't understand. I'm observing that someone who argues against the basic values of the person he named himself after in tones unbefitting a legitimate social superior, let alone an anonymous stranger, is less compelling than being shamed by a cartoon. &gt; petulant means "childishly sulky or bad-tempered" - concise OED. That's nice. When you're done throwing around insults, let me know.
How about [ProjectPier](http://sneaky.me/tag/projectpier/)?
Of course you can. function factorial($n = 0) { if($n &lt;= 1) return 1; return $n * factorial($n-1); } $a = factorial(5); //returns 5*4*3*2*1 = 120;
I didn't insult you, I corrected your definition. &gt;I'm observing that someone who argues against the basic values of the person he named himself after in tones unbefitting a legitimate social superior, let alone an anonymous stranger, is less compelling than being shamed by a cartoon. You like those run-on sentences don't you? Still doesn't explain why you chose to mention reddit karma.
You might as well say that people cannot use for loops because they will crash. for ($i = i; $i &lt; 10; $i++) { $i--; } The fact that you can come up with a contrived example doesn't mean that it's generally true. Your foo() function simply needs a way out, like anything else that repeats. // define it... function foo($i) { $i++; return ($i &gt; 10) ? 'done' : foo($i); } // call it... foo(); // wow, no crash 
&gt; I didn't insult you, I corrected your definition. The definition of an insult, guy. Try to keep up. &gt; You like those run-on sentences don't you? Little confused about what a run-on is? &gt; Still doesn't explain why you chose to mention reddit karma. I was trying to explain to you why I don't actually care what you think and want to stop hearing from you. I seem to have failed.
Touche. it is crap
I agree that "petulant" is an insult, but i wasn't the one that called you petulant - our revolutionary pamphleteer friend above did. Try to keep up.
Don't worry, you'll catch on soon. In the meantime, repeating the criticism made to you of not understanding what was said to you back to the person will make you feel better about it when, since you still haven't got it, you think you've rebuked them. Find someone better to talk to. Obviously I'm beneath your requirements, and I have more important things to do than to respond to some guy on reddit who just wants to yell about nothing.
Well, i just care about the definitions of words, and I don't like to see one wrongly defined. However, it's obvious that clarity and accuracy aren't things you value highly, so I guess I should use my time correcting people who care about those values.
&gt; However, it's obvious that clarity and accuracy aren't things you value highly Whenever you're done inventing insults, please stop wasting my time.
I believe that you didn't get the point. The example **intentionally** causes an infinite loop just for the kick of having the element of a recursive function in it while keeping it simple. Don't downvote stuff that you simply cannot understand.
I decided that clarity and accuracy weren't important to you when you gave an incorrect definition and didn't seem to appreciate my correction. You've mentioned about having more important things to do and about your time being wasted, but haste is not much good if you don't even have a basic appreciation for the tools of human communication.
Yes.
WHERE clinic_id&lt;&gt;2 OR academy_id&lt;&gt;1 after your edit: WHERE clinic_id&lt;&gt;2 OR academy_id&lt;&gt;2
And of course anyone downvoting you is doing so simply because they cannot understand you, not because they could actually disagree with you and have a valid point.
&gt; I decided that clarity and accuracy weren't important to you Yes, this is the part where you don't seem to understand that you're just making things up to screech about. Just because you imagine something doesn't make it true. That I told you concretely why I didn't appreciate what you had to say, and that it doesn't have anything to do with your new claim about my opinions, is sort of bothersome. That you're doing this in the middle of complaining that you're not being listened to about the other person being incorrect is jaw dropping. You are not in a position to tell me what is important to me, sir, no matter what your reasoning is. That you're doing so after I've already told you what it is, to hold up that you aren't being listened to ... I mean Jesus, dude. Really. &gt; but haste is not much good if you don't even have a basic appreciation for the tools of human communication. Says the guy who keeps responding to "go away please" with more talking.
The academy_id is arbitrary, it could be any number.
where clinic_id != 2 or (clinic_id=2 and academy_id != 1)
This would discard results where the clinic_id = 1 and the academy_id = 1, which doesn't appear to be what he is looking for.
WHERE (clinic_id = 2 AND academy_id = 1) = FALSE
You can expand on the OR statement to include multiple parameters in the WHERE clause. Here's a good reference from SO: http://stackoverflow.com/questions/2643783/mysql-query-where-including-case-or-if Should the query return only records where the academy_id is null when clinic_id = 2? 
Still not following you, even with the clarification. Maybe it'd help if you stated the desired results in terms of the example dataset.
After his post update, something like WHERE (clinic_id = academy_id) = FALSE Assuming you're not returning data where both of these are null. 
My first example **intentionally** causes an infinite loop. That doesn't make it useful. By using such an example, you are creating a red herring which detracts from the utility of the discussion. That's either perverse, or dumb.
Learning a framework teaches you quite a bit about code reuse. You can't learn a framework and still have a not-build-here mentality. In that way, yes, it does make you a better programmer. You also get really, really good with grep.
If you use NOT IN and get a list of all of the academy_ids that have a clinic id of 2, it seems that you are going to accomplish the same thing as doing this by using a join and just using WHERE clinic_id &lt;&gt; 2
Did you prove the limit of your recursive link?
Probably, I just don't want all my visitors to hit my very expensive CPU-time and use it to spawn a PHP proces if I am able to cache the whole page, and just serve that instead.
I wasn't going to upvote you, but the post you link to is genius.
Thanks for clarifying. That makes a lot more sense, and I agree with you :-)
&gt;Says the guy who keeps responding to "go away please" with more talking. I think sometimes it is appropriate to judge a person's intentions by their actions rather than their words. Since you kept replying to me, I didn't take your requests to go away seriously. I mean if you really wanted to end the conversation, surely the easiest way to do that would be to stop responding to me? &gt;That I told you concretely why I didn't appreciate what you had to say Expressing things concretely is evidently not your strong point, but even after quite a bit of scrutiny it appears that you haven't expressed in any way which specific part of my posts you took as an insult. &gt;You are not in a position to tell me what is important to me, sir There's no need to call me sir. Again, I think it is reasonable sometimes to deduce a person's values from their actions. Carelessness with definitions implies a lack of appreciation for the importance of communication. You've made it clear that you aren't receptive to any further help with your communicative deficit, so I'll end the conversation here.
Buenos Aires, Argentina
I'm a big fan of the author.
This project is built on top of Drupal core and several community modules. An especially good choice if you're interested in modifying or extending the functionality or appearance.
&gt; I think sometimes it is appropriate to judge That's nice. Go away soon please. &gt; You've made it clear that you aren't receptive to any further help with your communicative deficit, Not from people with this quality of writing.
As others have pointed out that is how recursion works. From a programming standpoint though recursion usually isn't what you want. That isn't to say that it's not useful but it has it place, and in the example above you shouldn't use it. If your example is related to something you are currently doing, then I would recommend that you check out scandir which gets a list of all the contents in a directory then iterate over the list and remove the directories. PHP handles loops much better than it handles recursion.
I honestly don't understand what you're trying to accomplish here. Rule one of asking a question: don't ask what's wrong with your solution, or provide clarifications in terms of arbitrary numbers. Tell us what you're trying to *do*.
Like for example, one interpretation of the above is "I have a table of schools, a table of clinics, and a 2nf join table between them. I want a list of all academies with all academy data, joined to the IDs of clinics which serve them. The join table can have repetitions; if I get a result for the same academy,clinic pair more than once, I'd like it discarded." If that's what you meant: On the other hand, maybe you meant "If a given clinic shows up for a given school, eliminate every other match for the school matching." That's not actually soluable at all: it's ambiguous which should go. For example, consider the case where school 1 has clinics A and B, and school 2 has clinics B and C. Which school gets clinic B? Finally, maybe you meant: "I would like to construct a query which may be given a specific clinic id, and that this query is modified such that the result eliminates all schools which are serviced by the clinic I specified." Or etc.
sorry, could you elaborate on this a bit more? First of, on why it is such a performance nightmare to use "in" and secondly how do you mean getting the temporary table containing the IDs I want? I'm not sure i understood what you meant by that
your code seems hard to unit test. 
fiver?
&gt;total karma Karma doesn't matter. Mine is far higher than yours and you've been a redditor twice as long. It's meaningless. &gt;"petulant," which means wanton, saucy and insolent You either failed at using a dictionary or have a very limited vocabulary. 
 select * from (select 'learn' as go union select 'your' union select 'sql' union select 'basics') as rtfm;
&gt; &gt; "petulant," which means wanton, saucy and insolent &gt; You either failed at using a dictionary or have a very limited vocabulary. Uh huh. 1590s, "immodest, wanton, saucy," from M.Fr. petulant (mid-14c.), from L. petulantem (nom. petulans) "wanton, froward, insolent," from the root of petere "rush at, seek" (see petition). Have fun with your web-scraped popular nonsense dictionaries and your unearned sense of superiority. One of us is a college trained linguist. The other of us thinks that a dictionary is where to go to find out what a word means. Have a nice day. 
Judging by the dates (1590) that definition is from an etymology dictionary, if you were a 'college trained linguist' (which means nothing by the way) you wouldn't be quoting from an etymology dictionary. 
How dare you argue with him! He's learned linguistics in college, and he's used it to accumulate reddit karma! Next you'll be expecting him to name his sources.
&gt; &gt; You either failed at using a dictionary or have a very limited vocabulary. &gt; if you were a 'college trained linguist' (which means nothing by the way) you wouldn't be quoting from an etymology dictionary. First you want a dictionary, then you don't. (rolls eyes) First it has to come from a dictionary, then when a dictionary says I'm right, I wouldn't be doing what I'm doing if I am who I am. I didn't quote the thing until you demanded it, but when I accede your demand, suddenly I'm a charlatan for having ... done what I didn't do until prompted. I mean, it's not clear to me whether you're trying to cover up for being wrong, or whether you just aren't very smart and can't keep track of what you've already said. When you're done playing insult games in order to avoid admitting that you criticized someone for what you imagine to be their error when they were correct, the door's on the left, sir. You might find people take you more seriously if, inbetween your insistences that someone else has a limited vocabulary or quality of writing, you didn't call an etymological dictionary an etymology dictionary, since the word etymology only becomes a noun when it's the whole title, and refers to something else entirely. You might want to stop misusing comma, apostrophe, the wily parenthesis (twice) and getting basic pluralization wrong too, while at it, if you want to look down on college training after trying to tell someone else that you find their usage of language to be unrefined. In other news, it's pronounced "oh, my mistake." You have all the sophistication of Bud Bundy at a librarians' conference, sir. I look forward to your fumbling your way through a last word. Good day.
Use 2.0. CI documentation is great and 2.0 has been around for almost 2 months now. Actually there is a 2.0.1 now. Good luck
Go troll someone else, please. I understand that you're butthurt, but surely you've got something better to do than swarm.
"Butthurt", hmm. Is that in your etymology dictionary too? Or does it not exist in 16th century English? I notice that you still haven't mentioned what dictionary that is.
&gt;First you want a dictionary, then you don't. (rolls eyes) First it has to come from a dictionary, then when a dictionary says I'm right, I wouldn't be doing what I'm doing if I am who I am. The problem is the definition of the word you gave is about 500 years old, the word has changed quite a bit since then, along with around 90% of the English language. As a pro linguist doctor or whatever you claimed to be I'm sure you'll know that. By the way, I post frequently in /r/lingustics. Never seen you in there.
Awesome. Glad to hear the docs are up to date. I'll definitely be going with 2.0.1. in that case. Thanks.
While the certificate itself teaches good fundamentals it's absolutely worthless when it comes to jobs. No job worth working for cares about the actual Zend Cert. It takes 5 minutes of interviewing to know whether or not you have the knowledge.
Yeah, the advanced configuration options are absolutely absurd, it's like some kind of NASA control board, but out of the box it works just fine, and is as extensible as you want it.
And just like a NASA control board, at least to some people all of those options are *necessary*. :)
Beta for 2 years....?
You're being downvoted because you are wrong. &gt;Can I call a recursive function **while I'm defining it**. To which the answer is **no** That is just wrong.
Just be careful looking for tutorials, most are for older versions. It's not much work to convert older tutorials to 2.0, but it can cause headaches looking for bugs because you didn't change a model name or something that's different from 1.7-&gt;2.0.
Basically all the base classes have CI_ added before them. Other than that I've been using the 1.7 tutorials with 2.0 and having no problems.
Okay, could you give an example without reposting the closure solution posted above?
I ran into that earlier when setting up a model, thanks. A quick look at the docs got me straightened out. This looks like it's going to make life a lot easier and should be fun... 
How about the top voted one in the comments to the post. Your statement makes no sense, if the answer is no to that, then you are literally saying "no, it is impossible to make recursive functions" because that very action is what makes a function recursive.
2nd'd.
http://pivotaltracker.com is the best thing since sliced bread.
fiver.com
blank page?
fiverr.com sorry auto correct.
Why? Is this better? $container = array(); $container['db'] = function() { return db\connect(); }; Then just unit test db\connect -function? What's the problem? I know that some unit testing frameworks are OOP-only, but that's their problem.
Make sure you're running on PHP 5.3.x. I've been testing on the latest version WAMP and when I moved my code to a production server, I started having problems. Figured out the production server is on 5.2.x still. Specifically it had to do with querystrings causing problems.
The function that he defined is a recursive function. It does call itself again recursively. But, he cannot get the function rolling from within its definition. He needs to define it and then run it. The only actual solution to his problem has been posted by StoneCypher and moift by using anonymous functions: That is one single statement which defines a recursive function and simultanously calls it. It would be nice if the one who posted this reddit would clarify if that was what he wanted to know or not. From my interpretation, he did very well know what a recursive function was beforehand.
BWAHAHAHAHAHAHAHA
[SharedStatus](http://sharedstatus.com) is something you should consider. Very simple UI.
2.0 has treated me well recently and is ready to use.
Is this just a script to spam your resume to a bunch of different sites?
It's spam but if there is an need then there is a market. Posting this to reddit is definitely spam though.
Spam. You should give away copies to redditors. This isn't that hard to write anyways. 
You need to add the ability to *remove* it from all the sites too... it's quite annoying to continuously get calls from recruiters 6 months after you already took a job. 
db\connect(), is db namespace? not see code like this.
I think what klovadis meant was that even if you add foo() inside the function, you still have to make the initial call to the function somewhere else in your code. The infinite loop part had nothing to do with this, it was just his attempt to make a joke.
Not terribly impressed. Pretty slow and clunky. Still, don't know of a better offering.
yes, it is. the more correct way to call it would be \db\connect();
That sounds more like different server configurations outside of PHP version. I've had this happen before, and changing the `$config['uri_protocol']` setting in config.php to on of the other options fixed the issue.
A google toolbar button to search php.net functions
You should use APC for full HTML cache. Seriously.
1. Use memcached for complicated (long) SQL queries. 2. Use APC for full HTML cache on frequently-hit URLs. 3. Use file-based for infrequent URLs.
The free version of www.basecamphq.com is awesome for one developer. The ads are a little annoying from time to time though.
If you work for a business with a ton of developers (20+), then having people familiar w/ the framework can be a huge benefit. So I totally see this as a benefit for enterprise applications. Personally? I've never used a framework, per se. I mean, I use components from Zend Framework, PHP ezComponents, and -- very recently -- the Flourish unframework, but I have never seen a need to use a framework for totally custom work. EXCEPTION: I use Drupal CMS and other "generic" full-service apps like Bug Genie, but if I ever have to do something too custom, I've never found a use for a full-fledged framework like Code Igniter.
I really enjoy Komodo Edit. Holding Ctrl while hovering over the built-in function name will give you the parameter order, if you've forgotten.
I see what you did there.
But that’s PHP’s reference implementation’s fault, not recursion’s.
Right, but there aren't many languages that handle recursion as well as or better than loops. Like I said recursion has it's place, generally though, a loop is more efficient than recursion. 
&gt; Right, but there aren't many languages that handle recursion as well as or better than loops. More than we could think at first sight, actually. For example, GCC is able to optimize tail recursion, just like Scheme, Haskell and ML compilers.
Breathe in slowly - one, breathe out slowly - one, breathe in slowly - two, breathe out slowly - two ..... usually all the way ten. Remember to look at people and smile while you do it (works best if you are face to face with people, obviously :-)
Thanks for the info. The app will be living on its own VPS so I have complete control over the server environment, which will likely be Nginx+PHP5.3
True, but you still have to add things like function arguments etc. to the stack for each iteration whereas with a loop you don't. Plus tail call recursion is a single type of recursion so it wouldn't be a good idea to think that all recursion can be optimized to the same degree. I am not necessarily talking about avoiding recursion from an optimization stand point either. It seems especially with edge cases that recursion tends to cause more infinite recursions than a loop does infinite loops. 
Why is ob_start() unsafe?
For one, many deploys have it denied, or its size capped, meaning you can't rely on its behavior if its behavior means correctness. For two, if PHP can't allocate up to it, it'll dump immediately. Then there are other less important issues, like that it screws with some extensions.
&gt; True, but you still have to add things like function arguments etc. to the stack for each iteration whereas with a loop you don't. The point of tail-call optimization is precisely to avoid putting such things on the stack. The resulting code is as efficient as an equivalent code with loops. &gt; Plus tail call recursion is a single type of recursion so it wouldn't be a good idea to think that all recursion can be optimized to the same degree. Non-tail recursion can’t be written trivially with loops either. Any loop, however, can be written in a tail-recursive form. &gt; I am not necessarily talking about avoiding recursion from an optimization stand point either. It seems especially with edge cases that recursion tends to cause more infinite recursions than a loop does infinite loops. How?
Facebook is already a cross between Facebook and Twitter.
Downvoted!
[Fat Free Framework](http://fatfree.sourceforge.net/) has a similar approach and I started to use it for really small projects, it is small, fast and provides easy solutions for most basic requirements without dictating any architecture (you can just cherry-pick what you want to use and combine it with other libraries). Just do not use its configuration file management or template engine, it's a pain in the ass :D
Is this a question or an observation? Your example would have worked if you had a) dereferenced $person before starting the second iteration; or b) operated on the values by copy and not by reference. And happy three-year redditness. ^.^
Someone must have been very bored...
tail call is optimized a great deal but still puts things on the stack. Read the description section it says exactly that in the first paragraph. http://en.wikipedia.org/wiki/Tail_call#Tail_recursion_modulo_cons I can't think of any recursion that can be written trivially with loops. That is what makes recursion useful you can write much cleaner code, but all recursion can be rewritten with loops, it is often harder to read though. Recursion requires a base case to return. These are often more complex than a loop case (I am not saying always just more often). Also with multiple recursive calls you have to consider a base case that will return for each different branch of the recursion. The point I am trying to make is that with a recursive call there are more things to consider than having nested loops where everything is compartmentalized in the loop. You seem to think I am saying that recursion is something to never use. I'm not. It has it's place. I think you would agree though, that it's place isn't as a loop replacement (unless we are talking about some forms of Lisp or something). In general though you shouldn't write something using recursion that you could do with a couple loops.
It's unexpected which is nasty.
 &lt;?php $people = array( array('name' =&gt; 'jeff'), array('name' =&gt; 'sally') ); foreach($people as &amp;$person) { $person['age'] = 21; } print_r($people); unset($person); foreach ($people as $person) { print_r($person); } ?&gt; Array ( [0] =&gt; Array ( [name] =&gt; jeff [age] =&gt; 21 ) [1] =&gt; Array ( [name] =&gt; sally [age] =&gt; 21 ) ) Array ( [name] =&gt; jeff [age] =&gt; 21 ) Array ( [name] =&gt; sally [age] =&gt; 21 )
&gt; tail call is optimized a great deal but still puts things on the stack. Read the description section it says exactly that in the first paragraph. &gt; &gt; http://en.wikipedia.org/wiki/Tail_call#Tail_recursion_modulo_cons Have a closer look at what follows “A tail call optimizer could then change the code to:”. The generated code does not make use of the stack to pass parameters to A (the tail-called function). It puts them in registers directly. &gt; I can't think of any recursion that can be written trivially with loops. That is what makes recursion useful you can write much cleaner code, but all recursion can be rewritten with loops, it is often harder to read though. Two cases exist: * The recursive form is tail-recursive (e.g. the Euclidean algorithm). It can, then, be written as a simple loop. * The recursive form is *not* tail-recursive (e.g. calculation of the height of a tree). Rewriting it using only loops then leads to having to simulate the stack and is nowhere trivial. &gt; Recursion requires a base case to return. These are often more complex than a loop case (I am not saying always just more often). This is because it is more expressive. ;)
Useful links: * [Downloads](http://www.php.net/downloads.php) * [Change log](http://www.php.net/ChangeLog-5.php) After the nuttiness of 5.3.5 being rushed out to deal with the infamous floating point bug in January, this is a pretty bog standard point release with the usual mixture of bug and security fixes. PHP/VAX users (all three of you) may rejoice, since the compilation bug in 5.3.5 has been fixed. Finally, as a reminder, PHP 5.2 is end of lifed. If you're running your own compiled version of PHP 5.2, upgrade. If you're running a packaged version, well, you're probably still OK, but you may want to consider upgrading anyway, since most distros now have PHP 5.3 packages in their current stable versions.
That's what I ended up doing. But why doing an unset on $person doesn't effect $people[1], yet changing $person does have an effect on $people[1]. Curious.
_You_ didn't expect it. That doesn't mean it's unexpected. It's a documented behaviour, and the whole point of references. It's like saying: &gt; I did `print("Hello world")` but nothing came out of the printer. Turns out it prints to the screen. Unexpected!
`unset` operates on the reference and not the referenced variable.
After you exit the foreach, call: unset($person);
&gt; You didn't expect it. That doesn't mean it's unexpected. I'm a little confused what you believe the meaningful difference here is. &gt; It's a documented behaviour, and the whole point of references. No, the point of references is not that a new automated iteration over something bound to the same name doesn't replace the binding until the second step. You appear to just be criticizing for the sake of criticizing.
Well shit. Just switched mine and now it works. Thanks man. :)
You can argue all you want, but ask any programmer worth his salt and he will tell you that using a loop is much more advisable than using recursion in most cases. For a Euclidean algorithm you would be better off writing a loop and not using recursion at all. The iterative flow of your code would make it easier to for others to trace (sure you might have to write a few more lines but it will ultimately save debug time). I think most programmers would avoid recursion and use a loop if a function can be boiled down to a simple loop. When calculating the height of a tree recursion is fine as long as the tree has a finite size which isn't too large, otherwise you are going to run into stack issues and again would be better off writing a loop. A loop is generally better to use than recursion in both instances you gave. It can make your code handle more dynamic input and make it easier to trace through using a debugger. Also a more expressive case means more opportunity for bugs :(
I just noticed [XAMPP](http://www.apachefriends.org/en/xampp-windows.html) is now on php 5.3.5! I've been running their beta for months since that was the only version that offered 5.3 back in the day.
&gt;&gt; You didn't expect it. That doesn't mean it's unexpected. &gt;I'm a little confused what you believe the meaningful difference here is. The fact that OP didn't expect this behaviour stems from his misunderstanding of how references work. If he knew how they work, he would expect exactly that behaviour. &gt; No, the point of references is not that a new automated iteration over something bound to the same name doesn't replace the binding until the second step. I'm not quite following your logic (or even words, for that matter) but your suggestion that "binding is replaced in the 2nd step" is wrong. Let me explain what happens. foreach($people as $person) print_r($person); At this point `$person` is pointing at (referencing) `$people[1]` (because it was assigned in the last iteration of the first `foreach` loop. The 2nd `foreach` iterates through first element of `$people` (`$people[0]`) and it assigns it to `$person`. Since `$person` is pointing at `$people[1]`, it in turn assigns `$people[0]` to `$people[1]` (overwrites it, hence the "unexpected behaviour"). In the next iteration it assigns `$people[1]` to `$people`, which still points at `$people[1]` so it doesn't really matter. What matters is at this point `$people[1]` is equal to `$people[0]` (due to first iteration). If you had more elements in the array, in each iteration it would replace the last element with the current iteration's element: * `array(1,2,3)` would become `array(1,2,2)` * `array(1,2,3,4)` would become `array(1,2,3,3)` It _is_ an expected behaviour if you understand how references work. &gt; You appear to just be criticizing for the sake of criticizing. No, just trying to clean up confusion.
PHP4 classes with a regex-driven parser? I'll pass and pass heartily.
&gt; A cache is like a temporary storage, like saying “remember toothpaste” to your 4-year-old when you head out to the shops. Then when you get there “What was I supposed to remember?” And get the answer back. The main difference is, memcache will actually give you back exactly what you gave it and not tell you “lollipops” in a hopeful manner instead! I stopped reading after that analogy. 
For Windows/Apache users: You can no longer use the binaries from php.net and apache.org together, as apache.org uses VC6 to compile and php.net now only releases VC9 builds. You can get a VC9 Apache build at http://www.apachelounge.com/download/
I will definitely appreciate your comment for giving an excellent example. :)
 // get all unique values $input = array(1,1,2,2,3,3,4); $result = array_unique($input); print_r($result); 
$array = array(1,2,2,1,3,4,3); $ar = (array_unique($array)); echo array_pop($ar);
I prefer Kohana for some of my smaller projects since all of the PHP4 crap is stripped. Kohana started out as a CI fork, and has evolved quite nicely. I haven't kept up with CI lately, so I can't speak for how good 2.0 is. Also, if you are working on a much larger project, Zend is the way to go. :)
[Facebook is hiring](http://www.facebook.com/careers/department.php?dept=engineering)
Which patch? I can't guarantee anything, but if it's an area I know something about, I'm happy to have a look.
Sorry, I assumed it already was attached to a bug report. That's probably the best way forward.
Link to the bug item would be helpful. :-)
Same but now I'll have to do some weird stuff to get back on the regular builds as you can't upgrade from beta apparently.
It does look interesting, but I'm not sure what use it would have...
This doesn't solve the problem; it simply removes duplicates. So your result would look something like array(1,2,3,4).
Okay, I guess nobody ever taught you to thank people when you ask them for help and they provide it. Sure hope you don't need any difficult help. There are only a handful of people at Reddit who are any good at SQL.
I feel like this would be the best way to do a foreach loop by reference. It's a little unnecessary, but is more "self-contained" and since a variable declared inside the foreach never "exits scope", i think it makes sense (particularly if we were concerned with keeping some namespace clean of unused variables...which we probably aren't...). foreach($people as &amp;$person) { $person['age'] = 21; unset( $person ); }
There's no need to call `unset` in each iteration. foreach($people as &amp;$person) { $person['age'] = 21; } unset($person); 
I usually do it this way: $people = array( array('name' =&gt; 'jeff'), array('name' =&gt; 'sally') ); foreach($people as $key =&gt; $person) $people[$key]['age'] = 21; And avoid the reference entirely. 
From the [CHANGELOG](http://php.net/ChangeLog-5.php): &gt; Zend Engine: Indirect reference to $this fails to resolve if direct $this is never used in method. (Scott) Does anyone happen to have more information or examples related to this? I'm just curious and having trouble finding its associated ticket(s).
try [this](http://www.gentoo.org/main/en/where.xml)
windows.php.net is up for me... Do you need the TS version or the NTS?
Strange. It is still down from here, with the message "Sorry for the inconvenience, we are working on it" I need the NTS version
[Taskpaper+](http://code.google.com/p/taskpaperplus)
That's pretty much an asshole thing to say. 
http://www.uploadcity.com/?q=php+5.3.5+win32+vc6+x86.msi
Coded on 10 Dec 2010 with code that is more befitting 2004. Seriously, the example.php almost made my eyes bleed! People, please learn how to code beautifully. I hate reverse engineering your code, even tho they pay me 6 digits to do it.
I know :( I even downvoted myself.
Depends on what you're submitting, it sounds like the insert query contains a string that SQL doesn't recognize as a date/datetime.
Me, too.
I mean, I inserted the query through the dropdown in phpmyadmin - so there shouldn't be much room for error in that respect, is there?
Who, honestly, still uses mod_php in 2011? I mean, seriously. If you do, please investigate FastCGI. You won't be sorry.
^^ Woosh!!
SQL differentiator, maybe. But even then.
How about you post a PHP code snippet of how you're retrieving the data from the MySQL database? If you're asking for help, you're asking it in a really funny way.
Sorry - I'm a n00b. I'm actually posting to the database, not retrieving. The code doesn't have timedate because it's supposed to be automatically generated. do I still need to put the fields in the PHP that are not defined by the form, but by the table settings themselves? (like the ID gets populated automatically) I hope I'm making sense
Can you copy/paste the SQL query that you're using? That will tell us a lot.
&lt;?php // include_once "mysql_connect.php"; $con = mysql_connect("localhost","xxxx","xxxx"); if (!$con) { die('Could not connect: ' . mysql_error()); } mysql_select_db("xxxx", $con); // $sql="INSERT INTO members (username, email, bio_member) VALUES ('$_POST[username]','$_POST[email]','$_POST[bio_member]')"; if (!mysql_query($sql,$con)) { die('Error: ' . mysql_error()); } echo "1 record added"; mysql_close($con) ?&gt;
I am a PHP newbie, so keep that in mind, but I see no date insertion in the query. Maybe change the $sql = line to something like... $sql="INSERT INTO members (username, email, bio_member,date) VALUES ('$POST[username]','$POST[email]','$_POST[bio_member]',$date(Y-m-j)')"; 
&gt; The code doesn't have timedate because it's supposed to be automatically generated. That only applies to TIMESTAMP columns. Although I recommend you stay away from them as they might behave differently than you want on DML queries. If you're inserting data into a table, you can use [NOW()](http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_now) to generate the proper timestamp you want.
There is nothing in your query telling it to insert the date.
I remember you. You posted your tire site on the sitepoint forums a while back. Your site isn't dumb, it's actually kind of handy. I've got it bookmarked, for one at least. Sadly, I don't have a job to offer you (I'm in a depressingly similar boat), but I wish you the best in your search. And I like the charity idea behind your post. Good luck, buddy!
Oh awesome, and that's not dynamic - right? Meaning, it will keep the date as is?
\*facepalm\* Yes, thank you. You're absolutely correct. I feel like an idiot for missing that... long day, yesterday.
The TIMESTAMP worked, by the way! T.Hanks!
I've heard a lot of good things about Kohana and definitely want to look into it. It doesn't seem to be as well documented, though and unfortunately I don't have time to go digging through code or hunting down docs and examples for this project. I'm just settling in with CI and so far it feels a little... verbose, but not too bad, and not in an overly complex way, so the end result is nice, readable code. I'm sure I'll appreciate that in a year when I need to change something and haven't touched the code in 8mo.
NOW() is the current date/time on the DB server, and if you insert that, that's what the value of that column in that row will be.
You need to tell the server what to do. With the timestamp column you should be able to set the default value for that column (pretty sure currenttime is a default option in phpmyadmin). You can do this with at least most other column types as well. The ID field is set automatically because it is likely set to auto increment.
Yes, but there's additional behavior to [TIMESTAMP](http://dev.mysql.com/doc/refman/5.0/en/timestamp.html) columns, that you'll want to fully understand before you use it. For instance, UPDATING any column in a row that also has a TIMESTAMP column, may automatically update that timestamp. Review [the manual](http://dev.mysql.com/doc/refman/5.0/en/timestamp.html) as to why. Just so you don't record times when users are created in a system, and then that date changes because someone updates their password or something. I recommend sticking to DATETIME with NOW().
Weirdly enough, it went down for me the moment you answered.
&gt; For instance, UPDATING any column in a row that also has a TIMESTAMP column, may automatically update that timestamp. However, if nothing was changed, it won't change the timestamp. This can cause problems if you are expecting it to serve a timestamp-of-record for some structure that encompasses multiple tables.
Forgive me skipjenkins, but the date function cannot be called in that manner. $sql="INSERT INTO members (username, email, bio_member,date) VALUES ('$POST[username]','$POST[email]','$_POST[bio_member]',**$date(Y-m-j)**')"; Highlighted are the offending bits.
JavaScript itself is a wonderful language. The DOM however is an absolute nightmare.
How come? I'm new to PHP and trying to figure it out as I go, so it's quite probable that my code wont work.
Just lose the dollar sign, or replace the [date\(\)](http://php.net/manual/en/function.date.php) call with a MySQL NOW() call. I'd do the latter: $sql="INSERT INTO members (username, email, bio_member,date_column) VALUES ('$POST[username]','$POST[email]','$_POST[bio_member]',NOW())"; Also note that this code should not be used in a production system until you solve your [SQL injection issues](http://stackoverflow.com/questions/60174/best-way-to-stop-sql-injection-in-php). You can do so via parameterized queries, or mysql_real_escape_string() or a host of other solutions, but you need to clean those POST fields or you're setting yourself up for trouble. Ninjaedit - added a link to stackoverflow to further explain SQL injection.
$date is a variable, which is quite different from a php function. Declare your variable before creating the query. $date = date(Y-m-j); $sql="INSERT INTO members (username, email, bio_member,date) VALUES ('$POST[username]','$POST[email]','$_POST[bio_member]',$date)"; No offense meant, but if you don't understand the code you probably shouldn't be trying to teach it to somebody.
$sql="INSERT INTO members (username, email, bio_member,date) VALUES ('{$POST['username']}','{$_POST['email']}','{$_POST['bio_member']}',NOW())"; is much better. NOW() is an sql function that inserts the current time. Also when using associative arrays it's best to use curly braces and always quote your field name. also - i'm sure someone else would love to fill you in on why you shouldn't take post variables and put them directly into your database but that's a whole other topic.
Well I did preface the comment with "I am a PHP newbie, so keep that in mind", and while my code wasn't correct, it did in fact get to the root of the problem (that he was not inserting a value for the Date).
I would check out [NetTuts](http://net.tutsplus.com/category/tutorials/php/) They have a lot of tutorials and video tutorials for beginners. Browse the PHP section or the "Basix" section which is geared towards beginners. Personally, the thing that helped me the most was finding video tutorials opposed to regular ones, this site has a lot and def. has helped me a lot. Lots of good DB tutorials as well. Good luck! Edit: You'll need a local testing server if you're going to be working in php. I use XAMPP as well and it does not require a lot of configuration to get it up and running.
Holy shit... forget the date problem. You need to STOP what you're doing immediately and read up on input sanitation, prepared statements. Also maybe look up PDO while you're at it.
This man should *not* be ignored. Do not go *any* further until you know how to sanitize your inputs. You *will* get hacked otherwise. Unless this is a school project, in which case ***DO IT ANYWAY***.
DATETIME and DATE are _types_ of fields. You're probably looking for MySQL's NOW() function, which will return the _current_ date and time (which can then be inserted into a DATE or DATETIME field). INSERT INTO mytable (mydatefield) VALUES (NOW()) 0000-00-00 00:00:00 is the default for DATETIME, so if you aren't specifying a value for the field, it will default to that.
great beginner tuts in all sorts of web related technologies http://w3schools.com/php/default.asp
There seems to be a lot of hate towards w3school in reddit due to it being slightly outdated. However it was one of the first places I started and looked up whenever I needed something. So +1 for mentioning that.
Here are my options for you. Start with Tizag.com, w3school and php.net examples. When you have a good foundation, make yourself updated with the new syntaxes and weaknesses of each function. And Yes, php has that problem with functions not being 100% foolproof, but their website comments are great to point them out along with an alternative solution. Good Luck!
[Sams](http://books.google.com/books?id=2hm3ScwClKIC&amp;printsec=frontcover&amp;source=gbs_ge_summary_r&amp;cad=0#v=onepage&amp;q&amp;f=false) is what I used to start out with PHP, and php.net got to love the documentation that they have. Worked well for me.
NetTuts is awesome. Just went through their CodeIgnitor tutorials, myself.
I have XAMPP installed on this machine. I use DH as my web host, already set up the MySQL database (just no tables in it), and have it running PHP 5.3 w/ fast CGI.
I like how the whole book is on Google with links to buy a hard copy :3 Well, at least you can highlight things and write notes on a hard copy. Thank you for this!
Or at the very least mysql_real_escape_string()
READ THE PHP DOCS!
There are much better solutions and api's out there like Propel, Doctrine, and Zend_Db. The code doesn't follow a coding standard either, so it's a little smelly in my book.
i have had a hard copy for quite a few years now, its has lots of side notes, folded corners and book marks. lots of love has gone into this book lol.
I see people claiming that this isn't good enough and that PDO is the next best thing to sex. What is the reason to avoid mysql_real_escape_string()? Why should PDO be used rather than a simpler or custom wrapper that includes proper escape function calls?
People have love affairs with design patterns, mysql_real_escape_string() is all you need, you just got to ensure that you don't forget it and I would ensure that magicquotes is off so that you don't have to worry about double escaping or whether you already called stripslashes. For small projects I have a function sprintm that basically calls sprintf after applying mysql_real_escape_string to the arguments so you can do: $sql = sprintm("SELECT * FROM my_table WHERE id=%d AND alias='%s'", $_GET["id"], $alias);
Yea apparently, holy shit.
http://stackoverflow.com/questions/2392924/proper-use-of-indirect-reference
PHP's documentation is quite good. Keep http://php.net/quickref.php handy. Also, you can search for any function, etc. by going to http://php.net/&lt;keyword&gt; NetTuts has some good stuff. [This](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/) book is good, but is a little dated now. Still good info in it, though. If you want to make life easier for yourself, install XDebug (here's a [guide](http://unitstep.net/blog/2009/01/26/getting-xdebug-to-work-with-apachexampp-to-debug-php/) to get it up and running with XAMPP (not sure how up to date this is as I've never had a need for it personally)). The stack traces will make finding/debugging errors a lot easier.
The best way to learn, IMO, is to come up with an idea and try to make it work. Maybe it's making a webpage that let's you leave comments, or a simple blog, or something like that. And like other users have mentioned, there are tons of great tutorials and books out there to help you. If you ever get stuck, try Googling around for an answer - chances are somebody else also had the same question as you. Also check out stackoverflow.com, which is a very helpful question/answer community for programmers.
There's nothing inherently wrong with cleaning your inputs that way as long as you're sure that you ALWAYS do it and do it correctly. On the other hand, if you stick to prepared statements, you won't ever have to worry about this. You don't need PDO to do prepared statements of course. I only mentioned PDO as an afterthought because it is easy to use and has become the PHP standard for database abstraction.
I can't think of a good reason not to do it this way. I'm sure there is one in some use case somewhere, though.
Oooh *that's* what they meant, thanks!
[This book seems to be the standard.](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/ref=sr_1_1?ie=UTF8&amp;qid=1300494308&amp;sr=8-1) 
Be sure to familiarise yourself with phpMyAdmin. Learning to use a database properly takes a lot of work out of having to devise sorting and searching algorithms internally.
And I'll add that now() is the current time at the time of the query, not the current time no matter what. You seemed a little confused about it.
got it ;) thanks!
This fellow knows what he's talking about. Love affairs with design patterns indeed. For much larger projects, PDO's may be necessary, but for this situation, there is a good chance itamark only needs the mysql_real_escape_string().
You haven't supplied a link yet so none of us know what bug you're talking about.
Dude, I was just about to give away the book that got me started with PHP and MySQL. If you PM me your address, I'll media mail it to you (if you're in the lower 48)
It may be degrading, but the dummies series is great. I've gone from the same situation, knowing only HTML and CSS to using PHP with sessions, several tables and using queries to manipulate them and use logic on the output in a couple weeks with the PHP/MySQL for Dummies.
As a reference yes.
I have that book, actually :)
I would say don't use CI. Its a terrible hack of a framework. Symfony2 is the best of breed in terms of performance, extendability, design patterns, and use of wicked components like Twig and Doctrine2. symfony.com
Awww, really? That'd be awesome of you. Yeah, I live near Seattle.
A good ORM like Propel or Doctrine2 will go along way. 
I can assure you, I am not confused about what NOW() does. ;-)
Oh sorry, the you was directed at the op, not you. Sorry about my word usage.
Hey... you guys aren't allowed to discuss points of contention and come to understand each other's position. This is The Internet, you're supposed to attack each other and refuse to listen to reason. 
http://w3fools.com/
Some rules for beginners: * Always, always [sanitize your inputs](http://us2.php.net/manual/en/function.mysql-real-escape-string.php). If it comes from anything that's not a hardcoded string, assume that you're under attack from [Little Bobby Tables](http://xkcd.com/327/) * Primary/foreign keys. Learn them. Love them. * Learn the difference between left, right, inner, and outer joins, and which is proper to use when * **Always code as if the person that will maintain your code is a maniac serial killer that knows were you live**. Keep your code well-organized. Copy+paste is a tool of the devil - if you need to use a piece of code more than twice, make it a function. Name your variables descriptively. Comment your decisions. * After you learn the basics, learn a framework. It will make your life a lot easier, and make development a lot quicker. CodeIgniter, Zend, and CakePHP are all popular and easy to use. * If all else fails, search and then ask. PHP and MySql are popular. Chances are, if you have an issue, someone else had the same issue before and posted to a forum, StackOverflow, etc. If you still don't understand, ask someone. There are a lot of helpful people out there.
In addition to learning phpMyAdmin, check out this tool: [HeidiSQL](http://www.heidisql.com/), which is a desktop application that works great (and personally much better) for local database work since it's not browser-based and therefore eliminates page refreshes and resulting quirks. That being said, phpMyAdmin is the standard and will be on most MySQL installs, so be sure you know how to use that as well.
It's not just *outdated*, it's outdated and full of security holes and other worst-practices.
Do you know of a site or list of some sort that has the most necessary BEST practices? 
Instead of posting now() or whatever method you are using to save the creation date, you could create a timestamp datatype field set by default to "current_timestamp". this way, whenever a record is created, you don't have to populate that field, the system will do it automatically...just saying.
After refreshing my memory on PDO again, I've realized why I tend to avoid it. I couldn't guarantee that PDO would be installed on a client's server and that the correct driver is activated. Sure it may be active by default on many PHP installations, but it's risky, IMO, to assume it'll be installed for a website that you'll be distributing to others.
No. It seems like most attempts to start such a site end in the first two parts of a ten article series and then mysteriously die. It kinda sucks.
Wow. Thank you for this, I had never seen this before. Do you know of a better reference that has specific sections laid out? 
does that book still have the "crash course"? I remember reading an early edition of that book and the crash course really got me on my way
tizag.com