Frameworks aren't just about building faster -- having a standardized structure for projects allows developers to encounter less overhead moving between projects. If your company builds projects for many clients it is very valuable that all the developers on your team can be productive right away on any of them without having to figure out first how everything is laid out and executed. Also as an experienced native developer there's no reason why a framework has to be a tangible hit to the performance or leanness of your projects. Frameworks are only a shotgun approach when they empower newbies.
Who runs these validations? Does the repository does that when I do //exception/returns false/etc $repo-&gt;add($entity); or does the entity to it? $entity-&gt;isValid(); or do I have a entity validator object? $entityValidator-&gt;isValid($entity); If the entity wants to run the validators it needs to know about the database or at least know some place where it can get its validators from? Can you please make a concrete example with said document entity?
Let me help you out. $linefeed hasn't been defined, so everything's going to be on one line. You're going to have to nuke this code from orbit. It's the only way to be sure.
I would go with number 3 which is Symfony style. Your entity can offer up validation rules and the validator will collect those rules and validate: $entity-&gt;getValidationRules(Validator $validator) { $validator-&gt;addRule('name_field', MaxLength(10)); } Then your validator get check for errors and retrieve those errors to be used somewhere: // Will pass itself into the entity's getValidationRules method // to learn the validation rules $validator-&gt;validate($entity); if (!$validator-&gt;isValid()) { print_r($validator-&gt;getErrors()); } So just an idea of what's going on in the validate method: // "Validatable" interface maybe, or could get that getValidationRules method exists on that object public function validate(Validatable $validatable) { $validatable-&gt;getValidationRules($this); }
I'd like to hawk [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) here, even though it is unfinished, but I can't say the existing chapters will apply directly to CodeIgniter. Having said that, perhaps I be of assistance, as I've done work modernizing CI apps previously.
Yes, that would be detrimental. But maybe that's not what was said. Maybe it was more along the lines of "I would get rid of the models folder and use a domain application logic folder instead, because that's what would work for your application." Without seeing/knowing exactly what you're referencing, I can't comment on it. I was being more broad, responding to your comment about "most frameworks" and their tendencies.
How to validate models? You tell them they're pretty.
You found the error ^reporting ^^code!
Your value isn't just what you can write for yourself, but what you can add to the work of others. This is what the prospective employers are looking for. The community uses frameworks, so you must learn them too. Just jump in, it's not too hard and you might learn some things while you're at it.
ZF2 has the option of paid professional support. For that reason alone it is a contender in the Corporate enterprise world.
Joining /r/laravel or /r/symfony would be a good start! :) Good luck though. I was in the same spot as well a good 5 years ago. Then I picked up my 1st framework (Zend Framework), which I was knee deep in for a little while until about 2 years ago when I got more active in the job market... and then things kind of rocketed since then in so many areas. It's tough to keep up-to-date when you are in a comfortable job working in the same environment every day, but you really can't afford to do that in the webdev world. Being a contractor for a while can give a good boost to your career, because you are forced to expose yourself to so many difference projects and technologies. Otherwise, making sure to join lots of different meet ups is another good way to keep yourself current. It's never too late!
This is cool. Now what to make.
Yeah - you seem to make a lot of assumptions about frameworks AND lump them all into one without actually trying one. Good luck with your career. With this attitude, you might as well change course.
\_\_FILE\_\_ will end up resolving to the exact same file that the mail_error function is on and __LINE___ will end up resolving to the same line that $message .= "Job Failed at Line Number:" making the whole error message absolutely useless.
phpworm is right about there being plenty of jobs for native php folks, but I'm not sure what he means by php frameworks sacrificing flexibility for standards (none that I've worked on anyways). Maybe he means that the business/project ends up imposing limitations, rather than the framework itself. In any event, many of the more modern frameworks have the design philosophy of flexibility and depend on tools like composer to let you put together and manage your own dependencies. Regarding having a framework or two on your resume, having been part of the hiring process in many of my previous employers, having a framework to point to has kinda been a fairly significant detail. Sadly, in this market, there are a lot of sub-par PHP developers who punch above their belt. The implication of having some framework experience is that the developer has been exposed to best practices and a mature software development cycle. This means things like design patterns, project structure, separation of concerns in your code (ie. MVC), testing, asset management, deployment, security, etc. Believe me. I've seen _a lot _ of resumes and interviewed a lot of people and many of them with no framework experience fall flat in so many of these areas compared to those who have. And I've seen the outcome of projects built by such individuals and they are scary and ended up being detrimental to the business. I'm not making any assumptions about your skills. Just letting you know what my experience has been like.
It's too late to read that last sentence
Interesting - looking over the ob_ control functions, I can't see a specific advantage to it over echo. My understanding of echo is that it dumps the output stream directly. Creating an output buffer, which is then processed and then dumped in to the output stream seems like a less efficient echo. As I just started reading up on output control functions, I may be missing something there. But trying to implement your idea: **So we'd have:** function loop(){ //mysql query stuff while($row = $result-&gt;fetch_assoc()){ ob_start() echo $row['item']; //Whatever called box echoing the string, good so far. $item = ob_get_contents(); return $item; include '/framework/_showItem.php'; ob_end_clean(); } } **with _showItem.php being:** &lt;div&gt;&lt;?php $item ?&gt;&lt;/div&gt; Again, I can't see the advantage to this. If there is one, I'd love to know.
Hah! That was terrible, thats what I get for typing something on the phone and not reading it over.
Which isn't a bad thing.
What problem is this meant to be solving?
Yep. Hundreds of really great error emails telling me they were all occurring in the same line of the same include file. For a moment I thought I was only going to be fixing one bug...
I thought that this was pretty thorough: http://zf2.readthedocs.org/en/latest/#learningzendframework It might not be perfect and ZF2 is definitely not for programming newbies (not saying you are).
There are two types of languages: Those that people bitch about, and those people have never heard of. 
If anyone was wondering why php started out as a very horribly designed language that took a very long time to gain much needed features, these answers will give you a lot of insight. Keep in mind his favorite framework is Codeigniter.
I went into this thinking it would be "yet another rant by Rasmus", but I was pleasantly surprised. Namely, he does have a point about framework initialization and duplicating web server functionality. Even though these are all second nature to us now, it does have performance implications. So yeah, he has a point.
He didn't say that the sample code was MVC. He was demonstrating raw PHP.
Disagree on the async callbacks. We have deferreds and the promises pattern now. Callback hell is a solvable problem that means people have to unlearn habits. It is a people problem, not a technology problem.
They're valid points. But a better title would be "4 Reasons Why I Don't Personally Want To Use PHP Frameworks"
Plus you don't have to have _nested_ callbacks, you can used named functions for the callbacks to make the code more readable.
Certainly. Although at some point if your application gets large enough, you're essentially getting into a big long chain of callbacks. The nice thing about deferreds/promises is functions like q.all or $.when.all that let you resolve a series of promises and get all of the results of those promises in a nice little array of results.
I suggest doing some research on how MySQL works and its implementation in PHP. I'm not saying this to be mean but parts of this question betray a potentially disastrous (given that you use the word "orders") lack of knowledge that could lead to your website being compromised. Take a look at http://us2.php.net/pdo and http://dev.mysql.com/doc/refman/5.6/en/retrieving-data.html for starters. Those links have the answers to your specific question but reading through them yourself will prepare you better for what I think you may be diving into (writing your own ecommerce software)
Please see [this submission to /r/programming](http://www.reddit.com/r/programming/comments/1x0hk8/marvel_gives_comic_book_characters_their_own_api/).
Absolutely. Deferreds and promises are very slick and definitely have their place.
Hey! It's jtremenio from IRC! I miss the days hanging out when I had a php job. I think I was the one that introduced you to nyan cat result printer...or you told me....I dunno, good convos though. I miss you man.
Please stop referring to [domain objects](http://c2.com/cgi/wiki?DomainObject) as "models". There are no "models" in MVC. Model (noun, singular) is a layer.
That's implying a popular language is a good language.
This is why I roll my own minimalist MVC framework that deals with common stuff I use when developing web apps.
The initial problem it tried to solve, was PackageA wanting to grab some sort of resource (image, data, javascript) from PackageB. We can't always depend on that resource being in PackageB at ../../../../vendor/acme/packageb/assets/some.js
Anyone else find it laughable that the inventor of PHP is complaining that it re-executes code over and over again unnecessarily?
The report may be skewed by the author putting in his own opinion quite heavily .... for instance number 4 starts with "Another aspect that Rasmus did not mention directly" - so wait, is this Rasmus's point or the authors? Does anyone have a link to a text write up of Rasmus's comments? I may just sit down and watch the video instead.
Reading between the lines, this may be the authors opinion rather than Rasmus's. I may take the time to watch the video directly to find out.
Charging for it? Hmm, I must remember to look up later how that goes for you.
Fair enough! I'm interested to know how it breeds incompetence as well. Its the only PHP framework I've ever used so I have no other benchmarks. I enjoyed it because I came from a rails background and there was enough similarity in structure and style that I picked it up quickly.
Don't forget how the author plugs in his own ORM tool into the conversation.
[num rows](http://us3.php.net/mysqli_num_rows)
OK, so here are timestamps: Opcode vs APC 27.10 How to protect PHP code 30.20 Framework 31.45 Goals 35.40 Why $ 38.30 Unblocking apps 40.20 Really, all the questions are good - if you don't have time for the full talk just start at 27 and go straight thru. (Sorry for edits and formatting, new to reddit)
the problem is your thinking in absolutes. you're saying that the only mature, safe, tested, proven, audited code that can be used for creating applications, only come in frameworks. you're saying that your developers are going to stay entry level developers. you're saying that it's okay to not try to improve your stack because you can just fire up more instances/get more machines anyway. you're saying that it's okay to keep paying a senior engineer who's mastered a framework a hefty pay because he can just tell you to put more money on problems to fix it. it's not about firing up the least instances, but knowing only when to do so.
Good advice thanks for the thorough response
cool, thanks for the help
Thanks for your help. I hoped I wasn't being stupid I even Googled MVC agnostic to no avail.
I'm not paying for that...
Thanks. The confusing part was that they originally asked for MVC code without any caveats regarding frameworks. So I wrote the code using an MVC framework when ordinarily I would have used vanilla PHP. Pain in the ass really. 
well apparently the recruiter copy pasted the term "MVC agnostic" into the email he sent me from the email he was sent by the company? Confusing indeed!
I think they wanted MVC just not Codeignitor MVC. Asking them would be my first instinct but it's via an agent so that slows the whole process (generally he's taken 2 days minimum to respond) and I want to get coding quickly
No, sorry, I don't appear to be making my points clear. If all else is equal, then you would choose an established framework over a bespoke one. However, all isn't equal. Frameworks have an overhead cost, bespoke has a somewhat harder to measure cost in terms of technical debt (to keep things simple). My point is simply that the overhead of a framework is rather trivial when contrasted with the costs of bespoke. To be brutally clear: you don't have any data to show that raw PHP is, in any meaningful way, faster than a modern framework. And you are ignoring all of the benefits that come with using a well known and tested code base. &gt;you're saying that the only mature, safe, tested, proven, audited code that can be used for creating applications, only come in frameworks No. I'm saying that mature tested code is better than something less mature and less tested. &gt;you're saying that your developers are going to stay entry level developers No. I'm saying that it is more difficult to get a new developer up and running on a custom framework than a well known one. &gt;you're saying that it's okay to not try to improve your stack because you can just fire up more instances/get more machines anyway Hell no. I'm saying the cost to fix a quality framework's [negligible] performance issues is trivial compared to the cost of developing a faster and more secure framework to replace it. &gt;you're saying that it's okay to keep paying a senior engineer who's mastered a framework a hefty pay because he can just tell you to put more money on problems to fix it Not sure what you mean. One of the benefits of an established framework is more engineers that know how to work it. It seems this point would apply whatever you use - senior engineer tells you where to put resource. &gt;it's not about firing up the least instances, but knowing only when to do so That's nonsensical. You're drawing an arbitrary line where `performance &gt; ease of use` but also `php &gt; c`
I've just migrated one large application from Apache to another web server - it has no support for Apache rules and does not read .htaccess files. Fortunately, developers behind the project had all of the routing logic in one php file instead of using Apache's config or .htaccess (they were "duplicating the web server functionality"), so migration was super easy - I just had to point all requests to the said file. It only took a minute. Had they taken a different approach and used .htaccess, the migration would have been very painful - probably days of re-writing the rules and testing. Sure, one could argue that developers don't switch web servers very often, but this is a real world case where "duplicating web server functionality" was actually very useful. I do agree that frameworks add a lot of overhead and if you're working on a small project or if shaving off a few (or maybe a few dozen) of milliseconds from script execution time is very important to your application, obviously a heavy framework is not the best choice. Frameworks usually have very good reasons for a little bit of overhead (okey, sometimes a lot of overhead), but it does not mean that the same logic applies to your project or your goals. Every case is unique, some projects and teams will benefit greatly from using a framework, some won't. The better title would be "Why all frameworks suck in some cases".
 &gt; It almost feels like a dead project ZF2 is far from dead - the current development cycle is just being halted by Apigility, which is currently keeping the Zend team away from merging feature PRs and focusing only on security issues as they come. That's a transient situation that we as core contributors are also complaining about, but we can't do much about it, and it is also an understandable position. &gt; I was surprised that I could barely find any material I personally find that material exists and in quite abundant amount - there's materials for almost any question that comes up on the IRC channels, and so far I didn't find anything too obscure to explain or that doesn't already have an answer somewhere on SO. The number of tutorials doesn't by far beat the quality of tutorials. Getting things done with ZF2 is much less "standard" because the framework forces less conventions upon you, therefore making it quite hard to have one single way of solving problems. There isn't a "build your rest application with ZF2" because some people use hydrators, others use JMS Serializer, others use different approaches, others do routing based on DB associations, others prefer to handle that stuff in controllers. You should know the core concepts and most of the internal workings of the *Zend\ServiceManager* and *Zend\EventManager*, and then maybe read through how its "MVC-ish" dispatch flow works. That is enough for building anything you want in any custom way that fits your needs: that is one of the major points of strength and also the reason why projects involving ZF2 are not following one single rigid approach (except, hopefully, good design). As mecromace says, this particular framework gives you some degrees of flexibility which are meant for engineers with complex use cases and who want to keep away from "magic" in order to retain more control over the code base. That leads to good products and many different approaches. Picking some random quotes from around the thread: &gt; imfineny: If docs isn't important, than the engineers developing it are only targeting themselves. No, we simply are busy as hell, running at conferences and working a lot. There are some people working on writing documentation only, but that is also true for them. If you compare the amount of code in ZendFramework 2 (or 1, whatever you prefer) with any other framework (maybe except ZetaComponents) you will see that the amount of tests and features is incredibly high. We are talking about 50 components that are not necessarily small, and nobody really knows all of them together - that is why you cannot get good documentation for each of those without having an expert for each of those available at every time. Add modules to it, which are simply community contributed packages (bundles, for symfonians), and you got even more custom code to document. &gt; adrianmiu: There's plenty of "magic" in ZF2 as well. That is true only if you use the *Zend\Di* component, which has been dismissed in early beta versions as "too complex to use". Configs and database are explicitly glued together by dedicated factories, and you have to enable them - no magic there. &gt; krazymelvin: But then you look deeper in to the code and you find nice gems. Pair it up with Doctrine, some SF2 components, and baby you got a stew going. And yes, that is exactly the "custom" approach I'm talking about. It involves a lot of knowledge, and is not easy to deal with, but that's exactly where the framework shines: you can throw in your own personal approach and be happy with it! &gt; krazymelvin: Contributors are going crazy with backwards incompatible changes for ZF3. It's all a mess! Then stop us if you think it is going to be too much of a problem! Really, just drop by and say "I don't want this because XYZ" - we listen! &gt; SanderMarechal: Also, many parts of ZF2 just feel like namespaced ports of ZF1 Yes, that's how most components actually are, because they were just fine in ZF1 as well - we just dragged them with us when 2.x was going to be the next generation. Why should everything that is good be dismissed and rewritten? Yes, some areas need betterment, but that doesn't mean that anything that isn't perfect must be dumped. to sum up: * ZF2 is by far dead :-) * The core team is stuck with another large project for some other time * yes, the official documentation is lacking in many spots because of the gargantous size of the framework - we accept contributions though, even if you are not an "expert" * the framework reduces the amount of magic and gives the engineer more power while developing complex solutions, which are usually "custom" and therefore don't follow a standard path, and are not coupled to ZF2 itself * it is not a framework for everyone - it doesn't do things automatically, it is not convention based, it requires you to know *Zend\EventManager* and *Zend\ServiceManager* well before you even start being productive with it. It's not an "install and go" - where the hell are you going anyway? 
Thanks for the link! I thought is was one of the better reviews, sadly enough data of the amount of responses and survey questions were left out making it less clear. I found the writers own opinion most interessting, him being known to most of the frameworks. 
He dude, thanks for the explaination :). Now I am still wondering what it means to add libaries as PHP extentions making it native to PHP but I'll research it/need to play around more with PHP before needing a answer on it. (I need to see to look at a running engine for a while before asking how a car works so to say)... But thanks for the effort, I can make another baby step now :).
haha, yeah I saw that documentation. Maybe I just a bit easily scared off by the layout and functional naming of the chapters (I come from the designfield and am quite a sucker for fancy looks). Anyway that explains Yaf vs Phalcon :). Thx! 
because reddit. :)
Carkeys
The author is extremely dense. Hopefully he'll grace us with his presence here once again.
packages shouldnt have assets without beeing able to publish them, getting access to the scripts should not be possible.
It's pretty simple to be honest. Say you want to manipulate images, well the best way to do that is with [Imagick](http://www.php.net/manual/en/book.imagick.php). If you go to the Installation/Configuration section of those docs you will see it says "This » PECL extension is not bundled with PHP.". That means that Imagick is an "extra", it's not part of the core. If you want to use it you need to enable an extension. Phalcon is exactly the same. Instead of getting a bunch of files and including the extra liberies there, you just add an extension and voila! PHP knows about Phalcon.
He dude, thanks for the response! But does this mean the Zend VM is actually part of the PHP package you download from php.com? or is that part of your WAMP server? (if your working locally) 
Honestly frameworks are just a library coupled with a file structure. If you've written native code for seven years, you're probably good at debugging, tracing, name-spacing, all of that. 90%+ of the features of something like Symphony has extremely marginal use in most projects. People mainly use frameworks for: - routing (you probably already understand MVC, so you just have to pick-upon how to structure your controllers/views/etc) - database access (it's extremely easy to run native SQL queries, but you'll have to learn the ORM framework-specific stuff) - resources (register them so they're available through your app from a central utiliy class, nothing special) - crypto (mainly wrapper function to avoid the stress of implementing yourself) - autoloading (this should be a given already) There's really nothing special. And there are millions of questions/answer around. Follow what other people have done, and once it's working, go look at the internals to make sure you don't overlook anything (and you'll find neat stuff there too) If you want a change, on the other hand, start a project in Golang. There are few people who are good at it, and the market is very, very promising.
Well Manuel Lemos (the Author) is extremly well known for his... own interpretations of what people say (trying to put it diplomatic)..
&gt; the only reason you wouldn't want fast and inexpensive hash functions is for stuff you don't want someone deriving the original content that was hashed - passwords Exactly. Which makes them useless from an internet security perspective. Apparently internet security doesn't have to be hard - or secure. 
Drupal isnt a framework neither is TYPO3, CakePHP is replaced long ago. I would call laravel an old boy too (3 years). &gt; frameworks with C **nope**, it isnt a trend and will never be a php trend. 
You dont, you validate input before inserting to models.
Typo3 FLOW IS a framework. It's the Framework used to build Typo3.
With unit testing, a la PHPUnit. This is not the same as BDD testing with something like Behat.
didnt read `Flow`, my bad.
Not really. It only implies that any language (I'd even go as far as saying "any one thing") that gains enough traction will have people going "Oh nay, thou art a heathen for using/liking/abiding to X. X is literally Hitler!" It's a human thing. Has very little to do with X.
I skipped the frameworks and went straight to client-side MVC (Angular). I need an ORM but I don't feel like I'm missing anything else. 
For small scripts and snippets http://3v4l.org/ works well, too
Angular is MVVM , also I think you dont know what a php framework does nor how to use a client side framework. Routing should be done via server side because `//example.com#/path/` are ugly, bad ux and even worse for SEO. The whole logic of your application should be done server side, your client only should get the information from the server.
Ya, Zend VM (core PHP refers to it as the Zend Engine) _is_ the PHP you download from php.net. All the core functionality is built using the Zend Engine etc. This means it's also part of your WAMP server. You can see Zend in the PHP src here: https://github.com/php/php-src/tree/master/Zend
Learn Magento - the demand for Magento devs is incredible; perm or contract. I've been trying to find one for months now with no joy. Salaries are big and day rates highly lucrative. It's a monster to learn but you'll be set with it for the next good few years.
SEO is an interesting point. Routing would be nice but I can live without it. I don't know much about the PHP frameworks but maybe one will come in handy if I run into something I want but can't do with Angular. Most of my code is JS, which I find easier to work with than PHP. 
Waterboarding as a source of light entertainment.
Homebrew PHP and install pretty much any version all the way back to 5.3 (including specific patch releases)
&gt; Exactly. Which makes them useless from an internet security perspective Check out the readme. For example, fast and secure keyed hash function can be used as a MAC.
This. None of this makes any sense. These comments sound like they're made by someone who doesn't understand programming. Not to mention the great irony of the PHP creator saying that anything in PHP is "needlessly running code" or being "overcomplicated." Something is fishy. I think the author of the article took out the depth of Rasmus' arguments to make some more knee-jerk statements about his personal preferences with PHP.
Rasmus has always held the position that PHP should just be considered a templating/utility language, and that any uses outside of that are pushing the language to be something it's not. For a very long time, I was inclined to agree with him. But some of the more recent developments within the language and the developer community definitely made me change my mind. If anything, PHP is getting faster and cleaner, despite the occasional clusterfuck that is the core dev process (not the code, but the politics).
The community often makes it sound like it was an uphill battle from the very beginning - their ideas vs rasmus' personal preferences, slowing down the development process all along the way.
Get out of your comfort zone. Always find a way to challenge yourself. Do something you don't know how to do every day.
Micro frameworks have definitely become a thing nowadays. Not for every task though. Phalcon hasn't every been a trend. It was quite hyped, but it seems Facebook's HHVM engine (which would make every framework as fast as Phalcon basically) has been receiving more hype nowadays, which may one day actually replace the Zend engine in PHP's core. But don't worry about that now. By the way, ircmaxell has made a good article mainly against PECL frameworks such as Phalcon. It's worth a read: http://blog.ircmaxell.com/2012/08/thoughts-on-pecl-frameworks.html Composer is definitely a trend, and a good one, too. No more needing to think where to put includable third party libraries in your project; just let Composer take care of it.
Either way, you're going to have to address server-side eventually. You'll probably turn to node.js or something, in which case you're on the wrong subreddit. PHP is a server-side tool not to be confused with client-side JS. Yes you can do everything in JS that you can do in PHP. But, do you want all your code client side? No. Period.
the output buffering functions let you return the output instead of echoing it. You could then process it further if you needed, or save the snippet to a cache, or echo it.
&gt;However the developer I work with creates very buggy code. He also creates inefficient queries that slow down the whole system You're trying to hire a developer by bitching about your current developer? Seriously?
actually if I boot my mac in to OSX the filesystem takes longer for simple grunt tasks as if I would do it on ext4 or nfs, if you really want to have speed for grunt/gulp tasks, use a ramdisk. also linux uses ext3/4 not nfs.
Nyan cat is still a thing?
Core: - Fixed bug #66509 (copy() arginfo has changed starting from 5.4). GD: - Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop()). OPCache: - Fixed bug #66474 (Optimizer bug in constant string to boolean conversion). - Fixed bug #66461 (PHP crashes if opcache.interned_strings_buffer=0). - Fixed bug #66298 (ext/opcache/Optimizer/zend_optimizer.c has dos-style ^M as lineend). PDO_pgsql: - Fixed bug #62479 (PDO-pgsql cannot connect if password contains spaces). Readline: - Fixed bug #66412 (readline_clear_history() with libedit causes segfault after #65714). Session: - Fixed bug #66469 (Session module is sending multiple set-cookie headers when session.use_strict_mode=1). - Fixed bug #66481 (Segfaults on session_name()). Standard: - Fixed bug #66395 (basename function doesn't remove drive letter). Sockets: - Fixed bug #66381 (__ss_family was changed on AIX 5.3). Zend Engine: - Fixed bug #66009 (Failed compilation of PHP extension with C++ std library using VS 2012). 
A couple of things come to mind. First, don't be lazy. Statements like this: &gt; [TDD] is so much hard work &gt; I didn't really feel like downloading phpUnit don't give your readers any reason to give you merit. This just makes me think you're a lazy programmer, and not in the good way. However, then we come to my second thought. You're too lazy to download and setup PHPUnit, which is established and well documented enough to be about as simple as it gets. Yet, you're not too lazy to take the time to write your own, far less incomplete solution? That just makes no sense. Speaking of your solution, I looked at your code examples. I'm going to skip over the test script itself, although there's quite a bit about it I don't like (in fact, had I written that script, I'd have written it via TDD, which I find humorously coincidental, though with or without TDD that script could very much be improved). Instead, I'd like to focus on your example usage. The first thing that stands out to me: you're passing in the code to be tested *as a string*! Seriously? Why? I would never use such a tool. Finally, let me end with this. You said &gt; [TDD] is so much hard work! You have to think about using development patterns which do things like: substituting the db connection for a dummy connection so you can inject what ever data you want. Let's clarify a few things. First, TDD has nothing to do with patterns or injection. You can produce TDD-written code without using patterns or injection. In fact, in a lot of cases, you will (more on this in a bit). TDD is simply writing a test *first*, then writing the code to make the test pass. This forces you to fully workout the task you're trying to accomplish before you just start slinging code, and has the added benefit of letting you improve your solution once you "get to green". What does "get to green" mean? Well, you write a test for, say, a wanted feature or an existing bug. The test will fail. Now you "get to green" ASAP, meaning you write whatever code you need to get the test to pass. Now you have working code supported by a test, but that code can most likely be improved. Guess what? No need to be shy about improving it! The test will tell you if you screw any thing up, and if you're using version control, you can just revert and start a new improvement if that happens. This is called the red-green-refactor cycle: write failing test (red), get it to pass however you can (green), then refactor the code, never letting the test fail. In fact, you could use your script to write code in TDD fashion, as long as you were writing the tests first and letting them guide your development and support your refactoring. No, I said before that I'd get back to the subject of producing TDD-code without patterns or injections. I've already explained why this is the case: the idea of getting to green ASAP means you can write (un)reasonably bad code to get there. Once you're at green, you have working code and can freely improve it. One last thing before I stop typing. Don't get me wrong. I'm glad that you're trying to think outside the box. We as developers need that. That's how things like TDD come about in the first place. All I'm saying is that this particular solution, in its current state, is something I would never use, and really doesn't gain you any benefits over the currently proven tried-and-true TDD using PHPUnit. Edit: typos
We were talking about Linux in a Virtual Machine. ;)
still uses ext3/4
Either I still don't get the problem, or this is a completely over-engineered solution to a simple problem.
Awesome. Go get 'em tiger!
I'll be waiting for my ondrej repo to update with it. Currently running 5.5.8-3+sury.org~precise+2 clean as a whistle :)
This is the 3rd package in The League of Extraordinary Packages to get a mini-site. We're working on rolling them out over the whole network of packages. :)
That's implying good is a meaningful term on its own.
Dude chill! He never said he was using Node, and in either case nothing is on the wrong subreddit as long as we are discussing PHP. &gt; No. Period That's a good way to think! Never mind the client need, never mind the context, never mind the use case, you should always use PHP!
These are not designed for storing passwords. PHP already provides functions for password hashing: http://fr2.php.net/manual/en/book.password.php And if you have to stick with an old PHP version, this library is really good: http://www.openwall.com/phpass/ The next version of libsodium with also ship with escrypt for this purpose. 
I appreciate that Rasmus is not afraid to share his (sometimes controversial, usually insightful) opinions, but often when he speaks, he comes off as dismissive of any other viewpoints. I saw him speak last year, and someone asked the same thing, and his answer was basically the same, though he seemed to imply that frameworks were for the lazy or inexperienced instead of, you know, people who were willing to exchange some minor performance benefits for speed of development and ease of maintenance.
Maybe this link helps: http://webmozarts.com/2013/06/19/the-power-of-uniform-resource-location-in-php/ In general, the problem is easy to explain: A file (config, translation, image, CSS etc.) is located somewhere in your project, but how do you find its absolute path? The problem becomes harder when you introduce third-party dependencies through Composer. How can you reference a translation file en.xlf that is located in some Composer package? What if the package changes its file structure? Many libraries introduce path aliases for this reason. Yii, for example, provides a Yii::setAlias('@alias', '/real/path') method. Symfony2 provides a path syntax for bundles - special Symfony plugins - ("@BundleName/Resources/css/style.css"), CakePHP uses yet another syntax for templates in CakePHP plugins ("Contacts.contact") etc. How can you refer to files in packages that don't follow the conventions of the framework you are using? You can't. Puli solves this problem. With Puli, you map physical paths (such as "/path/to/vendor/acme/blog/resources") to virtual paths (such as "/acme/blog"). The Composer integration even makes sure that the top-level directories of the virtual path match the package name. So you know that: * "/acme/blog/css/style.css" is located in the "acme/blog" package * "/sensio/distribution-bundle/config/config.yml is located in the "sensio/distribution-bundle" package etc. Locating the real path of a file is much less painful this way.
Just download a framework and start working within it. I knew NOTHING about codeIgniter when I started in it and was able to get quite a lot done. More recently I developed an app in Laravel and was able to get things done quite well coding right out of the online manual. You'll likely want to refactor a lot of things later in development as you uncover new methods, but that's true about most development I'd think.
All this told me is that the author doesn't understand what a dependency injection container is, what a service locator is, nor what the difference between the two are. 
Same than /u/Nicoon, the author doesn't get what a DI container is about. And using Pimple to prove his point that containers are messy is seriously wrong...
His idea that DI containers are somehow against factories is, to put it mildly, odd. 
It's not really a container, it;s rather a service locator+builder. Factories can effectively replace all of those things
Repeating the same mantra doesn't make it true. The fact that you keep insisting on these things really shows your ignorance on the subject matter. 
Sorry for the late reply but I've been looking into Fortrabbit and was wondering if you could provide input on bandwidth. My app is in laravel so fortrabbit is quite attractive but they have limited bandwidth/storage. Is it recommended if I will be having a lot of user images to utilize s3/cloudfront for my user uploads? or store images on fortrabbit and push to cloudfront for cdn purposes but don't store in s3.
&gt;I've just migrated one large application from Apache to another web server - it has no support for Apache rules and does not read .htaccess files. Fortunately, developers behind the project had all of the routing logic in one php file instead of using Apache's config or .htaccess (they were "duplicating the web server functionality"), so migration was super easy - I just had to point all requests to the said file. It only took a minute. &gt; Instead of depending on web-server specific solutions or duplicating functionality, it would be nice to disable the web severs functionality, and use a server-agnostic solution. Whether that code runs in C or PHP doesn't matter, but it'd be a better solution than what we have today. &gt; I do agree that frameworks add a lot of overhead and if you're working on a small project or if shaving off a few (or maybe a few dozen) of milliseconds from script execution time is very important to your application, Maybe *if* it were just a small percentage-- say 10% overhead, or even 100% overhead would be better than what we're looking at now. What we [have](http://www.techempower.com/benchmarks/#section=data-r8&amp;hw=i7&amp;test=json&amp;l=sg), is: * **PHP**: 40,000 single-query page requests per second. * **HHVM**: 29,000 rps (HHVM optimizations come into play in more sophisticated applications). * **Phalcon**: 20,000 rps * **Slim/Silex**: ~1,200 rps * **Laravel "raw"**: ~500 rps * **Symfony2**: 377 rps Don't get me wrong. Performance isn't everything. There's all sorts of other concerns: architecture, maintainability, development time, costs, databases, and more. Developers are expensive. Lots of things may matter more important than performance-- none of that makes this disappear. PHP is slower than javascript-- I never thought I'd utter those words. This problem is there: a 100% overhead per-request for the "fast" frameworks, 3300% for the micro frameworks, and even more for others. Some say PHP isn't the language for performance. Neither is Ruby, Python, or Javascript, really. These aren't theoretical limits you'll never reach-- these are real limits servers reach all of the time (especially if you put more than on website on a server). That doesn't mean it *has* to be slow. Whether performance matters to you or not: can we stop bashing people who care about performance? "Pointless/Useless optimization" is something I see far too often-- if there's a PR, there's probably a use-case, even if someone can't tell you. If the code sucks for another reason, sure, but can we stop telling people their efforts to make PHP frameworks faster are futile?
"an injector (sometimes referred to as a provider or container) that creates instances of classes that implement a given dependency interface on request." - Wiki So?
that's for sure they just dont know how to use his full potential plus it's easy and fun :D
And for files edited on the Mac? NFS.
Removing due to registration requirement.
No, because he invented it to solve a different plethora of problems at a different moment. He's basically saying that PHP development is not in pair to its use.
Okay, you quoted a segment of the dependency injection article on Wikipedia. So what? It doesn't in any way support your argument, nor change the fact that you don't understand the things you write about. You don't understand the difference between a container and a service locator (the latter being a usage pattern), and you don't understand that a container is not against factories - in fact, it's integral to its design. 
My point is that PHP is designed to run each request in an isolated environment. Each request is serviced without knowledge of other requests, application state, configuration, etc. Framework or not, you have to do some sort of bootstrapping for every request. 
i never said that container was against factories. in fact quoting myself: if you are still going to wrte fatory classes there is no point to use a special library for a DIcontainer, you can just use a specialized factory. I wasnt arguing that containers suck as a patter, i was ranting you don't need a complex lib for them.
Great resource, thanks for the link. 
He did say this: &gt;To get this functionality out of Pimple you are still going to write factory classes, so what’s the point? implying that Pimple should have solved the need to even have factories, which would prove to be a grave misunderstanding of what dependency injection containers are even about. 
I don't think you read my post. Or you read my post with a period after every word, like I am God decreeing my will down to you poor peasants. &gt; He never said he was using Node. He did say, however, that he is using javascript and tends to favor javascript over php solutions. &gt; Never mind the client need, never mind the context, never mind the use case Yes. You do not want certain components on the client-side. Do not trust your client. Any client, anywhere. &gt; you should always use PHP! I'm not sure where you got that. JS can be server side too. I never suggested it couldn't.
And how is pimple in any way a "complex library"? It isn't the most bare-boned container you can find, but it's not far from it. 
&gt; $entity-&gt;isValid(); You don't ask yourself if you are pretty. You ask a someone else. I.E: &gt; $entityValidator-&gt;isValid($entity); On the same note, in school you don't correct your tests yourself, a teacher does that. The same thing happens here: a validator will validate an entity. So its not the entity job to validate itself.
You factory shouldnt need a DB access really. 
In other words [you are a manager](http://25.media.tumblr.com/ea57a5ce903fe5da78a5727a64c539ce/tumblr_mlzgjmO4VI1rju15go1_500.jpg), not a leader. Don't want to take this personally, but I run from managers faster than a sprinter. If you want others to follow, you should lead them by example, not push them from behind with a whip.
Just because you have the code there in your codebase, it doesn't mean it would be loaded if it's not used. There are many ways around that, and many frameworks use them.
The PHPWomen fundraiser/project is lead by a dude?
complex not meaning its hard to use, complex meaning it has alternative usage that you have to work around. Imho using some magical array around my classes is pretty unOOP
doesn't this mostly duplicate functionalities that are already available with mcrypt and hash() ?
I really don't get what you mean. I'm not forcing people to write docs =) the docs are written, im just letting people add to them.
There are men and women in PHPWomen. 
Mainly because it doesn't teach any kind of abstraction, interoperability, SOLID principles, and doesn't allow for modification or swapping of internal components. Everyone just throws up a Laravel app and makes use of Facades everywhere because it's "easy". They aren't learning anything, they aren't understanding patterns or principles, there's no room for growth. IMO, most of them wouldn't be able to build their own application outside of Laravel because they don't understand proper architecture and programming concepts. That's why I believe it breeds incompetence, they get to accustomed to Laravel's ecosphere. This can apply to any framework really. However, that doesn't apply to everyone, just the majority.
PHPConfusion
It's more comparable to the OpenSSL extension in some ways (public key crypto, mcrypt only does symmetrical), only with an interface that doesn't make me want to murder kittens. There is some duplicate functionality, just with a [different underlying library](https://github.com/jedisct1/libsodium) with only one algorithm option. It's worth noting that the extension is built by the same guy that built (forked) the library.
Because he said it, doesn't mean it a fact!
Fine if it's some tiny site that only you will ever work on. Shit if the site grows and other developers have to work with your code, unless of course you wrote the site to the same architectural standards that Symfony, Laravel, Zend are built to. And your code is as well documented as those frameworks. And the devs have encountered your work before and so know their way around. And you know just as much about security as all the core contributors to said frameworks. Then yeah, don't use a framework.
The [library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria). 
* http://scikit-learn.org/stable/ * http://en.wikipedia.org/wiki/Actor_model
Note the GD fix. While not mentioned in the announcement (as one would expect), this fixed a security vulnerability.
And then your services are coupled to all the factories, whereas all they care about are the interfaces of their dependencies. Nobody care about how a dependency is created, it just cares that it implements an interface. That's what dependency injection is about, and injecting factories everywhere instead of the dependencies themselves is a mistake.
You're wildly misconstruing what a DI container is supposed to be used for. It's not to replace factory classes, but to act as a mechanism to declare your dependencies at runtime. Nothing more, nothing less, although you can use it in other ways, albeit it will likely result in more convoluted code. For example, let's say we have a class we want to test that talks to the database. class Model { public function save(){ $db = new Database('username', 'password'); $db-&gt;insert_into_database($this); } } But when we test the class, we don't want to actually write any data to the Database. If the Database class is hardcoded to our Model class, we would have to change the class itself when we want to change the dependency to a fake Database class. A DI container can help this by allowing us to alter the dependency at runtime without altering the class, e.g. class Model { public function save(){ $db = DI::get('database'); $db-&gt;insert_into_database($this); } } if you use a DI singleton container, or you can pass the DI container around: class Model { public function save(DI $di){ $db = $di-&gt;get('database'); $db-&gt;insert_into_database($this); } } And then configure the DI at runtime to resolve the dependency for you: $di = new DI; $di-&gt;set('database', function(){ return new Database('username', 'password'); }); Which would be used for your production Model, or define it like this: $di = new DI; $di-&gt;set('database', function(){ return new MockDatabase(); }); When you are running your tests on the Model class.
Missing the point entirely. Is a framework less efficient than some "pure" solution? Yes. Is it less efficient to load 30 different classes when I could just put all PHP into a single line in one file relevant to that request? Yes. The point is that you tradeoff performance for code maintainability, readability, and ease of use. That's what a framework is: a trade off between ease of use and "weight". A framework doesn't suck just because it's heavier than bare minimum procedural PHP... Also, using the webserver as your router rather than relying on a PHP front control is a fair point, but also silly. A front controller is more than just a router. Lots of initial bootstrapping can be done in ONE LOCATION when use a front controller. Unless you like typing "require_once db.php" or "session_start()" in every single file, a front controller will make your life easier. Also, it makes your environment more flexible. I worked on a big project that switched from Apache to Nginx. You know how easy it was? 5 minutes. Why? Because I didn't have to rewrite a bunch of Apache rules into Ngnix to make the switch, since it was all handled through PHP.
I like C#'s approach to asynchronous programming here: var result = await SomeAsyncMethod(); //do stuff with result here No change to the way you structure your code.
is that like ($needle, $haystack) and ($haystack, $needle) ?
Hopefully you fixed it to include a stack trace now :)
This is not proper use of Pimple. Consider this code: $container['spell'] = $container-&gt;protect( function($spell_type) { //Determine class name based on spell type $class = 'Fairy\Spell\'.$spell_type; return new $class(); }); This is wrong. This is essentially trying to create an abstract factory inside of a closure. Why would you do this, and then use it as an example of why pimple is not a DiC? The point of an abstract factory is exactly for situations like these, when you don't know which types of objects you actually need to return. What you SHOULD have is a SpellFactory, which may or may not even need to be registered in Pimple: $container['SomeClass'] = function() { return new SomeClass(new SpellFactory); } // This is a bit unnecessary, unless you need a singleton instance of SpellFactory for whatever reason $container['SpellFactory'] = function() { return new SpellFactory; } You then inject the SpellFactory into whichever object requires it, and you let that object (which presumably has knowledge of which spell it needs) get the spell from the factory. The dependency is on the factory itself, not on a specific spell. Of course, if you know that say, Fairy A will require Spell C, then you would do something like this: $container['FairyA'] = function() { return new FairyA(new SpellC); } If SpellC is supposed to be a singleton or shared object, then register it in the container first: $container['SpellC'] = function() { return new SpellC; } $container['FairyA'] = function($c) { return new FairyA($c['SpellC']); } But you should NOT be using Pimple as an abstract factory. That's silly. Either way, this article misses the point. Pimple allows you to wire together an object and all of its recursive dependencies ONCE, and then use that object multiple places by simple calling that object. Unless you want to do: $class = new Class( new OtherClass( new SubClassOfOtherClass), new MyClass( new ThisClass( new ThatClass)))); every time you want to use Class.... (have fun, if that's your thing). EDIT: and lastly, there are several problems with that generic factory object: 1. It has a few responsibilities violating SRP -- Responsible for building a forest -- Responsible for building a tree -- Responsible for using a fairy factory to build a fairy 2. This is exactly what a Pimple config is supposed to do anyway, except a Pimple config uses lazy loading which keeps the dependency isolated to only what you need. If this God Class Factory is injected into a class, that class then inherits all of the dependendencies defined in that God Class whether it needs them or not. 
How does this tie factories to dependencies? 
Why not just call it a 100 rating and you get to pick from 98, 99, and 100. The arrangement these people want is a three level rating of 1-3 but want to use the psychological effect of boosting the values. People will not take the ratings seriously if you can't give a 1 or 2 rating out of 5. It's bullshit. They want to avoid getting what look like bad ratings on the surface. In the end, the data collected will be skewed and useless.
[repo link](https://github.com/bernardphp/bernard)
As long as you leave out possible values in the range, people will distrust the system. Either allow 1-5 values or make it a 1 out of 3 rating. Anything less will look shady.
So what, in your opinion, would be a good way to make a rating system out of 3 (without saying "Congratulations, you got a 3/3!") to make it worthy of using? Because to me, something out of 3 seems insignificant, where as something out of 5 seems more true to help (like a 5 star rating). 
Nice. How do you handle waiting for the resolution of multiple async methods. Aka, how do you take advantage of async, but then revert to sync for showing the result data only when all of the async data is loaded?
a) That was just an example of a service you might want in your factory, perhaps its not a good example. b) It seems like another incorrect generalization/presumption for you to make that no implementation of the Factory pattern anybody else ever creates should have legitimate need for DB access
Horrible resource IMO. Those benchmarks are pretty pointless. Sure its awesome when PHP hits 40k, but returning hello world is a lot different than bootstrapping a framework. Once you get done building an actual application, I'm sure that the benchmark would be quite a bit different.
We were toying with the idea of skipping numbers all together too. The challenge there would be graphically displaying aggregated results (results for the same person, given by two separate people rating) for text-based responses. Let me give you an example of possible questions that might actually be used with this system: "How is John's functional knowledge of the concepts necessary for success in this math class?" (this is a rating tool for real life scenarios, similar to a report card). And the goal of having very subjective options for rating is just to give John an idea of where he stands so he can improve for the real test. Our rating is just to give him a good general gauge of where he stands currently. 
Awesome, this could be really helpful with the web sockets portion of my work project!
&gt;Maybe if it were just a small percentage-- say 10% overhead, or even 100% overhead would be better than what we're looking at now. These benchmarks are nearly pointless IMO. If they were all implementing a sufficiently complex use case that mirrors a real world situation and I might pay more attention to them. For example, start with a basic CMS with content types, custom fields, and routing for each different type with a different template. Oh, no we don't want to do that because more of the time is going to be spent in the database / routing etc. Even with shit like Drupal, I saw a great deal of the pageload as database queries. The actual time spent executing the php was tiny in comparison. &gt; it would be nice to disable the web severs functionality, and use a server-agnostic solution. Server agnostic solutions tend to be slower, so people who care about performance probably wouldn't use them (going by some of what is said here). If you want to bench how much routing php can do vs how much Nginx can do, I'm sure we both know who comes out ahead in terms of speed and memory used. Of course the reason people use php for routing is because they have a front controller with all the helpful shit that comes with that pattern. All of that slows things down of course. &gt; these are real limits servers reach all of the time No doubt that .0001% of all websites reach these limits, but the majority don't. &gt;can we stop bashing people who care about performance? I've never seen anyone say they *don't* care about performance, but its all about the context. 
That's what it currently is, the problem there is aggregating results. How do you aggregate those results to give a cumulative rating without assigning them values?
Edited my comment above. So, the results DO have a rating. Weather it's assigned in the input itself, or something you assign in a config - each choice has a value. Needs Improvement can be 1, Good can be 2, Excellent can be 3. It doesn't really matter. What matters is that the choices are proportional to each other, so you can take the overall accumulated amount, and divide it by the number of votes. Then you round it to the nearest third (if 3 options), or fourth (if 4 options). Edit: Why can't you assign them values, I don't really understand. No user would see those numerical values. 
I read the bit you're talking about, and thought to myself "Wait, are you saying I should do my routing in an .htaccess file?" And then I closed the tab, b/c fuck that nonsense.
To be fair, directly after making that (partially tongue-in-cheek) comment, Rasmus does go on to say that "all frameworks aren't bad, *general* frameworks are bad; make it a tool for a job not a toolbox that"
We can assign them values, but what I'm getting at is I'm looking for a new way of doing this. Something out of 3 where the result isn't x/3, or your average result is "good". Looking for a bit of out of the box thinking help to solve this one. That's why I came here, programmers deal with out of the box thinkers often and come up with technical solutions for their ridiculous requests.
A factory method should accept a data parameter. It can then be called by some class utilizing db access. That class will take data from database and pass it to the factory. This way factory is not dependant on the database.
I think that it should be the intention of the application to deal with new requests, as new requests. You can do that in a smart way of course with various means of caching things (Memcache or Redis for database caching for example, or APC for opcode caching), but I wouldn't put that against frameworks, I'd put that against the nature of the web as a whole. The frameworks that are around these days have had a lot of time put into them, and they have a lot of brilliant developers working on them. In my opinion, I'd say it's the nature of the web and possibly limitations of the language, these issues are already being addressed with the likes of HTTP2 and newer versions of PHP itself.
But what is the result you want, if not the average?
We do want to give them the average, but we want to give them an appealing, helpful, and meaningful result. Your average was "good" is helpful, I suppose, it's meaningful, but not appealing. Same with a 2/3 rating. I'm trying to get some ideas for new ways to share the same results. I don't know if such a thing exists, but I'm still poking around trying to find it, or think of it on my own while using Reddit as a sounding board. 
Your only choice is granularity. You can specify 100 different responses based on different average values, if you'd like. You can have a whole config file full of: average_responses: 10%: "Very poor" 20%: "Not as poor" 30%: "Kind of shitty" ... 100%:"AMAZING, A++" You just factor the average result by the amount of granularity available in your config (or whatever). That way you can dynamically add response answers if you want. Furthermore, if what you are looking for is unique granularity on MANY different questions with unique answers on unique questions, you'd store your available responses in a store(nosql would be good), that are available to be edited via a CMS. That way multiple questions can have different results that override the "defaults" that are also available if nothing is specified.
&gt; I have never once tried to sell a ZF-coder; I sell a software engineer complete with education and experience. Too right. I think I may have been ranting a bit in my initial post but I've always agreed with that and your other points are indeed sound. I personally made the switch to Laravel and I'm playing with Phalcon as small client development frameworks, and I still use ZF2 for other projects, but I still believe that documentation is essential if not to bring a broader validity and a greater spread to the use of the framework. And I do respect industry as well as community, its looking at the tools as what they are instead of seeing everything as a nail.
Is not an absolute reference, it lacks statistical analysis, but is a good start. I can make my mind about other frameworks to start the actual app as you said, and maybe I could run my own tests.
That's actually a really good idea! Thanks for the input!
&gt; yet? Seriously? This isn't changing.... also being a point release, it's bug fixes only.
No prob. Good luck.
&gt; Fixed bug #66469 (Session module is sending multiple set-cookie headers when session.use_strict_mode=1). Tested this one just now on my dev PHP 5.5.8 and indeed, it's sending the header twice when setting a PHP session for the first time. Good to see this fixed :) 
It would also be simplified because on a scale of 1-3, a user could not score lower than a 33%, so that would be the lowest response we'd need to account for.
If you don't use the `await` keyword to prefix the method call, then async methods return a `Task` object, which represents the work to be done. You can use this to inspect the status of the async job. var site1 = FetchWebsiteAsync("google.com"); var site2 = FetchWebsiteAsync("amazon.com"); await Task.WhenAll(site1, site2); // carry on.. `Task` has a static method `WhenAll()` which will return when all the passed in `tasks` have completed. Because `WhenAll()` itself is an async method, you can `await` it's return. 
But what good is a five star rating if no one ever gets rated 1 or 2 stars? It's a joke and people will see that. Either you have a 1-3 rating or a 1-5, anything else is just dishonest and shady.
No, because that scale would be incorrect. Don't think about the numbers so literally. Let's say, for instance, you want to use a 10 point scale for results. 10 point scale, with 3 possible user inputs, makes your new input range: 0, 5, 10. If you had 5 user inputs, and you wanted a 10 point granularity scale, you'd use: 0, 2.5, 5, 7.5, 10. What we are doing here, is building a relational scale dynamically. I'd essentially count the number of available responses, for each question, and then assign values based on that. Let's say for example, you are stuck with values already too late to change, as 1, 2, 3, for the selected options. When calculating the results, you factor in the scale amount to arrive at your new values for output of: 0, 5, 10 (or 0, 50, 100, if you want 100 points of granularity).
I don't know if this solution would apply well with the actual product, but... Maybe you could use a facial expression method. Three faces: :( :| :) You could then use color to discern between the high and low ends of the average. A green `:|` would be better than an orange `:|`. Just a thought before I run out of the door.
&gt; Servers beyond testing are manually managed as policy. This is a stupid policy and should be reviewed. Anyways, what I do is share `~/www` with all my VMs. I have my 'personal' that I use to work on my apps and my blog. This has, iirc, 5 vhosts in it. For each of my contracting clients I create a separate VM. They take up very little space (~600mb?) each, and with 16gb ram I can run several without seeing a decline in performance. Your other issues run up against the stupid policy I mentioned: There's no reason (at all) to manually manage servers. What's the point? Do you write PHP code in Notepad, or do you use an IDE? Do you really compile everything by hand, or do you use your distros package repo? Doing everything manually makes it very hard to get a 100% mirror server up and running quickly, and in most cases there'll be slight differences because humans are dumb and forget a step or fat finger a key. What happens if your server admins quit? Will a new admin coming in automatically be able to tell what software versions, or even what software, is installed on a box? Introducing automation into the process helps remove humans from the equation - if you have a properly vetted Puppet manifest you can go through 50 server admins and each one will be able to spin up and exact replica of current prod. You can spin up 50 AWS servers that are exact replicas of each other with a single command. So, my completely unprofessional opinion is that your current company's server workflow is broken and needs fixed. You basically have the equivalent of writing unit tests for code that you write, but none of the other guys on your team do, so it practically negates the whole effort. What I do for clients is, I create a local dev setup configured to exactly what they need. It includes dev tools like Xdebug and such. Then, I create a duplicate of this setup for testing and production servers that do not include the dev tools. This way I am certain that, other than those tools, each server is completely the same as the other and behaviors inside of each will mimic the rest. If you'd read this far, might I direct your attention to a tool I created for people interested in Vagrant and Puppet (and others)? https://puphpet.com - Let me know what you think :)
I kinda recall that Youtube went away from a ratings system, because people were mostly giving 1 or 5 stars, there was very little information being gleaned from the middle range. My advice: - Have thumbs up and thumbs down - keep stats of viewers who don't use the up/down, those would be your neutrals
"addrecordtodatabase" Because being able to read function names is for wimps.
Dear OP, did you write this tutorial? If so, I think you need to take some time and learn a little more about best practices before you write another one. A few points to consider * Use camel case * mysql_real_escape_string(htmlspecialchars($name)); does not make it safe to insert. * Returning a string to show whether the function was successful is a bad practice. Use true or false. 
I have done a rating system before that was widely used (about 2,000 daily voters). It used a scale of 1 - 10. I would estimate that 80% of the people who voted, gave it a '10', about 10% gave it a '1' and the rest were distributed somewhere between 2 - 9. tl;dr; most people who vote, rate it very positively. it's practically worthless.
You could deploy every project as part of one vagrant environment if you *wanted* to but that doesn't really make any sense, if you're going to do that why use Vagrant at all? Why not just have a development VM? The powerful part of Vagrant is that it allows you to detach your project from a real world environment and gives your project control over the environment that it is developed in. Think about a scenario where your office burns down, you lose everything and then as the fire crew start tackling the fire your phone rings, "Developer, there's a major bug in our application causing hundreds of thousands of dollars in lost revenue every hour, we need you to fix this **right now**". If your project environment is managed by Vagrant you could run to an Apple store, grab a new Macbook and once you've installed Vagrant and cloned your remote repository you're ready to run "vagrant up" and fix the bug and commit a fix, even though your project is complex and has dozens of environment requirements (it depends on packages x, y and z but *can't* run when common out of the box packages a, b and c are installed) you're still able to deploy and get to work in the time it takes for the vm to deploy on your machine. My workflow for a new Vagrant powered project is as follows: 1. I create a new directory for my project (say "FooBar") 2. I create a new *Vagrantfile* in the root of the project that defines my project environment requirements and runs a provisioning script 3. I create a provisioning script (install.sh) that installs a webserver, php, mysql, composer, then creates a new database 4. I commit my Vagrantfile and install script to my repository for the project 5. I run "vagrant up" The machine is booted up, the environment is configured and within a minute (time it takes to deploy) or so I'm ready to write code. If I have to add a new dependency to the environment: 1. I run "vagrant destroy" which terminates my VM 2. I open "install.sh" and include the commands required to install the dependency, eg: sudo apt-get install -y php5-xdebug 3. I run "vagrant up" and the machine is created as before, but it also installs xdebug this time 4. I commit my new install.sh to the repository (That example is sort of dramatised, normally I would just run the install against the deployed vm and add the command to the install script without redeploying, by terminating and then redeploying demonstrates that Vagrant environments are throwaway, they don't need persistence) If I'm working on a different project for the day: 1. I run "vagrant destroy" to terminate the VM 2. I work on my other project for the day 3. I return to the project and run "vagrant up" to create the virtual machine again (Against dramatised, you could just do "vagrant suspend" if you wanted it to pause to be resumed later, or "vagrant halt" to shut down but not be destroyed) If a new developer joins my project: 1. They clone the repository 2. They run "vagrant up" from the project root and wait a minute for the deployment to run 3. They open up their editor and start working... Vagrant doesn't have any impact on your production environment if you don't want it to, you could use your vagrant provisioning (whether you write your own bash script, use puppet, ansible, whatever) as a manifest for your systems administrators, they could look and see "okay so the environment needs php5-xdebug, php5-mysql..." and deploy it however they like. Personally I only use Vagrant for development. If you have $10 to spare, subscribe to Laracasts and watch the [introduction to Vagrant](https://laracasts.com/lessons/vagrant-simplified) -- the tutorial has nothing to do with Laravel, just happens to be on a (presently) Laravel tutorial site. Take a look at this [basic Vagrant install script](https://github.com/JeffreyWay/Vagrant-Setup), if you were using that you'd just include Vagrantfile and install.sh as part of your projects source, and then run "vagrant up" any time you wanted to deploy an environment to work on the project.
Again, you're making some wrong assumptions. Remember, it's all up to you on how granular you want to be. It's also up to you to provide the entries. It's also up to you to decide your rounding policy (you want to round up). So for example. In your config, 10% = "Needs Improvement". But you have no entry for 0%. Therefore, when you get your normalized results, you snap to the closest response. Remember, you are dealing with averages here. Also, the number's don't matter literally with a proper distribution system as explained previously. So say 100 people all respond with your theoretical "1" value (lowest you have). And let's pretend, you have a 10 point response system as I outlined previously. If all of those 100 people, ALL responded with 1 (your lowest value), you would snap to the lowest possible response in your config. I don't care what you put in the config value, you cay say "SKITTLES ARE AWESOME" if you want. But the bottom line is, your average is now the LOWEST it can possibly be in your system, assuming all 100 people voted 1. Another scenario to help you understand. Say, in a 100 user test group, 90 people voted 1, and 10 people voted 2. Now, your average is better than "1", it's more like "1.2". So, on a 10 point scale, where you have 3 user inputs: 1, 2, 3 (which scale to a 10 point system like: 0, 5, 10). 1.2 is 20% more than 1, right? Now, since the scoring system isn't binary, you do: (20 / 2) = 10%, in order to get your particular normalized results for this example. So, you'd have an entry for: 10%: "You suck, but you're not the worst. Work harder". You are thinking about numbers far too literally. Those values, numbers mean absolutely nothing. It's about mapping them to values that you want for output. Don't confuse these numbers to be used for anything other than logic.
Vagrantfiles can be set to run shell scripts, for example [in this example from Jeffrey Way](https://github.com/JeffreyWay/Vagrant-Setup) on line 14: config.vm.provision :shell, :path =&gt; "install.sh" That triggers [this file](https://github.com/JeffreyWay/Vagrant-Setup/blob/master/install.sh) which runs all of the commands required for install.
I understand what you're saying, but I'm asking if you think a scale of 1-3 (as far as how someone can be rated) where someone cannot get a 0 is shady. 1 would NOT be 0, 1 would be 33.3, by that system, someone could not get a 0 (by choice, this is how I'd want it to be). I'm thinking about numbers literally because I'm not looking at this from a programming standpoint, I'm looking at this from a scenario standpoint and what is beneficial or shady. 
It depends how you are presenting the numbers. If you are presenting the numbers as: "Our users rate this game a 33.3% out of 100%" - It's not only shady, you are completely lying. Because in a natural 5 point system, I expect even distribution of values. If you show me 3 options, and I pick the lowest one, it needs to scale properly. You can't just assume people wouldn't have voted lower. The entire design of what you are describing is trying to manipulate user input at your will. As I outlined, you would have to scale your numbers based real user input. It just depends how you are presenting the data. It's a whole different ball game, if you have a form that says: "Click here to give this game a 3/5 - it's Not bad!". "Click here to give this game a 4/5 - It's good!". "Click here to give this game a 5/5 - ITS PERFECT!". A rational person looks and says "How come I can't give it a 1/5? The game fucking blows. Is the website broken, or is this website a complete fraud?" You are literally just hiding 2 options from users. Let me ask you. Say you had the worst dining experience of your life. You were fed bad food on purpose by a vengeful staff at a restaurant you found on yelp. You log in to Yelp (it has a 5 star system), and you try to click 1 star, but it doesn't let you. Instead if pops up and says "Sorry! You can only give places 3 stars (Good!), or better! You can't leave feedback if it's going to be bad!". That's not real feedback, is it? All of a sudden, all feedback is irrelevant. 3 stars now means "sucks!"
&gt; At the creation of the cookie you could also store the user's user-agent in $_SESSION['useragent'] and at each request compare to see if $_SERVER['http_user_agent'] matches that. A user agent is very much not unique - considering that most browsers auto-update these days, the odds of my Google Chrome being the same as your Google Chrome in both version number, OS and thus user agent string are extremely close. Doing all communication over SSL should be your first line of defense.
The problem with his question, is that he doesn't want the relativity of the scale to change. That is, he doesn't want any sad faces. 
How do you find using Resque? I'm about to start using it for the first time in a project. Any gotchas or things that would help a first time user besides what is in the documentation?
Maybe I'm wrong, but I think he's suggesting adding the useragent in the session along with all the other user cookie data. And what he means is that, the validation will fail when loading the same session on a different computer (with a different user agent). Not exactly the most important security thing, but not really a bad idea either. No reason not to invalidate the cookie if coming in on a different useragent. Not a big deal though. 
Funny. I was having this same dilemma last month. Only it wasn't 7 years for me, it was 11. I was worse off than you and totally nervous about applying for jobs with my skill set being so old. But... I got the first and only job I applied for. What worked for me was this: packaging my strengths. I wasn't using the current programming tools, but I was solving problems with creative solutions. I just had to figure out how those problems and solutions were applicable to the new employer. I demonstrated to them that I would rise to any challenge. Showing humility and a genuine desire to learn and advance the agenda of the new company. My whole life I've worked with developers more talented than me. But during layoffs, my coworkers have been laid off while I kept my job. Being a good team member and collaborator goes a long way. Doing my homework on the company and what they do. You can find out which tech a company uses and brush up on it so you can talk somewhat intelligently. Some other people don't take the time to do this. Show them that you will. An employer is paying you for your focus on them. Your ability to innovate is the skill that lasts (and probably why you had a job for 7 years). Whatever tech you knew when you got your job will eventually be outdated, but your ability to solve problems will not. Tech can be learned. Ingenuity can't. Figure out how they'll be better off because you're working there instead of someone else and you've got it made. Good luck in your endeavors! I'm rooting for you!
&gt; And what he means is that, the validation will fail when loading the same session on a different computer (with a different user agent). Yeah that's how I understand it too. And that's the issue I have raised, the chances of attacker having (or even guessing) the user agent of their hijacked victim is really high. **Infact** - second to that. If the hacker has 'sniffed' out the session identifier using a 'man in the middle' style attack they will have the victims user agent anyway from the request payload they intercepted.
You can do it either way you want. I like to save lines. The most common case of assigning arguments in the constructor, is to set good DEFAULT VALUES. Generally you'd use it when you call an individual method a lot, but don't always want to pass it parameters, and have it be smart, or go to a default that you trust.
No worries. *What does it mean to have a PHP implimented as a extension instead of plain PHP?* PHP runs PHP code you have created. Some of the functions you call in PHP such as mysql_connect() or sqllite_open() aren't part of the base PHP language. The are written as extensions. When the extension is present you can call the function and it will work. Without the extension you will get an error when you try to call the function. There are a lot of extensions that are provided with PHP and many of them are loaded by default. You can enable or disable them (or add additional ones like phalcon etc) - Think of them like plugins. If you install the plugin you can use the functionality. *What does it mean to bring compatibility up to the standard version? (hhvm)* HHVM doesn't yet support all the extensions that PHP supports. They are working on improving that. Also there are some minor differences. From memory one of them was if you have written an interface your class must implement all methods in the interface where as PHP does not require that. (or maybe its the other way around) *a cache captures populair requests to/from the server right?* A cache can do that. But what I was talking about was a cache inside of PHP. When you run your PHP file it takes many steps before your script runs. What APC and zend cache do is cache some of those steps so they don't have to be done every time you run your PHP script. This makes your script run faster. 
No beanstalkd or gearman support? :|
&gt; The only other thing you have to worry about then would be some application or hacker on the user's machine retrieving the contents of cookies while the user is accessing the website. If you are talking about attack vectors in the browser - PHP session cookies can be set "HTTP only", JavaScript can no longer read/extract it.
I cannot make sense of the example in http://fractal.thephpleague.com/simple-example/ // Pass this array (collection) into a resource, which will also have a "Transformer" // This "Transformer" can be a callback or a new instance of a Transformer object $resource = new Fractal\Resource\Collection($books, function(BookModel $book) { return [ 'id' =&gt; (int) $book-&gt;id, 'title' =&gt; $book-&gt;title, 'year' =&gt; $book-&gt;yr, ]; }); Where does the BookModel come from. What role does it have in the transformation process? 
&gt; but still isn't secure as an attacker could capture a users user-agent at the same time as stealing the cookie. That's correct. Cookies are part of the standard HTTP header section and so is the User Agent. [Here](https://en.wikipedia.org/wiki/List_of_HTTP_headers) is a list of common request and response headers used in HTTP messaging. But that doesn't matter except to provide a client and HTTP server (and an attacker) a standardized template with which to parse important information about HTTP messages being passed back and forth between client and server. It is after all just a simple raw text message that's human readable unless encrypted.
I prefer to use SSL and regen the session id/expire them very fast on every page load to avoid cookies being harvested from the users browser if they are infected. http://ca2.php.net/manual/en/function.session-regenerate-id.php#87905
The goals seem at odds with each other. PHPWomen raise money towards its 2014 goals: * Continuously spread support for an inclusive community. (oh, cool!) * Funding women to attend conferences. (so, inclusive if you're a woman. gotcha.) I've never understood why we need to treat women like they're some kind of minority pity case. They can do the job just like any of the rest of us can. Equality isn't built on giving one gender special treatment.
linux uses ext3/4 not nfs. My mac has fat32 not the linux vm
"How to generate random string in PHP" ARRRRGG! You should **never** encrypt passwords, they should be hashed (these are completely different things). Plus neither one of suggested methods is suitable for cryptographic needs. Plus **never** write your own crypto unless you **know** what you are doing.
This is a really good lib. Thank you Phil!
Thanks for your candid reply. I was hoping the fact that I feeling lazy was because of how tired I was came across but it obviously didn't. Now you mentioned that I'm passing the code to evaluate as a string and were exclaiming why. Not sure if your aware but when using php's assert function, and failed assertions will show the code that failed in the warning ONLY if it was passed a string. I could easily have just evaluated it on the spot and passed it to assert but I wanted the code I was writing to be available as soon as a warning occurred. Thanks for the explanation of TDD, I'm already quite aware of exactly how it works and its methodology. I didn't see a point in exactly what you were saying here though... My approach and my code is designed to be simple which PHP unit is not (in so far as my tests run as part of the core program, where as phpunit at the very least requires configuration and setup and then actually running the tests separate from the core). It took me about 10min to write the initial code and an extra 5 along the way refining it. IMHO for a tired man @ 2am in the morning, much simpler.
Yeah so to share files from host to guest, Mac to Linux, we use NFS. If I compile shared files using the Linux guest, NFS needs to transfer those files. When there are 100s of files, I rather compile on the Mac host.
How does this compare to resque?
I posted there too, but I thought posting it here won't hurt, since it is a PHP driven system and I'm having issues with phpMyAdmin as part of the overall problem. Thanks :)
?? this does not make sense. you dont write back the generated files so it will be only ext3/4 which is faster than nfs/fat
That's what I end up using, but it still a pain to work with. Not sure if it's the libraries fault, or PDF standards.
Never logout an user if his IP changed, if he's behind a load balanced internet connection he may have to login every minute. 
for the resources/transforms, can't array_map() cover this? // if necessary $collection = iterator_to_array($collection); // filter $json = array_map(function ($rec) { return array( 'id' =&gt; (int) $rec-&gt;id, 'name' =&gt; $rec-&gt;name ); }, $collection); echo json_encode($json);
The BookModel is supposed to be part of your application code (an example model in this case). It only hints on what type of object will be processed within the transform function.
No, **your services are coupled to your factories**
&gt;The BookModel is supposed to be part of your application code I am aware of that. I was asking where it comes in the scope of this example. It would have made sense if the example was trying to convert a list of Book objects to the corresponding json. Instead it shows conversion from a list of associative arrays holding attributes of the book, to json. 
&gt; With that logic, Javascript, Mobile apps and Desktop apps are all insecure! That is correct. That is the point exactly. I am not a cryptographic security guru person. But frankly most developers seem to lack even a basic grasp of simple security measures and practices. I'm sorry if I seem flippant but given the outbreak of major hacks coming out of supposedly secure industry-standard components, we need to get serious about this. Why are client-side applications inherently insecure? Because you gave them to the client. Now with many applications, you don't necessarily care if your user opens up a memory editor and changes some values. Furthermore you might not care if they decompile your source and rewrite your code. The point is that certain components absolutely 100% of the time need server-side checks because both of these attack vectors exist. Think about it like this, I write an online game in .NET or Java or even C++. It's an RPG: swords, fairies, wizards, the whole gambit.. Now, I don't include server-side checks for important in-game values. Black-hat player opens up a memory editor, finds the memory position of the integer that stores how much gold that player has. Blackhat player then changes that value and gives himself 999,999,999 gold. As you can imagine, not validating the players gold with a server will have catastrophic consequences for game-play, given I now have uber-rich uber-powerful cheaters running around ruining my game for everyone else. Another example, same game. Though I don't include server-side checks for most important in-game variables, my boss instructs me that my game needs some very basic DRM to avoid piracy. Well, I whip up a cryptographic algorithm, setup a token authority, obfuscate my code, and call it a day. Very nice, except that using binary analyzation techniques - Black-hat can look at the binary entropy of my executable and easily identify the cryptographic algorithm. Then decompiling to change the algorithm, Black-hat finally recompiles with a new neutered algorithm. Now they pirate my software to their black hearts content. Like I mentioned above, sometimes you will not care if your player is cheating in a single-player game since it affects no one. You might not even care if someone decompiles your code. But that doesn't mean the attack vector goes away, it's just not relevant to you.
Suhosin extension already does everything you are trying to do, and more (for example encryption).
2 very good reads on this topic: [Secure-Session-Managment-System](http://www.wikihow.com/Create-a-Secure-Session-Managment-System-in-PHP-and-MySQL) [Secure-Login-Script](http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL)
If you don't need a large amount of data store in the session a very nice alternative is to use an application secret to encrypt *and sign* the - serialized - session data and store the entire session as a cookie on the client's browser. When a request comes in you verify, decrypt and unserialize the session from the cookie. Since you have signed and encrypted the session you can verify it has not been tampered with. Another advantage of this approach is that you no longer rely on the storage capability of your frontend servers which can be useful for applications that need scalability. Typically they have a load balancer which sends requests to, say, 10 frontend servers that are sitting behind the load balancer. With this approach, any request can be sent to any server, and it will still work flawlessly, because the request is essentially carrying its own state (in the encrypted cookie). Where as classic file-system based sessions rely on the request reaching the same server again because the session data is stored there. The Python based web framework, Flask, works in the way described above. Note: you should likely avoid writing your own implementation of what I have described above, it's very easy to mess it up
I think we can all agree that attending a conference where you're the only one of your gender could perhaps be quite intimidating! (I've experienced this.) It's helpful to give a nudge for people who on the fence about it, as it improves diversity. 
Haha! I'm out.
I wrote a beanstalkd driver for bernard: https://gist.github.com/dhotson/8860685
What does improving diversity give?
Once you have to embed external data opt-in/opt-out and maybe fetch more data (esp. with no lazy-loading ORM) it gets a lot more complex. Also, for whatever reason, classes are considered more re-usable than closures or functions.
yes, loosely (using constructor injection). like everything else
As you said women do the job just fine. And there are enough well known female community members that prove exactly that point. One of the reasons I personally hang with them on IRC is to build a network. Just like any other user group you help each other out. PHPWomen is special because of the focus on women. Women can do the job just as good as us men and I completely agree with you. But while we (man and women) are good at what we do, adding a women to the team can disrupt team dynamics and slow it down. I have seen that a couple of times. And it is a pity when that happens. Some men just started acting funny. Things just went down hill from there. The one thing that I would loved have to have at that time was a network I could reach out to for help that knows how to deal with such situation. Building equality isn't easy and requires work. Sending women to conferences to raise awareness for phpwomen and the cause in general is one way of doing that. (Some how I think sending a man representing phpwomen to a conference would be frowned up on and cause confusion. For example look at [/u/Archr's comment](http://www.reddit.com/r/PHP/comments/1x6tdm/phpwomen_is_doing_a_fundraiser_with_purple/cf8qop2) and there are several tweets on twitter regarding to it and the man in the kickstarter video. Also I'm aware of a case where they made it possible for a male to go to a conference.) That is the reason I support them. To help more women into tech, so they would consider going conferences. Help them when they encounter difficulties along that road. To get more women to conferences, that might get them into tech. Not because they need our pity but some of them need our help to get over that line to do what they love to do and make it their profession.
&gt; but that's not a reason not to write them Definitely. That is 100% correct and engineers should always use the Best Tool For The Job. IMHO it is incredibly likely that we will see a convergence between client-side and server-side technologies such that most processing will occur on the client and most validation on the server respectively. Given the cost of processing nowadays, most vendors will want to offload processor-heavy methods onto the client to reserve server bandwidth for more important validation methods. All that said, the real "thin client" is ultimately unworkable given the state of our technology and bandwidth limitations. So by all means, write all that javascript at whatever point in the stack you want. However, be careful not to shirk your responsibility to all of your other users because the client isn't validated properly. 
Hey. Comparing to resque it does it the same way if using the redis driver. It also shares the same format, so it should be possible to send messages between ruby and php. Also it you are looking for a nice frontend we provide bernardphp.com/docs/juno 
Reading the sample chapter https://leanpub.com/buildingsecurephpapps/read, I think, leaves a bit to be desired. The info given about SQLI, XSS etc. seems to be quite sketchy. One would expect a commercial book to discuss the matters in mode detail and thoroughly. Especially because we already have quite good and free online resources. Of course the book is not in the final version and hopefully things will change in the final version, which I think is needed for such a security book.
Women, particularly attractive women, will disrupt male thought patterns. The reverse is also true - you stick an attractive man in a room with a bunch of women and that's going to get weird too. This is very well known. It's worse when either the male or the female is socially inept. The solution to this problem isn't giving women a free ride and marginalizing men as "The problem". This is just a problem you need to deal with on a case by case basis in any work environment. Men are not the problem here, but they are often demonized to the point where it sure seems like they are. &gt;Not because they need our pity but some of them need our help to get over that line to do what they love to do and make it their profession. No, they don't need our financial help for that. They need to stop thinking men are the enemy. If I have to pay you to be an attendee at a conference you either couldn't afford it otherwise, or you didn't want to be there in the first place. If you couldn't afford it, great. You need my financial help and I'm all for that. If you didn't want to be there, I don't want to pay for you to go, that's just a waste. &gt;Building equality isn't easy and requires work. Building equality requires creating an equal opportunity situation. That already exists. It stops being equal when women are paid to go, but men have to foot full fare.
If there are any specific issues you have with the documentation, feedback would be welcome.
Currently there is no Gearman support but there is a pull request for adding a beanstalkd driver https://github.com/bernardphp/bernard/pull/93. Haven't had the time to review all of the new drivers yet :) 
Can we work together on this so ? :) https://github.com/bernardphp/bernard/pull/93
Different perspectives, different views on life - these can all feed into your passion, bring new ideas to the table. 
You'll need to decide what process manager you're going to use to manage your Resque workers. Personally, I prefer [God][http://godrb.com] but other people like Monit or Supervisord. Other than that, it's pretty straight forward. Here's a failed project my company open sourced that used Resque considerably: https://github.com/brightmarch/major-api-worker The app/config/ directory contains the God config. The src/MajorApi/Worker directory is where the workers (or jobs) were kept.
Say I don't use SSL. But I do keep site clean of XSS and prevent Session Fixation by regenerating session id upon successful login. Is there a way for attacker to hijack user session (without packet sniffing)?
I have not used it, but know of its existence: https://github.com/cartalyst/sentry
thank you! looking into this right now.
Really? Wiki how? Also, why does the second link say "8 *ways* to create a secure login script" in the page title, yet the article is actually just 8 *steps* (with each step being several more sub-steps) to creating a login script?;
What kind of improved session support are you looking for? 
I would recommend exporting your data in a CSV format and try importing them again in a Magento 1.8 install. The jump you're making here is pretty big, expect lots of issues along the way!
From what I understand, PHP's built-in sessions and SSL aren't enough to protect a site?
I don't care about plugins, theme etc, i just want the products, attributes, images, orders and customers to transfer through to the new version. Once it's up and running with the proper data we'll get a new theme and re-organise the site to be better and more friendly. I actually tried your suggestion this morning, Magento has a built in script that exports all products, all stocks and all customers. Tried to import it into a 1.4.2 install locally and it didn't work. To my understanding, they changed the database type from 1.3 to 1.4 (from there to 1.8 should be more straightforward) so everything is pretty much fucked and I don't know how to do the upgrade successfully saving the data.
it is enough
Believe me, I want it to be and I'm not trying to be a tool but can you show me some citation of that or something? I've read soooo much stuff that says "NON-SSL isn't secure" and then "you need to do more than PHP's core sessions" etc... I seriously feel a bit perplexed. Thank you for your time in reading this by the way.
Just write a simple little library which you can add to your framework via composer or something and can be used standalone. win win
additional question: what SSL should I get?
&gt; Dear OP, did you write this tutorial? So he could spam links on sites like Reddit and gain ad revenue.
Yeah i was thinking the same at first, but have you actually read them? As far as i can say if you combine those two articles, and build accordingly you get a very robust and secure session handling and user management system. If you think there is something to improve, i would love to hear about that.
[puphpet.com!](https://puphpet.com) is brilliant , I've been using it for the last few months to create my vagrant boxes - keep up the good work /u/jtreminio!
there is 1 way you can get into the session: you need the cookie. there are 2 ways to get the cookie: man in the middle and hacking the computer (also server which is a computer, just for clarification) of someone. man in the middle is denied by ssl. hijacking the computer of someone... theres no way you can secure that for your clients.
the one you can afford :), startssl is great if it is too expensive (but you have to do it once a year).
Ah right, in my case I'm relying on the timeout param in pheanstalk: https://github.com/pda/pheanstalk/blob/master/classes/Pheanstalk/PheanstalkInterface.php#L220
Reddit API, the only php wrapper is GPL licensed (no problem for my personal projects)
Women are under-represented in this profession. Mostly due to stale gender roles and general asshattery from men in the profession. Level the playing field first, then we can talk about equality and fairness. And if you don't want to help, don't.
In that case it is indeed not needed in the driver, and should be removed as Pheanstalk proberly has a better implementation and knowledge of how Beanstalk wants it. Would be greeat if you would look at the PR and comment, seems like you have knowledge about Pheanstalk API.
Zend is a giant package but you're script would only load what it needs to use.
&gt;I don't know what inheritance is nor why I need it. You should fix that before you do anything else.
Thanks, I didn't know about that! And the info method can be implemented with https://github.com/pda/pheanstalk/blob/master/classes/Pheanstalk/PheanstalkInterface.php#L243
Magento upgrades are no light snack. Data exports / imports will be a pain given the jump in versions. I'd take a look at seeing if you can use the command line to dump (not phpMyAdmin), and re-import, and check if the relationships are retained, e.g. customers &amp; their orders, skus in an order &amp; skus in catalog. Take a look at Magmi for importing data if you don't want to go down the DB CLI.
It can also be secure only and only transferred over HTTPS. So the key here is: don't let bad people get access to your tokens and you'll be in pretty good shape.
That would mean SSH though, right? Not sure I have access to SSH where the site is hosted :/
&gt;there are 2 ways to get the cookie Uh, no. The methods one can get a session from is via: * Session fixation * Session sidejacking * Session prediction * Man-in-the-middle * Cross-Site Scripting * Hacking or physically accessing the computer
That's not a very honest or accurate way of putting it. The real answer would be maybe, and that it depends on the particular situation. 
A framework wouldn't magically fix security problems. It's something you need to consider and account for when building your website. I was discussing these aspects in an earlier thread, which you might find useful: http://www.reddit.com/r/PHP/comments/1wa1j0/security_sessions_sql_injection_and_encryption/cf01o0g http://www.reddit.com/r/PHP/comments/1wa1j0/security_sessions_sql_injection_and_encryption/cf0851r?context=5 http://www.reddit.com/r/PHP/comments/1wa1j0/security_sessions_sql_injection_and_encryption/cf039hp?context=2 
&gt;not possible with simple session_start() Yes it is. For it not to work, you need session.use_only_cookies to be specifically set to true. &gt;you mean hijacking (sidejacking is the wrong term for that), No, I mean sidejacking, which is a specific form of hijacking. &gt;which is a man in the middle attack No, it isn't. &gt; ahem &gt;&gt; hacking the computer of someone. XSS and hacking is not the same thing. Thanks for the downvote, by the way.
Sentry is good at being Sentry, but if I wasn't running it through Laravel it got a bit messy. Trying to autenticate with things like username without the access to the config forces you to modify Sentry's source, which sort of defeats the reason of using Composer. For now i've been building my own similar session handler, but I hope to find some neat tools in this thread.
Get a fresh 1.8 running, open both old and new databases in phpMyAdmin, and export the whole DB, but without data and indexes. Then run a diff of the 2 export files, it'll give you a good overview of possible differences.
I didnt downvote you by the way. &gt; XSS and hacking is not the same thing. XSS is hacking, injection attacks are hacks. &gt; For it not to work, you need session.use_only_cookies to be specifically set to true. Session fixitation is XSS/Hijacking and hacking. I only described the last way you can archieve fixitation and thats over the GET protocol which will not work with a simple session_start. &gt; No, I mean sidejacking, which is a specific form of hijacking. &gt; Session sidejacking, where the attacker uses packet sniffing to read network traffic between two parties to steal the session cookie. Sidejacking is Hijacking and it is a man in the middle attack. ps: now I downvoted you (go cry if I hurt you because you lost a virtual currency with no value at all)
Developing the app is the easiest part... doing all this session stuff is a headache I just can't get past.
Yeah, and there's a number of tables for sales, customers etc. Using phpMyAdmin will play havoc with the foreign keys and you will be paying the price for it for a long time to come. Also, assuming if you can't SSH then you can't change the max memory setting for uploads, then you're probably going to be shit out of luck importing files without SSH.
Could i clone the database from within phpMyAdmin without fucking it up and run tests on the clone?
I guess you could export the whole thing, rebuild locally and then start testing with exports / imports. Bear in mind when you do the live switchover, then you'd need to take the very latest DB dump to work from, so you probably will need to get SSH access. Can you not just request it now?
Could you please explain difference between sidejacking and mitm? This is the first time I hear about sidejacking, and from quick google I found few articles that mention it, but after reading what they explain is mitm.
It seems like it's a must so i'll ask for it on Monday. So do i dump the db via SSH and then use that locally with a 1.4.2 installation?
Ahh thats a shitty example. I'll change that right now. http://fractal.thephpleague.com/transformers/ That has a better explanation. 
Well, it's clear that you're no security consultant, which would have been fine if it weren't for the fact that you fancy yourself fit to advice on security questions despite knowing very little about it, and spreading a bunch of misinformation. &gt;I didnt downvote you by the way. Well, seeing as I was downvoted directly after responding to you, not once, but twice, forgive me if I don't take your word for it. &gt;Session fixitation is XSS/Hijacking and hacking. Session fixation is when you fixate (i.e. set) the session ID e.g. in a URL (see PHPSESSID), causing you to gain access to whomever signs in via the link you provided, since the session ID is known to you. It has nothing to do with XSS or hacking into computers. &gt;Sidejacking is Hijacking and it is a man in the middle attack. No, session sidejacking is a form of hijacking where you sniff packet data from a hotspot. This is not the same as a MITM attack in which the attacker acts as an intermediary between you and your destination (hence man *in the middle*). &gt;ps: now I downvoted you (go cry if I hurt you because you lost a virtual currency with no value at all) Way to be an asshole.
&gt; The League of Extraordinary Packages Ugh... &gt; RESTful data structures As far as I know, there's no such thing....unless I'm misinterpreting [the abstract](http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#tab_5_1). Granted, some data structures are perhaps more conducive to specific types of REST implementations -- e.g. JSON is well suited for SoA architectures -- but I don't think REST itself is at all concerned with the response payload datastructure.
Session sidejacking is when you sniff packet data from a hotspot. This is not the same thing as a MITM, even if they seem similar, both being forms of eavesdropping. MITM is when the attacker acts as a relay between two victims.
&gt; classes are considered more re-usable than closures or functions Both examples are implemented with the same anonymous function, one is just invoked by a class and the other by a native function...
Absolutely, array_map is a great way to get the ball rolling on having a buffer between your data and output, but it does not: * Allow reuse, by storing those array_maps somewhere useful * Help with context-drive embed logic * Pagination * Use the word Transformers :)
Can it also transform json back into models?
I'm not sure I follow...
I would do the following: - Export production DB, rebuild locally - Build new instance of Magento locally - Export data from production DB - Find the tables that you *think* contains the correct data for import (I've only done customer &amp; order using this method, have done product import through Magmi) - Import the customer &amp; order data into new instance DB - Test the shit out of. Test, test and test some more. When you think you have tested all possible scenarios, then you are perhaps halfway there. If the above works for you, then document your steps and prepare to do it again when you put your old site into "maintenance" mode for the replatform. That's the approach I would / have taken, but have never upgraded that many versions in one go. Good luck.
That would be glorious. A bit about what I'm trying to do... I have several small web-app projects that are at the point of needing user-specific access for implementation. One tracks scoring in a league system, for example... I just want something I can drag and drop into each of my domain folders in my hosting plan, and template out a basic *.php page that I can develop for each app if that makes sense...
I just want to go from 1.3 to 1.4 successfully because of the db differences. Then i guess it's smoother sailing to go from 1.4 to 1.8. Might i trouble you with more questions once i get going? :/
From the [sample chapter](https://leanpub.com/buildingsecurephpapps/read)... &gt; Mass Assignment Ok, I thought the author was completely off his rocker, but this is [apparently a real thing in RoR](https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet#Mass_Assignment_and_Strong_Parameters). The rest is lacking, and reads like it was written by an undergrad. Not saying there's anything wrong with that, but it comes across as pretty juvenile with the profanity littered throughout, "Yeah science!", etc. &gt; Another popular place for this is in image **XIFF** data. If a user uploads an image and your application displays the **XIFF** data [...] **EXIF!!** Then the section on `htmlentities()` and `htmlspecialchars()`... contains this: &gt; You might be thinking “it**â€™**s the government, jack; even government doesn**â€™**t care that much about quality” ~~Ok, if you can't properly handle the output on your own site, you're not really convincing me that you're qualified to talk about security.~~ edit: I see it's possible it's not the author's fault here, since it's on an external site, but this section is still not very good, those PHP functions are by no means a magic bullet, and if you're not careful, those functions can actually be used as an attack vector themselves. There's also no mention of `filter_var()`, or the `ctype_*` family, etc. ---- OP, I'm not trying to shit all over your project. I think it's cool that you're interested in security, I think it's great that you're taking the initiative to write a book on your own, and thanks for sharing with us. However, security is not only a very serious matter, but it's also a very complex subject, and not something that just anyone should be attempting to educate about. I would highly encourage you to solicit the help of a security professional to review/edit your work before it's published, or else you could end up doing more harm than good (not only to the general community, but to your own reputation as well). 
Performance when running unit tests shouldn't matter that much, because you shouldn't run your unit tests in a production environment where you may need to do these kinds of optimizations.
Session fixitation has many ways to be executed: * url manipulation * xss * xsc * hacking * physical access ---- while sniffing data you are in the middle, between the client and the server, hence the name.
**YOU'RE WRONG** http://en.wikipedia.org/wiki/Session_fixation http://www.php.net/manual/en/session.security.php https://www.owasp.org/index.php/Session_fixation Now, can you **please stop insisting on something which isn't true**?
&gt; I feeling lazy was because of how tired I was Imagine if the person who built your house cut corners because of this. &gt; when using php's assert function, and failed assertions will show the code that failed in the warning ONLY if it was passed a string Which I see as an inherent flaw in your design. &gt; I didn't see a point in exactly what you were saying My point was basically the old adage about about reinventing the wheel. Occasionally, it's good to do, but in this case I feel it wasn't. If your only issue with PHPUnit is setup time, well, that's pretty flimsy. [Composer](https://getcomposer.org) makes installing PHPUnit as easy as can be, and creating a test class is as simple as creating a PHP file. You can even copy/paste an existing test class or example from the PHPUnit site so you don't have to type everything out. If your solution works for you, great. I would simply be surprised if anyone else who is aware of PHPUnit used it. 
The built-in session handler can be configured to be secure. I responded to another thread about session security here: http://www.reddit.com/r/PHP/comments/1x8miq/is_my_understanding_of_sessions_and_security/cf9ggsr Note that I try to cover the basics in that comment, and I know there are some gaps but for the most part I think it stands. As I mention there, there's a lot of information and misinformation floating around, so make sure you do research through reputable sources and not random blog posts on the Internet (where a lot of the false belief that MD5 is fine for passwords still comes from).
Thanks for the explanation.
Okay, I'm going to dismiss you as being a complete idiot now. I've corrected you multiple times and even provided you sources as to why you're wrong and you still insist on this nonsense. Even when you have the information right in front of you, you still deny it. I'm done. Fuck this and fuck you.
No problem, mate. 
&gt; sources as to why you're wrong so did I, and from your first link I saw that you were wrong (you insist its only made via url, but your link states different) 
I think Sebastian was incorrect when he mentioned performance. The author of the pull request wasn't worried about performance; he was specifically trying to duplicate production's settings in his testing environment. Here's part of his opening comment: &gt;I prefer to run my unit-tests in an environment that matches as closely as possible the environment that the code will be run in production. However as I don't use annotations in my code I use the php.ini option: &gt;opcache.save_comments=0 &gt;which is a small optimization for not loading comments. However this means that all annotations fail, as the comments just aren't available to PHPunit. His mention of optimization was not about optimizing his tests, but an explanation of what the flag does. 
&gt;so did I, and from your first link I saw that you were wrong (you insist its only made via url, but your link states different) **MORON:** &gt;In computer network security, session fixation attacks attempt to exploit the vulnerability of a system which allows one person to fixate (set) another person's session identifier (SID). Most session fixation attacks are web based, and most rely on session identifiers **being accepted from URLs (query string) or POST data.** 
I was more talking about `Acme\Books\BookTransformer`, with methods like `BookTransformer#transform`, `BookTransformer#embedAuthor`, `BookTransformer#embedContents` etc.
Still, you're doing something very strange if this isn't micro-optimization of your production environment. Performance or not, i still agree with Sebastian here.
&gt; In computer network security, session fixation attacks attempt to exploit the vulnerability of a system which allows one person to fixate (set) another person's session identifier (SID). **Most** session fixation attacks are web based, and most rely on session identifiers being accepted from URLs (query string) or POST data. 
First I'm doing things wrong and now I'm ahead of my time. You amuse me. :)
Ah yes, I missed the text at the bottom of the example [pointing to the transformers example](http://fractal.thephpleague.com/transformers/); I'd agree, in that context, that'd be preferable. IMO the simple example would be much better served by highlighting the transformers.
I'm not saying this *at* you ... just in general ... What few people in the userland php community seems to understand that you can accomplish the same thing with generators if you know what you're doing ... $result = (yield someAsyncFunction()); Further, async error handling is now trivial because `Generator::throw` means we can do this: try { $result = (yield someAsyncFunction()); } catch (Exception $e) { // do stuff } BTW ... generators that have been available for nearly a year. * (edited to add code formatting)
&gt; Either running tests in an environment that has different behaviour from production, or having to change your production environment to match what your unit testing code requires both seem dumb. The unit testing framework you use is a dependency in your project, and this particular dependency has a requirement in that this setting needs to be enabled. Even though you don't run your tests in production, your setup in the testing environment should be as close to production as possible, so both your testing and production environment need to fulfill the requirements. Changing those requirements and adding complexity to a this dependency so that you don't have to change anything in your production environment seems to the wrong way to handle this problem. If you absolutely can't change this setting in production, you should look for a unit testing framework that doesn't rely on annotations, or create and maintain your own middleware.
Other than having an easier interface, I haven't been able to determine why Mockery is superior enough to use over PHPUnit's mocking system when doing unit tests. A prettier interface is nice, but I like to keep things simple if I can and just use PHPUnit. Admittedly, I've only used Mockery for a short time. Can someone point me to some example of it's advantages?
Blocking for async results is discouraged in pretty much every language ... it's not a desirable feature and if you *need* to do it you've probably made a mistake in your design.
I'm actually interested in this as well. I've used Mockery and like it, but if I don't have to load in separate library that's cool too. Pádraic, do you have an article anywhere that explains why you created Mockery and it's benefits over other mocking libs?
&gt; These benchmarks are nearly pointless IMO. Didn't I just say something about this? They're making actual consistent numbers that people can use. Too many times you see one-off "benchmarks" that don't measure things correctly, with incorrect information, inconsistent testing, or no room for improvement. That's the *only* project I've seen put forth a lot of effort to get useful numbers. Would you have thought that PHP holds up to HHVM so well? (I wouldn't have, but it makes sense) Other things like how different configurations affect the numbers are useful (particularly the big one: i7 vs EC2). Hardly pointless. Is is a wasted effort? A waste of time? Its not perfect, but they're making progress, and I think that speaks for itself. &gt; If they were all implementing a sufficiently complex use case that mirrors a real world situation and I might pay more attention to them. For example, start with a basic CMS with content types, custom fields, and routing for each different type with a different template [WIP](https://github.com/TechEmpower/FrameworkBenchmarks/issues/133) &gt; Server agnostic solutions tend to be slower, so people who care about performance probably wouldn't use them (going by some of what is said here). If you want to bench how much routing php can do vs how much Nginx can do, I'm sure we both know who comes out ahead in terms of speed and memory used. Of course the reason people use php for routing is because they have a front controller with all the helpful shit that comes with that pattern. All of that slows things down of course. Like FastCGI? I was thinking more of some sort of standard than anything else-- perhaps a cool PHP-API as well. FastCGI may "technically" be slower than mod_php (barely), but there's other advantages that make it worth using at such small of a cost (usually &lt;10%, if that. Did we just flip sides here?) &gt; No doubt that .0001% of all websites reach these limits, but the majority don't. True, but PHP is growing to be a fairly significant load on front-end servers (not websites). Storage and caching are all getting faster. PHP frameworks are getting better: more sophisticated and polished. Yet, I feel as though the the PHP community is slowly remove some advantages they used to have: easy, simple-to-deploy platform that can run very reasonable in a shared environment. &gt; I've never seen anyone say they don't care about performance, but its all about the context. I'm not always the best with words, so maybe "bashing" wasn't the best word for me to use. Still, there's a general negative undertone towards nearly anything performance related in the developer community. In the PHP community, its *seems* a bit worse than the rest. The negativity seems to spread into a bigger issue of "You shouldn't be using PHP for that.", "xxx is cheap", and various other comments. In some cases its justified. In a few others, cool technology results: V8, HHVM, etc. People build platforms/applications/etc using PHP-- with libraries, existing code, and a lot of time and resources. When it comes time to work where performance matters-- apparently its time to stop using PHP and rewrite the application in another platform (like Javascript... or ASP.NET). &lt;/s&gt;. When it comes to *pure* costs, it may have better to go with a Microsoft stack (something I'd rather not see). Maybe I'm just tired of seeing excuses. For whatever reason, some of which Rasmus may have mentioned, PHP frameworks (and some libraries) are unreasonably slow. I'd say 3-8x slower than vanilla PHP is a reasonable goal. Can we stop making excuses and work on a solution?
Use a framework. 
Yes I agree with you. In general it's not standard process. There may be a fringe case where he wants it though - but probably not in this case
Yeah words are hard. While REST does not have specific output, there are types of output, structures and conventions which are usable by almost exclusively RESTful APIs, but yes this could just be general AJAX too. As for the name, it's meant to be fun. Is it really that much of a problem? The League of Extraordinary Gentleman was the inspiration.
Ok, `s/pointing/highlighting/` then! Heh. I had to visit the example 3 or so times before I noticed the link waaaay at the bottom. I do get it's 'simple example', but I feel that the transformers are perhaps the most valuable aspect.
Eh, perhaps I'm getting old and cranky, but all these pretentious/hyperbolic names wear me thin. And I'm not trying to say this is any concern specific to your project, or even PHP itself... I actually see more of it in JS I think, and it's annoyed me to the point of becoming a pet-peeve: * _"Superheroic ... Framework"_ * _"The world's most powerful .. library"_ * _etc._ Just kind of comes off as braggadocio.
I can't agree more. You can argue that fieryprophet's example "technically" demonstrates dependency injection by injecting a container into a model but by doing that there is no real benefit, you might as well treat global scope as the container. 
I think maybe you meant to say "session hijacking" instead of "session fixation"? Session fixation is a specific type of hijacking where the attacker tries to set the victim's session ID to one they know. Wikipedia has an excellent write-up at http://en.wikipedia.org/wiki/Session_fixation
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Session fixation**](http://en.wikipedia.org/wiki/Session%20fixation): --- &gt; &gt;In computer network security, **session fixation attacks** attempt to [exploit](http://en.wikipedia.org/wiki/Exploit_(computer_security\)) the vulnerability of a system which allows one person to fixate (set) another person's [session](http://en.wikipedia.org/wiki/Session_(computer_science\)) identifier (SID). Most session fixation attacks are web based, and most rely on session identifiers being accepted from [URLs](http://en.wikipedia.org/wiki/Uniform_Resource_Locator) ([query string](http://en.wikipedia.org/wiki/Query_string)) or POST data. &gt; --- ^Interesting: [^HTTP ^cookie](http://en.wikipedia.org/wiki/HTTP_cookie) ^| [^Session ^\(computer ^science)](http://en.wikipedia.org/wiki/Session_\(computer_science\)) ^| [^Cross-site ^request ^forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) ^| [^Session ^poisoning](http://en.wikipedia.org/wiki/Session_poisoning) *^\/u/hackiavelli ^can ^reply ^with ^'delete'. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 48374:%0Ahttp://www.reddit.com/r/PHP/comments/1x8miq/is_my_understanding_of_sessions_and_security/cf9pu1u)
Yes, you're right. It's been a while since I've had to address these topics. I've corrected my post, thank you. Fixation is essentially the reverse of hijacking. I'm not sure why I confused the terms, though.
No I get you. The "web artisan" shit from Laravel annoys me too. This is meant to be a bunch of well pruned packages that follow a predefined list of requirements that in our eyes dictate quality code, so the "extraordinary" means better than normal, meaning code quality is ahead of the norm, because the norm in PHP is often rather shitty. Examples? 1. Facebook SDK 2. Anything on PHPClasses We don't think we're better than everyone, we just try to be better than the norm (untested, unmaintained, etc). Take from that whatever you like. :)
I'll see if I can make the transformer classes more face-smackingly obvious. :)
Jesus... Your stupidity knows no bounds, does it?
I started as a web developer about 7 months ago (I'm 25, but only had summer jobs/internships before it and never in the Development fields). I also didn't go to school for coding, I went for Networking first and Business second. The main thing I suggest is that you show enthusiasm. For me this was shown by a gaming community site that I had made (sadly custom code stuck on top Wordpress) that actually hosted cash tournaments paid for by the game developer. I had learned on my own and just kept reinforcing how much I enjoy coding, the challenge of it, etc. Some companies (like mine) would rather have someone with a good attitude and no PHP experience over someone who knows PHP really well but doesn't have a good attitude, isn't a team player etc. So attitude is #1 in my opinion. And if they really ask you anything you find too specific about coding, be like "Google is my best friend". Anyway, just my two cents. Edit: grammar
Try refreshing at [http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/](http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/). Cover as much as you can over the weekend.
I imagine you'll get a lot of feedback about what to say about your own skills, but don't forget to take an interest in the company you're trying to work for too. Scan their portfolio, ask about staff morale, find out how their team works. Hopefully this will be a place you're spending a lot of time, so make sure you choose a good bunch, plus it'll make you seem much more keen than other applicants. Source: my first dev role was a fucking nightmare.
Great library, but why add support for testing protected/private methods? Surely a unit test should cover the behaviour expected from the public API of a class? Supporting a bad practice like this encourages the wrong kind of tests in my opinion.
We already have equality. It simply isn't an issue.
Don't show-up to the interview dressed like this guy: http://datas.evilox.com/medias/photos/fan-world-of-warcraft/photo/fan-world-of-warcraft.jpg
I hire people who understand the difference between client side, server side and database and can demonstrate some knowledge of each element. I'll start a conversation about client side languages [jQuery](http://try.jquery.com/levels/1/challenges/1), [HTML](http://www.w3schools.com/), [CSS](http://www.w3schools.com/css/default.asp) and I can always tell just by the look on someones face if they know what I'm talking about. Then I move on to Server Side, here I'm looking to see if you have an understanding of some popular modules like [PHPMailer](https://github.com/Synchro/PHPMailer) or [frameworks](http://www.phpframeworks.com/) (although don't push this as I run custom and you'll annoy me) I might chat a bit about [SQL](http://www.w3schools.com/sql/) but database knowledge is really only a bonus. **Edit:** added links
Fizz Buzz
Try to calm yourself during the interview and let your personality come through. Be honest about what you know and don't know. Just be optimistic and turn those weaknesses or knowledge gaps into opportunities or strengths if you can. If you made it to the interview, chances are they think you have the necessary skills. They're just looking for a personality that will fit in with the team. 
look up a fizz buzz example and just show them that you are passionate/interested in it as a whole and be able to demonstrate what projects you are doing outside of work. if you havent coded in a few months i would highly suggest getting into it over the weekend, depending on how much you know of course.
Be confident and emphasize how good you are at figuring things out and doing effective online research in solving complex problems. Think of some great examples to talk about. Good luck!
My understanding of the PHP side isn't what it should be, but how exactly does that work? How would you "wait" until `$result` had a value to use it's result? 
I'd suggest an easier interface is advantage enough. PHPUnit's mocks are (imho) harder to understand. Tests which are difficult to understand can hide the intended behavior of you code. In the age of composer, having the easier interface is a line of json away... so I struggle to find a good reason **not** to use it :) 
Yeah make sure you can program this. It surprises me the number of people who can't!
Don't knock custom code on top of Wordpress - really, that is probably one of the most important things you can showcase, the "here's PHO code everyone uses, and I made it do something not included". It may not always be elegant or pretty, but it shows being able to figure shit out, which is what I think *really* matters, along with a good attitude!
Relax, first of all. Either you know your stuff or you don't, but I think you're going to be ok. It will be more important to be personable and willing to learn than to be an expert with PHP. They'll likely take your age and the position (assuming a junior position) into account. Prep with some of the Euler problems (projecteuler.net), just to reacquaint yourself with the syntax and constructs. You're going to be fine, if you're any good. :) Good luck! (Source: 5+ years in dev management, done some hiring, and some passing over)
First time I've ever seen this, and I can say with some full confidence that testing a potential developer's sense of algorithmic efficiency has little to no bearing on whether or not they are a good **web developer**. Things I do on daily basis at my job: 1. Refactor gross legacy code, and DOCUMENT it. 2. Group planning of code-level architecture in the rare cases we get to do a scratch build. 3. Search through Wordpress/Drupal/Joomla plugins/extensions/modules and analyze the docs to see if they'll be a good fit for the client's needs. 4. Download and try out said plugins/extensions and see if the developers who made them knew what E_STRICT and E_ALL were when writing them. 90% of the time they didn't, and you get a screen full of Xdebug notices about uninitialized variables, and undefined indexes. Pretty solid indication that the plugin/extension is full of more serious bugs and holes, and should not be used. 5. Writing custom plugins/extensions when #4 inevitably results in too many shoddy options, and justifying to the PM why the extra hours need to be spent. 6. Spooling up EC2 instances. 7. Asking lots of qualifying questions and discovery questions to get every little juicy detail about the client's pain point and/or specification requirement to make sure what the client is asking for is REALLY what they want. 8. Explaining to clients why what they want is often not what they want. 9. Writing discovery docs. 10. Estimating user story effort levels. 11. Tracking my time :( 12. Meetings. 13. Writing HTML/CSS/Javascript. 14. Optimizing MySQL queries. 15. Basic dev ops stuff (getting front-end developers up and running with local installs of WP/Drupal sites we're working on. 16. Reading API documentation. 17. Interviewing people. 18. Doing code reviews. FizzBuzz is almost the exact opposite of the kinds of work I do at my job on a daily basis. I wonder how many qualified web *developers* have been turned down from a job because it may have looked like they weren't necessarily the most efficient *programmers*. Programming is but a tiny part of web development, and FizzBuzz-style programming is but an even tinier part.
Walk in to the interview and flop your good out on the table. Then simply drop a business card and walk out. That is how I landed my first gig. ~~Everyone else has already covered the good info~~
was the original image saved as CYMK or RGB?
How long do you give the individual to do this?
I'll check to see if there is a function in GD to see if an image is cymk or rgb. Thanks for the suggestion. I'll post if I figure out anything.
I'd just like to point out that, while this will certainly help you get in the door, your actual capabilities will keep you there. We recently hired a junior developer who expressed lots of desire to learn and advance his knowledge and skills, but he was lacking in overall resourcefulness, and ended up becoming a distraction / burden for the rest of the team. I say this as a broad reality check. Some people just aren't cut out to be programmers. I hope you're not one of them. If you are, well you're young. You'll find something else to do. :)
Just for fun. for ($out = '', $i = 1; $i &lt;= 100; $i++, print($out."\n"), $out = '') { if ($i % 3 === 0) { $out .= 'Fizz'; } if ($i % 5 === 0) { $out .= 'Buzz'; } if ($out === '') { $out .= $i; } }
Make sure they know you're going to be developing side projects and keep those projects active the whole time you're employed in order to build your skills outside the specific set of tasks they're going to ask you to do.
Without seeing your code its hard to determine the problem but I found this note on php.net. &gt;Note: Transparency is copied only with imagecopymerge() and true color images, not with imagecopy() or pallete images. &gt;Note: The transparent color is a property of the image, transparency is not a property of the color. Once you have set a color to be the transparent color, any regions of the image in that color that were drawn previously will be transparent. Are you using imagecopy() on a trans image losing the trans and making those areas white? Just thinking out loud here. Edit('Could you save each frame as a high quality jpg before reassembling? Just to see what happens for science.');
I'm looking for somewhere where I can upload the source if someone is willing to look at it. As far as the transparency, the only thing I can find that effects it is the imagecolortransparent() function. I've tried setting that to a color like 0,0,255 that I know isn't being used by any of the image frames. I am not using imagecopy. The only function I am using is imagecreatefromgif(), which if I don't add text to, works 100% perfectly. It's only the text I'm having a problem with. I am using GIFEncoder Version 2.0 by László Zsidi, http://gifs.hu to encode the image back together, but seeing as how everything works fine except for the border text, I think it is something with GD. 
Not saying it's not a good skill to have. Just the type of work my company does (massive systems with no framework or packages besides like jQuery) is quite different from the custom PHP I was throwing into PHP templates files and only interacting with Wordpress through the user functions.
You know you've got him when he rolls over to expose his belly.
You mean like how to use [deprecated database libraries](http://devzone.zend.com/12/php-101-part-8-databases-and-other-animals_part-1/)?
Be honest, and don't try to bullshit your way through anything you don't actually know - junior positions are usually pretty forgiving and they'll probably understand if you don't have a good working knowledge of some subjects. If it's a programmer interviewing you and you try to bullshit him, he will call you on your bullshit and it'll cost you. Be prepared to demonstrate anything you claim you can do.
I'm in this transition now (from procedural to OOP). Any tips? 
Great explanation. You say you put your Vagrantfile and install.sh files in the root of your project. Out of interest, do you put your project source in the same directory or a sub directory? Can you give snow example of your project directory structure?
I use my project root as the place for environment + dependency configuration and separate out the other parts into their own directories, so the source goes its own directory (normally named "app"). For example something like: app/ config/ controllers/ AccountController.php models/ routes.php public/ assets/ index.php composer.json install.sh Vagrant
I think 3-5 minutes is unreasonable. 20 minutes would be decent for someone who has done it multiple times. 20 minutes for a junior dev would be really good in my opinion.
I learnt mostly by writing classes. Making my own mistakes with creating "stupid" classes that were too encumbered with other classes, and slowly got to the point where I could correctly and effectively separate responsibilities between classes. It was definitely just practice and realizing that the best methods should do as little as humanly possible. You'll realize your first few things you write are terrible, either you have weird dependencies or things just aren't clear. With practice, and acknowledging your mistakes, you should be able to improve and feel comfortable with what you write. The only thing that I'd say is try to avoid writing your classes inside something like Wordpress. The execution chain in Wordpress is so tightly defined, that you won't get the chance to really exercise the various ways to use classes and various patterns. The first thing I ended up writing was a logging set of classes, that could handle email logging, logging to file (with file size limit/auto truncating). 
Enthusiasm, personality, and willingness to learn trump code any day in a company that isn't a sweatshop. Show them those things and you'll be fine :) You can be taught how to code... I got my very first job many many years ago by talking to the boss about our shared interest in Jedi Knight 2 for 20min :)
Would like to see an iterative solution. 
I'd recommend www.phptherightway.com instead.
Not quite sure how you got a CS degree and never saw recursion used. It's used in sorting functions, which I would have assumed were covered in your CS program. Also it's often used for parsing file paths.
Junior developers aren't developers anymore, huh? I must have missed the memo.
Ask questions about the company. Interviews go both ways and by asking questions to ascertain your own interest makes you appear more valuable to them. If in in doubt about questions to ask, think of questions that show you how much you can grow with the company, for example are you going to work under a senior level developer or work on your own? 
&gt; FizzBuzz is almost the exact opposite of the kinds of work I do at my job on a daily basis. I wonder how many qualified web developers have been turned down from a job because it may have looked like they weren't necessarily the most efficient *programmers*. Programming is but a tiny part of web development, and FizzBuzz-style programming is but an even tinier part. You seem to be suggesting that not being able to solve the FizzBuzz problem is okay if you're a developer. I'd argue that if you can't do the FizzBuzz test, then you're not just bad at "FizzBuzz-style programming", whatever that's supposed to be; I'd argue that you're bad at programming in general, no, scratch that: *you can't program*, and that you've got a real set of stones on you, or marbles for brains, for applying for a position as a developer. The point of the FizzBuzz thing is, you weed out the folks who can't come up with a solution to the FizzBuzz problem. Perhaps people misunderstand that about FizzBuzz; it's not about how many solutions the candidate can come up with, or how clever they are, it's not about seeing if the candidate will use the generators that will be in the upcoming PHP 5.6, none of that. Apparently, many applicants are unable to produce a single solution to the FizzBuzz problem off the top of their head. I'm going to go ahead and assume that you're not seriously suggesting that those people are okay to hire as a developer.
Thanks for the response and en link :). I'll read into it. 
As a downvoter, I did it because it has nothing to do with the OP's post. There are other threads to discuss how much more awesome Python is (regardless of what the point of that would be) and if there are, perhaps you might start one if the topic interests you. This person is applying as a PHP developer, so Django/Python very likely has abslutely nothing to do with his upcoming interview.
why should you only test the api? dafuq?
&gt; as function calls are very expensive in PHP. I hate this kind of remarks. Seriously, has anyone said that speed is a problem here? &gt; premature optimization is the root of all evil With this sort of logic, you would avoid calling functions altogether and next thing you know you are benchmarking single VS double quotes...
There's no way that WoW box and 2008 label aren't photoshopped. Just no way.
That's actually a best practice and is exactly what you should be doing. If you think about it, the public api should be calling all the private methods internally anyway, so even by only testing the public api, you should be able to test all of the internal private methods by proxy. If it turns out that you can't get full code coverage of the object under test by using it's public api, that implies there is some unused code in the class and is a code smell that calls for refactoring. Your unit tests shouldn't care about the internals of the classes they are testing - they should be testing the expected behaviour of the object under test, not the implementation of the behaviour. Therefore, there should never be a case where you would need to test a private or protected method.
&gt; They make you learn recursion during first-year intro to programming courses. Some people get fed up at that point and drop out to become car salesmen or Liberal Arts majors instead. That reminds me of this excellent article from Joel: http://joelonsoftware.com/articles/ThePerilsofJavaSchools.html &gt; But beyond the prima-facie importance of pointers and recursion, their real value is that building big systems requires the kind of mental flexibility you get from learning about them, and the mental aptitude you need to avoid being weeded out of the courses in which they are taught. Pointers and recursion require a certain ability to reason, to think in abstractions, and, most importantly, to view a problem at several levels of abstraction simultaneously. And thus, the ability to understand pointers and recursion is directly correlated with the ability to be a great programmer. &gt; Nothing about an all-Java CS degree really weeds out the students who lack the mental agility to deal with these concepts.
They still are! With dependency injection, they are **not**!
http://blog.liip.ch/archive/2014/02/03/collecting-performance-data-with-varnish-and-statsd.html #hhvm #production
What happens when you don't allocate new colors to draw the text? Try with only using existing colors. What I think: When you write the text into the image, you sometimes allocate new colors. Then when each frame is saved individually it's fine because it has its own color palette. But when you merge everything, there's not enough space in the global color palette, so any "extra" color show as the first color of the image (which I guess is black in your case). GIF allows for a local color palette for each file, but it really depends on your encoder, which may not support it.
FizzBuzz is a basic weed-out question, and you'd be *shocked* how many people it successfully weeds out. If they can't at least begin to think down the lines of the logic required for a successful FizzBuzz, I'm not going to take them on as an entry level developer. It's a quick rule-out for me.
I'd either make the applicant do it on the whiteboard (in which case I don't require syntactical correctness, just logical correctness), or I make them walk me through each line (or in this case each statement, as this is a pretty dense implementation) and tell me what it does.
You may want to consider rewriting your code to use imagemagick. Gd is so clunky with its format specific functions and lack of any object. Just by using imagemagick some of these bugs may disappear.
It's not even junior. He's in the running for an entry level developer position. He's got a year or two to work before I'd give him a promotion to Junior. I think he's probably clear about that, though. Everyone I've ever hired for an entry level position was, once I got them through their put-on-expertness that they dress themselves in for the interview.
HHVM is fine for production as long as you have tested your stuff on it before hand. Facebook uses it widely. 
I manage a team of PHP web developers (and some Java and C# and whatnot thrown in there just to keep me on my toes), and interviewing/hiring is part of the job. If I had an entry-level seat to fill (*NOT* a Junior position, you don't have the experience to be a junior developer yet), my only real interest is: are you interested and willing to learn? Are you clear your experience is worth basically nothing? You give me somebody who's basically smart and committed to learning, and who has a personality and attitude I can work with (they have to pass the "can I sit next to this dude" test), and I can *turn them into* a developer. I consider a new graduate with a programming degree to be in this category--you may have some academic project experience, but you have no idea what it is to sit and deliver code for 8 hours, or to work on a multi-developer project with tens or hundreds of thousands of lines of code. The last entry-level guy I hired, literally *WHY* I hired him was, he got plugged into our projector to demo some of his past work, and when he loaded up the page, it wouldn't work. Network problems, not code issues, but his big fancy demo just wouldn't go, standing there in his job interview. Why I hired him is *how he handled it*. He didn't crumble or whimper or fall apart. He tried a couple times to get it to go, and then said, "Well okay. That's not working. Let me just tell you what I did...". I hired him for his *confidence*, not his *competence*. I EXPECT an entry level person to be basically incompetent. When I hire an entry level developer, I'm committing to them just as much as they are to me. I say to them, "Give me a year, and I'll make you a programmer." That's not arrogance, that's reality. That guy from the last paragraph has been with me just a little over a year now, and he's a very solid contributor to my team, one of my most productive, go-to dudes.
I should word it a bit different: Why should you only be able to mock public methods? Sometimes you need to mock them (SOAP as an example).
Great tips here. Thanks very much for this.
&gt; Step 1 is executed for every single request, and every PHP developer knows that this is the bottleneck of any PHP application, because IO operations are very expensive. I'm sorry, but absolutely not. In most applications, the DB is the bottleneck. Or more exactly, the bottleneck always changes from application to application. &gt; Mr Fabien Potencier, the arhitect behind Symfony2, the flag ship of modern PHP frameworks, tells us to cache the code, convert it to something like byte code. That is a GREAT idea, but doesn't it complicate things ? No, actually PHP does that automatically for you since PHP 5.5. This is called an Opcache, and you don't have anything to do to use it. So IO is definitely not the bottleneck (when loading the PHP files). And we are not even talking of HHVM which compiles in memory PHP code to machine code to further optimize things. So this introduction is very much wrong, but the idea is still interesting though. However, keep in mind that even Facebook, which maybe has the highest traffic in the PHP world, praises that behavior where everything is rebuilt from scratch at each request. This is, according to them, **one of the best advantage of PHP** and what makes it a very productive and accessible language. If you want to read more, I am talking about the presentation from Keith Adams: [Taking PHP seriously](http://fr.slideshare.net/zerutreck/taking-php-seriously-keith-adams) (from slide 14 and on).
Facebook use it widely - but they have engineered HHVM as their own platform. Guaranteeing it meets their needs. Unless you know HHVM inside and out, then you're in danger of encountering segfaults.
I expect a lot of comments about how this is horrible and all, but I'll take it as it is: an experiment and proof of concept. And this is pretty funny and interesting :) Congrats on pulling that up, I had seen that method (fake namespaces and all) suggested somewhere, it nice to see someone actually implement it and have it working.
Give it a try, I'm not sure if there are some PHP versions that work. I just removed the PHP 5.5 requirement from my `composer.json` and everything was fine (even though I have a lot of dependencies).
If it's just PHP 5.5, then it could be useful but there's a lot of projects that have PHP 5.4 requirement?
I don't know what LXG means :)
you forgot about session fixation and session prediction. Nevertheless, I've given instruction on how to remedy each and every thing on that list. 
I'm not gonna argue with you, maybe I've expressed some thoughts in a bad way. I posted here to see others opinion about my idea, so maybe I can improve it or leave it dead. 
Cool, I love Joel on Software.
[**@NateNolting**](https://twitter.com/NateNolting): &gt;[2014-02-08 15:52:56 UTC](https://twitter.com/NateNolting/status/432180252023226368) &gt;[#TEST](https://twitter.com/search?q=%23TEST) [#ssp14](https://twitter.com/search?q=%23ssp14) [*pic.twitter.com*](http://pbs.twimg.com/media/Bf9ppjaIAAAM5NW.jpg) [^[Imgur]](http://i.imgur.com/Na3pkGs.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1xd28c%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Autowikibot you are sometimes too smart for your own good. 
Thank you for your input. It was in-depth and informative as well as beautifully formatted and helpful.
You aren't a bot!
I'm pretty sure that when I applied for my development position, I would not have been able to solve FizzBuzz right there on the spot. I would have been too nervous. My coding challenge was to write pseudo code for a common and more practical web development task. I was asked to write pseudo code for how I would get data from a database, and use ajax to display a list of comments for a post. Im 99% sure I would have choked on the FizzBuzz problem. I probably would have been able to solve it in some other environment where I wasn't totally nervous, or likely had some more time, or didn't have someone watching me think. Doesn't make me any less qualified of a web developer.
You can try putting this little hack in your composer.json: "replace": { "php": "5.5.9" } also, if you're using something like symfony/ICU: "provide": { "lib-ICU": "4.9" }
You are correct but I do see the issue with auto-updating browsers.
Ah, understandable. But that kind of hackery still comes in to play (even if it's a different tech, that's the kind of things interviewers look for, or at least I did when I interviewed people with "similar, but not exact" skill sets). 
What!? I thought it was the inspiration for the group's name. League of Extraordinary Gentlement. Sean Connery!
Although nerves certainly factor into a job interview, that's not what we're talking about, please don't make it look like we are: you're changing the subject to try to invalidate my points. My points don't apply to nerves, because you didn't mention nerves until just now. Furthermore, people who do job interviews are generally not morons and can generally see the difference between a bad programmer, and a nervous one. And guess what: they can test it with the FizzBuzz test. Your point was twofold: firstly, web development is not mostly "FizzBuzz style programming", and secondly, FizzBuzz is not a good test for an aspiring developer because it tests for algorithmic efficiency, as opposed to anything a developer might encounter in his or her day job. Are we even talking about the same FizzBuzz? FizzBuzz, in case you didn't know, is basically a fucking for loop. Are you seriously telling me that for loops are too algorithmically complicated to use daily as a developer? It might be that you are: in fact, the day before yesterday I refactored not one, but two goto's out of PHP code because the guy who wrote them apparently forgot about while loops. He's now a lead developer, but he's a lead developer elsewhere. We're not talking about solving the Towers of Hanoi here, or parsing HTML with regular expressions. We're not talking about nerves here, either. We're talking about people who don't know how to write a for loop. And if you can refactor legacy code, you can write a for loop, and I'm not going to believe you when you try to tell me that that makes you nervous, because apparently (you mention it in point 1) you do it daily.
this is a procedural library, but can easily be rewritten to be OO. a use case for this is for multi-page lists of docs, where you want to cache each page of the list. if an entry in one of the earlier pages is removed, then you want to invalidate all pages for that list to force a read-through. redis is used because of its set operations.
Impudent and tasteless. 
No, session fixation allows someone to set the session of someone else via a program on the user's computer or by modifying the packets on the fly. The latter is not possible while using SSL, but the former was already mentioned with the bullet point above (Hacking). Session prediction, while valid in the sense that a user could set their own cookies to the calculated session ID of someone else on their own machines, was avoided because of the amount of time it would take for a single user to collect session IDs by logging in and logging out of the website themselves, given the fact that they could not collect other people's session IDs over an SSL connection. It's also very time based because you would have to guess the millisecond that someone signed on, assuming the developer hasn't changed PHP's standard session generator which uses UUIDs.
Wait what? Why do you think writing a for loop NOW would make me nervous? There is a difference between a for loop that outputs the same data each iteration, and a for loop that has to use *conditional math* to output different data. It's that conditional math that would make me nervous, and only nervous when applying for my job (that's where the nervousness comes in). 
&gt;No, session fixation allows someone to set the session of someone else via a program on the user's computer or by modifying the packets on the fly. Session fixation is when you fixate (set) the session id for another visitor, often via a PHPSESSID query string, which would allow the attacker to gain access to another user's account if the victim logs in using that link. I'm not sure what you're trying to argue with your second paragraph, but if you're trying to say that a session prediction attack isn't possible or viable, you're quite mistaken.
Still, I said the idea is interesting ;) I've seen some talks about this on twitter a few months back, about using React and Symfony's HttpKernelInterface to do this (which would mean any Symfony app would work with it). I can't find it back though.
&gt; via a PHPSESSID query string This relies on poor programming allowing a gaping security flaw. We have to assume that best practices for user input would be used, which is why I omitted this option. &gt; a session prediction attack isn't possible or viable, you're quite mistaken. If you read the paragraph, I'm stating that it would take an excessively long time and the chances of success are slim, so it's removed from this conversation. The same argument could be applied to access tokens and any other token-based security.
&gt; How can I check if a session uses a cookie or query string &gt; When a session is started, the Session ID is, by default, stored in a cookie on the clients machine. But if the clients web browsers does not support cookies, or has cookies turned off, then PHP will try to send the Session ID via the query string. This will give a url like: http://www.example.com/file.php?SID=43b4a19d1962304012a7531fb2bc50dd &gt; This is generally considered bad practice due to security concerns, and transparent session id support **is disabled by default in php.ini**. If you have this enabled, you can check if the client is using cookies or the query string like this: Please, stop trying to be holier than everyone and understand that we're trying to help someone find the right information. If you're unwilling to provide resources or guides that help then just move along. Your information is wrong and you're not helping drive this discussion to a meaningful conclusion.
Sounds like the same people.
&gt; **is disabled by default in php.ini** Wow, you really don't know how to read. It's disabled by default, so your concern is moot. Now, go study up or GTFO.
I never said it wasn't, retard. I described the attack with an example of one of the attack vectors. Jesus, you people are dumb.
You might be interested in http://www.phptherightway.com/.
He dude, many more thanks for the extra explaination :)
He dude, thanks for the explaination!
Thanks man! I'll check it out :)
For problem 1 check out this [function](http://www.php.net/manual/en/function.imagecolortransparent.php). Problem 2.. I don't know, would have to see the code. ProTip&amp;trade;: use ImageMagick. I used to do all my image manipulations with gd. But it changed or subtracted colors, threw errors for too big images and felt kinda limited. With ImageMagick, i was able to do way more way better.
Check phptherightway.com, but I actually wonder one thing. &gt; database should be utf8_unicode_ci! I've been using `utf8_general_ci`. Is there any advantages of using unicode_ci?
utf8_unicode_ci is [more accurate](http://forums.mysql.com/read.php?103,187048,188748#msg-188748) when it comes to sorting. From what I've read, utf8_general_ci is a tiny bit faster (however, I'm not sure if that rings true anymore, or if it is even worth mentioning). 
Good stuff
session_start() will fail if anything has been output already so it must go before anything is echo'd or printed etc. Something is being output by your index.php on line 3. The second error is due to the script no finding anything at classes/Session.php. This could be because of the wrong relative path for the require_once call.
 $db = new PDO('mysql:host=localhost;dbname=database', 'root', '', array(PDO::MYSQL_ATTR_INIT_COMMAND =&gt; 'SET NAMES utf8') ); This code might be vulnerable to SQL injection. Use the charset DSN parameter instead of a manual SET NAMES query. This ensures that the escaping will use the correct charset.
Thank you. Should be fixed now. Changed to: $db = new PDO('mysql:host=localhost;dbname=database;charset=utf8', 'root', '');
Symfony is not an MVC framework. It is advertised as [HTTP framework](http://fabien.potencier.org/article/49/what-is-symfony2).
Also, could you explain how it might open you up to SQL injection?
Why did you put hashtags on a reddit comment?
I suggest using utf8mb4 and utf8mb4_unicode_ci unless you like (bad) surprises.
this. show interest in the company. ask questions. they may be interviewing you, but you should also be interviewing them somewhat.
A manual SET NAMES query does not update (iirc) the charset the client library uses to perform escaping. So if the server connection was configured to use something like GBK or BIG5 as the default charset, you'd be screwed ;)
This implementation is just to try and make it as short as possible with as few conditionals as possible. My personal feeling is that this question in particular will tell you very little about whether you should hire a particular developer. I interview devs and manage a team and I don't ask things like this. In fact, passion, personality and cultural fit tend to be far better predictors of a developers usefulness in my experience.
I think that dadkab0ns was at least assuming that the person could solve FizzBuzz.
Fundamentally, `utf8` in mysql just isn't proper unicode. You need to use [`utf8mb4`](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html) or it's actually quietly limited to the BMP. And if you're using `utf8mb4`, well then `utf8mb4_unicode_ci` makes sense. 
If you're using 5.3 or better, use [password_compat](https://github.com/ircmaxell/password_compat) instead of phpass, and then only use the non-"portable" hashes it produces.
How are they still?
Too bad /u/nikic proved you wrong 2 years ago: [Disproving the Single Quotes Performance Myth](http://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html)
The link I gave you is nikic's blog. And he is one of the most active core developer of PHP ([generators](https://wiki.php.net/rfc/generators), [variadics](https://wiki.php.net/rfc/variadics), [argument unpacking](https://wiki.php.net/rfc/argument_unpacking), …).
Why'd you choice Maria over other MySQL forks?
Thats why you make those into separate classes and inject one into others.... Sheesh, I never said you should replace DI containers with a single class, you can decoup,lle it by separating your factory layer from the container.
I like how you zing PHP in your article you posted on a PHP subreddit. A few things are worth considering just for cleanliness' sake, but definitely not all. Nice write up, anyway. 
It should be setting the cookie just fine. If you're in firefox, right-click the page, click "View page info", go to "Security" and click "View Cookies" and see if you can find it there. What's more important, is that your code is riddled with security vulnerabilities: 1. Your SQL is vulnerable to SQL injections. 2. You're improperly hashing passwords. Use a hashing mechanism that is designed for hashing passwords, such as bcrypt. 3. If you're going to use that cookie as a method of checking whether users are signed in, I could easily forge a cookie of my own and gain access to someone else's account. You should be using sessions instead (which you also should take measures to secure).
Just a comment about your website. When I view your article at its link: http://thisinterestsme.com/php-best-practises/ It only goes down to the "Email validation," heading but when I view the article on the front page it goes all the way down to "25. Don’t parse HTML with regular expressions." (and has the numbers before each heading).
I'll look into all issues, but first I'd like to figure out best way to store info whether someone is logged in. You said sessions would be a better approach. Can you point me out to some good practices or a good starting place? And about the cookie not being set - I have another page set to check for a cookie with next code: &lt;?php if(isset($_COOKIE["user"])){echo "Welcome ".$_COOKIE["user"];} else{echo "Welcome guest";} ?&gt; And it always say "Welcome guest". Unless I set my cookie through another page I made for cookie setting only, then it says "Welcome usersname". Which got me thinking the cookie is not set on my login page.
Marvel recently released an API to their library http://www.fastcompany.com/3025621/ka-pow-marvel-opens-massive-comic-book-images-archive-and-api-to-fans-developers Should be fun to play with .
Probably because it's a drop in replacement, and written by the same guy who created MySQL.
That works.
Just because your editor parses the code just fine, does not make it better than an established and verified better way.
Does mvc actually mean anything now days? The definition of model has been stretched so far that it seems you could argue any framework that separates control flow from display qualifies as mvc. 
Twilio. Extremely easy to automate calls and SMS messages. Can really have an app running in minutes. Docs are amazing and they have libraries for many language choices. 
Alas, I already use Twilio on a near-daily basis at my job. You're correct though, fantastic docs and ready neat API. 
What would you like to see in regards to the actor model?
&gt;16. Learn about database normalization. And also about denormalization. 
It will in the context of an HTML text node, yes. If you're inside an unquoted attribute or a &lt;script&gt; tag, be wary. In my opinion, it's unrealistic to expect to type out the full escape function every time you display user-supplied text; I think auto-escaping is the primary reason to use a template engine instead of PHP itself.
Why not consider using PostgreSQL? It's a very good database, in many cases nicer to use than MySQL. Also free.
In among most of PHP users - it has become meaningless. It's an acronym of *"My Very Code"*. I would also note that none of the frameworks, which claim to be "mvc frameworks", listed there implement anything even vaguely resembling MVC architecture. What they have instead is "ORM-Template-Logic". It is a very beneficial arrangement **for rapid prototyping** and (in some case) for short-term marketing projects. Ya know the ones - make in a week, keep an eye on for month-or-so and forget. Pages that are made this way are not meant to be maintained or improved. But to be honest, what should be be blamed for this nightmare of stupidity and ignorance regarding MVC pattern is Rails.
FYI: phptherightway.com is more like a collection of links to latest hype. Unlike the post above, which actually gives useful advice.
How does this compare with https://phpbestpractices.org/ ?
My guess is that it's a cache issue. I've disabled the cache plugin but I still find that a few weird things are happening. Long shot, but have you visited the site before?
Great list for a junior/intermediate dev wanting to tighten the screws. Very easy to read too.
If by "latest hype" you mean "the standard thing you should be doing these days in PHP", then sure. I'm not saying the OP's link is wrong, I'm saying there's more info out there as well.
In point 10 about hashing passwords... You should also note to salt them as well. Hashing alone is not sufficient to protect your user base in the event of someone getting your data.
Perhaps a link to [The Open Web Application Security Project](https://www.owasp.org/index.php/Main_Page) for people interested in more info on webapp security ? I find it to be a great resource. (edit for *brain fart)
For number 1, I'd go with something like http://en.m.wikipedia.org/wiki/Idempotence Basically add a unique ID to your form that allows one submission. Allowing the user to refresh, navigate back as many times as they want, but it will only allow the application to change the data once. 
I think it would be nice to have library/extension (maybe using libevent) which provides semantics for actor model.
I'll probably extend that section and provide some basic information about salting. Note that for [password_hash](http://php.net/manual/en/function.password-hash.php): &gt; Caution &gt; It is strongly recommended that you do not generate your own salt for this function. It will create a secure salt automatically for you if you do not specify one. According to the comments section: &gt;By default, it'll use /dev/urandom to create the salt, which is based on noise from device drivers. 
Added!
I think this is a must read for beginning and intermediate php developers. Thanks and keep up the good work!
Some good info there. Later on, I might add some points about object caching and auto loading (from what I've seen, there are some poor souls out there who don't know about it).
Thank you. Added a point about Unit Testing. 
#24. Why not give a table of many typical fields and the best data type and size to use for them? Stuff that are really common like "firstName, lastName, email, password, username, address, city, state, zip, uniqueID, etc..."
This is a nice optimization. Composer would also be a great example for process threads. There's a few places which *could* be sped up this way, ie looping through remote branches and tags looking for composer.json files.
That's actually an extremely good idea. Open to thoughts on this?
riot api (league of legends)
If your users attempt to make an entry into your database using emoji characters (like the various smiley faces used by mobile phones and Apple devices), and you're not using utf8mb4, the field cannot support those characters since they lie outside the Basic Multilingual Plane. Attempting to insert them will fail with a database error.
tl;dr "Hey, why do we pay OUR guys lots of money to figure our how to make us more money? We should let more creative people do that for us for free!"
&gt; mysql_real_escape_string: However, what it won’t do is protect you from attacks that do not involve special characters such as \x00, \n, \r, \, ‘, ” and \x1a. What attacks are these, that PDO prepared statements will protect you against? I don't believe there are any.
...shit I didn't know you could write for loop like that.
You would basically just need to tell the event loop library you're working with (PHP doesn't have any sort of event loop built in) not to continue until the value you need is available. This would largely be implementation specific, though. Most likely you're looking at a simple while loop to keep ticking the event loop until the result comes back.
they are not really rules. they are guidelines. you don't have to follow them all the time, but it's good to follow them. especially "Only One Level Of Indentation Per Method" is a guideline, that makes your code SO MUCH more readable and SOLID (because, if a method has more than one level of indentation, it usually does more than one thing).
You described me. Dabbled for years and now taking it seriously. I'm craving information like this, and have saved most of the sites people suggested in the comments for later viewing.
There are a good few examples [here](http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string). 
Some things I'd add: * avoid "global" keyword * avoid explicit references unless absolutely necessary * SOLID prinicples 
I started reading it after following from the front page. Then I restarted browser and felt myself dumb because the numbers after 13 disappeared but I remembered reading it. Thankfully I read to this comment and after refresh it's the whole article. The issue is still there, OP.
Learn about version control, specifically Git.
The highlighting seems to be a bit broke for the code samples.
https://github.com/chuyskywalker/rolling-curl or, better, use [Gearman](http://gearman.org/).
I wish I could get this for my Kindle.
Threading [Pthreads](https://github.com/krakjoe/pthreads) or [multi processing](http://uk3.php.net/pcntl_fork) This [article](http://www.mullie.eu/parallel-processing-multi-tasking-php/) may help you on your way. Pthreads will require recompiling php I have a outdated [guide on my blog](https://simon.bennett.im/blog/531/compile-php-with-threads-and-proccesses/) of how to do that if your interested. pcntl_fork can be installed like a extention with phpize, make, make install Hope this helps :)
The section about SQL injections has no word about emulated prepares for mysql and how it constitutes another potential vulnerability.
Have you looked into using [curl multi-exec](http://www.php.net/manual/en/function.curl-multi-exec.php)? It allows you to send curl requests asynchronously. Your application will be blocked by the slowest request, but it is sending the requests asynchronously. I find the API a little difficult, but most good curl wrappers have support. You might want to check out [guzzle's implementation](http://docs.guzzlephp.org/en/latest/http-client/client.html#sending-requests-in-parallel)
As others have mentioned [Gearman](http://gearman.org/) is a good solution if you need to offload work onto other machines and run jobs in parallel. The easiest option is to use [curl_multi_init](http://www.php.net/manual/en/function.curl-multi-init.php) which will allow you to perform multiple CURL requests simultaneously.
Looks like a well written guide, going to take a read later.
Good addition - HTTPS only :)
Grab the PDF and convert it http://media.readthedocs.org/pdf/phpsecurity/latest/phpsecurity.pdf
I've been playing with the Yahoo Weather API lately. http://developer.yahoo.com/weather/ 
The perf gains in pushing opcodes into memory and memory usage itself will be reduced you would think. But these are very *slight* improvements, if any. Still, I have it set to zero. :)
It's dawning on me that you seriously think FizzBuzz is too hard for a candidate developer. When you say "conditional math", you mean that tiny bit of arithmetic in the test. According to Wikipedia, arithmetic is technically part of mathematics so I won't argue that arithmetic is not math. However, I will argue that this sort of math is not the sort that should be daunting to any developer. I mean, the modulus operator hardly falls into the category "advanced number theory". The FizzBuzz test does not have any elements in it, that a developer should not be expected to know. I've argued this before, and now I'm arguing it again: FizzBuzz is the sort of thing every developer has to be able to do in his or her language(s) of choice without looking at the manual, and not being able to solve FizzBuzz makes you a shitty developer. Nerves are a different story: nerves are emotions and feelings are feelings, can't do anything about those. I understand that if you're very very nervous, you might bomb a test in an interview, but nerves are not what you were talking about when I replied to your comment. Bringing those up just muddies the discussion.
HipChat has a lot of possibilities. https://github.com/hipchat/hipchat-php Sqwiggle looks pretty good. https://www.sqwiggle.com/docs/overview/getting-started Nest has open developer sign-ups. I'm sure it will be integrated into the greater Google API ecosystem at some point. https://nest.com/developer/ 
Wait a sec here. Fast hashes are very useful in the context of signed messages. In this context, you already have the original message, you are just verifying the source. 
There's a typo in the SQL Injection section: &gt;SQL Injections operate by injecting data into a web **appplication** which is then used in SQL queries.
#1 - You're telling people to always redirect after a post, but this only makes sense if you're building the typical old-fashioned website (ie does nothing load pages with GET, and POST forms), and new data is always served in a view rendering HTML. Increasingly, the POSTs I'm processing are initiated from a page via js (e.g. a $.post() ), such as an application with a js framework submitting 'saves' via POST. I recognize that your redirect code is intended only as a simple example, but it's generally not a good idea to include the name of the page itself in any of its code (I'm referring to you setting the redirect to 'page.php'). A redirect to $_SERVER['REQUEST_URI'] might make more sense. It's always tough trying to make examples, since you want the reader to not be confused if you introduce unfamiliar concepts, but at the same time an example ought to be good-practice.
This is exactly which i was searching from 3/4 days. Thanks.
__Agnostic__: having a doubtful or noncommittal attitude toward something. __MVC__: Model View Controller. __MVC Agnostic__: having a noncommittal attitude towards MVC frameworks. In a nutshell, they want code that will be able to be used with any type of framework, not just MVC--Codeignitor is an MVC framework and anything built with a dependence on it would only be able to be used with other MVC frameworks. If you needed to do something that wasn't MVC compliant it'd have to be rewritten. This should NOT be confused with writing code without the use of frameworks; they simply don't want MVC frameworks.
I was about to post something very similar. WordPress is the antichrist. 
I enjoy using [Flight](https://github.com/mikecao/flight) to process PDO. Makes it clean and sanitary. # Includes # require_once('flight/Flight.php'); # Database Information # Flight::register('db', 'PDO', array('mysql:host=localhost;port=3306;dbname=database_name', 'user_name', 'password'), function($db) { $db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); }); Flight::route('/@id', function($id) { $conn = Flight::db(); $data = $conn-&gt;prepare("SELECT internshipId, internTitle, payAmount, hoursWeek, startDate, endDate FROM `internship` WHERE categoryID = :id"); $data-&gt;bindParam(':id', $id); $data-&gt;execute(); $data-&gt;rowCount(); }); Access as: localhost/{id_number}
Here's a detailed breakdown of how the attack works [on StackOverflow](http://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218) Note that it's an extreme edge-case, but while you're suggesting best-practice...
Pfft. Dark grey on black has always been my favorite!
Nice doc! Still misses the [Email Injection](http://www.phpsecure.info/v2/article/MailHeadersInject.en.php), [Cross-site Socket Hijacking](http://www.christian-schneider.net/CrossSiteWebSocketHijacking.html) and [Regexp Injection](http://hauser-wenz.de/playground/papers/RegExInjection.pdf) vulnerabilities. 
turns out they probably won't give me SSH... :(
I always find something interesting over at mashape.com :)
Redthedocs switching style themes - it used to look quite nice ;). Will be fixing during the week. This also partially broke the PDF builds.
Have you tried swapping your [A-Za-z-_]+ for [A-Za-z-_]* Changing the plus sign (1 or more) to an asterisk (0 or more) ? **EDIT** - tested this, it works. Doesn't necessarily make sense when the params are marked as optional, but I guess the regex selecter ignores whether a param is optional or something? Maybe file a bug report?
Just to put it out there... I write the book fluidly. So as I come across a topic of interest, I'll document it here. The next one up is timing attacks which also triggers the grand opening...to submissions. What it really needs are more writers. The book is completely free and open: https://github.com/padraic/phpsecurity 
Care to contribute? :P
Hi, Nope, that would be pretty easy. You can either add an extra template, to craft the JSON by hand, or use the JSON extension, and get the latest 'x' items from that contenttype (like an RSS feed). 
Why don't you just make a HTTP request straight away?
You might be better off searching for a summarized tutorial on that. Also, check http://phptherightway.com to avoid common pitfalls. 
That's a pretty cool site. Does it cover everything I need to know?
What exactly are you looking for us to tell you? That you'll be able to create something with a programming language without putting any time into learning said language? I guess I just don't quite understand your question completely. &gt; I'm in a PHP and MySQL class using this textbook, which I have not read. I haven't skimmed that textbook, but I bet it's either 1. painfully outdated compared with current PHP practices, or 2. packed with a ridiculous amount of useless fluff that should be in a standalone "Intro to Programming" book. With that said, if you're interested in actually *learning* PHP, try reading [PHP: The Right Way](http://www.phptherightway.com/) as a supplement to also reading the textbook. This is currently the best online PHP publication. If you simply want to get through the class with PHP as an afterthought, then I'd stick with the textbook, as the instructor most likely keeps the assignments very closely related to the text.
https://github.com/fabpot/goutte is a simple webscraper from the maker of Symfony 2. It has great documentation and should be pretty easy to use. If you need more advanced features I would use http://scrapy.org/ which is a scraping framework for Python, and it's extremely powerful and extensible.
Why don't you look through it and see for yourself?
I don't know enough PHP to determine what would constitute as "everything I need to know".
PHP developer here. Just out of curiosity, do you know any other languages? I'm trying to see if I can relate to you by way of another scripting/programming language.
If you're having trouble with the book try something like http://www.codecademy.com/ If you're having trouble understanding the lessons, don't worry, when I was learning I felt completely lost. Just don't give up. One day it will all just click. I think the most difficult part (in my experience) was learning how to learn.
Yes I do! And that's what the problem is. I know basic Java and Python pretty well, but PHP is just knocking me on my ass. The HTML, the CSS, the PHP and how it always pulls from other files, all the $ -&gt; symbols... 
&gt; ^^^which ^^^I ^^^have ^^^not ^^^read. &gt; ^which ^I ^have ^not ^read. &gt; which I have not read. &gt; &gt; **which I have not read.** &gt; &gt; **WHICH I HAVE NOT READ.** Well, there's your problem right there.
Does your class have a syllabus? The mentioned resource should cover most topics related to php. As far as MySQL and database design you will probably have to look elsewhere. 
Wow, I *really* like that website. I will definitely check it out. Have you used it personally?
Just realize that PHP is just stuff that happens on the server, and HTML CSS, Javascript is only on the browser. They are different worlds. It's up to the web server (Apache for instance) to call the PHP code to run in the context of the server (where your database and filesystem live), and then send the result to the the browser, which will just be some HTML, CSS, etc. The reason PHP uses $ in front of variables is just so the parser can tell its a varable if you embed it in a string: echo "Hello, my name is $name"; It needs the $ to tell name is a variable in that context. The -&gt; is just like the . in Java: (Java) System.out.println( Person.name ); (PHP) print $person-&gt;name; Don't confused it with the pointer dereference operator from C which is also -&gt;.
Username is "keep calm and read a book", neither of which are happening here.
I came from a Java background, PHP messed with my head too. A $ is just denoting a variable, that's it. The purpose is to aid in identifying variables. The -&gt; is just a dereferencing operator. Use it to access properties or methods of a class. Think of it as the same way you think of the dot "." operator in Java. The :: is a scope resolution operator, used to access static and constant properties. Think of PHP as purely being processed when you request the page from the web server. The job is to modify the content of the response to fit the request, and that's what it does for you. The HTML and CSS files can exist as they are but PHP performs logic within the markup, this is what the opening (&lt;?php) and closing (?&gt;) tags are for.
http://docs.guzzlephp.org/en/latest/ Guzzle is very nice.
I have to work with a few SaaS APIs at work. I really wish more were like Twilio. It's great.
Somewhere between knowing nothing and knowing everything, is knowing what you need to know. I would say most people are somewhere in that range, and some will be close to what they need to know, and some will not be. Those that aren't should do some reading until they know they are. Now, what do you need from us?
What is the advantage to using this over a automatic SFTP upload tool that is built into the IDE?
Looks good but I happily "git push" to my $5 droplet on Digital Ocean without any extra application. I just follow this: http://toroid.org/ams/git-website-howto It's basically just a post-receive hook. I guess Dokku gives you other features but that works fine for me.
Yeah I used it, it's really good to get to grips with the basics.
If you can get away with not needing to fire Javascript events, then as someone mentioned Goutte is a good library. I know of no PHP solutions that will run the whole browser stack like that though. For a non-PHP solution I'd recommend [CasperJS](http://casperjs.org/) which run on top of a full headless browser (with PhantomJS/SlimerJS). But you'll have to brush up on your Javascript a bit. Good luck
I can understand what's going on here - I've taken a lot of college classes where I barely had to read the book to pass. In fact, the majority of my college level courses I have not had to open the book and study it hard. The professors were either good with the slides/notes and telling you exactly what you'd need to know, or I simply knew enough to teach myself. You're getting bashed a lot for not reading the book and the people doing so are right to an extent. However, maybe you're not one of those types of people who absorb material well by reading books. I know I certainly am not one of them. This isn't bad, but it means you're going to have to find out what works for you. Take my assembly language class from last year - the book was cryptic and difficult to follow for me. I hated it. The same for my Discrete Math. But I used other resources to help me out, I watched videos and got tutoring. I learned by doing - I picked an assembly language program to start on and began small. Toward the end of the semester by studying on my own, I had a whole collection of assembly programs. How'd I do it? By setting small goals and learning by doing. I simply cannot learn by reading some book from top to bottom; I have to be able to apply it to see it. This is the only way I can learn. For this class, you might really have to do a lot more self study than any other classes you've done so far. This isn't the end of the world. If your school has a tutoring office - look at it and take what you can get, even if it's for an hour. Mine is 2 hours free every week for each class, your school may have something similar. When I began learning PHP all on my own I did something very similar. I followed online tutorials that worked on very basic complete programs, such as guestbooks, chat boxes and more. These primitive programs produced something I could actually see and work with, rather than stuffing my face in a book and memorizing a thousand functions that I really had nothing concrete to connect their uses with. I hope this helps you out. I would also reach out to your professor to see if they have resources that they can provide. Tell him you're struggling with the book. With PHP in particular there are a lot of VERY poorly written books out there. When I was first learning, the "PHP for dummies book" was so bad that it turned me off of ever wanting to write anything complex. This was many, many years ago during the PHP 4 days. So again, the book you pick up is extremely important depending on the type of learner you are. 
The "-&gt;" is not a dereferencing operator. Yes, every object in PHP is now a reference but it didn't used to be that way. Objects used to be passed by value, not by reference and the -&gt; operator still existed. It's just an "operator" to access something on an object. Saying it dereferences implies you can also use the "." to get the address of a member (assuming the member is a reference, not a value). The "-&gt;" operator is actually called the object operator, or arrow operator. Also, this isn't to say that a variable can't be assigned a value by reference. When do you assign a variable by reference, you don't have to dereference it when reading the value. Eg: &lt;?php $a = 'Hello'; $b = &amp;$a; // Assign be the reference of $a $a = 'Goodbye'; echo $b; // Goodbye ?&gt; I just wanted to clear up the misconception if there ever was any.
Thanks a lot for this. This definitely hit home. I'm definitely like you, I need to constantly use things to learn them. Reading a book that was written years ago that's dry is terribly hard to learn from, and that's why I've put off reading it until this point. I'm going to try what you did. I'm going to self-study, and watch videos, do things like codeacademy.com, etc, and really learn, just for this class. Thanks a lot.
The only use I could personally see it being any use for me is the version control. Thanks for your reply :)
PHPQuery for parsing the dom.
No problem. By the way, 5 classes ALL programming related sounds like a killer. I personally can't handle a bigger load than 4 classes per semester. The way I've typically paced myself is 2 gen ed/easy whatever classes, 2 computer science classes 1 that I know won't be too difficult and then one I know will be hard. This system has worked well for me. Why? Because I knew at least 2 classes I was taking I was going to barely have to study for to get an A, and I could put my energy into the other classes. When I was in Assembly I literally had to dedicate a ton of time to it; had I filled myself up with tough courses I probably would have been unable to pull the A in that class that I did. If in a few weeks if you're still struggling like hell, you should drop a class or two, or just drop this PHP class. It's better to drop than get an F or a D if you're not getting anywhere with it. There is no shame in doing so.
I know this is /r/php but I'd give [phantom.js](http://phantomjs.org/) a try. With phantom you can inject jquery in the page and use it to query the DOM and interact with it. It has the added advantage of rendering js. 
I recently switched to DO with Dokku and am in love. Setting up multiple build packs is really easy. 
Making a Task/Todo app is always a good standby, if you don't have any "creative" ideas of your own. I would recommend using a Framework. Laravel is a good choice.
The characters were encoded when put into the database, but not decoded when displayed on page. Try using the "htmlspecialchars" function to re-html-encode the special characters.
Pagination and calendar.
Thanks for writing this. Stumbled across it yesterday and the TLS and entropy chapters are really interesting. Reading it feels like patching up lots of little holes. Is the style a RTD style? Sometimes the code samples are near-impossible to read (dark grey on darker grey).
There's also the classic trade-off decision: how do you store recurring events?
Read some of his articles. He really had a rough time. Giving a few bucks could really help him, and would be a nice "thank you" to someone who worked so hard for the language you love. 
I am approving, and will also promote this as a moderator. If you have extra money lying around, please consider donating to this individual.
Thank you.
Fuck cancer.
You can call a php script from the console using the PHP CLI, in your crontab you would have: 30 1 * * * php /path/to/script.php And that script.php can be outside the public document root.
**Question 1** It'll include it twice, not sure about the cache, but if you're including files with classes, functions, etc, it'll throw errors. I'd use include_once. **Question 3** This is basically what I do, just I use a dependency injection class. So if this is wrong, I'd like to know too. **Question 4** What you described is basically http://nvie.com/posts/a-successful-git-branching-model/ The company I work for tries to follow it. And I try to use it outside of work also. **Question 6** It's what I do, just remember to take it out after. **Question 7** It's not your duty unless you're being paid to do it. I haven't tried it yet personally, but I heard good things about New Relic. **Question 8** Never heard of not using $_GET and $_POST before, but that just sounds silly. Unless they mean that you should write a something to sanitize it first, with that, you're still using them, just indirectly.
1) Php will include it if you say to include it. There are four functions you should be familiar with to this, [include](http://us2.php.net/manual/en/function.include.php), [include_once](http://us2.php.net/manual/en/function.include-once.php), [require](http://us2.php.net/manual/en/function.require.php), [require_once](http://us2.php.net/manual/en/function.require-once.php). If you don't want multiple instances of a file loaded, use include_once. Php won't do this for you automatically because there are situations where you need it loaded each time. 2) I don't know enough about Laravel to help with memory management questions for it, but most php applications and frameworks are typically written in a lazy way when handling memory. What this means is php will fire up the entire memory stack and keep loading things in and once everything is done, it's completely destroyed. For your example, this would mean everything is loaded to get your model data and whether that's a lot or not depends on that specific implementation. 3) If you wonder if something is bad practice, it usually is. For your example, I have no idea why you'd do it that way. Are you casting the current model to another type prior to evoking -&gt;run()? I'll have listeners or observers sometimes instantiate a model then attach themselves to it and return the model acting as a wrapper, but this too is dirty. If you're wanting to pass data around like that, it's usually best to abstract further out and dependency inject it in instead of juggling it around. 4) Check out gitflow for one example that's commonly used. In short, larger companies will have build boxes that regularly pull in branches merged into master and run all desired tests against it. If something fails, some setups will rollback to the last good build or stop until the break is fixed. Usually every item is on its own branch, not a per-user branch, but a bug-12345 branch or feature-xyz branch and those are what's moved around in development. A manager or deployment specialist may then take all branches that passed QA and merge them in either manually or automatically in systems like Jenkins. It's as complicated as you want it to be and shouldn't be more complicated than needed. I've been on teams where branches were managed manually and similar teams where it was automated into a build and release process. 5) Don't try to keep the whole picture in your mind. I work a lot of Zend Framework and anybody will tell you it can be a behemoth. Only worry about what you're working on, so if you're working on your custom stuff, only think about your custom stuff. Make sure all dependencies are being injected, configurations are right, then forget it. When you're delving into code that interacts with a third-party API, you don't need to think about a controller and how it's implemented in the application; you just need to know "program starts here" and everything before it is white noise. Sure, you'll have to debug your way out of your little bubble and into that stuff you wanted to ignore, but sometimes you just have to put on blinders when dealing with large application. Now, the founders and core developers might actually know what everything is doing at any given time since they've probably had to get their hands dirty in those areas at one point or another. Don't pick up that map thinking you need to know every road; find where your little village is and fold the map to only show that and start from there. 6) The best way is to have breakpoints and read backtraces and gradually step through the program, but with php dumping debugs and variables to screen tends to be the norm. 7) Search around to find the tools you need like munin and monit to monitor the services you're wanting to monitor. It's not usually the developer's job to monitor unless you're doing everything yourself. A sysadmin usually does it for a larger group. 8) There's the ideal, then there's the real world. Everything you write and everything I write has something in common, it's horrible. It doesn't matter what goes down in your code, you'll learn something later and think you're an idiot, or someone will review it and call you an idiot, or you're just an idiot. Depending on the application, a singleton can be appropriately used, like for a configuration or database link. What happens is it's quickly abused and treated as a global variable which is why it's frowned upon heavily; it's a design pattern, but it's usage makes it an anti-pattern. A good solution to many globalized issues like this is to have dependency injection all the way down the yellow brick road because it forces compliance. There's really not much you can do about the superglobals though. There's not really a better way to access them reliably so at some point they'll be called. What I'd recommend is abstract them away so they're not touched except in that single point of entry when they're loaded into your application. 9) You've reached the level of epiphany. You now realize that you don't know what you don't know. This is in every field, not just software, where someone will know a little and think they're a master when a master just laughs at how little they know. Once they know enough to realize how many more doors there are to open, it's humbling. You have a huge list of subjects that you want to cover and you'll have to start separating them into categories in how they apply to you. For instance, with php, performance is rarely an issue because it's usually not written so horribly that it's the bottleneck when you have opcode caching in place. Many rockstars are a persona just like musical rockstars, some have great talent, others have great publicity; just understand that it's hard to separate the two so don't take any single person's word as gospel. I have two major projects right now so I work with both ZF2 and an extremely deprecated application platform daily so I'm bouncing between single-page php with html and sql mixed in mysql_* functions and a proper application stack. Guess which one I don't talk about? **Time since I wanted to flip a table and be a clown instead: 4.7min** That feeling of ineptitude you're describing is commonplace and called [impostor syndrome](http://en.wikipedia.org/wiki/Impostor_syndrome). I know surgeons working in emergency rooms who save lives and suffer from it.
I have a recipes website that I reimplement every couple of years: - I know the problem domain and don't have to worry about that side of things - Basic relationships: recipe has many categories, categories have many recipes; a recipe has many images, image belongs to 1 recipe - CRUD for the models, including multiselects for the many-to-many relationships - Image uploads - Authentication &amp; user management - OO: Complex recipes derive from simple recipes. Simple recipes are just: title, ingredients, method, serves, notes ... complex recipes have more detailed ingredients: &lt;amount&gt; &lt;measure&gt; &lt;ingredient&gt; &lt;scale factor&gt;, so you can have &lt;.5&gt; &lt;tspn&gt; &lt;salt&gt; &lt;1.1&gt;, then apply scaling based on how many serves you're cooking for ... I just did this with Laravel 4 &amp; Bootstrap CSS, from here, I go on to do a shopping cart (for production purposes, still a learning experience, but I've got all the core things going at this stage).
Donated!
neat
Done.
Another vote for Goutte. Fabien is not my favorite person be he saved my life.
Stripe. Oh god their API is beautiful.
[Fuck Off As A Service](http://foaas.com/)! The most useful non-useful of all the remote APIs! And a shameless plug for a [PHP wrapper](https://github.com/klaude/foaas-php) I made for it.
I couldn't afford much (I'm unemployed at the moment) but I sent what I could. 
Sounds like you understand the basics of web development but don't understand proper design principles. Although focused around Laravel, [Laracasts](http://laracasts.com) is an excellent resourced by Jeffrey Way that goes into the various design patterns, principles and teaches a lot about how to implement these. https://laracasts.com/tags/primers https://laracasts.com/tags/principles Everyone has been there, going from putting together a bunch of PHP to designing an application is hard, but it's worth the time investment. 
done.
I'll be there. Should be a good time.
Donated $30. I hope this can help his family
Fair enough. Your post were fairly sparse on information, so if you were only trying to post to a specific site in which the structure is known, such as the case with your example, then scraping would be kind of wasteful. 
I just have donated 10$, good luck
A sick one with likely huge medical expenses, you soul-less troll.
Donated.
Those who don't want to donate please click on the ads if you see anything relevant to you. Every penny helps.
While it is good to be skeptical on Internet, I think some research on the guy and his age-old blog posts would help you understand he needs money for medical expenses. Health care in many countries like America is so bad 1% people can afford it. 
Not there on mobile - is there a link?
By design - it will be switched fairly soon once another chapter makes it in. I didn't want people putting in PRs and contributions while it was still evolving.
Careful. Adsense is particularly good at figuring out odd clicking patterns.
if u're not using any packagist packages you can add this to your composer.json so it will not load from packagist repositories: [{ "packagist": false }]
it's just so unfair.
This was happening yesterday too. Kinda awkward when trying to deploy something... :-/
Donated if anything just for [this post](http://richardlynch.blogspot.com/2012/05/php-caches-apc-et-al.html). Made me rethink bytcode caching completely.
It's not explained. Where is the explanation?
The circle with an A in it represents the first table, the circle with the B represents the second table. The white represents data that is not returned and the red represents data that is returned. For example, 'SELECT * FROM TableA A LEFT JOIN TableB B on A.Key = B.Key WHERE b.Key is null will pull up all records in TableA that have no corresponding record in TableB. This is represented because the only red part of the diagram is the part of table A that is not overlapping with TableB in the ven diagram.
Just a very very fast idea...parse the directory structure once and save the name of the file and its' path to an associative array and then serialize the array and save it to the disk...when someone searches for a file read the data and search in the array and get the relevant path instead of parsing the directories again. http://www.php.net/manual/en/function.serialize.php Hope that helps
Thanks a lot! I will definitely try this. But I've got another situation since our instructor also wanted me to implement content based search without using the file names but using the contents instead. But thanks a lot anyway! :)
Styling fixes have been pushed to Github - RTD changed the default style which threw it out.
Some approaches about mirroring: https://github.com/ekino/php-mirroring http://tech.m6web.fr/composer-installation-without-github.html
It's down for hours already, no news coming over twitter (the guy is normally fast in fixing/replying). This is really a problem for us. I would gladly pay for an uptime SLA.
Both appear to be back up for me :-)
It's back now.
yeah its back.
http://www.downforeveryoneorjustme.com/packagist.org
What error messaging did you get? I typically have no issues with uploading to 1.8. Without SSH I think you may find yourself in a bit of trouble, phpMyAdmin will cause all manner of headaches, now and further down the line. 
Modify *config.vm.network* in your downloaded Vagrantfile to ":public_network" e.g. config.vm.network :public_network Then when you perform a *vagrant up* the box will be assigned an IP address from the DHCP server.
Will have to try again and let you know once i've gone through magmi's documentation, to make sure i got the settings right
This is a pretty solid explanation of the types of joins. Maybe not of the concept itself though. 
http://developer.marvel.com/
Because if he doesn't live, at least he will have some quality of life instead of finishing his life in someone else house, stressing about his family having to cope with heavy financial problems on top of his death. 
The kind who has to dictate his daughter blog posts because he cannot type anymore.
And fuck countries where getting it gets you thrown out on the street. Seriously.
The first thing I thought: why is the syntax taken from a templating language?
Because it's clean.
Donated. Thanks for approving.
can this be used with interactive programs. I mean, can we set answers to any prompt that a program might throw? Why is this better than having a shell script which is version controlled, and hence synced with any servers you are managing.
Done.
Most commands can be provided input via Bash. If you have a Bash script you keep with your project you can certainly stick with that. This is just a nice way to group tasks, have HipChat notifications, run things in parallel, etc.
You can even use this to call one of those bash scripts easily, and add notifications (like a HipChat notification) on top of it, without coupling those kinds of things to the bash script itself. Or not, whatever works best for your project of course.
Judging by the question and the phrasing, I'm going to assume you're not American. Forgive me if I am wrong. I'm also going to assume that the medical system is different in the country where you reside. Again, forgive me if I'm wrong. I don't know this person personally, so I'm probably making assumptions about his situation, but hopefully they can give you a better picture of how it works here. He has already had several medical procedures. Even with good insurance, those are quite costly. In addition, they require him to miss work. Some companies don't take kindly to you missing work. That may be affecting his ability to earn a wage. So, he's having to spend more, and earning less. Finally, he posted that he has recently quit his job, as he's unable to work. That means he has to continue his insurance through COBRA, which is going to be expensive as all get out. He will still have medical expenses, copays, deductibles, etc, on top of the COBRA premiums. Nursing care for a terminally ill person can be extremely expensive. I applaud your skepticism. In this case, though, I have absolutely no doubt that a major illness can and most likely would financially ruin just about anyone in America. In closing, fuck Cancer.
After many years programming, I've come to the conclusion that Go has produced my favorite -- by far -- answer to this problem: [gofmt](http://golang.org/cmd/gofmt/), aka. _Go format_. From their [Effective Go](http://golang.org/doc/effective_go.html#formatting) guide: &gt; Formatting issues are the most contentious but the least consequential. People can adapt to different formatting styles but it's better if they don't have to, and less time is devoted to the topic if everyone adheres to the same style. The problem is how to approach this Utopia without a long prescriptive style guide. &gt; With Go we take an unusual approach and let the machine take care of most formatting issues. [...] With this, the language not only has a universal standard, but also a tool to implement (enforce) it as well. I've taken a similar approach with JS at my work, and plan to do the same with PHP soon. Forgot pages-long style guides full of "thou shall" and "thou shall not", with too much attention devoted to edge-cases and other nuances that are nothing more than a drain on productivity.
Many prefer a tool written in a language they are familiar with and have installed, as opposed to installing Python or Ruby.
Visual Studio (at least years ago) would reformat your code as you type. That's extremely enjoyable, you never have to worry about code style, and everybody would have the same. And nobody would question it, since you get used to it since day 1. Maybe PhpStorm should do something similar? Like format your code as you type? They already do the indentation when you paste something, and that's so good. But also sometimes their formatter messes things up, so maybe that's not such a good idea :/
Ha, I was just recently researching ways to deploy my Laravel application. Will definitely try this out, thanks! In practice, do you make the Envoy file contain two tasks, one for deploying and one for reversing it in case something goes wrong?
Sure. It's totally up to you!
"Can /r/php help me to figure out how to spam millions of sites using PHP?" Sorry kid, I don't support such actions.
Any advantage in using this instead of http://rocketeer.autopergamene.eu/? Rocketeer also has some built-in tasks for deployment, rollbacks, running tests, composer install, etc. It also integrates with any framework pretty easily, including Laravel.
Thanks so much!
I understand where he's coming from. It's more about mental overhead than it is about mental capability. Sure, I _can_ learn this syntax. I have that facility. However, I still have to invest time and effort into learning yet another syntax. Contrast this to using PHP configuration files. Obviously uglier, but totally serviceable, and everyone using the tool already knows the syntax. That said, I personally like the Blade syntax and this tool looks amazing. Thanks for sharing.
Amen for [Fabric](http://fabfile.org). I don't know what my life as a developer would be like without it.
tl;dr: &gt; ... the proper layer for a DI container is *outside* every other layer in the application (with the possible exception of _Factory_ classes). That means the DI container is part of the bootstrapping code that sets up the application, and not part of anything else. &gt; &gt; ... &gt; &gt; The purpose of the bootstrap is to create and configure the container with all its services and settings, then pull one object out of the container and invoke it. None of the objects in the system has to know that the container even exists. All of the objects are being created via the container, so in a way the container "contains" the entire object graph. 
So I thought it was down for a while there, but was on shitty hotel wifi. I then tried downforeveryoneorjustme.com before I freaked, and that said it was up. Tried it on my iphone, it was there. Looks like it definitely was down then?
The vagrant file is pretty much the normal one, the other files are for puppet to do things, But the place to setup the networking is still in the vagrant
I need to find a use for this.
Oh my goodness, this brings back memories. Ultimately storing a string and calculating future events (with interrupts if one is changed) worked for me.
The level of this negativity in this thread is absolutely astounding. Why are all of you in the PHP subreddit? Solely to hate on PHP? There's already a place for that--please stick to hackernews. If you don't like it, why did even you click on it? Taylor's done as much, if not more, than anyone else to move PHP forward in the recent past. If there's a reason he put something like this together, I think there's likely something to it. I for one appreciate the cleanliness of the syntax. This is awesome work, Taylor, et. al. Thanks for doing everything you do. 
The rant is because the tool does not use PHP syntax, but blade. The main point of it is to use a language you are familiar and working with, PHP, instead of fabric with python or capistrano with ruby but the thing uses blade. So what is the point of learning another syntax if you can just use fabric or capistrano that does everything envoy does and more?
I'll give you an executive summary - it was down for a few hours this morning (UK time), but now it's back up again. ;-)
How in the hell is using Blade any different than using an entirely different language?
Your argument of "Many prefer a tool written in a language they are familiar with" is now tossed completely out the window.
Exactly, just use fabric or capistrano then.
Can confirm. Source: I drink tea.
If phpcs is finding much of anything at all wrong with your code on integration, then you're probably not giving your coding style enough thought *while* you code, instead of *afterwards*. I get what you're saying about a standard not being invasive, staying out of your way, etc. However, I find that this is already the case for me, as I'm sure ot is for others, as well. It doesn't really matter what standard I happen to be using at the time (PSR-2 mostly). I don't know if it's just easier or more natural for some people or what, but I just bang out code and it ends up always being very close to my standard, if not spot on. Other people on my team are just the opposite, and struggle to write their code with even consistent indentation. And it's not like these are new programmers or anything; they write great code. So, I guess what I'm saying is that maybe paying attention to your style while coding is an acquired trait and you could work on it. Then again, maybe it isn't...
Oh god, here we go again! &gt; The problem is when PSR-2 descends into seemingly trivial matters or omits specific use cases, and then implicitly demands total unquestioning obedience. No, it doesn't demand your "unquestioning obedience". PSR stands for "PHP Standard **Recommendation**". See the "recommendation" in there? Quite important! As a matter of fact, let's quote the PHP-FIG, shall we? &gt; If other folks want to adopt what we’re doing they are welcome to do so, but that is not the aim. --- &gt; There’s as many PSR-2s as there are PHP programmers. That is just not true. There is one PSR-2 and it can be found [here](http://www.php-fig.org/psr/psr-2). --- I'm gonna say again what I said many times before. You are free to use your own coding standard. You are free to start something like the PHP-FIG with a bunch of friends and start producing standards that you use. But don't label your code as PSR-* compliant when it is not. Nobody, again, __nobody__ is telling you what to do. All those documents mean is a standard for people _who want to comply to those standards_.
Looks very good and useful, but like most others in this thread I'm confused by the choice of Blade syntax for configuration. It's good for those who know it, but not so good for those who don't. You should at least have the option to configure it using plain PHP instead.
Also, you're the creator of Laravel (so says Reddit) and Laravel Views use @keyword syntax ("templating language"?) Also, this is easy: @keyword ... @endkeyword The rest of it is the new PHP array syntax, right? Makes sense to me, although I might not use it for whatever reason.
I don't mean to come off as douchey but I wouldn't want to test my apps and libraries on an alpha release.
This argument is getting old… **Nobody has ever said PSR-2 must be followed.** His blog post addresses problems met by people who **want** to follow PSR-2 (because, you know, a coding standard is good, and PSR-2 is a good choice, and that guy is also part of the FIG so that makes sense for him). His argument is about *how the idea behind PSR-1 and 2 is good, but how PSR-2 is too detailed/not perfect*. You reaction is like saying: "you think this feature is not perfect in PHP, I won't consider improving it, instead go using another language, nobody is forcing you to use PHP".
http://isitup.org/packagist.org
For an even easier install, I've created a homebrew formula https://github.com/tomschlick/homebrew-envoy
You're not addressing my question. Why not stay within the bounds of a blade-like, laravel focused syntax?
It's just PHP-phobia. Pythonista &amp; Rails hipsters who can't accept the fact that while PHP isn't a stictly typed language, there's a damned good reason it's the backbone for 80+ percent of the Web.
Few people understand this and we suffer for it.
I was not aware of that fact. With that in mind (after re-reading the article) I feel this is more about the current state of code sniffers rather then problems with PSR-2.
But have your own templating language can be annoying to learn the new syntax when it isn't necessary.
I'll admit it was a rather knee-jerk reaction to what I, at that moment, felt was yet another rant on PSR-2. Also, I was not aware that the author was member of the FIG so that puts the article in another perspective indeed. I personally do not get this from the article: &gt; how the idea behind PSR-1 and 2 is good, but how PSR-2 is too detailed/not perfect. I feel it rather is a complaint/observation about the current state of code sniffers.
Because it invalidates envoy best argument "Many prefer a tool written in a language they are familiar with". It is written in PHP but uses blade syntax.
It feels like only yesterday that we added 5.5 to our `.travis.yml`. How time flies!
&gt; You've reached the level of epiphany. You now realize that you don't know what you don't know. The rest of the reply is gold, but the part I quoted is pure platinum. Impostor Syndrome seems common in the would-be adepts and masters of any path.
I think best thing in processwire is good seperation between frontend and backend...
Yeah the article reads funny to me. It's essentially: * Style guides are hard * PSR-2 is far from perfect * PHPCS has implemented an imperfect standard in ways that sometimes are not what you expect * It's weird that people focus alot of style guide in Continuous Integration, when sometimes people don't even care about 100% code coverage * Static Analysis tools should give you points, and you should try to get the highest points you can, not be screamed at about brackets (which negates the point of it if you ask me) And a few other bits. He makes a lot of valid points but its tough to follow exactly the overall point of the article, and people are gonna misread it to make several of their own conclusions. 
Then why not use PHP for the syntax? If you are concerned with learning something new then why use blade instead of plain old PHP? Don't get me wrong, I like having a fabric/capistrano built with PHP. The only problem everyone is talking is the use o blade.
I don't see it as negativity, as I can definitely appreciate wanting to have everything in the same language (hello node), but looking at the syntax, you may as well just use Fabric... @task def do_something(): run('ls -la') Apologize for any formatting, alien blue mobile kinda blows for this...
&gt; PSR-2 is far from perfect Personally, I feel it lacks a lot of things, but that's the thing about standards: if you want to keep it concise you have to cut stuff from it, or you'll end up like the C++ standard (over 400 pages if I'm correct). &gt; Static Analysis tools should give you points, and you should try to get the highest points you can, not be screamed at about brackets (which negates the point of it if you ask me) But is does style and static analysis have anything to do with each other? When I use the Clang static analyser in Xcode for Objective-C, it really doesn't give a shit about how my code looks, it cares about what my code does. It gives me warnings about possible memory leaks (which doesn't happen anymore when using ARC) and possibly calling methods on NULL-pointers. That is not really a style thing, is it? &gt; He makes a lot of valid points but its tough to follow exactly the overall point of the article, and people are gonna misread it to make several of their own conclusions. Exactly the mistake I made earlier. 
Because I don't want to? Blade looks a lot better. If you want a PHP SSH task runner go write it yourself. It's no skin off my back.
Static analysis can be all sort of things. It's statically looking at your code and telling you stuff. PHPMD, PHPLOC and PHP Code Sniffer are all static analysis, so yeah they are the same thing. :)
Why not? If it works then it works. If it doesn't work because of something your code is doing wrong (deprecated or removed item) then you should fix that. If it doesn't work because of something broken in PHP 5.6.0-alpha1 then you should report it as a bug, throw it in your allowed failures list, and keep an eye on it when you know PHP 5.6.0-alpha2 is out. There's literally no downside that I can see, you just get an advanced heads up of how your code is likely to look on the upcoming version whilst still knowing exactly how it works on current versions.
Indeed. [Clang, too](http://channel9.msdn.com/Events/GoingNative/2013/The-Care-and-Feeding-of-C-s-Dragons).
Fair enough, TIL!
The tool is written in php, and uses blade template syntax for formatting and is therefor of interest to people who are more familiar with those than ruby or python. It's very relevant to this subreddit. If you don't like it, don't use it, but please don't scare away people who are trying to make our lives easier by giving us free tools.
The phrase "rant" implies a non-structured stream of words ;). I think that people are wanting it to say something that it doesn't so perhaps I should have been more careful. Then again, I did warn of ranting and poking fun. Is this one of those situations where I failed to use sufficient smilies? Let me try to summarise: 1. Coding standards are good...if everyone agrees with them. For example, Symfony and Zend Framework both follow PSR-2 at face value but neither is actually anywhere close to a passing phpcs run. Symfony's average is 3 non-compliant lines per file. Zend Framework is somewhere around that too. Does that mean they follow PSR-2 or not? Is it a requirement or an ideal that is passively enforced only if it goes completely off the rails? Answer: It's an ideal. It's just the 100% compliance that poses a question. 2. We've had problems getting PHP_CodeSniffer to adhere to PSR-2...and it's the only tool used at large to measure compliance. Apparently, the justification is that someone in PHP-FIG gave them permission to interpret the standard thus abdicating PHP-FIG's authority to do so. That's landed us in rat's nest of having to push coding style errata to force PHP_CodeSniffer's hand - it's an intolerable and unsustainable situation. Zend Framwork abandoned using phpcs over this and uses PHP-CS-Fixer to get most of the way to compliance. 3. Coding Standard perfection takes time. Time is money. I was forwarding the notion than less-than-perfect compliance is acceptable and that unusual despite protests to the contrary. Symfony seems to get along just fine without it. I'm betting other projects will too. I'm actually planning to quantify that by analysing public source code. The problem is when people expect and require perfection. They can let test coverage sit at 70% with nary a complaint, but that errant space character is life or death in a pull request. This isn't PHP-FIG's doing (which has been suggested because inventing motivations for me is fun, I guess - I'm a PHP-FIG voting member FYI), it's the fault of the PHP community having unrealistic expectations. They've forgotten that every practice must bend to the real life needs of the programmer - we are not machines. 4. The standard itself is flawed. It doesn't define all terms used, it has lots of omissions, and more than one ambiguity. This leaves scope for misinterpretation. PHP_CodeSniffer drove that home, but it can happen to anyone. I would prefer a narrower and more explicit standard to resolve those issues and to realign coding standards with what is really used at large. Not just what was inherited from PEAR CS as written last century. Less is more! 5. I wanted to get people thinking about 1-4. :P It's easy to parrot about best practices in some theoretically perfect world where every programmer has infinite time, experience and resources to fix space characters. It's important to keep a bit of doubt in the debate so that a practice can evolve over time. All I want to achieve is to put some impetus behind evolving the standard to meet real world usage which is already imperfect. Denying reality achieves nothing.
Lots of projects say PSR-2 must be followed ;). You mean, nobody from PHP-FIG requires it. Why would they? They are not the PHP community!
Old habits die hard, but all programmers will slip up somewhere or get a bit too lazy from time to time. Part of my argument was that having a little tolerance eases the path for programmers. There's no need to reach perfection if the current compliance is good enough that it's almost imperceptible to anything other than an automated tool.
Thank you for expanding and I actually stand behind your POV now (not that it should matter, of course). My point is: I get where you're coming from. And by the way: &gt; we are not machines. Sometimes I'm not so sure of this ;)
Multiple language support? Using it for ecommerce?
I'd venture to say that this tool is probably best for people that don't want to have to learn Python or want everything to stay in the sane language family. For instance Laravel users may choose to use this rather than using a different tool.
I'm kind of in the same boat. I agree, it's hard to think about where to start, and looking around you lose a little motivation seeing so much great code already out in the wild. Probably the best thing you could do is pick something about PHP you enjoy and could make easier for someone else? I like image manipulation and motivational posters, so I'm in the process of working on a poster creator. Just a thought. 
How does this differ from the existing SSH stuff in Laravel 4.1? Is it just instead of writing Artisan commands/other code that interacts with your server through SSH you have a separate utility to do the work for you?
Folks, this is useful. If you don't like it, don't use it. You think you can do better? Fork it or send a pull request. That or please just shut up.
Well, you could always help others. Like I have a project and would like to see if it could be done with DI between the 3 classes. https://github.com/ellisgl/GeekLab-XPDO =)
Yes, pull-request are always an option!
How lazy, there's a straight up link to "[What's unique?](http://processwire.com/about/what/)" right in the sidebar.
That would be great actually... :)
At the end its about getting code out the door on time, on budget, etc. Newlines are quite trivial and should be fixed if need be, if noticed when doing reviews, for example. You shouldn't be actively looking for this. The rule I follow is as long as its on its own line, you should be fine. You can't honestly expect everyone's IDE's to comply with a uniform white space amount either. So seeking strict compliance is a complete waste of time.
I had a harder time learning to understand some of the stuff you people call "code" than I did Blade. 
Nothing's jumping out at me. I think you need to narrow down the problem. Put an echo in the foreach loop. If it echoes once, ubuntu has trouble reading the gif frames. If it echoes multiple times, the problem is writing the frames. Figure out how to do it on the command line in windows, and try that in ubuntu. If it works, your problem is with imagick. If not, the problem is in imagemagick. What's the file size on each OS? It might be saving one frame, it might be saving all the frames and just skipping the animation parameters. Copy the working windows gif to ubuntu, and copy the broken ubuntu gif to windows. Do they still (not) work? Maybe the code works fine and the issue is how you're viewing the gifs. Not that I have any idea of where to go from there, but you might find better help than me once you've narrowed it down a bit more.
I guess what I was trying to convey is that this problem isn't a general one. It's limited to some subset of all programmers who happen to be more vulnerable to writing non-standards-compliant code when not devoting conscious effort to the contrary. In other words, I think the article takes the stance that this is a universal problem, when it clearly is not. Not that it isn't a problem for those affected by it, but for those who aren't, doing what you're suggesting could actually be a *hindrance* more so than a help. I, for one, tend to perceive those "imperceptible" things that you think only the tools are catching. Seeing even more of them everywhere would probably drive me nuts. In turn, I would likely spend more of my time correcting (for some very loose definition of "correct") them in other people's code than I do now, which would make me less efficient overall in the same way that you feel the opposite makes you less efficient.
Check your phpinfo on both and see if you have Imagick extension on both PHP's :) Its not enough just to have imagemagick installed on the server, you also need the php extension - or else new Imagick want be available
Run imagemagick on command line on the Ubuntu box, you'll probably get the same result. If so, your problem isn't code, it's the install of imagemagick, which can be a pain in the ass, but pretty easy to handle, just a ton of googling and command line fun. 
If you've got a sane and secure authorization process, then you've really got the biggest hurdle down. The one tip I'd make about authorizations is that you really want to avoid the possibility of a dangling auth - such as an auth for which you don't have an order record. So, make sure you have some kind of process to make sure you haven't lost track of any authorizations, either by missing data on your end or by losing track of the auth after you hand the user off the post to the payment gateway. As far as the other interactions, keep in mind that authorizations expire, so just make sure you're accounting for that when attempting to capture or whatever else. Finally, keep in mind that you're not supposed to perform a capture until the point of shipment if you're dealing with physical goods. So make sure you're not capturing before you should be. Aside from that, different payment gateways and processors all have their own individual quirks, so a lot of how you handle subsequent transactions after the authorization may depend largely on the capabilities provided by the gateway.
This is what you want to look at: https://github.com/omnipay/omnipay (I work at a company that processes a ton of payments)
and startups love to boast about their stack...
I work with people who will sometimes put a space between "if" and the parenthesis immediately after it, and sometimes they don't. I don't really care what your coding style is as long as it's consistent, and giving me "I was in a hurry" as an excuse for sometimes not putting that space in is not valid. Do it right the first time and it'll never be a concern.
Try filling out PCI assessments. 
Is this actually Laravel-specific? If not, why does it have Laravel in the header in the readme file?
&gt; However, why spin it out into a separate tool, why not just make it an artisan command? == It's not just used for application deployment. I was about to write something to automate a bunch of stuff over ssh that isn't application deployment and this will save me a bunch of time. If it was an artisan command a lot of people wouldn't use it.
I'm not in the know on the inner workings of all the major frameworks, but isn't this what most of them are doing now days (I believe both Symfony2 and Laravel 4 are at least) 
Most of us prefer opinionated software over generalized tools that can do anything, but are almost always a poorer fit for the business. More opinionated niche software should be built that appeals to fewer people so that at least someone in this industry gets something that actually serves them.
I actually do something different from most developers, I've had arguments about it, this seems a good time to mention it - honestly interested in sensible discussion on this. Basically I run Composer on a dev box and check the entire vendor/ folder into Git. Then on live servers I can just do a git deploy, and issues with servers being down or Github downloads being over quota for a particular package never bother me. "But you still have those issues" people say. Sure, but I have them on dev boxes where I can sort them at my leisure with no users being effected. Yes, it's a bit annoying to have the entire vendor/ folder in git but I honestly think the trade off is worth it. Basically, your deploy scripts on live servers should have as few external dependencies as possible. You could set up package hosting in-house ... or just check vendor/ into Git. 
Something worth being aware of, this is an initial launch of a tool. Who knows how it'll change etc once it matures over time? Use your experience with such things in the past and keep your minds open. We should encourage more development. Frankly, the greater PHP community is pretty awful at being supportive. It's never about successfully meeting business requirements with these guys, it's always about just being judgmental. We need to be more supportive (as if we were part of the same local user group) and less internety.
I might be wrong, but I think the formatter is for PHP only. I've never tried it on anything else, but I've never had it mess up a PHP class.
Because marketing.
Agreed. I'm don't have anything against Envoy - it looks like a great tool, but no way i'll be using it over Fabric.
One of the first things I suggest to someone learning a language is to build a simple blackjack game.
I'm not a Capistrano user, never looked at it before, but I can say I am a Laravel (and Blade) Evangelist, so I went for a walk to understand a little about Capistrano. Had to read a lot, mostly because it's really powerful, but also because by being so powerful things get easily complicated as soon as you need to do something fancy and syntax is far for beautiful, but I didn't had much time to do it so found some recipes and managed to create a task using it: # Installing Capistrano gem install capistrano # Create your task file &gt; capify . &gt; vi config/deploy.rb # Build it set :application, "deploy_devbox" set :scm, :git set :repository, "https://github.com/antonioribeiro/dev-box.git" set :branch, "production" set :scm_passphrase, "..BassW0rT!" set :user, "antoniocarlos" set :deploy_to, "/var/www/devbox" set :use_sudo, true role :devbox_us, "192.168.1.1" role :devbox_eu, "192.168.1.2" namespace :deploy do desc "Deploying DevBox to production servers: US and EU" task :deploy_devbox, :roles =&gt; [:devbox_us, :devbox_eu] do run "php artisan migrate" run "composer update --prefer-dist" end end # Running your task cap deploy_devbox:setup cap deploy_devbox:check cap deploy_devbox Now the same task done in Envoy # Install Envoy &gt; sudo wget --output-document=/usr/local/bin/envoy https://github.com/laravel/envoy/raw/master/envoy.phar &gt; sudo chmod +x /usr/local/bin/envoy # Create your task file &gt; vi Envoy.blade.php # Build it @servers(['devbox-production-US' =&gt; 'root@192.168.1.1', 'devbox-production-EU' =&gt; 'root@192.168.1.2']) @task('deploy_devbox', ['on' =&gt; ['devbox-production-US', 'devbox-production-EU'], 'parallel' =&gt; true]) echo "Deploying DevBox to production servers: US and EU" cd /var/www/devbox sudo git pull origin production --force sudo composer update --prefer-dist sudo php artisan migrate @endtask # Running your task envoy run deploy_devbox Seriously? How could this be harder to understand than Capistrano syntax? It's straightforward, clean, small, and beautiful. Probably I'm doing things the wrong way in Capistrano, maybe because I was trying to reproduce de Capistrano way of deploying via git, but one thing beautiful in Envoy is that it's so simple to understand and create tasks, that you don't have to read or research too much to execute whatever tasks you would manually do in your servers, read a couple of small paragraphs and get things done. 
Is there any support for tunneling into specific ports?
In Symfony, the container leaks everywhere
I am quite new to Reddit but I really don't understand why this post gets 4 down votes?? Do they mean you don't like ZF2, or you don't like Laravel or you don't like Laracast or you just don't like me :)
It's only bad when it's the only thing you rely upon.
I guess I'll have to look into to it some more. I have my own multilingual CMS that I use and it's so easily extended (I can transform it into an e-commerce store, a CRM, whatever I want, quite easily, and it's developed to support multiple languages and any kind of content from the ground up). But I like hearing about more "mature" solutions that could potentially replace my own.
I only see 2 downvotes. You should probably be aware that Reddit itself has a downvote system to combat spam and suspicous upvotes so you never know.. Also.. its the internet. Some people downvote stuff. Who cares.
Internally it uses basic ssh, so you can @servers(['web' =&gt; '-p 922 servername.com']) 
My guess is that there's more money from the Zend certification courses, and maybe some strong arming towards small teaching sites like this.
You heard it, ZF2! Tell us!
Don't take it personally. One might be real, but the others are probably a consequence of the "vote fuzzing" Reddit uses against votebots. 
When I wrote the comment it hadn't occurred to me that it doesn't require Laravel, that you can apply it to any project. I think I'm going to be using this a lot.
This is the reason i never got into zend as much as laravel and rails. I learn much better through videos than written tutorials. There is something about being able to retrace every step in an example. How many times do you do a tutorial and something goes wrong and you have no idea why? Just a sidenote but for anyone that's into Angular.js: egghead.io has some great screencasts.
Donated. I hope it helps.
i really dont need it. i probably wouldve needed it when working with static::lara
&gt; This is something that will support scraping from many sites, and submitting data This phrase seems to suggest the opposite. If not spam, what is it that you are planning to do?
Awesome! I'll try it out.
I just shared the framework for completeness to "my" typical environment that I use. I'm looking for how other techs solve this for smaller e-commerce situations that don't have the budgets which are required for purchasing regional tax database updates on a regular basis. I know what I "should do" in a perfect world, I'm just confident most people don't have the budget for that kind if support. People often ask for e-commerce sites with low to medium low budget projects and I'm wondering how others deflect this liability. 
It's prettier, and I like pretty tools. If other people think the prettiness doesn't outweigh the mental effort of learning how to do `@task`, that's their decision. Also, you realize you are going to have to read the documentation either way? Even if this was plain PHP, you're going to have to read the docs to see how to use it, am I right? Once you're familiar with it, you don't need the documentation anymore. It doesn't matter what the syntax is. I think about this video pretty much every day I do development: http://www.youtube.com/watch?v=mh2JTGjbGIA I have certain "packages of emphases" that are typical in all the tools I write - both Envoy and Laravel and things to come in the future. Some people like those emphases and some don't. But, so far, a lot of people like them. So I'm sticking with what works for me.
It does matter a bit, but I bet overall the difference isn't that big. Although, you have to keep in mind that if you are invoking PHP once for the main page and again to get the contact list, that's going to be a drag on performance. Unless you're writing a single page app. But, the reason I generally dislike this approach if you aren't writing an app is that you have a dependency on javascript without gaining a whole lot. If you coded it all in PHP, users who disable js (yes, they're out there) will still have a functional page. If this was a public page, then it would also be easier for google and other bots to index. See http://googlewebmastercentral.blogspot.com/2011/11/get-post-and-safely-surfacing-more-of.html
Well, we did for Zend Framework 1 - http://www.zendcasts.com/ I think a big portion is time and motivation. I think we should have one, but someone just needs to step up. 
I used to follow zendcasts and was disappointed when it was stopped. I learned a lot of stuff about ZF1 watching those videos. Maybe problem is being free. With Laracasts, there is a fee you need to pay which in return encourages the tutor to provide better service, I guess. At the end of the day, it becomes a commercial product which both sides (student and tutor) benefits from.
Richard forward this link over Twitter also: https://www.crowdtilt.com/campaigns/wheel-chair-ramp-or-medical-and-living-expenses Please consider donating.
Writing on my phone from a hotel room at a Tokyo Disney so apologies if this is terse. Performance shouldn't be #1 consideration, maintainability should. And when you consider performance it should be with an eye to optimizing user experience, not system loads, etc. For example, you said you're doing an Ajax call what are you returning? Ideally it should be a JSON object from an API. This can then be iterated to draw into the DOM. A common anti-pattern (IMO) is to return prefabbed HTML. This makes your Ajax vastly bigger and slower than they need to be. This is performance that matters. What I said about maintenance is relevant now. If you want to pre-populate the items in PHP as well as get them from an Ajax call you end up with two different languages and execution paths getting the same stuff. Smart use of routes, aliases, etc, in a framework can help here. I've done this in Laravel while moving an app from standard layouts to an EmberJS app. But all in all, it's best avoided as a needless functionality duplication. TL;DR - Make an API. Call the API from Ajax. Call with reasonable defaults to prepopulate. 
At the moment, you are only responsible to collect and remit taxes in states where you have nexus (employees, inventory, buildings, or other physical presence). Every state has different tax laws, so the complexity varies depending on the state. Congress is sitting on a bill that changes this liability and standardize the calculation, but there hasn't been movement lately. As for liability for proper tax calculation, it is always on the merchant. For my state, there are people suing the state because the state refuses to clarify its own laws and leaves multiple tax jurisdictions claiming they are owed tax on the same sales and leaving the merchants to fight the jurisdictions themselves. You could use the free cloud tax API, but the problem is that you then have to agree to collect and remit tax to all of the simplified sales tax states instead of just ones in which you have nexus, which could put you at a competitive disadvantage. In any event, this is not a php problem. It is a political problem, and neither the general public nor the government are sympathetic to the merchant. If you get big enough, you will get audited. If you get audited, they will find errors because their own rules are inconsistent. If they find errors, you will pay. It won't bankrupt you, but it will suck. To the revenue department at the states, you are a cow to be milked. They know dead cows can't be milked, so they won't kill you. Just make sure you can explain why you did things and how you attempt to follow the rules and you will be ok. Tl;dr - there is no right answer, so just pick what appears to be the best and be consistent. Respond to changes, and good luck.
Please can you provide a sample input image and the output you are getting? It's impossible for people to compare results if you don't provide the way of reproducing your test.
Great answer. This really helps. Thank you.
Interesting perspective. Although your Ajax is bigger than in might be with json, there are other considerations than bytesize. This post has the counter perspective: http://openmymind.net/2012/5/30/Client-Side-vs-Server-Side-Rendering/
Some people are twats in this sub. Sorry.
I should print your response and put on the wall. Very well written, thanks.
My Laracasts subscription ended little longer than a month ago. Looks like those categories are new. I was one of the subscribers that begged for a solid screencasts. I will definitely renew my subscription once I finish reading Implementing Laravel book. This book also explains so many things. Although I read half of it yet, I have a solid understanding of what should be done already. 
Agreed. This can, at the very least, slow down some script kiddies who are just crawling the web for PHP/Apache/Nginx versions that they have known exploits for.
Why not you? Use it as an opportunity to learn and then pass on what you've learned.
I think you could even extend your own CMS by [using the API of Processwire](http://processwire.com/talk/topic/3311-is-pw-a-framework/#entry32551). Some PW users want to emphasize its framework nature.. they like it more than Laravel &amp; co.
Wow, great ideas. I will check them And Aura is a great project! I will keep an eye on it
Yes, I agree, maintainability is very important. Yes, I'm returning JSON, but I'm not sure how one defines an API. I post to a PHP page that processes the request and returns JSON. In my previous project I actually did return prefabbed HTML but I have to say that looking back it feels wrong. But that's just a personal thing.
My knowledge and experience is no where near enough to do this :)
Good advice, thanks. 
TBH I downvote questions (I'd rather have only reddit as a news/links aggregator and discussion about said news). Don't take this personally, there are always lots on downvotes on anything for so many reasons. Anyone has a different opinion on what is appropriate here. I'm so getting downvoted for this by the way :p
Awesome, the example app should be an interesting read. Thanks. Using Omnipay do you find you have to customize it a lot to stretch its capabilities or is it fairly complete? It seems like a good base to start with if you're aiming for multi-gateway support. 
&gt; I'm debating where to handle things like form validation in my code. Zend_Form already handles form validation for you. Now, I haven't worked with ZF1 in quite a while, but if I recall correctly, you're supposed to create a subclass of Zend_Form for your from in which you add elements and validators in the constuctor. So, your action method would look something like this: $form = new Application_Form_Article(); $post = $this-&gt;getRequest()-&gt;getPost(); if ($this-&gt;isPost() &amp;&amp; $form-&gt;isValid($post)) { //do your stuff } $this-&gt;view-&gt;form = $form; 
If you're relying on obscurity to protect you from known exploits in your web server, you're doing it wrong.
You didn't read the message above mine. The less information you expose, the better.
We had nasty issues with imagick in php trying to resize animated gifs. We wound up using the command line tools via exec() . 
You can easily tell Travis CI to ignore build failures if you are chasing that nice green "build passing" badge: matrix: allow_failures: - php: 5.6 - php: hhvm https://github.com/padraic/mockery/blob/master/.travis.yml So there really is not excuse to not go build against an alpha release and check for any fixes you may need. It also means you can start developing on a branch against the new features right now!
I would never enforce standards on anything other than .php files. For templates we used .phtml extension or a templating language, meaning they don't get scanned by code sniffer 
My friend wrote one ages and ages ago, https://github.com/jonursenbach/medievalbattles. It's pretty bad code quality wise, but it "works"
Thanks. I get you're saying it's not a php problem. The reason I mentioned it here was in case there were a php package or php solution that others in the community used. Thanks for your thoughts. 
The 'fixed' version still violates SOLID. How do I use GDPMoneyFormatter when you have WeirdMoneyFormatter hard coded? And thats not to mention the static use of an instance method... edited for my mistakes.. its hard to get things right ;P
Ha I didn't see this for some reason before submitting it to Homebrew PHP directly (a tap people probably already have) https://github.com/josegonzalez/homebrew-php/pull/1001 
With Zend Framework, it's supposed to work more simply than I think you're trying to make it. Use Zend Forms for what you're doing and have a form for your article. When you create the form, you create each element, and when you create the element you assign the validators you want or define your own. Just for informational purposes if anyone reads this later on, the main difference between ZF1 and ZF2 forms and validation is ZF1 has validation included in the elements whereas ZF2 requires a completely separate form validator that you define and then attach to the form. I'd also recommend a [data mapper](http://en.wikipedia.org/wiki/Data_mapper_pattern) for your article model to handle the saving and loading from the database if you want to keep moving down that separation of concerns path. The logic I've found to work best in the past would separate this into three parts: model, mapper, form. $article = new Article(); $form = $article-&gt;getForm(); $form-&gt;populate($params); if ($form-&gt;isValid()) { $article-&gt;populate($form-&gt;getValues()); $mapper = $article-&gt;getMapper(); $mapper-&gt;save($article); } else { $messages = $form-&gt;getMessages(); } There are different ways to interact with the different parts, and although it isn't a pure model in the example usage I provided, the helper methods getForm() and getMapper() made things a lot easier for us. We later added a helper method to have a model save itself by calling it's own mapper and passing itself through. It got messy for us as the application grew so I'd recommend just trying to maintain a separation of responsibilities if you can. Then again, if it's a small application, don't feel bad merging the model and data mapper together, just try having a separate form that you can easily work with for the model.
You are right. That was just a simple step to get things better, not perfect. :) Concerning the static call, that's Twig's issue, which really doesn't matter. You can still test and mock everything decoupled from Twig, and that's what really matters in the end. The hard coded part is just a collateral effect of the bad design Twig has in its code. In order to use the `GDPMoneyFormatter`, you would have to defined two different functions: return array( new \Twig_SimpleFilter('weirdPrice', array('WeirdMoneyFormatter', 'format')), new \Twig_SimpleFilter('gdpPrice', array('GDPMoneyFormatter', 'format')), ); That is still good, considering Twig locks us down with that ugly and badly designed `getFilters()` method. Thanks for the contribution!
This is going to sound petty but one of the reasons might be the slightly awkward wording of the question... "Why ZF2 doesn't have something like Laracast?". Up until I read the question mark at the end I thought I was going to be clicking on an article explaining why ZF2 doesn't have something like Laracast. The more common phrasing would be "Why doesn't ZF2 have something like Laracast". Silly, I know but that might be what one or two of those downvotes are about.
Any live demo of this?
FYI - they merged the PR. https://github.com/josegonzalez/homebrew-php/blob/master/Formula/envoy.rb
To really do it right, you have to code your items to be classified as each state classifies them so that any special tax rates can be applied appropriately (like my state sometimes reduces tax on food items, so is hot sauce food? Is salt food? Is chocolate food? And so on), and often has sales tax holidays that are conditional (tax free up to $2500 dollars and only on certain types of items), and they have no requirement for a calendar of upcoming holiday or their specifics to be published in a set manner. It quickly becomes a data problem as well as a coding problem. Anyway, I went into a ton of detail as well as mentioning a cloud API because I wanted to illustrate that you may be doing a disservice to your clients or employers if you just pick a packaged solution without understanding the implications.
I doubt that - every kind of tutorial only increases momentum around the framework, so it would be only beneficial. There's no "mafia" around it, it would only harm the community.
Install it on your local machine?
I disagree with the notion that the cookbook should be showing you how to program correctly. Whilst the cookbook should demonstrate a decent level of programming, it needs to balance this with being concise and accessible for those people of a lower technical ability. Personally, I don't take cookbook entries as "this is how you have to do things", it's merely an example of how to use the framework components to achieve what it is you are trying to achieve. Filling in the gaps to make things SOLID is where your ability as a programmer comes into play.
You replied to the wrong person. Don't tell ME that.
Not silly at all! Is there way to edit the title?
If you have things set up like that I don't think that it needs to interact with packagist does it?
Like I said, that is perfectly good. But if Twig calls the method statically, that doesn't make any difference to me, as I'm not going to be testing Twig, but my formatters. But yes, I thought I should add the dependency injection principle to the example, and I might as well do it to enhance it even more. Thanks again for the contribution!
&gt; if Twig calls the method statically, that doesn't make any difference to me Twig calls the `callable` as you give it. * [Tell Twig which `Node` class to use](https://github.com/fabpot/Twig/blob/4e6ad3b568a6b57b04ecd8f2679d0188b6b838bb/lib/Twig/SimpleFilter.php#L35). * [The node "compiles" the callable](https://github.com/fabpot/Twig/blob/1918edefa937b81233087aa79297e54ea0462f9b/lib/Twig/Node/Expression/Filter.php#L34) * The `Expression_Call` node [transforms it back into what we passed into `SimpleFilter` in the first place](https://github.com/fabpot/Twig/blob/83dd42e478e8930c89dd464c529d369fa9fa07ab/lib/Twig/Node/Expression/Call.php#L23-L27): `$this-&gt;env-&gt;getFilter('filter_name_here')-&gt;getCallable()` * `$callable` [happens to be whatever you passed in as the first argument to `SimpleFilter::__construct`](https://github.com/fabpot/Twig/blob/4e6ad3b568a6b57b04ecd8f2679d0188b6b838bb/lib/Twig/SimpleFilter.php#L27). If you pass something like this: `array('SomeClass', 'someMethod')` it will call it statically. If you pass an instance variable and a method name (see the example), it doesn't call it statically. class Foo { public function talk() { echo 'Hello from ', get_class($this), PHP_EOL; } } $f = new Foo(); call_user_func(array($f, 'talk')); call_user_func(array('Foo', 'talk')); // PHP Notice: Undefined variable: this in [...] That's what /u/Veonik was talking about. Not that fact that twig makes the decision on how to call a filter for you (it doesn't).
Like I said, you are right. What I'm trying to tell you is that it doesn't matter if Twig calls it statically or not, my tests will not, and that's what matters.
&gt; Absolutely not That is also a matter of opinion. This is just an article where I expose my opinion. My intention is not to change the Symfony documentation, but to show people that there are better alternatives to do things. If someone is going to read or not, I'm not so sure. You did read, didn't you?
I helped start the php user group in Cincinnati ohio, oink-pug we called it. It was a lot of fun. Then I had to leave them. Well I don't feel like I helped start it. But I'm pretty sure I was the first attendee. I met a lot of great people, and Zend even donated a BOXED version of Zend Studio 4! Damn that was a long time ago!
On a remote machine that has no prior experience (read "cache") of packagist, it's pretty essential.
resource types can't be stored (technically, can be stored, but will be useless/invalid in next request) as they all get cleaned up after script execution.
I definitely understand the opcode caching part, it's the userland caching that's a bit murky at this point. In my use case however, I would be using it on a VPS that hosts just one application. Multiple servers is not a concern at this point.
he means like if you have an object thats holding onto a file handle and reading from the file. if you were to serialize and then unserialize it, you would need to specify in `__wake()` to reopen that file.
https://github.com/rodsouto/vendetta-plus-legacy a mafia game i wrote a couple of years ago... use it at your own risk :P
I use this for making quick and dirty little databases. The code it generates is a mess, but when all I care about is some rough functionality quick, it's great. http://www.hkvstore.com/phpmaker/
I do have ImageMagick and Imagick installed. I've been working with them for about 2 years. It thumbnails the image, but it's just not animating it. 
Trying to get /r/zftalk going if you interested - though no videos sorry :(
yes, imagick is installed. I'm not getting any errors at all. 
I don't understand what you mean not giving any way to reproduce the test. The entire script i'm running is here. Any .gif would work. As i explained, it's working perfectly on Windows, the problem is with Ubuntu. if you want the image i've mainly been using to test with it's [Here](http://www.thisiscolossal.com/wp-content/uploads/2013/01/3.gif)
That sucks. I wish Imagemagick was easier to work with, it's far superior to the GD library or any other tools i've run across. I'm a big fan. The only problem I've really had with it is this. Installing it on Windows is a pain in the ass, but after you get it up and running, it's great. I've had this script working on Linux in the past, I just don't know whats up with it now. I was hoping it was something I may have forgotten or missed. 
Thanks :) there isn't an admin interface is there?
Thanks for all of the suggestions. Trust me, I tried most of this before I came here or even posted on StackOverflow. I brought a pretty obvious question here when I first started programming and got shunned right out of the room. That's not really something you forget about too easily lol. Anyway, I tried the echos, set an $i = 0, and looped it through the foreach. It wrote up to 30. The function is re-sizing the images, it's just losing the animation somewhere along the way. It works in Windows, just not Linux. In Windows, it's re-sizing and keeping the animation, for some reason, in Linux, it's re-sizing, but not keeping the animation. I haven't tried it on the command line with the exec function, but i will probably try that out this evening. The original file size is 640 x 640 and 711 KB. On windows, after resize it's 250 x 250 and 417 KB. In Linux, it's 250 x 250 and 14.2 KB. I'm assuming it's not saving the whole gif, but that doesn't really make sense to me either.(?) I have copied the Windows gifs over to Ubuntu, but not the other way around. I'll try that. I'm really starting to wonder if it's a permission problem. 
Here, I tossed the code for this in a gist. Feel free to try it. As a bonus I included my code to use gifsicle to compress gifs. https://gist.github.com/crosma/8969330
Start [here](http://www.php.net/manual/en/function.fopen.php) and [here](http://www.php.net/manual/en/function.fwrite.php)
I mean, the argument that it's the most widely adopted server side language isn't a good argument for its use. 
Is that how most people do it though? They use PHP to generate PHP? I was assuming there's a better language.
Around 7 months ago I posted about the alpha release to /r/php. [1] At the time, it was a single static class with ~500 LOC. I received a lot of great feedback from users here, which most importantly included using an OOP interface. After taking advice as well as pull requests from users and friends over the past few months, I've now released version 1.4.0. I think what I'm most happy about, and what may be the simplest idea, is having implemented the ArrayAccess interface with positive/negative indices. Looking at it now, it's easy to notice how large the Stringy class has become. It certainly resembles monolithic front-end JS libraries in length, which isn't very PHP-esque. I've thought of splitting things up a bit, but couldn't settle on a nice way of re-organizing things. I'd appreciate any ideas! [1] http://en.reddit.com/r/PHP/comments/1ivadx/stringy_a_small_string_manipulation_library_with/
Your reasoning is flawed in 2 aspects. 1. When a code is supposed to demonstrate/document a classes functionality, it is better to remove the unnecessary code and abstractions so that it is clear what is really happening. Because THAT is the purpose of the code in context. As /u/jaitsu mentioned, it is about what you are trying to achieve with the code. If you are targeting long term maintainability, then code accordingly. If you are doing a quick fix then adapt your coding to meet that requirement. If you don't understand this, you are going to have a hard time. 2. Best practices cannot be demonstrated or taught in one example. You can show how to apply these kind of things in a particular situation. But that does not mean the reader will be able to apply it in every situation. And also, if you don't know best practices already, then you probable wont even notice it being applied, unless it is accompanied by explanations stating why it is being done in a certain way. This ultimately clutters the documentation whose only purpose was to demonstrate how to use the library. 
Don't sell yourself short. If you can understand the basics of how to do something simple with the framework, you're already a step ahead of a lot of users who would be looking at your casts. If not, complete the quickstart guide. As you learn, screencast what you've learned. Ask for help here and in #zftalk if you need to double check your assumptions, etc.
It depends what you had in place prior: * If you had a custom autoloader, might as well keep it (but modify it to support psr4) in addition to composer. This way, both old and new users wont need to change anything. * If all your installs were exclusively via composer, you shouldn't have to change a thing (other than composer.json, obviously). * If you didn't have ANY autoloading prior, either use a dummy class where people are excepting it (i.e. don't break the api) or do a major version bump. 
But the lock file specifies exactly where to get the downloads from. The question is when running composer install does composer make any connections to packagist? The actual packages don't come from packagist.
Generally APC isn't used for the type of caching you're describing. The industry standard for caching is Memcached. Memcached is a server application, kind of like MySQL. You send it values from PHP, and fetch values from it. Memcached keeps all values in memory, which makes it faster to use than querying the database. Depending on your VPS and operating system, it can be easily installed using `sudo apt-get install memcached`. Ensure you have the PHP [Memcached extension](http://us1.php.net/manual/en/book.memcached.php) enabled, and you're all set. Using the extension is pretty easy. $m = new Memcached(); $m-&gt;set("foo", "bar"); echo $m-&gt;get("foo"); Using it to cache database results is equally easy. public function query($sql) { $key = md5($sql); $m = new Memcached(); $rows = $m-&gt;get($key); if (!$rows) { $rows = $this-&gt;db-&gt;query($sql); $m-&gt;set($key, $rows); } return $rows; }
This is how I do it more or less. Writing PHP files is not at all processor intensive so there's no need to optimize. You can write php/text files in whatever language you're comfortable with. 
&gt;Multiple servers is not a concern at this point You can either do it properly (in which case multiple servers will _never_ be a problem), or use APC as a mem cache and realise you're fucked if you want to run PHP 5.5, or multiple servers, or ... Use APC or OpCache for op code caching (you typically just enable them and forget they exist), and use memcache or redis for in memory key =&gt; value stores (these are things you specifically put into a cache and expire at some point). &gt;it's the userland caching that's a bit murky at this point It's literally a key value store that lives in memory. The advantage is that you get to retrieve the value at memory without having to calculate it or perform IO. The disadvantage is that you need to manage cache expiry - when does a value become stale? The only caveat to what you can store is that you cannot store resources (eg db connections), but this isn't usually an issue for this use case. &gt;Memcache/Redis but that looks so inconvenient Dive in there, it's not hard, really.
The Symfony documentation nor the framework itself is ever marketed as strictly adhering to SOLID principles. It has features that allow you, the developer, to write SOLID code much easier than most frameworks, but that is at your own discretion. While your solution may be technically more sound, more testable and be granted the blessing of SOLID-adhering developers everywhere, beginners simply just want working code to begin with, and the more knowledgeable developer will bring the example into their own style.
I think it depends on what you define as 'API'. If PSR-0 was a 'feature' before, because people could use their own autoloaders, I would consider this part of the API, and therefore a BC break. If using _your_ or the _composer_ autoloader was the _only_ supported way to use your library, then you shouldn't have to bump a major version, as the people affected by the change used your library in an unsupported way. 
To add to that.. I'm facing a very similar conundrum, but I've decided that the old directory structure is a vital part of the api. I found out that my libraries are packaged and part of the standard debian and ubuntu distributions. Because composer doesn't integrate well with packaging systems like aptitute, the packagers have simply excluded the autoloaders altogether. Other debian packages that depend sabredav all use their own PSR-0 autoloaders that use the include_path to find the library. I was surprised to find out about that, but since this organically happened, I now feel an obligation to not shift the directory structure around. I will probably still be switching to PSR-4, just not removing any top-level directories (which is possible!). 
&gt; So we just need to refactor our base extension class and get rid of that original mess: Bzzt! Fail. As per the Open/Close Principal, you are not allowed to refactor the base extension class. Being "closed for modification" you have to instead create a new class that inherits from the aforementioned class and contains your changes. 
generator for models/controler etc?
vim
I write generators in PHP, I tend to have a set of template files that require various input to generate their output. All that is done via the command line. Given that this is basically asking the user for input to various questions and then parsing a template with that input and saving a file, it doesn't generally matter what language you write it in, but if you already know PHP then why not just use it? For an example I would recommend you look at: https://github.com/JeffreyWay/Laravel-4-Generators
Your `trim` method is broken -- it calls the PHP built-in function `trim`, which is Unicode unaware. To properly trim a UTF-8 string use: `preg_replace('/^\\s+|\\s+$/u','',$str)` Try testing with a string with leading and/or trailing U+00A0s (i.e. the non-breaking space). Getting `null` back from `json_decode` isn't necessarily an error condition. `json_decode('null')` returns `null` in the same way that `json_decode('true')` returns `true`. You should use: json_decode($this-&gt;str); return json_last_error()===JSON_ERROR_NONE; You can replace the entirety of the `StaticStringy` class with use of the [`__callStatic`](http://www.php.net/manual/en/language.oop5.overloading.php#object.callstatic) magic method to make your life easier. You should include support for normalizing/comparing/collating strings. These are commonly-performed string tasks. For example, to compare two strings: `\Normalizer::normalize($a)===\Normalizer::normalize($b)` And to collate them: $c=new \Collator($collation); $c-&gt;setAttribute(\Collator::NORMALIZATION_MODE,\Collator::ON); return $c-&gt;compare($a,$b);
Well slowing them down means that it will be tougher for them to find what you are using and they may never find it or may even give up. However, slowing them down does not mean that you are relying on obscurity because when they do find what you are using they may still not be able to exploit it because of your secure setup.
Or even better, start [here](http://de1.php.net/manual/de/class.splfileobject.php) (although ironically SplFileObject doesn't have all the capabilities of a file handle and the file functions, but it can do the most important things.)
Thanks for pointing out trim! I'm not sure how that's gone unnoticed for so long. I'm doing something similar with collapseWhitespace, e.g. mb_ereg_replace('[[:space:]]+', '', $this-&gt;str); And you're right with isJSON as well. In regards to using __callStatic: I've struggled with that idea for a bit. I've kept it because people generally seemed split on which interface they preferred, and I didn't want to make the documentation hard to access for that use case. Though for the most part, it is just adding an initial arg, and optional last arg.
Sorry, just replied to last message in thread ;). Forgive me!
I think I'm being misunterstood here. I really appreciate the criticism. My intention was not to be pedantic. I was just trying to explain the reasons why I feel some of the arguments – that actually sound pedantic as well – do not apply.
If they are bullshit, why would I do them in the first place? That was just an example of what I've seen in my experience. People may disagree.
I'm clearly being misunderstood here. My intention was not to reach the beginners who are actually learning the first steps with the cookbook – I myself learned a lot with it. I'm trying to reach people that have been using bad practices for a long time and show them there are different approaches of writing code and different perspectives for what they see in a cookbook.
Personally, I don't consider the directory structure to be part of the "public API" and hence have only been bumping the patch version for releases that switch PSR-0 to PSR-4. I can get away with this because the only "supported" installation method for my packages is composer, and hence nobody using it normally should be affected... if anybody is even using the stuff!
What's with the French and their resilience on speaking english? It's their main audience here, isn't it?
Next awecodes will be recorded in English :-).
Perfect. Because the way it's now it's hard to both follow subtitles (they don't contrast enough), and impossible to listen while inspecting the code being "rendered".
&gt; OP: I'm familiar with PCI compliance issues and we'll be using a javascript direct to processor system to keep credit card info away from our server Omnipay seems to be a PHP framework which handles the credit card info and passes it on to the payment gateways. Does it have any features for these javascript encrypted type payment gateways?
Ok. Thank you for the feedbacks (https://github.com/hoaproject/W3/issues/4). We will fix it for the next ones :-).
Right, this is what I mention in the title of the post, but as a lowly front-end guy I don't quite understand enough PHP to get that working without Symfony. A nudge in the right direction?
You most likely want to take a look at the [public API](https://github.com/everzet/jade.php#public-api) which you can use with plain old PHP. If by "without Symfony" you meant without the only mention of Symfony in the entire project, the UniversalClassLoader, you can do that, too. If you're using Composer, add this project as a repository, and add a class map for it (since it has no composer.json with PSR-0 or what have you). Edit with even more explanation: You will have to figure out how to a) autoload and b) initialize any library you plan to use in PHP. I would highly recommend learning a tiny bit about DI and how it can help you, and look for DI in your PHP framework, if any. If none, make your own! A simple service locator should be easy and will help you a lot. 
Thanks, I looked at it. For some reason I thought this was written as a plugin for Symfony. Again, my knowledge of PHP is `includes` and `for` loops. Essentially I could add the jade.php files to my project, and copy/paste the code from the public API, and that would allow me to render Jade templates using echo `$jade-&gt;render($template);`, yeah?
If you want to write a PHP file that is includable and would just return data, then in the case of json: $jsonFile = 'jsonFile.json'; $data = json_decode(file_get_contents($jsonFile), true); $phpContents = sprintf('&lt;?php return %s;', var_export($data, true)); file_put_contents($phpContents, 'targetFile.php');
I meant what program is he using as his terminal, I guess, or what version of vim. The color scheme is easier on the eyes, the lines seem more spaced out, and at the bottom it shows which mode he is in in vim in an easier to read format. Edit: Ok, well I'm not sure it's exactly the same, but [powerline](https://github.com/Lokaltog/powerline) seems to be it or very similar.
Or, you can use [atoum](http://www.atoum.org/atoum) to write your tests and having a more simple and intuitive API to [mock object and function](https://github.com/mageekguy/server/blob/master/tests/units/classes/socket/manager.php): $this-&gt;function-&gt;system-&gt;doesNothing; // Call your method $this-&gt;function('system')-&gt;wasCalledWithArguments('echo "Hello, World!')-&gt;once; 
Use `.` instead of `+` should be :-).
he uses the normal terminal or iTerm, its just his vim skin (he also uses powerline)
Ze
Your first option could work, just include a calculated hash as a querystring parameter, similar to how interacting with AWS works. If any part of the URL is modified, the hash will no longer match a server-side check and the request can fail.
You did change it's behavior as it now runs differently depending on what other class you inject. If you are going to preach SOLID!!!! you might as well try to follow it's rules. (At least until you figure out that it us garbage.)
Donated
I get what you are saying. What do you think of this: abstract class MoneyFormatterExtension extends \Twig_Extension { protected $formatter; public function __construct(MoneyFormatter $formatter) { $this-&gt;formatter = $formatter; } public function getFilters() { return array( new \Twig_SimpleFilter($this-&gt;getFilterName(), array($this-&gt;formatter, 'format')), ); } public function getName() { return sprintf('%s_money_formatter_extension', $this-&gt;getFilterName()); } abstract protected function getFilterName(); } class WeirdFormatterExtension extends MoneyFormatterExtension { public function __construct(MoneyFormatter $formatter) { if (!$formatter instanceof WeirdMoneyFormatter) { throw InvalidArgumentException('Invalid weird formatter.'); } parent::__construct($formatter); } protected function getFilterName() { return 'weird'; } } class GDPFormatterExtension extends MoneyFormatterExtension { public function __construct(MoneyFormatter $formatter) { if (!$formatter instanceof GDPMoneyFormatter) { throw InvalidArgumentException('Invalid weird formatter.'); } parent::__construct($formatter); } protected function getFilterName() { return 'gdp'; } } I guess this is not hurting the OCP, now? =D
This works because of [this](http://www.php.net/manual/en/language.namespaces.fallback.php) &gt; For functions and constants, PHP will fall back to global functions or constants if a namespaced function or constant does not exist. (for version &gt;= 5.3) 
Interesting question. If I don't have the subclasses in mind, then I don't care about having the extra design work. The thing is, we generally don't like to thing of the possibilities because that usually leads us to think in a more abstract way, which is really difficult and uncomfortable – for most people. But yes, this is not hurting the principles now.
The documentation for Omnipay can be found here: https://github.com/omnipay/omnipay/blob/master/README.md Please spend the 3 minutes reading before asking.
Though it is a bit off topic, I highly recommend the .NET Framework Design Guidelines. Instead of a bunch of arbitrary "principles" it focuses on API design with a lot of discussions about how choices affect the user of your classes and how it limits your options when you want to make backwards compatible changes later. The big problem with SOLID is that it isn't well thought out. He just assumed that they were universally correct and then ran off to join the speaker's circuit. In the book above they explicitly tell you when the guidelines can or even should be broken. 
There's an easy trick to cache any type of value in memcaced, or anywhere else for that matter (including MySQL). Just JSON encode the object. $obj = new stdClass(); $obj-&gt;name = "headzoo"; $val = json_encode($obj); $m = new Memcached(); $m-&gt;set("foo", $val); $val = $m-&gt;get("foo"); $obj = json_decode($val);
I'll have a look, indeed. Thanks for the great contribution! =D
Don't do that. MD5 is a [Merkle–Damgård hash function](https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction), which makes `md5 ($secret . $message)` vulnerable to a length extension attack. A collision can be efficiently calculated, and then anyone can impersonate your legitimate users and wreak arbitrary havoc. (Disclaimer: the author is not actually a security professional and found these facts lying around on Google.) What you want is an HMAC. Fortunately PHP has those as of 5.1.2. Adapting your example: $authentication_code = hash_hmac('md5', implode($params), $privatekey); This part of the signature scheme is now secure against all known attacks (although I'd consider replacing MD5 with something from the SHA2 family for wider security margins). Depending on how you verify the MAC, though, you might still be broken. The obvious thing (`$client_mac === hash_hmac($hashfunc, $message, $privatekey)`) is vulnerable to a timing attack. The solution is to [MAC it again](https://www.isecpartners.com/blog/2011/february/double-hmac-verification.aspx): function verify_mac($client_mac, $message, $privatekey, $hashfunc = 'md5') { $theirs = hash_hmac($hashfunc, $client_mac, $privatekey); $ours = hash_hmac($hashfunc, hash_hmac($hashfunc, $message, $privatekey), $privatekey); return $theirs === $ours; } … Okay, that's everything I can think of off the top of my head. tl;dr security is hard.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Merkle–Damgård construction**](http://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd%20construction): [](#sfw) --- &gt; &gt;In [cryptography](http://en.wikipedia.org/wiki/Cryptography), the **Merkle–Damgård construction** or **Merkle–Damgård hash function** is a method of building [collision-resistant](http://en.wikipedia.org/wiki/Collision_resistance) [cryptographic hash functions](http://en.wikipedia.org/wiki/Cryptographic_hash_function) from collision-resistant [one-way compression functions](http://en.wikipedia.org/wiki/One-way_compression_function).:145 This construction was used in the design of many popular hash algorithms such as [MD5](http://en.wikipedia.org/wiki/MD5), [SHA1](http://en.wikipedia.org/wiki/SHA1) and [SHA2](http://en.wikipedia.org/wiki/SHA2). &gt;The Merkle–Damgård construction was described in Ralph Merkle's [Ph.D.](http://en.wikipedia.org/wiki/Doctor_of_Philosophy) [thesis](http://en.wikipedia.org/wiki/Thesis) in 1979. [Ralph Merkle](http://en.wikipedia.org/wiki/Ralph_Merkle) and [Ivan Damgård](http://en.wikipedia.org/wiki/Ivan_Damg%C3%A5rd) independently proved that the structure is sound: that is, if an appropriate [padding scheme](http://en.wikipedia.org/wiki/Padding_(cryptography\)) is used and the compression function is [collision-resistant](http://en.wikipedia.org/wiki/Collision_resistance), then the hash function will also be collision resistant. &gt;The Merkle–Damgård hash function first applies an MD-compliant padding function to create an output whose size is a multiple of a fixed number (e.g. 512 or 1024) — this is because compression functions cannot handle inputs of arbitrary size. The hash function then breaks the result into blocks of fixed size, and processes them one at a time with the compression function, each time combining a block of the input with the output of the previous round.:146 In order to make the construction secure, Merkle and Damgård proposed that messages be padded with a padding that encodes the length of the original message. This is called length padding or **Merkle–Damgård strengthening**. &gt;==== &gt;[**Image**](http://i.imgur.com/AOaMzHo.png) [^(i)](http://commons.wikimedia.org/wiki/File:Merkle-Damgard_hash_big.svg) - *Merkle–Damgård hash construction* --- ^Interesting: [^SIMD ^\(hash ^function)](http://en.wikipedia.org/wiki/SIMD_\(hash_function\)) ^| [^One-way ^compression ^function](http://en.wikipedia.org/wiki/One-way_compression_function) ^| [^Cryptographic ^hash ^function](http://en.wikipedia.org/wiki/Cryptographic_hash_function) ^| [^MD5](http://en.wikipedia.org/wiki/MD5) *^\/u/lisp-case ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfeh51q) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfeh51q)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 55680:%0Ahttp://www.reddit.com/r/PHP/comments/1xt696/question_how_would_i_implement_an_api_for_a/cfeh4tx)
Ça fait du bien d'entendre un peu de français dans cet océan anglo-saxon. Merci ! Vous avez fait ma journée.
Hey this is pretty cool reading. Thank you for your message. Edit: I'm glad the current application i'm developing is pretty object oriented and I can adapt your advice with minimal effort. Thanks again! Yet another edit: i'm so glad you shared this, really. I was able to implement it in just 5 minutes and it's a real boost to security. FYI I checked and I was using sha1 instead of md5, but I guess both md5 and sha1 are pretty vulnerable
Just glad I could help make the Internet somewhat more secure.
If the opening and closing brackets has any meaningful impact on the application, PHP probably isn't for you. Also, you're facebook/google/&lt;insert company with huge net presence here&gt;. 
Oh, fuck off, you're worse than the trolls on usenet. Here's a guy who has accomplished something and wants to share, and all you want to do is tear him down. [edit] Mea culpa, I've made similarly snarky comments on any number of spam submissions. This post flew under my radar and I responded as if it had been a legit question. Upvote for you.
Seriously? As far as I can tell, this is spam meant to get search engine traffic. See the hundreds of functionally identical answers here: https://www.google.co.uk/search?q=Get+The+Page+URL+Using+PHP
I love your 'relax' section lolol.
Well I'll be fucked. I'm a regular submitter to /r/reportthespammers and can usually pick them out fairly well. This one really got over on me as I didn't bother to check out his user page.
And he's gone. I apologize again to /u/xentralesque and /u/jsims281. 
Yeah, he's toasted now. Quite sorry to have been an ass. It's mid-day and I guess the coffee has worn down.
It's ok. I was being shitty and without context, your response wasn't exactly out of line :) In New England we have a tough time communicating without sarcasm too!
I feel a bit bad now. I hope we didn't just make an honest blog poster quit redddit.
I don't believe he voluntarily quit. :X
I wasn't sure about this one. [The League of Extraordinary Packages](http://thephpleague.com/) have a bunch of packages, and the idea of forcing every one of the developers to release a new major version just for switching to PSR-4 sounded awful. Some devs were going to do it as a patch version, because they didn't consider it to be breaking the API. After-all, pretty much every installs this with Composer so theoretically its a completely innocuous update and nobody should care. We eventually settled on a minor version, because the only people who would be effected were those including files directly with `include` or `require`, and those folks would notice the change VERY quickly. It's not an API change, just a filepath update, so... I say release a patch version. Save major for something more important. Alternatively, if you have a major rewrite coming up why not make PSR-4 part of that. There is no rush.
Here's a test from a while ago: http://stackoverflow.com/questions/2437144/opening-closing-tags-performance =)
The mantra is throw early, catch late. So yes, always catch in a controller (seems counter-intuitive since technically a controller is the first thing that's called when executing your code, but it's actually the final place where exceptions should be caught - I may not have explained that correctly)
Catch where it's being called and should be handled. I try to avoid doing much if any error handling in the controller because that starts to incorporate more domain logic. I have found that handling the exceptions caused by an API as low-level as possible is best, that way the API specification is abstracted away from your application and you can quickly insert your own exceptions if you need. You can still bubble up additional exceptions if that's how you have designed your application to handle errors that happen. From a readability standpoint, I'll often have top-level items that are used in a controller return false and provide error messages if needed and either an empty relevant object or null if there's nothing to return. That way I avoid all of the possible catch variants in the controller and move them as far down the chain as I can go. $album = $albumCollection-&gt;search(...); if (!$album) { $messages = $albumCollection-&gt;getMessages(); } Just be careful of where and how you use exceptions. They can be great for fine-tuned application management if done right, but using them as state triggers or a notification system gets ugly fast. One such nightmare I encountered dealt with doing daily pricing calculations on a collection of dates. The original programmer did something like this: foreach ($dates as $date) { try { $date-&gt;calculatePrice($calendarWindow); } catch (Exception $e) {} } We ran into a problem below this level, further down deep into the calculation of the price, that was throwing a system exception. Expected behavior was "try calculating, if it doesn't work, then just move along" and suppressed everything. If you're doing something like this when you mention "using exceptions to handle application functionality", then don't do it. Doing something like logging out a user upon a specific exception is handling the exception, just don't do so blindly like you have a hammer looking for a nail.
So, two things to point out here: #1 - Code should only catch an exception if it's prepared to handle it. "Handle" is kind of a fuzzy concept here, but, generally speaking, this means either *do something* (e.g. log, email, recover) and continue processing, or *rethrow*. Rethrowing is kind of a hot button issue for some folks, but to clarify: you should never rethrow the *same* exception. Code should operate in layers of abstraction, and any given layer should only know/care about the one directly below it. So, if your database abstraction layer catches a `PDOException` when trying to run a query, it should not rethrow that same exception; however, it *could* throw a custom `UniqueConstraintViolationException` or some such thing. The layer above your DBAL could then catch those `UniqueConstraintViolationException`s and throw `DuplicateUserException`, and so on and so forth up the abstraction tree. This is not to say that you should catch/rethrow on every layer of abstraction, though; do it where it makes sense... #2 - Don't use exceptions for logic or program flow. Relying on an exception to bubble up in order to log out a user is a prime example of a violation of the separation of concerns principle. Your authorization layer should not care or even be aware of exceptions thrown deep inside your application, and *definitely* shouldn't rely on them.
Can you try to install graphicsmagick instead on the linux box? - Its fully compitable with php5-imagck - Sometimes graphicsmagick is better, sometimes not
an update to PSR-2 would be awesome! However, in order to appease everyone in the spaces v. tabs debate i don't think ignoring the issue will help any, as a new PSR regarding coding style will bring out all those people again who are complaining. I think one of two options are better: 1. Omit indentation entirely 2. allow for spaces or tabs, but never a mix of both in a project, and define a tab as equal to 4 spaces in width. Either of those options should silence anyone who's hoping to bring up that debate all over again.
Actually, exceptions should be caught as early as possible, where you can do something meaningful with them. For example, you have a form that has a zipcode validator has uses an external webservice and you don’t want your production setup to crash if the external webservice is not responding. 1. PHP Library throws an Exception 2. The Service encapsulating the Library (exposing it to your application) receives the Exception. 1. If in dev environment, throw the Exception. 2. If in prod, log the error and provide fallback validation with a simple regex. 3. The Controller receives the Exception and displays it. All together, you should always have a last barrier that catches exceptions. Symfony has an Event Listener that will catch any exception and do some kind of 500 rendering.
Yeah, it's looking like an imagemagick or imagick bug. I'd go check the official forums and/or bug trackers of whichever one it is once you figure that out. I suspect it's trying to save each frame separately, but with the same filename. Hmmm, imagemagick can take some %format codes in filenames, can't it? You might be able to find one for the index, and see if that generates a bunch of files. Or maybe change the code to do that and merge them together afterwards as a workaround. It's almost certainly not a permissions issue - if that were the case, you wouldn't be getting any output image. There's the off chance that it's doing something unintuitive with a temp dir, which might be subject to permissions issues. The other extremely long shot is that your ubuntu drive is almost full, and it runs out of space after the first frame. You'd think you'd get an error from that, but you can never be sure about low level stuff like that.
What do you mean by 2 ? The Symfony firewall will route your page request to the corresponding Controller, it will in turn throw some sort of unauthorized exception and this will bubble up as a 401. However, you can configure an event listener to catch it and redirect you to the login page with a message.
&gt;I'm for #2 with a minor change - my tab stop can be any size I like. I like to use 8 on my laptop because it makes code blocks far more obvious on the smaller screen, but 4 on my big monitor because it's easy to read. That's kind of the point though. Spaces were chosen to allow for consistency across platforms. If the standard specifies a tab as 4 spaces, great that's the standard, now everyone can set it there and expect the same result. If in your case you want it bigger, you of course can do that with no affect to the file in question you're editing it's just a way of defining how the file is supposed to look. also spaces for aligning operators is a good idea.
The concept is similar to the [Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter). Any given abstraction layer should only know about and be able to intelligently react to the layer directly below it. For exceptions, this basically just means don't catch any exceptions that the layer below didn't throw. Exceptions can be made (pun intended) to this rule in certain special cases, such as catching all unhandled exceptions that bubble up through a controller in order to provide a 500 Internal Server Error response back to the client, rather than letting them continue to bubble up to the global exception handler (or worse, result in a PHP fatal error).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Law of Demeter**](http://en.wikipedia.org/wiki/Law%20of%20Demeter): [](#sfw) --- &gt; &gt;The **Law of Demeter** (**LoD**) or **principle of least knowledge** is a design guideline for developing [software](http://en.wikipedia.org/wiki/Software), particularly [object-oriented programs](http://en.wikipedia.org/wiki/Object-oriented_programming). In its general form, the LoD is a specific case of [loose coupling](http://en.wikipedia.org/wiki/Loose_coupling). The guideline was proposed at [Northeastern University](http://en.wikipedia.org/wiki/Northeastern_University_(Boston,_Massachusetts\)) towards the end of 1987, and can be succinctly summarized in one of the following ways: &gt; &gt;&gt;* Each unit should have only limited knowledge about other units: only units "closely" related to the current unit. &gt; --- ^Interesting: [^Demeter's ^Manual ^of ^Parliamentary ^Law ^and ^Procedure](http://en.wikipedia.org/wiki/Demeter%27s_Manual_of_Parliamentary_Law_and_Procedure) ^| [^George ^Demeter](http://en.wikipedia.org/wiki/George_Demeter) ^| [^Demeter](http://en.wikipedia.org/wiki/Demeter) *^\/u/drrck2403 ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfep99x) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfep99x)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 56039:%0Ahttp://www.reddit.com/r/PHP/comments/1xu15u/best_practice_where_to_catch_exceptions/cfep8ui)
Have you ever heard of angularJS? This is actually the the basic principle of how angularJS works - load page template, make ajax call to get data, and then let the framework populate the data throughout the page. 
So it takes 22,500,000 instances to see any difference on what's likely to have been PHP 5.3, given the age of the post. Redo the tests on PHP 5.5, I doubt you'll see much difference now that things are opcached out-of-the-box. 
Why wouldn't something that affects performance matter?
This rebuttal is nothing new. It's the same "extreme verbosity in every instance is best for consistency, and if you let somebody make a choice then you have to guess" argument. In reality, I have not seen a single instance where this guess is confusing. If somebody can give me an example of a confusing setup with PSR-4 then is be excited to see it, but I'd almost certainly suggest that whoever used it in a confusing way is doing it wrong. Giving people a little power to make a choice should not be considered a negative, and should not be a valid reason to keep PSR-0 alive forever either.
When your performance related optimization doesn't even make a blip in the profiler graphs in comparison to the rest of the code, it doesn't. In particular open and close tags only affect the tokenizer, not the runtime.
Well sure, but the question was "does it affect performance", implying the person hasn't even really tested it, so they don't know. It seems like asking "does it matter?" implies the person asking the question should already know that if it does affect performance it's a very small amount.
http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html
I don't think aiming to appease is really something we should go for. Let's take another example of A v B shouting, with an arbitrary choice of A: Composer. When it was being developed Jordi was having a bunch of people complain. Should it be JSON or YAML? Both had completely equal merit but those that preferred one would fight to the death to make their format win. In the end Jordi just picked one, and stuck with it, saying something like "50% of people were gonna be mad either way, and that just happens to be the YAML fans" or something. Keeping white space consistent (whichever way it goes) is certainly the most important part. Avoiding the situation and saying "both are fine just be consistent" still leads to a lot of instances of "my IDE changed everything and I didn't know if you were using tabs or spaces and I rewrote your whole file and everything is green and red". Saying "sorry tabs, you lost. everyone uses spaces all the time" avoids any of that. I was tabs, then I switched my editor and I never cared again. This standard will almost certainly not redact that rule. That's just how I think it will be best that way at least. :)
I think the key part to this is to create a service that abstracts libraries from controllers. They are not often mentioned in MVC design, it seems. Good suggestion, though. I might generally suggest that services don't concern themselves with logging, however. I feel like "Exception" should bubble all the way up, and the last thing that happens is that unhandled exceptions are logged.
Indeed. I usually have a logging interface akin to this, which does make it really easy. I suppose I'm just more apt to throw exceptions from libraries, and let the application worry about logging. Granted, services are part of the application, so I'm retracting that part of my statement above, now that I'm rehashing it. class Log { const LEVEL_EMERG = 0; ... const LEVEL_DEBUG = 7; static function Message($message, $logLevel=Log::LEVEL_NOTICE) { ... } }
The rebutter agrees :) https://twitter.com/itafroma/status/434118334812913664
Thanks for the help. I too am thinking i stumbled upon a bug. I found [This](https://bugs.php.net/bug.php?id=61879) bug report last night when I was looking around. The only real difference is that the reporter is using PHP5.4 and I'm on 5.3. I'm using 5.4 on Windows, I just updated. It was working on 5.3 in the past. I was pretty sure when I mentioned it, but didn't think it was a permissions issue either, just throwing it out there to see if anyone else might have had a similar issues. If it were a permissions issue, it'd throw out an error, I would imagine. And no, my drive isn't almost full, I still have a few hundred Gb left, so not even close. I would imagine i'd be getting a write issue if it were though. That's why I went from having a VM to a dual boot. But thank you for your insights, I'm gonna reach out to ImageMagick and see what they have to say. If you're interested, I'll post my results here and let you know. Thanks again. 
I'm pretty sure it's a bug i've come across. I found [This](https://bugs.php.net/bug.php?id=61879) while tooling around. I've never heard of graphicsmagick, i'll have to check it out. Thanks for introducing me to it. 
Thank you very much for the gist. I'll most definitely check it out this evening. 
I don't know about your host, but I know my doesn't allow the use of FFMPEG to work with videos. I'm on a shared hosting plan. They don't just come out and say it either. I had to tool around their knowledge base; that's how I found out. I'm currently on BlueHost.
As any developer will tell you, this is not what makes your app slow. I bet you one query from your DB will take longer than 1 million php tags.
I just looked at that bug report - damn, it's amazing how much trouble a simple typo can cause! No need to post back here. The problem solving is more fun than the solution. Good luck!
The difference though is composer isn't a standard it's a project. It's still valid if no one uses it, comparatively a PSR is a standard and has no relevance if not widely adopted. 
I did, and there's no mention of JavaScript or encryption. So I guess I should have just made an assumption that a basic README lists everything that it can possibly do, rather than inconveniencing you with a yes/no question. Hope I didn't ruin your day.
Thanks, I did end up posting a bug report to Imagick. I ran the function on the cmd line like I guess i should have at the beginning, and it worked flawlessly. 
Why would running composer through HHVM make it faster? Almost all of the time is spent in network requests or file access - HHVM doesn't paralellize these magically does it?
this has always been of particular interest to me. it always seems that shared hosting doesn't allow you enough control to do this.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: http://www.reddit.com/r/Serendipity/comments/1xv3nh/best_practice_where_to_catch_exceptions_xpost/
I've managed to use FFMPEG on quite a few shared servers now. It looks like you have some sort of codec error - I'm no FFMPEG expert, but it looks like it's trying to create a video from PNG files? The errors could be coming from a few places: * Your inputs aren't PNGs (possibly they're missing they're extension, .png?) I think this is most likely. * The output codec isn't installed. This is also quite likely. It might be possible to install them if you have SSH access. * The version of ffmpeg running on your server is different from the one used by your program (I know that over one version change a lot of args changed, but that was a while ago) It's hard to tell without knowing what commands are being sent to it. FFMPEG will most certainly be doing some sort of compression. I don't know about PHPmotion and how it's configured, but claiming to be a youtube clone, it would probably create ~10 copies of a video at different resolutions/for different filetypes. I think youtube actually creates like ~20-30 different files. Lemmie know how you get on.
If this is the method you're exposing as your API endpoint, nothing else should be calling it. If you need to make calls to the same sort of code, abstract it into another method, and make your other code AND the API endpoint call that method. The API endpoint can then handle the exception as it sees fit, as well as everything else. Here's an example class APIManager { function getData($json) { $params = Convert::json2array($rawParams-&gt;getBody()); // do whatever else // oh shit, an error throw new APITokenInvalidException(...); } } function ajaxcontroller($rawParams) { try { $api = new APIManager; $json = $api-&gt;getData($rawParams); } catch(APITokenInvalidException $e) { $json = "invalidToken"; // Token is invalid, send notification to ajax } $this-&gt;returnJsonResponse($json); } function someOtherMethod() { $api = new APIManager; $json = $api-&gt;getData(""); // this guy doesn't know what to do with the exception, and it just bubbles up }
My whole point there is when you make something that lots of people will use, you are forcing that decision on multiple people. Asking those people to use JSON instead of YAML, asking those people to use spaces instead of tabs, asking those people to use brackets on a newline or the same line, its all the same shit. Picking one regardless of blowback is the only move. Changing it randomly to keep the masses happy does not help anyone, especially when no choice will actually make people happy. :)
Not enough for anyone to ever give a shit about.
Let's put it simply. In an age where processor power and storage is so cheap that it is considered just fine to load huge amounts of individual PHP files and include files and issue a dozen separate database requests for a single page (this is what you typically see with any "framework" like Symfony or Yii) ... don't worry about the little things. Write your code in the most meaningful and easy to understand way, even if it seems wasteful. What you are asking about is roughly the equivalent of people hand optimizing the assembly instructions in programs in the 80s and early 90s to gain a little more performance out of the limited CPU. We are way past that. Processor power is cheap. And unless you are Facebook or Twitter, your page isn't likely to be requested the 10,000 times per second it would require to bog down a typical low-end server. (And even Facebook and Twitter started with the same kind of code you're going to write, then optimized it or changed technologies later on when it REALLY mattered - like when they were bogging down hundreds of servers at once and the time investment was actually worth it.) 
Any editor worth its shit should be able to make spaces act like you are using tabs. It's really not a problem and one that can easily be solved and has been in many editors.
Consider buying a cheap VPS and do whatever you want like this one: http://cloudatcost.com/. I have two machines with them. They are not very reliable, but you get what you pay for. You can, for example, setup a queue on this machine and offload the conversion to it. A bit more setup, but may be worth it.
You're probably right. 
I like how people treat these things like they're hard rules. As if not following them to the letter will cause the standards police will break down your door claim you're resisting arrest while beating you to death with a printed PHP manual. The PSR collection isn't a bad choice if you're on the fence and don't want to think about that end of it, but really. If I decide to use Allman (my prefered) over K&amp;R (PSR-1) with 2 space indents does it really make any difference? No. This is just arbitrary bullshit that has absolutely no impact on the executing of the code and doesn't hurt readability at all provided the style remains consistent.
It shouldn't even be a debate. Conform to whoever made the call in the project because it ultimately doesn't matter.
I think the PSR-2 hand-wringing is going to be all for naught when, after a period of good faith efforts from the most marketing-inclined projects, support is quietly dropped to quell the multitude of grunt-level devs who will rant until things go back the way they were, or the projects just slap a script that does the formatting automagically into their build process. It's just a dead-end that is divisive for no reason other than it "seems" like it should be a standard. In an age of IDEs smart enough to auto-format your code to any arbitrary spec there's no need to waste human braincycles on something so trivial. The real war isn't tabs vs. spaces, it's "who the fuck thought naming all of these variables $a, $aa, $aaa, etc. was a good idea?!?!"
Just another thing to consider... Don't catch exceptions if you want to do logging or email alerts. Only catch them if you want to try and recover from the exception. Logging and email alerts should be handled through a combination of: * register_shutdown_function * set_error_handler * set_exception_handler The first catches fatal errors (php parser errors and the like), the latter 2 will catch almost all other runtime errors. These can all point to the sae error handler class/function which can handle alerting you in any way you desire.
That's exactly it: 1 tab = 1 unit of indentation. No need for any editor support.
Youtube creates like ~130 different files (some of them are audio only) from each video uploaded. Some of them are especially for iOS devices.
I used to be a tab fan and an switched to be a space one, simply because every-time I tried to paste a tabbed indented file on different IDEs or vim each of them interpret the spacing differently while spaces are the same measure everywhere. Not trying to change your mind, just giving my opinion.
Standards are great for teams! I lead a team of 14 PHP developers if I would try to come up with a standard with the team it will take us months just to get everyone to agree with one. It's easier to say, "Guys we use PSR-2 here" and everyone will know what you're talking about and can set their IDE/Editor to comply with it, set and forget. That's one thing Visual Studio .NET did right, all code is automatically formatted and there's no way to change it. In the end even if there's someone that doesn't like it the code will be consistent across projects and this saves a lot of time while reading code.
The problem will arise when new people on a big old project will have to guess their way around multiple hierarchies. Creating new code and working with cutting edge libraries is fun. But a lot of people are stuck doing maintenance work on shit codebase with outdated versions of everything and I don't see this changing anytime soon.
&gt; Keeping white space consistent (whichever way it goes) is certainly the most important part. Avoiding the situation and saying "both are fine just be consistent" still leads to a lot of instances of "my IDE changed everything and I didn't know if you were using tabs or spaces and I rewrote your whole file and everything is green and red". &gt; I was tabs, then I switched my editor and I never cared again. At work, we don't use PSR's, but I'm trying to get them to at least look at them. Instead of Composer and PSR's, we use PHP 4 or if I'm really lucky, 5.2. We've been talking about stuff like whitespace, though. I'm a spaces guy myself but I don't much care either way. So I asked the rest of the team, spaces or tabs? Everyone went "meh" except one guy who said tabs, so we're doing tabs now. As a result, I tend to find myself fixing whitespace whenever I work on a few files at once. What I tend to do is make two commits. One will have the commit message "whitespace/formatting" or something and the other will be the actual stuff I've been working on. Using gitk to see the diff without the whitespace changes, and git gui to commit hunks or even lines at a time, makes it really easy, but you can always just do the whitespace stuff first, commit that, and then do the other stuff.
Phil, well explained and clearly written as always. Assuming you're looking for input: I'm confused about the intent behind PSR-7. Looks to me like it's just PHP utility classes. So why not build a library, add Composer support and chuck it on Github instead of making it a standard? Also, PHP has headers stuff and streams stuff, why should you put it in a PSR? I am very good at overlooking obvious stuff: am I missing something here?
Even if it did, it's irrelevant. What would be the alternative of *not* using many &lt;?php tags in a template?
&gt;I have an application (Javascript) that another company wants to use on their website. I want to maintain the application on my servers, so I am not willing to just hand over my code. This is nonsensical. How do you propose to hand them javascript code without handing them javascript code??? The best you can do is obfuscate it.
'Cause it's a stupid question. You're asking why company a doesn't behave the same way as company b.
I've used ffmpeg in the past but soon realised a cloud encoding service is the only way... I have used zencoder.com daily for a few years and had no problems at all. Any format a customer uploads, zencoder handles. 
&gt; So why not build a library, add Composer support and chuck it on Github instead of making it a standard? Have you seen Monolog? By making a standard out of it you can ensure consistency between implementations and extensions.
Maybe I should have asked this differently, as obviously you didn't understand the question at all.
Exponentiation operator? Fuck yeah!
I really think PHP-FIG should concentrate more on the metaprogramming stuff, like indentation/whitespaces/autoloading etc. But defining interfaces for every little thing, seems like: - Well, we gathered up to come up with some standards, and we did, so what do we do now? - Perhaps we should jsut leave it at that and go home? - Nah, let's create more standards for no reason. I get the reasoning behind standartizing logging and caching, because you typically have one of those services and have to be sure that all your components know how to use it. But "HTTP Message Proposal" is really going too far, next thing, you will come up with an interface to modify images or something.
** &lt;3
&gt; Tabs for indenting, spaces for formatting. Use things for what they were made for, it makes sense. Except in practice, that doesn't work, because the tab character can be and often is represented as something other than four spaces (eight, particularly). Yes, you can solve this. No, you shouldn't have to.
lol
I don't even bother with windows anymore, use vagrant and be happy!
Wow, I stand corrected, nice one!
Calculating the correct sales tax sucks. Sucks so much, in fact, that there are companies who do nothing else but tell e-commerce companies how much tax they should charge based on the contents of their cart. Essentially, you send them a request that describes the cart and they send back how much sales tax you should charge based on the byzantine sales tax rules for each state - and it's more accurate than just charging one sales tax rate for every purchase in a state, since there can be different tax rates for different locations in the same state (due to local/county taxes, etc.) Tracking all this shit is what you pay them for. [Avatax](http://www.avalara.com/products/avatax/) is the one I'm familiar with, but I'm sure there are others.
Quite simply, catch it where you can handle the exception. If you can't handle the exception in a specific layer, don't catch it. Instead, let it bubble up your application and give a higher layer a stab at it. If the exception is never caught, log that shit with an exception handler. 
You should probably take a shot and try configuring your IDEs then, as that mitigates your issue. Sure, using default OOTB configuration is more than likely not consistent across the board, but they can all be made consistent.
Same here. Having said that, we've started the migration process to Linux.
Really? Why?
help docs plugin
Cry me a river...
I'm not following. If I set my tab-width to be 2 chars, obviously the line-lengths are going to be longer for someone who sets their tab-widths to be 4 chars. The fact that I can change the widths of my tabs means it's impossible to keep my code at certain line lengths. For example, how would one control the tab widths of code viewed in a browser or other anything else outside of your text editor? [edit] here's a really good example, google code showing tabs as 8 spaces: https://code.google.com/p/jsdoc-toolkit/source/browse/trunk/jsdoc-toolkit/app/frame.js 
Path difference is not related to PHP. It's related to OS. As for functions working differently, sometimes functions may return different types on different platforms, but I never had an issue with a function that behaved differently on Windows. I used to develop on Windows (Wamp) for a long time and I'm recently making the switch to Vagrant so I applications can run in a virtual linux environment. It's alot better than typical Wamp setup. Vagrant alone has alot of benefits, such as equalizing developer/production environments and being portable.
I'm talking about character length of the lines, as it's the only accurate way to judge line lengths, IMO. Using tabs allows you 149 other potential characters of code in a 150 character length line. Using 4 spaces allows you 146 other potential characters of code. (Assuming a single indent).
Why do you care about this? Are you saying that saving bytes is better than readability? I care about how my code is viewed, because other people will certainly be reading my code at some point. If I have a preference to set my tab width to be 2 chars, the code is going to look shocking for someone who has set their tab-width to be 8 chars. They might then take the time to format the code to match their line lengths (based on how many chars per tab they've set), and suddenly we're in a pickle. Do you agree this is a terrible situation to be in? How do you avoid this situation? Sure you could have guidelines in your team (eg, set tab widths to be 4 spaces), but you cannot control that outside of your team. Although a tab is indeed 1 character they are still translated to (n) number of spaces in your text editor.
Doge as a service: http://dogr.io/wow/muchnotfound/soerror/checklink/manytimewaste/suchnolife/verydemo/muchbrokenparsing/nonumbers.png
&gt; Don't put the opening brace for methods on a new line - be consistent. As a person who absolutely hates cuddled parens/braces, I agree. I would rather suck it up and deal with what's really a minor niggle and have consistency. I love the PSRs because we can get all the arguing and teeth gnashing out of the way and from here on just point to a standard. Sure, I don't like all the decisions, but it's better than futzing with miscellaneous formatting methods and tools to try and maintain consistency.
And why should I force them to view it as a 4-space tab width? They have IDE's with their own configuration and can adjust a tab width to their exact liking. Requiring spaces is like requiring the GPL. You can use my stuff, but you HAVE to do it my way. Stop forcing your standards of what constitutes "pretty code" on others. I like 3-space tab width, Joe likes 6-space, and you like 4. With tabs we can all have it how we like, and it doesn't effect anyone else's readability. PSR-2 mandates a 4-space rule, which effects literally everyone else who prefers something other than 4-spaces for readability. Also, the code is NOT going to look shocking for someone who has set their tab-width to 8 chars. You know why? Because _they set it that way_ and that's what they expect. Tab indenting === Freedom of choice Space indenting === Freedom of choice, as long as you choose what we tell you to.
There's nothing worth for productivity than giving programmers choices about inconsequential things. This is one thing Guido van Rossum did that I think was absolutely brilliant - make formatting part of the language. Problem solved.
Didn't go through it all, but I'd use something like: http://us3.php.net/function.mssql-bind.php when taking $_GET variables and using them directly in your MSSQL query. Never, ever, ever trust users and their input. 
First and foremost, you are passing unsanitized variables from the querystring to the database in a query (lines 33 &amp; 34). Please use PDO if you can, and `sqlsrv_prepare()` (http://www.php.net/manual/en/function.sqlsrv-prepare.php) if you can't. Parameterized queries are a win-win situation, so **always** use them. Your HTML is being output via a `print()` statement, which isn't wrong, exactly, but why not just end the PHP section with `?&gt;` right before the doctype? Alternatively, use heredoc or nowdoc syntax. Those are the two big ones - use parameterized queries, and either break your HTML out into separate "view" files or at least take it out of the `print()` statements. It's much easier to edit your HTML when you don't have to keep track of both your PHP scope *and* DOM depth.
Composer has to read the composer.json files of the dependencies themselves and resolve their dependencies, which will likely include a fresh trip to packagist.org
Awesome! Just what I needed, e-mailing her now :D
Your rationale makes sense. Thanks!
Thanks for the reply. I had decided to go with a minor release for a package, though mostly because it got bundled with a few other changes. As with /u/evertrooftop's explanation above, your decision to only use a patch version makes sense. :)
Definitely a good move when working on a project at the day job or whatever, but when you make a PR against an open source project this still leads to huge amounts of conflict whatever happens. Whitespace changes happening ever are a pain in the ass. :)
Just for clarification: you and the other devs settled on a minor release, but your personal opinion is that a patch would suffice? And thanks for the reply!
What guessing is there? Finding the root of "autoloaded code" is always going to involve looking at where the autoloader is configured to point. If you're just using Composer then in PSR-0 and PSR-4 you know that it's PROBABLY going to be vendor/, but might not be. If you're not using Composer (or are, but are autoloading application code to) then you're going to have to work out where the root PSR-0 folder is, or where the root PSR-4 folder is. That again is identical. The only difference is that you dont have to repeat the folder structure that is proably already pretty damn logical. system/cms/modules/users/src/Pyro/Module/Users/Model/Groups.php Dumb. system/cms/modules/users/src/Pyro/Model/Groups.php Logical. Either way I had to know that the code was going to be in system/cms/modules/users/src and I had to find it. Once I've found that, it's not hard to know which is which, in either PSR-0 or PSR-4. Again, the only way this is complicated is if you use it to do something really dumb. If you have junior developers planning your architecture and assigning Apples/ to a folder called "oranges/" then point out that developer is being a dumbass.
Well that assumes that the only reason any company ever applies any style guide is purely for marketing reasons, and assumes that those sort of companies are the only people that the FIG are targeting. Neither of those assumptions is true. Definitely agree on the $a, $aa thing, and thats why having PHPMD is a great tool that people should definitely use.
Right by who? Either would do the job in an identical fashion. You're putting a lot of factual basis on the outcome of a coinflip decision. 
Very cool! Email sent. Thanks!
I agree that it's possible, but doesn't that eliminate the primary advantage of switching to PSR-4? That said, your reason for keeping the directory structure intact makes sense, since those distributions use a custom autoloader. That fits with the comment above.
I feel differently. To me the "metaprogramming stuff" lead us to the point where we could start defining interfaces, and not have a different naming convention and half camel half snake bullshit like alot of other PHP extensions. http://geocoder-php.org/Geocoder/ BuzzAdapter, GuzzleAdapter, RequestsAdapter... URF We want a HTTP Client PSR, but it is a huge thing to try and achieve. It was decided to split HTTP Message out and tackle that first, then tackle HTTP Client later. Things like this will be hugely beneficial to PHP as packages become more of a focus, but they do seem a little odd to the uninitiated. 
Thank you. Excuse my laziness, but I answered this again here. http://www.reddit.com/r/PHP/comments/1xtx2g/phpfig_autoloaders_amendments_and_the_15th/cffc184
No, some of their opinions were that patch would suffice until I pointed out that it would kinda fuck up non-Composer users, so it was agreed that MINOR was the best idea.
PSR-4 slightly simplifies because it throws out the old `_` syntax. This, in addition, also makes it a bit faster :)
Oh cool. Done.
&gt; If you have junior developers planning your architecture and assigning Apples/ to a folder called "oranges/" then point out that developer is being a dumbass. Hard to point out when the junior developer has done this mistake 10 years ago and is now one of the managers. I repeat: a lot of people are doing maintenance programming on shitty codebase for which a rewrite is nowhere in sight. Not everyone can work with the latest libraries and with good process. Fuck, I'm still hoping for the day I see a company using unit and acceptance tests seriously. Or simply code review.
If your using windows xp, then you can only go upto 5.4, but if your using xp you need a new machine Your better off using vagrant, then you can build the machine to match the same packages/dist as your love environment 
You are nonsensical. The application is Javascript, but the database and backend are not. I think most people here understood that fact. Why else would I be trying to implement a secure API if it was solely Javascript?